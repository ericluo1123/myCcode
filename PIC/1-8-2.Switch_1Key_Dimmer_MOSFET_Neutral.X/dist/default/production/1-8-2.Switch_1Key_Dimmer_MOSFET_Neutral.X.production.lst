

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Jan 23 13:33:10 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	psect	text93,local,class=CODE,merge=1,delta=2
   117                           	psect	text94,local,class=CODE,merge=1,delta=2
   118                           	psect	text95,local,class=CODE,merge=1,delta=2
   119                           	psect	text96,local,class=CODE,merge=1,delta=2
   120                           	psect	text97,local,class=CODE,merge=1,delta=2
   121                           	psect	text98,local,class=CODE,merge=1,delta=2
   122                           	psect	text99,local,class=CODE,merge=1,delta=2
   123                           	psect	text100,local,class=CODE,merge=1,delta=2
   124                           	psect	text101,local,class=CODE,merge=1,delta=2
   125                           	psect	text102,local,class=CODE,merge=1,delta=2
   126                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text106,local,class=CODE,merge=1,delta=2
   130                           	psect	text107,local,class=CODE,merge=1,delta=2
   131                           	psect	text108,local,class=CODE,merge=1,delta=2
   132                           	psect	text109,local,class=CODE,merge=1,delta=2
   133                           	psect	text110,local,class=CODE,merge=1,delta=2
   134                           	psect	text111,local,class=CODE,merge=1,delta=2
   135                           	psect	text112,local,class=CODE,merge=1,delta=2
   136                           	psect	text113,local,class=CODE,merge=1,delta=2
   137                           	psect	text114,local,class=CODE,merge=1,delta=2
   138                           	psect	text115,local,class=CODE,merge=1,delta=2
   139                           	psect	text116,local,class=CODE,merge=1,delta=2
   140                           	psect	text117,local,class=CODE,merge=1,delta=2
   141                           	psect	text118,local,class=CODE,merge=1,delta=2
   142                           	psect	text119,local,class=CODE,merge=1,delta=2
   143                           	psect	text120,local,class=CODE,merge=1,delta=2
   144                           	psect	text121,local,class=CODE,merge=1,delta=2
   145                           	psect	text122,local,class=CODE,merge=1,delta=2
   146                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text124,local,class=CODE,merge=1,delta=2
   148                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text126,local,class=CODE,merge=1,delta=2
   150                           	psect	text127,local,class=CODE,merge=1,delta=2
   151                           	psect	text128,local,class=CODE,merge=1,delta=2
   152                           	psect	text129,local,class=CODE,merge=1,delta=2
   153                           	psect	text130,local,class=CODE,merge=1,delta=2
   154                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text133,local,class=CODE,merge=1,delta=2
   157                           	psect	text134,local,class=CODE,merge=1,delta=2
   158                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text141,local,class=CODE,merge=1,delta=2
   165                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1061                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1061  3463               	retlw	99
  2172  1062  3402               	retlw	2
  2173  1063  3400               	retlw	0
  2174  1064  3400               	retlw	0
  2175  1065  3400               	retlw	0
  2176  1066  3400               	retlw	0
  2177  1067  3400               	retlw	0
  2178  1068  3400               	retlw	0
  2179  1069  3400               	retlw	0
  2180  106A  3400               	retlw	0
  2181  106B  3400               	retlw	0
  2182  106C  3400               	retlw	0
  2183  106D  34FF               	retlw	255
  2184  106E  34FF               	retlw	255
  2185  106F  34FF               	retlw	255
  2186  1070  3400               	retlw	0
  2187  1071  3400               	retlw	0
  2188  1072  3400               	retlw	0
  2189  1073  3400               	retlw	0
  2190  1074  3400               	retlw	0
  2191  1075  3400               	retlw	0
  2192  1076  3400               	retlw	0
  2193  1077  3400               	retlw	0
  2194  1078  3400               	retlw	0
  2195  1079  3400               	retlw	0
  2196  107A  3400               	retlw	0
  2197  107B  3400               	retlw	0
  2198  107C  3400               	retlw	0
  2199  107D  3400               	retlw	0
  2200  107E  3400               	retlw	0
  2201  107F  3400               	retlw	0
  2202  1080  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1800                     __pstringtext:	
  2206  1800                     _CC2500_registers_address:	
  2207  1800  3403               	retlw	3
  2208  1801  3416               	retlw	22
  2209  1802  3417               	retlw	23
  2210  1803  341E               	retlw	30
  2211  1804  341F               	retlw	31
  2212  1805  3420               	retlw	32
  2213  1806  342A               	retlw	42
  2214  1807  342B               	retlw	43
  2215  1808  340B               	retlw	11
  2216  1809  340C               	retlw	12
  2217  180A  340D               	retlw	13
  2218  180B  340E               	retlw	14
  2219  180C  340F               	retlw	15
  2220  180D  3410               	retlw	16
  2221  180E  3411               	retlw	17
  2222  180F  3412               	retlw	18
  2223  1810  3413               	retlw	19
  2224  1811  3414               	retlw	20
  2225  1812  340A               	retlw	10
  2226  1813  3415               	retlw	21
  2227  1814  3421               	retlw	33
  2228  1815  3422               	retlw	34
  2229  1816  3418               	retlw	24
  2230  1817  3419               	retlw	25
  2231  1818  341A               	retlw	26
  2232  1819  341B               	retlw	27
  2233  181A  341C               	retlw	28
  2234  181B  341D               	retlw	29
  2235  181C  3423               	retlw	35
  2236  181D  3424               	retlw	36
  2237  181E  3425               	retlw	37
  2238  181F  3426               	retlw	38
  2239  1820  3429               	retlw	41
  2240  1821  342C               	retlw	44
  2241  1822  342D               	retlw	45
  2242  1823  342E               	retlw	46
  2243  1824  3400               	retlw	0
  2244  1825  3401               	retlw	1
  2245  1826  3402               	retlw	2
  2246  1827  3407               	retlw	7
  2247  1828  3408               	retlw	8
  2248  1829  3409               	retlw	9
  2249  182A  3406               	retlw	6
  2250  182B  3404               	retlw	4
  2251  182C  3405               	retlw	5
  2252  182D  3427               	retlw	39
  2253  182E  3428               	retlw	40
  2254  182F                     __end_of_CC2500_registers_address:	
  2255  182F                     _CC2500_rfSettings:	
  2256  182F  3407               	retlw	7
  2257  1830  3407               	retlw	7
  2258  1831  3430               	retlw	48
  2259  1832  3487               	retlw	135
  2260  1833  346B               	retlw	107
  2261  1834  34F8               	retlw	248
  2262  1835  347F               	retlw	127
  2263  1836  343F               	retlw	63
  2264  1837  3409               	retlw	9
  2265  1838  3400               	retlw	0
  2266  1839  345C               	retlw	92
  2267  183A  34A7               	retlw	167
  2268  183B  3462               	retlw	98
  2269  183C  3486               	retlw	134
  2270  183D  3483               	retlw	131
  2271  183E  3403               	retlw	3
  2272  183F  3422               	retlw	34
  2273  1840  34F8               	retlw	248
  2274  1841  3400               	retlw	0
  2275  1842  3444               	retlw	68
  2276  1843  34B6               	retlw	182
  2277  1844  3410               	retlw	16
  2278  1845  3418               	retlw	24
  2279  1846  341D               	retlw	29
  2280  1847  341C               	retlw	28
  2281  1848  34C7               	retlw	199
  2282  1849  3400               	retlw	0
  2283  184A  34B2               	retlw	178
  2284  184B  34EA               	retlw	234
  2285  184C  340A               	retlw	10
  2286  184D  3400               	retlw	0
  2287  184E  3411               	retlw	17
  2288  184F  3459               	retlw	89
  2289  1850  3488               	retlw	136
  2290  1851  3431               	retlw	49
  2291  1852  340B               	retlw	11
  2292  1853  342F               	retlw	47
  2293  1854  342E               	retlw	46
  2294  1855  3406               	retlw	6
  2295  1856  3404               	retlw	4
  2296  1857  3405               	retlw	5
  2297  1858  3400               	retlw	0
  2298  1859  3430               	retlw	48
  2299  185A  34D3               	retlw	211
  2300  185B  3491               	retlw	145
  2301  185C  3441               	retlw	65
  2302  185D  3400               	retlw	0
  2303  185E                     __end_of_CC2500_rfSettings:	
  2304  185E                     _CC2500_patable_vaule:	
  2305  185E  34FE               	retlw	254
  2306  185F  34FE               	retlw	254
  2307  1860  34FE               	retlw	254
  2308  1861  34FE               	retlw	254
  2309  1862  34FE               	retlw	254
  2310  1863  34FE               	retlw	254
  2311  1864  34FE               	retlw	254
  2312  1865  34FE               	retlw	254
  2313  1866                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00EF                     __pnvBANK1:	
  2317  00EF                     _product:	
  2318  00EF                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006B                     _RB3	set	107
  2336  006D                     _RB5	set	109
  2337  0070                     _RC0	set	112
  2338  0071                     _RC1	set	113
  2339  0073                     _RC3	set	115
  2340  0074                     _RC4	set	116
  2341  0075                     _RC5	set	117
  2342  0088                     _TMR1IF	set	136
  2343  009D                     _ADCON0	set	157
  2344  009E                     _ADCON1	set	158
  2345  009C                     _ADRESH	set	156
  2346  009B                     _ADRESL	set	155
  2347  0099                     _OSCCON	set	153
  2348  008C                     _TRISA	set	140
  2349  008D                     _TRISB	set	141
  2350  008E                     _TRISC	set	142
  2351  0097                     _WDTCON	set	151
  2352  04E9                     _GO_nDONE	set	1257
  2353  0488                     _TMR1IE	set	1160
  2354  0117                     _FVRCON	set	279
  2355  010C                     _LATA	set	268
  2356  010D                     _LATB	set	269
  2357  010E                     _LATC	set	270
  2358  018C                     _ANSELA	set	396
  2359  018D                     _ANSELB	set	397
  2360  018E                     _ANSELC	set	398
  2361  0192                     _PMADRH	set	402
  2362  0191                     _PMADRL	set	401
  2363  0196                     _PMCON2	set	406
  2364  0194                     _PMDATH	set	404
  2365  0193                     _PMDATL	set	403
  2366  0CAE                     _CFGS	set	3246
  2367  0CAC                     _FREE	set	3244
  2368  0CAD                     _LWLO	set	3245
  2369  0CA8                     _RD	set	3240
  2370  0CA9                     _WR	set	3241
  2371  0CAA                     _WREN	set	3242
  2372  020D                     _WPUB	set	525
  2373  0396                     _IOCBF	set	918
  2374  0395                     _IOCBN	set	917
  2375  0394                     _IOCBP	set	916
  2376  1CB2                     _IOCBF2	set	7346
  2377                           
  2378                           ; #config settings
  2379  0000                     
  2380                           	psect	cinit
  2381  0022                     start_initialization:	
  2382  0022                     __initialization:	
  2383                           
  2384                           ; Clear objects allocated to BITCOMMON
  2385  0022  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2386                           
  2387                           ; Clear objects allocated to BITBANK0
  2388  0023  01E9               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK0
  2391  0024  01E3               	clrf	__pbssBANK0& (0+127)
  2392  0025  01E4               	clrf	(__pbssBANK0+1)& (0+127)
  2393  0026  01E5               	clrf	(__pbssBANK0+2)& (0+127)
  2394  0027  01E6               	clrf	(__pbssBANK0+3)& (0+127)
  2395  0028  01E7               	clrf	(__pbssBANK0+4)& (0+127)
  2396  0029  01E8               	clrf	(__pbssBANK0+5)& (0+127)
  2397                           
  2398                           ; Clear objects allocated to BANK1
  2399  002A  30A0               	movlw	low __pbssBANK1
  2400  002B  0084               	movwf	4
  2401  002C  3000               	movlw	high __pbssBANK1
  2402  002D  0085               	movwf	5
  2403  002E  303B               	movlw	59
  2404  002F  319B  23CD  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK2
  2407  0032  3020               	movlw	low __pbssBANK2
  2408  0033  0084               	movwf	4
  2409  0034  3001               	movlw	high __pbssBANK2
  2410  0035  0085               	movwf	5
  2411  0036  304E               	movlw	78
  2412  0037  319B  23CD  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Clear objects allocated to BANK3
  2415  003A  30A0               	movlw	low __pbssBANK3
  2416  003B  0084               	movwf	4
  2417  003C  3001               	movlw	high __pbssBANK3
  2418  003D  0085               	movwf	5
  2419  003E  304C               	movlw	76
  2420  003F  319B  23CD  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Initialize objects allocated to BANK4
  2423  0042  3061               	movlw	low __pidataBANK4
  2424  0043  0084               	movwf	4
  2425  0044  3090               	movlw	(high __pidataBANK4)| (0+128)
  2426  0045  0085               	movwf	5
  2427  0046  3020               	movlw	low __pdataBANK4
  2428  0047  0086               	movwf	6
  2429  0048  3002               	movlw	high __pdataBANK4
  2430  0049  0087               	movwf	7
  2431  004A  3020               	movlw	32
  2432  004B  319B  23C7         	fcall	init_ram
  2433  004D                     end_of_initialization:	
  2434                           ;End of C runtime variable initialization code
  2435                           
  2436  004D                     __end_of__initialization:	
  2437  004D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2438  004E  0020               	movlb	0
  2439  004F  3195  2DA9         	ljmp	_main	;jump to C main() function
  2440                           
  2441                           	psect	bitbssCOMMON
  2442  03E8                     __pbitbssCOMMON:	
  2443  03E8                     _Transceive_OK:	
  2444  03E8                     	ds	1
  2445                           
  2446                           	psect	bitbssBANK0
  2447  0348                     __pbitbssBANK0:	
  2448  0348                     _Receive_OK:	
  2449  0348                     	ds	1
  2450                           
  2451                           	psect	bssBANK0
  2452  0063                     __pbssBANK0:	
  2453  0063                     _DelayOff:	
  2454  0063                     	ds	1
  2455  0064                     _DimmerLights:	
  2456  0064                     	ds	1
  2457  0065                     _LED:	
  2458  0065                     	ds	1
  2459  0066                     _SPI0Buffer:	
  2460  0066                     	ds	1
  2461  0067                     _Sw:	
  2462  0067                     	ds	1
  2463  0068                     _Tx_Length:	
  2464  0068                     	ds	1
  2465                           
  2466                           	psect	bssBANK1
  2467  00A0                     __pbssBANK1:	
  2468  00A0                     _RF1:	
  2469  00A0                     	ds	14
  2470  00AE                     _Buz1:	
  2471  00AE                     	ds	12
  2472  00BA                     _DimmerIntr1:	
  2473  00BA                     	ds	9
  2474  00C3                     _RF_Count:	
  2475  00C3                     	ds	2
  2476  00C5                     _WDT:	
  2477  00C5                     	ds	2
  2478  00C7                     _CRC:	
  2479  00C7                     	ds	1
  2480  00C8                     _Cmd:	
  2481  00C8                     	ds	1
  2482  00C9                     _DimmerIntr:	
  2483  00C9                     	ds	1
  2484  00CA                     _Light:	
  2485  00CA                     	ds	1
  2486  00CB                     _RSSI:	
  2487  00CB                     	ds	1
  2488  00CC                     _Rx_Length:	
  2489  00CC                     	ds	1
  2490  00CD                     _SwDetect:	
  2491  00CD                     	ds	1
  2492  00CE                     _r_address:	
  2493  00CE                     	ds	1
  2494  00CF                     _r_data:	
  2495  00CF                     	ds	1
  2496  00D0                     _s_data:	
  2497  00D0                     	ds	1
  2498  00D1                     _Temp:	
  2499  00D1                     	ds	10
  2500                           
  2501                           	psect	bssBANK2
  2502  0120                     __pbssBANK2:	
  2503  0120                     _myMain:	
  2504  0120                     	ds	13
  2505  012D                     _Dimmer:	
  2506  012D                     	ds	5
  2507  0132                     _Timer1:	
  2508  0132                     	ds	3
  2509  0135                     _Load:	
  2510  0135                     	ds	40
  2511  015D                     _DimmerLights1:	
  2512  015D                     	ds	8
  2513  0165                     _DlySw1:	
  2514  0165                     	ds	5
  2515  016A                     _VarErrLED:	
  2516  016A                     	ds	4
  2517                           
  2518                           	psect	bssBANK3
  2519  01A0                     __pbssBANK3:	
  2520  01A0                     _RF_Data:	
  2521  01A0                     	ds	30
  2522  01BE                     _Memory:	
  2523  01BE                     	ds	37
  2524  01E3                     _Sw1:	
  2525  01E3                     	ds	9
  2526                           
  2527                           	psect	dataBANK4
  2528  0220                     __pdataBANK4:	
  2529  0220                     __product:	
  2530  0220                     	ds	32
  2531                           
  2532                           	psect	clrtext
  2533  1BCD                     clear_ram0:	
  2534                           ;	Called with FSR0 containing the base address, and
  2535                           ;	WREG with the size to clear
  2536                           
  2537  1BCD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2538  1BCE                     clrloop0:	
  2539  1BCE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2540  1BCF  3101               	addfsr 0,1
  2541  1BD0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2542  1BD1  2BCE               	goto	clrloop0	;have we reached the end yet?
  2543  1BD2  3400               	retlw	0	;all done for this memory range, return
  2544                           
  2545                           	psect	inittext
  2546  1BC7                     init_ram:	
  2547  1BC7  00FE               	movwf	126
  2548  1BC8                     initloop:	
  2549  1BC8  0012               	moviw fsr0++
  2550  1BC9  001E               	movwi fsr1++
  2551  1BCA  0BFE               	decfsz	126,f
  2552  1BCB  2BC8               	goto	initloop
  2553  1BCC  3400               	retlw	0
  2554                           
  2555                           	psect	cstackBANK4
  2556  0240                     __pcstackBANK4:	
  2557  0240                     ?_main:	
  2558  0240                     main@argc:	
  2559                           ; 2 bytes @ 0x0
  2560                           
  2561                           
  2562                           ; 2 bytes @ 0x0
  2563  0240                     	ds	2
  2564  0242                     main@argv:	
  2565                           
  2566                           ; 2 bytes @ 0x2
  2567  0242                     	ds	2
  2568                           
  2569                           	psect	cstackBANK3
  2570  01EC                     __pcstackBANK3:	
  2571  01EC                     setRF_Main@error:	
  2572                           
  2573                           ; 1 bytes @ 0x0
  2574  01EC                     	ds	1
  2575                           
  2576                           	psect	cstackBANK2
  2577  016E                     __pcstackBANK2:	
  2578  016E                     setDimmerLights_Main@lights:	
  2579  016E                     getRxData@error:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582                           
  2583                           ; 1 bytes @ 0x0
  2584  016E                     	ds	1
  2585  016F                     ??_setRF_Main:	
  2586                           
  2587                           ; 0 bytes @ 0x1
  2588  016F                     	ds	1
  2589                           
  2590                           	psect	cstackBANK1
  2591  00DB                     __pcstackBANK1:	
  2592  00DB                     ??_getDimmerLights_PercentToValue:	
  2593  00DB                     ??_getDimmerLights_ValueToPercent:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596                           
  2597                           ; 0 bytes @ 0x0
  2598  00DB                     	ds	2
  2599  00DD                     getDimmerLights_PercentToValue@value:	
  2600  00DD                     getDimmerLights_ValueToPercent@value:	
  2601                           ; 1 bytes @ 0x2
  2602                           
  2603                           
  2604                           ; 1 bytes @ 0x2
  2605  00DD                     	ds	1
  2606  00DE                     getDimmerLights_PercentToValue@i:	
  2607  00DE                     getDimmerLights_ValueToPercent@i:	
  2608                           ; 3 bytes @ 0x3
  2609                           
  2610                           
  2611                           ; 3 bytes @ 0x3
  2612  00DE                     	ds	3
  2613  00E1                     ?_setProductData:	
  2614  00E1                     ?_setDimmerIntr_MaxmumValue:	
  2615                           ; 0 bytes @ 0x6
  2616                           
  2617  00E1                     setDimmerIntr_MaxmumValue@value:	
  2618                           ; 0 bytes @ 0x6
  2619                           
  2620  00E1                     Flash_Memory_Initialization@i:	
  2621                           ; 1 bytes @ 0x6
  2622                           
  2623  00E1                     setProductData@value:	
  2624                           ; 1 bytes @ 0x6
  2625                           
  2626                           
  2627                           ; 1 bytes @ 0x6
  2628  00E1                     	ds	1
  2629  00E2                     setDimmerIntr_MaxmumValue@lights:	
  2630  00E2                     setProductData@address:	
  2631                           ; 1 bytes @ 0x7
  2632                           
  2633                           
  2634                           ; 1 bytes @ 0x7
  2635  00E2                     	ds	1
  2636  00E3                     ??_DlyOff_Main:	
  2637  00E3                     ?_setRF_DimmerLights:	
  2638                           ; 0 bytes @ 0x8
  2639                           
  2640  00E3                     ??_setTemp_Main:	
  2641                           ; 0 bytes @ 0x8
  2642                           
  2643  00E3                     ??_setLog_Code:	
  2644                           ; 0 bytes @ 0x8
  2645                           
  2646  00E3                     ??_setRFSW_AdjControl:	
  2647                           ; 0 bytes @ 0x8
  2648                           
  2649  00E3                     ?_setDelayOff_GO:	
  2650                           ; 0 bytes @ 0x8
  2651                           
  2652  00E3                     setDelayOff_GO@command:	
  2653                           ; 0 bytes @ 0x8
  2654                           
  2655  00E3                     setRF_DimmerLights@on:	
  2656                           ; 1 bytes @ 0x8
  2657                           
  2658                           
  2659                           ; 1 bytes @ 0x8
  2660  00E3                     	ds	1
  2661  00E4                     ??_setRF_DimmerLights:	
  2662  00E4                     setDelayOff_GO@value:	
  2663                           ; 0 bytes @ 0x9
  2664                           
  2665  00E4                     setTemp_Main@error:	
  2666                           ; 1 bytes @ 0x9
  2667                           
  2668                           
  2669                           ; 1 bytes @ 0x9
  2670  00E4                     	ds	1
  2671  00E5                     ??_setDelayOff_GO:	
  2672  00E5                     DlyOff_Main@sw:	
  2673                           ; 0 bytes @ 0xA
  2674                           
  2675  00E5                     setTemp_Main@TempGO:	
  2676                           ; 1 bytes @ 0xA
  2677                           
  2678  00E5                     setRFSW_AdjControl@status:	
  2679                           ; 1 bytes @ 0xA
  2680                           
  2681                           
  2682                           ; 1 bytes @ 0xA
  2683  00E5                     	ds	1
  2684  00E6                     setRFSW_AdjControl@sw:	
  2685  00E6                     setRF_DimmerLights@status:	
  2686                           ; 1 bytes @ 0xB
  2687                           
  2688  00E6                     setTemp_Main@SafeValue:	
  2689                           ; 1 bytes @ 0xB
  2690                           
  2691                           
  2692                           ; 2 bytes @ 0xB
  2693  00E6                     	ds	1
  2694  00E7                     setDelayOff_GO@i:	
  2695  00E7                     setRF_DimmerLights@lights:	
  2696                           ; 1 bytes @ 0xC
  2697                           
  2698                           
  2699                           ; 1 bytes @ 0xC
  2700  00E7                     	ds	1
  2701  00E8                     ?_setDimmerLights_Dimming:	
  2702  00E8                     setDelayOff_GO@j:	
  2703                           ; 0 bytes @ 0xD
  2704                           
  2705  00E8                     setDimmerLights_Dimming@status:	
  2706                           ; 1 bytes @ 0xD
  2707                           
  2708  00E8                     setTemp_Main@DangerValue:	
  2709                           ; 1 bytes @ 0xD
  2710                           
  2711                           
  2712                           ; 2 bytes @ 0xD
  2713  00E8                     	ds	1
  2714  00E9                     ??_setDimmerLights_Dimming:	
  2715  00E9                     setDelayOff_GO@k:	
  2716                           ; 0 bytes @ 0xE
  2717                           
  2718                           
  2719                           ; 1 bytes @ 0xE
  2720  00E9                     	ds	1
  2721  00EA                     setDelayOff_GO@sw:	
  2722  00EA                     setDimmerLights_Dimming@lights:	
  2723                           ; 1 bytes @ 0xF
  2724                           
  2725  00EA                     setTemp_Main@AD:	
  2726                           ; 1 bytes @ 0xF
  2727                           
  2728                           
  2729                           ; 2 bytes @ 0xF
  2730  00EA                     	ds	1
  2731  00EB                     ?_setDimmerLights_OnOff:	
  2732  00EB                     ??_setRFSW_Control:	
  2733                           ; 0 bytes @ 0x10
  2734                           
  2735  00EB                     setDimmerLights_OnOff@command:	
  2736                           ; 0 bytes @ 0x10
  2737                           
  2738                           
  2739                           ; 1 bytes @ 0x10
  2740  00EB                     	ds	1
  2741  00EC                     ??_setDimmerLights_OnOff:	
  2742  00EC                     setRFSW_Control@status:	
  2743                           ; 0 bytes @ 0x11
  2744                           
  2745                           
  2746                           ; 1 bytes @ 0x11
  2747  00EC                     	ds	1
  2748  00ED                     setRFSW_Control@sw:	
  2749                           
  2750                           ; 1 bytes @ 0x12
  2751  00ED                     	ds	1
  2752  00EE                     ??_getRxData:	
  2753  00EE                     setDimmerLights_OnOff@lights:	
  2754                           ; 0 bytes @ 0x13
  2755                           
  2756                           
  2757                           ; 1 bytes @ 0x13
  2758  00EE                     	ds	1
  2759                           
  2760                           	psect	cstackCOMMON
  2761  0070                     __pcstackCOMMON:	
  2762  0070                     ?_CC2500_WriteCommand:	
  2763  0070                     ?_RF_Timeout_Counter:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setRF_TimeoutCleared:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_CC2500_WriteByte:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_CC2500_ReadStatus:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_CC2500_ReadByte:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_CC2500_PowerRST:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_CC2500_InitSetREG:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_CC2500_InitPATable:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_CC2500_ClearTXFIFO:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_CC2500_ClearRXFIFO:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_CC2500_FrequencyCabr:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_CC2500_SIDLEMode:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_DlyOff_Initialization:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_DlyOff_Main:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setDimmerLights_SwOn:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setDimmerLights_SwOff:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_setDimmerLights_Initialization:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_setDimmerLights_Main:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_setDimmerLights_Line:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_setTxData:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_setRF_TransceiveGO:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_setLED_Initialization:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_setLED_Main:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_Fosc_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_IO_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_TMR1_Set:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_ADC_Set:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_IOC_Set:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_WDT_Set:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_TMR1_ISR:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_IOC_ISR:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ??_IOC_ISR:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_Timeout_Counter:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_set_TimeoutCleared:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_Flash_Memory_Write:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_Flash_Memory_Modify:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_WDT_Clearing:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_myMain_Initialization:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_Temp_Initialization:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_Load_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_Switch_Initialization:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_RF_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_getLoad_AD:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_getTemp_AD:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_my_MainTimer:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Temp_Main:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_Load_Main:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_Switch_Main:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_RF_Main:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_Exception_Main:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_setLoad_AH_AL_Restore:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_setTemp_Initialization:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_setTemp_Main:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_setRF_Initialization:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_setRF_Main:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0070                     ?_RF_RxDisable:	
  2929                           ; 0 bytes @ 0x0
  2930                           
  2931  0070                     ?_getRxData:	
  2932                           ; 0 bytes @ 0x0
  2933                           
  2934  0070                     ?_setLog_Code:	
  2935                           ; 0 bytes @ 0x0
  2936                           
  2937  0070                     ?_setControl_Lights_Table:	
  2938                           ; 0 bytes @ 0x0
  2939                           
  2940  0070                     ?_setRFSW_Control:	
  2941                           ; 0 bytes @ 0x0
  2942                           
  2943  0070                     ?_setRFSW_AdjControl:	
  2944                           ; 0 bytes @ 0x0
  2945                           
  2946  0070                     ?_setSw_Initialization:	
  2947                           ; 0 bytes @ 0x0
  2948                           
  2949  0070                     ?_setSw_Main:	
  2950                           ; 0 bytes @ 0x0
  2951                           
  2952  0070                     ?_Buzzer_Initialization:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0070                     ?_Buzzer_Main:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0070                     ?_CC2500_TxData:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0070                     ?_CC2500_RxData:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0070                     ?_CC2500_PowerOnInitial:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0070                     ?_DelayOffPointSelect:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0070                     ?_DelayOff_Initialization:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0070                     ?_DelayOff_Main:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0070                     ?_DimmerIntr_Initialization:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0070                     ?_DimmerLights_SelectPointer:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0070                     ?_DimmerLights_Initialization:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0070                     ?_setDimmerLights_DimmingOn:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0070                     ?_DimmerLights_Main:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0070                     ?_DimmerLights_TMR_1:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0070                     ?_DimmerLights_IOC_1:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0070                     ??_DimmerLights_IOC_1:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0070                     ?_LedPointSelect:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0070                     ?_LED_Initialization:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0070                     ?_LED_Main:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0070                     ?_Mcu_Initialization:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0070                     ?_ISR:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0070                     ?_Flash_Memory_Initialization:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0070                     ?_Flash_Memory_Main:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0070                     ?_Flash_Memory_Unlock:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0070                     ?_Flash_Memory_Erasing:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0070                     ?_setMemory_Modify:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0070                     ?_setMemory_LoopSave:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0070                     ?_WDT_Main:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0070                     ?_setRF_Learn:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0070                     ?_TouchPower:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0070                     ?_SwPointSelect:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0070                     ?_getDimmerLights_Status:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0070                     ?_getLoad_OK:	
  3049                           ; 1 bytes @ 0x0
  3050                           
  3051  0070                     ?_getMain_All_Error_Status:	
  3052                           ; 1 bytes @ 0x0
  3053                           
  3054  0070                     ?_getMain_All_LightsStatus:	
  3055                           ; 1 bytes @ 0x0
  3056                           
  3057  0070                     ?_getDimmerLights_Allow_Condition:	
  3058                           ; 1 bytes @ 0x0
  3059                           
  3060  0070                     ?_getDimmerLights_PercentToValue:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063  0070                     ?_getDimmerLights_ValueToPercent:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066  0070                     ?_getCmd_Status:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0070                     ?_Flash_Memory_Read:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072  0070                     ?_getRF_KeyStatus:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0070                     ?_getSw_KeyStatus:	
  3076                           ; 1 bytes @ 0x0
  3077                           
  3078  0070                     ?_getDelayOff_GO:	
  3079                           ; 1 bytes @ 0x0
  3080                           
  3081  0070                     ?_getDimmerIntr_DimmingValue:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0070                     ?_getDimmerLights_Line:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0070                     ?_getDimmer_LoadGO:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0070                     ?_getDimmer_Load_Status:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0070                     ?_getMain_Lights_Count:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0070                     ?___lbdiv:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102  0070                     setDimmerLights_Initialization@lights:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105  0070                     getDimmerLights_Allow_Condition@lights:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108  0070                     getSw_KeyStatus@sw:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111  0070                     ___lbdiv@divisor:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114                           
  3115                           ; 1 bytes @ 0x0
  3116  0070                     	ds	1
  3117  0071                     ??___lbdiv:	
  3118                           
  3119                           ; 0 bytes @ 0x1
  3120  0071                     	ds	1
  3121  0072                     ___lbdiv@dividend:	
  3122                           
  3123                           ; 1 bytes @ 0x2
  3124  0072                     	ds	1
  3125  0073                     ___lbdiv@counter:	
  3126                           
  3127                           ; 1 bytes @ 0x3
  3128  0073                     	ds	1
  3129  0074                     ___lbdiv@quotient:	
  3130                           
  3131                           ; 1 bytes @ 0x4
  3132  0074                     	ds	1
  3133  0075                     ?_Division:	
  3134  0075                     Division@num:	
  3135                           ; 1 bytes @ 0x5
  3136                           
  3137                           
  3138                           ; 1 bytes @ 0x5
  3139  0075                     	ds	1
  3140  0076                     ??_Division:	
  3141                           
  3142                           ; 0 bytes @ 0x6
  3143  0076                     	ds	2
  3144  0078                     Division@value:	
  3145                           
  3146                           ; 1 bytes @ 0x8
  3147  0078                     	ds	1
  3148  0079                     Division@result:	
  3149                           
  3150                           ; 1 bytes @ 0x9
  3151  0079                     	ds	1
  3152  007A                     ??_DimmerLights_TMR_1:	
  3153                           
  3154                           ; 0 bytes @ 0xA
  3155  007A                     	ds	2
  3156  007C                     ??_TMR1_ISR:	
  3157  007C                     ??_ISR:	
  3158                           ; 0 bytes @ 0xC
  3159                           
  3160                           
  3161                           ; 0 bytes @ 0xC
  3162  007C                     	ds	1
  3163                           
  3164                           	psect	cstackBANK0
  3165  0020                     __pcstackBANK0:	
  3166  0020                     DimmerLights_TMR_1@TuneValue4:	
  3167                           
  3168                           ; 1 bytes @ 0x0
  3169  0020                     	ds	1
  3170  0021                     DimmerLights_TMR_1@count:	
  3171                           
  3172                           ; 1 bytes @ 0x1
  3173  0021                     	ds	1
  3174  0022                     DimmerLights_TMR_1@dimming:	
  3175                           
  3176                           ; 1 bytes @ 0x2
  3177  0022                     	ds	1
  3178  0023                     DimmerLights_TMR_1@TuneValue1:	
  3179                           
  3180                           ; 1 bytes @ 0x3
  3181  0023                     	ds	1
  3182  0024                     DimmerLights_TMR_1@TuneValue2:	
  3183                           
  3184                           ; 1 bytes @ 0x4
  3185  0024                     	ds	1
  3186  0025                     DimmerLights_TMR_1@TuneValue3:	
  3187                           
  3188                           ; 1 bytes @ 0x5
  3189  0025                     	ds	1
  3190  0026                     ??_RF_Timeout_Counter:	
  3191  0026                     ??_setRF_TimeoutCleared:	
  3192                           ; 0 bytes @ 0x6
  3193                           
  3194  0026                     ??_CC2500_WriteByte:	
  3195                           ; 0 bytes @ 0x6
  3196                           
  3197  0026                     ??_CC2500_ReadByte:	
  3198                           ; 0 bytes @ 0x6
  3199                           
  3200  0026                     ?_DelayTime_1us:	
  3201                           ; 0 bytes @ 0x6
  3202                           
  3203  0026                     ??_setDimmerLights_Initialization:	
  3204                           ; 0 bytes @ 0x6
  3205                           
  3206  0026                     ??_getLoad_OK:	
  3207                           ; 0 bytes @ 0x6
  3208                           
  3209  0026                     ??_getMain_All_Error_Status:	
  3210                           ; 0 bytes @ 0x6
  3211                           
  3212  0026                     ??_getMain_All_LightsStatus:	
  3213                           ; 0 bytes @ 0x6
  3214                           
  3215  0026                     ??_setDimmerLights_Line:	
  3216                           ; 0 bytes @ 0x6
  3217                           
  3218  0026                     ??_getCmd_Status:	
  3219                           ; 0 bytes @ 0x6
  3220                           
  3221  0026                     ?_setCmd_Status:	
  3222                           ; 0 bytes @ 0x6
  3223                           
  3224  0026                     ??_setTxData:	
  3225                           ; 0 bytes @ 0x6
  3226                           
  3227  0026                     ??_setRF_TransceiveGO:	
  3228                           ; 0 bytes @ 0x6
  3229                           
  3230  0026                     ??_Fosc_Set:	
  3231                           ; 0 bytes @ 0x6
  3232                           
  3233  0026                     ??_IO_Set:	
  3234                           ; 0 bytes @ 0x6
  3235                           
  3236  0026                     ??_TMR1_Set:	
  3237                           ; 0 bytes @ 0x6
  3238                           
  3239  0026                     ??_ADC_Set:	
  3240                           ; 0 bytes @ 0x6
  3241                           
  3242  0026                     ??_IOC_Set:	
  3243                           ; 0 bytes @ 0x6
  3244                           
  3245  0026                     ??_WDT_Set:	
  3246                           ; 0 bytes @ 0x6
  3247                           
  3248  0026                     ??_Timeout_Counter:	
  3249                           ; 0 bytes @ 0x6
  3250                           
  3251  0026                     ??_set_TimeoutCleared:	
  3252                           ; 0 bytes @ 0x6
  3253                           
  3254  0026                     ??_Flash_Memory_Read:	
  3255                           ; 0 bytes @ 0x6
  3256                           
  3257  0026                     ?_setMemory_Data:	
  3258                           ; 0 bytes @ 0x6
  3259                           
  3260  0026                     ??_Flash_Memory_Write:	
  3261                           ; 0 bytes @ 0x6
  3262                           
  3263  0026                     ??_WDT_Clearing:	
  3264                           ; 0 bytes @ 0x6
  3265                           
  3266  0026                     ??_myMain_Initialization:	
  3267                           ; 0 bytes @ 0x6
  3268                           
  3269  0026                     ??_Temp_Initialization:	
  3270                           ; 0 bytes @ 0x6
  3271                           
  3272  0026                     ??_setLoad_AH_AL_Restore:	
  3273                           ; 0 bytes @ 0x6
  3274                           
  3275  0026                     ??_setTemp_Initialization:	
  3276                           ; 0 bytes @ 0x6
  3277                           
  3278  0026                     ??_setRF_Initialization:	
  3279                           ; 0 bytes @ 0x6
  3280                           
  3281  0026                     ??_getRF_KeyStatus:	
  3282                           ; 0 bytes @ 0x6
  3283                           
  3284  0026                     ??_getSw_KeyStatus:	
  3285                           ; 0 bytes @ 0x6
  3286                           
  3287  0026                     ??_Buzzer_Initialization:	
  3288                           ; 0 bytes @ 0x6
  3289                           
  3290  0026                     ??_Buzzer_Main:	
  3291                           ; 0 bytes @ 0x6
  3292                           
  3293  0026                     ??_DelayOffPointSelect:	
  3294                           ; 0 bytes @ 0x6
  3295                           
  3296  0026                     ??_DimmerIntr_Initialization:	
  3297                           ; 0 bytes @ 0x6
  3298                           
  3299  0026                     ?_setDimmerIntr_ControlStatus:	
  3300                           ; 0 bytes @ 0x6
  3301                           
  3302  0026                     ?_setDimmerIntr_DimmingValue:	
  3303                           ; 0 bytes @ 0x6
  3304                           
  3305  0026                     ??_getDimmerIntr_DimmingValue:	
  3306                           ; 0 bytes @ 0x6
  3307                           
  3308  0026                     ?_setDimmerIntr_Dimming_Sw:	
  3309                           ; 0 bytes @ 0x6
  3310                           
  3311  0026                     ?_setDimmerIntr_Dimming_RF:	
  3312                           ; 0 bytes @ 0x6
  3313                           
  3314  0026                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3315                           ; 0 bytes @ 0x6
  3316                           
  3317  0026                     ??_DimmerLights_SelectPointer:	
  3318                           ; 0 bytes @ 0x6
  3319                           
  3320  0026                     ??_getDimmerLights_Line:	
  3321                           ; 0 bytes @ 0x6
  3322                           
  3323  0026                     ??_getDimmer_LoadGO:	
  3324                           ; 0 bytes @ 0x6
  3325                           
  3326  0026                     ??_getDimmer_Load_Status:	
  3327                           ; 0 bytes @ 0x6
  3328                           
  3329  0026                     ??_LedPointSelect:	
  3330                           ; 0 bytes @ 0x6
  3331                           
  3332  0026                     ??_Flash_Memory_Unlock:	
  3333                           ; 0 bytes @ 0x6
  3334                           
  3335  0026                     ??_Flash_Memory_Erasing:	
  3336                           ; 0 bytes @ 0x6
  3337                           
  3338  0026                     ??_setMemory_Modify:	
  3339                           ; 0 bytes @ 0x6
  3340                           
  3341  0026                     ??_setMemory_LoopSave:	
  3342                           ; 0 bytes @ 0x6
  3343                           
  3344  0026                     ??_WDT_Main:	
  3345                           ; 0 bytes @ 0x6
  3346                           
  3347  0026                     ??_getMain_Lights_Count:	
  3348                           ; 0 bytes @ 0x6
  3349                           
  3350  0026                     ??_setRF_Learn:	
  3351                           ; 0 bytes @ 0x6
  3352                           
  3353  0026                     ??_TouchPower:	
  3354                           ; 0 bytes @ 0x6
  3355                           
  3356  0026                     ??_SwPointSelect:	
  3357                           ; 0 bytes @ 0x6
  3358                           
  3359  0026                     ?___bmul:	
  3360                           ; 0 bytes @ 0x6
  3361                           
  3362  0026                     ?_getBuz_GO:	
  3363                           ; 1 bytes @ 0x6
  3364                           
  3365  0026                     ?_getAD:	
  3366                           ; 2 bytes @ 0x6
  3367                           
  3368  0026                     ?___wmul:	
  3369                           ; 2 bytes @ 0x6
  3370                           
  3371  0026                     ?___awdiv:	
  3372                           ; 2 bytes @ 0x6
  3373                           
  3374  0026                     ?___lwdiv:	
  3375                           ; 2 bytes @ 0x6
  3376                           
  3377  0026                     ?___ftpack:	
  3378                           ; 2 bytes @ 0x6
  3379                           
  3380  0026                     setDimmerIntr_ControlStatus@command:	
  3381                           ; 3 bytes @ 0x6
  3382                           
  3383  0026                     setDimmerIntr_DimmingValue@value:	
  3384                           ; 1 bytes @ 0x6
  3385                           
  3386  0026                     setDimmerIntr_Dimming_Sw@command:	
  3387                           ; 1 bytes @ 0x6
  3388                           
  3389  0026                     setDimmerIntr_Dimming_RF@command:	
  3390                           ; 1 bytes @ 0x6
  3391                           
  3392  0026                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3393                           ; 1 bytes @ 0x6
  3394                           
  3395  0026                     setDimmerLights_Line@lights:	
  3396                           ; 1 bytes @ 0x6
  3397                           
  3398  0026                     getDimmerLights_Line@line:	
  3399                           ; 1 bytes @ 0x6
  3400                           
  3401  0026                     getDimmer_LoadGO@loadgo:	
  3402                           ; 1 bytes @ 0x6
  3403                           
  3404  0026                     getDimmer_Load_Status@status:	
  3405                           ; 1 bytes @ 0x6
  3406                           
  3407  0026                     getAD@adcon1:	
  3408                           ; 1 bytes @ 0x6
  3409                           
  3410  0026                     setMemory_Data@data:	
  3411                           ; 1 bytes @ 0x6
  3412                           
  3413  0026                     getMain_All_LightsStatus@status:	
  3414                           ; 1 bytes @ 0x6
  3415                           
  3416  0026                     getMain_Lights_Count@count:	
  3417                           ; 1 bytes @ 0x6
  3418                           
  3419  0026                     setCmd_Status@cmd:	
  3420                           ; 1 bytes @ 0x6
  3421                           
  3422  0026                     getCmd_Status@number:	
  3423                           ; 1 bytes @ 0x6
  3424                           
  3425  0026                     getLoad_OK@ok:	
  3426                           ; 1 bytes @ 0x6
  3427                           
  3428  0026                     ___bmul@multiplicand:	
  3429                           ; 1 bytes @ 0x6
  3430                           
  3431  0026                     DelayTime_1us@count:	
  3432                           ; 1 bytes @ 0x6
  3433                           
  3434  0026                     ___wmul@multiplier:	
  3435                           ; 2 bytes @ 0x6
  3436                           
  3437  0026                     ___awdiv@divisor:	
  3438                           ; 2 bytes @ 0x6
  3439                           
  3440  0026                     ___lwdiv@divisor:	
  3441                           ; 2 bytes @ 0x6
  3442                           
  3443  0026                     ___ftpack@arg:	
  3444                           ; 2 bytes @ 0x6
  3445                           
  3446                           
  3447                           ; 3 bytes @ 0x6
  3448  0026                     	ds	1
  3449  0027                     ??_getDimmerLights_Allow_Condition:	
  3450  0027                     ??_setCmd_Status:	
  3451                           ; 0 bytes @ 0x7
  3452                           
  3453  0027                     ??_setMemory_Data:	
  3454                           ; 0 bytes @ 0x7
  3455                           
  3456  0027                     ??_RF_Initialization:	
  3457                           ; 0 bytes @ 0x7
  3458                           
  3459  0027                     ??_setDimmerIntr_ControlStatus:	
  3460                           ; 0 bytes @ 0x7
  3461                           
  3462  0027                     ??_setDimmerIntr_DimmingValue:	
  3463                           ; 0 bytes @ 0x7
  3464                           
  3465  0027                     ??_setDimmerIntr_Dimming_Sw:	
  3466                           ; 0 bytes @ 0x7
  3467                           
  3468  0027                     ??_setDimmerIntr_Dimming_RF:	
  3469                           ; 0 bytes @ 0x7
  3470                           
  3471  0027                     ??_DimmerLights_Initialization:	
  3472                           ; 0 bytes @ 0x7
  3473                           
  3474  0027                     ??_Mcu_Initialization:	
  3475                           ; 0 bytes @ 0x7
  3476                           
  3477  0027                     ??___bmul:	
  3478                           ; 0 bytes @ 0x7
  3479                           
  3480  0027                     CC2500_WriteByte@loop_a:	
  3481                           ; 0 bytes @ 0x7
  3482                           
  3483  0027                     CC2500_ReadByte@loop_b:	
  3484                           ; 1 bytes @ 0x7
  3485                           
  3486  0027                     DelayOffPointSelect@sw:	
  3487                           ; 1 bytes @ 0x7
  3488                           
  3489  0027                     getDimmerIntr_DimmingValue@lights:	
  3490                           ; 1 bytes @ 0x7
  3491                           
  3492  0027                     DimmerLights_SelectPointer@lights:	
  3493                           ; 1 bytes @ 0x7
  3494                           
  3495  0027                     LedPointSelect@led:	
  3496                           ; 1 bytes @ 0x7
  3497                           
  3498  0027                     Flash_Memory_Read@i:	
  3499                           ; 1 bytes @ 0x7
  3500                           
  3501  0027                     Flash_Memory_Write@i:	
  3502                           ; 1 bytes @ 0x7
  3503                           
  3504  0027                     setMemory_Modify@command:	
  3505                           ; 1 bytes @ 0x7
  3506                           
  3507  0027                     setMemory_LoopSave@command:	
  3508                           ; 1 bytes @ 0x7
  3509                           
  3510  0027                     getMain_Lights_Count@status1:	
  3511                           ; 1 bytes @ 0x7
  3512                           
  3513  0027                     getCmd_Status@cmd:	
  3514                           ; 1 bytes @ 0x7
  3515                           
  3516  0027                     setLoad_AH_AL_Restore@i:	
  3517                           ; 1 bytes @ 0x7
  3518                           
  3519  0027                     setRF_Learn@command:	
  3520                           ; 1 bytes @ 0x7
  3521                           
  3522  0027                     getRF_KeyStatus@key:	
  3523                           ; 1 bytes @ 0x7
  3524                           
  3525  0027                     setRF_TransceiveGO@command:	
  3526                           ; 1 bytes @ 0x7
  3527                           
  3528  0027                     SwPointSelect@sw:	
  3529                           ; 1 bytes @ 0x7
  3530                           
  3531  0027                     getSw_KeyStatus@status:	
  3532                           ; 1 bytes @ 0x7
  3533                           
  3534  0027                     _getMain_All_Error_Status$3505:	
  3535                           ; 1 bytes @ 0x7
  3536                           
  3537                           
  3538                           ; 2 bytes @ 0x7
  3539  0027                     	ds	1
  3540  0028                     ??_CC2500_WriteCommand:	
  3541  0028                     ??_CC2500_ReadStatus:	
  3542                           ; 0 bytes @ 0x8
  3543                           
  3544  0028                     ??_DelayTime_1us:	
  3545                           ; 0 bytes @ 0x8
  3546                           
  3547  0028                     ?_CC2500_WriteREG:	
  3548                           ; 0 bytes @ 0x8
  3549                           
  3550  0028                     ??_DlyOff_Initialization:	
  3551                           ; 0 bytes @ 0x8
  3552                           
  3553  0028                     ??_getDimmerLights_Status:	
  3554                           ; 0 bytes @ 0x8
  3555                           
  3556  0028                     ??_setDimmerLights_SwOff:	
  3557                           ; 0 bytes @ 0x8
  3558                           
  3559  0028                     ?_setLED:	
  3560                           ; 0 bytes @ 0x8
  3561                           
  3562  0028                     ??_setLED_Main:	
  3563                           ; 0 bytes @ 0x8
  3564                           
  3565  0028                     ??_Load_Initialization:	
  3566                           ; 0 bytes @ 0x8
  3567                           
  3568  0028                     ??_getBuz_GO:	
  3569                           ; 0 bytes @ 0x8
  3570                           
  3571  0028                     ??_getDelayOff_GO:	
  3572                           ; 0 bytes @ 0x8
  3573                           
  3574  0028                     ??_setDimmerLights_DimmingOn:	
  3575                           ; 0 bytes @ 0x8
  3576                           
  3577  0028                     ?_setDimmerLights_DimmingRun:	
  3578                           ; 0 bytes @ 0x8
  3579                           
  3580  0028                     CC2500_WriteREG@value:	
  3581                           ; 0 bytes @ 0x8
  3582                           
  3583  0028                     DlyOff_Initialization@sw:	
  3584                           ; 1 bytes @ 0x8
  3585                           
  3586  0028                     getDelayOff_GO@sw:	
  3587                           ; 1 bytes @ 0x8
  3588                           
  3589  0028                     setDimmerIntr_ControlStatus@lights:	
  3590                           ; 1 bytes @ 0x8
  3591                           
  3592  0028                     setDimmerIntr_DimmingValue@lights:	
  3593                           ; 1 bytes @ 0x8
  3594                           
  3595  0028                     getDimmerIntr_DimmingValue@value:	
  3596                           ; 1 bytes @ 0x8
  3597                           
  3598  0028                     setDimmerIntr_Dimming_Sw@lights:	
  3599                           ; 1 bytes @ 0x8
  3600                           
  3601  0028                     setDimmerIntr_Dimming_RF@lights:	
  3602                           ; 1 bytes @ 0x8
  3603                           
  3604  0028                     setDimmerLights_SwOff@sw:	
  3605                           ; 1 bytes @ 0x8
  3606                           
  3607  0028                     setDimmerLights_DimmingOn@sw:	
  3608                           ; 1 bytes @ 0x8
  3609                           
  3610  0028                     getDimmerLights_Allow_Condition@allow:	
  3611                           ; 1 bytes @ 0x8
  3612                           
  3613  0028                     getDimmerLights_Status@lights:	
  3614                           ; 1 bytes @ 0x8
  3615                           
  3616  0028                     setDimmerLights_DimmingRun@command:	
  3617                           ; 1 bytes @ 0x8
  3618                           
  3619  0028                     setLED@command:	
  3620                           ; 1 bytes @ 0x8
  3621                           
  3622  0028                     Flash_Memory_Read@address:	
  3623                           ; 1 bytes @ 0x8
  3624                           
  3625  0028                     setMemory_Data@address:	
  3626                           ; 1 bytes @ 0x8
  3627                           
  3628  0028                     setCmd_Status@number:	
  3629                           ; 1 bytes @ 0x8
  3630                           
  3631  0028                     _getRF_KeyStatus$5240:	
  3632                           ; 1 bytes @ 0x8
  3633                           
  3634  0028                     _getSw_KeyStatus$6258:	
  3635                           ; 1 bytes @ 0x8
  3636                           
  3637  0028                     ___bmul@product:	
  3638                           ; 1 bytes @ 0x8
  3639                           
  3640  0028                     DelayTime_1us@i:	
  3641                           ; 1 bytes @ 0x8
  3642                           
  3643  0028                     ___wmul@multiplicand:	
  3644                           ; 2 bytes @ 0x8
  3645                           
  3646  0028                     ___awdiv@dividend:	
  3647                           ; 2 bytes @ 0x8
  3648                           
  3649  0028                     ___lwdiv@dividend:	
  3650                           ; 2 bytes @ 0x8
  3651                           
  3652                           
  3653                           ; 2 bytes @ 0x8
  3654  0028                     	ds	1
  3655  0029                     ??_CC2500_WriteREG:	
  3656  0029                     ??_setLED:	
  3657                           ; 0 bytes @ 0x9
  3658                           
  3659  0029                     ??_DelayOff_Initialization:	
  3660                           ; 0 bytes @ 0x9
  3661                           
  3662  0029                     ??_setDimmerLights_DimmingRun:	
  3663                           ; 0 bytes @ 0x9
  3664                           
  3665  0029                     ??_getAD:	
  3666                           ; 0 bytes @ 0x9
  3667                           
  3668  0029                     CC2500_WriteCommand@command:	
  3669                           ; 0 bytes @ 0x9
  3670                           
  3671  0029                     CC2500_ReadStatus@status_addr:	
  3672                           ; 1 bytes @ 0x9
  3673                           
  3674  0029                     getDelayOff_GO@go:	
  3675                           ; 1 bytes @ 0x9
  3676                           
  3677  0029                     _getDimmerLights_Allow_Condition$2198:	
  3678                           ; 1 bytes @ 0x9
  3679                           
  3680  0029                     getDimmerLights_Status@status:	
  3681                           ; 1 bytes @ 0x9
  3682                           
  3683  0029                     setLED@led:	
  3684                           ; 1 bytes @ 0x9
  3685                           
  3686  0029                     getAD@adcon0:	
  3687                           ; 1 bytes @ 0x9
  3688                           
  3689  0029                     Flash_Memory_Read@ret:	
  3690                           ; 1 bytes @ 0x9
  3691                           
  3692  0029                     ___bmul@multiplier:	
  3693                           ; 1 bytes @ 0x9
  3694                           
  3695  0029                     ___ftpack@exp:	
  3696                           ; 1 bytes @ 0x9
  3697                           
  3698  0029                     _getMain_All_Error_Status$3506:	
  3699                           ; 1 bytes @ 0x9
  3700                           
  3701                           
  3702                           ; 2 bytes @ 0x9
  3703  0029                     	ds	1
  3704  002A                     ??_CC2500_ClearTXFIFO:	
  3705  002A                     ??_CC2500_ClearRXFIFO:	
  3706                           ; 0 bytes @ 0xA
  3707                           
  3708  002A                     ??_CC2500_SIDLEMode:	
  3709                           ; 0 bytes @ 0xA
  3710                           
  3711  002A                     ??_setLED_Initialization:	
  3712                           ; 0 bytes @ 0xA
  3713                           
  3714  002A                     ??_Flash_Memory_Modify:	
  3715                           ; 0 bytes @ 0xA
  3716                           
  3717  002A                     ??_getLoad_AD:	
  3718                           ; 0 bytes @ 0xA
  3719                           
  3720  002A                     ??_getTemp_AD:	
  3721                           ; 0 bytes @ 0xA
  3722                           
  3723  002A                     ??_RF_RxDisable:	
  3724                           ; 0 bytes @ 0xA
  3725                           
  3726  002A                     ??_setSw_Initialization:	
  3727                           ; 0 bytes @ 0xA
  3728                           
  3729  002A                     ??_CC2500_TxData:	
  3730                           ; 0 bytes @ 0xA
  3731                           
  3732  002A                     ??_CC2500_RxData:	
  3733                           ; 0 bytes @ 0xA
  3734                           
  3735  002A                     ??___wmul:	
  3736                           ; 0 bytes @ 0xA
  3737                           
  3738  002A                     ??___awdiv:	
  3739                           ; 0 bytes @ 0xA
  3740                           
  3741  002A                     ??___lwdiv:	
  3742                           ; 0 bytes @ 0xA
  3743                           
  3744  002A                     CC2500_WriteREG@w_addr:	
  3745                           ; 0 bytes @ 0xA
  3746                           
  3747  002A                     setDimmerLights_DimmingRun@lights:	
  3748                           ; 1 bytes @ 0xA
  3749                           
  3750  002A                     setLED_Initialization@led:	
  3751                           ; 1 bytes @ 0xA
  3752                           
  3753  002A                     setLED_Main@led:	
  3754                           ; 1 bytes @ 0xA
  3755                           
  3756  002A                     setSw_Initialization@sw:	
  3757                           ; 1 bytes @ 0xA
  3758                           
  3759  002A                     ___ftpack@sign:	
  3760                           ; 1 bytes @ 0xA
  3761                           
  3762  002A                     getBuz_GO@i:	
  3763                           ; 1 bytes @ 0xA
  3764                           
  3765  002A                     DelayTime_1us@j:	
  3766                           ; 2 bytes @ 0xA
  3767                           
  3768  002A                     ___wmul@product:	
  3769                           ; 2 bytes @ 0xA
  3770                           
  3771                           
  3772                           ; 2 bytes @ 0xA
  3773  002A                     	ds	1
  3774  002B                     ??_CC2500_InitSetREG:	
  3775  002B                     ??_CC2500_InitPATable:	
  3776                           ; 0 bytes @ 0xB
  3777                           
  3778  002B                     ??_Switch_Initialization:	
  3779                           ; 0 bytes @ 0xB
  3780                           
  3781  002B                     ??___ftpack:	
  3782                           ; 0 bytes @ 0xB
  3783                           
  3784  002B                     ??_LED_Initialization:	
  3785                           ; 0 bytes @ 0xB
  3786                           
  3787  002B                     ??_LED_Main:	
  3788                           ; 0 bytes @ 0xB
  3789                           
  3790  002B                     CC2500_TxData@loop_e:	
  3791                           ; 0 bytes @ 0xB
  3792                           
  3793  002B                     CC2500_RxData@loop_f:	
  3794                           ; 1 bytes @ 0xB
  3795                           
  3796  002B                     Flash_Memory_Modify@i:	
  3797                           ; 1 bytes @ 0xB
  3798                           
  3799  002B                     getMain_All_Error_Status@command:	
  3800                           ; 1 bytes @ 0xB
  3801                           
  3802  002B                     getTemp_AD@channel:	
  3803                           ; 1 bytes @ 0xB
  3804                           
  3805  002B                     ___awdiv@counter:	
  3806                           ; 1 bytes @ 0xB
  3807                           
  3808  002B                     ___lwdiv@counter:	
  3809                           ; 1 bytes @ 0xB
  3810                           
  3811                           
  3812                           ; 1 bytes @ 0xB
  3813  002B                     	ds	1
  3814  002C                     ??_CC2500_PowerRST:	
  3815  002C                     ??_CC2500_FrequencyCabr:	
  3816                           ; 0 bytes @ 0xC
  3817                           
  3818  002C                     ??_Flash_Memory_Main:	
  3819                           ; 0 bytes @ 0xC
  3820                           
  3821  002C                     CC2500_InitSetREG@temp1:	
  3822                           ; 0 bytes @ 0xC
  3823                           
  3824  002C                     CC2500_InitPATable@temp:	
  3825                           ; 1 bytes @ 0xC
  3826                           
  3827  002C                     getMain_All_Error_Status@status:	
  3828                           ; 1 bytes @ 0xC
  3829                           
  3830  002C                     getLoad_AD@channel:	
  3831                           ; 1 bytes @ 0xC
  3832                           
  3833  002C                     ___awdiv@sign:	
  3834                           ; 1 bytes @ 0xC
  3835                           
  3836  002C                     getTemp_AD@ADRES:	
  3837                           ; 1 bytes @ 0xC
  3838                           
  3839  002C                     ___lwdiv@quotient:	
  3840                           ; 2 bytes @ 0xC
  3841                           
  3842                           
  3843                           ; 2 bytes @ 0xC
  3844  002C                     	ds	1
  3845  002D                     CC2500_InitSetREG@temp2:	
  3846  002D                     CC2500_InitPATable@loop_d:	
  3847                           ; 1 bytes @ 0xD
  3848                           
  3849  002D                     getLoad_AD@k:	
  3850                           ; 1 bytes @ 0xD
  3851                           
  3852  002D                     ___awdiv@quotient:	
  3853                           ; 1 bytes @ 0xD
  3854                           
  3855                           
  3856                           ; 2 bytes @ 0xD
  3857  002D                     	ds	1
  3858  002E                     ??_Load_Main:	
  3859  002E                     ?___awtoft:	
  3860                           ; 0 bytes @ 0xE
  3861                           
  3862  002E                     CC2500_InitSetREG@loop_c:	
  3863                           ; 3 bytes @ 0xE
  3864                           
  3865  002E                     getLoad_AD@j:	
  3866                           ; 1 bytes @ 0xE
  3867                           
  3868  002E                     ___awtoft@c:	
  3869                           ; 1 bytes @ 0xE
  3870                           
  3871                           
  3872                           ; 2 bytes @ 0xE
  3873  002E                     	ds	1
  3874  002F                     ?_setBuz:	
  3875  002F                     ??_CC2500_PowerOnInitial:	
  3876                           ; 0 bytes @ 0xF
  3877                           
  3878  002F                     setBuz@time:	
  3879                           ; 0 bytes @ 0xF
  3880                           
  3881  002F                     getLoad_AD@ADRES:	
  3882                           ; 2 bytes @ 0xF
  3883                           
  3884                           
  3885                           ; 2 bytes @ 0xF
  3886  002F                     	ds	1
  3887  0030                     Load_Main@error:	
  3888                           
  3889                           ; 1 bytes @ 0x10
  3890  0030                     	ds	1
  3891  0031                     ??_setBuz:	
  3892  0031                     ??___awtoft:	
  3893                           ; 0 bytes @ 0x11
  3894                           
  3895  0031                     getLoad_AD@i:	
  3896                           ; 0 bytes @ 0x11
  3897                           
  3898  0031                     _Load_Main$3870:	
  3899                           ; 1 bytes @ 0x11
  3900                           
  3901                           
  3902                           ; 2 bytes @ 0x11
  3903  0031                     	ds	1
  3904  0032                     setBuz@count:	
  3905                           
  3906                           ; 1 bytes @ 0x12
  3907  0032                     	ds	1
  3908  0033                     ??_setDimmerLights_SwOn:	
  3909  0033                     ??_my_MainTimer:	
  3910                           ; 0 bytes @ 0x13
  3911                           
  3912  0033                     ??_Exception_Main:	
  3913                           ; 0 bytes @ 0x13
  3914                           
  3915  0033                     setDimmerLights_SwOn@sw:	
  3916                           ; 0 bytes @ 0x13
  3917                           
  3918  0033                     Load_Main@ErrorCountValue:	
  3919                           ; 1 bytes @ 0x13
  3920                           
  3921  0033                     ___awtoft@sign:	
  3922                           ; 1 bytes @ 0x13
  3923                           
  3924                           
  3925                           ; 1 bytes @ 0x13
  3926  0033                     	ds	1
  3927  0034                     ?___ftdiv:	
  3928  0034                     ?___ftmul:	
  3929                           ; 3 bytes @ 0x14
  3930                           
  3931  0034                     setDimmerLights_SwOn@idle:	
  3932                           ; 3 bytes @ 0x14
  3933                           
  3934  0034                     Exception_Main@status:	
  3935                           ; 1 bytes @ 0x14
  3936                           
  3937  0034                     Load_Main@Load_RunStatus:	
  3938                           ; 1 bytes @ 0x14
  3939                           
  3940  0034                     ___ftdiv@f2:	
  3941                           ; 1 bytes @ 0x14
  3942                           
  3943  0034                     ___ftmul@f1:	
  3944                           ; 3 bytes @ 0x14
  3945                           
  3946                           
  3947                           ; 3 bytes @ 0x14
  3948  0034                     	ds	1
  3949  0035                     ??_setSw_Main:	
  3950  0035                     Exception_Main@count:	
  3951                           ; 0 bytes @ 0x15
  3952                           
  3953  0035                     Load_Main@LightsCount:	
  3954                           ; 1 bytes @ 0x15
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x15
  3958  0035                     	ds	1
  3959  0036                     Exception_Main@i:	
  3960  0036                     Load_Main@i:	
  3961                           ; 2 bytes @ 0x16
  3962                           
  3963                           
  3964                           ; 2 bytes @ 0x16
  3965  0036                     	ds	1
  3966  0037                     setSw_Main@sw:	
  3967  0037                     ___ftdiv@f1:	
  3968                           ; 1 bytes @ 0x17
  3969                           
  3970  0037                     ___ftmul@f2:	
  3971                           ; 3 bytes @ 0x17
  3972                           
  3973                           
  3974                           ; 3 bytes @ 0x17
  3975  0037                     	ds	1
  3976  0038                     ??_Switch_Main:	
  3977  0038                     Exception_Main@i_3517:	
  3978                           ; 0 bytes @ 0x18
  3979                           
  3980                           
  3981                           ; 2 bytes @ 0x18
  3982  0038                     	ds	2
  3983  003A                     ??___ftdiv:	
  3984  003A                     ??___ftmul:	
  3985                           ; 0 bytes @ 0x1A
  3986                           
  3987  003A                     Exception_Main@lights:	
  3988                           ; 0 bytes @ 0x1A
  3989                           
  3990                           
  3991                           ; 1 bytes @ 0x1A
  3992  003A                     	ds	1
  3993  003B                     Exception_Main@error:	
  3994                           
  3995                           ; 1 bytes @ 0x1B
  3996  003B                     	ds	3
  3997  003E                     ___ftdiv@cntr:	
  3998  003E                     ___ftmul@exp:	
  3999                           ; 1 bytes @ 0x1E
  4000                           
  4001                           
  4002                           ; 1 bytes @ 0x1E
  4003  003E                     	ds	1
  4004  003F                     ___ftdiv@exp:	
  4005  003F                     ___ftmul@f3_as_product:	
  4006                           ; 1 bytes @ 0x1F
  4007                           
  4008                           
  4009                           ; 3 bytes @ 0x1F
  4010  003F                     	ds	1
  4011  0040                     ___ftdiv@f3:	
  4012                           
  4013                           ; 3 bytes @ 0x20
  4014  0040                     	ds	2
  4015  0042                     ___ftmul@cntr:	
  4016                           
  4017                           ; 1 bytes @ 0x22
  4018  0042                     	ds	1
  4019  0043                     ___ftdiv@sign:	
  4020  0043                     ___ftmul@sign:	
  4021                           ; 1 bytes @ 0x23
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x23
  4025  0043                     	ds	1
  4026  0044                     ?___ftneg:	
  4027  0044                     ___ftneg@f1:	
  4028                           ; 3 bytes @ 0x24
  4029                           
  4030                           
  4031                           ; 3 bytes @ 0x24
  4032  0044                     	ds	3
  4033  0047                     ??___ftneg:	
  4034  0047                     ?___ftadd:	
  4035                           ; 0 bytes @ 0x27
  4036                           
  4037  0047                     ___ftadd@f1:	
  4038                           ; 3 bytes @ 0x27
  4039                           
  4040                           
  4041                           ; 3 bytes @ 0x27
  4042  0047                     	ds	3
  4043  004A                     ___ftadd@f2:	
  4044                           
  4045                           ; 3 bytes @ 0x2A
  4046  004A                     	ds	3
  4047  004D                     ??___ftadd:	
  4048                           
  4049                           ; 0 bytes @ 0x2D
  4050  004D                     	ds	4
  4051  0051                     ___ftadd@sign:	
  4052                           
  4053                           ; 1 bytes @ 0x31
  4054  0051                     	ds	1
  4055  0052                     ___ftadd@exp2:	
  4056                           
  4057                           ; 1 bytes @ 0x32
  4058  0052                     	ds	1
  4059  0053                     ___ftadd@exp1:	
  4060                           
  4061                           ; 1 bytes @ 0x33
  4062  0053                     	ds	1
  4063  0054                     ?___fttol:	
  4064  0054                     ___fttol@f1:	
  4065                           ; 4 bytes @ 0x34
  4066                           
  4067                           
  4068                           ; 3 bytes @ 0x34
  4069  0054                     	ds	4
  4070  0058                     ??___fttol:	
  4071                           
  4072                           ; 0 bytes @ 0x38
  4073  0058                     	ds	4
  4074  005C                     ___fttol@sign1:	
  4075                           
  4076                           ; 1 bytes @ 0x3C
  4077  005C                     	ds	1
  4078  005D                     ___fttol@lval:	
  4079                           
  4080                           ; 4 bytes @ 0x3D
  4081  005D                     	ds	4
  4082  0061                     ___fttol@exp1:	
  4083                           
  4084                           ; 1 bytes @ 0x41
  4085  0061                     	ds	1
  4086  0062                     ??_setProductData:	
  4087  0062                     ??_setDimmerIntr_MaxmumValue:	
  4088                           ; 0 bytes @ 0x42
  4089                           
  4090  0062                     ??_Flash_Memory_Initialization:	
  4091                           ; 0 bytes @ 0x42
  4092                           
  4093                           
  4094                           ; 0 bytes @ 0x42
  4095  0062                     	ds	1
  4096  0063                     ??_setDimmerLights_Main:	
  4097  0063                     ??_Temp_Main:	
  4098                           ; 0 bytes @ 0x43
  4099                           
  4100  0063                     ??_RF_Main:	
  4101                           ; 0 bytes @ 0x43
  4102                           
  4103  0063                     ??_setControl_Lights_Table:	
  4104                           ; 0 bytes @ 0x43
  4105                           
  4106  0063                     ??_DelayOff_Main:	
  4107                           ; 0 bytes @ 0x43
  4108                           
  4109  0063                     ??_DimmerLights_Main:	
  4110                           ; 0 bytes @ 0x43
  4111                           
  4112  0063                     ??_main:	
  4113                           ; 0 bytes @ 0x43
  4114                           
  4115                           
  4116                           	psect	maintext
  4117  15A9                     __pmaintext:	
  4118                           ; 0 bytes @ 0x43
  4119 ;;
  4120 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4121 ;;
  4122 ;; *************** function _main *****************
  4123 ;; Defined at:
  4124 ;;		line 7 in file "../src/Main_B1.c"
  4125 ;; Parameters:    Size  Location     Type
  4126 ;;  argc            2    0[BANK4 ] int 
  4127 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;		None
  4130 ;; Return value:  Size  Location     Type
  4131 ;;                  2    0[BANK4 ] int 
  4132 ;; Registers used:
  4133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4134 ;; Tracked objects:
  4135 ;;		On entry : 17F/0
  4136 ;;		On exit  : 0/0
  4137 ;;		Unchanged: 0/0
  4138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4139 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4142 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4143 ;;Total ram usage:        4 bytes
  4144 ;; Hardware stack levels required when called:   13
  4145 ;; This function calls:
  4146 ;;		_Buzzer_Initialization
  4147 ;;		_Buzzer_Main
  4148 ;;		_CC2500_PowerOnInitial
  4149 ;;		_DelayOff_Initialization
  4150 ;;		_DelayOff_Main
  4151 ;;		_DimmerLights_Initialization
  4152 ;;		_DimmerLights_Main
  4153 ;;		_Exception_Main
  4154 ;;		_Flash_Memory_Initialization
  4155 ;;		_Flash_Memory_Main
  4156 ;;		_LED_Initialization
  4157 ;;		_LED_Main
  4158 ;;		_Load_Initialization
  4159 ;;		_Load_Main
  4160 ;;		_Mcu_Initialization
  4161 ;;		_RF_Initialization
  4162 ;;		_RF_Main
  4163 ;;		_Switch_Initialization
  4164 ;;		_Switch_Main
  4165 ;;		_Temp_Initialization
  4166 ;;		_Temp_Main
  4167 ;;		_WDT_Main
  4168 ;;		_getLoad_AD
  4169 ;;		_getTemp_AD
  4170 ;;		_myMain_Initialization
  4171 ;;		_my_MainTimer
  4172 ;; This function is called by:
  4173 ;;		Startup code after reset
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           
  4178                           ;psect for function _main
  4179  15A9                     _main:	
  4180                           
  4181                           ;Main_B1.c: 8: myMain_Initialization();
  4182                           
  4183                           ;incstack = 0
  4184                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4185  15A9  319E  262D  3195   	fcall	_myMain_Initialization
  4186                           
  4187                           ;Main_B1.c: 9: Mcu_Initialization();
  4188  15AC  319D  25BD  3195   	fcall	_Mcu_Initialization
  4189                           
  4190                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4191  15AF  3183  2372  3195   	fcall	_Flash_Memory_Initialization
  4192                           
  4193                           ;Main_B1.c: 11: LED_Initialization();
  4194  15B2  319B  23A1  3195   	fcall	_LED_Initialization
  4195                           
  4196                           ;Main_B1.c: 12: Buzzer_Initialization();
  4197  15B5  319B  2387  3195   	fcall	_Buzzer_Initialization
  4198                           
  4199                           ;Main_B1.c: 14: ;;
  4200                           ;Main_B1.c: 15: Temp_Initialization();
  4201  15B8  319B  2393  3195   	fcall	_Temp_Initialization
  4202                           
  4203                           ;Main_B1.c: 16: Load_Initialization();
  4204  15BB  319B  238A  3195   	fcall	_Load_Initialization
  4205                           
  4206                           ;Main_B1.c: 17: ;;
  4207                           ;Main_B1.c: 18: DelayOff_Initialization();
  4208  15BE  319B  2399  3195   	fcall	_DelayOff_Initialization
  4209                           
  4210                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4211  15C1  319B  23D3  3195   	fcall	_DimmerLights_Initialization
  4212                           
  4213                           ;Main_B1.c: 21: ;;
  4214                           ;Main_B1.c: 22: ;;
  4215                           ;Main_B1.c: 23: ;;
  4216                           ;Main_B1.c: 24: Switch_Initialization();
  4217  15C4  319B  23BD  3195   	fcall	_Switch_Initialization
  4218                           
  4219                           ;Main_B1.c: 25: RF_Initialization();
  4220  15C7  319B  238D  3195   	fcall	_RF_Initialization
  4221                           
  4222                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4223  15CA  319E  267D  3195   	fcall	_CC2500_PowerOnInitial
  4224  15CD                     l12029:	
  4225                           ;Main_B1.c: 27: ;;
  4226                           ;Main_B1.c: 28: ;;
  4227                           ;Main_B1.c: 30: while (1) {
  4228                           
  4229                           
  4230                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4231  15CD  0022               	movlb	2	; select bank2
  4232  15CE  1C20               	btfss	_myMain^(0+256),0
  4233  15CF  2DD8               	goto	l12033
  4234                           
  4235                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4236  15D0  3005               	movlw	5
  4237  15D1  3189  2123  3195   	fcall	_getLoad_AD
  4238                           
  4239                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4240  15D4  3009               	movlw	9
  4241  15D5  3193  23CB  3195   	fcall	_getTemp_AD
  4242  15D8                     l12033:	
  4243                           
  4244                           ;Main_B1.c: 57: }
  4245                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4246  15D8  0022               	movlb	2	; select bank2
  4247  15D9  1C32               	btfss	_Timer1^(0+256),0
  4248  15DA  2DCD               	goto	l12029
  4249                           
  4250                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4251  15DB  1032               	bcf	_Timer1^(0+256),0
  4252                           
  4253                           ;Main_B1.c: 96: my_MainTimer();
  4254  15DC  3193  234E  3195   	fcall	_my_MainTimer
  4255                           
  4256                           ;Main_B1.c: 97: WDT_Main();
  4257  15DF  319D  25CF  3195   	fcall	_WDT_Main
  4258                           
  4259                           ;Main_B1.c: 98: ;;
  4260                           ;Main_B1.c: 99: ;;
  4261                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4262  15E2  0022               	movlb	2	; select bank2
  4263  15E3  1C20               	btfss	_myMain^(0+256),0
  4264  15E4  2DCD               	goto	l12029
  4265                           
  4266                           ;Main_B1.c: 101: Flash_Memory_Main();
  4267  15E5  3192  22A8  3195   	fcall	_Flash_Memory_Main
  4268                           
  4269                           ;Main_B1.c: 103: LED_Main();
  4270  15E8  319B  23A5  3195   	fcall	_LED_Main
  4271                           
  4272                           ;Main_B1.c: 104: Buzzer_Main();
  4273  15EB  3194  240B  3195   	fcall	_Buzzer_Main
  4274                           
  4275                           ;Main_B1.c: 106: ;;
  4276                           ;Main_B1.c: 107: Temp_Main();
  4277  15EE  319B  2396  3195   	fcall	_Temp_Main
  4278                           
  4279                           ;Main_B1.c: 108: Load_Main();
  4280  15F1  3180  2051  3195   	fcall	_Load_Main
  4281                           
  4282                           ;Main_B1.c: 109: ;;
  4283                           ;Main_B1.c: 111: ;;
  4284                           ;Main_B1.c: 112: DimmerLights_Main();
  4285  15F4  319F  27C8  3195   	fcall	_DimmerLights_Main
  4286                           
  4287                           ;Main_B1.c: 113: Switch_Main();
  4288  15F7  319B  23E1  3195   	fcall	_Switch_Main
  4289                           
  4290                           ;Main_B1.c: 114: ;;
  4291                           ;Main_B1.c: 115: ;;
  4292                           ;Main_B1.c: 117: RF_Main();
  4293  15FA  319B  2390  3195   	fcall	_RF_Main
  4294                           
  4295                           ;Main_B1.c: 118: DelayOff_Main();
  4296  15FD  319B  239D  3195   	fcall	_DelayOff_Main
  4297                           
  4298                           ;Main_B1.c: 119: ;;
  4299                           ;Main_B1.c: 120: ;;
  4300                           ;Main_B1.c: 121: Exception_Main();
  4301  1600  3186  263F  3195   	fcall	_Exception_Main
  4302  1603  2DCD               	goto	l12029
  4303  1604                     __end_of_main:	
  4304                           ;Main_B1.c: 128: }
  4305                           ;Main_B1.c: 129: }
  4306                           ;Main_B1.c: 163: }
  4307                           ;Main_B1.c: 164: return (0);
  4308                           ;	Return value of _main is never used
  4309                           
  4310                           
  4311                           	psect	text1
  4312  134E                     __ptext1:	
  4313 ;; *************** function _my_MainTimer *****************
  4314 ;; Defined at:
  4315 ;;		line 185 in file "../src/Main_B1.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;		None               void
  4322 ;; Registers used:
  4323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;Total ram usage:        1 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    7
  4336 ;; This function calls:
  4337 ;;		_setBuz
  4338 ;; This function is called by:
  4339 ;;		_main
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           
  4344                           ;psect for function _my_MainTimer
  4345  134E                     _my_MainTimer:	
  4346                           
  4347                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4348                           
  4349                           ;incstack = 0
  4350                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4351  134E  0022               	movlb	2	; select bank2
  4352  134F  1820               	btfsc	_myMain^(0+256),0
  4353  1350  2B68               	goto	l11727
  4354                           
  4355                           ;Main_B1.c: 188: myMain.PowerCount++;
  4356  1351  3001               	movlw	1
  4357  1352  0020               	movlb	0	; select bank0
  4358  1353  00B3               	movwf	??_my_MainTimer
  4359  1354  0833               	movf	??_my_MainTimer,w
  4360  1355  0022               	movlb	2	; select bank2
  4361  1356  07A1               	addwf	(_myMain^(0+256)+1),f
  4362                           
  4363                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4364  1357  0821               	movf	(_myMain^(0+256)+1),w
  4365  1358  3A4B               	xorlw	75
  4366  1359  1D03               	skipz
  4367  135A  0008               	return
  4368                           
  4369                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4370  135B  01A1               	clrf	(_myMain^(0+256)+1)
  4371                           
  4372                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4373  135C  1420               	bsf	_myMain^(0+256),0
  4374                           
  4375                           ;Main_B1.c: 196: setBuz(3, 50);
  4376  135D  3032               	movlw	50
  4377  135E  0020               	movlb	0	; select bank0
  4378  135F  00AF               	movwf	setBuz@time
  4379  1360  3000               	movlw	0
  4380  1361  00B0               	movwf	setBuz@time+1
  4381  1362  3003               	movlw	3
  4382  1363  3195  2550         	fcall	_setBuz
  4383                           
  4384                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4385  1365  0022               	movlb	2	; select bank2
  4386  1366  1620               	bsf	_myMain^(0+256),4
  4387                           
  4388                           ;Main_B1.c: 206: }
  4389                           ;Main_B1.c: 207: } else {
  4390  1367  0008               	return
  4391  1368                     l11727:	
  4392                           
  4393                           ;Main_B1.c: 208: myMain.PowerCount++;
  4394  1368  3001               	movlw	1
  4395  1369  0020               	movlb	0	; select bank0
  4396  136A  00B3               	movwf	??_my_MainTimer
  4397  136B  0833               	movf	??_my_MainTimer,w
  4398  136C  0022               	movlb	2	; select bank2
  4399  136D  07A1               	addwf	(_myMain^(0+256)+1),f
  4400                           
  4401                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4402  136E  0821               	movf	(_myMain^(0+256)+1),w
  4403  136F  3A32               	xorlw	50
  4404  1370  1903               	btfsc	3,2
  4405                           
  4406                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4407  1371  01A1               	clrf	(_myMain^(0+256)+1)
  4408                           
  4409                           ;Main_B1.c: 226: }
  4410                           ;Main_B1.c: 228: myMain.Count1++;
  4411  1372  3001               	movlw	1
  4412  1373  07A4               	addwf	(_myMain^(0+256)+4),f
  4413  1374  3000               	movlw	0
  4414  1375  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4415                           
  4416                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4417  1376  3004               	movlw	4
  4418  1377  3E20               	addlw	_myMain& (0+255)
  4419  1378  0086               	movwf	6
  4420  1379  3001               	movlw	1	; select bank2/3
  4421  137A  0087               	movwf	7
  4422  137B  3F40               	moviw [0]fsr1
  4423  137C  3A32               	xorlw	50
  4424  137D  1D03               	skipz
  4425  137E  2B81               	goto	u14375
  4426  137F  3F41               	moviw [1]fsr1
  4427  1380  3A00               	xorlw	0
  4428  1381                     u14375:	
  4429  1381  1D03               	skipz
  4430  1382  0008               	return
  4431                           
  4432                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4433  1383  01A4               	clrf	(_myMain^(0+256)+4)
  4434  1384  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4435                           
  4436                           ;Main_B1.c: 242: if (myMain.Flag) {
  4437  1385  1CA0               	btfss	_myMain^(0+256),1
  4438  1386  2B89               	goto	l1430
  4439                           
  4440                           ;Main_B1.c: 243: myMain.Flag = 0;
  4441  1387  10A0               	bcf	_myMain^(0+256),1
  4442                           
  4443                           ;Main_B1.c: 252: } else {
  4444  1388  0008               	return
  4445  1389                     l1430:	
  4446                           
  4447                           ;Main_B1.c: 253: myMain.Flag = 1;
  4448  1389  14A0               	bsf	_myMain^(0+256),1
  4449  138A  0008               	return
  4450  138B                     __end_of_my_MainTimer:	
  4451                           
  4452                           	psect	text2
  4453  1E2D                     __ptext2:	
  4454 ;; *************** function _myMain_Initialization *****************
  4455 ;; Defined at:
  4456 ;;		line 170 in file "../src/Main_B1.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;		None
  4459 ;; Auto vars:     Size  Location     Type
  4460 ;;		None
  4461 ;; Return value:  Size  Location     Type
  4462 ;;		None               void
  4463 ;; Registers used:
  4464 ;;		wreg, fsr1l, fsr1h
  4465 ;; Tracked objects:
  4466 ;;		On entry : 0/0
  4467 ;;		On exit  : 0/0
  4468 ;;		Unchanged: 0/0
  4469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4474 ;;Total ram usage:        1 bytes
  4475 ;; Hardware stack levels used:    1
  4476 ;; Hardware stack levels required when called:    5
  4477 ;; This function calls:
  4478 ;;		Nothing
  4479 ;; This function is called by:
  4480 ;;		_main
  4481 ;; This function uses a non-reentrant model
  4482 ;;
  4483                           
  4484                           
  4485                           ;psect for function _myMain_Initialization
  4486  1E2D                     _myMain_Initialization:	
  4487                           
  4488                           ;Main_B1.c: 173: product = &_product;
  4489                           
  4490                           ;incstack = 0
  4491                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4492  1E2D  3020               	movlw	__product& (0+255)
  4493  1E2E  0020               	movlb	0	; select bank0
  4494  1E2F  00A6               	movwf	??_myMain_Initialization
  4495  1E30  0826               	movf	??_myMain_Initialization,w
  4496  1E31  0021               	movlb	1	; select bank1
  4497  1E32  00EF               	movwf	_product^(0+128)
  4498                           
  4499                           ;Main_B1.c: 174: product->Data[20] = 209;
  4500  1E33  30D1               	movlw	209
  4501  1E34  0020               	movlb	0	; select bank0
  4502  1E35  00A6               	movwf	??_myMain_Initialization
  4503  1E36  0021               	movlb	1	; select bank1
  4504  1E37  086F               	movf	_product^(0+128),w
  4505  1E38  3E14               	addlw	20
  4506  1E39  0086               	movwf	6
  4507  1E3A  3002               	movlw	2	; select bank4/5
  4508  1E3B  0087               	movwf	7
  4509  1E3C  0020               	movlb	0	; select bank0
  4510  1E3D  0826               	movf	??_myMain_Initialization,w
  4511  1E3E  0081               	movwf	1
  4512  1E3F  0008               	return
  4513  1E40                     __end_of_myMain_Initialization:	
  4514                           
  4515                           	psect	text3
  4516  13CB                     __ptext3:	
  4517 ;; *************** function _getTemp_AD *****************
  4518 ;; Defined at:
  4519 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;  channel         1    wreg     unsigned char 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  channel         1   11[BANK0 ] unsigned char 
  4524 ;;  ADRES           2   12[BANK0 ] unsigned int 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;		None               void
  4527 ;; Registers used:
  4528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;Total ram usage:        4 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    7
  4541 ;; This function calls:
  4542 ;;		_getAD
  4543 ;; This function is called by:
  4544 ;;		_main
  4545 ;; This function uses a non-reentrant model
  4546 ;;
  4547                           
  4548                           
  4549                           ;psect for function _getTemp_AD
  4550  13CB                     _getTemp_AD:	
  4551                           
  4552                           ;incstack = 0
  4553                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4554                           ;getTemp_AD@channel stored from wreg
  4555  13CB  0020               	movlb	0	; select bank0
  4556  13CC  00AB               	movwf	getTemp_AD@channel
  4557                           
  4558                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4559  13CD  01AC               	clrf	getTemp_AD@ADRES
  4560  13CE  01AD               	clrf	getTemp_AD@ADRES+1
  4561                           
  4562                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4563  13CF  0021               	movlb	1	; select bank1
  4564  13D0  1D51               	btfss	_Temp^(0+128),2
  4565  13D1  2BFB               	goto	l7745
  4566                           
  4567                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4568  13D2  30F0               	movlw	240
  4569  13D3  0020               	movlb	0	; select bank0
  4570  13D4  00AA               	movwf	??_getTemp_AD
  4571  13D5  082A               	movf	??_getTemp_AD,w
  4572  13D6  00A6               	movwf	getAD@adcon1
  4573  13D7  082B               	movf	getTemp_AD@channel,w
  4574  13D8  3190  20C3  3193   	fcall	_getAD
  4575  13DB  0020               	movlb	0	; select bank0
  4576  13DC  0827               	movf	?_getAD+1,w
  4577  13DD  01AD               	clrf	getTemp_AD@ADRES+1
  4578  13DE  07AD               	addwf	getTemp_AD@ADRES+1,f
  4579  13DF  0826               	movf	?_getAD,w
  4580  13E0  01AC               	clrf	getTemp_AD@ADRES
  4581  13E1  07AC               	addwf	getTemp_AD@ADRES,f
  4582                           
  4583                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4584  13E2  082D               	movf	getTemp_AD@ADRES+1,w
  4585  13E3  042C               	iorwf	getTemp_AD@ADRES,w
  4586  13E4  1903               	skipnz
  4587  13E5  2BFB               	goto	l7745
  4588                           
  4589                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4590  13E6  082D               	movf	getTemp_AD@ADRES+1,w
  4591  13E7  0021               	movlb	1	; select bank1
  4592  13E8  025A               	subwf	((_Temp+1)^(0+128)+8),w
  4593  13E9  1D03               	skipz
  4594  13EA  2BEF               	goto	u7755
  4595  13EB  0020               	movlb	0	; select bank0
  4596  13EC  082C               	movf	getTemp_AD@ADRES,w
  4597  13ED  0021               	movlb	1	; select bank1
  4598  13EE  0259               	subwf	(_Temp^(0+128)+8),w
  4599  13EF                     u7755:	
  4600  13EF  1803               	skipnc
  4601  13F0  2BFB               	goto	l7745
  4602                           
  4603                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4604  13F1  0020               	movlb	0	; select bank0
  4605  13F2  082D               	movf	getTemp_AD@ADRES+1,w
  4606  13F3  0021               	movlb	1	; select bank1
  4607  13F4  01DA               	clrf	((_Temp+1)^(0+128)+8)
  4608  13F5  07DA               	addwf	((_Temp+1)^(0+128)+8),f
  4609  13F6  0020               	movlb	0	; select bank0
  4610  13F7  082C               	movf	getTemp_AD@ADRES,w
  4611  13F8  0021               	movlb	1	; select bank1
  4612  13F9  01D9               	clrf	(_Temp^(0+128)+8)
  4613  13FA  07D9               	addwf	(_Temp^(0+128)+8),f
  4614  13FB                     l7745:	
  4615                           
  4616                           ;OverTemperature_B1.c: 32: }
  4617                           ;OverTemperature_B1.c: 33: }
  4618                           ;OverTemperature_B1.c: 34: }
  4619                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4620  13FB  30F0               	movlw	240
  4621  13FC  0020               	movlb	0	; select bank0
  4622  13FD  00AA               	movwf	??_getTemp_AD
  4623  13FE  082A               	movf	??_getTemp_AD,w
  4624  13FF  00A6               	movwf	getAD@adcon1
  4625  1400  082B               	movf	getTemp_AD@channel,w
  4626  1401  3190  20C3         	fcall	_getAD
  4627  1403  0020               	movlb	0	; select bank0
  4628  1404  0827               	movf	?_getAD+1,w
  4629  1405  01AD               	clrf	getTemp_AD@ADRES+1
  4630  1406  07AD               	addwf	getTemp_AD@ADRES+1,f
  4631  1407  0826               	movf	?_getAD,w
  4632  1408  01AC               	clrf	getTemp_AD@ADRES
  4633  1409  07AC               	addwf	getTemp_AD@ADRES,f
  4634  140A  0008               	return
  4635  140B                     __end_of_getTemp_AD:	
  4636                           
  4637                           	psect	text4
  4638  0923                     __ptext4:	
  4639 ;; *************** function _getLoad_AD *****************
  4640 ;; Defined at:
  4641 ;;		line 15 in file "../src/OverLoad_B1.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  channel         1    wreg     unsigned char 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  channel         1   12[BANK0 ] unsigned char 
  4646 ;;  ADRES           2   15[BANK0 ] unsigned int 
  4647 ;;  i               1   17[BANK0 ] unsigned char 
  4648 ;;  j               1   14[BANK0 ] unsigned char 
  4649 ;;  k               1   13[BANK0 ] unsigned char 
  4650 ;; Return value:  Size  Location     Type
  4651 ;;		None               void
  4652 ;; Registers used:
  4653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4660 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4661 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;Total ram usage:        8 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:    7
  4666 ;; This function calls:
  4667 ;;		_getAD
  4668 ;; This function is called by:
  4669 ;;		_main
  4670 ;; This function uses a non-reentrant model
  4671 ;;
  4672                           
  4673                           
  4674                           ;psect for function _getLoad_AD
  4675  0923                     _getLoad_AD:	
  4676                           
  4677                           ;incstack = 0
  4678                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4679                           ;getLoad_AD@channel stored from wreg
  4680  0923  0020               	movlb	0	; select bank0
  4681  0924  00AC               	movwf	getLoad_AD@channel
  4682                           
  4683                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4684  0925  01B1               	clrf	getLoad_AD@i
  4685  0926  01AE               	clrf	getLoad_AD@j
  4686  0927  01AD               	clrf	getLoad_AD@k
  4687                           
  4688                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4689  0928  01AF               	clrf	getLoad_AD@ADRES
  4690  0929  01B0               	clrf	getLoad_AD@ADRES+1
  4691                           
  4692                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4693  092A  0022               	movlb	2	; select bank2
  4694  092B  1E35               	btfss	_Load^(0+256),4
  4695  092C  0008               	return
  4696                           
  4697                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4698  092D  30F3               	movlw	243
  4699  092E  0020               	movlb	0	; select bank0
  4700  092F  00AA               	movwf	??_getLoad_AD
  4701  0930  082A               	movf	??_getLoad_AD,w
  4702  0931  00A6               	movwf	getAD@adcon1
  4703  0932  082C               	movf	getLoad_AD@channel,w
  4704  0933  3190  20C3  3189   	fcall	_getAD
  4705  0936  0020               	movlb	0	; select bank0
  4706  0937  0827               	movf	?_getAD+1,w
  4707  0938  01B0               	clrf	getLoad_AD@ADRES+1
  4708  0939  07B0               	addwf	getLoad_AD@ADRES+1,f
  4709  093A  0826               	movf	?_getAD,w
  4710  093B  01AF               	clrf	getLoad_AD@ADRES
  4711  093C  07AF               	addwf	getLoad_AD@ADRES,f
  4712                           
  4713                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4714  093D  01B1               	clrf	getLoad_AD@i
  4715  093E  3004               	movlw	4
  4716  093F  0231               	subwf	getLoad_AD@i,w
  4717  0940  1803               	btfsc	3,0
  4718  0941  2969               	goto	l7713
  4719  0942                     l7701:	
  4720                           
  4721                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4722  0942  3531               	lslf	getLoad_AD@i,w
  4723  0943  3E40               	addlw	(_Load+11)& (0+255)
  4724  0944  0086               	movwf	6
  4725  0945  3001               	movlw	1	; select bank2/3
  4726  0946  0087               	movwf	7
  4727  0947  3F40               	moviw [0]fsr1
  4728  0948  00AA               	movwf	??_getLoad_AD
  4729  0949  3F41               	moviw [1]fsr1
  4730  094A  00AB               	movwf	??_getLoad_AD+1
  4731  094B  0830               	movf	getLoad_AD@ADRES+1,w
  4732  094C  022B               	subwf	??_getLoad_AD+1,w
  4733  094D  1D03               	skipz
  4734  094E  2951               	goto	u7655
  4735  094F  082F               	movf	getLoad_AD@ADRES,w
  4736  0950  022A               	subwf	??_getLoad_AD,w
  4737  0951                     u7655:	
  4738  0951  1803               	skipnc
  4739  0952  2961               	goto	l7709
  4740  0953  08AE               	movf	getLoad_AD@j,f
  4741  0954  1D03               	skipz
  4742  0955  2961               	goto	l7709
  4743                           
  4744                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4745  0956  3531               	lslf	getLoad_AD@i,w
  4746  0957  3E40               	addlw	(_Load+11)& (0+255)
  4747  0958  0086               	movwf	6
  4748  0959  3001               	movlw	1	; select bank2/3
  4749  095A  0087               	movwf	7
  4750  095B  082F               	movf	getLoad_AD@ADRES,w
  4751  095C  3FC0               	movwi [0]fsr1
  4752  095D  0830               	movf	getLoad_AD@ADRES+1,w
  4753  095E  3FC1               	movwi [1]fsr1
  4754                           
  4755                           ;OverLoad_B1.c: 24: j = 1;
  4756  095F  01AE               	clrf	getLoad_AD@j
  4757  0960  0AAE               	incf	getLoad_AD@j,f
  4758  0961                     l7709:	
  4759  0961  3001               	movlw	1
  4760  0962  00AA               	movwf	??_getLoad_AD
  4761  0963  082A               	movf	??_getLoad_AD,w
  4762  0964  07B1               	addwf	getLoad_AD@i,f
  4763  0965  3004               	movlw	4
  4764  0966  0231               	subwf	getLoad_AD@i,w
  4765  0967  1C03               	skipc
  4766  0968  2942               	goto	l7701
  4767  0969                     l7713:	
  4768                           
  4769                           ;OverLoad_B1.c: 25: }
  4770                           ;OverLoad_B1.c: 26: }
  4771                           ;OverLoad_B1.c: 27: if (j == 0) {
  4772  0969  08AE               	movf	getLoad_AD@j,f
  4773  096A  1D03               	skipz
  4774  096B  0008               	return
  4775                           
  4776                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4777  096C  01B1               	clrf	getLoad_AD@i
  4778  096D                     L1:	
  4779  096D  3004               	movlw	4
  4780  096E  0231               	subwf	getLoad_AD@i,w
  4781  096F  1803               	btfsc	3,0
  4782  0970  0008               	return
  4783                           
  4784                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4785  0971  3531               	lslf	getLoad_AD@i,w
  4786  0972  3E4A               	addlw	(_Load+21)& (0+255)
  4787  0973  0086               	movwf	6
  4788  0974  3001               	movlw	1	; select bank2/3
  4789  0975  0087               	movwf	7
  4790  0976  3F40               	moviw [0]fsr1
  4791  0977  00AA               	movwf	??_getLoad_AD
  4792  0978  3F41               	moviw [1]fsr1
  4793  0979  00AB               	movwf	??_getLoad_AD+1
  4794  097A  082B               	movf	??_getLoad_AD+1,w
  4795  097B  0230               	subwf	getLoad_AD@ADRES+1,w
  4796  097C  1D03               	skipz
  4797  097D  2980               	goto	u7705
  4798  097E  082A               	movf	??_getLoad_AD,w
  4799  097F  022F               	subwf	getLoad_AD@ADRES,w
  4800  0980                     u7705:	
  4801  0980  1803               	skipnc
  4802  0981  2990               	goto	l7729
  4803  0982  08AD               	movf	getLoad_AD@k,f
  4804  0983  1D03               	skipz
  4805  0984  2990               	goto	l7729
  4806                           
  4807                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4808  0985  3531               	lslf	getLoad_AD@i,w
  4809  0986  3E4A               	addlw	(_Load+21)& (0+255)
  4810  0987  0086               	movwf	6
  4811  0988  3001               	movlw	1	; select bank2/3
  4812  0989  0087               	movwf	7
  4813  098A  082F               	movf	getLoad_AD@ADRES,w
  4814  098B  3FC0               	movwi [0]fsr1
  4815  098C  0830               	movf	getLoad_AD@ADRES+1,w
  4816  098D  3FC1               	movwi [1]fsr1
  4817                           
  4818                           ;OverLoad_B1.c: 31: k = 1;
  4819  098E  01AD               	clrf	getLoad_AD@k
  4820  098F  0AAD               	incf	getLoad_AD@k,f
  4821  0990                     l7729:	
  4822  0990  3001               	movlw	1
  4823  0991  00AA               	movwf	??_getLoad_AD
  4824  0992  082A               	movf	??_getLoad_AD,w
  4825  0993  07B1               	addwf	getLoad_AD@i,f
  4826  0994  296D               	goto	L1
  4827  0995                     __end_of_getLoad_AD:	
  4828                           
  4829                           	psect	text5
  4830  10C3                     __ptext5:	
  4831 ;; *************** function _getAD *****************
  4832 ;; Defined at:
  4833 ;;		line 459 in file "../src/MCU_B1.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  adcon0          1    wreg     unsigned char 
  4836 ;;  adcon1          1    6[BANK0 ] unsigned char 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  adcon0          1    9[BANK0 ] unsigned char 
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  2    6[BANK0 ] int 
  4841 ;; Registers used:
  4842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4843 ;; Tracked objects:
  4844 ;;		On entry : 0/0
  4845 ;;		On exit  : 0/0
  4846 ;;		Unchanged: 0/0
  4847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4848 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;Total ram usage:        4 bytes
  4853 ;; Hardware stack levels used:    1
  4854 ;; Hardware stack levels required when called:    6
  4855 ;; This function calls:
  4856 ;;		_Timeout_Counter
  4857 ;;		_set_TimeoutCleared
  4858 ;; This function is called by:
  4859 ;;		_getLoad_AD
  4860 ;;		_getTemp_AD
  4861 ;; This function uses a non-reentrant model
  4862 ;;
  4863                           
  4864                           
  4865                           ;psect for function _getAD
  4866  10C3                     _getAD:	
  4867                           
  4868                           ;incstack = 0
  4869                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4870                           ;getAD@adcon0 stored from wreg
  4871  10C3  0020               	movlb	0	; select bank0
  4872  10C4  00A9               	movwf	getAD@adcon0
  4873                           
  4874                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4875  10C5  0829               	movf	getAD@adcon0,w
  4876  10C6  0021               	movlb	1	; select bank1
  4877  10C7  009D               	movwf	29	;volatile
  4878                           
  4879                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4880  10C8  0020               	movlb	0	; select bank0
  4881  10C9  0826               	movf	getAD@adcon1,w
  4882  10CA  0021               	movlb	1	; select bank1
  4883  10CB  009E               	movwf	30	;volatile
  4884                           
  4885                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4886  10CC  149D               	bsf	29,1	;volatile
  4887                           
  4888                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4889  10CD  28D1               	goto	l7199
  4890  10CE                     l7197:	
  4891                           
  4892                           ;MCU_B1.c: 464: Timeout_Counter();
  4893  10CE  319E  26D3  3190   	fcall	_Timeout_Counter
  4894  10D1                     l7199:	
  4895  10D1  0021               	movlb	1	; select bank1
  4896  10D2  1C9D               	btfss	29,1	;volatile
  4897  10D3  28D7               	goto	l7203
  4898  10D4  0022               	movlb	2	; select bank2
  4899  10D5  1D2A               	btfss	(_myMain^(0+256)+10),2
  4900  10D6  28CE               	goto	l7197
  4901  10D7                     l7203:	
  4902                           
  4903                           ;MCU_B1.c: 465: };
  4904                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4905  10D7  3190  2000         	fcall	_set_TimeoutCleared
  4906                           
  4907                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4908  10D9  0021               	movlb	1	; select bank1
  4909  10DA  081C               	movf	28,w	;volatile
  4910  10DB  0020               	movlb	0	; select bank0
  4911  10DC  01A7               	clrf	?_getAD+1
  4912  10DD  07A7               	addwf	?_getAD+1,f
  4913  10DE  0021               	movlb	1	; select bank1
  4914  10DF  081B               	movf	27,w	;volatile
  4915  10E0  0020               	movlb	0	; select bank0
  4916  10E1  01A6               	clrf	?_getAD
  4917  10E2  07A6               	addwf	?_getAD,f
  4918  10E3  0008               	return
  4919  10E4                     __end_of_getAD:	
  4920                           
  4921                           	psect	text6
  4922  1DCF                     __ptext6:	
  4923 ;; *************** function _WDT_Main *****************
  4924 ;; Defined at:
  4925 ;;		line 1103 in file "../src/MCU_B1.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;		None
  4930 ;; Return value:  Size  Location     Type
  4931 ;;		None               void
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0, pclath, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;Total ram usage:        1 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    6
  4946 ;; This function calls:
  4947 ;;		_WDT_Clearing
  4948 ;; This function is called by:
  4949 ;;		_main
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           
  4954                           ;psect for function _WDT_Main
  4955  1DCF                     _WDT_Main:	
  4956                           
  4957                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4958                           
  4959                           ;incstack = 0
  4960                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4961  1DCF  0021               	movlb	1	; select bank1
  4962  1DD0  1C45               	btfss	_WDT^(0+128),0
  4963  1DD1  0008               	return
  4964                           
  4965                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  4966  1DD2  3001               	movlw	1
  4967  1DD3  02C6               	subwf	(_WDT^(0+128)+1),f
  4968  1DD4  0846               	movf	(_WDT^(0+128)+1),w
  4969  1DD5  3AFF               	xorlw	255
  4970  1DD6  1903               	skipnz
  4971  1DD7  0008               	return
  4972                           
  4973                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  4974  1DD8  3064               	movlw	100
  4975  1DD9  0020               	movlb	0	; select bank0
  4976  1DDA  00A6               	movwf	??_WDT_Main
  4977  1DDB  0826               	movf	??_WDT_Main,w
  4978  1DDC  0021               	movlb	1	; select bank1
  4979  1DDD  00C6               	movwf	(_WDT^(0+128)+1)
  4980                           
  4981                           ;MCU_B1.c: 1107: WDT_Clearing();
  4982  1DDE  3180  2002         	fcall	_WDT_Clearing
  4983  1DE0  0008               	return
  4984  1DE1                     __end_of_WDT_Main:	
  4985                           
  4986                           	psect	text7
  4987  0002                     __ptext7:	
  4988 ;; *************** function _WDT_Clearing *****************
  4989 ;; Defined at:
  4990 ;;		line 1113 in file "../src/MCU_B1.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;		None
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;		None
  4995 ;; Return value:  Size  Location     Type
  4996 ;;		None               void
  4997 ;; Registers used:
  4998 ;;		None
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;Total ram usage:        0 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    5
  5011 ;; This function calls:
  5012 ;;		Nothing
  5013 ;; This function is called by:
  5014 ;;		_WDT_Main
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _WDT_Clearing
  5020  0002                     _WDT_Clearing:	
  5021                           
  5022                           ;incstack = 0
  5023                           ; Regs used in _WDT_Clearing: []
  5024  0002  0064               	clrwdt	;# 
  5025  0003  0008               	return
  5026  0004                     __end_of_WDT_Clearing:	
  5027                           
  5028                           	psect	text8
  5029  1B96                     __ptext8:	
  5030 ;; *************** function _Temp_Main *****************
  5031 ;; Defined at:
  5032 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;		None
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;		None
  5037 ;; Return value:  Size  Location     Type
  5038 ;;		None               void
  5039 ;; Registers used:
  5040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;Total ram usage:        0 bytes
  5051 ;; Hardware stack levels used:    1
  5052 ;; Hardware stack levels required when called:    8
  5053 ;; This function calls:
  5054 ;;		_setTemp_Main
  5055 ;; This function is called by:
  5056 ;;		_main
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           
  5061                           ;psect for function _Temp_Main
  5062  1B96                     _Temp_Main:	
  5063                           
  5064                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5065                           
  5066                           ;incstack = 0
  5067                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5068  1B96  318C  2493         	fcall	_setTemp_Main
  5069  1B98  0008               	return
  5070  1B99                     __end_of_Temp_Main:	
  5071                           
  5072                           	psect	text9
  5073  0C93                     __ptext9:	
  5074 ;; *************** function _setTemp_Main *****************
  5075 ;; Defined at:
  5076 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5077 ;; Parameters:    Size  Location     Type
  5078 ;;		None
  5079 ;; Auto vars:     Size  Location     Type
  5080 ;;  AD              2   15[BANK1 ] unsigned int 
  5081 ;;  DangerValue     2   13[BANK1 ] unsigned int 
  5082 ;;  SafeValue       2   11[BANK1 ] unsigned int 
  5083 ;;  TempGO          1   10[BANK1 ] unsigned char 
  5084 ;;  error           1    9[BANK1 ] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;		None               void
  5087 ;; Registers used:
  5088 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;Total ram usage:        9 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    7
  5101 ;; This function calls:
  5102 ;;		_getMain_All_Error_Status
  5103 ;;		_getMain_All_LightsStatus
  5104 ;;		_setBuz
  5105 ;;		_setProductData
  5106 ;; This function is called by:
  5107 ;;		_Temp_Main
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111                           
  5112                           ;psect for function _setTemp_Main
  5113  0C93                     _setTemp_Main:	
  5114                           
  5115                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5116                           
  5117                           ;incstack = 0
  5118                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5119  0C93  3000               	movlw	0
  5120  0C94  3191  21D8  318C   	fcall	_getMain_All_Error_Status
  5121  0C97  0021               	movlb	1	; select bank1
  5122  0C98  00E3               	movwf	??_setTemp_Main^(0+128)
  5123  0C99  0863               	movf	??_setTemp_Main^(0+128),w
  5124  0C9A  00E4               	movwf	setTemp_Main@error^(0+128)
  5125                           
  5126                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5127  0C9B  01E6               	clrf	setTemp_Main@SafeValue^(0+128)
  5128  0C9C  01E7               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5129  0C9D  01E8               	clrf	setTemp_Main@DangerValue^(0+128)
  5130  0C9E  01E9               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5131                           
  5132                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5133  0C9F  319C  2424  318C   	fcall	_getMain_All_LightsStatus
  5134  0CA2  0021               	movlb	1	; select bank1
  5135  0CA3  00E3               	movwf	??_setTemp_Main^(0+128)
  5136  0CA4  0863               	movf	??_setTemp_Main^(0+128),w
  5137  0CA5  00E5               	movwf	setTemp_Main@TempGO^(0+128)
  5138                           
  5139                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5140  0CA6  1C51               	btfss	_Temp^(0+128),0
  5141  0CA7  2D35               	goto	l1769
  5142                           
  5143                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5144  0CA8  1951               	btfsc	_Temp^(0+128),2
  5145  0CA9  2CC4               	goto	l11399
  5146                           
  5147                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5148  0CAA  0865               	movf	setTemp_Main@TempGO^(0+128),w
  5149  0CAB  3A01               	xorlw	1
  5150  0CAC  1D03               	skipz
  5151  0CAD  2CB0               	goto	l1775
  5152  0CAE  1CD1               	btfss	_Temp^(0+128),1
  5153  0CAF  2CB2               	goto	l11391
  5154  0CB0                     l1775:	
  5155  0CB0  1CD1               	btfss	_Temp^(0+128),1
  5156  0CB1  2CC1               	goto	l11397
  5157  0CB2                     l11391:	
  5158                           
  5159                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5160  0CB2  3001               	movlw	1
  5161  0CB3  07D2               	addwf	(_Temp^(0+128)+1),f
  5162  0CB4  3000               	movlw	0
  5163  0CB5  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5164                           
  5165                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5166  0CB6  3000               	movlw	0
  5167  0CB7  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5168  0CB8  30FA               	movlw	250
  5169  0CB9  1903               	skipnz
  5170  0CBA  0252               	subwf	(_Temp^(0+128)+1),w
  5171  0CBB  1C03               	skipc
  5172  0CBC  0008               	return
  5173                           
  5174                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5175  0CBD  01D2               	clrf	(_Temp^(0+128)+1)
  5176  0CBE  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5177                           
  5178                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5179  0CBF  1551               	bsf	_Temp^(0+128),2
  5180                           
  5181                           ;OverTemperature_B1.c: 83: }
  5182                           ;OverTemperature_B1.c: 84: } else {
  5183  0CC0  0008               	return
  5184  0CC1                     l11397:	
  5185                           
  5186                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5187  0CC1  01D2               	clrf	(_Temp^(0+128)+1)
  5188  0CC2  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5189                           
  5190                           ;OverTemperature_B1.c: 86: }
  5191                           ;OverTemperature_B1.c: 87: } else {
  5192  0CC3  0008               	return
  5193  0CC4                     l11399:	
  5194                           
  5195                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5196  0CC4  3001               	movlw	1
  5197  0CC5  07D2               	addwf	(_Temp^(0+128)+1),f
  5198  0CC6  3000               	movlw	0
  5199  0CC7  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5200                           
  5201                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5202  0CC8  3000               	movlw	0
  5203  0CC9  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5204  0CCA  3005               	movlw	5
  5205  0CCB  1903               	skipnz
  5206  0CCC  0252               	subwf	(_Temp^(0+128)+1),w
  5207  0CCD  1C03               	skipc
  5208  0CCE  0008               	return
  5209                           
  5210                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5211  0CCF  01D2               	clrf	(_Temp^(0+128)+1)
  5212  0CD0  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5213                           
  5214                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5215  0CD1  3008               	movlw	8
  5216  0CD2  3ED1               	addlw	_Temp& (0+255)
  5217  0CD3  0086               	movwf	6
  5218  0CD4  0187               	clrf	7
  5219  0CD5  0016               	moviw fsr1++
  5220  0CD6  0401               	iorwf	1,w
  5221  0CD7  1903               	skipnz
  5222  0CD8  2D2D               	goto	l1780
  5223                           
  5224                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5225  0CD9  1151               	bcf	_Temp^(0+128),2
  5226                           
  5227                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5228  0CDA  085A               	movf	((_Temp+1)^(0+128)+8),w
  5229  0CDB  01EB               	clrf	(setTemp_Main@AD+1)^(0+128)
  5230  0CDC  07EB               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5231  0CDD  0859               	movf	(_Temp^(0+128)+8),w
  5232  0CDE  01EA               	clrf	setTemp_Main@AD^(0+128)
  5233  0CDF  07EA               	addwf	setTemp_Main@AD^(0+128),f
  5234                           
  5235                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5236  0CE0  3090               	movlw	144
  5237  0CE1  00E6               	movwf	setTemp_Main@SafeValue^(0+128)
  5238  0CE2  3001               	movlw	1
  5239  0CE3  00E7               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5240                           
  5241                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5242  0CE4  3059               	movlw	89
  5243  0CE5  00E8               	movwf	setTemp_Main@DangerValue^(0+128)
  5244  0CE6  3001               	movlw	1
  5245  0CE7  00E9               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5246                           
  5247                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5248  0CE8  1CD1               	btfss	_Temp^(0+128),1
  5249  0CE9  2D08               	goto	l11429
  5250                           
  5251                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5252  0CEA  0867               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5253  0CEB  026B               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5254  0CEC  1D03               	skipz
  5255  0CED  2CF0               	goto	u13885
  5256  0CEE  0866               	movf	setTemp_Main@SafeValue^(0+128),w
  5257  0CEF  026A               	subwf	setTemp_Main@AD^(0+128),w
  5258  0CF0                     u13885:	
  5259  0CF0  1C03               	skipc
  5260  0CF1  2D06               	goto	l11427
  5261                           
  5262                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5263  0CF2  3001               	movlw	1
  5264  0CF3  00E3               	movwf	??_setTemp_Main^(0+128)
  5265  0CF4  0863               	movf	??_setTemp_Main^(0+128),w
  5266  0CF5  07D4               	addwf	(_Temp^(0+128)+3),f
  5267                           
  5268                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5269  0CF6  3003               	movlw	3
  5270  0CF7  0254               	subwf	(_Temp^(0+128)+3),w
  5271  0CF8  1C03               	skipc
  5272  0CF9  2D1C               	goto	l11441
  5273                           
  5274                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5275  0CFA  01D4               	clrf	(_Temp^(0+128)+3)
  5276                           
  5277                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5278  0CFB  10D1               	bcf	_Temp^(0+128),1
  5279                           
  5280                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5281  0CFC  3064               	movlw	100
  5282  0CFD  0020               	movlb	0	; select bank0
  5283  0CFE  00AF               	movwf	setBuz@time
  5284  0CFF  3000               	movlw	0
  5285  0D00  00B0               	movwf	setBuz@time+1
  5286  0D01  3002               	movlw	2
  5287  0D02  3195  2550  318C   	fcall	_setBuz
  5288                           
  5289                           ;OverTemperature_B1.c: 126: }
  5290                           ;OverTemperature_B1.c: 127: } else {
  5291  0D05  2D1C               	goto	l11441
  5292  0D06                     l11427:	
  5293                           
  5294                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5295  0D06  0021               	movlb	1	; select bank1
  5296  0D07  2D1B               	goto	l11439
  5297  0D08                     l11429:	
  5298                           ;OverTemperature_B1.c: 129: }
  5299                           ;OverTemperature_B1.c: 130: } else {
  5300                           
  5301                           
  5302                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5303  0D08  086B               	movf	(setTemp_Main@AD+1)^(0+128),w
  5304  0D09  0269               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5305  0D0A  1D03               	skipz
  5306  0D0B  2D0E               	goto	u13905
  5307  0D0C  086A               	movf	setTemp_Main@AD^(0+128),w
  5308  0D0D  0268               	subwf	setTemp_Main@DangerValue^(0+128),w
  5309  0D0E                     u13905:	
  5310  0D0E  1C03               	skipc
  5311  0D0F  2D1B               	goto	l11439
  5312                           
  5313                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5314  0D10  3001               	movlw	1
  5315  0D11  00E3               	movwf	??_setTemp_Main^(0+128)
  5316  0D12  0863               	movf	??_setTemp_Main^(0+128),w
  5317  0D13  07D4               	addwf	(_Temp^(0+128)+3),f
  5318                           
  5319                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5320  0D14  3003               	movlw	3
  5321  0D15  0254               	subwf	(_Temp^(0+128)+3),w
  5322  0D16  1C03               	skipc
  5323  0D17  2D1C               	goto	l11441
  5324                           
  5325                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5326  0D18  01D4               	clrf	(_Temp^(0+128)+3)
  5327                           
  5328                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5329  0D19  14D1               	bsf	_Temp^(0+128),1
  5330                           
  5331                           ;OverTemperature_B1.c: 136: }
  5332                           ;OverTemperature_B1.c: 137: } else {
  5333  0D1A  2D1C               	goto	l11441
  5334  0D1B                     l11439:	
  5335                           
  5336                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5337  0D1B  01D4               	clrf	(_Temp^(0+128)+3)
  5338  0D1C                     l11441:	
  5339                           
  5340                           ;OverTemperature_B1.c: 139: }
  5341                           ;OverTemperature_B1.c: 140: }
  5342                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5343  0D1C  0021               	movlb	1	; select bank1
  5344  0D1D  086B               	movf	(setTemp_Main@AD+1)^(0+128),w
  5345  0D1E  00E3               	movwf	??_setTemp_Main^(0+128)
  5346  0D1F  0863               	movf	??_setTemp_Main^(0+128),w
  5347  0D20  00E1               	movwf	setProductData@value^(0+128)
  5348  0D21  3018               	movlw	24
  5349  0D22  319C  24E7  318C   	fcall	_setProductData
  5350                           
  5351                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5352  0D25  0021               	movlb	1	; select bank1
  5353  0D26  086A               	movf	setTemp_Main@AD^(0+128),w
  5354  0D27  00E3               	movwf	??_setTemp_Main^(0+128)
  5355  0D28  0863               	movf	??_setTemp_Main^(0+128),w
  5356  0D29  00E1               	movwf	setProductData@value^(0+128)
  5357  0D2A  3019               	movlw	25
  5358  0D2B  319C  24E7         	fcall	_setProductData
  5359  0D2D                     l1780:	
  5360                           
  5361                           ;OverTemperature_B1.c: 158: }
  5362                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5363  0D2D  0021               	movlb	1	; select bank1
  5364  0D2E  01D5               	clrf	(_Temp^(0+128)+4)
  5365  0D2F  01D6               	clrf	((_Temp+1)^(0+128)+4)
  5366                           
  5367                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5368  0D30  01D7               	clrf	(_Temp^(0+128)+6)
  5369  0D31  01D8               	clrf	((_Temp+1)^(0+128)+6)
  5370                           
  5371                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5372  0D32  01D9               	clrf	(_Temp^(0+128)+8)
  5373  0D33  01DA               	clrf	((_Temp+1)^(0+128)+8)
  5374                           
  5375                           ;OverTemperature_B1.c: 162: }
  5376                           ;OverTemperature_B1.c: 163: }
  5377                           ;OverTemperature_B1.c: 166: } else {
  5378  0D34  0008               	return
  5379  0D35                     l1769:	
  5380                           
  5381                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5382  0D35  0022               	movlb	2	; select bank2
  5383  0D36  1C20               	btfss	_myMain^(0+256),0
  5384  0D37  0008               	return
  5385                           
  5386                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5387  0D38  0021               	movlb	1	; select bank1
  5388  0D39  1451               	bsf	_Temp^(0+128),0
  5389  0D3A  0008               	return
  5390  0D3B                     __end_of_setTemp_Main:	
  5391                           
  5392                           	psect	text10
  5393  1B93                     __ptext10:	
  5394 ;; *************** function _Temp_Initialization *****************
  5395 ;; Defined at:
  5396 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;		None               void
  5403 ;; Registers used:
  5404 ;;		status,2, status,0, pclath, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;Total ram usage:        0 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    6
  5417 ;; This function calls:
  5418 ;;		_setTemp_Initialization
  5419 ;; This function is called by:
  5420 ;;		_main
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           
  5425                           ;psect for function _Temp_Initialization
  5426  1B93                     _Temp_Initialization:	
  5427                           
  5428                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5429                           
  5430                           ;incstack = 0
  5431                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5432  1B93  319B  2386         	fcall	_setTemp_Initialization
  5433  1B95  0008               	return
  5434  1B96                     __end_of_Temp_Initialization:	
  5435                           
  5436                           	psect	text11
  5437  1B86                     __ptext11:	
  5438 ;; *************** function _setTemp_Initialization *****************
  5439 ;; Defined at:
  5440 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;		None
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;		None
  5445 ;; Return value:  Size  Location     Type
  5446 ;;		None               void
  5447 ;; Registers used:
  5448 ;;		None
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;Total ram usage:        0 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    5
  5461 ;; This function calls:
  5462 ;;		Nothing
  5463 ;; This function is called by:
  5464 ;;		_Temp_Initialization
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _setTemp_Initialization
  5470  1B86                     _setTemp_Initialization:	
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _setTemp_Initialization: []
  5474  1B86  0008               	return
  5475  1B87                     __end_of_setTemp_Initialization:	
  5476                           
  5477                           	psect	text12
  5478  1BE1                     __ptext12:	
  5479 ;; *************** function _Switch_Main *****************
  5480 ;; Defined at:
  5481 ;;		line 76 in file "../src/Switch_B1.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;		None
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;		None               void
  5488 ;; Registers used:
  5489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;Total ram usage:        0 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    9
  5502 ;; This function calls:
  5503 ;;		_TouchPower
  5504 ;;		_setSw_Main
  5505 ;; This function is called by:
  5506 ;;		_main
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           
  5511                           ;psect for function _Switch_Main
  5512  1BE1                     _Switch_Main:	
  5513                           
  5514                           ;Switch_B1.c: 79: setSw_Main(1);
  5515                           
  5516                           ;incstack = 0
  5517                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5518  1BE1  3001               	movlw	1
  5519  1BE2  3182  2201  319B   	fcall	_setSw_Main
  5520                           
  5521                           ;Switch_B1.c: 91: TouchPower();
  5522  1BE5  319E  2692         	fcall	_TouchPower
  5523  1BE7  0008               	return
  5524  1BE8                     __end_of_Switch_Main:	
  5525                           
  5526                           	psect	text13
  5527  0201                     __ptext13:	
  5528 ;; *************** function _setSw_Main *****************
  5529 ;; Defined at:
  5530 ;;		line 117 in file "../src/Switch_B1.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;  sw              1    wreg     unsigned char 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  sw              1   23[BANK0 ] unsigned char 
  5535 ;; Return value:  Size  Location     Type
  5536 ;;		None               void
  5537 ;; Registers used:
  5538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;Total ram usage:        3 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    8
  5551 ;; This function calls:
  5552 ;;		_SwPointSelect
  5553 ;;		_getMain_All_Error_Status
  5554 ;;		_getSw_KeyStatus
  5555 ;;		_setBuz
  5556 ;;		_setDimmerLights_DimmingOn
  5557 ;;		_setDimmerLights_SwOff
  5558 ;;		_setDimmerLights_SwOn
  5559 ;;		_setRF_Learn
  5560 ;; This function is called by:
  5561 ;;		_Switch_Main
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _setSw_Main
  5567  0201                     _setSw_Main:	
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5571                           ;setSw_Main@sw stored from wreg
  5572  0201  0020               	movlb	0	; select bank0
  5573  0202  00B7               	movwf	setSw_Main@sw
  5574                           
  5575                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5576  0203  0837               	movf	setSw_Main@sw,w
  5577  0204  319C  2486  3182   	fcall	_SwPointSelect
  5578                           
  5579                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5580  0207  0020               	movlb	0	; select bank0
  5581  0208  0867               	movf	_Sw,w
  5582  0209  0086               	movwf	6
  5583  020A  3001               	movlw	1	; select bank2/3
  5584  020B  0087               	movwf	7
  5585  020C  1C01               	btfss	1,0
  5586  020D  2B68               	goto	l2479
  5587                           
  5588                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5589  020E  3000               	movlw	0
  5590  020F  3191  21D8  3182   	fcall	_getMain_All_Error_Status
  5591  0212  3800               	iorlw	0
  5592  0213  1D03               	skipz
  5593  0214  2A30               	goto	l11537
  5594                           
  5595                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5596  0215  0020               	movlb	0	; select bank0
  5597  0216  0A67               	incf	_Sw,w
  5598  0217  0086               	movwf	6
  5599  0218  3001               	movlw	1	; select bank2/3
  5600  0219  0087               	movwf	7
  5601  021A  1081               	bcf	1,1
  5602                           
  5603                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5604  021B  0837               	movf	setSw_Main@sw,w
  5605  021C  319D  2588  3182   	fcall	_getSw_KeyStatus
  5606  021F  3A01               	xorlw	1
  5607  0220  3000               	movlw	0
  5608  0221  1903               	skipnz
  5609  0222  3001               	movlw	1
  5610  0223  0020               	movlb	0	; select bank0
  5611  0224  00B5               	movwf	??_setSw_Main
  5612  0225  0867               	movf	_Sw,w
  5613  0226  0086               	movwf	6
  5614  0227  3001               	movlw	1	; select bank2/3
  5615  0228  0087               	movwf	7
  5616  0229  0DB5               	rlf	??_setSw_Main,f
  5617  022A  0801               	movf	1,w
  5618  022B  0635               	xorwf	??_setSw_Main,w
  5619  022C  39FD               	andlw	-3
  5620  022D  0635               	xorwf	??_setSw_Main,w
  5621  022E  0081               	movwf	1
  5622                           
  5623                           ;Switch_B1.c: 124: } else {
  5624  022F  2A46               	goto	l2481
  5625  0230                     l11537:	
  5626                           
  5627                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5628  0230  0020               	movlb	0	; select bank0
  5629  0231  0A67               	incf	_Sw,w
  5630  0232  0086               	movwf	6
  5631  0233  3001               	movlw	1	; select bank2/3
  5632  0234  0087               	movwf	7
  5633  0235  1881               	btfsc	1,1
  5634  0236  2A46               	goto	l2481
  5635                           
  5636                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5637  0237  0A67               	incf	_Sw,w
  5638  0238  0086               	movwf	6
  5639  0239  3001               	movlw	1	; select bank2/3
  5640  023A  0087               	movwf	7
  5641  023B  1481               	bsf	1,1
  5642                           
  5643                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5644  023C  0867               	movf	_Sw,w
  5645  023D  0086               	movwf	6
  5646  023E  3001               	movlw	1	; select bank2/3
  5647  023F  0087               	movwf	7
  5648  0240  1081               	bcf	1,1
  5649                           
  5650                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5651  0241  0867               	movf	_Sw,w
  5652  0242  0086               	movwf	6
  5653  0243  3001               	movlw	1	; select bank2/3
  5654  0244  0087               	movwf	7
  5655  0245  1501               	bsf	1,2
  5656  0246                     l2481:	
  5657                           
  5658                           ;Switch_B1.c: 130: }
  5659                           ;Switch_B1.c: 131: }
  5660                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5661  0246  0867               	movf	_Sw,w
  5662  0247  0086               	movwf	6
  5663  0248  3001               	movlw	1	; select bank2/3
  5664  0249  0087               	movwf	7
  5665  024A  1C81               	btfss	1,1
  5666  024B  2B15               	goto	l11587
  5667                           
  5668                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5669  024C  0867               	movf	_Sw,w
  5670  024D  0086               	movwf	6
  5671  024E  3001               	movlw	1	; select bank2/3
  5672  024F  0087               	movwf	7
  5673  0250  1901               	btfsc	1,2
  5674  0251  2A73               	goto	l11553
  5675                           
  5676                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5677  0252  3001               	movlw	1
  5678  0253  00B5               	movwf	??_setSw_Main
  5679  0254  0867               	movf	_Sw,w
  5680  0255  3E02               	addlw	2
  5681  0256  0086               	movwf	6
  5682  0257  3001               	movlw	1	; select bank2/3
  5683  0258  0087               	movwf	7
  5684  0259  0835               	movf	??_setSw_Main,w
  5685  025A  0781               	addwf	1,f
  5686                           
  5687                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5688  025B  0867               	movf	_Sw,w
  5689  025C  3E02               	addlw	2
  5690  025D  0086               	movwf	6
  5691  025E  3001               	movlw	1	; select bank2/3
  5692  025F  0087               	movwf	7
  5693  0260  3003               	movlw	3
  5694  0261  0201               	subwf	1,w
  5695  0262  1C03               	skipc
  5696  0263  0008               	return
  5697                           
  5698                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5699  0264  0867               	movf	_Sw,w
  5700  0265  3E02               	addlw	2
  5701  0266  0086               	movwf	6
  5702  0267  3001               	movlw	1	; select bank2/3
  5703  0268  0087               	movwf	7
  5704  0269  0181               	clrf	1
  5705                           
  5706                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5707  026A  0867               	movf	_Sw,w
  5708  026B  0086               	movwf	6
  5709  026C  3001               	movlw	1	; select bank2/3
  5710  026D  0087               	movwf	7
  5711  026E  1501               	bsf	1,2
  5712                           
  5713                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5714  026F  0837               	movf	setSw_Main@sw,w
  5715  0270  3191  21A5         	fcall	_setDimmerLights_SwOn
  5716                           
  5717                           ;Switch_B1.c: 146: }
  5718                           ;Switch_B1.c: 147: } else {
  5719  0272  0008               	return
  5720  0273                     l11553:	
  5721                           
  5722                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5723  0273  0020               	movlb	0	; select bank0
  5724  0274  0867               	movf	_Sw,w
  5725  0275  0086               	movwf	6
  5726  0276  3001               	movlw	1	; select bank2/3
  5727  0277  0087               	movwf	7
  5728  0278  1981               	btfsc	1,3
  5729  0279  2AA5               	goto	l11563
  5730                           
  5731                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5732  027A  0867               	movf	_Sw,w
  5733  027B  3E03               	addlw	3
  5734  027C  0086               	movwf	6
  5735  027D  3001               	movlw	1	; select bank2/3
  5736  027E  0087               	movwf	7
  5737  027F  3001               	movlw	1
  5738  0280  0781               	addwf	1,f
  5739  0281  3141               	addfsr 1,1
  5740  0282  1803               	skipnc
  5741  0283  0A81               	incf	1,f
  5742                           
  5743                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5744  0284  0867               	movf	_Sw,w
  5745  0285  3E03               	addlw	3
  5746  0286  0086               	movwf	6
  5747  0287  3001               	movlw	1	; select bank2/3
  5748  0288  0087               	movwf	7
  5749  0289  3F40               	moviw [0]fsr1
  5750  028A  00B5               	movwf	??_setSw_Main
  5751  028B  3F41               	moviw [1]fsr1
  5752  028C  00B6               	movwf	??_setSw_Main+1
  5753  028D  3000               	movlw	0
  5754  028E  0236               	subwf	??_setSw_Main+1,w
  5755  028F  304B               	movlw	75
  5756  0290  1903               	skipnz
  5757  0291  0235               	subwf	??_setSw_Main,w
  5758  0292  1C03               	skipc
  5759  0293  0008               	return
  5760                           
  5761                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5762  0294  0867               	movf	_Sw,w
  5763  0295  3E03               	addlw	3
  5764  0296  0086               	movwf	6
  5765  0297  3001               	movlw	1	; select bank2/3
  5766  0298  0087               	movwf	7
  5767  0299  3000               	movlw	0
  5768  029A  3FC0               	movwi [0]fsr1
  5769  029B  3FC1               	movwi [1]fsr1
  5770                           
  5771                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5772  029C  0867               	movf	_Sw,w
  5773  029D  0086               	movwf	6
  5774  029E  3001               	movlw	1	; select bank2/3
  5775  029F  0087               	movwf	7
  5776  02A0  1581               	bsf	1,3
  5777                           
  5778                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5779  02A1  0837               	movf	setSw_Main@sw,w
  5780  02A2  3191  214E         	fcall	_setDimmerLights_DimmingOn
  5781                           
  5782                           ;Switch_B1.c: 161: }
  5783                           ;Switch_B1.c: 162: } else {
  5784  02A4  0008               	return
  5785  02A5                     l11563:	
  5786                           
  5787                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5788  02A5  0020               	movlb	0	; select bank0
  5789  02A6  0867               	movf	_Sw,w
  5790  02A7  0086               	movwf	6
  5791  02A8  3001               	movlw	1	; select bank2/3
  5792  02A9  0087               	movwf	7
  5793  02AA  1A01               	btfsc	1,4
  5794  02AB  2AE3               	goto	l11577
  5795                           
  5796                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5797  02AC  0867               	movf	_Sw,w
  5798  02AD  3E05               	addlw	5
  5799  02AE  0086               	movwf	6
  5800  02AF  3001               	movlw	1	; select bank2/3
  5801  02B0  0087               	movwf	7
  5802  02B1  3001               	movlw	1
  5803  02B2  0781               	addwf	1,f
  5804  02B3  3141               	addfsr 1,1
  5805  02B4  1803               	skipnc
  5806  02B5  0A81               	incf	1,f
  5807                           
  5808                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5809  02B6  0867               	movf	_Sw,w
  5810  02B7  3E05               	addlw	5
  5811  02B8  0086               	movwf	6
  5812  02B9  3001               	movlw	1	; select bank2/3
  5813  02BA  0087               	movwf	7
  5814  02BB  3F40               	moviw [0]fsr1
  5815  02BC  00B5               	movwf	??_setSw_Main
  5816  02BD  3F41               	moviw [1]fsr1
  5817  02BE  00B6               	movwf	??_setSw_Main+1
  5818  02BF  3000               	movlw	0
  5819  02C0  0236               	subwf	??_setSw_Main+1,w
  5820  02C1  304B               	movlw	75
  5821  02C2  1903               	skipnz
  5822  02C3  0235               	subwf	??_setSw_Main,w
  5823  02C4  1C03               	skipc
  5824  02C5  0008               	return
  5825                           
  5826                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5827  02C6  0867               	movf	_Sw,w
  5828  02C7  3E05               	addlw	5
  5829  02C8  0086               	movwf	6
  5830  02C9  3001               	movlw	1	; select bank2/3
  5831  02CA  0087               	movwf	7
  5832  02CB  3000               	movlw	0
  5833  02CC  3FC0               	movwi [0]fsr1
  5834  02CD  3FC1               	movwi [1]fsr1
  5835                           
  5836                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5837  02CE  0867               	movf	_Sw,w
  5838  02CF  0086               	movwf	6
  5839  02D0  3001               	movlw	1	; select bank2/3
  5840  02D1  0087               	movwf	7
  5841  02D2  1601               	bsf	1,4
  5842                           
  5843                           ;Switch_B1.c: 171: setRF_Learn(1);
  5844  02D3  3001               	movlw	1
  5845  02D4  319E  2654  3182   	fcall	_setRF_Learn
  5846                           
  5847                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5848  02D7  0022               	movlb	2	; select bank2
  5849  02D8  1EA0               	btfss	_myMain^(0+256),5
  5850  02D9  0008               	return
  5851                           
  5852                           ;Switch_B1.c: 173: setBuz(2, 100);
  5853  02DA  3064               	movlw	100
  5854  02DB  0020               	movlb	0	; select bank0
  5855  02DC  00AF               	movwf	setBuz@time
  5856  02DD  3000               	movlw	0
  5857  02DE  00B0               	movwf	setBuz@time+1
  5858  02DF  3002               	movlw	2
  5859  02E0  3195  2550         	fcall	_setBuz
  5860                           
  5861                           ;Switch_B1.c: 174: }
  5862                           ;Switch_B1.c: 178: }
  5863                           ;Switch_B1.c: 179: } else {
  5864  02E2  0008               	return
  5865  02E3                     l11577:	
  5866                           
  5867                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5868  02E3  0020               	movlb	0	; select bank0
  5869  02E4  0867               	movf	_Sw,w
  5870  02E5  0086               	movwf	6
  5871  02E6  3001               	movlw	1	; select bank2/3
  5872  02E7  0087               	movwf	7
  5873  02E8  1A81               	btfsc	1,5
  5874  02E9  0008               	return
  5875                           
  5876                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5877  02EA  0867               	movf	_Sw,w
  5878  02EB  3E07               	addlw	7
  5879  02EC  0086               	movwf	6
  5880  02ED  3001               	movlw	1	; select bank2/3
  5881  02EE  0087               	movwf	7
  5882  02EF  3001               	movlw	1
  5883  02F0  0781               	addwf	1,f
  5884  02F1  3141               	addfsr 1,1
  5885  02F2  1803               	skipnc
  5886  02F3  0A81               	incf	1,f
  5887                           
  5888                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5889  02F4  0867               	movf	_Sw,w
  5890  02F5  3E07               	addlw	7
  5891  02F6  0086               	movwf	6
  5892  02F7  3001               	movlw	1	; select bank2/3
  5893  02F8  0087               	movwf	7
  5894  02F9  3F40               	moviw [0]fsr1
  5895  02FA  00B5               	movwf	??_setSw_Main
  5896  02FB  3F41               	moviw [1]fsr1
  5897  02FC  00B6               	movwf	??_setSw_Main+1
  5898  02FD  3000               	movlw	0
  5899  02FE  0236               	subwf	??_setSw_Main+1,w
  5900  02FF  3096               	movlw	150
  5901  0300  1903               	skipnz
  5902  0301  0235               	subwf	??_setSw_Main,w
  5903  0302  1C03               	skipc
  5904  0303  0008               	return
  5905                           
  5906                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5907  0304  0867               	movf	_Sw,w
  5908  0305  3E07               	addlw	7
  5909  0306  0086               	movwf	6
  5910  0307  3001               	movlw	1	; select bank2/3
  5911  0308  0087               	movwf	7
  5912  0309  3000               	movlw	0
  5913  030A  3FC0               	movwi [0]fsr1
  5914  030B  3FC1               	movwi [1]fsr1
  5915                           
  5916                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5917  030C  0867               	movf	_Sw,w
  5918  030D  0086               	movwf	6
  5919  030E  3001               	movlw	1	; select bank2/3
  5920  030F  0087               	movwf	7
  5921  0310  1681               	bsf	1,5
  5922                           
  5923                           ;Switch_B1.c: 187: setRF_Learn(0);
  5924  0311  3000               	movlw	0
  5925  0312  319E  2654         	fcall	_setRF_Learn
  5926                           
  5927                           ;Switch_B1.c: 190: }
  5928                           ;Switch_B1.c: 191: }
  5929                           ;Switch_B1.c: 192: }
  5930                           ;Switch_B1.c: 194: }
  5931                           ;Switch_B1.c: 195: }
  5932                           ;Switch_B1.c: 196: } else {
  5933  0314  0008               	return
  5934  0315                     l11587:	
  5935                           
  5936                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5937  0315  0020               	movlb	0	; select bank0
  5938  0316  0867               	movf	_Sw,w
  5939  0317  0086               	movwf	6
  5940  0318  3001               	movlw	1	; select bank2/3
  5941  0319  0087               	movwf	7
  5942  031A  1D01               	btfss	1,2
  5943  031B  0008               	return
  5944                           
  5945                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5946  031C  3001               	movlw	1
  5947  031D  00B5               	movwf	??_setSw_Main
  5948  031E  0867               	movf	_Sw,w
  5949  031F  3E02               	addlw	2
  5950  0320  0086               	movwf	6
  5951  0321  3001               	movlw	1	; select bank2/3
  5952  0322  0087               	movwf	7
  5953  0323  0835               	movf	??_setSw_Main,w
  5954  0324  0781               	addwf	1,f
  5955                           
  5956                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5957  0325  0867               	movf	_Sw,w
  5958  0326  3E02               	addlw	2
  5959  0327  0086               	movwf	6
  5960  0328  3001               	movlw	1	; select bank2/3
  5961  0329  0087               	movwf	7
  5962  032A  3003               	movlw	3
  5963  032B  0201               	subwf	1,w
  5964  032C  1C03               	skipc
  5965  032D  0008               	return
  5966                           
  5967                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5968  032E  0867               	movf	_Sw,w
  5969  032F  3E02               	addlw	2
  5970  0330  0086               	movwf	6
  5971  0331  3001               	movlw	1	; select bank2/3
  5972  0332  0087               	movwf	7
  5973  0333  0181               	clrf	1
  5974                           
  5975                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5976  0334  0867               	movf	_Sw,w
  5977  0335  0086               	movwf	6
  5978  0336  3001               	movlw	1	; select bank2/3
  5979  0337  0087               	movwf	7
  5980  0338  1101               	bcf	1,2
  5981                           
  5982                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5983  0339  0867               	movf	_Sw,w
  5984  033A  3E03               	addlw	3
  5985  033B  0086               	movwf	6
  5986  033C  3001               	movlw	1	; select bank2/3
  5987  033D  0087               	movwf	7
  5988  033E  3000               	movlw	0
  5989  033F  3FC0               	movwi [0]fsr1
  5990  0340  3FC1               	movwi [1]fsr1
  5991                           
  5992                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5993  0341  0867               	movf	_Sw,w
  5994  0342  0086               	movwf	6
  5995  0343  3001               	movlw	1	; select bank2/3
  5996  0344  0087               	movwf	7
  5997  0345  1181               	bcf	1,3
  5998                           
  5999                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6000  0346  0867               	movf	_Sw,w
  6001  0347  0086               	movwf	6
  6002  0348  3001               	movlw	1	; select bank2/3
  6003  0349  0087               	movwf	7
  6004  034A  1201               	bcf	1,4
  6005                           
  6006                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6007  034B  0867               	movf	_Sw,w
  6008  034C  0086               	movwf	6
  6009  034D  3001               	movlw	1	; select bank2/3
  6010  034E  0087               	movwf	7
  6011  034F  1281               	bcf	1,5
  6012                           
  6013                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6014  0350  0867               	movf	_Sw,w
  6015  0351  3E05               	addlw	5
  6016  0352  0086               	movwf	6
  6017  0353  3001               	movlw	1	; select bank2/3
  6018  0354  0087               	movwf	7
  6019  0355  3000               	movlw	0
  6020  0356  3FC0               	movwi [0]fsr1
  6021  0357  3FC1               	movwi [1]fsr1
  6022                           
  6023                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6024  0358  0867               	movf	_Sw,w
  6025  0359  3E07               	addlw	7
  6026  035A  0086               	movwf	6
  6027  035B  3001               	movlw	1	; select bank2/3
  6028  035C  0087               	movwf	7
  6029  035D  3000               	movlw	0
  6030  035E  3FC0               	movwi [0]fsr1
  6031  035F  3FC1               	movwi [1]fsr1
  6032                           
  6033                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6034  0360  0837               	movf	setSw_Main@sw,w
  6035  0361  3193  2315  3182   	fcall	_setDimmerLights_SwOff
  6036                           
  6037                           ;Switch_B1.c: 219: setRF_Learn(0);
  6038  0364  3000               	movlw	0
  6039  0365  319E  2654         	fcall	_setRF_Learn
  6040                           
  6041                           ;Switch_B1.c: 221: }
  6042                           ;Switch_B1.c: 222: }
  6043                           ;Switch_B1.c: 223: }
  6044                           ;Switch_B1.c: 224: } else {
  6045  0367  0008               	return
  6046  0368                     l2479:	
  6047                           
  6048                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6049  0368  0022               	movlb	2	; select bank2
  6050  0369  1C20               	btfss	_myMain^(0+256),0
  6051  036A  0008               	return
  6052                           
  6053                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6054  036B  0020               	movlb	0	; select bank0
  6055  036C  0867               	movf	_Sw,w
  6056  036D  0086               	movwf	6
  6057  036E  3001               	movlw	1	; select bank2/3
  6058  036F  0087               	movwf	7
  6059  0370  1401               	bsf	1,0
  6060  0371  0008               	return
  6061  0372                     __end_of_setSw_Main:	
  6062                           
  6063                           	psect	text14
  6064  1E54                     __ptext14:	
  6065 ;; *************** function _setRF_Learn *****************
  6066 ;; Defined at:
  6067 ;;		line 33 in file "../src/RF_Control_B1.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;  command         1    wreg     unsigned char 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  command         1    7[BANK0 ] unsigned char 
  6072 ;; Return value:  Size  Location     Type
  6073 ;;		None               void
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;Total ram usage:        2 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    5
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_setSw_Main
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           
  6096                           ;psect for function _setRF_Learn
  6097  1E54                     _setRF_Learn:	
  6098                           
  6099                           ;incstack = 0
  6100                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6101                           ;setRF_Learn@command stored from wreg
  6102  1E54  0020               	movlb	0	; select bank0
  6103  1E55  00A7               	movwf	setRF_Learn@command
  6104                           
  6105                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6106  1E56  0827               	movf	setRF_Learn@command,w
  6107  1E57  3A01               	xorlw	1
  6108  1E58  3000               	movlw	0
  6109  1E59  1903               	skipnz
  6110  1E5A  3001               	movlw	1
  6111  1E5B  00A6               	movwf	??_setRF_Learn
  6112  1E5C  0EA6               	swapf	??_setRF_Learn,f
  6113  1E5D  0DA6               	rlf	??_setRF_Learn,f
  6114  1E5E  0DA6               	rlf	??_setRF_Learn,f
  6115  1E5F  0021               	movlb	1	; select bank1
  6116  1E60  0820               	movf	_RF1^(0+128),w
  6117  1E61  0020               	movlb	0	; select bank0
  6118  1E62  0626               	xorwf	??_setRF_Learn,w
  6119  1E63  39BF               	andlw	-65
  6120  1E64  0626               	xorwf	??_setRF_Learn,w
  6121  1E65  0021               	movlb	1	; select bank1
  6122  1E66  00A0               	movwf	_RF1^(0+128)
  6123  1E67  0008               	return
  6124  1E68                     __end_of_setRF_Learn:	
  6125                           
  6126                           	psect	text15
  6127  114E                     __ptext15:	
  6128 ;; *************** function _setDimmerLights_DimmingOn *****************
  6129 ;; Defined at:
  6130 ;;		line 715 in file "../src/Dimmer_B1.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  sw              1    wreg     unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  sw              1    8[BANK0 ] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;		None               void
  6137 ;; Registers used:
  6138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;Total ram usage:        1 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    6
  6151 ;; This function calls:
  6152 ;;		_DimmerLights_SelectPointer
  6153 ;; This function is called by:
  6154 ;;		_setSw_Main
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158                           
  6159                           ;psect for function _setDimmerLights_DimmingOn
  6160  114E                     _setDimmerLights_DimmingOn:	
  6161                           
  6162                           ;incstack = 0
  6163                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6164                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6165  114E  0020               	movlb	0	; select bank0
  6166  114F  00A8               	movwf	setDimmerLights_DimmingOn@sw
  6167                           
  6168                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6169  1150  0828               	movf	setDimmerLights_DimmingOn@sw,w
  6170  1151  319C  2439  3191   	fcall	_DimmerLights_SelectPointer
  6171                           
  6172                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6173  1154  0020               	movlb	0	; select bank0
  6174  1155  0864               	movf	_DimmerLights,w
  6175  1156  0086               	movwf	6
  6176  1157  3001               	movlw	1	; select bank2/3
  6177  1158  0087               	movwf	7
  6178  1159  1881               	btfsc	1,1
  6179  115A  0008               	return
  6180                           
  6181                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6182  115B  0864               	movf	_DimmerLights,w
  6183  115C  0086               	movwf	6
  6184  115D  3001               	movlw	1	; select bank2/3
  6185  115E  0087               	movwf	7
  6186  115F  1C01               	btfss	1,0
  6187  1160  0008               	return
  6188                           
  6189                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6190  1161  0A64               	incf	_DimmerLights,w
  6191  1162  0086               	movwf	6
  6192  1163  3001               	movlw	1	; select bank2/3
  6193  1164  0087               	movwf	7
  6194  1165  1401               	bsf	1,0
  6195                           
  6196                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6197  1166  0864               	movf	_DimmerLights,w
  6198  1167  0086               	movwf	6
  6199  1168  3001               	movlw	1	; select bank2/3
  6200  1169  0087               	movwf	7
  6201  116A  1581               	bsf	1,3
  6202                           
  6203                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6204  116B  0864               	movf	_DimmerLights,w
  6205  116C  0086               	movwf	6
  6206  116D  3001               	movlw	1	; select bank2/3
  6207  116E  0087               	movwf	7
  6208  116F  1601               	bsf	1,4
  6209                           
  6210                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6211  1170  0864               	movf	_DimmerLights,w
  6212  1171  0086               	movwf	6
  6213  1172  3001               	movlw	1	; select bank2/3
  6214  1173  0087               	movwf	7
  6215  1174  1681               	bsf	1,5
  6216  1175  0008               	return
  6217  1176                     __end_of_setDimmerLights_DimmingOn:	
  6218                           
  6219                           	psect	text16
  6220  1D88                     __ptext16:	
  6221 ;; *************** function _getSw_KeyStatus *****************
  6222 ;; Defined at:
  6223 ;;		line 237 in file "../src/Switch_B1.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  sw              1    wreg     unsigned char 
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;  sw              1    0[COMMON] unsigned char 
  6228 ;;  status          1    7[BANK0 ] unsigned char 
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      unsigned char 
  6231 ;; Registers used:
  6232 ;;		wreg, status,2
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;Total ram usage:        3 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    5
  6245 ;; This function calls:
  6246 ;;		Nothing
  6247 ;; This function is called by:
  6248 ;;		_setSw_Main
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function _getSw_KeyStatus
  6254  1D88                     _getSw_KeyStatus:	
  6255                           
  6256                           ;Switch_B1.c: 238: char status = 0;
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6260  1D88  0020               	movlb	0	; select bank0
  6261  1D89  01A7               	clrf	getSw_KeyStatus@status
  6262                           
  6263                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6264  1D8A  01A8               	clrf	_getSw_KeyStatus$6258
  6265  1D8B  0AA8               	incf	_getSw_KeyStatus$6258,f
  6266  1D8C  1F0C               	btfss	12,6	;volatile
  6267  1D8D  1A0C               	btfsc	12,4	;volatile
  6268  1D8E  2D93               	goto	l6921
  6269  1D8F  1C0C               	btfss	12,0	;volatile
  6270  1D90  1B8C               	btfsc	12,7	;volatile
  6271  1D91  2D93               	goto	l6921
  6272  1D92  01A8               	clrf	_getSw_KeyStatus$6258
  6273  1D93                     l6921:	
  6274  1D93  0828               	movf	_getSw_KeyStatus$6258,w
  6275  1D94  00A6               	movwf	??_getSw_KeyStatus
  6276  1D95  0826               	movf	??_getSw_KeyStatus,w
  6277  1D96  00A7               	movwf	getSw_KeyStatus@status
  6278                           
  6279                           ;Switch_B1.c: 275: return status;
  6280  1D97  0827               	movf	getSw_KeyStatus@status,w
  6281  1D98  0008               	return
  6282  1D99                     __end_of_getSw_KeyStatus:	
  6283                           
  6284                           	psect	text17
  6285  1C86                     __ptext17:	
  6286 ;; *************** function _SwPointSelect *****************
  6287 ;; Defined at:
  6288 ;;		line 25 in file "../src/Switch_B1.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  sw              1    wreg     unsigned char 
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  sw              1    7[BANK0 ] unsigned char 
  6293 ;; Return value:  Size  Location     Type
  6294 ;;		None               void
  6295 ;; Registers used:
  6296 ;;		wreg
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;Total ram usage:        2 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    5
  6309 ;; This function calls:
  6310 ;;		Nothing
  6311 ;; This function is called by:
  6312 ;;		_setSw_Main
  6313 ;; This function uses a non-reentrant model
  6314 ;;
  6315                           
  6316                           
  6317                           ;psect for function _SwPointSelect
  6318  1C86                     _SwPointSelect:	
  6319                           
  6320                           ;incstack = 0
  6321                           ; Regs used in _SwPointSelect: [wreg]
  6322                           ;SwPointSelect@sw stored from wreg
  6323  1C86  0020               	movlb	0	; select bank0
  6324  1C87  00A7               	movwf	SwPointSelect@sw
  6325                           
  6326                           ;Switch_B1.c: 28: if (sw == 1) {
  6327  1C88  0827               	movf	SwPointSelect@sw,w
  6328  1C89  3A01               	xorlw	1
  6329  1C8A  1D03               	skipz
  6330  1C8B  0008               	return
  6331                           
  6332                           ;Switch_B1.c: 29: Sw = &Sw1;
  6333  1C8C  30E3               	movlw	_Sw1& (0+255)
  6334  1C8D  00A6               	movwf	??_SwPointSelect
  6335  1C8E  0826               	movf	??_SwPointSelect,w
  6336  1C8F  00E7               	movwf	_Sw
  6337  1C90  0008               	return
  6338  1C91                     __end_of_SwPointSelect:	
  6339                           
  6340                           	psect	text18
  6341  1E92                     __ptext18:	
  6342 ;; *************** function _TouchPower *****************
  6343 ;; Defined at:
  6344 ;;		line 10 in file "../src/Switch_B1.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;		None
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;		None
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;Total ram usage:        0 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    6
  6365 ;; This function calls:
  6366 ;;		_Timeout_Counter
  6367 ;;		_set_TimeoutCleared
  6368 ;; This function is called by:
  6369 ;;		_Switch_Main
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           
  6374                           ;psect for function _TouchPower
  6375  1E92                     _TouchPower:	
  6376                           
  6377                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6378                           
  6379                           ;incstack = 0
  6380                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6381  1E92  0022               	movlb	2	; select bank2
  6382  1E93  1C20               	btfss	_myMain^(0+256),0
  6383  1E94  0008               	return
  6384                           
  6385                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6386  1E95  0020               	movlb	0	; select bank0
  6387  1E96  180D               	btfsc	13,0	;volatile
  6388  1E97  0008               	return
  6389  1E98  2E9E               	goto	l7413
  6390  1E99                     l2459:	
  6391                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6392                           
  6393                           
  6394                           ;Switch_B1.c: 14: RB0 = 1;
  6395  1E99  0020               	movlb	0	; select bank0
  6396  1E9A  140D               	bsf	13,0	;volatile
  6397                           
  6398                           ;Switch_B1.c: 15: Timeout_Counter();
  6399  1E9B  319E  26D3  319E   	fcall	_Timeout_Counter
  6400  1E9E                     l7413:	
  6401  1E9E  0020               	movlb	0	; select bank0
  6402  1E9F  180D               	btfsc	13,0	;volatile
  6403  1EA0  2EA4               	goto	l7417
  6404  1EA1  0022               	movlb	2	; select bank2
  6405  1EA2  1D2A               	btfss	(_myMain^(0+256)+10),2
  6406  1EA3  2E99               	goto	l2459
  6407  1EA4                     l7417:	
  6408                           
  6409                           ;Switch_B1.c: 16: }
  6410                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6411  1EA4  3190  2000         	fcall	_set_TimeoutCleared
  6412  1EA6  0008               	return
  6413  1EA7                     __end_of_TouchPower:	
  6414                           
  6415                           	psect	text19
  6416  1000                     __ptext19:	
  6417 ;; *************** function _set_TimeoutCleared *****************
  6418 ;; Defined at:
  6419 ;;		line 281 in file "../src/Main_B1.c"
  6420 ;; Parameters:    Size  Location     Type
  6421 ;;		None
  6422 ;; Auto vars:     Size  Location     Type
  6423 ;;		None
  6424 ;; Return value:  Size  Location     Type
  6425 ;;		None               void
  6426 ;; Registers used:
  6427 ;;		status,2
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;Total ram usage:        0 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    5
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_getAD
  6444 ;;		_TouchPower
  6445 ;; This function uses a non-reentrant model
  6446 ;;
  6447                           
  6448                           
  6449                           ;psect for function _set_TimeoutCleared
  6450  1000                     _set_TimeoutCleared:	
  6451                           
  6452                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in _set_TimeoutCleared: [status,2]
  6456  1000  0022               	movlb	2	; select bank2
  6457  1001  112A               	bcf	(_myMain^(0+256)+10),2
  6458                           
  6459                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6460  1002  01AB               	clrf	(_myMain^(0+256)+11)
  6461  1003  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6462  1004  0008               	return
  6463  1005                     __end_of_set_TimeoutCleared:	
  6464                           
  6465                           	psect	text20
  6466  1ED3                     __ptext20:	
  6467 ;; *************** function _Timeout_Counter *****************
  6468 ;; Defined at:
  6469 ;;		line 272 in file "../src/Main_B1.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;		None
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;		None
  6474 ;; Return value:  Size  Location     Type
  6475 ;;		None               void
  6476 ;; Registers used:
  6477 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;Total ram usage:        0 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    5
  6490 ;; This function calls:
  6491 ;;		Nothing
  6492 ;; This function is called by:
  6493 ;;		_getAD
  6494 ;;		_TouchPower
  6495 ;; This function uses a non-reentrant model
  6496 ;;
  6497                           
  6498                           
  6499                           ;psect for function _Timeout_Counter
  6500  1ED3                     _Timeout_Counter:	
  6501                           
  6502                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6503                           
  6504                           ;incstack = 0
  6505                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6506  1ED3  3001               	movlw	1
  6507  1ED4  0022               	movlb	2	; select bank2
  6508  1ED5  07AB               	addwf	(_myMain^(0+256)+11),f
  6509  1ED6  3000               	movlw	0
  6510  1ED7  3DAC               	addwfc	((_myMain+1)^(0+256)+11),f
  6511                           
  6512                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6513  1ED8  300B               	movlw	11
  6514  1ED9  3E20               	addlw	_myMain& (0+255)
  6515  1EDA  0086               	movwf	6
  6516  1EDB  3001               	movlw	1	; select bank2/3
  6517  1EDC  0087               	movwf	7
  6518  1EDD  3F40               	moviw [0]fsr1
  6519  1EDE  3AA8               	xorlw	168
  6520  1EDF  1D03               	skipz
  6521  1EE0  2EE3               	goto	u6035
  6522  1EE1  3F41               	moviw [1]fsr1
  6523  1EE2  3A61               	xorlw	97
  6524  1EE3                     u6035:	
  6525  1EE3  1D03               	skipz
  6526  1EE4  0008               	return
  6527                           
  6528                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6529  1EE5  01AB               	clrf	(_myMain^(0+256)+11)
  6530  1EE6  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6531                           
  6532                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6533  1EE7  152A               	bsf	(_myMain^(0+256)+10),2
  6534  1EE8  0008               	return
  6535  1EE9                     __end_of_Timeout_Counter:	
  6536                           
  6537                           	psect	text21
  6538  1BBD                     __ptext21:	
  6539 ;; *************** function _Switch_Initialization *****************
  6540 ;; Defined at:
  6541 ;;		line 46 in file "../src/Switch_B1.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;		None
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;		None               void
  6548 ;; Registers used:
  6549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;Total ram usage:        0 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    8
  6562 ;; This function calls:
  6563 ;;		_setSw_Initialization
  6564 ;; This function is called by:
  6565 ;;		_main
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           
  6570                           ;psect for function _Switch_Initialization
  6571  1BBD                     _Switch_Initialization:	
  6572                           
  6573                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6574                           
  6575                           ;incstack = 0
  6576                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6577  1BBD  3001               	movlw	1
  6578  1BBE  319D  2534         	fcall	_setSw_Initialization
  6579  1BC0  0008               	return
  6580  1BC1                     __end_of_Switch_Initialization:	
  6581                           
  6582                           	psect	text22
  6583  1D34                     __ptext22:	
  6584 ;; *************** function _setSw_Initialization *****************
  6585 ;; Defined at:
  6586 ;;		line 66 in file "../src/Switch_B1.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  sw              1    wreg     unsigned char 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  sw              1   10[BANK0 ] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;		None               void
  6593 ;; Registers used:
  6594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;Total ram usage:        1 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    7
  6607 ;; This function calls:
  6608 ;;		_setLED
  6609 ;; This function is called by:
  6610 ;;		_Switch_Initialization
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           
  6615                           ;psect for function _setSw_Initialization
  6616  1D34                     _setSw_Initialization:	
  6617                           
  6618                           ;incstack = 0
  6619                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6620                           ;setSw_Initialization@sw stored from wreg
  6621  1D34  0020               	movlb	0	; select bank0
  6622  1D35  00AA               	movwf	setSw_Initialization@sw
  6623                           
  6624                           ;Switch_B1.c: 68: setLED(sw, 1);
  6625  1D36  01A8               	clrf	setLED@command
  6626  1D37  0AA8               	incf	setLED@command,f
  6627  1D38  082A               	movf	setSw_Initialization@sw,w
  6628  1D39  3192  2272  319D   	fcall	_setLED
  6629                           
  6630                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6631  1D3C  0020               	movlb	0	; select bank0
  6632  1D3D  01A8               	clrf	setLED@command
  6633  1D3E  0AA8               	incf	setLED@command,f
  6634  1D3F  082A               	movf	setSw_Initialization@sw,w
  6635  1D40  3E01               	addlw	1
  6636  1D41  3192  2272         	fcall	_setLED
  6637  1D43  0008               	return
  6638  1D44                     __end_of_setSw_Initialization:	
  6639                           
  6640                           	psect	text23
  6641  1B90                     __ptext23:	
  6642 ;; *************** function _RF_Main *****************
  6643 ;; Defined at:
  6644 ;;		line 26 in file "../src/RF_Control_B1.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;		None               void
  6651 ;; Registers used:
  6652 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6653 ;; Tracked objects:
  6654 ;;		On entry : 0/0
  6655 ;;		On exit  : 0/0
  6656 ;;		Unchanged: 0/0
  6657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:   12
  6665 ;; This function calls:
  6666 ;;		_setRF_Main
  6667 ;; This function is called by:
  6668 ;;		_main
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _RF_Main
  6674  1B90                     _RF_Main:	
  6675                           
  6676                           ;RF_Control_B1.c: 28: setRF_Main();
  6677                           
  6678                           ;incstack = 0
  6679                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6680  1B90  3185  2564         	fcall	_setRF_Main
  6681  1B92  0008               	return
  6682  1B93                     __end_of_RF_Main:	
  6683                           
  6684                           	psect	text24
  6685  0564                     __ptext24:	
  6686 ;; *************** function _setRF_Main *****************
  6687 ;; Defined at:
  6688 ;;		line 53 in file "../src/RF_Control_B1.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;		None
  6691 ;; Auto vars:     Size  Location     Type
  6692 ;;  error           1    0[BANK3 ] unsigned char 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;		None               void
  6695 ;; Registers used:
  6696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 0/0
  6699 ;;		On exit  : 0/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Totals:         0       0       0       1       1       0       0       0       0       0       0       0       
      +0       0
  6706 ;;Total ram usage:        2 bytes
  6707 ;; Hardware stack levels used:    1
  6708 ;; Hardware stack levels required when called:   11
  6709 ;; This function calls:
  6710 ;;		_CC2500_PowerOnInitial
  6711 ;;		_CC2500_RxData
  6712 ;;		_CC2500_TxData
  6713 ;;		_CC2500_WriteCommand
  6714 ;;		_RF_RxDisable
  6715 ;;		___lwdiv
  6716 ;;		_getBuz_GO
  6717 ;;		_getRF_KeyStatus
  6718 ;;		_getRxData
  6719 ;; This function is called by:
  6720 ;;		_RF_Main
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           
  6725                           ;psect for function _setRF_Main
  6726  0564                     _setRF_Main:	
  6727                           
  6728                           ;RF_Control_B1.c: 54: char error = 0;
  6729                           
  6730                           ;incstack = 0
  6731                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6732  0564  0023               	movlb	3	; select bank3
  6733  0565  01EC               	clrf	setRF_Main@error^(0+384)
  6734                           
  6735                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6736  0566  0021               	movlb	1	; select bank1
  6737  0567  1C20               	btfss	_RF1^(0+128),0
  6738  0568  2E39               	goto	l2101
  6739                           
  6740                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6741  0569  319D  2566  3185   	fcall	_getBuz_GO
  6742  056C  0020               	movlb	0	; select bank0
  6743  056D  0827               	movf	?_getBuz_GO+1,w
  6744  056E  0426               	iorwf	?_getBuz_GO,w
  6745  056F  1D03               	skipz
  6746  0570  2E1A               	goto	l11503
  6747                           
  6748                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6749  0571  319D  2577  3185   	fcall	_getRF_KeyStatus
  6750  0574  3A01               	xorlw	1
  6751  0575  3000               	movlw	0
  6752  0576  1903               	skipnz
  6753  0577  3001               	movlw	1
  6754  0578  0022               	movlb	2	; select bank2
  6755  0579  00EF               	movwf	??_setRF_Main^(0+256)
  6756  057A  0CEF               	rrf	??_setRF_Main^(0+256),f
  6757  057B  0CEF               	rrf	??_setRF_Main^(0+256),f
  6758  057C  0021               	movlb	1	; select bank1
  6759  057D  0820               	movf	_RF1^(0+128),w
  6760  057E  0022               	movlb	2	; select bank2
  6761  057F  066F               	xorwf	??_setRF_Main^(0+256),w
  6762  0580  397F               	andlw	-129
  6763  0581  066F               	xorwf	??_setRF_Main^(0+256),w
  6764  0582  0021               	movlb	1	; select bank1
  6765  0583  00A0               	movwf	_RF1^(0+128)
  6766                           
  6767                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6768  0584  1FA0               	btfss	_RF1^(0+128),7
  6769  0585  2D88               	goto	l2105
  6770  0586  1F20               	btfss	_RF1^(0+128),6
  6771  0587  2E1A               	goto	l11503
  6772  0588                     l2105:	
  6773                           
  6774                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6775  0588  1D20               	btfss	_RF1^(0+128),2
  6776  0589  2DD9               	goto	l2106
  6777                           
  6778                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6779  058A  1B20               	btfsc	_RF1^(0+128),6
  6780  058B  2DD4               	goto	l11475
  6781                           
  6782                           ;RF_Control_B1.c: 68: RF1.Count++;
  6783  058C  3001               	movlw	1
  6784  058D  07A2               	addwf	(_RF1^(0+128)+2),f
  6785  058E  3000               	movlw	0
  6786  058F  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6787                           
  6788                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6789  0590  3014               	movlw	20
  6790  0591  0020               	movlb	0	; select bank0
  6791  0592  00A6               	movwf	___lwdiv@divisor
  6792  0593  3000               	movlw	0
  6793  0594  00A7               	movwf	___lwdiv@divisor+1
  6794  0595  0021               	movlb	1	; select bank1
  6795  0596  0828               	movf	((_RF1+1)^(0+128)+7),w
  6796  0597  0020               	movlb	0	; select bank0
  6797  0598  01A9               	clrf	___lwdiv@dividend+1
  6798  0599  07A9               	addwf	___lwdiv@dividend+1,f
  6799  059A  0021               	movlb	1	; select bank1
  6800  059B  0827               	movf	(_RF1^(0+128)+7),w
  6801  059C  0020               	movlb	0	; select bank0
  6802  059D  01A8               	clrf	___lwdiv@dividend
  6803  059E  07A8               	addwf	___lwdiv@dividend,f
  6804  059F  3192  22DE  3185   	fcall	___lwdiv
  6805  05A2  0020               	movlb	0	; select bank0
  6806  05A3  0827               	movf	?___lwdiv+1,w
  6807  05A4  0021               	movlb	1	; select bank1
  6808  05A5  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6809  05A6  1D03               	skipz
  6810  05A7  2DAC               	goto	u13995
  6811  05A8  0020               	movlb	0	; select bank0
  6812  05A9  0826               	movf	?___lwdiv,w
  6813  05AA  0021               	movlb	1	; select bank1
  6814  05AB  0222               	subwf	(_RF1^(0+128)+2),w
  6815  05AC                     u13995:	
  6816  05AC  1C03               	skipc
  6817  05AD  2E1A               	goto	l11503
  6818                           
  6819                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6820  05AE  3014               	movlw	20
  6821  05AF  0020               	movlb	0	; select bank0
  6822  05B0  00A6               	movwf	___lwdiv@divisor
  6823  05B1  3000               	movlw	0
  6824  05B2  00A7               	movwf	___lwdiv@divisor+1
  6825  05B3  0021               	movlb	1	; select bank1
  6826  05B4  0828               	movf	((_RF1+1)^(0+128)+7),w
  6827  05B5  0020               	movlb	0	; select bank0
  6828  05B6  01A9               	clrf	___lwdiv@dividend+1
  6829  05B7  07A9               	addwf	___lwdiv@dividend+1,f
  6830  05B8  0021               	movlb	1	; select bank1
  6831  05B9  0827               	movf	(_RF1^(0+128)+7),w
  6832  05BA  0020               	movlb	0	; select bank0
  6833  05BB  01A8               	clrf	___lwdiv@dividend
  6834  05BC  07A8               	addwf	___lwdiv@dividend,f
  6835  05BD  3192  22DE  3185   	fcall	___lwdiv
  6836  05C0  0020               	movlb	0	; select bank0
  6837  05C1  0827               	movf	?___lwdiv+1,w
  6838  05C2  0021               	movlb	1	; select bank1
  6839  05C3  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6840  05C4  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6841  05C5  0020               	movlb	0	; select bank0
  6842  05C6  0826               	movf	?___lwdiv,w
  6843  05C7  0021               	movlb	1	; select bank1
  6844  05C8  01A2               	clrf	(_RF1^(0+128)+2)
  6845  05C9  07A2               	addwf	(_RF1^(0+128)+2),f
  6846                           
  6847                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6848  05CA  1120               	bcf	_RF1^(0+128),2
  6849                           
  6850                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6851  05CB  01AA               	clrf	(_RF1^(0+128)+10)
  6852  05CC  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6853                           
  6854                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6855  05CD  319D  2505  3185   	fcall	_RF_RxDisable
  6856                           
  6857                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6858  05D0  3196  26C4  3185   	fcall	_CC2500_TxData
  6859                           
  6860                           ;RF_Control_B1.c: 77: }
  6861                           ;RF_Control_B1.c: 78: } else {
  6862  05D3  2E1A               	goto	l11503
  6863  05D4                     l11475:	
  6864                           
  6865                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6866  05D4  0021               	movlb	1	; select bank1
  6867  05D5  01A2               	clrf	(_RF1^(0+128)+2)
  6868  05D6  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6869                           
  6870                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6871  05D7  1120               	bcf	_RF1^(0+128),2
  6872                           
  6873                           ;RF_Control_B1.c: 81: }
  6874                           ;RF_Control_B1.c: 82: } else {
  6875  05D8  2E1A               	goto	l11503
  6876  05D9                     l2106:	
  6877                           
  6878                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6879  05D9  1DA0               	btfss	_RF1^(0+128),3
  6880  05DA  2DE8               	goto	l11489
  6881                           
  6882                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6883  05DB  3197  272A  3185   	fcall	_CC2500_RxData
  6884                           
  6885                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6886  05DE  0021               	movlb	1	; select bank1
  6887  05DF  1CA0               	btfss	_RF1^(0+128),1
  6888  05E0  2E1A               	goto	l11503
  6889                           
  6890                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6891  05E1  10A0               	bcf	_RF1^(0+128),1
  6892                           
  6893                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6894  05E2  01AA               	clrf	(_RF1^(0+128)+10)
  6895  05E3  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6896                           
  6897                           ;RF_Control_B1.c: 97: getRxData();
  6898  05E4  3189  2195  3185   	fcall	_getRxData
  6899                           
  6900                           ;RF_Control_B1.c: 100: }
  6901                           ;RF_Control_B1.c: 101: } else {
  6902  05E7  2E1A               	goto	l11503
  6903  05E8                     l11489:	
  6904                           
  6905                           ;RF_Control_B1.c: 102: RF1.Count++;
  6906  05E8  3001               	movlw	1
  6907  05E9  0021               	movlb	1	; select bank1
  6908  05EA  07A2               	addwf	(_RF1^(0+128)+2),f
  6909  05EB  3000               	movlw	0
  6910  05EC  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6911                           
  6912                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6913  05ED  3014               	movlw	20
  6914  05EE  0020               	movlb	0	; select bank0
  6915  05EF  00A6               	movwf	___lwdiv@divisor
  6916  05F0  3000               	movlw	0
  6917  05F1  00A7               	movwf	___lwdiv@divisor+1
  6918  05F2  0021               	movlb	1	; select bank1
  6919  05F3  0828               	movf	((_RF1+1)^(0+128)+7),w
  6920  05F4  0020               	movlb	0	; select bank0
  6921  05F5  01A9               	clrf	___lwdiv@dividend+1
  6922  05F6  07A9               	addwf	___lwdiv@dividend+1,f
  6923  05F7  0021               	movlb	1	; select bank1
  6924  05F8  0827               	movf	(_RF1^(0+128)+7),w
  6925  05F9  0020               	movlb	0	; select bank0
  6926  05FA  01A8               	clrf	___lwdiv@dividend
  6927  05FB  07A8               	addwf	___lwdiv@dividend,f
  6928  05FC  3192  22DE  3185   	fcall	___lwdiv
  6929  05FF  0020               	movlb	0	; select bank0
  6930  0600  0827               	movf	?___lwdiv+1,w
  6931  0601  0021               	movlb	1	; select bank1
  6932  0602  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6933  0603  1D03               	skipz
  6934  0604  2E09               	goto	u14025
  6935  0605  0020               	movlb	0	; select bank0
  6936  0606  0826               	movf	?___lwdiv,w
  6937  0607  0021               	movlb	1	; select bank1
  6938  0608  0222               	subwf	(_RF1^(0+128)+2),w
  6939  0609                     u14025:	
  6940  0609  1C03               	skipc
  6941  060A  2E1A               	goto	l11503
  6942                           
  6943                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6944  060B  01A2               	clrf	(_RF1^(0+128)+2)
  6945  060C  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6946                           
  6947                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6948  060D  15A0               	bsf	_RF1^(0+128),3
  6949                           
  6950                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6951  060E  3036               	movlw	54
  6952  060F  319F  2762  3185   	fcall	_CC2500_WriteCommand
  6953                           
  6954                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6955  0612  303A               	movlw	58
  6956  0613  319F  2762  3185   	fcall	_CC2500_WriteCommand
  6957                           
  6958                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6959  0616  3034               	movlw	52
  6960  0617  319F  2762  3185   	fcall	_CC2500_WriteCommand
  6961  061A                     l11503:	
  6962                           
  6963                           ;RF_Control_B1.c: 111: }
  6964                           ;RF_Control_B1.c: 112: }
  6965                           ;RF_Control_B1.c: 113: }
  6966                           ;RF_Control_B1.c: 114: }
  6967                           ;RF_Control_B1.c: 115: }
  6968                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6969  061A  3001               	movlw	1
  6970  061B  0021               	movlb	1	; select bank1
  6971  061C  07AA               	addwf	(_RF1^(0+128)+10),f
  6972  061D  3000               	movlw	0
  6973  061E  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6974                           
  6975                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6976  061F  300B               	movlw	11
  6977  0620  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6978  0621  30B9               	movlw	185
  6979  0622  1903               	skipnz
  6980  0623  022A               	subwf	(_RF1^(0+128)+10),w
  6981  0624  1C03               	skipc
  6982  0625  2E32               	goto	l11517
  6983                           
  6984                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6985  0626  01AA               	clrf	(_RF1^(0+128)+10)
  6986  0627  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6987                           
  6988                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6989  0628  11A0               	bcf	_RF1^(0+128),3
  6990                           
  6991                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6992  0629  10A0               	bcf	_RF1^(0+128),1
  6993                           
  6994                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6995  062A  3036               	movlw	54
  6996  062B  319F  2762  3185   	fcall	_CC2500_WriteCommand
  6997                           
  6998                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6999  062E  303A               	movlw	58
  7000  062F  319F  2762  3185   	fcall	_CC2500_WriteCommand
  7001  0632                     l11517:	
  7002                           
  7003                           ;RF_Control_B1.c: 125: }
  7004                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7005  0632  0021               	movlb	1	; select bank1
  7006  0633  1F21               	btfss	(_RF1^(0+128)+1),6
  7007  0634  0008               	return
  7008                           
  7009                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7010  0635  1321               	bcf	(_RF1^(0+128)+1),6
  7011                           
  7012                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7013  0636  319E  267D         	fcall	_CC2500_PowerOnInitial
  7014                           
  7015                           ;RF_Control_B1.c: 130: }
  7016                           ;RF_Control_B1.c: 132: } else {
  7017  0638  0008               	return
  7018  0639                     l2101:	
  7019                           
  7020                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7021  0639  0022               	movlb	2	; select bank2
  7022  063A  1C20               	btfss	_myMain^(0+256),0
  7023  063B  0008               	return
  7024                           
  7025                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7026  063C  0021               	movlb	1	; select bank1
  7027  063D  1420               	bsf	_RF1^(0+128),0
  7028  063E  0008               	return
  7029  063F                     __end_of_setRF_Main:	
  7030                           
  7031                           	psect	text25
  7032  0995                     __ptext25:	
  7033 ;; *************** function _getRxData *****************
  7034 ;; Defined at:
  7035 ;;		line 227 in file "../src/RF_Control_B1.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;		None
  7038 ;; Auto vars:     Size  Location     Type
  7039 ;;  error           1    0[BANK2 ] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;		None               void
  7042 ;; Registers used:
  7043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7050 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  7051 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7052 ;;      Totals:         0       0       1       1       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;Total ram usage:        2 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:   10
  7056 ;; This function calls:
  7057 ;;		_getMain_All_Error_Status
  7058 ;;		_setControl_Lights_Table
  7059 ;;		_setLog_Code
  7060 ;;		_setTxData
  7061 ;; This function is called by:
  7062 ;;		_setRF_Main
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           
  7067                           ;psect for function _getRxData
  7068  0995                     _getRxData:	
  7069                           
  7070                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7074  0995  0023               	movlb	3	; select bank3
  7075  0996  0820               	movf	_RF_Data^(0+384),w
  7076  0997  3AAA               	xorlw	170
  7077  0998  1D03               	skipz
  7078  0999  29AB               	goto	l11241
  7079  099A  0821               	movf	(_RF_Data^(0+384)+1),w
  7080  099B  3A01               	xorlw	1
  7081  099C  1D03               	skipz
  7082  099D  29AB               	goto	l11241
  7083                           
  7084                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7085  099E  3055               	movlw	85
  7086  099F  0021               	movlb	1	; select bank1
  7087  09A0  00EE               	movwf	??_getRxData^(0+128)
  7088  09A1  086F               	movf	_product^(0+128),w
  7089  09A2  3E02               	addlw	2
  7090  09A3  0086               	movwf	6
  7091  09A4  3002               	movlw	2	; select bank4/5
  7092  09A5  0087               	movwf	7
  7093  09A6  086E               	movf	??_getRxData^(0+128),w
  7094  09A7  0081               	movwf	1
  7095                           
  7096                           ;RF_Control_B1.c: 231: setTxData();
  7097  09A8  318F  2745         	fcall	_setTxData
  7098                           
  7099                           ;RF_Control_B1.c: 235: } else {
  7100  09AA  0008               	return
  7101  09AB                     l11241:	
  7102                           
  7103                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7104  09AB  3000               	movlw	0
  7105  09AC  3191  21D8  3189   	fcall	_getMain_All_Error_Status
  7106  09AF  0021               	movlb	1	; select bank1
  7107  09B0  00EE               	movwf	??_getRxData^(0+128)
  7108  09B1  086E               	movf	??_getRxData^(0+128),w
  7109  09B2  0022               	movlb	2	; select bank2
  7110  09B3  00EE               	movwf	getRxData@error^(0+256)
  7111                           
  7112                           ;RF_Control_B1.c: 237: if (error == 0) {
  7113  09B4  08EE               	movf	getRxData@error^(0+256),f
  7114  09B5  1D03               	skipz
  7115  09B6  2A07               	goto	l2146
  7116                           
  7117                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7118  09B7  0021               	movlb	1	; select bank1
  7119  09B8  1F20               	btfss	_RF1^(0+128),6
  7120  09B9  29C5               	goto	l11253
  7121                           
  7122                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7123  09BA  0023               	movlb	3	; select bank3
  7124  09BB  08A0               	movf	_RF_Data^(0+384),f
  7125  09BC  1D03               	skipz
  7126  09BD  0008               	return
  7127  09BE  0821               	movf	(_RF_Data^(0+384)+1),w
  7128  09BF  3A64               	xorlw	100
  7129  09C0  1D03               	skipz
  7130  09C1  0008               	return
  7131                           
  7132                           ;RF_Control_B1.c: 241: setLog_Code();
  7133  09C2  3192  223E         	fcall	_setLog_Code
  7134                           
  7135                           ;RF_Control_B1.c: 242: }
  7136                           ;RF_Control_B1.c: 243: } else {
  7137  09C4  0008               	return
  7138  09C5                     l11253:	
  7139                           
  7140                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7141  09C5  0023               	movlb	3	; select bank3
  7142  09C6  0834               	movf	(_RF_Data^(0+384)+20),w
  7143  09C7  3AD1               	xorlw	209
  7144  09C8  1903               	skipnz
  7145  09C9  29CE               	goto	l11257
  7146  09CA  0834               	movf	(_RF_Data^(0+384)+20),w
  7147  09CB  3A0A               	xorlw	10
  7148  09CC  1D03               	skipz
  7149  09CD  0008               	return
  7150  09CE                     l11257:	
  7151                           
  7152                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7153  09CE  08A0               	movf	_RF_Data^(0+384),f
  7154  09CF  1D03               	skipz
  7155  09D0  0008               	return
  7156  09D1  0821               	movf	(_RF_Data^(0+384)+1),w
  7157  09D2  3A02               	xorlw	2
  7158  09D3  1D03               	skipz
  7159  09D4  0008               	return
  7160                           
  7161                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7162  09D5  082C               	movf	(_RF_Data^(0+384)+12),w
  7163  09D6  3AFF               	xorlw	255
  7164  09D7  1D03               	skipz
  7165  09D8  29E3               	goto	l11269
  7166  09D9  082D               	movf	(_RF_Data^(0+384)+13),w
  7167  09DA  3AFF               	xorlw	255
  7168  09DB  1D03               	skipz
  7169  09DC  29E3               	goto	l11269
  7170  09DD  082E               	movf	(_RF_Data^(0+384)+14),w
  7171  09DE  3AFF               	xorlw	255
  7172  09DF  1D03               	skipz
  7173  09E0  29E3               	goto	l11269
  7174                           
  7175                           ;RF_Control_B1.c: 249: __nop();
  7176  09E1  0000               	nop
  7177                           
  7178                           ;RF_Control_B1.c: 250: } else {
  7179  09E2  0008               	return
  7180  09E3                     l11269:	
  7181                           
  7182                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7183  09E3  0021               	movlb	1	; select bank1
  7184  09E4  086F               	movf	_product^(0+128),w
  7185  09E5  3E0C               	addlw	12
  7186  09E6  0086               	movwf	6
  7187  09E7  3002               	movlw	2	; select bank4/5
  7188  09E8  0087               	movwf	7
  7189  09E9  0023               	movlb	3	; select bank3
  7190  09EA  082C               	movf	(_RF_Data^(0+384)+12),w
  7191  09EB  0601               	xorwf	1,w
  7192  09EC  1D03               	skipz
  7193  09ED  0008               	return
  7194  09EE  0021               	movlb	1	; select bank1
  7195  09EF  086F               	movf	_product^(0+128),w
  7196  09F0  3E0D               	addlw	13
  7197  09F1  0086               	movwf	6
  7198  09F2  3002               	movlw	2	; select bank4/5
  7199  09F3  0087               	movwf	7
  7200  09F4  0023               	movlb	3	; select bank3
  7201  09F5  082D               	movf	(_RF_Data^(0+384)+13),w
  7202  09F6  0601               	xorwf	1,w
  7203  09F7  1D03               	skipz
  7204  09F8  0008               	return
  7205  09F9  0021               	movlb	1	; select bank1
  7206  09FA  086F               	movf	_product^(0+128),w
  7207  09FB  3E0E               	addlw	14
  7208  09FC  0086               	movwf	6
  7209  09FD  3002               	movlw	2	; select bank4/5
  7210  09FE  0087               	movwf	7
  7211  09FF  0023               	movlb	3	; select bank3
  7212  0A00  082E               	movf	(_RF_Data^(0+384)+14),w
  7213  0A01  0601               	xorwf	1,w
  7214  0A02  1D03               	skipz
  7215  0A03  0008               	return
  7216                           
  7217                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7218  0A04  3188  20B2         	fcall	_setControl_Lights_Table
  7219                           
  7220                           ;RF_Control_B1.c: 253: }
  7221                           ;RF_Control_B1.c: 254: }
  7222                           ;RF_Control_B1.c: 256: }
  7223                           ;RF_Control_B1.c: 267: }
  7224                           ;RF_Control_B1.c: 268: }
  7225                           ;RF_Control_B1.c: 269: } else {
  7226  0A06  0008               	return
  7227  0A07                     l2146:	
  7228                           
  7229                           ;RF_Control_B1.c: 270: __nop();
  7230  0A07  0000               	nop
  7231  0A08  0008               	return
  7232  0A09                     __end_of_getRxData:	
  7233                           
  7234                           	psect	text26
  7235  123E                     __ptext26:	
  7236 ;; *************** function _setLog_Code *****************
  7237 ;; Defined at:
  7238 ;;		line 276 in file "../src/RF_Control_B1.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;		None
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;		None
  7243 ;; Return value:  Size  Location     Type
  7244 ;;		None               void
  7245 ;; Registers used:
  7246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;Total ram usage:        1 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    7
  7259 ;; This function calls:
  7260 ;;		_setBuz
  7261 ;;		_setMemory_LoopSave
  7262 ;;		_setMemory_Modify
  7263 ;;		_setProductData
  7264 ;; This function is called by:
  7265 ;;		_getRxData
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           
  7270                           ;psect for function _setLog_Code
  7271  123E                     _setLog_Code:	
  7272                           
  7273                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7274                           
  7275                           ;incstack = 0
  7276                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7277  123E  0021               	movlb	1	; select bank1
  7278  123F  1320               	bcf	_RF1^(0+128),6
  7279                           
  7280                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7281  1240  0023               	movlb	3	; select bank3
  7282  1241  082C               	movf	(_RF_Data^(0+384)+12),w
  7283  1242  0021               	movlb	1	; select bank1
  7284  1243  00E3               	movwf	??_setLog_Code^(0+128)
  7285  1244  0863               	movf	??_setLog_Code^(0+128),w
  7286  1245  00E1               	movwf	setProductData@value^(0+128)
  7287  1246  300C               	movlw	12
  7288  1247  319C  24E7  3192   	fcall	_setProductData
  7289                           
  7290                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7291  124A  0023               	movlb	3	; select bank3
  7292  124B  082D               	movf	(_RF_Data^(0+384)+13),w
  7293  124C  0021               	movlb	1	; select bank1
  7294  124D  00E3               	movwf	??_setLog_Code^(0+128)
  7295  124E  0863               	movf	??_setLog_Code^(0+128),w
  7296  124F  00E1               	movwf	setProductData@value^(0+128)
  7297  1250  300D               	movlw	13
  7298  1251  319C  24E7  3192   	fcall	_setProductData
  7299                           
  7300                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7301  1254  0023               	movlb	3	; select bank3
  7302  1255  082E               	movf	(_RF_Data^(0+384)+14),w
  7303  1256  0021               	movlb	1	; select bank1
  7304  1257  00E3               	movwf	??_setLog_Code^(0+128)
  7305  1258  0863               	movf	??_setLog_Code^(0+128),w
  7306  1259  00E1               	movwf	setProductData@value^(0+128)
  7307  125A  300E               	movlw	14
  7308  125B  319C  24E7  3192   	fcall	_setProductData
  7309                           
  7310                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7311  125E  3064               	movlw	100
  7312  125F  0020               	movlb	0	; select bank0
  7313  1260  00AF               	movwf	setBuz@time
  7314  1261  3000               	movlw	0
  7315  1262  00B0               	movwf	setBuz@time+1
  7316  1263  3001               	movlw	1
  7317  1264  3195  2550  3192   	fcall	_setBuz
  7318                           
  7319                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7320  1267  0022               	movlb	2	; select bank2
  7321  1268  1EA0               	btfss	_myMain^(0+256),5
  7322  1269  2A6E               	goto	l2161
  7323                           
  7324                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7325  126A  3001               	movlw	1
  7326  126B  319E  261A  3192   	fcall	_setMemory_LoopSave
  7327  126E                     l2161:	
  7328                           
  7329                           ;RF_Control_B1.c: 284: }
  7330                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7331  126E  3001               	movlw	1
  7332  126F  319E  2607         	fcall	_setMemory_Modify
  7333  1271  0008               	return
  7334  1272                     __end_of_setLog_Code:	
  7335                           
  7336                           	psect	text27
  7337  1E1A                     __ptext27:	
  7338 ;; *************** function _setMemory_LoopSave *****************
  7339 ;; Defined at:
  7340 ;;		line 1076 in file "../src/MCU_B1.c"
  7341 ;; Parameters:    Size  Location     Type
  7342 ;;  command         1    wreg     unsigned char 
  7343 ;; Auto vars:     Size  Location     Type
  7344 ;;  command         1    7[BANK0 ] unsigned char 
  7345 ;; Return value:  Size  Location     Type
  7346 ;;		None               void
  7347 ;; Registers used:
  7348 ;;		wreg, status,2, status,0
  7349 ;; Tracked objects:
  7350 ;;		On entry : 0/0
  7351 ;;		On exit  : 0/0
  7352 ;;		Unchanged: 0/0
  7353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7358 ;;Total ram usage:        2 bytes
  7359 ;; Hardware stack levels used:    1
  7360 ;; Hardware stack levels required when called:    5
  7361 ;; This function calls:
  7362 ;;		Nothing
  7363 ;; This function is called by:
  7364 ;;		_setLog_Code
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _setMemory_LoopSave
  7370  1E1A                     _setMemory_LoopSave:	
  7371                           
  7372                           ;incstack = 0
  7373                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7374                           ;setMemory_LoopSave@command stored from wreg
  7375  1E1A  0020               	movlb	0	; select bank0
  7376  1E1B  00A7               	movwf	setMemory_LoopSave@command
  7377                           
  7378                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7379  1E1C  0827               	movf	setMemory_LoopSave@command,w
  7380  1E1D  3A01               	xorlw	1
  7381  1E1E  3000               	movlw	0
  7382  1E1F  1903               	skipnz
  7383  1E20  3001               	movlw	1
  7384  1E21  00A6               	movwf	??_setMemory_LoopSave
  7385  1E22  0DA6               	rlf	??_setMemory_LoopSave,f
  7386  1E23  0DA6               	rlf	??_setMemory_LoopSave,f
  7387  1E24  0023               	movlb	3	; select bank3
  7388  1E25  0862               	movf	(_Memory^(0+384)+36),w
  7389  1E26  0020               	movlb	0	; select bank0
  7390  1E27  0626               	xorwf	??_setMemory_LoopSave,w
  7391  1E28  39FB               	andlw	-5
  7392  1E29  0626               	xorwf	??_setMemory_LoopSave,w
  7393  1E2A  0023               	movlb	3	; select bank3
  7394  1E2B  00E2               	movwf	(_Memory^(0+384)+36)
  7395  1E2C  0008               	return
  7396  1E2D                     __end_of_setMemory_LoopSave:	
  7397                           
  7398                           	psect	text28
  7399  08B2                     __ptext28:	
  7400 ;; *************** function _setControl_Lights_Table *****************
  7401 ;; Defined at:
  7402 ;;		line 289 in file "../src/RF_Control_B1.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;		None
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;		None
  7407 ;; Return value:  Size  Location     Type
  7408 ;;		None               void
  7409 ;; Registers used:
  7410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7420 ;;Total ram usage:        0 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    9
  7423 ;; This function calls:
  7424 ;;		_getDimmerLights_Status
  7425 ;;		_getMain_All_LightsStatus
  7426 ;;		_setCmd_Status
  7427 ;;		_setDimmerLights_SwOff
  7428 ;;		_setDimmerLights_SwOn
  7429 ;;		_setProductData
  7430 ;;		_setRFSW_AdjControl
  7431 ;;		_setRFSW_Control
  7432 ;;		_setTxData
  7433 ;; This function is called by:
  7434 ;;		_getRxData
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           
  7439                           ;psect for function _setControl_Lights_Table
  7440  08B2                     _setControl_Lights_Table:	
  7441                           
  7442                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7443                           
  7444                           ;incstack = 0
  7445                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7446  08B2  2913               	goto	l11003
  7447  08B3                     l10985:	
  7448                           ;RF_Control_B1.c: 292: case 0x00:
  7449                           
  7450                           
  7451                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7452  08B3  319C  2424  3188   	fcall	_getMain_All_LightsStatus
  7453  08B6  3A01               	xorlw	1
  7454  08B7  1D03               	skipz
  7455  08B8  28CF               	goto	l10993
  7456                           
  7457                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7458  08B9  3001               	movlw	1
  7459  08BA  319D  2514  3188   	fcall	_getDimmerLights_Status
  7460  08BD  3A01               	xorlw	1
  7461  08BE  1D03               	skipz
  7462  08BF  28C8               	goto	l10991
  7463                           
  7464                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7465  08C0  3001               	movlw	1
  7466  08C1  3191  21A5  3188   	fcall	_setDimmerLights_SwOn
  7467                           
  7468                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7469  08C4  3001               	movlw	1
  7470  08C5  3193  2315  3188   	fcall	_setDimmerLights_SwOff
  7471  08C8                     l10991:	
  7472                           
  7473                           ;RF_Control_B1.c: 299: }
  7474                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7475  08C8  0020               	movlb	0	; select bank0
  7476  08C9  01A6               	clrf	setCmd_Status@cmd
  7477  08CA  0AA6               	incf	setCmd_Status@cmd,f
  7478  08CB  3001               	movlw	1
  7479  08CC  319F  2749         	fcall	_setCmd_Status
  7480                           
  7481                           ;RF_Control_B1.c: 315: } else {
  7482  08CE  0008               	return
  7483  08CF                     l10993:	
  7484                           
  7485                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7486  08CF  0021               	movlb	1	; select bank1
  7487  08D0  01E1               	clrf	setProductData@value^(0+128)
  7488  08D1  3009               	movlw	9
  7489  08D2  319C  24E7  3188   	fcall	_setProductData
  7490                           
  7491                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7492  08D5  0021               	movlb	1	; select bank1
  7493  08D6  01E1               	clrf	setProductData@value^(0+128)
  7494  08D7  300B               	movlw	11
  7495  08D8  319C  24E7  3188   	fcall	_setProductData
  7496                           
  7497                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7498  08DB  0021               	movlb	1	; select bank1
  7499  08DC  01E1               	clrf	setProductData@value^(0+128)
  7500  08DD  300F               	movlw	15
  7501  08DE  319C  24E7  3188   	fcall	_setProductData
  7502                           
  7503                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7504  08E1  0021               	movlb	1	; select bank1
  7505  08E2  01E1               	clrf	setProductData@value^(0+128)
  7506  08E3  3011               	movlw	17
  7507  08E4  319C  24E7  3188   	fcall	_setProductData
  7508                           
  7509                           ;RF_Control_B1.c: 320: setTxData();
  7510  08E7  318F  2745         	fcall	_setTxData
  7511                           
  7512                           ;RF_Control_B1.c: 321: }
  7513                           ;RF_Control_B1.c: 322: break;
  7514  08E9  0008               	return
  7515  08EA                     l10995:	
  7516                           ;RF_Control_B1.c: 324: case 0x20:
  7517                           
  7518                           
  7519                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7520  08EA  0021               	movlb	1	; select bank1
  7521  08EB  01E1               	clrf	setProductData@value^(0+128)
  7522  08EC  3009               	movlw	9
  7523  08ED  319C  24E7  3188   	fcall	_setProductData
  7524                           
  7525                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7526  08F0  0021               	movlb	1	; select bank1
  7527  08F1  01E1               	clrf	setProductData@value^(0+128)
  7528  08F2  300B               	movlw	11
  7529  08F3  319C  24E7  3188   	fcall	_setProductData
  7530                           
  7531                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7532  08F6  0021               	movlb	1	; select bank1
  7533  08F7  086F               	movf	_product^(0+128),w
  7534  08F8  0086               	movwf	6
  7535  08F9  3002               	movlw	2	; select bank4/5
  7536  08FA  0087               	movwf	7
  7537  08FB  3002               	movlw	2	; select bank4/5
  7538  08FC  3F4F               	moviw [15]fsr1
  7539  08FD  00E1               	movwf	setProductData@value^(0+128)
  7540  08FE  300F               	movlw	15
  7541  08FF  319C  24E7  3188   	fcall	_setProductData
  7542                           
  7543                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7544  0902  0021               	movlb	1	; select bank1
  7545  0903  01E1               	clrf	setProductData@value^(0+128)
  7546  0904  3011               	movlw	17
  7547  0905  319C  24E7  3188   	fcall	_setProductData
  7548                           
  7549                           ;RF_Control_B1.c: 329: setTxData();
  7550  0908  318F  2745         	fcall	_setTxData
  7551                           
  7552                           ;RF_Control_B1.c: 330: break;
  7553  090A  0008               	return
  7554  090B                     l10997:	
  7555                           ;RF_Control_B1.c: 333: case 0x01:
  7556                           
  7557                           
  7558                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7559  090B  3001               	movlw	1
  7560  090C  3193  238B         	fcall	_setRFSW_Control
  7561                           
  7562                           ;RF_Control_B1.c: 335: break;
  7563  090E  0008               	return
  7564  090F                     l10999:	
  7565                           ;RF_Control_B1.c: 339: case 0x11:
  7566                           
  7567                           
  7568                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7569  090F  3001               	movlw	1
  7570  0910  318A  22FD         	fcall	_setRFSW_AdjControl
  7571                           
  7572                           ;RF_Control_B1.c: 370: }
  7573                           
  7574                           ;RF_Control_B1.c: 341: break;
  7575  0912  0008               	return
  7576  0913                     l11003:	
  7577  0913  0023               	movlb	3	; select bank3
  7578  0914  082F               	movf	(_RF_Data^(0+384)+15),w
  7579                           
  7580                           ; Switch size 1, requested type "space"
  7581                           ; Number of cases is 4, Range of values is 0 to 32
  7582                           ; switch strategies available:
  7583                           ; Name         Instructions Cycles
  7584                           ; simple_byte           13     7 (average)
  7585                           ; direct_byte           72     6 (fixed)
  7586                           ; jumptable            260     6 (fixed)
  7587                           ;	Chosen strategy is simple_byte
  7588  0915  3A00               	xorlw	0	; case 0
  7589  0916  1903               	skipnz
  7590  0917  28B3               	goto	l10985
  7591  0918  3A01               	xorlw	1	; case 1
  7592  0919  1903               	skipnz
  7593  091A  290B               	goto	l10997
  7594  091B  3A10               	xorlw	16	; case 17
  7595  091C  1903               	skipnz
  7596  091D  290F               	goto	l10999
  7597  091E  3A31               	xorlw	49	; case 32
  7598  091F  1903               	skipnz
  7599  0920  28EA               	goto	l10995
  7600  0921  2922               	goto	l2174
  7601  0922                     l2174:	
  7602  0922  0008               	return
  7603  0923                     __end_of_setControl_Lights_Table:	
  7604                           
  7605                           	psect	text29
  7606  138B                     __ptext29:	
  7607 ;; *************** function _setRFSW_Control *****************
  7608 ;; Defined at:
  7609 ;;		line 378 in file "../src/RF_Control_B1.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  sw              1    wreg     unsigned char 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  sw              1   18[BANK1 ] unsigned char 
  7614 ;;  status          1   17[BANK1 ] unsigned char 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;		None               void
  7617 ;; Registers used:
  7618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7625 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;Total ram usage:        3 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    8
  7631 ;; This function calls:
  7632 ;;		_getDimmerLights_Status
  7633 ;;		_setBuz
  7634 ;;		_setDelayOff_GO
  7635 ;;		_setDimmerLights_SwOff
  7636 ;;		_setDimmerLights_SwOn
  7637 ;;		_setRF_DimmerLights
  7638 ;;		_setTxData
  7639 ;; This function is called by:
  7640 ;;		_setControl_Lights_Table
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           
  7645                           ;psect for function _setRFSW_Control
  7646  138B                     _setRFSW_Control:	
  7647                           
  7648                           ;incstack = 0
  7649                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7650                           ;setRFSW_Control@sw stored from wreg
  7651  138B  0021               	movlb	1	; select bank1
  7652  138C  00ED               	movwf	setRFSW_Control@sw^(0+128)
  7653                           
  7654                           ;RF_Control_B1.c: 379: char status = 0;
  7655  138D  01EC               	clrf	setRFSW_Control@status^(0+128)
  7656                           
  7657                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7658  138E  0023               	movlb	3	; select bank3
  7659  138F  0830               	movf	(_RF_Data^(0+384)+16),w
  7660  1390  3A80               	xorlw	128
  7661  1391  1D03               	skipz
  7662  1392  2BBE               	goto	l10737
  7663                           
  7664                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7665  1393  0021               	movlb	1	; select bank1
  7666  1394  01E3               	clrf	setDelayOff_GO@command^(0+128)
  7667  1395  0AE3               	incf	setDelayOff_GO@command^(0+128),f
  7668  1396  0023               	movlb	3	; select bank3
  7669  1397  0831               	movf	(_RF_Data^(0+384)+17),w
  7670  1398  0021               	movlb	1	; select bank1
  7671  1399  00EB               	movwf	??_setRFSW_Control^(0+128)
  7672  139A  086B               	movf	??_setRFSW_Control^(0+128),w
  7673  139B  00E4               	movwf	setDelayOff_GO@value^(0+128)
  7674  139C  086D               	movf	setRFSW_Control@sw^(0+128),w
  7675  139D  318C  2405  3193   	fcall	_setDelayOff_GO
  7676                           
  7677                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7678  13A0  0021               	movlb	1	; select bank1
  7679  13A1  086D               	movf	setRFSW_Control@sw^(0+128),w
  7680  13A2  319D  2514  3193   	fcall	_getDimmerLights_Status
  7681  13A5  3A01               	xorlw	1
  7682  13A6  1D03               	skipz
  7683  13A7  2BBE               	goto	l10737
  7684                           
  7685                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7686  13A8  3064               	movlw	100
  7687  13A9  0020               	movlb	0	; select bank0
  7688  13AA  00AF               	movwf	setBuz@time
  7689  13AB  3000               	movlw	0
  7690  13AC  00B0               	movwf	setBuz@time+1
  7691  13AD  3001               	movlw	1
  7692  13AE  3195  2550  3193   	fcall	_setBuz
  7693                           
  7694                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7695  13B1  0021               	movlb	1	; select bank1
  7696  13B2  01E3               	clrf	setRF_DimmerLights@on^(0+128)
  7697  13B3  0AE3               	incf	setRF_DimmerLights@on^(0+128),f
  7698  13B4  086D               	movf	setRFSW_Control@sw^(0+128),w
  7699  13B5  3196  2604  3193   	fcall	_setRF_DimmerLights
  7700                           
  7701                           ;RF_Control_B1.c: 386: setTxData();
  7702  13B8  318F  2745  3193   	fcall	_setTxData
  7703                           
  7704                           ;RF_Control_B1.c: 387: status = 1;
  7705  13BB  0021               	movlb	1	; select bank1
  7706  13BC  01EC               	clrf	setRFSW_Control@status^(0+128)
  7707  13BD  0AEC               	incf	setRFSW_Control@status^(0+128),f
  7708  13BE                     l10737:	
  7709                           
  7710                           ;RF_Control_B1.c: 388: }
  7711                           ;RF_Control_B1.c: 389: }
  7712                           ;RF_Control_B1.c: 391: if (status == 0) {
  7713  13BE  0021               	movlb	1	; select bank1
  7714  13BF  08EC               	movf	setRFSW_Control@status^(0+128),f
  7715  13C0  1D03               	skipz
  7716  13C1  0008               	return
  7717                           
  7718                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7719  13C2  086D               	movf	setRFSW_Control@sw^(0+128),w
  7720  13C3  3191  21A5  3193   	fcall	_setDimmerLights_SwOn
  7721                           
  7722                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7723  13C6  0021               	movlb	1	; select bank1
  7724  13C7  086D               	movf	setRFSW_Control@sw^(0+128),w
  7725  13C8  3193  2315         	fcall	_setDimmerLights_SwOff
  7726  13CA  0008               	return
  7727  13CB                     __end_of_setRFSW_Control:	
  7728                           
  7729                           	psect	text30
  7730  0AFD                     __ptext30:	
  7731 ;; *************** function _setRFSW_AdjControl *****************
  7732 ;; Defined at:
  7733 ;;		line 400 in file "../src/RF_Control_B1.c"
  7734 ;; Parameters:    Size  Location     Type
  7735 ;;  sw              1    wreg     unsigned char 
  7736 ;; Auto vars:     Size  Location     Type
  7737 ;;  sw              1   11[BANK1 ] unsigned char 
  7738 ;;  status          1   10[BANK1 ] unsigned char 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;		None               void
  7741 ;; Registers used:
  7742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;Total ram usage:        4 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    8
  7755 ;; This function calls:
  7756 ;;		_getDimmerLights_PercentToValue
  7757 ;;		_getDimmerLights_Status
  7758 ;;		_setDimmerIntr_Dimming_RF
  7759 ;;		_setDimmerIntr_MaxmumValue
  7760 ;;		_setDimmerLights_DimmingRun
  7761 ;;		_setDimmerLights_SwOff
  7762 ;;		_setDimmerLights_SwOn
  7763 ;;		_setMemory_Modify
  7764 ;;		_setProductData
  7765 ;;		_setTxData
  7766 ;; This function is called by:
  7767 ;;		_setControl_Lights_Table
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           
  7772                           ;psect for function _setRFSW_AdjControl
  7773  0AFD                     _setRFSW_AdjControl:	
  7774                           
  7775                           ;incstack = 0
  7776                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7777                           ;setRFSW_AdjControl@sw stored from wreg
  7778  0AFD  0021               	movlb	1	; select bank1
  7779  0AFE  00E6               	movwf	setRFSW_AdjControl@sw^(0+128)
  7780                           
  7781                           ;RF_Control_B1.c: 401: char status = 0;
  7782  0AFF  01E5               	clrf	setRFSW_AdjControl@status^(0+128)
  7783                           
  7784                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7785  0B00  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7786  0B01  319D  2514  318A   	fcall	_getDimmerLights_Status
  7787  0B04  0021               	movlb	1	; select bank1
  7788  0B05  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7789  0B06  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7790  0B07  00E5               	movwf	setRFSW_AdjControl@status^(0+128)
  7791                           
  7792                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7793  0B08  3065               	movlw	101
  7794  0B09  0023               	movlb	3	; select bank3
  7795  0B0A  0229               	subwf	(_RF_Data^(0+384)+9),w
  7796  0B0B  1C03               	skipc
  7797  0B0C  2B14               	goto	l10749
  7798                           
  7799                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7800  0B0D  3064               	movlw	100
  7801  0B0E  0021               	movlb	1	; select bank1
  7802  0B0F  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7803  0B10  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7804  0B11  0023               	movlb	3	; select bank3
  7805  0B12  00A9               	movwf	(_RF_Data^(0+384)+9)
  7806                           
  7807                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7808  0B13  2B19               	goto	l10753
  7809  0B14                     l10749:	
  7810  0B14  08A9               	movf	(_RF_Data^(0+384)+9),f
  7811  0B15  1D03               	skipz
  7812  0B16  2B19               	goto	l10753
  7813                           
  7814                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7815  0B17  01A9               	clrf	(_RF_Data^(0+384)+9)
  7816  0B18  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7817  0B19                     l10753:	
  7818                           
  7819                           ;RF_Control_B1.c: 409: }
  7820                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7821  0B19  0829               	movf	(_RF_Data^(0+384)+9),w
  7822  0B1A  0021               	movlb	1	; select bank1
  7823  0B1B  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7824  0B1C  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7825  0B1D  00E1               	movwf	setProductData@value^(0+128)
  7826  0B1E  3009               	movlw	9
  7827  0B1F  319C  24E7  318A   	fcall	_setProductData
  7828                           
  7829                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7830  0B22  0021               	movlb	1	; select bank1
  7831  0B23  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7832  0B24  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7833  0B25  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7834  0B26  00E1               	movwf	setProductData@value^(0+128)
  7835  0B27  300B               	movlw	11
  7836  0B28  319C  24E7  318A   	fcall	_setProductData
  7837                           
  7838                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7839  0B2B  0021               	movlb	1	; select bank1
  7840  0B2C  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7841  0B2D  3E1A               	addlw	26
  7842  0B2E  076F               	addwf	_product^(0+128),w
  7843  0B2F  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7844  0B30  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7845  0B31  0086               	movwf	6
  7846  0B32  3002               	movlw	2	; select bank4/5
  7847  0B33  0087               	movwf	7
  7848  0B34  0801               	movf	1,w
  7849  0B35  00E4               	movwf	(??_setRFSW_AdjControl+1)^(0+128)
  7850  0B36  0864               	movf	(??_setRFSW_AdjControl+1)^(0+128),w
  7851  0B37  00E1               	movwf	setProductData@value^(0+128)
  7852  0B38  3011               	movlw	17
  7853  0B39  319C  24E7  318A   	fcall	_setProductData
  7854                           
  7855                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7856  0B3C  0023               	movlb	3	; select bank3
  7857  0B3D  0829               	movf	(_RF_Data^(0+384)+9),w
  7858  0B3E  0021               	movlb	1	; select bank1
  7859  0B3F  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7860  0B40  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7861  0B41  00E1               	movwf	setProductData@value^(0+128)
  7862  0B42  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7863  0B43  3E14               	addlw	20
  7864  0B44  319C  24E7  318A   	fcall	_setProductData
  7865                           
  7866                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7867  0B47  3001               	movlw	1
  7868  0B48  319E  2607  318A   	fcall	_setMemory_Modify
  7869                           
  7870                           ;RF_Control_B1.c: 416: if (status == 1) {
  7871  0B4B  0021               	movlb	1	; select bank1
  7872  0B4C  0865               	movf	setRFSW_AdjControl@status^(0+128),w
  7873  0B4D  3A01               	xorlw	1
  7874  0B4E  1D03               	skipz
  7875  0B4F  2B68               	goto	l10763
  7876                           
  7877                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7878  0B50  0023               	movlb	3	; select bank3
  7879  0B51  0829               	movf	(_RF_Data^(0+384)+9),w
  7880  0B52  318A  2283  318A   	fcall	_getDimmerLights_PercentToValue
  7881  0B55  0021               	movlb	1	; select bank1
  7882  0B56  00E3               	movwf	??_setRFSW_AdjControl^(0+128)
  7883  0B57  0863               	movf	??_setRFSW_AdjControl^(0+128),w
  7884  0B58  00E1               	movwf	setDimmerIntr_MaxmumValue@value^(0+128)
  7885  0B59  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7886  0B5A  319C  24DA  318A   	fcall	_setDimmerIntr_MaxmumValue
  7887                           
  7888                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7889  0B5D  0020               	movlb	0	; select bank0
  7890  0B5E  01A6               	clrf	setDimmerIntr_Dimming_RF@command
  7891  0B5F  0AA6               	incf	setDimmerIntr_Dimming_RF@command,f
  7892  0B60  0021               	movlb	1	; select bank1
  7893  0B61  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7894  0B62  319F  2718  318A   	fcall	_setDimmerIntr_Dimming_RF
  7895                           
  7896                           ;RF_Control_B1.c: 419: setTxData();
  7897  0B65  318F  2745         	fcall	_setTxData
  7898                           
  7899                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7900  0B67  0008               	return
  7901  0B68                     l10763:	
  7902  0B68  0021               	movlb	1	; select bank1
  7903  0B69  08E5               	movf	setRFSW_AdjControl@status^(0+128),f
  7904  0B6A  1D03               	skipz
  7905  0B6B  0008               	return
  7906                           
  7907                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7908  0B6C  0020               	movlb	0	; select bank0
  7909  0B6D  01A8               	clrf	setDimmerLights_DimmingRun@command
  7910  0B6E  0AA8               	incf	setDimmerLights_DimmingRun@command,f
  7911  0B6F  0021               	movlb	1	; select bank1
  7912  0B70  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7913  0B71  319F  277B  318A   	fcall	_setDimmerLights_DimmingRun
  7914                           
  7915                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7916  0B74  0021               	movlb	1	; select bank1
  7917  0B75  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7918  0B76  3191  21A5  318A   	fcall	_setDimmerLights_SwOn
  7919                           
  7920                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7921  0B79  0021               	movlb	1	; select bank1
  7922  0B7A  0866               	movf	setRFSW_AdjControl@sw^(0+128),w
  7923  0B7B  3193  2315         	fcall	_setDimmerLights_SwOff
  7924  0B7D  0008               	return
  7925  0B7E                     __end_of_setRFSW_AdjControl:	
  7926                           
  7927                           	psect	text31
  7928  1E07                     __ptext31:	
  7929 ;; *************** function _setMemory_Modify *****************
  7930 ;; Defined at:
  7931 ;;		line 1070 in file "../src/MCU_B1.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;  command         1    wreg     unsigned char 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;  command         1    7[BANK0 ] unsigned char 
  7936 ;; Return value:  Size  Location     Type
  7937 ;;		None               void
  7938 ;; Registers used:
  7939 ;;		wreg, status,2, status,0
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;Total ram usage:        2 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    5
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_setLog_Code
  7956 ;;		_setRFSW_AdjControl
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           
  7961                           ;psect for function _setMemory_Modify
  7962  1E07                     _setMemory_Modify:	
  7963                           
  7964                           ;incstack = 0
  7965                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7966                           ;setMemory_Modify@command stored from wreg
  7967  1E07  0020               	movlb	0	; select bank0
  7968  1E08  00A7               	movwf	setMemory_Modify@command
  7969                           
  7970                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  7971  1E09  0827               	movf	setMemory_Modify@command,w
  7972  1E0A  3A01               	xorlw	1
  7973  1E0B  3000               	movlw	0
  7974  1E0C  1903               	skipnz
  7975  1E0D  3001               	movlw	1
  7976  1E0E  00A6               	movwf	??_setMemory_Modify
  7977  1E0F  0023               	movlb	3	; select bank3
  7978  1E10  0862               	movf	(_Memory^(0+384)+36),w
  7979  1E11  0020               	movlb	0	; select bank0
  7980  1E12  0626               	xorwf	??_setMemory_Modify,w
  7981  1E13  39FE               	andlw	-2
  7982  1E14  0626               	xorwf	??_setMemory_Modify,w
  7983  1E15  0023               	movlb	3	; select bank3
  7984  1E16  00E2               	movwf	(_Memory^(0+384)+36)
  7985                           
  7986                           ;MCU_B1.c: 1072: Memory.Time = 0;
  7987  1E17  01E0               	clrf	(_Memory^(0+384)+34)
  7988  1E18  01E1               	clrf	((_Memory+1)^(0+384)+34)
  7989  1E19  0008               	return
  7990  1E1A                     __end_of_setMemory_Modify:	
  7991                           
  7992                           	psect	text32
  7993  1F7B                     __ptext32:	
  7994 ;; *************** function _setDimmerLights_DimmingRun *****************
  7995 ;; Defined at:
  7996 ;;		line 1012 in file "../src/Dimmer_B1.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;  lights          1    wreg     unsigned char 
  7999 ;;  command         1    8[BANK0 ] unsigned char 
  8000 ;; Auto vars:     Size  Location     Type
  8001 ;;  lights          1   10[BANK0 ] unsigned char 
  8002 ;; Return value:  Size  Location     Type
  8003 ;;		None               void
  8004 ;; Registers used:
  8005 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8006 ;; Tracked objects:
  8007 ;;		On entry : 0/0
  8008 ;;		On exit  : 0/0
  8009 ;;		Unchanged: 0/0
  8010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8011 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;Total ram usage:        3 bytes
  8016 ;; Hardware stack levels used:    1
  8017 ;; Hardware stack levels required when called:    6
  8018 ;; This function calls:
  8019 ;;		_DimmerLights_SelectPointer
  8020 ;; This function is called by:
  8021 ;;		_setRFSW_AdjControl
  8022 ;; This function uses a non-reentrant model
  8023 ;;
  8024                           
  8025                           
  8026                           ;psect for function _setDimmerLights_DimmingRun
  8027  1F7B                     _setDimmerLights_DimmingRun:	
  8028                           
  8029                           ;incstack = 0
  8030                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8031                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8032  1F7B  0020               	movlb	0	; select bank0
  8033  1F7C  00AA               	movwf	setDimmerLights_DimmingRun@lights
  8034                           
  8035                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  8036  1F7D  082A               	movf	setDimmerLights_DimmingRun@lights,w
  8037  1F7E  319C  2439         	fcall	_DimmerLights_SelectPointer
  8038                           
  8039                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8040  1F80  0020               	movlb	0	; select bank0
  8041  1F81  0828               	movf	setDimmerLights_DimmingRun@command,w
  8042  1F82  3A01               	xorlw	1
  8043  1F83  3000               	movlw	0
  8044  1F84  1903               	skipnz
  8045  1F85  3001               	movlw	1
  8046  1F86  00A9               	movwf	??_setDimmerLights_DimmingRun
  8047  1F87  0A64               	incf	_DimmerLights,w
  8048  1F88  0086               	movwf	6
  8049  1F89  3001               	movlw	1	; select bank2/3
  8050  1F8A  0087               	movwf	7
  8051  1F8B  0EA9               	swapf	??_setDimmerLights_DimmingRun,f
  8052  1F8C  0DA9               	rlf	??_setDimmerLights_DimmingRun,f
  8053  1F8D  0DA9               	rlf	??_setDimmerLights_DimmingRun,f
  8054  1F8E  0801               	movf	1,w
  8055  1F8F  0629               	xorwf	??_setDimmerLights_DimmingRun,w
  8056  1F90  39BF               	andlw	-65
  8057  1F91  0629               	xorwf	??_setDimmerLights_DimmingRun,w
  8058  1F92  0081               	movwf	1
  8059  1F93  0008               	return
  8060  1F94                     __end_of_setDimmerLights_DimmingRun:	
  8061                           
  8062                           	psect	text33
  8063  1D77                     __ptext33:	
  8064 ;; *************** function _getRF_KeyStatus *****************
  8065 ;; Defined at:
  8066 ;;		line 166 in file "../src/RF_Control_B1.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;		None
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;  key             1    7[BANK0 ] unsigned char 
  8071 ;; Return value:  Size  Location     Type
  8072 ;;                  1    wreg      unsigned char 
  8073 ;; Registers used:
  8074 ;;		wreg, status,2
  8075 ;; Tracked objects:
  8076 ;;		On entry : 0/0
  8077 ;;		On exit  : 0/0
  8078 ;;		Unchanged: 0/0
  8079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;Total ram usage:        3 bytes
  8085 ;; Hardware stack levels used:    1
  8086 ;; Hardware stack levels required when called:    5
  8087 ;; This function calls:
  8088 ;;		Nothing
  8089 ;; This function is called by:
  8090 ;;		_setRF_Main
  8091 ;; This function uses a non-reentrant model
  8092 ;;
  8093                           
  8094                           
  8095                           ;psect for function _getRF_KeyStatus
  8096  1D77                     _getRF_KeyStatus:	
  8097                           
  8098                           ;RF_Control_B1.c: 167: char key = 0;
  8099                           
  8100                           ;incstack = 0
  8101                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8102  1D77  0020               	movlb	0	; select bank0
  8103  1D78  01A7               	clrf	getRF_KeyStatus@key
  8104                           
  8105                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8106  1D79  01A8               	clrf	_getRF_KeyStatus$5240
  8107  1D7A  0AA8               	incf	_getRF_KeyStatus$5240,f
  8108  1D7B  1F0C               	btfss	12,6	;volatile
  8109  1D7C  1A0C               	btfsc	12,4	;volatile
  8110  1D7D  2D82               	goto	l11221
  8111  1D7E  1C0C               	btfss	12,0	;volatile
  8112  1D7F  1B8C               	btfsc	12,7	;volatile
  8113  1D80  2D82               	goto	l11221
  8114  1D81  01A8               	clrf	_getRF_KeyStatus$5240
  8115  1D82                     l11221:	
  8116  1D82  0828               	movf	_getRF_KeyStatus$5240,w
  8117  1D83  00A6               	movwf	??_getRF_KeyStatus
  8118  1D84  0826               	movf	??_getRF_KeyStatus,w
  8119  1D85  00A7               	movwf	getRF_KeyStatus@key
  8120                           
  8121                           ;RF_Control_B1.c: 179: return key;
  8122  1D86  0827               	movf	getRF_KeyStatus@key,w
  8123  1D87  0008               	return
  8124  1D88                     __end_of_getRF_KeyStatus:	
  8125                           
  8126                           	psect	text34
  8127  1D66                     __ptext34:	
  8128 ;; *************** function _getBuz_GO *****************
  8129 ;; Defined at:
  8130 ;;		line 82 in file "../src/Buzzer_B1.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;		None
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  i               2   10[BANK0 ] int 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  2    6[BANK0 ] int 
  8137 ;; Registers used:
  8138 ;;		wreg, status,2, status,0
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;Total ram usage:        6 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    5
  8151 ;; This function calls:
  8152 ;;		Nothing
  8153 ;; This function is called by:
  8154 ;;		_setRF_Main
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           
  8159                           ;psect for function _getBuz_GO
  8160  1D66                     _getBuz_GO:	
  8161                           
  8162                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8163                           
  8164                           ;incstack = 0
  8165                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8166  1D66  0021               	movlb	1	; select bank1
  8167  1D67  0C2E               	rrf	_Buz1^(0+128),w
  8168  1D68  3901               	andlw	1
  8169  1D69  0020               	movlb	0	; select bank0
  8170  1D6A  00A8               	movwf	??_getBuz_GO
  8171  1D6B  01A9               	clrf	??_getBuz_GO+1
  8172  1D6C  0828               	movf	??_getBuz_GO,w
  8173  1D6D  00AA               	movwf	getBuz_GO@i
  8174  1D6E  0829               	movf	??_getBuz_GO+1,w
  8175  1D6F  00AB               	movwf	getBuz_GO@i+1
  8176                           
  8177                           ;Buzzer_B1.c: 84: return i;
  8178  1D70  082B               	movf	getBuz_GO@i+1,w
  8179  1D71  01A7               	clrf	?_getBuz_GO+1
  8180  1D72  07A7               	addwf	?_getBuz_GO+1,f
  8181  1D73  082A               	movf	getBuz_GO@i,w
  8182  1D74  01A6               	clrf	?_getBuz_GO
  8183  1D75  07A6               	addwf	?_getBuz_GO,f
  8184  1D76  0008               	return
  8185  1D77                     __end_of_getBuz_GO:	
  8186                           
  8187                           	psect	text35
  8188  1D05                     __ptext35:	
  8189 ;; *************** function _RF_RxDisable *****************
  8190 ;; Defined at:
  8191 ;;		line 154 in file "../src/RF_Control_B1.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;		None
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;		None
  8196 ;; Return value:  Size  Location     Type
  8197 ;;		None               void
  8198 ;; Registers used:
  8199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;Total ram usage:        0 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    7
  8212 ;; This function calls:
  8213 ;;		_CC2500_WriteCommand
  8214 ;; This function is called by:
  8215 ;;		_setRF_Main
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           
  8220                           ;psect for function _RF_RxDisable
  8221  1D05                     _RF_RxDisable:	
  8222                           
  8223                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8224                           
  8225                           ;incstack = 0
  8226                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8227  1D05  0021               	movlb	1	; select bank1
  8228  1D06  18A0               	btfsc	_RF1^(0+128),1
  8229  1D07  2D0A               	goto	l2131
  8230  1D08  1DA0               	btfss	_RF1^(0+128),3
  8231  1D09  0008               	return
  8232  1D0A                     l2131:	
  8233                           
  8234                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8235  1D0A  11A0               	bcf	_RF1^(0+128),3
  8236                           
  8237                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8238  1D0B  10A0               	bcf	_RF1^(0+128),1
  8239                           
  8240                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8241  1D0C  3036               	movlw	54
  8242  1D0D  319F  2762  319D   	fcall	_CC2500_WriteCommand
  8243                           
  8244                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8245  1D10  303A               	movlw	58
  8246  1D11  319F  2762         	fcall	_CC2500_WriteCommand
  8247  1D13  0008               	return
  8248  1D14                     __end_of_RF_RxDisable:	
  8249                           
  8250                           	psect	text36
  8251  16C4                     __ptext36:	
  8252 ;; *************** function _CC2500_TxData *****************
  8253 ;; Defined at:
  8254 ;;		line 32 in file "../src/CC2500_B1.c"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;		None
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  loop_e          1   11[BANK0 ] unsigned char 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;		None               void
  8261 ;; Registers used:
  8262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/0
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;Total ram usage:        2 bytes
  8273 ;; Hardware stack levels used:    1
  8274 ;; Hardware stack levels required when called:    7
  8275 ;; This function calls:
  8276 ;;		_CC2500_WriteByte
  8277 ;;		_CC2500_WriteCommand
  8278 ;;		_RF_Timeout_Counter
  8279 ;;		_setRF_TimeoutCleared
  8280 ;; This function is called by:
  8281 ;;		_setRF_Main
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _CC2500_TxData
  8287  16C4                     _CC2500_TxData:	
  8288                           
  8289                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8290                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8291                           
  8292                           ;incstack = 0
  8293                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8294  16C4  3036               	movlw	54
  8295  16C5  319F  2762  3196   	fcall	_CC2500_WriteCommand
  8296                           
  8297                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8298  16C8  303B               	movlw	59
  8299  16C9  319F  2762  3196   	fcall	_CC2500_WriteCommand
  8300                           
  8301                           ;CC2500_B1.c: 38: RC0 = 0;
  8302  16CC  0020               	movlb	0	; select bank0
  8303  16CD  100E               	bcf	14,0	;volatile
  8304                           
  8305                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8306  16CE  307F               	movlw	127
  8307  16CF  00AA               	movwf	??_CC2500_TxData
  8308  16D0  082A               	movf	??_CC2500_TxData,w
  8309  16D1  00E6               	movwf	_SPI0Buffer
  8310                           
  8311                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8312  16D2  2ED6               	goto	l11017
  8313  16D3                     l11015:	
  8314                           
  8315                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8316  16D3  319E  2668  3196   	fcall	_RF_Timeout_Counter
  8317  16D6                     l11017:	
  8318  16D6  0020               	movlb	0	; select bank0
  8319  16D7  1E8E               	btfss	14,5	;volatile
  8320  16D8  2EDC               	goto	l11021
  8321  16D9  0021               	movlb	1	; select bank1
  8322  16DA  1F21               	btfss	(_RF1^(0+128)+1),6
  8323  16DB  2ED3               	goto	l11015
  8324  16DC                     l11021:	
  8325                           
  8326                           ;CC2500_B1.c: 42: };
  8327                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8328  16DC  319B  23AD  3196   	fcall	_setRF_TimeoutCleared
  8329                           
  8330                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8331  16DF  319E  2640  3196   	fcall	_CC2500_WriteByte
  8332                           
  8333                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8334  16E2  0020               	movlb	0	; select bank0
  8335  16E3  0868               	movf	_Tx_Length,w
  8336  16E4  00AA               	movwf	??_CC2500_TxData
  8337  16E5  082A               	movf	??_CC2500_TxData,w
  8338  16E6  00E6               	movwf	_SPI0Buffer
  8339                           
  8340                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8341  16E7  319E  2640  3196   	fcall	_CC2500_WriteByte
  8342                           
  8343                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8344  16EA  0020               	movlb	0	; select bank0
  8345  16EB  01AB               	clrf	CC2500_TxData@loop_e
  8346  16EC                     l11035:	
  8347  16EC  0868               	movf	_Tx_Length,w
  8348  16ED  022B               	subwf	CC2500_TxData@loop_e,w
  8349  16EE  1803               	btfsc	3,0
  8350  16EF  2F02               	goto	l235
  8351                           
  8352                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8353  16F0  082B               	movf	CC2500_TxData@loop_e,w
  8354  16F1  3EA0               	addlw	_RF_Data& (0+255)
  8355  16F2  0086               	movwf	6
  8356  16F3  3001               	movlw	1	; select bank3/4
  8357  16F4  0087               	movwf	7
  8358  16F5  0801               	movf	1,w
  8359  16F6  00AA               	movwf	??_CC2500_TxData
  8360  16F7  082A               	movf	??_CC2500_TxData,w
  8361  16F8  00E6               	movwf	_SPI0Buffer
  8362                           
  8363                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8364  16F9  319E  2640  3196   	fcall	_CC2500_WriteByte
  8365  16FC  3001               	movlw	1
  8366  16FD  0020               	movlb	0	; select bank0
  8367  16FE  00AA               	movwf	??_CC2500_TxData
  8368  16FF  082A               	movf	??_CC2500_TxData,w
  8369  1700  07AB               	addwf	CC2500_TxData@loop_e,f
  8370  1701  2EEC               	goto	l11035
  8371  1702                     l235:	
  8372                           
  8373                           ;CC2500_B1.c: 51: }
  8374                           ;CC2500_B1.c: 52: RC0 = 1;
  8375  1702  140E               	bsf	14,0	;volatile
  8376                           
  8377                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8378  1703  3035               	movlw	53
  8379  1704  319F  2762  3196   	fcall	_CC2500_WriteCommand
  8380                           
  8381                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8382  1707  2F0B               	goto	l11041
  8383  1708                     l11039:	
  8384                           
  8385                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8386  1708  319E  2668  3196   	fcall	_RF_Timeout_Counter
  8387  170B                     l11041:	
  8388  170B  0020               	movlb	0	; select bank0
  8389  170C  188E               	btfsc	14,1	;volatile
  8390  170D  2F11               	goto	l11045
  8391  170E  0021               	movlb	1	; select bank1
  8392  170F  1F21               	btfss	(_RF1^(0+128)+1),6
  8393  1710  2F08               	goto	l11039
  8394  1711                     l11045:	
  8395                           
  8396                           ;CC2500_B1.c: 56: };
  8397                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8398  1711  319B  23AD  3196   	fcall	_setRF_TimeoutCleared
  8399                           
  8400                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8401  1714  2F18               	goto	l11049
  8402  1715                     l11047:	
  8403                           
  8404                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8405  1715  319E  2668  3196   	fcall	_RF_Timeout_Counter
  8406  1718                     l11049:	
  8407  1718  0020               	movlb	0	; select bank0
  8408  1719  1C8E               	btfss	14,1	;volatile
  8409  171A  2F1E               	goto	l11053
  8410  171B  0021               	movlb	1	; select bank1
  8411  171C  1F21               	btfss	(_RF1^(0+128)+1),6
  8412  171D  2F15               	goto	l11047
  8413  171E                     l11053:	
  8414                           
  8415                           ;CC2500_B1.c: 61: };
  8416                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8417  171E  319B  23AD  3196   	fcall	_setRF_TimeoutCleared
  8418                           
  8419                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8420  1721  3036               	movlw	54
  8421  1722  319F  2762  3196   	fcall	_CC2500_WriteCommand
  8422                           
  8423                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8424  1725  303B               	movlw	59
  8425  1726  319F  2762         	fcall	_CC2500_WriteCommand
  8426                           
  8427                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8428  1728  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8429  1729  0008               	return
  8430  172A                     __end_of_CC2500_TxData:	
  8431                           
  8432                           	psect	text37
  8433  172A                     __ptext37:	
  8434 ;; *************** function _CC2500_RxData *****************
  8435 ;; Defined at:
  8436 ;;		line 73 in file "../src/CC2500_B1.c"
  8437 ;; Parameters:    Size  Location     Type
  8438 ;;		None
  8439 ;; Auto vars:     Size  Location     Type
  8440 ;;  loop_f          1   11[BANK0 ] unsigned char 
  8441 ;; Return value:  Size  Location     Type
  8442 ;;		None               void
  8443 ;; Registers used:
  8444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8445 ;; Tracked objects:
  8446 ;;		On entry : 0/0
  8447 ;;		On exit  : 0/0
  8448 ;;		Unchanged: 0/0
  8449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8452 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;Total ram usage:        2 bytes
  8455 ;; Hardware stack levels used:    1
  8456 ;; Hardware stack levels required when called:    7
  8457 ;; This function calls:
  8458 ;;		_CC2500_ReadByte
  8459 ;;		_CC2500_ReadStatus
  8460 ;;		_CC2500_WriteByte
  8461 ;;		_CC2500_WriteCommand
  8462 ;;		_RF_Timeout_Counter
  8463 ;;		_setRF_TimeoutCleared
  8464 ;; This function is called by:
  8465 ;;		_setRF_Main
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           
  8470                           ;psect for function _CC2500_RxData
  8471  172A                     _CC2500_RxData:	
  8472                           
  8473                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8474                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8475                           
  8476                           ;incstack = 0
  8477                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8478  172A  0020               	movlb	0	; select bank0
  8479  172B  188E               	btfsc	14,1	;volatile
  8480  172C  0008               	return
  8481                           
  8482                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8483  172D  303B               	movlw	59
  8484  172E  3191  2106  3197   	fcall	_CC2500_ReadStatus
  8485                           
  8486                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8487  1731  0021               	movlb	1	; select bank1
  8488  1732  0850               	movf	_s_data^(0+128),w
  8489  1733  1903               	btfsc	3,2
  8490  1734  0008               	return
  8491                           
  8492                           ;CC2500_B1.c: 90: RC0 = 0;
  8493  1735  0020               	movlb	0	; select bank0
  8494  1736  100E               	bcf	14,0	;volatile
  8495                           
  8496                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8497  1737  30FF               	movlw	255
  8498  1738  00AA               	movwf	??_CC2500_RxData
  8499  1739  082A               	movf	??_CC2500_RxData,w
  8500  173A  00E6               	movwf	_SPI0Buffer
  8501                           
  8502                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8503  173B  2F3F               	goto	l11073
  8504  173C                     l11071:	
  8505                           
  8506                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8507  173C  319E  2668  3197   	fcall	_RF_Timeout_Counter
  8508  173F                     l11073:	
  8509  173F  0020               	movlb	0	; select bank0
  8510  1740  1E8E               	btfss	14,5	;volatile
  8511  1741  2F45               	goto	l11077
  8512  1742  0021               	movlb	1	; select bank1
  8513  1743  1F21               	btfss	(_RF1^(0+128)+1),6
  8514  1744  2F3C               	goto	l11071
  8515  1745                     l11077:	
  8516                           
  8517                           ;CC2500_B1.c: 95: };
  8518                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8519  1745  319B  23AD  3197   	fcall	_setRF_TimeoutCleared
  8520                           
  8521                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8522  1748  319E  2640  3197   	fcall	_CC2500_WriteByte
  8523                           
  8524                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8525  174B  319E  26E9  3197   	fcall	_CC2500_ReadByte
  8526                           
  8527                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8528  174E  0020               	movlb	0	; select bank0
  8529  174F  0866               	movf	_SPI0Buffer,w
  8530  1750  00AA               	movwf	??_CC2500_RxData
  8531  1751  082A               	movf	??_CC2500_RxData,w
  8532  1752  0021               	movlb	1	; select bank1
  8533  1753  00CC               	movwf	_Rx_Length^(0+128)
  8534                           
  8535                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8536  1754  0020               	movlb	0	; select bank0
  8537  1755  01AB               	clrf	CC2500_RxData@loop_f
  8538  1756                     l11093:	
  8539  1756  0021               	movlb	1	; select bank1
  8540  1757  084C               	movf	_Rx_Length^(0+128),w
  8541  1758  0020               	movlb	0	; select bank0
  8542  1759  022B               	subwf	CC2500_RxData@loop_f,w
  8543  175A  1803               	btfsc	3,0
  8544  175B  2F6E               	goto	l11095
  8545                           
  8546                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8547  175C  319E  26E9  3197   	fcall	_CC2500_ReadByte
  8548                           
  8549                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8550  175F  0020               	movlb	0	; select bank0
  8551  1760  0866               	movf	_SPI0Buffer,w
  8552  1761  00AA               	movwf	??_CC2500_RxData
  8553  1762  082B               	movf	CC2500_RxData@loop_f,w
  8554  1763  3EA0               	addlw	_RF_Data& (0+255)
  8555  1764  0086               	movwf	6
  8556  1765  3001               	movlw	1	; select bank3/4
  8557  1766  0087               	movwf	7
  8558  1767  082A               	movf	??_CC2500_RxData,w
  8559  1768  0081               	movwf	1
  8560  1769  3001               	movlw	1
  8561  176A  00AA               	movwf	??_CC2500_RxData
  8562  176B  082A               	movf	??_CC2500_RxData,w
  8563  176C  07AB               	addwf	CC2500_RxData@loop_f,f
  8564  176D  2F56               	goto	l11093
  8565  176E                     l11095:	
  8566                           
  8567                           ;CC2500_B1.c: 104: }
  8568                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8569  176E  319E  26E9  3197   	fcall	_CC2500_ReadByte
  8570                           
  8571                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8572  1771  0020               	movlb	0	; select bank0
  8573  1772  0866               	movf	_SPI0Buffer,w
  8574  1773  00AA               	movwf	??_CC2500_RxData
  8575  1774  082A               	movf	??_CC2500_RxData,w
  8576  1775  0021               	movlb	1	; select bank1
  8577  1776  00CB               	movwf	_RSSI^(0+128)
  8578                           
  8579                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8580  1777  319E  26E9  3197   	fcall	_CC2500_ReadByte
  8581                           
  8582                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8583  177A  0020               	movlb	0	; select bank0
  8584  177B  0866               	movf	_SPI0Buffer,w
  8585  177C  00AA               	movwf	??_CC2500_RxData
  8586  177D  082A               	movf	??_CC2500_RxData,w
  8587  177E  0021               	movlb	1	; select bank1
  8588  177F  00C7               	movwf	_CRC^(0+128)
  8589                           
  8590                           ;CC2500_B1.c: 109: RC0 = 1;
  8591  1780  0020               	movlb	0	; select bank0
  8592  1781  140E               	bsf	14,0	;volatile
  8593                           
  8594                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8595  1782  0021               	movlb	1	; select bank1
  8596  1783  1FC7               	btfss	_CRC^(0+128),7
  8597  1784  2F87               	goto	l259
  8598                           
  8599                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8600  1785  0020               	movlb	0	; select bank0
  8601  1786  1469               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8602  1787                     l259:	
  8603                           
  8604                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8605  1787  0021               	movlb	1	; select bank1
  8606  1788  11A0               	bcf	_RF1^(0+128),3
  8607                           
  8608                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8609  1789  14A0               	bsf	_RF1^(0+128),1
  8610                           
  8611                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8612  178A  3036               	movlw	54
  8613  178B  319F  2762  3197   	fcall	_CC2500_WriteCommand
  8614                           
  8615                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8616  178E  303A               	movlw	58
  8617  178F  319F  2762         	fcall	_CC2500_WriteCommand
  8618  1791  0021               	movlb	1	; select bank1
  8619  1792  0008               	return
  8620  1793                     __end_of_CC2500_RxData:	
  8621                           
  8622                           	psect	text38
  8623  1106                     __ptext38:	
  8624 ;; *************** function _CC2500_ReadStatus *****************
  8625 ;; Defined at:
  8626 ;;		line 308 in file "../src/CC2500_B1.c"
  8627 ;; Parameters:    Size  Location     Type
  8628 ;;  status_addr     1    wreg     unsigned char 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  status_addr     1    9[BANK0 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;		None               void
  8633 ;; Registers used:
  8634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;Total ram usage:        2 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    6
  8647 ;; This function calls:
  8648 ;;		_CC2500_ReadByte
  8649 ;;		_CC2500_WriteByte
  8650 ;;		_RF_Timeout_Counter
  8651 ;;		_setRF_TimeoutCleared
  8652 ;; This function is called by:
  8653 ;;		_CC2500_RxData
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           
  8658                           ;psect for function _CC2500_ReadStatus
  8659  1106                     _CC2500_ReadStatus:	
  8660                           
  8661                           ;incstack = 0
  8662                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8663                           ;CC2500_ReadStatus@status_addr stored from wreg
  8664  1106  0020               	movlb	0	; select bank0
  8665  1107  00A9               	movwf	CC2500_ReadStatus@status_addr
  8666                           
  8667                           ;CC2500_B1.c: 309: RC0 = 0;
  8668  1108  100E               	bcf	14,0	;volatile
  8669                           
  8670                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8671  1109  0829               	movf	CC2500_ReadStatus@status_addr,w
  8672  110A  3EC0               	addlw	192
  8673  110B  00A8               	movwf	??_CC2500_ReadStatus
  8674  110C  0828               	movf	??_CC2500_ReadStatus,w
  8675  110D  00E6               	movwf	_SPI0Buffer
  8676                           
  8677                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8678  110E  2912               	goto	l10773
  8679  110F                     l10771:	
  8680                           
  8681                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8682  110F  319E  2668  3191   	fcall	_RF_Timeout_Counter
  8683  1112                     l10773:	
  8684  1112  0020               	movlb	0	; select bank0
  8685  1113  1E8E               	btfss	14,5	;volatile
  8686  1114  2918               	goto	l10777
  8687  1115  0021               	movlb	1	; select bank1
  8688  1116  1F21               	btfss	(_RF1^(0+128)+1),6
  8689  1117  290F               	goto	l10771
  8690  1118                     l10777:	
  8691                           
  8692                           ;CC2500_B1.c: 314: };
  8693                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8694  1118  319B  23AD  3191   	fcall	_setRF_TimeoutCleared
  8695                           
  8696                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8697  111B  319E  2640  3191   	fcall	_CC2500_WriteByte
  8698                           
  8699                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8700  111E  319E  26E9         	fcall	_CC2500_ReadByte
  8701                           
  8702                           ;CC2500_B1.c: 319: RC0 = 1;
  8703  1120  0020               	movlb	0	; select bank0
  8704  1121  140E               	bsf	14,0	;volatile
  8705                           
  8706                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8707  1122  0866               	movf	_SPI0Buffer,w
  8708  1123  00A8               	movwf	??_CC2500_ReadStatus
  8709  1124  0828               	movf	??_CC2500_ReadStatus,w
  8710  1125  0021               	movlb	1	; select bank1
  8711  1126  00D0               	movwf	_s_data^(0+128)
  8712  1127  0008               	return
  8713  1128                     __end_of_CC2500_ReadStatus:	
  8714                           
  8715                           	psect	text39
  8716  1EE9                     __ptext39:	
  8717 ;; *************** function _CC2500_ReadByte *****************
  8718 ;; Defined at:
  8719 ;;		line 242 in file "../src/CC2500_B1.c"
  8720 ;; Parameters:    Size  Location     Type
  8721 ;;		None
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;  loop_b          1    7[BANK0 ] unsigned char 
  8724 ;; Return value:  Size  Location     Type
  8725 ;;		None               void
  8726 ;; Registers used:
  8727 ;;		wreg, status,2, status,0
  8728 ;; Tracked objects:
  8729 ;;		On entry : 0/0
  8730 ;;		On exit  : 0/0
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;Total ram usage:        2 bytes
  8738 ;; Hardware stack levels used:    1
  8739 ;; Hardware stack levels required when called:    5
  8740 ;; This function calls:
  8741 ;;		Nothing
  8742 ;; This function is called by:
  8743 ;;		_CC2500_RxData
  8744 ;;		_CC2500_ReadStatus
  8745 ;;		_CC2500_ReadREG
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           
  8750                           ;psect for function _CC2500_ReadByte
  8751  1EE9                     _CC2500_ReadByte:	
  8752                           
  8753                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8754                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8755                           
  8756                           ;incstack = 0
  8757                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8758  1EE9  0020               	movlb	0	; select bank0
  8759  1EEA  01A7               	clrf	CC2500_ReadByte@loop_b
  8760  1EEB                     L2:	
  8761  1EEB  3008               	movlw	8
  8762  1EEC  0227               	subwf	CC2500_ReadByte@loop_b,w
  8763  1EED  1803               	btfsc	3,0
  8764  1EEE  0008               	return
  8765                           
  8766                           ;CC2500_B1.c: 245: RC3 = 1;
  8767  1EEF  158E               	bsf	14,3	;volatile
  8768                           
  8769                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8770  1EF0  1003               	clrc
  8771  1EF1  0DE6               	rlf	_SPI0Buffer,f
  8772                           
  8773                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8774  1EF2  1E8E               	btfss	14,5	;volatile
  8775  1EF3  2EF6               	goto	l10667
  8776                           
  8777                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8778  1EF4  1466               	bsf	_SPI0Buffer,0
  8779  1EF5  2EFA               	goto	l10669
  8780  1EF6                     l10667:	
  8781                           
  8782                           ;CC2500_B1.c: 249: else
  8783                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8784  1EF6  30FE               	movlw	254
  8785  1EF7  00A6               	movwf	??_CC2500_ReadByte
  8786  1EF8  0826               	movf	??_CC2500_ReadByte,w
  8787  1EF9  05E6               	andwf	_SPI0Buffer,f
  8788  1EFA                     l10669:	
  8789                           
  8790                           ;CC2500_B1.c: 251: RC3 = 0;
  8791  1EFA  118E               	bcf	14,3	;volatile
  8792  1EFB  3001               	movlw	1
  8793  1EFC  00A6               	movwf	??_CC2500_ReadByte
  8794  1EFD  0826               	movf	??_CC2500_ReadByte,w
  8795  1EFE  07A7               	addwf	CC2500_ReadByte@loop_b,f
  8796  1EFF  2EEB               	goto	L2
  8797  1F00                     __end_of_CC2500_ReadByte:	
  8798                           
  8799                           	psect	text40
  8800  1E7D                     __ptext40:	
  8801 ;; *************** function _CC2500_PowerOnInitial *****************
  8802 ;; Defined at:
  8803 ;;		line 126 in file "../src/CC2500_B1.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;		None
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;		None
  8808 ;; Return value:  Size  Location     Type
  8809 ;;		None               void
  8810 ;; Registers used:
  8811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;Total ram usage:        0 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    8
  8824 ;; This function calls:
  8825 ;;		_CC2500_ClearRXFIFO
  8826 ;;		_CC2500_ClearTXFIFO
  8827 ;;		_CC2500_FrequencyCabr
  8828 ;;		_CC2500_InitPATable
  8829 ;;		_CC2500_InitSetREG
  8830 ;;		_CC2500_PowerRST
  8831 ;;		_CC2500_SIDLEMode
  8832 ;; This function is called by:
  8833 ;;		_main
  8834 ;;		_setRF_Main
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           
  8839                           ;psect for function _CC2500_PowerOnInitial
  8840  1E7D                     _CC2500_PowerOnInitial:	
  8841                           
  8842                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8843                           
  8844                           ;incstack = 0
  8845                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8846  1E7D  3188  2000  319E   	fcall	_CC2500_PowerRST
  8847                           
  8848                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8849  1E80  3187  27D6  319E   	fcall	_CC2500_InitSetREG
  8850                           
  8851                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8852  1E83  3190  2042  319E   	fcall	_CC2500_InitPATable
  8853                           
  8854                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8855  1E86  319B  23B5  319E   	fcall	_CC2500_ClearTXFIFO
  8856                           
  8857                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8858  1E89  319B  23B1  319E   	fcall	_CC2500_ClearRXFIFO
  8859                           
  8860                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8861  1E8C  319C  24C1  319E   	fcall	_CC2500_FrequencyCabr
  8862                           
  8863                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8864  1E8F  319B  23B9         	fcall	_CC2500_SIDLEMode
  8865  1E91  0008               	return
  8866  1E92                     __end_of_CC2500_PowerOnInitial:	
  8867                           
  8868                           	psect	text41
  8869  1BB9                     __ptext41:	
  8870 ;; *************** function _CC2500_SIDLEMode *****************
  8871 ;; Defined at:
  8872 ;;		line 216 in file "../src/CC2500_B1.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;		None
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;		None
  8877 ;; Return value:  Size  Location     Type
  8878 ;;		None               void
  8879 ;; Registers used:
  8880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;Total ram usage:        0 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:    7
  8893 ;; This function calls:
  8894 ;;		_CC2500_WriteCommand
  8895 ;; This function is called by:
  8896 ;;		_CC2500_PowerOnInitial
  8897 ;; This function uses a non-reentrant model
  8898 ;;
  8899                           
  8900                           
  8901                           ;psect for function _CC2500_SIDLEMode
  8902  1BB9                     _CC2500_SIDLEMode:	
  8903                           
  8904                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8905                           
  8906                           ;incstack = 0
  8907                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8908  1BB9  3036               	movlw	54
  8909  1BBA  319F  2762         	fcall	_CC2500_WriteCommand
  8910  1BBC  0008               	return
  8911  1BBD                     __end_of_CC2500_SIDLEMode:	
  8912                           
  8913                           	psect	text42
  8914  0800                     __ptext42:	
  8915 ;; *************** function _CC2500_PowerRST *****************
  8916 ;; Defined at:
  8917 ;;		line 139 in file "../src/CC2500_B1.c"
  8918 ;; Parameters:    Size  Location     Type
  8919 ;;		None
  8920 ;; Auto vars:     Size  Location     Type
  8921 ;;		None
  8922 ;; Return value:  Size  Location     Type
  8923 ;;		None               void
  8924 ;; Registers used:
  8925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8935 ;;Total ram usage:        1 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; Hardware stack levels required when called:    6
  8938 ;; This function calls:
  8939 ;;		_CC2500_WriteByte
  8940 ;;		_DelayTime_1us
  8941 ;;		_RF_Timeout_Counter
  8942 ;;		_setRF_TimeoutCleared
  8943 ;; This function is called by:
  8944 ;;		_CC2500_PowerOnInitial
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           
  8949                           ;psect for function _CC2500_PowerRST
  8950  0800                     _CC2500_PowerRST:	
  8951                           
  8952                           ;CC2500_B1.c: 140: RC3 = 0;
  8953                           
  8954                           ;incstack = 0
  8955                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8956  0800  0020               	movlb	0	; select bank0
  8957  0801  118E               	bcf	14,3	;volatile
  8958                           
  8959                           ;CC2500_B1.c: 141: RC4 = 0;
  8960  0802  120E               	bcf	14,4	;volatile
  8961                           
  8962                           ;CC2500_B1.c: 142: RC0 = 1;
  8963  0803  140E               	bsf	14,0	;volatile
  8964                           
  8965                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8966  0804  300A               	movlw	10
  8967  0805  00A6               	movwf	DelayTime_1us@count
  8968  0806  3000               	movlw	0
  8969  0807  00A7               	movwf	DelayTime_1us@count+1
  8970  0808  3191  2128  3188   	fcall	_DelayTime_1us
  8971                           
  8972                           ;CC2500_B1.c: 144: RC0 = 0;
  8973  080B  0020               	movlb	0	; select bank0
  8974  080C  100E               	bcf	14,0	;volatile
  8975                           
  8976                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8977  080D  300A               	movlw	10
  8978  080E  00A6               	movwf	DelayTime_1us@count
  8979  080F  3000               	movlw	0
  8980  0810  00A7               	movwf	DelayTime_1us@count+1
  8981  0811  3191  2128  3188   	fcall	_DelayTime_1us
  8982                           
  8983                           ;CC2500_B1.c: 146: RC0 = 1;
  8984  0814  0020               	movlb	0	; select bank0
  8985  0815  140E               	bsf	14,0	;volatile
  8986                           
  8987                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8988  0816  3028               	movlw	40
  8989  0817  00A6               	movwf	DelayTime_1us@count
  8990  0818  3000               	movlw	0
  8991  0819  00A7               	movwf	DelayTime_1us@count+1
  8992  081A  3191  2128  3188   	fcall	_DelayTime_1us
  8993                           
  8994                           ;CC2500_B1.c: 148: RC0 = 0;
  8995  081D  0020               	movlb	0	; select bank0
  8996  081E  100E               	bcf	14,0	;volatile
  8997                           
  8998                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8999  081F  3030               	movlw	48
  9000  0820  00AC               	movwf	??_CC2500_PowerRST
  9001  0821  082C               	movf	??_CC2500_PowerRST,w
  9002  0822  00E6               	movwf	_SPI0Buffer
  9003                           
  9004                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9005  0823  2827               	goto	l10801
  9006  0824                     l10799:	
  9007                           
  9008                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9009  0824  319E  2668  3188   	fcall	_RF_Timeout_Counter
  9010  0827                     l10801:	
  9011  0827  0020               	movlb	0	; select bank0
  9012  0828  1E8E               	btfss	14,5	;volatile
  9013  0829  282D               	goto	l10805
  9014  082A  0021               	movlb	1	; select bank1
  9015  082B  1F21               	btfss	(_RF1^(0+128)+1),6
  9016  082C  2824               	goto	l10799
  9017  082D                     l10805:	
  9018                           
  9019                           ;CC2500_B1.c: 152: };
  9020                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9021  082D  319B  23AD  3188   	fcall	_setRF_TimeoutCleared
  9022                           
  9023                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9024  0830  319E  2640  3188   	fcall	_CC2500_WriteByte
  9025                           
  9026                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9027  0833  2837               	goto	l10811
  9028  0834                     l10809:	
  9029                           
  9030                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9031  0834  319E  2668  3188   	fcall	_RF_Timeout_Counter
  9032  0837                     l10811:	
  9033  0837  0020               	movlb	0	; select bank0
  9034  0838  1E8E               	btfss	14,5	;volatile
  9035  0839  283D               	goto	l10815
  9036  083A  0021               	movlb	1	; select bank1
  9037  083B  1F21               	btfss	(_RF1^(0+128)+1),6
  9038  083C  2834               	goto	l10809
  9039  083D                     l10815:	
  9040                           
  9041                           ;CC2500_B1.c: 157: };
  9042                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9043  083D  319B  23AD         	fcall	_setRF_TimeoutCleared
  9044                           
  9045                           ;CC2500_B1.c: 159: RC4 = 0;
  9046  083F  0020               	movlb	0	; select bank0
  9047  0840  120E               	bcf	14,4	;volatile
  9048                           
  9049                           ;CC2500_B1.c: 160: RC0 = 1;
  9050  0841  140E               	bsf	14,0	;volatile
  9051  0842  0008               	return
  9052  0843                     __end_of_CC2500_PowerRST:	
  9053                           
  9054                           	psect	text43
  9055  07D6                     __ptext43:	
  9056 ;; *************** function _CC2500_InitSetREG *****************
  9057 ;; Defined at:
  9058 ;;		line 166 in file "../src/CC2500_B1.c"
  9059 ;; Parameters:    Size  Location     Type
  9060 ;;		None
  9061 ;; Auto vars:     Size  Location     Type
  9062 ;;  loop_c          1   14[BANK0 ] unsigned char 
  9063 ;;  temp2           1   13[BANK0 ] unsigned char 
  9064 ;;  temp1           1   12[BANK0 ] unsigned char 
  9065 ;; Return value:  Size  Location     Type
  9066 ;;		None               void
  9067 ;; Registers used:
  9068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9069 ;; Tracked objects:
  9070 ;;		On entry : 0/0
  9071 ;;		On exit  : 0/0
  9072 ;;		Unchanged: 0/0
  9073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9075 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;Total ram usage:        4 bytes
  9079 ;; Hardware stack levels used:    1
  9080 ;; Hardware stack levels required when called:    7
  9081 ;; This function calls:
  9082 ;;		_CC2500_WriteREG
  9083 ;; This function is called by:
  9084 ;;		_CC2500_PowerOnInitial
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           
  9089                           ;psect for function _CC2500_InitSetREG
  9090  07D6                     _CC2500_InitSetREG:	
  9091                           
  9092                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9093                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9094                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9095                           
  9096                           ;incstack = 0
  9097                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9098  07D6  0020               	movlb	0	; select bank0
  9099  07D7  01AE               	clrf	CC2500_InitSetREG@loop_c
  9100  07D8                     L3:	
  9101  07D8  302F               	movlw	47
  9102  07D9  022E               	subwf	CC2500_InitSetREG@loop_c,w
  9103  07DA  1803               	btfsc	3,0
  9104  07DB  0008               	return
  9105                           
  9106                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9107  07DC  082E               	movf	CC2500_InitSetREG@loop_c,w
  9108  07DD  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9109  07DE  0084               	movwf	4
  9110  07DF  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9111  07E0  1803               	skipnc
  9112  07E1  3E01               	addlw	1
  9113  07E2  0085               	movwf	5
  9114  07E3  0800               	movf	0,w	;code access
  9115  07E4  00AB               	movwf	??_CC2500_InitSetREG
  9116  07E5  082B               	movf	??_CC2500_InitSetREG,w
  9117  07E6  00AC               	movwf	CC2500_InitSetREG@temp1
  9118                           
  9119                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9120  07E7  082E               	movf	CC2500_InitSetREG@loop_c,w
  9121  07E8  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9122  07E9  0084               	movwf	4
  9123  07EA  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9124  07EB  1803               	skipnc
  9125  07EC  3E01               	addlw	1
  9126  07ED  0085               	movwf	5
  9127  07EE  0800               	movf	0,w	;code access
  9128  07EF  00AB               	movwf	??_CC2500_InitSetREG
  9129  07F0  082B               	movf	??_CC2500_InitSetREG,w
  9130  07F1  00AD               	movwf	CC2500_InitSetREG@temp2
  9131                           
  9132                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9133  07F2  082D               	movf	CC2500_InitSetREG@temp2,w
  9134  07F3  00AB               	movwf	??_CC2500_InitSetREG
  9135  07F4  082B               	movf	??_CC2500_InitSetREG,w
  9136  07F5  00A8               	movwf	CC2500_WriteREG@value
  9137  07F6  082C               	movf	CC2500_InitSetREG@temp1,w
  9138  07F7  3190  20A2  3187   	fcall	_CC2500_WriteREG
  9139  07FA  3001               	movlw	1
  9140  07FB  0020               	movlb	0	; select bank0
  9141  07FC  00AB               	movwf	??_CC2500_InitSetREG
  9142  07FD  082B               	movf	??_CC2500_InitSetREG,w
  9143  07FE  07AE               	addwf	CC2500_InitSetREG@loop_c,f
  9144  07FF  2FD8               	goto	L3
  9145  0800                     __end_of_CC2500_InitSetREG:	
  9146                           
  9147                           	psect	text44
  9148  1042                     __ptext44:	
  9149 ;; *************** function _CC2500_InitPATable *****************
  9150 ;; Defined at:
  9151 ;;		line 181 in file "../src/CC2500_B1.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;		None
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;  loop_d          1   13[BANK0 ] unsigned char 
  9156 ;;  temp            1   12[BANK0 ] unsigned char 
  9157 ;; Return value:  Size  Location     Type
  9158 ;;		None               void
  9159 ;; Registers used:
  9160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9161 ;; Tracked objects:
  9162 ;;		On entry : 0/0
  9163 ;;		On exit  : 0/0
  9164 ;;		Unchanged: 0/0
  9165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9170 ;;Total ram usage:        3 bytes
  9171 ;; Hardware stack levels used:    1
  9172 ;; Hardware stack levels required when called:    7
  9173 ;; This function calls:
  9174 ;;		_CC2500_WriteREG
  9175 ;; This function is called by:
  9176 ;;		_CC2500_PowerOnInitial
  9177 ;; This function uses a non-reentrant model
  9178 ;;
  9179                           
  9180                           
  9181                           ;psect for function _CC2500_InitPATable
  9182  1042                     _CC2500_InitPATable:	
  9183                           
  9184                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9185                           ;CC2500_B1.c: 183: unsigned char temp;
  9186                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9187                           
  9188                           ;incstack = 0
  9189                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9190  1042  0020               	movlb	0	; select bank0
  9191  1043  01AD               	clrf	CC2500_InitPATable@loop_d
  9192  1044                     L4:	
  9193  1044  3008               	movlw	8
  9194  1045  022D               	subwf	CC2500_InitPATable@loop_d,w
  9195  1046  1803               	btfsc	3,0
  9196  1047  0008               	return
  9197                           
  9198                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9199  1048  082D               	movf	CC2500_InitPATable@loop_d,w
  9200  1049  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9201  104A  0084               	movwf	4
  9202  104B  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9203  104C  1803               	skipnc
  9204  104D  3E01               	addlw	1
  9205  104E  0085               	movwf	5
  9206  104F  0800               	movf	0,w	;code access
  9207  1050  00AB               	movwf	??_CC2500_InitPATable
  9208  1051  082B               	movf	??_CC2500_InitPATable,w
  9209  1052  00AC               	movwf	CC2500_InitPATable@temp
  9210                           
  9211                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9212  1053  082C               	movf	CC2500_InitPATable@temp,w
  9213  1054  00AB               	movwf	??_CC2500_InitPATable
  9214  1055  082B               	movf	??_CC2500_InitPATable,w
  9215  1056  00A8               	movwf	CC2500_WriteREG@value
  9216  1057  303E               	movlw	62
  9217  1058  3190  20A2  3190   	fcall	_CC2500_WriteREG
  9218  105B  3001               	movlw	1
  9219  105C  0020               	movlb	0	; select bank0
  9220  105D  00AB               	movwf	??_CC2500_InitPATable
  9221  105E  082B               	movf	??_CC2500_InitPATable,w
  9222  105F  07AD               	addwf	CC2500_InitPATable@loop_d,f
  9223  1060  2844               	goto	L4
  9224  1061                     __end_of_CC2500_InitPATable:	
  9225                           
  9226                           	psect	text45
  9227  10A2                     __ptext45:	
  9228 ;; *************** function _CC2500_WriteREG *****************
  9229 ;; Defined at:
  9230 ;;		line 258 in file "../src/CC2500_B1.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;  w_addr          1    wreg     unsigned char 
  9233 ;;  value           1    8[BANK0 ] unsigned char 
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;  w_addr          1   10[BANK0 ] unsigned char 
  9236 ;; Return value:  Size  Location     Type
  9237 ;;		None               void
  9238 ;; Registers used:
  9239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9245 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;Total ram usage:        3 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    6
  9252 ;; This function calls:
  9253 ;;		_CC2500_WriteByte
  9254 ;;		_RF_Timeout_Counter
  9255 ;;		_setRF_TimeoutCleared
  9256 ;; This function is called by:
  9257 ;;		_CC2500_InitSetREG
  9258 ;;		_CC2500_InitPATable
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           
  9263                           ;psect for function _CC2500_WriteREG
  9264  10A2                     _CC2500_WriteREG:	
  9265                           
  9266                           ;incstack = 0
  9267                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9268                           ;CC2500_WriteREG@w_addr stored from wreg
  9269  10A2  0020               	movlb	0	; select bank0
  9270  10A3  00AA               	movwf	CC2500_WriteREG@w_addr
  9271                           
  9272                           ;CC2500_B1.c: 259: RC0 = 0;
  9273  10A4  100E               	bcf	14,0	;volatile
  9274                           
  9275                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9276  10A5  082A               	movf	CC2500_WriteREG@w_addr,w
  9277  10A6  00A9               	movwf	??_CC2500_WriteREG
  9278  10A7  0829               	movf	??_CC2500_WriteREG,w
  9279  10A8  00E6               	movwf	_SPI0Buffer
  9280                           
  9281                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9282  10A9  28AD               	goto	l10691
  9283  10AA                     l10689:	
  9284                           
  9285                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9286  10AA  319E  2668  3190   	fcall	_RF_Timeout_Counter
  9287  10AD                     l10691:	
  9288  10AD  0020               	movlb	0	; select bank0
  9289  10AE  1E8E               	btfss	14,5	;volatile
  9290  10AF  28B3               	goto	l10695
  9291  10B0  0021               	movlb	1	; select bank1
  9292  10B1  1F21               	btfss	(_RF1^(0+128)+1),6
  9293  10B2  28AA               	goto	l10689
  9294  10B3                     l10695:	
  9295                           
  9296                           ;CC2500_B1.c: 263: };
  9297                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9298  10B3  319B  23AD  3190   	fcall	_setRF_TimeoutCleared
  9299                           
  9300                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9301  10B6  319E  2640  3190   	fcall	_CC2500_WriteByte
  9302                           
  9303                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9304  10B9  0020               	movlb	0	; select bank0
  9305  10BA  0828               	movf	CC2500_WriteREG@value,w
  9306  10BB  00A9               	movwf	??_CC2500_WriteREG
  9307  10BC  0829               	movf	??_CC2500_WriteREG,w
  9308  10BD  00E6               	movwf	_SPI0Buffer
  9309                           
  9310                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9311  10BE  319E  2640         	fcall	_CC2500_WriteByte
  9312                           
  9313                           ;CC2500_B1.c: 269: RC0 = 1;
  9314  10C0  0020               	movlb	0	; select bank0
  9315  10C1  140E               	bsf	14,0	;volatile
  9316  10C2  0008               	return
  9317  10C3                     __end_of_CC2500_WriteREG:	
  9318                           
  9319                           	psect	text46
  9320  1CC1                     __ptext46:	
  9321 ;; *************** function _CC2500_FrequencyCabr *****************
  9322 ;; Defined at:
  9323 ;;		line 208 in file "../src/CC2500_B1.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;		None
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;		None
  9328 ;; Return value:  Size  Location     Type
  9329 ;;		None               void
  9330 ;; Registers used:
  9331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9332 ;; Tracked objects:
  9333 ;;		On entry : 0/0
  9334 ;;		On exit  : 0/0
  9335 ;;		Unchanged: 0/0
  9336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;Total ram usage:        0 bytes
  9342 ;; Hardware stack levels used:    1
  9343 ;; Hardware stack levels required when called:    7
  9344 ;; This function calls:
  9345 ;;		_CC2500_WriteCommand
  9346 ;;		_DelayTime_1us
  9347 ;; This function is called by:
  9348 ;;		_CC2500_PowerOnInitial
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           
  9353                           ;psect for function _CC2500_FrequencyCabr
  9354  1CC1                     _CC2500_FrequencyCabr:	
  9355                           
  9356                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9357                           
  9358                           ;incstack = 0
  9359                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9360  1CC1  3033               	movlw	51
  9361  1CC2  319F  2762  319C   	fcall	_CC2500_WriteCommand
  9362                           
  9363                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9364  1CC5  30E8               	movlw	232
  9365  1CC6  0020               	movlb	0	; select bank0
  9366  1CC7  00A6               	movwf	DelayTime_1us@count
  9367  1CC8  3003               	movlw	3
  9368  1CC9  00A7               	movwf	DelayTime_1us@count+1
  9369  1CCA  3191  2128         	fcall	_DelayTime_1us
  9370  1CCC  0008               	return
  9371  1CCD                     __end_of_CC2500_FrequencyCabr:	
  9372                           
  9373                           	psect	text47
  9374  1128                     __ptext47:	
  9375 ;; *************** function _DelayTime_1us *****************
  9376 ;; Defined at:
  9377 ;;		line 327 in file "../src/CC2500_B1.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;  count           2    6[BANK0 ] int 
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;  j               2   10[BANK0 ] unsigned int 
  9382 ;;  i               2    8[BANK0 ] unsigned int 
  9383 ;; Return value:  Size  Location     Type
  9384 ;;		None               void
  9385 ;; Registers used:
  9386 ;;		wreg, status,2
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9392 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;Total ram usage:        6 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    5
  9399 ;; This function calls:
  9400 ;;		Nothing
  9401 ;; This function is called by:
  9402 ;;		_CC2500_PowerRST
  9403 ;;		_CC2500_FrequencyCabr
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           
  9408                           ;psect for function _DelayTime_1us
  9409  1128                     _DelayTime_1us:	
  9410                           
  9411                           ;CC2500_B1.c: 328: unsigned int i, j;
  9412                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9413                           
  9414                           ;incstack = 0
  9415                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9416  1128  3001               	movlw	1
  9417  1129  0020               	movlb	0	; select bank0
  9418  112A  00A8               	movwf	DelayTime_1us@i
  9419  112B  3000               	movlw	0
  9420  112C  00A9               	movwf	DelayTime_1us@i+1
  9421  112D                     l347:	
  9422  112D  0827               	movf	DelayTime_1us@count+1,w
  9423  112E  0229               	subwf	DelayTime_1us@i+1,w
  9424  112F  1D03               	skipz
  9425  1130  2933               	goto	u12665
  9426  1131  0826               	movf	DelayTime_1us@count,w
  9427  1132  0228               	subwf	DelayTime_1us@i,w
  9428  1133                     u12665:	
  9429  1133  1803               	btfsc	3,0
  9430  1134  0008               	return
  9431                           
  9432                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9433  1135  01AA               	clrf	DelayTime_1us@j
  9434  1136  01AB               	clrf	DelayTime_1us@j+1
  9435  1137  3000               	movlw	0
  9436  1138  022B               	subwf	DelayTime_1us@j+1,w
  9437  1139  3002               	movlw	2
  9438  113A  1903               	skipnz
  9439  113B  022A               	subwf	DelayTime_1us@j,w
  9440  113C  1803               	btfsc	3,0
  9441  113D  2949               	goto	l10683
  9442  113E                     l10681:	
  9443  113E  3001               	movlw	1
  9444  113F  07AA               	addwf	DelayTime_1us@j,f
  9445  1140  3000               	movlw	0
  9446  1141  3DAB               	addwfc	DelayTime_1us@j+1,f
  9447  1142  3000               	movlw	0
  9448  1143  022B               	subwf	DelayTime_1us@j+1,w
  9449  1144  3002               	movlw	2
  9450  1145  1903               	skipnz
  9451  1146  022A               	subwf	DelayTime_1us@j,w
  9452  1147  1C03               	skipc
  9453  1148  293E               	goto	l10681
  9454  1149                     l10683:	
  9455  1149  3001               	movlw	1
  9456  114A  07A8               	addwf	DelayTime_1us@i,f
  9457  114B  3000               	movlw	0
  9458  114C  3DA9               	addwfc	DelayTime_1us@i+1,f
  9459  114D  292D               	goto	l347
  9460  114E                     __end_of_DelayTime_1us:	
  9461                           
  9462                           	psect	text48
  9463  1BB5                     __ptext48:	
  9464 ;; *************** function _CC2500_ClearTXFIFO *****************
  9465 ;; Defined at:
  9466 ;;		line 194 in file "../src/CC2500_B1.c"
  9467 ;; Parameters:    Size  Location     Type
  9468 ;;		None
  9469 ;; Auto vars:     Size  Location     Type
  9470 ;;		None
  9471 ;; Return value:  Size  Location     Type
  9472 ;;		None               void
  9473 ;; Registers used:
  9474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9475 ;; Tracked objects:
  9476 ;;		On entry : 0/0
  9477 ;;		On exit  : 0/0
  9478 ;;		Unchanged: 0/0
  9479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9484 ;;Total ram usage:        0 bytes
  9485 ;; Hardware stack levels used:    1
  9486 ;; Hardware stack levels required when called:    7
  9487 ;; This function calls:
  9488 ;;		_CC2500_WriteCommand
  9489 ;; This function is called by:
  9490 ;;		_CC2500_PowerOnInitial
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           
  9495                           ;psect for function _CC2500_ClearTXFIFO
  9496  1BB5                     _CC2500_ClearTXFIFO:	
  9497                           
  9498                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9499                           
  9500                           ;incstack = 0
  9501                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9502  1BB5  303B               	movlw	59
  9503  1BB6  319F  2762         	fcall	_CC2500_WriteCommand
  9504  1BB8  0008               	return
  9505  1BB9                     __end_of_CC2500_ClearTXFIFO:	
  9506                           
  9507                           	psect	text49
  9508  1BB1                     __ptext49:	
  9509 ;; *************** function _CC2500_ClearRXFIFO *****************
  9510 ;; Defined at:
  9511 ;;		line 201 in file "../src/CC2500_B1.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;		None
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;		None
  9516 ;; Return value:  Size  Location     Type
  9517 ;;		None               void
  9518 ;; Registers used:
  9519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;Total ram usage:        0 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    7
  9532 ;; This function calls:
  9533 ;;		_CC2500_WriteCommand
  9534 ;; This function is called by:
  9535 ;;		_CC2500_PowerOnInitial
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           
  9540                           ;psect for function _CC2500_ClearRXFIFO
  9541  1BB1                     _CC2500_ClearRXFIFO:	
  9542                           
  9543                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9544                           
  9545                           ;incstack = 0
  9546                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9547  1BB1  303A               	movlw	58
  9548  1BB2  319F  2762         	fcall	_CC2500_WriteCommand
  9549  1BB4  0008               	return
  9550  1BB5                     __end_of_CC2500_ClearRXFIFO:	
  9551                           
  9552                           	psect	text50
  9553  1F62                     __ptext50:	
  9554 ;; *************** function _CC2500_WriteCommand *****************
  9555 ;; Defined at:
  9556 ;;		line 292 in file "../src/CC2500_B1.c"
  9557 ;; Parameters:    Size  Location     Type
  9558 ;;  command         1    wreg     unsigned char 
  9559 ;; Auto vars:     Size  Location     Type
  9560 ;;  command         1    9[BANK0 ] unsigned char 
  9561 ;; Return value:  Size  Location     Type
  9562 ;;		None               void
  9563 ;; Registers used:
  9564 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9565 ;; Tracked objects:
  9566 ;;		On entry : 0/0
  9567 ;;		On exit  : 0/0
  9568 ;;		Unchanged: 0/0
  9569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;Total ram usage:        2 bytes
  9575 ;; Hardware stack levels used:    1
  9576 ;; Hardware stack levels required when called:    6
  9577 ;; This function calls:
  9578 ;;		_CC2500_WriteByte
  9579 ;;		_RF_Timeout_Counter
  9580 ;;		_setRF_TimeoutCleared
  9581 ;; This function is called by:
  9582 ;;		_CC2500_TxData
  9583 ;;		_CC2500_RxData
  9584 ;;		_CC2500_ClearTXFIFO
  9585 ;;		_CC2500_ClearRXFIFO
  9586 ;;		_CC2500_FrequencyCabr
  9587 ;;		_CC2500_SIDLEMode
  9588 ;;		_setRF_Main
  9589 ;;		_RF_RxDisable
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           
  9594                           ;psect for function _CC2500_WriteCommand
  9595  1F62                     _CC2500_WriteCommand:	
  9596                           
  9597                           ;incstack = 0
  9598                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9599                           ;CC2500_WriteCommand@command stored from wreg
  9600  1F62  0020               	movlb	0	; select bank0
  9601  1F63  00A9               	movwf	CC2500_WriteCommand@command
  9602                           
  9603                           ;CC2500_B1.c: 293: RC0 = 0;
  9604  1F64  100E               	bcf	14,0	;volatile
  9605                           
  9606                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9607  1F65  0829               	movf	CC2500_WriteCommand@command,w
  9608  1F66  00A8               	movwf	??_CC2500_WriteCommand
  9609  1F67  0828               	movf	??_CC2500_WriteCommand,w
  9610  1F68  00E6               	movwf	_SPI0Buffer
  9611                           
  9612                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9613  1F69  2F6D               	goto	l10645
  9614  1F6A                     l10643:	
  9615                           
  9616                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9617  1F6A  319E  2668  319F   	fcall	_RF_Timeout_Counter
  9618  1F6D                     l10645:	
  9619  1F6D  0020               	movlb	0	; select bank0
  9620  1F6E  1E8E               	btfss	14,5	;volatile
  9621  1F6F  2F73               	goto	l10649
  9622  1F70  0021               	movlb	1	; select bank1
  9623  1F71  1F21               	btfss	(_RF1^(0+128)+1),6
  9624  1F72  2F6A               	goto	l10643
  9625  1F73                     l10649:	
  9626                           
  9627                           ;CC2500_B1.c: 298: };
  9628                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9629  1F73  319B  23AD  319F   	fcall	_setRF_TimeoutCleared
  9630                           
  9631                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9632  1F76  319E  2640         	fcall	_CC2500_WriteByte
  9633                           
  9634                           ;CC2500_B1.c: 302: RC0 = 1;
  9635  1F78  0020               	movlb	0	; select bank0
  9636  1F79  140E               	bsf	14,0	;volatile
  9637  1F7A  0008               	return
  9638  1F7B                     __end_of_CC2500_WriteCommand:	
  9639                           
  9640                           	psect	text51
  9641  1BAD                     __ptext51:	
  9642 ;; *************** function _setRF_TimeoutCleared *****************
  9643 ;; Defined at:
  9644 ;;		line 149 in file "../src/RF_Control_B1.c"
  9645 ;; Parameters:    Size  Location     Type
  9646 ;;		None
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;		None
  9649 ;; Return value:  Size  Location     Type
  9650 ;;		None               void
  9651 ;; Registers used:
  9652 ;;		status,2
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;Total ram usage:        0 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    5
  9665 ;; This function calls:
  9666 ;;		Nothing
  9667 ;; This function is called by:
  9668 ;;		_CC2500_TxData
  9669 ;;		_CC2500_RxData
  9670 ;;		_CC2500_PowerRST
  9671 ;;		_CC2500_WriteREG
  9672 ;;		_CC2500_WriteCommand
  9673 ;;		_CC2500_ReadStatus
  9674 ;;		_CC2500_ReadREG
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           
  9679                           ;psect for function _setRF_TimeoutCleared
  9680  1BAD                     _setRF_TimeoutCleared:	
  9681                           
  9682                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9686  1BAD  0021               	movlb	1	; select bank1
  9687  1BAE  01AC               	clrf	(_RF1^(0+128)+12)
  9688  1BAF  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9689  1BB0  0008               	return
  9690  1BB1                     __end_of_setRF_TimeoutCleared:	
  9691                           
  9692                           	psect	text52
  9693  1E68                     __ptext52:	
  9694 ;; *************** function _RF_Timeout_Counter *****************
  9695 ;; Defined at:
  9696 ;;		line 141 in file "../src/RF_Control_B1.c"
  9697 ;; Parameters:    Size  Location     Type
  9698 ;;		None
  9699 ;; Auto vars:     Size  Location     Type
  9700 ;;		None
  9701 ;; Return value:  Size  Location     Type
  9702 ;;		None               void
  9703 ;; Registers used:
  9704 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;Total ram usage:        0 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    5
  9717 ;; This function calls:
  9718 ;;		Nothing
  9719 ;; This function is called by:
  9720 ;;		_CC2500_TxData
  9721 ;;		_CC2500_RxData
  9722 ;;		_CC2500_PowerRST
  9723 ;;		_CC2500_WriteREG
  9724 ;;		_CC2500_WriteCommand
  9725 ;;		_CC2500_ReadStatus
  9726 ;;		_CC2500_ReadREG
  9727 ;; This function uses a non-reentrant model
  9728 ;;
  9729                           
  9730                           
  9731                           ;psect for function _RF_Timeout_Counter
  9732  1E68                     _RF_Timeout_Counter:	
  9733                           
  9734                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9735                           
  9736                           ;incstack = 0
  9737                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9738  1E68  3001               	movlw	1
  9739  1E69  0021               	movlb	1	; select bank1
  9740  1E6A  07AC               	addwf	(_RF1^(0+128)+12),f
  9741  1E6B  3000               	movlw	0
  9742  1E6C  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9743                           
  9744                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9745  1E6D  300C               	movlw	12
  9746  1E6E  3EA0               	addlw	_RF1& (0+255)
  9747  1E6F  0086               	movwf	6
  9748  1E70  0187               	clrf	7
  9749  1E71  3F40               	moviw [0]fsr1
  9750  1E72  3AA8               	xorlw	168
  9751  1E73  1D03               	skipz
  9752  1E74  2E77               	goto	u12395
  9753  1E75  3F41               	moviw [1]fsr1
  9754  1E76  3A61               	xorlw	97
  9755  1E77                     u12395:	
  9756  1E77  1D03               	skipz
  9757  1E78  0008               	return
  9758                           
  9759                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9760  1E79  01AC               	clrf	(_RF1^(0+128)+12)
  9761  1E7A  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9762                           
  9763                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9764  1E7B  1721               	bsf	(_RF1^(0+128)+1),6
  9765  1E7C  0008               	return
  9766  1E7D                     __end_of_RF_Timeout_Counter:	
  9767                           
  9768                           	psect	text53
  9769  1E40                     __ptext53:	
  9770 ;; *************** function _CC2500_WriteByte *****************
  9771 ;; Defined at:
  9772 ;;		line 226 in file "../src/CC2500_B1.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;		None
  9775 ;; Auto vars:     Size  Location     Type
  9776 ;;  loop_a          1    7[BANK0 ] unsigned char 
  9777 ;; Return value:  Size  Location     Type
  9778 ;;		None               void
  9779 ;; Registers used:
  9780 ;;		wreg, status,2, status,0
  9781 ;; Tracked objects:
  9782 ;;		On entry : 0/0
  9783 ;;		On exit  : 0/0
  9784 ;;		Unchanged: 0/0
  9785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;Total ram usage:        2 bytes
  9791 ;; Hardware stack levels used:    1
  9792 ;; Hardware stack levels required when called:    5
  9793 ;; This function calls:
  9794 ;;		Nothing
  9795 ;; This function is called by:
  9796 ;;		_CC2500_TxData
  9797 ;;		_CC2500_RxData
  9798 ;;		_CC2500_PowerRST
  9799 ;;		_CC2500_WriteREG
  9800 ;;		_CC2500_WriteCommand
  9801 ;;		_CC2500_ReadStatus
  9802 ;;		_CC2500_ReadREG
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           
  9807                           ;psect for function _CC2500_WriteByte
  9808  1E40                     _CC2500_WriteByte:	
  9809                           
  9810                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9811                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9812                           
  9813                           ;incstack = 0
  9814                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9815  1E40  0020               	movlb	0	; select bank0
  9816  1E41  01A7               	clrf	CC2500_WriteByte@loop_a
  9817  1E42                     L5:	
  9818  1E42  3008               	movlw	8
  9819  1E43  0227               	subwf	CC2500_WriteByte@loop_a,w
  9820  1E44  1803               	btfsc	3,0
  9821  1E45  0008               	return
  9822                           
  9823                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9824  1E46  1FE6               	btfss	_SPI0Buffer,7
  9825  1E47  2E4A               	goto	l303
  9826                           
  9827                           ;CC2500_B1.c: 230: RC4 = 1;
  9828  1E48  160E               	bsf	14,4	;volatile
  9829  1E49  2E4B               	goto	l304
  9830  1E4A                     l303:	
  9831                           
  9832                           ;CC2500_B1.c: 231: else
  9833                           ;CC2500_B1.c: 232: RC4 = 0;
  9834  1E4A  120E               	bcf	14,4	;volatile
  9835  1E4B                     l304:	
  9836                           
  9837                           ;CC2500_B1.c: 233: RC3 = 1;
  9838  1E4B  158E               	bsf	14,3	;volatile
  9839                           
  9840                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9841  1E4C  1003               	clrc
  9842  1E4D  0DE6               	rlf	_SPI0Buffer,f
  9843                           
  9844                           ;CC2500_B1.c: 235: RC3 = 0;
  9845  1E4E  118E               	bcf	14,3	;volatile
  9846  1E4F  3001               	movlw	1
  9847  1E50  00A6               	movwf	??_CC2500_WriteByte
  9848  1E51  0826               	movf	??_CC2500_WriteByte,w
  9849  1E52  07A7               	addwf	CC2500_WriteByte@loop_a,f
  9850  1E53  2E42               	goto	L5
  9851  1E54                     __end_of_CC2500_WriteByte:	
  9852                           
  9853                           	psect	text54
  9854  1B8D                     __ptext54:	
  9855 ;; *************** function _RF_Initialization *****************
  9856 ;; Defined at:
  9857 ;;		line 9 in file "../src/RF_Control_B1.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;		None
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;		None
  9862 ;; Return value:  Size  Location     Type
  9863 ;;		None               void
  9864 ;; Registers used:
  9865 ;;		wreg, status,2, status,0, pclath, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;Total ram usage:        0 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    6
  9878 ;; This function calls:
  9879 ;;		_setRF_Initialization
  9880 ;; This function is called by:
  9881 ;;		_main
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           
  9886                           ;psect for function _RF_Initialization
  9887  1B8D                     _RF_Initialization:	
  9888                           
  9889                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9890                           
  9891                           ;incstack = 0
  9892                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9893  1B8D  319C  247B         	fcall	_setRF_Initialization
  9894  1B8F  0008               	return
  9895  1B90                     __end_of_RF_Initialization:	
  9896                           
  9897                           	psect	text55
  9898  1C7B                     __ptext55:	
  9899 ;; *************** function _setRF_Initialization *****************
  9900 ;; Defined at:
  9901 ;;		line 17 in file "../src/RF_Control_B1.c"
  9902 ;; Parameters:    Size  Location     Type
  9903 ;;		None
  9904 ;; Auto vars:     Size  Location     Type
  9905 ;;		None
  9906 ;; Return value:  Size  Location     Type
  9907 ;;		None               void
  9908 ;; Registers used:
  9909 ;;		wreg
  9910 ;; Tracked objects:
  9911 ;;		On entry : 0/0
  9912 ;;		On exit  : 0/0
  9913 ;;		Unchanged: 0/0
  9914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;Total ram usage:        1 bytes
  9920 ;; Hardware stack levels used:    1
  9921 ;; Hardware stack levels required when called:    5
  9922 ;; This function calls:
  9923 ;;		Nothing
  9924 ;; This function is called by:
  9925 ;;		_RF_Initialization
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           
  9930                           ;psect for function _setRF_Initialization
  9931  1C7B                     _setRF_Initialization:	
  9932                           
  9933                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9934                           
  9935                           ;incstack = 0
  9936                           ; Regs used in _setRF_Initialization: [wreg]
  9937  1C7B  3015               	movlw	21
  9938  1C7C  0020               	movlb	0	; select bank0
  9939  1C7D  00A6               	movwf	??_setRF_Initialization
  9940  1C7E  0826               	movf	??_setRF_Initialization,w
  9941  1C7F  00E8               	movwf	_Tx_Length
  9942                           
  9943                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9944  1C80  30C8               	movlw	200
  9945  1C81  0021               	movlb	1	; select bank1
  9946  1C82  00A7               	movwf	(_RF1^(0+128)+7)
  9947  1C83  3000               	movlw	0
  9948  1C84  00A8               	movwf	(_RF1^(0+128)+8)
  9949  1C85  0008               	return
  9950  1C86                     __end_of_setRF_Initialization:	
  9951                           
  9952                           	psect	text56
  9953  1DBD                     __ptext56:	
  9954 ;; *************** function _Mcu_Initialization *****************
  9955 ;; Defined at:
  9956 ;;		line 30 in file "../src/MCU_B1.c"
  9957 ;; Parameters:    Size  Location     Type
  9958 ;;		None
  9959 ;; Auto vars:     Size  Location     Type
  9960 ;;		None
  9961 ;; Return value:  Size  Location     Type
  9962 ;;		None               void
  9963 ;; Registers used:
  9964 ;;		wreg, status,2, status,0, pclath, cstack
  9965 ;; Tracked objects:
  9966 ;;		On entry : 0/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;Total ram usage:        0 bytes
  9975 ;; Hardware stack levels used:    1
  9976 ;; Hardware stack levels required when called:    6
  9977 ;; This function calls:
  9978 ;;		_ADC_Set
  9979 ;;		_Fosc_Set
  9980 ;;		_IOC_Set
  9981 ;;		_IO_Set
  9982 ;;		_TMR1_Set
  9983 ;;		_WDT_Set
  9984 ;; This function is called by:
  9985 ;;		_main
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           
  9990                           ;psect for function _Mcu_Initialization
  9991  1DBD                     _Mcu_Initialization:	
  9992                           
  9993                           ;MCU_B1.c: 32: Fosc_Set();
  9994                           
  9995                           ;incstack = 0
  9996                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9997  1DBD  319B  23A9  319D   	fcall	_Fosc_Set
  9998                           
  9999                           ;MCU_B1.c: 34: IO_Set();
 10000  1DC0  319F  27AE  319D   	fcall	_IO_Set
 10001                           
 10002                           ;MCU_B1.c: 36: ;;
 10003                           ;MCU_B1.c: 38: TMR1_Set();
 10004  1DC3  319C  24B5  319D   	fcall	_TMR1_Set
 10005                           
 10006                           ;MCU_B1.c: 40: ADC_Set();
 10007  1DC6  319B  23DA  319D   	fcall	_ADC_Set
 10008                           
 10009                           ;MCU_B1.c: 42: ;;
 10010                           ;MCU_B1.c: 44: ;;
 10011                           ;MCU_B1.c: 46: IOC_Set();
 10012  1DC9  319C  2465  319D   	fcall	_IOC_Set
 10013                           
 10014                           ;MCU_B1.c: 48: ;;
 10015                           ;MCU_B1.c: 50: ;;
 10016                           ;MCU_B1.c: 52: WDT_Set();
 10017  1DCC  319C  2470         	fcall	_WDT_Set
 10018  1DCE  0008               	return
 10019  1DCF                     __end_of_Mcu_Initialization:	
 10020                           
 10021                           	psect	text57
 10022  1C70                     __ptext57:	
 10023 ;; *************** function _WDT_Set *****************
 10024 ;; Defined at:
 10025 ;;		line 1089 in file "../src/MCU_B1.c"
 10026 ;; Parameters:    Size  Location     Type
 10027 ;;		None
 10028 ;; Auto vars:     Size  Location     Type
 10029 ;;		None
 10030 ;; Return value:  Size  Location     Type
 10031 ;;		None               void
 10032 ;; Registers used:
 10033 ;;		wreg
 10034 ;; Tracked objects:
 10035 ;;		On entry : 0/0
 10036 ;;		On exit  : 0/0
 10037 ;;		Unchanged: 0/0
 10038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;Total ram usage:        1 bytes
 10044 ;; Hardware stack levels used:    1
 10045 ;; Hardware stack levels required when called:    5
 10046 ;; This function calls:
 10047 ;;		Nothing
 10048 ;; This function is called by:
 10049 ;;		_Mcu_Initialization
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           
 10054                           ;psect for function _WDT_Set
 10055  1C70                     _WDT_Set:	
 10056                           
 10057                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10058                           
 10059                           ;incstack = 0
 10060                           ; Regs used in _WDT_Set: [wreg]
 10061  1C70  3017               	movlw	23
 10062  1C71  0021               	movlb	1	; select bank1
 10063  1C72  0097               	movwf	23	;volatile
 10064                           
 10065                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10066  1C73  1445               	bsf	_WDT^(0+128),0
 10067                           
 10068                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10069  1C74  300A               	movlw	10
 10070  1C75  0020               	movlb	0	; select bank0
 10071  1C76  00A6               	movwf	??_WDT_Set
 10072  1C77  0826               	movf	??_WDT_Set,w
 10073  1C78  0021               	movlb	1	; select bank1
 10074  1C79  00C6               	movwf	(_WDT^(0+128)+1)
 10075  1C7A  0008               	return
 10076  1C7B                     __end_of_WDT_Set:	
 10077                           
 10078                           	psect	text58
 10079  1CB5                     __ptext58:	
 10080 ;; *************** function _TMR1_Set *****************
 10081 ;; Defined at:
 10082 ;;		line 226 in file "../src/MCU_B1.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;		None
 10087 ;; Return value:  Size  Location     Type
 10088 ;;		None               void
 10089 ;; Registers used:
 10090 ;;		wreg
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;Total ram usage:        0 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; Hardware stack levels required when called:    5
 10103 ;; This function calls:
 10104 ;;		Nothing
 10105 ;; This function is called by:
 10106 ;;		_Mcu_Initialization
 10107 ;; This function uses a non-reentrant model
 10108 ;;
 10109                           
 10110                           
 10111                           ;psect for function _TMR1_Set
 10112  1CB5                     _TMR1_Set:	
 10113                           
 10114                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10115                           
 10116                           ;incstack = 0
 10117                           ; Regs used in _TMR1_Set: [wreg]
 10118  1CB5  3041               	movlw	65
 10119  1CB6  0020               	movlb	0	; select bank0
 10120  1CB7  0098               	movwf	24	;volatile
 10121                           
 10122                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10123  1CB8  30FA               	movlw	250
 10124  1CB9  0097               	movwf	23	;volatile
 10125                           
 10126                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10127  1CBA  3038               	movlw	56
 10128  1CBB  0096               	movwf	22	;volatile
 10129                           
 10130                           ;MCU_B1.c: 230: TMR1IE = 1;
 10131  1CBC  0021               	movlb	1	; select bank1
 10132  1CBD  1411               	bsf	17,0	;volatile
 10133                           
 10134                           ;MCU_B1.c: 231: PEIE = 1;
 10135  1CBE  170B               	bsf	11,6	;volatile
 10136                           
 10137                           ;MCU_B1.c: 232: GIE = 1;
 10138  1CBF  178B               	bsf	11,7	;volatile
 10139  1CC0  0008               	return
 10140  1CC1                     __end_of_TMR1_Set:	
 10141                           
 10142                           	psect	text59
 10143  1FAE                     __ptext59:	
 10144 ;; *************** function _IO_Set *****************
 10145 ;; Defined at:
 10146 ;;		line 60 in file "../src/MCU_B1.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;		None
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;		None
 10151 ;; Return value:  Size  Location     Type
 10152 ;;		None               void
 10153 ;; Registers used:
 10154 ;;		wreg, status,2
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;Total ram usage:        0 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    5
 10167 ;; This function calls:
 10168 ;;		Nothing
 10169 ;; This function is called by:
 10170 ;;		_Mcu_Initialization
 10171 ;; This function uses a non-reentrant model
 10172 ;;
 10173                           
 10174                           
 10175                           ;psect for function _IO_Set
 10176  1FAE                     _IO_Set:	
 10177                           
 10178                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10179                           
 10180                           ;incstack = 0
 10181                           ; Regs used in _IO_Set: [wreg+status,2]
 10182  1FAE  30F7               	movlw	247
 10183  1FAF  0021               	movlb	1	; select bank1
 10184  1FB0  008C               	movwf	12	;volatile
 10185                           
 10186                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10187  1FB1  3004               	movlw	4
 10188  1FB2  008D               	movwf	13	;volatile
 10189                           
 10190                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10191  1FB3  3026               	movlw	38
 10192  1FB4  008E               	movwf	14	;volatile
 10193                           
 10194                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10195  1FB5  0022               	movlb	2	; select bank2
 10196  1FB6  018C               	clrf	12	;volatile
 10197                           
 10198                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10199  1FB7  018D               	clrf	13	;volatile
 10200                           
 10201                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10202  1FB8  018E               	clrf	14	;volatile
 10203                           
 10204                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10205  1FB9  300E               	movlw	14
 10206  1FBA  0023               	movlb	3	; select bank3
 10207  1FBB  008C               	movwf	12	;volatile
 10208                           
 10209                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10210  1FBC  018D               	clrf	13	;volatile
 10211                           
 10212                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10213  1FBD  018E               	clrf	14	;volatile
 10214                           
 10215                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10216  1FBE  30F7               	movlw	247
 10217  1FBF  0020               	movlb	0	; select bank0
 10218  1FC0  008C               	movwf	12	;volatile
 10219                           
 10220                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10221  1FC1  3004               	movlw	4
 10222  1FC2  008D               	movwf	13	;volatile
 10223                           
 10224                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10225  1FC3  3026               	movlw	38
 10226  1FC4  008E               	movwf	14	;volatile
 10227                           
 10228                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10229  1FC5  0024               	movlb	4	; select bank4
 10230  1FC6  018D               	clrf	13	;volatile
 10231  1FC7  0008               	return
 10232  1FC8                     __end_of_IO_Set:	
 10233                           
 10234                           	psect	text60
 10235  1C65                     __ptext60:	
 10236 ;; *************** function _IOC_Set *****************
 10237 ;; Defined at:
 10238 ;;		line 379 in file "../src/MCU_B1.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;		None
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;		None
 10243 ;; Return value:  Size  Location     Type
 10244 ;;		None               void
 10245 ;; Registers used:
 10246 ;;		wreg, status,2
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;Total ram usage:        0 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    5
 10259 ;; This function calls:
 10260 ;;		Nothing
 10261 ;; This function is called by:
 10262 ;;		_Mcu_Initialization
 10263 ;; This function uses a non-reentrant model
 10264 ;;
 10265                           
 10266                           
 10267                           ;psect for function _IOC_Set
 10268  1C65                     _IOC_Set:	
 10269                           
 10270                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in _IOC_Set: [wreg+status,2]
 10274  1C65  3004               	movlw	4
 10275  1C66  0027               	movlb	7	; select bank7
 10276  1C67  0094               	movwf	20	;volatile
 10277                           
 10278                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10279  1C68  3004               	movlw	4
 10280  1C69  0095               	movwf	21	;volatile
 10281                           
 10282                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10283  1C6A  0196               	clrf	22	;volatile
 10284                           
 10285                           ;MCU_B1.c: 386: IOCIE = 1;
 10286  1C6B  158B               	bsf	11,3	;volatile
 10287                           
 10288                           ;MCU_B1.c: 387: IOCIF = 0;
 10289  1C6C  100B               	bcf	11,0	;volatile
 10290                           
 10291                           ;MCU_B1.c: 388: PEIE = 1;
 10292  1C6D  170B               	bsf	11,6	;volatile
 10293                           
 10294                           ;MCU_B1.c: 389: GIE = 1;
 10295  1C6E  178B               	bsf	11,7	;volatile
 10296  1C6F  0008               	return
 10297  1C70                     __end_of_IOC_Set:	
 10298                           
 10299                           	psect	text61
 10300  1BA9                     __ptext61:	
 10301 ;; *************** function _Fosc_Set *****************
 10302 ;; Defined at:
 10303 ;;		line 56 in file "../src/MCU_B1.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;		None
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;		None
 10308 ;; Return value:  Size  Location     Type
 10309 ;;		None               void
 10310 ;; Registers used:
 10311 ;;		wreg
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;Total ram usage:        0 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:    5
 10324 ;; This function calls:
 10325 ;;		Nothing
 10326 ;; This function is called by:
 10327 ;;		_Mcu_Initialization
 10328 ;; This function uses a non-reentrant model
 10329 ;;
 10330                           
 10331                           
 10332                           ;psect for function _Fosc_Set
 10333  1BA9                     _Fosc_Set:	
 10334                           
 10335                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10336                           
 10337                           ;incstack = 0
 10338                           ; Regs used in _Fosc_Set: [wreg]
 10339  1BA9  3078               	movlw	120
 10340  1BAA  0021               	movlb	1	; select bank1
 10341  1BAB  0099               	movwf	25	;volatile
 10342  1BAC  0008               	return
 10343  1BAD                     __end_of_Fosc_Set:	
 10344                           
 10345                           	psect	text62
 10346  1BDA                     __ptext62:	
 10347 ;; *************** function _ADC_Set *****************
 10348 ;; Defined at:
 10349 ;;		line 425 in file "../src/MCU_B1.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;		None
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;		None
 10354 ;; Return value:  Size  Location     Type
 10355 ;;		None               void
 10356 ;; Registers used:
 10357 ;;		wreg
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;Total ram usage:        0 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    5
 10370 ;; This function calls:
 10371 ;;		Nothing
 10372 ;; This function is called by:
 10373 ;;		_Mcu_Initialization
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           
 10378                           ;psect for function _ADC_Set
 10379  1BDA                     _ADC_Set:	
 10380                           
 10381                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10382                           
 10383                           ;incstack = 0
 10384                           ; Regs used in _ADC_Set: [wreg]
 10385  1BDA  30F3               	movlw	243
 10386  1BDB  0021               	movlb	1	; select bank1
 10387  1BDC  009E               	movwf	30	;volatile
 10388                           
 10389                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10390  1BDD  30C1               	movlw	193
 10391  1BDE  0022               	movlb	2	; select bank2
 10392  1BDF  0097               	movwf	23	;volatile
 10393  1BE0  0008               	return
 10394  1BE1                     __end_of_ADC_Set:	
 10395                           
 10396                           	psect	text63
 10397  0051                     __ptext63:	
 10398 ;; *************** function _Load_Main *****************
 10399 ;; Defined at:
 10400 ;;		line 39 in file "../src/OverLoad_B1.c"
 10401 ;; Parameters:    Size  Location     Type
 10402 ;;		None
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;  i               2   22[BANK0 ] int 
 10405 ;;  LightsCount     1   21[BANK0 ] unsigned char 
 10406 ;;  Load_RunStat    1   20[BANK0 ] unsigned char 
 10407 ;;  ErrorCountVa    1   19[BANK0 ] unsigned char 
 10408 ;;  error           1   16[BANK0 ] unsigned char 
 10409 ;; Return value:  Size  Location     Type
 10410 ;;		None               void
 10411 ;; Registers used:
 10412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10419 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;Total ram usage:       10 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    6
 10425 ;; This function calls:
 10426 ;;		___lwdiv
 10427 ;;		___wmul
 10428 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10429 ;;		_getDimmer_LoadGO
 10430 ;;		_getDimmer_Load_Status
 10431 ;;		_getMain_All_Error_Status
 10432 ;;		_getMain_All_LightsStatus
 10433 ;;		_getMain_Lights_Count
 10434 ;;		_setLoad_AH_AL_Restore
 10435 ;; This function is called by:
 10436 ;;		_main
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _Load_Main
 10442  0051                     _Load_Main:	
 10443                           
 10444                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10448  0051  3000               	movlw	0
 10449  0052  3191  21D8  3180   	fcall	_getMain_All_Error_Status
 10450  0055  0020               	movlb	0	; select bank0
 10451  0056  00AE               	movwf	??_Load_Main
 10452  0057  082E               	movf	??_Load_Main,w
 10453  0058  00B0               	movwf	Load_Main@error
 10454                           
 10455                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10456  0059  01B4               	clrf	Load_Main@Load_RunStatus
 10457  005A  01B3               	clrf	Load_Main@ErrorCountValue
 10458  005B  01B5               	clrf	Load_Main@LightsCount
 10459                           
 10460                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10461  005C  0022               	movlb	2	; select bank2
 10462  005D  1C35               	btfss	_Load^(0+256),0
 10463  005E  29FD               	goto	l1607
 10464                           
 10465                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10466  005F  319C  2424  3180   	fcall	_getMain_All_LightsStatus
 10467  0062  3800               	iorlw	0
 10468  0063  1D03               	skipz
 10469  0064  2867               	goto	l11759
 10470                           
 10471                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10472  0065  0022               	movlb	2	; select bank2
 10473  0066  2888               	goto	l11777
 10474  0067                     l11759:	
 10475                           ;OverLoad_B1.c: 46: } else {
 10476                           
 10477                           
 10478                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10479  0067  0020               	movlb	0	; select bank0
 10480  0068  08B0               	movf	Load_Main@error,f
 10481  0069  1D03               	skipz
 10482  006A  2885               	goto	l1610
 10483  006B  319D  25F4  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10484  006E  3800               	iorlw	0
 10485  006F  1D03               	skipz
 10486  0070  2885               	goto	l1610
 10487                           
 10488                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10489  0071  0022               	movlb	2	; select bank2
 10490  0072  14B5               	bsf	_Load^(0+256),1
 10491                           
 10492                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10493  0073  319B  23F0  3180   	fcall	_getDimmer_LoadGO
 10494  0076  3A01               	xorlw	1
 10495  0077  1D03               	skipz
 10496  0078  2880               	goto	l1611
 10497                           
 10498                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10499  0079  0022               	movlb	2	; select bank2
 10500  007A  1DB5               	btfss	_Load^(0+256),3
 10501  007B  1BB5               	btfsc	_Load^(0+256),7
 10502  007C  2889               	goto	l1609
 10503                           
 10504                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10505  007D  15B5               	bsf	_Load^(0+256),3
 10506                           
 10507                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10508  007E  01DA               	clrf	(_Load^(0+256)+37)
 10509                           
 10510                           ;OverLoad_B1.c: 56: }
 10511                           ;OverLoad_B1.c: 57: } else {
 10512  007F  2889               	goto	l1609
 10513  0080                     l1611:	
 10514                           
 10515                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10516  0080  0022               	movlb	2	; select bank2
 10517  0081  1FB5               	btfss	_Load^(0+256),7
 10518  0082  2889               	goto	l1609
 10519                           
 10520                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10521  0083  13B5               	bcf	_Load^(0+256),7
 10522                           
 10523                           ;OverLoad_B1.c: 60: }
 10524                           ;OverLoad_B1.c: 61: }
 10525                           ;OverLoad_B1.c: 62: } else {
 10526  0084  2889               	goto	l1609
 10527  0085                     l1610:	
 10528                           
 10529                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10530  0085  0022               	movlb	2	; select bank2
 10531  0086  1CB5               	btfss	_Load^(0+256),1
 10532  0087  2889               	goto	l1609
 10533  0088                     l11777:	
 10534                           
 10535                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10536  0088  10B5               	bcf	_Load^(0+256),1
 10537  0089                     l1609:	
 10538                           
 10539                           ;OverLoad_B1.c: 65: }
 10540                           ;OverLoad_B1.c: 66: }
 10541                           ;OverLoad_B1.c: 88: }
 10542                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10543  0089  1CB5               	btfss	_Load^(0+256),1
 10544  008A  29D9               	goto	l1617
 10545                           
 10546                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10547  008B  1535               	bsf	_Load^(0+256),2
 10548                           
 10549                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10550  008C  1E35               	btfss	_Load^(0+256),4
 10551  008D  29D7               	goto	l1618
 10552                           
 10553                           ;OverLoad_B1.c: 95: Load.Time++;
 10554  008E  3001               	movlw	1
 10555  008F  07B6               	addwf	(_Load^(0+256)+1),f
 10556  0090  3000               	movlw	0
 10557  0091  3DB7               	addwfc	((_Load+1)^(0+256)+1),f
 10558                           
 10559                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10560  0092  3000               	movlw	0
 10561  0093  0237               	subwf	((_Load+1)^(0+256)+1),w
 10562  0094  3002               	movlw	2
 10563  0095  1903               	skipnz
 10564  0096  0236               	subwf	(_Load^(0+256)+1),w
 10565  0097  1C03               	skipc
 10566  0098  0008               	return
 10567                           
 10568                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10569  0099  01B6               	clrf	(_Load^(0+256)+1)
 10570  009A  01B7               	clrf	((_Load+1)^(0+256)+1)
 10571                           
 10572                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10573  009B  1235               	bcf	_Load^(0+256),4
 10574                           
 10575                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10576  009C  3001               	movlw	1
 10577  009D  0020               	movlb	0	; select bank0
 10578  009E  00B6               	movwf	Load_Main@i
 10579  009F  3000               	movlw	0
 10580  00A0  00B7               	movwf	Load_Main@i+1
 10581  00A1  0837               	movf	Load_Main@i+1,w
 10582  00A2  3A80               	xorlw	128
 10583  00A3  00AE               	movwf	??_Load_Main
 10584  00A4  3080               	movlw	128
 10585  00A5  022E               	subwf	??_Load_Main,w
 10586  00A6  1D03               	skipz
 10587  00A7  28AA               	goto	u14515
 10588  00A8  3004               	movlw	4
 10589  00A9  0236               	subwf	Load_Main@i,w
 10590  00AA                     u14515:	
 10591  00AA  1803               	btfsc	3,0
 10592  00AB  28DE               	goto	l11799
 10593  00AC                     l11793:	
 10594                           
 10595                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10596  00AC  0020               	movlb	0	; select bank0
 10597  00AD  3536               	lslf	Load_Main@i,w
 10598  00AE  3E40               	addlw	(_Load+11)& (0+255)
 10599  00AF  0086               	movwf	6
 10600  00B0  3001               	movlw	1	; select bank2/3
 10601  00B1  0087               	movwf	7
 10602  00B2  3F40               	moviw [0]fsr1
 10603  00B3  00AE               	movwf	??_Load_Main
 10604  00B4  3F41               	moviw [1]fsr1
 10605  00B5  00AF               	movwf	??_Load_Main+1
 10606  00B6  082E               	movf	??_Load_Main,w
 10607  00B7  0022               	movlb	2	; select bank2
 10608  00B8  07BA               	addwf	(_Load^(0+256)+5),f
 10609  00B9  0020               	movlb	0	; select bank0
 10610  00BA  082F               	movf	??_Load_Main+1,w
 10611  00BB  0022               	movlb	2	; select bank2
 10612  00BC  3DBB               	addwfc	((_Load+1)^(0+256)+5),f
 10613                           
 10614                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10615  00BD  0020               	movlb	0	; select bank0
 10616  00BE  3536               	lslf	Load_Main@i,w
 10617  00BF  3E4A               	addlw	(_Load+21)& (0+255)
 10618  00C0  0086               	movwf	6
 10619  00C1  3001               	movlw	1	; select bank2/3
 10620  00C2  0087               	movwf	7
 10621  00C3  3F40               	moviw [0]fsr1
 10622  00C4  00AE               	movwf	??_Load_Main
 10623  00C5  3F41               	moviw [1]fsr1
 10624  00C6  00AF               	movwf	??_Load_Main+1
 10625  00C7  082E               	movf	??_Load_Main,w
 10626  00C8  0022               	movlb	2	; select bank2
 10627  00C9  07BC               	addwf	(_Load^(0+256)+7),f
 10628  00CA  0020               	movlb	0	; select bank0
 10629  00CB  082F               	movf	??_Load_Main+1,w
 10630  00CC  0022               	movlb	2	; select bank2
 10631  00CD  3DBD               	addwfc	((_Load+1)^(0+256)+7),f
 10632  00CE  3001               	movlw	1
 10633  00CF  0020               	movlb	0	; select bank0
 10634  00D0  07B6               	addwf	Load_Main@i,f
 10635  00D1  3000               	movlw	0
 10636  00D2  3DB7               	addwfc	Load_Main@i+1,f
 10637  00D3  0837               	movf	Load_Main@i+1,w
 10638  00D4  3A80               	xorlw	128
 10639  00D5  00AE               	movwf	??_Load_Main
 10640  00D6  3080               	movlw	128
 10641  00D7  022E               	subwf	??_Load_Main,w
 10642  00D8  1D03               	skipz
 10643  00D9  28DC               	goto	u14525
 10644  00DA  3004               	movlw	4
 10645  00DB  0236               	subwf	Load_Main@i,w
 10646  00DC                     u14525:	
 10647  00DC  1C03               	skipc
 10648  00DD  28AC               	goto	l11793
 10649  00DE                     l11799:	
 10650                           
 10651                           ;OverLoad_B1.c: 103: }
 10652                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10653  00DE  3003               	movlw	3
 10654  00DF  0020               	movlb	0	; select bank0
 10655  00E0  00A6               	movwf	___lwdiv@divisor
 10656  00E1  3000               	movlw	0
 10657  00E2  00A7               	movwf	___lwdiv@divisor+1
 10658  00E3  0022               	movlb	2	; select bank2
 10659  00E4  083B               	movf	((_Load+1)^(0+256)+5),w
 10660  00E5  0020               	movlb	0	; select bank0
 10661  00E6  01A9               	clrf	___lwdiv@dividend+1
 10662  00E7  07A9               	addwf	___lwdiv@dividend+1,f
 10663  00E8  0022               	movlb	2	; select bank2
 10664  00E9  083A               	movf	(_Load^(0+256)+5),w
 10665  00EA  0020               	movlb	0	; select bank0
 10666  00EB  01A8               	clrf	___lwdiv@dividend
 10667  00EC  07A8               	addwf	___lwdiv@dividend,f
 10668  00ED  3192  22DE  3180   	fcall	___lwdiv
 10669  00F0  0020               	movlb	0	; select bank0
 10670  00F1  0827               	movf	?___lwdiv+1,w
 10671  00F2  0022               	movlb	2	; select bank2
 10672  00F3  01BB               	clrf	((_Load+1)^(0+256)+5)
 10673  00F4  07BB               	addwf	((_Load+1)^(0+256)+5),f
 10674  00F5  0020               	movlb	0	; select bank0
 10675  00F6  0826               	movf	?___lwdiv,w
 10676  00F7  0022               	movlb	2	; select bank2
 10677  00F8  01BA               	clrf	(_Load^(0+256)+5)
 10678  00F9  07BA               	addwf	(_Load^(0+256)+5),f
 10679                           
 10680                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10681  00FA  3003               	movlw	3
 10682  00FB  0020               	movlb	0	; select bank0
 10683  00FC  00A6               	movwf	___lwdiv@divisor
 10684  00FD  3000               	movlw	0
 10685  00FE  00A7               	movwf	___lwdiv@divisor+1
 10686  00FF  0022               	movlb	2	; select bank2
 10687  0100  083D               	movf	((_Load+1)^(0+256)+7),w
 10688  0101  0020               	movlb	0	; select bank0
 10689  0102  01A9               	clrf	___lwdiv@dividend+1
 10690  0103  07A9               	addwf	___lwdiv@dividend+1,f
 10691  0104  0022               	movlb	2	; select bank2
 10692  0105  083C               	movf	(_Load^(0+256)+7),w
 10693  0106  0020               	movlb	0	; select bank0
 10694  0107  01A8               	clrf	___lwdiv@dividend
 10695  0108  07A8               	addwf	___lwdiv@dividend,f
 10696  0109  3192  22DE  3180   	fcall	___lwdiv
 10697  010C  0020               	movlb	0	; select bank0
 10698  010D  0827               	movf	?___lwdiv+1,w
 10699  010E  0022               	movlb	2	; select bank2
 10700  010F  01BD               	clrf	((_Load+1)^(0+256)+7)
 10701  0110  07BD               	addwf	((_Load+1)^(0+256)+7),f
 10702  0111  0020               	movlb	0	; select bank0
 10703  0112  0826               	movf	?___lwdiv,w
 10704  0113  0022               	movlb	2	; select bank2
 10705  0114  01BC               	clrf	(_Load^(0+256)+7)
 10706  0115  07BC               	addwf	(_Load^(0+256)+7),f
 10707                           
 10708                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10709  0116  319F  27E4  3180   	fcall	_setLoad_AH_AL_Restore
 10710                           
 10711                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10712  0119  0022               	movlb	2	; select bank2
 10713  011A  083D               	movf	((_Load+1)^(0+256)+7),w
 10714  011B  023B               	subwf	((_Load+1)^(0+256)+5),w
 10715  011C  1D03               	skipz
 10716  011D  2920               	goto	u14535
 10717  011E  083C               	movf	(_Load^(0+256)+7),w
 10718  011F  023A               	subwf	(_Load^(0+256)+5),w
 10719  0120                     u14535:	
 10720  0120  1C03               	skipc
 10721  0121  0008               	return
 10722                           
 10723                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10724  0122  3005               	movlw	5
 10725  0123  3E35               	addlw	_Load& (0+255)
 10726  0124  0086               	movwf	6
 10727  0125  3001               	movlw	1	; select bank2/3
 10728  0126  0087               	movwf	7
 10729  0127  093C               	comf	(_Load^(0+256)+7),w
 10730  0128  0020               	movlb	0	; select bank0
 10731  0129  00AE               	movwf	??_Load_Main
 10732  012A  0022               	movlb	2	; select bank2
 10733  012B  093D               	comf	((_Load+1)^(0+256)+7),w
 10734  012C  0020               	movlb	0	; select bank0
 10735  012D  00AF               	movwf	??_Load_Main+1
 10736  012E  0AAE               	incf	??_Load_Main,f
 10737  012F  1903               	skipnz
 10738  0130  0AAF               	incf	??_Load_Main+1,f
 10739  0131  3F40               	moviw [0]fsr1
 10740  0132  072E               	addwf	??_Load_Main,w
 10741  0133  0022               	movlb	2	; select bank2
 10742  0134  00D4               	movwf	(_Load^(0+256)+31)
 10743  0135  3F41               	moviw [1]fsr1
 10744  0136  0020               	movlb	0	; select bank0
 10745  0137  3D2F               	addwfc	??_Load_Main+1,w
 10746  0138  0022               	movlb	2	; select bank2
 10747  0139  00D5               	movwf	(_Load^(0+256)+32)
 10748                           
 10749                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10750  013A  01BA               	clrf	(_Load^(0+256)+5)
 10751  013B  01BB               	clrf	((_Load+1)^(0+256)+5)
 10752                           
 10753                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10754  013C  01BC               	clrf	(_Load^(0+256)+7)
 10755  013D  01BD               	clrf	((_Load+1)^(0+256)+7)
 10756                           
 10757                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10758  013E  1DB5               	btfss	_Load^(0+256),3
 10759  013F  2999               	goto	l11839
 10760                           
 10761                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10762  0140  3002               	movlw	2
 10763  0141  025A               	subwf	(_Load^(0+256)+37),w
 10764  0142  1803               	skipnc
 10765  0143  2999               	goto	l11839
 10766                           
 10767                           ;OverLoad_B1.c: 115: Load.Count++;
 10768  0144  3001               	movlw	1
 10769  0145  0020               	movlb	0	; select bank0
 10770  0146  00AE               	movwf	??_Load_Main
 10771  0147  082E               	movf	??_Load_Main,w
 10772  0148  0022               	movlb	2	; select bank2
 10773  0149  07DA               	addwf	(_Load^(0+256)+37),f
 10774                           
 10775                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10776  014A  319B  23F8  3180   	fcall	_getDimmer_Load_Status
 10777  014D  0020               	movlb	0	; select bank0
 10778  014E  00AE               	movwf	??_Load_Main
 10779  014F  082E               	movf	??_Load_Main,w
 10780  0150  00B4               	movwf	Load_Main@Load_RunStatus
 10781                           
 10782                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10783  0151  319C  245A  3180   	fcall	_getMain_Lights_Count
 10784  0154  0020               	movlb	0	; select bank0
 10785  0155  00AE               	movwf	??_Load_Main
 10786  0156  082E               	movf	??_Load_Main,w
 10787  0157  00B5               	movwf	Load_Main@LightsCount
 10788                           
 10789                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10790  0158  0022               	movlb	2	; select bank2
 10791  0159  085A               	movf	(_Load^(0+256)+37),w
 10792  015A  3A01               	xorlw	1
 10793  015B  1D03               	skipz
 10794  015C  2961               	goto	l11825
 10795                           
 10796                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10797  015D  3074               	movlw	116
 10798  015E  00D8               	movwf	(_Load^(0+256)+35)
 10799  015F  3004               	movlw	4
 10800  0160  296E               	goto	L6
 10801  0161                     l11825:	
 10802                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10803                           
 10804  0161  085A               	movf	(_Load^(0+256)+37),w
 10805  0162  3A02               	xorlw	2
 10806  0163  1D03               	skipz
 10807  0164  2999               	goto	l11839
 10808                           
 10809                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10810  0165  0020               	movlb	0	; select bank0
 10811  0166  0835               	movf	Load_Main@LightsCount,w
 10812  0167  3A01               	xorlw	1
 10813  0168  1D03               	skipz
 10814  0169  2970               	goto	l11831
 10815                           
 10816                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.8*57);
 10817  016A  3066               	movlw	102
 10818  016B  0022               	movlb	2	; select bank2
 10819  016C  00D8               	movwf	(_Load^(0+256)+35)
 10820  016D  3000               	movlw	0
 10821  016E                     L6:	
 10822  016E  00D9               	movwf	(_Load^(0+256)+36)
 10823                           
 10824                           ;OverLoad_B1.c: 130: } else {
 10825  016F  2999               	goto	l11839
 10826  0170                     l11831:	
 10827                           
 10828                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10829  0170  0020               	movlb	0	; select bank0
 10830  0171  08B4               	movf	Load_Main@Load_RunStatus,f
 10831  0172  1D03               	skipz
 10832  0173  298D               	goto	l11835
 10833                           
 10834                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.8*57) * LightsCount;
 10835  0174  0835               	movf	Load_Main@LightsCount,w
 10836  0175  00AE               	movwf	??_Load_Main
 10837  0176  01AF               	clrf	??_Load_Main+1
 10838  0177  082E               	movf	??_Load_Main,w
 10839  0178  00A6               	movwf	___wmul@multiplier
 10840  0179  082F               	movf	??_Load_Main+1,w
 10841  017A  00A7               	movwf	___wmul@multiplier+1
 10842  017B  3066               	movlw	102
 10843  017C  00A8               	movwf	___wmul@multiplicand
 10844  017D  3000               	movlw	0
 10845  017E  00A9               	movwf	___wmul@multiplicand+1
 10846  017F  3190  2005  3180   	fcall	___wmul
 10847  0182  0020               	movlb	0	; select bank0
 10848  0183  0827               	movf	?___wmul+1,w
 10849  0184  0022               	movlb	2	; select bank2
 10850  0185  01D9               	clrf	((_Load+1)^(0+256)+35)
 10851  0186  07D9               	addwf	((_Load+1)^(0+256)+35),f
 10852  0187  0020               	movlb	0	; select bank0
 10853  0188  0826               	movf	?___wmul,w
 10854  0189  0022               	movlb	2	; select bank2
 10855  018A  01D8               	clrf	(_Load^(0+256)+35)
 10856  018B  07D8               	addwf	(_Load^(0+256)+35),f
 10857                           
 10858                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10859  018C  2999               	goto	l11839
 10860  018D                     l11835:	
 10861  018D  0020               	movlb	0	; select bank0
 10862  018E  0834               	movf	Load_Main@Load_RunStatus,w
 10863  018F  3A01               	xorlw	1
 10864  0190  1D03               	skipz
 10865  0191  2999               	goto	l11839
 10866                           
 10867                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10868  0192  0022               	movlb	2	; select bank2
 10869  0193  083E               	movf	(_Load^(0+256)+9),w
 10870  0194  3E66               	addlw	102
 10871  0195  00D8               	movwf	(_Load^(0+256)+35)
 10872  0196  3000               	movlw	0
 10873  0197  3D3F               	addwfc	((_Load+1)^(0+256)+9),w
 10874  0198  00D9               	movwf	((_Load+1)^(0+256)+35)
 10875  0199                     l11839:	
 10876                           
 10877                           ;OverLoad_B1.c: 135: }
 10878                           ;OverLoad_B1.c: 136: }
 10879                           ;OverLoad_B1.c: 137: }
 10880                           ;OverLoad_B1.c: 138: }
 10881                           ;OverLoad_B1.c: 139: }
 10882                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10883  0199  0022               	movlb	2	; select bank2
 10884  019A  0859               	movf	((_Load+1)^(0+256)+35),w
 10885  019B  0255               	subwf	((_Load+1)^(0+256)+31),w
 10886  019C  1D03               	skipz
 10887  019D  29A0               	goto	u14615
 10888  019E  0858               	movf	(_Load^(0+256)+35),w
 10889  019F  0254               	subwf	(_Load^(0+256)+31),w
 10890  01A0                     u14615:	
 10891  01A0  1C03               	skipc
 10892  01A1  29BF               	goto	l11855
 10893                           
 10894                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10895  01A2  0020               	movlb	0	; select bank0
 10896  01A3  0835               	movf	Load_Main@LightsCount,w
 10897  01A4  3A01               	xorlw	1
 10898  01A5  1903               	skipnz
 10899  01A6  29A9               	goto	l11845
 10900  01A7  3003               	movlw	3
 10901  01A8  29AA               	goto	L7
 10902  01A9                     l11845:	
 10903  01A9  3002               	movlw	2
 10904  01AA                     L7:	
 10905  01AA  00B1               	movwf	_Load_Main$3870
 10906  01AB  3000               	movlw	0
 10907  01AC  00B2               	movwf	_Load_Main$3870+1
 10908  01AD  0831               	movf	_Load_Main$3870,w
 10909  01AE  00AE               	movwf	??_Load_Main
 10910  01AF  082E               	movf	??_Load_Main,w
 10911  01B0  00B3               	movwf	Load_Main@ErrorCountValue
 10912                           
 10913                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10914  01B1  3001               	movlw	1
 10915  01B2  00AE               	movwf	??_Load_Main
 10916  01B3  082E               	movf	??_Load_Main,w
 10917  01B4  0022               	movlb	2	; select bank2
 10918  01B5  07DB               	addwf	(_Load^(0+256)+38),f
 10919                           
 10920                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10921  01B6  085B               	movf	(_Load^(0+256)+38),w
 10922  01B7  0020               	movlb	0	; select bank0
 10923  01B8  0233               	subwf	Load_Main@ErrorCountValue,w
 10924  01B9  1803               	skipnc
 10925  01BA  0008               	return
 10926                           
 10927                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10928  01BB  0022               	movlb	2	; select bank2
 10929  01BC  01DB               	clrf	(_Load^(0+256)+38)
 10930                           
 10931                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10932  01BD  16B5               	bsf	_Load^(0+256),5
 10933                           
 10934                           ;OverLoad_B1.c: 168: }
 10935                           ;OverLoad_B1.c: 169: } else {
 10936  01BE  0008               	return
 10937  01BF                     l11855:	
 10938                           
 10939                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10940  01BF  01DB               	clrf	(_Load^(0+256)+38)
 10941                           
 10942                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10943  01C0  1DB5               	btfss	_Load^(0+256),3
 10944  01C1  0008               	return
 10945                           
 10946                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10947  01C2  3001               	movlw	1
 10948  01C3  0020               	movlb	0	; select bank0
 10949  01C4  00AE               	movwf	??_Load_Main
 10950  01C5  082E               	movf	??_Load_Main,w
 10951  01C6  0022               	movlb	2	; select bank2
 10952  01C7  07DC               	addwf	(_Load^(0+256)+39),f
 10953                           
 10954                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10955  01C8  3003               	movlw	3
 10956  01C9  025C               	subwf	(_Load^(0+256)+39),w
 10957  01CA  1C03               	skipc
 10958  01CB  0008               	return
 10959                           
 10960                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10961  01CC  01DC               	clrf	(_Load^(0+256)+39)
 10962                           
 10963                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10964  01CD  17B5               	bsf	_Load^(0+256),7
 10965                           
 10966                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10967  01CE  11B5               	bcf	_Load^(0+256),3
 10968                           
 10969                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10970  01CF  01DA               	clrf	(_Load^(0+256)+37)
 10971                           
 10972                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10973  01D0  0855               	movf	((_Load+1)^(0+256)+31),w
 10974  01D1  01BF               	clrf	((_Load+1)^(0+256)+9)
 10975  01D2  07BF               	addwf	((_Load+1)^(0+256)+9),f
 10976  01D3  0854               	movf	(_Load^(0+256)+31),w
 10977  01D4  01BE               	clrf	(_Load^(0+256)+9)
 10978  01D5  07BE               	addwf	(_Load^(0+256)+9),f
 10979                           
 10980                           ;OverLoad_B1.c: 182: }
 10981                           ;OverLoad_B1.c: 183: }
 10982                           ;OverLoad_B1.c: 206: }
 10983                           ;OverLoad_B1.c: 207: }
 10984                           ;OverLoad_B1.c: 208: }
 10985                           ;OverLoad_B1.c: 209: } else {
 10986  01D6  0008               	return
 10987  01D7                     l1618:	
 10988                           
 10989                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10990  01D7  1635               	bsf	_Load^(0+256),4
 10991                           
 10992                           ;OverLoad_B1.c: 211: }
 10993                           ;OverLoad_B1.c: 212: } else {
 10994  01D8  0008               	return
 10995  01D9                     l1617:	
 10996                           
 10997                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10998  01D9  1D35               	btfss	_Load^(0+256),2
 10999  01DA  29EC               	goto	l11891
 11000                           
 11001                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11002  01DB  1135               	bcf	_Load^(0+256),2
 11003                           
 11004                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11005  01DC  1235               	bcf	_Load^(0+256),4
 11006                           
 11007                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11008  01DD  01B6               	clrf	(_Load^(0+256)+1)
 11009  01DE  01B7               	clrf	((_Load+1)^(0+256)+1)
 11010                           
 11011                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11012  01DF  319F  27E4  3180   	fcall	_setLoad_AH_AL_Restore
 11013                           
 11014                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11015  01E2  0022               	movlb	2	; select bank2
 11016  01E3  01DB               	clrf	(_Load^(0+256)+38)
 11017                           
 11018                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11019  01E4  01DC               	clrf	(_Load^(0+256)+39)
 11020                           
 11021                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11022  01E5  01BA               	clrf	(_Load^(0+256)+5)
 11023  01E6  01BB               	clrf	((_Load+1)^(0+256)+5)
 11024                           
 11025                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11026  01E7  01BC               	clrf	(_Load^(0+256)+7)
 11027  01E8  01BD               	clrf	((_Load+1)^(0+256)+7)
 11028                           
 11029                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11030  01E9  11B5               	bcf	_Load^(0+256),3
 11031                           
 11032                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11033  01EA  01DA               	clrf	(_Load^(0+256)+37)
 11034                           
 11035                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11036  01EB  13B5               	bcf	_Load^(0+256),7
 11037  01EC                     l11891:	
 11038                           
 11039                           ;OverLoad_B1.c: 255: }
 11040                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11041  01EC  1EB5               	btfss	_Load^(0+256),5
 11042  01ED  0008               	return
 11043                           
 11044                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11045  01EE  3001               	movlw	1
 11046  01EF  07B8               	addwf	(_Load^(0+256)+3),f
 11047  01F0  3000               	movlw	0
 11048  01F1  3DB9               	addwfc	((_Load+1)^(0+256)+3),f
 11049                           
 11050                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11051  01F2  3001               	movlw	1
 11052  01F3  0239               	subwf	((_Load+1)^(0+256)+3),w
 11053  01F4  30F4               	movlw	244
 11054  01F5  1903               	skipnz
 11055  01F6  0238               	subwf	(_Load^(0+256)+3),w
 11056  01F7  1C03               	skipc
 11057  01F8  0008               	return
 11058                           
 11059                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11060  01F9  01B8               	clrf	(_Load^(0+256)+3)
 11061  01FA  01B9               	clrf	((_Load+1)^(0+256)+3)
 11062                           
 11063                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11064  01FB  12B5               	bcf	_Load^(0+256),5
 11065                           
 11066                           ;OverLoad_B1.c: 261: }
 11067                           ;OverLoad_B1.c: 262: }
 11068                           ;OverLoad_B1.c: 263: }
 11069                           ;OverLoad_B1.c: 264: } else {
 11070  01FC  0008               	return
 11071  01FD                     l1607:	
 11072                           
 11073                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11074  01FD  1C20               	btfss	_myMain^(0+256),0
 11075  01FE  0008               	return
 11076                           
 11077                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11078  01FF  1435               	bsf	_Load^(0+256),0
 11079  0200  0008               	return
 11080  0201                     __end_of_Load_Main:	
 11081                           
 11082                           	psect	text64
 11083  1C5A                     __ptext64:	
 11084 ;; *************** function _getMain_Lights_Count *****************
 11085 ;; Defined at:
 11086 ;;		line 459 in file "../src/Main_B1.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;		None
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  status1         1    7[BANK0 ] unsigned char 
 11091 ;;  count           1    6[BANK0 ] unsigned char 
 11092 ;; Return value:  Size  Location     Type
 11093 ;;                  1    wreg      unsigned char 
 11094 ;; Registers used:
 11095 ;;		wreg, status,2
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;Total ram usage:        2 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    5
 11108 ;; This function calls:
 11109 ;;		Nothing
 11110 ;; This function is called by:
 11111 ;;		_Load_Main
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115                           
 11116                           ;psect for function _getMain_Lights_Count
 11117  1C5A                     _getMain_Lights_Count:	
 11118                           
 11119                           ;Main_B1.c: 460: char count = 0;
 11120                           
 11121                           ;incstack = 0
 11122                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11123  1C5A  0020               	movlb	0	; select bank0
 11124  1C5B  01A6               	clrf	getMain_Lights_Count@count
 11125                           
 11126                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11127  1C5C  3000               	movlw	0
 11128  1C5D  0021               	movlb	1	; select bank1
 11129  1C5E  19BA               	btfsc	_DimmerIntr1^(0+128),3
 11130  1C5F  3001               	movlw	1
 11131  1C60  0020               	movlb	0	; select bank0
 11132  1C61  00A7               	movwf	getMain_Lights_Count@status1
 11133                           
 11134                           ;Main_B1.c: 487: return count = status1;
 11135  1C62  0827               	movf	getMain_Lights_Count@status1,w
 11136  1C63  00A6               	movwf	getMain_Lights_Count@count
 11137  1C64  0008               	return
 11138  1C65                     __end_of_getMain_Lights_Count:	
 11139                           
 11140                           	psect	text65
 11141  1BF8                     __ptext65:	
 11142 ;; *************** function _getDimmer_Load_Status *****************
 11143 ;; Defined at:
 11144 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;		None
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  status          1    6[BANK0 ] unsigned char 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      unsigned char 
 11151 ;; Registers used:
 11152 ;;		wreg, status,2
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;Total ram usage:        1 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    5
 11165 ;; This function calls:
 11166 ;;		Nothing
 11167 ;; This function is called by:
 11168 ;;		_Load_Main
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           
 11173                           ;psect for function _getDimmer_Load_Status
 11174  1BF8                     _getDimmer_Load_Status:	
 11175                           
 11176                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11177                           
 11178                           ;incstack = 0
 11179                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11180  1BF8  3000               	movlw	0
 11181  1BF9  0022               	movlb	2	; select bank2
 11182  1BFA  192D               	btfsc	_Dimmer^(0+256),2
 11183  1BFB  3001               	movlw	1
 11184  1BFC  0020               	movlb	0	; select bank0
 11185  1BFD  00A6               	movwf	getDimmer_Load_Status@status
 11186                           
 11187                           ;Dimmer_B1.c: 1086: return status;
 11188  1BFE  0826               	movf	getDimmer_Load_Status@status,w
 11189  1BFF  0008               	return
 11190  1C00                     __end_of_getDimmer_Load_Status:	
 11191                           
 11192                           	psect	text66
 11193  1BF0                     __ptext66:	
 11194 ;; *************** function _getDimmer_LoadGO *****************
 11195 ;; Defined at:
 11196 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;		None
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;  loadgo          1    6[BANK0 ] unsigned char 
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  1    wreg      unsigned char 
 11203 ;; Registers used:
 11204 ;;		wreg, status,2
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;Total ram usage:        1 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; Hardware stack levels required when called:    5
 11217 ;; This function calls:
 11218 ;;		Nothing
 11219 ;; This function is called by:
 11220 ;;		_Load_Main
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           
 11225                           ;psect for function _getDimmer_LoadGO
 11226  1BF0                     _getDimmer_LoadGO:	
 11227                           
 11228                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11229                           
 11230                           ;incstack = 0
 11231                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11232  1BF0  3000               	movlw	0
 11233  1BF1  0022               	movlb	2	; select bank2
 11234  1BF2  18AD               	btfsc	_Dimmer^(0+256),1
 11235  1BF3  3001               	movlw	1
 11236  1BF4  0020               	movlb	0	; select bank0
 11237  1BF5  00A6               	movwf	getDimmer_LoadGO@loadgo
 11238                           
 11239                           ;Dimmer_B1.c: 1080: return loadgo;
 11240  1BF6  0826               	movf	getDimmer_LoadGO@loadgo,w
 11241  1BF7  0008               	return
 11242  1BF8                     __end_of_getDimmer_LoadGO:	
 11243                           
 11244                           	psect	text67
 11245  1DF4                     __ptext67:	
 11246 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11247 ;; Defined at:
 11248 ;;		line 242 in file "../src/Dimmer_B1.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;		None
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  status          1    6[BANK0 ] unsigned char 
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      unsigned char 
 11255 ;; Registers used:
 11256 ;;		wreg, status,2, status,0
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;Total ram usage:        1 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    5
 11269 ;; This function calls:
 11270 ;;		Nothing
 11271 ;; This function is called by:
 11272 ;;		_Load_Main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11278  1DF4                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11279                           
 11280                           ;Dimmer_B1.c: 243: char status = 0;
 11281                           
 11282                           ;incstack = 0
 11283                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11284  1DF4  0020               	movlb	0	; select bank0
 11285  1DF5  01A6               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11286                           
 11287                           ;Dimmer_B1.c: 254: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11288  1DF6  3000               	movlw	0
 11289  1DF7  0021               	movlb	1	; select bank1
 11290  1DF8  1A3A               	btfsc	_DimmerIntr1^(0+128),4
 11291  1DF9  3001               	movlw	1
 11292  1DFA  0020               	movlb	0	; select bank0
 11293  1DFB  00A6               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11294                           
 11295                           ;Dimmer_B1.c: 258: if (status == 0) {
 11296  1DFC  08A6               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11297  1DFD  1D03               	skipz
 11298  1DFE  2E05               	goto	l6987
 11299                           
 11300                           ;Dimmer_B1.c: 268: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11301  1DFF  3000               	movlw	0
 11302  1E00  0021               	movlb	1	; select bank1
 11303  1E01  1B3A               	btfsc	_DimmerIntr1^(0+128),6
 11304  1E02  3001               	movlw	1
 11305  1E03  0020               	movlb	0	; select bank0
 11306  1E04  00A6               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11307  1E05                     l6987:	
 11308                           
 11309                           ;Dimmer_B1.c: 270: }
 11310                           ;Dimmer_B1.c: 272: return status;
 11311  1E05  0826               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11312  1E06  0008               	return
 11313  1E07                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11314                           
 11315                           	psect	text68
 11316  1005                     __ptext68:	
 11317 ;; *************** function ___wmul *****************
 11318 ;; Defined at:
 11319 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;  multiplier      2    6[BANK0 ] unsigned int 
 11322 ;;  multiplicand    2    8[BANK0 ] unsigned int 
 11323 ;; Auto vars:     Size  Location     Type
 11324 ;;  product         2   10[BANK0 ] unsigned int 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  2    6[BANK0 ] unsigned int 
 11327 ;; Registers used:
 11328 ;;		wreg, status,2, status,0
 11329 ;; Tracked objects:
 11330 ;;		On entry : 0/0
 11331 ;;		On exit  : 0/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11334 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11338 ;;Total ram usage:        6 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    5
 11341 ;; This function calls:
 11342 ;;		Nothing
 11343 ;; This function is called by:
 11344 ;;		_Load_Main
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           
 11349                           ;psect for function ___wmul
 11350  1005                     ___wmul:	
 11351                           
 11352                           ;incstack = 0
 11353                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11354  1005  0020               	movlb	0	; select bank0
 11355  1006  01AA               	clrf	___wmul@product
 11356  1007  01AB               	clrf	___wmul@product+1
 11357  1008                     l7511:	
 11358  1008  1C26               	btfss	___wmul@multiplier,0
 11359  1009  280E               	goto	l2658
 11360  100A  0828               	movf	___wmul@multiplicand,w
 11361  100B  07AA               	addwf	___wmul@product,f
 11362  100C  0829               	movf	___wmul@multiplicand+1,w
 11363  100D  3DAB               	addwfc	___wmul@product+1,f
 11364  100E                     l2658:	
 11365  100E  3001               	movlw	1
 11366  100F                     u7375:	
 11367  100F  35A8               	lslf	___wmul@multiplicand,f
 11368  1010  0DA9               	rlf	___wmul@multiplicand+1,f
 11369  1011  0B89               	decfsz	9,f
 11370  1012  280F               	goto	u7375
 11371  1013  3001               	movlw	1
 11372  1014                     u7385:	
 11373  1014  36A7               	lsrf	___wmul@multiplier+1,f
 11374  1015  0CA6               	rrf	___wmul@multiplier,f
 11375  1016  0B89               	decfsz	9,f
 11376  1017  2814               	goto	u7385
 11377  1018  0827               	movf	___wmul@multiplier+1,w
 11378  1019  0426               	iorwf	___wmul@multiplier,w
 11379  101A  1D03               	skipz
 11380  101B  2808               	goto	l7511
 11381  101C  082B               	movf	___wmul@product+1,w
 11382  101D  01A7               	clrf	?___wmul+1
 11383  101E  07A7               	addwf	?___wmul+1,f
 11384  101F  082A               	movf	___wmul@product,w
 11385  1020  01A6               	clrf	?___wmul
 11386  1021  07A6               	addwf	?___wmul,f
 11387  1022  0008               	return
 11388  1023                     __end_of___wmul:	
 11389                           
 11390                           	psect	text69
 11391  12DE                     __ptext69:	
 11392 ;; *************** function ___lwdiv *****************
 11393 ;; Defined at:
 11394 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;  divisor         2    6[BANK0 ] unsigned int 
 11397 ;;  dividend        2    8[BANK0 ] unsigned int 
 11398 ;; Auto vars:     Size  Location     Type
 11399 ;;  quotient        2   12[BANK0 ] unsigned int 
 11400 ;;  counter         1   11[BANK0 ] unsigned char 
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  2    6[BANK0 ] unsigned int 
 11403 ;; Registers used:
 11404 ;;		wreg, status,2, status,0
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11410 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;Total ram usage:        8 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    5
 11417 ;; This function calls:
 11418 ;;		Nothing
 11419 ;; This function is called by:
 11420 ;;		_Load_Main
 11421 ;;		_setRF_Main
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           
 11426                           ;psect for function ___lwdiv
 11427  12DE                     ___lwdiv:	
 11428                           
 11429                           ;incstack = 0
 11430                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11431  12DE  0020               	movlb	0	; select bank0
 11432  12DF  01AC               	clrf	___lwdiv@quotient
 11433  12E0  01AD               	clrf	___lwdiv@quotient+1
 11434  12E1  0827               	movf	___lwdiv@divisor+1,w
 11435  12E2  0426               	iorwf	___lwdiv@divisor,w
 11436  12E3  1903               	skipnz
 11437  12E4  2B0E               	goto	l11299
 11438  12E5  01AB               	clrf	___lwdiv@counter
 11439  12E6  0AAB               	incf	___lwdiv@counter,f
 11440  12E7                     l11287:	
 11441  12E7  1BA7               	btfsc	___lwdiv@divisor+1,7
 11442  12E8  2AF3               	goto	l11289
 11443  12E9  3001               	movlw	1
 11444  12EA                     u13585:	
 11445  12EA  35A6               	lslf	___lwdiv@divisor,f
 11446  12EB  0DA7               	rlf	___lwdiv@divisor+1,f
 11447  12EC  0B89               	decfsz	9,f
 11448  12ED  2AEA               	goto	u13585
 11449  12EE  3001               	movlw	1
 11450  12EF  00AA               	movwf	??___lwdiv
 11451  12F0  082A               	movf	??___lwdiv,w
 11452  12F1  07AB               	addwf	___lwdiv@counter,f
 11453  12F2  2AE7               	goto	l11287
 11454  12F3                     l11289:	
 11455  12F3  3001               	movlw	1
 11456  12F4                     u13605:	
 11457  12F4  35AC               	lslf	___lwdiv@quotient,f
 11458  12F5  0DAD               	rlf	___lwdiv@quotient+1,f
 11459  12F6  0B89               	decfsz	9,f
 11460  12F7  2AF4               	goto	u13605
 11461  12F8  0827               	movf	___lwdiv@divisor+1,w
 11462  12F9  0229               	subwf	___lwdiv@dividend+1,w
 11463  12FA  1D03               	skipz
 11464  12FB  2AFE               	goto	u13615
 11465  12FC  0826               	movf	___lwdiv@divisor,w
 11466  12FD  0228               	subwf	___lwdiv@dividend,w
 11467  12FE                     u13615:	
 11468  12FE  1C03               	skipc
 11469  12FF  2B05               	goto	l11295
 11470  1300  0826               	movf	___lwdiv@divisor,w
 11471  1301  02A8               	subwf	___lwdiv@dividend,f
 11472  1302  0827               	movf	___lwdiv@divisor+1,w
 11473  1303  3BA9               	subwfb	___lwdiv@dividend+1,f
 11474  1304  142C               	bsf	___lwdiv@quotient,0
 11475  1305                     l11295:	
 11476  1305  3001               	movlw	1
 11477  1306                     u13625:	
 11478  1306  36A7               	lsrf	___lwdiv@divisor+1,f
 11479  1307  0CA6               	rrf	___lwdiv@divisor,f
 11480  1308  0B89               	decfsz	9,f
 11481  1309  2B06               	goto	u13625
 11482  130A  3001               	movlw	1
 11483  130B  02AB               	subwf	___lwdiv@counter,f
 11484  130C  1D03               	btfss	3,2
 11485  130D  2AF3               	goto	l11289
 11486  130E                     l11299:	
 11487  130E  082D               	movf	___lwdiv@quotient+1,w
 11488  130F  01A7               	clrf	?___lwdiv+1
 11489  1310  07A7               	addwf	?___lwdiv+1,f
 11490  1311  082C               	movf	___lwdiv@quotient,w
 11491  1312  01A6               	clrf	?___lwdiv
 11492  1313  07A6               	addwf	?___lwdiv,f
 11493  1314  0008               	return
 11494  1315                     __end_of___lwdiv:	
 11495                           
 11496                           	psect	text70
 11497  1B8A                     __ptext70:	
 11498 ;; *************** function _Load_Initialization *****************
 11499 ;; Defined at:
 11500 ;;		line 9 in file "../src/OverLoad_B1.c"
 11501 ;; Parameters:    Size  Location     Type
 11502 ;;		None
 11503 ;; Auto vars:     Size  Location     Type
 11504 ;;		None
 11505 ;; Return value:  Size  Location     Type
 11506 ;;		None               void
 11507 ;; Registers used:
 11508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11509 ;; Tracked objects:
 11510 ;;		On entry : 0/0
 11511 ;;		On exit  : 0/0
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11518 ;;Total ram usage:        0 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    6
 11521 ;; This function calls:
 11522 ;;		_setLoad_AH_AL_Restore
 11523 ;; This function is called by:
 11524 ;;		_main
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           
 11529                           ;psect for function _Load_Initialization
 11530  1B8A                     _Load_Initialization:	
 11531                           
 11532                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11533                           
 11534                           ;incstack = 0
 11535                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11536  1B8A  319F  27E4         	fcall	_setLoad_AH_AL_Restore
 11537  1B8C  0008               	return
 11538  1B8D                     __end_of_Load_Initialization:	
 11539                           
 11540                           	psect	text71
 11541  1FE4                     __ptext71:	
 11542 ;; *************** function _setLoad_AH_AL_Restore *****************
 11543 ;; Defined at:
 11544 ;;		line 292 in file "../src/OverLoad_B1.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;  i               1    7[BANK0 ] unsigned char 
 11549 ;; Return value:  Size  Location     Type
 11550 ;;		None               void
 11551 ;; Registers used:
 11552 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;Total ram usage:        2 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    5
 11565 ;; This function calls:
 11566 ;;		Nothing
 11567 ;; This function is called by:
 11568 ;;		_Load_Initialization
 11569 ;;		_Load_Main
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           
 11574                           ;psect for function _setLoad_AH_AL_Restore
 11575  1FE4                     _setLoad_AH_AL_Restore:	
 11576                           
 11577                           ;OverLoad_B1.c: 293: char i;
 11578                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11579                           
 11580                           ;incstack = 0
 11581                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11582  1FE4  0020               	movlb	0	; select bank0
 11583  1FE5  01A7               	clrf	setLoad_AH_AL_Restore@i
 11584  1FE6                     L8:	
 11585  1FE6  3005               	movlw	5
 11586  1FE7  0227               	subwf	setLoad_AH_AL_Restore@i,w
 11587  1FE8  1803               	btfsc	3,0
 11588  1FE9  0008               	return
 11589                           
 11590                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11591  1FEA  3527               	lslf	setLoad_AH_AL_Restore@i,w
 11592  1FEB  3E40               	addlw	(_Load+11)& (0+255)
 11593  1FEC  0086               	movwf	6
 11594  1FED  3001               	movlw	1	; select bank2/3
 11595  1FEE  0087               	movwf	7
 11596  1FEF  3000               	movlw	0
 11597  1FF0  3FC0               	movwi [0]fsr1
 11598  1FF1  3FC1               	movwi [1]fsr1
 11599                           
 11600                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11601  1FF2  3527               	lslf	setLoad_AH_AL_Restore@i,w
 11602  1FF3  3E4A               	addlw	(_Load+21)& (0+255)
 11603  1FF4  0086               	movwf	6
 11604  1FF5  3001               	movlw	1	; select bank2/3
 11605  1FF6  0087               	movwf	7
 11606  1FF7  30FF               	movlw	255
 11607  1FF8  3FC0               	movwi [0]fsr1
 11608  1FF9  30FF               	movlw	255
 11609  1FFA  3FC1               	movwi [1]fsr1
 11610  1FFB  3001               	movlw	1
 11611  1FFC  00A6               	movwf	??_setLoad_AH_AL_Restore
 11612  1FFD  0826               	movf	??_setLoad_AH_AL_Restore,w
 11613  1FFE  07A7               	addwf	setLoad_AH_AL_Restore@i,f
 11614  1FFF  2FE6               	goto	L8
 11615  2000                     __end_of_setLoad_AH_AL_Restore:	
 11616                           
 11617                           	psect	text72
 11618  1BA5                     __ptext72:	
 11619 ;; *************** function _LED_Main *****************
 11620 ;; Defined at:
 11621 ;;		line 47 in file "../src/LED_B1.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;		None
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;		None
 11626 ;; Return value:  Size  Location     Type
 11627 ;;		None               void
 11628 ;; Registers used:
 11629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11630 ;; Tracked objects:
 11631 ;;		On entry : 0/0
 11632 ;;		On exit  : 0/0
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;Total ram usage:        0 bytes
 11640 ;; Hardware stack levels used:    1
 11641 ;; Hardware stack levels required when called:    7
 11642 ;; This function calls:
 11643 ;;		_setLED_Main
 11644 ;; This function is called by:
 11645 ;;		_main
 11646 ;; This function uses a non-reentrant model
 11647 ;;
 11648                           
 11649                           
 11650                           ;psect for function _LED_Main
 11651  1BA5                     _LED_Main:	
 11652                           
 11653                           ;LED_B1.c: 67: setLED_Main(99);
 11654                           
 11655                           ;incstack = 0
 11656                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11657  1BA5  3063               	movlw	99
 11658  1BA6  3192  220B         	fcall	_setLED_Main
 11659  1BA8  0008               	return
 11660  1BA9                     __end_of_LED_Main:	
 11661                           
 11662                           	psect	text73
 11663  120B                     __ptext73:	
 11664 ;; *************** function _setLED_Main *****************
 11665 ;; Defined at:
 11666 ;;		line 229 in file "../src/LED_B1.c"
 11667 ;; Parameters:    Size  Location     Type
 11668 ;;  led             1    wreg     unsigned char 
 11669 ;; Auto vars:     Size  Location     Type
 11670 ;;  led             1   10[BANK0 ] unsigned char 
 11671 ;; Return value:  Size  Location     Type
 11672 ;;		None               void
 11673 ;; Registers used:
 11674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11675 ;; Tracked objects:
 11676 ;;		On entry : 0/0
 11677 ;;		On exit  : 0/0
 11678 ;;		Unchanged: 0/0
 11679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;Total ram usage:        3 bytes
 11685 ;; Hardware stack levels used:    1
 11686 ;; Hardware stack levels required when called:    6
 11687 ;; This function calls:
 11688 ;;		_LedPointSelect
 11689 ;; This function is called by:
 11690 ;;		_LED_Main
 11691 ;; This function uses a non-reentrant model
 11692 ;;
 11693                           
 11694                           
 11695                           ;psect for function _setLED_Main
 11696  120B                     _setLED_Main:	
 11697                           
 11698                           ;incstack = 0
 11699                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11700                           ;setLED_Main@led stored from wreg
 11701  120B  0020               	movlb	0	; select bank0
 11702  120C  00AA               	movwf	setLED_Main@led
 11703                           
 11704                           ;LED_B1.c: 230: LedPointSelect(led);
 11705  120D  082A               	movf	setLED_Main@led,w
 11706  120E  319C  2444  3192   	fcall	_LedPointSelect
 11707                           
 11708                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11709  1211  0020               	movlb	0	; select bank0
 11710  1212  0865               	movf	_LED,w
 11711  1213  0086               	movwf	6
 11712  1214  3001               	movlw	1	; select bank2/3
 11713  1215  0087               	movwf	7
 11714  1216  1C81               	btfss	1,1
 11715  1217  0008               	return
 11716                           
 11717                           ;LED_B1.c: 232: LED->Time++;
 11718  1218  0A65               	incf	_LED,w
 11719  1219  0086               	movwf	6
 11720  121A  3001               	movlw	1	; select bank2/3
 11721  121B  0087               	movwf	7
 11722  121C  3001               	movlw	1
 11723  121D  0781               	addwf	1,f
 11724  121E  3141               	addfsr 1,1
 11725  121F  1803               	skipnc
 11726  1220  0A81               	incf	1,f
 11727                           
 11728                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11729  1221  0A65               	incf	_LED,w
 11730  1222  0086               	movwf	6
 11731  1223  3001               	movlw	1	; select bank2/3
 11732  1224  0087               	movwf	7
 11733  1225  3F40               	moviw [0]fsr1
 11734  1226  00A8               	movwf	??_setLED_Main
 11735  1227  3F41               	moviw [1]fsr1
 11736  1228  00A9               	movwf	??_setLED_Main+1
 11737  1229  3000               	movlw	0
 11738  122A  0229               	subwf	??_setLED_Main+1,w
 11739  122B  3019               	movlw	25
 11740  122C  1903               	skipnz
 11741  122D  0228               	subwf	??_setLED_Main,w
 11742  122E  1C03               	skipc
 11743  122F  0008               	return
 11744                           
 11745                           ;LED_B1.c: 234: LED->Time = 0;
 11746  1230  0A65               	incf	_LED,w
 11747  1231  0086               	movwf	6
 11748  1232  3001               	movlw	1	; select bank2/3
 11749  1233  0087               	movwf	7
 11750  1234  3000               	movlw	0
 11751  1235  3FC0               	movwi [0]fsr1
 11752  1236  3FC1               	movwi [1]fsr1
 11753                           
 11754                           ;LED_B1.c: 252: if (led == 99) {
 11755  1237  082A               	movf	setLED_Main@led,w
 11756  1238  3A63               	xorlw	99
 11757  1239  1D03               	skipz
 11758  123A  0008               	return
 11759                           
 11760                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11761  123B  3020               	movlw	32
 11762  123C  068D               	xorwf	13,f
 11763  123D  0008               	return
 11764  123E                     __end_of_setLED_Main:	
 11765                           
 11766                           	psect	text74
 11767  1BA1                     __ptext74:	
 11768 ;; *************** function _LED_Initialization *****************
 11769 ;; Defined at:
 11770 ;;		line 31 in file "../src/LED_B1.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;		None
 11773 ;; Auto vars:     Size  Location     Type
 11774 ;;		None
 11775 ;; Return value:  Size  Location     Type
 11776 ;;		None               void
 11777 ;; Registers used:
 11778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11779 ;; Tracked objects:
 11780 ;;		On entry : 0/0
 11781 ;;		On exit  : 0/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;Total ram usage:        0 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; Hardware stack levels required when called:    8
 11791 ;; This function calls:
 11792 ;;		_setLED_Initialization
 11793 ;; This function is called by:
 11794 ;;		_main
 11795 ;; This function uses a non-reentrant model
 11796 ;;
 11797                           
 11798                           
 11799                           ;psect for function _LED_Initialization
 11800  1BA1                     _LED_Initialization:	
 11801                           
 11802                           ;LED_B1.c: 42: setLED_Initialization(99);
 11803                           
 11804                           ;incstack = 0
 11805                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11806  1BA1  3063               	movlw	99
 11807  1BA2  319D  2555         	fcall	_setLED_Initialization
 11808  1BA4  0008               	return
 11809  1BA5                     __end_of_LED_Initialization:	
 11810                           
 11811                           	psect	text75
 11812  1D55                     __ptext75:	
 11813 ;; *************** function _setLED_Initialization *****************
 11814 ;; Defined at:
 11815 ;;		line 74 in file "../src/LED_B1.c"
 11816 ;; Parameters:    Size  Location     Type
 11817 ;;  led             1    wreg     unsigned char 
 11818 ;; Auto vars:     Size  Location     Type
 11819 ;;  led             1   10[BANK0 ] unsigned char 
 11820 ;; Return value:  Size  Location     Type
 11821 ;;		None               void
 11822 ;; Registers used:
 11823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11824 ;; Tracked objects:
 11825 ;;		On entry : 0/0
 11826 ;;		On exit  : 0/0
 11827 ;;		Unchanged: 0/0
 11828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;Total ram usage:        1 bytes
 11834 ;; Hardware stack levels used:    1
 11835 ;; Hardware stack levels required when called:    7
 11836 ;; This function calls:
 11837 ;;		_LedPointSelect
 11838 ;;		_setLED
 11839 ;; This function is called by:
 11840 ;;		_LED_Initialization
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           
 11845                           ;psect for function _setLED_Initialization
 11846  1D55                     _setLED_Initialization:	
 11847                           
 11848                           ;incstack = 0
 11849                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11850                           ;setLED_Initialization@led stored from wreg
 11851  1D55  0020               	movlb	0	; select bank0
 11852  1D56  00AA               	movwf	setLED_Initialization@led
 11853                           
 11854                           ;LED_B1.c: 75: LedPointSelect(led);
 11855  1D57  082A               	movf	setLED_Initialization@led,w
 11856  1D58  319C  2444  319D   	fcall	_LedPointSelect
 11857                           
 11858                           ;LED_B1.c: 76: LED->Enable = 1;
 11859  1D5B  0020               	movlb	0	; select bank0
 11860  1D5C  0865               	movf	_LED,w
 11861  1D5D  0086               	movwf	6
 11862  1D5E  3001               	movlw	1	; select bank2/3
 11863  1D5F  0087               	movwf	7
 11864  1D60  1401               	bsf	1,0
 11865                           
 11866                           ;LED_B1.c: 77: setLED(led, 0);
 11867  1D61  01A8               	clrf	setLED@command
 11868  1D62  082A               	movf	setLED_Initialization@led,w
 11869  1D63  3192  2272         	fcall	_setLED
 11870  1D65  0008               	return
 11871  1D66                     __end_of_setLED_Initialization:	
 11872                           
 11873                           	psect	text76
 11874  12A8                     __ptext76:	
 11875 ;; *************** function _Flash_Memory_Main *****************
 11876 ;; Defined at:
 11877 ;;		line 971 in file "../src/MCU_B1.c"
 11878 ;; Parameters:    Size  Location     Type
 11879 ;;		None
 11880 ;; Auto vars:     Size  Location     Type
 11881 ;;		None
 11882 ;; Return value:  Size  Location     Type
 11883 ;;		None               void
 11884 ;; Registers used:
 11885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;Total ram usage:        1 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; Hardware stack levels required when called:    8
 11898 ;; This function calls:
 11899 ;;		_Flash_Memory_Modify
 11900 ;;		_getMain_All_LightsStatus
 11901 ;; This function is called by:
 11902 ;;		_main
 11903 ;; This function uses a non-reentrant model
 11904 ;;
 11905                           
 11906                           
 11907                           ;psect for function _Flash_Memory_Main
 11908  12A8                     _Flash_Memory_Main:	
 11909                           
 11910                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 11911                           
 11912                           ;incstack = 0
 11913                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11914  12A8  0023               	movlb	3	; select bank3
 11915  12A9  1C62               	btfss	(_Memory^(0+384)+36),0
 11916  12AA  0008               	return
 11917                           
 11918                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11919  12AB  319C  2424  3192   	fcall	_getMain_All_LightsStatus
 11920  12AE  3A00               	xorlw	0
 11921  12AF  3000               	movlw	0
 11922  12B0  1903               	skipnz
 11923  12B1  3001               	movlw	1
 11924  12B2  0020               	movlb	0	; select bank0
 11925  12B3  00AC               	movwf	??_Flash_Memory_Main
 11926  12B4  0DAC               	rlf	??_Flash_Memory_Main,f
 11927  12B5  0023               	movlb	3	; select bank3
 11928  12B6  0862               	movf	(_Memory^(0+384)+36),w
 11929  12B7  0020               	movlb	0	; select bank0
 11930  12B8  062C               	xorwf	??_Flash_Memory_Main,w
 11931  12B9  39FD               	andlw	-3
 11932  12BA  062C               	xorwf	??_Flash_Memory_Main,w
 11933  12BB  0023               	movlb	3	; select bank3
 11934  12BC  00E2               	movwf	(_Memory^(0+384)+36)
 11935                           
 11936                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 11937  12BD  1CE2               	btfss	(_Memory^(0+384)+36),1
 11938  12BE  2AD8               	goto	l1230
 11939                           
 11940                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 11941  12BF  15E2               	bsf	(_Memory^(0+384)+36),3
 11942                           
 11943                           ;MCU_B1.c: 976: Memory.Time++;
 11944  12C0  3001               	movlw	1
 11945  12C1  07E0               	addwf	(_Memory^(0+384)+34),f
 11946  12C2  3000               	movlw	0
 11947  12C3  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11948                           
 11949                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 11950  12C4  3022               	movlw	34
 11951  12C5  3EBE               	addlw	_Memory& (0+255)
 11952  12C6  0086               	movwf	6
 11953  12C7  3001               	movlw	1	; select bank3/4
 11954  12C8  0087               	movwf	7
 11955  12C9  3F40               	moviw [0]fsr1
 11956  12CA  3A0A               	xorlw	10
 11957  12CB  1D03               	skipz
 11958  12CC  2ACF               	goto	u14325
 11959  12CD  3F41               	moviw [1]fsr1
 11960  12CE  3A00               	xorlw	0
 11961  12CF                     u14325:	
 11962  12CF  1D03               	skipz
 11963  12D0  0008               	return
 11964                           
 11965                           ;MCU_B1.c: 978: Memory.Time = 0;
 11966  12D1  01E0               	clrf	(_Memory^(0+384)+34)
 11967  12D2  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11968                           
 11969                           ;MCU_B1.c: 979: Memory.Modify = 0;
 11970  12D3  1062               	bcf	(_Memory^(0+384)+36),0
 11971                           
 11972                           ;MCU_B1.c: 980: Memory.GO = 0;
 11973  12D4  10E2               	bcf	(_Memory^(0+384)+36),1
 11974                           
 11975                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 11976  12D5  3194  2455         	fcall	_Flash_Memory_Modify
 11977                           
 11978                           ;MCU_B1.c: 982: }
 11979                           ;MCU_B1.c: 983: } else {
 11980  12D7  0008               	return
 11981  12D8                     l1230:	
 11982                           
 11983                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 11984  12D8  1DE2               	btfss	(_Memory^(0+384)+36),3
 11985  12D9  0008               	return
 11986                           
 11987                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 11988  12DA  11E2               	bcf	(_Memory^(0+384)+36),3
 11989                           
 11990                           ;MCU_B1.c: 986: Memory.Time = 0;
 11991  12DB  01E0               	clrf	(_Memory^(0+384)+34)
 11992  12DC  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11993  12DD  0008               	return
 11994  12DE                     __end_of_Flash_Memory_Main:	
 11995                           
 11996                           	psect	text77
 11997  1455                     __ptext77:	
 11998 ;; *************** function _Flash_Memory_Modify *****************
 11999 ;; Defined at:
 12000 ;;		line 1044 in file "../src/MCU_B1.c"
 12001 ;; Parameters:    Size  Location     Type
 12002 ;;		None
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;  i               1   11[BANK0 ] unsigned char 
 12005 ;; Return value:  Size  Location     Type
 12006 ;;		None               void
 12007 ;; Registers used:
 12008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12009 ;; Tracked objects:
 12010 ;;		On entry : 0/0
 12011 ;;		On exit  : 0/0
 12012 ;;		Unchanged: 0/0
 12013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12017 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;Total ram usage:        2 bytes
 12019 ;; Hardware stack levels used:    1
 12020 ;; Hardware stack levels required when called:    7
 12021 ;; This function calls:
 12022 ;;		_Flash_Memory_Erasing
 12023 ;;		_Flash_Memory_Read
 12024 ;;		_Flash_Memory_Write
 12025 ;;		_setMemory_Data
 12026 ;; This function is called by:
 12027 ;;		_Flash_Memory_Main
 12028 ;; This function uses a non-reentrant model
 12029 ;;
 12030                           
 12031                           
 12032                           ;psect for function _Flash_Memory_Modify
 12033  1455                     _Flash_Memory_Modify:	
 12034                           
 12035                           ;MCU_B1.c: 1045: char i = 0;
 12036                           
 12037                           ;incstack = 0
 12038                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12039  1455  0020               	movlb	0	; select bank0
 12040  1456  01AB               	clrf	Flash_Memory_Modify@i
 12041                           
 12042                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12043  1457  01AB               	clrf	Flash_Memory_Modify@i
 12044  1458  3020               	movlw	32
 12045  1459  022B               	subwf	Flash_Memory_Modify@i,w
 12046  145A  1803               	btfsc	3,0
 12047  145B  2C71               	goto	l9409
 12048  145C                     l9403:	
 12049                           
 12050                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12051  145C  082B               	movf	Flash_Memory_Modify@i,w
 12052  145D  319F  2794  3194   	fcall	_Flash_Memory_Read
 12053  1460  0020               	movlb	0	; select bank0
 12054  1461  00AA               	movwf	??_Flash_Memory_Modify
 12055  1462  082B               	movf	Flash_Memory_Modify@i,w
 12056  1463  3EBE               	addlw	_Memory& (0+255)
 12057  1464  0086               	movwf	6
 12058  1465  3001               	movlw	1	; select bank3/4
 12059  1466  0087               	movwf	7
 12060  1467  082A               	movf	??_Flash_Memory_Modify,w
 12061  1468  0081               	movwf	1
 12062  1469  3001               	movlw	1
 12063  146A  00AA               	movwf	??_Flash_Memory_Modify
 12064  146B  082A               	movf	??_Flash_Memory_Modify,w
 12065  146C  07AB               	addwf	Flash_Memory_Modify@i,f
 12066  146D  3020               	movlw	32
 12067  146E  022B               	subwf	Flash_Memory_Modify@i,w
 12068  146F  1C03               	skipc
 12069  1470  2C5C               	goto	l9403
 12070  1471                     l9409:	
 12071                           
 12072                           ;MCU_B1.c: 1048: }
 12073                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12074  1471  0021               	movlb	1	; select bank1
 12075  1472  086F               	movf	_product^(0+128),w
 12076  1473  0086               	movwf	6
 12077  1474  3002               	movlw	2	; select bank4/5
 12078  1475  0087               	movwf	7
 12079  1476  3002               	movlw	2	; select bank4/5
 12080  1477  3F4C               	moviw [12]fsr1
 12081  1478  0020               	movlb	0	; select bank0
 12082  1479  00A6               	movwf	setMemory_Data@data
 12083  147A  3000               	movlw	0
 12084  147B  319C  249D  3194   	fcall	_setMemory_Data
 12085                           
 12086                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12087  147E  0021               	movlb	1	; select bank1
 12088  147F  086F               	movf	_product^(0+128),w
 12089  1480  0086               	movwf	6
 12090  1481  3002               	movlw	2	; select bank4/5
 12091  1482  0087               	movwf	7
 12092  1483  3002               	movlw	2	; select bank4/5
 12093  1484  3F4D               	moviw [13]fsr1
 12094  1485  0020               	movlb	0	; select bank0
 12095  1486  00A6               	movwf	setMemory_Data@data
 12096  1487  3001               	movlw	1
 12097  1488  319C  249D  3194   	fcall	_setMemory_Data
 12098                           
 12099                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12100  148B  0021               	movlb	1	; select bank1
 12101  148C  086F               	movf	_product^(0+128),w
 12102  148D  0086               	movwf	6
 12103  148E  3002               	movlw	2	; select bank4/5
 12104  148F  0087               	movwf	7
 12105  1490  3002               	movlw	2	; select bank4/5
 12106  1491  3F4E               	moviw [14]fsr1
 12107  1492  0020               	movlb	0	; select bank0
 12108  1493  00A6               	movwf	setMemory_Data@data
 12109  1494  3002               	movlw	2
 12110  1495  319C  249D  3194   	fcall	_setMemory_Data
 12111                           
 12112                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12113  1498  0023               	movlb	3	; select bank3
 12114  1499  1D62               	btfss	(_Memory^(0+384)+36),2
 12115  149A  2C9F               	goto	l1253
 12116                           
 12117                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12118  149B  1162               	bcf	(_Memory^(0+384)+36),2
 12119                           
 12120                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12121  149C  0022               	movlb	2	; select bank2
 12122  149D  11A0               	bcf	_myMain^(0+256),3
 12123                           
 12124                           ;MCU_B1.c: 1060: myMain.First = 0;
 12125  149E  12A0               	bcf	_myMain^(0+256),5
 12126  149F                     l1253:	
 12127                           
 12128                           ;MCU_B1.c: 1062: }
 12129                           ;MCU_B1.c: 1063: GIE = 0;
 12130  149F  138B               	bcf	11,7	;volatile
 12131                           
 12132                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12133  14A0  319C  24A9  3194   	fcall	_Flash_Memory_Erasing
 12134                           
 12135                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12136  14A3  3191  2176         	fcall	_Flash_Memory_Write
 12137                           
 12138                           ;MCU_B1.c: 1066: GIE = 1;
 12139  14A5  178B               	bsf	11,7	;volatile
 12140  14A6  0008               	return
 12141  14A7                     __end_of_Flash_Memory_Modify:	
 12142                           
 12143                           	psect	text78
 12144  1CA9                     __ptext78:	
 12145 ;; *************** function _Flash_Memory_Erasing *****************
 12146 ;; Defined at:
 12147 ;;		line 1033 in file "../src/MCU_B1.c"
 12148 ;; Parameters:    Size  Location     Type
 12149 ;;		None
 12150 ;; Auto vars:     Size  Location     Type
 12151 ;;		None
 12152 ;; Return value:  Size  Location     Type
 12153 ;;		None               void
 12154 ;; Registers used:
 12155 ;;		wreg, status,2, status,0, pclath, cstack
 12156 ;; Tracked objects:
 12157 ;;		On entry : 0/0
 12158 ;;		On exit  : 0/0
 12159 ;;		Unchanged: 0/0
 12160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12165 ;;Total ram usage:        0 bytes
 12166 ;; Hardware stack levels used:    1
 12167 ;; Hardware stack levels required when called:    6
 12168 ;; This function calls:
 12169 ;;		_Flash_Memory_Unlock
 12170 ;; This function is called by:
 12171 ;;		_Flash_Memory_Modify
 12172 ;; This function uses a non-reentrant model
 12173 ;;
 12174                           
 12175                           
 12176                           ;psect for function _Flash_Memory_Erasing
 12177  1CA9                     _Flash_Memory_Erasing:	
 12178                           
 12179                           ;MCU_B1.c: 1034: CFGS = 0;
 12180                           
 12181                           ;incstack = 0
 12182                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12183  1CA9  0023               	movlb	3	; select bank3
 12184  1CAA  1315               	bcf	21,6	;volatile
 12185                           
 12186                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12187  1CAB  3030               	movlw	48
 12188  1CAC  0092               	movwf	18	;volatile
 12189                           
 12190                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12191  1CAD  0191               	clrf	17	;volatile
 12192                           
 12193                           ;MCU_B1.c: 1037: FREE = 1;
 12194  1CAE  1615               	bsf	21,4	;volatile
 12195                           
 12196                           ;MCU_B1.c: 1038: WREN = 1;
 12197  1CAF  1515               	bsf	21,2	;volatile
 12198                           
 12199                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12200  1CB0  319C  241B         	fcall	_Flash_Memory_Unlock
 12201                           
 12202                           ;MCU_B1.c: 1040: WREN = 0;
 12203  1CB2  0023               	movlb	3	; select bank3
 12204  1CB3  1115               	bcf	21,2	;volatile
 12205  1CB4  0008               	return
 12206  1CB5                     __end_of_Flash_Memory_Erasing:	
 12207                           
 12208                           	psect	text79
 12209  0372                     __ptext79:	
 12210 ;; *************** function _Flash_Memory_Initialization *****************
 12211 ;; Defined at:
 12212 ;;		line 930 in file "../src/MCU_B1.c"
 12213 ;; Parameters:    Size  Location     Type
 12214 ;;		None
 12215 ;; Auto vars:     Size  Location     Type
 12216 ;;  i               1    6[BANK1 ] unsigned char 
 12217 ;; Return value:  Size  Location     Type
 12218 ;;		None               void
 12219 ;; Registers used:
 12220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12221 ;; Tracked objects:
 12222 ;;		On entry : 0/0
 12223 ;;		On exit  : 0/0
 12224 ;;		Unchanged: 0/0
 12225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12230 ;;Total ram usage:        2 bytes
 12231 ;; Hardware stack levels used:    1
 12232 ;; Hardware stack levels required when called:    8
 12233 ;; This function calls:
 12234 ;;		_Flash_Memory_Read
 12235 ;;		_Flash_Memory_Write
 12236 ;;		_getDimmerLights_ValueToPercent
 12237 ;;		_setMemory_Data
 12238 ;; This function is called by:
 12239 ;;		_main
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           
 12244                           ;psect for function _Flash_Memory_Initialization
 12245  0372                     _Flash_Memory_Initialization:	
 12246                           
 12247                           ;MCU_B1.c: 931: char i = 0;
 12248                           
 12249                           ;incstack = 0
 12250                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12251  0372  0021               	movlb	1	; select bank1
 12252  0373  01E1               	clrf	Flash_Memory_Initialization@i^(0+128)
 12253                           
 12254                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12255  0374  301F               	movlw	31
 12256  0375  319F  2794  3183   	fcall	_Flash_Memory_Read
 12257  0378  3AAA               	xorlw	170
 12258  0379  1D03               	skipz
 12259  037A  2BF7               	goto	l11655
 12260                           
 12261                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12262  037B  3000               	movlw	0
 12263  037C  319F  2794  3183   	fcall	_Flash_Memory_Read
 12264  037F  0020               	movlb	0	; select bank0
 12265  0380  00E2               	movwf	??_Flash_Memory_Initialization
 12266  0381  0021               	movlb	1	; select bank1
 12267  0382  086F               	movf	_product^(0+128),w
 12268  0383  3E0C               	addlw	12
 12269  0384  0086               	movwf	6
 12270  0385  3002               	movlw	2	; select bank4/5
 12271  0386  0087               	movwf	7
 12272  0387  0020               	movlb	0	; select bank0
 12273  0388  0862               	movf	??_Flash_Memory_Initialization,w
 12274  0389  0081               	movwf	1
 12275                           
 12276                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12277  038A  3001               	movlw	1
 12278  038B  319F  2794  3183   	fcall	_Flash_Memory_Read
 12279  038E  0020               	movlb	0	; select bank0
 12280  038F  00E2               	movwf	??_Flash_Memory_Initialization
 12281  0390  0021               	movlb	1	; select bank1
 12282  0391  086F               	movf	_product^(0+128),w
 12283  0392  3E0D               	addlw	13
 12284  0393  0086               	movwf	6
 12285  0394  3002               	movlw	2	; select bank4/5
 12286  0395  0087               	movwf	7
 12287  0396  0020               	movlb	0	; select bank0
 12288  0397  0862               	movf	??_Flash_Memory_Initialization,w
 12289  0398  0081               	movwf	1
 12290                           
 12291                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12292  0399  3002               	movlw	2
 12293  039A  319F  2794  3183   	fcall	_Flash_Memory_Read
 12294  039D  0020               	movlb	0	; select bank0
 12295  039E  00E2               	movwf	??_Flash_Memory_Initialization
 12296  039F  0021               	movlb	1	; select bank1
 12297  03A0  086F               	movf	_product^(0+128),w
 12298  03A1  3E0E               	addlw	14
 12299  03A2  0086               	movwf	6
 12300  03A3  3002               	movlw	2	; select bank4/5
 12301  03A4  0087               	movwf	7
 12302  03A5  0020               	movlb	0	; select bank0
 12303  03A6  0862               	movf	??_Flash_Memory_Initialization,w
 12304  03A7  0081               	movwf	1
 12305                           
 12306                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(65*0.75)));
 12307  03A8  3030               	movlw	48
 12308  03A9  318A  2209  3183   	fcall	_getDimmerLights_ValueToPercent
 12309  03AC  0020               	movlb	0	; select bank0
 12310  03AD  00E2               	movwf	??_Flash_Memory_Initialization
 12311  03AE  0862               	movf	??_Flash_Memory_Initialization,w
 12312  03AF  0021               	movlb	1	; select bank1
 12313  03B0  00E1               	movwf	Flash_Memory_Initialization@i^(0+128)
 12314                           
 12315                           ;MCU_B1.c: 942: product->Data[21] = i;
 12316  03B1  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12317  03B2  0020               	movlb	0	; select bank0
 12318  03B3  00E2               	movwf	??_Flash_Memory_Initialization
 12319  03B4  0021               	movlb	1	; select bank1
 12320  03B5  086F               	movf	_product^(0+128),w
 12321  03B6  3E15               	addlw	21
 12322  03B7  0086               	movwf	6
 12323  03B8  3002               	movlw	2	; select bank4/5
 12324  03B9  0087               	movwf	7
 12325  03BA  0020               	movlb	0	; select bank0
 12326  03BB  0862               	movf	??_Flash_Memory_Initialization,w
 12327  03BC  0081               	movwf	1
 12328                           
 12329                           ;MCU_B1.c: 943: product->Data[22] = i;
 12330  03BD  0021               	movlb	1	; select bank1
 12331  03BE  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12332  03BF  0020               	movlb	0	; select bank0
 12333  03C0  00E2               	movwf	??_Flash_Memory_Initialization
 12334  03C1  0021               	movlb	1	; select bank1
 12335  03C2  086F               	movf	_product^(0+128),w
 12336  03C3  3E16               	addlw	22
 12337  03C4  0086               	movwf	6
 12338  03C5  3002               	movlw	2	; select bank4/5
 12339  03C6  0087               	movwf	7
 12340  03C7  0020               	movlb	0	; select bank0
 12341  03C8  0862               	movf	??_Flash_Memory_Initialization,w
 12342  03C9  0081               	movwf	1
 12343                           
 12344                           ;MCU_B1.c: 944: product->Data[23] = i;
 12345  03CA  0021               	movlb	1	; select bank1
 12346  03CB  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12347  03CC  0020               	movlb	0	; select bank0
 12348  03CD  00E2               	movwf	??_Flash_Memory_Initialization
 12349  03CE  0021               	movlb	1	; select bank1
 12350  03CF  086F               	movf	_product^(0+128),w
 12351  03D0  3E17               	addlw	23
 12352  03D1  0086               	movwf	6
 12353  03D2  3002               	movlw	2	; select bank4/5
 12354  03D3  0087               	movwf	7
 12355  03D4  0020               	movlb	0	; select bank0
 12356  03D5  0862               	movf	??_Flash_Memory_Initialization,w
 12357  03D6  0081               	movwf	1
 12358                           
 12359                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12360  03D7  0021               	movlb	1	; select bank1
 12361  03D8  086F               	movf	_product^(0+128),w
 12362  03D9  3E0C               	addlw	12
 12363  03DA  0086               	movwf	6
 12364  03DB  3002               	movlw	2	; select bank4/5
 12365  03DC  0087               	movwf	7
 12366  03DD  0801               	movf	1,w
 12367  03DE  3AFF               	xorlw	255
 12368  03DF  1D03               	skipz
 12369  03E0  0008               	return
 12370  03E1  086F               	movf	_product^(0+128),w
 12371  03E2  3E0D               	addlw	13
 12372  03E3  0086               	movwf	6
 12373  03E4  3002               	movlw	2	; select bank4/5
 12374  03E5  0087               	movwf	7
 12375  03E6  0801               	movf	1,w
 12376  03E7  3AFF               	xorlw	255
 12377  03E8  1D03               	skipz
 12378  03E9  0008               	return
 12379  03EA  086F               	movf	_product^(0+128),w
 12380  03EB  3E0E               	addlw	14
 12381  03EC  0086               	movwf	6
 12382  03ED  3002               	movlw	2	; select bank4/5
 12383  03EE  0087               	movwf	7
 12384  03EF  0801               	movf	1,w
 12385  03F0  3AFF               	xorlw	255
 12386  03F1  1D03               	skipz
 12387  03F2  0008               	return
 12388                           
 12389                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12390  03F3  0022               	movlb	2	; select bank2
 12391  03F4  15A0               	bsf	_myMain^(0+256),3
 12392                           
 12393                           ;MCU_B1.c: 948: myMain.First = 1;
 12394  03F5  16A0               	bsf	_myMain^(0+256),5
 12395                           
 12396                           ;MCU_B1.c: 949: }
 12397                           ;MCU_B1.c: 950: } else {
 12398  03F6  0008               	return
 12399  03F7                     l11655:	
 12400                           
 12401                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(65*0.75)));
 12402  03F7  3030               	movlw	48
 12403  03F8  318A  2209  3183   	fcall	_getDimmerLights_ValueToPercent
 12404  03FB  0020               	movlb	0	; select bank0
 12405  03FC  00E2               	movwf	??_Flash_Memory_Initialization
 12406  03FD  0862               	movf	??_Flash_Memory_Initialization,w
 12407  03FE  0021               	movlb	1	; select bank1
 12408  03FF  00E1               	movwf	Flash_Memory_Initialization@i^(0+128)
 12409                           
 12410                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12411  0400  30FF               	movlw	255
 12412  0401  0020               	movlb	0	; select bank0
 12413  0402  00E2               	movwf	??_Flash_Memory_Initialization
 12414  0403  0862               	movf	??_Flash_Memory_Initialization,w
 12415  0404  00A6               	movwf	setMemory_Data@data
 12416  0405  3000               	movlw	0
 12417  0406  319C  249D  3183   	fcall	_setMemory_Data
 12418                           
 12419                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12420  0409  30FF               	movlw	255
 12421  040A  0020               	movlb	0	; select bank0
 12422  040B  00E2               	movwf	??_Flash_Memory_Initialization
 12423  040C  0862               	movf	??_Flash_Memory_Initialization,w
 12424  040D  00A6               	movwf	setMemory_Data@data
 12425  040E  3001               	movlw	1
 12426  040F  319C  249D  3183   	fcall	_setMemory_Data
 12427                           
 12428                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12429  0412  30FF               	movlw	255
 12430  0413  0020               	movlb	0	; select bank0
 12431  0414  00E2               	movwf	??_Flash_Memory_Initialization
 12432  0415  0862               	movf	??_Flash_Memory_Initialization,w
 12433  0416  00A6               	movwf	setMemory_Data@data
 12434  0417  3002               	movlw	2
 12435  0418  319C  249D  3183   	fcall	_setMemory_Data
 12436                           
 12437                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12438  041B  30FF               	movlw	255
 12439  041C  0020               	movlb	0	; select bank0
 12440  041D  00E2               	movwf	??_Flash_Memory_Initialization
 12441  041E  0862               	movf	??_Flash_Memory_Initialization,w
 12442  041F  00A6               	movwf	setMemory_Data@data
 12443  0420  3003               	movlw	3
 12444  0421  319C  249D  3183   	fcall	_setMemory_Data
 12445                           
 12446                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12447  0424  30FF               	movlw	255
 12448  0425  0020               	movlb	0	; select bank0
 12449  0426  00E2               	movwf	??_Flash_Memory_Initialization
 12450  0427  0862               	movf	??_Flash_Memory_Initialization,w
 12451  0428  00A6               	movwf	setMemory_Data@data
 12452  0429  3004               	movlw	4
 12453  042A  319C  249D  3183   	fcall	_setMemory_Data
 12454                           
 12455                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12456  042D  30FF               	movlw	255
 12457  042E  0020               	movlb	0	; select bank0
 12458  042F  00E2               	movwf	??_Flash_Memory_Initialization
 12459  0430  0862               	movf	??_Flash_Memory_Initialization,w
 12460  0431  00A6               	movwf	setMemory_Data@data
 12461  0432  3005               	movlw	5
 12462  0433  319C  249D  3183   	fcall	_setMemory_Data
 12463                           
 12464                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12465  0436  30AA               	movlw	170
 12466  0437  0020               	movlb	0	; select bank0
 12467  0438  00E2               	movwf	??_Flash_Memory_Initialization
 12468  0439  0862               	movf	??_Flash_Memory_Initialization,w
 12469  043A  00A6               	movwf	setMemory_Data@data
 12470  043B  301F               	movlw	31
 12471  043C  319C  249D  3183   	fcall	_setMemory_Data
 12472                           
 12473                           ;MCU_B1.c: 959: product->Data[21] = i;
 12474  043F  0021               	movlb	1	; select bank1
 12475  0440  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12476  0441  0020               	movlb	0	; select bank0
 12477  0442  00E2               	movwf	??_Flash_Memory_Initialization
 12478  0443  0021               	movlb	1	; select bank1
 12479  0444  086F               	movf	_product^(0+128),w
 12480  0445  3E15               	addlw	21
 12481  0446  0086               	movwf	6
 12482  0447  3002               	movlw	2	; select bank4/5
 12483  0448  0087               	movwf	7
 12484  0449  0020               	movlb	0	; select bank0
 12485  044A  0862               	movf	??_Flash_Memory_Initialization,w
 12486  044B  0081               	movwf	1
 12487                           
 12488                           ;MCU_B1.c: 960: product->Data[22] = i;
 12489  044C  0021               	movlb	1	; select bank1
 12490  044D  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12491  044E  0020               	movlb	0	; select bank0
 12492  044F  00E2               	movwf	??_Flash_Memory_Initialization
 12493  0450  0021               	movlb	1	; select bank1
 12494  0451  086F               	movf	_product^(0+128),w
 12495  0452  3E16               	addlw	22
 12496  0453  0086               	movwf	6
 12497  0454  3002               	movlw	2	; select bank4/5
 12498  0455  0087               	movwf	7
 12499  0456  0020               	movlb	0	; select bank0
 12500  0457  0862               	movf	??_Flash_Memory_Initialization,w
 12501  0458  0081               	movwf	1
 12502                           
 12503                           ;MCU_B1.c: 961: product->Data[23] = i;
 12504  0459  0021               	movlb	1	; select bank1
 12505  045A  0861               	movf	Flash_Memory_Initialization@i^(0+128),w
 12506  045B  0020               	movlb	0	; select bank0
 12507  045C  00E2               	movwf	??_Flash_Memory_Initialization
 12508  045D  0021               	movlb	1	; select bank1
 12509  045E  086F               	movf	_product^(0+128),w
 12510  045F  3E17               	addlw	23
 12511  0460  0086               	movwf	6
 12512  0461  3002               	movlw	2	; select bank4/5
 12513  0462  0087               	movwf	7
 12514  0463  0020               	movlb	0	; select bank0
 12515  0464  0862               	movf	??_Flash_Memory_Initialization,w
 12516  0465  0081               	movwf	1
 12517                           
 12518                           ;MCU_B1.c: 962: GIE = 0;
 12519  0466  138B               	bcf	11,7	;volatile
 12520                           
 12521                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12522  0467  3191  2176         	fcall	_Flash_Memory_Write
 12523                           
 12524                           ;MCU_B1.c: 964: GIE = 1;
 12525  0469  178B               	bsf	11,7	;volatile
 12526                           
 12527                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12528  046A  0022               	movlb	2	; select bank2
 12529  046B  15A0               	bsf	_myMain^(0+256),3
 12530                           
 12531                           ;MCU_B1.c: 966: myMain.First = 1;
 12532  046C  16A0               	bsf	_myMain^(0+256),5
 12533  046D  0008               	return
 12534  046E                     __end_of_Flash_Memory_Initialization:	
 12535                           
 12536                           	psect	text80
 12537  1C9D                     __ptext80:	
 12538 ;; *************** function _setMemory_Data *****************
 12539 ;; Defined at:
 12540 ;;		line 1081 in file "../src/MCU_B1.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;  address         1    wreg     unsigned char 
 12543 ;;  data            1    6[BANK0 ] unsigned char 
 12544 ;; Auto vars:     Size  Location     Type
 12545 ;;  address         1    8[BANK0 ] unsigned char 
 12546 ;; Return value:  Size  Location     Type
 12547 ;;		None               void
 12548 ;; Registers used:
 12549 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12550 ;; Tracked objects:
 12551 ;;		On entry : 0/0
 12552 ;;		On exit  : 0/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12555 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;Total ram usage:        3 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    5
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		_Flash_Memory_Initialization
 12566 ;;		_Flash_Memory_Modify
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           
 12571                           ;psect for function _setMemory_Data
 12572  1C9D                     _setMemory_Data:	
 12573                           
 12574                           ;incstack = 0
 12575                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12576                           ;setMemory_Data@address stored from wreg
 12577  1C9D  0020               	movlb	0	; select bank0
 12578  1C9E  00A8               	movwf	setMemory_Data@address
 12579                           
 12580                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12581  1C9F  0826               	movf	setMemory_Data@data,w
 12582  1CA0  00A7               	movwf	??_setMemory_Data
 12583  1CA1  0828               	movf	setMemory_Data@address,w
 12584  1CA2  3EBE               	addlw	_Memory& (0+255)
 12585  1CA3  0086               	movwf	6
 12586  1CA4  3001               	movlw	1	; select bank3/4
 12587  1CA5  0087               	movwf	7
 12588  1CA6  0827               	movf	??_setMemory_Data,w
 12589  1CA7  0081               	movwf	1
 12590  1CA8  0008               	return
 12591  1CA9                     __end_of_setMemory_Data:	
 12592                           
 12593                           	psect	text81
 12594  1176                     __ptext81:	
 12595 ;; *************** function _Flash_Memory_Write *****************
 12596 ;; Defined at:
 12597 ;;		line 1014 in file "../src/MCU_B1.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;		None
 12600 ;; Auto vars:     Size  Location     Type
 12601 ;;  i               1    7[BANK0 ] unsigned char 
 12602 ;; Return value:  Size  Location     Type
 12603 ;;		None               void
 12604 ;; Registers used:
 12605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12606 ;; Tracked objects:
 12607 ;;		On entry : 0/0
 12608 ;;		On exit  : 0/0
 12609 ;;		Unchanged: 0/0
 12610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;Total ram usage:        2 bytes
 12616 ;; Hardware stack levels used:    1
 12617 ;; Hardware stack levels required when called:    6
 12618 ;; This function calls:
 12619 ;;		_Flash_Memory_Unlock
 12620 ;; This function is called by:
 12621 ;;		_Flash_Memory_Initialization
 12622 ;;		_Flash_Memory_Modify
 12623 ;; This function uses a non-reentrant model
 12624 ;;
 12625                           
 12626                           
 12627                           ;psect for function _Flash_Memory_Write
 12628  1176                     _Flash_Memory_Write:	
 12629                           
 12630                           ;MCU_B1.c: 1015: char i = 0;
 12631                           
 12632                           ;incstack = 0
 12633                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12634  1176  0020               	movlb	0	; select bank0
 12635  1177  01A7               	clrf	Flash_Memory_Write@i
 12636                           
 12637                           ;MCU_B1.c: 1016: CFGS = 0;
 12638  1178  0023               	movlb	3	; select bank3
 12639  1179  1315               	bcf	21,6	;volatile
 12640                           
 12641                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12642  117A  3030               	movlw	48
 12643  117B  0092               	movwf	18	;volatile
 12644                           
 12645                           ;MCU_B1.c: 1018: PMDATH = 0;
 12646  117C  0194               	clrf	20	;volatile
 12647                           
 12648                           ;MCU_B1.c: 1019: FREE = 0;
 12649  117D  1215               	bcf	21,4	;volatile
 12650                           
 12651                           ;MCU_B1.c: 1020: LWLO = 1;
 12652  117E  1695               	bsf	21,5	;volatile
 12653                           
 12654                           ;MCU_B1.c: 1021: WREN = 1;
 12655  117F  1515               	bsf	21,2	;volatile
 12656                           
 12657                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12658  1180  0020               	movlb	0	; select bank0
 12659  1181  01A7               	clrf	Flash_Memory_Write@i
 12660  1182  3020               	movlw	32
 12661  1183  0227               	subwf	Flash_Memory_Write@i,w
 12662  1184  1803               	btfsc	3,0
 12663  1185  299E               	goto	l1244
 12664  1186                     l9221:	
 12665                           
 12666                           ;MCU_B1.c: 1023: PMADRL = i;
 12667  1186  0827               	movf	Flash_Memory_Write@i,w
 12668  1187  0023               	movlb	3	; select bank3
 12669  1188  0091               	movwf	17	;volatile
 12670                           
 12671                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12672  1189  0020               	movlb	0	; select bank0
 12673  118A  0827               	movf	Flash_Memory_Write@i,w
 12674  118B  3EBE               	addlw	_Memory& (0+255)
 12675  118C  0086               	movwf	6
 12676  118D  3001               	movlw	1	; select bank3/4
 12677  118E  0087               	movwf	7
 12678  118F  0801               	movf	1,w
 12679  1190  0023               	movlb	3	; select bank3
 12680  1191  0093               	movwf	19	;volatile
 12681                           
 12682                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12683  1192  319C  241B  3191   	fcall	_Flash_Memory_Unlock
 12684  1195  3001               	movlw	1
 12685  1196  0020               	movlb	0	; select bank0
 12686  1197  00A6               	movwf	??_Flash_Memory_Write
 12687  1198  0826               	movf	??_Flash_Memory_Write,w
 12688  1199  07A7               	addwf	Flash_Memory_Write@i,f
 12689  119A  3020               	movlw	32
 12690  119B  0227               	subwf	Flash_Memory_Write@i,w
 12691  119C  1C03               	skipc
 12692  119D  2986               	goto	l9221
 12693  119E                     l1244:	
 12694                           
 12695                           ;MCU_B1.c: 1026: }
 12696                           ;MCU_B1.c: 1027: LWLO = 0;
 12697  119E  0023               	movlb	3	; select bank3
 12698  119F  1295               	bcf	21,5	;volatile
 12699                           
 12700                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12701  11A0  319C  241B         	fcall	_Flash_Memory_Unlock
 12702                           
 12703                           ;MCU_B1.c: 1029: WREN = 0;
 12704  11A2  0023               	movlb	3	; select bank3
 12705  11A3  1115               	bcf	21,2	;volatile
 12706  11A4  0008               	return
 12707  11A5                     __end_of_Flash_Memory_Write:	
 12708                           
 12709                           	psect	text82
 12710  1C1B                     __ptext82:	
 12711 ;; *************** function _Flash_Memory_Unlock *****************
 12712 ;; Defined at:
 12713 ;;		line 993 in file "../src/MCU_B1.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;		None
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;		None
 12718 ;; Return value:  Size  Location     Type
 12719 ;;		None               void
 12720 ;; Registers used:
 12721 ;;		wreg
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12731 ;;Total ram usage:        0 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; Hardware stack levels required when called:    5
 12734 ;; This function calls:
 12735 ;;		Nothing
 12736 ;; This function is called by:
 12737 ;;		_Flash_Memory_Write
 12738 ;;		_Flash_Memory_Erasing
 12739 ;; This function uses a non-reentrant model
 12740 ;;
 12741                           
 12742                           
 12743                           ;psect for function _Flash_Memory_Unlock
 12744  1C1B                     _Flash_Memory_Unlock:	
 12745                           
 12746                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12747                           
 12748                           ;incstack = 0
 12749                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12750  1C1B  3055               	movlw	85
 12751  1C1C  0023               	movlb	3	; select bank3
 12752  1C1D  0096               	movwf	22	;volatile
 12753                           
 12754                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12755  1C1E  30AA               	movlw	170
 12756  1C1F  0096               	movwf	22	;volatile
 12757                           
 12758                           ;MCU_B1.c: 996: WR = 1;
 12759  1C20  1495               	bsf	21,1	;volatile
 12760                           
 12761                           ;MCU_B1.c: 997: __nop();
 12762  1C21  0000               	nop
 12763                           
 12764                           ;MCU_B1.c: 998: __nop();
 12765  1C22  0000               	nop
 12766  1C23  0008               	return
 12767  1C24                     __end_of_Flash_Memory_Unlock:	
 12768                           
 12769                           	psect	text83
 12770  1F94                     __ptext83:	
 12771 ;; *************** function _Flash_Memory_Read *****************
 12772 ;; Defined at:
 12773 ;;		line 1002 in file "../src/MCU_B1.c"
 12774 ;; Parameters:    Size  Location     Type
 12775 ;;  address         1    wreg     unsigned char 
 12776 ;; Auto vars:     Size  Location     Type
 12777 ;;  address         1    8[BANK0 ] unsigned char 
 12778 ;;  ret             1    9[BANK0 ] unsigned char 
 12779 ;;  i               1    7[BANK0 ] unsigned char 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  1    wreg      unsigned char 
 12782 ;; Registers used:
 12783 ;;		wreg, status,2
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:        4 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    5
 12796 ;; This function calls:
 12797 ;;		Nothing
 12798 ;; This function is called by:
 12799 ;;		_Flash_Memory_Initialization
 12800 ;;		_Flash_Memory_Modify
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           
 12805                           ;psect for function _Flash_Memory_Read
 12806  1F94                     _Flash_Memory_Read:	
 12807                           
 12808                           ;incstack = 0
 12809                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12810                           ;Flash_Memory_Read@address stored from wreg
 12811  1F94  0020               	movlb	0	; select bank0
 12812  1F95  00A8               	movwf	Flash_Memory_Read@address
 12813                           
 12814                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 12815  1F96  01A7               	clrf	Flash_Memory_Read@i
 12816  1F97  01A9               	clrf	Flash_Memory_Read@ret
 12817                           
 12818                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 12819  1F98  3030               	movlw	48
 12820  1F99  0023               	movlb	3	; select bank3
 12821  1F9A  0092               	movwf	18	;volatile
 12822                           
 12823                           ;MCU_B1.c: 1005: PMADRL = address;
 12824  1F9B  0020               	movlb	0	; select bank0
 12825  1F9C  0828               	movf	Flash_Memory_Read@address,w
 12826  1F9D  0023               	movlb	3	; select bank3
 12827  1F9E  0091               	movwf	17	;volatile
 12828                           
 12829                           ;MCU_B1.c: 1006: CFGS = 0;
 12830  1F9F  1315               	bcf	21,6	;volatile
 12831                           
 12832                           ;MCU_B1.c: 1007: RD = 1;
 12833  1FA0  1415               	bsf	21,0	;volatile
 12834                           
 12835                           ;MCU_B1.c: 1008: i = PMDATH;
 12836  1FA1  0814               	movf	20,w	;volatile
 12837  1FA2  0020               	movlb	0	; select bank0
 12838  1FA3  00A6               	movwf	??_Flash_Memory_Read
 12839  1FA4  0826               	movf	??_Flash_Memory_Read,w
 12840  1FA5  00A7               	movwf	Flash_Memory_Read@i
 12841                           
 12842                           ;MCU_B1.c: 1009: ret = PMDATL;
 12843  1FA6  0023               	movlb	3	; select bank3
 12844  1FA7  0813               	movf	19,w	;volatile
 12845  1FA8  0020               	movlb	0	; select bank0
 12846  1FA9  00A6               	movwf	??_Flash_Memory_Read
 12847  1FAA  0826               	movf	??_Flash_Memory_Read,w
 12848  1FAB  00A9               	movwf	Flash_Memory_Read@ret
 12849                           
 12850                           ;MCU_B1.c: 1010: return ret;
 12851  1FAC  0829               	movf	Flash_Memory_Read@ret,w
 12852  1FAD  0008               	return
 12853  1FAE                     __end_of_Flash_Memory_Read:	
 12854                           
 12855                           	psect	text84
 12856  063F                     __ptext84:	
 12857 ;; *************** function _Exception_Main *****************
 12858 ;; Defined at:
 12859 ;;		line 499 in file "../src/Main_B1.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;		None
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;  i               2   24[BANK0 ] int 
 12864 ;;  i               2   22[BANK0 ] int 
 12865 ;;  error           1   27[BANK0 ] unsigned char 
 12866 ;;  lights          1   26[BANK0 ] unsigned char 
 12867 ;;  count           1   21[BANK0 ] unsigned char 
 12868 ;;  status          1   20[BANK0 ] unsigned char 
 12869 ;; Return value:  Size  Location     Type
 12870 ;;		None               void
 12871 ;; Registers used:
 12872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12873 ;; Tracked objects:
 12874 ;;		On entry : 0/0
 12875 ;;		On exit  : 0/0
 12876 ;;		Unchanged: 0/0
 12877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12879 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12882 ;;Total ram usage:        9 bytes
 12883 ;; Hardware stack levels used:    1
 12884 ;; Hardware stack levels required when called:    7
 12885 ;; This function calls:
 12886 ;;		_getDimmerLights_Line
 12887 ;;		_getDimmerLights_Status
 12888 ;;		_getMain_All_Error_Status
 12889 ;;		_getMain_All_LightsStatus
 12890 ;;		_setBuz
 12891 ;;		_setDimmerLights_SwOff
 12892 ;;		_setLED
 12893 ;; This function is called by:
 12894 ;;		_main
 12895 ;; This function uses a non-reentrant model
 12896 ;;
 12897                           
 12898                           
 12899                           ;psect for function _Exception_Main
 12900  063F                     _Exception_Main:	
 12901                           
 12902                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12903                           
 12904                           ;incstack = 0
 12905                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12906  063F  3000               	movlw	0
 12907  0640  3191  21D8  3186   	fcall	_getMain_All_Error_Status
 12908  0643  0020               	movlb	0	; select bank0
 12909  0644  00B3               	movwf	??_Exception_Main
 12910  0645  0833               	movf	??_Exception_Main,w
 12911  0646  00BB               	movwf	Exception_Main@error
 12912                           
 12913                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12914  0647  01BA               	clrf	Exception_Main@lights
 12915  0648  01B5               	clrf	Exception_Main@count
 12916  0649  0AB5               	incf	Exception_Main@count,f
 12917                           
 12918                           ;Main_B1.c: 502: char status = 0;
 12919  064A  01B4               	clrf	Exception_Main@status
 12920                           
 12921                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12922  064B  0022               	movlb	2	; select bank2
 12923  064C  1DAA               	btfss	(_myMain^(0+256)+10),3
 12924  064D  2E5D               	goto	l11921
 12925                           
 12926                           ;Main_B1.c: 505: if (error == 0) {
 12927  064E  0020               	movlb	0	; select bank0
 12928  064F  08BB               	movf	Exception_Main@error,f
 12929  0650  1D03               	skipz
 12930  0651  0008               	return
 12931                           
 12932                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12933  0652  0022               	movlb	2	; select bank2
 12934  0653  11AA               	bcf	(_myMain^(0+256)+10),3
 12935                           
 12936                           ;Main_B1.c: 511: setLED(error, 110);
 12937  0654  306E               	movlw	110
 12938  0655  0020               	movlb	0	; select bank0
 12939  0656  00B3               	movwf	??_Exception_Main
 12940  0657  0833               	movf	??_Exception_Main,w
 12941  0658  00A8               	movwf	setLED@command
 12942  0659  083B               	movf	Exception_Main@error,w
 12943  065A  3192  2272         	fcall	_setLED
 12944                           
 12945                           ;Main_B1.c: 522: }
 12946                           ;Main_B1.c: 523: } else {
 12947  065C  0008               	return
 12948  065D                     l11921:	
 12949                           
 12950                           ;Main_B1.c: 524: if (error != 0) {
 12951  065D  0020               	movlb	0	; select bank0
 12952  065E  083B               	movf	Exception_Main@error,w
 12953  065F  1903               	btfsc	3,2
 12954  0660  0008               	return
 12955                           
 12956                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12957  0661  0022               	movlb	2	; select bank2
 12958  0662  15AA               	bsf	(_myMain^(0+256)+10),3
 12959                           
 12960                           ;Main_B1.c: 529: setLED(error, 111);
 12961  0663  306F               	movlw	111
 12962  0664  0020               	movlb	0	; select bank0
 12963  0665  00B3               	movwf	??_Exception_Main
 12964  0666  0833               	movf	??_Exception_Main,w
 12965  0667  00A8               	movwf	setLED@command
 12966  0668  083B               	movf	Exception_Main@error,w
 12967  0669  3192  2272  3186   	fcall	_setLED
 12968                           
 12969                           ;Main_B1.c: 538: switch (error) {
 12970  066C  2F06               	goto	l11969
 12971  066D                     l11927:	
 12972                           ;Main_B1.c: 539: case 2:
 12973                           
 12974                           
 12975                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 12976  066D  319C  2424  3186   	fcall	_getMain_All_LightsStatus
 12977  0670  3A01               	xorlw	1
 12978  0671  1D03               	skipz
 12979  0672  2E7C               	goto	l11931
 12980                           
 12981                           ;Main_B1.c: 547: setBuz(10, 300);
 12982  0673  302C               	movlw	44
 12983  0674  0020               	movlb	0	; select bank0
 12984  0675  00AF               	movwf	setBuz@time
 12985  0676  3001               	movlw	1
 12986  0677  00B0               	movwf	setBuz@time+1
 12987  0678  300A               	movlw	10
 12988  0679  3195  2550  3186   	fcall	_setBuz
 12989  067C                     l11931:	
 12990                           
 12991                           ;Main_B1.c: 548: }
 12992                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 12993  067C  0020               	movlb	0	; select bank0
 12994  067D  01B6               	clrf	Exception_Main@i
 12995  067E  01B7               	clrf	Exception_Main@i+1
 12996  067F                     l11941:	
 12997  067F  0837               	movf	Exception_Main@i+1,w
 12998  0680  3A80               	xorlw	128
 12999  0681  00B3               	movwf	??_Exception_Main
 13000  0682  3080               	movlw	128
 13001  0683  0233               	subwf	??_Exception_Main,w
 13002  0684  1D03               	skipz
 13003  0685  2E88               	goto	u14755
 13004  0686  0835               	movf	Exception_Main@count,w
 13005  0687  0236               	subwf	Exception_Main@i,w
 13006  0688                     u14755:	
 13007  0688  1803               	btfsc	3,0
 13008  0689  2EA9               	goto	u14750
 13009                           
 13010                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13011  068A  0020               	movlb	0	; select bank0
 13012  068B  0836               	movf	Exception_Main@i,w
 13013  068C  3E01               	addlw	1
 13014  068D  319D  2514  3186   	fcall	_getDimmerLights_Status
 13015  0690  3A01               	xorlw	1
 13016  0691  1D03               	skipz
 13017  0692  2EA3               	goto	l11939
 13018                           
 13019                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13020  0693  0020               	movlb	0	; select bank0
 13021  0694  0864               	movf	_DimmerLights,w
 13022  0695  0086               	movwf	6
 13023  0696  3001               	movlw	1	; select bank2/3
 13024  0697  0087               	movwf	7
 13025  0698  1401               	bsf	1,0
 13026                           
 13027                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13028  0699  0A64               	incf	_DimmerLights,w
 13029  069A  0086               	movwf	6
 13030  069B  3001               	movlw	1	; select bank2/3
 13031  069C  0087               	movwf	7
 13032  069D  1001               	bcf	1,0
 13033                           
 13034                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13035  069E  0836               	movf	Exception_Main@i,w
 13036  069F  3E01               	addlw	1
 13037  06A0  3193  2315  3186   	fcall	_setDimmerLights_SwOff
 13038  06A3                     l11939:	
 13039  06A3  3001               	movlw	1
 13040  06A4  0020               	movlb	0	; select bank0
 13041  06A5  07B6               	addwf	Exception_Main@i,f
 13042  06A6  3000               	movlw	0
 13043  06A7  3DB7               	addwfc	Exception_Main@i+1,f
 13044  06A8  2E7F               	goto	l11941
 13045  06A9                     u14750:	
 13046  06A9  0020               	movlb	0	; select bank0
 13047  06AA  0008               	return
 13048  06AB                     l11943:	
 13049                           ;Main_B1.c: 561: case 3:
 13050                           
 13051                           ;Main_B1.c: 556: }
 13052                           ;Main_B1.c: 557: }
 13053                           ;Main_B1.c: 560: break;
 13054                           
 13055                           
 13056                           ;Main_B1.c: 563: setBuz(5, 300);
 13057  06AB  302C               	movlw	44
 13058  06AC  0020               	movlb	0	; select bank0
 13059  06AD  00AF               	movwf	setBuz@time
 13060  06AE  3001               	movlw	1
 13061  06AF  00B0               	movwf	setBuz@time+1
 13062  06B0  3005               	movlw	5
 13063  06B1  3195  2550  3186   	fcall	_setBuz
 13064                           
 13065                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13066  06B4  319C  244F  3186   	fcall	_getDimmerLights_Line
 13067  06B7  0020               	movlb	0	; select bank0
 13068  06B8  00B3               	movwf	??_Exception_Main
 13069  06B9  0833               	movf	??_Exception_Main,w
 13070  06BA  00BA               	movwf	Exception_Main@lights
 13071                           
 13072                           ;Main_B1.c: 565: if (lights == 0) {
 13073  06BB  08BA               	movf	Exception_Main@lights,f
 13074  06BC  1D03               	skipz
 13075  06BD  2EEC               	goto	l11961
 13076                           
 13077                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13078  06BE  01B8               	clrf	Exception_Main@i_3517
 13079  06BF  01B9               	clrf	Exception_Main@i_3517+1
 13080  06C0                     l11959:	
 13081  06C0  0839               	movf	Exception_Main@i_3517+1,w
 13082  06C1  3A80               	xorlw	128
 13083  06C2  00B3               	movwf	??_Exception_Main
 13084  06C3  3080               	movlw	128
 13085  06C4  0233               	subwf	??_Exception_Main,w
 13086  06C5  1D03               	skipz
 13087  06C6  2EC9               	goto	u14785
 13088  06C7  0835               	movf	Exception_Main@count,w
 13089  06C8  0238               	subwf	Exception_Main@i_3517,w
 13090  06C9                     u14785:	
 13091  06C9  1803               	btfsc	3,0
 13092  06CA  2EEA               	goto	u14780
 13093                           
 13094                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13095  06CB  0020               	movlb	0	; select bank0
 13096  06CC  0838               	movf	Exception_Main@i_3517,w
 13097  06CD  3E01               	addlw	1
 13098  06CE  319D  2514  3186   	fcall	_getDimmerLights_Status
 13099  06D1  3A01               	xorlw	1
 13100  06D2  1D03               	skipz
 13101  06D3  2EE4               	goto	l11957
 13102                           
 13103                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13104  06D4  0020               	movlb	0	; select bank0
 13105  06D5  0864               	movf	_DimmerLights,w
 13106  06D6  0086               	movwf	6
 13107  06D7  3001               	movlw	1	; select bank2/3
 13108  06D8  0087               	movwf	7
 13109  06D9  1401               	bsf	1,0
 13110                           
 13111                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13112  06DA  0A64               	incf	_DimmerLights,w
 13113  06DB  0086               	movwf	6
 13114  06DC  3001               	movlw	1	; select bank2/3
 13115  06DD  0087               	movwf	7
 13116  06DE  1001               	bcf	1,0
 13117                           
 13118                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13119  06DF  0838               	movf	Exception_Main@i_3517,w
 13120  06E0  3E01               	addlw	1
 13121  06E1  3193  2315  3186   	fcall	_setDimmerLights_SwOff
 13122  06E4                     l11957:	
 13123  06E4  3001               	movlw	1
 13124  06E5  0020               	movlb	0	; select bank0
 13125  06E6  07B8               	addwf	Exception_Main@i_3517,f
 13126  06E7  3000               	movlw	0
 13127  06E8  3DB9               	addwfc	Exception_Main@i_3517+1,f
 13128  06E9  2EC0               	goto	l11959
 13129  06EA                     u14780:	
 13130  06EA  0020               	movlb	0	; select bank0
 13131  06EB  0008               	return
 13132  06EC                     l11961:	
 13133                           ;Main_B1.c: 573: }
 13134                           ;Main_B1.c: 574: }
 13135                           ;Main_B1.c: 575: } else {
 13136                           
 13137                           
 13138                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13139  06EC  0020               	movlb	0	; select bank0
 13140  06ED  083A               	movf	Exception_Main@lights,w
 13141  06EE  319D  2514  3186   	fcall	_getDimmerLights_Status
 13142  06F1  3A01               	xorlw	1
 13143  06F2  1903               	btfsc	3,2
 13144  06F3  2EF6               	goto	l11963
 13145  06F4  0020               	movlb	0	; select bank0
 13146  06F5  0008               	return
 13147  06F6                     l11963:	
 13148                           
 13149                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13150  06F6  0020               	movlb	0	; select bank0
 13151  06F7  0864               	movf	_DimmerLights,w
 13152  06F8  0086               	movwf	6
 13153  06F9  3001               	movlw	1	; select bank2/3
 13154  06FA  0087               	movwf	7
 13155  06FB  1401               	bsf	1,0
 13156                           
 13157                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13158  06FC  0A64               	incf	_DimmerLights,w
 13159  06FD  0086               	movwf	6
 13160  06FE  3001               	movlw	1	; select bank2/3
 13161  06FF  0087               	movwf	7
 13162  0700  1001               	bcf	1,0
 13163                           
 13164                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13165  0701  083A               	movf	Exception_Main@lights,w
 13166  0702  3193  2315         	fcall	_setDimmerLights_SwOff
 13167  0704  0020               	movlb	0	; select bank0
 13168  0705  0008               	return
 13169  0706                     l11969:	
 13170                           ;Main_B1.c: 586: }
 13171                           
 13172                           ;Main_B1.c: 582: }
 13173                           ;Main_B1.c: 583: }
 13174                           ;Main_B1.c: 585: break;
 13175                           
 13176  0706  0020               	movlb	0	; select bank0
 13177  0707  083B               	movf	Exception_Main@error,w
 13178                           
 13179                           ; Switch size 1, requested type "space"
 13180                           ; Number of cases is 2, Range of values is 2 to 3
 13181                           ; switch strategies available:
 13182                           ; Name         Instructions Cycles
 13183                           ; simple_byte            7     4 (average)
 13184                           ; direct_byte           13     9 (fixed)
 13185                           ; jumptable            263     9 (fixed)
 13186                           ;	Chosen strategy is simple_byte
 13187  0708  3A02               	xorlw	2	; case 2
 13188  0709  1903               	skipnz
 13189  070A  2E6D               	goto	l11927
 13190  070B  3A01               	xorlw	1	; case 3
 13191  070C  1903               	skipnz
 13192  070D  2EAB               	goto	l11943
 13193  070E  2F10               	goto	l1485
 13194  070F  0008               	return
 13195  0710                     l1485:	
 13196  0710  0008               	return
 13197  0711                     __end_of_Exception_Main:	
 13198                           
 13199                           	psect	text85
 13200  1C4F                     __ptext85:	
 13201 ;; *************** function _getDimmerLights_Line *****************
 13202 ;; Defined at:
 13203 ;;		line 978 in file "../src/Dimmer_B1.c"
 13204 ;; Parameters:    Size  Location     Type
 13205 ;;		None
 13206 ;; Auto vars:     Size  Location     Type
 13207 ;;  line            1    6[BANK0 ] unsigned char 
 13208 ;; Return value:  Size  Location     Type
 13209 ;;                  1    wreg      unsigned char 
 13210 ;; Registers used:
 13211 ;;		wreg, status,2
 13212 ;; Tracked objects:
 13213 ;;		On entry : 0/0
 13214 ;;		On exit  : 0/0
 13215 ;;		Unchanged: 0/0
 13216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13221 ;;Total ram usage:        1 bytes
 13222 ;; Hardware stack levels used:    1
 13223 ;; Hardware stack levels required when called:    5
 13224 ;; This function calls:
 13225 ;;		Nothing
 13226 ;; This function is called by:
 13227 ;;		_Exception_Main
 13228 ;; This function uses a non-reentrant model
 13229 ;;
 13230                           
 13231                           
 13232                           ;psect for function _getDimmerLights_Line
 13233  1C4F                     _getDimmerLights_Line:	
 13234                           
 13235                           ;Dimmer_B1.c: 979: char line = 0;
 13236                           
 13237                           ;incstack = 0
 13238                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13239  1C4F  0020               	movlb	0	; select bank0
 13240  1C50  01A6               	clrf	getDimmerLights_Line@line
 13241                           
 13242                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13243  1C51  0022               	movlb	2	; select bank2
 13244  1C52  1CDE               	btfss	(_DimmerLights1^(0+256)+1),1
 13245  1C53  2C57               	goto	l7025
 13246                           
 13247                           ;Dimmer_B1.c: 982: line = 1;
 13248  1C54  0020               	movlb	0	; select bank0
 13249  1C55  01A6               	clrf	getDimmerLights_Line@line
 13250  1C56  0AA6               	incf	getDimmerLights_Line@line,f
 13251  1C57                     l7025:	
 13252                           
 13253                           ;Dimmer_B1.c: 983: }
 13254                           ;Dimmer_B1.c: 995: return line;
 13255  1C57  0020               	movlb	0	; select bank0
 13256  1C58  0826               	movf	getDimmerLights_Line@line,w
 13257  1C59  0008               	return
 13258  1C5A                     __end_of_getDimmerLights_Line:	
 13259                           
 13260                           	psect	text86
 13261  1FC8                     __ptext86:	
 13262 ;; *************** function _DimmerLights_Main *****************
 13263 ;; Defined at:
 13264 ;;		line 736 in file "../src/Dimmer_B1.c"
 13265 ;; Parameters:    Size  Location     Type
 13266 ;;		None
 13267 ;; Auto vars:     Size  Location     Type
 13268 ;;		None
 13269 ;; Return value:  Size  Location     Type
 13270 ;;		None               void
 13271 ;; Registers used:
 13272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13273 ;; Tracked objects:
 13274 ;;		On entry : 0/0
 13275 ;;		On exit  : 0/0
 13276 ;;		Unchanged: 0/0
 13277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;Total ram usage:        0 bytes
 13283 ;; Hardware stack levels used:    1
 13284 ;; Hardware stack levels required when called:   10
 13285 ;; This function calls:
 13286 ;;		_getLoad_OK
 13287 ;;		_getMain_All_Error_Status
 13288 ;;		_getMain_All_LightsStatus
 13289 ;;		_setDimmerLights_Main
 13290 ;; This function is called by:
 13291 ;;		_main
 13292 ;; This function uses a non-reentrant model
 13293 ;;
 13294                           
 13295                           
 13296                           ;psect for function _DimmerLights_Main
 13297  1FC8                     _DimmerLights_Main:	
 13298                           
 13299                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13300                           
 13301                           ;incstack = 0
 13302                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13303  1FC8  0022               	movlb	2	; select bank2
 13304  1FC9  1CAD               	btfss	_Dimmer^(0+256),1
 13305  1FCA  2FE0               	goto	l11627
 13306                           
 13307                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13308  1FCB  319B  23E8  319F   	fcall	_getLoad_OK
 13309  1FCE  3A01               	xorlw	1
 13310  1FCF  1903               	skipnz
 13311  1FD0  2FDE               	goto	l750
 13312  1FD1  3000               	movlw	0
 13313  1FD2  3191  21D8  319F   	fcall	_getMain_All_Error_Status
 13314  1FD5  3800               	iorlw	0
 13315  1FD6  1D03               	skipz
 13316  1FD7  2FDE               	goto	l750
 13317  1FD8  319C  2424  319F   	fcall	_getMain_All_LightsStatus
 13318  1FDB  3800               	iorlw	0
 13319  1FDC  1D03               	skipz
 13320  1FDD  2FE0               	goto	l11627
 13321  1FDE                     l750:	
 13322                           
 13323                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13324  1FDE  0022               	movlb	2	; select bank2
 13325  1FDF  10AD               	bcf	_Dimmer^(0+256),1
 13326  1FE0                     l11627:	
 13327                           
 13328                           ;Dimmer_B1.c: 742: }
 13329                           ;Dimmer_B1.c: 743: }
 13330                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13331  1FE0  3001               	movlw	1
 13332  1FE1  3197  2793         	fcall	_setDimmerLights_Main
 13333  1FE3  0008               	return
 13334  1FE4                     __end_of_DimmerLights_Main:	
 13335                           
 13336                           	psect	text87
 13337  1793                     __ptext87:	
 13338 ;; *************** function _setDimmerLights_Main *****************
 13339 ;; Defined at:
 13340 ;;		line 765 in file "../src/Dimmer_B1.c"
 13341 ;; Parameters:    Size  Location     Type
 13342 ;;  lights          1    wreg     unsigned char 
 13343 ;; Auto vars:     Size  Location     Type
 13344 ;;  lights          1    0[BANK2 ] unsigned char 
 13345 ;; Return value:  Size  Location     Type
 13346 ;;		None               void
 13347 ;; Registers used:
 13348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13349 ;; Tracked objects:
 13350 ;;		On entry : 0/0
 13351 ;;		On exit  : 0/0
 13352 ;;		Unchanged: 0/0
 13353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13355 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
 13356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13357 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;Total ram usage:        1 bytes
 13359 ;; Hardware stack levels used:    1
 13360 ;; Hardware stack levels required when called:    9
 13361 ;; This function calls:
 13362 ;;		_DimmerLights_SelectPointer
 13363 ;;		_getDimmerLights_Allow_Condition
 13364 ;;		_getMain_All_LightsStatus
 13365 ;;		_setDimmerLights_Dimming
 13366 ;;		_setDimmerLights_OnOff
 13367 ;; This function is called by:
 13368 ;;		_DimmerLights_Main
 13369 ;; This function uses a non-reentrant model
 13370 ;;
 13371                           
 13372                           
 13373                           ;psect for function _setDimmerLights_Main
 13374  1793                     _setDimmerLights_Main:	
 13375                           
 13376                           ;incstack = 0
 13377                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13378                           ;setDimmerLights_Main@lights stored from wreg
 13379  1793  0022               	movlb	2	; select bank2
 13380  1794  00EE               	movwf	setDimmerLights_Main@lights^(0+256)
 13381                           
 13382                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13383  1795  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13384  1796  319C  2439  3197   	fcall	_DimmerLights_SelectPointer
 13385                           
 13386                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13387  1799  0020               	movlb	0	; select bank0
 13388  179A  0864               	movf	_DimmerLights,w
 13389  179B  0086               	movwf	6
 13390  179C  3001               	movlw	1	; select bank2/3
 13391  179D  0087               	movwf	7
 13392  179E  1C81               	btfss	1,1
 13393  179F  2FC3               	goto	l11339
 13394                           
 13395                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13396  17A0  0022               	movlb	2	; select bank2
 13397  17A1  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13398  17A2  319E  26A7  3197   	fcall	_getDimmerLights_Allow_Condition
 13399  17A5  3800               	iorlw	0
 13400  17A6  1D03               	skipz
 13401  17A7  0008               	return
 13402                           
 13403                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13404  17A8  0020               	movlb	0	; select bank0
 13405  17A9  0864               	movf	_DimmerLights,w
 13406  17AA  0086               	movwf	6
 13407  17AB  3001               	movlw	1	; select bank2/3
 13408  17AC  0087               	movwf	7
 13409  17AD  1081               	bcf	1,1
 13410                           
 13411                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13412  17AE  0864               	movf	_DimmerLights,w
 13413  17AF  0086               	movwf	6
 13414  17B0  3001               	movlw	1	; select bank2/3
 13415  17B1  0087               	movwf	7
 13416  17B2  1D01               	btfss	1,2
 13417  17B3  2FBC               	goto	l11337
 13418                           
 13419                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13420  17B4  0021               	movlb	1	; select bank1
 13421  17B5  01EB               	clrf	setDimmerLights_OnOff@command^(0+128)
 13422  17B6  0AEB               	incf	setDimmerLights_OnOff@command^(0+128),f
 13423  17B7  0022               	movlb	2	; select bank2
 13424  17B8  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13425  17B9  3187  2711         	fcall	_setDimmerLights_OnOff
 13426                           
 13427                           ;Dimmer_B1.c: 773: } else {
 13428  17BB  0008               	return
 13429  17BC                     l11337:	
 13430                           
 13431                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13432  17BC  0021               	movlb	1	; select bank1
 13433  17BD  01EB               	clrf	setDimmerLights_OnOff@command^(0+128)
 13434  17BE  0022               	movlb	2	; select bank2
 13435  17BF  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13436  17C0  3187  2711         	fcall	_setDimmerLights_OnOff
 13437                           
 13438                           ;Dimmer_B1.c: 775: }
 13439                           ;Dimmer_B1.c: 776: }
 13440                           ;Dimmer_B1.c: 777: } else {
 13441  17C2  0008               	return
 13442  17C3                     l11339:	
 13443                           
 13444                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13445  17C3  319C  2424  3197   	fcall	_getMain_All_LightsStatus
 13446  17C6  3A01               	xorlw	1
 13447  17C7  1D03               	skipz
 13448  17C8  2FF3               	goto	l11351
 13449                           
 13450                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13451  17C9  0020               	movlb	0	; select bank0
 13452  17CA  0864               	movf	_DimmerLights,w
 13453  17CB  0086               	movwf	6
 13454  17CC  3001               	movlw	1	; select bank2/3
 13455  17CD  0087               	movwf	7
 13456  17CE  1E01               	btfss	1,4
 13457  17CF  0008               	return
 13458                           
 13459                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13460  17D0  0022               	movlb	2	; select bank2
 13461  17D1  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13462  17D2  319E  26A7  3197   	fcall	_getDimmerLights_Allow_Condition
 13463  17D5  3800               	iorlw	0
 13464  17D6  1D03               	skipz
 13465  17D7  0008               	return
 13466                           
 13467                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13468  17D8  0020               	movlb	0	; select bank0
 13469  17D9  0864               	movf	_DimmerLights,w
 13470  17DA  0086               	movwf	6
 13471  17DB  3001               	movlw	1	; select bank2/3
 13472  17DC  0087               	movwf	7
 13473  17DD  1201               	bcf	1,4
 13474                           
 13475                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13476  17DE  0864               	movf	_DimmerLights,w
 13477  17DF  0086               	movwf	6
 13478  17E0  3001               	movlw	1	; select bank2/3
 13479  17E1  0087               	movwf	7
 13480  17E2  1E81               	btfss	1,5
 13481  17E3  2FEC               	goto	l11349
 13482                           
 13483                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13484  17E4  0021               	movlb	1	; select bank1
 13485  17E5  01E8               	clrf	setDimmerLights_Dimming@status^(0+128)
 13486  17E6  0AE8               	incf	setDimmerLights_Dimming@status^(0+128),f
 13487  17E7  0022               	movlb	2	; select bank2
 13488  17E8  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13489  17E9  3194  24FB         	fcall	_setDimmerLights_Dimming
 13490                           
 13491                           ;Dimmer_B1.c: 784: } else {
 13492  17EB  0008               	return
 13493  17EC                     l11349:	
 13494                           
 13495                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13496  17EC  0021               	movlb	1	; select bank1
 13497  17ED  01E8               	clrf	setDimmerLights_Dimming@status^(0+128)
 13498  17EE  0022               	movlb	2	; select bank2
 13499  17EF  086E               	movf	setDimmerLights_Main@lights^(0+256),w
 13500  17F0  3194  24FB         	fcall	_setDimmerLights_Dimming
 13501                           
 13502                           ;Dimmer_B1.c: 786: }
 13503                           ;Dimmer_B1.c: 787: }
 13504                           ;Dimmer_B1.c: 788: }
 13505                           ;Dimmer_B1.c: 789: } else {
 13506  17F2  0008               	return
 13507  17F3                     l11351:	
 13508                           
 13509                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13510  17F3  0020               	movlb	0	; select bank0
 13511  17F4  0864               	movf	_DimmerLights,w
 13512  17F5  0086               	movwf	6
 13513  17F6  3001               	movlw	1	; select bank2/3
 13514  17F7  0087               	movwf	7
 13515  17F8  1E01               	btfss	1,4
 13516  17F9  0008               	return
 13517                           
 13518                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13519  17FA  0864               	movf	_DimmerLights,w
 13520  17FB  0086               	movwf	6
 13521  17FC  3001               	movlw	1	; select bank2/3
 13522  17FD  0087               	movwf	7
 13523  17FE  1201               	bcf	1,4
 13524  17FF  0008               	return
 13525  1800                     __end_of_setDimmerLights_Main:	
 13526                           
 13527                           	psect	text88
 13528  0711                     __ptext88:	
 13529 ;; *************** function _setDimmerLights_OnOff *****************
 13530 ;; Defined at:
 13531 ;;		line 799 in file "../src/Dimmer_B1.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;  lights          1    wreg     unsigned char 
 13534 ;;  command         1   16[BANK1 ] unsigned char 
 13535 ;; Auto vars:     Size  Location     Type
 13536 ;;  lights          1   19[BANK1 ] unsigned char 
 13537 ;; Return value:  Size  Location     Type
 13538 ;;		None               void
 13539 ;; Registers used:
 13540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13541 ;; Tracked objects:
 13542 ;;		On entry : 0/0
 13543 ;;		On exit  : 0/0
 13544 ;;		Unchanged: 0/0
 13545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13546 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13547 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13549 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;Total ram usage:        4 bytes
 13551 ;; Hardware stack levels used:    1
 13552 ;; Hardware stack levels required when called:    8
 13553 ;; This function calls:
 13554 ;;		_getCmd_Status
 13555 ;;		_getDelayOff_GO
 13556 ;;		_getDimmerLights_PercentToValue
 13557 ;;		_getDimmerLights_ValueToPercent
 13558 ;;		_getMain_All_LightsStatus
 13559 ;;		_setCmd_Status
 13560 ;;		_setDelayOff_GO
 13561 ;;		_setDimmerIntr_ControlStatus
 13562 ;;		_setDimmerIntr_DimmingValue
 13563 ;;		_setDimmerIntr_Dimming_RF
 13564 ;;		_setDimmerIntr_MaxmumValue
 13565 ;;		_setDimmerLights_Line
 13566 ;;		_setLED
 13567 ;;		_setProductData
 13568 ;;		_setRF_DimmerLights
 13569 ;;		_setTxData
 13570 ;; This function is called by:
 13571 ;;		_setDimmerLights_Main
 13572 ;; This function uses a non-reentrant model
 13573 ;;
 13574                           
 13575                           
 13576                           ;psect for function _setDimmerLights_OnOff
 13577  0711                     _setDimmerLights_OnOff:	
 13578                           
 13579                           ;incstack = 0
 13580                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13581                           ;setDimmerLights_OnOff@lights stored from wreg
 13582  0711  0021               	movlb	1	; select bank1
 13583  0712  00EE               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13584                           
 13585                           ;Dimmer_B1.c: 801: if (command == 1) {
 13586  0713  086B               	movf	setDimmerLights_OnOff@command^(0+128),w
 13587  0714  3A01               	xorlw	1
 13588  0715  1D03               	skipz
 13589  0716  2F79               	goto	l11161
 13590                           
 13591                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13592  0717  0020               	movlb	0	; select bank0
 13593  0718  01A6               	clrf	setDimmerIntr_ControlStatus@command
 13594  0719  0AA6               	incf	setDimmerIntr_ControlStatus@command,f
 13595  071A  0021               	movlb	1	; select bank1
 13596  071B  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13597  071C  319F  2700  3187   	fcall	_setDimmerIntr_ControlStatus
 13598                           
 13599                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13600  071F  0022               	movlb	2	; select bank2
 13601  0720  152D               	bsf	_Dimmer^(0+256),2
 13602                           
 13603                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13604  0721  0021               	movlb	1	; select bank1
 13605  0722  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13606  0723  319D  2544  3187   	fcall	_setDimmerLights_Line
 13607                           
 13608                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13609  0726  0020               	movlb	0	; select bank0
 13610  0727  01A8               	clrf	setLED@command
 13611  0728  0021               	movlb	1	; select bank1
 13612  0729  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13613  072A  3192  2272  3187   	fcall	_setLED
 13614                           
 13615                           ;Dimmer_B1.c: 813: ;;
 13616                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(65*0.75)));
 13617  072D  3030               	movlw	48
 13618  072E  0021               	movlb	1	; select bank1
 13619  072F  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13620  0730  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13621  0731  0020               	movlb	0	; select bank0
 13622  0732  00A6               	movwf	setDimmerIntr_DimmingValue@value
 13623  0733  0021               	movlb	1	; select bank1
 13624  0734  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13625  0735  319C  2491  3187   	fcall	_setDimmerIntr_DimmingValue
 13626                           
 13627                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13628  0738  0020               	movlb	0	; select bank0
 13629  0739  0A64               	incf	_DimmerLights,w
 13630  073A  0086               	movwf	6
 13631  073B  3001               	movlw	1	; select bank2/3
 13632  073C  0087               	movwf	7
 13633  073D  1F01               	btfss	1,6
 13634  073E  2F62               	goto	l11157
 13635                           
 13636                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13637  073F  0A64               	incf	_DimmerLights,w
 13638  0740  0086               	movwf	6
 13639  0741  3001               	movlw	1	; select bank2/3
 13640  0742  0087               	movwf	7
 13641  0743  1301               	bcf	1,6
 13642                           
 13643                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13644  0744  0021               	movlb	1	; select bank1
 13645  0745  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13646  0746  3E14               	addlw	20
 13647  0747  076F               	addwf	_product^(0+128),w
 13648  0748  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13649  0749  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13650  074A  0086               	movwf	6
 13651  074B  3002               	movlw	2	; select bank4/5
 13652  074C  0087               	movwf	7
 13653  074D  0801               	movf	1,w
 13654  074E  318A  2283  3187   	fcall	_getDimmerLights_PercentToValue
 13655  0751  0021               	movlb	1	; select bank1
 13656  0752  00ED               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13657  0753  086D               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13658  0754  00E1               	movwf	setDimmerIntr_MaxmumValue@value^(0+128)
 13659  0755  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13660  0756  319C  24DA  3187   	fcall	_setDimmerIntr_MaxmumValue
 13661                           
 13662                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13663  0759  0020               	movlb	0	; select bank0
 13664  075A  01A6               	clrf	setDimmerIntr_Dimming_RF@command
 13665  075B  0AA6               	incf	setDimmerIntr_Dimming_RF@command,f
 13666  075C  0021               	movlb	1	; select bank1
 13667  075D  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13668  075E  319F  2718  3187   	fcall	_setDimmerIntr_Dimming_RF
 13669                           
 13670                           ;Dimmer_B1.c: 824: } else {
 13671  0761  2FA8               	goto	l11175
 13672  0762                     l11157:	
 13673                           
 13674                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.75)));
 13675  0762  3030               	movlw	48
 13676  0763  0021               	movlb	1	; select bank1
 13677  0764  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13678  0765  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13679  0766  00E1               	movwf	setDimmerIntr_MaxmumValue@value^(0+128)
 13680  0767  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13681  0768  319C  24DA  3187   	fcall	_setDimmerIntr_MaxmumValue
 13682                           
 13683                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.75))));
 13684  076B  3030               	movlw	48
 13685  076C  318A  2209  3187   	fcall	_getDimmerLights_ValueToPercent
 13686  076F  0021               	movlb	1	; select bank1
 13687  0770  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13688  0771  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13689  0772  00E1               	movwf	setProductData@value^(0+128)
 13690  0773  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13691  0774  3E14               	addlw	20
 13692  0775  319C  24E7  3187   	fcall	_setProductData
 13693                           
 13694                           ;Dimmer_B1.c: 827: }
 13695                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13696  0778  2FA8               	goto	l11175
 13697  0779                     l11161:	
 13698  0779  0021               	movlb	1	; select bank1
 13699  077A  08EB               	movf	setDimmerLights_OnOff@command^(0+128),f
 13700  077B  1D03               	skipz
 13701  077C  2FA8               	goto	l11175
 13702                           
 13703                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13704  077D  0020               	movlb	0	; select bank0
 13705  077E  01A6               	clrf	setDimmerIntr_ControlStatus@command
 13706  077F  0021               	movlb	1	; select bank1
 13707  0780  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13708  0781  319F  2700  3187   	fcall	_setDimmerIntr_ControlStatus
 13709                           
 13710                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13711  0784  0022               	movlb	2	; select bank2
 13712  0785  112D               	bcf	_Dimmer^(0+256),2
 13713                           
 13714                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13715  0786  3000               	movlw	0
 13716  0787  319D  2544  3187   	fcall	_setDimmerLights_Line
 13717                           
 13718                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13719  078A  0021               	movlb	1	; select bank1
 13720  078B  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13721  078C  319D  2524  3187   	fcall	_getDelayOff_GO
 13722  078F  3A01               	xorlw	1
 13723  0790  1D03               	skipz
 13724  0791  2F99               	goto	l774
 13725                           
 13726                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13727  0792  0021               	movlb	1	; select bank1
 13728  0793  01E3               	clrf	setDelayOff_GO@command^(0+128)
 13729  0794  01E4               	clrf	setDelayOff_GO@value^(0+128)
 13730  0795  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13731  0796  318C  2405  3187   	fcall	_setDelayOff_GO
 13732  0799                     l774:	
 13733                           
 13734                           ;Dimmer_B1.c: 840: }
 13735                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13736  0799  0020               	movlb	0	; select bank0
 13737  079A  01A8               	clrf	setLED@command
 13738  079B  0AA8               	incf	setLED@command,f
 13739  079C  0021               	movlb	1	; select bank1
 13740  079D  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13741  079E  3192  2272  3187   	fcall	_setLED
 13742                           
 13743                           ;Dimmer_B1.c: 846: ;;
 13744                           ;Dimmer_B1.c: 850: if (lights == 1) {
 13745  07A1  0021               	movlb	1	; select bank1
 13746  07A2  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13747  07A3  3A01               	xorlw	1
 13748  07A4  1D03               	skipz
 13749  07A5  2FA8               	goto	l11175
 13750                           
 13751                           ;Dimmer_B1.c: 851: RB1 = 0;
 13752  07A6  0020               	movlb	0	; select bank0
 13753  07A7  108D               	bcf	13,1	;volatile
 13754  07A8                     l11175:	
 13755                           
 13756                           ;Dimmer_B1.c: 853: }
 13757                           ;Dimmer_B1.c: 864: }
 13758                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 13759  07A8  0021               	movlb	1	; select bank1
 13760  07A9  086B               	movf	setDimmerLights_OnOff@command^(0+128),w
 13761  07AA  00EC               	movwf	??_setDimmerLights_OnOff^(0+128)
 13762  07AB  086C               	movf	??_setDimmerLights_OnOff^(0+128),w
 13763  07AC  00E3               	movwf	setRF_DimmerLights@on^(0+128)
 13764  07AD  086E               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13765  07AE  3196  2604  3187   	fcall	_setRF_DimmerLights
 13766                           
 13767                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 13768  07B1  3001               	movlw	1
 13769  07B2  319D  2599  3187   	fcall	_getCmd_Status
 13770  07B5  3A01               	xorlw	1
 13771  07B6  1D03               	skipz
 13772  07B7  2FD3               	goto	l11189
 13773                           
 13774                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 13775  07B8  319C  2424  3187   	fcall	_getMain_All_LightsStatus
 13776  07BB  3800               	iorlw	0
 13777  07BC  1D03               	skipz
 13778  07BD  0008               	return
 13779                           
 13780                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 13781  07BE  0020               	movlb	0	; select bank0
 13782  07BF  01A6               	clrf	setCmd_Status@cmd
 13783  07C0  3001               	movlw	1
 13784  07C1  319F  2749  3187   	fcall	_setCmd_Status
 13785                           
 13786                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 13787  07C4  0021               	movlb	1	; select bank1
 13788  07C5  01E1               	clrf	setProductData@value^(0+128)
 13789  07C6  300B               	movlw	11
 13790  07C7  319C  24E7  3187   	fcall	_setProductData
 13791                           
 13792                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 13793  07CA  0021               	movlb	1	; select bank1
 13794  07CB  01E1               	clrf	setProductData@value^(0+128)
 13795  07CC  3011               	movlw	17
 13796  07CD  319C  24E7  3187   	fcall	_setProductData
 13797                           
 13798                           ;Dimmer_B1.c: 874: setTxData();
 13799  07D0  318F  2745         	fcall	_setTxData
 13800                           
 13801                           ;Dimmer_B1.c: 875: }
 13802                           ;Dimmer_B1.c: 876: } else {
 13803  07D2  0008               	return
 13804  07D3                     l11189:	
 13805                           
 13806                           ;Dimmer_B1.c: 877: setTxData();
 13807  07D3  318F  2745         	fcall	_setTxData
 13808  07D5  0008               	return
 13809  07D6                     __end_of_setDimmerLights_OnOff:	
 13810                           
 13811                           	psect	text89
 13812  1272                     __ptext89:	
 13813 ;; *************** function _setLED *****************
 13814 ;; Defined at:
 13815 ;;		line 81 in file "../src/LED_B1.c"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;  led             1    wreg     unsigned char 
 13818 ;;  command         1    8[BANK0 ] unsigned char 
 13819 ;; Auto vars:     Size  Location     Type
 13820 ;;  led             1    9[BANK0 ] unsigned char 
 13821 ;; Return value:  Size  Location     Type
 13822 ;;		None               void
 13823 ;; Registers used:
 13824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13825 ;; Tracked objects:
 13826 ;;		On entry : 0/0
 13827 ;;		On exit  : 0/0
 13828 ;;		Unchanged: 0/0
 13829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13830 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13834 ;;Total ram usage:        2 bytes
 13835 ;; Hardware stack levels used:    1
 13836 ;; Hardware stack levels required when called:    6
 13837 ;; This function calls:
 13838 ;;		_LedPointSelect
 13839 ;; This function is called by:
 13840 ;;		_setDimmerLights_OnOff
 13841 ;;		_setLED_Initialization
 13842 ;;		_Exception_Main
 13843 ;;		_setSw_Initialization
 13844 ;; This function uses a non-reentrant model
 13845 ;;
 13846                           
 13847                           
 13848                           ;psect for function _setLED
 13849  1272                     _setLED:	
 13850                           
 13851                           ;incstack = 0
 13852                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13853                           ;setLED@led stored from wreg
 13854  1272  0020               	movlb	0	; select bank0
 13855  1273  00A9               	movwf	setLED@led
 13856                           
 13857                           ;LED_B1.c: 82: LedPointSelect(led);
 13858  1274  0829               	movf	setLED@led,w
 13859  1275  319C  2444  3192   	fcall	_LedPointSelect
 13860                           
 13861                           ;LED_B1.c: 83: if (command == 0) {
 13862  1278  0020               	movlb	0	; select bank0
 13863  1279  08A8               	movf	setLED@command,f
 13864  127A  1D03               	skipz
 13865  127B  2A81               	goto	l10933
 13866                           
 13867                           ;LED_B1.c: 112: if (led == 99) {
 13868  127C  0829               	movf	setLED@led,w
 13869  127D  3A63               	xorlw	99
 13870  127E  1D03               	skipz
 13871  127F  2A81               	goto	l10933
 13872                           
 13873                           ;LED_B1.c: 116: RB5 = 1;
 13874  1280  168D               	bsf	13,5	;volatile
 13875  1281                     l10933:	
 13876                           
 13877                           ;LED_B1.c: 118: }
 13878                           ;LED_B1.c: 120: }
 13879                           ;LED_B1.c: 121: if (command == 1) {
 13880  1281  0828               	movf	setLED@command,w
 13881  1282  3A01               	xorlw	1
 13882  1283  1D03               	skipz
 13883  1284  2A8A               	goto	l10939
 13884                           
 13885                           ;LED_B1.c: 150: if (led == 99) {
 13886  1285  0829               	movf	setLED@led,w
 13887  1286  3A63               	xorlw	99
 13888  1287  1D03               	skipz
 13889  1288  2A8A               	goto	l10939
 13890                           
 13891                           ;LED_B1.c: 154: RB5 = 0;
 13892  1289  128D               	bcf	13,5	;volatile
 13893  128A                     l10939:	
 13894                           
 13895                           ;LED_B1.c: 156: }
 13896                           ;LED_B1.c: 158: }
 13897                           ;LED_B1.c: 159: if (command == 10) {
 13898  128A  0828               	movf	setLED@command,w
 13899  128B  3A0A               	xorlw	10
 13900  128C  1D03               	skipz
 13901  128D  2A9E               	goto	l10947
 13902                           
 13903                           ;LED_B1.c: 160: LED->GO = 0;
 13904  128E  0865               	movf	_LED,w
 13905  128F  0086               	movwf	6
 13906  1290  3001               	movlw	1	; select bank2/3
 13907  1291  0087               	movwf	7
 13908  1292  1081               	bcf	1,1
 13909                           
 13910                           ;LED_B1.c: 161: LED->Time = 0;
 13911  1293  0A65               	incf	_LED,w
 13912  1294  0086               	movwf	6
 13913  1295  3001               	movlw	1	; select bank2/3
 13914  1296  0087               	movwf	7
 13915  1297  3000               	movlw	0
 13916  1298  3FC0               	movwi [0]fsr1
 13917  1299  3FC1               	movwi [1]fsr1
 13918                           
 13919                           ;LED_B1.c: 190: if (led == 99) {
 13920  129A  0829               	movf	setLED@led,w
 13921  129B  3A63               	xorlw	99
 13922  129C  1903               	btfsc	3,2
 13923                           
 13924                           ;LED_B1.c: 194: RB5 = 1;
 13925  129D  168D               	bsf	13,5	;volatile
 13926  129E                     l10947:	
 13927                           
 13928                           ;LED_B1.c: 196: }
 13929                           ;LED_B1.c: 198: }
 13930                           ;LED_B1.c: 199: if (command == 11) {
 13931  129E  0828               	movf	setLED@command,w
 13932  129F  3A0B               	xorlw	11
 13933  12A0  1D03               	skipz
 13934  12A1  0008               	return
 13935                           
 13936                           ;LED_B1.c: 200: LED->GO = 1;
 13937  12A2  0865               	movf	_LED,w
 13938  12A3  0086               	movwf	6
 13939  12A4  3001               	movlw	1	; select bank2/3
 13940  12A5  0087               	movwf	7
 13941  12A6  1481               	bsf	1,1
 13942  12A7  0008               	return
 13943  12A8                     __end_of_setLED:	
 13944                           
 13945                           	psect	text90
 13946  1C44                     __ptext90:	
 13947 ;; *************** function _LedPointSelect *****************
 13948 ;; Defined at:
 13949 ;;		line 7 in file "../src/LED_B1.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  led             1    wreg     unsigned char 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  led             1    7[BANK0 ] unsigned char 
 13954 ;; Return value:  Size  Location     Type
 13955 ;;		None               void
 13956 ;; Registers used:
 13957 ;;		wreg
 13958 ;; Tracked objects:
 13959 ;;		On entry : 0/0
 13960 ;;		On exit  : 0/0
 13961 ;;		Unchanged: 0/0
 13962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;Total ram usage:        2 bytes
 13968 ;; Hardware stack levels used:    1
 13969 ;; Hardware stack levels required when called:    5
 13970 ;; This function calls:
 13971 ;;		Nothing
 13972 ;; This function is called by:
 13973 ;;		_setLED_Initialization
 13974 ;;		_setLED
 13975 ;;		_setLED_Main
 13976 ;; This function uses a non-reentrant model
 13977 ;;
 13978                           
 13979                           
 13980                           ;psect for function _LedPointSelect
 13981  1C44                     _LedPointSelect:	
 13982                           
 13983                           ;incstack = 0
 13984                           ; Regs used in _LedPointSelect: [wreg]
 13985                           ;LedPointSelect@led stored from wreg
 13986  1C44  0020               	movlb	0	; select bank0
 13987  1C45  00A7               	movwf	LedPointSelect@led
 13988                           
 13989                           ;LED_B1.c: 24: if (led == 99) {
 13990  1C46  0827               	movf	LedPointSelect@led,w
 13991  1C47  3A63               	xorlw	99
 13992  1C48  1D03               	skipz
 13993  1C49  0008               	return
 13994                           
 13995                           ;LED_B1.c: 25: LED = &VarErrLED;
 13996  1C4A  306A               	movlw	_VarErrLED& (0+255)
 13997  1C4B  00A6               	movwf	??_LedPointSelect
 13998  1C4C  0826               	movf	??_LedPointSelect,w
 13999  1C4D  00E5               	movwf	_LED
 14000  1C4E  0008               	return
 14001  1C4F                     __end_of_LedPointSelect:	
 14002                           
 14003                           	psect	text91
 14004  1F18                     __ptext91:	
 14005 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14006 ;; Defined at:
 14007 ;;		line 184 in file "../src/Dimmer_B1.c"
 14008 ;; Parameters:    Size  Location     Type
 14009 ;;  lights          1    wreg     unsigned char 
 14010 ;;  command         1    6[BANK0 ] unsigned char 
 14011 ;; Auto vars:     Size  Location     Type
 14012 ;;  lights          1    8[BANK0 ] unsigned char 
 14013 ;; Return value:  Size  Location     Type
 14014 ;;		None               void
 14015 ;; Registers used:
 14016 ;;		wreg, status,2, status,0
 14017 ;; Tracked objects:
 14018 ;;		On entry : 0/0
 14019 ;;		On exit  : 0/0
 14020 ;;		Unchanged: 0/0
 14021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14022 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;Total ram usage:        3 bytes
 14027 ;; Hardware stack levels used:    1
 14028 ;; Hardware stack levels required when called:    5
 14029 ;; This function calls:
 14030 ;;		Nothing
 14031 ;; This function is called by:
 14032 ;;		_setDimmerLights_OnOff
 14033 ;;		_setRFSW_AdjControl
 14034 ;; This function uses a non-reentrant model
 14035 ;;
 14036                           
 14037                           
 14038                           ;psect for function _setDimmerIntr_Dimming_RF
 14039  1F18                     _setDimmerIntr_Dimming_RF:	
 14040                           
 14041                           ;incstack = 0
 14042                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14043                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14044  1F18  0020               	movlb	0	; select bank0
 14045  1F19  00A8               	movwf	setDimmerIntr_Dimming_RF@lights
 14046                           
 14047                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14048  1F1A  0828               	movf	setDimmerIntr_Dimming_RF@lights,w
 14049  1F1B  3A01               	xorlw	1
 14050  1F1C  1D03               	skipz
 14051  1F1D  0008               	return
 14052                           
 14053                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14054  1F1E  0826               	movf	setDimmerIntr_Dimming_RF@command,w
 14055  1F1F  3A01               	xorlw	1
 14056  1F20  3000               	movlw	0
 14057  1F21  1903               	skipnz
 14058  1F22  3001               	movlw	1
 14059  1F23  00A7               	movwf	??_setDimmerIntr_Dimming_RF
 14060  1F24  0EA7               	swapf	??_setDimmerIntr_Dimming_RF,f
 14061  1F25  0DA7               	rlf	??_setDimmerIntr_Dimming_RF,f
 14062  1F26  0DA7               	rlf	??_setDimmerIntr_Dimming_RF,f
 14063  1F27  0021               	movlb	1	; select bank1
 14064  1F28  083A               	movf	_DimmerIntr1^(0+128),w
 14065  1F29  0020               	movlb	0	; select bank0
 14066  1F2A  0627               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14067  1F2B  39BF               	andlw	-65
 14068  1F2C  0627               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14069  1F2D  0021               	movlb	1	; select bank1
 14070  1F2E  00BA               	movwf	_DimmerIntr1^(0+128)
 14071  1F2F  0008               	return
 14072  1F30                     __end_of_setDimmerIntr_Dimming_RF:	
 14073                           
 14074                           	psect	text92
 14075  1C91                     __ptext92:	
 14076 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14077 ;; Defined at:
 14078 ;;		line 49 in file "../src/Dimmer_B1.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;  lights          1    wreg     unsigned char 
 14081 ;;  value           1    6[BANK0 ] unsigned char 
 14082 ;; Auto vars:     Size  Location     Type
 14083 ;;  lights          1    8[BANK0 ] unsigned char 
 14084 ;; Return value:  Size  Location     Type
 14085 ;;		None               void
 14086 ;; Registers used:
 14087 ;;		wreg
 14088 ;; Tracked objects:
 14089 ;;		On entry : 0/0
 14090 ;;		On exit  : 0/0
 14091 ;;		Unchanged: 0/0
 14092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14093 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;Total ram usage:        3 bytes
 14098 ;; Hardware stack levels used:    1
 14099 ;; Hardware stack levels required when called:    5
 14100 ;; This function calls:
 14101 ;;		Nothing
 14102 ;; This function is called by:
 14103 ;;		_setDimmerLights_OnOff
 14104 ;; This function uses a non-reentrant model
 14105 ;;
 14106                           
 14107                           
 14108                           ;psect for function _setDimmerIntr_DimmingValue
 14109  1C91                     _setDimmerIntr_DimmingValue:	
 14110                           
 14111                           ;incstack = 0
 14112                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14113                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14114  1C91  0020               	movlb	0	; select bank0
 14115  1C92  00A8               	movwf	setDimmerIntr_DimmingValue@lights
 14116                           
 14117                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14118  1C93  0828               	movf	setDimmerIntr_DimmingValue@lights,w
 14119  1C94  3A01               	xorlw	1
 14120  1C95  1D03               	skipz
 14121  1C96  0008               	return
 14122                           
 14123                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14124  1C97  0826               	movf	setDimmerIntr_DimmingValue@value,w
 14125  1C98  00A7               	movwf	??_setDimmerIntr_DimmingValue
 14126  1C99  0827               	movf	??_setDimmerIntr_DimmingValue,w
 14127  1C9A  0021               	movlb	1	; select bank1
 14128  1C9B  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 14129  1C9C  0008               	return
 14130  1C9D                     __end_of_setDimmerIntr_DimmingValue:	
 14131                           
 14132                           	psect	text93
 14133  1F00                     __ptext93:	
 14134 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14135 ;; Defined at:
 14136 ;;		line 31 in file "../src/Dimmer_B1.c"
 14137 ;; Parameters:    Size  Location     Type
 14138 ;;  lights          1    wreg     unsigned char 
 14139 ;;  command         1    6[BANK0 ] unsigned char 
 14140 ;; Auto vars:     Size  Location     Type
 14141 ;;  lights          1    8[BANK0 ] unsigned char 
 14142 ;; Return value:  Size  Location     Type
 14143 ;;		None               void
 14144 ;; Registers used:
 14145 ;;		wreg, status,2, status,0
 14146 ;; Tracked objects:
 14147 ;;		On entry : 0/0
 14148 ;;		On exit  : 0/0
 14149 ;;		Unchanged: 0/0
 14150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14151 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14155 ;;Total ram usage:        3 bytes
 14156 ;; Hardware stack levels used:    1
 14157 ;; Hardware stack levels required when called:    5
 14158 ;; This function calls:
 14159 ;;		Nothing
 14160 ;; This function is called by:
 14161 ;;		_setDimmerLights_OnOff
 14162 ;; This function uses a non-reentrant model
 14163 ;;
 14164                           
 14165                           
 14166                           ;psect for function _setDimmerIntr_ControlStatus
 14167  1F00                     _setDimmerIntr_ControlStatus:	
 14168                           
 14169                           ;incstack = 0
 14170                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14171                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14172  1F00  0020               	movlb	0	; select bank0
 14173  1F01  00A8               	movwf	setDimmerIntr_ControlStatus@lights
 14174                           
 14175                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14176  1F02  0828               	movf	setDimmerIntr_ControlStatus@lights,w
 14177  1F03  3A01               	xorlw	1
 14178  1F04  1D03               	skipz
 14179  1F05  0008               	return
 14180                           
 14181                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14182  1F06  0826               	movf	setDimmerIntr_ControlStatus@command,w
 14183  1F07  3A01               	xorlw	1
 14184  1F08  3000               	movlw	0
 14185  1F09  1903               	skipnz
 14186  1F0A  3001               	movlw	1
 14187  1F0B  00A7               	movwf	??_setDimmerIntr_ControlStatus
 14188  1F0C  0DA7               	rlf	??_setDimmerIntr_ControlStatus,f
 14189  1F0D  0DA7               	rlf	??_setDimmerIntr_ControlStatus,f
 14190  1F0E  0DA7               	rlf	??_setDimmerIntr_ControlStatus,f
 14191  1F0F  0021               	movlb	1	; select bank1
 14192  1F10  083A               	movf	_DimmerIntr1^(0+128),w
 14193  1F11  0020               	movlb	0	; select bank0
 14194  1F12  0627               	xorwf	??_setDimmerIntr_ControlStatus,w
 14195  1F13  39F7               	andlw	-9
 14196  1F14  0627               	xorwf	??_setDimmerIntr_ControlStatus,w
 14197  1F15  0021               	movlb	1	; select bank1
 14198  1F16  00BA               	movwf	_DimmerIntr1^(0+128)
 14199  1F17  0008               	return
 14200  1F18                     __end_of_setDimmerIntr_ControlStatus:	
 14201                           
 14202                           	psect	text94
 14203  0C05                     __ptext94:	
 14204 ;; *************** function _setDelayOff_GO *****************
 14205 ;; Defined at:
 14206 ;;		line 87 in file "../src/DelayOff_B1.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;  sw              1    wreg     unsigned char 
 14209 ;;  command         1    8[BANK1 ] unsigned char 
 14210 ;;  value           1    9[BANK1 ] unsigned char 
 14211 ;; Auto vars:     Size  Location     Type
 14212 ;;  sw              1   15[BANK1 ] unsigned char 
 14213 ;;  k               1   14[BANK1 ] unsigned char 
 14214 ;;  j               1   13[BANK1 ] unsigned char 
 14215 ;;  i               1   12[BANK1 ] unsigned char 
 14216 ;; Return value:  Size  Location     Type
 14217 ;;		None               void
 14218 ;; Registers used:
 14219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14225 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 14226 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 14227 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 14228 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;Total ram usage:        8 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    6
 14232 ;; This function calls:
 14233 ;;		_DelayOffPointSelect
 14234 ;;		___bmul
 14235 ;;		_setProductData
 14236 ;; This function is called by:
 14237 ;;		_setDimmerLights_OnOff
 14238 ;;		_setRFSW_Control
 14239 ;; This function uses a non-reentrant model
 14240 ;;
 14241                           
 14242                           
 14243                           ;psect for function _setDelayOff_GO
 14244  0C05                     _setDelayOff_GO:	
 14245                           
 14246                           ;incstack = 0
 14247                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14248                           ;setDelayOff_GO@sw stored from wreg
 14249  0C05  0021               	movlb	1	; select bank1
 14250  0C06  00EA               	movwf	setDelayOff_GO@sw^(0+128)
 14251                           
 14252                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14253  0C07  086A               	movf	setDelayOff_GO@sw^(0+128),w
 14254  0C08  319C  242E  318C   	fcall	_DelayOffPointSelect
 14255                           
 14256                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14257  0C0B  0021               	movlb	1	; select bank1
 14258  0C0C  0863               	movf	setDelayOff_GO@command^(0+128),w
 14259  0C0D  3A01               	xorlw	1
 14260  0C0E  3000               	movlw	0
 14261  0C0F  1903               	skipnz
 14262  0C10  3001               	movlw	1
 14263  0C11  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14264  0C12  0020               	movlb	0	; select bank0
 14265  0C13  0863               	movf	_DelayOff,w
 14266  0C14  0086               	movwf	6
 14267  0C15  3001               	movlw	1	; select bank2/3
 14268  0C16  0087               	movwf	7
 14269  0C17  0021               	movlb	1	; select bank1
 14270  0C18  0DE5               	rlf	??_setDelayOff_GO^(0+128),f
 14271  0C19  0801               	movf	1,w
 14272  0C1A  0665               	xorwf	??_setDelayOff_GO^(0+128),w
 14273  0C1B  39FD               	andlw	-3
 14274  0C1C  0665               	xorwf	??_setDelayOff_GO^(0+128),w
 14275  0C1D  0081               	movwf	1
 14276                           
 14277                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14278  0C1E  0020               	movlb	0	; select bank0
 14279  0C1F  0863               	movf	_DelayOff,w
 14280  0C20  3E02               	addlw	2
 14281  0C21  0086               	movwf	6
 14282  0C22  3001               	movlw	1	; select bank2/3
 14283  0C23  0087               	movwf	7
 14284  0C24  3000               	movlw	0
 14285  0C25  3FC0               	movwi [0]fsr1
 14286  0C26  3FC1               	movwi [1]fsr1
 14287                           
 14288                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14289  0C27  0863               	movf	_DelayOff,w
 14290  0C28  3E04               	addlw	4
 14291  0C29  0086               	movwf	6
 14292  0C2A  3001               	movlw	1	; select bank2/3
 14293  0C2B  0087               	movwf	7
 14294  0C2C  0181               	clrf	1
 14295                           
 14296                           ;DelayOff_B1.c: 94: if (command == 1) {
 14297  0C2D  0021               	movlb	1	; select bank1
 14298  0C2E  0863               	movf	setDelayOff_GO@command^(0+128),w
 14299  0C2F  3A01               	xorlw	1
 14300  0C30  1D03               	skipz
 14301  0C31  2C89               	goto	l10549
 14302                           
 14303                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14304  0C32  3005               	movlw	5
 14305  0C33  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14306  0C34  0865               	movf	??_setDelayOff_GO^(0+128),w
 14307  0C35  00E7               	movwf	setDelayOff_GO@i^(0+128)
 14308  0C36  01E8               	clrf	setDelayOff_GO@j^(0+128)
 14309  0C37  01E9               	clrf	setDelayOff_GO@k^(0+128)
 14310                           
 14311                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14312  0C38  300F               	movlw	15
 14313  0C39  0564               	andwf	setDelayOff_GO@value^(0+128),w
 14314  0C3A  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14315  0C3B  0865               	movf	??_setDelayOff_GO^(0+128),w
 14316  0C3C  3A05               	xorlw	5
 14317  0C3D  1903               	skipnz
 14318  0C3E  2C43               	goto	l10535
 14319  0C3F  0864               	movf	setDelayOff_GO@value^(0+128),w
 14320  0C40  390F               	andlw	15
 14321  0C41  1D03               	btfss	3,2
 14322  0C42  2C75               	goto	l10545
 14323  0C43                     l10535:	
 14324  0C43  3031               	movlw	49
 14325  0C44  0264               	subwf	setDelayOff_GO@value^(0+128),w
 14326  0C45  1803               	skipnc
 14327  0C46  2C75               	goto	l10545
 14328                           
 14329                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14330  0C47  0864               	movf	setDelayOff_GO@value^(0+128),w
 14331  0C48  390F               	andlw	15
 14332  0C49  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14333  0C4A  0865               	movf	??_setDelayOff_GO^(0+128),w
 14334  0C4B  00E8               	movwf	setDelayOff_GO@j^(0+128)
 14335                           
 14336                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14337  0C4C  0864               	movf	setDelayOff_GO@value^(0+128),w
 14338  0C4D  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14339  0C4E  3004               	movlw	4
 14340  0C4F                     u12525:	
 14341  0C4F  36E5               	lsrf	??_setDelayOff_GO^(0+128),f
 14342  0C50  0B89               	decfsz	9,f
 14343  0C51  2C4F               	goto	u12525
 14344  0C52  0865               	movf	??_setDelayOff_GO^(0+128),w
 14345  0C53  390F               	andlw	15
 14346  0C54  00E6               	movwf	(??_setDelayOff_GO+1)^(0+128)
 14347  0C55  0866               	movf	(??_setDelayOff_GO+1)^(0+128),w
 14348  0C56  00E9               	movwf	setDelayOff_GO@k^(0+128)
 14349                           
 14350                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14351  0C57  300A               	movlw	10
 14352  0C58  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14353  0C59  0865               	movf	??_setDelayOff_GO^(0+128),w
 14354  0C5A  0020               	movlb	0	; select bank0
 14355  0C5B  00A6               	movwf	___bmul@multiplicand
 14356  0C5C  0021               	movlb	1	; select bank1
 14357  0C5D  0869               	movf	setDelayOff_GO@k^(0+128),w
 14358  0C5E  319D  25AB  318C   	fcall	___bmul
 14359  0C61  0021               	movlb	1	; select bank1
 14360  0C62  0768               	addwf	setDelayOff_GO@j^(0+128),w
 14361  0C63  00E6               	movwf	(??_setDelayOff_GO+1)^(0+128)
 14362  0C64  0020               	movlb	0	; select bank0
 14363  0C65  0A63               	incf	_DelayOff,w
 14364  0C66  0086               	movwf	6
 14365  0C67  3001               	movlw	1	; select bank2/3
 14366  0C68  0087               	movwf	7
 14367  0C69  0021               	movlb	1	; select bank1
 14368  0C6A  0866               	movf	(??_setDelayOff_GO+1)^(0+128),w
 14369  0C6B  0081               	movwf	1
 14370                           
 14371                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14372  0C6C  0864               	movf	setDelayOff_GO@value^(0+128),w
 14373  0C6D  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14374  0C6E  0865               	movf	??_setDelayOff_GO^(0+128),w
 14375  0C6F  00E1               	movwf	setProductData@value^(0+128)
 14376  0C70  086A               	movf	setDelayOff_GO@sw^(0+128),w
 14377  0C71  3E1A               	addlw	26
 14378  0C72  319C  24E7         	fcall	_setProductData
 14379                           
 14380                           ;DelayOff_B1.c: 103: } else {
 14381  0C74  0008               	return
 14382  0C75                     l10545:	
 14383                           
 14384                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14385  0C75  3005               	movlw	5
 14386  0C76  0021               	movlb	1	; select bank1
 14387  0C77  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14388  0C78  0020               	movlb	0	; select bank0
 14389  0C79  0A63               	incf	_DelayOff,w
 14390  0C7A  0086               	movwf	6
 14391  0C7B  3001               	movlw	1	; select bank2/3
 14392  0C7C  0087               	movwf	7
 14393  0C7D  0021               	movlb	1	; select bank1
 14394  0C7E  0865               	movf	??_setDelayOff_GO^(0+128),w
 14395  0C7F  0081               	movwf	1
 14396                           
 14397                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14398  0C80  3005               	movlw	5
 14399  0C81  00E5               	movwf	??_setDelayOff_GO^(0+128)
 14400  0C82  0865               	movf	??_setDelayOff_GO^(0+128),w
 14401  0C83  00E1               	movwf	setProductData@value^(0+128)
 14402  0C84  086A               	movf	setDelayOff_GO@sw^(0+128),w
 14403  0C85  3E1A               	addlw	26
 14404  0C86  319C  24E7         	fcall	_setProductData
 14405                           
 14406                           ;DelayOff_B1.c: 106: }
 14407                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14408  0C88  0008               	return
 14409  0C89                     l10549:	
 14410  0C89  0021               	movlb	1	; select bank1
 14411  0C8A  08E3               	movf	setDelayOff_GO@command^(0+128),f
 14412  0C8B  1D03               	skipz
 14413  0C8C  0008               	return
 14414                           
 14415                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14416  0C8D  01E1               	clrf	setProductData@value^(0+128)
 14417  0C8E  086A               	movf	setDelayOff_GO@sw^(0+128),w
 14418  0C8F  3E1A               	addlw	26
 14419  0C90  319C  24E7         	fcall	_setProductData
 14420  0C92  0008               	return
 14421  0C93                     __end_of_setDelayOff_GO:	
 14422                           
 14423                           	psect	text95
 14424  1DAB                     __ptext95:	
 14425 ;; *************** function ___bmul *****************
 14426 ;; Defined at:
 14427 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;  multiplier      1    wreg     unsigned char 
 14430 ;;  multiplicand    1    6[BANK0 ] unsigned char 
 14431 ;; Auto vars:     Size  Location     Type
 14432 ;;  multiplier      1    9[BANK0 ] unsigned char 
 14433 ;;  product         1    8[BANK0 ] unsigned char 
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  1    wreg      unsigned char 
 14436 ;; Registers used:
 14437 ;;		wreg, status,2, status,0
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14443 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;Total ram usage:        4 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:    5
 14450 ;; This function calls:
 14451 ;;		Nothing
 14452 ;; This function is called by:
 14453 ;;		_setDelayOff_GO
 14454 ;;		_DelayTimejudge
 14455 ;; This function uses a non-reentrant model
 14456 ;;
 14457                           
 14458                           
 14459                           ;psect for function ___bmul
 14460  1DAB                     ___bmul:	
 14461                           
 14462                           ;incstack = 0
 14463                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14464                           ;___bmul@multiplier stored from wreg
 14465  1DAB  0020               	movlb	0	; select bank0
 14466  1DAC  00A9               	movwf	___bmul@multiplier
 14467  1DAD  01A8               	clrf	___bmul@product
 14468  1DAE                     l10213:	
 14469  1DAE  1C29               	btfss	___bmul@multiplier,0
 14470  1DAF  2DB4               	goto	l10217
 14471  1DB0  0826               	movf	___bmul@multiplicand,w
 14472  1DB1  00A7               	movwf	??___bmul
 14473  1DB2  0827               	movf	??___bmul,w
 14474  1DB3  07A8               	addwf	___bmul@product,f
 14475  1DB4                     l10217:	
 14476  1DB4  1003               	clrc
 14477  1DB5  0DA6               	rlf	___bmul@multiplicand,f
 14478  1DB6  1003               	clrc
 14479  1DB7  0CA9               	rrf	___bmul@multiplier,f
 14480  1DB8  08A9               	movf	___bmul@multiplier,f
 14481  1DB9  1D03               	skipz
 14482  1DBA  2DAE               	goto	l10213
 14483  1DBB  0828               	movf	___bmul@product,w
 14484  1DBC  0008               	return
 14485  1DBD                     __end_of___bmul:	
 14486                           
 14487                           	psect	text96
 14488  1F49                     __ptext96:	
 14489 ;; *************** function _setCmd_Status *****************
 14490 ;; Defined at:
 14491 ;;		line 651 in file "../src/Main_B1.c"
 14492 ;; Parameters:    Size  Location     Type
 14493 ;;  number          1    wreg     unsigned char 
 14494 ;;  cmd             1    6[BANK0 ] unsigned char 
 14495 ;; Auto vars:     Size  Location     Type
 14496 ;;  number          1    8[BANK0 ] unsigned char 
 14497 ;; Return value:  Size  Location     Type
 14498 ;;		None               void
 14499 ;; Registers used:
 14500 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14501 ;; Tracked objects:
 14502 ;;		On entry : 0/0
 14503 ;;		On exit  : 0/0
 14504 ;;		Unchanged: 0/0
 14505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14506 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;Total ram usage:        3 bytes
 14511 ;; Hardware stack levels used:    1
 14512 ;; Hardware stack levels required when called:    5
 14513 ;; This function calls:
 14514 ;;		Nothing
 14515 ;; This function is called by:
 14516 ;;		_setDimmerLights_OnOff
 14517 ;;		_setControl_Lights_Table
 14518 ;; This function uses a non-reentrant model
 14519 ;;
 14520                           
 14521                           
 14522                           ;psect for function _setCmd_Status
 14523  1F49                     _setCmd_Status:	
 14524                           
 14525                           ;incstack = 0
 14526                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14527                           ;setCmd_Status@number stored from wreg
 14528  1F49  0020               	movlb	0	; select bank0
 14529  1F4A  00A8               	movwf	setCmd_Status@number
 14530                           
 14531                           ;Main_B1.c: 652: switch (number) {
 14532  1F4B  2F5B               	goto	l10715
 14533  1F4C                     l10711:	
 14534                           ;Main_B1.c: 653: case 1:
 14535                           
 14536                           
 14537                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14538  1F4C  0826               	movf	setCmd_Status@cmd,w
 14539  1F4D  3A01               	xorlw	1
 14540  1F4E  3000               	movlw	0
 14541  1F4F  1903               	skipnz
 14542  1F50  3001               	movlw	1
 14543  1F51  00A7               	movwf	??_setCmd_Status
 14544  1F52  0021               	movlb	1	; select bank1
 14545  1F53  0848               	movf	_Cmd^(0+128),w
 14546  1F54  0020               	movlb	0	; select bank0
 14547  1F55  0627               	xorwf	??_setCmd_Status,w
 14548  1F56  39FE               	andlw	-2
 14549  1F57  0627               	xorwf	??_setCmd_Status,w
 14550  1F58  0021               	movlb	1	; select bank1
 14551  1F59  00C8               	movwf	_Cmd^(0+128)
 14552                           
 14553                           ;Main_B1.c: 656: }
 14554                           
 14555                           ;Main_B1.c: 655: break;
 14556  1F5A  0008               	return
 14557  1F5B                     l10715:	
 14558  1F5B  0020               	movlb	0	; select bank0
 14559  1F5C  0828               	movf	setCmd_Status@number,w
 14560                           
 14561                           ; Switch size 1, requested type "space"
 14562                           ; Number of cases is 1, Range of values is 1 to 1
 14563                           ; switch strategies available:
 14564                           ; Name         Instructions Cycles
 14565                           ; simple_byte            4     3 (average)
 14566                           ; direct_byte           11     9 (fixed)
 14567                           ; jumptable            263     9 (fixed)
 14568                           ;	Chosen strategy is simple_byte
 14569  1F5D  3A01               	xorlw	1	; case 1
 14570  1F5E  1903               	skipnz
 14571  1F5F  2F4C               	goto	l10711
 14572  1F60  2F61               	goto	l1494
 14573  1F61                     l1494:	
 14574  1F61  0008               	return
 14575  1F62                     __end_of_setCmd_Status:	
 14576                           
 14577                           	psect	text97
 14578  1C24                     __ptext97:	
 14579 ;; *************** function _getMain_All_LightsStatus *****************
 14580 ;; Defined at:
 14581 ;;		line 373 in file "../src/Main_B1.c"
 14582 ;; Parameters:    Size  Location     Type
 14583 ;;		None
 14584 ;; Auto vars:     Size  Location     Type
 14585 ;;  status          1    6[BANK0 ] unsigned char 
 14586 ;; Return value:  Size  Location     Type
 14587 ;;                  1    wreg      unsigned char 
 14588 ;; Registers used:
 14589 ;;		wreg, status,2
 14590 ;; Tracked objects:
 14591 ;;		On entry : 0/0
 14592 ;;		On exit  : 0/0
 14593 ;;		Unchanged: 0/0
 14594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14599 ;;Total ram usage:        1 bytes
 14600 ;; Hardware stack levels used:    1
 14601 ;; Hardware stack levels required when called:    5
 14602 ;; This function calls:
 14603 ;;		Nothing
 14604 ;; This function is called by:
 14605 ;;		_DimmerLights_Main
 14606 ;;		_setDimmerLights_Main
 14607 ;;		_setDimmerLights_OnOff
 14608 ;;		_Flash_Memory_Main
 14609 ;;		_Exception_Main
 14610 ;;		_Load_Main
 14611 ;;		_setTemp_Main
 14612 ;;		_setControl_Lights_Table
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           
 14617                           ;psect for function _getMain_All_LightsStatus
 14618  1C24                     _getMain_All_LightsStatus:	
 14619                           
 14620                           ;Main_B1.c: 374: char status = 0;
 14621                           
 14622                           ;incstack = 0
 14623                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14624  1C24  0020               	movlb	0	; select bank0
 14625  1C25  01A6               	clrf	getMain_All_LightsStatus@status
 14626                           
 14627                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14628  1C26  3000               	movlw	0
 14629  1C27  0022               	movlb	2	; select bank2
 14630  1C28  185E               	btfsc	(_DimmerLights1^(0+256)+1),0
 14631  1C29  3001               	movlw	1
 14632  1C2A  0020               	movlb	0	; select bank0
 14633  1C2B  00A6               	movwf	getMain_All_LightsStatus@status
 14634                           
 14635                           ;Main_B1.c: 420: return status;
 14636  1C2C  0826               	movf	getMain_All_LightsStatus@status,w
 14637  1C2D  0008               	return
 14638  1C2E                     __end_of_getMain_All_LightsStatus:	
 14639                           
 14640                           	psect	text98
 14641  0A83                     __ptext98:	
 14642 ;; *************** function _getDimmerLights_PercentToValue *****************
 14643 ;; Defined at:
 14644 ;;		line 1039 in file "../src/Dimmer_B1.c"
 14645 ;; Parameters:    Size  Location     Type
 14646 ;;  value           1    wreg     unsigned char 
 14647 ;; Auto vars:     Size  Location     Type
 14648 ;;  value           1    2[BANK1 ] unsigned char 
 14649 ;;  i               3    3[BANK1 ] float 
 14650 ;; Return value:  Size  Location     Type
 14651 ;;                  1    wreg      unsigned char 
 14652 ;; Registers used:
 14653 ;;		wreg, status,2, status,0, pclath, cstack
 14654 ;; Tracked objects:
 14655 ;;		On entry : 0/0
 14656 ;;		On exit  : 0/0
 14657 ;;		Unchanged: 0/0
 14658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 14661 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 14662 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 14663 ;;Total ram usage:        6 bytes
 14664 ;; Hardware stack levels used:    1
 14665 ;; Hardware stack levels required when called:    7
 14666 ;; This function calls:
 14667 ;;		___awtoft
 14668 ;;		___ftadd
 14669 ;;		___ftdiv
 14670 ;;		___ftmul
 14671 ;;		___ftneg
 14672 ;;		___fttol
 14673 ;; This function is called by:
 14674 ;;		_setDimmerLights_OnOff
 14675 ;;		_setRFSW_AdjControl
 14676 ;; This function uses a non-reentrant model
 14677 ;;
 14678                           
 14679                           
 14680                           ;psect for function _getDimmerLights_PercentToValue
 14681  0A83                     _getDimmerLights_PercentToValue:	
 14682                           
 14683                           ;incstack = 0
 14684                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14685                           ;getDimmerLights_PercentToValue@value stored from wreg
 14686  0A83  0021               	movlb	1	; select bank1
 14687  0A84  00DD               	movwf	getDimmerLights_PercentToValue@value^(0+128)
 14688                           
 14689                           ;Dimmer_B1.c: 1047: float i = ((char)(65*0.75)) - ((char)(20*0.75));
 14690  0A85  3000               	movlw	0
 14691  0A86  00DE               	movwf	getDimmerLights_PercentToValue@i^(0+128)
 14692  0A87  3004               	movlw	4
 14693  0A88  00DF               	movwf	(getDimmerLights_PercentToValue@i+1)^(0+128)
 14694  0A89  3042               	movlw	66
 14695  0A8A  00E0               	movwf	(getDimmerLights_PercentToValue@i+2)^(0+128)
 14696                           
 14697                           ;Dimmer_B1.c: 1048: i /= 100;
 14698  0A8B  3000               	movlw	0
 14699  0A8C  0020               	movlb	0	; select bank0
 14700  0A8D  00B4               	movwf	___ftdiv@f2
 14701  0A8E  30C8               	movlw	200
 14702  0A8F  00B5               	movwf	___ftdiv@f2+1
 14703  0A90  3042               	movlw	66
 14704  0A91  00B6               	movwf	___ftdiv@f2+2
 14705  0A92  0021               	movlb	1	; select bank1
 14706  0A93  085E               	movf	getDimmerLights_PercentToValue@i^(0+128),w
 14707  0A94  0020               	movlb	0	; select bank0
 14708  0A95  00B7               	movwf	___ftdiv@f1
 14709  0A96  0021               	movlb	1	; select bank1
 14710  0A97  085F               	movf	(getDimmerLights_PercentToValue@i+1)^(0+128),w
 14711  0A98  0020               	movlb	0	; select bank0
 14712  0A99  00B8               	movwf	___ftdiv@f1+1
 14713  0A9A  0021               	movlb	1	; select bank1
 14714  0A9B  0860               	movf	(getDimmerLights_PercentToValue@i+2)^(0+128),w
 14715  0A9C  0020               	movlb	0	; select bank0
 14716  0A9D  00B9               	movwf	___ftdiv@f1+2
 14717  0A9E  318D  253B  318A   	fcall	___ftdiv
 14718  0AA1  0020               	movlb	0	; select bank0
 14719  0AA2  0834               	movf	?___ftdiv,w
 14720  0AA3  0021               	movlb	1	; select bank1
 14721  0AA4  00DE               	movwf	getDimmerLights_PercentToValue@i^(0+128)
 14722  0AA5  0020               	movlb	0	; select bank0
 14723  0AA6  0835               	movf	?___ftdiv+1,w
 14724  0AA7  0021               	movlb	1	; select bank1
 14725  0AA8  00DF               	movwf	(getDimmerLights_PercentToValue@i+1)^(0+128)
 14726  0AA9  0020               	movlb	0	; select bank0
 14727  0AAA  0836               	movf	?___ftdiv+2,w
 14728  0AAB  0021               	movlb	1	; select bank1
 14729  0AAC  00E0               	movwf	(getDimmerLights_PercentToValue@i+2)^(0+128)
 14730                           
 14731                           ;Dimmer_B1.c: 1050: return (char) (((char)(65*0.75)) - ((100 - value) * i));
 14732  0AAD  085D               	movf	getDimmerLights_PercentToValue@value^(0+128),w
 14733  0AAE  00DB               	movwf	??_getDimmerLights_PercentToValue^(0+128)
 14734  0AAF  01DC               	clrf	(??_getDimmerLights_PercentToValue^(0+128)+1)
 14735  0AB0  09DB               	comf	??_getDimmerLights_PercentToValue^(0+128),f
 14736  0AB1  09DC               	comf	(??_getDimmerLights_PercentToValue^(0+128)+1),f
 14737  0AB2  0ADB               	incf	??_getDimmerLights_PercentToValue^(0+128),f
 14738  0AB3  1903               	skipnz
 14739  0AB4  0ADC               	incf	(??_getDimmerLights_PercentToValue^(0+128)+1),f
 14740  0AB5  085B               	movf	??_getDimmerLights_PercentToValue^(0+128),w
 14741  0AB6  3E64               	addlw	100
 14742  0AB7  0020               	movlb	0	; select bank0
 14743  0AB8  00AE               	movwf	___awtoft@c
 14744  0AB9  3000               	movlw	0
 14745  0ABA  0021               	movlb	1	; select bank1
 14746  0ABB  3D5C               	addwfc	(??_getDimmerLights_PercentToValue+1)^(0+128),w
 14747  0ABC  0020               	movlb	0	; select bank0
 14748  0ABD  00AF               	movwf	___awtoft@c+1
 14749  0ABE  3190  20E4  318A   	fcall	___awtoft
 14750  0AC1  0020               	movlb	0	; select bank0
 14751  0AC2  082E               	movf	?___awtoft,w
 14752  0AC3  00B7               	movwf	___ftmul@f2
 14753  0AC4  082F               	movf	?___awtoft+1,w
 14754  0AC5  00B8               	movwf	___ftmul@f2+1
 14755  0AC6  0830               	movf	?___awtoft+2,w
 14756  0AC7  00B9               	movwf	___ftmul@f2+2
 14757  0AC8  0021               	movlb	1	; select bank1
 14758  0AC9  085E               	movf	getDimmerLights_PercentToValue@i^(0+128),w
 14759  0ACA  0020               	movlb	0	; select bank0
 14760  0ACB  00B4               	movwf	___ftmul@f1
 14761  0ACC  0021               	movlb	1	; select bank1
 14762  0ACD  085F               	movf	(getDimmerLights_PercentToValue@i+1)^(0+128),w
 14763  0ACE  0020               	movlb	0	; select bank0
 14764  0ACF  00B5               	movwf	___ftmul@f1+1
 14765  0AD0  0021               	movlb	1	; select bank1
 14766  0AD1  0860               	movf	(getDimmerLights_PercentToValue@i+2)^(0+128),w
 14767  0AD2  0020               	movlb	0	; select bank0
 14768  0AD3  00B6               	movwf	___ftmul@f1+2
 14769  0AD4  318E  2691  318A   	fcall	___ftmul
 14770  0AD7  0020               	movlb	0	; select bank0
 14771  0AD8  0834               	movf	?___ftmul,w
 14772  0AD9  00C4               	movwf	___ftneg@f1
 14773  0ADA  0835               	movf	?___ftmul+1,w
 14774  0ADB  00C5               	movwf	___ftneg@f1+1
 14775  0ADC  0836               	movf	?___ftmul+2,w
 14776  0ADD  00C6               	movwf	___ftneg@f1+2
 14777  0ADE  319C  2412  318A   	fcall	___ftneg
 14778  0AE1  0020               	movlb	0	; select bank0
 14779  0AE2  0844               	movf	?___ftneg,w
 14780  0AE3  00CA               	movwf	___ftadd@f2
 14781  0AE4  0845               	movf	?___ftneg+1,w
 14782  0AE5  00CB               	movwf	___ftadd@f2+1
 14783  0AE6  0846               	movf	?___ftneg+2,w
 14784  0AE7  00CC               	movwf	___ftadd@f2+2
 14785  0AE8  3000               	movlw	0
 14786  0AE9  00C7               	movwf	___ftadd@f1
 14787  0AEA  3040               	movlw	64
 14788  0AEB  00C8               	movwf	___ftadd@f1+1
 14789  0AEC  3042               	movlw	66
 14790  0AED  00C9               	movwf	___ftadd@f1+2
 14791  0AEE  3184  246E  318A   	fcall	___ftadd
 14792  0AF1  0020               	movlb	0	; select bank0
 14793  0AF2  0847               	movf	?___ftadd,w
 14794  0AF3  00D4               	movwf	___fttol@f1
 14795  0AF4  0848               	movf	?___ftadd+1,w
 14796  0AF5  00D5               	movwf	___fttol@f1+1
 14797  0AF6  0849               	movf	?___ftadd+2,w
 14798  0AF7  00D6               	movwf	___fttol@f1+2
 14799  0AF8  318B  237E         	fcall	___fttol
 14800  0AFA  0020               	movlb	0	; select bank0
 14801  0AFB  0854               	movf	?___fttol,w
 14802  0AFC  0008               	return
 14803  0AFD                     __end_of_getDimmerLights_PercentToValue:	
 14804                           
 14805                           	psect	text99
 14806  0E91                     __ptext99:	
 14807 ;; *************** function ___ftmul *****************
 14808 ;; Defined at:
 14809 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14810 ;; Parameters:    Size  Location     Type
 14811 ;;  f1              3   20[BANK0 ] float 
 14812 ;;  f2              3   23[BANK0 ] float 
 14813 ;; Auto vars:     Size  Location     Type
 14814 ;;  f3_as_produc    3   31[BANK0 ] unsigned um
 14815 ;;  sign            1   35[BANK0 ] unsigned char 
 14816 ;;  cntr            1   34[BANK0 ] unsigned char 
 14817 ;;  exp             1   30[BANK0 ] unsigned char 
 14818 ;; Return value:  Size  Location     Type
 14819 ;;                  3   20[BANK0 ] float 
 14820 ;; Registers used:
 14821 ;;		wreg, status,2, status,0, pclath, cstack
 14822 ;; Tracked objects:
 14823 ;;		On entry : 0/0
 14824 ;;		On exit  : 0/0
 14825 ;;		Unchanged: 0/0
 14826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14827 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14828 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;Total ram usage:       16 bytes
 14832 ;; Hardware stack levels used:    1
 14833 ;; Hardware stack levels required when called:    6
 14834 ;; This function calls:
 14835 ;;		___ftpack
 14836 ;; This function is called by:
 14837 ;;		_getDimmerLights_PercentToValue
 14838 ;; This function uses a non-reentrant model
 14839 ;;
 14840                           
 14841                           
 14842                           ;psect for function ___ftmul
 14843  0E91                     ___ftmul:	
 14844                           
 14845                           ;incstack = 0
 14846                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14847  0E91  0020               	movlb	0	; select bank0
 14848  0E92  0834               	movf	___ftmul@f1,w
 14849  0E93  00BA               	movwf	??___ftmul
 14850  0E94  0835               	movf	___ftmul@f1+1,w
 14851  0E95  00BB               	movwf	??___ftmul+1
 14852  0E96  0836               	movf	___ftmul@f1+2,w
 14853  0E97  00BC               	movwf	??___ftmul+2
 14854  0E98  1003               	clrc
 14855  0E99  0D3B               	rlf	??___ftmul+1,w
 14856  0E9A  0D3C               	rlf	??___ftmul+2,w
 14857  0E9B  00BD               	movwf	??___ftmul+3
 14858  0E9C  083D               	movf	??___ftmul+3,w
 14859  0E9D  00BE               	movwf	___ftmul@exp
 14860  0E9E  08BE               	movf	___ftmul@exp,f
 14861  0E9F  1D03               	skipz
 14862  0EA0  2EA8               	goto	l10359
 14863  0EA1  3000               	movlw	0
 14864  0EA2  00B4               	movwf	?___ftmul
 14865  0EA3  3000               	movlw	0
 14866  0EA4  00B5               	movwf	?___ftmul+1
 14867  0EA5  3000               	movlw	0
 14868  0EA6  00B6               	movwf	?___ftmul+2
 14869  0EA7  0008               	return
 14870  0EA8                     l10359:	
 14871  0EA8  0837               	movf	___ftmul@f2,w
 14872  0EA9  00BA               	movwf	??___ftmul
 14873  0EAA  0838               	movf	___ftmul@f2+1,w
 14874  0EAB  00BB               	movwf	??___ftmul+1
 14875  0EAC  0839               	movf	___ftmul@f2+2,w
 14876  0EAD  00BC               	movwf	??___ftmul+2
 14877  0EAE  1003               	clrc
 14878  0EAF  0D3B               	rlf	??___ftmul+1,w
 14879  0EB0  0D3C               	rlf	??___ftmul+2,w
 14880  0EB1  00BD               	movwf	??___ftmul+3
 14881  0EB2  083D               	movf	??___ftmul+3,w
 14882  0EB3  00C3               	movwf	___ftmul@sign
 14883  0EB4  08C3               	movf	___ftmul@sign,f
 14884  0EB5  1D03               	skipz
 14885  0EB6  2EBE               	goto	l10365
 14886  0EB7  3000               	movlw	0
 14887  0EB8  00B4               	movwf	?___ftmul
 14888  0EB9  3000               	movlw	0
 14889  0EBA  00B5               	movwf	?___ftmul+1
 14890  0EBB  3000               	movlw	0
 14891  0EBC  00B6               	movwf	?___ftmul+2
 14892  0EBD  0008               	return
 14893  0EBE                     l10365:	
 14894  0EBE  0843               	movf	___ftmul@sign,w
 14895  0EBF  3E7B               	addlw	123
 14896  0EC0  00BA               	movwf	??___ftmul
 14897  0EC1  083A               	movf	??___ftmul,w
 14898  0EC2  07BE               	addwf	___ftmul@exp,f
 14899  0EC3  0834               	movf	___ftmul@f1,w
 14900  0EC4  00BA               	movwf	??___ftmul
 14901  0EC5  0835               	movf	___ftmul@f1+1,w
 14902  0EC6  00BB               	movwf	??___ftmul+1
 14903  0EC7  0836               	movf	___ftmul@f1+2,w
 14904  0EC8  00BC               	movwf	??___ftmul+2
 14905  0EC9  3010               	movlw	16
 14906  0ECA                     u12185:	
 14907  0ECA  36BC               	lsrf	??___ftmul+2,f
 14908  0ECB  0CBB               	rrf	??___ftmul+1,f
 14909  0ECC  0CBA               	rrf	??___ftmul,f
 14910  0ECD  0B89               	decfsz	9,f
 14911  0ECE  2ECA               	goto	u12185
 14912  0ECF  083A               	movf	??___ftmul,w
 14913  0ED0  00BD               	movwf	??___ftmul+3
 14914  0ED1  083D               	movf	??___ftmul+3,w
 14915  0ED2  00C3               	movwf	___ftmul@sign
 14916  0ED3  0837               	movf	___ftmul@f2,w
 14917  0ED4  00BA               	movwf	??___ftmul
 14918  0ED5  0838               	movf	___ftmul@f2+1,w
 14919  0ED6  00BB               	movwf	??___ftmul+1
 14920  0ED7  0839               	movf	___ftmul@f2+2,w
 14921  0ED8  00BC               	movwf	??___ftmul+2
 14922  0ED9  3010               	movlw	16
 14923  0EDA                     u12195:	
 14924  0EDA  36BC               	lsrf	??___ftmul+2,f
 14925  0EDB  0CBB               	rrf	??___ftmul+1,f
 14926  0EDC  0CBA               	rrf	??___ftmul,f
 14927  0EDD  0B89               	decfsz	9,f
 14928  0EDE  2EDA               	goto	u12195
 14929  0EDF  083A               	movf	??___ftmul,w
 14930  0EE0  00BD               	movwf	??___ftmul+3
 14931  0EE1  083D               	movf	??___ftmul+3,w
 14932  0EE2  06C3               	xorwf	___ftmul@sign,f
 14933  0EE3  3080               	movlw	128
 14934  0EE4  00BA               	movwf	??___ftmul
 14935  0EE5  083A               	movf	??___ftmul,w
 14936  0EE6  05C3               	andwf	___ftmul@sign,f
 14937  0EE7  17B5               	bsf	___ftmul@f1+1,7
 14938  0EE8  17B8               	bsf	___ftmul@f2+1,7
 14939  0EE9  30FF               	movlw	255
 14940  0EEA  05B7               	andwf	___ftmul@f2,f
 14941  0EEB  30FF               	movlw	255
 14942  0EEC  05B8               	andwf	___ftmul@f2+1,f
 14943  0EED  3000               	movlw	0
 14944  0EEE  05B9               	andwf	___ftmul@f2+2,f
 14945  0EEF  3000               	movlw	0
 14946  0EF0  00BF               	movwf	___ftmul@f3_as_product
 14947  0EF1  3000               	movlw	0
 14948  0EF2  00C0               	movwf	___ftmul@f3_as_product+1
 14949  0EF3  3000               	movlw	0
 14950  0EF4  00C1               	movwf	___ftmul@f3_as_product+2
 14951  0EF5  3007               	movlw	7
 14952  0EF6  00BA               	movwf	??___ftmul
 14953  0EF7  083A               	movf	??___ftmul,w
 14954  0EF8  00C2               	movwf	___ftmul@cntr
 14955  0EF9                     l10377:	
 14956  0EF9  1C34               	btfss	___ftmul@f1,0
 14957  0EFA  2F01               	goto	l10381
 14958  0EFB  0837               	movf	___ftmul@f2,w
 14959  0EFC  07BF               	addwf	___ftmul@f3_as_product,f
 14960  0EFD  0838               	movf	___ftmul@f2+1,w
 14961  0EFE  3DC0               	addwfc	___ftmul@f3_as_product+1,f
 14962  0EFF  0839               	movf	___ftmul@f2+2,w
 14963  0F00  3DC1               	addwfc	___ftmul@f3_as_product+2,f
 14964  0F01                     l10381:	
 14965  0F01  3001               	movlw	1
 14966  0F02                     u12215:	
 14967  0F02  36B6               	lsrf	___ftmul@f1+2,f
 14968  0F03  0CB5               	rrf	___ftmul@f1+1,f
 14969  0F04  0CB4               	rrf	___ftmul@f1,f
 14970  0F05  0B89               	decfsz	9,f
 14971  0F06  2F02               	goto	u12215
 14972  0F07  3001               	movlw	1
 14973  0F08                     u12225:	
 14974  0F08  35B7               	lslf	___ftmul@f2,f
 14975  0F09  0DB8               	rlf	___ftmul@f2+1,f
 14976  0F0A  0DB9               	rlf	___ftmul@f2+2,f
 14977  0F0B  0B89               	decfsz	9,f
 14978  0F0C  2F08               	goto	u12225
 14979  0F0D  3001               	movlw	1
 14980  0F0E  02C2               	subwf	___ftmul@cntr,f
 14981  0F0F  1D03               	btfss	3,2
 14982  0F10  2EF9               	goto	l10377
 14983  0F11  3009               	movlw	9
 14984  0F12  00BA               	movwf	??___ftmul
 14985  0F13  083A               	movf	??___ftmul,w
 14986  0F14  00C2               	movwf	___ftmul@cntr
 14987  0F15                     l10389:	
 14988  0F15  1C34               	btfss	___ftmul@f1,0
 14989  0F16  2F1D               	goto	l10393
 14990  0F17  0837               	movf	___ftmul@f2,w
 14991  0F18  07BF               	addwf	___ftmul@f3_as_product,f
 14992  0F19  0838               	movf	___ftmul@f2+1,w
 14993  0F1A  3DC0               	addwfc	___ftmul@f3_as_product+1,f
 14994  0F1B  0839               	movf	___ftmul@f2+2,w
 14995  0F1C  3DC1               	addwfc	___ftmul@f3_as_product+2,f
 14996  0F1D                     l10393:	
 14997  0F1D  3001               	movlw	1
 14998  0F1E                     u12255:	
 14999  0F1E  36B6               	lsrf	___ftmul@f1+2,f
 15000  0F1F  0CB5               	rrf	___ftmul@f1+1,f
 15001  0F20  0CB4               	rrf	___ftmul@f1,f
 15002  0F21  0B89               	decfsz	9,f
 15003  0F22  2F1E               	goto	u12255
 15004  0F23  3001               	movlw	1
 15005  0F24                     u12265:	
 15006  0F24  36C1               	lsrf	___ftmul@f3_as_product+2,f
 15007  0F25  0CC0               	rrf	___ftmul@f3_as_product+1,f
 15008  0F26  0CBF               	rrf	___ftmul@f3_as_product,f
 15009  0F27  0B89               	decfsz	9,f
 15010  0F28  2F24               	goto	u12265
 15011  0F29  3001               	movlw	1
 15012  0F2A  02C2               	subwf	___ftmul@cntr,f
 15013  0F2B  1D03               	btfss	3,2
 15014  0F2C  2F15               	goto	l10389
 15015  0F2D  083F               	movf	___ftmul@f3_as_product,w
 15016  0F2E  00A6               	movwf	___ftpack@arg
 15017  0F2F  0840               	movf	___ftmul@f3_as_product+1,w
 15018  0F30  00A7               	movwf	___ftpack@arg+1
 15019  0F31  0841               	movf	___ftmul@f3_as_product+2,w
 15020  0F32  00A8               	movwf	___ftpack@arg+2
 15021  0F33  083E               	movf	___ftmul@exp,w
 15022  0F34  00BA               	movwf	??___ftmul
 15023  0F35  083A               	movf	??___ftmul,w
 15024  0F36  00A9               	movwf	___ftpack@exp
 15025  0F37  0843               	movf	___ftmul@sign,w
 15026  0F38  00BB               	movwf	??___ftmul+1
 15027  0F39  083B               	movf	??___ftmul+1,w
 15028  0F3A  00AA               	movwf	___ftpack@sign
 15029  0F3B  3196  2663         	fcall	___ftpack
 15030  0F3D  0020               	movlb	0	; select bank0
 15031  0F3E  0826               	movf	?___ftpack,w
 15032  0F3F  00B4               	movwf	?___ftmul
 15033  0F40  0827               	movf	?___ftpack+1,w
 15034  0F41  00B5               	movwf	?___ftmul+1
 15035  0F42  0828               	movf	?___ftpack+2,w
 15036  0F43  00B6               	movwf	?___ftmul+2
 15037  0F44  0008               	return
 15038  0F45                     __end_of___ftmul:	
 15039                           
 15040                           	psect	text100
 15041  1D24                     __ptext100:	
 15042 ;; *************** function _getDelayOff_GO *****************
 15043 ;; Defined at:
 15044 ;;		line 114 in file "../src/DelayOff_B1.c"
 15045 ;; Parameters:    Size  Location     Type
 15046 ;;  sw              1    wreg     unsigned char 
 15047 ;; Auto vars:     Size  Location     Type
 15048 ;;  sw              1    8[BANK0 ] unsigned char 
 15049 ;;  go              1    9[BANK0 ] unsigned char 
 15050 ;; Return value:  Size  Location     Type
 15051 ;;                  1    wreg      unsigned char 
 15052 ;; Registers used:
 15053 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15054 ;; Tracked objects:
 15055 ;;		On entry : 0/0
 15056 ;;		On exit  : 0/0
 15057 ;;		Unchanged: 0/0
 15058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15062 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;Total ram usage:        2 bytes
 15064 ;; Hardware stack levels used:    1
 15065 ;; Hardware stack levels required when called:    6
 15066 ;; This function calls:
 15067 ;;		_DelayOffPointSelect
 15068 ;; This function is called by:
 15069 ;;		_setDimmerLights_OnOff
 15070 ;; This function uses a non-reentrant model
 15071 ;;
 15072                           
 15073                           
 15074                           ;psect for function _getDelayOff_GO
 15075  1D24                     _getDelayOff_GO:	
 15076                           
 15077                           ;incstack = 0
 15078                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15079                           ;getDelayOff_GO@sw stored from wreg
 15080  1D24  0020               	movlb	0	; select bank0
 15081  1D25  00A8               	movwf	getDelayOff_GO@sw
 15082                           
 15083                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15084  1D26  0828               	movf	getDelayOff_GO@sw,w
 15085  1D27  319C  242E         	fcall	_DelayOffPointSelect
 15086                           
 15087                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15088  1D29  0020               	movlb	0	; select bank0
 15089  1D2A  0863               	movf	_DelayOff,w
 15090  1D2B  0086               	movwf	6
 15091  1D2C  3001               	movlw	1	; select bank2/3
 15092  1D2D  0087               	movwf	7
 15093  1D2E  3000               	movlw	0
 15094  1D2F  1881               	btfsc	1,1
 15095  1D30  3001               	movlw	1
 15096  1D31  00A9               	movwf	getDelayOff_GO@go
 15097                           
 15098                           ;DelayOff_B1.c: 117: return go;
 15099  1D32  0829               	movf	getDelayOff_GO@go,w
 15100  1D33  0008               	return
 15101  1D34                     __end_of_getDelayOff_GO:	
 15102                           
 15103                           	psect	text101
 15104  1D99                     __ptext101:	
 15105 ;; *************** function _getCmd_Status *****************
 15106 ;; Defined at:
 15107 ;;		line 659 in file "../src/Main_B1.c"
 15108 ;; Parameters:    Size  Location     Type
 15109 ;;  number          1    wreg     unsigned char 
 15110 ;; Auto vars:     Size  Location     Type
 15111 ;;  number          1    6[BANK0 ] unsigned char 
 15112 ;;  cmd             1    7[BANK0 ] unsigned char 
 15113 ;; Return value:  Size  Location     Type
 15114 ;;                  1    wreg      unsigned char 
 15115 ;; Registers used:
 15116 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15117 ;; Tracked objects:
 15118 ;;		On entry : 0/0
 15119 ;;		On exit  : 0/0
 15120 ;;		Unchanged: 0/0
 15121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;Total ram usage:        2 bytes
 15127 ;; Hardware stack levels used:    1
 15128 ;; Hardware stack levels required when called:    5
 15129 ;; This function calls:
 15130 ;;		Nothing
 15131 ;; This function is called by:
 15132 ;;		_setDimmerLights_OnOff
 15133 ;; This function uses a non-reentrant model
 15134 ;;
 15135                           
 15136                           
 15137                           ;psect for function _getCmd_Status
 15138  1D99                     _getCmd_Status:	
 15139                           
 15140                           ;incstack = 0
 15141                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15142                           ;getCmd_Status@number stored from wreg
 15143  1D99  0020               	movlb	0	; select bank0
 15144  1D9A  00A6               	movwf	getCmd_Status@number
 15145                           
 15146                           ;Main_B1.c: 660: char cmd = 0;
 15147  1D9B  01A7               	clrf	getCmd_Status@cmd
 15148                           
 15149                           ;Main_B1.c: 661: switch (number) {
 15150  1D9C  2DA4               	goto	l10965
 15151  1D9D                     l10961:	
 15152                           ;Main_B1.c: 662: case 1:
 15153                           
 15154                           
 15155                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15156  1D9D  3000               	movlw	0
 15157  1D9E  0021               	movlb	1	; select bank1
 15158  1D9F  1848               	btfsc	_Cmd^(0+128),0
 15159  1DA0  3001               	movlw	1
 15160  1DA1  0020               	movlb	0	; select bank0
 15161  1DA2  00A7               	movwf	getCmd_Status@cmd
 15162                           
 15163                           ;Main_B1.c: 665: }
 15164                           
 15165                           ;Main_B1.c: 664: break;
 15166  1DA3  2DA9               	goto	l10967
 15167  1DA4                     l10965:	
 15168  1DA4  0826               	movf	getCmd_Status@number,w
 15169                           
 15170                           ; Switch size 1, requested type "space"
 15171                           ; Number of cases is 1, Range of values is 1 to 1
 15172                           ; switch strategies available:
 15173                           ; Name         Instructions Cycles
 15174                           ; simple_byte            4     3 (average)
 15175                           ; direct_byte           11     9 (fixed)
 15176                           ; jumptable            263     9 (fixed)
 15177                           ;	Chosen strategy is simple_byte
 15178  1DA5  3A01               	xorlw	1	; case 1
 15179  1DA6  1903               	skipnz
 15180  1DA7  2D9D               	goto	l10961
 15181  1DA8  2DA9               	goto	l10967
 15182  1DA9                     l10967:	
 15183                           
 15184                           ;Main_B1.c: 666: return cmd;
 15185  1DA9  0827               	movf	getCmd_Status@cmd,w
 15186  1DAA  0008               	return
 15187  1DAB                     __end_of_getCmd_Status:	
 15188                           
 15189                           	psect	text102
 15190  14FB                     __ptext102:	
 15191 ;; *************** function _setDimmerLights_Dimming *****************
 15192 ;; Defined at:
 15193 ;;		line 883 in file "../src/Dimmer_B1.c"
 15194 ;; Parameters:    Size  Location     Type
 15195 ;;  lights          1    wreg     unsigned char 
 15196 ;;  status          1   13[BANK1 ] unsigned char 
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;  lights          1   15[BANK1 ] unsigned char 
 15199 ;; Return value:  Size  Location     Type
 15200 ;;		None               void
 15201 ;; Registers used:
 15202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15203 ;; Tracked objects:
 15204 ;;		On entry : 0/0
 15205 ;;		On exit  : 0/0
 15206 ;;		Unchanged: 0/0
 15207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15208 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15211 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;Total ram usage:        3 bytes
 15213 ;; Hardware stack levels used:    1
 15214 ;; Hardware stack levels required when called:    8
 15215 ;; This function calls:
 15216 ;;		_getDimmerIntr_DimmingValue
 15217 ;;		_getDimmerLights_ValueToPercent
 15218 ;;		_setBuz
 15219 ;;		_setDimmerIntr_Dimming_Sw
 15220 ;;		_setDimmerIntr_MaxmumValue
 15221 ;;		_setDimmerLights_Line
 15222 ;;		_setProductData
 15223 ;;		_setRF_DimmerLights
 15224 ;;		_setRF_TransceiveGO
 15225 ;;		_setTxData
 15226 ;; This function is called by:
 15227 ;;		_setDimmerLights_Main
 15228 ;; This function uses a non-reentrant model
 15229 ;;
 15230                           
 15231                           
 15232                           ;psect for function _setDimmerLights_Dimming
 15233  14FB                     _setDimmerLights_Dimming:	
 15234                           
 15235                           ;incstack = 0
 15236                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15237                           ;setDimmerLights_Dimming@lights stored from wreg
 15238  14FB  0021               	movlb	1	; select bank1
 15239  14FC  00EA               	movwf	setDimmerLights_Dimming@lights^(0+128)
 15240                           
 15241                           ;Dimmer_B1.c: 884: if (status == 1) {
 15242  14FD  0868               	movf	setDimmerLights_Dimming@status^(0+128),w
 15243  14FE  3A01               	xorlw	1
 15244  14FF  1D03               	skipz
 15245  1500  2D16               	goto	l11195
 15246                           
 15247                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15248  1501  0020               	movlb	0	; select bank0
 15249  1502  01A6               	clrf	setDimmerIntr_Dimming_Sw@command
 15250  1503  0AA6               	incf	setDimmerIntr_Dimming_Sw@command,f
 15251  1504  0021               	movlb	1	; select bank1
 15252  1505  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15253  1506  319E  26BD  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15254                           
 15255                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15256  1509  3000               	movlw	0
 15257  150A  319D  25E1  3194   	fcall	_setRF_TransceiveGO
 15258                           
 15259                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15260  150D  3064               	movlw	100
 15261  150E  0020               	movlb	0	; select bank0
 15262  150F  00AF               	movwf	setBuz@time
 15263  1510  3000               	movlw	0
 15264  1511  00B0               	movwf	setBuz@time+1
 15265  1512  3001               	movlw	1
 15266  1513  3195  2550         	fcall	_setBuz
 15267                           
 15268                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15269  1515  0008               	return
 15270  1516                     l11195:	
 15271  1516  0021               	movlb	1	; select bank1
 15272  1517  08E8               	movf	setDimmerLights_Dimming@status^(0+128),f
 15273  1518  1D03               	skipz
 15274  1519  0008               	return
 15275                           
 15276                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15277  151A  0020               	movlb	0	; select bank0
 15278  151B  01A6               	clrf	setDimmerIntr_Dimming_Sw@command
 15279  151C  0021               	movlb	1	; select bank1
 15280  151D  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15281  151E  319E  26BD  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15282                           
 15283                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15284  1521  0022               	movlb	2	; select bank2
 15285  1522  112D               	bcf	_Dimmer^(0+256),2
 15286                           
 15287                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15288  1523  0021               	movlb	1	; select bank1
 15289  1524  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15290  1525  319D  2544  3194   	fcall	_setDimmerLights_Line
 15291                           
 15292                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15293  1528  0021               	movlb	1	; select bank1
 15294  1529  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15295  152A  319C  24F6  3194   	fcall	_getDimmerIntr_DimmingValue
 15296  152D  0021               	movlb	1	; select bank1
 15297  152E  00E9               	movwf	??_setDimmerLights_Dimming^(0+128)
 15298  152F  0869               	movf	??_setDimmerLights_Dimming^(0+128),w
 15299  1530  00E1               	movwf	setDimmerIntr_MaxmumValue@value^(0+128)
 15300  1531  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15301  1532  319C  24DA  3194   	fcall	_setDimmerIntr_MaxmumValue
 15302                           
 15303                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15304  1535  0021               	movlb	1	; select bank1
 15305  1536  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15306  1537  319C  24F6  3194   	fcall	_getDimmerIntr_DimmingValue
 15307  153A  318A  2209  3194   	fcall	_getDimmerLights_ValueToPercent
 15308  153D  0021               	movlb	1	; select bank1
 15309  153E  00E9               	movwf	??_setDimmerLights_Dimming^(0+128)
 15310  153F  0869               	movf	??_setDimmerLights_Dimming^(0+128),w
 15311  1540  00E1               	movwf	setProductData@value^(0+128)
 15312  1541  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15313  1542  3E14               	addlw	20
 15314  1543  319C  24E7  3194   	fcall	_setProductData
 15315                           
 15316                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15317  1546  0021               	movlb	1	; select bank1
 15318  1547  01E3               	clrf	setRF_DimmerLights@on^(0+128)
 15319  1548  0AE3               	incf	setRF_DimmerLights@on^(0+128),f
 15320  1549  086A               	movf	setDimmerLights_Dimming@lights^(0+128),w
 15321  154A  3196  2604  3194   	fcall	_setRF_DimmerLights
 15322                           
 15323                           ;Dimmer_B1.c: 911: setTxData();
 15324  154D  318F  2745         	fcall	_setTxData
 15325  154F  0008               	return
 15326  1550                     __end_of_setDimmerLights_Dimming:	
 15327                           
 15328                           	psect	text103
 15329  0F45                     __ptext103:	
 15330 ;; *************** function _setTxData *****************
 15331 ;; Defined at:
 15332 ;;		line 183 in file "../src/RF_Control_B1.c"
 15333 ;; Parameters:    Size  Location     Type
 15334 ;;		None
 15335 ;; Auto vars:     Size  Location     Type
 15336 ;;  i               1    0        unsigned char 
 15337 ;; Return value:  Size  Location     Type
 15338 ;;		None               void
 15339 ;; Registers used:
 15340 ;;		wreg, fsr1l, fsr1h, status,2
 15341 ;; Tracked objects:
 15342 ;;		On entry : 0/0
 15343 ;;		On exit  : 0/0
 15344 ;;		Unchanged: 0/0
 15345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;Total ram usage:        1 bytes
 15351 ;; Hardware stack levels used:    1
 15352 ;; Hardware stack levels required when called:    5
 15353 ;; This function calls:
 15354 ;;		Nothing
 15355 ;; This function is called by:
 15356 ;;		_setDimmerLights_OnOff
 15357 ;;		_setDimmerLights_Dimming
 15358 ;;		_getRxData
 15359 ;;		_setControl_Lights_Table
 15360 ;;		_setRFSW_Control
 15361 ;;		_setRFSW_AdjControl
 15362 ;; This function uses a non-reentrant model
 15363 ;;
 15364                           
 15365                           
 15366                           ;psect for function _setTxData
 15367  0F45                     _setTxData:	
 15368                           
 15369                           ;RF_Control_B1.c: 184: char i;
 15370                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15371                           
 15372                           ;incstack = 0
 15373                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15374  0F45  0021               	movlb	1	; select bank1
 15375  0F46  1C20               	btfss	_RF1^(0+128),0
 15376  0F47  0008               	return
 15377                           
 15378                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15379  0F48  1520               	bsf	_RF1^(0+128),2
 15380                           
 15381                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15382  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15383  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15384                           
 15385                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15386  0F4B  3063               	movlw	99
 15387  0F4C  0020               	movlb	0	; select bank0
 15388  0F4D  00A6               	movwf	??_setTxData
 15389  0F4E  0826               	movf	??_setTxData,w
 15390  0F4F  0023               	movlb	3	; select bank3
 15391  0F50  00A0               	movwf	_RF_Data^(0+384)
 15392                           
 15393                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15394  0F51  3002               	movlw	2
 15395  0F52  0020               	movlb	0	; select bank0
 15396  0F53  00A6               	movwf	??_setTxData
 15397  0F54  0826               	movf	??_setTxData,w
 15398  0F55  0023               	movlb	3	; select bank3
 15399  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15400                           
 15401                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15402  0F57  0021               	movlb	1	; select bank1
 15403  0F58  086F               	movf	_product^(0+128),w
 15404  0F59  0086               	movwf	6
 15405  0F5A  3002               	movlw	2	; select bank4/5
 15406  0F5B  0087               	movwf	7
 15407  0F5C  3002               	movlw	2	; select bank4/5
 15408  0F5D  3F42               	moviw [2]fsr1
 15409  0F5E  0023               	movlb	3	; select bank3
 15410  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15411                           
 15412                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15413  0F60  0021               	movlb	1	; select bank1
 15414  0F61  086F               	movf	_product^(0+128),w
 15415  0F62  0086               	movwf	6
 15416  0F63  3002               	movlw	2	; select bank4/5
 15417  0F64  0087               	movwf	7
 15418  0F65  3002               	movlw	2	; select bank4/5
 15419  0F66  3F43               	moviw [3]fsr1
 15420  0F67  0023               	movlb	3	; select bank3
 15421  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15422                           
 15423                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15424  0F69  0021               	movlb	1	; select bank1
 15425  0F6A  086F               	movf	_product^(0+128),w
 15426  0F6B  0086               	movwf	6
 15427  0F6C  3002               	movlw	2	; select bank4/5
 15428  0F6D  0087               	movwf	7
 15429  0F6E  3002               	movlw	2	; select bank4/5
 15430  0F6F  3F44               	moviw [4]fsr1
 15431  0F70  0023               	movlb	3	; select bank3
 15432  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15433                           
 15434                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15435  0F72  0021               	movlb	1	; select bank1
 15436  0F73  086F               	movf	_product^(0+128),w
 15437  0F74  0086               	movwf	6
 15438  0F75  3002               	movlw	2	; select bank4/5
 15439  0F76  0087               	movwf	7
 15440  0F77  3002               	movlw	2	; select bank4/5
 15441  0F78  3F45               	moviw [5]fsr1
 15442  0F79  0023               	movlb	3	; select bank3
 15443  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15444                           
 15445                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15446  0F7B  0021               	movlb	1	; select bank1
 15447  0F7C  086F               	movf	_product^(0+128),w
 15448  0F7D  0086               	movwf	6
 15449  0F7E  3002               	movlw	2	; select bank4/5
 15450  0F7F  0087               	movwf	7
 15451  0F80  3002               	movlw	2	; select bank4/5
 15452  0F81  3F46               	moviw [6]fsr1
 15453  0F82  0023               	movlb	3	; select bank3
 15454  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15455                           
 15456                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15457  0F84  0021               	movlb	1	; select bank1
 15458  0F85  086F               	movf	_product^(0+128),w
 15459  0F86  0086               	movwf	6
 15460  0F87  3002               	movlw	2	; select bank4/5
 15461  0F88  0087               	movwf	7
 15462  0F89  3002               	movlw	2	; select bank4/5
 15463  0F8A  3F47               	moviw [7]fsr1
 15464  0F8B  0023               	movlb	3	; select bank3
 15465  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15466                           
 15467                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15468  0F8D  0021               	movlb	1	; select bank1
 15469  0F8E  086F               	movf	_product^(0+128),w
 15470  0F8F  0086               	movwf	6
 15471  0F90  3002               	movlw	2	; select bank4/5
 15472  0F91  0087               	movwf	7
 15473  0F92  3002               	movlw	2	; select bank4/5
 15474  0F93  3F48               	moviw [8]fsr1
 15475  0F94  0023               	movlb	3	; select bank3
 15476  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15477                           
 15478                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15479  0F96  0021               	movlb	1	; select bank1
 15480  0F97  086F               	movf	_product^(0+128),w
 15481  0F98  0086               	movwf	6
 15482  0F99  3002               	movlw	2	; select bank4/5
 15483  0F9A  0087               	movwf	7
 15484  0F9B  3002               	movlw	2	; select bank4/5
 15485  0F9C  3F49               	moviw [9]fsr1
 15486  0F9D  0023               	movlb	3	; select bank3
 15487  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15488                           
 15489                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15490  0F9F  0021               	movlb	1	; select bank1
 15491  0FA0  086F               	movf	_product^(0+128),w
 15492  0FA1  0086               	movwf	6
 15493  0FA2  3002               	movlw	2	; select bank4/5
 15494  0FA3  0087               	movwf	7
 15495  0FA4  3002               	movlw	2	; select bank4/5
 15496  0FA5  3F4A               	moviw [10]fsr1
 15497  0FA6  0023               	movlb	3	; select bank3
 15498  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15499                           
 15500                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15501  0FA8  0021               	movlb	1	; select bank1
 15502  0FA9  086F               	movf	_product^(0+128),w
 15503  0FAA  0086               	movwf	6
 15504  0FAB  3002               	movlw	2	; select bank4/5
 15505  0FAC  0087               	movwf	7
 15506  0FAD  3002               	movlw	2	; select bank4/5
 15507  0FAE  3F4B               	moviw [11]fsr1
 15508  0FAF  0023               	movlb	3	; select bank3
 15509  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15510                           
 15511                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15512  0FB1  0021               	movlb	1	; select bank1
 15513  0FB2  086F               	movf	_product^(0+128),w
 15514  0FB3  0086               	movwf	6
 15515  0FB4  3002               	movlw	2	; select bank4/5
 15516  0FB5  0087               	movwf	7
 15517  0FB6  3002               	movlw	2	; select bank4/5
 15518  0FB7  3F4C               	moviw [12]fsr1
 15519  0FB8  0023               	movlb	3	; select bank3
 15520  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15521                           
 15522                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15523  0FBA  0021               	movlb	1	; select bank1
 15524  0FBB  086F               	movf	_product^(0+128),w
 15525  0FBC  0086               	movwf	6
 15526  0FBD  3002               	movlw	2	; select bank4/5
 15527  0FBE  0087               	movwf	7
 15528  0FBF  3002               	movlw	2	; select bank4/5
 15529  0FC0  3F4D               	moviw [13]fsr1
 15530  0FC1  0023               	movlb	3	; select bank3
 15531  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15532                           
 15533                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15534  0FC3  0021               	movlb	1	; select bank1
 15535  0FC4  086F               	movf	_product^(0+128),w
 15536  0FC5  0086               	movwf	6
 15537  0FC6  3002               	movlw	2	; select bank4/5
 15538  0FC7  0087               	movwf	7
 15539  0FC8  3002               	movlw	2	; select bank4/5
 15540  0FC9  3F4E               	moviw [14]fsr1
 15541  0FCA  0023               	movlb	3	; select bank3
 15542  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15543                           
 15544                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15545  0FCC  0021               	movlb	1	; select bank1
 15546  0FCD  086F               	movf	_product^(0+128),w
 15547  0FCE  0086               	movwf	6
 15548  0FCF  3002               	movlw	2	; select bank4/5
 15549  0FD0  0087               	movwf	7
 15550  0FD1  3002               	movlw	2	; select bank4/5
 15551  0FD2  3F4F               	moviw [15]fsr1
 15552  0FD3  0023               	movlb	3	; select bank3
 15553  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15554                           
 15555                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15556  0FD5  0021               	movlb	1	; select bank1
 15557  0FD6  086F               	movf	_product^(0+128),w
 15558  0FD7  0086               	movwf	6
 15559  0FD8  3002               	movlw	2	; select bank4/5
 15560  0FD9  0087               	movwf	7
 15561  0FDA  3002               	movlw	2	; select bank4/5
 15562  0FDB  3F50               	moviw [16]fsr1
 15563  0FDC  0023               	movlb	3	; select bank3
 15564  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15565                           
 15566                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15567  0FDE  0021               	movlb	1	; select bank1
 15568  0FDF  086F               	movf	_product^(0+128),w
 15569  0FE0  0086               	movwf	6
 15570  0FE1  3002               	movlw	2	; select bank4/5
 15571  0FE2  0087               	movwf	7
 15572  0FE3  3002               	movlw	2	; select bank4/5
 15573  0FE4  3F51               	moviw [17]fsr1
 15574  0FE5  0023               	movlb	3	; select bank3
 15575  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15576                           
 15577                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15578  0FE7  0021               	movlb	1	; select bank1
 15579  0FE8  086F               	movf	_product^(0+128),w
 15580  0FE9  0086               	movwf	6
 15581  0FEA  3002               	movlw	2	; select bank4/5
 15582  0FEB  0087               	movwf	7
 15583  0FEC  3002               	movlw	2	; select bank4/5
 15584  0FED  3F52               	moviw [18]fsr1
 15585  0FEE  0023               	movlb	3	; select bank3
 15586  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15587                           
 15588                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15589  0FF0  0021               	movlb	1	; select bank1
 15590  0FF1  086F               	movf	_product^(0+128),w
 15591  0FF2  0086               	movwf	6
 15592  0FF3  3002               	movlw	2	; select bank4/5
 15593  0FF4  0087               	movwf	7
 15594  0FF5  3002               	movlw	2	; select bank4/5
 15595  0FF6  3F53               	moviw [19]fsr1
 15596  0FF7  0023               	movlb	3	; select bank3
 15597  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15598                           
 15599                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15600  0FF9  30D1               	movlw	209
 15601  0FFA  0020               	movlb	0	; select bank0
 15602  0FFB  00A6               	movwf	??_setTxData
 15603  0FFC  0826               	movf	??_setTxData,w
 15604  0FFD  0023               	movlb	3	; select bank3
 15605  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15606  0FFF  0008               	return
 15607  1000                     __end_of_setTxData:	
 15608                           
 15609                           	psect	text104
 15610  1DE1                     __ptext104:	
 15611 ;; *************** function _setRF_TransceiveGO *****************
 15612 ;; Defined at:
 15613 ;;		line 461 in file "../src/RF_Control_B1.c"
 15614 ;; Parameters:    Size  Location     Type
 15615 ;;  command         1    wreg     unsigned char 
 15616 ;; Auto vars:     Size  Location     Type
 15617 ;;  command         1    7[BANK0 ] unsigned char 
 15618 ;; Return value:  Size  Location     Type
 15619 ;;		None               void
 15620 ;; Registers used:
 15621 ;;		wreg, status,2, status,0
 15622 ;; Tracked objects:
 15623 ;;		On entry : 0/0
 15624 ;;		On exit  : 0/0
 15625 ;;		Unchanged: 0/0
 15626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15631 ;;Total ram usage:        2 bytes
 15632 ;; Hardware stack levels used:    1
 15633 ;; Hardware stack levels required when called:    5
 15634 ;; This function calls:
 15635 ;;		Nothing
 15636 ;; This function is called by:
 15637 ;;		_setDimmerLights_Dimming
 15638 ;; This function uses a non-reentrant model
 15639 ;;
 15640                           
 15641                           
 15642                           ;psect for function _setRF_TransceiveGO
 15643  1DE1                     _setRF_TransceiveGO:	
 15644                           
 15645                           ;incstack = 0
 15646                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15647                           ;setRF_TransceiveGO@command stored from wreg
 15648  1DE1  0020               	movlb	0	; select bank0
 15649  1DE2  00A7               	movwf	setRF_TransceiveGO@command
 15650                           
 15651                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15652  1DE3  0827               	movf	setRF_TransceiveGO@command,w
 15653  1DE4  3A01               	xorlw	1
 15654  1DE5  3000               	movlw	0
 15655  1DE6  1903               	skipnz
 15656  1DE7  3001               	movlw	1
 15657  1DE8  00A6               	movwf	??_setRF_TransceiveGO
 15658  1DE9  0DA6               	rlf	??_setRF_TransceiveGO,f
 15659  1DEA  0DA6               	rlf	??_setRF_TransceiveGO,f
 15660  1DEB  0021               	movlb	1	; select bank1
 15661  1DEC  0820               	movf	_RF1^(0+128),w
 15662  1DED  0020               	movlb	0	; select bank0
 15663  1DEE  0626               	xorwf	??_setRF_TransceiveGO,w
 15664  1DEF  39FB               	andlw	-5
 15665  1DF0  0626               	xorwf	??_setRF_TransceiveGO,w
 15666  1DF1  0021               	movlb	1	; select bank1
 15667  1DF2  00A0               	movwf	_RF1^(0+128)
 15668  1DF3  0008               	return
 15669  1DF4                     __end_of_setRF_TransceiveGO:	
 15670                           
 15671                           	psect	text105
 15672  1604                     __ptext105:	
 15673 ;; *************** function _setRF_DimmerLights *****************
 15674 ;; Defined at:
 15675 ;;		line 446 in file "../src/RF_Control_B1.c"
 15676 ;; Parameters:    Size  Location     Type
 15677 ;;  lights          1    wreg     unsigned char 
 15678 ;;  on              1    8[BANK1 ] unsigned char 
 15679 ;; Auto vars:     Size  Location     Type
 15680 ;;  lights          1   12[BANK1 ] unsigned char 
 15681 ;;  status          1   11[BANK1 ] unsigned char 
 15682 ;; Return value:  Size  Location     Type
 15683 ;;		None               void
 15684 ;; Registers used:
 15685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15686 ;; Tracked objects:
 15687 ;;		On entry : 0/0
 15688 ;;		On exit  : 0/0
 15689 ;;		Unchanged: 0/0
 15690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15691 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;Total ram usage:        5 bytes
 15696 ;; Hardware stack levels used:    1
 15697 ;; Hardware stack levels required when called:    6
 15698 ;; This function calls:
 15699 ;;		_setProductData
 15700 ;; This function is called by:
 15701 ;;		_setDimmerLights_OnOff
 15702 ;;		_setDimmerLights_Dimming
 15703 ;;		_setRFSW_Control
 15704 ;; This function uses a non-reentrant model
 15705 ;;
 15706                           
 15707                           
 15708                           ;psect for function _setRF_DimmerLights
 15709  1604                     _setRF_DimmerLights:	
 15710                           
 15711                           ;incstack = 0
 15712                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15713                           ;setRF_DimmerLights@lights stored from wreg
 15714  1604  0021               	movlb	1	; select bank1
 15715  1605  00E7               	movwf	setRF_DimmerLights@lights^(0+128)
 15716                           
 15717                           ;RF_Control_B1.c: 447: char status = 1;
 15718  1606  01E6               	clrf	setRF_DimmerLights@status^(0+128)
 15719  1607  0AE6               	incf	setRF_DimmerLights@status^(0+128),f
 15720                           
 15721                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15722  1608  0867               	movf	setRF_DimmerLights@lights^(0+128),w
 15723  1609  3EFF               	addlw	-1
 15724  160A  0A89               	incf	9,f
 15725  160B  2E0E               	goto	u12560
 15726  160C                     u12565:	
 15727  160C  1003               	clrc
 15728  160D  0DE6               	rlf	setRF_DimmerLights@status^(0+128),f
 15729  160E                     u12560:	
 15730  160E  3EFF               	addlw	-1
 15731  160F  1D03               	skipz
 15732  1610  2E0C               	goto	u12565
 15733                           
 15734                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15735  1611  0867               	movf	setRF_DimmerLights@lights^(0+128),w
 15736  1612  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15737  1613  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15738  1614  00E1               	movwf	setProductData@value^(0+128)
 15739  1615  300B               	movlw	11
 15740  1616  319C  24E7  3196   	fcall	_setProductData
 15741                           
 15742                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15743  1619  0021               	movlb	1	; select bank1
 15744  161A  0867               	movf	setRF_DimmerLights@lights^(0+128),w
 15745  161B  3E1A               	addlw	26
 15746  161C  076F               	addwf	_product^(0+128),w
 15747  161D  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15748  161E  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15749  161F  0086               	movwf	6
 15750  1620  3002               	movlw	2	; select bank4/5
 15751  1621  0087               	movwf	7
 15752  1622  0801               	movf	1,w
 15753  1623  00E5               	movwf	(??_setRF_DimmerLights+1)^(0+128)
 15754  1624  0865               	movf	(??_setRF_DimmerLights+1)^(0+128),w
 15755  1625  00E1               	movwf	setProductData@value^(0+128)
 15756  1626  3011               	movlw	17
 15757  1627  319C  24E7  3196   	fcall	_setProductData
 15758                           
 15759                           ;RF_Control_B1.c: 451: if (on == 1) {
 15760  162A  0021               	movlb	1	; select bank1
 15761  162B  0863               	movf	setRF_DimmerLights@on^(0+128),w
 15762  162C  3A01               	xorlw	1
 15763  162D  1D03               	skipz
 15764  162E  2E4E               	goto	l10581
 15765                           
 15766                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15767  162F  0867               	movf	setRF_DimmerLights@lights^(0+128),w
 15768  1630  3E14               	addlw	20
 15769  1631  076F               	addwf	_product^(0+128),w
 15770  1632  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15771  1633  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15772  1634  0086               	movwf	6
 15773  1635  3002               	movlw	2	; select bank4/5
 15774  1636  0087               	movwf	7
 15775  1637  0801               	movf	1,w
 15776  1638  00E5               	movwf	(??_setRF_DimmerLights+1)^(0+128)
 15777  1639  0865               	movf	(??_setRF_DimmerLights+1)^(0+128),w
 15778  163A  00E1               	movwf	setProductData@value^(0+128)
 15779  163B  3009               	movlw	9
 15780  163C  319C  24E7  3196   	fcall	_setProductData
 15781                           
 15782                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15783  163F  0021               	movlb	1	; select bank1
 15784  1640  086F               	movf	_product^(0+128),w
 15785  1641  3E0F               	addlw	15
 15786  1642  0086               	movwf	6
 15787  1643  3002               	movlw	2	; select bank4/5
 15788  1644  0087               	movwf	7
 15789  1645  0801               	movf	1,w
 15790  1646  0466               	iorwf	setRF_DimmerLights@status^(0+128),w
 15791  1647  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15792  1648  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15793  1649  00E1               	movwf	setProductData@value^(0+128)
 15794  164A  300F               	movlw	15
 15795  164B  319C  24E7         	fcall	_setProductData
 15796                           
 15797                           ;RF_Control_B1.c: 454: } else {
 15798  164D  0008               	return
 15799  164E                     l10581:	
 15800                           
 15801                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15802  164E  0021               	movlb	1	; select bank1
 15803  164F  01E1               	clrf	setProductData@value^(0+128)
 15804  1650  3009               	movlw	9
 15805  1651  319C  24E7  3196   	fcall	_setProductData
 15806                           
 15807                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15808  1654  0021               	movlb	1	; select bank1
 15809  1655  086F               	movf	_product^(0+128),w
 15810  1656  3E0F               	addlw	15
 15811  1657  0086               	movwf	6
 15812  1658  3002               	movlw	2	; select bank4/5
 15813  1659  0087               	movwf	7
 15814  165A  0966               	comf	setRF_DimmerLights@status^(0+128),w
 15815  165B  0501               	andwf	1,w
 15816  165C  00E4               	movwf	??_setRF_DimmerLights^(0+128)
 15817  165D  0864               	movf	??_setRF_DimmerLights^(0+128),w
 15818  165E  00E1               	movwf	setProductData@value^(0+128)
 15819  165F  300F               	movlw	15
 15820  1660  319C  24E7         	fcall	_setProductData
 15821  1662  0008               	return
 15822  1663                     __end_of_setRF_DimmerLights:	
 15823                           
 15824                           	psect	text106
 15825  1D44                     __ptext106:	
 15826 ;; *************** function _setDimmerLights_Line *****************
 15827 ;; Defined at:
 15828 ;;		line 955 in file "../src/Dimmer_B1.c"
 15829 ;; Parameters:    Size  Location     Type
 15830 ;;  lights          1    wreg     unsigned char 
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;  lights          1    6[BANK0 ] unsigned char 
 15833 ;; Return value:  Size  Location     Type
 15834 ;;		None               void
 15835 ;; Registers used:
 15836 ;;		wreg
 15837 ;; Tracked objects:
 15838 ;;		On entry : 0/0
 15839 ;;		On exit  : 0/0
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;Total ram usage:        1 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:    5
 15849 ;; This function calls:
 15850 ;;		Nothing
 15851 ;; This function is called by:
 15852 ;;		_setDimmerLights_OnOff
 15853 ;;		_setDimmerLights_Dimming
 15854 ;; This function uses a non-reentrant model
 15855 ;;
 15856                           
 15857                           
 15858                           ;psect for function _setDimmerLights_Line
 15859  1D44                     _setDimmerLights_Line:	
 15860                           
 15861                           ;incstack = 0
 15862                           ; Regs used in _setDimmerLights_Line: [wreg]
 15863                           ;setDimmerLights_Line@lights stored from wreg
 15864  1D44  0020               	movlb	0	; select bank0
 15865  1D45  00A6               	movwf	setDimmerLights_Line@lights
 15866                           
 15867                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 15868  1D46  0022               	movlb	2	; select bank2
 15869  1D47  14AD               	bsf	_Dimmer^(0+256),1
 15870                           
 15871                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 15872  1D48  10DE               	bcf	(_DimmerLights1^(0+256)+1),1
 15873                           
 15874                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 15875  1D49  0020               	movlb	0	; select bank0
 15876  1D4A  0826               	movf	setDimmerLights_Line@lights,w
 15877  1D4B  3A01               	xorlw	1
 15878  1D4C  1D03               	skipz
 15879  1D4D  0008               	return
 15880  1D4E  0826               	movf	setDimmerLights_Line@lights,w
 15881  1D4F  1903               	btfsc	3,2
 15882  1D50  0008               	return
 15883                           
 15884                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 15885  1D51  0022               	movlb	2	; select bank2
 15886  1D52  14DE               	bsf	(_DimmerLights1^(0+256)+1),1
 15887  1D53  0020               	movlb	0	; select bank0
 15888  1D54  0008               	return
 15889  1D55                     __end_of_setDimmerLights_Line:	
 15890                           
 15891                           	psect	text107
 15892  1CDA                     __ptext107:	
 15893 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15894 ;; Defined at:
 15895 ;;		line 89 in file "../src/Dimmer_B1.c"
 15896 ;; Parameters:    Size  Location     Type
 15897 ;;  lights          1    wreg     unsigned char 
 15898 ;;  value           1    6[BANK1 ] unsigned char 
 15899 ;; Auto vars:     Size  Location     Type
 15900 ;;  lights          1    7[BANK1 ] unsigned char 
 15901 ;; Return value:  Size  Location     Type
 15902 ;;		None               void
 15903 ;; Registers used:
 15904 ;;		wreg
 15905 ;; Tracked objects:
 15906 ;;		On entry : 0/0
 15907 ;;		On exit  : 0/0
 15908 ;;		Unchanged: 0/0
 15909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15910 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;Total ram usage:        3 bytes
 15915 ;; Hardware stack levels used:    1
 15916 ;; Hardware stack levels required when called:    5
 15917 ;; This function calls:
 15918 ;;		Nothing
 15919 ;; This function is called by:
 15920 ;;		_setDimmerLights_OnOff
 15921 ;;		_setDimmerLights_Dimming
 15922 ;;		_setRFSW_AdjControl
 15923 ;; This function uses a non-reentrant model
 15924 ;;
 15925                           
 15926                           
 15927                           ;psect for function _setDimmerIntr_MaxmumValue
 15928  1CDA                     _setDimmerIntr_MaxmumValue:	
 15929                           
 15930                           ;incstack = 0
 15931                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15932                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15933  1CDA  0021               	movlb	1	; select bank1
 15934  1CDB  00E2               	movwf	setDimmerIntr_MaxmumValue@lights^(0+128)
 15935                           
 15936                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15937  1CDC  0862               	movf	setDimmerIntr_MaxmumValue@lights^(0+128),w
 15938  1CDD  3A01               	xorlw	1
 15939  1CDE  1D03               	skipz
 15940  1CDF  0008               	return
 15941                           
 15942                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 15943  1CE0  0861               	movf	setDimmerIntr_MaxmumValue@value^(0+128),w
 15944  1CE1  0020               	movlb	0	; select bank0
 15945  1CE2  00E2               	movwf	??_setDimmerIntr_MaxmumValue
 15946  1CE3  0862               	movf	??_setDimmerIntr_MaxmumValue,w
 15947  1CE4  0021               	movlb	1	; select bank1
 15948  1CE5  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 15949  1CE6  0008               	return
 15950  1CE7                     __end_of_setDimmerIntr_MaxmumValue:	
 15951                           
 15952                           	psect	text108
 15953  1EBD                     __ptext108:	
 15954 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15955 ;; Defined at:
 15956 ;;		line 166 in file "../src/Dimmer_B1.c"
 15957 ;; Parameters:    Size  Location     Type
 15958 ;;  lights          1    wreg     unsigned char 
 15959 ;;  command         1    6[BANK0 ] unsigned char 
 15960 ;; Auto vars:     Size  Location     Type
 15961 ;;  lights          1    8[BANK0 ] unsigned char 
 15962 ;; Return value:  Size  Location     Type
 15963 ;;		None               void
 15964 ;; Registers used:
 15965 ;;		wreg, status,2, status,0
 15966 ;; Tracked objects:
 15967 ;;		On entry : 0/0
 15968 ;;		On exit  : 0/0
 15969 ;;		Unchanged: 0/0
 15970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15971 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15974 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15975 ;;Total ram usage:        3 bytes
 15976 ;; Hardware stack levels used:    1
 15977 ;; Hardware stack levels required when called:    5
 15978 ;; This function calls:
 15979 ;;		Nothing
 15980 ;; This function is called by:
 15981 ;;		_setDimmerLights_Dimming
 15982 ;; This function uses a non-reentrant model
 15983 ;;
 15984                           
 15985                           
 15986                           ;psect for function _setDimmerIntr_Dimming_Sw
 15987  1EBD                     _setDimmerIntr_Dimming_Sw:	
 15988                           
 15989                           ;incstack = 0
 15990                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15991                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15992  1EBD  0020               	movlb	0	; select bank0
 15993  1EBE  00A8               	movwf	setDimmerIntr_Dimming_Sw@lights
 15994                           
 15995                           ;Dimmer_B1.c: 168: if (lights == 1) {
 15996  1EBF  0828               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15997  1EC0  3A01               	xorlw	1
 15998  1EC1  1D03               	skipz
 15999  1EC2  0008               	return
 16000                           
 16001                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16002  1EC3  0826               	movf	setDimmerIntr_Dimming_Sw@command,w
 16003  1EC4  3A01               	xorlw	1
 16004  1EC5  3000               	movlw	0
 16005  1EC6  1903               	skipnz
 16006  1EC7  3001               	movlw	1
 16007  1EC8  00A7               	movwf	??_setDimmerIntr_Dimming_Sw
 16008  1EC9  0EA7               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16009  1ECA  0021               	movlb	1	; select bank1
 16010  1ECB  083A               	movf	_DimmerIntr1^(0+128),w
 16011  1ECC  0020               	movlb	0	; select bank0
 16012  1ECD  0627               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16013  1ECE  39EF               	andlw	-17
 16014  1ECF  0627               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16015  1ED0  0021               	movlb	1	; select bank1
 16016  1ED1  00BA               	movwf	_DimmerIntr1^(0+128)
 16017  1ED2  0008               	return
 16018  1ED3                     __end_of_setDimmerIntr_Dimming_Sw:	
 16019                           
 16020                           	psect	text109
 16021  0A09                     __ptext109:	
 16022 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16023 ;; Defined at:
 16024 ;;		line 1055 in file "../src/Dimmer_B1.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;  value           1    wreg     unsigned char 
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;  value           1    2[BANK1 ] unsigned char 
 16029 ;;  i               3    3[BANK1 ] float 
 16030 ;; Return value:  Size  Location     Type
 16031 ;;                  1    wreg      unsigned char 
 16032 ;; Registers used:
 16033 ;;		wreg, status,2, status,0, pclath, cstack
 16034 ;; Tracked objects:
 16035 ;;		On entry : 0/0
 16036 ;;		On exit  : 0/0
 16037 ;;		Unchanged: 0/0
 16038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 16043 ;;Total ram usage:        6 bytes
 16044 ;; Hardware stack levels used:    1
 16045 ;; Hardware stack levels required when called:    7
 16046 ;; This function calls:
 16047 ;;		___awtoft
 16048 ;;		___ftadd
 16049 ;;		___ftdiv
 16050 ;;		___ftneg
 16051 ;;		___fttol
 16052 ;; This function is called by:
 16053 ;;		_setDimmerLights_OnOff
 16054 ;;		_setDimmerLights_Dimming
 16055 ;;		_Flash_Memory_Initialization
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function _getDimmerLights_ValueToPercent
 16061  0A09                     _getDimmerLights_ValueToPercent:	
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16065                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16066  0A09  0021               	movlb	1	; select bank1
 16067  0A0A  00DD               	movwf	getDimmerLights_ValueToPercent@value^(0+128)
 16068                           
 16069                           ;Dimmer_B1.c: 1063: float i = ((char)(65*0.75)) - ((char)(20*0.75));
 16070  0A0B  3000               	movlw	0
 16071  0A0C  00DE               	movwf	getDimmerLights_ValueToPercent@i^(0+128)
 16072  0A0D  3004               	movlw	4
 16073  0A0E  00DF               	movwf	(getDimmerLights_ValueToPercent@i+1)^(0+128)
 16074  0A0F  3042               	movlw	66
 16075  0A10  00E0               	movwf	(getDimmerLights_ValueToPercent@i+2)^(0+128)
 16076                           
 16077                           ;Dimmer_B1.c: 1064: i /= 100;
 16078  0A11  3000               	movlw	0
 16079  0A12  0020               	movlb	0	; select bank0
 16080  0A13  00B4               	movwf	___ftdiv@f2
 16081  0A14  30C8               	movlw	200
 16082  0A15  00B5               	movwf	___ftdiv@f2+1
 16083  0A16  3042               	movlw	66
 16084  0A17  00B6               	movwf	___ftdiv@f2+2
 16085  0A18  0021               	movlb	1	; select bank1
 16086  0A19  085E               	movf	getDimmerLights_ValueToPercent@i^(0+128),w
 16087  0A1A  0020               	movlb	0	; select bank0
 16088  0A1B  00B7               	movwf	___ftdiv@f1
 16089  0A1C  0021               	movlb	1	; select bank1
 16090  0A1D  085F               	movf	(getDimmerLights_ValueToPercent@i+1)^(0+128),w
 16091  0A1E  0020               	movlb	0	; select bank0
 16092  0A1F  00B8               	movwf	___ftdiv@f1+1
 16093  0A20  0021               	movlb	1	; select bank1
 16094  0A21  0860               	movf	(getDimmerLights_ValueToPercent@i+2)^(0+128),w
 16095  0A22  0020               	movlb	0	; select bank0
 16096  0A23  00B9               	movwf	___ftdiv@f1+2
 16097  0A24  318D  253B  318A   	fcall	___ftdiv
 16098  0A27  0020               	movlb	0	; select bank0
 16099  0A28  0834               	movf	?___ftdiv,w
 16100  0A29  0021               	movlb	1	; select bank1
 16101  0A2A  00DE               	movwf	getDimmerLights_ValueToPercent@i^(0+128)
 16102  0A2B  0020               	movlb	0	; select bank0
 16103  0A2C  0835               	movf	?___ftdiv+1,w
 16104  0A2D  0021               	movlb	1	; select bank1
 16105  0A2E  00DF               	movwf	(getDimmerLights_ValueToPercent@i+1)^(0+128)
 16106  0A2F  0020               	movlb	0	; select bank0
 16107  0A30  0836               	movf	?___ftdiv+2,w
 16108  0A31  0021               	movlb	1	; select bank1
 16109  0A32  00E0               	movwf	(getDimmerLights_ValueToPercent@i+2)^(0+128)
 16110                           
 16111                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(65*0.75)) - value) / i));
 16112  0A33  085D               	movf	getDimmerLights_ValueToPercent@value^(0+128),w
 16113  0A34  00DB               	movwf	??_getDimmerLights_ValueToPercent^(0+128)
 16114  0A35  01DC               	clrf	(??_getDimmerLights_ValueToPercent^(0+128)+1)
 16115  0A36  09DB               	comf	??_getDimmerLights_ValueToPercent^(0+128),f
 16116  0A37  09DC               	comf	(??_getDimmerLights_ValueToPercent^(0+128)+1),f
 16117  0A38  0ADB               	incf	??_getDimmerLights_ValueToPercent^(0+128),f
 16118  0A39  1903               	skipnz
 16119  0A3A  0ADC               	incf	(??_getDimmerLights_ValueToPercent^(0+128)+1),f
 16120  0A3B  085B               	movf	??_getDimmerLights_ValueToPercent^(0+128),w
 16121  0A3C  3E30               	addlw	48
 16122  0A3D  0020               	movlb	0	; select bank0
 16123  0A3E  00AE               	movwf	___awtoft@c
 16124  0A3F  3000               	movlw	0
 16125  0A40  0021               	movlb	1	; select bank1
 16126  0A41  3D5C               	addwfc	(??_getDimmerLights_ValueToPercent+1)^(0+128),w
 16127  0A42  0020               	movlb	0	; select bank0
 16128  0A43  00AF               	movwf	___awtoft@c+1
 16129  0A44  3190  20E4  318A   	fcall	___awtoft
 16130  0A47  0020               	movlb	0	; select bank0
 16131  0A48  082E               	movf	?___awtoft,w
 16132  0A49  00B7               	movwf	___ftdiv@f1
 16133  0A4A  082F               	movf	?___awtoft+1,w
 16134  0A4B  00B8               	movwf	___ftdiv@f1+1
 16135  0A4C  0830               	movf	?___awtoft+2,w
 16136  0A4D  00B9               	movwf	___ftdiv@f1+2
 16137  0A4E  0021               	movlb	1	; select bank1
 16138  0A4F  085E               	movf	getDimmerLights_ValueToPercent@i^(0+128),w
 16139  0A50  0020               	movlb	0	; select bank0
 16140  0A51  00B4               	movwf	___ftdiv@f2
 16141  0A52  0021               	movlb	1	; select bank1
 16142  0A53  085F               	movf	(getDimmerLights_ValueToPercent@i+1)^(0+128),w
 16143  0A54  0020               	movlb	0	; select bank0
 16144  0A55  00B5               	movwf	___ftdiv@f2+1
 16145  0A56  0021               	movlb	1	; select bank1
 16146  0A57  0860               	movf	(getDimmerLights_ValueToPercent@i+2)^(0+128),w
 16147  0A58  0020               	movlb	0	; select bank0
 16148  0A59  00B6               	movwf	___ftdiv@f2+2
 16149  0A5A  318D  253B  318A   	fcall	___ftdiv
 16150  0A5D  0020               	movlb	0	; select bank0
 16151  0A5E  0834               	movf	?___ftdiv,w
 16152  0A5F  00C4               	movwf	___ftneg@f1
 16153  0A60  0835               	movf	?___ftdiv+1,w
 16154  0A61  00C5               	movwf	___ftneg@f1+1
 16155  0A62  0836               	movf	?___ftdiv+2,w
 16156  0A63  00C6               	movwf	___ftneg@f1+2
 16157  0A64  319C  2412  318A   	fcall	___ftneg
 16158  0A67  0020               	movlb	0	; select bank0
 16159  0A68  0844               	movf	?___ftneg,w
 16160  0A69  00CA               	movwf	___ftadd@f2
 16161  0A6A  0845               	movf	?___ftneg+1,w
 16162  0A6B  00CB               	movwf	___ftadd@f2+1
 16163  0A6C  0846               	movf	?___ftneg+2,w
 16164  0A6D  00CC               	movwf	___ftadd@f2+2
 16165  0A6E  3000               	movlw	0
 16166  0A6F  00C7               	movwf	___ftadd@f1
 16167  0A70  30C8               	movlw	200
 16168  0A71  00C8               	movwf	___ftadd@f1+1
 16169  0A72  3042               	movlw	66
 16170  0A73  00C9               	movwf	___ftadd@f1+2
 16171  0A74  3184  246E  318A   	fcall	___ftadd
 16172  0A77  0020               	movlb	0	; select bank0
 16173  0A78  0847               	movf	?___ftadd,w
 16174  0A79  00D4               	movwf	___fttol@f1
 16175  0A7A  0848               	movf	?___ftadd+1,w
 16176  0A7B  00D5               	movwf	___fttol@f1+1
 16177  0A7C  0849               	movf	?___ftadd+2,w
 16178  0A7D  00D6               	movwf	___fttol@f1+2
 16179  0A7E  318B  237E         	fcall	___fttol
 16180  0A80  0020               	movlb	0	; select bank0
 16181  0A81  0854               	movf	?___fttol,w
 16182  0A82  0008               	return
 16183  0A83                     __end_of_getDimmerLights_ValueToPercent:	
 16184                           
 16185                           	psect	text110
 16186  0B7E                     __ptext110:	
 16187 ;; *************** function ___fttol *****************
 16188 ;; Defined at:
 16189 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16190 ;; Parameters:    Size  Location     Type
 16191 ;;  f1              3   52[BANK0 ] float 
 16192 ;; Auto vars:     Size  Location     Type
 16193 ;;  lval            4   61[BANK0 ] unsigned long 
 16194 ;;  exp1            1   65[BANK0 ] unsigned char 
 16195 ;;  sign1           1   60[BANK0 ] unsigned char 
 16196 ;; Return value:  Size  Location     Type
 16197 ;;                  4   52[BANK0 ] long 
 16198 ;; Registers used:
 16199 ;;		wreg, status,2, status,0
 16200 ;; Tracked objects:
 16201 ;;		On entry : 0/0
 16202 ;;		On exit  : 0/0
 16203 ;;		Unchanged: 0/0
 16204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16205 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16208 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;Total ram usage:       14 bytes
 16210 ;; Hardware stack levels used:    1
 16211 ;; Hardware stack levels required when called:    5
 16212 ;; This function calls:
 16213 ;;		Nothing
 16214 ;; This function is called by:
 16215 ;;		_getDimmerLights_PercentToValue
 16216 ;;		_getDimmerLights_ValueToPercent
 16217 ;; This function uses a non-reentrant model
 16218 ;;
 16219                           
 16220                           
 16221                           ;psect for function ___fttol
 16222  0B7E                     ___fttol:	
 16223                           
 16224                           ;incstack = 0
 16225                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16226  0B7E  0020               	movlb	0	; select bank0
 16227  0B7F  0854               	movf	___fttol@f1,w
 16228  0B80  00D8               	movwf	??___fttol
 16229  0B81  0855               	movf	___fttol@f1+1,w
 16230  0B82  00D9               	movwf	??___fttol+1
 16231  0B83  0856               	movf	___fttol@f1+2,w
 16232  0B84  00DA               	movwf	??___fttol+2
 16233  0B85  1003               	clrc
 16234  0B86  0D59               	rlf	??___fttol+1,w
 16235  0B87  0D5A               	rlf	??___fttol+2,w
 16236  0B88  00DB               	movwf	??___fttol+3
 16237  0B89  085B               	movf	??___fttol+3,w
 16238  0B8A  00E1               	movwf	___fttol@exp1
 16239  0B8B  08E1               	movf	___fttol@exp1,f
 16240  0B8C  1D03               	skipz
 16241  0B8D  2B97               	goto	l10417
 16242  0B8E  3000               	movlw	0
 16243  0B8F  00D7               	movwf	?___fttol+3
 16244  0B90  3000               	movlw	0
 16245  0B91  00D6               	movwf	?___fttol+2
 16246  0B92  3000               	movlw	0
 16247  0B93  00D5               	movwf	?___fttol+1
 16248  0B94  3000               	movlw	0
 16249  0B95  00D4               	movwf	?___fttol
 16250  0B96  0008               	return
 16251  0B97                     l10417:	
 16252  0B97  0854               	movf	___fttol@f1,w
 16253  0B98  00D8               	movwf	??___fttol
 16254  0B99  0855               	movf	___fttol@f1+1,w
 16255  0B9A  00D9               	movwf	??___fttol+1
 16256  0B9B  0856               	movf	___fttol@f1+2,w
 16257  0B9C  00DA               	movwf	??___fttol+2
 16258  0B9D  3017               	movlw	23
 16259  0B9E                     u12305:	
 16260  0B9E  36DA               	lsrf	??___fttol+2,f
 16261  0B9F  0CD9               	rrf	??___fttol+1,f
 16262  0BA0  0CD8               	rrf	??___fttol,f
 16263  0BA1  0B89               	decfsz	9,f
 16264  0BA2  2B9E               	goto	u12305
 16265  0BA3  0858               	movf	??___fttol,w
 16266  0BA4  00DB               	movwf	??___fttol+3
 16267  0BA5  085B               	movf	??___fttol+3,w
 16268  0BA6  00DC               	movwf	___fttol@sign1
 16269  0BA7  17D5               	bsf	___fttol@f1+1,7
 16270  0BA8  30FF               	movlw	255
 16271  0BA9  05D4               	andwf	___fttol@f1,f
 16272  0BAA  30FF               	movlw	255
 16273  0BAB  05D5               	andwf	___fttol@f1+1,f
 16274  0BAC  3000               	movlw	0
 16275  0BAD  05D6               	andwf	___fttol@f1+2,f
 16276  0BAE  0854               	movf	___fttol@f1,w
 16277  0BAF  00DD               	movwf	___fttol@lval
 16278  0BB0  0855               	movf	___fttol@f1+1,w
 16279  0BB1  00DE               	movwf	___fttol@lval+1
 16280  0BB2  0856               	movf	___fttol@f1+2,w
 16281  0BB3  00DF               	movwf	___fttol@lval+2
 16282  0BB4  01E0               	clrf	___fttol@lval+3
 16283  0BB5  308E               	movlw	142
 16284  0BB6  02E1               	subwf	___fttol@exp1,f
 16285  0BB7  1FE1               	btfss	___fttol@exp1,7
 16286  0BB8  2BD5               	goto	l10437
 16287  0BB9  0861               	movf	___fttol@exp1,w
 16288  0BBA  3A80               	xorlw	128
 16289  0BBB  3E8F               	addlw	143
 16290  0BBC  1803               	skipnc
 16291  0BBD  2BC7               	goto	l10435
 16292  0BBE  3000               	movlw	0
 16293  0BBF  00D7               	movwf	?___fttol+3
 16294  0BC0  3000               	movlw	0
 16295  0BC1  00D6               	movwf	?___fttol+2
 16296  0BC2  3000               	movlw	0
 16297  0BC3  00D5               	movwf	?___fttol+1
 16298  0BC4  3000               	movlw	0
 16299  0BC5  00D4               	movwf	?___fttol
 16300  0BC6  0008               	return
 16301  0BC7                     l10435:	
 16302  0BC7  3001               	movlw	1
 16303  0BC8                     u12335:	
 16304  0BC8  36E0               	lsrf	___fttol@lval+3,f
 16305  0BC9  0CDF               	rrf	___fttol@lval+2,f
 16306  0BCA  0CDE               	rrf	___fttol@lval+1,f
 16307  0BCB  0CDD               	rrf	___fttol@lval,f
 16308  0BCC  0B89               	decfsz	9,f
 16309  0BCD  2BC8               	goto	u12335
 16310  0BCE  3001               	movlw	1
 16311  0BCF  00D8               	movwf	??___fttol
 16312  0BD0  0858               	movf	??___fttol,w
 16313  0BD1  07E1               	addwf	___fttol@exp1,f
 16314  0BD2  1903               	btfsc	3,2
 16315  0BD3  2BEE               	goto	l10447
 16316  0BD4  2BC7               	goto	l10435
 16317  0BD5                     l10437:	
 16318  0BD5  3018               	movlw	24
 16319  0BD6  0261               	subwf	___fttol@exp1,w
 16320  0BD7  1C03               	skipc
 16321  0BD8  2BEB               	goto	l10445
 16322  0BD9  3000               	movlw	0
 16323  0BDA  00D7               	movwf	?___fttol+3
 16324  0BDB  3000               	movlw	0
 16325  0BDC  00D6               	movwf	?___fttol+2
 16326  0BDD  3000               	movlw	0
 16327  0BDE  00D5               	movwf	?___fttol+1
 16328  0BDF  3000               	movlw	0
 16329  0BE0  00D4               	movwf	?___fttol
 16330  0BE1  0008               	return
 16331  0BE2                     l10443:	
 16332  0BE2  3001               	movlw	1
 16333  0BE3                     u12365:	
 16334  0BE3  35DD               	lslf	___fttol@lval,f
 16335  0BE4  0DDE               	rlf	___fttol@lval+1,f
 16336  0BE5  0DDF               	rlf	___fttol@lval+2,f
 16337  0BE6  0DE0               	rlf	___fttol@lval+3,f
 16338  0BE7  0B89               	decfsz	9,f
 16339  0BE8  2BE3               	goto	u12365
 16340  0BE9  3001               	movlw	1
 16341  0BEA  02E1               	subwf	___fttol@exp1,f
 16342  0BEB                     l10445:	
 16343  0BEB  08E1               	movf	___fttol@exp1,f
 16344  0BEC  1D03               	skipz
 16345  0BED  2BE2               	goto	l10443
 16346  0BEE                     l10447:	
 16347  0BEE  085C               	movf	___fttol@sign1,w
 16348  0BEF  1903               	btfsc	3,2
 16349  0BF0  2BFC               	goto	l10451
 16350  0BF1  09DD               	comf	___fttol@lval,f
 16351  0BF2  09DE               	comf	___fttol@lval+1,f
 16352  0BF3  09DF               	comf	___fttol@lval+2,f
 16353  0BF4  09E0               	comf	___fttol@lval+3,f
 16354  0BF5  0ADD               	incf	___fttol@lval,f
 16355  0BF6  1903               	skipnz
 16356  0BF7  0ADE               	incf	___fttol@lval+1,f
 16357  0BF8  1903               	skipnz
 16358  0BF9  0ADF               	incf	___fttol@lval+2,f
 16359  0BFA  1903               	skipnz
 16360  0BFB  0AE0               	incf	___fttol@lval+3,f
 16361  0BFC                     l10451:	
 16362  0BFC  0860               	movf	___fttol@lval+3,w
 16363  0BFD  00D7               	movwf	?___fttol+3
 16364  0BFE  085F               	movf	___fttol@lval+2,w
 16365  0BFF  00D6               	movwf	?___fttol+2
 16366  0C00  085E               	movf	___fttol@lval+1,w
 16367  0C01  00D5               	movwf	?___fttol+1
 16368  0C02  085D               	movf	___fttol@lval,w
 16369  0C03  00D4               	movwf	?___fttol
 16370  0C04  0008               	return
 16371  0C05                     __end_of___fttol:	
 16372                           
 16373                           	psect	text111
 16374  1C12                     __ptext111:	
 16375 ;; *************** function ___ftneg *****************
 16376 ;; Defined at:
 16377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16378 ;; Parameters:    Size  Location     Type
 16379 ;;  f1              3   36[BANK0 ] float 
 16380 ;; Auto vars:     Size  Location     Type
 16381 ;;		None
 16382 ;; Return value:  Size  Location     Type
 16383 ;;                  3   36[BANK0 ] float 
 16384 ;; Registers used:
 16385 ;;		wreg
 16386 ;; Tracked objects:
 16387 ;;		On entry : 0/0
 16388 ;;		On exit  : 0/0
 16389 ;;		Unchanged: 0/0
 16390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16395 ;;Total ram usage:        3 bytes
 16396 ;; Hardware stack levels used:    1
 16397 ;; Hardware stack levels required when called:    5
 16398 ;; This function calls:
 16399 ;;		Nothing
 16400 ;; This function is called by:
 16401 ;;		_getDimmerLights_PercentToValue
 16402 ;;		_getDimmerLights_ValueToPercent
 16403 ;; This function uses a non-reentrant model
 16404 ;;
 16405                           
 16406                           
 16407                           ;psect for function ___ftneg
 16408  1C12                     ___ftneg:	
 16409                           
 16410                           ;incstack = 0
 16411                           ; Regs used in ___ftneg: [wreg]
 16412  1C12  0020               	movlb	0	; select bank0
 16413  1C13  0846               	movf	___ftneg@f1+2,w
 16414  1C14  0445               	iorwf	___ftneg@f1+1,w
 16415  1C15  0444               	iorwf	___ftneg@f1,w
 16416  1C16  1903               	skipnz
 16417  1C17  0008               	return
 16418  1C18  3080               	movlw	128
 16419  1C19  06C6               	xorwf	___ftneg@f1+2,f
 16420  1C1A  0008               	return
 16421  1C1B                     __end_of___ftneg:	
 16422                           
 16423                           	psect	text112
 16424  0D3B                     __ptext112:	
 16425 ;; *************** function ___ftdiv *****************
 16426 ;; Defined at:
 16427 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16428 ;; Parameters:    Size  Location     Type
 16429 ;;  f2              3   20[BANK0 ] float 
 16430 ;;  f1              3   23[BANK0 ] float 
 16431 ;; Auto vars:     Size  Location     Type
 16432 ;;  f3              3   32[BANK0 ] float 
 16433 ;;  sign            1   35[BANK0 ] unsigned char 
 16434 ;;  exp             1   31[BANK0 ] unsigned char 
 16435 ;;  cntr            1   30[BANK0 ] unsigned char 
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  3   20[BANK0 ] float 
 16438 ;; Registers used:
 16439 ;;		wreg, status,2, status,0, pclath, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16445 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;Total ram usage:       16 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    6
 16452 ;; This function calls:
 16453 ;;		___ftpack
 16454 ;; This function is called by:
 16455 ;;		_getDimmerLights_PercentToValue
 16456 ;;		_getDimmerLights_ValueToPercent
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460                           
 16461                           ;psect for function ___ftdiv
 16462  0D3B                     ___ftdiv:	
 16463                           
 16464                           ;incstack = 0
 16465                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16466  0D3B  0020               	movlb	0	; select bank0
 16467  0D3C  0837               	movf	___ftdiv@f1,w
 16468  0D3D  00BA               	movwf	??___ftdiv
 16469  0D3E  0838               	movf	___ftdiv@f1+1,w
 16470  0D3F  00BB               	movwf	??___ftdiv+1
 16471  0D40  0839               	movf	___ftdiv@f1+2,w
 16472  0D41  00BC               	movwf	??___ftdiv+2
 16473  0D42  1003               	clrc
 16474  0D43  0D3B               	rlf	??___ftdiv+1,w
 16475  0D44  0D3C               	rlf	??___ftdiv+2,w
 16476  0D45  00BD               	movwf	??___ftdiv+3
 16477  0D46  083D               	movf	??___ftdiv+3,w
 16478  0D47  00BF               	movwf	___ftdiv@exp
 16479  0D48  08BF               	movf	___ftdiv@exp,f
 16480  0D49  1D03               	skipz
 16481  0D4A  2D52               	goto	l10317
 16482  0D4B  3000               	movlw	0
 16483  0D4C  00B4               	movwf	?___ftdiv
 16484  0D4D  3000               	movlw	0
 16485  0D4E  00B5               	movwf	?___ftdiv+1
 16486  0D4F  3000               	movlw	0
 16487  0D50  00B6               	movwf	?___ftdiv+2
 16488  0D51  0008               	return
 16489  0D52                     l10317:	
 16490  0D52  0834               	movf	___ftdiv@f2,w
 16491  0D53  00BA               	movwf	??___ftdiv
 16492  0D54  0835               	movf	___ftdiv@f2+1,w
 16493  0D55  00BB               	movwf	??___ftdiv+1
 16494  0D56  0836               	movf	___ftdiv@f2+2,w
 16495  0D57  00BC               	movwf	??___ftdiv+2
 16496  0D58  1003               	clrc
 16497  0D59  0D3B               	rlf	??___ftdiv+1,w
 16498  0D5A  0D3C               	rlf	??___ftdiv+2,w
 16499  0D5B  00BD               	movwf	??___ftdiv+3
 16500  0D5C  083D               	movf	??___ftdiv+3,w
 16501  0D5D  00C3               	movwf	___ftdiv@sign
 16502  0D5E  08C3               	movf	___ftdiv@sign,f
 16503  0D5F  1D03               	skipz
 16504  0D60  2D68               	goto	l10323
 16505  0D61  3000               	movlw	0
 16506  0D62  00B4               	movwf	?___ftdiv
 16507  0D63  3000               	movlw	0
 16508  0D64  00B5               	movwf	?___ftdiv+1
 16509  0D65  3000               	movlw	0
 16510  0D66  00B6               	movwf	?___ftdiv+2
 16511  0D67  0008               	return
 16512  0D68                     l10323:	
 16513  0D68  3000               	movlw	0
 16514  0D69  00C0               	movwf	___ftdiv@f3
 16515  0D6A  3000               	movlw	0
 16516  0D6B  00C1               	movwf	___ftdiv@f3+1
 16517  0D6C  3000               	movlw	0
 16518  0D6D  00C2               	movwf	___ftdiv@f3+2
 16519  0D6E  3089               	movlw	137
 16520  0D6F  0743               	addwf	___ftdiv@sign,w
 16521  0D70  00BA               	movwf	??___ftdiv
 16522  0D71  083A               	movf	??___ftdiv,w
 16523  0D72  02BF               	subwf	___ftdiv@exp,f
 16524  0D73  0837               	movf	___ftdiv@f1,w
 16525  0D74  00BA               	movwf	??___ftdiv
 16526  0D75  0838               	movf	___ftdiv@f1+1,w
 16527  0D76  00BB               	movwf	??___ftdiv+1
 16528  0D77  0839               	movf	___ftdiv@f1+2,w
 16529  0D78  00BC               	movwf	??___ftdiv+2
 16530  0D79  3010               	movlw	16
 16531  0D7A                     u12105:	
 16532  0D7A  36BC               	lsrf	??___ftdiv+2,f
 16533  0D7B  0CBB               	rrf	??___ftdiv+1,f
 16534  0D7C  0CBA               	rrf	??___ftdiv,f
 16535  0D7D  0B89               	decfsz	9,f
 16536  0D7E  2D7A               	goto	u12105
 16537  0D7F  083A               	movf	??___ftdiv,w
 16538  0D80  00BD               	movwf	??___ftdiv+3
 16539  0D81  083D               	movf	??___ftdiv+3,w
 16540  0D82  00C3               	movwf	___ftdiv@sign
 16541  0D83  0834               	movf	___ftdiv@f2,w
 16542  0D84  00BA               	movwf	??___ftdiv
 16543  0D85  0835               	movf	___ftdiv@f2+1,w
 16544  0D86  00BB               	movwf	??___ftdiv+1
 16545  0D87  0836               	movf	___ftdiv@f2+2,w
 16546  0D88  00BC               	movwf	??___ftdiv+2
 16547  0D89  3010               	movlw	16
 16548  0D8A                     u12115:	
 16549  0D8A  36BC               	lsrf	??___ftdiv+2,f
 16550  0D8B  0CBB               	rrf	??___ftdiv+1,f
 16551  0D8C  0CBA               	rrf	??___ftdiv,f
 16552  0D8D  0B89               	decfsz	9,f
 16553  0D8E  2D8A               	goto	u12115
 16554  0D8F  083A               	movf	??___ftdiv,w
 16555  0D90  00BD               	movwf	??___ftdiv+3
 16556  0D91  083D               	movf	??___ftdiv+3,w
 16557  0D92  06C3               	xorwf	___ftdiv@sign,f
 16558  0D93  3080               	movlw	128
 16559  0D94  00BA               	movwf	??___ftdiv
 16560  0D95  083A               	movf	??___ftdiv,w
 16561  0D96  05C3               	andwf	___ftdiv@sign,f
 16562  0D97  17B8               	bsf	___ftdiv@f1+1,7
 16563  0D98  30FF               	movlw	255
 16564  0D99  05B7               	andwf	___ftdiv@f1,f
 16565  0D9A  30FF               	movlw	255
 16566  0D9B  05B8               	andwf	___ftdiv@f1+1,f
 16567  0D9C  3000               	movlw	0
 16568  0D9D  05B9               	andwf	___ftdiv@f1+2,f
 16569  0D9E  17B5               	bsf	___ftdiv@f2+1,7
 16570  0D9F  30FF               	movlw	255
 16571  0DA0  05B4               	andwf	___ftdiv@f2,f
 16572  0DA1  30FF               	movlw	255
 16573  0DA2  05B5               	andwf	___ftdiv@f2+1,f
 16574  0DA3  3000               	movlw	0
 16575  0DA4  05B6               	andwf	___ftdiv@f2+2,f
 16576  0DA5  3018               	movlw	24
 16577  0DA6  00BA               	movwf	??___ftdiv
 16578  0DA7  083A               	movf	??___ftdiv,w
 16579  0DA8  00BE               	movwf	___ftdiv@cntr
 16580  0DA9                     l10337:	
 16581  0DA9  3001               	movlw	1
 16582  0DAA                     u12125:	
 16583  0DAA  35C0               	lslf	___ftdiv@f3,f
 16584  0DAB  0DC1               	rlf	___ftdiv@f3+1,f
 16585  0DAC  0DC2               	rlf	___ftdiv@f3+2,f
 16586  0DAD  0B89               	decfsz	9,f
 16587  0DAE  2DAA               	goto	u12125
 16588  0DAF  0836               	movf	___ftdiv@f2+2,w
 16589  0DB0  0239               	subwf	___ftdiv@f1+2,w
 16590  0DB1  1D03               	skipz
 16591  0DB2  2DB9               	goto	u12135
 16592  0DB3  0835               	movf	___ftdiv@f2+1,w
 16593  0DB4  0238               	subwf	___ftdiv@f1+1,w
 16594  0DB5  1D03               	skipz
 16595  0DB6  2DB9               	goto	u12135
 16596  0DB7  0834               	movf	___ftdiv@f2,w
 16597  0DB8  0237               	subwf	___ftdiv@f1,w
 16598  0DB9                     u12135:	
 16599  0DB9  1C03               	skipc
 16600  0DBA  2DC2               	goto	l10345
 16601  0DBB  0834               	movf	___ftdiv@f2,w
 16602  0DBC  02B7               	subwf	___ftdiv@f1,f
 16603  0DBD  0835               	movf	___ftdiv@f2+1,w
 16604  0DBE  3BB8               	subwfb	___ftdiv@f1+1,f
 16605  0DBF  0836               	movf	___ftdiv@f2+2,w
 16606  0DC0  3BB9               	subwfb	___ftdiv@f1+2,f
 16607  0DC1  1440               	bsf	___ftdiv@f3,0
 16608  0DC2                     l10345:	
 16609  0DC2  3001               	movlw	1
 16610  0DC3                     u12145:	
 16611  0DC3  35B7               	lslf	___ftdiv@f1,f
 16612  0DC4  0DB8               	rlf	___ftdiv@f1+1,f
 16613  0DC5  0DB9               	rlf	___ftdiv@f1+2,f
 16614  0DC6  0B89               	decfsz	9,f
 16615  0DC7  2DC3               	goto	u12145
 16616  0DC8  3001               	movlw	1
 16617  0DC9  02BE               	subwf	___ftdiv@cntr,f
 16618  0DCA  1D03               	btfss	3,2
 16619  0DCB  2DA9               	goto	l10337
 16620  0DCC  0840               	movf	___ftdiv@f3,w
 16621  0DCD  00A6               	movwf	___ftpack@arg
 16622  0DCE  0841               	movf	___ftdiv@f3+1,w
 16623  0DCF  00A7               	movwf	___ftpack@arg+1
 16624  0DD0  0842               	movf	___ftdiv@f3+2,w
 16625  0DD1  00A8               	movwf	___ftpack@arg+2
 16626  0DD2  083F               	movf	___ftdiv@exp,w
 16627  0DD3  00BA               	movwf	??___ftdiv
 16628  0DD4  083A               	movf	??___ftdiv,w
 16629  0DD5  00A9               	movwf	___ftpack@exp
 16630  0DD6  0843               	movf	___ftdiv@sign,w
 16631  0DD7  00BB               	movwf	??___ftdiv+1
 16632  0DD8  083B               	movf	??___ftdiv+1,w
 16633  0DD9  00AA               	movwf	___ftpack@sign
 16634  0DDA  3196  2663         	fcall	___ftpack
 16635  0DDC  0020               	movlb	0	; select bank0
 16636  0DDD  0826               	movf	?___ftpack,w
 16637  0DDE  00B4               	movwf	?___ftdiv
 16638  0DDF  0827               	movf	?___ftpack+1,w
 16639  0DE0  00B5               	movwf	?___ftdiv+1
 16640  0DE1  0828               	movf	?___ftpack+2,w
 16641  0DE2  00B6               	movwf	?___ftdiv+2
 16642  0DE3  0008               	return
 16643  0DE4                     __end_of___ftdiv:	
 16644                           
 16645                           	psect	text113
 16646  046E                     __ptext113:	
 16647 ;; *************** function ___ftadd *****************
 16648 ;; Defined at:
 16649 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16650 ;; Parameters:    Size  Location     Type
 16651 ;;  f1              3   39[BANK0 ] float 
 16652 ;;  f2              3   42[BANK0 ] float 
 16653 ;; Auto vars:     Size  Location     Type
 16654 ;;  exp1            1   51[BANK0 ] unsigned char 
 16655 ;;  exp2            1   50[BANK0 ] unsigned char 
 16656 ;;  sign            1   49[BANK0 ] unsigned char 
 16657 ;; Return value:  Size  Location     Type
 16658 ;;                  3   39[BANK0 ] float 
 16659 ;; Registers used:
 16660 ;;		wreg, status,2, status,0, pclath, cstack
 16661 ;; Tracked objects:
 16662 ;;		On entry : 0/0
 16663 ;;		On exit  : 0/0
 16664 ;;		Unchanged: 0/0
 16665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16666 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;Total ram usage:       13 bytes
 16671 ;; Hardware stack levels used:    1
 16672 ;; Hardware stack levels required when called:    6
 16673 ;; This function calls:
 16674 ;;		___ftpack
 16675 ;; This function is called by:
 16676 ;;		_getDimmerLights_PercentToValue
 16677 ;;		_getDimmerLights_ValueToPercent
 16678 ;; This function uses a non-reentrant model
 16679 ;;
 16680                           
 16681                           
 16682                           ;psect for function ___ftadd
 16683  046E                     ___ftadd:	
 16684                           
 16685                           ;incstack = 0
 16686                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16687  046E  0020               	movlb	0	; select bank0
 16688  046F  0847               	movf	___ftadd@f1,w
 16689  0470  00CD               	movwf	??___ftadd
 16690  0471  0848               	movf	___ftadd@f1+1,w
 16691  0472  00CE               	movwf	??___ftadd+1
 16692  0473  0849               	movf	___ftadd@f1+2,w
 16693  0474  00CF               	movwf	??___ftadd+2
 16694  0475  1003               	clrc
 16695  0476  0D4E               	rlf	??___ftadd+1,w
 16696  0477  0D4F               	rlf	??___ftadd+2,w
 16697  0478  00D0               	movwf	??___ftadd+3
 16698  0479  0850               	movf	??___ftadd+3,w
 16699  047A  00D3               	movwf	___ftadd@exp1
 16700  047B  084A               	movf	___ftadd@f2,w
 16701  047C  00CD               	movwf	??___ftadd
 16702  047D  084B               	movf	___ftadd@f2+1,w
 16703  047E  00CE               	movwf	??___ftadd+1
 16704  047F  084C               	movf	___ftadd@f2+2,w
 16705  0480  00CF               	movwf	??___ftadd+2
 16706  0481  1003               	clrc
 16707  0482  0D4E               	rlf	??___ftadd+1,w
 16708  0483  0D4F               	rlf	??___ftadd+2,w
 16709  0484  00D0               	movwf	??___ftadd+3
 16710  0485  0850               	movf	??___ftadd+3,w
 16711  0486  00D2               	movwf	___ftadd@exp2
 16712  0487  0853               	movf	___ftadd@exp1,w
 16713  0488  1903               	btfsc	3,2
 16714  0489  2C96               	goto	l10247
 16715  048A  0852               	movf	___ftadd@exp2,w
 16716  048B  0253               	subwf	___ftadd@exp1,w
 16717  048C  1803               	skipnc
 16718  048D  2C9D               	goto	l10251
 16719  048E  0353               	decf	___ftadd@exp1,w
 16720  048F  3AFF               	xorlw	255
 16721  0490  0752               	addwf	___ftadd@exp2,w
 16722  0491  00CD               	movwf	??___ftadd
 16723  0492  3019               	movlw	25
 16724  0493  024D               	subwf	??___ftadd,w
 16725  0494  1C03               	skipc
 16726  0495  2C9D               	goto	l10251
 16727  0496                     l10247:	
 16728  0496  084A               	movf	___ftadd@f2,w
 16729  0497  00C7               	movwf	?___ftadd
 16730  0498  084B               	movf	___ftadd@f2+1,w
 16731  0499  00C8               	movwf	?___ftadd+1
 16732  049A  084C               	movf	___ftadd@f2+2,w
 16733  049B  00C9               	movwf	?___ftadd+2
 16734  049C  0008               	return
 16735  049D                     l10251:	
 16736  049D  0852               	movf	___ftadd@exp2,w
 16737  049E  1903               	btfsc	3,2
 16738  049F  0008               	return
 16739  04A0  0853               	movf	___ftadd@exp1,w
 16740  04A1  0252               	subwf	___ftadd@exp2,w
 16741  04A2  1803               	skipnc
 16742  04A3  2CAC               	goto	l10257
 16743  04A4  0352               	decf	___ftadd@exp2,w
 16744  04A5  3AFF               	xorlw	255
 16745  04A6  0753               	addwf	___ftadd@exp1,w
 16746  04A7  00CD               	movwf	??___ftadd
 16747  04A8  3019               	movlw	25
 16748  04A9  024D               	subwf	??___ftadd,w
 16749  04AA  1803               	btfsc	3,0
 16750  04AB  0008               	return
 16751  04AC                     l10257:	
 16752  04AC  3006               	movlw	6
 16753  04AD  00CD               	movwf	??___ftadd
 16754  04AE  084D               	movf	??___ftadd,w
 16755  04AF  00D1               	movwf	___ftadd@sign
 16756  04B0  1BC9               	btfsc	___ftadd@f1+2,7
 16757  04B1  17D1               	bsf	___ftadd@sign,7
 16758  04B2  1BCC               	btfsc	___ftadd@f2+2,7
 16759  04B3  1751               	bsf	___ftadd@sign,6
 16760  04B4  17C8               	bsf	___ftadd@f1+1,7
 16761  04B5  30FF               	movlw	255
 16762  04B6  05C7               	andwf	___ftadd@f1,f
 16763  04B7  30FF               	movlw	255
 16764  04B8  05C8               	andwf	___ftadd@f1+1,f
 16765  04B9  3000               	movlw	0
 16766  04BA  05C9               	andwf	___ftadd@f1+2,f
 16767  04BB  17CB               	bsf	___ftadd@f2+1,7
 16768  04BC  30FF               	movlw	255
 16769  04BD  05CA               	andwf	___ftadd@f2,f
 16770  04BE  30FF               	movlw	255
 16771  04BF  05CB               	andwf	___ftadd@f2+1,f
 16772  04C0  3000               	movlw	0
 16773  04C1  05CC               	andwf	___ftadd@f2+2,f
 16774  04C2  0852               	movf	___ftadd@exp2,w
 16775  04C3  0253               	subwf	___ftadd@exp1,w
 16776  04C4  1803               	skipnc
 16777  04C5  2CE8               	goto	l10279
 16778  04C6                     l10269:	
 16779  04C6  3001               	movlw	1
 16780  04C7                     u11945:	
 16781  04C7  35CA               	lslf	___ftadd@f2,f
 16782  04C8  0DCB               	rlf	___ftadd@f2+1,f
 16783  04C9  0DCC               	rlf	___ftadd@f2+2,f
 16784  04CA  0B89               	decfsz	9,f
 16785  04CB  2CC7               	goto	u11945
 16786  04CC  3001               	movlw	1
 16787  04CD  02D2               	subwf	___ftadd@exp2,f
 16788  04CE  0852               	movf	___ftadd@exp2,w
 16789  04CF  0653               	xorwf	___ftadd@exp1,w
 16790  04D0  1903               	skipnz
 16791  04D1  2CE3               	goto	l10277
 16792  04D2  3001               	movlw	1
 16793  04D3  02D1               	subwf	___ftadd@sign,f
 16794  04D4  0851               	movf	___ftadd@sign,w
 16795  04D5  3907               	andlw	7
 16796  04D6  1903               	btfsc	3,2
 16797  04D7  2CE3               	goto	l10277
 16798  04D8  2CC6               	goto	l10269
 16799  04D9                     l10275:	
 16800  04D9  3001               	movlw	1
 16801  04DA                     u11975:	
 16802  04DA  36C9               	lsrf	___ftadd@f1+2,f
 16803  04DB  0CC8               	rrf	___ftadd@f1+1,f
 16804  04DC  0CC7               	rrf	___ftadd@f1,f
 16805  04DD  0B89               	decfsz	9,f
 16806  04DE  2CDA               	goto	u11975
 16807  04DF  3001               	movlw	1
 16808  04E0  00CD               	movwf	??___ftadd
 16809  04E1  084D               	movf	??___ftadd,w
 16810  04E2  07D3               	addwf	___ftadd@exp1,f
 16811  04E3                     l10277:	
 16812  04E3  0853               	movf	___ftadd@exp1,w
 16813  04E4  0652               	xorwf	___ftadd@exp2,w
 16814  04E5  1903               	btfsc	3,2
 16815  04E6  2D0D               	goto	l2848
 16816  04E7  2CD9               	goto	l10275
 16817  04E8                     l10279:	
 16818  04E8  0853               	movf	___ftadd@exp1,w
 16819  04E9  0252               	subwf	___ftadd@exp2,w
 16820  04EA  1803               	skipnc
 16821  04EB  2D0D               	goto	l2848
 16822  04EC                     l10281:	
 16823  04EC  3001               	movlw	1
 16824  04ED                     u12005:	
 16825  04ED  35C7               	lslf	___ftadd@f1,f
 16826  04EE  0DC8               	rlf	___ftadd@f1+1,f
 16827  04EF  0DC9               	rlf	___ftadd@f1+2,f
 16828  04F0  0B89               	decfsz	9,f
 16829  04F1  2CED               	goto	u12005
 16830  04F2  3001               	movlw	1
 16831  04F3  02D3               	subwf	___ftadd@exp1,f
 16832  04F4  0852               	movf	___ftadd@exp2,w
 16833  04F5  0653               	xorwf	___ftadd@exp1,w
 16834  04F6  1903               	skipnz
 16835  04F7  2D09               	goto	l10289
 16836  04F8  3001               	movlw	1
 16837  04F9  02D1               	subwf	___ftadd@sign,f
 16838  04FA  0851               	movf	___ftadd@sign,w
 16839  04FB  3907               	andlw	7
 16840  04FC  1903               	btfsc	3,2
 16841  04FD  2D09               	goto	l10289
 16842  04FE  2CEC               	goto	l10281
 16843  04FF                     l10287:	
 16844  04FF  3001               	movlw	1
 16845  0500                     u12035:	
 16846  0500  36CC               	lsrf	___ftadd@f2+2,f
 16847  0501  0CCB               	rrf	___ftadd@f2+1,f
 16848  0502  0CCA               	rrf	___ftadd@f2,f
 16849  0503  0B89               	decfsz	9,f
 16850  0504  2D00               	goto	u12035
 16851  0505  3001               	movlw	1
 16852  0506  00CD               	movwf	??___ftadd
 16853  0507  084D               	movf	??___ftadd,w
 16854  0508  07D2               	addwf	___ftadd@exp2,f
 16855  0509                     l10289:	
 16856  0509  0853               	movf	___ftadd@exp1,w
 16857  050A  0652               	xorwf	___ftadd@exp2,w
 16858  050B  1D03               	skipz
 16859  050C  2CFF               	goto	l10287
 16860  050D                     l2848:	
 16861  050D  1FD1               	btfss	___ftadd@sign,7
 16862  050E  2D1F               	goto	l10293
 16863  050F  30FF               	movlw	255
 16864  0510  06C7               	xorwf	___ftadd@f1,f
 16865  0511  30FF               	movlw	255
 16866  0512  06C8               	xorwf	___ftadd@f1+1,f
 16867  0513  30FF               	movlw	255
 16868  0514  06C9               	xorwf	___ftadd@f1+2,f
 16869  0515  3001               	movlw	1
 16870  0516  07C7               	addwf	___ftadd@f1,f
 16871  0517  3000               	movlw	0
 16872  0518  1803               	skipnc
 16873  0519  3001               	movlw	1
 16874  051A  07C8               	addwf	___ftadd@f1+1,f
 16875  051B  3000               	movlw	0
 16876  051C  1803               	skipnc
 16877  051D  3001               	movlw	1
 16878  051E  07C9               	addwf	___ftadd@f1+2,f
 16879  051F                     l10293:	
 16880  051F  1F51               	btfss	___ftadd@sign,6
 16881  0520  2D31               	goto	l10297
 16882  0521  30FF               	movlw	255
 16883  0522  06CA               	xorwf	___ftadd@f2,f
 16884  0523  30FF               	movlw	255
 16885  0524  06CB               	xorwf	___ftadd@f2+1,f
 16886  0525  30FF               	movlw	255
 16887  0526  06CC               	xorwf	___ftadd@f2+2,f
 16888  0527  3001               	movlw	1
 16889  0528  07CA               	addwf	___ftadd@f2,f
 16890  0529  3000               	movlw	0
 16891  052A  1803               	skipnc
 16892  052B  3001               	movlw	1
 16893  052C  07CB               	addwf	___ftadd@f2+1,f
 16894  052D  3000               	movlw	0
 16895  052E  1803               	skipnc
 16896  052F  3001               	movlw	1
 16897  0530  07CC               	addwf	___ftadd@f2+2,f
 16898  0531                     l10297:	
 16899  0531  01D1               	clrf	___ftadd@sign
 16900  0532  0847               	movf	___ftadd@f1,w
 16901  0533  07CA               	addwf	___ftadd@f2,f
 16902  0534  0848               	movf	___ftadd@f1+1,w
 16903  0535  3DCB               	addwfc	___ftadd@f2+1,f
 16904  0536  0849               	movf	___ftadd@f1+2,w
 16905  0537  3DCC               	addwfc	___ftadd@f2+2,f
 16906  0538  1FCC               	btfss	___ftadd@f2+2,7
 16907  0539  2D4C               	goto	l10307
 16908  053A  30FF               	movlw	255
 16909  053B  06CA               	xorwf	___ftadd@f2,f
 16910  053C  30FF               	movlw	255
 16911  053D  06CB               	xorwf	___ftadd@f2+1,f
 16912  053E  30FF               	movlw	255
 16913  053F  06CC               	xorwf	___ftadd@f2+2,f
 16914  0540  3001               	movlw	1
 16915  0541  07CA               	addwf	___ftadd@f2,f
 16916  0542  3000               	movlw	0
 16917  0543  1803               	skipnc
 16918  0544  3001               	movlw	1
 16919  0545  07CB               	addwf	___ftadd@f2+1,f
 16920  0546  3000               	movlw	0
 16921  0547  1803               	skipnc
 16922  0548  3001               	movlw	1
 16923  0549  07CC               	addwf	___ftadd@f2+2,f
 16924  054A  01D1               	clrf	___ftadd@sign
 16925  054B  0AD1               	incf	___ftadd@sign,f
 16926  054C                     l10307:	
 16927  054C  084A               	movf	___ftadd@f2,w
 16928  054D  00A6               	movwf	___ftpack@arg
 16929  054E  084B               	movf	___ftadd@f2+1,w
 16930  054F  00A7               	movwf	___ftpack@arg+1
 16931  0550  084C               	movf	___ftadd@f2+2,w
 16932  0551  00A8               	movwf	___ftpack@arg+2
 16933  0552  0853               	movf	___ftadd@exp1,w
 16934  0553  00CD               	movwf	??___ftadd
 16935  0554  084D               	movf	??___ftadd,w
 16936  0555  00A9               	movwf	___ftpack@exp
 16937  0556  0851               	movf	___ftadd@sign,w
 16938  0557  00CE               	movwf	??___ftadd+1
 16939  0558  084E               	movf	??___ftadd+1,w
 16940  0559  00AA               	movwf	___ftpack@sign
 16941  055A  3196  2663         	fcall	___ftpack
 16942  055C  0020               	movlb	0	; select bank0
 16943  055D  0826               	movf	?___ftpack,w
 16944  055E  00C7               	movwf	?___ftadd
 16945  055F  0827               	movf	?___ftpack+1,w
 16946  0560  00C8               	movwf	?___ftadd+1
 16947  0561  0828               	movf	?___ftpack+2,w
 16948  0562  00C9               	movwf	?___ftadd+2
 16949  0563  0008               	return
 16950  0564                     __end_of___ftadd:	
 16951                           
 16952                           	psect	text114
 16953  10E4                     __ptext114:	
 16954 ;; *************** function ___awtoft *****************
 16955 ;; Defined at:
 16956 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16957 ;; Parameters:    Size  Location     Type
 16958 ;;  c               2   14[BANK0 ] int 
 16959 ;; Auto vars:     Size  Location     Type
 16960 ;;  sign            1   19[BANK0 ] unsigned char 
 16961 ;; Return value:  Size  Location     Type
 16962 ;;                  3   14[BANK0 ] float 
 16963 ;; Registers used:
 16964 ;;		wreg, status,2, status,0, pclath, cstack
 16965 ;; Tracked objects:
 16966 ;;		On entry : 0/0
 16967 ;;		On exit  : 0/0
 16968 ;;		Unchanged: 0/0
 16969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16970 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16972 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16973 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16974 ;;Total ram usage:        6 bytes
 16975 ;; Hardware stack levels used:    1
 16976 ;; Hardware stack levels required when called:    6
 16977 ;; This function calls:
 16978 ;;		___ftpack
 16979 ;; This function is called by:
 16980 ;;		_getDimmerLights_PercentToValue
 16981 ;;		_getDimmerLights_ValueToPercent
 16982 ;; This function uses a non-reentrant model
 16983 ;;
 16984                           
 16985                           
 16986                           ;psect for function ___awtoft
 16987  10E4                     ___awtoft:	
 16988                           
 16989                           ;incstack = 0
 16990                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16991  10E4  0020               	movlb	0	; select bank0
 16992  10E5  01B3               	clrf	___awtoft@sign
 16993  10E6  1FAF               	btfss	___awtoft@c+1,7
 16994  10E7  28EF               	goto	l10235
 16995  10E8  09AE               	comf	___awtoft@c,f
 16996  10E9  09AF               	comf	___awtoft@c+1,f
 16997  10EA  0AAE               	incf	___awtoft@c,f
 16998  10EB  1903               	skipnz
 16999  10EC  0AAF               	incf	___awtoft@c+1,f
 17000  10ED  01B3               	clrf	___awtoft@sign
 17001  10EE  0AB3               	incf	___awtoft@sign,f
 17002  10EF                     l10235:	
 17003  10EF  082E               	movf	___awtoft@c,w
 17004  10F0  00A6               	movwf	___ftpack@arg
 17005  10F1  082F               	movf	___awtoft@c+1,w
 17006  10F2  00A7               	movwf	___ftpack@arg+1
 17007  10F3  01A8               	clrf	___ftpack@arg+2
 17008  10F4  308E               	movlw	142
 17009  10F5  00B1               	movwf	??___awtoft
 17010  10F6  0831               	movf	??___awtoft,w
 17011  10F7  00A9               	movwf	___ftpack@exp
 17012  10F8  0833               	movf	___awtoft@sign,w
 17013  10F9  00B2               	movwf	??___awtoft+1
 17014  10FA  0832               	movf	??___awtoft+1,w
 17015  10FB  00AA               	movwf	___ftpack@sign
 17016  10FC  3196  2663         	fcall	___ftpack
 17017  10FE  0020               	movlb	0	; select bank0
 17018  10FF  0826               	movf	?___ftpack,w
 17019  1100  00AE               	movwf	?___awtoft
 17020  1101  0827               	movf	?___ftpack+1,w
 17021  1102  00AF               	movwf	?___awtoft+1
 17022  1103  0828               	movf	?___ftpack+2,w
 17023  1104  00B0               	movwf	?___awtoft+2
 17024  1105  0008               	return
 17025  1106                     __end_of___awtoft:	
 17026                           
 17027                           	psect	text115
 17028  1663                     __ptext115:	
 17029 ;; *************** function ___ftpack *****************
 17030 ;; Defined at:
 17031 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17032 ;; Parameters:    Size  Location     Type
 17033 ;;  arg             3    6[BANK0 ] unsigned um
 17034 ;;  exp             1    9[BANK0 ] unsigned char 
 17035 ;;  sign            1   10[BANK0 ] unsigned char 
 17036 ;; Auto vars:     Size  Location     Type
 17037 ;;		None
 17038 ;; Return value:  Size  Location     Type
 17039 ;;                  3    6[BANK0 ] float 
 17040 ;; Registers used:
 17041 ;;		wreg, status,2, status,0
 17042 ;; Tracked objects:
 17043 ;;		On entry : 0/0
 17044 ;;		On exit  : 0/0
 17045 ;;		Unchanged: 0/0
 17046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17047 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17049 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;Total ram usage:        8 bytes
 17052 ;; Hardware stack levels used:    1
 17053 ;; Hardware stack levels required when called:    5
 17054 ;; This function calls:
 17055 ;;		Nothing
 17056 ;; This function is called by:
 17057 ;;		___awtoft
 17058 ;;		___ftadd
 17059 ;;		___ftdiv
 17060 ;;		___ftmul
 17061 ;; This function uses a non-reentrant model
 17062 ;;
 17063                           
 17064                           
 17065                           ;psect for function ___ftpack
 17066  1663                     ___ftpack:	
 17067                           
 17068                           ;incstack = 0
 17069                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17070  1663  0020               	movlb	0	; select bank0
 17071  1664  0829               	movf	___ftpack@exp,w
 17072  1665  1903               	btfsc	3,2
 17073  1666  2E6C               	goto	l10103
 17074  1667  0828               	movf	___ftpack@arg+2,w
 17075  1668  0427               	iorwf	___ftpack@arg+1,w
 17076  1669  0426               	iorwf	___ftpack@arg,w
 17077  166A  1D03               	skipz
 17078  166B  2E7D               	goto	l10109
 17079  166C                     l10103:	
 17080  166C  3000               	movlw	0
 17081  166D  00A6               	movwf	?___ftpack
 17082  166E  3000               	movlw	0
 17083  166F  00A7               	movwf	?___ftpack+1
 17084  1670  3000               	movlw	0
 17085  1671  00A8               	movwf	?___ftpack+2
 17086  1672  0008               	return
 17087  1673                     l10107:	
 17088  1673  3001               	movlw	1
 17089  1674  00AB               	movwf	??___ftpack
 17090  1675  082B               	movf	??___ftpack,w
 17091  1676  07A9               	addwf	___ftpack@exp,f
 17092  1677  3001               	movlw	1
 17093  1678                     u11575:	
 17094  1678  36A8               	lsrf	___ftpack@arg+2,f
 17095  1679  0CA7               	rrf	___ftpack@arg+1,f
 17096  167A  0CA6               	rrf	___ftpack@arg,f
 17097  167B  0B89               	decfsz	9,f
 17098  167C  2E78               	goto	u11575
 17099  167D                     l10109:	
 17100  167D  30FE               	movlw	254
 17101  167E  0528               	andwf	___ftpack@arg+2,w
 17102  167F  1903               	btfsc	3,2
 17103  1680  2E96               	goto	l2819
 17104  1681  2E73               	goto	l10107
 17105  1682                     l10111:	
 17106  1682  3001               	movlw	1
 17107  1683  00AB               	movwf	??___ftpack
 17108  1684  082B               	movf	??___ftpack,w
 17109  1685  07A9               	addwf	___ftpack@exp,f
 17110  1686  3001               	movlw	1
 17111  1687  07A6               	addwf	___ftpack@arg,f
 17112  1688  3000               	movlw	0
 17113  1689  1803               	skipnc
 17114  168A  3001               	movlw	1
 17115  168B  07A7               	addwf	___ftpack@arg+1,f
 17116  168C  3000               	movlw	0
 17117  168D  1803               	skipnc
 17118  168E  3001               	movlw	1
 17119  168F  07A8               	addwf	___ftpack@arg+2,f
 17120  1690  3001               	movlw	1
 17121  1691                     u11595:	
 17122  1691  36A8               	lsrf	___ftpack@arg+2,f
 17123  1692  0CA7               	rrf	___ftpack@arg+1,f
 17124  1693  0CA6               	rrf	___ftpack@arg,f
 17125  1694  0B89               	decfsz	9,f
 17126  1695  2E91               	goto	u11595
 17127  1696                     l2819:	
 17128  1696  30FF               	movlw	255
 17129  1697  0528               	andwf	___ftpack@arg+2,w
 17130  1698  1903               	btfsc	3,2
 17131  1699  2EA3               	goto	l10119
 17132  169A  2E82               	goto	l10111
 17133  169B                     l10117:	
 17134  169B  3001               	movlw	1
 17135  169C  02A9               	subwf	___ftpack@exp,f
 17136  169D  3001               	movlw	1
 17137  169E                     u11615:	
 17138  169E  35A6               	lslf	___ftpack@arg,f
 17139  169F  0DA7               	rlf	___ftpack@arg+1,f
 17140  16A0  0DA8               	rlf	___ftpack@arg+2,f
 17141  16A1  0B89               	decfsz	9,f
 17142  16A2  2E9E               	goto	u11615
 17143  16A3                     l10119:	
 17144  16A3  1FA7               	btfss	___ftpack@arg+1,7
 17145  16A4  2E9B               	goto	l10117
 17146  16A5  1829               	btfsc	___ftpack@exp,0
 17147  16A6  2EAD               	goto	l2825
 17148  16A7  30FF               	movlw	255
 17149  16A8  05A6               	andwf	___ftpack@arg,f
 17150  16A9  307F               	movlw	127
 17151  16AA  05A7               	andwf	___ftpack@arg+1,f
 17152  16AB  30FF               	movlw	255
 17153  16AC  05A8               	andwf	___ftpack@arg+2,f
 17154  16AD                     l2825:	
 17155  16AD  1003               	clrc
 17156  16AE  0CA9               	rrf	___ftpack@exp,f
 17157  16AF  0829               	movf	___ftpack@exp,w
 17158  16B0  00AB               	movwf	??___ftpack
 17159  16B1  01AC               	clrf	??___ftpack+1
 17160  16B2  01AD               	clrf	??___ftpack+2
 17161  16B3  3010               	movlw	16
 17162  16B4                     u11645:	
 17163  16B4  35AB               	lslf	??___ftpack,f
 17164  16B5  0DAC               	rlf	??___ftpack+1,f
 17165  16B6  0DAD               	rlf	??___ftpack+2,f
 17166  16B7  0B89               	decfsz	9,f
 17167  16B8  2EB4               	goto	u11645
 17168  16B9  082B               	movf	??___ftpack,w
 17169  16BA  04A6               	iorwf	___ftpack@arg,f
 17170  16BB  082C               	movf	??___ftpack+1,w
 17171  16BC  04A7               	iorwf	___ftpack@arg+1,f
 17172  16BD  082D               	movf	??___ftpack+2,w
 17173  16BE  04A8               	iorwf	___ftpack@arg+2,f
 17174  16BF  082A               	movf	___ftpack@sign,w
 17175  16C0  1903               	btfsc	3,2
 17176  16C1  0008               	return
 17177  16C2  17A8               	bsf	___ftpack@arg+2,7
 17178  16C3  0008               	return
 17179  16C4                     __end_of___ftpack:	
 17180                           
 17181                           	psect	text116
 17182  1CF6                     __ptext116:	
 17183 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17184 ;; Defined at:
 17185 ;;		line 67 in file "../src/Dimmer_B1.c"
 17186 ;; Parameters:    Size  Location     Type
 17187 ;;  lights          1    wreg     unsigned char 
 17188 ;; Auto vars:     Size  Location     Type
 17189 ;;  lights          1    7[BANK0 ] unsigned char 
 17190 ;;  value           1    8[BANK0 ] unsigned char 
 17191 ;; Return value:  Size  Location     Type
 17192 ;;                  1    wreg      unsigned char 
 17193 ;; Registers used:
 17194 ;;		wreg, status,2
 17195 ;; Tracked objects:
 17196 ;;		On entry : 0/0
 17197 ;;		On exit  : 0/0
 17198 ;;		Unchanged: 0/0
 17199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17203 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17204 ;;Total ram usage:        3 bytes
 17205 ;; Hardware stack levels used:    1
 17206 ;; Hardware stack levels required when called:    5
 17207 ;; This function calls:
 17208 ;;		Nothing
 17209 ;; This function is called by:
 17210 ;;		_setDimmerLights_Dimming
 17211 ;; This function uses a non-reentrant model
 17212 ;;
 17213                           
 17214                           
 17215                           ;psect for function _getDimmerIntr_DimmingValue
 17216  1CF6                     _getDimmerIntr_DimmingValue:	
 17217                           
 17218                           ;incstack = 0
 17219                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17220                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17221  1CF6  0020               	movlb	0	; select bank0
 17222  1CF7  00A7               	movwf	getDimmerIntr_DimmingValue@lights
 17223                           
 17224                           ;Dimmer_B1.c: 68: char value = 0;
 17225  1CF8  01A8               	clrf	getDimmerIntr_DimmingValue@value
 17226                           
 17227                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17228  1CF9  0827               	movf	getDimmerIntr_DimmingValue@lights,w
 17229  1CFA  3A01               	xorlw	1
 17230  1CFB  1D03               	skipz
 17231  1CFC  2D03               	goto	l681
 17232                           
 17233                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17234  1CFD  0021               	movlb	1	; select bank1
 17235  1CFE  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 17236  1CFF  0020               	movlb	0	; select bank0
 17237  1D00  00A6               	movwf	??_getDimmerIntr_DimmingValue
 17238  1D01  0826               	movf	??_getDimmerIntr_DimmingValue,w
 17239  1D02  00A8               	movwf	getDimmerIntr_DimmingValue@value
 17240  1D03                     l681:	
 17241                           
 17242                           ;Dimmer_B1.c: 72: }
 17243                           ;Dimmer_B1.c: 84: return value;
 17244  1D03  0828               	movf	getDimmerIntr_DimmingValue@value,w
 17245  1D04  0008               	return
 17246  1D05                     __end_of_getDimmerIntr_DimmingValue:	
 17247                           
 17248                           	psect	text117
 17249  1EA7                     __ptext117:	
 17250 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17251 ;; Defined at:
 17252 ;;		line 916 in file "../src/Dimmer_B1.c"
 17253 ;; Parameters:    Size  Location     Type
 17254 ;;  lights          1    wreg     unsigned char 
 17255 ;; Auto vars:     Size  Location     Type
 17256 ;;  lights          1    0[COMMON] unsigned char 
 17257 ;;  allow           1    8[BANK0 ] unsigned char 
 17258 ;; Return value:  Size  Location     Type
 17259 ;;                  1    wreg      unsigned char 
 17260 ;; Registers used:
 17261 ;;		wreg, status,2, pclath, cstack
 17262 ;; Tracked objects:
 17263 ;;		On entry : 0/0
 17264 ;;		On exit  : 0/0
 17265 ;;		Unchanged: 0/0
 17266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;Total ram usage:        3 bytes
 17272 ;; Hardware stack levels used:    1
 17273 ;; Hardware stack levels required when called:    6
 17274 ;; This function calls:
 17275 ;;		_getLoad_OK
 17276 ;; This function is called by:
 17277 ;;		_setDimmerLights_Main
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           
 17282                           ;psect for function _getDimmerLights_Allow_Condition
 17283  1EA7                     _getDimmerLights_Allow_Condition:	
 17284                           
 17285                           ;Dimmer_B1.c: 917: char allow = 0;
 17286                           
 17287                           ;incstack = 0
 17288                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 17289  1EA7  0020               	movlb	0	; select bank0
 17290  1EA8  01A8               	clrf	getDimmerLights_Allow_Condition@allow
 17291                           
 17292                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17293  1EA9  01A9               	clrf	_getDimmerLights_Allow_Condition$2198
 17294  1EAA  0AA9               	incf	_getDimmerLights_Allow_Condition$2198,f
 17295  1EAB  319B  23E8  319E   	fcall	_getLoad_OK
 17296  1EAE  3800               	iorlw	0
 17297  1EAF  1D03               	skipz
 17298  1EB0  2EB6               	goto	l11133
 17299  1EB1  0022               	movlb	2	; select bank2
 17300  1EB2  18AD               	btfsc	_Dimmer^(0+256),1
 17301  1EB3  2EB6               	goto	l11133
 17302  1EB4  0020               	movlb	0	; select bank0
 17303  1EB5  01A9               	clrf	_getDimmerLights_Allow_Condition$2198
 17304  1EB6                     l11133:	
 17305  1EB6  0020               	movlb	0	; select bank0
 17306  1EB7  0829               	movf	_getDimmerLights_Allow_Condition$2198,w
 17307  1EB8  00A7               	movwf	??_getDimmerLights_Allow_Condition
 17308  1EB9  0827               	movf	??_getDimmerLights_Allow_Condition,w
 17309  1EBA  00A8               	movwf	getDimmerLights_Allow_Condition@allow
 17310                           
 17311                           ;Dimmer_B1.c: 950: return allow;
 17312  1EBB  0828               	movf	getDimmerLights_Allow_Condition@allow,w
 17313  1EBC  0008               	return
 17314  1EBD                     __end_of_getDimmerLights_Allow_Condition:	
 17315                           
 17316                           	psect	text118
 17317  1BE8                     __ptext118:	
 17318 ;; *************** function _getLoad_OK *****************
 17319 ;; Defined at:
 17320 ;;		line 272 in file "../src/OverLoad_B1.c"
 17321 ;; Parameters:    Size  Location     Type
 17322 ;;		None
 17323 ;; Auto vars:     Size  Location     Type
 17324 ;;  ok              1    6[BANK0 ] unsigned char 
 17325 ;; Return value:  Size  Location     Type
 17326 ;;                  1    wreg      unsigned char 
 17327 ;; Registers used:
 17328 ;;		wreg, status,2
 17329 ;; Tracked objects:
 17330 ;;		On entry : 0/0
 17331 ;;		On exit  : 0/0
 17332 ;;		Unchanged: 0/0
 17333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;Total ram usage:        1 bytes
 17339 ;; Hardware stack levels used:    1
 17340 ;; Hardware stack levels required when called:    5
 17341 ;; This function calls:
 17342 ;;		Nothing
 17343 ;; This function is called by:
 17344 ;;		_DimmerLights_Main
 17345 ;;		_getDimmerLights_Allow_Condition
 17346 ;; This function uses a non-reentrant model
 17347 ;;
 17348                           
 17349                           
 17350                           ;psect for function _getLoad_OK
 17351  1BE8                     _getLoad_OK:	
 17352                           
 17353                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17354                           
 17355                           ;incstack = 0
 17356                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17357  1BE8  3000               	movlw	0
 17358  1BE9  0022               	movlb	2	; select bank2
 17359  1BEA  1BB5               	btfsc	_Load^(0+256),7
 17360  1BEB  3001               	movlw	1
 17361  1BEC  0020               	movlb	0	; select bank0
 17362  1BED  00A6               	movwf	getLoad_OK@ok
 17363                           
 17364                           ;OverLoad_B1.c: 274: return ok;
 17365  1BEE  0826               	movf	getLoad_OK@ok,w
 17366  1BEF  0008               	return
 17367  1BF0                     __end_of_getLoad_OK:	
 17368                           
 17369                           	psect	text119
 17370  11D8                     __ptext119:	
 17371 ;; *************** function _getMain_All_Error_Status *****************
 17372 ;; Defined at:
 17373 ;;		line 424 in file "../src/Main_B1.c"
 17374 ;; Parameters:    Size  Location     Type
 17375 ;;  command         1    wreg     unsigned char 
 17376 ;; Auto vars:     Size  Location     Type
 17377 ;;  command         1   11[BANK0 ] unsigned char 
 17378 ;;  status          1   12[BANK0 ] unsigned char 
 17379 ;; Return value:  Size  Location     Type
 17380 ;;                  1    wreg      unsigned char 
 17381 ;; Registers used:
 17382 ;;		wreg, status,2, status,0
 17383 ;; Tracked objects:
 17384 ;;		On entry : 0/0
 17385 ;;		On exit  : 0/0
 17386 ;;		Unchanged: 0/0
 17387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17389 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;Total ram usage:        7 bytes
 17393 ;; Hardware stack levels used:    1
 17394 ;; Hardware stack levels required when called:    5
 17395 ;; This function calls:
 17396 ;;		Nothing
 17397 ;; This function is called by:
 17398 ;;		_DimmerLights_Main
 17399 ;;		_Exception_Main
 17400 ;;		_Load_Main
 17401 ;;		_setTemp_Main
 17402 ;;		_getRxData
 17403 ;;		_setSw_Main
 17404 ;; This function uses a non-reentrant model
 17405 ;;
 17406                           
 17407                           
 17408                           ;psect for function _getMain_All_Error_Status
 17409  11D8                     _getMain_All_Error_Status:	
 17410                           
 17411                           ;incstack = 0
 17412                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17413                           ;getMain_All_Error_Status@command stored from wreg
 17414  11D8  0020               	movlb	0	; select bank0
 17415  11D9  00AB               	movwf	getMain_All_Error_Status@command
 17416                           
 17417                           ;Main_B1.c: 425: char status = 0;
 17418  11DA  01AC               	clrf	getMain_All_Error_Status@status
 17419                           
 17420                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17421  11DB  08AC               	movf	getMain_All_Error_Status@status,f
 17422  11DC  1D03               	skipz
 17423  11DD  29F2               	goto	l10905
 17424  11DE  082B               	movf	getMain_All_Error_Status@command,w
 17425  11DF  3A02               	xorlw	2
 17426  11E0  1903               	skipnz
 17427  11E1  29F2               	goto	l10905
 17428                           
 17429                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17430  11E2  0021               	movlb	1	; select bank1
 17431  11E3  18D1               	btfsc	_Temp^(0+128),1
 17432  11E4  29E9               	goto	l10903
 17433  11E5  0020               	movlb	0	; select bank0
 17434  11E6  01A7               	clrf	_getMain_All_Error_Status$3505
 17435  11E7  01A8               	clrf	_getMain_All_Error_Status$3505+1
 17436  11E8  29EE               	goto	l1453
 17437  11E9                     l10903:	
 17438  11E9  3002               	movlw	2
 17439  11EA  0020               	movlb	0	; select bank0
 17440  11EB  00A7               	movwf	_getMain_All_Error_Status$3505
 17441  11EC  3000               	movlw	0
 17442  11ED  00A8               	movwf	_getMain_All_Error_Status$3505+1
 17443  11EE                     l1453:	
 17444  11EE  0827               	movf	_getMain_All_Error_Status$3505,w
 17445  11EF  00A6               	movwf	??_getMain_All_Error_Status
 17446  11F0  0826               	movf	??_getMain_All_Error_Status,w
 17447  11F1  00AC               	movwf	getMain_All_Error_Status@status
 17448  11F2                     l10905:	
 17449                           
 17450                           ;Main_B1.c: 438: }
 17451                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 17452  11F2  08AC               	movf	getMain_All_Error_Status@status,f
 17453  11F3  1D03               	skipz
 17454  11F4  2A09               	goto	l1454
 17455  11F5  082B               	movf	getMain_All_Error_Status@command,w
 17456  11F6  3A03               	xorlw	3
 17457  11F7  1903               	skipnz
 17458  11F8  2A09               	goto	l1454
 17459                           
 17460                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17461  11F9  0022               	movlb	2	; select bank2
 17462  11FA  1AB5               	btfsc	_Load^(0+256),5
 17463  11FB  2A00               	goto	l10913
 17464  11FC  0020               	movlb	0	; select bank0
 17465  11FD  01A9               	clrf	_getMain_All_Error_Status$3506
 17466  11FE  01AA               	clrf	_getMain_All_Error_Status$3506+1
 17467  11FF  2A05               	goto	l1458
 17468  1200                     l10913:	
 17469  1200  3003               	movlw	3
 17470  1201  0020               	movlb	0	; select bank0
 17471  1202  00A9               	movwf	_getMain_All_Error_Status$3506
 17472  1203  3000               	movlw	0
 17473  1204  00AA               	movwf	_getMain_All_Error_Status$3506+1
 17474  1205                     l1458:	
 17475  1205  0829               	movf	_getMain_All_Error_Status$3506,w
 17476  1206  00A6               	movwf	??_getMain_All_Error_Status
 17477  1207  0826               	movf	??_getMain_All_Error_Status,w
 17478  1208  00AC               	movwf	getMain_All_Error_Status@status
 17479  1209                     l1454:	
 17480                           
 17481                           ;Main_B1.c: 445: }
 17482                           ;Main_B1.c: 455: return status;
 17483  1209  082C               	movf	getMain_All_Error_Status@status,w
 17484  120A  0008               	return
 17485  120B                     __end_of_getMain_All_Error_Status:	
 17486                           
 17487                           	psect	text120
 17488  1BD3                     __ptext120:	
 17489 ;; *************** function _DimmerLights_Initialization *****************
 17490 ;; Defined at:
 17491 ;;		line 597 in file "../src/Dimmer_B1.c"
 17492 ;; Parameters:    Size  Location     Type
 17493 ;;		None
 17494 ;; Auto vars:     Size  Location     Type
 17495 ;;		None
 17496 ;; Return value:  Size  Location     Type
 17497 ;;		None               void
 17498 ;; Registers used:
 17499 ;;		wreg, status,2, status,0, pclath, cstack
 17500 ;; Tracked objects:
 17501 ;;		On entry : 0/0
 17502 ;;		On exit  : 0/0
 17503 ;;		Unchanged: 0/0
 17504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17509 ;;Total ram usage:        0 bytes
 17510 ;; Hardware stack levels used:    1
 17511 ;; Hardware stack levels required when called:    6
 17512 ;; This function calls:
 17513 ;;		_DimmerIntr_Initialization
 17514 ;;		_setDimmerLights_Initialization
 17515 ;; This function is called by:
 17516 ;;		_main
 17517 ;; This function uses a non-reentrant model
 17518 ;;
 17519                           
 17520                           
 17521                           ;psect for function _DimmerLights_Initialization
 17522  1BD3                     _DimmerLights_Initialization:	
 17523                           
 17524                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 17525                           
 17526                           ;incstack = 0
 17527                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17528  1BD3  3001               	movlw	1
 17529  1BD4  319B  2385  319B   	fcall	_setDimmerLights_Initialization
 17530                           
 17531                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 17532  1BD7  319F  2730         	fcall	_DimmerIntr_Initialization
 17533  1BD9  0008               	return
 17534  1BDA                     __end_of_DimmerLights_Initialization:	
 17535                           
 17536                           	psect	text121
 17537  1B85                     __ptext121:	
 17538 ;; *************** function _setDimmerLights_Initialization *****************
 17539 ;; Defined at:
 17540 ;;		line 613 in file "../src/Dimmer_B1.c"
 17541 ;; Parameters:    Size  Location     Type
 17542 ;;  lights          1    wreg     unsigned char 
 17543 ;; Auto vars:     Size  Location     Type
 17544 ;;  lights          1    0[COMMON] unsigned char 
 17545 ;; Return value:  Size  Location     Type
 17546 ;;		None               void
 17547 ;; Registers used:
 17548 ;;		wreg
 17549 ;; Tracked objects:
 17550 ;;		On entry : 0/0
 17551 ;;		On exit  : 0/0
 17552 ;;		Unchanged: 0/0
 17553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;Total ram usage:        0 bytes
 17559 ;; Hardware stack levels used:    1
 17560 ;; Hardware stack levels required when called:    5
 17561 ;; This function calls:
 17562 ;;		Nothing
 17563 ;; This function is called by:
 17564 ;;		_DimmerLights_Initialization
 17565 ;; This function uses a non-reentrant model
 17566 ;;
 17567                           
 17568                           
 17569                           ;psect for function _setDimmerLights_Initialization
 17570  1B85                     _setDimmerLights_Initialization:	
 17571                           
 17572                           ;incstack = 0
 17573                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17574  1B85  0008               	return
 17575  1B86                     __end_of_setDimmerLights_Initialization:	
 17576                           
 17577                           	psect	text122
 17578  1F30                     __ptext122:	
 17579 ;; *************** function _DimmerIntr_Initialization *****************
 17580 ;; Defined at:
 17581 ;;		line 7 in file "../src/Dimmer_B1.c"
 17582 ;; Parameters:    Size  Location     Type
 17583 ;;		None
 17584 ;; Auto vars:     Size  Location     Type
 17585 ;;		None
 17586 ;; Return value:  Size  Location     Type
 17587 ;;		None               void
 17588 ;; Registers used:
 17589 ;;		wreg
 17590 ;; Tracked objects:
 17591 ;;		On entry : 0/0
 17592 ;;		On exit  : 0/0
 17593 ;;		Unchanged: 0/0
 17594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17599 ;;Total ram usage:        1 bytes
 17600 ;; Hardware stack levels used:    1
 17601 ;; Hardware stack levels required when called:    5
 17602 ;; This function calls:
 17603 ;;		Nothing
 17604 ;; This function is called by:
 17605 ;;		_DimmerLights_Initialization
 17606 ;; This function uses a non-reentrant model
 17607 ;;
 17608                           
 17609                           
 17610                           ;psect for function _DimmerIntr_Initialization
 17611  1F30                     _DimmerIntr_Initialization:	
 17612                           
 17613                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 17614                           
 17615                           ;incstack = 0
 17616                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17617  1F30  3007               	movlw	7
 17618  1F31  0020               	movlb	0	; select bank0
 17619  1F32  00A6               	movwf	??_DimmerIntr_Initialization
 17620  1F33  0826               	movf	??_DimmerIntr_Initialization,w
 17621  1F34  0021               	movlb	1	; select bank1
 17622  1F35  00BE               	movwf	(_DimmerIntr1^(0+128)+4)
 17623                           
 17624                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(65*0.75));
 17625  1F36  3030               	movlw	48
 17626  1F37  0020               	movlb	0	; select bank0
 17627  1F38  00A6               	movwf	??_DimmerIntr_Initialization
 17628  1F39  0826               	movf	??_DimmerIntr_Initialization,w
 17629  1F3A  0021               	movlb	1	; select bank1
 17630  1F3B  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 17631                           
 17632                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(20*0.75));
 17633  1F3C  300F               	movlw	15
 17634  1F3D  0020               	movlb	0	; select bank0
 17635  1F3E  00A6               	movwf	??_DimmerIntr_Initialization
 17636  1F3F  0826               	movf	??_DimmerIntr_Initialization,w
 17637  1F40  0021               	movlb	1	; select bank1
 17638  1F41  00C1               	movwf	(_DimmerIntr1^(0+128)+7)
 17639                           
 17640                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(65*0.75));
 17641  1F42  3030               	movlw	48
 17642  1F43  0020               	movlb	0	; select bank0
 17643  1F44  00A6               	movwf	??_DimmerIntr_Initialization
 17644  1F45  0826               	movf	??_DimmerIntr_Initialization,w
 17645  1F46  0021               	movlb	1	; select bank1
 17646  1F47  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 17647  1F48  0008               	return
 17648  1F49                     __end_of_DimmerIntr_Initialization:	
 17649                           
 17650                           	psect	text123
 17651  1B9D                     __ptext123:	
 17652 ;; *************** function _DelayOff_Main *****************
 17653 ;; Defined at:
 17654 ;;		line 41 in file "../src/DelayOff_B1.c"
 17655 ;; Parameters:    Size  Location     Type
 17656 ;;		None
 17657 ;; Auto vars:     Size  Location     Type
 17658 ;;		None
 17659 ;; Return value:  Size  Location     Type
 17660 ;;		None               void
 17661 ;; Registers used:
 17662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17663 ;; Tracked objects:
 17664 ;;		On entry : 0/0
 17665 ;;		On exit  : 0/0
 17666 ;;		Unchanged: 0/0
 17667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;Total ram usage:        0 bytes
 17673 ;; Hardware stack levels used:    1
 17674 ;; Hardware stack levels required when called:    9
 17675 ;; This function calls:
 17676 ;;		_DlyOff_Main
 17677 ;; This function is called by:
 17678 ;;		_main
 17679 ;; This function uses a non-reentrant model
 17680 ;;
 17681                           
 17682                           
 17683                           ;psect for function _DelayOff_Main
 17684  1B9D                     _DelayOff_Main:	
 17685                           
 17686                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17687                           
 17688                           ;incstack = 0
 17689                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17690  1B9D  3001               	movlw	1
 17691  1B9E  3188  2043         	fcall	_DlyOff_Main
 17692  1BA0  0008               	return
 17693  1BA1                     __end_of_DelayOff_Main:	
 17694                           
 17695                           	psect	text124
 17696  0843                     __ptext124:	
 17697 ;; *************** function _DlyOff_Main *****************
 17698 ;; Defined at:
 17699 ;;		line 61 in file "../src/DelayOff_B1.c"
 17700 ;; Parameters:    Size  Location     Type
 17701 ;;  sw              1    wreg     unsigned char 
 17702 ;; Auto vars:     Size  Location     Type
 17703 ;;  sw              1   10[BANK1 ] unsigned char 
 17704 ;; Return value:  Size  Location     Type
 17705 ;;		None               void
 17706 ;; Registers used:
 17707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17708 ;; Tracked objects:
 17709 ;;		On entry : 0/0
 17710 ;;		On exit  : 0/0
 17711 ;;		Unchanged: 0/0
 17712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;Total ram usage:        3 bytes
 17718 ;; Hardware stack levels used:    1
 17719 ;; Hardware stack levels required when called:    8
 17720 ;; This function calls:
 17721 ;;		_DelayOffPointSelect
 17722 ;;		_getDimmerLights_Status
 17723 ;;		_setDimmerLights_SwOff
 17724 ;;		_setDimmerLights_SwOn
 17725 ;;		_setProductData
 17726 ;; This function is called by:
 17727 ;;		_DelayOff_Main
 17728 ;; This function uses a non-reentrant model
 17729 ;;
 17730                           
 17731                           
 17732                           ;psect for function _DlyOff_Main
 17733  0843                     _DlyOff_Main:	
 17734                           
 17735                           ;incstack = 0
 17736                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17737                           ;DlyOff_Main@sw stored from wreg
 17738  0843  0021               	movlb	1	; select bank1
 17739  0844  00E5               	movwf	DlyOff_Main@sw^(0+128)
 17740                           
 17741                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17742  0845  0865               	movf	DlyOff_Main@sw^(0+128),w
 17743  0846  319C  242E  3188   	fcall	_DelayOffPointSelect
 17744                           
 17745                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17746  0849  0020               	movlb	0	; select bank0
 17747  084A  0863               	movf	_DelayOff,w
 17748  084B  0086               	movwf	6
 17749  084C  3001               	movlw	1	; select bank2/3
 17750  084D  0087               	movwf	7
 17751  084E  1C81               	btfss	1,1
 17752  084F  0008               	return
 17753                           
 17754                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17755  0850  0863               	movf	_DelayOff,w
 17756  0851  3E02               	addlw	2
 17757  0852  0086               	movwf	6
 17758  0853  3001               	movlw	1	; select bank2/3
 17759  0854  0087               	movwf	7
 17760  0855  3001               	movlw	1
 17761  0856  0781               	addwf	1,f
 17762  0857  3141               	addfsr 1,1
 17763  0858  1803               	skipnc
 17764  0859  0A81               	incf	1,f
 17765                           
 17766                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17767  085A  0863               	movf	_DelayOff,w
 17768  085B  3E02               	addlw	2
 17769  085C  0086               	movwf	6
 17770  085D  3001               	movlw	1	; select bank2/3
 17771  085E  0087               	movwf	7
 17772  085F  3F40               	moviw [0]fsr1
 17773  0860  0021               	movlb	1	; select bank1
 17774  0861  00E3               	movwf	??_DlyOff_Main^(0+128)
 17775  0862  3F41               	moviw [1]fsr1
 17776  0863  00E4               	movwf	(??_DlyOff_Main^(0+128)+1)
 17777  0864  300B               	movlw	11
 17778  0865  0264               	subwf	(??_DlyOff_Main+1)^(0+128),w
 17779  0866  30B8               	movlw	184
 17780  0867  1903               	skipnz
 17781  0868  0263               	subwf	??_DlyOff_Main^(0+128),w
 17782  0869  1C03               	skipc
 17783  086A  0008               	return
 17784                           
 17785                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17786  086B  0020               	movlb	0	; select bank0
 17787  086C  0863               	movf	_DelayOff,w
 17788  086D  3E02               	addlw	2
 17789  086E  0086               	movwf	6
 17790  086F  3001               	movlw	1	; select bank2/3
 17791  0870  0087               	movwf	7
 17792  0871  3000               	movlw	0
 17793  0872  3FC0               	movwi [0]fsr1
 17794  0873  3FC1               	movwi [1]fsr1
 17795                           
 17796                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17797  0874  3001               	movlw	1
 17798  0875  0021               	movlb	1	; select bank1
 17799  0876  00E3               	movwf	??_DlyOff_Main^(0+128)
 17800  0877  0020               	movlb	0	; select bank0
 17801  0878  0863               	movf	_DelayOff,w
 17802  0879  3E04               	addlw	4
 17803  087A  0086               	movwf	6
 17804  087B  3001               	movlw	1	; select bank2/3
 17805  087C  0087               	movwf	7
 17806  087D  0021               	movlb	1	; select bank1
 17807  087E  0863               	movf	??_DlyOff_Main^(0+128),w
 17808  087F  0781               	addwf	1,f
 17809                           
 17810                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17811  0880  0020               	movlb	0	; select bank0
 17812  0881  0863               	movf	_DelayOff,w
 17813  0882  3E04               	addlw	4
 17814  0883  0086               	movwf	6
 17815  0884  3001               	movlw	1	; select bank2/3
 17816  0885  0087               	movwf	7
 17817  0886  0A63               	incf	_DelayOff,w
 17818  0887  0084               	movwf	4
 17819  0888  3001               	movlw	1	; select bank2/3
 17820  0889  0085               	movwf	5
 17821  088A  0800               	movf	0,w
 17822  088B  0201               	subwf	1,w
 17823  088C  1C03               	skipc
 17824  088D  0008               	return
 17825                           
 17826                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17827  088E  0863               	movf	_DelayOff,w
 17828  088F  3E04               	addlw	4
 17829  0890  0086               	movwf	6
 17830  0891  3001               	movlw	1	; select bank2/3
 17831  0892  0087               	movwf	7
 17832  0893  0181               	clrf	1
 17833                           
 17834                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17835  0894  0863               	movf	_DelayOff,w
 17836  0895  0086               	movwf	6
 17837  0896  3001               	movlw	1	; select bank2/3
 17838  0897  0087               	movwf	7
 17839  0898  1081               	bcf	1,1
 17840                           
 17841                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17842  0899  0021               	movlb	1	; select bank1
 17843  089A  0865               	movf	DlyOff_Main@sw^(0+128),w
 17844  089B  319D  2514  3188   	fcall	_getDimmerLights_Status
 17845  089E  3A01               	xorlw	1
 17846  089F  1D03               	skipz
 17847  08A0  28AB               	goto	l531
 17848                           
 17849                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17850  08A1  0021               	movlb	1	; select bank1
 17851  08A2  0865               	movf	DlyOff_Main@sw^(0+128),w
 17852  08A3  3191  21A5  3188   	fcall	_setDimmerLights_SwOn
 17853                           
 17854                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17855  08A6  0021               	movlb	1	; select bank1
 17856  08A7  0865               	movf	DlyOff_Main@sw^(0+128),w
 17857  08A8  3193  2315  3188   	fcall	_setDimmerLights_SwOff
 17858  08AB                     l531:	
 17859                           
 17860                           ;DelayOff_B1.c: 78: }
 17861                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17862  08AB  0021               	movlb	1	; select bank1
 17863  08AC  01E1               	clrf	setProductData@value^(0+128)
 17864  08AD  0865               	movf	DlyOff_Main@sw^(0+128),w
 17865  08AE  3E1A               	addlw	26
 17866  08AF  319C  24E7         	fcall	_setProductData
 17867  08B1  0008               	return
 17868  08B2                     __end_of_DlyOff_Main:	
 17869                           
 17870                           	psect	text125
 17871  1CE7                     __ptext125:	
 17872 ;; *************** function _setProductData *****************
 17873 ;; Defined at:
 17874 ;;		line 645 in file "../src/Main_B1.c"
 17875 ;; Parameters:    Size  Location     Type
 17876 ;;  address         1    wreg     unsigned char 
 17877 ;;  value           1    6[BANK1 ] unsigned char 
 17878 ;; Auto vars:     Size  Location     Type
 17879 ;;  address         1    7[BANK1 ] unsigned char 
 17880 ;; Return value:  Size  Location     Type
 17881 ;;		None               void
 17882 ;; Registers used:
 17883 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17884 ;; Tracked objects:
 17885 ;;		On entry : 0/0
 17886 ;;		On exit  : 0/0
 17887 ;;		Unchanged: 0/0
 17888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17889 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 17890 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 17891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17892 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;Total ram usage:        3 bytes
 17894 ;; Hardware stack levels used:    1
 17895 ;; Hardware stack levels required when called:    5
 17896 ;; This function calls:
 17897 ;;		Nothing
 17898 ;; This function is called by:
 17899 ;;		_DlyOff_Main
 17900 ;;		_setDelayOff_GO
 17901 ;;		_setDimmerLights_OnOff
 17902 ;;		_setDimmerLights_Dimming
 17903 ;;		_setTemp_Main
 17904 ;;		_setLog_Code
 17905 ;;		_setControl_Lights_Table
 17906 ;;		_setRFSW_AdjControl
 17907 ;;		_setRF_DimmerLights
 17908 ;; This function uses a non-reentrant model
 17909 ;;
 17910                           
 17911                           
 17912                           ;psect for function _setProductData
 17913  1CE7                     _setProductData:	
 17914                           
 17915                           ;incstack = 0
 17916                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17917                           ;setProductData@address stored from wreg
 17918  1CE7  0021               	movlb	1	; select bank1
 17919  1CE8  00E2               	movwf	setProductData@address^(0+128)
 17920                           
 17921                           ;Main_B1.c: 646: _product.Data[address] = value;
 17922  1CE9  0861               	movf	setProductData@value^(0+128),w
 17923  1CEA  0020               	movlb	0	; select bank0
 17924  1CEB  00E2               	movwf	??_setProductData
 17925  1CEC  0021               	movlb	1	; select bank1
 17926  1CED  0862               	movf	setProductData@address^(0+128),w
 17927  1CEE  3E20               	addlw	__product& (0+255)
 17928  1CEF  0086               	movwf	6
 17929  1CF0  3002               	movlw	2	; select bank4/5
 17930  1CF1  0087               	movwf	7
 17931  1CF2  0020               	movlb	0	; select bank0
 17932  1CF3  0862               	movf	??_setProductData,w
 17933  1CF4  0081               	movwf	1
 17934  1CF5  0008               	return
 17935  1CF6                     __end_of_setProductData:	
 17936                           
 17937                           	psect	text126
 17938  11A5                     __ptext126:	
 17939 ;; *************** function _setDimmerLights_SwOn *****************
 17940 ;; Defined at:
 17941 ;;		line 653 in file "../src/Dimmer_B1.c"
 17942 ;; Parameters:    Size  Location     Type
 17943 ;;  sw              1    wreg     unsigned char 
 17944 ;; Auto vars:     Size  Location     Type
 17945 ;;  sw              1   19[BANK0 ] unsigned char 
 17946 ;;  idle            1   20[BANK0 ] unsigned char 
 17947 ;; Return value:  Size  Location     Type
 17948 ;;		None               void
 17949 ;; Registers used:
 17950 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17951 ;; Tracked objects:
 17952 ;;		On entry : 0/0
 17953 ;;		On exit  : 0/0
 17954 ;;		Unchanged: 0/0
 17955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17957 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17960 ;;Total ram usage:        2 bytes
 17961 ;; Hardware stack levels used:    1
 17962 ;; Hardware stack levels required when called:    7
 17963 ;; This function calls:
 17964 ;;		_DimmerLights_SelectPointer
 17965 ;;		_setBuz
 17966 ;; This function is called by:
 17967 ;;		_DlyOff_Main
 17968 ;;		_setControl_Lights_Table
 17969 ;;		_setRFSW_Control
 17970 ;;		_setRFSW_AdjControl
 17971 ;;		_setSw_Main
 17972 ;; This function uses a non-reentrant model
 17973 ;;
 17974                           
 17975                           
 17976                           ;psect for function _setDimmerLights_SwOn
 17977  11A5                     _setDimmerLights_SwOn:	
 17978                           
 17979                           ;incstack = 0
 17980                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17981                           ;setDimmerLights_SwOn@sw stored from wreg
 17982  11A5  0020               	movlb	0	; select bank0
 17983  11A6  00B3               	movwf	setDimmerLights_SwOn@sw
 17984                           
 17985                           ;Dimmer_B1.c: 654: char idle = 0;
 17986  11A7  01B4               	clrf	setDimmerLights_SwOn@idle
 17987                           
 17988                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 17989  11A8  0833               	movf	setDimmerLights_SwOn@sw,w
 17990  11A9  319C  2439  3191   	fcall	_DimmerLights_SelectPointer
 17991                           
 17992                           ;Dimmer_B1.c: 680: if (idle == 0) {
 17993  11AC  0020               	movlb	0	; select bank0
 17994  11AD  08B4               	movf	setDimmerLights_SwOn@idle,f
 17995  11AE  1D03               	skipz
 17996  11AF  0008               	return
 17997                           
 17998                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 17999  11B0  0864               	movf	_DimmerLights,w
 18000  11B1  0086               	movwf	6
 18001  11B2  3001               	movlw	1	; select bank2/3
 18002  11B3  0087               	movwf	7
 18003  11B4  1401               	bsf	1,0
 18004                           
 18005                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 18006  11B5  0A64               	incf	_DimmerLights,w
 18007  11B6  0086               	movwf	6
 18008  11B7  3001               	movlw	1	; select bank2/3
 18009  11B8  0087               	movwf	7
 18010  11B9  1801               	btfsc	1,0
 18011  11BA  29CB               	goto	l10499
 18012                           
 18013                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 18014  11BB  0A64               	incf	_DimmerLights,w
 18015  11BC  0086               	movwf	6
 18016  11BD  3001               	movlw	1	; select bank2/3
 18017  11BE  0087               	movwf	7
 18018  11BF  1401               	bsf	1,0
 18019                           
 18020                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 18021  11C0  0864               	movf	_DimmerLights,w
 18022  11C1  0086               	movwf	6
 18023  11C2  3001               	movlw	1	; select bank2/3
 18024  11C3  0087               	movwf	7
 18025  11C4  1481               	bsf	1,1
 18026                           
 18027                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 18028  11C5  0864               	movf	_DimmerLights,w
 18029  11C6  0086               	movwf	6
 18030  11C7  3001               	movlw	1	; select bank2/3
 18031  11C8  0087               	movwf	7
 18032  11C9  1501               	bsf	1,2
 18033                           
 18034                           ;Dimmer_B1.c: 686: } else {
 18035  11CA  29D0               	goto	l10501
 18036  11CB                     l10499:	
 18037                           
 18038                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 18039  11CB  0A64               	incf	_DimmerLights,w
 18040  11CC  0086               	movwf	6
 18041  11CD  3001               	movlw	1	; select bank2/3
 18042  11CE  0087               	movwf	7
 18043  11CF  1001               	bcf	1,0
 18044  11D0                     l10501:	
 18045                           
 18046                           ;Dimmer_B1.c: 688: }
 18047                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 18048  11D0  3064               	movlw	100
 18049  11D1  00AF               	movwf	setBuz@time
 18050  11D2  3000               	movlw	0
 18051  11D3  00B0               	movwf	setBuz@time+1
 18052  11D4  3001               	movlw	1
 18053  11D5  3195  2550         	fcall	_setBuz
 18054  11D7  0008               	return
 18055  11D8                     __end_of_setDimmerLights_SwOn:	
 18056                           
 18057                           	psect	text127
 18058  1550                     __ptext127:	
 18059 ;; *************** function _setBuz *****************
 18060 ;; Defined at:
 18061 ;;		line 22 in file "../src/Buzzer_B1.c"
 18062 ;; Parameters:    Size  Location     Type
 18063 ;;  count           1    wreg     unsigned char 
 18064 ;;  time            2   15[BANK0 ] int 
 18065 ;; Auto vars:     Size  Location     Type
 18066 ;;  count           1   18[BANK0 ] unsigned char 
 18067 ;; Return value:  Size  Location     Type
 18068 ;;		None               void
 18069 ;; Registers used:
 18070 ;;		wreg, status,2, status,0, pclath, cstack
 18071 ;; Tracked objects:
 18072 ;;		On entry : 0/0
 18073 ;;		On exit  : 0/0
 18074 ;;		Unchanged: 0/0
 18075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;Total ram usage:        4 bytes
 18081 ;; Hardware stack levels used:    1
 18082 ;; Hardware stack levels required when called:    6
 18083 ;; This function calls:
 18084 ;;		___awdiv
 18085 ;; This function is called by:
 18086 ;;		_setDimmerLights_SwOn
 18087 ;;		_setDimmerLights_Dimming
 18088 ;;		_my_MainTimer
 18089 ;;		_Exception_Main
 18090 ;;		_setTemp_Main
 18091 ;;		_setLog_Code
 18092 ;;		_setRFSW_Control
 18093 ;;		_setSw_Main
 18094 ;; This function uses a non-reentrant model
 18095 ;;
 18096                           
 18097                           
 18098                           ;psect for function _setBuz
 18099  1550                     _setBuz:	
 18100                           
 18101                           ;incstack = 0
 18102                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18103                           ;setBuz@count stored from wreg
 18104  1550  0020               	movlb	0	; select bank0
 18105  1551  00B2               	movwf	setBuz@count
 18106                           
 18107                           ;Buzzer_B1.c: 23: time /= 20;
 18108  1552  3014               	movlw	20
 18109  1553  00A6               	movwf	___awdiv@divisor
 18110  1554  3000               	movlw	0
 18111  1555  00A7               	movwf	___awdiv@divisor+1
 18112  1556  0830               	movf	setBuz@time+1,w
 18113  1557  01A9               	clrf	___awdiv@dividend+1
 18114  1558  07A9               	addwf	___awdiv@dividend+1,f
 18115  1559  082F               	movf	setBuz@time,w
 18116  155A  01A8               	clrf	___awdiv@dividend
 18117  155B  07A8               	addwf	___awdiv@dividend,f
 18118  155C  3194  24A7  3195   	fcall	___awdiv
 18119  155F  0020               	movlb	0	; select bank0
 18120  1560  0827               	movf	?___awdiv+1,w
 18121  1561  01B0               	clrf	setBuz@time+1
 18122  1562  07B0               	addwf	setBuz@time+1,f
 18123  1563  0826               	movf	?___awdiv,w
 18124  1564  01AF               	clrf	setBuz@time
 18125  1565  07AF               	addwf	setBuz@time,f
 18126                           
 18127                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18128  1566  0021               	movlb	1	; select bank1
 18129  1567  1C2E               	btfss	_Buz1^(0+128),0
 18130  1568  0008               	return
 18131                           
 18132                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18133  1569  18AE               	btfsc	_Buz1^(0+128),1
 18134  156A  2D81               	goto	l86
 18135                           
 18136                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18137  156B  14AE               	bsf	_Buz1^(0+128),1
 18138                           
 18139                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18140  156C  01AF               	clrf	(_Buz1^(0+128)+1)
 18141  156D  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18142                           
 18143                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18144  156E  0020               	movlb	0	; select bank0
 18145  156F  0832               	movf	setBuz@count,w
 18146  1570  00B1               	movwf	??_setBuz
 18147  1571  0831               	movf	??_setBuz,w
 18148  1572  0021               	movlb	1	; select bank1
 18149  1573  00B1               	movwf	(_Buz1^(0+128)+3)
 18150                           
 18151                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18152  1574  0020               	movlb	0	; select bank0
 18153  1575  0830               	movf	setBuz@time+1,w
 18154  1576  0021               	movlb	1	; select bank1
 18155  1577  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18156  1578  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18157  1579  0020               	movlb	0	; select bank0
 18158  157A  082F               	movf	setBuz@time,w
 18159  157B  0021               	movlb	1	; select bank1
 18160  157C  01B4               	clrf	(_Buz1^(0+128)+6)
 18161  157D  07B4               	addwf	(_Buz1^(0+128)+6),f
 18162                           
 18163                           ;Buzzer_B1.c: 30: RB3 = 1;
 18164  157E  0020               	movlb	0	; select bank0
 18165  157F  158D               	bsf	13,3	;volatile
 18166                           
 18167                           ;Buzzer_B1.c: 31: } else {
 18168  1580  0008               	return
 18169  1581                     l86:	
 18170                           
 18171                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18172  1581  19AE               	btfsc	_Buz1^(0+128),3
 18173  1582  2D95               	goto	l88
 18174                           
 18175                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18176  1583  15AE               	bsf	_Buz1^(0+128),3
 18177                           
 18178                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18179  1584  0020               	movlb	0	; select bank0
 18180  1585  0832               	movf	setBuz@count,w
 18181  1586  00B1               	movwf	??_setBuz
 18182  1587  0831               	movf	??_setBuz,w
 18183  1588  0021               	movlb	1	; select bank1
 18184  1589  00B2               	movwf	(_Buz1^(0+128)+4)
 18185                           
 18186                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18187  158A  0020               	movlb	0	; select bank0
 18188  158B  0830               	movf	setBuz@time+1,w
 18189  158C  0021               	movlb	1	; select bank1
 18190  158D  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18191  158E  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18192  158F  0020               	movlb	0	; select bank0
 18193  1590  082F               	movf	setBuz@time,w
 18194  1591  0021               	movlb	1	; select bank1
 18195  1592  01B6               	clrf	(_Buz1^(0+128)+8)
 18196  1593  07B6               	addwf	(_Buz1^(0+128)+8),f
 18197                           
 18198                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18199  1594  0008               	return
 18200  1595                     l88:	
 18201  1595  1A2E               	btfsc	_Buz1^(0+128),4
 18202  1596  0008               	return
 18203                           
 18204                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18205  1597  162E               	bsf	_Buz1^(0+128),4
 18206                           
 18207                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18208  1598  0020               	movlb	0	; select bank0
 18209  1599  0832               	movf	setBuz@count,w
 18210  159A  00B1               	movwf	??_setBuz
 18211  159B  0831               	movf	??_setBuz,w
 18212  159C  0021               	movlb	1	; select bank1
 18213  159D  00B3               	movwf	(_Buz1^(0+128)+5)
 18214                           
 18215                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18216  159E  0020               	movlb	0	; select bank0
 18217  159F  0830               	movf	setBuz@time+1,w
 18218  15A0  0021               	movlb	1	; select bank1
 18219  15A1  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18220  15A2  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18221  15A3  0020               	movlb	0	; select bank0
 18222  15A4  082F               	movf	setBuz@time,w
 18223  15A5  0021               	movlb	1	; select bank1
 18224  15A6  01B8               	clrf	(_Buz1^(0+128)+10)
 18225  15A7  07B8               	addwf	(_Buz1^(0+128)+10),f
 18226  15A8  0008               	return
 18227  15A9                     __end_of_setBuz:	
 18228                           
 18229                           	psect	text128
 18230  14A7                     __ptext128:	
 18231 ;; *************** function ___awdiv *****************
 18232 ;; Defined at:
 18233 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18234 ;; Parameters:    Size  Location     Type
 18235 ;;  divisor         2    6[BANK0 ] int 
 18236 ;;  dividend        2    8[BANK0 ] int 
 18237 ;; Auto vars:     Size  Location     Type
 18238 ;;  quotient        2   13[BANK0 ] int 
 18239 ;;  sign            1   12[BANK0 ] unsigned char 
 18240 ;;  counter         1   11[BANK0 ] unsigned char 
 18241 ;; Return value:  Size  Location     Type
 18242 ;;                  2    6[BANK0 ] int 
 18243 ;; Registers used:
 18244 ;;		wreg, status,2, status,0
 18245 ;; Tracked objects:
 18246 ;;		On entry : 0/0
 18247 ;;		On exit  : 0/0
 18248 ;;		Unchanged: 0/0
 18249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18250 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18251 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18252 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18253 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18254 ;;Total ram usage:        9 bytes
 18255 ;; Hardware stack levels used:    1
 18256 ;; Hardware stack levels required when called:    5
 18257 ;; This function calls:
 18258 ;;		Nothing
 18259 ;; This function is called by:
 18260 ;;		_setBuz
 18261 ;; This function uses a non-reentrant model
 18262 ;;
 18263                           
 18264                           
 18265                           ;psect for function ___awdiv
 18266  14A7                     ___awdiv:	
 18267                           
 18268                           ;incstack = 0
 18269                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18270  14A7  0020               	movlb	0	; select bank0
 18271  14A8  01AC               	clrf	___awdiv@sign
 18272  14A9  1FA7               	btfss	___awdiv@divisor+1,7
 18273  14AA  2CB2               	goto	l10137
 18274  14AB  09A6               	comf	___awdiv@divisor,f
 18275  14AC  09A7               	comf	___awdiv@divisor+1,f
 18276  14AD  0AA6               	incf	___awdiv@divisor,f
 18277  14AE  1903               	skipnz
 18278  14AF  0AA7               	incf	___awdiv@divisor+1,f
 18279  14B0  01AC               	clrf	___awdiv@sign
 18280  14B1  0AAC               	incf	___awdiv@sign,f
 18281  14B2                     l10137:	
 18282  14B2  1FA9               	btfss	___awdiv@dividend+1,7
 18283  14B3  2CBD               	goto	l10143
 18284  14B4  09A8               	comf	___awdiv@dividend,f
 18285  14B5  09A9               	comf	___awdiv@dividend+1,f
 18286  14B6  0AA8               	incf	___awdiv@dividend,f
 18287  14B7  1903               	skipnz
 18288  14B8  0AA9               	incf	___awdiv@dividend+1,f
 18289  14B9  3001               	movlw	1
 18290  14BA  00AA               	movwf	??___awdiv
 18291  14BB  082A               	movf	??___awdiv,w
 18292  14BC  06AC               	xorwf	___awdiv@sign,f
 18293  14BD                     l10143:	
 18294  14BD  01AD               	clrf	___awdiv@quotient
 18295  14BE  01AE               	clrf	___awdiv@quotient+1
 18296  14BF  0827               	movf	___awdiv@divisor+1,w
 18297  14C0  0426               	iorwf	___awdiv@divisor,w
 18298  14C1  1903               	skipnz
 18299  14C2  2CEC               	goto	l10165
 18300  14C3  01AB               	clrf	___awdiv@counter
 18301  14C4  0AAB               	incf	___awdiv@counter,f
 18302  14C5                     l10153:	
 18303  14C5  1BA7               	btfsc	___awdiv@divisor+1,7
 18304  14C6  2CD1               	goto	l10155
 18305  14C7  3001               	movlw	1
 18306  14C8                     u11695:	
 18307  14C8  35A6               	lslf	___awdiv@divisor,f
 18308  14C9  0DA7               	rlf	___awdiv@divisor+1,f
 18309  14CA  0B89               	decfsz	9,f
 18310  14CB  2CC8               	goto	u11695
 18311  14CC  3001               	movlw	1
 18312  14CD  00AA               	movwf	??___awdiv
 18313  14CE  082A               	movf	??___awdiv,w
 18314  14CF  07AB               	addwf	___awdiv@counter,f
 18315  14D0  2CC5               	goto	l10153
 18316  14D1                     l10155:	
 18317  14D1  3001               	movlw	1
 18318  14D2                     u11715:	
 18319  14D2  35AD               	lslf	___awdiv@quotient,f
 18320  14D3  0DAE               	rlf	___awdiv@quotient+1,f
 18321  14D4  0B89               	decfsz	9,f
 18322  14D5  2CD2               	goto	u11715
 18323  14D6  0827               	movf	___awdiv@divisor+1,w
 18324  14D7  0229               	subwf	___awdiv@dividend+1,w
 18325  14D8  1D03               	skipz
 18326  14D9  2CDC               	goto	u11725
 18327  14DA  0826               	movf	___awdiv@divisor,w
 18328  14DB  0228               	subwf	___awdiv@dividend,w
 18329  14DC                     u11725:	
 18330  14DC  1C03               	skipc
 18331  14DD  2CE3               	goto	l10161
 18332  14DE  0826               	movf	___awdiv@divisor,w
 18333  14DF  02A8               	subwf	___awdiv@dividend,f
 18334  14E0  0827               	movf	___awdiv@divisor+1,w
 18335  14E1  3BA9               	subwfb	___awdiv@dividend+1,f
 18336  14E2  142D               	bsf	___awdiv@quotient,0
 18337  14E3                     l10161:	
 18338  14E3  3001               	movlw	1
 18339  14E4                     u11735:	
 18340  14E4  36A7               	lsrf	___awdiv@divisor+1,f
 18341  14E5  0CA6               	rrf	___awdiv@divisor,f
 18342  14E6  0B89               	decfsz	9,f
 18343  14E7  2CE4               	goto	u11735
 18344  14E8  3001               	movlw	1
 18345  14E9  02AB               	subwf	___awdiv@counter,f
 18346  14EA  1D03               	btfss	3,2
 18347  14EB  2CD1               	goto	l10155
 18348  14EC                     l10165:	
 18349  14EC  082C               	movf	___awdiv@sign,w
 18350  14ED  1903               	btfsc	3,2
 18351  14EE  2CF4               	goto	l10169
 18352  14EF  09AD               	comf	___awdiv@quotient,f
 18353  14F0  09AE               	comf	___awdiv@quotient+1,f
 18354  14F1  0AAD               	incf	___awdiv@quotient,f
 18355  14F2  1903               	skipnz
 18356  14F3  0AAE               	incf	___awdiv@quotient+1,f
 18357  14F4                     l10169:	
 18358  14F4  082E               	movf	___awdiv@quotient+1,w
 18359  14F5  01A7               	clrf	?___awdiv+1
 18360  14F6  07A7               	addwf	?___awdiv+1,f
 18361  14F7  082D               	movf	___awdiv@quotient,w
 18362  14F8  01A6               	clrf	?___awdiv
 18363  14F9  07A6               	addwf	?___awdiv,f
 18364  14FA  0008               	return
 18365  14FB                     __end_of___awdiv:	
 18366                           
 18367                           	psect	text129
 18368  1315                     __ptext129:	
 18369 ;; *************** function _setDimmerLights_SwOff *****************
 18370 ;; Defined at:
 18371 ;;		line 694 in file "../src/Dimmer_B1.c"
 18372 ;; Parameters:    Size  Location     Type
 18373 ;;  sw              1    wreg     unsigned char 
 18374 ;; Auto vars:     Size  Location     Type
 18375 ;;  sw              1    8[BANK0 ] unsigned char 
 18376 ;; Return value:  Size  Location     Type
 18377 ;;		None               void
 18378 ;; Registers used:
 18379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18380 ;; Tracked objects:
 18381 ;;		On entry : 0/0
 18382 ;;		On exit  : 0/0
 18383 ;;		Unchanged: 0/0
 18384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18386 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18388 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18389 ;;Total ram usage:        1 bytes
 18390 ;; Hardware stack levels used:    1
 18391 ;; Hardware stack levels required when called:    6
 18392 ;; This function calls:
 18393 ;;		_DimmerLights_SelectPointer
 18394 ;; This function is called by:
 18395 ;;		_DlyOff_Main
 18396 ;;		_Exception_Main
 18397 ;;		_setControl_Lights_Table
 18398 ;;		_setRFSW_Control
 18399 ;;		_setRFSW_AdjControl
 18400 ;;		_setSw_Main
 18401 ;; This function uses a non-reentrant model
 18402 ;;
 18403                           
 18404                           
 18405                           ;psect for function _setDimmerLights_SwOff
 18406  1315                     _setDimmerLights_SwOff:	
 18407                           
 18408                           ;incstack = 0
 18409                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18410                           ;setDimmerLights_SwOff@sw stored from wreg
 18411  1315  0020               	movlb	0	; select bank0
 18412  1316  00A8               	movwf	setDimmerLights_SwOff@sw
 18413                           
 18414                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 18415  1317  0828               	movf	setDimmerLights_SwOff@sw,w
 18416  1318  319C  2439  3193   	fcall	_DimmerLights_SelectPointer
 18417                           
 18418                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 18419  131B  0020               	movlb	0	; select bank0
 18420  131C  0864               	movf	_DimmerLights,w
 18421  131D  0086               	movwf	6
 18422  131E  3001               	movlw	1	; select bank2/3
 18423  131F  0087               	movwf	7
 18424  1320  1C01               	btfss	1,0
 18425  1321  0008               	return
 18426                           
 18427                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 18428  1322  0864               	movf	_DimmerLights,w
 18429  1323  0086               	movwf	6
 18430  1324  3001               	movlw	1	; select bank2/3
 18431  1325  0087               	movwf	7
 18432  1326  1001               	bcf	1,0
 18433                           
 18434                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 18435  1327  0A64               	incf	_DimmerLights,w
 18436  1328  0086               	movwf	6
 18437  1329  3001               	movlw	1	; select bank2/3
 18438  132A  0087               	movwf	7
 18439  132B  1C01               	btfss	1,0
 18440  132C  2B43               	goto	l10513
 18441                           
 18442                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 18443  132D  0864               	movf	_DimmerLights,w
 18444  132E  0086               	movwf	6
 18445  132F  3001               	movlw	1	; select bank2/3
 18446  1330  0087               	movwf	7
 18447  1331  1D81               	btfss	1,3
 18448  1332  0008               	return
 18449                           
 18450                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 18451  1333  0864               	movf	_DimmerLights,w
 18452  1334  0086               	movwf	6
 18453  1335  3001               	movlw	1	; select bank2/3
 18454  1336  0087               	movwf	7
 18455  1337  1181               	bcf	1,3
 18456                           
 18457                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 18458  1338  0864               	movf	_DimmerLights,w
 18459  1339  0086               	movwf	6
 18460  133A  3001               	movlw	1	; select bank2/3
 18461  133B  0087               	movwf	7
 18462  133C  1601               	bsf	1,4
 18463                           
 18464                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 18465  133D  0864               	movf	_DimmerLights,w
 18466  133E  0086               	movwf	6
 18467  133F  3001               	movlw	1	; select bank2/3
 18468  1340  0087               	movwf	7
 18469  1341  1281               	bcf	1,5
 18470                           
 18471                           ;Dimmer_B1.c: 705: }
 18472                           ;Dimmer_B1.c: 706: } else {
 18473  1342  0008               	return
 18474  1343                     l10513:	
 18475                           
 18476                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 18477  1343  0864               	movf	_DimmerLights,w
 18478  1344  0086               	movwf	6
 18479  1345  3001               	movlw	1	; select bank2/3
 18480  1346  0087               	movwf	7
 18481  1347  1481               	bsf	1,1
 18482                           
 18483                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 18484  1348  0864               	movf	_DimmerLights,w
 18485  1349  0086               	movwf	6
 18486  134A  3001               	movlw	1	; select bank2/3
 18487  134B  0087               	movwf	7
 18488  134C  1101               	bcf	1,2
 18489  134D  0008               	return
 18490  134E                     __end_of_setDimmerLights_SwOff:	
 18491                           
 18492                           	psect	text130
 18493  1D14                     __ptext130:	
 18494 ;; *************** function _getDimmerLights_Status *****************
 18495 ;; Defined at:
 18496 ;;		line 1006 in file "../src/Dimmer_B1.c"
 18497 ;; Parameters:    Size  Location     Type
 18498 ;;  lights          1    wreg     unsigned char 
 18499 ;; Auto vars:     Size  Location     Type
 18500 ;;  lights          1    8[BANK0 ] unsigned char 
 18501 ;;  status          1    9[BANK0 ] unsigned char 
 18502 ;; Return value:  Size  Location     Type
 18503 ;;                  1    wreg      unsigned char 
 18504 ;; Registers used:
 18505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18506 ;; Tracked objects:
 18507 ;;		On entry : 0/0
 18508 ;;		On exit  : 0/0
 18509 ;;		Unchanged: 0/0
 18510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18515 ;;Total ram usage:        2 bytes
 18516 ;; Hardware stack levels used:    1
 18517 ;; Hardware stack levels required when called:    6
 18518 ;; This function calls:
 18519 ;;		_DimmerLights_SelectPointer
 18520 ;; This function is called by:
 18521 ;;		_DlyOff_Main
 18522 ;;		_Exception_Main
 18523 ;;		_setControl_Lights_Table
 18524 ;;		_setRFSW_Control
 18525 ;;		_setRFSW_AdjControl
 18526 ;; This function uses a non-reentrant model
 18527 ;;
 18528                           
 18529                           
 18530                           ;psect for function _getDimmerLights_Status
 18531  1D14                     _getDimmerLights_Status:	
 18532                           
 18533                           ;incstack = 0
 18534                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18535                           ;getDimmerLights_Status@lights stored from wreg
 18536  1D14  0020               	movlb	0	; select bank0
 18537  1D15  00A8               	movwf	getDimmerLights_Status@lights
 18538                           
 18539                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 18540  1D16  0828               	movf	getDimmerLights_Status@lights,w
 18541  1D17  319C  2439         	fcall	_DimmerLights_SelectPointer
 18542                           
 18543                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 18544  1D19  0020               	movlb	0	; select bank0
 18545  1D1A  0A64               	incf	_DimmerLights,w
 18546  1D1B  0086               	movwf	6
 18547  1D1C  3001               	movlw	1	; select bank2/3
 18548  1D1D  0087               	movwf	7
 18549  1D1E  3000               	movlw	0
 18550  1D1F  1801               	btfsc	1,0
 18551  1D20  3001               	movlw	1
 18552  1D21  00A9               	movwf	getDimmerLights_Status@status
 18553                           
 18554                           ;Dimmer_B1.c: 1009: return status;
 18555  1D22  0829               	movf	getDimmerLights_Status@status,w
 18556  1D23  0008               	return
 18557  1D24                     __end_of_getDimmerLights_Status:	
 18558                           
 18559                           	psect	text131
 18560  1C39                     __ptext131:	
 18561 ;; *************** function _DimmerLights_SelectPointer *****************
 18562 ;; Defined at:
 18563 ;;		line 576 in file "../src/Dimmer_B1.c"
 18564 ;; Parameters:    Size  Location     Type
 18565 ;;  lights          1    wreg     unsigned char 
 18566 ;; Auto vars:     Size  Location     Type
 18567 ;;  lights          1    7[BANK0 ] unsigned char 
 18568 ;; Return value:  Size  Location     Type
 18569 ;;		None               void
 18570 ;; Registers used:
 18571 ;;		wreg
 18572 ;; Tracked objects:
 18573 ;;		On entry : 0/0
 18574 ;;		On exit  : 0/0
 18575 ;;		Unchanged: 0/0
 18576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18581 ;;Total ram usage:        2 bytes
 18582 ;; Hardware stack levels used:    1
 18583 ;; Hardware stack levels required when called:    5
 18584 ;; This function calls:
 18585 ;;		Nothing
 18586 ;; This function is called by:
 18587 ;;		_setDimmerLights_SwOn
 18588 ;;		_setDimmerLights_SwOff
 18589 ;;		_setDimmerLights_DimmingOn
 18590 ;;		_setDimmerLights_Main
 18591 ;;		_getDimmerLights_Status
 18592 ;;		_setDimmerLights_DimmingRun
 18593 ;;		_setDimmerLights_Status
 18594 ;; This function uses a non-reentrant model
 18595 ;;
 18596                           
 18597                           
 18598                           ;psect for function _DimmerLights_SelectPointer
 18599  1C39                     _DimmerLights_SelectPointer:	
 18600                           
 18601                           ;incstack = 0
 18602                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18603                           ;DimmerLights_SelectPointer@lights stored from wreg
 18604  1C39  0020               	movlb	0	; select bank0
 18605  1C3A  00A7               	movwf	DimmerLights_SelectPointer@lights
 18606                           
 18607                           ;Dimmer_B1.c: 578: if (lights == 1) {
 18608  1C3B  0827               	movf	DimmerLights_SelectPointer@lights,w
 18609  1C3C  3A01               	xorlw	1
 18610  1C3D  1D03               	skipz
 18611  1C3E  0008               	return
 18612                           
 18613                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 18614  1C3F  305D               	movlw	_DimmerLights1& (0+255)
 18615  1C40  00A6               	movwf	??_DimmerLights_SelectPointer
 18616  1C41  0826               	movf	??_DimmerLights_SelectPointer,w
 18617  1C42  00E4               	movwf	_DimmerLights
 18618  1C43  0008               	return
 18619  1C44                     __end_of_DimmerLights_SelectPointer:	
 18620                           
 18621                           	psect	text132
 18622  1B99                     __ptext132:	
 18623 ;; *************** function _DelayOff_Initialization *****************
 18624 ;; Defined at:
 18625 ;;		line 26 in file "../src/DelayOff_B1.c"
 18626 ;; Parameters:    Size  Location     Type
 18627 ;;		None
 18628 ;; Auto vars:     Size  Location     Type
 18629 ;;		None
 18630 ;; Return value:  Size  Location     Type
 18631 ;;		None               void
 18632 ;; Registers used:
 18633 ;;		wreg, status,2, status,0, pclath, cstack
 18634 ;; Tracked objects:
 18635 ;;		On entry : 0/0
 18636 ;;		On exit  : 0/0
 18637 ;;		Unchanged: 0/0
 18638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18643 ;;Total ram usage:        0 bytes
 18644 ;; Hardware stack levels used:    1
 18645 ;; Hardware stack levels required when called:    7
 18646 ;; This function calls:
 18647 ;;		_DlyOff_Initialization
 18648 ;; This function is called by:
 18649 ;;		_main
 18650 ;; This function uses a non-reentrant model
 18651 ;;
 18652                           
 18653                           
 18654                           ;psect for function _DelayOff_Initialization
 18655  1B99                     _DelayOff_Initialization:	
 18656                           
 18657                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18658                           
 18659                           ;incstack = 0
 18660                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18661  1B99  3001               	movlw	1
 18662  1B9A  319B  23C1         	fcall	_DlyOff_Initialization
 18663  1B9C  0008               	return
 18664  1B9D                     __end_of_DelayOff_Initialization:	
 18665                           
 18666                           	psect	text133
 18667  1BC1                     __ptext133:	
 18668 ;; *************** function _DlyOff_Initialization *****************
 18669 ;; Defined at:
 18670 ;;		line 56 in file "../src/DelayOff_B1.c"
 18671 ;; Parameters:    Size  Location     Type
 18672 ;;  sw              1    wreg     unsigned char 
 18673 ;; Auto vars:     Size  Location     Type
 18674 ;;  sw              1    8[BANK0 ] unsigned char 
 18675 ;; Return value:  Size  Location     Type
 18676 ;;		None               void
 18677 ;; Registers used:
 18678 ;;		wreg, status,2, status,0, pclath, cstack
 18679 ;; Tracked objects:
 18680 ;;		On entry : 0/0
 18681 ;;		On exit  : 0/0
 18682 ;;		Unchanged: 0/0
 18683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18687 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18688 ;;Total ram usage:        1 bytes
 18689 ;; Hardware stack levels used:    1
 18690 ;; Hardware stack levels required when called:    6
 18691 ;; This function calls:
 18692 ;;		_DelayOffPointSelect
 18693 ;; This function is called by:
 18694 ;;		_DelayOff_Initialization
 18695 ;; This function uses a non-reentrant model
 18696 ;;
 18697                           
 18698                           
 18699                           ;psect for function _DlyOff_Initialization
 18700  1BC1                     _DlyOff_Initialization:	
 18701                           
 18702                           ;incstack = 0
 18703                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18704                           ;DlyOff_Initialization@sw stored from wreg
 18705  1BC1  0020               	movlb	0	; select bank0
 18706  1BC2  00A8               	movwf	DlyOff_Initialization@sw
 18707                           
 18708                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18709  1BC3  0828               	movf	DlyOff_Initialization@sw,w
 18710  1BC4  319C  242E         	fcall	_DelayOffPointSelect
 18711  1BC6  0008               	return
 18712  1BC7                     __end_of_DlyOff_Initialization:	
 18713                           
 18714                           	psect	text134
 18715  1C2E                     __ptext134:	
 18716 ;; *************** function _DelayOffPointSelect *****************
 18717 ;; Defined at:
 18718 ;;		line 7 in file "../src/DelayOff_B1.c"
 18719 ;; Parameters:    Size  Location     Type
 18720 ;;  sw              1    wreg     unsigned char 
 18721 ;; Auto vars:     Size  Location     Type
 18722 ;;  sw              1    7[BANK0 ] unsigned char 
 18723 ;; Return value:  Size  Location     Type
 18724 ;;		None               void
 18725 ;; Registers used:
 18726 ;;		wreg
 18727 ;; Tracked objects:
 18728 ;;		On entry : 0/0
 18729 ;;		On exit  : 0/0
 18730 ;;		Unchanged: 0/0
 18731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;Total ram usage:        2 bytes
 18737 ;; Hardware stack levels used:    1
 18738 ;; Hardware stack levels required when called:    5
 18739 ;; This function calls:
 18740 ;;		Nothing
 18741 ;; This function is called by:
 18742 ;;		_DlyOff_Initialization
 18743 ;;		_DlyOff_Main
 18744 ;;		_setDelayOff_GO
 18745 ;;		_getDelayOff_GO
 18746 ;; This function uses a non-reentrant model
 18747 ;;
 18748                           
 18749                           
 18750                           ;psect for function _DelayOffPointSelect
 18751  1C2E                     _DelayOffPointSelect:	
 18752                           
 18753                           ;incstack = 0
 18754                           ; Regs used in _DelayOffPointSelect: [wreg]
 18755                           ;DelayOffPointSelect@sw stored from wreg
 18756  1C2E  0020               	movlb	0	; select bank0
 18757  1C2F  00A7               	movwf	DelayOffPointSelect@sw
 18758                           
 18759                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18760  1C30  0827               	movf	DelayOffPointSelect@sw,w
 18761  1C31  3A01               	xorlw	1
 18762  1C32  1D03               	skipz
 18763  1C33  0008               	return
 18764                           
 18765                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18766  1C34  3065               	movlw	_DlySw1& (0+255)
 18767  1C35  00A6               	movwf	??_DelayOffPointSelect
 18768  1C36  0826               	movf	??_DelayOffPointSelect,w
 18769  1C37  00E3               	movwf	_DelayOff
 18770  1C38  0008               	return
 18771  1C39                     __end_of_DelayOffPointSelect:	
 18772                           
 18773                           	psect	text135
 18774  140B                     __ptext135:	
 18775 ;; *************** function _Buzzer_Main *****************
 18776 ;; Defined at:
 18777 ;;		line 46 in file "../src/Buzzer_B1.c"
 18778 ;; Parameters:    Size  Location     Type
 18779 ;;		None
 18780 ;; Auto vars:     Size  Location     Type
 18781 ;;		None
 18782 ;; Return value:  Size  Location     Type
 18783 ;;		None               void
 18784 ;; Registers used:
 18785 ;;		wreg, status,2, status,0
 18786 ;; Tracked objects:
 18787 ;;		On entry : 0/0
 18788 ;;		On exit  : 0/0
 18789 ;;		Unchanged: 0/0
 18790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18795 ;;Total ram usage:        1 bytes
 18796 ;; Hardware stack levels used:    1
 18797 ;; Hardware stack levels required when called:    5
 18798 ;; This function calls:
 18799 ;;		Nothing
 18800 ;; This function is called by:
 18801 ;;		_main
 18802 ;; This function uses a non-reentrant model
 18803 ;;
 18804                           
 18805                           
 18806                           ;psect for function _Buzzer_Main
 18807  140B                     _Buzzer_Main:	
 18808                           
 18809                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18810                           
 18811                           ;incstack = 0
 18812                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18813  140B  0021               	movlb	1	; select bank1
 18814  140C  1CAE               	btfss	_Buz1^(0+128),1
 18815  140D  0008               	return
 18816                           
 18817                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18818  140E  3001               	movlw	1
 18819  140F  07AF               	addwf	(_Buz1^(0+128)+1),f
 18820  1410  3000               	movlw	0
 18821  1411  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18822                           
 18823                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18824  1412  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18825  1413  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18826  1414  1D03               	skipz
 18827  1415  2C18               	goto	u7415
 18828  1416  0834               	movf	(_Buz1^(0+128)+6),w
 18829  1417  022F               	subwf	(_Buz1^(0+128)+1),w
 18830  1418                     u7415:	
 18831  1418  1C03               	skipc
 18832  1419  0008               	return
 18833                           
 18834                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18835  141A  01AF               	clrf	(_Buz1^(0+128)+1)
 18836  141B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18837                           
 18838                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18839  141C  12AE               	bcf	_Buz1^(0+128),5
 18840  141D  0020               	movlb	0	; select bank0
 18841  141E  1D8D               	btfss	13,3	;volatile
 18842  141F  2C22               	goto	l7531
 18843  1420  0021               	movlb	1	; select bank1
 18844  1421  16AE               	bsf	_Buz1^(0+128),5
 18845  1422                     l7531:	
 18846                           
 18847                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18848  1422  0021               	movlb	1	; select bank1
 18849  1423  1AAE               	btfsc	_Buz1^(0+128),5
 18850  1424  2C4E               	goto	l96
 18851                           
 18852                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18853  1425  08B1               	movf	(_Buz1^(0+128)+3),f
 18854  1426  1D03               	skipz
 18855  1427  2C4A               	goto	l97
 18856                           
 18857                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18858  1428  1DAE               	btfss	_Buz1^(0+128),3
 18859  1429  2C38               	goto	l98
 18860                           
 18861                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18862  142A  11AE               	bcf	_Buz1^(0+128),3
 18863                           
 18864                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18865  142B  0832               	movf	(_Buz1^(0+128)+4),w
 18866  142C  0020               	movlb	0	; select bank0
 18867  142D  00A6               	movwf	??_Buzzer_Main
 18868  142E  0826               	movf	??_Buzzer_Main,w
 18869  142F  0021               	movlb	1	; select bank1
 18870  1430  00B1               	movwf	(_Buz1^(0+128)+3)
 18871                           
 18872                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18873  1431  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18874  1432  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18875  1433  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18876  1434  0836               	movf	(_Buz1^(0+128)+8),w
 18877  1435  01B4               	clrf	(_Buz1^(0+128)+6)
 18878  1436  07B4               	addwf	(_Buz1^(0+128)+6),f
 18879                           
 18880                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18881  1437  0008               	return
 18882  1438                     l98:	
 18883  1438  1E2E               	btfss	_Buz1^(0+128),4
 18884  1439  2C48               	goto	l100
 18885                           
 18886                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18887  143A  122E               	bcf	_Buz1^(0+128),4
 18888                           
 18889                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18890  143B  0833               	movf	(_Buz1^(0+128)+5),w
 18891  143C  0020               	movlb	0	; select bank0
 18892  143D  00A6               	movwf	??_Buzzer_Main
 18893  143E  0826               	movf	??_Buzzer_Main,w
 18894  143F  0021               	movlb	1	; select bank1
 18895  1440  00B1               	movwf	(_Buz1^(0+128)+3)
 18896                           
 18897                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18898  1441  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18899  1442  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18900  1443  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18901  1444  0838               	movf	(_Buz1^(0+128)+10),w
 18902  1445  01B4               	clrf	(_Buz1^(0+128)+6)
 18903  1446  07B4               	addwf	(_Buz1^(0+128)+6),f
 18904                           
 18905                           ;Buzzer_B1.c: 62: } else {
 18906  1447  0008               	return
 18907  1448                     l100:	
 18908                           
 18909                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18910  1448  10AE               	bcf	_Buz1^(0+128),1
 18911                           
 18912                           ;Buzzer_B1.c: 64: }
 18913                           ;Buzzer_B1.c: 65: } else {
 18914  1449  0008               	return
 18915  144A                     l97:	
 18916                           
 18917                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18918  144A  16AE               	bsf	_Buz1^(0+128),5
 18919                           
 18920                           ;Buzzer_B1.c: 68: RB3 = 1;
 18921  144B  0020               	movlb	0	; select bank0
 18922  144C  158D               	bsf	13,3	;volatile
 18923                           
 18924                           ;Buzzer_B1.c: 69: }
 18925                           ;Buzzer_B1.c: 70: } else {
 18926  144D  0008               	return
 18927  144E                     l96:	
 18928                           
 18929                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18930  144E  12AE               	bcf	_Buz1^(0+128),5
 18931                           
 18932                           ;Buzzer_B1.c: 73: RB3 = 0;
 18933  144F  0020               	movlb	0	; select bank0
 18934  1450  118D               	bcf	13,3	;volatile
 18935                           
 18936                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18937  1451  3001               	movlw	1
 18938  1452  0021               	movlb	1	; select bank1
 18939  1453  02B1               	subwf	(_Buz1^(0+128)+3),f
 18940  1454  0008               	return
 18941  1455                     __end_of_Buzzer_Main:	
 18942                           
 18943                           	psect	text136
 18944  1B87                     __ptext136:	
 18945 ;; *************** function _Buzzer_Initialization *****************
 18946 ;; Defined at:
 18947 ;;		line 11 in file "../src/Buzzer_B1.c"
 18948 ;; Parameters:    Size  Location     Type
 18949 ;;		None
 18950 ;; Auto vars:     Size  Location     Type
 18951 ;;		None
 18952 ;; Return value:  Size  Location     Type
 18953 ;;		None               void
 18954 ;; Registers used:
 18955 ;;		None
 18956 ;; Tracked objects:
 18957 ;;		On entry : 0/0
 18958 ;;		On exit  : 0/0
 18959 ;;		Unchanged: 0/0
 18960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18965 ;;Total ram usage:        0 bytes
 18966 ;; Hardware stack levels used:    1
 18967 ;; Hardware stack levels required when called:    5
 18968 ;; This function calls:
 18969 ;;		Nothing
 18970 ;; This function is called by:
 18971 ;;		_main
 18972 ;; This function uses a non-reentrant model
 18973 ;;
 18974                           
 18975                           
 18976                           ;psect for function _Buzzer_Initialization
 18977  1B87                     _Buzzer_Initialization:	
 18978                           
 18979                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18980                           
 18981                           ;incstack = 0
 18982                           ; Regs used in _Buzzer_Initialization: []
 18983  1B87  0021               	movlb	1	; select bank1
 18984  1B88  142E               	bsf	_Buz1^(0+128),0
 18985  1B89  0008               	return
 18986  1B8A                     __end_of_Buzzer_Initialization:	
 18987                           
 18988                           	psect	intentry
 18989  0004                     __pintentry:	
 18990 ;; *************** function _ISR *****************
 18991 ;; Defined at:
 18992 ;;		line 116 in file "../src/MCU_B1.c"
 18993 ;; Parameters:    Size  Location     Type
 18994 ;;		None
 18995 ;; Auto vars:     Size  Location     Type
 18996 ;;		None
 18997 ;; Return value:  Size  Location     Type
 18998 ;;		None               void
 18999 ;; Registers used:
 19000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19001 ;; Tracked objects:
 19002 ;;		On entry : 0/0
 19003 ;;		On exit  : 0/0
 19004 ;;		Unchanged: 0/0
 19005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19009 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19010 ;;Total ram usage:        1 bytes
 19011 ;; Hardware stack levels used:    1
 19012 ;; Hardware stack levels required when called:    4
 19013 ;; This function calls:
 19014 ;;		_IOC_ISR
 19015 ;;		_TMR1_ISR
 19016 ;; This function is called by:
 19017 ;;		Interrupt level 1
 19018 ;; This function uses a non-reentrant model
 19019 ;;
 19020                           
 19021  0004                     _ISR:	
 19022                           
 19023                           ;incstack = 0
 19024                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19025  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19026  0005  3180               	pagesel	$
 19027  0006  0020               	movlb	0	; select bank0
 19028  0007  087F               	movf	127,w
 19029  0008  00FC               	movwf	??_ISR
 19030                           
 19031                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19032  0009  0021               	movlb	1	; select bank1
 19033  000A  1C11               	btfss	17,0	;volatile
 19034  000B  2813               	goto	i1l1192
 19035  000C  0020               	movlb	0	; select bank0
 19036  000D  1C11               	btfss	17,0	;volatile
 19037  000E  2813               	goto	i1l1192
 19038                           
 19039                           ;MCU_B1.c: 126: TMR1_ISR();
 19040  000F  3190  2023  3180   	fcall	_TMR1_ISR
 19041                           
 19042                           ;MCU_B1.c: 127: }
 19043  0012  281B               	goto	i1l1195
 19044  0013                     i1l1192:	
 19045                           
 19046                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19047  0013  198B               	btfsc	11,3	;volatile
 19048  0014  1C0B               	btfss	11,0	;volatile
 19049  0015  281B               	goto	i1l1195
 19050  0016  0027               	movlb	7	; select bank7
 19051  0017  1D16               	btfss	22,2	;volatile
 19052  0018  281B               	goto	i1l1195
 19053                           
 19054                           ;MCU_B1.c: 139: IOC_ISR();
 19055  0019  319C  2409         	fcall	_IOC_ISR
 19056  001B                     i1l1195:	
 19057                           ;MCU_B1.c: 140: }
 19058                           ;MCU_B1.c: 148: return;
 19059                           
 19060  001B  087C               	movf	??_ISR,w
 19061  001C  0020               	movlb	0	; select bank0
 19062  001D  00FF               	movwf	127
 19063  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19064  001F  0009               	retfie
 19065  0020                     __end_of_ISR:	
 19066                           
 19067                           	psect	text138
 19068  1023                     __ptext138:	
 19069 ;; *************** function _TMR1_ISR *****************
 19070 ;; Defined at:
 19071 ;;		line 236 in file "../src/MCU_B1.c"
 19072 ;; Parameters:    Size  Location     Type
 19073 ;;		None
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;		None
 19076 ;; Return value:  Size  Location     Type
 19077 ;;		None               void
 19078 ;; Registers used:
 19079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19089 ;;Total ram usage:        0 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:    3
 19092 ;; This function calls:
 19093 ;;		_DimmerLights_TMR_1
 19094 ;; This function is called by:
 19095 ;;		_ISR
 19096 ;; This function uses a non-reentrant model
 19097 ;;
 19098                           
 19099                           
 19100                           ;psect for function _TMR1_ISR
 19101  1023                     _TMR1_ISR:	
 19102                           
 19103                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19104                           
 19105                           ;incstack = 0
 19106                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19107  1023  30FA               	movlw	250
 19108  1024  0020               	movlb	0	; select bank0
 19109  1025  0097               	movwf	23	;volatile
 19110                           
 19111                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19112  1026  3038               	movlw	56
 19113  1027  0096               	movwf	22	;volatile
 19114                           
 19115                           ;MCU_B1.c: 240: TMR1IF = 0;
 19116  1028  1011               	bcf	17,0	;volatile
 19117                           
 19118                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19119  1029  318D  25E4  3190   	fcall	_DimmerLights_TMR_1
 19120                           
 19121                           ;MCU_B1.c: 271: Timer1.Count++;
 19122  102C  3001               	movlw	1
 19123  102D  0022               	movlb	2	; select bank2
 19124  102E  07B3               	addwf	(_Timer1^(0+256)+1),f
 19125  102F  3000               	movlw	0
 19126  1030  3DB4               	addwfc	((_Timer1+1)^(0+256)+1),f
 19127                           
 19128                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19129  1031  3001               	movlw	1
 19130  1032  3E32               	addlw	_Timer1& (0+255)
 19131  1033  0086               	movwf	6
 19132  1034  3001               	movlw	1	; select bank2/3
 19133  1035  0087               	movwf	7
 19134  1036  3F40               	moviw [0]fsr1
 19135  1037  3AC8               	xorlw	200
 19136  1038  1D03               	skipz
 19137  1039  283C               	goto	u751_25
 19138  103A  3F41               	moviw [1]fsr1
 19139  103B  3A00               	xorlw	0
 19140  103C                     u751_25:	
 19141  103C  1D03               	skipz
 19142  103D  0008               	return
 19143                           
 19144                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19145  103E  01B3               	clrf	(_Timer1^(0+256)+1)
 19146  103F  01B4               	clrf	((_Timer1+1)^(0+256)+1)
 19147                           
 19148                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19149  1040  1432               	bsf	_Timer1^(0+256),0
 19150  1041  0008               	return
 19151  1042                     __end_of_TMR1_ISR:	
 19152                           
 19153                           	psect	text139
 19154  0DE4                     __ptext139:	
 19155 ;; *************** function _DimmerLights_TMR_1 *****************
 19156 ;; Defined at:
 19157 ;;		line 1313 in file "../src/Dimmer_B1.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;		None
 19160 ;; Auto vars:     Size  Location     Type
 19161 ;;  TuneValue3      1    5[BANK0 ] unsigned char 
 19162 ;;  TuneValue2      1    4[BANK0 ] unsigned char 
 19163 ;;  TuneValue1      1    3[BANK0 ] unsigned char 
 19164 ;;  dimming         1    2[BANK0 ] unsigned char 
 19165 ;;  count           1    1[BANK0 ] unsigned char 
 19166 ;;  TuneValue4      1    0[BANK0 ] unsigned char 
 19167 ;; Return value:  Size  Location     Type
 19168 ;;		None               void
 19169 ;; Registers used:
 19170 ;;		wreg, status,2, status,0, pclath, cstack
 19171 ;; Tracked objects:
 19172 ;;		On entry : 0/0
 19173 ;;		On exit  : 0/0
 19174 ;;		Unchanged: 0/0
 19175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19177 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19178 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19179 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19180 ;;Total ram usage:        8 bytes
 19181 ;; Hardware stack levels used:    1
 19182 ;; Hardware stack levels required when called:    2
 19183 ;; This function calls:
 19184 ;;		_Division
 19185 ;; This function is called by:
 19186 ;;		_TMR1_ISR
 19187 ;; This function uses a non-reentrant model
 19188 ;;
 19189                           
 19190                           
 19191                           ;psect for function _DimmerLights_TMR_1
 19192  0DE4                     _DimmerLights_TMR_1:	
 19193                           
 19194                           ;Dimmer_B1.c: 1314: char count = 75;
 19195                           
 19196                           ;incstack = 0
 19197                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0+pclath+cstack]
 19198  0DE4  304B               	movlw	75
 19199  0DE5  00FA               	movwf	??_DimmerLights_TMR_1
 19200  0DE6  087A               	movf	??_DimmerLights_TMR_1,w
 19201  0DE7  0020               	movlb	0	; select bank0
 19202  0DE8  00A1               	movwf	DimmerLights_TMR_1@count
 19203                           
 19204                           ;Dimmer_B1.c: 1319: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 19205  0DE9  3002               	movlw	2
 19206  0DEA  00FA               	movwf	??_DimmerLights_TMR_1
 19207  0DEB  087A               	movf	??_DimmerLights_TMR_1,w
 19208  0DEC  00F5               	movwf	Division@num
 19209  0DED  0021               	movlb	1	; select bank1
 19210  0DEE  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19211  0DEF  319C  24CD  318D   	fcall	_Division
 19212  0DF2  00FB               	movwf	??_DimmerLights_TMR_1+1
 19213  0DF3  087B               	movf	??_DimmerLights_TMR_1+1,w
 19214  0DF4  0020               	movlb	0	; select bank0
 19215  0DF5  00A2               	movwf	DimmerLights_TMR_1@dimming
 19216                           
 19217                           ;Dimmer_B1.c: 1320: char TuneValue1 = 5;
 19218  0DF6  3005               	movlw	5
 19219  0DF7  00FA               	movwf	??_DimmerLights_TMR_1
 19220  0DF8  087A               	movf	??_DimmerLights_TMR_1,w
 19221  0DF9  00A3               	movwf	DimmerLights_TMR_1@TuneValue1
 19222                           
 19223                           ;Dimmer_B1.c: 1321: char TuneValue2 = TuneValue1 + dimming;
 19224  0DFA  0823               	movf	DimmerLights_TMR_1@TuneValue1,w
 19225  0DFB  0722               	addwf	DimmerLights_TMR_1@dimming,w
 19226  0DFC  00FA               	movwf	??_DimmerLights_TMR_1
 19227  0DFD  087A               	movf	??_DimmerLights_TMR_1,w
 19228  0DFE  00A4               	movwf	DimmerLights_TMR_1@TuneValue2
 19229                           
 19230                           ;Dimmer_B1.c: 1322: char TuneValue3 = TuneValue2 + ((count - 10) - DimmerIntr1.DimmingVa
      +                          lue);
 19231  0DFF  0021               	movlb	1	; select bank1
 19232  0E00  033F               	decf	(_DimmerIntr1^(0+128)+5),w
 19233  0E01  3AFF               	xorlw	255
 19234  0E02  0020               	movlb	0	; select bank0
 19235  0E03  0721               	addwf	DimmerLights_TMR_1@count,w
 19236  0E04  0724               	addwf	DimmerLights_TMR_1@TuneValue2,w
 19237  0E05  3EF6               	addlw	246
 19238  0E06  00FA               	movwf	??_DimmerLights_TMR_1
 19239  0E07  087A               	movf	??_DimmerLights_TMR_1,w
 19240  0E08  00A5               	movwf	DimmerLights_TMR_1@TuneValue3
 19241                           
 19242                           ;Dimmer_B1.c: 1323: char TuneValue4 = TuneValue3 + dimming;
 19243  0E09  0825               	movf	DimmerLights_TMR_1@TuneValue3,w
 19244  0E0A  0722               	addwf	DimmerLights_TMR_1@dimming,w
 19245  0E0B  00FA               	movwf	??_DimmerLights_TMR_1
 19246  0E0C  087A               	movf	??_DimmerLights_TMR_1,w
 19247  0E0D  00A0               	movwf	DimmerLights_TMR_1@TuneValue4
 19248                           
 19249                           ;Dimmer_B1.c: 1327: if (DimmerIntr1.Start == 1) {
 19250  0E0E  0021               	movlb	1	; select bank1
 19251  0E0F  1D3A               	btfss	_DimmerIntr1^(0+128),2
 19252  0E10  2E1D               	goto	i1l7063
 19253                           
 19254                           ;Dimmer_B1.c: 1328: DimmerIntr1.Count++;
 19255  0E11  3001               	movlw	1
 19256  0E12  00FA               	movwf	??_DimmerLights_TMR_1
 19257  0E13  087A               	movf	??_DimmerLights_TMR_1,w
 19258  0E14  07BC               	addwf	(_DimmerIntr1^(0+128)+2),f
 19259                           
 19260                           ;Dimmer_B1.c: 1329: if (DimmerIntr1.Count >= count) {
 19261  0E15  0020               	movlb	0	; select bank0
 19262  0E16  0821               	movf	DimmerLights_TMR_1@count,w
 19263  0E17  0021               	movlb	1	; select bank1
 19264  0E18  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19265  0E19  1C03               	skipc
 19266  0E1A  2E1D               	goto	i1l7063
 19267                           
 19268                           ;Dimmer_B1.c: 1330: DimmerIntr1.Count = 0;
 19269  0E1B  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19270                           
 19271                           ;Dimmer_B1.c: 1331: DimmerIntr1.Start = 0;
 19272  0E1C  113A               	bcf	_DimmerIntr1^(0+128),2
 19273  0E1D                     i1l7063:	
 19274                           
 19275                           ;Dimmer_B1.c: 1332: }
 19276                           ;Dimmer_B1.c: 1333: }
 19277                           ;Dimmer_B1.c: 1336: if (DimmerIntr1.Trigger1 == 1) {
 19278  0E1D  1C3B               	btfss	(_DimmerIntr1^(0+128)+1),0
 19279  0E1E  2E2B               	goto	i1l833
 19280                           
 19281                           ;Dimmer_B1.c: 1337: if (DimmerIntr1.Count >= TuneValue1) {
 19282  0E1F  0020               	movlb	0	; select bank0
 19283  0E20  0823               	movf	DimmerLights_TMR_1@TuneValue1,w
 19284  0E21  0021               	movlb	1	; select bank1
 19285  0E22  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19286  0E23  1C03               	skipc
 19287  0E24  2E2B               	goto	i1l833
 19288                           
 19289                           ;Dimmer_B1.c: 1338: DimmerIntr1.Trigger1 = 0;
 19290  0E25  103B               	bcf	(_DimmerIntr1^(0+128)+1),0
 19291                           
 19292                           ;Dimmer_B1.c: 1339: DimmerIntr1.Trigger2 = 1;
 19293  0E26  14BB               	bsf	(_DimmerIntr1^(0+128)+1),1
 19294                           
 19295                           ;Dimmer_B1.c: 1341: if (DimmerIntr1.ControlStatus == 1) {
 19296  0E27  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19297  0E28  2E2B               	goto	i1l833
 19298                           
 19299                           ;Dimmer_B1.c: 1342: RB1 = 1;
 19300  0E29  0020               	movlb	0	; select bank0
 19301  0E2A  148D               	bsf	13,1	;volatile
 19302  0E2B                     i1l833:	
 19303                           
 19304                           ;Dimmer_B1.c: 1344: }
 19305                           ;Dimmer_B1.c: 1345: }
 19306                           ;Dimmer_B1.c: 1346: }
 19307                           ;Dimmer_B1.c: 1348: if (DimmerIntr1.Trigger2 == 1) {
 19308  0E2B  0021               	movlb	1	; select bank1
 19309  0E2C  1CBB               	btfss	(_DimmerIntr1^(0+128)+1),1
 19310  0E2D  2E3A               	goto	i1l836
 19311                           
 19312                           ;Dimmer_B1.c: 1349: if (DimmerIntr1.Count >= TuneValue2) {
 19313  0E2E  0020               	movlb	0	; select bank0
 19314  0E2F  0824               	movf	DimmerLights_TMR_1@TuneValue2,w
 19315  0E30  0021               	movlb	1	; select bank1
 19316  0E31  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19317  0E32  1C03               	skipc
 19318  0E33  2E3A               	goto	i1l836
 19319                           
 19320                           ;Dimmer_B1.c: 1350: DimmerIntr1.Trigger2 = 0;
 19321  0E34  10BB               	bcf	(_DimmerIntr1^(0+128)+1),1
 19322                           
 19323                           ;Dimmer_B1.c: 1351: DimmerIntr1.Trigger3 = 1;
 19324  0E35  153B               	bsf	(_DimmerIntr1^(0+128)+1),2
 19325                           
 19326                           ;Dimmer_B1.c: 1352: if (DimmerIntr1.ControlStatus == 1) {
 19327  0E36  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19328  0E37  2E3A               	goto	i1l836
 19329                           
 19330                           ;Dimmer_B1.c: 1353: RB1 = 0;
 19331  0E38  0020               	movlb	0	; select bank0
 19332  0E39  108D               	bcf	13,1	;volatile
 19333  0E3A                     i1l836:	
 19334                           
 19335                           ;Dimmer_B1.c: 1355: }
 19336                           ;Dimmer_B1.c: 1356: }
 19337                           ;Dimmer_B1.c: 1357: }
 19338                           ;Dimmer_B1.c: 1359: if (DimmerIntr1.Trigger3 == 1) {
 19339  0E3A  0021               	movlb	1	; select bank1
 19340  0E3B  1D3B               	btfss	(_DimmerIntr1^(0+128)+1),2
 19341  0E3C  2E49               	goto	i1l839
 19342                           
 19343                           ;Dimmer_B1.c: 1360: if (DimmerIntr1.Count >= TuneValue3) {
 19344  0E3D  0020               	movlb	0	; select bank0
 19345  0E3E  0825               	movf	DimmerLights_TMR_1@TuneValue3,w
 19346  0E3F  0021               	movlb	1	; select bank1
 19347  0E40  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19348  0E41  1C03               	skipc
 19349  0E42  2E49               	goto	i1l839
 19350                           
 19351                           ;Dimmer_B1.c: 1361: DimmerIntr1.Trigger3 = 0;
 19352  0E43  113B               	bcf	(_DimmerIntr1^(0+128)+1),2
 19353                           
 19354                           ;Dimmer_B1.c: 1362: DimmerIntr1.Trigger4 = 1;
 19355  0E44  15BB               	bsf	(_DimmerIntr1^(0+128)+1),3
 19356                           
 19357                           ;Dimmer_B1.c: 1363: if (DimmerIntr1.ControlStatus == 1) {
 19358  0E45  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19359  0E46  2E49               	goto	i1l839
 19360                           
 19361                           ;Dimmer_B1.c: 1364: RB1 = 1;
 19362  0E47  0020               	movlb	0	; select bank0
 19363  0E48  148D               	bsf	13,1	;volatile
 19364  0E49                     i1l839:	
 19365                           
 19366                           ;Dimmer_B1.c: 1366: }
 19367                           ;Dimmer_B1.c: 1367: }
 19368                           ;Dimmer_B1.c: 1368: }
 19369                           ;Dimmer_B1.c: 1383: if (DimmerIntr1.Trigger4 == 1) {
 19370  0E49  0021               	movlb	1	; select bank1
 19371  0E4A  1DBB               	btfss	(_DimmerIntr1^(0+128)+1),3
 19372  0E4B  2E58               	goto	i1l842
 19373                           
 19374                           ;Dimmer_B1.c: 1384: if (DimmerIntr1.Count >= TuneValue4) {
 19375  0E4C  0020               	movlb	0	; select bank0
 19376  0E4D  0820               	movf	DimmerLights_TMR_1@TuneValue4,w
 19377  0E4E  0021               	movlb	1	; select bank1
 19378  0E4F  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19379  0E50  1C03               	skipc
 19380  0E51  2E58               	goto	i1l842
 19381                           
 19382                           ;Dimmer_B1.c: 1385: DimmerIntr1.Trigger4 = 0;
 19383  0E52  11BB               	bcf	(_DimmerIntr1^(0+128)+1),3
 19384                           
 19385                           ;Dimmer_B1.c: 1386: DimmerIntr1.Tune = 1;
 19386  0E53  14BA               	bsf	_DimmerIntr1^(0+128),1
 19387                           
 19388                           ;Dimmer_B1.c: 1387: if (DimmerIntr1.ControlStatus == 1) {
 19389  0E54  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19390  0E55  2E58               	goto	i1l842
 19391                           
 19392                           ;Dimmer_B1.c: 1388: RB1 = 0;
 19393  0E56  0020               	movlb	0	; select bank0
 19394  0E57  108D               	bcf	13,1	;volatile
 19395  0E58                     i1l842:	
 19396                           
 19397                           ;Dimmer_B1.c: 1390: }
 19398                           ;Dimmer_B1.c: 1391: }
 19399                           ;Dimmer_B1.c: 1392: }
 19400                           ;Dimmer_B1.c: 1394: if (DimmerIntr1.Tune == 1) {
 19401  0E58  0021               	movlb	1	; select bank1
 19402  0E59  1CBA               	btfss	_DimmerIntr1^(0+128),1
 19403  0E5A  0008               	return
 19404                           
 19405                           ;Dimmer_B1.c: 1395: DimmerIntr1.Tune = 0;
 19406  0E5B  10BA               	bcf	_DimmerIntr1^(0+128),1
 19407                           
 19408                           ;Dimmer_B1.c: 1396: DimmerIntr1.TuneTime++;
 19409  0E5C  3001               	movlw	1
 19410  0E5D  00FA               	movwf	??_DimmerLights_TMR_1
 19411  0E5E  087A               	movf	??_DimmerLights_TMR_1,w
 19412  0E5F  07BD               	addwf	(_DimmerIntr1^(0+128)+3),f
 19413                           
 19414                           ;Dimmer_B1.c: 1397: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19415  0E60  083E               	movf	(_DimmerIntr1^(0+128)+4),w
 19416  0E61  023D               	subwf	(_DimmerIntr1^(0+128)+3),w
 19417  0E62  1C03               	skipc
 19418  0E63  0008               	return
 19419                           
 19420                           ;Dimmer_B1.c: 1398: DimmerIntr1.TuneTime = 0;
 19421  0E64  01BD               	clrf	(_DimmerIntr1^(0+128)+3)
 19422                           
 19423                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Dimming_Sw == 1) {
 19424  0E65  1E3A               	btfss	_DimmerIntr1^(0+128),4
 19425  0E66  2E7D               	goto	i1l847
 19426                           
 19427                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.Dimming_Status == 0) {
 19428  0E67  1ABA               	btfsc	_DimmerIntr1^(0+128),5
 19429  0E68  2E74               	goto	i1l7105
 19430                           
 19431                           ;Dimmer_B1.c: 1401: if (DimmerIntr1.DimmingValue < ((char)(65*0.75))) {
 19432  0E69  3030               	movlw	48
 19433  0E6A  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19434  0E6B  1803               	skipnc
 19435  0E6C  2E72               	goto	i1l849
 19436                           
 19437                           ;Dimmer_B1.c: 1402: DimmerIntr1.DimmingValue++;
 19438  0E6D  3001               	movlw	1
 19439  0E6E  00FA               	movwf	??_DimmerLights_TMR_1
 19440  0E6F  087A               	movf	??_DimmerLights_TMR_1,w
 19441  0E70  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19442                           
 19443                           ;Dimmer_B1.c: 1403: } else {
 19444  0E71  0008               	return
 19445  0E72                     i1l849:	
 19446                           
 19447                           ;Dimmer_B1.c: 1404: DimmerIntr1.Dimming_Status = 1;
 19448  0E72  16BA               	bsf	_DimmerIntr1^(0+128),5
 19449                           
 19450                           ;Dimmer_B1.c: 1405: }
 19451                           ;Dimmer_B1.c: 1406: } else {
 19452  0E73  0008               	return
 19453  0E74                     i1l7105:	
 19454                           
 19455                           ;Dimmer_B1.c: 1407: if (DimmerIntr1.DimmingValue > ((char)(20*0.75))) {
 19456  0E74  3010               	movlw	16
 19457  0E75  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19458  0E76  1C03               	skipc
 19459  0E77  2E7B               	goto	i1l852
 19460                           
 19461                           ;Dimmer_B1.c: 1408: DimmerIntr1.DimmingValue--;
 19462  0E78  3001               	movlw	1
 19463  0E79  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19464                           
 19465                           ;Dimmer_B1.c: 1409: } else {
 19466  0E7A  0008               	return
 19467  0E7B                     i1l852:	
 19468                           
 19469                           ;Dimmer_B1.c: 1410: DimmerIntr1.Dimming_Status = 0;
 19470  0E7B  12BA               	bcf	_DimmerIntr1^(0+128),5
 19471                           
 19472                           ;Dimmer_B1.c: 1411: }
 19473                           ;Dimmer_B1.c: 1412: }
 19474                           ;Dimmer_B1.c: 1413: } else if (DimmerIntr1.Dimming_RF == 1) {
 19475  0E7C  0008               	return
 19476  0E7D                     i1l847:	
 19477  0E7D  1F3A               	btfss	_DimmerIntr1^(0+128),6
 19478  0E7E  0008               	return
 19479                           
 19480                           ;Dimmer_B1.c: 1414: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19481  0E7F  0840               	movf	(_DimmerIntr1^(0+128)+6),w
 19482  0E80  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19483  0E81  1803               	skipnc
 19484  0E82  2E88               	goto	i1l7113
 19485                           
 19486                           ;Dimmer_B1.c: 1415: DimmerIntr1.DimmingValue++;
 19487  0E83  3001               	movlw	1
 19488  0E84  00FA               	movwf	??_DimmerLights_TMR_1
 19489  0E85  087A               	movf	??_DimmerLights_TMR_1,w
 19490  0E86  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19491                           
 19492                           ;Dimmer_B1.c: 1416: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19493  0E87  0008               	return
 19494  0E88                     i1l7113:	
 19495  0E88  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19496  0E89  0240               	subwf	(_DimmerIntr1^(0+128)+6),w
 19497  0E8A  1803               	skipnc
 19498  0E8B  2E8F               	goto	i1l858
 19499                           
 19500                           ;Dimmer_B1.c: 1417: DimmerIntr1.DimmingValue--;
 19501  0E8C  3001               	movlw	1
 19502  0E8D  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19503                           
 19504                           ;Dimmer_B1.c: 1418: } else {
 19505  0E8E  0008               	return
 19506  0E8F                     i1l858:	
 19507                           
 19508                           ;Dimmer_B1.c: 1419: DimmerIntr1.Dimming_RF = 0;
 19509  0E8F  133A               	bcf	_DimmerIntr1^(0+128),6
 19510  0E90  0008               	return
 19511  0E91                     __end_of_DimmerLights_TMR_1:	
 19512                           
 19513                           	psect	text140
 19514  1CCD                     __ptext140:	
 19515 ;; *************** function _Division *****************
 19516 ;; Defined at:
 19517 ;;		line 1308 in file "../src/Dimmer_B1.c"
 19518 ;; Parameters:    Size  Location     Type
 19519 ;;  value           1    wreg     unsigned char 
 19520 ;;  num             1    5[COMMON] unsigned char 
 19521 ;; Auto vars:     Size  Location     Type
 19522 ;;  value           1    8[COMMON] unsigned char 
 19523 ;;  result          1    9[COMMON] unsigned char 
 19524 ;; Return value:  Size  Location     Type
 19525 ;;                  1    wreg      unsigned char 
 19526 ;; Registers used:
 19527 ;;		wreg, status,2, status,0, pclath, cstack
 19528 ;; Tracked objects:
 19529 ;;		On entry : 0/0
 19530 ;;		On exit  : 0/0
 19531 ;;		Unchanged: 0/0
 19532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19533 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19534 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19536 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19537 ;;Total ram usage:        5 bytes
 19538 ;; Hardware stack levels used:    1
 19539 ;; Hardware stack levels required when called:    1
 19540 ;; This function calls:
 19541 ;;		___lbdiv
 19542 ;; This function is called by:
 19543 ;;		_DimmerLights_TMR_1
 19544 ;; This function uses a non-reentrant model
 19545 ;;
 19546                           
 19547                           
 19548                           ;psect for function _Division
 19549  1CCD                     _Division:	
 19550                           
 19551                           ;incstack = 0
 19552                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19553                           ;Division@value stored from wreg
 19554  1CCD  00F8               	movwf	Division@value
 19555                           
 19556                           ;Dimmer_B1.c: 1309: char result = (char) (value / num);
 19557  1CCE  0875               	movf	Division@num,w
 19558  1CCF  00F6               	movwf	??_Division
 19559  1CD0  0876               	movf	??_Division,w
 19560  1CD1  00F0               	movwf	___lbdiv@divisor
 19561  1CD2  0878               	movf	Division@value,w
 19562  1CD3  3190  2081         	fcall	___lbdiv
 19563  1CD5  00F7               	movwf	??_Division+1
 19564  1CD6  0877               	movf	??_Division+1,w
 19565  1CD7  00F9               	movwf	Division@result
 19566                           
 19567                           ;Dimmer_B1.c: 1310: return result;
 19568  1CD8  0879               	movf	Division@result,w
 19569  1CD9  0008               	return
 19570  1CDA                     __end_of_Division:	
 19571                           
 19572                           	psect	text141
 19573  1081                     __ptext141:	
 19574 ;; *************** function ___lbdiv *****************
 19575 ;; Defined at:
 19576 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19577 ;; Parameters:    Size  Location     Type
 19578 ;;  dividend        1    wreg     unsigned char 
 19579 ;;  divisor         1    0[COMMON] unsigned char 
 19580 ;; Auto vars:     Size  Location     Type
 19581 ;;  dividend        1    2[COMMON] unsigned char 
 19582 ;;  quotient        1    4[COMMON] unsigned char 
 19583 ;;  counter         1    3[COMMON] unsigned char 
 19584 ;; Return value:  Size  Location     Type
 19585 ;;                  1    wreg      unsigned char 
 19586 ;; Registers used:
 19587 ;;		wreg, status,2, status,0
 19588 ;; Tracked objects:
 19589 ;;		On entry : 0/0
 19590 ;;		On exit  : 0/0
 19591 ;;		Unchanged: 0/0
 19592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19593 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19594 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19595 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19596 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19597 ;;Total ram usage:        5 bytes
 19598 ;; Hardware stack levels used:    1
 19599 ;; This function calls:
 19600 ;;		Nothing
 19601 ;; This function is called by:
 19602 ;;		_Division
 19603 ;; This function uses a non-reentrant model
 19604 ;;
 19605                           
 19606                           
 19607                           ;psect for function ___lbdiv
 19608  1081                     ___lbdiv:	
 19609                           
 19610                           ;incstack = 0
 19611                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19612                           ;___lbdiv@dividend stored from wreg
 19613  1081  00F2               	movwf	___lbdiv@dividend
 19614  1082  01F4               	clrf	___lbdiv@quotient
 19615  1083  0870               	movf	___lbdiv@divisor,w
 19616  1084  1903               	btfsc	3,2
 19617  1085  28A0               	goto	i1l6539
 19618  1086  01F3               	clrf	___lbdiv@counter
 19619  1087  0AF3               	incf	___lbdiv@counter,f
 19620  1088                     i1l6527:	
 19621  1088  1BF0               	btfsc	___lbdiv@divisor,7
 19622  1089  2891               	goto	i1l6529
 19623  108A  1003               	clrc
 19624  108B  0DF0               	rlf	___lbdiv@divisor,f
 19625  108C  3001               	movlw	1
 19626  108D  00F1               	movwf	??___lbdiv
 19627  108E  0871               	movf	??___lbdiv,w
 19628  108F  07F3               	addwf	___lbdiv@counter,f
 19629  1090  2888               	goto	i1l6527
 19630  1091                     i1l6529:	
 19631  1091  1003               	clrc
 19632  1092  0DF4               	rlf	___lbdiv@quotient,f
 19633  1093  0870               	movf	___lbdiv@divisor,w
 19634  1094  0272               	subwf	___lbdiv@dividend,w
 19635  1095  1C03               	skipc
 19636  1096  289B               	goto	L9
 19637  1097  0870               	movf	___lbdiv@divisor,w
 19638  1098  02F2               	subwf	___lbdiv@dividend,f
 19639  1099  1474               	bsf	___lbdiv@quotient,0
 19640  109A  1003               	clrc
 19641  109B                     L9:	
 19642  109B  0CF0               	rrf	___lbdiv@divisor,f
 19643  109C  3001               	movlw	1
 19644  109D  02F3               	subwf	___lbdiv@counter,f
 19645  109E  1D03               	btfss	3,2
 19646  109F  2891               	goto	i1l6529
 19647  10A0                     i1l6539:	
 19648  10A0  0874               	movf	___lbdiv@quotient,w
 19649  10A1  0008               	return
 19650  10A2                     __end_of___lbdiv:	
 19651                           
 19652                           	psect	text142
 19653  1C09                     __ptext142:	
 19654 ;; *************** function _IOC_ISR *****************
 19655 ;; Defined at:
 19656 ;;		line 394 in file "../src/MCU_B1.c"
 19657 ;; Parameters:    Size  Location     Type
 19658 ;;		None
 19659 ;; Auto vars:     Size  Location     Type
 19660 ;;		None
 19661 ;; Return value:  Size  Location     Type
 19662 ;;		None               void
 19663 ;; Registers used:
 19664 ;;		status,2, status,0, pclath, cstack
 19665 ;; Tracked objects:
 19666 ;;		On entry : 0/0
 19667 ;;		On exit  : 0/0
 19668 ;;		Unchanged: 0/0
 19669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19674 ;;Total ram usage:        0 bytes
 19675 ;; Hardware stack levels used:    1
 19676 ;; Hardware stack levels required when called:    1
 19677 ;; This function calls:
 19678 ;;		_DimmerLights_IOC_1
 19679 ;; This function is called by:
 19680 ;;		_ISR
 19681 ;; This function uses a non-reentrant model
 19682 ;;
 19683                           
 19684                           
 19685                           ;psect for function _IOC_ISR
 19686  1C09                     _IOC_ISR:	
 19687                           
 19688                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19689                           
 19690                           ;incstack = 0
 19691                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19692  1C09  0027               	movlb	7	; select bank7
 19693  1C0A  1116               	bcf	22,2	;volatile
 19694                           
 19695                           ;MCU_B1.c: 396: IOCIF = 0;
 19696  1C0B  100B               	bcf	11,0	;volatile
 19697                           
 19698                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19699  1C0C  0022               	movlb	2	; select bank2
 19700  1C0D  1C20               	btfss	_myMain^(0+256),0
 19701  1C0E  0008               	return
 19702                           
 19703                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19704  1C0F  319C  2400         	fcall	_DimmerLights_IOC_1
 19705  1C11  0008               	return
 19706  1C12                     __end_of_IOC_ISR:	
 19707                           
 19708                           	psect	text143
 19709  1C00                     __ptext143:	
 19710 ;; *************** function _DimmerLights_IOC_1 *****************
 19711 ;; Defined at:
 19712 ;;		line 1426 in file "../src/Dimmer_B1.c"
 19713 ;; Parameters:    Size  Location     Type
 19714 ;;		None
 19715 ;; Auto vars:     Size  Location     Type
 19716 ;;		None
 19717 ;; Return value:  Size  Location     Type
 19718 ;;		None               void
 19719 ;; Registers used:
 19720 ;;		status,2
 19721 ;; Tracked objects:
 19722 ;;		On entry : 0/0
 19723 ;;		On exit  : 0/0
 19724 ;;		Unchanged: 0/0
 19725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19730 ;;Total ram usage:        0 bytes
 19731 ;; Hardware stack levels used:    1
 19732 ;; This function calls:
 19733 ;;		Nothing
 19734 ;; This function is called by:
 19735 ;;		_IOC_ISR
 19736 ;; This function uses a non-reentrant model
 19737 ;;
 19738                           
 19739                           
 19740                           ;psect for function _DimmerLights_IOC_1
 19741  1C00                     _DimmerLights_IOC_1:	
 19742                           
 19743                           ;Dimmer_B1.c: 1441: if (DimmerIntr1.Start == 0) {
 19744                           
 19745                           ;incstack = 0
 19746                           ; Regs used in _DimmerLights_IOC_1: [status,2]
 19747  1C00  0021               	movlb	1	; select bank1
 19748  1C01  193A               	btfsc	_DimmerIntr1^(0+128),2
 19749  1C02  0008               	return
 19750                           
 19751                           ;Dimmer_B1.c: 1442: DimmerIntr1.Start = 1;
 19752  1C03  153A               	bsf	_DimmerIntr1^(0+128),2
 19753                           
 19754                           ;Dimmer_B1.c: 1443: DimmerIntr1.Count = 0;
 19755  1C04  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19756                           
 19757                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.ControlStatus == 1) {
 19758  1C05  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19759  1C06  0008               	return
 19760                           
 19761                           ;Dimmer_B1.c: 1446: DimmerIntr1.Trigger1 = 1;
 19762  1C07  143B               	bsf	(_DimmerIntr1^(0+128)+1),0
 19763  1C08  0008               	return
 19764  1C09                     __end_of_DimmerLights_IOC_1:	
 19765  007E                     btemp	set	126	;btemp
 19766  007E                     pic14e$flags	set	126
 19767  007E                     wtemp	set	126
 19768  007E                     wtemp0	set	126
 19769  0080                     wtemp1	set	128
 19770  0082                     wtemp2	set	130
 19771  0084                     wtemp3	set	132
 19772  0086                     wtemp4	set	134
 19773  0088                     wtemp5	set	136
 19774  007F                     wtemp6	set	127
 19775  007E                     ttemp	set	126
 19776  007E                     ttemp0	set	126
 19777  0081                     ttemp1	set	129
 19778  0084                     ttemp2	set	132
 19779  0087                     ttemp3	set	135
 19780  007F                     ttemp4	set	127
 19781  007E                     ltemp	set	126
 19782  007E                     ltemp0	set	126
 19783  0082                     ltemp1	set	130
 19784  0086                     ltemp2	set	134
 19785  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         219
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     67      74
    BANK1            80     20      80
    BANK2            80      2      80
    BANK3            80      1      77
    BANK4            80      4      36
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _DimmerLights_TMR_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _main->_Flash_Memory_Initialization
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setProductData
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_OnOff->_setDimmerIntr_MaxmumValue
    _setDimmerLights_OnOff->_setProductData
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setDimmerIntr_MaxmumValue
    _setDimmerLights_Dimming->_setProductData
    _setRF_DimmerLights->_setProductData
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setProductData
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    _TMR1_ISR->_DimmerLights_TMR_1

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  206414
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    2261
                                             19 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                             10 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                             10 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              6 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              6 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6822
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    6822
                                              8 BANK1      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    5460
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5460
                                             21 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      84
                                              8 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1077
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1077
                                             10 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   64484
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   64484
                                              1 BANK2      1     1      0
                                              0 BANK3      1     1      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   58198
                                             19 BANK1      1     1      0
                                              0 BANK2      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    6180
                                              8 BANK1      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      42
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   51634
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   15093
                                             16 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   29717
                                              8 BANK1      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      42
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     247
                                              8 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0     108
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      48
                                              6 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     330
                                             10 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     660
                                             10 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     234
                                              8 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      96
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    3306
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     772
                                             12 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     698
                                             11 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     608
                                             11 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     422
                                              8 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     814
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     676
                                              6 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0     138
                                              8 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      96
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2990
                                             14 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              6 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1552
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              8 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1108
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1108
                                             10 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1496
                                             12 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                             10 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   18429
                                             66 BANK0      1     1      0
                                              6 BANK1      1     1      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              6 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              6 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    4632
                                             19 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   86288
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   85864
                                              0 BANK2      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   56251
                                             16 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1015
                                              8 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     326
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     168
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     274
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    5455
                                              8 BANK1      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     434
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     326
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      54
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   21616
                                              0 BANK1      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4766
                                             20 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     132
                                              8 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      68
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   29115
                                             13 BANK1      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    4504
                                              8 BANK1      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     568
                                             66 BANK0      1     1      0
                                              6 BANK1      2     1      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     274
                                              6 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   16850
                                              0 BANK1      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     764
                                             52 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     332
                                             36 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    5154
                                             20 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    6206
                                             39 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    4256
                                             14 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3828
                                              6 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              6 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              7 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     336
                                              6 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    6696
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    6696
                                              8 BANK1      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3835
                                             66 BANK0      1     1      0
                                              6 BANK1      2     1      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    2393
                                             19 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2261
                                             15 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     872
                                              6 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      84
                                              8 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     132
                                              8 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      42
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      84
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      84
                                              8 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      42
                                              6 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     655
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0     655
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  8     8      0     655
                                             10 COMMON     2     2      0
                                              0 BANK0      6     6      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
   _TMR1_ISR
     _DimmerLights_TMR_1
       _Division
         ___lbdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     43      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     14      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      2      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      1      4D      11       96.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      24      13       45.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     169      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     169      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Jan 23 13:33:10 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1F62  
                          ___bmul@product 0028                 getMain_Lights_Count@count 0026  
                                      l86 1581                                        l96 144E  
                                      l88 1595                                        l97 144A  
                                      l98 1438                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10C3                                        _WR 0CA9  
                            ___awdiv@sign 002C                                        _Sw 0067  
                          setTemp_Main@AD 00EA                       ___wmul@multiplicand 0028  
                    _getDimmerLights_Line 1C4F                    __end_of_setDelayOff_GO 0C93  
                            ___ftadd@exp1 0053                              ___ftadd@exp2 0052  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1793  
                    _setDimmerLights_Line 1D44                              ___ftadd@sign 0051  
                                     l100 1448                                       l303 1E4A  
                                     l304 1E4B                                       l235 1702  
                    _setDimmerLights_SwOn 11A5                                       l531 08AB  
                                     l347 112D                                       l259 1787  
                                     l750 1FDE                                       l681 1D03  
                                     l774 0799                                       _GIE 005F  
                                     _CRC 00C7                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RA4 0064                                       _LED 0065  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C5                                       _Cmd 00C8  
            getDimmerLights_Status@lights 0028                                       _Sw1 01E3  
              ??_setDimmerIntr_Dimming_RF 0027                ??_setDimmerIntr_Dimming_Sw 0027  
         setDimmerIntr_Dimming_RF@command 0026                  __end_of_CC2500_WriteByte 1E54  
                   _Buzzer_Initialization 1B87                           __end_of_ADC_Set 1BE1  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0029       __end_of_setDimmerIntr_ControlStatus 1F18  
             _setDimmerIntr_ControlStatus 1F00                         ??_getSw_KeyStatus 0026  
                                    ?_ISR 0070                              ___ftdiv@cntr 003E  
                         __end_of_IOC_ISR 1C12                     _setDimmerLights_OnOff 0711  
        setDimmerLights_DimmingRun@lights 002A                                Load_Main@i 0036  
                            ___ftdiv@sign 0043                                      l2101 0639  
                                    l1230 12D8                                      l2105 0588  
                                    l2106 05D9                                      l2131 1D0A  
                                    l1244 119E                                      l1253 149F  
                                    l1430 1389                                      l2161 126E  
                                    l1610 0085                                      l2146 0A07  
                                    l1611 0080                                      l1453 11EE  
                                    l1454 1209                                      l2174 0922  
                                    l1607 01FD                                      l1617 01D9  
                                    l1609 0089                                      l1458 1205  
                                    l1618 01D7                                      l1485 0710  
                         __end_of_IOC_Set 1C70                                      l1494 1F61  
                                    l2481 0246                                      l2459 1E99  
                                    l1780 0D2D                                      l2479 0368  
                                    l1775 0CB0                                      l2825 16AD  
                                    l1769 0D35                                      l2658 100E  
                                    l2819 1696                            _Load_Main$3870 0031  
                                    l2848 050D                                      l7025 1C57  
                                    l7203 10D7                     _setDimmerLights_SwOff 1315  
                                    l7413 1E9E                                      l7511 1008  
                                    l7417 1EA4                                      l7531 1422  
                                    l9221 1186                                      l7197 10CE  
                                    l7701 0942                                      l7199 10D1  
                                    l6921 1D93                                      l7713 0969  
                                    l9403 145C                                      l7709 0961  
                                    l9409 1471                                      l7729 0990  
                                    l7745 13FB                     _myMain_Initialization 1E2D  
                                    l6987 1E05                                      _CFGS 0CAE  
                            __CFG_WDTE$ON 0000                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u6035 1EE3  
                                    _PEIE 005E                                      u7415 1418  
                                    u7375 100F                                      u7385 1014  
                                    u7705 0980                                      u7655 0951  
                                    u7755 13EF                                      _LWLO 0CAD  
                                    _RSSI 00CB                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1F94  
              _setDimmerLights_DimmingRun 1F7B                                      _Buz1 00AE  
                                    _Load 0135                                      _Temp 00D1  
                                    _main 15A9                              ___ftpack@arg 0026  
                     __end_of_DlyOff_Main 08B2                           __end_of_RF_Main 1B93  
                            ___ftpack@exp 0029                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1C7B                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0B7E                         ___bmul@multiplier 0029  
                            ___ftmul@cntr 0042                              ___ftmul@sign 0043  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2198 0029  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 007C  
                            ___fttol@exp1 0061                              ___fttol@lval 005D  
       setDimmerLights_DimmingRun@command 0028   __end_of_getDimmerLights_Allow_Condition 1EBD  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0027  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1EA7  
                  _getDimmerLights_Status 1D14                        ??_getDimmer_LoadGO 0026  
                        __end_of_LED_Main 1BA9                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00C9                                     l10111 1682  
                                   l10103 166C                                     l10107 1673  
                                   l11003 0913                                     l10117 169B  
                                   l10109 167D                                     l10213 1DAE  
                                   l11021 16DC                                     l10143 14BD  
                                   l10119 16A3                                     l11015 16D3  
                                   l10161 14E3                                     l10153 14C5  
                                   l10137 14B2                                     l10217 1DB4  
                                   l11041 170B                                     l11017 16D6  
                                   l10155 14D1                                     l10235 10EF  
                                   l10307 054C                                     l10251 049D  
                                   l10323 0D68                                     l11035 16EC  
                                   l10165 14EC                                     l10501 11D0  
                                   l11133 1EB6                                     l10317 0D52  
                                   l11053 171E                                     l11045 1711  
                                   l11221 1D82                                     l10247 0496  
                                   l11071 173C                                     l11047 1715  
                                   l11039 1708                                     l10513 1343  
                                   l10169 14F4                                     l10281 04EC  
                                   l10257 04AC                                     l10345 0DC2  
                                   l10337 0DA9                                     l10417 0B97  
                                   l11161 0779                                     l11073 173F  
                                   l11049 1718                                     l11241 09AB  
                                   l12033 15D8                                     l10275 04D9  
                                   l10451 0BFC                                     l10443 0BE2  
                                   l10435 0BC7                                     l10293 051F  
                                   l10277 04E3                                     l10269 04C6  
                                   l10445 0BEB                                     l10437 0BD5  
                                   l10381 0F01                                     l10365 0EBE  
                                   l11157 0762                                     l11093 1756  
                                   l11077 1745                                     l11253 09C5  
                                   l12029 15CD                                     l10287 04FF  
                                   l10279 04E8                                     l10447 0BEE  
                                   l10359 0EA8                                     l10711 1F4C  
                                   l10535 0C43                                     l11175 07A8  
                                   l11351 17F3                                     l11095 176E  
                                   l11503 061A                                     l10297 0531  
                                   l10289 0509                                     l10393 0F1D  
                                   l10377 0EF9                                     l10545 0C75  
                                   l11337 17BC                                     l10801 0827  
                                   l11257 09CE                                     l11441 0D1C  
                                   l11195 1516                                     l10715 1F5B  
                                   l11339 17C3                                     l10643 1F6A  
                                   l10811 0837                                     l11427 0D06  
                                   l10581 164E                                     l10389 0F15  
                                   l10549 0C89                                     l11189 07D3  
                                   l11349 17EC                                     l10645 1F6D  
                                   l10805 082D                                     l11269 09E3  
                                   l11517 0632                                     l11429 0D08  
                                   l10903 11E9                                     l11295 1305  
                                   l11287 12E7                                     l10815 083D  
                                   l11439 0D1B                                     l11391 0CB2  
                   ?_setDimmerLights_Main 0070                                     l10913 1200  
                                   l10905 11F2                                     l11289 12F3  
                                   l10649 1F73                                     l10681 113E  
                                   l10809 0834                                     l10753 0B19  
                                   l10737 13BE                                     l11553 0273  
                                   l11537 0230                                     l10499 11CB  
                                   l11627 1FE0                                     l11299 130E  
                                   l10683 1149                                     l10691 10AD  
                                   l10667 1EF6                                     l10771 110F  
                                   l10763 0B68                                     l11475 05D4  
                                   l11563 02A5                                     l10933 1281  
                                   l10669 1EFA                                     l10773 1112  
                                   l10749 0B14                                     l11397 0CC1  
                                   l11655 03F7                                     l11831 0170  
                                   l10695 10B3                                     l11399 0CC4  
                                   l11727 1368                                     l10961 1D9D  
                                   l11921 065D                                     l11825 0161  
                                   l10689 10AA                                     l10777 1118  
                                   l11489 05E8                                     l11577 02E3  
                                   l10947 129E                                     l10939 128A  
                                   l11931 067C                                     l11835 018D  
                                   l11587 0315                                     l10965 1DA4  
                                   l11941 067F                                     l11845 01A9  
                                   l10967 1DA9                                     l11943 06AB  
                                   l11927 066D                                     l11855 01BF  
                                   l11839 0199                                     l11759 0067  
                                   l10799 0824                                     l10991 08C8  
                                   l11961 06EC                                     l11793 00AC  
                                   l11777 0088                                     l10993 08CF  
                                   l10985 08B3                                     l11963 06F6  
                                   l11939 06A3                                     l11891 01EC  
                                   l10995 08EA                                     l11957 06E4  
                                   l10997 090B                                     l11959 06C0  
                                   l11799 00DE                                     l10999 090F  
                   ?_setDimmerLights_Line 0070                                     l11969 0706  
                         ?_setDelayOff_GO 00E3                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0240                           __end_of___awdiv 14FB  
                         __end_of___lbdiv 10A2                           __end_of___ftadd 0564  
                         __end_of___ftdiv 0DE4                           __end_of___ftneg 1C1B  
                                   u12005 04ED                           __end_of___ftmul 0F45  
                                   u12105 0D7A                                     u12035 0500  
                                   u12115 0D8A                           ___awdiv@divisor 0026  
                                   u12125 0DAA                                     u12135 0DB9  
                                   u12215 0F02                                     _T1CON 0018  
                                   u12145 0DC3                                     u12305 0B9E  
                                   u12225 0F08                           __end_of___fttol 0C05  
                                   u11615 169E                                     u12335 0BC8  
                                   u12255 0F1E                                     u12265 0F24  
                                   u12185 0ECA                                     u14025 0609  
                                   u11715 14D2                                     u12195 0EDA  
                                   u11725 14DC                                     u11645 16B4  
                                   u12365 0BE3                                     u12525 0C4F  
                                   u11735 14E4                                     u11575 1678  
                                   u12560 160E                                     u11595 1691  
                                   u12395 1E77                                     u12565 160C  
                                   u14325 12CF                                     u13605 12F4  
                                   u11695 14C8                                     u13615 12FE  
                                   u11945 04C7                                     u13625 1306  
                                   u12665 1133                                     u14515 00AA  
                                   u14525 00DC                                     _IOCBF 0396  
                                   u11975 04DA                                     u14615 01A0  
                                   u14535 0120                                     u14375 1381  
                                   u13585 12EA                                     u13905 0D0E  
                                   u14750 06A9                                     _IOCBN 0395  
                                   _IOCBP 0394                                     u14755 0688  
                                   _IOCIE 005B                                     u14780 06EA  
                                   _IOCIF 0058                                     u13885 0CF0  
                                   u14785 06C9                                     u13995 05AC  
                         __end_of___lwdiv 1315                                     i1l833 0E2B  
                                   i1l842 0E58                                     i1l852 0E7B  
                                   i1l836 0E3A                                     i1l847 0E7D  
                                   i1l839 0E49                                     i1l849 0E72  
                                   i1l858 0E8F                           ___awdiv@counter 002B  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0027  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1EE9  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 0A83  
 __size_of_getDimmerLights_ValueToPercent 007A            _getDimmerLights_ValueToPercent 0A09  
                                   _Light 00CA                          __end_of_TMR1_ISR 1042  
                 __size_of_setProductData 000F              __size_of_CC2500_WriteCommand 0019  
                        __end_of_TMR1_Set 1CC1                                     _getAD 10C3  
                           ___awtoft@sign 0033                             ___ftpack@sign 002A  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0026  
                        __end_of_WDT_Main 1DE1               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 002B                            __pbitbssCOMMON 03E8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1C65  
                      Flash_Memory_Read@i 0027                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0011             __end_of_setLED_Initialization 1D66  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 1604                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 00E4               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0026               ??_setDimmerLights_DimmingOn 0028  
                      ??_CC2500_SIDLEMode 002A                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1CDA                   __size_of_getDelayOff_GO 0010  
                            __end_of_main 1604                       ?_setRF_DimmerLights 00E3  
                        __end_of_Fosc_Set 1BAD            getMain_All_LightsStatus@status 0026  
                      ??_setMemory_Modify 0026              setDimmerLights_OnOff@command 00EB  
                          _Exception_Main 063F                          ?_CC2500_WriteREG 0028  
                               ??_ADC_Set 0026                      _setSw_Initialization 1D34  
                                  ??_main 0063                             ___fttol@sign1 005C  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0026  
            ??_DimmerLights_SelectPointer 0026                   _setControl_Lights_Table 08B2  
                          _setMemory_Data 1C9D                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0028                                _Receive_OK 0348  
      setDimmerIntr_ControlStatus@command 0026                   _setDimmerLights_Dimming 14FB  
                               ??_IOC_ISR 0070                                 ??_IOC_Set 0026  
                             _DimmerIntr1 00BA                  _getMain_All_LightsStatus 1C24  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1E68  
                 ??_Switch_Initialization 002B                    ?_setDimmerLights_OnOff 00EB  
                    ??_setRF_DimmerLights 00E4                                    ?_getAD 0026  
                       ??_getRF_KeyStatus 0026                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0843                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0063                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0028  
                   _getDimmer_Load_Status 1BF8                                 ??_WDT_Set 0026  
                        __end_of___awtoft 1106                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 16C4                  _getMain_All_Error_Status 11D8  
                                  _IOCBF2 1CB2                                    i1l1192 0013  
                                  i1l1195 001B                                    i1l7113 0E88  
                                  i1l7105 0E74                                    i1l7063 0E1D  
                                  i1l6527 1088                                    i1l6529 1091  
                                  i1l6539 10A0                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0028                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B0                                    u751_25 103C  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1FAE                                    _WDTCON 0097  
                    Exception_Main@i_3517 0038                        DelayTime_1us@count 0026  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0062  
           __end_of_CC2500_PowerOnInitial 1E92                                    _Dimmer 012D  
                                  _DlySw1 0165             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1DAB                __end_of_Mcu_Initialization 1DCF  
                     __end_of_Buzzer_Main 1455                                    _Memory 01BE  
                                  _Timer1 0132                                    ___bmul 1DAB  
                  __end_of_Exception_Main 0711                      Exception_Main@lights 003A  
                                  ___wmul 1005                                 ??___awdiv 002A  
                               ??___lbdiv 0071                                 ??___ftadd 004D  
            __size_of_DelayOffPointSelect 000B                                 ??___ftdiv 003A  
                               ??___ftneg 0047                                 ??___ftmul 003A  
                               ??___fttol 0058              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0026                                 ??___lwdiv 002A  
                  ??_setDimmerLights_Main 0063                    ??_setDimmerLights_Line 0026  
                                  _r_data 00CF                      Exception_Main@status 0034  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E07  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0026          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1DF4                                    _s_data 00D0  
                  ??_setDimmerLights_SwOn 0033                                    _setLED 1272  
                                  _myMain 0120                      ??_RF_Timeout_Counter 0026  
                  __end_of_setMemory_Data 1CA9                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 002D                                    _setBuz 1550  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 0035  
             __end_of_Load_Initialization 1B8D          ??_setDimmerLights_Initialization 0026  
         ?_setDimmerLights_Initialization 0070          __end_of_setDimmerIntr_Dimming_RF 1F30  
                 DimmerLights_TMR_1@count 0021          __end_of_setDimmerIntr_Dimming_Sw 1ED3  
                   ___ftmul@f3_as_product 003F                 _setDimmerLights_DimmingOn 114E  
                Flash_Memory_Read@address 0028                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1E2D               getMain_Lights_Count@status1 0027  
             __size_of_DimmerLights_IOC_1 0009                     __end_of_SwPointSelect 1C91  
             __size_of_DimmerLights_TMR_1 00AD              __size_of_Flash_Memory_Modify 0052  
                 __size_of_LedPointSelect 000B           setDimmerIntr_Dimming_Sw@command 0026  
                      setTemp_Main@TempGO 00E5                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0027              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E92               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 002B          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004D           getDimmerIntr_DimmingValue@value 0028  
         setDimmerIntr_DimmingValue@value 0026                                 ?_LED_Main 0070  
                              ___ftadd@f1 0047                                ___ftadd@f2 004A  
                    _getRF_KeyStatus$5240 0028                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0037                                ___ftdiv@f2 0034  
                              ___ftdiv@f3 0040                                ___ftneg@f1 0044  
                              ___awtoft@c 002E                       ___bmul@multiplicand 0026  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0034  
                              ___ftmul@f2 0037                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0054                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1061  
                           __end_of_getAD 10E4                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0027  
               setMemory_LoopSave@command 0027                        _LED_Initialization 1BA1  
                         _getSw_KeyStatus 1D88                 ??_setControl_Lights_Table 0063  
                      getRF_KeyStatus@key 0027                           ?_setMemory_Data 0026  
         ?_getDimmerLights_PercentToValue 0070          ??_getDimmerLights_PercentToValue 00DB  
               ??_setDimmerLights_Dimming 00E9             ??_Flash_Memory_Initialization 0062  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1C5A  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0201  
       setDimmerIntr_ControlStatus@lights 0028                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1CDA                __end_of_set_TimeoutCleared 1005  
         setDimmerIntr_MaxmumValue@lights 00E2                        __size_of_getRxData 0074  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1CE7                      __size_of_setLED_Main 0033  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0029  
                     _Temp_Initialization 1B93                        ??_CC2500_WriteByte 0026  
                               ?_Division 0075                                __pbssBANK0 0063  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 140B                         ??_setRFSW_Control 00EB  
             ?_setDimmerLights_DimmingRun 0028                         __end_of_Temp_Main 1B99  
                                 ?_IO_Set 0070                            ??_my_MainTimer 0033  
                              ??_LED_Main 002B                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B99                             ??_Switch_Main 0038  
                          DelayTime_1us@i 0028                            DelayTime_1us@j 002A  
                    ??_LED_Initialization 002B                              _DimmerLights 0064  
                       LedPointSelect@led 0027     getAll_DimmerIntr_Dimming_Sw_RF@status 0026  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 0032                   ?_getDimmerLights_Status 0070  
                              __pmaintext 15A9                            _getDelayOff_GO 1D24  
                     _CC2500_WriteCommand 1F62                      ?_Temp_Initialization 0070  
                                 ?___bmul 0026                          ??_setDelayOff_GO 00E5  
       __end_of_DimmerIntr_Initialization 1F49             ??_DimmerLights_Initialization 0027  
                                 ?___wmul 0026                                ??_TMR1_ISR 007C  
                           ?_setTemp_Main 0070                                _getLoad_AD 0923  
                              ??_TMR1_Set 0026                                __pintentry 0004  
                  ??_setSw_Initialization 002A                                _getLoad_OK 1BE8  
                      __size_of_setTxData 00BB                                   ?_setLED 0028  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1BDA                                   ?_setBuz 002F  
                               ?___awtoft 002E                                 ?___ftpack 0026  
                              _getTemp_AD 13CB        __end_of_DimmerLights_SelectPointer 1C44  
              _DimmerLights_SelectPointer 1C39                                ??_WDT_Main 0026  
            __end_of_setRF_Initialization 1C86                        _setRFSW_AdjControl 0AFD  
                  __end_of_setProductData 1CF6             setDimmerLights_Dimming@lights 00EA  
                                 _IOC_ISR 1C09                                   _IOC_Set 1C65  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 00E8  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 12A8                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1F94                    __size_of_CC2500_RxData 0069  
                  __size_of_CC2500_TxData 0066                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1B90  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0076                                   _WDT_Set 1C70  
         __end_of_setControl_Lights_Table 0923                           setRF_Main@error 01EC  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0026  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1550  
                 ??_setLoad_AH_AL_Restore 0026                       getCmd_Status@number 0026  
            __end_of_CC2500_FrequencyCabr 1CCD                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0028         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1D77  
               ?_setDimmerIntr_Dimming_RF 0026                       ??_Flash_Memory_Main 002C  
               ?_setDimmerIntr_Dimming_Sw 0026                       ??_Flash_Memory_Read 0026  
                  __end_of_getDelayOff_GO 1D34            __end_of_getDimmerLights_Status 1D24  
                       __end_of_getRxData 0A09                   __end_of_getSw_KeyStatus 1D99  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0026  
                    ??_setRFSW_AdjControl 00E3                            ??_setTemp_Main 00E3  
                         __size_of___bmul 0012                       setProductData@value 00E1  
                                 ___awdiv 14A7                                   ___lbdiv 1081  
                                 ___ftadd 046E                                   ___ftdiv 0D3B  
                                 ___ftneg 1C12                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0B7E  
                     __end_of_Switch_Main 1BE8                                   ___lwdiv 12DE  
              ??_getMain_All_LightsStatus 0026                   ??_Buzzer_Initialization 0026  
                         _getRF_KeyStatus 1D77                                ??___awtoft 0031  
                              ??___ftpack 002B                           __size_of_setLED 0036  
                    setRFSW_AdjControl@sw 00E6                           __size_of_setBuz 0059  
                                 __ptext1 134E                                   __ptext2 1E2D  
                                 __ptext3 13CB                                   __ptext4 0923  
                                 __ptext5 10C3                                   __ptext6 1DCF  
                                 __ptext7 0002                                   __ptext8 1B96  
                                 __ptext9 0C93                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001C                ??_getMain_All_Error_Status 0026  
                 ??_setDimmerLights_OnOff 00EC                           ?_setProductData 00E1  
               __end_of_Flash_Memory_Main 12DE                 __end_of_Flash_Memory_Read 1FAE  
                 ??_setDimmerLights_SwOff 0028                                _setRF_Main 0564  
                 ??_myMain_Initialization 0026                             _DelayOff_Main 1B9D  
                       _DimmerLights_Main 1FC8            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0028                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1BC7                __end_of_CC2500_ClearRXFIFO 1BB5  
                ??_setTemp_Initialization 0026                __end_of_CC2500_ClearTXFIFO 1BB9  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EF                            _LedPointSelect 1C44  
                         getTemp_AD@ADRES 002C                       _DelayOffPointSelect 1C2E  
                                 clrloop0 1BCE            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1BC1                      end_of_initialization 004D  
               ??_DelayOff_Initialization 0029                         _CC2500_InitSetREG 07D6  
                           _DelayTime_1us 1128                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 11A5        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1BC7                __end_of_setRF_TransceiveGO 1DF4  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0063  
                    Flash_Memory_Read@ret 0029                                   initloop 1BC8  
                              _setSw_Main 0201                     CC2500_ReadByte@loop_b 0027  
                  setDimmerLights_SwOn@sw 0033                         _CC2500_ReadStatus 1106  
                    Flash_Memory_Modify@i 002B                     _setLED_Initialization 1D55  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 002A  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 0017  
                           _CC2500_RxData 172A                             _CC2500_TxData 16C4  
                     ??_CC2500_InitSetREG 002B             __size_of_Flash_Memory_Erasing 000C  
               DimmerLights_TMR_1@dimming 0022                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 1455                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0026  
                            __pstringtext 1800                             _setCmd_Status 1F49  
                     _Flash_Memory_Unlock 1C1B                       ??_CC2500_ReadStatus 0028  
                 CC2500_InitSetREG@loop_c 002E                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 002A  
                 setTemp_Main@DangerValue 00E8                    setSw_Initialization@sw 002A  
               __end_of_DimmerLights_Main 1FE4                        _Mcu_Initialization 1DBD  
                __size_of_CC2500_PowerRST 0043              __end_of_setRF_TimeoutCleared 1BB1  
                    __end_of_my_MainTimer 138B                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1C4F  
                __size_of_CC2500_WriteREG 0021                  Load_Main@ErrorCountValue 0033  
        setDimmerIntr_DimmingValue@lights 0028          getDimmerIntr_DimmingValue@lights 0027  
               __end_of_CC2500_InitSetREG 0800                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 005F  
                          ?_DelayTime_1us 0026                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000D                 __end_of_CC2500_ReadStatus 1128  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0028  
         getMain_All_Error_Status@command 002B                               ___ftdiv@exp 003F  
       __end_of_setDimmerLights_DimmingOn 1176                          ??_Exception_Main 0033  
                          __end_of_IO_Set 1FC8                      _setRF_Initialization 1C7B  
                      _setMemory_LoopSave 1E1A                               _Switch_Main 1BE1  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1D88                          ??_setMemory_Data 0027  
                             ___ftmul@exp 003E                     _CC2500_PowerOnInitial 1E7D  
             ??_DimmerIntr_Initialization 0026                      ??_Mcu_Initialization 0027  
                   ??_DelayOffPointSelect 0026                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0026                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1DBD       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 00E3                            __end_of___wmul 1023  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0027                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006D                            __end_of_setLED 12A8  
                           __pbitbssBANK0 0348             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0033                            __end_of_setBuz 15A9  
              __end_of_DimmerLights_IOC_1 1C09                      _CC2500_FrequencyCabr 1CC1  
                 ??_getDimmer_Load_Status 0026                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 138B                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0E91                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0051  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1BF0                     ??_Flash_Memory_Modify 002A  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0026  
              __end_of_CC2500_InitPATable 1061           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0026                     ??_Flash_Memory_Unlock 0026  
                    __end_of_setTemp_Main 0D3B                            ??_RF_RxDisable 002A  
  __end_of_getDimmerLights_PercentToValue 0AFD   __size_of_getDimmerLights_PercentToValue 007A  
          _getDimmerLights_PercentToValue 0A83                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 00DD  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1000  
       __end_of_setDimmerIntr_MaxmumValue 1CE7                                  ??_IO_Set 0026  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 016A  
                       __size_of_Division 000D                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0040                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0014                                 _Temp_Main 1B96  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0026  
                               _Rx_Length 00CC                     setProductData@address 00E2  
                     Exception_Main@count 0035                       Exception_Main@error 003B  
                                ??___bmul 0027                                  ??___wmul 002A  
                  __size_of_SwPointSelect 000B          __end_of_getMain_All_LightsStatus 1C2E  
                               _Tx_Length 0068                               __pdataBANK4 0220  
                                ??_setLED 0029                                  ?_ADC_Set 0070  
                                ??_setBuz 0031                           ??_DelayOff_Main 0063  
                       ??_CC2500_ReadByte 0026               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 120B                          _CC2500_SIDLEMode 1BB9  
              __size_of_DimmerLights_Main 001C                        setMemory_Data@data 0026  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0028  
                           ??_setLED_Main 0028                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 0034  
                               ___latbits 0003                          _setMemory_Modify 1E07  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00DB                             __pcstackBANK2 016E  
               setRF_TransceiveGO@command 0027                             __pcstackBANK3 01EC  
                           __pcstackBANK4 0240                      ??_set_TimeoutCleared 0026  
               _DimmerIntr_Initialization 1F30                           ??_DelayTime_1us 0028  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 00E5  
                       ??_CC2500_PowerRST 002C                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0027  
                            ??_TouchPower 0026                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0022            setDimmerIntr_MaxmumValue@value 00E1  
             setDimmerLights_DimmingOn@sw 0028                         ??_CC2500_WriteREG 0029  
                           ??_setRF_Learn 0026                             _DimmerLights1 015D  
                   CC2500_WriteREG@w_addr 002A                     setDelayOff_GO@command 00E3  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 002A  
           __end_of_setLoad_AH_AL_Restore 2000                  setRFSW_AdjControl@status 00E5  
                         ??_CC2500_TxData 002A                                 __pnvBANK1 00EF  
                          getRxData@error 016E               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1BAD                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0036                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00DB                          ___lwdiv@dividend 0028  
                   DelayOffPointSelect@sw 0027                             _getCmd_Status 1D99  
                              setBuz@time 002F                           ??_setCmd_Status 0027  
                ?_setControl_Lights_Table 0070                       setDelayOff_GO@value 00E4  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 0030  
                  _setTemp_Initialization 1B86                                 _getBuz_GO 1D66  
                ?_setDimmerLights_Dimming 00E8       __end_of_Flash_Memory_Initialization 046E  
             _Flash_Memory_Initialization 0372                                  ?___awdiv 0026  
                               __ptext100 1D24                                 __ptext101 1D99  
                                ?___lbdiv 0070                                 __ptext110 0B7E  
                               __ptext102 14FB                                 __ptext111 1C12  
                               __ptext103 0F45                                 __ptext120 1BD3  
                               __ptext112 0D3B                                 __ptext104 1DE1  
                               __ptext121 1B85                                 __ptext113 046E  
                               __ptext105 1604                                 __ptext130 1D14  
                               __ptext122 1F30                                 __ptext114 10E4  
                               __ptext106 1D44                                 __ptext131 1C39  
                               __ptext123 1B9D                                 __ptext115 1663  
                               __ptext107 1CDA                                 __ptext140 1CCD  
                               __ptext132 1B99                                 __ptext124 0843  
                               __ptext116 1CF6                                 __ptext108 1EBD  
                               __ptext141 1081                                 __ptext133 1BC1  
                               __ptext125 1CE7                                 __ptext117 1EA7  
                               __ptext109 0A09                                  ?___ftadd 0047  
                               __ptext142 1C09                                 __ptext134 1C2E  
                               __ptext126 11A5                                 __ptext118 1BE8  
                               __ptext143 1C00                                 __ptext135 140B  
                               __ptext127 1550                                 __ptext119 11D8  
                               __ptext136 1B87                                 __ptext128 14A7  
                               __ptext129 1315                                 __ptext138 1023  
                               __ptext139 0DE4                                 _getRxData 0995  
                                ?___ftdiv 0034                                  ?___ftneg 0044  
                                ?___ftmul 0034                                  ?___fttol 0054  
                   __size_of_my_MainTimer 003D                                  ?___lwdiv 0026  
                 __end_of_setRFSW_Control 13CB                          ??_setProductData 0062  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1B8A                             ??_setLog_Code 00E3  
                getDimmerLights_Line@line 0026                        __end_of_TouchPower 1EA7  
                     __size_of_setSw_Main 0171              CC2500_ReadStatus@status_addr 0029  
      __end_of_getDimmerIntr_DimmingValue 1D05              ??_setDimmerIntr_DimmingValue 0027  
              _getDimmerIntr_DimmingValue 1CF6                    CC2500_WriteByte@loop_a 0027  
          __size_of_setDimmerLights_OnOff 00C5                                 _r_address 00CE  
           __end_of_setDimmerLights_OnOff 07D6            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 134E  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1E40  
                          __size_of_getAD 0021                          ___lwdiv@quotient 002C  
                           _SwPointSelect 1C86                       __end_of_setLED_Main 123E  
                        ??_getDelayOff_GO 0028                    ??_setRF_Initialization 0026  
             __end_of_Temp_Initialization 1B96                         _CC2500_rfSettings 182F  
                          ___wmul@product 002A                                  _LED_Main 1BA5  
                         SwPointSelect@sw 0027                                 clear_ram0 1BCD  
                CC2500_InitPATable@loop_d 002D                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 134E                                 _setTxData 0F45  
     __end_of_DimmerLights_Initialization 1BDA               _DimmerLights_Initialization 1BD3  
                      _CC2500_ClearRXFIFO 1BB1                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1BB5                  setRF_DimmerLights@lights 00E7  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1E68  
                       ??_Timeout_Counter 0026                                ?_getBuz_GO 0026  
                setRF_DimmerLights@status 00E6      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0081       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 1176                                ?_getRxData 0070  
                            ??_getLoad_AD 002A                                  _TMR1_ISR 1023  
                  CC2500_InitSetREG@temp1 002C                    CC2500_InitSetREG@temp2 002D  
                            ??_getLoad_OK 0026                                  _TMR1_Set 1CB5  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1DE1                                  _RF_Count 00C3  
                    __end_of_RF_RxDisable 1D14                              ??_getTemp_AD 002A  
             __end_of_CC2500_WriteCommand 1F7B                    ??_CC2500_FrequencyCabr 002C  
                                _WDT_Main 1DCF                   DlyOff_Initialization@sw 0028  
                   getSw_KeyStatus@status 0027                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0026                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00A8                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008E                                  _DelayOff 0063  
                            setSw_Main@sw 0037                               ??_Load_Main 002E  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 002C  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1CB5  
                          ?_SwPointSelect 0070                               getAD@adcon0 0029  
                             getAD@adcon1 0026                            setLED_Main@led 002A  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1272  
                   _DlyOff_Initialization 1BC1         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 002A                                  _Division 1CCD  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 002A  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1F18               setDimmerLights_OnOff@lights 00EE  
                _setDimmerIntr_Dimming_Sw 1EBD                                  _Fosc_Set 1BA9  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 00EC  
                      __end_of_getLoad_AD 0995                        __end_of_getLoad_OK 1BF0  
                   _Switch_Initialization 1BBD         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0026                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 140B  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1E40                         getLoad_AD@channel 002C  
     __size_of_DimmerLights_SelectPointer 000B                      ??_setRF_TransceiveGO 0026  
            Flash_Memory_Initialization@i 00E1                                  _SwDetect 00CD  
                             ??_Temp_Main 0063                          getCmd_Status@cmd 0027  
                        setCmd_Status@cmd 0026                         setRFSW_Control@sw 00ED  
           _getMain_All_Error_Status$3505 0027             _getMain_All_Error_Status$3506 0029  
                __end_of_getDimmer_LoadGO 1BF8                       _Load_Initialization 1B8A  
         ?_getDimmerLights_ValueToPercent 0070          ??_getDimmerLights_ValueToPercent 00DB  
                               setLED@led 0029                              _setTemp_Main 0C93  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0034  
                                ___awtoft 10E4                          ??_LedPointSelect 0026  
                                ___ftpack 1663             __size_of_getMain_Lights_Count 000B  
                  getDimmer_LoadGO@loadgo 0026                         getTemp_AD@channel 002B  
                            ??_setRF_Main 016F                      CC2500_WriteREG@value 0028  
                             _setLED_Main 120B                __end_of_setRF_DimmerLights 1663  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0029                          getDelayOff_GO@sw 0028  
           __end_of_getDimmer_Load_Status 1C00                          setDelayOff_GO@sw 00EA  
                         ___lwdiv@divisor 0026                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 002B                                  __ptext10 1B93  
                                __ptext11 1B86                                  __ptext20 1ED3  
                                __ptext12 1BE1                                  __ptext21 1BBD  
                                __ptext13 0201                                  __ptext30 0AFD  
                                __ptext22 1D34                                  __ptext14 1E54  
                                __ptext31 1E07                                  __ptext23 1B90  
                                __ptext15 114E                                  __ptext40 1E7D  
                                __ptext32 1F7B                                  __ptext24 0564  
                                __ptext16 1D88                                  __ptext41 1BB9  
                                __ptext33 1D77                                  __ptext25 0995  
                                __ptext17 1C86                                  __ptext50 1F62  
                                __ptext42 0800                                  __ptext34 1D66  
                                __ptext26 123E                                  __ptext18 1E92  
                                __ptext51 1BAD                                  __ptext43 07D6  
                                __ptext35 1D05                                  __ptext27 1E1A  
                                __ptext19 1000                                  __ptext60 1C65  
                                __ptext52 1E68                                  __ptext44 1042  
                                __ptext36 16C4                                  __ptext28 08B2  
                                __ptext61 1BA9                                  __ptext53 1E40  
                                __ptext45 10A2                                  __ptext37 172A  
                                __ptext29 138B                                  __ptext70 1B8A  
                                __ptext62 1BDA                                  __ptext54 1B8D  
                                __ptext46 1CC1                                  __ptext38 1106  
                                __ptext71 1FE4                                  __ptext63 0051  
                                __ptext55 1C7B                                  __ptext47 1128  
                                __ptext39 1EE9                                  __ptext80 1C9D  
                                __ptext72 1BA5                                  __ptext64 1C5A  
                                __ptext56 1DBD                                  __ptext48 1BB5  
                                __ptext81 1176                                  __ptext73 120B  
                                __ptext65 1BF8                                  __ptext57 1C70  
                                __ptext49 1BB1                                  __ptext90 1C44  
                                __ptext82 1C1B                                  __ptext74 1BA1  
                                __ptext66 1BF0                                  __ptext58 1CB5  
                                __ptext91 1F18                                  __ptext83 1F94  
                                __ptext75 1D55                                  __ptext67 1DF4  
                                __ptext59 1FAE                                  __ptext92 1C91  
                                __ptext84 063F                                  __ptext76 12A8  
                                __ptext68 1005                                  __ptext93 1F00  
                                __ptext85 1C4F                                  __ptext77 1455  
                                __ptext69 12DE                                  __ptext94 0C05  
                                __ptext86 1FC8                                  __ptext78 1CA9  
                                __ptext95 1DAB                                  __ptext87 1793  
                                __ptext79 0372                                  __ptext96 1F49  
                                __ptext88 0711                                  __ptext97 1C24  
                                __ptext89 1272                                  __ptext98 0A83  
                                __ptext99 0E91                                  __product 0220  
                 ??_setLED_Initialization 002A                  ??_getDimmerLights_Status 0028  
            __end_of_getDimmerLights_Line 1C5A              __end_of_setDimmerLights_Main 1800  
            __end_of_setDimmerLights_Line 1D55                        _DimmerLights_IOC_1 1C00  
            __end_of_setDimmerLights_SwOn 11D8                              ??_setSw_Main 0035  
                  ??_setRF_TimeoutCleared 0026              ??_setDimmerLights_DimmingRun 0029  
                           setLED@command 0028                             __size_of_main 005B  
                             _setRF_Learn 1E54        __size_of_DimmerIntr_Initialization 0019  
                         ??_getCmd_Status 0026              DimmerLights_TMR_1@TuneValue1 0023  
            DimmerLights_TMR_1@TuneValue2 0024              DimmerLights_TMR_1@TuneValue3 0025  
            DimmerLights_TMR_1@TuneValue4 0020                        _DimmerLights_TMR_1 0DE4  
                __end_of_CC2500_SIDLEMode 1BBD                setDimmerLights_Main@lights 016E  
             __end_of_DelayOffPointSelect 1C39                CC2500_WriteCommand@command 0029  
                         _CC2500_ReadByte 1EE9                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1042                  __end_of_setMemory_Modify 1E1A  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 063F  
                             ??_getBuz_GO 0028                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00EE                              getLoad_OK@ok 0026  
              __end_of_RF_Timeout_Counter 1E7D                                  main@argc 0240  
                                main@argv 0242                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6258 0028       getDimmerLights_ValueToPercent@value 00DD  
                         _CC2500_PowerRST 0800                  __size_of_getSw_KeyStatus 0011  
      __end_of_setDimmerIntr_DimmingValue 1C9D                _setDimmerIntr_DimmingValue 1C91  
             __end_of_Flash_Memory_Modify 14A7                               _setLog_Code 123E  
             __end_of_Flash_Memory_Unlock 1C24                           ??_SwPointSelect 0026  
                         _CC2500_WriteREG 10A2                        __end_of_setSw_Main 0372  
                   ??_Load_Initialization 0028                      ??_DimmerLights_IOC_1 0070  
         getDimmerLights_PercentToValue@i 00DE       __size_of_setDimmerLights_DimmingRun 0019  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 007A                            Division@result 0079  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0026  
              setDimmerLights_Line@lights 0026                   setDimmerLights_SwOff@sw 0028  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 002B                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 00E7                           setDelayOff_GO@j 00E8  
                         setDelayOff_GO@k 00E9                   ??_CC2500_PowerOnInitial 002F  
                   setTemp_Main@SafeValue 00E6    __end_of_setDimmerLights_Initialization 1B86  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1B85  
              ?_setDimmerIntr_MaxmumValue 00E1                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0026                    CC2500_InitPATable@temp 002C  
                         getLoad_AD@ADRES 002F                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1B8D                               getLoad_AD@i 0031  
                             getLoad_AD@j 002E                               getLoad_AD@k 002D  
                    _Flash_Memory_Erasing 1CA9                        ?_RF_Initialization 0070  
                              _SPI0Buffer 0066                   __size_of_Exception_Main 00D2  
                           Division@value 0078           __end_of_DelayOff_Initialization 1B9D  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1BA1  
                     ??_RF_Initialization 0027                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0C05               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0071          __size_of_setDimmerLights_Dimming 0055  
             getDimmer_Load_Status@status 0026      __size_of_Flash_Memory_Initialization 00FC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 00E3  
                   setMemory_Data@address 0028                     __end_of_DelayTime_1us 114E  
                 __end_of_CC2500_ReadByte 1F00              __end_of_setSw_Initialization 1D44  
                         _Timeout_Counter 1ED3           __size_of_getDimmerLights_Status 0010  
         getDimmerLights_ValueToPercent@i 00DE                              _RF_RxDisable 1D05  
              __end_of_LED_Initialization 1BA5            __end_of_setTemp_Initialization 1B87  
                             Division@num 0075                   setMemory_Modify@command 0027  
               __end_of_RF_Initialization 1B90                     __end_of_CC2500_RxData 1793  
                   __end_of_CC2500_TxData 172A                     _setLoad_AH_AL_Restore 1FE4  
                 __end_of_CC2500_PowerRST 0843  
