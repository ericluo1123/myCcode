

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Mar 07 16:44:46 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text137,local,class=CODE,merge=1,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	intentry,global,class=CODE,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text147,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1F33                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1F33  3463               	retlw	99
  2172  1F34  3402               	retlw	2
  2173  1F35  3400               	retlw	0
  2174  1F36  3400               	retlw	0
  2175  1F37  3400               	retlw	0
  2176  1F38  3400               	retlw	0
  2177  1F39  3400               	retlw	0
  2178  1F3A  3400               	retlw	0
  2179  1F3B  3400               	retlw	0
  2180  1F3C  3400               	retlw	0
  2181  1F3D  3400               	retlw	0
  2182  1F3E  3400               	retlw	0
  2183  1F3F  34FF               	retlw	255
  2184  1F40  34FF               	retlw	255
  2185  1F41  34FF               	retlw	255
  2186  1F42  3400               	retlw	0
  2187  1F43  3400               	retlw	0
  2188  1F44  3400               	retlw	0
  2189  1F45  3400               	retlw	0
  2190  1F46  3400               	retlw	0
  2191  1F47  3400               	retlw	0
  2192  1F48  3400               	retlw	0
  2193  1F49  3400               	retlw	0
  2194  1F4A  3400               	retlw	0
  2195  1F4B  3400               	retlw	0
  2196  1F4C  3400               	retlw	0
  2197  1F4D  3400               	retlw	0
  2198  1F4E  3400               	retlw	0
  2199  1F4F  3400               	retlw	0
  2200  1F50  3400               	retlw	0
  2201  1F51  3400               	retlw	0
  2202  1F52  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1000                     __pstringtext:	
  2206  1000                     _CC2500_registers_address:	
  2207  1000  3403               	retlw	3
  2208  1001  3416               	retlw	22
  2209  1002  3417               	retlw	23
  2210  1003  341E               	retlw	30
  2211  1004  341F               	retlw	31
  2212  1005  3420               	retlw	32
  2213  1006  342A               	retlw	42
  2214  1007  342B               	retlw	43
  2215  1008  340B               	retlw	11
  2216  1009  340C               	retlw	12
  2217  100A  340D               	retlw	13
  2218  100B  340E               	retlw	14
  2219  100C  340F               	retlw	15
  2220  100D  3410               	retlw	16
  2221  100E  3411               	retlw	17
  2222  100F  3412               	retlw	18
  2223  1010  3413               	retlw	19
  2224  1011  3414               	retlw	20
  2225  1012  340A               	retlw	10
  2226  1013  3415               	retlw	21
  2227  1014  3421               	retlw	33
  2228  1015  3422               	retlw	34
  2229  1016  3418               	retlw	24
  2230  1017  3419               	retlw	25
  2231  1018  341A               	retlw	26
  2232  1019  341B               	retlw	27
  2233  101A  341C               	retlw	28
  2234  101B  341D               	retlw	29
  2235  101C  3423               	retlw	35
  2236  101D  3424               	retlw	36
  2237  101E  3425               	retlw	37
  2238  101F  3426               	retlw	38
  2239  1020  3429               	retlw	41
  2240  1021  342C               	retlw	44
  2241  1022  342D               	retlw	45
  2242  1023  342E               	retlw	46
  2243  1024  3400               	retlw	0
  2244  1025  3401               	retlw	1
  2245  1026  3402               	retlw	2
  2246  1027  3407               	retlw	7
  2247  1028  3408               	retlw	8
  2248  1029  3409               	retlw	9
  2249  102A  3406               	retlw	6
  2250  102B  3404               	retlw	4
  2251  102C  3405               	retlw	5
  2252  102D  3427               	retlw	39
  2253  102E  3428               	retlw	40
  2254  102F                     __end_of_CC2500_registers_address:	
  2255  102F                     _CC2500_rfSettings:	
  2256  102F  3407               	retlw	7
  2257  1030  3407               	retlw	7
  2258  1031  3430               	retlw	48
  2259  1032  3487               	retlw	135
  2260  1033  346B               	retlw	107
  2261  1034  34F8               	retlw	248
  2262  1035  347F               	retlw	127
  2263  1036  343F               	retlw	63
  2264  1037  3409               	retlw	9
  2265  1038  3400               	retlw	0
  2266  1039  345C               	retlw	92
  2267  103A  34A7               	retlw	167
  2268  103B  3462               	retlw	98
  2269  103C  3486               	retlw	134
  2270  103D  3483               	retlw	131
  2271  103E  3403               	retlw	3
  2272  103F  3422               	retlw	34
  2273  1040  34F8               	retlw	248
  2274  1041  3400               	retlw	0
  2275  1042  3444               	retlw	68
  2276  1043  34B6               	retlw	182
  2277  1044  3410               	retlw	16
  2278  1045  3418               	retlw	24
  2279  1046  341D               	retlw	29
  2280  1047  341C               	retlw	28
  2281  1048  34C7               	retlw	199
  2282  1049  3400               	retlw	0
  2283  104A  34B2               	retlw	178
  2284  104B  34EA               	retlw	234
  2285  104C  340A               	retlw	10
  2286  104D  3400               	retlw	0
  2287  104E  3411               	retlw	17
  2288  104F  3459               	retlw	89
  2289  1050  3488               	retlw	136
  2290  1051  3431               	retlw	49
  2291  1052  340B               	retlw	11
  2292  1053  342F               	retlw	47
  2293  1054  342E               	retlw	46
  2294  1055  3406               	retlw	6
  2295  1056  3404               	retlw	4
  2296  1057  3405               	retlw	5
  2297  1058  3400               	retlw	0
  2298  1059  3430               	retlw	48
  2299  105A  34D3               	retlw	211
  2300  105B  3491               	retlw	145
  2301  105C  3441               	retlw	65
  2302  105D  3400               	retlw	0
  2303  105E                     __end_of_CC2500_rfSettings:	
  2304  105E                     _CC2500_patable_vaule:	
  2305  105E  34FE               	retlw	254
  2306  105F  34FE               	retlw	254
  2307  1060  34FE               	retlw	254
  2308  1061  34FE               	retlw	254
  2309  1062  34FE               	retlw	254
  2310  1063  34FE               	retlw	254
  2311  1064  34FE               	retlw	254
  2312  1065  34FE               	retlw	254
  2313  1066                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00EC                     __pnvBANK1:	
  2317  00EC                     _product:	
  2318  00EC                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006A                     _RB2	set	106
  2336  006B                     _RB3	set	107
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0073                     _RC3	set	115
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0088                     _TMR1IF	set	136
  2344  009D                     _ADCON0	set	157
  2345  009E                     _ADCON1	set	158
  2346  009C                     _ADRESH	set	156
  2347  009B                     _ADRESL	set	155
  2348  0099                     _OSCCON	set	153
  2349  008C                     _TRISA	set	140
  2350  008D                     _TRISB	set	141
  2351  008E                     _TRISC	set	142
  2352  0097                     _WDTCON	set	151
  2353  04E9                     _GO_nDONE	set	1257
  2354  0488                     _TMR1IE	set	1160
  2355  0117                     _FVRCON	set	279
  2356  010C                     _LATA	set	268
  2357  010D                     _LATB	set	269
  2358  010E                     _LATC	set	270
  2359  018C                     _ANSELA	set	396
  2360  018D                     _ANSELB	set	397
  2361  018E                     _ANSELC	set	398
  2362  0192                     _PMADRH	set	402
  2363  0191                     _PMADRL	set	401
  2364  0196                     _PMCON2	set	406
  2365  0194                     _PMDATH	set	404
  2366  0193                     _PMDATL	set	403
  2367  0CAE                     _CFGS	set	3246
  2368  0CAC                     _FREE	set	3244
  2369  0CAD                     _LWLO	set	3245
  2370  0CA8                     _RD	set	3240
  2371  0CA9                     _WR	set	3241
  2372  0CAA                     _WREN	set	3242
  2373  020D                     _WPUB	set	525
  2374  0396                     _IOCBF	set	918
  2375  0395                     _IOCBN	set	917
  2376  0394                     _IOCBP	set	916
  2377  1CB2                     _IOCBF2	set	7346
  2378                           
  2379                           ; #config settings
  2380  0000                     
  2381                           	psect	cinit
  2382  0021                     start_initialization:	
  2383  0021                     __initialization:	
  2384                           
  2385                           ; Clear objects allocated to BITCOMMON
  2386  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BITBANK1
  2389  0022  0021               	movlb	1	; select bank1
  2390  0023  01ED               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  0024  30A0               	movlw	low __pbssBANK1
  2394  0025  0084               	movwf	4
  2395  0026  3000               	movlw	high __pbssBANK1
  2396  0027  0085               	movwf	5
  2397  0028  3044               	movlw	68
  2398  0029  319A  22AD  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  002C  3020               	movlw	low __pbssBANK2
  2402  002D  0084               	movwf	4
  2403  002E  3001               	movlw	high __pbssBANK2
  2404  002F  0085               	movwf	5
  2405  0030  304F               	movlw	79
  2406  0031  319A  22AD  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  0034  30A0               	movlw	low __pbssBANK3
  2410  0035  0084               	movwf	4
  2411  0036  3001               	movlw	high __pbssBANK3
  2412  0037  0085               	movwf	5
  2413  0038  304C               	movlw	76
  2414  0039  319A  22AD  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Initialize objects allocated to BANK4
  2417  003C  3033               	movlw	low __pidataBANK4
  2418  003D  0084               	movwf	4
  2419  003E  309F               	movlw	(high __pidataBANK4)| (0+128)
  2420  003F  0085               	movwf	5
  2421  0040  3020               	movlw	low __pdataBANK4
  2422  0041  0086               	movwf	6
  2423  0042  3002               	movlw	high __pdataBANK4
  2424  0043  0087               	movwf	7
  2425  0044  3020               	movlw	32
  2426  0045  319A  22A7         	fcall	init_ram
  2427  0047                     end_of_initialization:	
  2428                           ;End of C runtime variable initialization code
  2429                           
  2430  0047                     __end_of__initialization:	
  2431  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2432  0048  0020               	movlb	0
  2433  0049  3195  2D54         	ljmp	_main	;jump to C main() function
  2434                           
  2435                           	psect	bitbssCOMMON
  2436  03E8                     __pbitbssCOMMON:	
  2437  03E8                     _Transceive_OK:	
  2438  03E8                     	ds	1
  2439                           
  2440                           	psect	bitbssBANK1
  2441  0768                     __pbitbssBANK1:	
  2442  0768                     _Receive_OK:	
  2443  0768                     	ds	1
  2444                           
  2445                           	psect	bssBANK1
  2446  00A0                     __pbssBANK1:	
  2447  00A0                     _RF1:	
  2448  00A0                     	ds	15
  2449  00AF                     _myMain:	
  2450  00AF                     	ds	13
  2451  00BC                     _DimmerIntr1:	
  2452  00BC                     	ds	12
  2453  00C8                     _WDT:	
  2454  00C8                     	ds	2
  2455  00CA                     _CRC:	
  2456  00CA                     	ds	1
  2457  00CB                     _Cmd:	
  2458  00CB                     	ds	1
  2459  00CC                     _DelayOff:	
  2460  00CC                     	ds	1
  2461  00CD                     _DimmerIntr:	
  2462  00CD                     	ds	1
  2463  00CE                     _DimmerLights:	
  2464  00CE                     	ds	1
  2465  00CF                     _LED:	
  2466  00CF                     	ds	1
  2467  00D0                     _Light:	
  2468  00D0                     	ds	1
  2469  00D1                     _RSSI:	
  2470  00D1                     	ds	1
  2471  00D2                     _Rx_Length:	
  2472  00D2                     	ds	1
  2473  00D3                     _SPI0Buffer:	
  2474  00D3                     	ds	1
  2475  00D4                     _Sw:	
  2476  00D4                     	ds	1
  2477  00D5                     _SwDetect:	
  2478  00D5                     	ds	1
  2479  00D6                     _Tx_Length:	
  2480  00D6                     	ds	1
  2481  00D7                     _r_address:	
  2482  00D7                     	ds	1
  2483  00D8                     _r_data:	
  2484  00D8                     	ds	1
  2485  00D9                     _s_data:	
  2486  00D9                     	ds	1
  2487  00DA                     _Temp:	
  2488  00DA                     	ds	10
  2489                           
  2490                           	psect	bssBANK2
  2491  0120                     __pbssBANK2:	
  2492  0120                     _Buz1:	
  2493  0120                     	ds	12
  2494  012C                     _Dimmer:	
  2495  012C                     	ds	5
  2496  0131                     _Timer1:	
  2497  0131                     	ds	3
  2498  0134                     _RF_Count:	
  2499  0134                     	ds	2
  2500  0136                     _Load:	
  2501  0136                     	ds	40
  2502  015E                     _DimmerLights1:	
  2503  015E                     	ds	8
  2504  0166                     _DlySw1:	
  2505  0166                     	ds	5
  2506  016B                     _VarErrLED:	
  2507  016B                     	ds	4
  2508                           
  2509                           	psect	bssBANK3
  2510  01A0                     __pbssBANK3:	
  2511  01A0                     _RF_Data:	
  2512  01A0                     	ds	30
  2513  01BE                     _Memory:	
  2514  01BE                     	ds	37
  2515  01E3                     _Sw1:	
  2516  01E3                     	ds	9
  2517                           
  2518                           	psect	dataBANK4
  2519  0220                     __pdataBANK4:	
  2520  0220                     __product:	
  2521  0220                     	ds	32
  2522                           
  2523                           	psect	clrtext
  2524  1AAD                     clear_ram0:	
  2525                           ;	Called with FSR0 containing the base address, and
  2526                           ;	WREG with the size to clear
  2527                           
  2528  1AAD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2529  1AAE                     clrloop0:	
  2530  1AAE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2531  1AAF  3101               	addfsr 0,1
  2532  1AB0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2533  1AB1  2AAE               	goto	clrloop0	;have we reached the end yet?
  2534  1AB2  3400               	retlw	0	;all done for this memory range, return
  2535                           
  2536                           	psect	inittext
  2537  1AA7                     init_ram:	
  2538  1AA7  00FE               	movwf	126
  2539  1AA8                     initloop:	
  2540  1AA8  0012               	moviw fsr0++
  2541  1AA9  001E               	movwi fsr1++
  2542  1AAA  0BFE               	decfsz	126,f
  2543  1AAB  2AA8               	goto	initloop
  2544  1AAC  3400               	retlw	0
  2545                           
  2546                           	psect	cstackBANK1
  2547  00E4                     __pcstackBANK1:	
  2548  00E4                     ??_getRxData:	
  2549  00E4                     setDimmerLights_OnOff@lights:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552                           
  2553                           ; 1 bytes @ 0x0
  2554  00E4                     	ds	1
  2555  00E5                     setDimmerLights_Main@lights:	
  2556  00E5                     getRxData@error:	
  2557                           ; 1 bytes @ 0x1
  2558                           
  2559                           
  2560                           ; 1 bytes @ 0x1
  2561  00E5                     	ds	1
  2562  00E6                     ??_setRF_Main:	
  2563                           
  2564                           ; 0 bytes @ 0x2
  2565  00E6                     	ds	1
  2566  00E7                     setRF_Main@error:	
  2567                           
  2568                           ; 1 bytes @ 0x3
  2569  00E7                     	ds	1
  2570  00E8                     ?_main:	
  2571  00E8                     main@argc:	
  2572                           ; 2 bytes @ 0x4
  2573                           
  2574                           
  2575                           ; 2 bytes @ 0x4
  2576  00E8                     	ds	2
  2577  00EA                     main@argv:	
  2578                           
  2579                           ; 2 bytes @ 0x6
  2580  00EA                     	ds	2
  2581                           
  2582                           	psect	cstackCOMMON
  2583  0070                     __pcstackCOMMON:	
  2584  0070                     ?_CC2500_WriteCommand:	
  2585  0070                     ?_RF_Timeout_Counter:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRF_TimeoutCleared:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_WriteByte:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_ReadStatus:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_ReadByte:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_PowerRST:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_InitSetREG:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_InitPATable:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_ClearTXFIFO:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ClearRXFIFO:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_FrequencyCabr:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_SIDLEMode:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_DlyOff_Initialization:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_DlyOff_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_SwOn:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setDimmerLights_SwOff:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setMemory_Modify:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setDimmerLights_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_Line:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setTxData:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setRF_TransceiveGO:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setLED_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setLED_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_Fosc_Set:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_IO_Set:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_TMR1_Set:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_ADC_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_IOC_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_WDT_Set:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_TMR1_ISR:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_IOC_ISR:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Timeout_Counter:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_set_TimeoutCleared:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Flash_Memory_Write:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Modify:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_WDT_Clearing:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_myMain_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Temp_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Load_Initialization:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Switch_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_RF_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_getLoad_AD:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_getTemp_AD:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_my_MainTimer:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Temp_Main:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Load_Main:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_Switch_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_RF_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Exception_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setLoad_AH_AL_Restore:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setTemp_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setTemp_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setRF_Initialization:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setRF_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_RF_RxDisable:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_getRxData:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setLog_Code:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setControl_Lights_Table:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setRFSW_Control:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setRFSW_AdjControl:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setRF_AdjControl:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setSw_Initialization:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setSw_Main:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_Buzzer_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Buzzer_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_CC2500_TxData:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_CC2500_RxData:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_CC2500_PowerOnInitial:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_DelayOffPointSelect:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DelayOff_Initialization:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DelayOff_Main:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DimmerIntr_Initialization:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DimmerLights_SelectPointer:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_DimmerLights_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_setDimmerLights_DimmingOn:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DimmerLights_Main:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_DimmerLights_TMR_1:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ??_DimmerLights_TMR_1:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DimmerLights_IOC_1:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_LedPointSelect:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_LED_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_LED_Main:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Mcu_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_ISR:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Flash_Memory_Initialization:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_Flash_Memory_Main:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_Flash_Memory_Unlock:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_Flash_Memory_Erasing:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_setMemory_LoopSave:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_WDT_Main:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_setRF_Learn:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_TouchPower:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_SwPointSelect:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_getDimmerLights_Status:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_getDimmerLights_ValueToPercent:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_getDimmerLights_PercentToValue:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getLoad_OK:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_getMain_All_Error_Status:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getMain_All_LightsStatus:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_getDimmerLights_Allow_Condition:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getCmd_Status:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_Flash_Memory_Read:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getAll_Sw_KeyStatus:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getRF_KeyStatus:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getSw_KeyStatus:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getDelayOff_GO:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getDimmerIntr_DimmingValue:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getDimmerLights_Line:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getDimmer_LoadGO:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDimmer_Load_Status:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getMain_Lights_Count:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?i1___lbdiv:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     setDimmerLights_Initialization@lights:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     getDimmerLights_Allow_Condition@lights:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     getSw_KeyStatus@sw:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     i1___lbdiv@divisor:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939                           
  2940                           ; 1 bytes @ 0x0
  2941  0070                     	ds	1
  2942  0071                     ??_TMR1_ISR:	
  2943  0071                     ??i1___lbdiv:	
  2944                           ; 0 bytes @ 0x1
  2945                           
  2946                           
  2947                           ; 0 bytes @ 0x1
  2948  0071                     	ds	1
  2949  0072                     i1___lbdiv@dividend:	
  2950                           
  2951                           ; 1 bytes @ 0x2
  2952  0072                     	ds	1
  2953  0073                     i1___lbdiv@counter:	
  2954                           
  2955                           ; 1 bytes @ 0x3
  2956  0073                     	ds	1
  2957  0074                     i1___lbdiv@quotient:	
  2958                           
  2959                           ; 1 bytes @ 0x4
  2960  0074                     	ds	1
  2961  0075                     ?i1_Division:	
  2962  0075                     i1Division@num:	
  2963                           ; 1 bytes @ 0x5
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x5
  2967  0075                     	ds	1
  2968  0076                     ??i1_Division:	
  2969                           
  2970                           ; 0 bytes @ 0x6
  2971  0076                     	ds	2
  2972  0078                     i1Division@value:	
  2973                           
  2974                           ; 1 bytes @ 0x8
  2975  0078                     	ds	1
  2976  0079                     i1Division@result:	
  2977                           
  2978                           ; 1 bytes @ 0x9
  2979  0079                     	ds	1
  2980  007A                     ??_DimmerLights_IOC_1:	
  2981                           
  2982                           ; 0 bytes @ 0xA
  2983  007A                     	ds	2
  2984  007C                     ??_IOC_ISR:	
  2985  007C                     ??_ISR:	
  2986                           ; 0 bytes @ 0xC
  2987                           
  2988                           
  2989                           ; 0 bytes @ 0xC
  2990  007C                     	ds	1
  2991                           
  2992                           	psect	cstackBANK0
  2993  0020                     __pcstackBANK0:	
  2994  0020                     ??_RF_Timeout_Counter:	
  2995  0020                     ??_setRF_TimeoutCleared:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_CC2500_WriteByte:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_CC2500_ReadByte:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ?_DelayTime_1us:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_setMemory_Modify:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_setDimmerLights_Initialization:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_getLoad_OK:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_getMain_All_Error_Status:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_getMain_All_LightsStatus:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_setDimmerLights_Line:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_getCmd_Status:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ?_setCmd_Status:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_setTxData:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_setRF_TransceiveGO:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_Fosc_Set:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_IO_Set:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_TMR1_Set:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_ADC_Set:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_IOC_Set:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_WDT_Set:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_Timeout_Counter:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_set_TimeoutCleared:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Flash_Memory_Read:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ?_setMemory_Data:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_Flash_Memory_Write:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_getAll_Sw_KeyStatus:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_WDT_Clearing:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_myMain_Initialization:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_Temp_Initialization:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_setLoad_AH_AL_Restore:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_setTemp_Initialization:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_setRF_Initialization:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_getRF_KeyStatus:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_getSw_KeyStatus:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_Buzzer_Initialization:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_Buzzer_Main:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_DelayOffPointSelect:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ?_setDimmerIntr_ControlStatus:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_getDimmerIntr_DimmingValue:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ?_setDimmerIntr_Dimming_RF:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ??_DimmerLights_SelectPointer:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_getDimmerLights_Line:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_getDimmer_LoadGO:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_getDimmer_Load_Status:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_LedPointSelect:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_Flash_Memory_Unlock:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_Flash_Memory_Erasing:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ??_setMemory_LoopSave:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_WDT_Main:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ??_getMain_Lights_Count:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ??_setRF_Learn:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ??_TouchPower:	
  3155                           ; 0 bytes @ 0x0
  3156                           
  3157  0020                     ??_SwPointSelect:	
  3158                           ; 0 bytes @ 0x0
  3159                           
  3160  0020                     ?___bmul:	
  3161                           ; 0 bytes @ 0x0
  3162                           
  3163  0020                     ?___lbdiv:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166  0020                     ?_getBuz_GO:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0020                     ?_getAD:	
  3170                           ; 2 bytes @ 0x0
  3171                           
  3172  0020                     ?___wmul:	
  3173                           ; 2 bytes @ 0x0
  3174                           
  3175  0020                     ?___awdiv:	
  3176                           ; 2 bytes @ 0x0
  3177                           
  3178  0020                     ?___lwdiv:	
  3179                           ; 2 bytes @ 0x0
  3180                           
  3181  0020                     ?___ftpack:	
  3182                           ; 2 bytes @ 0x0
  3183                           
  3184  0020                     setDimmerIntr_ControlStatus@command:	
  3185                           ; 3 bytes @ 0x0
  3186                           
  3187  0020                     setDimmerIntr_Dimming_Sw@command:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0020                     setDimmerIntr_Dimming_RF@command:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0020                     setDimmerLights_Line@lights:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0020                     getDimmerLights_Line@line:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0020                     getDimmer_LoadGO@loadgo:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     getDimmer_Load_Status@status:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     getAD@adcon1:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0020                     setMemory_Data@data:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0020                     getMain_All_LightsStatus@status:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0020                     getMain_Lights_Count@count:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0020                     setCmd_Status@cmd:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0020                     getCmd_Status@number:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0020                     getLoad_OK@ok:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0020                     ___bmul@multiplicand:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0020                     ___lbdiv@divisor:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0020                     DelayTime_1us@count:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0020                     ___wmul@multiplier:	
  3239                           ; 2 bytes @ 0x0
  3240                           
  3241  0020                     ___awdiv@divisor:	
  3242                           ; 2 bytes @ 0x0
  3243                           
  3244  0020                     ___lwdiv@divisor:	
  3245                           ; 2 bytes @ 0x0
  3246                           
  3247  0020                     ___ftpack@arg:	
  3248                           ; 2 bytes @ 0x0
  3249                           
  3250                           
  3251                           ; 3 bytes @ 0x0
  3252  0020                     	ds	1
  3253  0021                     ??_getDimmerLights_Allow_Condition:	
  3254  0021                     ??_setCmd_Status:	
  3255                           ; 0 bytes @ 0x1
  3256                           
  3257  0021                     ??_setMemory_Data:	
  3258                           ; 0 bytes @ 0x1
  3259                           
  3260  0021                     ??_RF_Initialization:	
  3261                           ; 0 bytes @ 0x1
  3262                           
  3263  0021                     ??_setDimmerIntr_ControlStatus:	
  3264                           ; 0 bytes @ 0x1
  3265                           
  3266  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3267                           ; 0 bytes @ 0x1
  3268                           
  3269  0021                     ??_setDimmerIntr_Dimming_RF:	
  3270                           ; 0 bytes @ 0x1
  3271                           
  3272  0021                     ??_Mcu_Initialization:	
  3273                           ; 0 bytes @ 0x1
  3274                           
  3275  0021                     ??___bmul:	
  3276                           ; 0 bytes @ 0x1
  3277                           
  3278  0021                     ??___lbdiv:	
  3279                           ; 0 bytes @ 0x1
  3280                           
  3281  0021                     CC2500_WriteByte@loop_a:	
  3282                           ; 0 bytes @ 0x1
  3283                           
  3284  0021                     CC2500_ReadByte@loop_b:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     DelayOffPointSelect@sw:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     getDimmerIntr_DimmingValue@lights:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293  0021                     DimmerLights_SelectPointer@lights:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296  0021                     LedPointSelect@led:	
  3297                           ; 1 bytes @ 0x1
  3298                           
  3299  0021                     Flash_Memory_Read@i:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302  0021                     Flash_Memory_Write@i:	
  3303                           ; 1 bytes @ 0x1
  3304                           
  3305  0021                     setMemory_Modify@command:	
  3306                           ; 1 bytes @ 0x1
  3307                           
  3308  0021                     setMemory_LoopSave@command:	
  3309                           ; 1 bytes @ 0x1
  3310                           
  3311  0021                     getMain_Lights_Count@status1:	
  3312                           ; 1 bytes @ 0x1
  3313                           
  3314  0021                     getCmd_Status@cmd:	
  3315                           ; 1 bytes @ 0x1
  3316                           
  3317  0021                     setLoad_AH_AL_Restore@i:	
  3318                           ; 1 bytes @ 0x1
  3319                           
  3320  0021                     setRF_Learn@command:	
  3321                           ; 1 bytes @ 0x1
  3322                           
  3323  0021                     getRF_KeyStatus@key:	
  3324                           ; 1 bytes @ 0x1
  3325                           
  3326  0021                     setRF_TransceiveGO@command:	
  3327                           ; 1 bytes @ 0x1
  3328                           
  3329  0021                     SwPointSelect@sw:	
  3330                           ; 1 bytes @ 0x1
  3331                           
  3332  0021                     getSw_KeyStatus@status:	
  3333                           ; 1 bytes @ 0x1
  3334                           
  3335  0021                     getAll_Sw_KeyStatus@status:	
  3336                           ; 1 bytes @ 0x1
  3337                           
  3338  0021                     _getMain_All_Error_Status$3616:	
  3339                           ; 1 bytes @ 0x1
  3340                           
  3341                           
  3342                           ; 2 bytes @ 0x1
  3343  0021                     	ds	1
  3344  0022                     ??_CC2500_WriteCommand:	
  3345  0022                     ??_CC2500_ReadStatus:	
  3346                           ; 0 bytes @ 0x2
  3347                           
  3348  0022                     ??_DelayTime_1us:	
  3349                           ; 0 bytes @ 0x2
  3350                           
  3351  0022                     ?_CC2500_WriteREG:	
  3352                           ; 0 bytes @ 0x2
  3353                           
  3354  0022                     ??_DlyOff_Initialization:	
  3355                           ; 0 bytes @ 0x2
  3356                           
  3357  0022                     ??_getDimmerLights_Status:	
  3358                           ; 0 bytes @ 0x2
  3359                           
  3360  0022                     ??_setDimmerLights_SwOff:	
  3361                           ; 0 bytes @ 0x2
  3362                           
  3363  0022                     ?_setLED:	
  3364                           ; 0 bytes @ 0x2
  3365                           
  3366  0022                     ??_setLED_Main:	
  3367                           ; 0 bytes @ 0x2
  3368                           
  3369  0022                     ??_Load_Initialization:	
  3370                           ; 0 bytes @ 0x2
  3371                           
  3372  0022                     ??_getBuz_GO:	
  3373                           ; 0 bytes @ 0x2
  3374                           
  3375  0022                     ??_getDelayOff_GO:	
  3376                           ; 0 bytes @ 0x2
  3377                           
  3378  0022                     ??_setDimmerLights_DimmingOn:	
  3379                           ; 0 bytes @ 0x2
  3380                           
  3381  0022                     ?_setDimmerLights_DimmingRun:	
  3382                           ; 0 bytes @ 0x2
  3383                           
  3384  0022                     CC2500_WriteREG@value:	
  3385                           ; 0 bytes @ 0x2
  3386                           
  3387  0022                     DlyOff_Initialization@sw:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0022                     getDelayOff_GO@sw:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0022                     setDimmerIntr_ControlStatus@lights:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0022                     getDimmerIntr_DimmingValue@value:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0022                     setDimmerIntr_Dimming_RF@lights:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0022                     setDimmerLights_SwOff@sw:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0022                     setDimmerLights_DimmingOn@sw:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0022                     getDimmerLights_Allow_Condition@allow:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0022                     getDimmerLights_Status@lights:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0022                     setDimmerLights_DimmingRun@command:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0022                     setLED@command:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0022                     Flash_Memory_Read@address:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0022                     setMemory_Data@address:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0022                     setCmd_Status@number:	
  3430                           ; 1 bytes @ 0x2
  3431                           
  3432  0022                     _getRF_KeyStatus$5413:	
  3433                           ; 1 bytes @ 0x2
  3434                           
  3435  0022                     _getSw_KeyStatus$6470:	
  3436                           ; 1 bytes @ 0x2
  3437                           
  3438  0022                     _getAll_Sw_KeyStatus$6473:	
  3439                           ; 1 bytes @ 0x2
  3440                           
  3441  0022                     ___bmul@product:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0022                     ___lbdiv@dividend:	
  3445                           ; 1 bytes @ 0x2
  3446                           
  3447  0022                     DelayTime_1us@i:	
  3448                           ; 1 bytes @ 0x2
  3449                           
  3450  0022                     ___wmul@multiplicand:	
  3451                           ; 2 bytes @ 0x2
  3452                           
  3453  0022                     ___awdiv@dividend:	
  3454                           ; 2 bytes @ 0x2
  3455                           
  3456  0022                     ___lwdiv@dividend:	
  3457                           ; 2 bytes @ 0x2
  3458                           
  3459                           
  3460                           ; 2 bytes @ 0x2
  3461  0022                     	ds	1
  3462  0023                     ??_CC2500_WriteREG:	
  3463  0023                     ??_setLED:	
  3464                           ; 0 bytes @ 0x3
  3465                           
  3466  0023                     ??_DelayOff_Initialization:	
  3467                           ; 0 bytes @ 0x3
  3468                           
  3469  0023                     ??_setDimmerLights_DimmingRun:	
  3470                           ; 0 bytes @ 0x3
  3471                           
  3472  0023                     ??_getAD:	
  3473                           ; 0 bytes @ 0x3
  3474                           
  3475  0023                     CC2500_WriteCommand@command:	
  3476                           ; 0 bytes @ 0x3
  3477                           
  3478  0023                     CC2500_ReadStatus@status_addr:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0023                     getDelayOff_GO@go:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0023                     _getDimmerLights_Allow_Condition$2285:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487  0023                     getDimmerLights_Status@status:	
  3488                           ; 1 bytes @ 0x3
  3489                           
  3490  0023                     setLED@led:	
  3491                           ; 1 bytes @ 0x3
  3492                           
  3493  0023                     getAD@adcon0:	
  3494                           ; 1 bytes @ 0x3
  3495                           
  3496  0023                     Flash_Memory_Read@ret:	
  3497                           ; 1 bytes @ 0x3
  3498                           
  3499  0023                     ___bmul@multiplier:	
  3500                           ; 1 bytes @ 0x3
  3501                           
  3502  0023                     ___ftpack@exp:	
  3503                           ; 1 bytes @ 0x3
  3504                           
  3505  0023                     ___lbdiv@counter:	
  3506                           ; 1 bytes @ 0x3
  3507                           
  3508  0023                     _getMain_All_Error_Status$3617:	
  3509                           ; 1 bytes @ 0x3
  3510                           
  3511                           
  3512                           ; 2 bytes @ 0x3
  3513  0023                     	ds	1
  3514  0024                     ??_CC2500_ClearTXFIFO:	
  3515  0024                     ??_CC2500_ClearRXFIFO:	
  3516                           ; 0 bytes @ 0x4
  3517                           
  3518  0024                     ??_CC2500_SIDLEMode:	
  3519                           ; 0 bytes @ 0x4
  3520                           
  3521  0024                     ??_setLED_Initialization:	
  3522                           ; 0 bytes @ 0x4
  3523                           
  3524  0024                     ??_Flash_Memory_Modify:	
  3525                           ; 0 bytes @ 0x4
  3526                           
  3527  0024                     ??_getLoad_AD:	
  3528                           ; 0 bytes @ 0x4
  3529                           
  3530  0024                     ??_getTemp_AD:	
  3531                           ; 0 bytes @ 0x4
  3532                           
  3533  0024                     ??_RF_RxDisable:	
  3534                           ; 0 bytes @ 0x4
  3535                           
  3536  0024                     ??_setSw_Initialization:	
  3537                           ; 0 bytes @ 0x4
  3538                           
  3539  0024                     ??_CC2500_TxData:	
  3540                           ; 0 bytes @ 0x4
  3541                           
  3542  0024                     ??_CC2500_RxData:	
  3543                           ; 0 bytes @ 0x4
  3544                           
  3545  0024                     ??_Flash_Memory_Initialization:	
  3546                           ; 0 bytes @ 0x4
  3547                           
  3548  0024                     ??___wmul:	
  3549                           ; 0 bytes @ 0x4
  3550                           
  3551  0024                     ??___awdiv:	
  3552                           ; 0 bytes @ 0x4
  3553                           
  3554  0024                     ??___lwdiv:	
  3555                           ; 0 bytes @ 0x4
  3556                           
  3557  0024                     CC2500_WriteREG@w_addr:	
  3558                           ; 0 bytes @ 0x4
  3559                           
  3560  0024                     setDimmerLights_DimmingRun@lights:	
  3561                           ; 1 bytes @ 0x4
  3562                           
  3563  0024                     setLED_Initialization@led:	
  3564                           ; 1 bytes @ 0x4
  3565                           
  3566  0024                     setLED_Main@led:	
  3567                           ; 1 bytes @ 0x4
  3568                           
  3569  0024                     setSw_Initialization@sw:	
  3570                           ; 1 bytes @ 0x4
  3571                           
  3572  0024                     ___ftpack@sign:	
  3573                           ; 1 bytes @ 0x4
  3574                           
  3575  0024                     ___lbdiv@quotient:	
  3576                           ; 1 bytes @ 0x4
  3577                           
  3578  0024                     getBuz_GO@i:	
  3579                           ; 1 bytes @ 0x4
  3580                           
  3581  0024                     DelayTime_1us@j:	
  3582                           ; 2 bytes @ 0x4
  3583                           
  3584  0024                     ___wmul@product:	
  3585                           ; 2 bytes @ 0x4
  3586                           
  3587                           
  3588                           ; 2 bytes @ 0x4
  3589  0024                     	ds	1
  3590  0025                     ??_CC2500_InitSetREG:	
  3591  0025                     ??_CC2500_InitPATable:	
  3592                           ; 0 bytes @ 0x5
  3593                           
  3594  0025                     ??_Switch_Initialization:	
  3595                           ; 0 bytes @ 0x5
  3596                           
  3597  0025                     ??___ftpack:	
  3598                           ; 0 bytes @ 0x5
  3599                           
  3600  0025                     ??_LED_Initialization:	
  3601                           ; 0 bytes @ 0x5
  3602                           
  3603  0025                     ??_LED_Main:	
  3604                           ; 0 bytes @ 0x5
  3605                           
  3606  0025                     ?_Division:	
  3607                           ; 0 bytes @ 0x5
  3608                           
  3609  0025                     CC2500_TxData@loop_e:	
  3610                           ; 1 bytes @ 0x5
  3611                           
  3612  0025                     CC2500_RxData@loop_f:	
  3613                           ; 1 bytes @ 0x5
  3614                           
  3615  0025                     Division@num:	
  3616                           ; 1 bytes @ 0x5
  3617                           
  3618  0025                     Flash_Memory_Initialization@value:	
  3619                           ; 1 bytes @ 0x5
  3620                           
  3621  0025                     Flash_Memory_Modify@i:	
  3622                           ; 1 bytes @ 0x5
  3623                           
  3624  0025                     getMain_All_Error_Status@command:	
  3625                           ; 1 bytes @ 0x5
  3626                           
  3627  0025                     getTemp_AD@channel:	
  3628                           ; 1 bytes @ 0x5
  3629                           
  3630  0025                     ___awdiv@counter:	
  3631                           ; 1 bytes @ 0x5
  3632                           
  3633  0025                     ___lwdiv@counter:	
  3634                           ; 1 bytes @ 0x5
  3635                           
  3636                           
  3637                           ; 1 bytes @ 0x5
  3638  0025                     	ds	1
  3639  0026                     ??_CC2500_PowerRST:	
  3640  0026                     ??_CC2500_FrequencyCabr:	
  3641                           ; 0 bytes @ 0x6
  3642                           
  3643  0026                     ??_Division:	
  3644                           ; 0 bytes @ 0x6
  3645                           
  3646  0026                     ??_Flash_Memory_Main:	
  3647                           ; 0 bytes @ 0x6
  3648                           
  3649  0026                     CC2500_InitSetREG@temp1:	
  3650                           ; 0 bytes @ 0x6
  3651                           
  3652  0026                     CC2500_InitPATable@temp:	
  3653                           ; 1 bytes @ 0x6
  3654                           
  3655  0026                     getMain_All_Error_Status@status:	
  3656                           ; 1 bytes @ 0x6
  3657                           
  3658  0026                     getLoad_AD@channel:	
  3659                           ; 1 bytes @ 0x6
  3660                           
  3661  0026                     ___awdiv@sign:	
  3662                           ; 1 bytes @ 0x6
  3663                           
  3664  0026                     getTemp_AD@ADRES:	
  3665                           ; 1 bytes @ 0x6
  3666                           
  3667  0026                     ___lwdiv@quotient:	
  3668                           ; 2 bytes @ 0x6
  3669                           
  3670                           
  3671                           ; 2 bytes @ 0x6
  3672  0026                     	ds	1
  3673  0027                     CC2500_InitSetREG@temp2:	
  3674  0027                     CC2500_InitPATable@loop_d:	
  3675                           ; 1 bytes @ 0x7
  3676                           
  3677  0027                     Flash_Memory_Main@key_Status:	
  3678                           ; 1 bytes @ 0x7
  3679                           
  3680  0027                     getLoad_AD@k:	
  3681                           ; 1 bytes @ 0x7
  3682                           
  3683  0027                     ___awdiv@quotient:	
  3684                           ; 1 bytes @ 0x7
  3685                           
  3686                           
  3687                           ; 2 bytes @ 0x7
  3688  0027                     	ds	1
  3689  0028                     ??_Load_Main:	
  3690  0028                     ?___awtoft:	
  3691                           ; 0 bytes @ 0x8
  3692                           
  3693  0028                     CC2500_InitSetREG@loop_c:	
  3694                           ; 3 bytes @ 0x8
  3695                           
  3696  0028                     Division@value:	
  3697                           ; 1 bytes @ 0x8
  3698                           
  3699  0028                     _Flash_Memory_Main$3155:	
  3700                           ; 1 bytes @ 0x8
  3701                           
  3702  0028                     getLoad_AD@j:	
  3703                           ; 1 bytes @ 0x8
  3704                           
  3705  0028                     ___awtoft@c:	
  3706                           ; 1 bytes @ 0x8
  3707                           
  3708                           
  3709                           ; 2 bytes @ 0x8
  3710  0028                     	ds	1
  3711  0029                     ?_setBuz:	
  3712  0029                     ??_CC2500_PowerOnInitial:	
  3713                           ; 0 bytes @ 0x9
  3714                           
  3715  0029                     Division@result:	
  3716                           ; 0 bytes @ 0x9
  3717                           
  3718  0029                     setBuz@time:	
  3719                           ; 1 bytes @ 0x9
  3720                           
  3721  0029                     getLoad_AD@ADRES:	
  3722                           ; 2 bytes @ 0x9
  3723                           
  3724                           
  3725                           ; 2 bytes @ 0x9
  3726  0029                     	ds	1
  3727  002A                     Load_Main@error:	
  3728                           
  3729                           ; 1 bytes @ 0xA
  3730  002A                     	ds	1
  3731  002B                     ??_setBuz:	
  3732  002B                     ??___awtoft:	
  3733                           ; 0 bytes @ 0xB
  3734                           
  3735  002B                     getLoad_AD@i:	
  3736                           ; 0 bytes @ 0xB
  3737                           
  3738  002B                     _Load_Main$3992:	
  3739                           ; 1 bytes @ 0xB
  3740                           
  3741                           
  3742                           ; 2 bytes @ 0xB
  3743  002B                     	ds	1
  3744  002C                     setBuz@count:	
  3745                           
  3746                           ; 1 bytes @ 0xC
  3747  002C                     	ds	1
  3748  002D                     ??_setDimmerLights_SwOn:	
  3749  002D                     ??_my_MainTimer:	
  3750                           ; 0 bytes @ 0xD
  3751                           
  3752  002D                     ??_Exception_Main:	
  3753                           ; 0 bytes @ 0xD
  3754                           
  3755  002D                     ??_setRF_AdjControl:	
  3756                           ; 0 bytes @ 0xD
  3757                           
  3758  002D                     setDimmerLights_SwOn@sw:	
  3759                           ; 0 bytes @ 0xD
  3760                           
  3761  002D                     Load_Main@ErrorCountValue:	
  3762                           ; 1 bytes @ 0xD
  3763                           
  3764  002D                     ___awtoft@sign:	
  3765                           ; 1 bytes @ 0xD
  3766                           
  3767                           
  3768                           ; 1 bytes @ 0xD
  3769  002D                     	ds	1
  3770  002E                     ?___ftdiv:	
  3771  002E                     ?___ftmul:	
  3772                           ; 3 bytes @ 0xE
  3773                           
  3774  002E                     setDimmerLights_SwOn@idle:	
  3775                           ; 3 bytes @ 0xE
  3776                           
  3777  002E                     Exception_Main@status:	
  3778                           ; 1 bytes @ 0xE
  3779                           
  3780  002E                     Load_Main@Load_RunStatus:	
  3781                           ; 1 bytes @ 0xE
  3782                           
  3783  002E                     setRF_AdjControl@status:	
  3784                           ; 1 bytes @ 0xE
  3785                           
  3786  002E                     ___ftdiv@f2:	
  3787                           ; 1 bytes @ 0xE
  3788                           
  3789  002E                     ___ftmul@f1:	
  3790                           ; 3 bytes @ 0xE
  3791                           
  3792                           
  3793                           ; 3 bytes @ 0xE
  3794  002E                     	ds	1
  3795  002F                     ??_setSw_Main:	
  3796  002F                     Exception_Main@count:	
  3797                           ; 0 bytes @ 0xF
  3798                           
  3799  002F                     Load_Main@LightsCount:	
  3800                           ; 1 bytes @ 0xF
  3801                           
  3802  002F                     setRF_AdjControl@sw:	
  3803                           ; 1 bytes @ 0xF
  3804                           
  3805                           
  3806                           ; 1 bytes @ 0xF
  3807  002F                     	ds	1
  3808  0030                     Exception_Main@error:	
  3809  0030                     Load_Main@i:	
  3810                           ; 1 bytes @ 0x10
  3811                           
  3812                           
  3813                           ; 2 bytes @ 0x10
  3814  0030                     	ds	1
  3815  0031                     setSw_Main@sw:	
  3816  0031                     Exception_Main@i:	
  3817                           ; 1 bytes @ 0x11
  3818                           
  3819  0031                     ___ftdiv@f1:	
  3820                           ; 2 bytes @ 0x11
  3821                           
  3822  0031                     ___ftmul@f2:	
  3823                           ; 3 bytes @ 0x11
  3824                           
  3825                           
  3826                           ; 3 bytes @ 0x11
  3827  0031                     	ds	1
  3828  0032                     ??_Switch_Main:	
  3829                           
  3830                           ; 0 bytes @ 0x12
  3831  0032                     	ds	1
  3832  0033                     Exception_Main@i_3628:	
  3833                           
  3834                           ; 2 bytes @ 0x13
  3835  0033                     	ds	1
  3836  0034                     ??___ftdiv:	
  3837  0034                     ??___ftmul:	
  3838                           ; 0 bytes @ 0x14
  3839                           
  3840                           
  3841                           ; 0 bytes @ 0x14
  3842  0034                     	ds	1
  3843  0035                     Exception_Main@lights:	
  3844                           
  3845                           ; 1 bytes @ 0x15
  3846  0035                     	ds	3
  3847  0038                     ___ftdiv@cntr:	
  3848  0038                     ___ftmul@exp:	
  3849                           ; 1 bytes @ 0x18
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x18
  3853  0038                     	ds	1
  3854  0039                     ___ftdiv@f3:	
  3855  0039                     ___ftmul@f3_as_product:	
  3856                           ; 3 bytes @ 0x19
  3857                           
  3858                           
  3859                           ; 3 bytes @ 0x19
  3860  0039                     	ds	3
  3861  003C                     ___ftdiv@exp:	
  3862  003C                     ___ftmul@cntr:	
  3863                           ; 1 bytes @ 0x1C
  3864                           
  3865                           
  3866                           ; 1 bytes @ 0x1C
  3867  003C                     	ds	1
  3868  003D                     ___ftdiv@sign:	
  3869  003D                     ___ftmul@sign:	
  3870                           ; 1 bytes @ 0x1D
  3871                           
  3872                           
  3873                           ; 1 bytes @ 0x1D
  3874  003D                     	ds	1
  3875  003E                     ?___ftneg:	
  3876  003E                     ___ftneg@f1:	
  3877                           ; 3 bytes @ 0x1E
  3878                           
  3879                           
  3880                           ; 3 bytes @ 0x1E
  3881  003E                     	ds	3
  3882  0041                     ??___ftneg:	
  3883  0041                     ?___ftadd:	
  3884                           ; 0 bytes @ 0x21
  3885                           
  3886  0041                     ___ftadd@f1:	
  3887                           ; 3 bytes @ 0x21
  3888                           
  3889                           
  3890                           ; 3 bytes @ 0x21
  3891  0041                     	ds	3
  3892  0044                     ___ftadd@f2:	
  3893                           
  3894                           ; 3 bytes @ 0x24
  3895  0044                     	ds	3
  3896  0047                     ??___ftadd:	
  3897                           
  3898                           ; 0 bytes @ 0x27
  3899  0047                     	ds	4
  3900  004B                     ___ftadd@sign:	
  3901                           
  3902                           ; 1 bytes @ 0x2B
  3903  004B                     	ds	1
  3904  004C                     ___ftadd@exp2:	
  3905                           
  3906                           ; 1 bytes @ 0x2C
  3907  004C                     	ds	1
  3908  004D                     ___ftadd@exp1:	
  3909                           
  3910                           ; 1 bytes @ 0x2D
  3911  004D                     	ds	1
  3912  004E                     ?___fttol:	
  3913  004E                     ___fttol@f1:	
  3914                           ; 4 bytes @ 0x2E
  3915                           
  3916                           
  3917                           ; 3 bytes @ 0x2E
  3918  004E                     	ds	4
  3919  0052                     ??___fttol:	
  3920                           
  3921                           ; 0 bytes @ 0x32
  3922  0052                     	ds	4
  3923  0056                     ___fttol@sign1:	
  3924                           
  3925                           ; 1 bytes @ 0x36
  3926  0056                     	ds	1
  3927  0057                     ___fttol@lval:	
  3928                           
  3929                           ; 4 bytes @ 0x37
  3930  0057                     	ds	4
  3931  005B                     ___fttol@exp1:	
  3932                           
  3933                           ; 1 bytes @ 0x3B
  3934  005B                     	ds	1
  3935  005C                     ??_getDimmerLights_ValueToPercent:	
  3936  005C                     ??_getDimmerLights_PercentToValue:	
  3937                           ; 0 bytes @ 0x3C
  3938                           
  3939                           
  3940                           ; 0 bytes @ 0x3C
  3941  005C                     	ds	2
  3942  005E                     getDimmerLights_PercentToValue@value:	
  3943  005E                     getDimmerLights_ValueToPercent@value:	
  3944                           ; 1 bytes @ 0x3E
  3945                           
  3946                           
  3947                           ; 1 bytes @ 0x3E
  3948  005E                     	ds	1
  3949  005F                     getDimmerLights_PercentToValue@i:	
  3950  005F                     getDimmerLights_ValueToPercent@i:	
  3951                           ; 3 bytes @ 0x3F
  3952                           
  3953                           
  3954                           ; 3 bytes @ 0x3F
  3955  005F                     	ds	3
  3956  0062                     ?_setProductData:	
  3957  0062                     ??_DimmerIntr_Initialization:	
  3958                           ; 0 bytes @ 0x42
  3959                           
  3960  0062                     ?_setDimmerIntr_DimmingValue:	
  3961                           ; 0 bytes @ 0x42
  3962                           
  3963  0062                     ?_setDimmerIntr_MaxmumValue:	
  3964                           ; 0 bytes @ 0x42
  3965                           
  3966  0062                     setDimmerIntr_DimmingValue@value:	
  3967                           ; 0 bytes @ 0x42
  3968                           
  3969  0062                     setDimmerIntr_MaxmumValue@value:	
  3970                           ; 1 bytes @ 0x42
  3971                           
  3972  0062                     setProductData@value:	
  3973                           ; 1 bytes @ 0x42
  3974                           
  3975                           
  3976                           ; 1 bytes @ 0x42
  3977  0062                     	ds	1
  3978  0063                     ??_setProductData:	
  3979  0063                     ??_setDimmerIntr_DimmingValue:	
  3980                           ; 0 bytes @ 0x43
  3981                           
  3982  0063                     ??_setDimmerIntr_MaxmumValue:	
  3983                           ; 0 bytes @ 0x43
  3984                           
  3985                           
  3986                           ; 0 bytes @ 0x43
  3987  0063                     	ds	1
  3988  0064                     ??_DimmerLights_Initialization:	
  3989  0064                     setDimmerIntr_DimmingValue@lights:	
  3990                           ; 0 bytes @ 0x44
  3991                           
  3992  0064                     setDimmerIntr_MaxmumValue@lights:	
  3993                           ; 1 bytes @ 0x44
  3994                           
  3995  0064                     setProductData@address:	
  3996                           ; 1 bytes @ 0x44
  3997                           
  3998                           
  3999                           ; 1 bytes @ 0x44
  4000  0064                     	ds	1
  4001  0065                     ??_DlyOff_Main:	
  4002  0065                     ?_setRF_DimmerLights:	
  4003                           ; 0 bytes @ 0x45
  4004                           
  4005  0065                     ??_setTemp_Main:	
  4006                           ; 0 bytes @ 0x45
  4007                           
  4008  0065                     ??_setLog_Code:	
  4009                           ; 0 bytes @ 0x45
  4010                           
  4011  0065                     ??_setRFSW_AdjControl:	
  4012                           ; 0 bytes @ 0x45
  4013                           
  4014  0065                     ?_setDelayOff_GO:	
  4015                           ; 0 bytes @ 0x45
  4016                           
  4017  0065                     setDelayOff_GO@command:	
  4018                           ; 0 bytes @ 0x45
  4019                           
  4020  0065                     setRF_DimmerLights@on:	
  4021                           ; 1 bytes @ 0x45
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x45
  4025  0065                     	ds	1
  4026  0066                     ??_setRF_DimmerLights:	
  4027  0066                     setDelayOff_GO@value:	
  4028                           ; 0 bytes @ 0x46
  4029                           
  4030  0066                     setTemp_Main@error:	
  4031                           ; 1 bytes @ 0x46
  4032                           
  4033                           
  4034                           ; 1 bytes @ 0x46
  4035  0066                     	ds	1
  4036  0067                     ??_setDelayOff_GO:	
  4037  0067                     DlyOff_Main@sw:	
  4038                           ; 0 bytes @ 0x47
  4039                           
  4040  0067                     setTemp_Main@TempGO:	
  4041                           ; 1 bytes @ 0x47
  4042                           
  4043  0067                     setRFSW_AdjControl@status:	
  4044                           ; 1 bytes @ 0x47
  4045                           
  4046                           
  4047                           ; 1 bytes @ 0x47
  4048  0067                     	ds	1
  4049  0068                     ??_DelayOff_Main:	
  4050  0068                     setRFSW_AdjControl@sw:	
  4051                           ; 0 bytes @ 0x48
  4052                           
  4053  0068                     setRF_DimmerLights@status:	
  4054                           ; 1 bytes @ 0x48
  4055                           
  4056  0068                     setTemp_Main@SafeValue:	
  4057                           ; 1 bytes @ 0x48
  4058                           
  4059                           
  4060                           ; 2 bytes @ 0x48
  4061  0068                     	ds	1
  4062  0069                     setDelayOff_GO@i:	
  4063  0069                     setRF_DimmerLights@lights:	
  4064                           ; 1 bytes @ 0x49
  4065                           
  4066                           
  4067                           ; 1 bytes @ 0x49
  4068  0069                     	ds	1
  4069  006A                     ?_setDimmerLights_Dimming:	
  4070  006A                     setDelayOff_GO@j:	
  4071                           ; 0 bytes @ 0x4A
  4072                           
  4073  006A                     setDimmerLights_Dimming@status:	
  4074                           ; 1 bytes @ 0x4A
  4075                           
  4076  006A                     setTemp_Main@DangerValue:	
  4077                           ; 1 bytes @ 0x4A
  4078                           
  4079                           
  4080                           ; 2 bytes @ 0x4A
  4081  006A                     	ds	1
  4082  006B                     ??_setDimmerLights_Dimming:	
  4083  006B                     setDelayOff_GO@k:	
  4084                           ; 0 bytes @ 0x4B
  4085                           
  4086                           
  4087                           ; 1 bytes @ 0x4B
  4088  006B                     	ds	1
  4089  006C                     setDelayOff_GO@sw:	
  4090  006C                     setDimmerLights_Dimming@value:	
  4091                           ; 1 bytes @ 0x4C
  4092                           
  4093  006C                     setTemp_Main@AD:	
  4094                           ; 1 bytes @ 0x4C
  4095                           
  4096                           
  4097                           ; 2 bytes @ 0x4C
  4098  006C                     	ds	1
  4099  006D                     ?_setDimmerLights_OnOff:	
  4100  006D                     ??_setRFSW_Control:	
  4101                           ; 0 bytes @ 0x4D
  4102                           
  4103  006D                     setDimmerLights_OnOff@command:	
  4104                           ; 0 bytes @ 0x4D
  4105                           
  4106  006D                     setDimmerLights_Dimming@lights:	
  4107                           ; 1 bytes @ 0x4D
  4108                           
  4109                           
  4110                           ; 1 bytes @ 0x4D
  4111  006D                     	ds	1
  4112  006E                     ??_setDimmerLights_OnOff:	
  4113  006E                     ??_Temp_Main:	
  4114                           ; 0 bytes @ 0x4E
  4115                           
  4116  006E                     setRFSW_Control@status:	
  4117                           ; 0 bytes @ 0x4E
  4118                           
  4119                           
  4120                           ; 1 bytes @ 0x4E
  4121  006E                     	ds	1
  4122  006F                     setRFSW_Control@sw:	
  4123                           
  4124                           ; 1 bytes @ 0x4F
  4125  006F                     	ds	1
  4126  0070                     ??_setDimmerLights_Main:	
  4127  0070                     ??_RF_Main:	
  4128                           ; 0 bytes @ 0x50
  4129                           
  4130  0070                     ??_setControl_Lights_Table:	
  4131                           ; 0 bytes @ 0x50
  4132                           
  4133  0070                     ??_DimmerLights_Main:	
  4134                           ; 0 bytes @ 0x50
  4135                           
  4136  0070                     ??_main:	
  4137                           ; 0 bytes @ 0x50
  4138                           
  4139                           
  4140                           	psect	maintext
  4141  1554                     __pmaintext:	
  4142                           ; 0 bytes @ 0x50
  4143 ;;
  4144 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4145 ;;
  4146 ;; *************** function _main *****************
  4147 ;; Defined at:
  4148 ;;		line 7 in file "../src/Main_B1.c"
  4149 ;; Parameters:    Size  Location     Type
  4150 ;;  argc            2    4[BANK1 ] int 
  4151 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;		None
  4154 ;; Return value:  Size  Location     Type
  4155 ;;                  2    4[BANK1 ] int 
  4156 ;; Registers used:
  4157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4158 ;; Tracked objects:
  4159 ;;		On entry : 17F/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4163 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;Total ram usage:        4 bytes
  4168 ;; Hardware stack levels required when called:   13
  4169 ;; This function calls:
  4170 ;;		_Buzzer_Initialization
  4171 ;;		_Buzzer_Main
  4172 ;;		_CC2500_PowerOnInitial
  4173 ;;		_DelayOff_Initialization
  4174 ;;		_DelayOff_Main
  4175 ;;		_DimmerLights_Initialization
  4176 ;;		_DimmerLights_Main
  4177 ;;		_Exception_Main
  4178 ;;		_Flash_Memory_Initialization
  4179 ;;		_Flash_Memory_Main
  4180 ;;		_LED_Initialization
  4181 ;;		_LED_Main
  4182 ;;		_Load_Initialization
  4183 ;;		_Load_Main
  4184 ;;		_Mcu_Initialization
  4185 ;;		_RF_Initialization
  4186 ;;		_RF_Main
  4187 ;;		_Switch_Initialization
  4188 ;;		_Switch_Main
  4189 ;;		_Temp_Initialization
  4190 ;;		_Temp_Main
  4191 ;;		_WDT_Main
  4192 ;;		_getLoad_AD
  4193 ;;		_getTemp_AD
  4194 ;;		_myMain_Initialization
  4195 ;;		_my_MainTimer
  4196 ;; This function is called by:
  4197 ;;		Startup code after reset
  4198 ;; This function uses a non-reentrant model
  4199 ;;
  4200                           
  4201                           
  4202                           ;psect for function _main
  4203  1554                     _main:	
  4204                           
  4205                           ;Main_B1.c: 8: myMain_Initialization();
  4206                           
  4207                           ;incstack = 0
  4208                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4209  1554  319D  250D  3195   	fcall	_myMain_Initialization
  4210                           
  4211                           ;Main_B1.c: 9: Mcu_Initialization();
  4212  1557  319C  24AF  3195   	fcall	_Mcu_Initialization
  4213                           
  4214                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4215  155A  3186  2621  3195   	fcall	_Flash_Memory_Initialization
  4216                           
  4217                           ;Main_B1.c: 11: LED_Initialization();
  4218  155D  319A  227C  3195   	fcall	_LED_Initialization
  4219                           
  4220                           ;Main_B1.c: 12: Buzzer_Initialization();
  4221  1560  319A  2262  3195   	fcall	_Buzzer_Initialization
  4222                           
  4223                           ;Main_B1.c: 14: ;;
  4224                           ;Main_B1.c: 15: Temp_Initialization();
  4225  1563  319A  226E  3195   	fcall	_Temp_Initialization
  4226                           
  4227                           ;Main_B1.c: 16: Load_Initialization();
  4228  1566  319A  2265  3195   	fcall	_Load_Initialization
  4229                           
  4230                           ;Main_B1.c: 17: ;;
  4231                           ;Main_B1.c: 18: DelayOff_Initialization();
  4232  1569  319A  2274  3195   	fcall	_DelayOff_Initialization
  4233                           
  4234                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4235  156C  319A  22B3  3195   	fcall	_DimmerLights_Initialization
  4236                           
  4237                           ;Main_B1.c: 21: ;;
  4238                           ;Main_B1.c: 22: ;;
  4239                           ;Main_B1.c: 23: ;;
  4240                           ;Main_B1.c: 24: Switch_Initialization();
  4241  156F  319A  2298  3195   	fcall	_Switch_Initialization
  4242                           
  4243                           ;Main_B1.c: 25: RF_Initialization();
  4244  1572  319A  2268  3195   	fcall	_RF_Initialization
  4245                           
  4246                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4247  1575  319D  2549  3195   	fcall	_CC2500_PowerOnInitial
  4248  1578                     l10933:	
  4249                           ;Main_B1.c: 27: ;;
  4250                           ;Main_B1.c: 28: ;;
  4251                           ;Main_B1.c: 30: while (1) {
  4252                           
  4253                           
  4254                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4255  1578  0021               	movlb	1	; select bank1
  4256  1579  1C2F               	btfss	_myMain^(0+128),0
  4257  157A  2D83               	goto	l10937
  4258                           
  4259                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4260  157B  3005               	movlw	5
  4261  157C  318A  2233  3195   	fcall	_getLoad_AD
  4262                           
  4263                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4264  157F  3009               	movlw	9
  4265  1580  3191  212A  3195   	fcall	_getTemp_AD
  4266  1583                     l10937:	
  4267                           
  4268                           ;Main_B1.c: 57: }
  4269                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4270  1583  0022               	movlb	2	; select bank2
  4271  1584  1C31               	btfss	_Timer1^(0+256),0
  4272  1585  2D78               	goto	l10933
  4273                           
  4274                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4275  1586  1031               	bcf	_Timer1^(0+256),0
  4276                           
  4277                           ;Main_B1.c: 96: my_MainTimer();
  4278  1587  3192  22D6  3195   	fcall	_my_MainTimer
  4279                           
  4280                           ;Main_B1.c: 97: WDT_Main();
  4281  158A  3188  2000  3195   	fcall	_WDT_Main
  4282                           
  4283                           ;Main_B1.c: 98: ;;
  4284                           ;Main_B1.c: 99: ;;
  4285                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4286  158D  0021               	movlb	1	; select bank1
  4287  158E  1C2F               	btfss	_myMain^(0+128),0
  4288  158F  2D78               	goto	l10933
  4289                           
  4290                           ;Main_B1.c: 101: Flash_Memory_Main();
  4291  1590  3193  23CC  3195   	fcall	_Flash_Memory_Main
  4292                           
  4293                           ;Main_B1.c: 103: LED_Main();
  4294  1593  319A  2280  3195   	fcall	_LED_Main
  4295                           
  4296                           ;Main_B1.c: 104: Buzzer_Main();
  4297  1596  3187  27AE  3195   	fcall	_Buzzer_Main
  4298                           
  4299                           ;Main_B1.c: 106: ;;
  4300                           ;Main_B1.c: 107: Temp_Main();
  4301  1599  319A  2271  3195   	fcall	_Temp_Main
  4302                           
  4303                           ;Main_B1.c: 108: Load_Main();
  4304  159C  3180  204B  3195   	fcall	_Load_Main
  4305                           
  4306                           ;Main_B1.c: 109: ;;
  4307                           ;Main_B1.c: 111: ;;
  4308                           ;Main_B1.c: 112: DimmerLights_Main();
  4309  159F  319E  267F  3195   	fcall	_DimmerLights_Main
  4310                           
  4311                           ;Main_B1.c: 113: Switch_Main();
  4312  15A2  319A  22C1  3195   	fcall	_Switch_Main
  4313                           
  4314                           ;Main_B1.c: 114: ;;
  4315                           ;Main_B1.c: 115: ;;
  4316                           ;Main_B1.c: 117: RF_Main();
  4317  15A5  319A  226B  3195   	fcall	_RF_Main
  4318                           
  4319                           ;Main_B1.c: 118: DelayOff_Main();
  4320  15A8  319A  2278  3195   	fcall	_DelayOff_Main
  4321                           
  4322                           ;Main_B1.c: 119: ;;
  4323                           ;Main_B1.c: 120: ;;
  4324                           ;Main_B1.c: 121: Exception_Main();
  4325  15AB  3185  254C  3195   	fcall	_Exception_Main
  4326  15AE  2D78               	goto	l10933
  4327  15AF                     __end_of_main:	
  4328                           ;Main_B1.c: 128: }
  4329                           ;Main_B1.c: 129: }
  4330                           ;Main_B1.c: 163: }
  4331                           ;Main_B1.c: 164: return (0);
  4332                           ;	Return value of _main is never used
  4333                           
  4334                           
  4335                           	psect	text1
  4336  12D6                     __ptext1:	
  4337 ;; *************** function _my_MainTimer *****************
  4338 ;; Defined at:
  4339 ;;		line 185 in file "../src/Main_B1.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;		None               void
  4346 ;; Registers used:
  4347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;Total ram usage:        1 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    7
  4360 ;; This function calls:
  4361 ;;		_setBuz
  4362 ;; This function is called by:
  4363 ;;		_main
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           
  4368                           ;psect for function _my_MainTimer
  4369  12D6                     _my_MainTimer:	
  4370                           
  4371                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4372                           
  4373                           ;incstack = 0
  4374                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4375  12D6  0021               	movlb	1	; select bank1
  4376  12D7  182F               	btfsc	_myMain^(0+128),0
  4377  12D8  2AF0               	goto	l10615
  4378                           
  4379                           ;Main_B1.c: 188: myMain.PowerCount++;
  4380  12D9  3001               	movlw	1
  4381  12DA  0020               	movlb	0	; select bank0
  4382  12DB  00AD               	movwf	??_my_MainTimer
  4383  12DC  082D               	movf	??_my_MainTimer,w
  4384  12DD  0021               	movlb	1	; select bank1
  4385  12DE  07B0               	addwf	(_myMain^(0+128)+1),f
  4386                           
  4387                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4388  12DF  0830               	movf	(_myMain^(0+128)+1),w
  4389  12E0  3A4B               	xorlw	75
  4390  12E1  1D03               	skipz
  4391  12E2  0008               	return
  4392                           
  4393                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4394  12E3  01B0               	clrf	(_myMain^(0+128)+1)
  4395                           
  4396                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4397  12E4  142F               	bsf	_myMain^(0+128),0
  4398                           
  4399                           ;Main_B1.c: 196: setBuz(3, 50);
  4400  12E5  3032               	movlw	50
  4401  12E6  0020               	movlb	0	; select bank0
  4402  12E7  00A9               	movwf	setBuz@time
  4403  12E8  3000               	movlw	0
  4404  12E9  00AA               	movwf	setBuz@time+1
  4405  12EA  3003               	movlw	3
  4406  12EB  3194  24FB         	fcall	_setBuz
  4407                           
  4408                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4409  12ED  0021               	movlb	1	; select bank1
  4410  12EE  162F               	bsf	_myMain^(0+128),4
  4411                           
  4412                           ;Main_B1.c: 206: }
  4413                           ;Main_B1.c: 207: } else {
  4414  12EF  0008               	return
  4415  12F0                     l10615:	
  4416                           
  4417                           ;Main_B1.c: 208: myMain.PowerCount++;
  4418  12F0  3001               	movlw	1
  4419  12F1  0020               	movlb	0	; select bank0
  4420  12F2  00AD               	movwf	??_my_MainTimer
  4421  12F3  082D               	movf	??_my_MainTimer,w
  4422  12F4  0021               	movlb	1	; select bank1
  4423  12F5  07B0               	addwf	(_myMain^(0+128)+1),f
  4424                           
  4425                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4426  12F6  0830               	movf	(_myMain^(0+128)+1),w
  4427  12F7  3A32               	xorlw	50
  4428  12F8  1903               	btfsc	3,2
  4429                           
  4430                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4431  12F9  01B0               	clrf	(_myMain^(0+128)+1)
  4432                           
  4433                           ;Main_B1.c: 226: }
  4434                           ;Main_B1.c: 228: myMain.Count1++;
  4435  12FA  3001               	movlw	1
  4436  12FB  07B3               	addwf	(_myMain^(0+128)+4),f
  4437  12FC  3000               	movlw	0
  4438  12FD  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4439                           
  4440                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4441  12FE  3004               	movlw	4
  4442  12FF  3EAF               	addlw	_myMain& (0+255)
  4443  1300  0086               	movwf	6
  4444  1301  0187               	clrf	7
  4445  1302  3F40               	moviw [0]fsr1
  4446  1303  3A32               	xorlw	50
  4447  1304  1D03               	skipz
  4448  1305  2B08               	goto	u12305
  4449  1306  3F41               	moviw [1]fsr1
  4450  1307  3A00               	xorlw	0
  4451  1308                     u12305:	
  4452  1308  1D03               	skipz
  4453  1309  0008               	return
  4454                           
  4455                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4456  130A  01B3               	clrf	(_myMain^(0+128)+4)
  4457  130B  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4458                           
  4459                           ;Main_B1.c: 242: if (myMain.Flag) {
  4460  130C  1CAF               	btfss	_myMain^(0+128),1
  4461  130D  2B10               	goto	l1446
  4462                           
  4463                           ;Main_B1.c: 243: myMain.Flag = 0;
  4464  130E  10AF               	bcf	_myMain^(0+128),1
  4465                           
  4466                           ;Main_B1.c: 252: } else {
  4467  130F  0008               	return
  4468  1310                     l1446:	
  4469                           
  4470                           ;Main_B1.c: 253: myMain.Flag = 1;
  4471  1310  14AF               	bsf	_myMain^(0+128),1
  4472  1311  0008               	return
  4473  1312                     __end_of_my_MainTimer:	
  4474                           
  4475                           	psect	text2
  4476  1D0D                     __ptext2:	
  4477 ;; *************** function _myMain_Initialization *****************
  4478 ;; Defined at:
  4479 ;;		line 170 in file "../src/Main_B1.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;		None
  4484 ;; Return value:  Size  Location     Type
  4485 ;;		None               void
  4486 ;; Registers used:
  4487 ;;		wreg, fsr1l, fsr1h
  4488 ;; Tracked objects:
  4489 ;;		On entry : 0/0
  4490 ;;		On exit  : 0/0
  4491 ;;		Unchanged: 0/0
  4492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;Total ram usage:        1 bytes
  4498 ;; Hardware stack levels used:    1
  4499 ;; Hardware stack levels required when called:    5
  4500 ;; This function calls:
  4501 ;;		Nothing
  4502 ;; This function is called by:
  4503 ;;		_main
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _myMain_Initialization
  4509  1D0D                     _myMain_Initialization:	
  4510                           
  4511                           ;Main_B1.c: 173: product = &_product;
  4512                           
  4513                           ;incstack = 0
  4514                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4515  1D0D  3020               	movlw	__product& (0+255)
  4516  1D0E  0020               	movlb	0	; select bank0
  4517  1D0F  00A0               	movwf	??_myMain_Initialization
  4518  1D10  0820               	movf	??_myMain_Initialization,w
  4519  1D11  0021               	movlb	1	; select bank1
  4520  1D12  00EC               	movwf	_product^(0+128)
  4521                           
  4522                           ;Main_B1.c: 174: product->Data[20] = 209;
  4523  1D13  30D1               	movlw	209
  4524  1D14  0020               	movlb	0	; select bank0
  4525  1D15  00A0               	movwf	??_myMain_Initialization
  4526  1D16  0021               	movlb	1	; select bank1
  4527  1D17  086C               	movf	_product^(0+128),w
  4528  1D18  3E14               	addlw	20
  4529  1D19  0086               	movwf	6
  4530  1D1A  3002               	movlw	2	; select bank4/5
  4531  1D1B  0087               	movwf	7
  4532  1D1C  0020               	movlb	0	; select bank0
  4533  1D1D  0820               	movf	??_myMain_Initialization,w
  4534  1D1E  0081               	movwf	1
  4535  1D1F  0008               	return
  4536  1D20                     __end_of_myMain_Initialization:	
  4537                           
  4538                           	psect	text3
  4539  112A                     __ptext3:	
  4540 ;; *************** function _getTemp_AD *****************
  4541 ;; Defined at:
  4542 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;  channel         1    wreg     unsigned char 
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;  channel         1    5[BANK0 ] unsigned char 
  4547 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4548 ;; Return value:  Size  Location     Type
  4549 ;;		None               void
  4550 ;; Registers used:
  4551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4560 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4561 ;;Total ram usage:        4 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:    7
  4564 ;; This function calls:
  4565 ;;		_getAD
  4566 ;; This function is called by:
  4567 ;;		_main
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           
  4572                           ;psect for function _getTemp_AD
  4573  112A                     _getTemp_AD:	
  4574                           
  4575                           ;incstack = 0
  4576                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4577                           ;getTemp_AD@channel stored from wreg
  4578  112A  0020               	movlb	0	; select bank0
  4579  112B  00A5               	movwf	getTemp_AD@channel
  4580                           
  4581                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4582  112C  01A6               	clrf	getTemp_AD@ADRES
  4583  112D  01A7               	clrf	getTemp_AD@ADRES+1
  4584                           
  4585                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4586  112E  0021               	movlb	1	; select bank1
  4587  112F  1D5A               	btfss	_Temp^(0+128),2
  4588  1130  0008               	return
  4589                           
  4590                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4591  1131  30F0               	movlw	240
  4592  1132  0020               	movlb	0	; select bank0
  4593  1133  00A4               	movwf	??_getTemp_AD
  4594  1134  0824               	movf	??_getTemp_AD,w
  4595  1135  00A0               	movwf	getAD@adcon1
  4596  1136  0825               	movf	getTemp_AD@channel,w
  4597  1137  319F  2713  3191   	fcall	_getAD
  4598  113A  0020               	movlb	0	; select bank0
  4599  113B  0821               	movf	?_getAD+1,w
  4600  113C  01A7               	clrf	getTemp_AD@ADRES+1
  4601  113D  07A7               	addwf	getTemp_AD@ADRES+1,f
  4602  113E  0820               	movf	?_getAD,w
  4603  113F  01A6               	clrf	getTemp_AD@ADRES
  4604  1140  07A6               	addwf	getTemp_AD@ADRES,f
  4605                           
  4606                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4607  1141  0827               	movf	getTemp_AD@ADRES+1,w
  4608  1142  0426               	iorwf	getTemp_AD@ADRES,w
  4609  1143  1903               	skipnz
  4610  1144  0008               	return
  4611                           
  4612                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4613  1145  0827               	movf	getTemp_AD@ADRES+1,w
  4614  1146  0021               	movlb	1	; select bank1
  4615  1147  0263               	subwf	((_Temp+1)^(0+128)+8),w
  4616  1148  1D03               	skipz
  4617  1149  294E               	goto	u12265
  4618  114A  0020               	movlb	0	; select bank0
  4619  114B  0826               	movf	getTemp_AD@ADRES,w
  4620  114C  0021               	movlb	1	; select bank1
  4621  114D  0262               	subwf	(_Temp^(0+128)+8),w
  4622  114E                     u12265:	
  4623  114E  1803               	skipnc
  4624  114F  0008               	return
  4625                           
  4626                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4627  1150  0020               	movlb	0	; select bank0
  4628  1151  0827               	movf	getTemp_AD@ADRES+1,w
  4629  1152  0021               	movlb	1	; select bank1
  4630  1153  01E3               	clrf	((_Temp+1)^(0+128)+8)
  4631  1154  07E3               	addwf	((_Temp+1)^(0+128)+8),f
  4632  1155  0020               	movlb	0	; select bank0
  4633  1156  0826               	movf	getTemp_AD@ADRES,w
  4634  1157  0021               	movlb	1	; select bank1
  4635  1158  01E2               	clrf	(_Temp^(0+128)+8)
  4636  1159  07E2               	addwf	(_Temp^(0+128)+8),f
  4637  115A  0008               	return
  4638  115B                     __end_of_getTemp_AD:	
  4639                           
  4640                           	psect	text4
  4641  0A33                     __ptext4:	
  4642 ;; *************** function _getLoad_AD *****************
  4643 ;; Defined at:
  4644 ;;		line 16 in file "../src/OverLoad_B1.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  channel         1    wreg     unsigned char 
  4647 ;; Auto vars:     Size  Location     Type
  4648 ;;  channel         1    6[BANK0 ] unsigned char 
  4649 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4650 ;;  i               1   11[BANK0 ] unsigned char 
  4651 ;;  j               1    8[BANK0 ] unsigned char 
  4652 ;;  k               1    7[BANK0 ] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;		None               void
  4655 ;; Registers used:
  4656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;Total ram usage:        8 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    7
  4669 ;; This function calls:
  4670 ;;		_getAD
  4671 ;; This function is called by:
  4672 ;;		_main
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           
  4677                           ;psect for function _getLoad_AD
  4678  0A33                     _getLoad_AD:	
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4682                           ;getLoad_AD@channel stored from wreg
  4683  0A33  0020               	movlb	0	; select bank0
  4684  0A34  00A6               	movwf	getLoad_AD@channel
  4685                           
  4686                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4687  0A35  01AB               	clrf	getLoad_AD@i
  4688  0A36  01A8               	clrf	getLoad_AD@j
  4689  0A37  01A7               	clrf	getLoad_AD@k
  4690                           
  4691                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4692  0A38  01A9               	clrf	getLoad_AD@ADRES
  4693  0A39  01AA               	clrf	getLoad_AD@ADRES+1
  4694                           
  4695                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4696  0A3A  0022               	movlb	2	; select bank2
  4697  0A3B  1E36               	btfss	_Load^(0+256),4
  4698  0A3C  0008               	return
  4699                           
  4700                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4701  0A3D  30F3               	movlw	243
  4702  0A3E  0020               	movlb	0	; select bank0
  4703  0A3F  00A4               	movwf	??_getLoad_AD
  4704  0A40  0824               	movf	??_getLoad_AD,w
  4705  0A41  00A0               	movwf	getAD@adcon1
  4706  0A42  0826               	movf	getLoad_AD@channel,w
  4707  0A43  319F  2713  318A   	fcall	_getAD
  4708  0A46  0020               	movlb	0	; select bank0
  4709  0A47  0821               	movf	?_getAD+1,w
  4710  0A48  01AA               	clrf	getLoad_AD@ADRES+1
  4711  0A49  07AA               	addwf	getLoad_AD@ADRES+1,f
  4712  0A4A  0820               	movf	?_getAD,w
  4713  0A4B  01A9               	clrf	getLoad_AD@ADRES
  4714  0A4C  07A9               	addwf	getLoad_AD@ADRES,f
  4715                           
  4716                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4717  0A4D  01AB               	clrf	getLoad_AD@i
  4718  0A4E  3004               	movlw	4
  4719  0A4F  022B               	subwf	getLoad_AD@i,w
  4720  0A50  1803               	btfsc	3,0
  4721  0A51  2A79               	goto	l10569
  4722  0A52                     l10557:	
  4723                           
  4724                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4725  0A52  352B               	lslf	getLoad_AD@i,w
  4726  0A53  3E41               	addlw	(_Load+11)& (0+255)
  4727  0A54  0086               	movwf	6
  4728  0A55  3001               	movlw	1	; select bank2/3
  4729  0A56  0087               	movwf	7
  4730  0A57  3F40               	moviw [0]fsr1
  4731  0A58  00A4               	movwf	??_getLoad_AD
  4732  0A59  3F41               	moviw [1]fsr1
  4733  0A5A  00A5               	movwf	??_getLoad_AD+1
  4734  0A5B  082A               	movf	getLoad_AD@ADRES+1,w
  4735  0A5C  0225               	subwf	??_getLoad_AD+1,w
  4736  0A5D  1D03               	skipz
  4737  0A5E  2A61               	goto	u12165
  4738  0A5F  0829               	movf	getLoad_AD@ADRES,w
  4739  0A60  0224               	subwf	??_getLoad_AD,w
  4740  0A61                     u12165:	
  4741  0A61  1803               	skipnc
  4742  0A62  2A71               	goto	l10565
  4743  0A63  08A8               	movf	getLoad_AD@j,f
  4744  0A64  1D03               	skipz
  4745  0A65  2A71               	goto	l10565
  4746                           
  4747                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4748  0A66  352B               	lslf	getLoad_AD@i,w
  4749  0A67  3E41               	addlw	(_Load+11)& (0+255)
  4750  0A68  0086               	movwf	6
  4751  0A69  3001               	movlw	1	; select bank2/3
  4752  0A6A  0087               	movwf	7
  4753  0A6B  0829               	movf	getLoad_AD@ADRES,w
  4754  0A6C  3FC0               	movwi [0]fsr1
  4755  0A6D  082A               	movf	getLoad_AD@ADRES+1,w
  4756  0A6E  3FC1               	movwi [1]fsr1
  4757                           
  4758                           ;OverLoad_B1.c: 25: j = 1;
  4759  0A6F  01A8               	clrf	getLoad_AD@j
  4760  0A70  0AA8               	incf	getLoad_AD@j,f
  4761  0A71                     l10565:	
  4762  0A71  3001               	movlw	1
  4763  0A72  00A4               	movwf	??_getLoad_AD
  4764  0A73  0824               	movf	??_getLoad_AD,w
  4765  0A74  07AB               	addwf	getLoad_AD@i,f
  4766  0A75  3004               	movlw	4
  4767  0A76  022B               	subwf	getLoad_AD@i,w
  4768  0A77  1C03               	skipc
  4769  0A78  2A52               	goto	l10557
  4770  0A79                     l10569:	
  4771                           
  4772                           ;OverLoad_B1.c: 26: }
  4773                           ;OverLoad_B1.c: 27: }
  4774                           ;OverLoad_B1.c: 28: if (j == 0) {
  4775  0A79  08A8               	movf	getLoad_AD@j,f
  4776  0A7A  1D03               	skipz
  4777  0A7B  0008               	return
  4778                           
  4779                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4780  0A7C  01AB               	clrf	getLoad_AD@i
  4781  0A7D                     L1:	
  4782  0A7D  3004               	movlw	4
  4783  0A7E  022B               	subwf	getLoad_AD@i,w
  4784  0A7F  1803               	btfsc	3,0
  4785  0A80  0008               	return
  4786                           
  4787                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4788  0A81  352B               	lslf	getLoad_AD@i,w
  4789  0A82  3E4B               	addlw	(_Load+21)& (0+255)
  4790  0A83  0086               	movwf	6
  4791  0A84  3001               	movlw	1	; select bank2/3
  4792  0A85  0087               	movwf	7
  4793  0A86  3F40               	moviw [0]fsr1
  4794  0A87  00A4               	movwf	??_getLoad_AD
  4795  0A88  3F41               	moviw [1]fsr1
  4796  0A89  00A5               	movwf	??_getLoad_AD+1
  4797  0A8A  0825               	movf	??_getLoad_AD+1,w
  4798  0A8B  022A               	subwf	getLoad_AD@ADRES+1,w
  4799  0A8C  1D03               	skipz
  4800  0A8D  2A90               	goto	u12215
  4801  0A8E  0824               	movf	??_getLoad_AD,w
  4802  0A8F  0229               	subwf	getLoad_AD@ADRES,w
  4803  0A90                     u12215:	
  4804  0A90  1803               	skipnc
  4805  0A91  2AA0               	goto	l10585
  4806  0A92  08A7               	movf	getLoad_AD@k,f
  4807  0A93  1D03               	skipz
  4808  0A94  2AA0               	goto	l10585
  4809                           
  4810                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4811  0A95  352B               	lslf	getLoad_AD@i,w
  4812  0A96  3E4B               	addlw	(_Load+21)& (0+255)
  4813  0A97  0086               	movwf	6
  4814  0A98  3001               	movlw	1	; select bank2/3
  4815  0A99  0087               	movwf	7
  4816  0A9A  0829               	movf	getLoad_AD@ADRES,w
  4817  0A9B  3FC0               	movwi [0]fsr1
  4818  0A9C  082A               	movf	getLoad_AD@ADRES+1,w
  4819  0A9D  3FC1               	movwi [1]fsr1
  4820                           
  4821                           ;OverLoad_B1.c: 32: k = 1;
  4822  0A9E  01A7               	clrf	getLoad_AD@k
  4823  0A9F  0AA7               	incf	getLoad_AD@k,f
  4824  0AA0                     l10585:	
  4825  0AA0  3001               	movlw	1
  4826  0AA1  00A4               	movwf	??_getLoad_AD
  4827  0AA2  0824               	movf	??_getLoad_AD,w
  4828  0AA3  07AB               	addwf	getLoad_AD@i,f
  4829  0AA4  2A7D               	goto	L1
  4830  0AA5                     __end_of_getLoad_AD:	
  4831                           
  4832                           	psect	text5
  4833  1F13                     __ptext5:	
  4834 ;; *************** function _getAD *****************
  4835 ;; Defined at:
  4836 ;;		line 461 in file "../src/MCU_B1.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  adcon0          1    wreg     unsigned char 
  4839 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  2    0[BANK0 ] int 
  4844 ;; Registers used:
  4845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4851 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4855 ;;Total ram usage:        4 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    6
  4858 ;; This function calls:
  4859 ;;		_Timeout_Counter
  4860 ;;		_set_TimeoutCleared
  4861 ;; This function is called by:
  4862 ;;		_getLoad_AD
  4863 ;;		_getTemp_AD
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867                           
  4868                           ;psect for function _getAD
  4869  1F13                     _getAD:	
  4870                           
  4871                           ;incstack = 0
  4872                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4873                           ;getAD@adcon0 stored from wreg
  4874  1F13  0020               	movlb	0	; select bank0
  4875  1F14  00A3               	movwf	getAD@adcon0
  4876                           
  4877                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4878  1F15  0823               	movf	getAD@adcon0,w
  4879  1F16  0021               	movlb	1	; select bank1
  4880  1F17  009D               	movwf	29	;volatile
  4881                           
  4882                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4883  1F18  0020               	movlb	0	; select bank0
  4884  1F19  0820               	movf	getAD@adcon1,w
  4885  1F1A  0021               	movlb	1	; select bank1
  4886  1F1B  009E               	movwf	30	;volatile
  4887                           
  4888                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4889  1F1C  149D               	bsf	29,1	;volatile
  4890                           
  4891                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4892  1F1D  2F21               	goto	l10045
  4893  1F1E                     l10043:	
  4894                           
  4895                           ;MCU_B1.c: 466: Timeout_Counter();
  4896  1F1E  319D  255E  319F   	fcall	_Timeout_Counter
  4897  1F21                     l10045:	
  4898  1F21  0021               	movlb	1	; select bank1
  4899  1F22  1C9D               	btfss	29,1	;volatile
  4900  1F23  2F26               	goto	l10049
  4901  1F24  1D39               	btfss	(_myMain^(0+128)+10),2
  4902  1F25  2F1E               	goto	l10043
  4903  1F26                     l10049:	
  4904                           
  4905                           ;MCU_B1.c: 467: };
  4906                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4907  1F26  319A  229C         	fcall	_set_TimeoutCleared
  4908                           
  4909                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4910  1F28  0021               	movlb	1	; select bank1
  4911  1F29  081C               	movf	28,w	;volatile
  4912  1F2A  0020               	movlb	0	; select bank0
  4913  1F2B  01A1               	clrf	?_getAD+1
  4914  1F2C  07A1               	addwf	?_getAD+1,f
  4915  1F2D  0021               	movlb	1	; select bank1
  4916  1F2E  081B               	movf	27,w	;volatile
  4917  1F2F  0020               	movlb	0	; select bank0
  4918  1F30  01A0               	clrf	?_getAD
  4919  1F31  07A0               	addwf	?_getAD,f
  4920  1F32  0008               	return
  4921  1F33                     __end_of_getAD:	
  4922                           
  4923                           	psect	text6
  4924  0800                     __ptext6:	
  4925 ;; *************** function _WDT_Main *****************
  4926 ;; Defined at:
  4927 ;;		line 1116 in file "../src/MCU_B1.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;		None
  4930 ;; Auto vars:     Size  Location     Type
  4931 ;;		None
  4932 ;; Return value:  Size  Location     Type
  4933 ;;		None               void
  4934 ;; Registers used:
  4935 ;;		wreg, status,2, status,0, pclath, cstack
  4936 ;; Tracked objects:
  4937 ;;		On entry : 0/0
  4938 ;;		On exit  : 0/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4944 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4945 ;;Total ram usage:        1 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; Hardware stack levels required when called:    6
  4948 ;; This function calls:
  4949 ;;		_WDT_Clearing
  4950 ;; This function is called by:
  4951 ;;		_main
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           
  4956                           ;psect for function _WDT_Main
  4957  0800                     _WDT_Main:	
  4958                           
  4959                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4960                           
  4961                           ;incstack = 0
  4962                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4963  0800  0021               	movlb	1	; select bank1
  4964  0801  1C48               	btfss	_WDT^(0+128),0
  4965  0802  0008               	return
  4966                           
  4967                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  4968  0803  3001               	movlw	1
  4969  0804  02C9               	subwf	(_WDT^(0+128)+1),f
  4970  0805  0849               	movf	(_WDT^(0+128)+1),w
  4971  0806  3AFF               	xorlw	255
  4972  0807  1903               	skipnz
  4973  0808  0008               	return
  4974                           
  4975                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  4976  0809  3064               	movlw	100
  4977  080A  0020               	movlb	0	; select bank0
  4978  080B  00A0               	movwf	??_WDT_Main
  4979  080C  0820               	movf	??_WDT_Main,w
  4980  080D  0021               	movlb	1	; select bank1
  4981  080E  00C9               	movwf	(_WDT^(0+128)+1)
  4982                           
  4983                           ;MCU_B1.c: 1120: WDT_Clearing();
  4984  080F  3180  2002         	fcall	_WDT_Clearing
  4985  0811  0008               	return
  4986  0812                     __end_of_WDT_Main:	
  4987                           
  4988                           	psect	text7
  4989  0002                     __ptext7:	
  4990 ;; *************** function _WDT_Clearing *****************
  4991 ;; Defined at:
  4992 ;;		line 1126 in file "../src/MCU_B1.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;		None
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;		None
  4997 ;; Return value:  Size  Location     Type
  4998 ;;		None               void
  4999 ;; Registers used:
  5000 ;;		None
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;Total ram usage:        0 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    5
  5013 ;; This function calls:
  5014 ;;		Nothing
  5015 ;; This function is called by:
  5016 ;;		_WDT_Main
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           
  5021                           ;psect for function _WDT_Clearing
  5022  0002                     _WDT_Clearing:	
  5023                           
  5024                           ;incstack = 0
  5025                           ; Regs used in _WDT_Clearing: []
  5026  0002  0064               	clrwdt	;# 
  5027  0003  0008               	return
  5028  0004                     __end_of_WDT_Clearing:	
  5029                           
  5030                           	psect	text8
  5031  1A71                     __ptext8:	
  5032 ;; *************** function _Temp_Main *****************
  5033 ;; Defined at:
  5034 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;		None               void
  5041 ;; Registers used:
  5042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;Total ram usage:        0 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    8
  5055 ;; This function calls:
  5056 ;;		_setTemp_Main
  5057 ;; This function is called by:
  5058 ;;		_main
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _Temp_Main
  5064  1A71                     _Temp_Main:	
  5065                           
  5066                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5070  1A71  318D  25E0         	fcall	_setTemp_Main
  5071  1A73  0008               	return
  5072  1A74                     __end_of_Temp_Main:	
  5073                           
  5074                           	psect	text9
  5075  0DE0                     __ptext9:	
  5076 ;; *************** function _setTemp_Main *****************
  5077 ;; Defined at:
  5078 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;		None
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  AD              2   76[BANK0 ] unsigned int 
  5083 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5084 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5085 ;;  TempGO          1   71[BANK0 ] unsigned char 
  5086 ;;  error           1   70[BANK0 ] unsigned char 
  5087 ;; Return value:  Size  Location     Type
  5088 ;;		None               void
  5089 ;; Registers used:
  5090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;Total ram usage:        9 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    7
  5103 ;; This function calls:
  5104 ;;		_getMain_All_Error_Status
  5105 ;;		_getMain_All_LightsStatus
  5106 ;;		_setBuz
  5107 ;;		_setProductData
  5108 ;; This function is called by:
  5109 ;;		_Temp_Main
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           
  5114                           ;psect for function _setTemp_Main
  5115  0DE0                     _setTemp_Main:	
  5116                           
  5117                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5118                           
  5119                           ;incstack = 0
  5120                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5121  0DE0  3000               	movlw	0
  5122  0DE1  3191  215B  318D   	fcall	_getMain_All_Error_Status
  5123  0DE4  0020               	movlb	0	; select bank0
  5124  0DE5  00E5               	movwf	??_setTemp_Main
  5125  0DE6  0865               	movf	??_setTemp_Main,w
  5126  0DE7  00E6               	movwf	setTemp_Main@error
  5127                           
  5128                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5129  0DE8  01E8               	clrf	setTemp_Main@SafeValue
  5130  0DE9  01E9               	clrf	setTemp_Main@SafeValue+1
  5131  0DEA  01EA               	clrf	setTemp_Main@DangerValue
  5132  0DEB  01EB               	clrf	setTemp_Main@DangerValue+1
  5133                           
  5134                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5135  0DEC  319A  22F3  318D   	fcall	_getMain_All_LightsStatus
  5136  0DEF  0020               	movlb	0	; select bank0
  5137  0DF0  00E5               	movwf	??_setTemp_Main
  5138  0DF1  0865               	movf	??_setTemp_Main,w
  5139  0DF2  00E7               	movwf	setTemp_Main@TempGO
  5140                           
  5141                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5142  0DF3  0021               	movlb	1	; select bank1
  5143  0DF4  1C5A               	btfss	_Temp^(0+128),0
  5144  0DF5  2E8D               	goto	l1785
  5145                           
  5146                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5147  0DF6  195A               	btfsc	_Temp^(0+128),2
  5148  0DF7  2E15               	goto	l10149
  5149                           
  5150                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5151  0DF8  0020               	movlb	0	; select bank0
  5152  0DF9  0867               	movf	setTemp_Main@TempGO,w
  5153  0DFA  3A01               	xorlw	1
  5154  0DFB  1D03               	skipz
  5155  0DFC  2E00               	goto	l1791
  5156  0DFD  0021               	movlb	1	; select bank1
  5157  0DFE  1CDA               	btfss	_Temp^(0+128),1
  5158  0DFF  2E03               	goto	l10141
  5159  0E00                     l1791:	
  5160  0E00  0021               	movlb	1	; select bank1
  5161  0E01  1CDA               	btfss	_Temp^(0+128),1
  5162  0E02  2E12               	goto	l10147
  5163  0E03                     l10141:	
  5164                           
  5165                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5166  0E03  3001               	movlw	1
  5167  0E04  07DB               	addwf	(_Temp^(0+128)+1),f
  5168  0E05  3000               	movlw	0
  5169  0E06  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  5170                           
  5171                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5172  0E07  3000               	movlw	0
  5173  0E08  025C               	subwf	((_Temp+1)^(0+128)+1),w
  5174  0E09  30FA               	movlw	250
  5175  0E0A  1903               	skipnz
  5176  0E0B  025B               	subwf	(_Temp^(0+128)+1),w
  5177  0E0C  1C03               	skipc
  5178  0E0D  0008               	return
  5179                           
  5180                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5181  0E0E  01DB               	clrf	(_Temp^(0+128)+1)
  5182  0E0F  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5183                           
  5184                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5185  0E10  155A               	bsf	_Temp^(0+128),2
  5186                           
  5187                           ;OverTemperature_B1.c: 83: }
  5188                           ;OverTemperature_B1.c: 84: } else {
  5189  0E11  0008               	return
  5190  0E12                     l10147:	
  5191                           
  5192                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5193  0E12  01DB               	clrf	(_Temp^(0+128)+1)
  5194  0E13  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5195                           
  5196                           ;OverTemperature_B1.c: 86: }
  5197                           ;OverTemperature_B1.c: 87: } else {
  5198  0E14  0008               	return
  5199  0E15                     l10149:	
  5200                           
  5201                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5202  0E15  3001               	movlw	1
  5203  0E16  07DB               	addwf	(_Temp^(0+128)+1),f
  5204  0E17  3000               	movlw	0
  5205  0E18  3DDC               	addwfc	((_Temp+1)^(0+128)+1),f
  5206                           
  5207                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5208  0E19  3000               	movlw	0
  5209  0E1A  025C               	subwf	((_Temp+1)^(0+128)+1),w
  5210  0E1B  3005               	movlw	5
  5211  0E1C  1903               	skipnz
  5212  0E1D  025B               	subwf	(_Temp^(0+128)+1),w
  5213  0E1E  1C03               	skipc
  5214  0E1F  0008               	return
  5215                           
  5216                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5217  0E20  01DB               	clrf	(_Temp^(0+128)+1)
  5218  0E21  01DC               	clrf	((_Temp+1)^(0+128)+1)
  5219                           
  5220                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5221  0E22  3008               	movlw	8
  5222  0E23  3EDA               	addlw	_Temp& (0+255)
  5223  0E24  0086               	movwf	6
  5224  0E25  0187               	clrf	7
  5225  0E26  0016               	moviw fsr1++
  5226  0E27  0401               	iorwf	1,w
  5227  0E28  1903               	skipnz
  5228  0E29  2E85               	goto	l1796
  5229                           
  5230                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5231  0E2A  115A               	bcf	_Temp^(0+128),2
  5232                           
  5233                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5234  0E2B  0863               	movf	((_Temp+1)^(0+128)+8),w
  5235  0E2C  0020               	movlb	0	; select bank0
  5236  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5237  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5238  0E2F  0021               	movlb	1	; select bank1
  5239  0E30  0862               	movf	(_Temp^(0+128)+8),w
  5240  0E31  0020               	movlb	0	; select bank0
  5241  0E32  01EC               	clrf	setTemp_Main@AD
  5242  0E33  07EC               	addwf	setTemp_Main@AD,f
  5243                           
  5244                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5245  0E34  3090               	movlw	144
  5246  0E35  00E8               	movwf	setTemp_Main@SafeValue
  5247  0E36  3001               	movlw	1
  5248  0E37  00E9               	movwf	setTemp_Main@SafeValue+1
  5249                           
  5250                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5251  0E38  3059               	movlw	89
  5252  0E39  00EA               	movwf	setTemp_Main@DangerValue
  5253  0E3A  3001               	movlw	1
  5254  0E3B  00EB               	movwf	setTemp_Main@DangerValue+1
  5255                           
  5256                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5257  0E3C  0021               	movlb	1	; select bank1
  5258  0E3D  1CDA               	btfss	_Temp^(0+128),1
  5259  0E3E  2E5D               	goto	l10179
  5260                           
  5261                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5262  0E3F  0020               	movlb	0	; select bank0
  5263  0E40  0869               	movf	setTemp_Main@SafeValue+1,w
  5264  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5265  0E42  1D03               	skipz
  5266  0E43  2E46               	goto	u11485
  5267  0E44  0868               	movf	setTemp_Main@SafeValue,w
  5268  0E45  026C               	subwf	setTemp_Main@AD,w
  5269  0E46                     u11485:	
  5270  0E46  1C03               	skipc
  5271  0E47  2E72               	goto	l10189
  5272                           
  5273                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5274  0E48  3001               	movlw	1
  5275  0E49  00E5               	movwf	??_setTemp_Main
  5276  0E4A  0865               	movf	??_setTemp_Main,w
  5277  0E4B  0021               	movlb	1	; select bank1
  5278  0E4C  07DD               	addwf	(_Temp^(0+128)+3),f
  5279                           
  5280                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5281  0E4D  3003               	movlw	3
  5282  0E4E  025D               	subwf	(_Temp^(0+128)+3),w
  5283  0E4F  1C03               	skipc
  5284  0E50  2E74               	goto	l10191
  5285                           
  5286                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5287  0E51  01DD               	clrf	(_Temp^(0+128)+3)
  5288                           
  5289                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5290  0E52  10DA               	bcf	_Temp^(0+128),1
  5291                           
  5292                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5293  0E53  3064               	movlw	100
  5294  0E54  0020               	movlb	0	; select bank0
  5295  0E55  00A9               	movwf	setBuz@time
  5296  0E56  3000               	movlw	0
  5297  0E57  00AA               	movwf	setBuz@time+1
  5298  0E58  3002               	movlw	2
  5299  0E59  3194  24FB  318D   	fcall	_setBuz
  5300                           
  5301                           ;OverTemperature_B1.c: 126: }
  5302                           ;OverTemperature_B1.c: 127: } else {
  5303  0E5C  2E74               	goto	l10191
  5304  0E5D                     l10179:	
  5305                           ;OverTemperature_B1.c: 129: }
  5306                           ;OverTemperature_B1.c: 130: } else {
  5307                           
  5308                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5309                           
  5310                           
  5311                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5312  0E5D  0020               	movlb	0	; select bank0
  5313  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5314  0E5F  026B               	subwf	setTemp_Main@DangerValue+1,w
  5315  0E60  1D03               	skipz
  5316  0E61  2E64               	goto	u11505
  5317  0E62  086C               	movf	setTemp_Main@AD,w
  5318  0E63  026A               	subwf	setTemp_Main@DangerValue,w
  5319  0E64                     u11505:	
  5320  0E64  1C03               	skipc
  5321  0E65  2E72               	goto	l10189
  5322                           
  5323                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5324  0E66  3001               	movlw	1
  5325  0E67  00E5               	movwf	??_setTemp_Main
  5326  0E68  0865               	movf	??_setTemp_Main,w
  5327  0E69  0021               	movlb	1	; select bank1
  5328  0E6A  07DD               	addwf	(_Temp^(0+128)+3),f
  5329                           
  5330                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5331  0E6B  3003               	movlw	3
  5332  0E6C  025D               	subwf	(_Temp^(0+128)+3),w
  5333  0E6D  1C03               	skipc
  5334  0E6E  2E74               	goto	l10191
  5335                           
  5336                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5337  0E6F  01DD               	clrf	(_Temp^(0+128)+3)
  5338                           
  5339                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5340  0E70  14DA               	bsf	_Temp^(0+128),1
  5341                           
  5342                           ;OverTemperature_B1.c: 136: }
  5343                           ;OverTemperature_B1.c: 137: } else {
  5344  0E71  2E74               	goto	l10191
  5345  0E72                     l10189:	
  5346                           
  5347                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5348  0E72  0021               	movlb	1	; select bank1
  5349  0E73  01DD               	clrf	(_Temp^(0+128)+3)
  5350  0E74                     l10191:	
  5351                           
  5352                           ;OverTemperature_B1.c: 139: }
  5353                           ;OverTemperature_B1.c: 140: }
  5354                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5355  0E74  0020               	movlb	0	; select bank0
  5356  0E75  086D               	movf	setTemp_Main@AD+1,w
  5357  0E76  00E5               	movwf	??_setTemp_Main
  5358  0E77  0865               	movf	??_setTemp_Main,w
  5359  0E78  00E2               	movwf	setProductData@value
  5360  0E79  3018               	movlw	24
  5361  0E7A  319B  234C  318D   	fcall	_setProductData
  5362                           
  5363                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5364  0E7D  0020               	movlb	0	; select bank0
  5365  0E7E  086C               	movf	setTemp_Main@AD,w
  5366  0E7F  00E5               	movwf	??_setTemp_Main
  5367  0E80  0865               	movf	??_setTemp_Main,w
  5368  0E81  00E2               	movwf	setProductData@value
  5369  0E82  3019               	movlw	25
  5370  0E83  319B  234C         	fcall	_setProductData
  5371  0E85                     l1796:	
  5372                           
  5373                           ;OverTemperature_B1.c: 158: }
  5374                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5375  0E85  0021               	movlb	1	; select bank1
  5376  0E86  01DE               	clrf	(_Temp^(0+128)+4)
  5377  0E87  01DF               	clrf	((_Temp+1)^(0+128)+4)
  5378                           
  5379                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5380  0E88  01E0               	clrf	(_Temp^(0+128)+6)
  5381  0E89  01E1               	clrf	((_Temp+1)^(0+128)+6)
  5382                           
  5383                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5384  0E8A  01E2               	clrf	(_Temp^(0+128)+8)
  5385  0E8B  01E3               	clrf	((_Temp+1)^(0+128)+8)
  5386                           
  5387                           ;OverTemperature_B1.c: 162: }
  5388                           ;OverTemperature_B1.c: 163: }
  5389                           ;OverTemperature_B1.c: 166: } else {
  5390  0E8C  0008               	return
  5391  0E8D                     l1785:	
  5392                           
  5393                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5394  0E8D  1C2F               	btfss	_myMain^(0+128),0
  5395  0E8E  0008               	return
  5396                           
  5397                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5398  0E8F  145A               	bsf	_Temp^(0+128),0
  5399  0E90  0008               	return
  5400  0E91                     __end_of_setTemp_Main:	
  5401                           
  5402                           	psect	text10
  5403  1A6E                     __ptext10:	
  5404 ;; *************** function _Temp_Initialization *****************
  5405 ;; Defined at:
  5406 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;		None
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;		None
  5411 ;; Return value:  Size  Location     Type
  5412 ;;		None               void
  5413 ;; Registers used:
  5414 ;;		status,2, status,0, pclath, cstack
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;Total ram usage:        0 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    6
  5427 ;; This function calls:
  5428 ;;		_setTemp_Initialization
  5429 ;; This function is called by:
  5430 ;;		_main
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           
  5435                           ;psect for function _Temp_Initialization
  5436  1A6E                     _Temp_Initialization:	
  5437                           
  5438                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5439                           
  5440                           ;incstack = 0
  5441                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5442  1A6E  319A  2261         	fcall	_setTemp_Initialization
  5443  1A70  0008               	return
  5444  1A71                     __end_of_Temp_Initialization:	
  5445                           
  5446                           	psect	text11
  5447  1A61                     __ptext11:	
  5448 ;; *************** function _setTemp_Initialization *****************
  5449 ;; Defined at:
  5450 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;		None
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;		None
  5455 ;; Return value:  Size  Location     Type
  5456 ;;		None               void
  5457 ;; Registers used:
  5458 ;;		None
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5468 ;;Total ram usage:        0 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    5
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		_Temp_Initialization
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           
  5479                           ;psect for function _setTemp_Initialization
  5480  1A61                     _setTemp_Initialization:	
  5481                           
  5482                           ;incstack = 0
  5483                           ; Regs used in _setTemp_Initialization: []
  5484  1A61  0008               	return
  5485  1A62                     __end_of_setTemp_Initialization:	
  5486                           
  5487                           	psect	text12
  5488  1AC1                     __ptext12:	
  5489 ;; *************** function _Switch_Main *****************
  5490 ;; Defined at:
  5491 ;;		line 76 in file "../src/Switch_B1.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;		None               void
  5498 ;; Registers used:
  5499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5509 ;;Total ram usage:        0 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    9
  5512 ;; This function calls:
  5513 ;;		_TouchPower
  5514 ;;		_setSw_Main
  5515 ;; This function is called by:
  5516 ;;		_main
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           
  5521                           ;psect for function _Switch_Main
  5522  1AC1                     _Switch_Main:	
  5523                           
  5524                           ;Switch_B1.c: 79: setSw_Main(1);
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5528  1AC1  3001               	movlw	1
  5529  1AC2  3181  21FD  319A   	fcall	_setSw_Main
  5530                           
  5531                           ;Switch_B1.c: 91: TouchPower();
  5532  1AC5  319D  2573         	fcall	_TouchPower
  5533  1AC7  0008               	return
  5534  1AC8                     __end_of_Switch_Main:	
  5535                           
  5536                           	psect	text13
  5537  01FD                     __ptext13:	
  5538 ;; *************** function _setSw_Main *****************
  5539 ;; Defined at:
  5540 ;;		line 117 in file "../src/Switch_B1.c"
  5541 ;; Parameters:    Size  Location     Type
  5542 ;;  sw              1    wreg     unsigned char 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  sw              1   17[BANK0 ] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;		None               void
  5547 ;; Registers used:
  5548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5556 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5558 ;;Total ram usage:        3 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    8
  5561 ;; This function calls:
  5562 ;;		_SwPointSelect
  5563 ;;		_getMain_All_Error_Status
  5564 ;;		_getSw_KeyStatus
  5565 ;;		_setBuz
  5566 ;;		_setDimmerLights_DimmingOn
  5567 ;;		_setDimmerLights_SwOff
  5568 ;;		_setDimmerLights_SwOn
  5569 ;;		_setRF_Learn
  5570 ;; This function is called by:
  5571 ;;		_Switch_Main
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function _setSw_Main
  5577  01FD                     _setSw_Main:	
  5578                           
  5579                           ;incstack = 0
  5580                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5581                           ;setSw_Main@sw stored from wreg
  5582  01FD  0020               	movlb	0	; select bank0
  5583  01FE  00B1               	movwf	setSw_Main@sw
  5584                           
  5585                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5586  01FF  0831               	movf	setSw_Main@sw,w
  5587  0200  319B  23AC  3181   	fcall	_SwPointSelect
  5588                           
  5589                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5590  0203  0021               	movlb	1	; select bank1
  5591  0204  0854               	movf	_Sw^(0+128),w
  5592  0205  0086               	movwf	6
  5593  0206  3001               	movlw	1	; select bank2/3
  5594  0207  0087               	movwf	7
  5595  0208  1C01               	btfss	1,0
  5596  0209  2B79               	goto	l2510
  5597                           
  5598                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5599  020A  3000               	movlw	0
  5600  020B  3191  215B  3181   	fcall	_getMain_All_Error_Status
  5601  020E  3800               	iorlw	0
  5602  020F  1D03               	skipz
  5603  0210  2A2F               	goto	l10303
  5604                           
  5605                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5606  0211  0021               	movlb	1	; select bank1
  5607  0212  0A54               	incf	_Sw^(0+128),w
  5608  0213  0086               	movwf	6
  5609  0214  3001               	movlw	1	; select bank2/3
  5610  0215  0087               	movwf	7
  5611  0216  1081               	bcf	1,1
  5612                           
  5613                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5614  0217  0020               	movlb	0	; select bank0
  5615  0218  0831               	movf	setSw_Main@sw,w
  5616  0219  319C  2468  3181   	fcall	_getSw_KeyStatus
  5617  021C  3A01               	xorlw	1
  5618  021D  3000               	movlw	0
  5619  021E  1903               	skipnz
  5620  021F  3001               	movlw	1
  5621  0220  0020               	movlb	0	; select bank0
  5622  0221  00AF               	movwf	??_setSw_Main
  5623  0222  0021               	movlb	1	; select bank1
  5624  0223  0854               	movf	_Sw^(0+128),w
  5625  0224  0086               	movwf	6
  5626  0225  3001               	movlw	1	; select bank2/3
  5627  0226  0087               	movwf	7
  5628  0227  0020               	movlb	0	; select bank0
  5629  0228  0DAF               	rlf	??_setSw_Main,f
  5630  0229  0801               	movf	1,w
  5631  022A  062F               	xorwf	??_setSw_Main,w
  5632  022B  39FD               	andlw	-3
  5633  022C  062F               	xorwf	??_setSw_Main,w
  5634  022D  0081               	movwf	1
  5635                           
  5636                           ;Switch_B1.c: 124: } else {
  5637  022E  2A45               	goto	l2512
  5638  022F                     l10303:	
  5639                           
  5640                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5641  022F  0021               	movlb	1	; select bank1
  5642  0230  0A54               	incf	_Sw^(0+128),w
  5643  0231  0086               	movwf	6
  5644  0232  3001               	movlw	1	; select bank2/3
  5645  0233  0087               	movwf	7
  5646  0234  1881               	btfsc	1,1
  5647  0235  2A45               	goto	l2512
  5648                           
  5649                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5650  0236  0A54               	incf	_Sw^(0+128),w
  5651  0237  0086               	movwf	6
  5652  0238  3001               	movlw	1	; select bank2/3
  5653  0239  0087               	movwf	7
  5654  023A  1481               	bsf	1,1
  5655                           
  5656                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5657  023B  0854               	movf	_Sw^(0+128),w
  5658  023C  0086               	movwf	6
  5659  023D  3001               	movlw	1	; select bank2/3
  5660  023E  0087               	movwf	7
  5661  023F  1081               	bcf	1,1
  5662                           
  5663                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5664  0240  0854               	movf	_Sw^(0+128),w
  5665  0241  0086               	movwf	6
  5666  0242  3001               	movlw	1	; select bank2/3
  5667  0243  0087               	movwf	7
  5668  0244  1501               	bsf	1,2
  5669  0245                     l2512:	
  5670                           
  5671                           ;Switch_B1.c: 130: }
  5672                           ;Switch_B1.c: 131: }
  5673                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5674  0245  0021               	movlb	1	; select bank1
  5675  0246  0854               	movf	_Sw^(0+128),w
  5676  0247  0086               	movwf	6
  5677  0248  3001               	movlw	1	; select bank2/3
  5678  0249  0087               	movwf	7
  5679  024A  1C81               	btfss	1,1
  5680  024B  2B21               	goto	l10353
  5681                           
  5682                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5683  024C  0854               	movf	_Sw^(0+128),w
  5684  024D  0086               	movwf	6
  5685  024E  3001               	movlw	1	; select bank2/3
  5686  024F  0087               	movwf	7
  5687  0250  1901               	btfsc	1,2
  5688  0251  2A78               	goto	l10319
  5689                           
  5690                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5691  0252  3001               	movlw	1
  5692  0253  0020               	movlb	0	; select bank0
  5693  0254  00AF               	movwf	??_setSw_Main
  5694  0255  0021               	movlb	1	; select bank1
  5695  0256  0854               	movf	_Sw^(0+128),w
  5696  0257  3E02               	addlw	2
  5697  0258  0086               	movwf	6
  5698  0259  3001               	movlw	1	; select bank2/3
  5699  025A  0087               	movwf	7
  5700  025B  0020               	movlb	0	; select bank0
  5701  025C  082F               	movf	??_setSw_Main,w
  5702  025D  0781               	addwf	1,f
  5703                           
  5704                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5705  025E  0021               	movlb	1	; select bank1
  5706  025F  0854               	movf	_Sw^(0+128),w
  5707  0260  3E02               	addlw	2
  5708  0261  0086               	movwf	6
  5709  0262  3001               	movlw	1	; select bank2/3
  5710  0263  0087               	movwf	7
  5711  0264  3003               	movlw	3
  5712  0265  0201               	subwf	1,w
  5713  0266  1C03               	skipc
  5714  0267  0008               	return
  5715                           
  5716                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5717  0268  0854               	movf	_Sw^(0+128),w
  5718  0269  3E02               	addlw	2
  5719  026A  0086               	movwf	6
  5720  026B  3001               	movlw	1	; select bank2/3
  5721  026C  0087               	movwf	7
  5722  026D  0181               	clrf	1
  5723                           
  5724                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5725  026E  0854               	movf	_Sw^(0+128),w
  5726  026F  0086               	movwf	6
  5727  0270  3001               	movlw	1	; select bank2/3
  5728  0271  0087               	movwf	7
  5729  0272  1501               	bsf	1,2
  5730                           
  5731                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5732  0273  0020               	movlb	0	; select bank0
  5733  0274  0831               	movf	setSw_Main@sw,w
  5734  0275  3191  21C2         	fcall	_setDimmerLights_SwOn
  5735                           
  5736                           ;Switch_B1.c: 146: }
  5737                           ;Switch_B1.c: 147: } else {
  5738  0277  0008               	return
  5739  0278                     l10319:	
  5740                           
  5741                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5742  0278  0021               	movlb	1	; select bank1
  5743  0279  0854               	movf	_Sw^(0+128),w
  5744  027A  0086               	movwf	6
  5745  027B  3001               	movlw	1	; select bank2/3
  5746  027C  0087               	movwf	7
  5747  027D  1981               	btfsc	1,3
  5748  027E  2AAD               	goto	l10329
  5749                           
  5750                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5751  027F  0854               	movf	_Sw^(0+128),w
  5752  0280  3E03               	addlw	3
  5753  0281  0086               	movwf	6
  5754  0282  3001               	movlw	1	; select bank2/3
  5755  0283  0087               	movwf	7
  5756  0284  3001               	movlw	1
  5757  0285  0781               	addwf	1,f
  5758  0286  3141               	addfsr 1,1
  5759  0287  1803               	skipnc
  5760  0288  0A81               	incf	1,f
  5761                           
  5762                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5763  0289  0854               	movf	_Sw^(0+128),w
  5764  028A  3E03               	addlw	3
  5765  028B  0086               	movwf	6
  5766  028C  3001               	movlw	1	; select bank2/3
  5767  028D  0087               	movwf	7
  5768  028E  3F40               	moviw [0]fsr1
  5769  028F  0020               	movlb	0	; select bank0
  5770  0290  00AF               	movwf	??_setSw_Main
  5771  0291  3F41               	moviw [1]fsr1
  5772  0292  00B0               	movwf	??_setSw_Main+1
  5773  0293  3000               	movlw	0
  5774  0294  0230               	subwf	??_setSw_Main+1,w
  5775  0295  304B               	movlw	75
  5776  0296  1903               	skipnz
  5777  0297  022F               	subwf	??_setSw_Main,w
  5778  0298  1C03               	skipc
  5779  0299  0008               	return
  5780                           
  5781                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5782  029A  0021               	movlb	1	; select bank1
  5783  029B  0854               	movf	_Sw^(0+128),w
  5784  029C  3E03               	addlw	3
  5785  029D  0086               	movwf	6
  5786  029E  3001               	movlw	1	; select bank2/3
  5787  029F  0087               	movwf	7
  5788  02A0  3000               	movlw	0
  5789  02A1  3FC0               	movwi [0]fsr1
  5790  02A2  3FC1               	movwi [1]fsr1
  5791                           
  5792                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5793  02A3  0854               	movf	_Sw^(0+128),w
  5794  02A4  0086               	movwf	6
  5795  02A5  3001               	movlw	1	; select bank2/3
  5796  02A6  0087               	movwf	7
  5797  02A7  1581               	bsf	1,3
  5798                           
  5799                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5800  02A8  0020               	movlb	0	; select bank0
  5801  02A9  0831               	movf	setSw_Main@sw,w
  5802  02AA  3190  20A9         	fcall	_setDimmerLights_DimmingOn
  5803                           
  5804                           ;Switch_B1.c: 161: }
  5805                           ;Switch_B1.c: 162: } else {
  5806  02AC  0008               	return
  5807  02AD                     l10329:	
  5808                           
  5809                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5810  02AD  0021               	movlb	1	; select bank1
  5811  02AE  0854               	movf	_Sw^(0+128),w
  5812  02AF  0086               	movwf	6
  5813  02B0  3001               	movlw	1	; select bank2/3
  5814  02B1  0087               	movwf	7
  5815  02B2  1A01               	btfsc	1,4
  5816  02B3  2AED               	goto	l10343
  5817                           
  5818                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5819  02B4  0854               	movf	_Sw^(0+128),w
  5820  02B5  3E05               	addlw	5
  5821  02B6  0086               	movwf	6
  5822  02B7  3001               	movlw	1	; select bank2/3
  5823  02B8  0087               	movwf	7
  5824  02B9  3001               	movlw	1
  5825  02BA  0781               	addwf	1,f
  5826  02BB  3141               	addfsr 1,1
  5827  02BC  1803               	skipnc
  5828  02BD  0A81               	incf	1,f
  5829                           
  5830                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5831  02BE  0854               	movf	_Sw^(0+128),w
  5832  02BF  3E05               	addlw	5
  5833  02C0  0086               	movwf	6
  5834  02C1  3001               	movlw	1	; select bank2/3
  5835  02C2  0087               	movwf	7
  5836  02C3  3F40               	moviw [0]fsr1
  5837  02C4  0020               	movlb	0	; select bank0
  5838  02C5  00AF               	movwf	??_setSw_Main
  5839  02C6  3F41               	moviw [1]fsr1
  5840  02C7  00B0               	movwf	??_setSw_Main+1
  5841  02C8  3000               	movlw	0
  5842  02C9  0230               	subwf	??_setSw_Main+1,w
  5843  02CA  304B               	movlw	75
  5844  02CB  1903               	skipnz
  5845  02CC  022F               	subwf	??_setSw_Main,w
  5846  02CD  1C03               	skipc
  5847  02CE  0008               	return
  5848                           
  5849                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5850  02CF  0021               	movlb	1	; select bank1
  5851  02D0  0854               	movf	_Sw^(0+128),w
  5852  02D1  3E05               	addlw	5
  5853  02D2  0086               	movwf	6
  5854  02D3  3001               	movlw	1	; select bank2/3
  5855  02D4  0087               	movwf	7
  5856  02D5  3000               	movlw	0
  5857  02D6  3FC0               	movwi [0]fsr1
  5858  02D7  3FC1               	movwi [1]fsr1
  5859                           
  5860                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5861  02D8  0854               	movf	_Sw^(0+128),w
  5862  02D9  0086               	movwf	6
  5863  02DA  3001               	movlw	1	; select bank2/3
  5864  02DB  0087               	movwf	7
  5865  02DC  1601               	bsf	1,4
  5866                           
  5867                           ;Switch_B1.c: 171: setRF_Learn(1);
  5868  02DD  3001               	movlw	1
  5869  02DE  319D  2520  3181   	fcall	_setRF_Learn
  5870                           
  5871                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5872  02E1  0021               	movlb	1	; select bank1
  5873  02E2  1EAF               	btfss	_myMain^(0+128),5
  5874  02E3  0008               	return
  5875                           
  5876                           ;Switch_B1.c: 173: setBuz(2, 100);
  5877  02E4  3064               	movlw	100
  5878  02E5  0020               	movlb	0	; select bank0
  5879  02E6  00A9               	movwf	setBuz@time
  5880  02E7  3000               	movlw	0
  5881  02E8  00AA               	movwf	setBuz@time+1
  5882  02E9  3002               	movlw	2
  5883  02EA  3194  24FB         	fcall	_setBuz
  5884                           
  5885                           ;Switch_B1.c: 174: }
  5886                           ;Switch_B1.c: 178: }
  5887                           ;Switch_B1.c: 179: } else {
  5888  02EC  0008               	return
  5889  02ED                     l10343:	
  5890                           
  5891                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5892  02ED  0021               	movlb	1	; select bank1
  5893  02EE  0854               	movf	_Sw^(0+128),w
  5894  02EF  0086               	movwf	6
  5895  02F0  3001               	movlw	1	; select bank2/3
  5896  02F1  0087               	movwf	7
  5897  02F2  1A81               	btfsc	1,5
  5898  02F3  0008               	return
  5899                           
  5900                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5901  02F4  0854               	movf	_Sw^(0+128),w
  5902  02F5  3E07               	addlw	7
  5903  02F6  0086               	movwf	6
  5904  02F7  3001               	movlw	1	; select bank2/3
  5905  02F8  0087               	movwf	7
  5906  02F9  3001               	movlw	1
  5907  02FA  0781               	addwf	1,f
  5908  02FB  3141               	addfsr 1,1
  5909  02FC  1803               	skipnc
  5910  02FD  0A81               	incf	1,f
  5911                           
  5912                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5913  02FE  0854               	movf	_Sw^(0+128),w
  5914  02FF  3E07               	addlw	7
  5915  0300  0086               	movwf	6
  5916  0301  3001               	movlw	1	; select bank2/3
  5917  0302  0087               	movwf	7
  5918  0303  3F40               	moviw [0]fsr1
  5919  0304  0020               	movlb	0	; select bank0
  5920  0305  00AF               	movwf	??_setSw_Main
  5921  0306  3F41               	moviw [1]fsr1
  5922  0307  00B0               	movwf	??_setSw_Main+1
  5923  0308  3000               	movlw	0
  5924  0309  0230               	subwf	??_setSw_Main+1,w
  5925  030A  3096               	movlw	150
  5926  030B  1903               	skipnz
  5927  030C  022F               	subwf	??_setSw_Main,w
  5928  030D  1C03               	skipc
  5929  030E  0008               	return
  5930                           
  5931                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5932  030F  0021               	movlb	1	; select bank1
  5933  0310  0854               	movf	_Sw^(0+128),w
  5934  0311  3E07               	addlw	7
  5935  0312  0086               	movwf	6
  5936  0313  3001               	movlw	1	; select bank2/3
  5937  0314  0087               	movwf	7
  5938  0315  3000               	movlw	0
  5939  0316  3FC0               	movwi [0]fsr1
  5940  0317  3FC1               	movwi [1]fsr1
  5941                           
  5942                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5943  0318  0854               	movf	_Sw^(0+128),w
  5944  0319  0086               	movwf	6
  5945  031A  3001               	movlw	1	; select bank2/3
  5946  031B  0087               	movwf	7
  5947  031C  1681               	bsf	1,5
  5948                           
  5949                           ;Switch_B1.c: 187: setRF_Learn(0);
  5950  031D  3000               	movlw	0
  5951  031E  319D  2520         	fcall	_setRF_Learn
  5952                           
  5953                           ;Switch_B1.c: 190: }
  5954                           ;Switch_B1.c: 191: }
  5955                           ;Switch_B1.c: 192: }
  5956                           ;Switch_B1.c: 194: }
  5957                           ;Switch_B1.c: 195: }
  5958                           ;Switch_B1.c: 196: } else {
  5959  0320  0008               	return
  5960  0321                     l10353:	
  5961                           
  5962                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5963  0321  0021               	movlb	1	; select bank1
  5964  0322  0854               	movf	_Sw^(0+128),w
  5965  0323  0086               	movwf	6
  5966  0324  3001               	movlw	1	; select bank2/3
  5967  0325  0087               	movwf	7
  5968  0326  1D01               	btfss	1,2
  5969  0327  0008               	return
  5970                           
  5971                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5972  0328  3001               	movlw	1
  5973  0329  0020               	movlb	0	; select bank0
  5974  032A  00AF               	movwf	??_setSw_Main
  5975  032B  0021               	movlb	1	; select bank1
  5976  032C  0854               	movf	_Sw^(0+128),w
  5977  032D  3E02               	addlw	2
  5978  032E  0086               	movwf	6
  5979  032F  3001               	movlw	1	; select bank2/3
  5980  0330  0087               	movwf	7
  5981  0331  0020               	movlb	0	; select bank0
  5982  0332  082F               	movf	??_setSw_Main,w
  5983  0333  0781               	addwf	1,f
  5984                           
  5985                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5986  0334  0021               	movlb	1	; select bank1
  5987  0335  0854               	movf	_Sw^(0+128),w
  5988  0336  3E02               	addlw	2
  5989  0337  0086               	movwf	6
  5990  0338  3001               	movlw	1	; select bank2/3
  5991  0339  0087               	movwf	7
  5992  033A  3003               	movlw	3
  5993  033B  0201               	subwf	1,w
  5994  033C  1C03               	skipc
  5995  033D  0008               	return
  5996                           
  5997                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5998  033E  0854               	movf	_Sw^(0+128),w
  5999  033F  3E02               	addlw	2
  6000  0340  0086               	movwf	6
  6001  0341  3001               	movlw	1	; select bank2/3
  6002  0342  0087               	movwf	7
  6003  0343  0181               	clrf	1
  6004                           
  6005                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6006  0344  0854               	movf	_Sw^(0+128),w
  6007  0345  0086               	movwf	6
  6008  0346  3001               	movlw	1	; select bank2/3
  6009  0347  0087               	movwf	7
  6010  0348  1101               	bcf	1,2
  6011                           
  6012                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6013  0349  0854               	movf	_Sw^(0+128),w
  6014  034A  3E03               	addlw	3
  6015  034B  0086               	movwf	6
  6016  034C  3001               	movlw	1	; select bank2/3
  6017  034D  0087               	movwf	7
  6018  034E  3000               	movlw	0
  6019  034F  3FC0               	movwi [0]fsr1
  6020  0350  3FC1               	movwi [1]fsr1
  6021                           
  6022                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6023  0351  0854               	movf	_Sw^(0+128),w
  6024  0352  0086               	movwf	6
  6025  0353  3001               	movlw	1	; select bank2/3
  6026  0354  0087               	movwf	7
  6027  0355  1181               	bcf	1,3
  6028                           
  6029                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6030  0356  0854               	movf	_Sw^(0+128),w
  6031  0357  0086               	movwf	6
  6032  0358  3001               	movlw	1	; select bank2/3
  6033  0359  0087               	movwf	7
  6034  035A  1201               	bcf	1,4
  6035                           
  6036                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6037  035B  0854               	movf	_Sw^(0+128),w
  6038  035C  0086               	movwf	6
  6039  035D  3001               	movlw	1	; select bank2/3
  6040  035E  0087               	movwf	7
  6041  035F  1281               	bcf	1,5
  6042                           
  6043                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6044  0360  0854               	movf	_Sw^(0+128),w
  6045  0361  3E05               	addlw	5
  6046  0362  0086               	movwf	6
  6047  0363  3001               	movlw	1	; select bank2/3
  6048  0364  0087               	movwf	7
  6049  0365  3000               	movlw	0
  6050  0366  3FC0               	movwi [0]fsr1
  6051  0367  3FC1               	movwi [1]fsr1
  6052                           
  6053                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6054  0368  0854               	movf	_Sw^(0+128),w
  6055  0369  3E07               	addlw	7
  6056  036A  0086               	movwf	6
  6057  036B  3001               	movlw	1	; select bank2/3
  6058  036C  0087               	movwf	7
  6059  036D  3000               	movlw	0
  6060  036E  3FC0               	movwi [0]fsr1
  6061  036F  3FC1               	movwi [1]fsr1
  6062                           
  6063                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6064  0370  0020               	movlb	0	; select bank0
  6065  0371  0831               	movf	setSw_Main@sw,w
  6066  0372  3192  2264  3181   	fcall	_setDimmerLights_SwOff
  6067                           
  6068                           ;Switch_B1.c: 219: setRF_Learn(0);
  6069  0375  3000               	movlw	0
  6070  0376  319D  2520         	fcall	_setRF_Learn
  6071                           
  6072                           ;Switch_B1.c: 221: }
  6073                           ;Switch_B1.c: 222: }
  6074                           ;Switch_B1.c: 223: }
  6075                           ;Switch_B1.c: 224: } else {
  6076  0378  0008               	return
  6077  0379                     l2510:	
  6078                           
  6079                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6080  0379  1C2F               	btfss	_myMain^(0+128),0
  6081  037A  0008               	return
  6082                           
  6083                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6084  037B  0854               	movf	_Sw^(0+128),w
  6085  037C  0086               	movwf	6
  6086  037D  3001               	movlw	1	; select bank2/3
  6087  037E  0087               	movwf	7
  6088  037F  1401               	bsf	1,0
  6089  0380  0008               	return
  6090  0381                     __end_of_setSw_Main:	
  6091                           
  6092                           	psect	text14
  6093  1D20                     __ptext14:	
  6094 ;; *************** function _setRF_Learn *****************
  6095 ;; Defined at:
  6096 ;;		line 33 in file "../src/RF_Control_B1.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  command         1    wreg     unsigned char 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  command         1    1[BANK0 ] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg, status,2, status,0
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6114 ;;Total ram usage:        2 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    5
  6117 ;; This function calls:
  6118 ;;		Nothing
  6119 ;; This function is called by:
  6120 ;;		_setSw_Main
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _setRF_Learn
  6126  1D20                     _setRF_Learn:	
  6127                           
  6128                           ;incstack = 0
  6129                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6130                           ;setRF_Learn@command stored from wreg
  6131  1D20  0020               	movlb	0	; select bank0
  6132  1D21  00A1               	movwf	setRF_Learn@command
  6133                           
  6134                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6135  1D22  0821               	movf	setRF_Learn@command,w
  6136  1D23  3A01               	xorlw	1
  6137  1D24  3000               	movlw	0
  6138  1D25  1903               	skipnz
  6139  1D26  3001               	movlw	1
  6140  1D27  00A0               	movwf	??_setRF_Learn
  6141  1D28  0EA0               	swapf	??_setRF_Learn,f
  6142  1D29  0DA0               	rlf	??_setRF_Learn,f
  6143  1D2A  0DA0               	rlf	??_setRF_Learn,f
  6144  1D2B  0021               	movlb	1	; select bank1
  6145  1D2C  0820               	movf	_RF1^(0+128),w
  6146  1D2D  0020               	movlb	0	; select bank0
  6147  1D2E  0620               	xorwf	??_setRF_Learn,w
  6148  1D2F  39BF               	andlw	-65
  6149  1D30  0620               	xorwf	??_setRF_Learn,w
  6150  1D31  0021               	movlb	1	; select bank1
  6151  1D32  00A0               	movwf	_RF1^(0+128)
  6152  1D33  0008               	return
  6153  1D34                     __end_of_setRF_Learn:	
  6154                           
  6155                           	psect	text15
  6156  10A9                     __ptext15:	
  6157 ;; *************** function _setDimmerLights_DimmingOn *****************
  6158 ;; Defined at:
  6159 ;;		line 759 in file "../src/Dimmer_B1.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  sw              1    wreg     unsigned char 
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;  sw              1    2[BANK0 ] unsigned char 
  6164 ;; Return value:  Size  Location     Type
  6165 ;;		None               void
  6166 ;; Registers used:
  6167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;Total ram usage:        1 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    6
  6180 ;; This function calls:
  6181 ;;		_DimmerLights_SelectPointer
  6182 ;; This function is called by:
  6183 ;;		_setSw_Main
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           
  6188                           ;psect for function _setDimmerLights_DimmingOn
  6189  10A9                     _setDimmerLights_DimmingOn:	
  6190                           
  6191                           ;incstack = 0
  6192                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6193                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6194  10A9  0020               	movlb	0	; select bank0
  6195  10AA  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6196                           
  6197                           ;Dimmer_B1.c: 765: DimmerLights_SelectPointer(sw);
  6198  10AB  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6199  10AC  319B  2340  3190   	fcall	_DimmerLights_SelectPointer
  6200                           
  6201                           ;Dimmer_B1.c: 766: if (DimmerLights->Trigger == 0) {
  6202  10AF  0021               	movlb	1	; select bank1
  6203  10B0  084E               	movf	_DimmerLights^(0+128),w
  6204  10B1  0086               	movwf	6
  6205  10B2  3001               	movlw	1	; select bank2/3
  6206  10B3  0087               	movwf	7
  6207  10B4  1881               	btfsc	1,1
  6208  10B5  0008               	return
  6209                           
  6210                           ;Dimmer_B1.c: 767: if (DimmerLights->SwFlag == 1) {
  6211  10B6  084E               	movf	_DimmerLights^(0+128),w
  6212  10B7  0086               	movwf	6
  6213  10B8  3001               	movlw	1	; select bank2/3
  6214  10B9  0087               	movwf	7
  6215  10BA  1C01               	btfss	1,0
  6216  10BB  0008               	return
  6217                           
  6218                           ;Dimmer_B1.c: 768: DimmerLights->Status = 1;
  6219  10BC  0A4E               	incf	_DimmerLights^(0+128),w
  6220  10BD  0086               	movwf	6
  6221  10BE  3001               	movlw	1	; select bank2/3
  6222  10BF  0087               	movwf	7
  6223  10C0  1401               	bsf	1,0
  6224                           
  6225                           ;Dimmer_B1.c: 770: DimmerLights->DimmingSwFlag = 1;
  6226  10C1  084E               	movf	_DimmerLights^(0+128),w
  6227  10C2  0086               	movwf	6
  6228  10C3  3001               	movlw	1	; select bank2/3
  6229  10C4  0087               	movwf	7
  6230  10C5  1581               	bsf	1,3
  6231                           
  6232                           ;Dimmer_B1.c: 771: DimmerLights->DimmingTrigger = 1;
  6233  10C6  084E               	movf	_DimmerLights^(0+128),w
  6234  10C7  0086               	movwf	6
  6235  10C8  3001               	movlw	1	; select bank2/3
  6236  10C9  0087               	movwf	7
  6237  10CA  1601               	bsf	1,4
  6238                           
  6239                           ;Dimmer_B1.c: 772: DimmerLights->DimmingSwitch = 1;
  6240  10CB  084E               	movf	_DimmerLights^(0+128),w
  6241  10CC  0086               	movwf	6
  6242  10CD  3001               	movlw	1	; select bank2/3
  6243  10CE  0087               	movwf	7
  6244  10CF  1681               	bsf	1,5
  6245  10D0  0008               	return
  6246  10D1                     __end_of_setDimmerLights_DimmingOn:	
  6247                           
  6248                           	psect	text16
  6249  1C68                     __ptext16:	
  6250 ;; *************** function _getSw_KeyStatus *****************
  6251 ;; Defined at:
  6252 ;;		line 237 in file "../src/Switch_B1.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;  sw              1    wreg     unsigned char 
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;  sw              1    0[COMMON] unsigned char 
  6257 ;;  status          1    1[BANK0 ] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      unsigned char 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;Total ram usage:        3 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    5
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_setSw_Main
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           
  6282                           ;psect for function _getSw_KeyStatus
  6283  1C68                     _getSw_KeyStatus:	
  6284                           
  6285                           ;Switch_B1.c: 238: char status = 0;
  6286                           
  6287                           ;incstack = 0
  6288                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6289  1C68  0020               	movlb	0	; select bank0
  6290  1C69  01A1               	clrf	getSw_KeyStatus@status
  6291                           
  6292                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6293  1C6A  01A2               	clrf	_getSw_KeyStatus$6470
  6294  1C6B  0AA2               	incf	_getSw_KeyStatus$6470,f
  6295  1C6C  1F0C               	btfss	12,6	;volatile
  6296  1C6D  1A0C               	btfsc	12,4	;volatile
  6297  1C6E  2C73               	goto	l9761
  6298  1C6F  1C0C               	btfss	12,0	;volatile
  6299  1C70  1B8C               	btfsc	12,7	;volatile
  6300  1C71  2C73               	goto	l9761
  6301  1C72  01A2               	clrf	_getSw_KeyStatus$6470
  6302  1C73                     l9761:	
  6303  1C73  0822               	movf	_getSw_KeyStatus$6470,w
  6304  1C74  00A0               	movwf	??_getSw_KeyStatus
  6305  1C75  0820               	movf	??_getSw_KeyStatus,w
  6306  1C76  00A1               	movwf	getSw_KeyStatus@status
  6307                           
  6308                           ;Switch_B1.c: 275: return status;
  6309  1C77  0821               	movf	getSw_KeyStatus@status,w
  6310  1C78  0008               	return
  6311  1C79                     __end_of_getSw_KeyStatus:	
  6312                           
  6313                           	psect	text17
  6314  1BAC                     __ptext17:	
  6315 ;; *************** function _SwPointSelect *****************
  6316 ;; Defined at:
  6317 ;;		line 25 in file "../src/Switch_B1.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  sw              1    wreg     unsigned char 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  sw              1    1[BANK0 ] unsigned char 
  6322 ;; Return value:  Size  Location     Type
  6323 ;;		None               void
  6324 ;; Registers used:
  6325 ;;		wreg
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;Total ram usage:        2 bytes
  6336 ;; Hardware stack levels used:    1
  6337 ;; Hardware stack levels required when called:    5
  6338 ;; This function calls:
  6339 ;;		Nothing
  6340 ;; This function is called by:
  6341 ;;		_setSw_Main
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           
  6346                           ;psect for function _SwPointSelect
  6347  1BAC                     _SwPointSelect:	
  6348                           
  6349                           ;incstack = 0
  6350                           ; Regs used in _SwPointSelect: [wreg]
  6351                           ;SwPointSelect@sw stored from wreg
  6352  1BAC  0020               	movlb	0	; select bank0
  6353  1BAD  00A1               	movwf	SwPointSelect@sw
  6354                           
  6355                           ;Switch_B1.c: 28: if (sw == 1) {
  6356  1BAE  0821               	movf	SwPointSelect@sw,w
  6357  1BAF  3A01               	xorlw	1
  6358  1BB0  1D03               	skipz
  6359  1BB1  0008               	return
  6360                           
  6361                           ;Switch_B1.c: 29: Sw = &Sw1;
  6362  1BB2  30E3               	movlw	_Sw1& (0+255)
  6363  1BB3  00A0               	movwf	??_SwPointSelect
  6364  1BB4  0820               	movf	??_SwPointSelect,w
  6365  1BB5  0021               	movlb	1	; select bank1
  6366  1BB6  00D4               	movwf	_Sw^(0+128)
  6367  1BB7  0008               	return
  6368  1BB8                     __end_of_SwPointSelect:	
  6369                           
  6370                           	psect	text18
  6371  1D73                     __ptext18:	
  6372 ;; *************** function _TouchPower *****************
  6373 ;; Defined at:
  6374 ;;		line 10 in file "../src/Switch_B1.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;		None
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;		None
  6379 ;; Return value:  Size  Location     Type
  6380 ;;		None               void
  6381 ;; Registers used:
  6382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;Total ram usage:        0 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:    6
  6395 ;; This function calls:
  6396 ;;		_Timeout_Counter
  6397 ;;		_set_TimeoutCleared
  6398 ;; This function is called by:
  6399 ;;		_Switch_Main
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           
  6404                           ;psect for function _TouchPower
  6405  1D73                     _TouchPower:	
  6406                           
  6407                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6408                           
  6409                           ;incstack = 0
  6410                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6411  1D73  0021               	movlb	1	; select bank1
  6412  1D74  1C2F               	btfss	_myMain^(0+128),0
  6413  1D75  0008               	return
  6414                           
  6415                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6416  1D76  0020               	movlb	0	; select bank0
  6417  1D77  180D               	btfsc	13,0	;volatile
  6418  1D78  0008               	return
  6419  1D79  2D7F               	goto	l10285
  6420  1D7A                     l2490:	
  6421                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6422                           
  6423                           
  6424                           ;Switch_B1.c: 14: RB0 = 1;
  6425  1D7A  0020               	movlb	0	; select bank0
  6426  1D7B  140D               	bsf	13,0	;volatile
  6427                           
  6428                           ;Switch_B1.c: 15: Timeout_Counter();
  6429  1D7C  319D  255E  319D   	fcall	_Timeout_Counter
  6430  1D7F                     l10285:	
  6431  1D7F  0020               	movlb	0	; select bank0
  6432  1D80  180D               	btfsc	13,0	;volatile
  6433  1D81  2D85               	goto	l10289
  6434  1D82  0021               	movlb	1	; select bank1
  6435  1D83  1D39               	btfss	(_myMain^(0+128)+10),2
  6436  1D84  2D7A               	goto	l2490
  6437  1D85                     l10289:	
  6438                           
  6439                           ;Switch_B1.c: 16: }
  6440                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6441  1D85  319A  229C         	fcall	_set_TimeoutCleared
  6442  1D87  0008               	return
  6443  1D88                     __end_of_TouchPower:	
  6444                           
  6445                           	psect	text19
  6446  1A9C                     __ptext19:	
  6447 ;; *************** function _set_TimeoutCleared *****************
  6448 ;; Defined at:
  6449 ;;		line 281 in file "../src/Main_B1.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;		None
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;		None
  6454 ;; Return value:  Size  Location     Type
  6455 ;;		None               void
  6456 ;; Registers used:
  6457 ;;		status,2
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;Total ram usage:        0 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    5
  6470 ;; This function calls:
  6471 ;;		Nothing
  6472 ;; This function is called by:
  6473 ;;		_getAD
  6474 ;;		_TouchPower
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           
  6479                           ;psect for function _set_TimeoutCleared
  6480  1A9C                     _set_TimeoutCleared:	
  6481                           
  6482                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6483                           
  6484                           ;incstack = 0
  6485                           ; Regs used in _set_TimeoutCleared: [status,2]
  6486  1A9C  0021               	movlb	1	; select bank1
  6487  1A9D  1139               	bcf	(_myMain^(0+128)+10),2
  6488                           
  6489                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6490  1A9E  01BA               	clrf	(_myMain^(0+128)+11)
  6491  1A9F  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6492  1AA0  0008               	return
  6493  1AA1                     __end_of_set_TimeoutCleared:	
  6494                           
  6495                           	psect	text20
  6496  1D5E                     __ptext20:	
  6497 ;; *************** function _Timeout_Counter *****************
  6498 ;; Defined at:
  6499 ;;		line 272 in file "../src/Main_B1.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;		None
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;		None
  6504 ;; Return value:  Size  Location     Type
  6505 ;;		None               void
  6506 ;; Registers used:
  6507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6508 ;; Tracked objects:
  6509 ;;		On entry : 0/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6517 ;;Total ram usage:        0 bytes
  6518 ;; Hardware stack levels used:    1
  6519 ;; Hardware stack levels required when called:    5
  6520 ;; This function calls:
  6521 ;;		Nothing
  6522 ;; This function is called by:
  6523 ;;		_getAD
  6524 ;;		_TouchPower
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           
  6529                           ;psect for function _Timeout_Counter
  6530  1D5E                     _Timeout_Counter:	
  6531                           
  6532                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6533                           
  6534                           ;incstack = 0
  6535                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6536  1D5E  3001               	movlw	1
  6537  1D5F  0021               	movlb	1	; select bank1
  6538  1D60  07BA               	addwf	(_myMain^(0+128)+11),f
  6539  1D61  3000               	movlw	0
  6540  1D62  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6541                           
  6542                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6543  1D63  300B               	movlw	11
  6544  1D64  3EAF               	addlw	_myMain& (0+255)
  6545  1D65  0086               	movwf	6
  6546  1D66  0187               	clrf	7
  6547  1D67  3F40               	moviw [0]fsr1
  6548  1D68  3AA8               	xorlw	168
  6549  1D69  1D03               	skipz
  6550  1D6A  2D6D               	goto	u10545
  6551  1D6B  3F41               	moviw [1]fsr1
  6552  1D6C  3A61               	xorlw	97
  6553  1D6D                     u10545:	
  6554  1D6D  1D03               	skipz
  6555  1D6E  0008               	return
  6556                           
  6557                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6558  1D6F  01BA               	clrf	(_myMain^(0+128)+11)
  6559  1D70  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6560                           
  6561                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6562  1D71  1539               	bsf	(_myMain^(0+128)+10),2
  6563  1D72  0008               	return
  6564  1D73                     __end_of_Timeout_Counter:	
  6565                           
  6566                           	psect	text21
  6567  1A98                     __ptext21:	
  6568 ;; *************** function _Switch_Initialization *****************
  6569 ;; Defined at:
  6570 ;;		line 46 in file "../src/Switch_B1.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;		None
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;		None
  6575 ;; Return value:  Size  Location     Type
  6576 ;;		None               void
  6577 ;; Registers used:
  6578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;Total ram usage:        0 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    8
  6591 ;; This function calls:
  6592 ;;		_setSw_Initialization
  6593 ;; This function is called by:
  6594 ;;		_main
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _Switch_Initialization
  6600  1A98                     _Switch_Initialization:	
  6601                           
  6602                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6603                           
  6604                           ;incstack = 0
  6605                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6606  1A98  3001               	movlw	1
  6607  1A99  319B  23F2         	fcall	_setSw_Initialization
  6608  1A9B  0008               	return
  6609  1A9C                     __end_of_Switch_Initialization:	
  6610                           
  6611                           	psect	text22
  6612  1BF2                     __ptext22:	
  6613 ;; *************** function _setSw_Initialization *****************
  6614 ;; Defined at:
  6615 ;;		line 66 in file "../src/Switch_B1.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  sw              1    wreg     unsigned char 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  sw              1    4[BANK0 ] unsigned char 
  6620 ;; Return value:  Size  Location     Type
  6621 ;;		None               void
  6622 ;; Registers used:
  6623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6632 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6633 ;;Total ram usage:        1 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    7
  6636 ;; This function calls:
  6637 ;;		_setLED
  6638 ;; This function is called by:
  6639 ;;		_Switch_Initialization
  6640 ;; This function uses a non-reentrant model
  6641 ;;
  6642                           
  6643                           
  6644                           ;psect for function _setSw_Initialization
  6645  1BF2                     _setSw_Initialization:	
  6646                           
  6647                           ;incstack = 0
  6648                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6649                           ;setSw_Initialization@sw stored from wreg
  6650  1BF2  0020               	movlb	0	; select bank0
  6651  1BF3  00A4               	movwf	setSw_Initialization@sw
  6652                           
  6653                           ;Switch_B1.c: 68: setLED(sw, 1);
  6654  1BF4  01A2               	clrf	setLED@command
  6655  1BF5  0AA2               	incf	setLED@command,f
  6656  1BF6  0824               	movf	setSw_Initialization@sw,w
  6657  1BF7  3192  229D  319B   	fcall	_setLED
  6658                           
  6659                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6660  1BFA  0020               	movlb	0	; select bank0
  6661  1BFB  01A2               	clrf	setLED@command
  6662  1BFC  0AA2               	incf	setLED@command,f
  6663  1BFD  0824               	movf	setSw_Initialization@sw,w
  6664  1BFE  3E01               	addlw	1
  6665  1BFF  3192  229D         	fcall	_setLED
  6666  1C01  0008               	return
  6667  1C02                     __end_of_setSw_Initialization:	
  6668                           
  6669                           	psect	text23
  6670  1A6B                     __ptext23:	
  6671 ;; *************** function _RF_Main *****************
  6672 ;; Defined at:
  6673 ;;		line 26 in file "../src/RF_Control_B1.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;		None
  6678 ;; Return value:  Size  Location     Type
  6679 ;;		None               void
  6680 ;; Registers used:
  6681 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;Total ram usage:        0 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:   12
  6694 ;; This function calls:
  6695 ;;		_setRF_Main
  6696 ;; This function is called by:
  6697 ;;		_main
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           
  6702                           ;psect for function _RF_Main
  6703  1A6B                     _RF_Main:	
  6704                           
  6705                           ;RF_Control_B1.c: 28: setRF_Main();
  6706                           
  6707                           ;incstack = 0
  6708                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6709  1A6B  3184  2477         	fcall	_setRF_Main
  6710  1A6D  0008               	return
  6711  1A6E                     __end_of_RF_Main:	
  6712                           
  6713                           	psect	text24
  6714  0477                     __ptext24:	
  6715 ;; *************** function _setRF_Main *****************
  6716 ;; Defined at:
  6717 ;;		line 53 in file "../src/RF_Control_B1.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;		None
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;  error           1    3[BANK1 ] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;		None               void
  6724 ;; Registers used:
  6725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;Total ram usage:        2 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:   11
  6738 ;; This function calls:
  6739 ;;		_CC2500_PowerOnInitial
  6740 ;;		_CC2500_RxData
  6741 ;;		_CC2500_TxData
  6742 ;;		_CC2500_WriteCommand
  6743 ;;		_RF_RxDisable
  6744 ;;		___lwdiv
  6745 ;;		_getBuz_GO
  6746 ;;		_getRF_KeyStatus
  6747 ;;		_getRxData
  6748 ;; This function is called by:
  6749 ;;		_RF_Main
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           
  6754                           ;psect for function _setRF_Main
  6755  0477                     _setRF_Main:	
  6756                           
  6757                           ;RF_Control_B1.c: 54: char error = 0;
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6761  0477  0021               	movlb	1	; select bank1
  6762  0478  01E7               	clrf	setRF_Main@error^(0+128)
  6763                           
  6764                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6765  0479  1C20               	btfss	_RF1^(0+128),0
  6766  047A  2D48               	goto	l2121
  6767                           
  6768                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6769  047B  319C  2446  3184   	fcall	_getBuz_GO
  6770  047E  0020               	movlb	0	; select bank0
  6771  047F  0821               	movf	?_getBuz_GO+1,w
  6772  0480  0420               	iorwf	?_getBuz_GO,w
  6773  0481  1D03               	skipz
  6774  0482  2D29               	goto	l10255
  6775                           
  6776                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6777  0483  319C  2457  3184   	fcall	_getRF_KeyStatus
  6778  0486  3A01               	xorlw	1
  6779  0487  3000               	movlw	0
  6780  0488  1903               	skipnz
  6781  0489  3001               	movlw	1
  6782  048A  0021               	movlb	1	; select bank1
  6783  048B  00E6               	movwf	??_setRF_Main^(0+128)
  6784  048C  0CE6               	rrf	??_setRF_Main^(0+128),f
  6785  048D  0CE6               	rrf	??_setRF_Main^(0+128),f
  6786  048E  0820               	movf	_RF1^(0+128),w
  6787  048F  0666               	xorwf	??_setRF_Main^(0+128),w
  6788  0490  397F               	andlw	-129
  6789  0491  0666               	xorwf	??_setRF_Main^(0+128),w
  6790  0492  00A0               	movwf	_RF1^(0+128)
  6791                           
  6792                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6793  0493  1FA0               	btfss	_RF1^(0+128),7
  6794  0494  2C97               	goto	l2125
  6795  0495  1F20               	btfss	_RF1^(0+128),6
  6796  0496  2D29               	goto	l10255
  6797  0497                     l2125:	
  6798                           
  6799                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6800  0497  1D20               	btfss	_RF1^(0+128),2
  6801  0498  2CE8               	goto	l2126
  6802                           
  6803                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6804  0499  1B20               	btfsc	_RF1^(0+128),6
  6805  049A  2CE3               	goto	l10227
  6806                           
  6807                           ;RF_Control_B1.c: 68: RF1.Count++;
  6808  049B  3001               	movlw	1
  6809  049C  07A3               	addwf	(_RF1^(0+128)+3),f
  6810  049D  3000               	movlw	0
  6811  049E  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  6812                           
  6813                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6814  049F  3014               	movlw	20
  6815  04A0  0020               	movlb	0	; select bank0
  6816  04A1  00A0               	movwf	___lwdiv@divisor
  6817  04A2  3000               	movlw	0
  6818  04A3  00A1               	movwf	___lwdiv@divisor+1
  6819  04A4  0021               	movlb	1	; select bank1
  6820  04A5  0829               	movf	((_RF1+1)^(0+128)+8),w
  6821  04A6  0020               	movlb	0	; select bank0
  6822  04A7  01A3               	clrf	___lwdiv@dividend+1
  6823  04A8  07A3               	addwf	___lwdiv@dividend+1,f
  6824  04A9  0021               	movlb	1	; select bank1
  6825  04AA  0828               	movf	(_RF1^(0+128)+8),w
  6826  04AB  0020               	movlb	0	; select bank0
  6827  04AC  01A2               	clrf	___lwdiv@dividend
  6828  04AD  07A2               	addwf	___lwdiv@dividend,f
  6829  04AE  3192  222D  3184   	fcall	___lwdiv
  6830  04B1  0020               	movlb	0	; select bank0
  6831  04B2  0821               	movf	?___lwdiv+1,w
  6832  04B3  0021               	movlb	1	; select bank1
  6833  04B4  0224               	subwf	((_RF1+1)^(0+128)+3),w
  6834  04B5  1D03               	skipz
  6835  04B6  2CBB               	goto	u11595
  6836  04B7  0020               	movlb	0	; select bank0
  6837  04B8  0820               	movf	?___lwdiv,w
  6838  04B9  0021               	movlb	1	; select bank1
  6839  04BA  0223               	subwf	(_RF1^(0+128)+3),w
  6840  04BB                     u11595:	
  6841  04BB  1C03               	skipc
  6842  04BC  2D29               	goto	l10255
  6843                           
  6844                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6845  04BD  3014               	movlw	20
  6846  04BE  0020               	movlb	0	; select bank0
  6847  04BF  00A0               	movwf	___lwdiv@divisor
  6848  04C0  3000               	movlw	0
  6849  04C1  00A1               	movwf	___lwdiv@divisor+1
  6850  04C2  0021               	movlb	1	; select bank1
  6851  04C3  0829               	movf	((_RF1+1)^(0+128)+8),w
  6852  04C4  0020               	movlb	0	; select bank0
  6853  04C5  01A3               	clrf	___lwdiv@dividend+1
  6854  04C6  07A3               	addwf	___lwdiv@dividend+1,f
  6855  04C7  0021               	movlb	1	; select bank1
  6856  04C8  0828               	movf	(_RF1^(0+128)+8),w
  6857  04C9  0020               	movlb	0	; select bank0
  6858  04CA  01A2               	clrf	___lwdiv@dividend
  6859  04CB  07A2               	addwf	___lwdiv@dividend,f
  6860  04CC  3192  222D  3184   	fcall	___lwdiv
  6861  04CF  0020               	movlb	0	; select bank0
  6862  04D0  0821               	movf	?___lwdiv+1,w
  6863  04D1  0021               	movlb	1	; select bank1
  6864  04D2  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6865  04D3  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  6866  04D4  0020               	movlb	0	; select bank0
  6867  04D5  0820               	movf	?___lwdiv,w
  6868  04D6  0021               	movlb	1	; select bank1
  6869  04D7  01A3               	clrf	(_RF1^(0+128)+3)
  6870  04D8  07A3               	addwf	(_RF1^(0+128)+3),f
  6871                           
  6872                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6873  04D9  1120               	bcf	_RF1^(0+128),2
  6874                           
  6875                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6876  04DA  01AB               	clrf	(_RF1^(0+128)+11)
  6877  04DB  01AC               	clrf	((_RF1+1)^(0+128)+11)
  6878                           
  6879                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6880  04DC  319B  23E3  3184   	fcall	_RF_RxDisable
  6881                           
  6882                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6883  04DF  3188  20E8  3184   	fcall	_CC2500_TxData
  6884                           
  6885                           ;RF_Control_B1.c: 77: }
  6886                           ;RF_Control_B1.c: 78: } else {
  6887  04E2  2D29               	goto	l10255
  6888  04E3                     l10227:	
  6889                           
  6890                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6891  04E3  0021               	movlb	1	; select bank1
  6892  04E4  01A3               	clrf	(_RF1^(0+128)+3)
  6893  04E5  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6894                           
  6895                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6896  04E6  1120               	bcf	_RF1^(0+128),2
  6897                           
  6898                           ;RF_Control_B1.c: 81: }
  6899                           ;RF_Control_B1.c: 82: } else {
  6900  04E7  2D29               	goto	l10255
  6901  04E8                     l2126:	
  6902                           
  6903                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6904  04E8  1DA0               	btfss	_RF1^(0+128),3
  6905  04E9  2CF7               	goto	l10241
  6906                           
  6907                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6908  04EA  3188  207D  3184   	fcall	_CC2500_RxData
  6909                           
  6910                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6911  04ED  0021               	movlb	1	; select bank1
  6912  04EE  1CA0               	btfss	_RF1^(0+128),1
  6913  04EF  2D29               	goto	l10255
  6914                           
  6915                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6916  04F0  10A0               	bcf	_RF1^(0+128),1
  6917                           
  6918                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6919  04F1  01AB               	clrf	(_RF1^(0+128)+11)
  6920  04F2  01AC               	clrf	((_RF1+1)^(0+128)+11)
  6921                           
  6922                           ;RF_Control_B1.c: 97: getRxData();
  6923  04F3  3196  266D  3184   	fcall	_getRxData
  6924                           
  6925                           ;RF_Control_B1.c: 100: }
  6926                           ;RF_Control_B1.c: 101: } else {
  6927  04F6  2D29               	goto	l10255
  6928  04F7                     l10241:	
  6929                           
  6930                           ;RF_Control_B1.c: 102: RF1.Count++;
  6931  04F7  3001               	movlw	1
  6932  04F8  0021               	movlb	1	; select bank1
  6933  04F9  07A3               	addwf	(_RF1^(0+128)+3),f
  6934  04FA  3000               	movlw	0
  6935  04FB  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  6936                           
  6937                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6938  04FC  3014               	movlw	20
  6939  04FD  0020               	movlb	0	; select bank0
  6940  04FE  00A0               	movwf	___lwdiv@divisor
  6941  04FF  3000               	movlw	0
  6942  0500  00A1               	movwf	___lwdiv@divisor+1
  6943  0501  0021               	movlb	1	; select bank1
  6944  0502  0829               	movf	((_RF1+1)^(0+128)+8),w
  6945  0503  0020               	movlb	0	; select bank0
  6946  0504  01A3               	clrf	___lwdiv@dividend+1
  6947  0505  07A3               	addwf	___lwdiv@dividend+1,f
  6948  0506  0021               	movlb	1	; select bank1
  6949  0507  0828               	movf	(_RF1^(0+128)+8),w
  6950  0508  0020               	movlb	0	; select bank0
  6951  0509  01A2               	clrf	___lwdiv@dividend
  6952  050A  07A2               	addwf	___lwdiv@dividend,f
  6953  050B  3192  222D  3184   	fcall	___lwdiv
  6954  050E  0020               	movlb	0	; select bank0
  6955  050F  0821               	movf	?___lwdiv+1,w
  6956  0510  0021               	movlb	1	; select bank1
  6957  0511  0224               	subwf	((_RF1+1)^(0+128)+3),w
  6958  0512  1D03               	skipz
  6959  0513  2D18               	goto	u11625
  6960  0514  0020               	movlb	0	; select bank0
  6961  0515  0820               	movf	?___lwdiv,w
  6962  0516  0021               	movlb	1	; select bank1
  6963  0517  0223               	subwf	(_RF1^(0+128)+3),w
  6964  0518                     u11625:	
  6965  0518  1C03               	skipc
  6966  0519  2D29               	goto	l10255
  6967                           
  6968                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6969  051A  01A3               	clrf	(_RF1^(0+128)+3)
  6970  051B  01A4               	clrf	((_RF1+1)^(0+128)+3)
  6971                           
  6972                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6973  051C  15A0               	bsf	_RF1^(0+128),3
  6974                           
  6975                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6976  051D  3036               	movlw	54
  6977  051E  319E  264A  3184   	fcall	_CC2500_WriteCommand
  6978                           
  6979                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6980  0521  303A               	movlw	58
  6981  0522  319E  264A  3184   	fcall	_CC2500_WriteCommand
  6982                           
  6983                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6984  0525  3034               	movlw	52
  6985  0526  319E  264A  3184   	fcall	_CC2500_WriteCommand
  6986  0529                     l10255:	
  6987                           
  6988                           ;RF_Control_B1.c: 111: }
  6989                           ;RF_Control_B1.c: 112: }
  6990                           ;RF_Control_B1.c: 113: }
  6991                           ;RF_Control_B1.c: 114: }
  6992                           ;RF_Control_B1.c: 115: }
  6993                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6994  0529  3001               	movlw	1
  6995  052A  0021               	movlb	1	; select bank1
  6996  052B  07AB               	addwf	(_RF1^(0+128)+11),f
  6997  052C  3000               	movlw	0
  6998  052D  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  6999                           
  7000                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7001  052E  300B               	movlw	11
  7002  052F  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7003  0530  30B9               	movlw	185
  7004  0531  1903               	skipnz
  7005  0532  022B               	subwf	(_RF1^(0+128)+11),w
  7006  0533  1C03               	skipc
  7007  0534  2D41               	goto	l10269
  7008                           
  7009                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7010  0535  01AB               	clrf	(_RF1^(0+128)+11)
  7011  0536  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7012                           
  7013                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7014  0537  11A0               	bcf	_RF1^(0+128),3
  7015                           
  7016                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7017  0538  10A0               	bcf	_RF1^(0+128),1
  7018                           
  7019                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7020  0539  3036               	movlw	54
  7021  053A  319E  264A  3184   	fcall	_CC2500_WriteCommand
  7022                           
  7023                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7024  053D  303A               	movlw	58
  7025  053E  319E  264A  3184   	fcall	_CC2500_WriteCommand
  7026  0541                     l10269:	
  7027                           
  7028                           ;RF_Control_B1.c: 125: }
  7029                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7030  0541  0021               	movlb	1	; select bank1
  7031  0542  1F21               	btfss	(_RF1^(0+128)+1),6
  7032  0543  0008               	return
  7033                           
  7034                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7035  0544  1321               	bcf	(_RF1^(0+128)+1),6
  7036                           
  7037                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7038  0545  319D  2549         	fcall	_CC2500_PowerOnInitial
  7039                           
  7040                           ;RF_Control_B1.c: 130: }
  7041                           ;RF_Control_B1.c: 132: } else {
  7042  0547  0008               	return
  7043  0548                     l2121:	
  7044                           
  7045                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7046  0548  1C2F               	btfss	_myMain^(0+128),0
  7047  0549  0008               	return
  7048                           
  7049                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7050  054A  1420               	bsf	_RF1^(0+128),0
  7051  054B  0008               	return
  7052  054C                     __end_of_setRF_Main:	
  7053                           
  7054                           	psect	text25
  7055  166D                     __ptext25:	
  7056 ;; *************** function _getRxData *****************
  7057 ;; Defined at:
  7058 ;;		line 227 in file "../src/RF_Control_B1.c"
  7059 ;; Parameters:    Size  Location     Type
  7060 ;;		None
  7061 ;; Auto vars:     Size  Location     Type
  7062 ;;  error           1    1[BANK1 ] unsigned char 
  7063 ;; Return value:  Size  Location     Type
  7064 ;;		None               void
  7065 ;; Registers used:
  7066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7067 ;; Tracked objects:
  7068 ;;		On entry : 0/0
  7069 ;;		On exit  : 0/0
  7070 ;;		Unchanged: 0/0
  7071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7073 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7074 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;Total ram usage:        2 bytes
  7077 ;; Hardware stack levels used:    1
  7078 ;; Hardware stack levels required when called:   10
  7079 ;; This function calls:
  7080 ;;		_getMain_All_Error_Status
  7081 ;;		_setControl_Lights_Table
  7082 ;;		_setLog_Code
  7083 ;;		_setTxData
  7084 ;; This function is called by:
  7085 ;;		_setRF_Main
  7086 ;; This function uses a non-reentrant model
  7087 ;;
  7088                           
  7089                           
  7090                           ;psect for function _getRxData
  7091  166D                     _getRxData:	
  7092                           
  7093                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7094                           
  7095                           ;incstack = 0
  7096                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7097  166D  0023               	movlb	3	; select bank3
  7098  166E  0820               	movf	_RF_Data^(0+384),w
  7099  166F  3AAA               	xorlw	170
  7100  1670  1D03               	skipz
  7101  1671  2E83               	goto	l9715
  7102  1672  0821               	movf	(_RF_Data^(0+384)+1),w
  7103  1673  3A01               	xorlw	1
  7104  1674  1D03               	skipz
  7105  1675  2E83               	goto	l9715
  7106                           
  7107                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7108  1676  3055               	movlw	85
  7109  1677  0021               	movlb	1	; select bank1
  7110  1678  00E4               	movwf	??_getRxData^(0+128)
  7111  1679  086C               	movf	_product^(0+128),w
  7112  167A  3E02               	addlw	2
  7113  167B  0086               	movwf	6
  7114  167C  3002               	movlw	2	; select bank4/5
  7115  167D  0087               	movwf	7
  7116  167E  0864               	movf	??_getRxData^(0+128),w
  7117  167F  0081               	movwf	1
  7118                           
  7119                           ;RF_Control_B1.c: 231: setTxData();
  7120  1680  318F  2745         	fcall	_setTxData
  7121                           
  7122                           ;RF_Control_B1.c: 235: } else {
  7123  1682  0008               	return
  7124  1683                     l9715:	
  7125                           
  7126                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7127  1683  3000               	movlw	0
  7128  1684  3191  215B  3196   	fcall	_getMain_All_Error_Status
  7129  1687  0021               	movlb	1	; select bank1
  7130  1688  00E4               	movwf	??_getRxData^(0+128)
  7131  1689  0864               	movf	??_getRxData^(0+128),w
  7132  168A  00E5               	movwf	getRxData@error^(0+128)
  7133                           
  7134                           ;RF_Control_B1.c: 237: if (error == 0) {
  7135  168B  08E5               	movf	getRxData@error^(0+128),f
  7136  168C  1D03               	skipz
  7137  168D  2ECF               	goto	l2166
  7138                           
  7139                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7140  168E  1F20               	btfss	_RF1^(0+128),6
  7141  168F  2E9B               	goto	l9727
  7142                           
  7143                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7144  1690  0023               	movlb	3	; select bank3
  7145  1691  08A0               	movf	_RF_Data^(0+384),f
  7146  1692  1D03               	skipz
  7147  1693  0008               	return
  7148  1694  0821               	movf	(_RF_Data^(0+384)+1),w
  7149  1695  3A64               	xorlw	100
  7150  1696  1D03               	skipz
  7151  1697  0008               	return
  7152                           
  7153                           ;RF_Control_B1.c: 241: setLog_Code();
  7154  1698  3191  218E         	fcall	_setLog_Code
  7155                           
  7156                           ;RF_Control_B1.c: 242: }
  7157                           ;RF_Control_B1.c: 243: } else {
  7158  169A  0008               	return
  7159  169B                     l9727:	
  7160                           
  7161                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7162  169B  0023               	movlb	3	; select bank3
  7163  169C  0834               	movf	(_RF_Data^(0+384)+20),w
  7164  169D  3AD1               	xorlw	209
  7165  169E  1903               	skipnz
  7166  169F  2EA4               	goto	l9731
  7167  16A0  0834               	movf	(_RF_Data^(0+384)+20),w
  7168  16A1  3A0A               	xorlw	10
  7169  16A2  1D03               	skipz
  7170  16A3  0008               	return
  7171  16A4                     l9731:	
  7172                           
  7173                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7174  16A4  08A0               	movf	_RF_Data^(0+384),f
  7175  16A5  1D03               	skipz
  7176  16A6  0008               	return
  7177  16A7  0821               	movf	(_RF_Data^(0+384)+1),w
  7178  16A8  3A02               	xorlw	2
  7179  16A9  1D03               	skipz
  7180  16AA  0008               	return
  7181                           
  7182                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7183  16AB  0021               	movlb	1	; select bank1
  7184  16AC  086C               	movf	_product^(0+128),w
  7185  16AD  3E0C               	addlw	12
  7186  16AE  0086               	movwf	6
  7187  16AF  3002               	movlw	2	; select bank4/5
  7188  16B0  0087               	movwf	7
  7189  16B1  0023               	movlb	3	; select bank3
  7190  16B2  082C               	movf	(_RF_Data^(0+384)+12),w
  7191  16B3  0601               	xorwf	1,w
  7192  16B4  1D03               	skipz
  7193  16B5  0008               	return
  7194  16B6  0021               	movlb	1	; select bank1
  7195  16B7  086C               	movf	_product^(0+128),w
  7196  16B8  3E0D               	addlw	13
  7197  16B9  0086               	movwf	6
  7198  16BA  3002               	movlw	2	; select bank4/5
  7199  16BB  0087               	movwf	7
  7200  16BC  0023               	movlb	3	; select bank3
  7201  16BD  082D               	movf	(_RF_Data^(0+384)+13),w
  7202  16BE  0601               	xorwf	1,w
  7203  16BF  1D03               	skipz
  7204  16C0  0008               	return
  7205  16C1  0021               	movlb	1	; select bank1
  7206  16C2  086C               	movf	_product^(0+128),w
  7207  16C3  3E0E               	addlw	14
  7208  16C4  0086               	movwf	6
  7209  16C5  3002               	movlw	2	; select bank4/5
  7210  16C6  0087               	movwf	7
  7211  16C7  0023               	movlb	3	; select bank3
  7212  16C8  082E               	movf	(_RF_Data^(0+384)+14),w
  7213  16C9  0601               	xorwf	1,w
  7214  16CA  1D03               	skipz
  7215  16CB  0008               	return
  7216                           
  7217                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7218  16CC  318A  22A5         	fcall	_setControl_Lights_Table
  7219                           
  7220                           ;RF_Control_B1.c: 250: }
  7221                           ;RF_Control_B1.c: 253: }
  7222                           ;RF_Control_B1.c: 264: }
  7223                           ;RF_Control_B1.c: 265: }
  7224                           ;RF_Control_B1.c: 266: } else {
  7225  16CE  0008               	return
  7226  16CF                     l2166:	
  7227                           
  7228                           ;RF_Control_B1.c: 267: __nop();
  7229  16CF  0000               	nop
  7230  16D0  0008               	return
  7231  16D1                     __end_of_getRxData:	
  7232                           
  7233                           	psect	text26
  7234  118E                     __ptext26:	
  7235 ;; *************** function _setLog_Code *****************
  7236 ;; Defined at:
  7237 ;;		line 273 in file "../src/RF_Control_B1.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;		None
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;		None               void
  7244 ;; Registers used:
  7245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;Total ram usage:        1 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:    7
  7258 ;; This function calls:
  7259 ;;		_setBuz
  7260 ;;		_setMemory_LoopSave
  7261 ;;		_setMemory_Modify
  7262 ;;		_setProductData
  7263 ;; This function is called by:
  7264 ;;		_getRxData
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           
  7269                           ;psect for function _setLog_Code
  7270  118E                     _setLog_Code:	
  7271                           
  7272                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7273                           
  7274                           ;incstack = 0
  7275                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7276  118E  0021               	movlb	1	; select bank1
  7277  118F  1320               	bcf	_RF1^(0+128),6
  7278                           
  7279                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7280  1190  0023               	movlb	3	; select bank3
  7281  1191  082C               	movf	(_RF_Data^(0+384)+12),w
  7282  1192  0020               	movlb	0	; select bank0
  7283  1193  00E5               	movwf	??_setLog_Code
  7284  1194  0865               	movf	??_setLog_Code,w
  7285  1195  00E2               	movwf	setProductData@value
  7286  1196  300C               	movlw	12
  7287  1197  319B  234C  3191   	fcall	_setProductData
  7288                           
  7289                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7290  119A  0023               	movlb	3	; select bank3
  7291  119B  082D               	movf	(_RF_Data^(0+384)+13),w
  7292  119C  0020               	movlb	0	; select bank0
  7293  119D  00E5               	movwf	??_setLog_Code
  7294  119E  0865               	movf	??_setLog_Code,w
  7295  119F  00E2               	movwf	setProductData@value
  7296  11A0  300D               	movlw	13
  7297  11A1  319B  234C  3191   	fcall	_setProductData
  7298                           
  7299                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7300  11A4  0023               	movlb	3	; select bank3
  7301  11A5  082E               	movf	(_RF_Data^(0+384)+14),w
  7302  11A6  0020               	movlb	0	; select bank0
  7303  11A7  00E5               	movwf	??_setLog_Code
  7304  11A8  0865               	movf	??_setLog_Code,w
  7305  11A9  00E2               	movwf	setProductData@value
  7306  11AA  300E               	movlw	14
  7307  11AB  319B  234C  3191   	fcall	_setProductData
  7308                           
  7309                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7310  11AE  3064               	movlw	100
  7311  11AF  0020               	movlb	0	; select bank0
  7312  11B0  00A9               	movwf	setBuz@time
  7313  11B1  3000               	movlw	0
  7314  11B2  00AA               	movwf	setBuz@time+1
  7315  11B3  3001               	movlw	1
  7316  11B4  3194  24FB  3191   	fcall	_setBuz
  7317                           
  7318                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7319  11B7  0021               	movlb	1	; select bank1
  7320  11B8  1EAF               	btfss	_myMain^(0+128),5
  7321  11B9  29BE               	goto	l2179
  7322                           
  7323                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7324  11BA  3001               	movlw	1
  7325  11BB  319C  24FA  3191   	fcall	_setMemory_LoopSave
  7326  11BE                     l2179:	
  7327                           
  7328                           ;RF_Control_B1.c: 281: }
  7329                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7330  11BE  3001               	movlw	1
  7331  11BF  319C  24C1         	fcall	_setMemory_Modify
  7332  11C1  0008               	return
  7333  11C2                     __end_of_setLog_Code:	
  7334                           
  7335                           	psect	text27
  7336  1CFA                     __ptext27:	
  7337 ;; *************** function _setMemory_LoopSave *****************
  7338 ;; Defined at:
  7339 ;;		line 1089 in file "../src/MCU_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  command         1    wreg     unsigned char 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  command         1    1[BANK0 ] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;Total ram usage:        2 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    5
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_setLog_Code
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           
  7368                           ;psect for function _setMemory_LoopSave
  7369  1CFA                     _setMemory_LoopSave:	
  7370                           
  7371                           ;incstack = 0
  7372                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7373                           ;setMemory_LoopSave@command stored from wreg
  7374  1CFA  0020               	movlb	0	; select bank0
  7375  1CFB  00A1               	movwf	setMemory_LoopSave@command
  7376                           
  7377                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7378  1CFC  0821               	movf	setMemory_LoopSave@command,w
  7379  1CFD  3A01               	xorlw	1
  7380  1CFE  3000               	movlw	0
  7381  1CFF  1903               	skipnz
  7382  1D00  3001               	movlw	1
  7383  1D01  00A0               	movwf	??_setMemory_LoopSave
  7384  1D02  0DA0               	rlf	??_setMemory_LoopSave,f
  7385  1D03  0DA0               	rlf	??_setMemory_LoopSave,f
  7386  1D04  0023               	movlb	3	; select bank3
  7387  1D05  0862               	movf	(_Memory^(0+384)+36),w
  7388  1D06  0020               	movlb	0	; select bank0
  7389  1D07  0620               	xorwf	??_setMemory_LoopSave,w
  7390  1D08  39FB               	andlw	-5
  7391  1D09  0620               	xorwf	??_setMemory_LoopSave,w
  7392  1D0A  0023               	movlb	3	; select bank3
  7393  1D0B  00E2               	movwf	(_Memory^(0+384)+36)
  7394  1D0C  0008               	return
  7395  1D0D                     __end_of_setMemory_LoopSave:	
  7396                           
  7397                           	psect	text28
  7398  0AA5                     __ptext28:	
  7399 ;; *************** function _setControl_Lights_Table *****************
  7400 ;; Defined at:
  7401 ;;		line 286 in file "../src/RF_Control_B1.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;		None               void
  7408 ;; Registers used:
  7409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7419 ;;Total ram usage:        0 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; Hardware stack levels required when called:    9
  7422 ;; This function calls:
  7423 ;;		_getDimmerLights_Status
  7424 ;;		_getMain_All_LightsStatus
  7425 ;;		_setCmd_Status
  7426 ;;		_setDimmerLights_SwOff
  7427 ;;		_setDimmerLights_SwOn
  7428 ;;		_setProductData
  7429 ;;		_setRFSW_AdjControl
  7430 ;;		_setRFSW_Control
  7431 ;;		_setRF_AdjControl
  7432 ;;		_setTxData
  7433 ;; This function is called by:
  7434 ;;		_getRxData
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           
  7439                           ;psect for function _setControl_Lights_Table
  7440  0AA5                     _setControl_Lights_Table:	
  7441                           
  7442                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7443                           
  7444                           ;incstack = 0
  7445                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7446  0AA5  2B0B               	goto	l9355
  7447  0AA6                     l9335:	
  7448                           ;RF_Control_B1.c: 290: case 0x00:
  7449                           
  7450                           
  7451                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7452  0AA6  319A  22F3  318A   	fcall	_getMain_All_LightsStatus
  7453  0AA9  3A01               	xorlw	1
  7454  0AAA  1D03               	skipz
  7455  0AAB  2AC2               	goto	l9343
  7456                           
  7457                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7458  0AAC  3001               	movlw	1
  7459  0AAD  319C  2402  318A   	fcall	_getDimmerLights_Status
  7460  0AB0  3A01               	xorlw	1
  7461  0AB1  1D03               	skipz
  7462  0AB2  2ABB               	goto	l9341
  7463                           
  7464                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7465  0AB3  3001               	movlw	1
  7466  0AB4  3191  21C2  318A   	fcall	_setDimmerLights_SwOn
  7467                           
  7468                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7469  0AB7  3001               	movlw	1
  7470  0AB8  3192  2264  318A   	fcall	_setDimmerLights_SwOff
  7471  0ABB                     l9341:	
  7472                           
  7473                           ;RF_Control_B1.c: 297: }
  7474                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7475  0ABB  0020               	movlb	0	; select bank0
  7476  0ABC  01A0               	clrf	setCmd_Status@cmd
  7477  0ABD  0AA0               	incf	setCmd_Status@cmd,f
  7478  0ABE  3001               	movlw	1
  7479  0ABF  319D  25E4         	fcall	_setCmd_Status
  7480                           
  7481                           ;RF_Control_B1.c: 313: } else {
  7482  0AC1  0008               	return
  7483  0AC2                     l9343:	
  7484                           
  7485                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7486  0AC2  0020               	movlb	0	; select bank0
  7487  0AC3  01E2               	clrf	setProductData@value
  7488  0AC4  3009               	movlw	9
  7489  0AC5  319B  234C  318A   	fcall	_setProductData
  7490                           
  7491                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7492  0AC8  0020               	movlb	0	; select bank0
  7493  0AC9  01E2               	clrf	setProductData@value
  7494  0ACA  300B               	movlw	11
  7495  0ACB  319B  234C  318A   	fcall	_setProductData
  7496                           
  7497                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7498  0ACE  0020               	movlb	0	; select bank0
  7499  0ACF  01E2               	clrf	setProductData@value
  7500  0AD0  300F               	movlw	15
  7501  0AD1  319B  234C  318A   	fcall	_setProductData
  7502                           
  7503                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7504  0AD4  0020               	movlb	0	; select bank0
  7505  0AD5  01E2               	clrf	setProductData@value
  7506  0AD6  3011               	movlw	17
  7507  0AD7  319B  234C  318A   	fcall	_setProductData
  7508                           
  7509                           ;RF_Control_B1.c: 318: setTxData();
  7510  0ADA  318F  2745         	fcall	_setTxData
  7511                           
  7512                           ;RF_Control_B1.c: 319: }
  7513                           ;RF_Control_B1.c: 320: break;
  7514  0ADC  0008               	return
  7515  0ADD                     l9345:	
  7516                           ;RF_Control_B1.c: 322: case 0x20:
  7517                           
  7518                           
  7519                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7520  0ADD  0020               	movlb	0	; select bank0
  7521  0ADE  01E2               	clrf	setProductData@value
  7522  0ADF  3009               	movlw	9
  7523  0AE0  319B  234C  318A   	fcall	_setProductData
  7524                           
  7525                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7526  0AE3  0020               	movlb	0	; select bank0
  7527  0AE4  01E2               	clrf	setProductData@value
  7528  0AE5  300B               	movlw	11
  7529  0AE6  319B  234C  318A   	fcall	_setProductData
  7530                           
  7531                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7532  0AE9  0021               	movlb	1	; select bank1
  7533  0AEA  086C               	movf	_product^(0+128),w
  7534  0AEB  0086               	movwf	6
  7535  0AEC  3002               	movlw	2	; select bank4/5
  7536  0AED  0087               	movwf	7
  7537  0AEE  3002               	movlw	2	; select bank4/5
  7538  0AEF  3F4F               	moviw [15]fsr1
  7539  0AF0  0020               	movlb	0	; select bank0
  7540  0AF1  00E2               	movwf	setProductData@value
  7541  0AF2  300F               	movlw	15
  7542  0AF3  319B  234C  318A   	fcall	_setProductData
  7543                           
  7544                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7545  0AF6  0020               	movlb	0	; select bank0
  7546  0AF7  01E2               	clrf	setProductData@value
  7547  0AF8  3011               	movlw	17
  7548  0AF9  319B  234C  318A   	fcall	_setProductData
  7549                           
  7550                           ;RF_Control_B1.c: 327: setTxData();
  7551  0AFC  318F  2745         	fcall	_setTxData
  7552                           
  7553                           ;RF_Control_B1.c: 328: break;
  7554  0AFE  0008               	return
  7555  0AFF                     l9347:	
  7556                           ;RF_Control_B1.c: 331: case 0x01:
  7557                           
  7558                           
  7559                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7560  0AFF  3001               	movlw	1
  7561  0B00  3193  238C         	fcall	_setRFSW_Control
  7562                           
  7563                           ;RF_Control_B1.c: 333: break;
  7564  0B02  0008               	return
  7565  0B03                     l9349:	
  7566                           ;RF_Control_B1.c: 337: case 0x11:
  7567                           
  7568                           
  7569                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7570  0B03  3001               	movlw	1
  7571  0B04  318B  231E         	fcall	_setRFSW_AdjControl
  7572                           
  7573                           ;RF_Control_B1.c: 339: break;
  7574  0B06  0008               	return
  7575  0B07                     l9351:	
  7576                           ;RF_Control_B1.c: 341: case 0xd1:
  7577                           
  7578                           
  7579                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7580  0B07  3001               	movlw	1
  7581  0B08  3193  234F         	fcall	_setRF_AdjControl
  7582                           
  7583                           ;RF_Control_B1.c: 372: }
  7584                           
  7585                           ;RF_Control_B1.c: 343: break;
  7586  0B0A  0008               	return
  7587  0B0B                     l9355:	
  7588  0B0B  0023               	movlb	3	; select bank3
  7589  0B0C  082F               	movf	(_RF_Data^(0+384)+15),w
  7590                           
  7591                           ; Switch size 1, requested type "space"
  7592                           ; Number of cases is 5, Range of values is 0 to 209
  7593                           ; switch strategies available:
  7594                           ; Name         Instructions Cycles
  7595                           ; simple_byte           16     9 (average)
  7596                           ; jumptable            260     6 (fixed)
  7597                           ;	Chosen strategy is simple_byte
  7598  0B0D  3A00               	xorlw	0	; case 0
  7599  0B0E  1903               	skipnz
  7600  0B0F  2AA6               	goto	l9335
  7601  0B10  3A01               	xorlw	1	; case 1
  7602  0B11  1903               	skipnz
  7603  0B12  2AFF               	goto	l9347
  7604  0B13  3A10               	xorlw	16	; case 17
  7605  0B14  1903               	skipnz
  7606  0B15  2B03               	goto	l9349
  7607  0B16  3A31               	xorlw	49	; case 32
  7608  0B17  1903               	skipnz
  7609  0B18  2ADD               	goto	l9345
  7610  0B19  3AF1               	xorlw	241	; case 209
  7611  0B1A  1903               	skipnz
  7612  0B1B  2B07               	goto	l9351
  7613  0B1C  2B1D               	goto	l2193
  7614  0B1D                     l2193:	
  7615  0B1D  0008               	return
  7616  0B1E                     __end_of_setControl_Lights_Table:	
  7617                           
  7618                           	psect	text29
  7619  134F                     __ptext29:	
  7620 ;; *************** function _setRF_AdjControl *****************
  7621 ;; Defined at:
  7622 ;;		line 443 in file "../src/RF_Control_B1.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;  sw              1    wreg     unsigned char 
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;  sw              1   15[BANK0 ] unsigned char 
  7627 ;;  status          1   14[BANK0 ] unsigned char 
  7628 ;; Return value:  Size  Location     Type
  7629 ;;		None               void
  7630 ;; Registers used:
  7631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;Total ram usage:        3 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    7
  7644 ;; This function calls:
  7645 ;;		_DimmerLights_SelectPointer
  7646 ;;		_getDimmerLights_Status
  7647 ;;		_setBuz
  7648 ;; This function is called by:
  7649 ;;		_setControl_Lights_Table
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _setRF_AdjControl
  7655  134F                     _setRF_AdjControl:	
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7659                           ;setRF_AdjControl@sw stored from wreg
  7660  134F  0020               	movlb	0	; select bank0
  7661  1350  00AF               	movwf	setRF_AdjControl@sw
  7662                           
  7663                           ;RF_Control_B1.c: 444: char status = 0;
  7664  1351  01AE               	clrf	setRF_AdjControl@status
  7665                           
  7666                           ;RF_Control_B1.c: 446: status = getDimmerLights_Status(sw);
  7667  1352  082F               	movf	setRF_AdjControl@sw,w
  7668  1353  319C  2402  3193   	fcall	_getDimmerLights_Status
  7669  1356  0020               	movlb	0	; select bank0
  7670  1357  00AD               	movwf	??_setRF_AdjControl
  7671  1358  082D               	movf	??_setRF_AdjControl,w
  7672  1359  00AE               	movwf	setRF_AdjControl@status
  7673                           
  7674                           ;RF_Control_B1.c: 448: if (status == 1) {
  7675  135A  082E               	movf	setRF_AdjControl@status,w
  7676  135B  3A01               	xorlw	1
  7677  135C  1D03               	skipz
  7678  135D  2B83               	goto	l9107
  7679                           
  7680                           ;RF_Control_B1.c: 449: if (RF1.flagDimming == 0) {
  7681  135E  0021               	movlb	1	; select bank1
  7682  135F  1822               	btfsc	(_RF1^(0+128)+2),0
  7683  1360  2B78               	goto	l2212
  7684                           
  7685                           ;RF_Control_B1.c: 450: RF1.flagDimming = 1;
  7686  1361  1422               	bsf	(_RF1^(0+128)+2),0
  7687                           
  7688                           ;RF_Control_B1.c: 451: DimmerLights_SelectPointer(sw);
  7689  1362  0020               	movlb	0	; select bank0
  7690  1363  082F               	movf	setRF_AdjControl@sw,w
  7691  1364  319B  2340  3193   	fcall	_DimmerLights_SelectPointer
  7692                           
  7693                           ;RF_Control_B1.c: 453: DimmerLights->DimmingSwFlag = 1;
  7694  1367  0021               	movlb	1	; select bank1
  7695  1368  084E               	movf	_DimmerLights^(0+128),w
  7696  1369  0086               	movwf	6
  7697  136A  3001               	movlw	1	; select bank2/3
  7698  136B  0087               	movwf	7
  7699  136C  1581               	bsf	1,3
  7700                           
  7701                           ;RF_Control_B1.c: 454: DimmerLights->DimmingTrigger = 1;
  7702  136D  084E               	movf	_DimmerLights^(0+128),w
  7703  136E  0086               	movwf	6
  7704  136F  3001               	movlw	1	; select bank2/3
  7705  1370  0087               	movwf	7
  7706  1371  1601               	bsf	1,4
  7707                           
  7708                           ;RF_Control_B1.c: 455: DimmerLights->DimmingSwitch = 1;
  7709  1372  084E               	movf	_DimmerLights^(0+128),w
  7710  1373  0086               	movwf	6
  7711  1374  3001               	movlw	1	; select bank2/3
  7712  1375  0087               	movwf	7
  7713  1376  1681               	bsf	1,5
  7714                           
  7715                           ;RF_Control_B1.c: 457: } else {
  7716  1377  2B83               	goto	l9107
  7717  1378                     l2212:	
  7718                           
  7719                           ;RF_Control_B1.c: 458: RF1.flagDimming = 0;
  7720  1378  1022               	bcf	(_RF1^(0+128)+2),0
  7721                           
  7722                           ;RF_Control_B1.c: 459: DimmerLights->DimmingTrigger = 1;
  7723  1379  084E               	movf	_DimmerLights^(0+128),w
  7724  137A  0086               	movwf	6
  7725  137B  3001               	movlw	1	; select bank2/3
  7726  137C  0087               	movwf	7
  7727  137D  1601               	bsf	1,4
  7728                           
  7729                           ;RF_Control_B1.c: 460: DimmerLights->DimmingSwitch = 0;
  7730  137E  084E               	movf	_DimmerLights^(0+128),w
  7731  137F  0086               	movwf	6
  7732  1380  3001               	movlw	1	; select bank2/3
  7733  1381  0087               	movwf	7
  7734  1382  1281               	bcf	1,5
  7735  1383                     l9107:	
  7736                           
  7737                           ;RF_Control_B1.c: 461: }
  7738                           ;RF_Control_B1.c: 462: }
  7739                           ;RF_Control_B1.c: 463: setBuz(1, 100);
  7740  1383  3064               	movlw	100
  7741  1384  0020               	movlb	0	; select bank0
  7742  1385  00A9               	movwf	setBuz@time
  7743  1386  3000               	movlw	0
  7744  1387  00AA               	movwf	setBuz@time+1
  7745  1388  3001               	movlw	1
  7746  1389  3194  24FB         	fcall	_setBuz
  7747  138B  0008               	return
  7748  138C                     __end_of_setRF_AdjControl:	
  7749                           
  7750                           	psect	text30
  7751  138C                     __ptext30:	
  7752 ;; *************** function _setRFSW_Control *****************
  7753 ;; Defined at:
  7754 ;;		line 380 in file "../src/RF_Control_B1.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  sw              1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  sw              1   79[BANK0 ] unsigned char 
  7759 ;;  status          1   78[BANK0 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;Total ram usage:        3 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    8
  7776 ;; This function calls:
  7777 ;;		_getDimmerLights_Status
  7778 ;;		_setBuz
  7779 ;;		_setDelayOff_GO
  7780 ;;		_setDimmerLights_SwOff
  7781 ;;		_setDimmerLights_SwOn
  7782 ;;		_setRF_DimmerLights
  7783 ;;		_setTxData
  7784 ;; This function is called by:
  7785 ;;		_setControl_Lights_Table
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _setRFSW_Control
  7791  138C                     _setRFSW_Control:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7795                           ;setRFSW_Control@sw stored from wreg
  7796  138C  0020               	movlb	0	; select bank0
  7797  138D  00EF               	movwf	setRFSW_Control@sw
  7798                           
  7799                           ;RF_Control_B1.c: 381: char status = 0;
  7800  138E  01EE               	clrf	setRFSW_Control@status
  7801                           
  7802                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7803  138F  0023               	movlb	3	; select bank3
  7804  1390  0830               	movf	(_RF_Data^(0+384)+16),w
  7805  1391  3A80               	xorlw	128
  7806  1392  1D03               	skipz
  7807  1393  2BBF               	goto	l9057
  7808                           
  7809                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7810  1394  0020               	movlb	0	; select bank0
  7811  1395  01E5               	clrf	setDelayOff_GO@command
  7812  1396  0AE5               	incf	setDelayOff_GO@command,f
  7813  1397  0023               	movlb	3	; select bank3
  7814  1398  0831               	movf	(_RF_Data^(0+384)+17),w
  7815  1399  0020               	movlb	0	; select bank0
  7816  139A  00ED               	movwf	??_setRFSW_Control
  7817  139B  086D               	movf	??_setRFSW_Control,w
  7818  139C  00E6               	movwf	setDelayOff_GO@value
  7819  139D  086F               	movf	setRFSW_Control@sw,w
  7820  139E  318C  24AB  3193   	fcall	_setDelayOff_GO
  7821                           
  7822                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7823  13A1  0020               	movlb	0	; select bank0
  7824  13A2  086F               	movf	setRFSW_Control@sw,w
  7825  13A3  319C  2402  3193   	fcall	_getDimmerLights_Status
  7826  13A6  3A01               	xorlw	1
  7827  13A7  1D03               	skipz
  7828  13A8  2BBF               	goto	l9057
  7829                           
  7830                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7831  13A9  3064               	movlw	100
  7832  13AA  0020               	movlb	0	; select bank0
  7833  13AB  00A9               	movwf	setBuz@time
  7834  13AC  3000               	movlw	0
  7835  13AD  00AA               	movwf	setBuz@time+1
  7836  13AE  3001               	movlw	1
  7837  13AF  3194  24FB  3193   	fcall	_setBuz
  7838                           
  7839                           ;RF_Control_B1.c: 387: setRF_DimmerLights(sw, 1);
  7840  13B2  0020               	movlb	0	; select bank0
  7841  13B3  01E5               	clrf	setRF_DimmerLights@on
  7842  13B4  0AE5               	incf	setRF_DimmerLights@on,f
  7843  13B5  086F               	movf	setRFSW_Control@sw,w
  7844  13B6  3197  279B  3193   	fcall	_setRF_DimmerLights
  7845                           
  7846                           ;RF_Control_B1.c: 388: setTxData();
  7847  13B9  318F  2745  3193   	fcall	_setTxData
  7848                           
  7849                           ;RF_Control_B1.c: 389: status = 1;
  7850  13BC  0020               	movlb	0	; select bank0
  7851  13BD  01EE               	clrf	setRFSW_Control@status
  7852  13BE  0AEE               	incf	setRFSW_Control@status,f
  7853  13BF                     l9057:	
  7854                           
  7855                           ;RF_Control_B1.c: 390: }
  7856                           ;RF_Control_B1.c: 391: }
  7857                           ;RF_Control_B1.c: 393: if (status == 0) {
  7858  13BF  0020               	movlb	0	; select bank0
  7859  13C0  08EE               	movf	setRFSW_Control@status,f
  7860  13C1  1D03               	skipz
  7861  13C2  0008               	return
  7862                           
  7863                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  7864  13C3  086F               	movf	setRFSW_Control@sw,w
  7865  13C4  3191  21C2  3193   	fcall	_setDimmerLights_SwOn
  7866                           
  7867                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  7868  13C7  0020               	movlb	0	; select bank0
  7869  13C8  086F               	movf	setRFSW_Control@sw,w
  7870  13C9  3192  2264         	fcall	_setDimmerLights_SwOff
  7871  13CB  0008               	return
  7872  13CC                     __end_of_setRFSW_Control:	
  7873                           
  7874                           	psect	text31
  7875  0B1E                     __ptext31:	
  7876 ;; *************** function _setRFSW_AdjControl *****************
  7877 ;; Defined at:
  7878 ;;		line 402 in file "../src/RF_Control_B1.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  sw              1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  sw              1   72[BANK0 ] unsigned char 
  7883 ;;  status          1   71[BANK0 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;		None               void
  7886 ;; Registers used:
  7887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:        4 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    8
  7900 ;; This function calls:
  7901 ;;		_getDimmerLights_PercentToValue
  7902 ;;		_getDimmerLights_Status
  7903 ;;		_setDimmerIntr_Dimming_RF
  7904 ;;		_setDimmerIntr_MaxmumValue
  7905 ;;		_setDimmerLights_DimmingRun
  7906 ;;		_setDimmerLights_SwOff
  7907 ;;		_setDimmerLights_SwOn
  7908 ;;		_setMemory_Modify
  7909 ;;		_setProductData
  7910 ;;		_setTxData
  7911 ;; This function is called by:
  7912 ;;		_setControl_Lights_Table
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           
  7917                           ;psect for function _setRFSW_AdjControl
  7918  0B1E                     _setRFSW_AdjControl:	
  7919                           
  7920                           ;incstack = 0
  7921                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7922                           ;setRFSW_AdjControl@sw stored from wreg
  7923  0B1E  0020               	movlb	0	; select bank0
  7924  0B1F  00E8               	movwf	setRFSW_AdjControl@sw
  7925                           
  7926                           ;RF_Control_B1.c: 403: char status = 0;
  7927  0B20  01E7               	clrf	setRFSW_AdjControl@status
  7928                           
  7929                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  7930  0B21  0868               	movf	setRFSW_AdjControl@sw,w
  7931  0B22  319C  2402  318B   	fcall	_getDimmerLights_Status
  7932  0B25  0020               	movlb	0	; select bank0
  7933  0B26  00E5               	movwf	??_setRFSW_AdjControl
  7934  0B27  0865               	movf	??_setRFSW_AdjControl,w
  7935  0B28  00E7               	movwf	setRFSW_AdjControl@status
  7936                           
  7937                           ;RF_Control_B1.c: 407: if (RF_Data[9] > 0x64) {
  7938  0B29  3065               	movlw	101
  7939  0B2A  0023               	movlb	3	; select bank3
  7940  0B2B  0229               	subwf	(_RF_Data^(0+384)+9),w
  7941  0B2C  1C03               	skipc
  7942  0B2D  2B35               	goto	l9069
  7943                           
  7944                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x64;
  7945  0B2E  3064               	movlw	100
  7946  0B2F  0020               	movlb	0	; select bank0
  7947  0B30  00E5               	movwf	??_setRFSW_AdjControl
  7948  0B31  0865               	movf	??_setRFSW_AdjControl,w
  7949  0B32  0023               	movlb	3	; select bank3
  7950  0B33  00A9               	movwf	(_RF_Data^(0+384)+9)
  7951                           
  7952                           ;RF_Control_B1.c: 409: } else if (RF_Data[9] < 0x01) {
  7953  0B34  2B3A               	goto	l9073
  7954  0B35                     l9069:	
  7955  0B35  08A9               	movf	(_RF_Data^(0+384)+9),f
  7956  0B36  1D03               	skipz
  7957  0B37  2B3A               	goto	l9073
  7958                           
  7959                           ;RF_Control_B1.c: 410: RF_Data[9] = 0x01;
  7960  0B38  01A9               	clrf	(_RF_Data^(0+384)+9)
  7961  0B39  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7962  0B3A                     l9073:	
  7963                           
  7964                           ;RF_Control_B1.c: 411: }
  7965                           ;RF_Control_B1.c: 412: setProductData(9, RF_Data[9]);
  7966  0B3A  0829               	movf	(_RF_Data^(0+384)+9),w
  7967  0B3B  0020               	movlb	0	; select bank0
  7968  0B3C  00E5               	movwf	??_setRFSW_AdjControl
  7969  0B3D  0865               	movf	??_setRFSW_AdjControl,w
  7970  0B3E  00E2               	movwf	setProductData@value
  7971  0B3F  3009               	movlw	9
  7972  0B40  319B  234C  318B   	fcall	_setProductData
  7973                           
  7974                           ;RF_Control_B1.c: 413: setProductData(11, sw);
  7975  0B43  0020               	movlb	0	; select bank0
  7976  0B44  0868               	movf	setRFSW_AdjControl@sw,w
  7977  0B45  00E5               	movwf	??_setRFSW_AdjControl
  7978  0B46  0865               	movf	??_setRFSW_AdjControl,w
  7979  0B47  00E2               	movwf	setProductData@value
  7980  0B48  300B               	movlw	11
  7981  0B49  319B  234C  318B   	fcall	_setProductData
  7982                           
  7983                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  7984  0B4C  0020               	movlb	0	; select bank0
  7985  0B4D  0868               	movf	setRFSW_AdjControl@sw,w
  7986  0B4E  3E1A               	addlw	26
  7987  0B4F  0021               	movlb	1	; select bank1
  7988  0B50  076C               	addwf	_product^(0+128),w
  7989  0B51  0020               	movlb	0	; select bank0
  7990  0B52  00E5               	movwf	??_setRFSW_AdjControl
  7991  0B53  0865               	movf	??_setRFSW_AdjControl,w
  7992  0B54  0086               	movwf	6
  7993  0B55  3002               	movlw	2	; select bank4/5
  7994  0B56  0087               	movwf	7
  7995  0B57  0801               	movf	1,w
  7996  0B58  00E6               	movwf	??_setRFSW_AdjControl+1
  7997  0B59  0866               	movf	??_setRFSW_AdjControl+1,w
  7998  0B5A  00E2               	movwf	setProductData@value
  7999  0B5B  3011               	movlw	17
  8000  0B5C  319B  234C  318B   	fcall	_setProductData
  8001                           
  8002                           ;RF_Control_B1.c: 415: setProductData((20 + sw), RF_Data[9]);
  8003  0B5F  0023               	movlb	3	; select bank3
  8004  0B60  0829               	movf	(_RF_Data^(0+384)+9),w
  8005  0B61  0020               	movlb	0	; select bank0
  8006  0B62  00E5               	movwf	??_setRFSW_AdjControl
  8007  0B63  0865               	movf	??_setRFSW_AdjControl,w
  8008  0B64  00E2               	movwf	setProductData@value
  8009  0B65  0868               	movf	setRFSW_AdjControl@sw,w
  8010  0B66  3E14               	addlw	20
  8011  0B67  319B  234C  318B   	fcall	_setProductData
  8012                           
  8013                           ;RF_Control_B1.c: 423: setMemory_Modify(1);
  8014  0B6A  3001               	movlw	1
  8015  0B6B  319C  24C1  318B   	fcall	_setMemory_Modify
  8016                           
  8017                           ;RF_Control_B1.c: 427: if (status == 1) {
  8018  0B6E  0020               	movlb	0	; select bank0
  8019  0B6F  0867               	movf	setRFSW_AdjControl@status,w
  8020  0B70  3A01               	xorlw	1
  8021  0B71  1D03               	skipz
  8022  0B72  2B8A               	goto	l9083
  8023                           
  8024                           ;RF_Control_B1.c: 428: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8025  0B73  0023               	movlb	3	; select bank3
  8026  0B74  0829               	movf	(_RF_Data^(0+384)+9),w
  8027  0B75  3196  26D1  318B   	fcall	_getDimmerLights_PercentToValue
  8028  0B78  0020               	movlb	0	; select bank0
  8029  0B79  00E5               	movwf	??_setRFSW_AdjControl
  8030  0B7A  0865               	movf	??_setRFSW_AdjControl,w
  8031  0B7B  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8032  0B7C  0868               	movf	setRFSW_AdjControl@sw,w
  8033  0B7D  319B  2358  318B   	fcall	_setDimmerIntr_MaxmumValue
  8034                           
  8035                           ;RF_Control_B1.c: 429: setDimmerIntr_Dimming_RF(sw, 1);
  8036  0B80  0020               	movlb	0	; select bank0
  8037  0B81  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8038  0B82  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8039  0B83  0868               	movf	setRFSW_AdjControl@sw,w
  8040  0B84  319D  25CC  318B   	fcall	_setDimmerIntr_Dimming_RF
  8041                           
  8042                           ;RF_Control_B1.c: 430: setTxData();
  8043  0B87  318F  2745         	fcall	_setTxData
  8044                           
  8045                           ;RF_Control_B1.c: 432: } else if (status == 0) {
  8046  0B89  0008               	return
  8047  0B8A                     l9083:	
  8048  0B8A  0020               	movlb	0	; select bank0
  8049  0B8B  08E7               	movf	setRFSW_AdjControl@status,f
  8050  0B8C  1D03               	skipz
  8051  0B8D  0008               	return
  8052                           
  8053                           ;RF_Control_B1.c: 436: setDimmerLights_DimmingRun(sw, 1);
  8054  0B8E  01A2               	clrf	setDimmerLights_DimmingRun@command
  8055  0B8F  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8056  0B90  0868               	movf	setRFSW_AdjControl@sw,w
  8057  0B91  319E  2664  318B   	fcall	_setDimmerLights_DimmingRun
  8058                           
  8059                           ;RF_Control_B1.c: 437: setDimmerLights_SwOn(sw);
  8060  0B94  0020               	movlb	0	; select bank0
  8061  0B95  0868               	movf	setRFSW_AdjControl@sw,w
  8062  0B96  3191  21C2  318B   	fcall	_setDimmerLights_SwOn
  8063                           
  8064                           ;RF_Control_B1.c: 438: setDimmerLights_SwOff(sw);
  8065  0B99  0020               	movlb	0	; select bank0
  8066  0B9A  0868               	movf	setRFSW_AdjControl@sw,w
  8067  0B9B  3192  2264         	fcall	_setDimmerLights_SwOff
  8068  0B9D  0008               	return
  8069  0B9E                     __end_of_setRFSW_AdjControl:	
  8070                           
  8071                           	psect	text32
  8072  1E64                     __ptext32:	
  8073 ;; *************** function _setDimmerLights_DimmingRun *****************
  8074 ;; Defined at:
  8075 ;;		line 1085 in file "../src/Dimmer_B1.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  lights          1    wreg     unsigned char 
  8078 ;;  command         1    2[BANK0 ] unsigned char 
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;  lights          1    4[BANK0 ] unsigned char 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;		None               void
  8083 ;; Registers used:
  8084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;Total ram usage:        3 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    6
  8097 ;; This function calls:
  8098 ;;		_DimmerLights_SelectPointer
  8099 ;; This function is called by:
  8100 ;;		_setRFSW_AdjControl
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           
  8105                           ;psect for function _setDimmerLights_DimmingRun
  8106  1E64                     _setDimmerLights_DimmingRun:	
  8107                           
  8108                           ;incstack = 0
  8109                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8110                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8111  1E64  0020               	movlb	0	; select bank0
  8112  1E65  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8113                           
  8114                           ;Dimmer_B1.c: 1086: DimmerLights_SelectPointer(lights);
  8115  1E66  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8116  1E67  319B  2340         	fcall	_DimmerLights_SelectPointer
  8117                           
  8118                           ;Dimmer_B1.c: 1087: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8119  1E69  0020               	movlb	0	; select bank0
  8120  1E6A  0822               	movf	setDimmerLights_DimmingRun@command,w
  8121  1E6B  3A01               	xorlw	1
  8122  1E6C  3000               	movlw	0
  8123  1E6D  1903               	skipnz
  8124  1E6E  3001               	movlw	1
  8125  1E6F  00A3               	movwf	??_setDimmerLights_DimmingRun
  8126  1E70  0021               	movlb	1	; select bank1
  8127  1E71  0A4E               	incf	_DimmerLights^(0+128),w
  8128  1E72  0086               	movwf	6
  8129  1E73  3001               	movlw	1	; select bank2/3
  8130  1E74  0087               	movwf	7
  8131  1E75  0020               	movlb	0	; select bank0
  8132  1E76  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8133  1E77  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8134  1E78  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8135  1E79  0801               	movf	1,w
  8136  1E7A  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8137  1E7B  39BF               	andlw	-65
  8138  1E7C  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8139  1E7D  0081               	movwf	1
  8140  1E7E  0008               	return
  8141  1E7F                     __end_of_setDimmerLights_DimmingRun:	
  8142                           
  8143                           	psect	text33
  8144  1C57                     __ptext33:	
  8145 ;; *************** function _getRF_KeyStatus *****************
  8146 ;; Defined at:
  8147 ;;		line 166 in file "../src/RF_Control_B1.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;		None
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;  key             1    1[BANK0 ] unsigned char 
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  1    wreg      unsigned char 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;Total ram usage:        3 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    5
  8168 ;; This function calls:
  8169 ;;		Nothing
  8170 ;; This function is called by:
  8171 ;;		_setRF_Main
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _getRF_KeyStatus
  8177  1C57                     _getRF_KeyStatus:	
  8178                           
  8179                           ;RF_Control_B1.c: 167: char key = 0;
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8183  1C57  0020               	movlb	0	; select bank0
  8184  1C58  01A1               	clrf	getRF_KeyStatus@key
  8185                           
  8186                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8187  1C59  01A2               	clrf	_getRF_KeyStatus$5413
  8188  1C5A  0AA2               	incf	_getRF_KeyStatus$5413,f
  8189  1C5B  1F0C               	btfss	12,6	;volatile
  8190  1C5C  1A0C               	btfsc	12,4	;volatile
  8191  1C5D  2C62               	goto	l9695
  8192  1C5E  1C0C               	btfss	12,0	;volatile
  8193  1C5F  1B8C               	btfsc	12,7	;volatile
  8194  1C60  2C62               	goto	l9695
  8195  1C61  01A2               	clrf	_getRF_KeyStatus$5413
  8196  1C62                     l9695:	
  8197  1C62  0822               	movf	_getRF_KeyStatus$5413,w
  8198  1C63  00A0               	movwf	??_getRF_KeyStatus
  8199  1C64  0820               	movf	??_getRF_KeyStatus,w
  8200  1C65  00A1               	movwf	getRF_KeyStatus@key
  8201                           
  8202                           ;RF_Control_B1.c: 179: return key;
  8203  1C66  0821               	movf	getRF_KeyStatus@key,w
  8204  1C67  0008               	return
  8205  1C68                     __end_of_getRF_KeyStatus:	
  8206                           
  8207                           	psect	text34
  8208  1C46                     __ptext34:	
  8209 ;; *************** function _getBuz_GO *****************
  8210 ;; Defined at:
  8211 ;;		line 82 in file "../src/Buzzer_B1.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  i               2    4[BANK0 ] int 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  2    0[BANK0 ] int 
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, status,0
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        6 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    5
  8232 ;; This function calls:
  8233 ;;		Nothing
  8234 ;; This function is called by:
  8235 ;;		_setRF_Main
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _getBuz_GO
  8241  1C46                     _getBuz_GO:	
  8242                           
  8243                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8247  1C46  0022               	movlb	2	; select bank2
  8248  1C47  0C20               	rrf	_Buz1^(0+256),w
  8249  1C48  3901               	andlw	1
  8250  1C49  0020               	movlb	0	; select bank0
  8251  1C4A  00A2               	movwf	??_getBuz_GO
  8252  1C4B  01A3               	clrf	??_getBuz_GO+1
  8253  1C4C  0822               	movf	??_getBuz_GO,w
  8254  1C4D  00A4               	movwf	getBuz_GO@i
  8255  1C4E  0823               	movf	??_getBuz_GO+1,w
  8256  1C4F  00A5               	movwf	getBuz_GO@i+1
  8257                           
  8258                           ;Buzzer_B1.c: 84: return i;
  8259  1C50  0825               	movf	getBuz_GO@i+1,w
  8260  1C51  01A1               	clrf	?_getBuz_GO+1
  8261  1C52  07A1               	addwf	?_getBuz_GO+1,f
  8262  1C53  0824               	movf	getBuz_GO@i,w
  8263  1C54  01A0               	clrf	?_getBuz_GO
  8264  1C55  07A0               	addwf	?_getBuz_GO,f
  8265  1C56  0008               	return
  8266  1C57                     __end_of_getBuz_GO:	
  8267                           
  8268                           	psect	text35
  8269  1BE3                     __ptext35:	
  8270 ;; *************** function _RF_RxDisable *****************
  8271 ;; Defined at:
  8272 ;;		line 154 in file "../src/RF_Control_B1.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;		None
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;		None
  8277 ;; Return value:  Size  Location     Type
  8278 ;;		None               void
  8279 ;; Registers used:
  8280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;Total ram usage:        0 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    7
  8293 ;; This function calls:
  8294 ;;		_CC2500_WriteCommand
  8295 ;; This function is called by:
  8296 ;;		_setRF_Main
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _RF_RxDisable
  8302  1BE3                     _RF_RxDisable:	
  8303                           
  8304                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8308  1BE3  0021               	movlb	1	; select bank1
  8309  1BE4  18A0               	btfsc	_RF1^(0+128),1
  8310  1BE5  2BE8               	goto	l2151
  8311  1BE6  1DA0               	btfss	_RF1^(0+128),3
  8312  1BE7  0008               	return
  8313  1BE8                     l2151:	
  8314                           
  8315                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8316  1BE8  11A0               	bcf	_RF1^(0+128),3
  8317                           
  8318                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8319  1BE9  10A0               	bcf	_RF1^(0+128),1
  8320                           
  8321                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8322  1BEA  3036               	movlw	54
  8323  1BEB  319E  264A  319B   	fcall	_CC2500_WriteCommand
  8324                           
  8325                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8326  1BEE  303A               	movlw	58
  8327  1BEF  319E  264A         	fcall	_CC2500_WriteCommand
  8328  1BF1  0008               	return
  8329  1BF2                     __end_of_RF_RxDisable:	
  8330                           
  8331                           	psect	text36
  8332  08E8                     __ptext36:	
  8333 ;; *************** function _CC2500_TxData *****************
  8334 ;; Defined at:
  8335 ;;		line 32 in file "../src/CC2500_B1.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        2 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    7
  8356 ;; This function calls:
  8357 ;;		_CC2500_WriteByte
  8358 ;;		_CC2500_WriteCommand
  8359 ;;		_RF_Timeout_Counter
  8360 ;;		_setRF_TimeoutCleared
  8361 ;; This function is called by:
  8362 ;;		_setRF_Main
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           
  8367                           ;psect for function _CC2500_TxData
  8368  08E8                     _CC2500_TxData:	
  8369                           
  8370                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8371                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8372                           
  8373                           ;incstack = 0
  8374                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8375  08E8  3036               	movlw	54
  8376  08E9  319E  264A  3188   	fcall	_CC2500_WriteCommand
  8377                           
  8378                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8379  08EC  303B               	movlw	59
  8380  08ED  319E  264A  3188   	fcall	_CC2500_WriteCommand
  8381                           
  8382                           ;CC2500_B1.c: 38: RC0 = 0;
  8383  08F0  0020               	movlb	0	; select bank0
  8384  08F1  100E               	bcf	14,0	;volatile
  8385                           
  8386                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8387  08F2  307F               	movlw	127
  8388  08F3  00A4               	movwf	??_CC2500_TxData
  8389  08F4  0824               	movf	??_CC2500_TxData,w
  8390  08F5  0021               	movlb	1	; select bank1
  8391  08F6  00D3               	movwf	_SPI0Buffer^(0+128)
  8392                           
  8393                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8394  08F7  28FB               	goto	l9395
  8395  08F8                     l9393:	
  8396                           
  8397                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8398  08F8  319D  2534  3188   	fcall	_RF_Timeout_Counter
  8399  08FB                     l9395:	
  8400  08FB  0020               	movlb	0	; select bank0
  8401  08FC  1E8E               	btfss	14,5	;volatile
  8402  08FD  2901               	goto	l9399
  8403  08FE  0021               	movlb	1	; select bank1
  8404  08FF  1F21               	btfss	(_RF1^(0+128)+1),6
  8405  0900  28F8               	goto	l9393
  8406  0901                     l9399:	
  8407                           
  8408                           ;CC2500_B1.c: 42: };
  8409                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8410  0901  319A  2288  3188   	fcall	_setRF_TimeoutCleared
  8411                           
  8412                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8413  0904  319D  25FD  3188   	fcall	_CC2500_WriteByte
  8414                           
  8415                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8416  0907  0021               	movlb	1	; select bank1
  8417  0908  0856               	movf	_Tx_Length^(0+128),w
  8418  0909  0020               	movlb	0	; select bank0
  8419  090A  00A4               	movwf	??_CC2500_TxData
  8420  090B  0824               	movf	??_CC2500_TxData,w
  8421  090C  0021               	movlb	1	; select bank1
  8422  090D  00D3               	movwf	_SPI0Buffer^(0+128)
  8423                           
  8424                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8425  090E  319D  25FD  3188   	fcall	_CC2500_WriteByte
  8426                           
  8427                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8428  0911  0020               	movlb	0	; select bank0
  8429  0912  01A5               	clrf	CC2500_TxData@loop_e
  8430  0913                     l9413:	
  8431  0913  0021               	movlb	1	; select bank1
  8432  0914  0856               	movf	_Tx_Length^(0+128),w
  8433  0915  0020               	movlb	0	; select bank0
  8434  0916  0225               	subwf	CC2500_TxData@loop_e,w
  8435  0917  1803               	btfsc	3,0
  8436  0918  292C               	goto	l235
  8437                           
  8438                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8439  0919  0825               	movf	CC2500_TxData@loop_e,w
  8440  091A  3EA0               	addlw	_RF_Data& (0+255)
  8441  091B  0086               	movwf	6
  8442  091C  3001               	movlw	1	; select bank3/4
  8443  091D  0087               	movwf	7
  8444  091E  0801               	movf	1,w
  8445  091F  00A4               	movwf	??_CC2500_TxData
  8446  0920  0824               	movf	??_CC2500_TxData,w
  8447  0921  0021               	movlb	1	; select bank1
  8448  0922  00D3               	movwf	_SPI0Buffer^(0+128)
  8449                           
  8450                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8451  0923  319D  25FD  3188   	fcall	_CC2500_WriteByte
  8452  0926  3001               	movlw	1
  8453  0927  0020               	movlb	0	; select bank0
  8454  0928  00A4               	movwf	??_CC2500_TxData
  8455  0929  0824               	movf	??_CC2500_TxData,w
  8456  092A  07A5               	addwf	CC2500_TxData@loop_e,f
  8457  092B  2913               	goto	l9413
  8458  092C                     l235:	
  8459                           
  8460                           ;CC2500_B1.c: 51: }
  8461                           ;CC2500_B1.c: 52: RC0 = 1;
  8462  092C  140E               	bsf	14,0	;volatile
  8463                           
  8464                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8465  092D  3035               	movlw	53
  8466  092E  319E  264A  3188   	fcall	_CC2500_WriteCommand
  8467                           
  8468                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8469  0931  2935               	goto	l9419
  8470  0932                     l9417:	
  8471                           
  8472                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8473  0932  319D  2534  3188   	fcall	_RF_Timeout_Counter
  8474  0935                     l9419:	
  8475  0935  0020               	movlb	0	; select bank0
  8476  0936  188E               	btfsc	14,1	;volatile
  8477  0937  293B               	goto	l9423
  8478  0938  0021               	movlb	1	; select bank1
  8479  0939  1F21               	btfss	(_RF1^(0+128)+1),6
  8480  093A  2932               	goto	l9417
  8481  093B                     l9423:	
  8482                           
  8483                           ;CC2500_B1.c: 56: };
  8484                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8485  093B  319A  2288  3188   	fcall	_setRF_TimeoutCleared
  8486                           
  8487                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8488  093E  2942               	goto	l9427
  8489  093F                     l9425:	
  8490                           
  8491                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8492  093F  319D  2534  3188   	fcall	_RF_Timeout_Counter
  8493  0942                     l9427:	
  8494  0942  0020               	movlb	0	; select bank0
  8495  0943  1C8E               	btfss	14,1	;volatile
  8496  0944  2948               	goto	l9431
  8497  0945  0021               	movlb	1	; select bank1
  8498  0946  1F21               	btfss	(_RF1^(0+128)+1),6
  8499  0947  293F               	goto	l9425
  8500  0948                     l9431:	
  8501                           
  8502                           ;CC2500_B1.c: 61: };
  8503                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8504  0948  319A  2288  3188   	fcall	_setRF_TimeoutCleared
  8505                           
  8506                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8507  094B  3036               	movlw	54
  8508  094C  319E  264A  3188   	fcall	_CC2500_WriteCommand
  8509                           
  8510                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8511  094F  303B               	movlw	59
  8512  0950  319E  264A         	fcall	_CC2500_WriteCommand
  8513                           
  8514                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8515  0952  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8516  0953  0008               	return
  8517  0954                     __end_of_CC2500_TxData:	
  8518                           
  8519                           	psect	text37
  8520  087D                     __ptext37:	
  8521 ;; *************** function _CC2500_RxData *****************
  8522 ;; Defined at:
  8523 ;;		line 73 in file "../src/CC2500_B1.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;		None
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8528 ;; Return value:  Size  Location     Type
  8529 ;;		None               void
  8530 ;; Registers used:
  8531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;Total ram usage:        2 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    7
  8544 ;; This function calls:
  8545 ;;		_CC2500_ReadByte
  8546 ;;		_CC2500_ReadStatus
  8547 ;;		_CC2500_WriteByte
  8548 ;;		_CC2500_WriteCommand
  8549 ;;		_RF_Timeout_Counter
  8550 ;;		_setRF_TimeoutCleared
  8551 ;; This function is called by:
  8552 ;;		_setRF_Main
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _CC2500_RxData
  8558  087D                     _CC2500_RxData:	
  8559                           
  8560                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8561                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8562                           
  8563                           ;incstack = 0
  8564                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8565  087D  0020               	movlb	0	; select bank0
  8566  087E  188E               	btfsc	14,1	;volatile
  8567  087F  0008               	return
  8568                           
  8569                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8570  0880  303B               	movlw	59
  8571  0881  319F  27DB  3188   	fcall	_CC2500_ReadStatus
  8572                           
  8573                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8574  0884  0021               	movlb	1	; select bank1
  8575  0885  0859               	movf	_s_data^(0+128),w
  8576  0886  1903               	btfsc	3,2
  8577  0887  0008               	return
  8578                           
  8579                           ;CC2500_B1.c: 90: RC0 = 0;
  8580  0888  0020               	movlb	0	; select bank0
  8581  0889  100E               	bcf	14,0	;volatile
  8582                           
  8583                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8584  088A  30FF               	movlw	255
  8585  088B  00A4               	movwf	??_CC2500_RxData
  8586  088C  0824               	movf	??_CC2500_RxData,w
  8587  088D  0021               	movlb	1	; select bank1
  8588  088E  00D3               	movwf	_SPI0Buffer^(0+128)
  8589                           
  8590                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8591  088F  2893               	goto	l9451
  8592  0890                     l9449:	
  8593                           
  8594                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8595  0890  319D  2534  3188   	fcall	_RF_Timeout_Counter
  8596  0893                     l9451:	
  8597  0893  0020               	movlb	0	; select bank0
  8598  0894  1E8E               	btfss	14,5	;volatile
  8599  0895  2899               	goto	l9455
  8600  0896  0021               	movlb	1	; select bank1
  8601  0897  1F21               	btfss	(_RF1^(0+128)+1),6
  8602  0898  2890               	goto	l9449
  8603  0899                     l9455:	
  8604                           
  8605                           ;CC2500_B1.c: 95: };
  8606                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8607  0899  319A  2288  3188   	fcall	_setRF_TimeoutCleared
  8608                           
  8609                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8610  089C  319D  25FD  3188   	fcall	_CC2500_WriteByte
  8611                           
  8612                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8613  089F  3190  2066  3188   	fcall	_CC2500_ReadByte
  8614                           
  8615                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8616  08A2  0021               	movlb	1	; select bank1
  8617  08A3  0853               	movf	_SPI0Buffer^(0+128),w
  8618  08A4  0020               	movlb	0	; select bank0
  8619  08A5  00A4               	movwf	??_CC2500_RxData
  8620  08A6  0824               	movf	??_CC2500_RxData,w
  8621  08A7  0021               	movlb	1	; select bank1
  8622  08A8  00D2               	movwf	_Rx_Length^(0+128)
  8623                           
  8624                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8625  08A9  0020               	movlb	0	; select bank0
  8626  08AA  01A5               	clrf	CC2500_RxData@loop_f
  8627  08AB                     l9471:	
  8628  08AB  0021               	movlb	1	; select bank1
  8629  08AC  0852               	movf	_Rx_Length^(0+128),w
  8630  08AD  0020               	movlb	0	; select bank0
  8631  08AE  0225               	subwf	CC2500_RxData@loop_f,w
  8632  08AF  1803               	btfsc	3,0
  8633  08B0  28C4               	goto	l9473
  8634                           
  8635                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8636  08B1  3190  2066  3188   	fcall	_CC2500_ReadByte
  8637                           
  8638                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8639  08B4  0021               	movlb	1	; select bank1
  8640  08B5  0853               	movf	_SPI0Buffer^(0+128),w
  8641  08B6  0020               	movlb	0	; select bank0
  8642  08B7  00A4               	movwf	??_CC2500_RxData
  8643  08B8  0825               	movf	CC2500_RxData@loop_f,w
  8644  08B9  3EA0               	addlw	_RF_Data& (0+255)
  8645  08BA  0086               	movwf	6
  8646  08BB  3001               	movlw	1	; select bank3/4
  8647  08BC  0087               	movwf	7
  8648  08BD  0824               	movf	??_CC2500_RxData,w
  8649  08BE  0081               	movwf	1
  8650  08BF  3001               	movlw	1
  8651  08C0  00A4               	movwf	??_CC2500_RxData
  8652  08C1  0824               	movf	??_CC2500_RxData,w
  8653  08C2  07A5               	addwf	CC2500_RxData@loop_f,f
  8654  08C3  28AB               	goto	l9471
  8655  08C4                     l9473:	
  8656                           
  8657                           ;CC2500_B1.c: 104: }
  8658                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8659  08C4  3190  2066  3188   	fcall	_CC2500_ReadByte
  8660                           
  8661                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8662  08C7  0021               	movlb	1	; select bank1
  8663  08C8  0853               	movf	_SPI0Buffer^(0+128),w
  8664  08C9  0020               	movlb	0	; select bank0
  8665  08CA  00A4               	movwf	??_CC2500_RxData
  8666  08CB  0824               	movf	??_CC2500_RxData,w
  8667  08CC  0021               	movlb	1	; select bank1
  8668  08CD  00D1               	movwf	_RSSI^(0+128)
  8669                           
  8670                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8671  08CE  3190  2066  3188   	fcall	_CC2500_ReadByte
  8672                           
  8673                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8674  08D1  0021               	movlb	1	; select bank1
  8675  08D2  0853               	movf	_SPI0Buffer^(0+128),w
  8676  08D3  0020               	movlb	0	; select bank0
  8677  08D4  00A4               	movwf	??_CC2500_RxData
  8678  08D5  0824               	movf	??_CC2500_RxData,w
  8679  08D6  0021               	movlb	1	; select bank1
  8680  08D7  00CA               	movwf	_CRC^(0+128)
  8681                           
  8682                           ;CC2500_B1.c: 109: RC0 = 1;
  8683  08D8  0020               	movlb	0	; select bank0
  8684  08D9  140E               	bsf	14,0	;volatile
  8685                           
  8686                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8687  08DA  0021               	movlb	1	; select bank1
  8688  08DB  1BCA               	btfsc	_CRC^(0+128),7
  8689                           
  8690                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8691  08DC  146D               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8692                           
  8693                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8694  08DD  11A0               	bcf	_RF1^(0+128),3
  8695                           
  8696                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8697  08DE  14A0               	bsf	_RF1^(0+128),1
  8698                           
  8699                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8700  08DF  3036               	movlw	54
  8701  08E0  319E  264A  3188   	fcall	_CC2500_WriteCommand
  8702                           
  8703                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8704  08E3  303A               	movlw	58
  8705  08E4  319E  264A         	fcall	_CC2500_WriteCommand
  8706  08E6  0021               	movlb	1	; select bank1
  8707  08E7  0008               	return
  8708  08E8                     __end_of_CC2500_RxData:	
  8709                           
  8710                           	psect	text38
  8711  1FDB                     __ptext38:	
  8712 ;; *************** function _CC2500_ReadStatus *****************
  8713 ;; Defined at:
  8714 ;;		line 308 in file "../src/CC2500_B1.c"
  8715 ;; Parameters:    Size  Location     Type
  8716 ;;  status_addr     1    wreg     unsigned char 
  8717 ;; Auto vars:     Size  Location     Type
  8718 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8719 ;; Return value:  Size  Location     Type
  8720 ;;		None               void
  8721 ;; Registers used:
  8722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8723 ;; Tracked objects:
  8724 ;;		On entry : 0/0
  8725 ;;		On exit  : 0/0
  8726 ;;		Unchanged: 0/0
  8727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;Total ram usage:        2 bytes
  8733 ;; Hardware stack levels used:    1
  8734 ;; Hardware stack levels required when called:    6
  8735 ;; This function calls:
  8736 ;;		_CC2500_ReadByte
  8737 ;;		_CC2500_WriteByte
  8738 ;;		_RF_Timeout_Counter
  8739 ;;		_setRF_TimeoutCleared
  8740 ;; This function is called by:
  8741 ;;		_CC2500_RxData
  8742 ;; This function uses a non-reentrant model
  8743 ;;
  8744                           
  8745                           
  8746                           ;psect for function _CC2500_ReadStatus
  8747  1FDB                     _CC2500_ReadStatus:	
  8748                           
  8749                           ;incstack = 0
  8750                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8751                           ;CC2500_ReadStatus@status_addr stored from wreg
  8752  1FDB  0020               	movlb	0	; select bank0
  8753  1FDC  00A3               	movwf	CC2500_ReadStatus@status_addr
  8754                           
  8755                           ;CC2500_B1.c: 309: RC0 = 0;
  8756  1FDD  100E               	bcf	14,0	;volatile
  8757                           
  8758                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8759  1FDE  0823               	movf	CC2500_ReadStatus@status_addr,w
  8760  1FDF  3EC0               	addlw	192
  8761  1FE0  00A2               	movwf	??_CC2500_ReadStatus
  8762  1FE1  0822               	movf	??_CC2500_ReadStatus,w
  8763  1FE2  0021               	movlb	1	; select bank1
  8764  1FE3  00D3               	movwf	_SPI0Buffer^(0+128)
  8765                           
  8766                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8767  1FE4  2FE8               	goto	l9115
  8768  1FE5                     l9113:	
  8769                           
  8770                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8771  1FE5  319D  2534  319F   	fcall	_RF_Timeout_Counter
  8772  1FE8                     l9115:	
  8773  1FE8  0020               	movlb	0	; select bank0
  8774  1FE9  1E8E               	btfss	14,5	;volatile
  8775  1FEA  2FEE               	goto	l9119
  8776  1FEB  0021               	movlb	1	; select bank1
  8777  1FEC  1F21               	btfss	(_RF1^(0+128)+1),6
  8778  1FED  2FE5               	goto	l9113
  8779  1FEE                     l9119:	
  8780                           
  8781                           ;CC2500_B1.c: 314: };
  8782                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8783  1FEE  319A  2288  319F   	fcall	_setRF_TimeoutCleared
  8784                           
  8785                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8786  1FF1  319D  25FD  319F   	fcall	_CC2500_WriteByte
  8787                           
  8788                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8789  1FF4  3190  2066         	fcall	_CC2500_ReadByte
  8790                           
  8791                           ;CC2500_B1.c: 319: RC0 = 1;
  8792  1FF6  0020               	movlb	0	; select bank0
  8793  1FF7  140E               	bsf	14,0	;volatile
  8794                           
  8795                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8796  1FF8  0021               	movlb	1	; select bank1
  8797  1FF9  0853               	movf	_SPI0Buffer^(0+128),w
  8798  1FFA  0020               	movlb	0	; select bank0
  8799  1FFB  00A2               	movwf	??_CC2500_ReadStatus
  8800  1FFC  0822               	movf	??_CC2500_ReadStatus,w
  8801  1FFD  0021               	movlb	1	; select bank1
  8802  1FFE  00D9               	movwf	_s_data^(0+128)
  8803  1FFF  0008               	return
  8804  2000                     __end_of_CC2500_ReadStatus:	
  8805                           
  8806                           	psect	text39
  8807  1066                     __ptext39:	
  8808 ;; *************** function _CC2500_ReadByte *****************
  8809 ;; Defined at:
  8810 ;;		line 242 in file "../src/CC2500_B1.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;		None
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8815 ;; Return value:  Size  Location     Type
  8816 ;;		None               void
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, status,0
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;Total ram usage:        2 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    5
  8831 ;; This function calls:
  8832 ;;		Nothing
  8833 ;; This function is called by:
  8834 ;;		_CC2500_RxData
  8835 ;;		_CC2500_ReadStatus
  8836 ;;		_CC2500_ReadREG
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           
  8841                           ;psect for function _CC2500_ReadByte
  8842  1066                     _CC2500_ReadByte:	
  8843                           
  8844                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8845                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8846                           
  8847                           ;incstack = 0
  8848                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8849  1066  0020               	movlb	0	; select bank0
  8850  1067  01A1               	clrf	CC2500_ReadByte@loop_b
  8851  1068                     L2:	
  8852  1068  3008               	movlw	8
  8853  1069  0221               	subwf	CC2500_ReadByte@loop_b,w
  8854  106A  1803               	btfsc	3,0
  8855  106B  0008               	return
  8856                           
  8857                           ;CC2500_B1.c: 245: RC3 = 1;
  8858  106C  158E               	bsf	14,3	;volatile
  8859                           
  8860                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8861  106D  1003               	clrc
  8862  106E  0021               	movlb	1	; select bank1
  8863  106F  0DD3               	rlf	_SPI0Buffer^(0+128),f
  8864                           
  8865                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8866  1070  0020               	movlb	0	; select bank0
  8867  1071  1E8E               	btfss	14,5	;volatile
  8868  1072  2876               	goto	l8987
  8869                           
  8870                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8871  1073  0021               	movlb	1	; select bank1
  8872  1074  1453               	bsf	_SPI0Buffer^(0+128),0
  8873  1075  287C               	goto	l8989
  8874  1076                     l8987:	
  8875                           
  8876                           ;CC2500_B1.c: 249: else
  8877                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8878  1076  30FE               	movlw	254
  8879  1077  0020               	movlb	0	; select bank0
  8880  1078  00A0               	movwf	??_CC2500_ReadByte
  8881  1079  0820               	movf	??_CC2500_ReadByte,w
  8882  107A  0021               	movlb	1	; select bank1
  8883  107B  05D3               	andwf	_SPI0Buffer^(0+128),f
  8884  107C                     l8989:	
  8885                           
  8886                           ;CC2500_B1.c: 251: RC3 = 0;
  8887  107C  0020               	movlb	0	; select bank0
  8888  107D  118E               	bcf	14,3	;volatile
  8889  107E  3001               	movlw	1
  8890  107F  00A0               	movwf	??_CC2500_ReadByte
  8891  1080  0820               	movf	??_CC2500_ReadByte,w
  8892  1081  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8893  1082  2868               	goto	L2
  8894  1083                     __end_of_CC2500_ReadByte:	
  8895                           
  8896                           	psect	text40
  8897  1D49                     __ptext40:	
  8898 ;; *************** function _CC2500_PowerOnInitial *****************
  8899 ;; Defined at:
  8900 ;;		line 126 in file "../src/CC2500_B1.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;		None
  8905 ;; Return value:  Size  Location     Type
  8906 ;;		None               void
  8907 ;; Registers used:
  8908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;Total ram usage:        0 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    8
  8921 ;; This function calls:
  8922 ;;		_CC2500_ClearRXFIFO
  8923 ;;		_CC2500_ClearTXFIFO
  8924 ;;		_CC2500_FrequencyCabr
  8925 ;;		_CC2500_InitPATable
  8926 ;;		_CC2500_InitSetREG
  8927 ;;		_CC2500_PowerRST
  8928 ;;		_CC2500_SIDLEMode
  8929 ;; This function is called by:
  8930 ;;		_main
  8931 ;;		_setRF_Main
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           
  8936                           ;psect for function _CC2500_PowerOnInitial
  8937  1D49                     _CC2500_PowerOnInitial:	
  8938                           
  8939                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8940                           
  8941                           ;incstack = 0
  8942                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8943  1D49  3194  240D  319D   	fcall	_CC2500_PowerRST
  8944                           
  8945                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8946  1D4C  3190  20D1  319D   	fcall	_CC2500_InitSetREG
  8947                           
  8948                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8949  1D4F  319E  26F4  319D   	fcall	_CC2500_InitPATable
  8950                           
  8951                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8952  1D52  319A  2290  319D   	fcall	_CC2500_ClearTXFIFO
  8953                           
  8954                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8955  1D55  319A  228C  319D   	fcall	_CC2500_ClearRXFIFO
  8956                           
  8957                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8958  1D58  319B  23A0  319D   	fcall	_CC2500_FrequencyCabr
  8959                           
  8960                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8961  1D5B  319A  2294         	fcall	_CC2500_SIDLEMode
  8962  1D5D  0008               	return
  8963  1D5E                     __end_of_CC2500_PowerOnInitial:	
  8964                           
  8965                           	psect	text41
  8966  1A94                     __ptext41:	
  8967 ;; *************** function _CC2500_SIDLEMode *****************
  8968 ;; Defined at:
  8969 ;;		line 216 in file "../src/CC2500_B1.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;		None
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;		None
  8974 ;; Return value:  Size  Location     Type
  8975 ;;		None               void
  8976 ;; Registers used:
  8977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;Total ram usage:        0 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:    7
  8990 ;; This function calls:
  8991 ;;		_CC2500_WriteCommand
  8992 ;; This function is called by:
  8993 ;;		_CC2500_PowerOnInitial
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           
  8998                           ;psect for function _CC2500_SIDLEMode
  8999  1A94                     _CC2500_SIDLEMode:	
  9000                           
  9001                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9002                           
  9003                           ;incstack = 0
  9004                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9005  1A94  3036               	movlw	54
  9006  1A95  319E  264A         	fcall	_CC2500_WriteCommand
  9007  1A97  0008               	return
  9008  1A98                     __end_of_CC2500_SIDLEMode:	
  9009                           
  9010                           	psect	text42
  9011  140D                     __ptext42:	
  9012 ;; *************** function _CC2500_PowerRST *****************
  9013 ;; Defined at:
  9014 ;;		line 139 in file "../src/CC2500_B1.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;		None
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;		None
  9019 ;; Return value:  Size  Location     Type
  9020 ;;		None               void
  9021 ;; Registers used:
  9022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;Total ram usage:        1 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    6
  9035 ;; This function calls:
  9036 ;;		_CC2500_WriteByte
  9037 ;;		_DelayTime_1us
  9038 ;;		_RF_Timeout_Counter
  9039 ;;		_setRF_TimeoutCleared
  9040 ;; This function is called by:
  9041 ;;		_CC2500_PowerOnInitial
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _CC2500_PowerRST
  9047  140D                     _CC2500_PowerRST:	
  9048                           
  9049                           ;CC2500_B1.c: 140: RC3 = 0;
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9053  140D  0020               	movlb	0	; select bank0
  9054  140E  118E               	bcf	14,3	;volatile
  9055                           
  9056                           ;CC2500_B1.c: 141: RC4 = 0;
  9057  140F  120E               	bcf	14,4	;volatile
  9058                           
  9059                           ;CC2500_B1.c: 142: RC0 = 1;
  9060  1410  140E               	bsf	14,0	;volatile
  9061                           
  9062                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9063  1411  300A               	movlw	10
  9064  1412  00A0               	movwf	DelayTime_1us@count
  9065  1413  3000               	movlw	0
  9066  1414  00A1               	movwf	DelayTime_1us@count+1
  9067  1415  3190  2083  3194   	fcall	_DelayTime_1us
  9068                           
  9069                           ;CC2500_B1.c: 144: RC0 = 0;
  9070  1418  0020               	movlb	0	; select bank0
  9071  1419  100E               	bcf	14,0	;volatile
  9072                           
  9073                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9074  141A  300A               	movlw	10
  9075  141B  00A0               	movwf	DelayTime_1us@count
  9076  141C  3000               	movlw	0
  9077  141D  00A1               	movwf	DelayTime_1us@count+1
  9078  141E  3190  2083  3194   	fcall	_DelayTime_1us
  9079                           
  9080                           ;CC2500_B1.c: 146: RC0 = 1;
  9081  1421  0020               	movlb	0	; select bank0
  9082  1422  140E               	bsf	14,0	;volatile
  9083                           
  9084                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9085  1423  3028               	movlw	40
  9086  1424  00A0               	movwf	DelayTime_1us@count
  9087  1425  3000               	movlw	0
  9088  1426  00A1               	movwf	DelayTime_1us@count+1
  9089  1427  3190  2083  3194   	fcall	_DelayTime_1us
  9090                           
  9091                           ;CC2500_B1.c: 148: RC0 = 0;
  9092  142A  0020               	movlb	0	; select bank0
  9093  142B  100E               	bcf	14,0	;volatile
  9094                           
  9095                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9096  142C  3030               	movlw	48
  9097  142D  00A6               	movwf	??_CC2500_PowerRST
  9098  142E  0826               	movf	??_CC2500_PowerRST,w
  9099  142F  0021               	movlb	1	; select bank1
  9100  1430  00D3               	movwf	_SPI0Buffer^(0+128)
  9101                           
  9102                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9103  1431  2C35               	goto	l9143
  9104  1432                     l9141:	
  9105                           
  9106                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9107  1432  319D  2534  3194   	fcall	_RF_Timeout_Counter
  9108  1435                     l9143:	
  9109  1435  0020               	movlb	0	; select bank0
  9110  1436  1E8E               	btfss	14,5	;volatile
  9111  1437  2C3B               	goto	l9147
  9112  1438  0021               	movlb	1	; select bank1
  9113  1439  1F21               	btfss	(_RF1^(0+128)+1),6
  9114  143A  2C32               	goto	l9141
  9115  143B                     l9147:	
  9116                           
  9117                           ;CC2500_B1.c: 152: };
  9118                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9119  143B  319A  2288  3194   	fcall	_setRF_TimeoutCleared
  9120                           
  9121                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9122  143E  319D  25FD  3194   	fcall	_CC2500_WriteByte
  9123                           
  9124                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9125  1441  2C45               	goto	l9153
  9126  1442                     l9151:	
  9127                           
  9128                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9129  1442  319D  2534  3194   	fcall	_RF_Timeout_Counter
  9130  1445                     l9153:	
  9131  1445  0020               	movlb	0	; select bank0
  9132  1446  1E8E               	btfss	14,5	;volatile
  9133  1447  2C4B               	goto	l9157
  9134  1448  0021               	movlb	1	; select bank1
  9135  1449  1F21               	btfss	(_RF1^(0+128)+1),6
  9136  144A  2C42               	goto	l9151
  9137  144B                     l9157:	
  9138                           
  9139                           ;CC2500_B1.c: 157: };
  9140                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9141  144B  319A  2288         	fcall	_setRF_TimeoutCleared
  9142                           
  9143                           ;CC2500_B1.c: 159: RC4 = 0;
  9144  144D  0020               	movlb	0	; select bank0
  9145  144E  120E               	bcf	14,4	;volatile
  9146                           
  9147                           ;CC2500_B1.c: 160: RC0 = 1;
  9148  144F  140E               	bsf	14,0	;volatile
  9149  1450  0008               	return
  9150  1451                     __end_of_CC2500_PowerRST:	
  9151                           
  9152                           	psect	text43
  9153  10D1                     __ptext43:	
  9154 ;; *************** function _CC2500_InitSetREG *****************
  9155 ;; Defined at:
  9156 ;;		line 166 in file "../src/CC2500_B1.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;		None
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9161 ;;  temp2           1    7[BANK0 ] unsigned char 
  9162 ;;  temp1           1    6[BANK0 ] unsigned char 
  9163 ;; Return value:  Size  Location     Type
  9164 ;;		None               void
  9165 ;; Registers used:
  9166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9167 ;; Tracked objects:
  9168 ;;		On entry : 0/0
  9169 ;;		On exit  : 0/0
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;Total ram usage:        4 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; Hardware stack levels required when called:    7
  9179 ;; This function calls:
  9180 ;;		_CC2500_WriteREG
  9181 ;; This function is called by:
  9182 ;;		_CC2500_PowerOnInitial
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           
  9187                           ;psect for function _CC2500_InitSetREG
  9188  10D1                     _CC2500_InitSetREG:	
  9189                           
  9190                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9191                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9192                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9193                           
  9194                           ;incstack = 0
  9195                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9196  10D1  0020               	movlb	0	; select bank0
  9197  10D2  01A8               	clrf	CC2500_InitSetREG@loop_c
  9198  10D3                     L3:	
  9199  10D3  302F               	movlw	47
  9200  10D4  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9201  10D5  1803               	btfsc	3,0
  9202  10D6  0008               	return
  9203                           
  9204                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9205  10D7  0828               	movf	CC2500_InitSetREG@loop_c,w
  9206  10D8  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9207  10D9  0084               	movwf	4
  9208  10DA  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9209  10DB  1803               	skipnc
  9210  10DC  3E01               	addlw	1
  9211  10DD  0085               	movwf	5
  9212  10DE  0800               	movf	0,w	;code access
  9213  10DF  00A5               	movwf	??_CC2500_InitSetREG
  9214  10E0  0825               	movf	??_CC2500_InitSetREG,w
  9215  10E1  00A6               	movwf	CC2500_InitSetREG@temp1
  9216                           
  9217                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9218  10E2  0828               	movf	CC2500_InitSetREG@loop_c,w
  9219  10E3  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9220  10E4  0084               	movwf	4
  9221  10E5  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9222  10E6  1803               	skipnc
  9223  10E7  3E01               	addlw	1
  9224  10E8  0085               	movwf	5
  9225  10E9  0800               	movf	0,w	;code access
  9226  10EA  00A5               	movwf	??_CC2500_InitSetREG
  9227  10EB  0825               	movf	??_CC2500_InitSetREG,w
  9228  10EC  00A7               	movwf	CC2500_InitSetREG@temp2
  9229                           
  9230                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9231  10ED  0827               	movf	CC2500_InitSetREG@temp2,w
  9232  10EE  00A5               	movwf	??_CC2500_InitSetREG
  9233  10EF  0825               	movf	??_CC2500_InitSetREG,w
  9234  10F0  00A2               	movwf	CC2500_WriteREG@value
  9235  10F1  0826               	movf	CC2500_InitSetREG@temp1,w
  9236  10F2  319F  27B8  3190   	fcall	_CC2500_WriteREG
  9237  10F5  3001               	movlw	1
  9238  10F6  0020               	movlb	0	; select bank0
  9239  10F7  00A5               	movwf	??_CC2500_InitSetREG
  9240  10F8  0825               	movf	??_CC2500_InitSetREG,w
  9241  10F9  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9242  10FA  28D3               	goto	L3
  9243  10FB                     __end_of_CC2500_InitSetREG:	
  9244                           
  9245                           	psect	text44
  9246  1EF4                     __ptext44:	
  9247 ;; *************** function _CC2500_InitPATable *****************
  9248 ;; Defined at:
  9249 ;;		line 181 in file "../src/CC2500_B1.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;		None
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9254 ;;  temp            1    6[BANK0 ] unsigned char 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;Total ram usage:        3 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    7
  9271 ;; This function calls:
  9272 ;;		_CC2500_WriteREG
  9273 ;; This function is called by:
  9274 ;;		_CC2500_PowerOnInitial
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           
  9279                           ;psect for function _CC2500_InitPATable
  9280  1EF4                     _CC2500_InitPATable:	
  9281                           
  9282                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9283                           ;CC2500_B1.c: 183: unsigned char temp;
  9284                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9285                           
  9286                           ;incstack = 0
  9287                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9288  1EF4  0020               	movlb	0	; select bank0
  9289  1EF5  01A7               	clrf	CC2500_InitPATable@loop_d
  9290  1EF6                     L4:	
  9291  1EF6  3008               	movlw	8
  9292  1EF7  0227               	subwf	CC2500_InitPATable@loop_d,w
  9293  1EF8  1803               	btfsc	3,0
  9294  1EF9  0008               	return
  9295                           
  9296                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9297  1EFA  0827               	movf	CC2500_InitPATable@loop_d,w
  9298  1EFB  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9299  1EFC  0084               	movwf	4
  9300  1EFD  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9301  1EFE  1803               	skipnc
  9302  1EFF  3E01               	addlw	1
  9303  1F00  0085               	movwf	5
  9304  1F01  0800               	movf	0,w	;code access
  9305  1F02  00A5               	movwf	??_CC2500_InitPATable
  9306  1F03  0825               	movf	??_CC2500_InitPATable,w
  9307  1F04  00A6               	movwf	CC2500_InitPATable@temp
  9308                           
  9309                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9310  1F05  0826               	movf	CC2500_InitPATable@temp,w
  9311  1F06  00A5               	movwf	??_CC2500_InitPATable
  9312  1F07  0825               	movf	??_CC2500_InitPATable,w
  9313  1F08  00A2               	movwf	CC2500_WriteREG@value
  9314  1F09  303E               	movlw	62
  9315  1F0A  319F  27B8  319E   	fcall	_CC2500_WriteREG
  9316  1F0D  3001               	movlw	1
  9317  1F0E  0020               	movlb	0	; select bank0
  9318  1F0F  00A5               	movwf	??_CC2500_InitPATable
  9319  1F10  0825               	movf	??_CC2500_InitPATable,w
  9320  1F11  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9321  1F12  2EF6               	goto	L4
  9322  1F13                     __end_of_CC2500_InitPATable:	
  9323                           
  9324                           	psect	text45
  9325  1FB8                     __ptext45:	
  9326 ;; *************** function _CC2500_WriteREG *****************
  9327 ;; Defined at:
  9328 ;;		line 258 in file "../src/CC2500_B1.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  w_addr          1    wreg     unsigned char 
  9331 ;;  value           1    2[BANK0 ] unsigned char 
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9343 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;Total ram usage:        3 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    6
  9350 ;; This function calls:
  9351 ;;		_CC2500_WriteByte
  9352 ;;		_RF_Timeout_Counter
  9353 ;;		_setRF_TimeoutCleared
  9354 ;; This function is called by:
  9355 ;;		_CC2500_InitSetREG
  9356 ;;		_CC2500_InitPATable
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           
  9361                           ;psect for function _CC2500_WriteREG
  9362  1FB8                     _CC2500_WriteREG:	
  9363                           
  9364                           ;incstack = 0
  9365                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9366                           ;CC2500_WriteREG@w_addr stored from wreg
  9367  1FB8  0020               	movlb	0	; select bank0
  9368  1FB9  00A4               	movwf	CC2500_WriteREG@w_addr
  9369                           
  9370                           ;CC2500_B1.c: 259: RC0 = 0;
  9371  1FBA  100E               	bcf	14,0	;volatile
  9372                           
  9373                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9374  1FBB  0824               	movf	CC2500_WriteREG@w_addr,w
  9375  1FBC  00A3               	movwf	??_CC2500_WriteREG
  9376  1FBD  0823               	movf	??_CC2500_WriteREG,w
  9377  1FBE  0021               	movlb	1	; select bank1
  9378  1FBF  00D3               	movwf	_SPI0Buffer^(0+128)
  9379                           
  9380                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9381  1FC0  2FC4               	goto	l9011
  9382  1FC1                     l9009:	
  9383                           
  9384                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9385  1FC1  319D  2534  319F   	fcall	_RF_Timeout_Counter
  9386  1FC4                     l9011:	
  9387  1FC4  0020               	movlb	0	; select bank0
  9388  1FC5  1E8E               	btfss	14,5	;volatile
  9389  1FC6  2FCA               	goto	l9015
  9390  1FC7  0021               	movlb	1	; select bank1
  9391  1FC8  1F21               	btfss	(_RF1^(0+128)+1),6
  9392  1FC9  2FC1               	goto	l9009
  9393  1FCA                     l9015:	
  9394                           
  9395                           ;CC2500_B1.c: 263: };
  9396                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9397  1FCA  319A  2288  319F   	fcall	_setRF_TimeoutCleared
  9398                           
  9399                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9400  1FCD  319D  25FD  319F   	fcall	_CC2500_WriteByte
  9401                           
  9402                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9403  1FD0  0020               	movlb	0	; select bank0
  9404  1FD1  0822               	movf	CC2500_WriteREG@value,w
  9405  1FD2  00A3               	movwf	??_CC2500_WriteREG
  9406  1FD3  0823               	movf	??_CC2500_WriteREG,w
  9407  1FD4  0021               	movlb	1	; select bank1
  9408  1FD5  00D3               	movwf	_SPI0Buffer^(0+128)
  9409                           
  9410                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9411  1FD6  319D  25FD         	fcall	_CC2500_WriteByte
  9412                           
  9413                           ;CC2500_B1.c: 269: RC0 = 1;
  9414  1FD8  0020               	movlb	0	; select bank0
  9415  1FD9  140E               	bsf	14,0	;volatile
  9416  1FDA  0008               	return
  9417  1FDB                     __end_of_CC2500_WriteREG:	
  9418                           
  9419                           	psect	text46
  9420  1BA0                     __ptext46:	
  9421 ;; *************** function _CC2500_FrequencyCabr *****************
  9422 ;; Defined at:
  9423 ;;		line 208 in file "../src/CC2500_B1.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;		None
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;		None
  9428 ;; Return value:  Size  Location     Type
  9429 ;;		None               void
  9430 ;; Registers used:
  9431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;Total ram usage:        0 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:    7
  9444 ;; This function calls:
  9445 ;;		_CC2500_WriteCommand
  9446 ;;		_DelayTime_1us
  9447 ;; This function is called by:
  9448 ;;		_CC2500_PowerOnInitial
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           
  9453                           ;psect for function _CC2500_FrequencyCabr
  9454  1BA0                     _CC2500_FrequencyCabr:	
  9455                           
  9456                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9457                           
  9458                           ;incstack = 0
  9459                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9460  1BA0  3033               	movlw	51
  9461  1BA1  319E  264A  319B   	fcall	_CC2500_WriteCommand
  9462                           
  9463                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9464  1BA4  30E8               	movlw	232
  9465  1BA5  0020               	movlb	0	; select bank0
  9466  1BA6  00A0               	movwf	DelayTime_1us@count
  9467  1BA7  3003               	movlw	3
  9468  1BA8  00A1               	movwf	DelayTime_1us@count+1
  9469  1BA9  3190  2083         	fcall	_DelayTime_1us
  9470  1BAB  0008               	return
  9471  1BAC                     __end_of_CC2500_FrequencyCabr:	
  9472                           
  9473                           	psect	text47
  9474  1083                     __ptext47:	
  9475 ;; *************** function _DelayTime_1us *****************
  9476 ;; Defined at:
  9477 ;;		line 327 in file "../src/CC2500_B1.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;  count           2    0[BANK0 ] int 
  9480 ;; Auto vars:     Size  Location     Type
  9481 ;;  j               2    4[BANK0 ] unsigned int 
  9482 ;;  i               2    2[BANK0 ] unsigned int 
  9483 ;; Return value:  Size  Location     Type
  9484 ;;		None               void
  9485 ;; Registers used:
  9486 ;;		wreg, status,2
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9492 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;Total ram usage:        6 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    5
  9499 ;; This function calls:
  9500 ;;		Nothing
  9501 ;; This function is called by:
  9502 ;;		_CC2500_PowerRST
  9503 ;;		_CC2500_FrequencyCabr
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           
  9508                           ;psect for function _DelayTime_1us
  9509  1083                     _DelayTime_1us:	
  9510                           
  9511                           ;CC2500_B1.c: 328: unsigned int i, j;
  9512                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9516  1083  3001               	movlw	1
  9517  1084  0020               	movlb	0	; select bank0
  9518  1085  00A2               	movwf	DelayTime_1us@i
  9519  1086  3000               	movlw	0
  9520  1087  00A3               	movwf	DelayTime_1us@i+1
  9521  1088                     l347:	
  9522  1088  0821               	movf	DelayTime_1us@count+1,w
  9523  1089  0223               	subwf	DelayTime_1us@i+1,w
  9524  108A  1D03               	skipz
  9525  108B  288E               	goto	u9785
  9526  108C  0820               	movf	DelayTime_1us@count,w
  9527  108D  0222               	subwf	DelayTime_1us@i,w
  9528  108E                     u9785:	
  9529  108E  1803               	btfsc	3,0
  9530  108F  0008               	return
  9531                           
  9532                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9533  1090  01A4               	clrf	DelayTime_1us@j
  9534  1091  01A5               	clrf	DelayTime_1us@j+1
  9535  1092  3000               	movlw	0
  9536  1093  0225               	subwf	DelayTime_1us@j+1,w
  9537  1094  3002               	movlw	2
  9538  1095  1903               	skipnz
  9539  1096  0224               	subwf	DelayTime_1us@j,w
  9540  1097  1803               	btfsc	3,0
  9541  1098  28A4               	goto	l9003
  9542  1099                     l9001:	
  9543  1099  3001               	movlw	1
  9544  109A  07A4               	addwf	DelayTime_1us@j,f
  9545  109B  3000               	movlw	0
  9546  109C  3DA5               	addwfc	DelayTime_1us@j+1,f
  9547  109D  3000               	movlw	0
  9548  109E  0225               	subwf	DelayTime_1us@j+1,w
  9549  109F  3002               	movlw	2
  9550  10A0  1903               	skipnz
  9551  10A1  0224               	subwf	DelayTime_1us@j,w
  9552  10A2  1C03               	skipc
  9553  10A3  2899               	goto	l9001
  9554  10A4                     l9003:	
  9555  10A4  3001               	movlw	1
  9556  10A5  07A2               	addwf	DelayTime_1us@i,f
  9557  10A6  3000               	movlw	0
  9558  10A7  3DA3               	addwfc	DelayTime_1us@i+1,f
  9559  10A8  2888               	goto	l347
  9560  10A9                     __end_of_DelayTime_1us:	
  9561                           
  9562                           	psect	text48
  9563  1A90                     __ptext48:	
  9564 ;; *************** function _CC2500_ClearTXFIFO *****************
  9565 ;; Defined at:
  9566 ;;		line 194 in file "../src/CC2500_B1.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;		None
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;		None
  9571 ;; Return value:  Size  Location     Type
  9572 ;;		None               void
  9573 ;; Registers used:
  9574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;Total ram usage:        0 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; Hardware stack levels required when called:    7
  9587 ;; This function calls:
  9588 ;;		_CC2500_WriteCommand
  9589 ;; This function is called by:
  9590 ;;		_CC2500_PowerOnInitial
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           
  9595                           ;psect for function _CC2500_ClearTXFIFO
  9596  1A90                     _CC2500_ClearTXFIFO:	
  9597                           
  9598                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9599                           
  9600                           ;incstack = 0
  9601                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9602  1A90  303B               	movlw	59
  9603  1A91  319E  264A         	fcall	_CC2500_WriteCommand
  9604  1A93  0008               	return
  9605  1A94                     __end_of_CC2500_ClearTXFIFO:	
  9606                           
  9607                           	psect	text49
  9608  1A8C                     __ptext49:	
  9609 ;; *************** function _CC2500_ClearRXFIFO *****************
  9610 ;; Defined at:
  9611 ;;		line 201 in file "../src/CC2500_B1.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;		None
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;		None               void
  9618 ;; Registers used:
  9619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;Total ram usage:        0 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    7
  9632 ;; This function calls:
  9633 ;;		_CC2500_WriteCommand
  9634 ;; This function is called by:
  9635 ;;		_CC2500_PowerOnInitial
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           
  9640                           ;psect for function _CC2500_ClearRXFIFO
  9641  1A8C                     _CC2500_ClearRXFIFO:	
  9642                           
  9643                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9644                           
  9645                           ;incstack = 0
  9646                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9647  1A8C  303A               	movlw	58
  9648  1A8D  319E  264A         	fcall	_CC2500_WriteCommand
  9649  1A8F  0008               	return
  9650  1A90                     __end_of_CC2500_ClearRXFIFO:	
  9651                           
  9652                           	psect	text50
  9653  1E4A                     __ptext50:	
  9654 ;; *************** function _CC2500_WriteCommand *****************
  9655 ;; Defined at:
  9656 ;;		line 292 in file "../src/CC2500_B1.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;  command         1    wreg     unsigned char 
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;  command         1    3[BANK0 ] unsigned char 
  9661 ;; Return value:  Size  Location     Type
  9662 ;;		None               void
  9663 ;; Registers used:
  9664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;Total ram usage:        2 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    6
  9677 ;; This function calls:
  9678 ;;		_CC2500_WriteByte
  9679 ;;		_RF_Timeout_Counter
  9680 ;;		_setRF_TimeoutCleared
  9681 ;; This function is called by:
  9682 ;;		_CC2500_TxData
  9683 ;;		_CC2500_RxData
  9684 ;;		_CC2500_ClearTXFIFO
  9685 ;;		_CC2500_ClearRXFIFO
  9686 ;;		_CC2500_FrequencyCabr
  9687 ;;		_CC2500_SIDLEMode
  9688 ;;		_setRF_Main
  9689 ;;		_RF_RxDisable
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           
  9694                           ;psect for function _CC2500_WriteCommand
  9695  1E4A                     _CC2500_WriteCommand:	
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9699                           ;CC2500_WriteCommand@command stored from wreg
  9700  1E4A  0020               	movlb	0	; select bank0
  9701  1E4B  00A3               	movwf	CC2500_WriteCommand@command
  9702                           
  9703                           ;CC2500_B1.c: 293: RC0 = 0;
  9704  1E4C  100E               	bcf	14,0	;volatile
  9705                           
  9706                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9707  1E4D  0823               	movf	CC2500_WriteCommand@command,w
  9708  1E4E  00A2               	movwf	??_CC2500_WriteCommand
  9709  1E4F  0822               	movf	??_CC2500_WriteCommand,w
  9710  1E50  0021               	movlb	1	; select bank1
  9711  1E51  00D3               	movwf	_SPI0Buffer^(0+128)
  9712                           
  9713                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9714  1E52  2E56               	goto	l8965
  9715  1E53                     l8963:	
  9716                           
  9717                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9718  1E53  319D  2534  319E   	fcall	_RF_Timeout_Counter
  9719  1E56                     l8965:	
  9720  1E56  0020               	movlb	0	; select bank0
  9721  1E57  1E8E               	btfss	14,5	;volatile
  9722  1E58  2E5C               	goto	l8969
  9723  1E59  0021               	movlb	1	; select bank1
  9724  1E5A  1F21               	btfss	(_RF1^(0+128)+1),6
  9725  1E5B  2E53               	goto	l8963
  9726  1E5C                     l8969:	
  9727                           
  9728                           ;CC2500_B1.c: 298: };
  9729                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9730  1E5C  319A  2288  319E   	fcall	_setRF_TimeoutCleared
  9731                           
  9732                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9733  1E5F  319D  25FD         	fcall	_CC2500_WriteByte
  9734                           
  9735                           ;CC2500_B1.c: 302: RC0 = 1;
  9736  1E61  0020               	movlb	0	; select bank0
  9737  1E62  140E               	bsf	14,0	;volatile
  9738  1E63  0008               	return
  9739  1E64                     __end_of_CC2500_WriteCommand:	
  9740                           
  9741                           	psect	text51
  9742  1A88                     __ptext51:	
  9743 ;; *************** function _setRF_TimeoutCleared *****************
  9744 ;; Defined at:
  9745 ;;		line 149 in file "../src/RF_Control_B1.c"
  9746 ;; Parameters:    Size  Location     Type
  9747 ;;		None
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;		None
  9750 ;; Return value:  Size  Location     Type
  9751 ;;		None               void
  9752 ;; Registers used:
  9753 ;;		status,2
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;Total ram usage:        0 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    5
  9766 ;; This function calls:
  9767 ;;		Nothing
  9768 ;; This function is called by:
  9769 ;;		_CC2500_TxData
  9770 ;;		_CC2500_RxData
  9771 ;;		_CC2500_PowerRST
  9772 ;;		_CC2500_WriteREG
  9773 ;;		_CC2500_WriteCommand
  9774 ;;		_CC2500_ReadStatus
  9775 ;;		_CC2500_ReadREG
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           
  9780                           ;psect for function _setRF_TimeoutCleared
  9781  1A88                     _setRF_TimeoutCleared:	
  9782                           
  9783                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9784                           
  9785                           ;incstack = 0
  9786                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9787  1A88  0021               	movlb	1	; select bank1
  9788  1A89  01AD               	clrf	(_RF1^(0+128)+13)
  9789  1A8A  01AE               	clrf	((_RF1+1)^(0+128)+13)
  9790  1A8B  0008               	return
  9791  1A8C                     __end_of_setRF_TimeoutCleared:	
  9792                           
  9793                           	psect	text52
  9794  1D34                     __ptext52:	
  9795 ;; *************** function _RF_Timeout_Counter *****************
  9796 ;; Defined at:
  9797 ;;		line 141 in file "../src/RF_Control_B1.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;		None
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;		None
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;Total ram usage:        0 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    5
  9818 ;; This function calls:
  9819 ;;		Nothing
  9820 ;; This function is called by:
  9821 ;;		_CC2500_TxData
  9822 ;;		_CC2500_RxData
  9823 ;;		_CC2500_PowerRST
  9824 ;;		_CC2500_WriteREG
  9825 ;;		_CC2500_WriteCommand
  9826 ;;		_CC2500_ReadStatus
  9827 ;;		_CC2500_ReadREG
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           
  9832                           ;psect for function _RF_Timeout_Counter
  9833  1D34                     _RF_Timeout_Counter:	
  9834                           
  9835                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9836                           
  9837                           ;incstack = 0
  9838                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9839  1D34  3001               	movlw	1
  9840  1D35  0021               	movlb	1	; select bank1
  9841  1D36  07AD               	addwf	(_RF1^(0+128)+13),f
  9842  1D37  3000               	movlw	0
  9843  1D38  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
  9844                           
  9845                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9846  1D39  300D               	movlw	13
  9847  1D3A  3EA0               	addlw	_RF1& (0+255)
  9848  1D3B  0086               	movwf	6
  9849  1D3C  0187               	clrf	7
  9850  1D3D  3F40               	moviw [0]fsr1
  9851  1D3E  3AA8               	xorlw	168
  9852  1D3F  1D03               	skipz
  9853  1D40  2D43               	goto	u9515
  9854  1D41  3F41               	moviw [1]fsr1
  9855  1D42  3A61               	xorlw	97
  9856  1D43                     u9515:	
  9857  1D43  1D03               	skipz
  9858  1D44  0008               	return
  9859                           
  9860                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9861  1D45  01AD               	clrf	(_RF1^(0+128)+13)
  9862  1D46  01AE               	clrf	((_RF1+1)^(0+128)+13)
  9863                           
  9864                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9865  1D47  1721               	bsf	(_RF1^(0+128)+1),6
  9866  1D48  0008               	return
  9867  1D49                     __end_of_RF_Timeout_Counter:	
  9868                           
  9869                           	psect	text53
  9870  1DFD                     __ptext53:	
  9871 ;; *************** function _CC2500_WriteByte *****************
  9872 ;; Defined at:
  9873 ;;		line 226 in file "../src/CC2500_B1.c"
  9874 ;; Parameters:    Size  Location     Type
  9875 ;;		None
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;		None               void
  9880 ;; Registers used:
  9881 ;;		wreg, status,2, status,0
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;Total ram usage:        2 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    5
  9894 ;; This function calls:
  9895 ;;		Nothing
  9896 ;; This function is called by:
  9897 ;;		_CC2500_TxData
  9898 ;;		_CC2500_RxData
  9899 ;;		_CC2500_PowerRST
  9900 ;;		_CC2500_WriteREG
  9901 ;;		_CC2500_WriteCommand
  9902 ;;		_CC2500_ReadStatus
  9903 ;;		_CC2500_ReadREG
  9904 ;; This function uses a non-reentrant model
  9905 ;;
  9906                           
  9907                           
  9908                           ;psect for function _CC2500_WriteByte
  9909  1DFD                     _CC2500_WriteByte:	
  9910                           
  9911                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9912                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9913                           
  9914                           ;incstack = 0
  9915                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9916  1DFD  0020               	movlb	0	; select bank0
  9917  1DFE  01A1               	clrf	CC2500_WriteByte@loop_a
  9918  1DFF                     L5:	
  9919  1DFF  3008               	movlw	8
  9920  1E00  0221               	subwf	CC2500_WriteByte@loop_a,w
  9921  1E01  1803               	btfsc	3,0
  9922  1E02  0008               	return
  9923                           
  9924                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9925  1E03  0021               	movlb	1	; select bank1
  9926  1E04  1FD3               	btfss	_SPI0Buffer^(0+128),7
  9927  1E05  2E09               	goto	l303
  9928                           
  9929                           ;CC2500_B1.c: 230: RC4 = 1;
  9930  1E06  0020               	movlb	0	; select bank0
  9931  1E07  160E               	bsf	14,4	;volatile
  9932  1E08  2E0B               	goto	l304
  9933  1E09                     l303:	
  9934                           
  9935                           ;CC2500_B1.c: 231: else
  9936                           ;CC2500_B1.c: 232: RC4 = 0;
  9937  1E09  0020               	movlb	0	; select bank0
  9938  1E0A  120E               	bcf	14,4	;volatile
  9939  1E0B                     l304:	
  9940                           
  9941                           ;CC2500_B1.c: 233: RC3 = 1;
  9942  1E0B  158E               	bsf	14,3	;volatile
  9943                           
  9944                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9945  1E0C  1003               	clrc
  9946  1E0D  0021               	movlb	1	; select bank1
  9947  1E0E  0DD3               	rlf	_SPI0Buffer^(0+128),f
  9948                           
  9949                           ;CC2500_B1.c: 235: RC3 = 0;
  9950  1E0F  0020               	movlb	0	; select bank0
  9951  1E10  118E               	bcf	14,3	;volatile
  9952  1E11  3001               	movlw	1
  9953  1E12  00A0               	movwf	??_CC2500_WriteByte
  9954  1E13  0820               	movf	??_CC2500_WriteByte,w
  9955  1E14  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9956  1E15  2DFF               	goto	L5
  9957  1E16                     __end_of_CC2500_WriteByte:	
  9958                           
  9959                           	psect	text54
  9960  1A68                     __ptext54:	
  9961 ;; *************** function _RF_Initialization *****************
  9962 ;; Defined at:
  9963 ;;		line 9 in file "../src/RF_Control_B1.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;		None
  9968 ;; Return value:  Size  Location     Type
  9969 ;;		None               void
  9970 ;; Registers used:
  9971 ;;		wreg, status,2, status,0, pclath, cstack
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;Total ram usage:        0 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:    6
  9984 ;; This function calls:
  9985 ;;		_setRF_Initialization
  9986 ;; This function is called by:
  9987 ;;		_main
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function _RF_Initialization
  9993  1A68                     _RF_Initialization:	
  9994                           
  9995                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9996                           
  9997                           ;incstack = 0
  9998                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9999  1A68  319B  2329         	fcall	_setRF_Initialization
 10000  1A6A  0008               	return
 10001  1A6B                     __end_of_RF_Initialization:	
 10002                           
 10003                           	psect	text55
 10004  1B29                     __ptext55:	
 10005 ;; *************** function _setRF_Initialization *****************
 10006 ;; Defined at:
 10007 ;;		line 17 in file "../src/RF_Control_B1.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;		None
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;		None
 10012 ;; Return value:  Size  Location     Type
 10013 ;;		None               void
 10014 ;; Registers used:
 10015 ;;		wreg
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;Total ram usage:        1 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    5
 10028 ;; This function calls:
 10029 ;;		Nothing
 10030 ;; This function is called by:
 10031 ;;		_RF_Initialization
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           
 10036                           ;psect for function _setRF_Initialization
 10037  1B29                     _setRF_Initialization:	
 10038                           
 10039                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10040                           
 10041                           ;incstack = 0
 10042                           ; Regs used in _setRF_Initialization: [wreg]
 10043  1B29  3015               	movlw	21
 10044  1B2A  0020               	movlb	0	; select bank0
 10045  1B2B  00A0               	movwf	??_setRF_Initialization
 10046  1B2C  0820               	movf	??_setRF_Initialization,w
 10047  1B2D  0021               	movlb	1	; select bank1
 10048  1B2E  00D6               	movwf	_Tx_Length^(0+128)
 10049                           
 10050                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10051  1B2F  30C8               	movlw	200
 10052  1B30  00A8               	movwf	(_RF1^(0+128)+8)
 10053  1B31  3000               	movlw	0
 10054  1B32  00A9               	movwf	(_RF1^(0+128)+9)
 10055  1B33  0008               	return
 10056  1B34                     __end_of_setRF_Initialization:	
 10057                           
 10058                           	psect	text56
 10059  1CAF                     __ptext56:	
 10060 ;; *************** function _Mcu_Initialization *****************
 10061 ;; Defined at:
 10062 ;;		line 30 in file "../src/MCU_B1.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;		None
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;		None
 10067 ;; Return value:  Size  Location     Type
 10068 ;;		None               void
 10069 ;; Registers used:
 10070 ;;		wreg, status,2, status,0, pclath, cstack
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;Total ram usage:        0 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    6
 10083 ;; This function calls:
 10084 ;;		_ADC_Set
 10085 ;;		_Fosc_Set
 10086 ;;		_IOC_Set
 10087 ;;		_IO_Set
 10088 ;;		_TMR1_Set
 10089 ;;		_WDT_Set
 10090 ;; This function is called by:
 10091 ;;		_main
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           
 10096                           ;psect for function _Mcu_Initialization
 10097  1CAF                     _Mcu_Initialization:	
 10098                           
 10099                           ;MCU_B1.c: 32: Fosc_Set();
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10103  1CAF  319A  2284  319C   	fcall	_Fosc_Set
 10104                           
 10105                           ;MCU_B1.c: 34: IO_Set();
 10106  1CB2  319E  2630  319C   	fcall	_IO_Set
 10107                           
 10108                           ;MCU_B1.c: 36: ;;
 10109                           ;MCU_B1.c: 38: TMR1_Set();
 10110  1CB5  319B  2394  319C   	fcall	_TMR1_Set
 10111                           
 10112                           ;MCU_B1.c: 40: ADC_Set();
 10113  1CB8  319A  22BA  319C   	fcall	_ADC_Set
 10114                           
 10115                           ;MCU_B1.c: 42: ;;
 10116                           ;MCU_B1.c: 44: ;;
 10117                           ;MCU_B1.c: 46: IOC_Set();
 10118  1CBB  319B  2313  319C   	fcall	_IOC_Set
 10119                           
 10120                           ;MCU_B1.c: 48: ;;
 10121                           ;MCU_B1.c: 50: ;;
 10122                           ;MCU_B1.c: 52: WDT_Set();
 10123  1CBE  319B  231E         	fcall	_WDT_Set
 10124  1CC0  0008               	return
 10125  1CC1                     __end_of_Mcu_Initialization:	
 10126                           
 10127                           	psect	text57
 10128  1B1E                     __ptext57:	
 10129 ;; *************** function _WDT_Set *****************
 10130 ;; Defined at:
 10131 ;;		line 1102 in file "../src/MCU_B1.c"
 10132 ;; Parameters:    Size  Location     Type
 10133 ;;		None
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;		None               void
 10138 ;; Registers used:
 10139 ;;		wreg
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:        1 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    5
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_Mcu_Initialization
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function _WDT_Set
 10161  1B1E                     _WDT_Set:	
 10162                           
 10163                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10164                           
 10165                           ;incstack = 0
 10166                           ; Regs used in _WDT_Set: [wreg]
 10167  1B1E  3017               	movlw	23
 10168  1B1F  0021               	movlb	1	; select bank1
 10169  1B20  0097               	movwf	23	;volatile
 10170                           
 10171                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10172  1B21  1448               	bsf	_WDT^(0+128),0
 10173                           
 10174                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10175  1B22  300A               	movlw	10
 10176  1B23  0020               	movlb	0	; select bank0
 10177  1B24  00A0               	movwf	??_WDT_Set
 10178  1B25  0820               	movf	??_WDT_Set,w
 10179  1B26  0021               	movlb	1	; select bank1
 10180  1B27  00C9               	movwf	(_WDT^(0+128)+1)
 10181  1B28  0008               	return
 10182  1B29                     __end_of_WDT_Set:	
 10183                           
 10184                           	psect	text58
 10185  1B94                     __ptext58:	
 10186 ;; *************** function _TMR1_Set *****************
 10187 ;; Defined at:
 10188 ;;		line 226 in file "../src/MCU_B1.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;		None
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;		None
 10193 ;; Return value:  Size  Location     Type
 10194 ;;		None               void
 10195 ;; Registers used:
 10196 ;;		wreg
 10197 ;; Tracked objects:
 10198 ;;		On entry : 0/0
 10199 ;;		On exit  : 0/0
 10200 ;;		Unchanged: 0/0
 10201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;Total ram usage:        0 bytes
 10207 ;; Hardware stack levels used:    1
 10208 ;; Hardware stack levels required when called:    5
 10209 ;; This function calls:
 10210 ;;		Nothing
 10211 ;; This function is called by:
 10212 ;;		_Mcu_Initialization
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           
 10217                           ;psect for function _TMR1_Set
 10218  1B94                     _TMR1_Set:	
 10219                           
 10220                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10221                           
 10222                           ;incstack = 0
 10223                           ; Regs used in _TMR1_Set: [wreg]
 10224  1B94  3041               	movlw	65
 10225  1B95  0020               	movlb	0	; select bank0
 10226  1B96  0098               	movwf	24	;volatile
 10227                           
 10228                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10229  1B97  30FA               	movlw	250
 10230  1B98  0097               	movwf	23	;volatile
 10231                           
 10232                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10233  1B99  3038               	movlw	56
 10234  1B9A  0096               	movwf	22	;volatile
 10235                           
 10236                           ;MCU_B1.c: 230: TMR1IE = 1;
 10237  1B9B  0021               	movlb	1	; select bank1
 10238  1B9C  1411               	bsf	17,0	;volatile
 10239                           
 10240                           ;MCU_B1.c: 231: PEIE = 1;
 10241  1B9D  170B               	bsf	11,6	;volatile
 10242                           
 10243                           ;MCU_B1.c: 232: GIE = 1;
 10244  1B9E  178B               	bsf	11,7	;volatile
 10245  1B9F  0008               	return
 10246  1BA0                     __end_of_TMR1_Set:	
 10247                           
 10248                           	psect	text59
 10249  1E30                     __ptext59:	
 10250 ;; *************** function _IO_Set *****************
 10251 ;; Defined at:
 10252 ;;		line 60 in file "../src/MCU_B1.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;		None
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;		None
 10257 ;; Return value:  Size  Location     Type
 10258 ;;		None               void
 10259 ;; Registers used:
 10260 ;;		wreg, status,2
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;Total ram usage:        0 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    5
 10273 ;; This function calls:
 10274 ;;		Nothing
 10275 ;; This function is called by:
 10276 ;;		_Mcu_Initialization
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           
 10281                           ;psect for function _IO_Set
 10282  1E30                     _IO_Set:	
 10283                           
 10284                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10285                           
 10286                           ;incstack = 0
 10287                           ; Regs used in _IO_Set: [wreg+status,2]
 10288  1E30  30F7               	movlw	247
 10289  1E31  0021               	movlb	1	; select bank1
 10290  1E32  008C               	movwf	12	;volatile
 10291                           
 10292                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10293  1E33  3004               	movlw	4
 10294  1E34  008D               	movwf	13	;volatile
 10295                           
 10296                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10297  1E35  3026               	movlw	38
 10298  1E36  008E               	movwf	14	;volatile
 10299                           
 10300                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10301  1E37  0022               	movlb	2	; select bank2
 10302  1E38  018C               	clrf	12	;volatile
 10303                           
 10304                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10305  1E39  018D               	clrf	13	;volatile
 10306                           
 10307                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10308  1E3A  018E               	clrf	14	;volatile
 10309                           
 10310                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10311  1E3B  300E               	movlw	14
 10312  1E3C  0023               	movlb	3	; select bank3
 10313  1E3D  008C               	movwf	12	;volatile
 10314                           
 10315                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10316  1E3E  018D               	clrf	13	;volatile
 10317                           
 10318                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10319  1E3F  018E               	clrf	14	;volatile
 10320                           
 10321                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10322  1E40  30F7               	movlw	247
 10323  1E41  0020               	movlb	0	; select bank0
 10324  1E42  008C               	movwf	12	;volatile
 10325                           
 10326                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10327  1E43  3004               	movlw	4
 10328  1E44  008D               	movwf	13	;volatile
 10329                           
 10330                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10331  1E45  3026               	movlw	38
 10332  1E46  008E               	movwf	14	;volatile
 10333                           
 10334                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10335  1E47  0024               	movlb	4	; select bank4
 10336  1E48  018D               	clrf	13	;volatile
 10337  1E49  0008               	return
 10338  1E4A                     __end_of_IO_Set:	
 10339                           
 10340                           	psect	text60
 10341  1B13                     __ptext60:	
 10342 ;; *************** function _IOC_Set *****************
 10343 ;; Defined at:
 10344 ;;		line 380 in file "../src/MCU_B1.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;		None
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;		None
 10349 ;; Return value:  Size  Location     Type
 10350 ;;		None               void
 10351 ;; Registers used:
 10352 ;;		wreg, status,2
 10353 ;; Tracked objects:
 10354 ;;		On entry : 0/0
 10355 ;;		On exit  : 0/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;Total ram usage:        0 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; Hardware stack levels required when called:    5
 10365 ;; This function calls:
 10366 ;;		Nothing
 10367 ;; This function is called by:
 10368 ;;		_Mcu_Initialization
 10369 ;; This function uses a non-reentrant model
 10370 ;;
 10371                           
 10372                           
 10373                           ;psect for function _IOC_Set
 10374  1B13                     _IOC_Set:	
 10375                           
 10376                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10377                           
 10378                           ;incstack = 0
 10379                           ; Regs used in _IOC_Set: [wreg+status,2]
 10380  1B13  3004               	movlw	4
 10381  1B14  0027               	movlb	7	; select bank7
 10382  1B15  0094               	movwf	20	;volatile
 10383                           
 10384                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10385  1B16  3004               	movlw	4
 10386  1B17  0095               	movwf	21	;volatile
 10387                           
 10388                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10389  1B18  0196               	clrf	22	;volatile
 10390                           
 10391                           ;MCU_B1.c: 387: IOCIE = 1;
 10392  1B19  158B               	bsf	11,3	;volatile
 10393                           
 10394                           ;MCU_B1.c: 388: IOCIF = 0;
 10395  1B1A  100B               	bcf	11,0	;volatile
 10396                           
 10397                           ;MCU_B1.c: 389: PEIE = 1;
 10398  1B1B  170B               	bsf	11,6	;volatile
 10399                           
 10400                           ;MCU_B1.c: 390: GIE = 1;
 10401  1B1C  178B               	bsf	11,7	;volatile
 10402  1B1D  0008               	return
 10403  1B1E                     __end_of_IOC_Set:	
 10404                           
 10405                           	psect	text61
 10406  1A84                     __ptext61:	
 10407 ;; *************** function _Fosc_Set *****************
 10408 ;; Defined at:
 10409 ;;		line 56 in file "../src/MCU_B1.c"
 10410 ;; Parameters:    Size  Location     Type
 10411 ;;		None
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;		None
 10414 ;; Return value:  Size  Location     Type
 10415 ;;		None               void
 10416 ;; Registers used:
 10417 ;;		wreg
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;Total ram usage:        0 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    5
 10430 ;; This function calls:
 10431 ;;		Nothing
 10432 ;; This function is called by:
 10433 ;;		_Mcu_Initialization
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           
 10438                           ;psect for function _Fosc_Set
 10439  1A84                     _Fosc_Set:	
 10440                           
 10441                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10442                           
 10443                           ;incstack = 0
 10444                           ; Regs used in _Fosc_Set: [wreg]
 10445  1A84  3078               	movlw	120
 10446  1A85  0021               	movlb	1	; select bank1
 10447  1A86  0099               	movwf	25	;volatile
 10448  1A87  0008               	return
 10449  1A88                     __end_of_Fosc_Set:	
 10450                           
 10451                           	psect	text62
 10452  1ABA                     __ptext62:	
 10453 ;; *************** function _ADC_Set *****************
 10454 ;; Defined at:
 10455 ;;		line 427 in file "../src/MCU_B1.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;		None
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;		None
 10460 ;; Return value:  Size  Location     Type
 10461 ;;		None               void
 10462 ;; Registers used:
 10463 ;;		wreg
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;Total ram usage:        0 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    5
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		_Mcu_Initialization
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           
 10484                           ;psect for function _ADC_Set
 10485  1ABA                     _ADC_Set:	
 10486                           
 10487                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10488                           
 10489                           ;incstack = 0
 10490                           ; Regs used in _ADC_Set: [wreg]
 10491  1ABA  30F3               	movlw	243
 10492  1ABB  0021               	movlb	1	; select bank1
 10493  1ABC  009E               	movwf	30	;volatile
 10494                           
 10495                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10496  1ABD  30C1               	movlw	193
 10497  1ABE  0022               	movlb	2	; select bank2
 10498  1ABF  0097               	movwf	23	;volatile
 10499  1AC0  0008               	return
 10500  1AC1                     __end_of_ADC_Set:	
 10501                           
 10502                           	psect	text63
 10503  004B                     __ptext63:	
 10504 ;; *************** function _Load_Main *****************
 10505 ;; Defined at:
 10506 ;;		line 40 in file "../src/OverLoad_B1.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;		None
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;  i               2   16[BANK0 ] int 
 10511 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10512 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10513 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10514 ;;  error           1   10[BANK0 ] unsigned char 
 10515 ;; Return value:  Size  Location     Type
 10516 ;;		None               void
 10517 ;; Registers used:
 10518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10525 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;Total ram usage:       10 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    6
 10531 ;; This function calls:
 10532 ;;		___lwdiv
 10533 ;;		___wmul
 10534 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10535 ;;		_getDimmer_LoadGO
 10536 ;;		_getDimmer_Load_Status
 10537 ;;		_getMain_All_Error_Status
 10538 ;;		_getMain_All_LightsStatus
 10539 ;;		_getMain_Lights_Count
 10540 ;;		_setLoad_AH_AL_Restore
 10541 ;; This function is called by:
 10542 ;;		_main
 10543 ;; This function uses a non-reentrant model
 10544 ;;
 10545                           
 10546                           
 10547                           ;psect for function _Load_Main
 10548  004B                     _Load_Main:	
 10549                           
 10550                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10551                           
 10552                           ;incstack = 0
 10553                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10554  004B  3000               	movlw	0
 10555  004C  3191  215B  3180   	fcall	_getMain_All_Error_Status
 10556  004F  0020               	movlb	0	; select bank0
 10557  0050  00A8               	movwf	??_Load_Main
 10558  0051  0828               	movf	??_Load_Main,w
 10559  0052  00AA               	movwf	Load_Main@error
 10560                           
 10561                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10562  0053  01AE               	clrf	Load_Main@Load_RunStatus
 10563  0054  01AD               	clrf	Load_Main@ErrorCountValue
 10564  0055  01AF               	clrf	Load_Main@LightsCount
 10565                           
 10566                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10567  0056  0022               	movlb	2	; select bank2
 10568  0057  1C36               	btfss	_Load^(0+256),0
 10569  0058  29F7               	goto	l1623
 10570                           
 10571                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10572  0059  319A  22F3  3180   	fcall	_getMain_All_LightsStatus
 10573  005C  3800               	iorlw	0
 10574  005D  1D03               	skipz
 10575  005E  2861               	goto	l10647
 10576                           
 10577                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10578  005F  0022               	movlb	2	; select bank2
 10579  0060  2882               	goto	l10665
 10580  0061                     l10647:	
 10581                           ;OverLoad_B1.c: 47: } else {
 10582                           
 10583                           
 10584                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10585  0061  0020               	movlb	0	; select bank0
 10586  0062  08AA               	movf	Load_Main@error,f
 10587  0063  1D03               	skipz
 10588  0064  287F               	goto	l1626
 10589  0065  319C  24E7  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10590  0068  3800               	iorlw	0
 10591  0069  1D03               	skipz
 10592  006A  287F               	goto	l1626
 10593                           
 10594                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10595  006B  0022               	movlb	2	; select bank2
 10596  006C  14B6               	bsf	_Load^(0+256),1
 10597                           
 10598                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10599  006D  319A  22D0  3180   	fcall	_getDimmer_LoadGO
 10600  0070  3A01               	xorlw	1
 10601  0071  1D03               	skipz
 10602  0072  287A               	goto	l1627
 10603                           
 10604                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10605  0073  0022               	movlb	2	; select bank2
 10606  0074  1DB6               	btfss	_Load^(0+256),3
 10607  0075  1BB6               	btfsc	_Load^(0+256),7
 10608  0076  2883               	goto	l1625
 10609                           
 10610                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10611  0077  15B6               	bsf	_Load^(0+256),3
 10612                           
 10613                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10614  0078  01DB               	clrf	(_Load^(0+256)+37)
 10615                           
 10616                           ;OverLoad_B1.c: 57: }
 10617                           ;OverLoad_B1.c: 58: } else {
 10618  0079  2883               	goto	l1625
 10619  007A                     l1627:	
 10620                           
 10621                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10622  007A  0022               	movlb	2	; select bank2
 10623  007B  1FB6               	btfss	_Load^(0+256),7
 10624  007C  2883               	goto	l1625
 10625                           
 10626                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10627  007D  13B6               	bcf	_Load^(0+256),7
 10628                           
 10629                           ;OverLoad_B1.c: 61: }
 10630                           ;OverLoad_B1.c: 62: }
 10631                           ;OverLoad_B1.c: 63: } else {
 10632  007E  2883               	goto	l1625
 10633  007F                     l1626:	
 10634                           
 10635                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10636  007F  0022               	movlb	2	; select bank2
 10637  0080  1CB6               	btfss	_Load^(0+256),1
 10638  0081  2883               	goto	l1625
 10639  0082                     l10665:	
 10640                           
 10641                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10642  0082  10B6               	bcf	_Load^(0+256),1
 10643  0083                     l1625:	
 10644                           
 10645                           ;OverLoad_B1.c: 66: }
 10646                           ;OverLoad_B1.c: 67: }
 10647                           ;OverLoad_B1.c: 89: }
 10648                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10649  0083  1CB6               	btfss	_Load^(0+256),1
 10650  0084  29D3               	goto	l1633
 10651                           
 10652                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10653  0085  1536               	bsf	_Load^(0+256),2
 10654                           
 10655                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10656  0086  1E36               	btfss	_Load^(0+256),4
 10657  0087  29D1               	goto	l1634
 10658                           
 10659                           ;OverLoad_B1.c: 96: Load.Time++;
 10660  0088  3001               	movlw	1
 10661  0089  07B7               	addwf	(_Load^(0+256)+1),f
 10662  008A  3000               	movlw	0
 10663  008B  3DB8               	addwfc	((_Load+1)^(0+256)+1),f
 10664                           
 10665                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10666  008C  3000               	movlw	0
 10667  008D  0238               	subwf	((_Load+1)^(0+256)+1),w
 10668  008E  3002               	movlw	2
 10669  008F  1903               	skipnz
 10670  0090  0237               	subwf	(_Load^(0+256)+1),w
 10671  0091  1C03               	skipc
 10672  0092  0008               	return
 10673                           
 10674                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10675  0093  01B7               	clrf	(_Load^(0+256)+1)
 10676  0094  01B8               	clrf	((_Load+1)^(0+256)+1)
 10677                           
 10678                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10679  0095  1236               	bcf	_Load^(0+256),4
 10680                           
 10681                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10682  0096  3001               	movlw	1
 10683  0097  0020               	movlb	0	; select bank0
 10684  0098  00B0               	movwf	Load_Main@i
 10685  0099  3000               	movlw	0
 10686  009A  00B1               	movwf	Load_Main@i+1
 10687  009B  0831               	movf	Load_Main@i+1,w
 10688  009C  3A80               	xorlw	128
 10689  009D  00A8               	movwf	??_Load_Main
 10690  009E  3080               	movlw	128
 10691  009F  0228               	subwf	??_Load_Main,w
 10692  00A0  1D03               	skipz
 10693  00A1  28A4               	goto	u12445
 10694  00A2  3004               	movlw	4
 10695  00A3  0230               	subwf	Load_Main@i,w
 10696  00A4                     u12445:	
 10697  00A4  1803               	btfsc	3,0
 10698  00A5  28D8               	goto	l10687
 10699  00A6                     l10681:	
 10700                           
 10701                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10702  00A6  0020               	movlb	0	; select bank0
 10703  00A7  3530               	lslf	Load_Main@i,w
 10704  00A8  3E41               	addlw	(_Load+11)& (0+255)
 10705  00A9  0086               	movwf	6
 10706  00AA  3001               	movlw	1	; select bank2/3
 10707  00AB  0087               	movwf	7
 10708  00AC  3F40               	moviw [0]fsr1
 10709  00AD  00A8               	movwf	??_Load_Main
 10710  00AE  3F41               	moviw [1]fsr1
 10711  00AF  00A9               	movwf	??_Load_Main+1
 10712  00B0  0828               	movf	??_Load_Main,w
 10713  00B1  0022               	movlb	2	; select bank2
 10714  00B2  07BB               	addwf	(_Load^(0+256)+5),f
 10715  00B3  0020               	movlb	0	; select bank0
 10716  00B4  0829               	movf	??_Load_Main+1,w
 10717  00B5  0022               	movlb	2	; select bank2
 10718  00B6  3DBC               	addwfc	((_Load+1)^(0+256)+5),f
 10719                           
 10720                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10721  00B7  0020               	movlb	0	; select bank0
 10722  00B8  3530               	lslf	Load_Main@i,w
 10723  00B9  3E4B               	addlw	(_Load+21)& (0+255)
 10724  00BA  0086               	movwf	6
 10725  00BB  3001               	movlw	1	; select bank2/3
 10726  00BC  0087               	movwf	7
 10727  00BD  3F40               	moviw [0]fsr1
 10728  00BE  00A8               	movwf	??_Load_Main
 10729  00BF  3F41               	moviw [1]fsr1
 10730  00C0  00A9               	movwf	??_Load_Main+1
 10731  00C1  0828               	movf	??_Load_Main,w
 10732  00C2  0022               	movlb	2	; select bank2
 10733  00C3  07BD               	addwf	(_Load^(0+256)+7),f
 10734  00C4  0020               	movlb	0	; select bank0
 10735  00C5  0829               	movf	??_Load_Main+1,w
 10736  00C6  0022               	movlb	2	; select bank2
 10737  00C7  3DBE               	addwfc	((_Load+1)^(0+256)+7),f
 10738  00C8  3001               	movlw	1
 10739  00C9  0020               	movlb	0	; select bank0
 10740  00CA  07B0               	addwf	Load_Main@i,f
 10741  00CB  3000               	movlw	0
 10742  00CC  3DB1               	addwfc	Load_Main@i+1,f
 10743  00CD  0831               	movf	Load_Main@i+1,w
 10744  00CE  3A80               	xorlw	128
 10745  00CF  00A8               	movwf	??_Load_Main
 10746  00D0  3080               	movlw	128
 10747  00D1  0228               	subwf	??_Load_Main,w
 10748  00D2  1D03               	skipz
 10749  00D3  28D6               	goto	u12455
 10750  00D4  3004               	movlw	4
 10751  00D5  0230               	subwf	Load_Main@i,w
 10752  00D6                     u12455:	
 10753  00D6  1C03               	skipc
 10754  00D7  28A6               	goto	l10681
 10755  00D8                     l10687:	
 10756                           
 10757                           ;OverLoad_B1.c: 104: }
 10758                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10759  00D8  3003               	movlw	3
 10760  00D9  0020               	movlb	0	; select bank0
 10761  00DA  00A0               	movwf	___lwdiv@divisor
 10762  00DB  3000               	movlw	0
 10763  00DC  00A1               	movwf	___lwdiv@divisor+1
 10764  00DD  0022               	movlb	2	; select bank2
 10765  00DE  083C               	movf	((_Load+1)^(0+256)+5),w
 10766  00DF  0020               	movlb	0	; select bank0
 10767  00E0  01A3               	clrf	___lwdiv@dividend+1
 10768  00E1  07A3               	addwf	___lwdiv@dividend+1,f
 10769  00E2  0022               	movlb	2	; select bank2
 10770  00E3  083B               	movf	(_Load^(0+256)+5),w
 10771  00E4  0020               	movlb	0	; select bank0
 10772  00E5  01A2               	clrf	___lwdiv@dividend
 10773  00E6  07A2               	addwf	___lwdiv@dividend,f
 10774  00E7  3192  222D  3180   	fcall	___lwdiv
 10775  00EA  0020               	movlb	0	; select bank0
 10776  00EB  0821               	movf	?___lwdiv+1,w
 10777  00EC  0022               	movlb	2	; select bank2
 10778  00ED  01BC               	clrf	((_Load+1)^(0+256)+5)
 10779  00EE  07BC               	addwf	((_Load+1)^(0+256)+5),f
 10780  00EF  0020               	movlb	0	; select bank0
 10781  00F0  0820               	movf	?___lwdiv,w
 10782  00F1  0022               	movlb	2	; select bank2
 10783  00F2  01BB               	clrf	(_Load^(0+256)+5)
 10784  00F3  07BB               	addwf	(_Load^(0+256)+5),f
 10785                           
 10786                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 10787  00F4  3003               	movlw	3
 10788  00F5  0020               	movlb	0	; select bank0
 10789  00F6  00A0               	movwf	___lwdiv@divisor
 10790  00F7  3000               	movlw	0
 10791  00F8  00A1               	movwf	___lwdiv@divisor+1
 10792  00F9  0022               	movlb	2	; select bank2
 10793  00FA  083E               	movf	((_Load+1)^(0+256)+7),w
 10794  00FB  0020               	movlb	0	; select bank0
 10795  00FC  01A3               	clrf	___lwdiv@dividend+1
 10796  00FD  07A3               	addwf	___lwdiv@dividend+1,f
 10797  00FE  0022               	movlb	2	; select bank2
 10798  00FF  083D               	movf	(_Load^(0+256)+7),w
 10799  0100  0020               	movlb	0	; select bank0
 10800  0101  01A2               	clrf	___lwdiv@dividend
 10801  0102  07A2               	addwf	___lwdiv@dividend,f
 10802  0103  3192  222D  3180   	fcall	___lwdiv
 10803  0106  0020               	movlb	0	; select bank0
 10804  0107  0821               	movf	?___lwdiv+1,w
 10805  0108  0022               	movlb	2	; select bank2
 10806  0109  01BE               	clrf	((_Load+1)^(0+256)+7)
 10807  010A  07BE               	addwf	((_Load+1)^(0+256)+7),f
 10808  010B  0020               	movlb	0	; select bank0
 10809  010C  0820               	movf	?___lwdiv,w
 10810  010D  0022               	movlb	2	; select bank2
 10811  010E  01BD               	clrf	(_Load^(0+256)+7)
 10812  010F  07BD               	addwf	(_Load^(0+256)+7),f
 10813                           
 10814                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 10815  0110  319E  269B  3180   	fcall	_setLoad_AH_AL_Restore
 10816                           
 10817                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 10818  0113  0022               	movlb	2	; select bank2
 10819  0114  083E               	movf	((_Load+1)^(0+256)+7),w
 10820  0115  023C               	subwf	((_Load+1)^(0+256)+5),w
 10821  0116  1D03               	skipz
 10822  0117  291A               	goto	u12465
 10823  0118  083D               	movf	(_Load^(0+256)+7),w
 10824  0119  023B               	subwf	(_Load^(0+256)+5),w
 10825  011A                     u12465:	
 10826  011A  1C03               	skipc
 10827  011B  0008               	return
 10828                           
 10829                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 10830  011C  3005               	movlw	5
 10831  011D  3E36               	addlw	_Load& (0+255)
 10832  011E  0086               	movwf	6
 10833  011F  3001               	movlw	1	; select bank2/3
 10834  0120  0087               	movwf	7
 10835  0121  093D               	comf	(_Load^(0+256)+7),w
 10836  0122  0020               	movlb	0	; select bank0
 10837  0123  00A8               	movwf	??_Load_Main
 10838  0124  0022               	movlb	2	; select bank2
 10839  0125  093E               	comf	((_Load+1)^(0+256)+7),w
 10840  0126  0020               	movlb	0	; select bank0
 10841  0127  00A9               	movwf	??_Load_Main+1
 10842  0128  0AA8               	incf	??_Load_Main,f
 10843  0129  1903               	skipnz
 10844  012A  0AA9               	incf	??_Load_Main+1,f
 10845  012B  3F40               	moviw [0]fsr1
 10846  012C  0728               	addwf	??_Load_Main,w
 10847  012D  0022               	movlb	2	; select bank2
 10848  012E  00D5               	movwf	(_Load^(0+256)+31)
 10849  012F  3F41               	moviw [1]fsr1
 10850  0130  0020               	movlb	0	; select bank0
 10851  0131  3D29               	addwfc	??_Load_Main+1,w
 10852  0132  0022               	movlb	2	; select bank2
 10853  0133  00D6               	movwf	(_Load^(0+256)+32)
 10854                           
 10855                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 10856  0134  01BB               	clrf	(_Load^(0+256)+5)
 10857  0135  01BC               	clrf	((_Load+1)^(0+256)+5)
 10858                           
 10859                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 10860  0136  01BD               	clrf	(_Load^(0+256)+7)
 10861  0137  01BE               	clrf	((_Load+1)^(0+256)+7)
 10862                           
 10863                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 10864  0138  1DB6               	btfss	_Load^(0+256),3
 10865  0139  2993               	goto	l10727
 10866                           
 10867                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 10868  013A  3002               	movlw	2
 10869  013B  025B               	subwf	(_Load^(0+256)+37),w
 10870  013C  1803               	skipnc
 10871  013D  2993               	goto	l10727
 10872                           
 10873                           ;OverLoad_B1.c: 117: Load.Count++;
 10874  013E  3001               	movlw	1
 10875  013F  0020               	movlb	0	; select bank0
 10876  0140  00A8               	movwf	??_Load_Main
 10877  0141  0828               	movf	??_Load_Main,w
 10878  0142  0022               	movlb	2	; select bank2
 10879  0143  07DB               	addwf	(_Load^(0+256)+37),f
 10880                           
 10881                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 10882  0144  3187  27F8  3180   	fcall	_getDimmer_Load_Status
 10883  0147  0020               	movlb	0	; select bank0
 10884  0148  00A8               	movwf	??_Load_Main
 10885  0149  0828               	movf	??_Load_Main,w
 10886  014A  00AE               	movwf	Load_Main@Load_RunStatus
 10887                           
 10888                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 10889  014B  319B  2308  3180   	fcall	_getMain_Lights_Count
 10890  014E  0020               	movlb	0	; select bank0
 10891  014F  00A8               	movwf	??_Load_Main
 10892  0150  0828               	movf	??_Load_Main,w
 10893  0151  00AF               	movwf	Load_Main@LightsCount
 10894                           
 10895                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 10896  0152  0022               	movlb	2	; select bank2
 10897  0153  085B               	movf	(_Load^(0+256)+37),w
 10898  0154  3A01               	xorlw	1
 10899  0155  1D03               	skipz
 10900  0156  295B               	goto	l10713
 10901                           
 10902                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 10903  0157  3014               	movlw	20
 10904  0158  00D9               	movwf	(_Load^(0+256)+35)
 10905  0159  3005               	movlw	5
 10906  015A  2968               	goto	L6
 10907  015B                     l10713:	
 10908                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 10909                           
 10910  015B  085B               	movf	(_Load^(0+256)+37),w
 10911  015C  3A02               	xorlw	2
 10912  015D  1D03               	skipz
 10913  015E  2993               	goto	l10727
 10914                           
 10915                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 10916  015F  0020               	movlb	0	; select bank0
 10917  0160  082F               	movf	Load_Main@LightsCount,w
 10918  0161  3A01               	xorlw	1
 10919  0162  1D03               	skipz
 10920  0163  296A               	goto	l10719
 10921                           
 10922                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 10923  0164  3075               	movlw	117
 10924  0165  0022               	movlb	2	; select bank2
 10925  0166  00D9               	movwf	(_Load^(0+256)+35)
 10926  0167  3000               	movlw	0
 10927  0168                     L6:	
 10928  0168  00DA               	movwf	(_Load^(0+256)+36)
 10929                           
 10930                           ;OverLoad_B1.c: 132: } else {
 10931  0169  2993               	goto	l10727
 10932  016A                     l10719:	
 10933                           
 10934                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 10935  016A  0020               	movlb	0	; select bank0
 10936  016B  08AE               	movf	Load_Main@Load_RunStatus,f
 10937  016C  1D03               	skipz
 10938  016D  2987               	goto	l10723
 10939                           
 10940                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 10941  016E  082F               	movf	Load_Main@LightsCount,w
 10942  016F  00A8               	movwf	??_Load_Main
 10943  0170  01A9               	clrf	??_Load_Main+1
 10944  0171  0828               	movf	??_Load_Main,w
 10945  0172  00A0               	movwf	___wmul@multiplier
 10946  0173  0829               	movf	??_Load_Main+1,w
 10947  0174  00A1               	movwf	___wmul@multiplier+1
 10948  0175  3075               	movlw	117
 10949  0176  00A2               	movwf	___wmul@multiplicand
 10950  0177  3000               	movlw	0
 10951  0178  00A3               	movwf	___wmul@multiplicand+1
 10952  0179  319E  26B7  3180   	fcall	___wmul
 10953  017C  0020               	movlb	0	; select bank0
 10954  017D  0821               	movf	?___wmul+1,w
 10955  017E  0022               	movlb	2	; select bank2
 10956  017F  01DA               	clrf	((_Load+1)^(0+256)+35)
 10957  0180  07DA               	addwf	((_Load+1)^(0+256)+35),f
 10958  0181  0020               	movlb	0	; select bank0
 10959  0182  0820               	movf	?___wmul,w
 10960  0183  0022               	movlb	2	; select bank2
 10961  0184  01D9               	clrf	(_Load^(0+256)+35)
 10962  0185  07D9               	addwf	(_Load^(0+256)+35),f
 10963                           
 10964                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 10965  0186  2993               	goto	l10727
 10966  0187                     l10723:	
 10967  0187  0020               	movlb	0	; select bank0
 10968  0188  082E               	movf	Load_Main@Load_RunStatus,w
 10969  0189  3A01               	xorlw	1
 10970  018A  1D03               	skipz
 10971  018B  2993               	goto	l10727
 10972                           
 10973                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 10974  018C  0022               	movlb	2	; select bank2
 10975  018D  083F               	movf	(_Load^(0+256)+9),w
 10976  018E  3E75               	addlw	117
 10977  018F  00D9               	movwf	(_Load^(0+256)+35)
 10978  0190  3000               	movlw	0
 10979  0191  3D40               	addwfc	((_Load+1)^(0+256)+9),w
 10980  0192  00DA               	movwf	((_Load+1)^(0+256)+35)
 10981  0193                     l10727:	
 10982                           
 10983                           ;OverLoad_B1.c: 137: }
 10984                           ;OverLoad_B1.c: 138: }
 10985                           ;OverLoad_B1.c: 139: }
 10986                           ;OverLoad_B1.c: 140: }
 10987                           ;OverLoad_B1.c: 141: }
 10988                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 10989  0193  0022               	movlb	2	; select bank2
 10990  0194  085A               	movf	((_Load+1)^(0+256)+35),w
 10991  0195  0256               	subwf	((_Load+1)^(0+256)+31),w
 10992  0196  1D03               	skipz
 10993  0197  299A               	goto	u12545
 10994  0198  0859               	movf	(_Load^(0+256)+35),w
 10995  0199  0255               	subwf	(_Load^(0+256)+31),w
 10996  019A                     u12545:	
 10997  019A  1C03               	skipc
 10998  019B  29B9               	goto	l10743
 10999                           
 11000                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11001  019C  0020               	movlb	0	; select bank0
 11002  019D  082F               	movf	Load_Main@LightsCount,w
 11003  019E  3A01               	xorlw	1
 11004  019F  1903               	skipnz
 11005  01A0  29A3               	goto	l10733
 11006  01A1  3003               	movlw	3
 11007  01A2  29A4               	goto	L7
 11008  01A3                     l10733:	
 11009  01A3  3002               	movlw	2
 11010  01A4                     L7:	
 11011  01A4  00AB               	movwf	_Load_Main$3992
 11012  01A5  3000               	movlw	0
 11013  01A6  00AC               	movwf	_Load_Main$3992+1
 11014  01A7  082B               	movf	_Load_Main$3992,w
 11015  01A8  00A8               	movwf	??_Load_Main
 11016  01A9  0828               	movf	??_Load_Main,w
 11017  01AA  00AD               	movwf	Load_Main@ErrorCountValue
 11018                           
 11019                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11020  01AB  3001               	movlw	1
 11021  01AC  00A8               	movwf	??_Load_Main
 11022  01AD  0828               	movf	??_Load_Main,w
 11023  01AE  0022               	movlb	2	; select bank2
 11024  01AF  07DC               	addwf	(_Load^(0+256)+38),f
 11025                           
 11026                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11027  01B0  085C               	movf	(_Load^(0+256)+38),w
 11028  01B1  0020               	movlb	0	; select bank0
 11029  01B2  022D               	subwf	Load_Main@ErrorCountValue,w
 11030  01B3  1803               	skipnc
 11031  01B4  0008               	return
 11032                           
 11033                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11034  01B5  0022               	movlb	2	; select bank2
 11035  01B6  01DC               	clrf	(_Load^(0+256)+38)
 11036                           
 11037                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11038  01B7  16B6               	bsf	_Load^(0+256),5
 11039                           
 11040                           ;OverLoad_B1.c: 170: }
 11041                           ;OverLoad_B1.c: 171: } else {
 11042  01B8  0008               	return
 11043  01B9                     l10743:	
 11044                           
 11045                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11046  01B9  01DC               	clrf	(_Load^(0+256)+38)
 11047                           
 11048                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11049  01BA  1DB6               	btfss	_Load^(0+256),3
 11050  01BB  0008               	return
 11051                           
 11052                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11053  01BC  3001               	movlw	1
 11054  01BD  0020               	movlb	0	; select bank0
 11055  01BE  00A8               	movwf	??_Load_Main
 11056  01BF  0828               	movf	??_Load_Main,w
 11057  01C0  0022               	movlb	2	; select bank2
 11058  01C1  07DD               	addwf	(_Load^(0+256)+39),f
 11059                           
 11060                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11061  01C2  3003               	movlw	3
 11062  01C3  025D               	subwf	(_Load^(0+256)+39),w
 11063  01C4  1C03               	skipc
 11064  01C5  0008               	return
 11065                           
 11066                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11067  01C6  01DD               	clrf	(_Load^(0+256)+39)
 11068                           
 11069                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11070  01C7  17B6               	bsf	_Load^(0+256),7
 11071                           
 11072                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11073  01C8  11B6               	bcf	_Load^(0+256),3
 11074                           
 11075                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11076  01C9  01DB               	clrf	(_Load^(0+256)+37)
 11077                           
 11078                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11079  01CA  0856               	movf	((_Load+1)^(0+256)+31),w
 11080  01CB  01C0               	clrf	((_Load+1)^(0+256)+9)
 11081  01CC  07C0               	addwf	((_Load+1)^(0+256)+9),f
 11082  01CD  0855               	movf	(_Load^(0+256)+31),w
 11083  01CE  01BF               	clrf	(_Load^(0+256)+9)
 11084  01CF  07BF               	addwf	(_Load^(0+256)+9),f
 11085                           
 11086                           ;OverLoad_B1.c: 184: }
 11087                           ;OverLoad_B1.c: 185: }
 11088                           ;OverLoad_B1.c: 208: }
 11089                           ;OverLoad_B1.c: 209: }
 11090                           ;OverLoad_B1.c: 210: }
 11091                           ;OverLoad_B1.c: 211: } else {
 11092  01D0  0008               	return
 11093  01D1                     l1634:	
 11094                           
 11095                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11096  01D1  1636               	bsf	_Load^(0+256),4
 11097                           
 11098                           ;OverLoad_B1.c: 213: }
 11099                           ;OverLoad_B1.c: 214: } else {
 11100  01D2  0008               	return
 11101  01D3                     l1633:	
 11102                           
 11103                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11104  01D3  1D36               	btfss	_Load^(0+256),2
 11105  01D4  29E6               	goto	l10779
 11106                           
 11107                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11108  01D5  1136               	bcf	_Load^(0+256),2
 11109                           
 11110                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11111  01D6  1236               	bcf	_Load^(0+256),4
 11112                           
 11113                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11114  01D7  01B7               	clrf	(_Load^(0+256)+1)
 11115  01D8  01B8               	clrf	((_Load+1)^(0+256)+1)
 11116                           
 11117                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11118  01D9  319E  269B  3180   	fcall	_setLoad_AH_AL_Restore
 11119                           
 11120                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11121  01DC  0022               	movlb	2	; select bank2
 11122  01DD  01DC               	clrf	(_Load^(0+256)+38)
 11123                           
 11124                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11125  01DE  01DD               	clrf	(_Load^(0+256)+39)
 11126                           
 11127                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11128  01DF  01BB               	clrf	(_Load^(0+256)+5)
 11129  01E0  01BC               	clrf	((_Load+1)^(0+256)+5)
 11130                           
 11131                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11132  01E1  01BD               	clrf	(_Load^(0+256)+7)
 11133  01E2  01BE               	clrf	((_Load+1)^(0+256)+7)
 11134                           
 11135                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11136  01E3  11B6               	bcf	_Load^(0+256),3
 11137                           
 11138                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11139  01E4  01DB               	clrf	(_Load^(0+256)+37)
 11140                           
 11141                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11142  01E5  13B6               	bcf	_Load^(0+256),7
 11143  01E6                     l10779:	
 11144                           
 11145                           ;OverLoad_B1.c: 257: }
 11146                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11147  01E6  1EB6               	btfss	_Load^(0+256),5
 11148  01E7  0008               	return
 11149                           
 11150                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11151  01E8  3001               	movlw	1
 11152  01E9  07B9               	addwf	(_Load^(0+256)+3),f
 11153  01EA  3000               	movlw	0
 11154  01EB  3DBA               	addwfc	((_Load+1)^(0+256)+3),f
 11155                           
 11156                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11157  01EC  3001               	movlw	1
 11158  01ED  023A               	subwf	((_Load+1)^(0+256)+3),w
 11159  01EE  30F4               	movlw	244
 11160  01EF  1903               	skipnz
 11161  01F0  0239               	subwf	(_Load^(0+256)+3),w
 11162  01F1  1C03               	skipc
 11163  01F2  0008               	return
 11164                           
 11165                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11166  01F3  01B9               	clrf	(_Load^(0+256)+3)
 11167  01F4  01BA               	clrf	((_Load+1)^(0+256)+3)
 11168                           
 11169                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11170  01F5  12B6               	bcf	_Load^(0+256),5
 11171                           
 11172                           ;OverLoad_B1.c: 263: }
 11173                           ;OverLoad_B1.c: 264: }
 11174                           ;OverLoad_B1.c: 265: }
 11175                           ;OverLoad_B1.c: 266: } else {
 11176  01F6  0008               	return
 11177  01F7                     l1623:	
 11178                           
 11179                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11180  01F7  0021               	movlb	1	; select bank1
 11181  01F8  1C2F               	btfss	_myMain^(0+128),0
 11182  01F9  0008               	return
 11183                           
 11184                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11185  01FA  0022               	movlb	2	; select bank2
 11186  01FB  1436               	bsf	_Load^(0+256),0
 11187  01FC  0008               	return
 11188  01FD                     __end_of_Load_Main:	
 11189                           
 11190                           	psect	text64
 11191  1B08                     __ptext64:	
 11192 ;; *************** function _getMain_Lights_Count *****************
 11193 ;; Defined at:
 11194 ;;		line 459 in file "../src/Main_B1.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;  status1         1    1[BANK0 ] unsigned char 
 11199 ;;  count           1    0[BANK0 ] unsigned char 
 11200 ;; Return value:  Size  Location     Type
 11201 ;;                  1    wreg      unsigned char 
 11202 ;; Registers used:
 11203 ;;		wreg, status,2
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;Total ram usage:        2 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; Hardware stack levels required when called:    5
 11216 ;; This function calls:
 11217 ;;		Nothing
 11218 ;; This function is called by:
 11219 ;;		_Load_Main
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           
 11224                           ;psect for function _getMain_Lights_Count
 11225  1B08                     _getMain_Lights_Count:	
 11226                           
 11227                           ;Main_B1.c: 460: char count = 0;
 11228                           
 11229                           ;incstack = 0
 11230                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11231  1B08  0020               	movlb	0	; select bank0
 11232  1B09  01A0               	clrf	getMain_Lights_Count@count
 11233                           
 11234                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11235  1B0A  3000               	movlw	0
 11236  1B0B  0021               	movlb	1	; select bank1
 11237  1B0C  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11238  1B0D  3001               	movlw	1
 11239  1B0E  0020               	movlb	0	; select bank0
 11240  1B0F  00A1               	movwf	getMain_Lights_Count@status1
 11241                           
 11242                           ;Main_B1.c: 487: return count = status1;
 11243  1B10  0821               	movf	getMain_Lights_Count@status1,w
 11244  1B11  00A0               	movwf	getMain_Lights_Count@count
 11245  1B12  0008               	return
 11246  1B13                     __end_of_getMain_Lights_Count:	
 11247                           
 11248                           	psect	text65
 11249  07F8                     __ptext65:	
 11250 ;; *************** function _getDimmer_Load_Status *****************
 11251 ;; Defined at:
 11252 ;;		line 1157 in file "../src/Dimmer_B1.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;		None
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;  status          1    0[BANK0 ] unsigned char 
 11257 ;; Return value:  Size  Location     Type
 11258 ;;                  1    wreg      unsigned char 
 11259 ;; Registers used:
 11260 ;;		wreg, status,2
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;Total ram usage:        1 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; Hardware stack levels required when called:    5
 11273 ;; This function calls:
 11274 ;;		Nothing
 11275 ;; This function is called by:
 11276 ;;		_Load_Main
 11277 ;; This function uses a non-reentrant model
 11278 ;;
 11279                           
 11280                           
 11281                           ;psect for function _getDimmer_Load_Status
 11282  07F8                     _getDimmer_Load_Status:	
 11283                           
 11284                           ;Dimmer_B1.c: 1158: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11285                           
 11286                           ;incstack = 0
 11287                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11288  07F8  3000               	movlw	0
 11289  07F9  0022               	movlb	2	; select bank2
 11290  07FA  192C               	btfsc	_Dimmer^(0+256),2
 11291  07FB  3001               	movlw	1
 11292  07FC  0020               	movlb	0	; select bank0
 11293  07FD  00A0               	movwf	getDimmer_Load_Status@status
 11294                           
 11295                           ;Dimmer_B1.c: 1159: return status;
 11296  07FE  0820               	movf	getDimmer_Load_Status@status,w
 11297  07FF  0008               	return
 11298  0800                     __end_of_getDimmer_Load_Status:	
 11299                           
 11300                           	psect	text66
 11301  1AD0                     __ptext66:	
 11302 ;; *************** function _getDimmer_LoadGO *****************
 11303 ;; Defined at:
 11304 ;;		line 1151 in file "../src/Dimmer_B1.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;		None
 11307 ;; Auto vars:     Size  Location     Type
 11308 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  1    wreg      unsigned char 
 11311 ;; Registers used:
 11312 ;;		wreg, status,2
 11313 ;; Tracked objects:
 11314 ;;		On entry : 0/0
 11315 ;;		On exit  : 0/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;Total ram usage:        1 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    5
 11325 ;; This function calls:
 11326 ;;		Nothing
 11327 ;; This function is called by:
 11328 ;;		_Load_Main
 11329 ;; This function uses a non-reentrant model
 11330 ;;
 11331                           
 11332                           
 11333                           ;psect for function _getDimmer_LoadGO
 11334  1AD0                     _getDimmer_LoadGO:	
 11335                           
 11336                           ;Dimmer_B1.c: 1152: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11337                           
 11338                           ;incstack = 0
 11339                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11340  1AD0  3000               	movlw	0
 11341  1AD1  0022               	movlb	2	; select bank2
 11342  1AD2  18AC               	btfsc	_Dimmer^(0+256),1
 11343  1AD3  3001               	movlw	1
 11344  1AD4  0020               	movlb	0	; select bank0
 11345  1AD5  00A0               	movwf	getDimmer_LoadGO@loadgo
 11346                           
 11347                           ;Dimmer_B1.c: 1153: return loadgo;
 11348  1AD6  0820               	movf	getDimmer_LoadGO@loadgo,w
 11349  1AD7  0008               	return
 11350  1AD8                     __end_of_getDimmer_LoadGO:	
 11351                           
 11352                           	psect	text67
 11353  1CE7                     __ptext67:	
 11354 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11355 ;; Defined at:
 11356 ;;		line 285 in file "../src/Dimmer_B1.c"
 11357 ;; Parameters:    Size  Location     Type
 11358 ;;		None
 11359 ;; Auto vars:     Size  Location     Type
 11360 ;;  status          1    0[BANK0 ] unsigned char 
 11361 ;; Return value:  Size  Location     Type
 11362 ;;                  1    wreg      unsigned char 
 11363 ;; Registers used:
 11364 ;;		wreg, status,2, status,0
 11365 ;; Tracked objects:
 11366 ;;		On entry : 0/0
 11367 ;;		On exit  : 0/0
 11368 ;;		Unchanged: 0/0
 11369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;Total ram usage:        1 bytes
 11375 ;; Hardware stack levels used:    1
 11376 ;; Hardware stack levels required when called:    5
 11377 ;; This function calls:
 11378 ;;		Nothing
 11379 ;; This function is called by:
 11380 ;;		_Load_Main
 11381 ;; This function uses a non-reentrant model
 11382 ;;
 11383                           
 11384                           
 11385                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11386  1CE7                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11387                           
 11388                           ;Dimmer_B1.c: 286: char status = 0;
 11389                           
 11390                           ;incstack = 0
 11391                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11392  1CE7  0020               	movlb	0	; select bank0
 11393  1CE8  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11394                           
 11395                           ;Dimmer_B1.c: 297: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11396  1CE9  3000               	movlw	0
 11397  1CEA  0021               	movlb	1	; select bank1
 11398  1CEB  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11399  1CEC  3001               	movlw	1
 11400  1CED  0020               	movlb	0	; select bank0
 11401  1CEE  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11402                           
 11403                           ;Dimmer_B1.c: 301: if (status == 0) {
 11404  1CEF  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11405  1CF0  1D03               	skipz
 11406  1CF1  2CF8               	goto	l9847
 11407                           
 11408                           ;Dimmer_B1.c: 311: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11409  1CF2  3000               	movlw	0
 11410  1CF3  0021               	movlb	1	; select bank1
 11411  1CF4  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11412  1CF5  3001               	movlw	1
 11413  1CF6  0020               	movlb	0	; select bank0
 11414  1CF7  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11415  1CF8                     l9847:	
 11416                           
 11417                           ;Dimmer_B1.c: 313: }
 11418                           ;Dimmer_B1.c: 315: return status;
 11419  1CF8  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11420  1CF9  0008               	return
 11421  1CFA                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11422                           
 11423                           	psect	text68
 11424  1EB7                     __ptext68:	
 11425 ;; *************** function ___wmul *****************
 11426 ;; Defined at:
 11427 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11428 ;; Parameters:    Size  Location     Type
 11429 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11430 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;  product         2    4[BANK0 ] unsigned int 
 11433 ;; Return value:  Size  Location     Type
 11434 ;;                  2    0[BANK0 ] unsigned int 
 11435 ;; Registers used:
 11436 ;;		wreg, status,2, status,0
 11437 ;; Tracked objects:
 11438 ;;		On entry : 0/0
 11439 ;;		On exit  : 0/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11442 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;Total ram usage:        6 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    5
 11449 ;; This function calls:
 11450 ;;		Nothing
 11451 ;; This function is called by:
 11452 ;;		_Load_Main
 11453 ;; This function uses a non-reentrant model
 11454 ;;
 11455                           
 11456                           
 11457                           ;psect for function ___wmul
 11458  1EB7                     ___wmul:	
 11459                           
 11460                           ;incstack = 0
 11461                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11462  1EB7  0020               	movlb	0	; select bank0
 11463  1EB8  01A4               	clrf	___wmul@product
 11464  1EB9  01A5               	clrf	___wmul@product+1
 11465  1EBA                     l10383:	
 11466  1EBA  1C20               	btfss	___wmul@multiplier,0
 11467  1EBB  2EC0               	goto	l2694
 11468  1EBC  0822               	movf	___wmul@multiplicand,w
 11469  1EBD  07A4               	addwf	___wmul@product,f
 11470  1EBE  0823               	movf	___wmul@multiplicand+1,w
 11471  1EBF  3DA5               	addwfc	___wmul@product+1,f
 11472  1EC0                     l2694:	
 11473  1EC0  3001               	movlw	1
 11474  1EC1                     u11875:	
 11475  1EC1  35A2               	lslf	___wmul@multiplicand,f
 11476  1EC2  0DA3               	rlf	___wmul@multiplicand+1,f
 11477  1EC3  0B89               	decfsz	9,f
 11478  1EC4  2EC1               	goto	u11875
 11479  1EC5  3001               	movlw	1
 11480  1EC6                     u11885:	
 11481  1EC6  36A1               	lsrf	___wmul@multiplier+1,f
 11482  1EC7  0CA0               	rrf	___wmul@multiplier,f
 11483  1EC8  0B89               	decfsz	9,f
 11484  1EC9  2EC6               	goto	u11885
 11485  1ECA  0821               	movf	___wmul@multiplier+1,w
 11486  1ECB  0420               	iorwf	___wmul@multiplier,w
 11487  1ECC  1D03               	skipz
 11488  1ECD  2EBA               	goto	l10383
 11489  1ECE  0825               	movf	___wmul@product+1,w
 11490  1ECF  01A1               	clrf	?___wmul+1
 11491  1ED0  07A1               	addwf	?___wmul+1,f
 11492  1ED1  0824               	movf	___wmul@product,w
 11493  1ED2  01A0               	clrf	?___wmul
 11494  1ED3  07A0               	addwf	?___wmul,f
 11495  1ED4  0008               	return
 11496  1ED5                     __end_of___wmul:	
 11497                           
 11498                           	psect	text69
 11499  122D                     __ptext69:	
 11500 ;; *************** function ___lwdiv *****************
 11501 ;; Defined at:
 11502 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11503 ;; Parameters:    Size  Location     Type
 11504 ;;  divisor         2    0[BANK0 ] unsigned int 
 11505 ;;  dividend        2    2[BANK0 ] unsigned int 
 11506 ;; Auto vars:     Size  Location     Type
 11507 ;;  quotient        2    6[BANK0 ] unsigned int 
 11508 ;;  counter         1    5[BANK0 ] unsigned char 
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  2    0[BANK0 ] unsigned int 
 11511 ;; Registers used:
 11512 ;;		wreg, status,2, status,0
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11518 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11519 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;Total ram usage:        8 bytes
 11523 ;; Hardware stack levels used:    1
 11524 ;; Hardware stack levels required when called:    5
 11525 ;; This function calls:
 11526 ;;		Nothing
 11527 ;; This function is called by:
 11528 ;;		_Load_Main
 11529 ;;		_setRF_Main
 11530 ;; This function uses a non-reentrant model
 11531 ;;
 11532                           
 11533                           
 11534                           ;psect for function ___lwdiv
 11535  122D                     ___lwdiv:	
 11536                           
 11537                           ;incstack = 0
 11538                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11539  122D  0020               	movlb	0	; select bank0
 11540  122E  01A6               	clrf	___lwdiv@quotient
 11541  122F  01A7               	clrf	___lwdiv@quotient+1
 11542  1230  0821               	movf	___lwdiv@divisor+1,w
 11543  1231  0420               	iorwf	___lwdiv@divisor,w
 11544  1232  1903               	skipnz
 11545  1233  2A5D               	goto	l9789
 11546  1234  01A5               	clrf	___lwdiv@counter
 11547  1235  0AA5               	incf	___lwdiv@counter,f
 11548  1236                     l9777:	
 11549  1236  1BA1               	btfsc	___lwdiv@divisor+1,7
 11550  1237  2A42               	goto	l9779
 11551  1238  3001               	movlw	1
 11552  1239                     u10825:	
 11553  1239  35A0               	lslf	___lwdiv@divisor,f
 11554  123A  0DA1               	rlf	___lwdiv@divisor+1,f
 11555  123B  0B89               	decfsz	9,f
 11556  123C  2A39               	goto	u10825
 11557  123D  3001               	movlw	1
 11558  123E  00A4               	movwf	??___lwdiv
 11559  123F  0824               	movf	??___lwdiv,w
 11560  1240  07A5               	addwf	___lwdiv@counter,f
 11561  1241  2A36               	goto	l9777
 11562  1242                     l9779:	
 11563  1242  3001               	movlw	1
 11564  1243                     u10845:	
 11565  1243  35A6               	lslf	___lwdiv@quotient,f
 11566  1244  0DA7               	rlf	___lwdiv@quotient+1,f
 11567  1245  0B89               	decfsz	9,f
 11568  1246  2A43               	goto	u10845
 11569  1247  0821               	movf	___lwdiv@divisor+1,w
 11570  1248  0223               	subwf	___lwdiv@dividend+1,w
 11571  1249  1D03               	skipz
 11572  124A  2A4D               	goto	u10855
 11573  124B  0820               	movf	___lwdiv@divisor,w
 11574  124C  0222               	subwf	___lwdiv@dividend,w
 11575  124D                     u10855:	
 11576  124D  1C03               	skipc
 11577  124E  2A54               	goto	l9785
 11578  124F  0820               	movf	___lwdiv@divisor,w
 11579  1250  02A2               	subwf	___lwdiv@dividend,f
 11580  1251  0821               	movf	___lwdiv@divisor+1,w
 11581  1252  3BA3               	subwfb	___lwdiv@dividend+1,f
 11582  1253  1426               	bsf	___lwdiv@quotient,0
 11583  1254                     l9785:	
 11584  1254  3001               	movlw	1
 11585  1255                     u10865:	
 11586  1255  36A1               	lsrf	___lwdiv@divisor+1,f
 11587  1256  0CA0               	rrf	___lwdiv@divisor,f
 11588  1257  0B89               	decfsz	9,f
 11589  1258  2A55               	goto	u10865
 11590  1259  3001               	movlw	1
 11591  125A  02A5               	subwf	___lwdiv@counter,f
 11592  125B  1D03               	btfss	3,2
 11593  125C  2A42               	goto	l9779
 11594  125D                     l9789:	
 11595  125D  0827               	movf	___lwdiv@quotient+1,w
 11596  125E  01A1               	clrf	?___lwdiv+1
 11597  125F  07A1               	addwf	?___lwdiv+1,f
 11598  1260  0826               	movf	___lwdiv@quotient,w
 11599  1261  01A0               	clrf	?___lwdiv
 11600  1262  07A0               	addwf	?___lwdiv,f
 11601  1263  0008               	return
 11602  1264                     __end_of___lwdiv:	
 11603                           
 11604                           	psect	text70
 11605  1A65                     __ptext70:	
 11606 ;; *************** function _Load_Initialization *****************
 11607 ;; Defined at:
 11608 ;;		line 9 in file "../src/OverLoad_B1.c"
 11609 ;; Parameters:    Size  Location     Type
 11610 ;;		None
 11611 ;; Auto vars:     Size  Location     Type
 11612 ;;		None
 11613 ;; Return value:  Size  Location     Type
 11614 ;;		None               void
 11615 ;; Registers used:
 11616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11617 ;; Tracked objects:
 11618 ;;		On entry : 0/0
 11619 ;;		On exit  : 0/0
 11620 ;;		Unchanged: 0/0
 11621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;Total ram usage:        0 bytes
 11627 ;; Hardware stack levels used:    1
 11628 ;; Hardware stack levels required when called:    6
 11629 ;; This function calls:
 11630 ;;		_setLoad_AH_AL_Restore
 11631 ;; This function is called by:
 11632 ;;		_main
 11633 ;; This function uses a non-reentrant model
 11634 ;;
 11635                           
 11636                           
 11637                           ;psect for function _Load_Initialization
 11638  1A65                     _Load_Initialization:	
 11639                           
 11640                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11641                           
 11642                           ;incstack = 0
 11643                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11644  1A65  319E  269B         	fcall	_setLoad_AH_AL_Restore
 11645  1A67  0008               	return
 11646  1A68                     __end_of_Load_Initialization:	
 11647                           
 11648                           	psect	text71
 11649  1E9B                     __ptext71:	
 11650 ;; *************** function _setLoad_AH_AL_Restore *****************
 11651 ;; Defined at:
 11652 ;;		line 294 in file "../src/OverLoad_B1.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;		None
 11655 ;; Auto vars:     Size  Location     Type
 11656 ;;  i               1    1[BANK0 ] unsigned char 
 11657 ;; Return value:  Size  Location     Type
 11658 ;;		None               void
 11659 ;; Registers used:
 11660 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/0
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;Total ram usage:        2 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    5
 11673 ;; This function calls:
 11674 ;;		Nothing
 11675 ;; This function is called by:
 11676 ;;		_Load_Initialization
 11677 ;;		_Load_Main
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           
 11682                           ;psect for function _setLoad_AH_AL_Restore
 11683  1E9B                     _setLoad_AH_AL_Restore:	
 11684                           
 11685                           ;OverLoad_B1.c: 295: char i;
 11686                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 11687                           
 11688                           ;incstack = 0
 11689                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11690  1E9B  0020               	movlb	0	; select bank0
 11691  1E9C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11692  1E9D                     L8:	
 11693  1E9D  3005               	movlw	5
 11694  1E9E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11695  1E9F  1803               	btfsc	3,0
 11696  1EA0  0008               	return
 11697                           
 11698                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 11699  1EA1  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11700  1EA2  3E41               	addlw	(_Load+11)& (0+255)
 11701  1EA3  0086               	movwf	6
 11702  1EA4  3001               	movlw	1	; select bank2/3
 11703  1EA5  0087               	movwf	7
 11704  1EA6  3000               	movlw	0
 11705  1EA7  3FC0               	movwi [0]fsr1
 11706  1EA8  3FC1               	movwi [1]fsr1
 11707                           
 11708                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 11709  1EA9  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11710  1EAA  3E4B               	addlw	(_Load+21)& (0+255)
 11711  1EAB  0086               	movwf	6
 11712  1EAC  3001               	movlw	1	; select bank2/3
 11713  1EAD  0087               	movwf	7
 11714  1EAE  30FF               	movlw	255
 11715  1EAF  3FC0               	movwi [0]fsr1
 11716  1EB0  30FF               	movlw	255
 11717  1EB1  3FC1               	movwi [1]fsr1
 11718  1EB2  3001               	movlw	1
 11719  1EB3  00A0               	movwf	??_setLoad_AH_AL_Restore
 11720  1EB4  0820               	movf	??_setLoad_AH_AL_Restore,w
 11721  1EB5  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11722  1EB6  2E9D               	goto	L8
 11723  1EB7                     __end_of_setLoad_AH_AL_Restore:	
 11724                           
 11725                           	psect	text72
 11726  1A80                     __ptext72:	
 11727 ;; *************** function _LED_Main *****************
 11728 ;; Defined at:
 11729 ;;		line 47 in file "../src/LED_B1.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;		None
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;		None
 11734 ;; Return value:  Size  Location     Type
 11735 ;;		None               void
 11736 ;; Registers used:
 11737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11738 ;; Tracked objects:
 11739 ;;		On entry : 0/0
 11740 ;;		On exit  : 0/0
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;Total ram usage:        0 bytes
 11748 ;; Hardware stack levels used:    1
 11749 ;; Hardware stack levels required when called:    7
 11750 ;; This function calls:
 11751 ;;		_setLED_Main
 11752 ;; This function is called by:
 11753 ;;		_main
 11754 ;; This function uses a non-reentrant model
 11755 ;;
 11756                           
 11757                           
 11758                           ;psect for function _LED_Main
 11759  1A80                     _LED_Main:	
 11760                           
 11761                           ;LED_B1.c: 67: setLED_Main(99);
 11762                           
 11763                           ;incstack = 0
 11764                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11765  1A80  3063               	movlw	99
 11766  1A81  3191  21F7         	fcall	_setLED_Main
 11767  1A83  0008               	return
 11768  1A84                     __end_of_LED_Main:	
 11769                           
 11770                           	psect	text73
 11771  11F7                     __ptext73:	
 11772 ;; *************** function _setLED_Main *****************
 11773 ;; Defined at:
 11774 ;;		line 229 in file "../src/LED_B1.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  led             1    wreg     unsigned char 
 11777 ;; Auto vars:     Size  Location     Type
 11778 ;;  led             1    4[BANK0 ] unsigned char 
 11779 ;; Return value:  Size  Location     Type
 11780 ;;		None               void
 11781 ;; Registers used:
 11782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11783 ;; Tracked objects:
 11784 ;;		On entry : 0/0
 11785 ;;		On exit  : 0/0
 11786 ;;		Unchanged: 0/0
 11787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;Total ram usage:        3 bytes
 11793 ;; Hardware stack levels used:    1
 11794 ;; Hardware stack levels required when called:    6
 11795 ;; This function calls:
 11796 ;;		_LedPointSelect
 11797 ;; This function is called by:
 11798 ;;		_LED_Main
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           
 11803                           ;psect for function _setLED_Main
 11804  11F7                     _setLED_Main:	
 11805                           
 11806                           ;incstack = 0
 11807                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11808                           ;setLED_Main@led stored from wreg
 11809  11F7  0020               	movlb	0	; select bank0
 11810  11F8  00A4               	movwf	setLED_Main@led
 11811                           
 11812                           ;LED_B1.c: 230: LedPointSelect(led);
 11813  11F9  0824               	movf	setLED_Main@led,w
 11814  11FA  319B  2370  3191   	fcall	_LedPointSelect
 11815                           
 11816                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11817  11FD  0021               	movlb	1	; select bank1
 11818  11FE  084F               	movf	_LED^(0+128),w
 11819  11FF  0086               	movwf	6
 11820  1200  3001               	movlw	1	; select bank2/3
 11821  1201  0087               	movwf	7
 11822  1202  1C81               	btfss	1,1
 11823  1203  0008               	return
 11824                           
 11825                           ;LED_B1.c: 232: LED->Time++;
 11826  1204  0A4F               	incf	_LED^(0+128),w
 11827  1205  0086               	movwf	6
 11828  1206  3001               	movlw	1	; select bank2/3
 11829  1207  0087               	movwf	7
 11830  1208  3001               	movlw	1
 11831  1209  0781               	addwf	1,f
 11832  120A  3141               	addfsr 1,1
 11833  120B  1803               	skipnc
 11834  120C  0A81               	incf	1,f
 11835                           
 11836                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11837  120D  0A4F               	incf	_LED^(0+128),w
 11838  120E  0086               	movwf	6
 11839  120F  3001               	movlw	1	; select bank2/3
 11840  1210  0087               	movwf	7
 11841  1211  3F40               	moviw [0]fsr1
 11842  1212  0020               	movlb	0	; select bank0
 11843  1213  00A2               	movwf	??_setLED_Main
 11844  1214  3F41               	moviw [1]fsr1
 11845  1215  00A3               	movwf	??_setLED_Main+1
 11846  1216  3000               	movlw	0
 11847  1217  0223               	subwf	??_setLED_Main+1,w
 11848  1218  3019               	movlw	25
 11849  1219  1903               	skipnz
 11850  121A  0222               	subwf	??_setLED_Main,w
 11851  121B  1C03               	skipc
 11852  121C  0008               	return
 11853                           
 11854                           ;LED_B1.c: 234: LED->Time = 0;
 11855  121D  0021               	movlb	1	; select bank1
 11856  121E  0A4F               	incf	_LED^(0+128),w
 11857  121F  0086               	movwf	6
 11858  1220  3001               	movlw	1	; select bank2/3
 11859  1221  0087               	movwf	7
 11860  1222  3000               	movlw	0
 11861  1223  3FC0               	movwi [0]fsr1
 11862  1224  3FC1               	movwi [1]fsr1
 11863                           
 11864                           ;LED_B1.c: 252: if (led == 99) {
 11865  1225  0020               	movlb	0	; select bank0
 11866  1226  0824               	movf	setLED_Main@led,w
 11867  1227  3A63               	xorlw	99
 11868  1228  1D03               	skipz
 11869  1229  0008               	return
 11870                           
 11871                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11872  122A  3020               	movlw	32
 11873  122B  068D               	xorwf	13,f
 11874  122C  0008               	return
 11875  122D                     __end_of_setLED_Main:	
 11876                           
 11877                           	psect	text74
 11878  1A7C                     __ptext74:	
 11879 ;; *************** function _LED_Initialization *****************
 11880 ;; Defined at:
 11881 ;;		line 31 in file "../src/LED_B1.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;		None
 11884 ;; Auto vars:     Size  Location     Type
 11885 ;;		None
 11886 ;; Return value:  Size  Location     Type
 11887 ;;		None               void
 11888 ;; Registers used:
 11889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11890 ;; Tracked objects:
 11891 ;;		On entry : 0/0
 11892 ;;		On exit  : 0/0
 11893 ;;		Unchanged: 0/0
 11894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11899 ;;Total ram usage:        0 bytes
 11900 ;; Hardware stack levels used:    1
 11901 ;; Hardware stack levels required when called:    8
 11902 ;; This function calls:
 11903 ;;		_setLED_Initialization
 11904 ;; This function is called by:
 11905 ;;		_main
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           
 11910                           ;psect for function _LED_Initialization
 11911  1A7C                     _LED_Initialization:	
 11912                           
 11913                           ;LED_B1.c: 42: setLED_Initialization(99);
 11914                           
 11915                           ;incstack = 0
 11916                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11917  1A7C  3063               	movlw	99
 11918  1A7D  319C  249D         	fcall	_setLED_Initialization
 11919  1A7F  0008               	return
 11920  1A80                     __end_of_LED_Initialization:	
 11921                           
 11922                           	psect	text75
 11923  1C9D                     __ptext75:	
 11924 ;; *************** function _setLED_Initialization *****************
 11925 ;; Defined at:
 11926 ;;		line 74 in file "../src/LED_B1.c"
 11927 ;; Parameters:    Size  Location     Type
 11928 ;;  led             1    wreg     unsigned char 
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;  led             1    4[BANK0 ] unsigned char 
 11931 ;; Return value:  Size  Location     Type
 11932 ;;		None               void
 11933 ;; Registers used:
 11934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;Total ram usage:        1 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:    7
 11947 ;; This function calls:
 11948 ;;		_LedPointSelect
 11949 ;;		_setLED
 11950 ;; This function is called by:
 11951 ;;		_LED_Initialization
 11952 ;; This function uses a non-reentrant model
 11953 ;;
 11954                           
 11955                           
 11956                           ;psect for function _setLED_Initialization
 11957  1C9D                     _setLED_Initialization:	
 11958                           
 11959                           ;incstack = 0
 11960                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11961                           ;setLED_Initialization@led stored from wreg
 11962  1C9D  0020               	movlb	0	; select bank0
 11963  1C9E  00A4               	movwf	setLED_Initialization@led
 11964                           
 11965                           ;LED_B1.c: 75: LedPointSelect(led);
 11966  1C9F  0824               	movf	setLED_Initialization@led,w
 11967  1CA0  319B  2370  319C   	fcall	_LedPointSelect
 11968                           
 11969                           ;LED_B1.c: 76: LED->Enable = 1;
 11970  1CA3  0021               	movlb	1	; select bank1
 11971  1CA4  084F               	movf	_LED^(0+128),w
 11972  1CA5  0086               	movwf	6
 11973  1CA6  3001               	movlw	1	; select bank2/3
 11974  1CA7  0087               	movwf	7
 11975  1CA8  1401               	bsf	1,0
 11976                           
 11977                           ;LED_B1.c: 77: setLED(led, 0);
 11978  1CA9  0020               	movlb	0	; select bank0
 11979  1CAA  01A2               	clrf	setLED@command
 11980  1CAB  0824               	movf	setLED_Initialization@led,w
 11981  1CAC  3192  229D         	fcall	_setLED
 11982  1CAE  0008               	return
 11983  1CAF                     __end_of_setLED_Initialization:	
 11984                           
 11985                           	psect	text76
 11986  13CC                     __ptext76:	
 11987 ;; *************** function _Flash_Memory_Main *****************
 11988 ;; Defined at:
 11989 ;;		line 976 in file "../src/MCU_B1.c"
 11990 ;; Parameters:    Size  Location     Type
 11991 ;;		None
 11992 ;; Auto vars:     Size  Location     Type
 11993 ;;  key_Status      1    7[BANK0 ] unsigned char 
 11994 ;; Return value:  Size  Location     Type
 11995 ;;		None               void
 11996 ;; Registers used:
 11997 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11998 ;; Tracked objects:
 11999 ;;		On entry : 0/0
 12000 ;;		On exit  : 0/0
 12001 ;;		Unchanged: 0/0
 12002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12005 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12006 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;Total ram usage:        3 bytes
 12008 ;; Hardware stack levels used:    1
 12009 ;; Hardware stack levels required when called:    8
 12010 ;; This function calls:
 12011 ;;		_Flash_Memory_Modify
 12012 ;;		_getAll_Sw_KeyStatus
 12013 ;;		_getMain_All_LightsStatus
 12014 ;; This function is called by:
 12015 ;;		_main
 12016 ;; This function uses a non-reentrant model
 12017 ;;
 12018                           
 12019                           
 12020                           ;psect for function _Flash_Memory_Main
 12021  13CC                     _Flash_Memory_Main:	
 12022                           
 12023                           ;MCU_B1.c: 977: char key_Status = 0;
 12024                           
 12025                           ;incstack = 0
 12026                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12027  13CC  0020               	movlb	0	; select bank0
 12028  13CD  01A7               	clrf	Flash_Memory_Main@key_Status
 12029                           
 12030                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12031  13CE  319C  2435  3193   	fcall	_getAll_Sw_KeyStatus
 12032  13D1  0020               	movlb	0	; select bank0
 12033  13D2  00A6               	movwf	??_Flash_Memory_Main
 12034  13D3  0826               	movf	??_Flash_Memory_Main,w
 12035  13D4  00A7               	movwf	Flash_Memory_Main@key_Status
 12036                           
 12037                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12038  13D5  0023               	movlb	3	; select bank3
 12039  13D6  1C62               	btfss	(_Memory^(0+384)+36),0
 12040  13D7  0008               	return
 12041                           
 12042                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12043  13D8  0020               	movlb	0	; select bank0
 12044  13D9  01A8               	clrf	_Flash_Memory_Main$3155
 12045  13DA  319A  22F3  3193   	fcall	_getMain_All_LightsStatus
 12046  13DD  3800               	iorlw	0
 12047  13DE  1D03               	skipz
 12048  13DF  2BE6               	goto	l10503
 12049  13E0  0020               	movlb	0	; select bank0
 12050  13E1  08A7               	movf	Flash_Memory_Main@key_Status,f
 12051  13E2  1D03               	skipz
 12052  13E3  2BE6               	goto	l10503
 12053  13E4  01A8               	clrf	_Flash_Memory_Main$3155
 12054  13E5  0AA8               	incf	_Flash_Memory_Main$3155,f
 12055  13E6                     l10503:	
 12056  13E6  0020               	movlb	0	; select bank0
 12057  13E7  0828               	movf	_Flash_Memory_Main$3155,w
 12058  13E8  0023               	movlb	3	; select bank3
 12059  13E9  10E2               	bcf	(_Memory^(0+384)+36),1
 12060  13EA  1D03               	skipz
 12061  13EB  14E2               	bsf	(_Memory^(0+384)+36),1
 12062                           
 12063                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12064  13EC  1CE2               	btfss	(_Memory^(0+384)+36),1
 12065  13ED  2C07               	goto	l1245
 12066                           
 12067                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12068  13EE  15E2               	bsf	(_Memory^(0+384)+36),3
 12069                           
 12070                           ;MCU_B1.c: 985: Memory.Time++;
 12071  13EF  3001               	movlw	1
 12072  13F0  07E0               	addwf	(_Memory^(0+384)+34),f
 12073  13F1  3000               	movlw	0
 12074  13F2  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 12075                           
 12076                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12077  13F3  3022               	movlw	34
 12078  13F4  3EBE               	addlw	_Memory& (0+255)
 12079  13F5  0086               	movwf	6
 12080  13F6  3001               	movlw	1	; select bank3/4
 12081  13F7  0087               	movwf	7
 12082  13F8  3F40               	moviw [0]fsr1
 12083  13F9  3A0A               	xorlw	10
 12084  13FA  1D03               	skipz
 12085  13FB  2BFE               	goto	u12105
 12086  13FC  3F41               	moviw [1]fsr1
 12087  13FD  3A00               	xorlw	0
 12088  13FE                     u12105:	
 12089  13FE  1D03               	skipz
 12090  13FF  0008               	return
 12091                           
 12092                           ;MCU_B1.c: 987: Memory.Time = 0;
 12093  1400  01E0               	clrf	(_Memory^(0+384)+34)
 12094  1401  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12095                           
 12096                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12097  1402  1062               	bcf	(_Memory^(0+384)+36),0
 12098                           
 12099                           ;MCU_B1.c: 989: Memory.GO = 0;
 12100  1403  10E2               	bcf	(_Memory^(0+384)+36),1
 12101                           
 12102                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12103  1404  318B  239E         	fcall	_Flash_Memory_Modify
 12104                           
 12105                           ;MCU_B1.c: 991: }
 12106                           ;MCU_B1.c: 992: } else {
 12107  1406  0008               	return
 12108  1407                     l1245:	
 12109                           
 12110                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12111  1407  1DE2               	btfss	(_Memory^(0+384)+36),3
 12112  1408  0008               	return
 12113                           
 12114                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12115  1409  11E2               	bcf	(_Memory^(0+384)+36),3
 12116                           
 12117                           ;MCU_B1.c: 995: Memory.Time = 0;
 12118  140A  01E0               	clrf	(_Memory^(0+384)+34)
 12119  140B  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12120  140C  0008               	return
 12121  140D                     __end_of_Flash_Memory_Main:	
 12122                           
 12123                           	psect	text77
 12124  1C35                     __ptext77:	
 12125 ;; *************** function _getAll_Sw_KeyStatus *****************
 12126 ;; Defined at:
 12127 ;;		line 278 in file "../src/Switch_B1.c"
 12128 ;; Parameters:    Size  Location     Type
 12129 ;;		None
 12130 ;; Auto vars:     Size  Location     Type
 12131 ;;  status          1    1[BANK0 ] unsigned char 
 12132 ;; Return value:  Size  Location     Type
 12133 ;;                  1    wreg      unsigned char 
 12134 ;; Registers used:
 12135 ;;		wreg, status,2
 12136 ;; Tracked objects:
 12137 ;;		On entry : 0/0
 12138 ;;		On exit  : 0/0
 12139 ;;		Unchanged: 0/0
 12140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12142 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12144 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;Total ram usage:        3 bytes
 12146 ;; Hardware stack levels used:    1
 12147 ;; Hardware stack levels required when called:    5
 12148 ;; This function calls:
 12149 ;;		Nothing
 12150 ;; This function is called by:
 12151 ;;		_Flash_Memory_Main
 12152 ;; This function uses a non-reentrant model
 12153 ;;
 12154                           
 12155                           
 12156                           ;psect for function _getAll_Sw_KeyStatus
 12157  1C35                     _getAll_Sw_KeyStatus:	
 12158                           
 12159                           ;Switch_B1.c: 279: char status = 0;
 12160                           
 12161                           ;incstack = 0
 12162                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12163  1C35  0020               	movlb	0	; select bank0
 12164  1C36  01A1               	clrf	getAll_Sw_KeyStatus@status
 12165                           
 12166                           ;Switch_B1.c: 298: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12167  1C37  01A2               	clrf	_getAll_Sw_KeyStatus$6473
 12168  1C38  0AA2               	incf	_getAll_Sw_KeyStatus$6473,f
 12169  1C39  1F0C               	btfss	12,6	;volatile
 12170  1C3A  1A0C               	btfsc	12,4	;volatile
 12171  1C3B  2C40               	goto	l10069
 12172  1C3C  1C0C               	btfss	12,0	;volatile
 12173  1C3D  1B8C               	btfsc	12,7	;volatile
 12174  1C3E  2C40               	goto	l10069
 12175  1C3F  01A2               	clrf	_getAll_Sw_KeyStatus$6473
 12176  1C40                     l10069:	
 12177  1C40  0822               	movf	_getAll_Sw_KeyStatus$6473,w
 12178  1C41  00A0               	movwf	??_getAll_Sw_KeyStatus
 12179  1C42  0820               	movf	??_getAll_Sw_KeyStatus,w
 12180  1C43  00A1               	movwf	getAll_Sw_KeyStatus@status
 12181                           
 12182                           ;Switch_B1.c: 302: return status;
 12183  1C44  0821               	movf	getAll_Sw_KeyStatus@status,w
 12184  1C45  0008               	return
 12185  1C46                     __end_of_getAll_Sw_KeyStatus:	
 12186                           
 12187                           	psect	text78
 12188  0B9E                     __ptext78:	
 12189 ;; *************** function _Flash_Memory_Modify *****************
 12190 ;; Defined at:
 12191 ;;		line 1053 in file "../src/MCU_B1.c"
 12192 ;; Parameters:    Size  Location     Type
 12193 ;;		None
 12194 ;; Auto vars:     Size  Location     Type
 12195 ;;  i               1    5[BANK0 ] unsigned char 
 12196 ;; Return value:  Size  Location     Type
 12197 ;;		None               void
 12198 ;; Registers used:
 12199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12200 ;; Tracked objects:
 12201 ;;		On entry : 0/0
 12202 ;;		On exit  : 0/0
 12203 ;;		Unchanged: 0/0
 12204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;Total ram usage:        2 bytes
 12210 ;; Hardware stack levels used:    1
 12211 ;; Hardware stack levels required when called:    7
 12212 ;; This function calls:
 12213 ;;		_Flash_Memory_Erasing
 12214 ;;		_Flash_Memory_Read
 12215 ;;		_Flash_Memory_Write
 12216 ;;		_setMemory_Data
 12217 ;; This function is called by:
 12218 ;;		_Flash_Memory_Main
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           
 12223                           ;psect for function _Flash_Memory_Modify
 12224  0B9E                     _Flash_Memory_Modify:	
 12225                           
 12226                           ;MCU_B1.c: 1054: char i = 0;
 12227                           
 12228                           ;incstack = 0
 12229                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12230  0B9E  0020               	movlb	0	; select bank0
 12231  0B9F  01A5               	clrf	Flash_Memory_Modify@i
 12232                           
 12233                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12234  0BA0  01A5               	clrf	Flash_Memory_Modify@i
 12235  0BA1  3020               	movlw	32
 12236  0BA2  0225               	subwf	Flash_Memory_Modify@i,w
 12237  0BA3  1803               	btfsc	3,0
 12238  0BA4  2BBA               	goto	l10087
 12239  0BA5                     l10081:	
 12240                           
 12241                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12242  0BA5  0825               	movf	Flash_Memory_Modify@i,w
 12243  0BA6  319E  2616  318B   	fcall	_Flash_Memory_Read
 12244  0BA9  0020               	movlb	0	; select bank0
 12245  0BAA  00A4               	movwf	??_Flash_Memory_Modify
 12246  0BAB  0825               	movf	Flash_Memory_Modify@i,w
 12247  0BAC  3EBE               	addlw	_Memory& (0+255)
 12248  0BAD  0086               	movwf	6
 12249  0BAE  3001               	movlw	1	; select bank3/4
 12250  0BAF  0087               	movwf	7
 12251  0BB0  0824               	movf	??_Flash_Memory_Modify,w
 12252  0BB1  0081               	movwf	1
 12253  0BB2  3001               	movlw	1
 12254  0BB3  00A4               	movwf	??_Flash_Memory_Modify
 12255  0BB4  0824               	movf	??_Flash_Memory_Modify,w
 12256  0BB5  07A5               	addwf	Flash_Memory_Modify@i,f
 12257  0BB6  3020               	movlw	32
 12258  0BB7  0225               	subwf	Flash_Memory_Modify@i,w
 12259  0BB8  1C03               	skipc
 12260  0BB9  2BA5               	goto	l10081
 12261  0BBA                     l10087:	
 12262                           
 12263                           ;MCU_B1.c: 1057: }
 12264                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12265  0BBA  0021               	movlb	1	; select bank1
 12266  0BBB  086C               	movf	_product^(0+128),w
 12267  0BBC  0086               	movwf	6
 12268  0BBD  3002               	movlw	2	; select bank4/5
 12269  0BBE  0087               	movwf	7
 12270  0BBF  3002               	movlw	2	; select bank4/5
 12271  0BC0  3F4C               	moviw [12]fsr1
 12272  0BC1  0020               	movlb	0	; select bank0
 12273  0BC2  00A0               	movwf	setMemory_Data@data
 12274  0BC3  3000               	movlw	0
 12275  0BC4  319B  237C  318B   	fcall	_setMemory_Data
 12276                           
 12277                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12278  0BC7  0021               	movlb	1	; select bank1
 12279  0BC8  086C               	movf	_product^(0+128),w
 12280  0BC9  0086               	movwf	6
 12281  0BCA  3002               	movlw	2	; select bank4/5
 12282  0BCB  0087               	movwf	7
 12283  0BCC  3002               	movlw	2	; select bank4/5
 12284  0BCD  3F4D               	moviw [13]fsr1
 12285  0BCE  0020               	movlb	0	; select bank0
 12286  0BCF  00A0               	movwf	setMemory_Data@data
 12287  0BD0  3001               	movlw	1
 12288  0BD1  319B  237C  318B   	fcall	_setMemory_Data
 12289                           
 12290                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12291  0BD4  0021               	movlb	1	; select bank1
 12292  0BD5  086C               	movf	_product^(0+128),w
 12293  0BD6  0086               	movwf	6
 12294  0BD7  3002               	movlw	2	; select bank4/5
 12295  0BD8  0087               	movwf	7
 12296  0BD9  3002               	movlw	2	; select bank4/5
 12297  0BDA  3F4E               	moviw [14]fsr1
 12298  0BDB  0020               	movlb	0	; select bank0
 12299  0BDC  00A0               	movwf	setMemory_Data@data
 12300  0BDD  3002               	movlw	2
 12301  0BDE  319B  237C  318B   	fcall	_setMemory_Data
 12302                           
 12303                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12304  0BE1  0021               	movlb	1	; select bank1
 12305  0BE2  086C               	movf	_product^(0+128),w
 12306  0BE3  0086               	movwf	6
 12307  0BE4  3002               	movlw	2	; select bank4/5
 12308  0BE5  0087               	movwf	7
 12309  0BE6  3002               	movlw	2	; select bank4/5
 12310  0BE7  3F55               	moviw [21]fsr1
 12311  0BE8  0020               	movlb	0	; select bank0
 12312  0BE9  00A0               	movwf	setMemory_Data@data
 12313  0BEA  3003               	movlw	3
 12314  0BEB  319B  237C  318B   	fcall	_setMemory_Data
 12315                           
 12316                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12317  0BEE  0021               	movlb	1	; select bank1
 12318  0BEF  086C               	movf	_product^(0+128),w
 12319  0BF0  0086               	movwf	6
 12320  0BF1  3002               	movlw	2	; select bank4/5
 12321  0BF2  0087               	movwf	7
 12322  0BF3  3002               	movlw	2	; select bank4/5
 12323  0BF4  3F56               	moviw [22]fsr1
 12324  0BF5  0020               	movlb	0	; select bank0
 12325  0BF6  00A0               	movwf	setMemory_Data@data
 12326  0BF7  3004               	movlw	4
 12327  0BF8  319B  237C  318B   	fcall	_setMemory_Data
 12328                           
 12329                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12330  0BFB  0021               	movlb	1	; select bank1
 12331  0BFC  086C               	movf	_product^(0+128),w
 12332  0BFD  0086               	movwf	6
 12333  0BFE  3002               	movlw	2	; select bank4/5
 12334  0BFF  0087               	movwf	7
 12335  0C00  3002               	movlw	2	; select bank4/5
 12336  0C01  3F57               	moviw [23]fsr1
 12337  0C02  0020               	movlb	0	; select bank0
 12338  0C03  00A0               	movwf	setMemory_Data@data
 12339  0C04  3005               	movlw	5
 12340  0C05  319B  237C  318B   	fcall	_setMemory_Data
 12341                           
 12342                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12343  0C08  0021               	movlb	1	; select bank1
 12344  0C09  1EB9               	btfss	(_myMain^(0+128)+10),5
 12345  0C0A  2C15               	goto	l10095
 12346                           
 12347                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12348  0C0B  12B9               	bcf	(_myMain^(0+128)+10),5
 12349                           
 12350                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12351  0C0C  30AA               	movlw	170
 12352  0C0D  0020               	movlb	0	; select bank0
 12353  0C0E  00A4               	movwf	??_Flash_Memory_Modify
 12354  0C0F  0824               	movf	??_Flash_Memory_Modify,w
 12355  0C10  00A0               	movwf	setMemory_Data@data
 12356  0C11  301E               	movlw	30
 12357  0C12  319B  237C  318B   	fcall	_setMemory_Data
 12358  0C15                     l10095:	
 12359                           
 12360                           ;MCU_B1.c: 1068: }
 12361                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12362  0C15  0023               	movlb	3	; select bank3
 12363  0C16  1D62               	btfss	(_Memory^(0+384)+36),2
 12364  0C17  2C1C               	goto	l1269
 12365                           
 12366                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12367  0C18  1162               	bcf	(_Memory^(0+384)+36),2
 12368                           
 12369                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12370  0C19  0021               	movlb	1	; select bank1
 12371  0C1A  11AF               	bcf	_myMain^(0+128),3
 12372                           
 12373                           ;MCU_B1.c: 1073: myMain.First = 0;
 12374  0C1B  12AF               	bcf	_myMain^(0+128),5
 12375  0C1C                     l1269:	
 12376                           
 12377                           ;MCU_B1.c: 1075: }
 12378                           ;MCU_B1.c: 1076: GIE = 0;
 12379  0C1C  138B               	bcf	11,7	;volatile
 12380                           
 12381                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12382  0C1D  319B  2388  318B   	fcall	_Flash_Memory_Erasing
 12383                           
 12384                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12385  0C20  3190  20FB         	fcall	_Flash_Memory_Write
 12386                           
 12387                           ;MCU_B1.c: 1079: GIE = 1;
 12388  0C22  178B               	bsf	11,7	;volatile
 12389  0C23  0008               	return
 12390  0C24                     __end_of_Flash_Memory_Modify:	
 12391                           
 12392                           	psect	text79
 12393  1B88                     __ptext79:	
 12394 ;; *************** function _Flash_Memory_Erasing *****************
 12395 ;; Defined at:
 12396 ;;		line 1042 in file "../src/MCU_B1.c"
 12397 ;; Parameters:    Size  Location     Type
 12398 ;;		None
 12399 ;; Auto vars:     Size  Location     Type
 12400 ;;		None
 12401 ;; Return value:  Size  Location     Type
 12402 ;;		None               void
 12403 ;; Registers used:
 12404 ;;		wreg, status,2, status,0, pclath, cstack
 12405 ;; Tracked objects:
 12406 ;;		On entry : 0/0
 12407 ;;		On exit  : 0/0
 12408 ;;		Unchanged: 0/0
 12409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;Total ram usage:        0 bytes
 12415 ;; Hardware stack levels used:    1
 12416 ;; Hardware stack levels required when called:    6
 12417 ;; This function calls:
 12418 ;;		_Flash_Memory_Unlock
 12419 ;; This function is called by:
 12420 ;;		_Flash_Memory_Modify
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           
 12425                           ;psect for function _Flash_Memory_Erasing
 12426  1B88                     _Flash_Memory_Erasing:	
 12427                           
 12428                           ;MCU_B1.c: 1043: CFGS = 0;
 12429                           
 12430                           ;incstack = 0
 12431                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12432  1B88  0023               	movlb	3	; select bank3
 12433  1B89  1315               	bcf	21,6	;volatile
 12434                           
 12435                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12436  1B8A  3030               	movlw	48
 12437  1B8B  0092               	movwf	18	;volatile
 12438                           
 12439                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12440  1B8C  0191               	clrf	17	;volatile
 12441                           
 12442                           ;MCU_B1.c: 1046: FREE = 1;
 12443  1B8D  1615               	bsf	21,4	;volatile
 12444                           
 12445                           ;MCU_B1.c: 1047: WREN = 1;
 12446  1B8E  1515               	bsf	21,2	;volatile
 12447                           
 12448                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12449  1B8F  319A  22EA         	fcall	_Flash_Memory_Unlock
 12450                           
 12451                           ;MCU_B1.c: 1049: WREN = 0;
 12452  1B91  0023               	movlb	3	; select bank3
 12453  1B92  1115               	bcf	21,2	;volatile
 12454  1B93  0008               	return
 12455  1B94                     __end_of_Flash_Memory_Erasing:	
 12456                           
 12457                           	psect	text80
 12458  0621                     __ptext80:	
 12459 ;; *************** function _Flash_Memory_Initialization *****************
 12460 ;; Defined at:
 12461 ;;		line 932 in file "../src/MCU_B1.c"
 12462 ;; Parameters:    Size  Location     Type
 12463 ;;		None
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;  value           1    5[BANK0 ] unsigned char 
 12466 ;; Return value:  Size  Location     Type
 12467 ;;		None               void
 12468 ;; Registers used:
 12469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12470 ;; Tracked objects:
 12471 ;;		On entry : 0/0
 12472 ;;		On exit  : 0/0
 12473 ;;		Unchanged: 0/0
 12474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;Total ram usage:        2 bytes
 12480 ;; Hardware stack levels used:    1
 12481 ;; Hardware stack levels required when called:    7
 12482 ;; This function calls:
 12483 ;;		_Flash_Memory_Read
 12484 ;;		_Flash_Memory_Write
 12485 ;;		_setMemory_Data
 12486 ;; This function is called by:
 12487 ;;		_main
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           
 12492                           ;psect for function _Flash_Memory_Initialization
 12493  0621                     _Flash_Memory_Initialization:	
 12494                           
 12495                           ;MCU_B1.c: 933: char value = 0;
 12496                           
 12497                           ;incstack = 0
 12498                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12499  0621  0020               	movlb	0	; select bank0
 12500  0622  01A5               	clrf	Flash_Memory_Initialization@value
 12501                           
 12502                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12503  0623  301F               	movlw	31
 12504  0624  319E  2616  3186   	fcall	_Flash_Memory_Read
 12505  0627  3AAA               	xorlw	170
 12506  0628  1D03               	skipz
 12507  0629  2EA3               	goto	l10477
 12508                           
 12509                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12510  062A  3000               	movlw	0
 12511  062B  319E  2616  3186   	fcall	_Flash_Memory_Read
 12512  062E  0020               	movlb	0	; select bank0
 12513  062F  00A4               	movwf	??_Flash_Memory_Initialization
 12514  0630  0021               	movlb	1	; select bank1
 12515  0631  086C               	movf	_product^(0+128),w
 12516  0632  3E0C               	addlw	12
 12517  0633  0086               	movwf	6
 12518  0634  3002               	movlw	2	; select bank4/5
 12519  0635  0087               	movwf	7
 12520  0636  0020               	movlb	0	; select bank0
 12521  0637  0824               	movf	??_Flash_Memory_Initialization,w
 12522  0638  0081               	movwf	1
 12523                           
 12524                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12525  0639  3001               	movlw	1
 12526  063A  319E  2616  3186   	fcall	_Flash_Memory_Read
 12527  063D  0020               	movlb	0	; select bank0
 12528  063E  00A4               	movwf	??_Flash_Memory_Initialization
 12529  063F  0021               	movlb	1	; select bank1
 12530  0640  086C               	movf	_product^(0+128),w
 12531  0641  3E0D               	addlw	13
 12532  0642  0086               	movwf	6
 12533  0643  3002               	movlw	2	; select bank4/5
 12534  0644  0087               	movwf	7
 12535  0645  0020               	movlb	0	; select bank0
 12536  0646  0824               	movf	??_Flash_Memory_Initialization,w
 12537  0647  0081               	movwf	1
 12538                           
 12539                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12540  0648  3002               	movlw	2
 12541  0649  319E  2616  3186   	fcall	_Flash_Memory_Read
 12542  064C  0020               	movlb	0	; select bank0
 12543  064D  00A4               	movwf	??_Flash_Memory_Initialization
 12544  064E  0021               	movlb	1	; select bank1
 12545  064F  086C               	movf	_product^(0+128),w
 12546  0650  3E0E               	addlw	14
 12547  0651  0086               	movwf	6
 12548  0652  3002               	movlw	2	; select bank4/5
 12549  0653  0087               	movwf	7
 12550  0654  0020               	movlb	0	; select bank0
 12551  0655  0824               	movf	??_Flash_Memory_Initialization,w
 12552  0656  0081               	movwf	1
 12553                           
 12554                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12555  0657  3003               	movlw	3
 12556  0658  319E  2616  3186   	fcall	_Flash_Memory_Read
 12557  065B  0020               	movlb	0	; select bank0
 12558  065C  00A4               	movwf	??_Flash_Memory_Initialization
 12559  065D  0021               	movlb	1	; select bank1
 12560  065E  086C               	movf	_product^(0+128),w
 12561  065F  3E15               	addlw	21
 12562  0660  0086               	movwf	6
 12563  0661  3002               	movlw	2	; select bank4/5
 12564  0662  0087               	movwf	7
 12565  0663  0020               	movlb	0	; select bank0
 12566  0664  0824               	movf	??_Flash_Memory_Initialization,w
 12567  0665  0081               	movwf	1
 12568                           
 12569                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12570  0666  3004               	movlw	4
 12571  0667  319E  2616  3186   	fcall	_Flash_Memory_Read
 12572  066A  0020               	movlb	0	; select bank0
 12573  066B  00A4               	movwf	??_Flash_Memory_Initialization
 12574  066C  0021               	movlb	1	; select bank1
 12575  066D  086C               	movf	_product^(0+128),w
 12576  066E  3E16               	addlw	22
 12577  066F  0086               	movwf	6
 12578  0670  3002               	movlw	2	; select bank4/5
 12579  0671  0087               	movwf	7
 12580  0672  0020               	movlb	0	; select bank0
 12581  0673  0824               	movf	??_Flash_Memory_Initialization,w
 12582  0674  0081               	movwf	1
 12583                           
 12584                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12585  0675  3005               	movlw	5
 12586  0676  319E  2616  3186   	fcall	_Flash_Memory_Read
 12587  0679  0020               	movlb	0	; select bank0
 12588  067A  00A4               	movwf	??_Flash_Memory_Initialization
 12589  067B  0021               	movlb	1	; select bank1
 12590  067C  086C               	movf	_product^(0+128),w
 12591  067D  3E17               	addlw	23
 12592  067E  0086               	movwf	6
 12593  067F  3002               	movlw	2	; select bank4/5
 12594  0680  0087               	movwf	7
 12595  0681  0020               	movlb	0	; select bank0
 12596  0682  0824               	movf	??_Flash_Memory_Initialization,w
 12597  0683  0081               	movwf	1
 12598                           
 12599                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12600  0684  0021               	movlb	1	; select bank1
 12601  0685  086C               	movf	_product^(0+128),w
 12602  0686  3E0C               	addlw	12
 12603  0687  0086               	movwf	6
 12604  0688  3002               	movlw	2	; select bank4/5
 12605  0689  0087               	movwf	7
 12606  068A  0801               	movf	1,w
 12607  068B  3AFF               	xorlw	255
 12608  068C  1D03               	skipz
 12609  068D  0008               	return
 12610  068E  086C               	movf	_product^(0+128),w
 12611  068F  3E0D               	addlw	13
 12612  0690  0086               	movwf	6
 12613  0691  3002               	movlw	2	; select bank4/5
 12614  0692  0087               	movwf	7
 12615  0693  0801               	movf	1,w
 12616  0694  3AFF               	xorlw	255
 12617  0695  1D03               	skipz
 12618  0696  0008               	return
 12619  0697  086C               	movf	_product^(0+128),w
 12620  0698  3E0E               	addlw	14
 12621  0699  0086               	movwf	6
 12622  069A  3002               	movlw	2	; select bank4/5
 12623  069B  0087               	movwf	7
 12624  069C  0801               	movf	1,w
 12625  069D  3AFF               	xorlw	255
 12626  069E  1D03               	skipz
 12627  069F  0008               	return
 12628                           
 12629                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12630  06A0  15AF               	bsf	_myMain^(0+128),3
 12631                           
 12632                           ;MCU_B1.c: 951: myMain.First = 1;
 12633  06A1  16AF               	bsf	_myMain^(0+128),5
 12634                           
 12635                           ;MCU_B1.c: 952: }
 12636                           ;MCU_B1.c: 953: } else {
 12637  06A2  0008               	return
 12638  06A3                     l10477:	
 12639                           
 12640                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12641  06A3  30FF               	movlw	255
 12642  06A4  0020               	movlb	0	; select bank0
 12643  06A5  00A4               	movwf	??_Flash_Memory_Initialization
 12644  06A6  0824               	movf	??_Flash_Memory_Initialization,w
 12645  06A7  00A0               	movwf	setMemory_Data@data
 12646  06A8  3000               	movlw	0
 12647  06A9  319B  237C  3186   	fcall	_setMemory_Data
 12648                           
 12649                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12650  06AC  30FF               	movlw	255
 12651  06AD  0020               	movlb	0	; select bank0
 12652  06AE  00A4               	movwf	??_Flash_Memory_Initialization
 12653  06AF  0824               	movf	??_Flash_Memory_Initialization,w
 12654  06B0  00A0               	movwf	setMemory_Data@data
 12655  06B1  3001               	movlw	1
 12656  06B2  319B  237C  3186   	fcall	_setMemory_Data
 12657                           
 12658                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12659  06B5  30FF               	movlw	255
 12660  06B6  0020               	movlb	0	; select bank0
 12661  06B7  00A4               	movwf	??_Flash_Memory_Initialization
 12662  06B8  0824               	movf	??_Flash_Memory_Initialization,w
 12663  06B9  00A0               	movwf	setMemory_Data@data
 12664  06BA  3002               	movlw	2
 12665  06BB  319B  237C  3186   	fcall	_setMemory_Data
 12666                           
 12667                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12668  06BE  30FF               	movlw	255
 12669  06BF  0020               	movlb	0	; select bank0
 12670  06C0  00A4               	movwf	??_Flash_Memory_Initialization
 12671  06C1  0824               	movf	??_Flash_Memory_Initialization,w
 12672  06C2  00A0               	movwf	setMemory_Data@data
 12673  06C3  3003               	movlw	3
 12674  06C4  319B  237C  3186   	fcall	_setMemory_Data
 12675                           
 12676                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12677  06C7  30FF               	movlw	255
 12678  06C8  0020               	movlb	0	; select bank0
 12679  06C9  00A4               	movwf	??_Flash_Memory_Initialization
 12680  06CA  0824               	movf	??_Flash_Memory_Initialization,w
 12681  06CB  00A0               	movwf	setMemory_Data@data
 12682  06CC  3004               	movlw	4
 12683  06CD  319B  237C  3186   	fcall	_setMemory_Data
 12684                           
 12685                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12686  06D0  30FF               	movlw	255
 12687  06D1  0020               	movlb	0	; select bank0
 12688  06D2  00A4               	movwf	??_Flash_Memory_Initialization
 12689  06D3  0824               	movf	??_Flash_Memory_Initialization,w
 12690  06D4  00A0               	movwf	setMemory_Data@data
 12691  06D5  3005               	movlw	5
 12692  06D6  319B  237C  3186   	fcall	_setMemory_Data
 12693                           
 12694                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12695  06D9  30AA               	movlw	170
 12696  06DA  0020               	movlb	0	; select bank0
 12697  06DB  00A4               	movwf	??_Flash_Memory_Initialization
 12698  06DC  0824               	movf	??_Flash_Memory_Initialization,w
 12699  06DD  00A0               	movwf	setMemory_Data@data
 12700  06DE  301F               	movlw	31
 12701  06DF  319B  237C  3186   	fcall	_setMemory_Data
 12702                           
 12703                           ;MCU_B1.c: 966: GIE = 0;
 12704  06E2  138B               	bcf	11,7	;volatile
 12705                           
 12706                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12707  06E3  3190  20FB         	fcall	_Flash_Memory_Write
 12708                           
 12709                           ;MCU_B1.c: 968: GIE = 1;
 12710  06E5  178B               	bsf	11,7	;volatile
 12711                           
 12712                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12713  06E6  0021               	movlb	1	; select bank1
 12714  06E7  15AF               	bsf	_myMain^(0+128),3
 12715                           
 12716                           ;MCU_B1.c: 970: myMain.First = 1;
 12717  06E8  16AF               	bsf	_myMain^(0+128),5
 12718                           
 12719                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12720  06E9  1639               	bsf	(_myMain^(0+128)+10),4
 12721  06EA  0008               	return
 12722  06EB                     __end_of_Flash_Memory_Initialization:	
 12723                           
 12724                           	psect	text81
 12725  1B7C                     __ptext81:	
 12726 ;; *************** function _setMemory_Data *****************
 12727 ;; Defined at:
 12728 ;;		line 1094 in file "../src/MCU_B1.c"
 12729 ;; Parameters:    Size  Location     Type
 12730 ;;  address         1    wreg     unsigned char 
 12731 ;;  data            1    0[BANK0 ] unsigned char 
 12732 ;; Auto vars:     Size  Location     Type
 12733 ;;  address         1    2[BANK0 ] unsigned char 
 12734 ;; Return value:  Size  Location     Type
 12735 ;;		None               void
 12736 ;; Registers used:
 12737 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12738 ;; Tracked objects:
 12739 ;;		On entry : 0/0
 12740 ;;		On exit  : 0/0
 12741 ;;		Unchanged: 0/0
 12742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12743 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;Total ram usage:        3 bytes
 12748 ;; Hardware stack levels used:    1
 12749 ;; Hardware stack levels required when called:    5
 12750 ;; This function calls:
 12751 ;;		Nothing
 12752 ;; This function is called by:
 12753 ;;		_Flash_Memory_Initialization
 12754 ;;		_Flash_Memory_Modify
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758                           
 12759                           ;psect for function _setMemory_Data
 12760  1B7C                     _setMemory_Data:	
 12761                           
 12762                           ;incstack = 0
 12763                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12764                           ;setMemory_Data@address stored from wreg
 12765  1B7C  0020               	movlb	0	; select bank0
 12766  1B7D  00A2               	movwf	setMemory_Data@address
 12767                           
 12768                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12769  1B7E  0820               	movf	setMemory_Data@data,w
 12770  1B7F  00A1               	movwf	??_setMemory_Data
 12771  1B80  0822               	movf	setMemory_Data@address,w
 12772  1B81  3EBE               	addlw	_Memory& (0+255)
 12773  1B82  0086               	movwf	6
 12774  1B83  3001               	movlw	1	; select bank3/4
 12775  1B84  0087               	movwf	7
 12776  1B85  0821               	movf	??_setMemory_Data,w
 12777  1B86  0081               	movwf	1
 12778  1B87  0008               	return
 12779  1B88                     __end_of_setMemory_Data:	
 12780                           
 12781                           	psect	text82
 12782  10FB                     __ptext82:	
 12783 ;; *************** function _Flash_Memory_Write *****************
 12784 ;; Defined at:
 12785 ;;		line 1023 in file "../src/MCU_B1.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;		None
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;  i               1    1[BANK0 ] unsigned char 
 12790 ;; Return value:  Size  Location     Type
 12791 ;;		None               void
 12792 ;; Registers used:
 12793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12794 ;; Tracked objects:
 12795 ;;		On entry : 0/0
 12796 ;;		On exit  : 0/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;Total ram usage:        2 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; Hardware stack levels required when called:    6
 12806 ;; This function calls:
 12807 ;;		_Flash_Memory_Unlock
 12808 ;; This function is called by:
 12809 ;;		_Flash_Memory_Initialization
 12810 ;;		_Flash_Memory_Modify
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           
 12815                           ;psect for function _Flash_Memory_Write
 12816  10FB                     _Flash_Memory_Write:	
 12817                           
 12818                           ;MCU_B1.c: 1024: char i = 0;
 12819                           
 12820                           ;incstack = 0
 12821                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12822  10FB  0020               	movlb	0	; select bank0
 12823  10FC  01A1               	clrf	Flash_Memory_Write@i
 12824                           
 12825                           ;MCU_B1.c: 1025: CFGS = 0;
 12826  10FD  0023               	movlb	3	; select bank3
 12827  10FE  1315               	bcf	21,6	;volatile
 12828                           
 12829                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12830  10FF  3030               	movlw	48
 12831  1100  0092               	movwf	18	;volatile
 12832                           
 12833                           ;MCU_B1.c: 1027: PMDATH = 0;
 12834  1101  0194               	clrf	20	;volatile
 12835                           
 12836                           ;MCU_B1.c: 1028: FREE = 0;
 12837  1102  1215               	bcf	21,4	;volatile
 12838                           
 12839                           ;MCU_B1.c: 1029: LWLO = 1;
 12840  1103  1695               	bsf	21,5	;volatile
 12841                           
 12842                           ;MCU_B1.c: 1030: WREN = 1;
 12843  1104  1515               	bsf	21,2	;volatile
 12844                           
 12845                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12846  1105  0020               	movlb	0	; select bank0
 12847  1106  01A1               	clrf	Flash_Memory_Write@i
 12848  1107  3020               	movlw	32
 12849  1108  0221               	subwf	Flash_Memory_Write@i,w
 12850  1109  1803               	btfsc	3,0
 12851  110A  2923               	goto	l1259
 12852  110B                     l9651:	
 12853                           
 12854                           ;MCU_B1.c: 1032: PMADRL = i;
 12855  110B  0821               	movf	Flash_Memory_Write@i,w
 12856  110C  0023               	movlb	3	; select bank3
 12857  110D  0091               	movwf	17	;volatile
 12858                           
 12859                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12860  110E  0020               	movlb	0	; select bank0
 12861  110F  0821               	movf	Flash_Memory_Write@i,w
 12862  1110  3EBE               	addlw	_Memory& (0+255)
 12863  1111  0086               	movwf	6
 12864  1112  3001               	movlw	1	; select bank3/4
 12865  1113  0087               	movwf	7
 12866  1114  0801               	movf	1,w
 12867  1115  0023               	movlb	3	; select bank3
 12868  1116  0093               	movwf	19	;volatile
 12869                           
 12870                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12871  1117  319A  22EA  3190   	fcall	_Flash_Memory_Unlock
 12872  111A  3001               	movlw	1
 12873  111B  0020               	movlb	0	; select bank0
 12874  111C  00A0               	movwf	??_Flash_Memory_Write
 12875  111D  0820               	movf	??_Flash_Memory_Write,w
 12876  111E  07A1               	addwf	Flash_Memory_Write@i,f
 12877  111F  3020               	movlw	32
 12878  1120  0221               	subwf	Flash_Memory_Write@i,w
 12879  1121  1C03               	skipc
 12880  1122  290B               	goto	l9651
 12881  1123                     l1259:	
 12882                           
 12883                           ;MCU_B1.c: 1035: }
 12884                           ;MCU_B1.c: 1036: LWLO = 0;
 12885  1123  0023               	movlb	3	; select bank3
 12886  1124  1295               	bcf	21,5	;volatile
 12887                           
 12888                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12889  1125  319A  22EA         	fcall	_Flash_Memory_Unlock
 12890                           
 12891                           ;MCU_B1.c: 1038: WREN = 0;
 12892  1127  0023               	movlb	3	; select bank3
 12893  1128  1115               	bcf	21,2	;volatile
 12894  1129  0008               	return
 12895  112A                     __end_of_Flash_Memory_Write:	
 12896                           
 12897                           	psect	text83
 12898  1AEA                     __ptext83:	
 12899 ;; *************** function _Flash_Memory_Unlock *****************
 12900 ;; Defined at:
 12901 ;;		line 1002 in file "../src/MCU_B1.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;		None
 12904 ;; Auto vars:     Size  Location     Type
 12905 ;;		None
 12906 ;; Return value:  Size  Location     Type
 12907 ;;		None               void
 12908 ;; Registers used:
 12909 ;;		wreg
 12910 ;; Tracked objects:
 12911 ;;		On entry : 0/0
 12912 ;;		On exit  : 0/0
 12913 ;;		Unchanged: 0/0
 12914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;Total ram usage:        0 bytes
 12920 ;; Hardware stack levels used:    1
 12921 ;; Hardware stack levels required when called:    5
 12922 ;; This function calls:
 12923 ;;		Nothing
 12924 ;; This function is called by:
 12925 ;;		_Flash_Memory_Write
 12926 ;;		_Flash_Memory_Erasing
 12927 ;; This function uses a non-reentrant model
 12928 ;;
 12929                           
 12930                           
 12931                           ;psect for function _Flash_Memory_Unlock
 12932  1AEA                     _Flash_Memory_Unlock:	
 12933                           
 12934                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 12935                           
 12936                           ;incstack = 0
 12937                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12938  1AEA  3055               	movlw	85
 12939  1AEB  0023               	movlb	3	; select bank3
 12940  1AEC  0096               	movwf	22	;volatile
 12941                           
 12942                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 12943  1AED  30AA               	movlw	170
 12944  1AEE  0096               	movwf	22	;volatile
 12945                           
 12946                           ;MCU_B1.c: 1005: WR = 1;
 12947  1AEF  1495               	bsf	21,1	;volatile
 12948                           
 12949                           ;MCU_B1.c: 1006: __nop();
 12950  1AF0  0000               	nop
 12951                           
 12952                           ;MCU_B1.c: 1007: __nop();
 12953  1AF1  0000               	nop
 12954  1AF2  0008               	return
 12955  1AF3                     __end_of_Flash_Memory_Unlock:	
 12956                           
 12957                           	psect	text84
 12958  1E16                     __ptext84:	
 12959 ;; *************** function _Flash_Memory_Read *****************
 12960 ;; Defined at:
 12961 ;;		line 1011 in file "../src/MCU_B1.c"
 12962 ;; Parameters:    Size  Location     Type
 12963 ;;  address         1    wreg     unsigned char 
 12964 ;; Auto vars:     Size  Location     Type
 12965 ;;  address         1    2[BANK0 ] unsigned char 
 12966 ;;  ret             1    3[BANK0 ] unsigned char 
 12967 ;;  i               1    1[BANK0 ] unsigned char 
 12968 ;; Return value:  Size  Location     Type
 12969 ;;                  1    wreg      unsigned char 
 12970 ;; Registers used:
 12971 ;;		wreg, status,2
 12972 ;; Tracked objects:
 12973 ;;		On entry : 0/0
 12974 ;;		On exit  : 0/0
 12975 ;;		Unchanged: 0/0
 12976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12978 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;Total ram usage:        4 bytes
 12982 ;; Hardware stack levels used:    1
 12983 ;; Hardware stack levels required when called:    5
 12984 ;; This function calls:
 12985 ;;		Nothing
 12986 ;; This function is called by:
 12987 ;;		_Flash_Memory_Initialization
 12988 ;;		_Flash_Memory_Modify
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           
 12993                           ;psect for function _Flash_Memory_Read
 12994  1E16                     _Flash_Memory_Read:	
 12995                           
 12996                           ;incstack = 0
 12997                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12998                           ;Flash_Memory_Read@address stored from wreg
 12999  1E16  0020               	movlb	0	; select bank0
 13000  1E17  00A2               	movwf	Flash_Memory_Read@address
 13001                           
 13002                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13003  1E18  01A1               	clrf	Flash_Memory_Read@i
 13004  1E19  01A3               	clrf	Flash_Memory_Read@ret
 13005                           
 13006                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13007  1E1A  3030               	movlw	48
 13008  1E1B  0023               	movlb	3	; select bank3
 13009  1E1C  0092               	movwf	18	;volatile
 13010                           
 13011                           ;MCU_B1.c: 1014: PMADRL = address;
 13012  1E1D  0020               	movlb	0	; select bank0
 13013  1E1E  0822               	movf	Flash_Memory_Read@address,w
 13014  1E1F  0023               	movlb	3	; select bank3
 13015  1E20  0091               	movwf	17	;volatile
 13016                           
 13017                           ;MCU_B1.c: 1015: CFGS = 0;
 13018  1E21  1315               	bcf	21,6	;volatile
 13019                           
 13020                           ;MCU_B1.c: 1016: RD = 1;
 13021  1E22  1415               	bsf	21,0	;volatile
 13022                           
 13023                           ;MCU_B1.c: 1017: i = PMDATH;
 13024  1E23  0814               	movf	20,w	;volatile
 13025  1E24  0020               	movlb	0	; select bank0
 13026  1E25  00A0               	movwf	??_Flash_Memory_Read
 13027  1E26  0820               	movf	??_Flash_Memory_Read,w
 13028  1E27  00A1               	movwf	Flash_Memory_Read@i
 13029                           
 13030                           ;MCU_B1.c: 1018: ret = PMDATL;
 13031  1E28  0023               	movlb	3	; select bank3
 13032  1E29  0813               	movf	19,w	;volatile
 13033  1E2A  0020               	movlb	0	; select bank0
 13034  1E2B  00A0               	movwf	??_Flash_Memory_Read
 13035  1E2C  0820               	movf	??_Flash_Memory_Read,w
 13036  1E2D  00A3               	movwf	Flash_Memory_Read@ret
 13037                           
 13038                           ;MCU_B1.c: 1019: return ret;
 13039  1E2E  0823               	movf	Flash_Memory_Read@ret,w
 13040  1E2F  0008               	return
 13041  1E30                     __end_of_Flash_Memory_Read:	
 13042                           
 13043                           	psect	text85
 13044  054C                     __ptext85:	
 13045 ;; *************** function _Exception_Main *****************
 13046 ;; Defined at:
 13047 ;;		line 499 in file "../src/Main_B1.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;		None
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;  i               2   19[BANK0 ] int 
 13052 ;;  i               2   17[BANK0 ] int 
 13053 ;;  lights          1   21[BANK0 ] unsigned char 
 13054 ;;  error           1   16[BANK0 ] unsigned char 
 13055 ;;  count           1   15[BANK0 ] unsigned char 
 13056 ;;  status          1   14[BANK0 ] unsigned char 
 13057 ;; Return value:  Size  Location     Type
 13058 ;;		None               void
 13059 ;; Registers used:
 13060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13061 ;; Tracked objects:
 13062 ;;		On entry : 0/0
 13063 ;;		On exit  : 0/0
 13064 ;;		Unchanged: 0/0
 13065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;Total ram usage:        9 bytes
 13071 ;; Hardware stack levels used:    1
 13072 ;; Hardware stack levels required when called:    7
 13073 ;; This function calls:
 13074 ;;		_getDimmerLights_Line
 13075 ;;		_getDimmerLights_Status
 13076 ;;		_getMain_All_Error_Status
 13077 ;;		_getMain_All_LightsStatus
 13078 ;;		_setBuz
 13079 ;;		_setDimmerLights_SwOff
 13080 ;;		_setLED
 13081 ;; This function is called by:
 13082 ;;		_main
 13083 ;; This function uses a non-reentrant model
 13084 ;;
 13085                           
 13086                           
 13087                           ;psect for function _Exception_Main
 13088  054C                     _Exception_Main:	
 13089                           
 13090                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13091                           
 13092                           ;incstack = 0
 13093                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13094  054C  3000               	movlw	0
 13095  054D  3191  215B  3185   	fcall	_getMain_All_Error_Status
 13096  0550  0020               	movlb	0	; select bank0
 13097  0551  00AD               	movwf	??_Exception_Main
 13098  0552  082D               	movf	??_Exception_Main,w
 13099  0553  00B0               	movwf	Exception_Main@error
 13100                           
 13101                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13102  0554  01B5               	clrf	Exception_Main@lights
 13103  0555  01AF               	clrf	Exception_Main@count
 13104  0556  0AAF               	incf	Exception_Main@count,f
 13105                           
 13106                           ;Main_B1.c: 502: char status = 0;
 13107  0557  01AE               	clrf	Exception_Main@status
 13108                           
 13109                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13110  0558  0021               	movlb	1	; select bank1
 13111  0559  1DB9               	btfss	(_myMain^(0+128)+10),3
 13112  055A  2D6A               	goto	l10809
 13113                           
 13114                           ;Main_B1.c: 505: if (error == 0) {
 13115  055B  0020               	movlb	0	; select bank0
 13116  055C  08B0               	movf	Exception_Main@error,f
 13117  055D  1D03               	skipz
 13118  055E  0008               	return
 13119                           
 13120                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13121  055F  0021               	movlb	1	; select bank1
 13122  0560  11B9               	bcf	(_myMain^(0+128)+10),3
 13123                           
 13124                           ;Main_B1.c: 509: setLED(99, 10);
 13125  0561  300A               	movlw	10
 13126  0562  0020               	movlb	0	; select bank0
 13127  0563  00AD               	movwf	??_Exception_Main
 13128  0564  082D               	movf	??_Exception_Main,w
 13129  0565  00A2               	movwf	setLED@command
 13130  0566  3063               	movlw	99
 13131  0567  3192  229D         	fcall	_setLED
 13132                           
 13133                           ;Main_B1.c: 522: }
 13134                           ;Main_B1.c: 523: } else {
 13135  0569  0008               	return
 13136  056A                     l10809:	
 13137                           
 13138                           ;Main_B1.c: 524: if (error != 0) {
 13139  056A  0020               	movlb	0	; select bank0
 13140  056B  0830               	movf	Exception_Main@error,w
 13141  056C  1903               	btfsc	3,2
 13142  056D  0008               	return
 13143                           
 13144                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13145  056E  0021               	movlb	1	; select bank1
 13146  056F  15B9               	bsf	(_myMain^(0+128)+10),3
 13147                           
 13148                           ;Main_B1.c: 527: setLED(99, 11);
 13149  0570  300B               	movlw	11
 13150  0571  0020               	movlb	0	; select bank0
 13151  0572  00AD               	movwf	??_Exception_Main
 13152  0573  082D               	movf	??_Exception_Main,w
 13153  0574  00A2               	movwf	setLED@command
 13154  0575  3063               	movlw	99
 13155  0576  3192  229D  3185   	fcall	_setLED
 13156                           
 13157                           ;Main_B1.c: 538: switch (error) {
 13158  0579  2E16               	goto	l10857
 13159  057A                     l10815:	
 13160                           ;Main_B1.c: 539: case 2:
 13161                           
 13162                           
 13163                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13164  057A  319A  22F3  3185   	fcall	_getMain_All_LightsStatus
 13165  057D  3A01               	xorlw	1
 13166  057E  1D03               	skipz
 13167  057F  2D89               	goto	l10819
 13168                           
 13169                           ;Main_B1.c: 547: setBuz(10, 300);
 13170  0580  302C               	movlw	44
 13171  0581  0020               	movlb	0	; select bank0
 13172  0582  00A9               	movwf	setBuz@time
 13173  0583  3001               	movlw	1
 13174  0584  00AA               	movwf	setBuz@time+1
 13175  0585  300A               	movlw	10
 13176  0586  3194  24FB  3185   	fcall	_setBuz
 13177  0589                     l10819:	
 13178                           
 13179                           ;Main_B1.c: 548: }
 13180                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13181  0589  0020               	movlb	0	; select bank0
 13182  058A  01B1               	clrf	Exception_Main@i
 13183  058B  01B2               	clrf	Exception_Main@i+1
 13184  058C                     l10829:	
 13185  058C  0832               	movf	Exception_Main@i+1,w
 13186  058D  3A80               	xorlw	128
 13187  058E  00AD               	movwf	??_Exception_Main
 13188  058F  3080               	movlw	128
 13189  0590  022D               	subwf	??_Exception_Main,w
 13190  0591  1D03               	skipz
 13191  0592  2D95               	goto	u12685
 13192  0593  082F               	movf	Exception_Main@count,w
 13193  0594  0231               	subwf	Exception_Main@i,w
 13194  0595                     u12685:	
 13195  0595  1803               	btfsc	3,0
 13196  0596  2DB7               	goto	u12680
 13197                           
 13198                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13199  0597  0020               	movlb	0	; select bank0
 13200  0598  0831               	movf	Exception_Main@i,w
 13201  0599  3E01               	addlw	1
 13202  059A  319C  2402  3185   	fcall	_getDimmerLights_Status
 13203  059D  3A01               	xorlw	1
 13204  059E  1D03               	skipz
 13205  059F  2DB1               	goto	l10827
 13206                           
 13207                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13208  05A0  0021               	movlb	1	; select bank1
 13209  05A1  084E               	movf	_DimmerLights^(0+128),w
 13210  05A2  0086               	movwf	6
 13211  05A3  3001               	movlw	1	; select bank2/3
 13212  05A4  0087               	movwf	7
 13213  05A5  1401               	bsf	1,0
 13214                           
 13215                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13216  05A6  0A4E               	incf	_DimmerLights^(0+128),w
 13217  05A7  0086               	movwf	6
 13218  05A8  3001               	movlw	1	; select bank2/3
 13219  05A9  0087               	movwf	7
 13220  05AA  1001               	bcf	1,0
 13221                           
 13222                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13223  05AB  0020               	movlb	0	; select bank0
 13224  05AC  0831               	movf	Exception_Main@i,w
 13225  05AD  3E01               	addlw	1
 13226  05AE  3192  2264  3185   	fcall	_setDimmerLights_SwOff
 13227  05B1                     l10827:	
 13228  05B1  3001               	movlw	1
 13229  05B2  0020               	movlb	0	; select bank0
 13230  05B3  07B1               	addwf	Exception_Main@i,f
 13231  05B4  3000               	movlw	0
 13232  05B5  3DB2               	addwfc	Exception_Main@i+1,f
 13233  05B6  2D8C               	goto	l10829
 13234  05B7                     u12680:	
 13235  05B7  0020               	movlb	0	; select bank0
 13236  05B8  0008               	return
 13237  05B9                     l10831:	
 13238                           ;Main_B1.c: 561: case 3:
 13239                           
 13240                           ;Main_B1.c: 556: }
 13241                           ;Main_B1.c: 557: }
 13242                           ;Main_B1.c: 560: break;
 13243                           
 13244                           
 13245                           ;Main_B1.c: 563: setBuz(5, 300);
 13246  05B9  302C               	movlw	44
 13247  05BA  0020               	movlb	0	; select bank0
 13248  05BB  00A9               	movwf	setBuz@time
 13249  05BC  3001               	movlw	1
 13250  05BD  00AA               	movwf	setBuz@time+1
 13251  05BE  3005               	movlw	5
 13252  05BF  3194  24FB  3185   	fcall	_setBuz
 13253                           
 13254                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13255  05C2  319A  22FD  3185   	fcall	_getDimmerLights_Line
 13256  05C5  0020               	movlb	0	; select bank0
 13257  05C6  00AD               	movwf	??_Exception_Main
 13258  05C7  082D               	movf	??_Exception_Main,w
 13259  05C8  00B5               	movwf	Exception_Main@lights
 13260                           
 13261                           ;Main_B1.c: 565: if (lights == 0) {
 13262  05C9  08B5               	movf	Exception_Main@lights,f
 13263  05CA  1D03               	skipz
 13264  05CB  2DFB               	goto	l10849
 13265                           
 13266                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13267  05CC  01B3               	clrf	Exception_Main@i_3628
 13268  05CD  01B4               	clrf	Exception_Main@i_3628+1
 13269  05CE                     l10847:	
 13270  05CE  0834               	movf	Exception_Main@i_3628+1,w
 13271  05CF  3A80               	xorlw	128
 13272  05D0  00AD               	movwf	??_Exception_Main
 13273  05D1  3080               	movlw	128
 13274  05D2  022D               	subwf	??_Exception_Main,w
 13275  05D3  1D03               	skipz
 13276  05D4  2DD7               	goto	u12715
 13277  05D5  082F               	movf	Exception_Main@count,w
 13278  05D6  0233               	subwf	Exception_Main@i_3628,w
 13279  05D7                     u12715:	
 13280  05D7  1803               	btfsc	3,0
 13281  05D8  2DF9               	goto	u12710
 13282                           
 13283                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13284  05D9  0020               	movlb	0	; select bank0
 13285  05DA  0833               	movf	Exception_Main@i_3628,w
 13286  05DB  3E01               	addlw	1
 13287  05DC  319C  2402  3185   	fcall	_getDimmerLights_Status
 13288  05DF  3A01               	xorlw	1
 13289  05E0  1D03               	skipz
 13290  05E1  2DF3               	goto	l10845
 13291                           
 13292                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13293  05E2  0021               	movlb	1	; select bank1
 13294  05E3  084E               	movf	_DimmerLights^(0+128),w
 13295  05E4  0086               	movwf	6
 13296  05E5  3001               	movlw	1	; select bank2/3
 13297  05E6  0087               	movwf	7
 13298  05E7  1401               	bsf	1,0
 13299                           
 13300                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13301  05E8  0A4E               	incf	_DimmerLights^(0+128),w
 13302  05E9  0086               	movwf	6
 13303  05EA  3001               	movlw	1	; select bank2/3
 13304  05EB  0087               	movwf	7
 13305  05EC  1001               	bcf	1,0
 13306                           
 13307                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13308  05ED  0020               	movlb	0	; select bank0
 13309  05EE  0833               	movf	Exception_Main@i_3628,w
 13310  05EF  3E01               	addlw	1
 13311  05F0  3192  2264  3185   	fcall	_setDimmerLights_SwOff
 13312  05F3                     l10845:	
 13313  05F3  3001               	movlw	1
 13314  05F4  0020               	movlb	0	; select bank0
 13315  05F5  07B3               	addwf	Exception_Main@i_3628,f
 13316  05F6  3000               	movlw	0
 13317  05F7  3DB4               	addwfc	Exception_Main@i_3628+1,f
 13318  05F8  2DCE               	goto	l10847
 13319  05F9                     u12710:	
 13320  05F9  0020               	movlb	0	; select bank0
 13321  05FA  0008               	return
 13322  05FB                     l10849:	
 13323                           ;Main_B1.c: 573: }
 13324                           ;Main_B1.c: 574: }
 13325                           ;Main_B1.c: 575: } else {
 13326                           
 13327                           
 13328                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13329  05FB  0020               	movlb	0	; select bank0
 13330  05FC  0835               	movf	Exception_Main@lights,w
 13331  05FD  319C  2402  3185   	fcall	_getDimmerLights_Status
 13332  0600  3A01               	xorlw	1
 13333  0601  1903               	btfsc	3,2
 13334  0602  2E05               	goto	l10851
 13335  0603  0020               	movlb	0	; select bank0
 13336  0604  0008               	return
 13337  0605                     l10851:	
 13338                           
 13339                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13340  0605  0021               	movlb	1	; select bank1
 13341  0606  084E               	movf	_DimmerLights^(0+128),w
 13342  0607  0086               	movwf	6
 13343  0608  3001               	movlw	1	; select bank2/3
 13344  0609  0087               	movwf	7
 13345  060A  1401               	bsf	1,0
 13346                           
 13347                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13348  060B  0A4E               	incf	_DimmerLights^(0+128),w
 13349  060C  0086               	movwf	6
 13350  060D  3001               	movlw	1	; select bank2/3
 13351  060E  0087               	movwf	7
 13352  060F  1001               	bcf	1,0
 13353                           
 13354                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13355  0610  0020               	movlb	0	; select bank0
 13356  0611  0835               	movf	Exception_Main@lights,w
 13357  0612  3192  2264         	fcall	_setDimmerLights_SwOff
 13358  0614  0020               	movlb	0	; select bank0
 13359  0615  0008               	return
 13360  0616                     l10857:	
 13361                           ;Main_B1.c: 586: }
 13362                           
 13363                           ;Main_B1.c: 582: }
 13364                           ;Main_B1.c: 583: }
 13365                           ;Main_B1.c: 585: break;
 13366                           
 13367  0616  0020               	movlb	0	; select bank0
 13368  0617  0830               	movf	Exception_Main@error,w
 13369                           
 13370                           ; Switch size 1, requested type "space"
 13371                           ; Number of cases is 2, Range of values is 2 to 3
 13372                           ; switch strategies available:
 13373                           ; Name         Instructions Cycles
 13374                           ; simple_byte            7     4 (average)
 13375                           ; direct_byte           13     9 (fixed)
 13376                           ; jumptable            263     9 (fixed)
 13377                           ;	Chosen strategy is simple_byte
 13378  0618  3A02               	xorlw	2	; case 2
 13379  0619  1903               	skipnz
 13380  061A  2D7A               	goto	l10815
 13381  061B  3A01               	xorlw	1	; case 3
 13382  061C  1903               	skipnz
 13383  061D  2DB9               	goto	l10831
 13384  061E  2E20               	goto	l1501
 13385  061F  0008               	return
 13386  0620                     l1501:	
 13387  0620  0008               	return
 13388  0621                     __end_of_Exception_Main:	
 13389                           
 13390                           	psect	text86
 13391  1AFD                     __ptext86:	
 13392 ;; *************** function _getDimmerLights_Line *****************
 13393 ;; Defined at:
 13394 ;;		line 1051 in file "../src/Dimmer_B1.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;		None
 13397 ;; Auto vars:     Size  Location     Type
 13398 ;;  line            1    0[BANK0 ] unsigned char 
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  1    wreg      unsigned char 
 13401 ;; Registers used:
 13402 ;;		wreg, status,2
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;Total ram usage:        1 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:    5
 13415 ;; This function calls:
 13416 ;;		Nothing
 13417 ;; This function is called by:
 13418 ;;		_Exception_Main
 13419 ;; This function uses a non-reentrant model
 13420 ;;
 13421                           
 13422                           
 13423                           ;psect for function _getDimmerLights_Line
 13424  1AFD                     _getDimmerLights_Line:	
 13425                           
 13426                           ;Dimmer_B1.c: 1052: char line = 0;
 13427                           
 13428                           ;incstack = 0
 13429                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13430  1AFD  0020               	movlb	0	; select bank0
 13431  1AFE  01A0               	clrf	getDimmerLights_Line@line
 13432                           
 13433                           ;Dimmer_B1.c: 1054: if (DimmerLights1.Line == 1) {
 13434  1AFF  0022               	movlb	2	; select bank2
 13435  1B00  1CDF               	btfss	(_DimmerLights1^(0+256)+1),1
 13436  1B01  2B05               	goto	l9885
 13437                           
 13438                           ;Dimmer_B1.c: 1055: line = 1;
 13439  1B02  0020               	movlb	0	; select bank0
 13440  1B03  01A0               	clrf	getDimmerLights_Line@line
 13441  1B04  0AA0               	incf	getDimmerLights_Line@line,f
 13442  1B05                     l9885:	
 13443                           
 13444                           ;Dimmer_B1.c: 1056: }
 13445                           ;Dimmer_B1.c: 1068: return line;
 13446  1B05  0020               	movlb	0	; select bank0
 13447  1B06  0820               	movf	getDimmerLights_Line@line,w
 13448  1B07  0008               	return
 13449  1B08                     __end_of_getDimmerLights_Line:	
 13450                           
 13451                           	psect	text87
 13452  1E7F                     __ptext87:	
 13453 ;; *************** function _DimmerLights_Main *****************
 13454 ;; Defined at:
 13455 ;;		line 780 in file "../src/Dimmer_B1.c"
 13456 ;; Parameters:    Size  Location     Type
 13457 ;;		None
 13458 ;; Auto vars:     Size  Location     Type
 13459 ;;		None
 13460 ;; Return value:  Size  Location     Type
 13461 ;;		None               void
 13462 ;; Registers used:
 13463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13473 ;;Total ram usage:        0 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; Hardware stack levels required when called:   10
 13476 ;; This function calls:
 13477 ;;		_getLoad_OK
 13478 ;;		_getMain_All_Error_Status
 13479 ;;		_getMain_All_LightsStatus
 13480 ;;		_setDimmerLights_Main
 13481 ;; This function is called by:
 13482 ;;		_main
 13483 ;; This function uses a non-reentrant model
 13484 ;;
 13485                           
 13486                           
 13487                           ;psect for function _DimmerLights_Main
 13488  1E7F                     _DimmerLights_Main:	
 13489                           
 13490                           ;Dimmer_B1.c: 783: if (Dimmer.LoadGO == 1) {
 13491                           
 13492                           ;incstack = 0
 13493                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13494  1E7F  0022               	movlb	2	; select bank2
 13495  1E80  1CAC               	btfss	_Dimmer^(0+256),1
 13496  1E81  2E97               	goto	l10439
 13497                           
 13498                           ;Dimmer_B1.c: 784: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13499  1E82  319A  22C8  319E   	fcall	_getLoad_OK
 13500  1E85  3A01               	xorlw	1
 13501  1E86  1903               	skipnz
 13502  1E87  2E95               	goto	l759
 13503  1E88  3000               	movlw	0
 13504  1E89  3191  215B  319E   	fcall	_getMain_All_Error_Status
 13505  1E8C  3800               	iorlw	0
 13506  1E8D  1D03               	skipz
 13507  1E8E  2E95               	goto	l759
 13508  1E8F  319A  22F3  319E   	fcall	_getMain_All_LightsStatus
 13509  1E92  3800               	iorlw	0
 13510  1E93  1D03               	skipz
 13511  1E94  2E97               	goto	l10439
 13512  1E95                     l759:	
 13513                           
 13514                           ;Dimmer_B1.c: 785: Dimmer.LoadGO = 0;
 13515  1E95  0022               	movlb	2	; select bank2
 13516  1E96  10AC               	bcf	_Dimmer^(0+256),1
 13517  1E97                     l10439:	
 13518                           
 13519                           ;Dimmer_B1.c: 786: }
 13520                           ;Dimmer_B1.c: 787: }
 13521                           ;Dimmer_B1.c: 791: setDimmerLights_Main(1);
 13522  1E97  3001               	movlw	1
 13523  1E98  3188  2012         	fcall	_setDimmerLights_Main
 13524  1E9A  0008               	return
 13525  1E9B                     __end_of_DimmerLights_Main:	
 13526                           
 13527                           	psect	text88
 13528  0812                     __ptext88:	
 13529 ;; *************** function _setDimmerLights_Main *****************
 13530 ;; Defined at:
 13531 ;;		line 809 in file "../src/Dimmer_B1.c"
 13532 ;; Parameters:    Size  Location     Type
 13533 ;;  lights          1    wreg     unsigned char 
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;  lights          1    1[BANK1 ] unsigned char 
 13536 ;; Return value:  Size  Location     Type
 13537 ;;		None               void
 13538 ;; Registers used:
 13539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13540 ;; Tracked objects:
 13541 ;;		On entry : 0/0
 13542 ;;		On exit  : 0/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13546 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13549 ;;Total ram usage:        1 bytes
 13550 ;; Hardware stack levels used:    1
 13551 ;; Hardware stack levels required when called:    9
 13552 ;; This function calls:
 13553 ;;		_DimmerLights_SelectPointer
 13554 ;;		_getDimmerLights_Allow_Condition
 13555 ;;		_getMain_All_LightsStatus
 13556 ;;		_setDimmerLights_Dimming
 13557 ;;		_setDimmerLights_OnOff
 13558 ;; This function is called by:
 13559 ;;		_DimmerLights_Main
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563                           
 13564                           ;psect for function _setDimmerLights_Main
 13565  0812                     _setDimmerLights_Main:	
 13566                           
 13567                           ;incstack = 0
 13568                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13569                           ;setDimmerLights_Main@lights stored from wreg
 13570  0812  0021               	movlb	1	; select bank1
 13571  0813  00E5               	movwf	setDimmerLights_Main@lights^(0+128)
 13572                           
 13573                           ;Dimmer_B1.c: 811: DimmerLights_SelectPointer(lights);
 13574  0814  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13575  0815  319B  2340  3188   	fcall	_DimmerLights_SelectPointer
 13576                           
 13577                           ;Dimmer_B1.c: 812: if (DimmerLights->Trigger == 1) {
 13578  0818  0021               	movlb	1	; select bank1
 13579  0819  084E               	movf	_DimmerLights^(0+128),w
 13580  081A  0086               	movwf	6
 13581  081B  3001               	movlw	1	; select bank2/3
 13582  081C  0087               	movwf	7
 13583  081D  1C81               	btfss	1,1
 13584  081E  2841               	goto	l9863
 13585                           
 13586                           ;Dimmer_B1.c: 813: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13587  081F  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13588  0820  319D  2588  3188   	fcall	_getDimmerLights_Allow_Condition
 13589  0823  3800               	iorlw	0
 13590  0824  1D03               	skipz
 13591  0825  0008               	return
 13592                           
 13593                           ;Dimmer_B1.c: 814: DimmerLights->Trigger = 0;
 13594  0826  0021               	movlb	1	; select bank1
 13595  0827  084E               	movf	_DimmerLights^(0+128),w
 13596  0828  0086               	movwf	6
 13597  0829  3001               	movlw	1	; select bank2/3
 13598  082A  0087               	movwf	7
 13599  082B  1081               	bcf	1,1
 13600                           
 13601                           ;Dimmer_B1.c: 815: if (DimmerLights->Switch == 1) {
 13602  082C  084E               	movf	_DimmerLights^(0+128),w
 13603  082D  0086               	movwf	6
 13604  082E  3001               	movlw	1	; select bank2/3
 13605  082F  0087               	movwf	7
 13606  0830  1D01               	btfss	1,2
 13607  0831  283A               	goto	l9861
 13608                           
 13609                           ;Dimmer_B1.c: 816: setDimmerLights_OnOff(lights, 1);
 13610  0832  0020               	movlb	0	; select bank0
 13611  0833  01ED               	clrf	setDimmerLights_OnOff@command
 13612  0834  0AED               	incf	setDimmerLights_OnOff@command,f
 13613  0835  0021               	movlb	1	; select bank1
 13614  0836  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13615  0837  3186  26EB         	fcall	_setDimmerLights_OnOff
 13616                           
 13617                           ;Dimmer_B1.c: 817: } else {
 13618  0839  0008               	return
 13619  083A                     l9861:	
 13620                           
 13621                           ;Dimmer_B1.c: 818: setDimmerLights_OnOff(lights, 0);
 13622  083A  0020               	movlb	0	; select bank0
 13623  083B  01ED               	clrf	setDimmerLights_OnOff@command
 13624  083C  0021               	movlb	1	; select bank1
 13625  083D  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13626  083E  3186  26EB         	fcall	_setDimmerLights_OnOff
 13627                           
 13628                           ;Dimmer_B1.c: 819: }
 13629                           ;Dimmer_B1.c: 820: }
 13630                           ;Dimmer_B1.c: 821: } else {
 13631  0840  0008               	return
 13632  0841                     l9863:	
 13633                           
 13634                           ;Dimmer_B1.c: 822: if (getMain_All_LightsStatus() == 1) {
 13635  0841  319A  22F3  3188   	fcall	_getMain_All_LightsStatus
 13636  0844  3A01               	xorlw	1
 13637  0845  1D03               	skipz
 13638  0846  2870               	goto	l9875
 13639                           
 13640                           ;Dimmer_B1.c: 823: if (DimmerLights->DimmingTrigger == 1) {
 13641  0847  0021               	movlb	1	; select bank1
 13642  0848  084E               	movf	_DimmerLights^(0+128),w
 13643  0849  0086               	movwf	6
 13644  084A  3001               	movlw	1	; select bank2/3
 13645  084B  0087               	movwf	7
 13646  084C  1E01               	btfss	1,4
 13647  084D  0008               	return
 13648                           
 13649                           ;Dimmer_B1.c: 824: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13650  084E  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13651  084F  319D  2588  3188   	fcall	_getDimmerLights_Allow_Condition
 13652  0852  3800               	iorlw	0
 13653  0853  1D03               	skipz
 13654  0854  0008               	return
 13655                           
 13656                           ;Dimmer_B1.c: 825: DimmerLights->DimmingTrigger = 0;
 13657  0855  0021               	movlb	1	; select bank1
 13658  0856  084E               	movf	_DimmerLights^(0+128),w
 13659  0857  0086               	movwf	6
 13660  0858  3001               	movlw	1	; select bank2/3
 13661  0859  0087               	movwf	7
 13662  085A  1201               	bcf	1,4
 13663                           
 13664                           ;Dimmer_B1.c: 826: if (DimmerLights->DimmingSwitch == 1) {
 13665  085B  084E               	movf	_DimmerLights^(0+128),w
 13666  085C  0086               	movwf	6
 13667  085D  3001               	movlw	1	; select bank2/3
 13668  085E  0087               	movwf	7
 13669  085F  1E81               	btfss	1,5
 13670  0860  2869               	goto	l9873
 13671                           
 13672                           ;Dimmer_B1.c: 827: setDimmerLights_Dimming(lights, 1);
 13673  0861  0020               	movlb	0	; select bank0
 13674  0862  01EA               	clrf	setDimmerLights_Dimming@status
 13675  0863  0AEA               	incf	setDimmerLights_Dimming@status,f
 13676  0864  0021               	movlb	1	; select bank1
 13677  0865  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13678  0866  3194  24A5         	fcall	_setDimmerLights_Dimming
 13679                           
 13680                           ;Dimmer_B1.c: 828: } else {
 13681  0868  0008               	return
 13682  0869                     l9873:	
 13683                           
 13684                           ;Dimmer_B1.c: 829: setDimmerLights_Dimming(lights, 0);
 13685  0869  0020               	movlb	0	; select bank0
 13686  086A  01EA               	clrf	setDimmerLights_Dimming@status
 13687  086B  0021               	movlb	1	; select bank1
 13688  086C  0865               	movf	setDimmerLights_Main@lights^(0+128),w
 13689  086D  3194  24A5         	fcall	_setDimmerLights_Dimming
 13690                           
 13691                           ;Dimmer_B1.c: 830: }
 13692                           ;Dimmer_B1.c: 831: }
 13693                           ;Dimmer_B1.c: 832: }
 13694                           ;Dimmer_B1.c: 833: } else {
 13695  086F  0008               	return
 13696  0870                     l9875:	
 13697                           
 13698                           ;Dimmer_B1.c: 834: if (DimmerLights->DimmingTrigger == 1) {
 13699  0870  0021               	movlb	1	; select bank1
 13700  0871  084E               	movf	_DimmerLights^(0+128),w
 13701  0872  0086               	movwf	6
 13702  0873  3001               	movlw	1	; select bank2/3
 13703  0874  0087               	movwf	7
 13704  0875  1E01               	btfss	1,4
 13705  0876  0008               	return
 13706                           
 13707                           ;Dimmer_B1.c: 835: DimmerLights->DimmingTrigger = 0;
 13708  0877  084E               	movf	_DimmerLights^(0+128),w
 13709  0878  0086               	movwf	6
 13710  0879  3001               	movlw	1	; select bank2/3
 13711  087A  0087               	movwf	7
 13712  087B  1201               	bcf	1,4
 13713  087C  0008               	return
 13714  087D                     __end_of_setDimmerLights_Main:	
 13715                           
 13716                           	psect	text89
 13717  06EB                     __ptext89:	
 13718 ;; *************** function _setDimmerLights_OnOff *****************
 13719 ;; Defined at:
 13720 ;;		line 843 in file "../src/Dimmer_B1.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;  lights          1    wreg     unsigned char 
 13723 ;;  command         1   77[BANK0 ] unsigned char 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;  lights          1    0[BANK1 ] unsigned char 
 13726 ;; Return value:  Size  Location     Type
 13727 ;;		None               void
 13728 ;; Registers used:
 13729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13735 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13739 ;;Total ram usage:        4 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; Hardware stack levels required when called:    8
 13742 ;; This function calls:
 13743 ;;		_getCmd_Status
 13744 ;;		_getDelayOff_GO
 13745 ;;		_getDimmerLights_PercentToValue
 13746 ;;		_getMain_All_LightsStatus
 13747 ;;		_setCmd_Status
 13748 ;;		_setDelayOff_GO
 13749 ;;		_setDimmerIntr_ControlStatus
 13750 ;;		_setDimmerIntr_DimmingValue
 13751 ;;		_setDimmerIntr_Dimming_RF
 13752 ;;		_setDimmerIntr_MaxmumValue
 13753 ;;		_setDimmerLights_Line
 13754 ;;		_setLED
 13755 ;;		_setProductData
 13756 ;;		_setRF_DimmerLights
 13757 ;;		_setTxData
 13758 ;; This function is called by:
 13759 ;;		_setDimmerLights_Main
 13760 ;; This function uses a non-reentrant model
 13761 ;;
 13762                           
 13763                           
 13764                           ;psect for function _setDimmerLights_OnOff
 13765  06EB                     _setDimmerLights_OnOff:	
 13766                           
 13767                           ;incstack = 0
 13768                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13769                           ;setDimmerLights_OnOff@lights stored from wreg
 13770  06EB  0021               	movlb	1	; select bank1
 13771  06EC  00E4               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13772                           
 13773                           ;Dimmer_B1.c: 845: if (command == 1) {
 13774  06ED  0020               	movlb	0	; select bank0
 13775  06EE  086D               	movf	setDimmerLights_OnOff@command,w
 13776  06EF  3A01               	xorlw	1
 13777  06F0  1D03               	skipz
 13778  06F1  2F50               	goto	l9547
 13779                           
 13780                           ;Dimmer_B1.c: 846: setDimmerIntr_ControlStatus(lights, 1);
 13781  06F2  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13782  06F3  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13783  06F4  0021               	movlb	1	; select bank1
 13784  06F5  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13785  06F6  319D  25B4  3186   	fcall	_setDimmerIntr_ControlStatus
 13786                           
 13787                           ;Dimmer_B1.c: 849: Dimmer.Load_Status = 1;
 13788  06F9  0022               	movlb	2	; select bank2
 13789  06FA  152C               	bsf	_Dimmer^(0+256),2
 13790                           
 13791                           ;Dimmer_B1.c: 850: setDimmerLights_Line(lights);
 13792  06FB  0021               	movlb	1	; select bank1
 13793  06FC  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13794  06FD  319C  2413  3186   	fcall	_setDimmerLights_Line
 13795                           
 13796                           ;Dimmer_B1.c: 856: setLED(lights, 0);
 13797  0700  0020               	movlb	0	; select bank0
 13798  0701  01A2               	clrf	setLED@command
 13799  0702  0021               	movlb	1	; select bank1
 13800  0703  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13801  0704  3192  229D  3186   	fcall	_setLED
 13802                           
 13803                           ;Dimmer_B1.c: 857: ;;
 13804                           ;Dimmer_B1.c: 877: if (DimmerLights->DimmingRun == 1) {
 13805  0707  0021               	movlb	1	; select bank1
 13806  0708  0A4E               	incf	_DimmerLights^(0+128),w
 13807  0709  0086               	movwf	6
 13808  070A  3001               	movlw	1	; select bank2/3
 13809  070B  0087               	movwf	7
 13810  070C  1F01               	btfss	1,6
 13811  070D  2F32               	goto	l9539
 13812                           
 13813                           ;Dimmer_B1.c: 878: DimmerLights->DimmingRun = 0;
 13814  070E  0A4E               	incf	_DimmerLights^(0+128),w
 13815  070F  0086               	movwf	6
 13816  0710  3001               	movlw	1	; select bank2/3
 13817  0711  0087               	movwf	7
 13818  0712  1301               	bcf	1,6
 13819                           
 13820                           ;Dimmer_B1.c: 879: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13821  0713  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13822  0714  3E14               	addlw	20
 13823  0715  076C               	addwf	_product^(0+128),w
 13824  0716  0020               	movlb	0	; select bank0
 13825  0717  00EE               	movwf	??_setDimmerLights_OnOff
 13826  0718  086E               	movf	??_setDimmerLights_OnOff,w
 13827  0719  0086               	movwf	6
 13828  071A  3002               	movlw	2	; select bank4/5
 13829  071B  0087               	movwf	7
 13830  071C  0801               	movf	1,w
 13831  071D  3196  26D1  3186   	fcall	_getDimmerLights_PercentToValue
 13832  0720  0020               	movlb	0	; select bank0
 13833  0721  00EF               	movwf	??_setDimmerLights_OnOff+1
 13834  0722  086F               	movf	??_setDimmerLights_OnOff+1,w
 13835  0723  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13836  0724  0021               	movlb	1	; select bank1
 13837  0725  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13838  0726  319B  2358  3186   	fcall	_setDimmerIntr_MaxmumValue
 13839                           
 13840                           ;Dimmer_B1.c: 880: setDimmerIntr_Dimming_RF(lights, 1);
 13841  0729  0020               	movlb	0	; select bank0
 13842  072A  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13843  072B  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13844  072C  0021               	movlb	1	; select bank1
 13845  072D  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13846  072E  319D  25CC  3186   	fcall	_setDimmerIntr_Dimming_RF
 13847                           
 13848                           ;Dimmer_B1.c: 881: } else {
 13849  0731  2F49               	goto	l9541
 13850  0732                     l9539:	
 13851                           
 13852                           ;Dimmer_B1.c: 882: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13853  0732  0021               	movlb	1	; select bank1
 13854  0733  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13855  0734  3E14               	addlw	20
 13856  0735  076C               	addwf	_product^(0+128),w
 13857  0736  0020               	movlb	0	; select bank0
 13858  0737  00EE               	movwf	??_setDimmerLights_OnOff
 13859  0738  086E               	movf	??_setDimmerLights_OnOff,w
 13860  0739  0086               	movwf	6
 13861  073A  3002               	movlw	2	; select bank4/5
 13862  073B  0087               	movwf	7
 13863  073C  0801               	movf	1,w
 13864  073D  3196  26D1  3186   	fcall	_getDimmerLights_PercentToValue
 13865  0740  0020               	movlb	0	; select bank0
 13866  0741  00EF               	movwf	??_setDimmerLights_OnOff+1
 13867  0742  086F               	movf	??_setDimmerLights_OnOff+1,w
 13868  0743  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13869  0744  0021               	movlb	1	; select bank1
 13870  0745  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13871  0746  319B  2364  3186   	fcall	_setDimmerIntr_DimmingValue
 13872  0749                     l9541:	
 13873                           
 13874                           ;Dimmer_B1.c: 885: }
 13875                           ;Dimmer_B1.c: 887: if (lights == 1) {
 13876  0749  0021               	movlb	1	; select bank1
 13877  074A  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13878  074B  3A01               	xorlw	1
 13879  074C  1D03               	skipz
 13880  074D  2F7F               	goto	l9561
 13881                           
 13882                           ;Dimmer_B1.c: 889: DimmerIntr1.TuneGO = 1;
 13883  074E  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 13884                           
 13885                           ;Dimmer_B1.c: 895: }
 13886                           ;Dimmer_B1.c: 901: } else if (command == 0) {
 13887                           
 13888                           ;Dimmer_B1.c: 891: } else if (lights == 2) {
 13889  074F  2F7F               	goto	l9561
 13890  0750                     l9547:	
 13891  0750  0020               	movlb	0	; select bank0
 13892  0751  08ED               	movf	setDimmerLights_OnOff@command,f
 13893  0752  1D03               	skipz
 13894  0753  2F7F               	goto	l9561
 13895                           
 13896                           ;Dimmer_B1.c: 902: setDimmerIntr_ControlStatus(lights, 0);
 13897  0754  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13898  0755  0021               	movlb	1	; select bank1
 13899  0756  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13900  0757  319D  25B4  3186   	fcall	_setDimmerIntr_ControlStatus
 13901                           
 13902                           ;Dimmer_B1.c: 904: Dimmer.Load_Status = 0;
 13903  075A  0022               	movlb	2	; select bank2
 13904  075B  112C               	bcf	_Dimmer^(0+256),2
 13905                           
 13906                           ;Dimmer_B1.c: 905: setDimmerLights_Line(0);
 13907  075C  3000               	movlw	0
 13908  075D  319C  2413  3186   	fcall	_setDimmerLights_Line
 13909                           
 13910                           ;Dimmer_B1.c: 909: if (getDelayOff_GO(lights) == 1) {
 13911  0760  0021               	movlb	1	; select bank1
 13912  0761  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13913  0762  319C  2424  3186   	fcall	_getDelayOff_GO
 13914  0765  3A01               	xorlw	1
 13915  0766  1D03               	skipz
 13916  0767  2F70               	goto	l786
 13917                           
 13918                           ;Dimmer_B1.c: 910: setDelayOff_GO(lights, 0, 0);
 13919  0768  0020               	movlb	0	; select bank0
 13920  0769  01E5               	clrf	setDelayOff_GO@command
 13921  076A  01E6               	clrf	setDelayOff_GO@value
 13922  076B  0021               	movlb	1	; select bank1
 13923  076C  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13924  076D  318C  24AB  3186   	fcall	_setDelayOff_GO
 13925  0770                     l786:	
 13926                           
 13927                           ;Dimmer_B1.c: 911: }
 13928                           ;Dimmer_B1.c: 916: setLED(lights, 1);
 13929  0770  0020               	movlb	0	; select bank0
 13930  0771  01A2               	clrf	setLED@command
 13931  0772  0AA2               	incf	setLED@command,f
 13932  0773  0021               	movlb	1	; select bank1
 13933  0774  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13934  0775  3192  229D  3186   	fcall	_setLED
 13935                           
 13936                           ;Dimmer_B1.c: 917: ;;
 13937                           ;Dimmer_B1.c: 921: if (lights == 1) {
 13938  0778  0021               	movlb	1	; select bank1
 13939  0779  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13940  077A  3A01               	xorlw	1
 13941  077B  1D03               	skipz
 13942  077C  2F7F               	goto	l9561
 13943                           
 13944                           ;Dimmer_B1.c: 922: RB1 = 0;
 13945  077D  0020               	movlb	0	; select bank0
 13946  077E  108D               	bcf	13,1	;volatile
 13947  077F                     l9561:	
 13948                           
 13949                           ;Dimmer_B1.c: 924: }
 13950                           ;Dimmer_B1.c: 935: }
 13951                           ;Dimmer_B1.c: 938: setRF_DimmerLights(lights, command);
 13952  077F  0020               	movlb	0	; select bank0
 13953  0780  086D               	movf	setDimmerLights_OnOff@command,w
 13954  0781  00EE               	movwf	??_setDimmerLights_OnOff
 13955  0782  086E               	movf	??_setDimmerLights_OnOff,w
 13956  0783  00E5               	movwf	setRF_DimmerLights@on
 13957  0784  0021               	movlb	1	; select bank1
 13958  0785  0864               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13959  0786  3197  279B  3186   	fcall	_setRF_DimmerLights
 13960                           
 13961                           ;Dimmer_B1.c: 940: if (getCmd_Status(1) == 1) {
 13962  0789  3001               	movlw	1
 13963  078A  319C  2479  3186   	fcall	_getCmd_Status
 13964  078D  3A01               	xorlw	1
 13965  078E  1D03               	skipz
 13966  078F  2FAB               	goto	l9575
 13967                           
 13968                           ;Dimmer_B1.c: 941: if (getMain_All_LightsStatus() == 0) {
 13969  0790  319A  22F3  3186   	fcall	_getMain_All_LightsStatus
 13970  0793  3800               	iorlw	0
 13971  0794  1D03               	skipz
 13972  0795  0008               	return
 13973                           
 13974                           ;Dimmer_B1.c: 942: setCmd_Status(1, 0);
 13975  0796  0020               	movlb	0	; select bank0
 13976  0797  01A0               	clrf	setCmd_Status@cmd
 13977  0798  3001               	movlw	1
 13978  0799  319D  25E4  3186   	fcall	_setCmd_Status
 13979                           
 13980                           ;Dimmer_B1.c: 943: setProductData(11, 0);
 13981  079C  0020               	movlb	0	; select bank0
 13982  079D  01E2               	clrf	setProductData@value
 13983  079E  300B               	movlw	11
 13984  079F  319B  234C  3186   	fcall	_setProductData
 13985                           
 13986                           ;Dimmer_B1.c: 944: setProductData(17, 0);
 13987  07A2  0020               	movlb	0	; select bank0
 13988  07A3  01E2               	clrf	setProductData@value
 13989  07A4  3011               	movlw	17
 13990  07A5  319B  234C  3186   	fcall	_setProductData
 13991                           
 13992                           ;Dimmer_B1.c: 945: setTxData();
 13993  07A8  318F  2745         	fcall	_setTxData
 13994                           
 13995                           ;Dimmer_B1.c: 946: }
 13996                           ;Dimmer_B1.c: 947: } else {
 13997  07AA  0008               	return
 13998  07AB                     l9575:	
 13999                           
 14000                           ;Dimmer_B1.c: 948: setTxData();
 14001  07AB  318F  2745         	fcall	_setTxData
 14002  07AD  0008               	return
 14003  07AE                     __end_of_setDimmerLights_OnOff:	
 14004                           
 14005                           	psect	text90
 14006  129D                     __ptext90:	
 14007 ;; *************** function _setLED *****************
 14008 ;; Defined at:
 14009 ;;		line 81 in file "../src/LED_B1.c"
 14010 ;; Parameters:    Size  Location     Type
 14011 ;;  led             1    wreg     unsigned char 
 14012 ;;  command         1    2[BANK0 ] unsigned char 
 14013 ;; Auto vars:     Size  Location     Type
 14014 ;;  led             1    3[BANK0 ] unsigned char 
 14015 ;; Return value:  Size  Location     Type
 14016 ;;		None               void
 14017 ;; Registers used:
 14018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14019 ;; Tracked objects:
 14020 ;;		On entry : 0/0
 14021 ;;		On exit  : 0/0
 14022 ;;		Unchanged: 0/0
 14023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14024 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14028 ;;Total ram usage:        2 bytes
 14029 ;; Hardware stack levels used:    1
 14030 ;; Hardware stack levels required when called:    6
 14031 ;; This function calls:
 14032 ;;		_LedPointSelect
 14033 ;; This function is called by:
 14034 ;;		_setDimmerLights_OnOff
 14035 ;;		_setLED_Initialization
 14036 ;;		_Exception_Main
 14037 ;;		_setSw_Initialization
 14038 ;; This function uses a non-reentrant model
 14039 ;;
 14040                           
 14041                           
 14042                           ;psect for function _setLED
 14043  129D                     _setLED:	
 14044                           
 14045                           ;incstack = 0
 14046                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14047                           ;setLED@led stored from wreg
 14048  129D  0020               	movlb	0	; select bank0
 14049  129E  00A3               	movwf	setLED@led
 14050                           
 14051                           ;LED_B1.c: 82: LedPointSelect(led);
 14052  129F  0823               	movf	setLED@led,w
 14053  12A0  319B  2370  3192   	fcall	_LedPointSelect
 14054                           
 14055                           ;LED_B1.c: 83: if (command == 0) {
 14056  12A3  0020               	movlb	0	; select bank0
 14057  12A4  08A2               	movf	setLED@command,f
 14058  12A5  1D03               	skipz
 14059  12A6  2AAC               	goto	l9283
 14060                           
 14061                           ;LED_B1.c: 112: if (led == 99) {
 14062  12A7  0823               	movf	setLED@led,w
 14063  12A8  3A63               	xorlw	99
 14064  12A9  1D03               	skipz
 14065  12AA  2AAC               	goto	l9283
 14066                           
 14067                           ;LED_B1.c: 116: RB5 = 1;
 14068  12AB  168D               	bsf	13,5	;volatile
 14069  12AC                     l9283:	
 14070                           
 14071                           ;LED_B1.c: 118: }
 14072                           ;LED_B1.c: 120: }
 14073                           ;LED_B1.c: 121: if (command == 1) {
 14074  12AC  0822               	movf	setLED@command,w
 14075  12AD  3A01               	xorlw	1
 14076  12AE  1D03               	skipz
 14077  12AF  2AB5               	goto	l9289
 14078                           
 14079                           ;LED_B1.c: 150: if (led == 99) {
 14080  12B0  0823               	movf	setLED@led,w
 14081  12B1  3A63               	xorlw	99
 14082  12B2  1D03               	skipz
 14083  12B3  2AB5               	goto	l9289
 14084                           
 14085                           ;LED_B1.c: 154: RB5 = 0;
 14086  12B4  128D               	bcf	13,5	;volatile
 14087  12B5                     l9289:	
 14088                           
 14089                           ;LED_B1.c: 156: }
 14090                           ;LED_B1.c: 158: }
 14091                           ;LED_B1.c: 159: if (command == 10) {
 14092  12B5  0822               	movf	setLED@command,w
 14093  12B6  3A0A               	xorlw	10
 14094  12B7  1D03               	skipz
 14095  12B8  2ACB               	goto	l9297
 14096                           
 14097                           ;LED_B1.c: 160: LED->GO = 0;
 14098  12B9  0021               	movlb	1	; select bank1
 14099  12BA  084F               	movf	_LED^(0+128),w
 14100  12BB  0086               	movwf	6
 14101  12BC  3001               	movlw	1	; select bank2/3
 14102  12BD  0087               	movwf	7
 14103  12BE  1081               	bcf	1,1
 14104                           
 14105                           ;LED_B1.c: 161: LED->Time = 0;
 14106  12BF  0A4F               	incf	_LED^(0+128),w
 14107  12C0  0086               	movwf	6
 14108  12C1  3001               	movlw	1	; select bank2/3
 14109  12C2  0087               	movwf	7
 14110  12C3  3000               	movlw	0
 14111  12C4  3FC0               	movwi [0]fsr1
 14112  12C5  3FC1               	movwi [1]fsr1
 14113                           
 14114                           ;LED_B1.c: 190: if (led == 99) {
 14115  12C6  0020               	movlb	0	; select bank0
 14116  12C7  0823               	movf	setLED@led,w
 14117  12C8  3A63               	xorlw	99
 14118  12C9  1903               	btfsc	3,2
 14119                           
 14120                           ;LED_B1.c: 194: RB5 = 1;
 14121  12CA  168D               	bsf	13,5	;volatile
 14122  12CB                     l9297:	
 14123                           
 14124                           ;LED_B1.c: 196: }
 14125                           ;LED_B1.c: 198: }
 14126                           ;LED_B1.c: 199: if (command == 11) {
 14127  12CB  0822               	movf	setLED@command,w
 14128  12CC  3A0B               	xorlw	11
 14129  12CD  1D03               	skipz
 14130  12CE  0008               	return
 14131                           
 14132                           ;LED_B1.c: 200: LED->GO = 1;
 14133  12CF  0021               	movlb	1	; select bank1
 14134  12D0  084F               	movf	_LED^(0+128),w
 14135  12D1  0086               	movwf	6
 14136  12D2  3001               	movlw	1	; select bank2/3
 14137  12D3  0087               	movwf	7
 14138  12D4  1481               	bsf	1,1
 14139  12D5  0008               	return
 14140  12D6                     __end_of_setLED:	
 14141                           
 14142                           	psect	text91
 14143  1B70                     __ptext91:	
 14144 ;; *************** function _LedPointSelect *****************
 14145 ;; Defined at:
 14146 ;;		line 7 in file "../src/LED_B1.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;  led             1    wreg     unsigned char 
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  led             1    1[BANK0 ] unsigned char 
 14151 ;; Return value:  Size  Location     Type
 14152 ;;		None               void
 14153 ;; Registers used:
 14154 ;;		wreg
 14155 ;; Tracked objects:
 14156 ;;		On entry : 0/0
 14157 ;;		On exit  : 0/0
 14158 ;;		Unchanged: 0/0
 14159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14163 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14164 ;;Total ram usage:        2 bytes
 14165 ;; Hardware stack levels used:    1
 14166 ;; Hardware stack levels required when called:    5
 14167 ;; This function calls:
 14168 ;;		Nothing
 14169 ;; This function is called by:
 14170 ;;		_setLED_Initialization
 14171 ;;		_setLED
 14172 ;;		_setLED_Main
 14173 ;; This function uses a non-reentrant model
 14174 ;;
 14175                           
 14176                           
 14177                           ;psect for function _LedPointSelect
 14178  1B70                     _LedPointSelect:	
 14179                           
 14180                           ;incstack = 0
 14181                           ; Regs used in _LedPointSelect: [wreg]
 14182                           ;LedPointSelect@led stored from wreg
 14183  1B70  0020               	movlb	0	; select bank0
 14184  1B71  00A1               	movwf	LedPointSelect@led
 14185                           
 14186                           ;LED_B1.c: 24: if (led == 99) {
 14187  1B72  0821               	movf	LedPointSelect@led,w
 14188  1B73  3A63               	xorlw	99
 14189  1B74  1D03               	skipz
 14190  1B75  0008               	return
 14191                           
 14192                           ;LED_B1.c: 25: LED = &VarErrLED;
 14193  1B76  306B               	movlw	_VarErrLED& (0+255)
 14194  1B77  00A0               	movwf	??_LedPointSelect
 14195  1B78  0820               	movf	??_LedPointSelect,w
 14196  1B79  0021               	movlb	1	; select bank1
 14197  1B7A  00CF               	movwf	_LED^(0+128)
 14198  1B7B  0008               	return
 14199  1B7C                     __end_of_LedPointSelect:	
 14200                           
 14201                           	psect	text92
 14202  1DCC                     __ptext92:	
 14203 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14204 ;; Defined at:
 14205 ;;		line 227 in file "../src/Dimmer_B1.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;  lights          1    wreg     unsigned char 
 14208 ;;  command         1    0[BANK0 ] unsigned char 
 14209 ;; Auto vars:     Size  Location     Type
 14210 ;;  lights          1    2[BANK0 ] unsigned char 
 14211 ;; Return value:  Size  Location     Type
 14212 ;;		None               void
 14213 ;; Registers used:
 14214 ;;		wreg, status,2, status,0
 14215 ;; Tracked objects:
 14216 ;;		On entry : 0/0
 14217 ;;		On exit  : 0/0
 14218 ;;		Unchanged: 0/0
 14219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14220 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14223 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14224 ;;Total ram usage:        3 bytes
 14225 ;; Hardware stack levels used:    1
 14226 ;; Hardware stack levels required when called:    5
 14227 ;; This function calls:
 14228 ;;		Nothing
 14229 ;; This function is called by:
 14230 ;;		_setDimmerLights_OnOff
 14231 ;;		_setRFSW_AdjControl
 14232 ;; This function uses a non-reentrant model
 14233 ;;
 14234                           
 14235                           
 14236                           ;psect for function _setDimmerIntr_Dimming_RF
 14237  1DCC                     _setDimmerIntr_Dimming_RF:	
 14238                           
 14239                           ;incstack = 0
 14240                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14241                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14242  1DCC  0020               	movlb	0	; select bank0
 14243  1DCD  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14244                           
 14245                           ;Dimmer_B1.c: 229: if (lights == 1) {
 14246  1DCE  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14247  1DCF  3A01               	xorlw	1
 14248  1DD0  1D03               	skipz
 14249  1DD1  0008               	return
 14250                           
 14251                           ;Dimmer_B1.c: 230: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14252  1DD2  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14253  1DD3  3A01               	xorlw	1
 14254  1DD4  3000               	movlw	0
 14255  1DD5  1903               	skipnz
 14256  1DD6  3001               	movlw	1
 14257  1DD7  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14258  1DD8  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14259  1DD9  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14260  1DDA  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14261  1DDB  0021               	movlb	1	; select bank1
 14262  1DDC  083C               	movf	_DimmerIntr1^(0+128),w
 14263  1DDD  0020               	movlb	0	; select bank0
 14264  1DDE  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14265  1DDF  39BF               	andlw	-65
 14266  1DE0  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14267  1DE1  0021               	movlb	1	; select bank1
 14268  1DE2  00BC               	movwf	_DimmerIntr1^(0+128)
 14269  1DE3  0008               	return
 14270  1DE4                     __end_of_setDimmerIntr_Dimming_RF:	
 14271                           
 14272                           	psect	text93
 14273  1B64                     __ptext93:	
 14274 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14275 ;; Defined at:
 14276 ;;		line 92 in file "../src/Dimmer_B1.c"
 14277 ;; Parameters:    Size  Location     Type
 14278 ;;  lights          1    wreg     unsigned char 
 14279 ;;  value           1   66[BANK0 ] unsigned char 
 14280 ;; Auto vars:     Size  Location     Type
 14281 ;;  lights          1   68[BANK0 ] unsigned char 
 14282 ;; Return value:  Size  Location     Type
 14283 ;;		None               void
 14284 ;; Registers used:
 14285 ;;		wreg
 14286 ;; Tracked objects:
 14287 ;;		On entry : 0/0
 14288 ;;		On exit  : 0/0
 14289 ;;		Unchanged: 0/0
 14290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14291 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14294 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14295 ;;Total ram usage:        3 bytes
 14296 ;; Hardware stack levels used:    1
 14297 ;; Hardware stack levels required when called:    5
 14298 ;; This function calls:
 14299 ;;		Nothing
 14300 ;; This function is called by:
 14301 ;;		_setDimmerLights_OnOff
 14302 ;; This function uses a non-reentrant model
 14303 ;;
 14304                           
 14305                           
 14306                           ;psect for function _setDimmerIntr_DimmingValue
 14307  1B64                     _setDimmerIntr_DimmingValue:	
 14308                           
 14309                           ;incstack = 0
 14310                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14311                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14312  1B64  0020               	movlb	0	; select bank0
 14313  1B65  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14314                           
 14315                           ;Dimmer_B1.c: 94: if (lights == 1) {
 14316  1B66  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14317  1B67  3A01               	xorlw	1
 14318  1B68  1D03               	skipz
 14319  1B69  0008               	return
 14320                           
 14321                           ;Dimmer_B1.c: 95: DimmerIntr1.DimmingValue = value;
 14322  1B6A  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14323  1B6B  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14324  1B6C  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14325  1B6D  0021               	movlb	1	; select bank1
 14326  1B6E  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14327  1B6F  0008               	return
 14328  1B70                     __end_of_setDimmerIntr_DimmingValue:	
 14329                           
 14330                           	psect	text94
 14331  1DB4                     __ptext94:	
 14332 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14333 ;; Defined at:
 14334 ;;		line 74 in file "../src/Dimmer_B1.c"
 14335 ;; Parameters:    Size  Location     Type
 14336 ;;  lights          1    wreg     unsigned char 
 14337 ;;  command         1    0[BANK0 ] unsigned char 
 14338 ;; Auto vars:     Size  Location     Type
 14339 ;;  lights          1    2[BANK0 ] unsigned char 
 14340 ;; Return value:  Size  Location     Type
 14341 ;;		None               void
 14342 ;; Registers used:
 14343 ;;		wreg, status,2, status,0
 14344 ;; Tracked objects:
 14345 ;;		On entry : 0/0
 14346 ;;		On exit  : 0/0
 14347 ;;		Unchanged: 0/0
 14348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14349 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;Total ram usage:        3 bytes
 14354 ;; Hardware stack levels used:    1
 14355 ;; Hardware stack levels required when called:    5
 14356 ;; This function calls:
 14357 ;;		Nothing
 14358 ;; This function is called by:
 14359 ;;		_setDimmerLights_OnOff
 14360 ;; This function uses a non-reentrant model
 14361 ;;
 14362                           
 14363                           
 14364                           ;psect for function _setDimmerIntr_ControlStatus
 14365  1DB4                     _setDimmerIntr_ControlStatus:	
 14366                           
 14367                           ;incstack = 0
 14368                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14369                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14370  1DB4  0020               	movlb	0	; select bank0
 14371  1DB5  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14372                           
 14373                           ;Dimmer_B1.c: 76: if (lights == 1) {
 14374  1DB6  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14375  1DB7  3A01               	xorlw	1
 14376  1DB8  1D03               	skipz
 14377  1DB9  0008               	return
 14378                           
 14379                           ;Dimmer_B1.c: 77: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14380  1DBA  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14381  1DBB  3A01               	xorlw	1
 14382  1DBC  3000               	movlw	0
 14383  1DBD  1903               	skipnz
 14384  1DBE  3001               	movlw	1
 14385  1DBF  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14386  1DC0  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14387  1DC1  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14388  1DC2  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14389  1DC3  0021               	movlb	1	; select bank1
 14390  1DC4  083C               	movf	_DimmerIntr1^(0+128),w
 14391  1DC5  0020               	movlb	0	; select bank0
 14392  1DC6  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14393  1DC7  39F7               	andlw	-9
 14394  1DC8  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14395  1DC9  0021               	movlb	1	; select bank1
 14396  1DCA  00BC               	movwf	_DimmerIntr1^(0+128)
 14397  1DCB  0008               	return
 14398  1DCC                     __end_of_setDimmerIntr_ControlStatus:	
 14399                           
 14400                           	psect	text95
 14401  0CAB                     __ptext95:	
 14402 ;; *************** function _setDelayOff_GO *****************
 14403 ;; Defined at:
 14404 ;;		line 87 in file "../src/DelayOff_B1.c"
 14405 ;; Parameters:    Size  Location     Type
 14406 ;;  sw              1    wreg     unsigned char 
 14407 ;;  command         1   69[BANK0 ] unsigned char 
 14408 ;;  value           1   70[BANK0 ] unsigned char 
 14409 ;; Auto vars:     Size  Location     Type
 14410 ;;  sw              1   76[BANK0 ] unsigned char 
 14411 ;;  k               1   75[BANK0 ] unsigned char 
 14412 ;;  j               1   74[BANK0 ] unsigned char 
 14413 ;;  i               1   73[BANK0 ] unsigned char 
 14414 ;; Return value:  Size  Location     Type
 14415 ;;		None               void
 14416 ;; Registers used:
 14417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14418 ;; Tracked objects:
 14419 ;;		On entry : 0/0
 14420 ;;		On exit  : 0/0
 14421 ;;		Unchanged: 0/0
 14422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14423 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;Total ram usage:        8 bytes
 14428 ;; Hardware stack levels used:    1
 14429 ;; Hardware stack levels required when called:    6
 14430 ;; This function calls:
 14431 ;;		_DelayOffPointSelect
 14432 ;;		___bmul
 14433 ;;		_setProductData
 14434 ;; This function is called by:
 14435 ;;		_setDimmerLights_OnOff
 14436 ;;		_setRFSW_Control
 14437 ;; This function uses a non-reentrant model
 14438 ;;
 14439                           
 14440                           
 14441                           ;psect for function _setDelayOff_GO
 14442  0CAB                     _setDelayOff_GO:	
 14443                           
 14444                           ;incstack = 0
 14445                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14446                           ;setDelayOff_GO@sw stored from wreg
 14447  0CAB  0020               	movlb	0	; select bank0
 14448  0CAC  00EC               	movwf	setDelayOff_GO@sw
 14449                           
 14450                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14451  0CAD  086C               	movf	setDelayOff_GO@sw,w
 14452  0CAE  319B  2334  318C   	fcall	_DelayOffPointSelect
 14453                           
 14454                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14455  0CB1  0020               	movlb	0	; select bank0
 14456  0CB2  0865               	movf	setDelayOff_GO@command,w
 14457  0CB3  3A01               	xorlw	1
 14458  0CB4  3000               	movlw	0
 14459  0CB5  1903               	skipnz
 14460  0CB6  3001               	movlw	1
 14461  0CB7  00E7               	movwf	??_setDelayOff_GO
 14462  0CB8  0021               	movlb	1	; select bank1
 14463  0CB9  084C               	movf	_DelayOff^(0+128),w
 14464  0CBA  0086               	movwf	6
 14465  0CBB  3001               	movlw	1	; select bank2/3
 14466  0CBC  0087               	movwf	7
 14467  0CBD  0020               	movlb	0	; select bank0
 14468  0CBE  0DE7               	rlf	??_setDelayOff_GO,f
 14469  0CBF  0801               	movf	1,w
 14470  0CC0  0667               	xorwf	??_setDelayOff_GO,w
 14471  0CC1  39FD               	andlw	-3
 14472  0CC2  0667               	xorwf	??_setDelayOff_GO,w
 14473  0CC3  0081               	movwf	1
 14474                           
 14475                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14476  0CC4  0021               	movlb	1	; select bank1
 14477  0CC5  084C               	movf	_DelayOff^(0+128),w
 14478  0CC6  3E02               	addlw	2
 14479  0CC7  0086               	movwf	6
 14480  0CC8  3001               	movlw	1	; select bank2/3
 14481  0CC9  0087               	movwf	7
 14482  0CCA  3000               	movlw	0
 14483  0CCB  3FC0               	movwi [0]fsr1
 14484  0CCC  3FC1               	movwi [1]fsr1
 14485                           
 14486                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14487  0CCD  084C               	movf	_DelayOff^(0+128),w
 14488  0CCE  3E04               	addlw	4
 14489  0CCF  0086               	movwf	6
 14490  0CD0  3001               	movlw	1	; select bank2/3
 14491  0CD1  0087               	movwf	7
 14492  0CD2  0181               	clrf	1
 14493                           
 14494                           ;DelayOff_B1.c: 94: if (command == 1) {
 14495  0CD3  0020               	movlb	0	; select bank0
 14496  0CD4  0865               	movf	setDelayOff_GO@command,w
 14497  0CD5  3A01               	xorlw	1
 14498  0CD6  1D03               	skipz
 14499  0CD7  2D2D               	goto	l8869
 14500                           
 14501                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14502  0CD8  3005               	movlw	5
 14503  0CD9  00E7               	movwf	??_setDelayOff_GO
 14504  0CDA  0867               	movf	??_setDelayOff_GO,w
 14505  0CDB  00E9               	movwf	setDelayOff_GO@i
 14506  0CDC  01EA               	clrf	setDelayOff_GO@j
 14507  0CDD  01EB               	clrf	setDelayOff_GO@k
 14508                           
 14509                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14510  0CDE  300F               	movlw	15
 14511  0CDF  0566               	andwf	setDelayOff_GO@value,w
 14512  0CE0  00E7               	movwf	??_setDelayOff_GO
 14513  0CE1  0867               	movf	??_setDelayOff_GO,w
 14514  0CE2  3A05               	xorlw	5
 14515  0CE3  1903               	skipnz
 14516  0CE4  2CE9               	goto	l8855
 14517  0CE5  0866               	movf	setDelayOff_GO@value,w
 14518  0CE6  390F               	andlw	15
 14519  0CE7  1D03               	btfss	3,2
 14520  0CE8  2D19               	goto	l8865
 14521  0CE9                     l8855:	
 14522  0CE9  3031               	movlw	49
 14523  0CEA  0266               	subwf	setDelayOff_GO@value,w
 14524  0CEB  1803               	skipnc
 14525  0CEC  2D19               	goto	l8865
 14526                           
 14527                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14528  0CED  0866               	movf	setDelayOff_GO@value,w
 14529  0CEE  390F               	andlw	15
 14530  0CEF  00E7               	movwf	??_setDelayOff_GO
 14531  0CF0  0867               	movf	??_setDelayOff_GO,w
 14532  0CF1  00EA               	movwf	setDelayOff_GO@j
 14533                           
 14534                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14535  0CF2  0866               	movf	setDelayOff_GO@value,w
 14536  0CF3  00E7               	movwf	??_setDelayOff_GO
 14537  0CF4  3004               	movlw	4
 14538  0CF5                     u9645:	
 14539  0CF5  36E7               	lsrf	??_setDelayOff_GO,f
 14540  0CF6  0B89               	decfsz	9,f
 14541  0CF7  2CF5               	goto	u9645
 14542  0CF8  0867               	movf	??_setDelayOff_GO,w
 14543  0CF9  390F               	andlw	15
 14544  0CFA  00E8               	movwf	??_setDelayOff_GO+1
 14545  0CFB  0868               	movf	??_setDelayOff_GO+1,w
 14546  0CFC  00EB               	movwf	setDelayOff_GO@k
 14547                           
 14548                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14549  0CFD  300A               	movlw	10
 14550  0CFE  00E7               	movwf	??_setDelayOff_GO
 14551  0CFF  0867               	movf	??_setDelayOff_GO,w
 14552  0D00  00A0               	movwf	___bmul@multiplicand
 14553  0D01  086B               	movf	setDelayOff_GO@k,w
 14554  0D02  319C  248B  318C   	fcall	___bmul
 14555  0D05  0020               	movlb	0	; select bank0
 14556  0D06  076A               	addwf	setDelayOff_GO@j,w
 14557  0D07  00E8               	movwf	??_setDelayOff_GO+1
 14558  0D08  0021               	movlb	1	; select bank1
 14559  0D09  0A4C               	incf	_DelayOff^(0+128),w
 14560  0D0A  0086               	movwf	6
 14561  0D0B  3001               	movlw	1	; select bank2/3
 14562  0D0C  0087               	movwf	7
 14563  0D0D  0020               	movlb	0	; select bank0
 14564  0D0E  0868               	movf	??_setDelayOff_GO+1,w
 14565  0D0F  0081               	movwf	1
 14566                           
 14567                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14568  0D10  0866               	movf	setDelayOff_GO@value,w
 14569  0D11  00E7               	movwf	??_setDelayOff_GO
 14570  0D12  0867               	movf	??_setDelayOff_GO,w
 14571  0D13  00E2               	movwf	setProductData@value
 14572  0D14  086C               	movf	setDelayOff_GO@sw,w
 14573  0D15  3E1A               	addlw	26
 14574  0D16  319B  234C         	fcall	_setProductData
 14575                           
 14576                           ;DelayOff_B1.c: 103: } else {
 14577  0D18  0008               	return
 14578  0D19                     l8865:	
 14579                           
 14580                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14581  0D19  3005               	movlw	5
 14582  0D1A  0020               	movlb	0	; select bank0
 14583  0D1B  00E7               	movwf	??_setDelayOff_GO
 14584  0D1C  0021               	movlb	1	; select bank1
 14585  0D1D  0A4C               	incf	_DelayOff^(0+128),w
 14586  0D1E  0086               	movwf	6
 14587  0D1F  3001               	movlw	1	; select bank2/3
 14588  0D20  0087               	movwf	7
 14589  0D21  0020               	movlb	0	; select bank0
 14590  0D22  0867               	movf	??_setDelayOff_GO,w
 14591  0D23  0081               	movwf	1
 14592                           
 14593                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14594  0D24  3005               	movlw	5
 14595  0D25  00E7               	movwf	??_setDelayOff_GO
 14596  0D26  0867               	movf	??_setDelayOff_GO,w
 14597  0D27  00E2               	movwf	setProductData@value
 14598  0D28  086C               	movf	setDelayOff_GO@sw,w
 14599  0D29  3E1A               	addlw	26
 14600  0D2A  319B  234C         	fcall	_setProductData
 14601                           
 14602                           ;DelayOff_B1.c: 106: }
 14603                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14604  0D2C  0008               	return
 14605  0D2D                     l8869:	
 14606  0D2D  0020               	movlb	0	; select bank0
 14607  0D2E  08E5               	movf	setDelayOff_GO@command,f
 14608  0D2F  1D03               	skipz
 14609  0D30  0008               	return
 14610                           
 14611                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14612  0D31  01E2               	clrf	setProductData@value
 14613  0D32  086C               	movf	setDelayOff_GO@sw,w
 14614  0D33  3E1A               	addlw	26
 14615  0D34  319B  234C         	fcall	_setProductData
 14616  0D36  0008               	return
 14617  0D37                     __end_of_setDelayOff_GO:	
 14618                           
 14619                           	psect	text96
 14620  1C8B                     __ptext96:	
 14621 ;; *************** function ___bmul *****************
 14622 ;; Defined at:
 14623 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14624 ;; Parameters:    Size  Location     Type
 14625 ;;  multiplier      1    wreg     unsigned char 
 14626 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14629 ;;  product         1    2[BANK0 ] unsigned char 
 14630 ;; Return value:  Size  Location     Type
 14631 ;;                  1    wreg      unsigned char 
 14632 ;; Registers used:
 14633 ;;		wreg, status,2, status,0
 14634 ;; Tracked objects:
 14635 ;;		On entry : 0/0
 14636 ;;		On exit  : 0/0
 14637 ;;		Unchanged: 0/0
 14638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14639 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;Total ram usage:        4 bytes
 14644 ;; Hardware stack levels used:    1
 14645 ;; Hardware stack levels required when called:    5
 14646 ;; This function calls:
 14647 ;;		Nothing
 14648 ;; This function is called by:
 14649 ;;		_setDelayOff_GO
 14650 ;;		_DelayTimejudge
 14651 ;; This function uses a non-reentrant model
 14652 ;;
 14653                           
 14654                           
 14655                           ;psect for function ___bmul
 14656  1C8B                     ___bmul:	
 14657                           
 14658                           ;incstack = 0
 14659                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14660                           ;___bmul@multiplier stored from wreg
 14661  1C8B  0020               	movlb	0	; select bank0
 14662  1C8C  00A3               	movwf	___bmul@multiplier
 14663  1C8D  01A2               	clrf	___bmul@product
 14664  1C8E                     l8533:	
 14665  1C8E  1C23               	btfss	___bmul@multiplier,0
 14666  1C8F  2C94               	goto	l8537
 14667  1C90  0820               	movf	___bmul@multiplicand,w
 14668  1C91  00A1               	movwf	??___bmul
 14669  1C92  0821               	movf	??___bmul,w
 14670  1C93  07A2               	addwf	___bmul@product,f
 14671  1C94                     l8537:	
 14672  1C94  1003               	clrc
 14673  1C95  0DA0               	rlf	___bmul@multiplicand,f
 14674  1C96  1003               	clrc
 14675  1C97  0CA3               	rrf	___bmul@multiplier,f
 14676  1C98  08A3               	movf	___bmul@multiplier,f
 14677  1C99  1D03               	skipz
 14678  1C9A  2C8E               	goto	l8533
 14679  1C9B  0822               	movf	___bmul@product,w
 14680  1C9C  0008               	return
 14681  1C9D                     __end_of___bmul:	
 14682                           
 14683                           	psect	text97
 14684  1DE4                     __ptext97:	
 14685 ;; *************** function _setCmd_Status *****************
 14686 ;; Defined at:
 14687 ;;		line 651 in file "../src/Main_B1.c"
 14688 ;; Parameters:    Size  Location     Type
 14689 ;;  number          1    wreg     unsigned char 
 14690 ;;  cmd             1    0[BANK0 ] unsigned char 
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;  number          1    2[BANK0 ] unsigned char 
 14693 ;; Return value:  Size  Location     Type
 14694 ;;		None               void
 14695 ;; Registers used:
 14696 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14697 ;; Tracked objects:
 14698 ;;		On entry : 0/0
 14699 ;;		On exit  : 0/0
 14700 ;;		Unchanged: 0/0
 14701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14702 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;Total ram usage:        3 bytes
 14707 ;; Hardware stack levels used:    1
 14708 ;; Hardware stack levels required when called:    5
 14709 ;; This function calls:
 14710 ;;		Nothing
 14711 ;; This function is called by:
 14712 ;;		_setDimmerLights_OnOff
 14713 ;;		_setControl_Lights_Table
 14714 ;; This function uses a non-reentrant model
 14715 ;;
 14716                           
 14717                           
 14718                           ;psect for function _setCmd_Status
 14719  1DE4                     _setCmd_Status:	
 14720                           
 14721                           ;incstack = 0
 14722                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14723                           ;setCmd_Status@number stored from wreg
 14724  1DE4  0020               	movlb	0	; select bank0
 14725  1DE5  00A2               	movwf	setCmd_Status@number
 14726                           
 14727                           ;Main_B1.c: 652: switch (number) {
 14728  1DE6  2DF6               	goto	l9035
 14729  1DE7                     l9031:	
 14730                           ;Main_B1.c: 653: case 1:
 14731                           
 14732                           
 14733                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14734  1DE7  0820               	movf	setCmd_Status@cmd,w
 14735  1DE8  3A01               	xorlw	1
 14736  1DE9  3000               	movlw	0
 14737  1DEA  1903               	skipnz
 14738  1DEB  3001               	movlw	1
 14739  1DEC  00A1               	movwf	??_setCmd_Status
 14740  1DED  0021               	movlb	1	; select bank1
 14741  1DEE  084B               	movf	_Cmd^(0+128),w
 14742  1DEF  0020               	movlb	0	; select bank0
 14743  1DF0  0621               	xorwf	??_setCmd_Status,w
 14744  1DF1  39FE               	andlw	-2
 14745  1DF2  0621               	xorwf	??_setCmd_Status,w
 14746  1DF3  0021               	movlb	1	; select bank1
 14747  1DF4  00CB               	movwf	_Cmd^(0+128)
 14748                           
 14749                           ;Main_B1.c: 656: }
 14750                           
 14751                           ;Main_B1.c: 655: break;
 14752  1DF5  0008               	return
 14753  1DF6                     l9035:	
 14754  1DF6  0020               	movlb	0	; select bank0
 14755  1DF7  0822               	movf	setCmd_Status@number,w
 14756                           
 14757                           ; Switch size 1, requested type "space"
 14758                           ; Number of cases is 1, Range of values is 1 to 1
 14759                           ; switch strategies available:
 14760                           ; Name         Instructions Cycles
 14761                           ; simple_byte            4     3 (average)
 14762                           ; direct_byte           11     9 (fixed)
 14763                           ; jumptable            263     9 (fixed)
 14764                           ;	Chosen strategy is simple_byte
 14765  1DF8  3A01               	xorlw	1	; case 1
 14766  1DF9  1903               	skipnz
 14767  1DFA  2DE7               	goto	l9031
 14768  1DFB  2DFC               	goto	l1510
 14769  1DFC                     l1510:	
 14770  1DFC  0008               	return
 14771  1DFD                     __end_of_setCmd_Status:	
 14772                           
 14773                           	psect	text98
 14774  1AF3                     __ptext98:	
 14775 ;; *************** function _getMain_All_LightsStatus *****************
 14776 ;; Defined at:
 14777 ;;		line 373 in file "../src/Main_B1.c"
 14778 ;; Parameters:    Size  Location     Type
 14779 ;;		None
 14780 ;; Auto vars:     Size  Location     Type
 14781 ;;  status          1    0[BANK0 ] unsigned char 
 14782 ;; Return value:  Size  Location     Type
 14783 ;;                  1    wreg      unsigned char 
 14784 ;; Registers used:
 14785 ;;		wreg, status,2
 14786 ;; Tracked objects:
 14787 ;;		On entry : 0/0
 14788 ;;		On exit  : 0/0
 14789 ;;		Unchanged: 0/0
 14790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14795 ;;Total ram usage:        1 bytes
 14796 ;; Hardware stack levels used:    1
 14797 ;; Hardware stack levels required when called:    5
 14798 ;; This function calls:
 14799 ;;		Nothing
 14800 ;; This function is called by:
 14801 ;;		_DimmerLights_Main
 14802 ;;		_setDimmerLights_Main
 14803 ;;		_setDimmerLights_OnOff
 14804 ;;		_Flash_Memory_Main
 14805 ;;		_Exception_Main
 14806 ;;		_Load_Main
 14807 ;;		_setTemp_Main
 14808 ;;		_setControl_Lights_Table
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           
 14813                           ;psect for function _getMain_All_LightsStatus
 14814  1AF3                     _getMain_All_LightsStatus:	
 14815                           
 14816                           ;Main_B1.c: 374: char status = 0;
 14817                           
 14818                           ;incstack = 0
 14819                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14820  1AF3  0020               	movlb	0	; select bank0
 14821  1AF4  01A0               	clrf	getMain_All_LightsStatus@status
 14822                           
 14823                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14824  1AF5  3000               	movlw	0
 14825  1AF6  0022               	movlb	2	; select bank2
 14826  1AF7  185F               	btfsc	(_DimmerLights1^(0+256)+1),0
 14827  1AF8  3001               	movlw	1
 14828  1AF9  0020               	movlb	0	; select bank0
 14829  1AFA  00A0               	movwf	getMain_All_LightsStatus@status
 14830                           
 14831                           ;Main_B1.c: 420: return status;
 14832  1AFB  0820               	movf	getMain_All_LightsStatus@status,w
 14833  1AFC  0008               	return
 14834  1AFD                     __end_of_getMain_All_LightsStatus:	
 14835                           
 14836                           	psect	text99
 14837  1C24                     __ptext99:	
 14838 ;; *************** function _getDelayOff_GO *****************
 14839 ;; Defined at:
 14840 ;;		line 114 in file "../src/DelayOff_B1.c"
 14841 ;; Parameters:    Size  Location     Type
 14842 ;;  sw              1    wreg     unsigned char 
 14843 ;; Auto vars:     Size  Location     Type
 14844 ;;  sw              1    2[BANK0 ] unsigned char 
 14845 ;;  go              1    3[BANK0 ] unsigned char 
 14846 ;; Return value:  Size  Location     Type
 14847 ;;                  1    wreg      unsigned char 
 14848 ;; Registers used:
 14849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14850 ;; Tracked objects:
 14851 ;;		On entry : 0/0
 14852 ;;		On exit  : 0/0
 14853 ;;		Unchanged: 0/0
 14854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14859 ;;Total ram usage:        2 bytes
 14860 ;; Hardware stack levels used:    1
 14861 ;; Hardware stack levels required when called:    6
 14862 ;; This function calls:
 14863 ;;		_DelayOffPointSelect
 14864 ;; This function is called by:
 14865 ;;		_setDimmerLights_OnOff
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           
 14870                           ;psect for function _getDelayOff_GO
 14871  1C24                     _getDelayOff_GO:	
 14872                           
 14873                           ;incstack = 0
 14874                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14875                           ;getDelayOff_GO@sw stored from wreg
 14876  1C24  0020               	movlb	0	; select bank0
 14877  1C25  00A2               	movwf	getDelayOff_GO@sw
 14878                           
 14879                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14880  1C26  0822               	movf	getDelayOff_GO@sw,w
 14881  1C27  319B  2334         	fcall	_DelayOffPointSelect
 14882                           
 14883                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14884  1C29  0021               	movlb	1	; select bank1
 14885  1C2A  084C               	movf	_DelayOff^(0+128),w
 14886  1C2B  0086               	movwf	6
 14887  1C2C  3001               	movlw	1	; select bank2/3
 14888  1C2D  0087               	movwf	7
 14889  1C2E  3000               	movlw	0
 14890  1C2F  1881               	btfsc	1,1
 14891  1C30  3001               	movlw	1
 14892  1C31  0020               	movlb	0	; select bank0
 14893  1C32  00A3               	movwf	getDelayOff_GO@go
 14894                           
 14895                           ;DelayOff_B1.c: 117: return go;
 14896  1C33  0823               	movf	getDelayOff_GO@go,w
 14897  1C34  0008               	return
 14898  1C35                     __end_of_getDelayOff_GO:	
 14899                           
 14900                           	psect	text100
 14901  1C79                     __ptext100:	
 14902 ;; *************** function _getCmd_Status *****************
 14903 ;; Defined at:
 14904 ;;		line 659 in file "../src/Main_B1.c"
 14905 ;; Parameters:    Size  Location     Type
 14906 ;;  number          1    wreg     unsigned char 
 14907 ;; Auto vars:     Size  Location     Type
 14908 ;;  number          1    0[BANK0 ] unsigned char 
 14909 ;;  cmd             1    1[BANK0 ] unsigned char 
 14910 ;; Return value:  Size  Location     Type
 14911 ;;                  1    wreg      unsigned char 
 14912 ;; Registers used:
 14913 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14914 ;; Tracked objects:
 14915 ;;		On entry : 0/0
 14916 ;;		On exit  : 0/0
 14917 ;;		Unchanged: 0/0
 14918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14922 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;Total ram usage:        2 bytes
 14924 ;; Hardware stack levels used:    1
 14925 ;; Hardware stack levels required when called:    5
 14926 ;; This function calls:
 14927 ;;		Nothing
 14928 ;; This function is called by:
 14929 ;;		_setDimmerLights_OnOff
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933                           
 14934                           ;psect for function _getCmd_Status
 14935  1C79                     _getCmd_Status:	
 14936                           
 14937                           ;incstack = 0
 14938                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14939                           ;getCmd_Status@number stored from wreg
 14940  1C79  0020               	movlb	0	; select bank0
 14941  1C7A  00A0               	movwf	getCmd_Status@number
 14942                           
 14943                           ;Main_B1.c: 660: char cmd = 0;
 14944  1C7B  01A1               	clrf	getCmd_Status@cmd
 14945                           
 14946                           ;Main_B1.c: 661: switch (number) {
 14947  1C7C  2C84               	goto	l9307
 14948  1C7D                     l9303:	
 14949                           ;Main_B1.c: 662: case 1:
 14950                           
 14951                           
 14952                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 14953  1C7D  3000               	movlw	0
 14954  1C7E  0021               	movlb	1	; select bank1
 14955  1C7F  184B               	btfsc	_Cmd^(0+128),0
 14956  1C80  3001               	movlw	1
 14957  1C81  0020               	movlb	0	; select bank0
 14958  1C82  00A1               	movwf	getCmd_Status@cmd
 14959                           
 14960                           ;Main_B1.c: 665: }
 14961                           
 14962                           ;Main_B1.c: 664: break;
 14963  1C83  2C89               	goto	l9309
 14964  1C84                     l9307:	
 14965  1C84  0820               	movf	getCmd_Status@number,w
 14966                           
 14967                           ; Switch size 1, requested type "space"
 14968                           ; Number of cases is 1, Range of values is 1 to 1
 14969                           ; switch strategies available:
 14970                           ; Name         Instructions Cycles
 14971                           ; simple_byte            4     3 (average)
 14972                           ; direct_byte           11     9 (fixed)
 14973                           ; jumptable            263     9 (fixed)
 14974                           ;	Chosen strategy is simple_byte
 14975  1C85  3A01               	xorlw	1	; case 1
 14976  1C86  1903               	skipnz
 14977  1C87  2C7D               	goto	l9303
 14978  1C88  2C89               	goto	l9309
 14979  1C89                     l9309:	
 14980                           
 14981                           ;Main_B1.c: 666: return cmd;
 14982  1C89  0821               	movf	getCmd_Status@cmd,w
 14983  1C8A  0008               	return
 14984  1C8B                     __end_of_getCmd_Status:	
 14985                           
 14986                           	psect	text101
 14987  14A5                     __ptext101:	
 14988 ;; *************** function _setDimmerLights_Dimming *****************
 14989 ;; Defined at:
 14990 ;;		line 954 in file "../src/Dimmer_B1.c"
 14991 ;; Parameters:    Size  Location     Type
 14992 ;;  lights          1    wreg     unsigned char 
 14993 ;;  status          1   74[BANK0 ] unsigned char 
 14994 ;; Auto vars:     Size  Location     Type
 14995 ;;  lights          1   77[BANK0 ] unsigned char 
 14996 ;;  value           1   76[BANK0 ] unsigned char 
 14997 ;; Return value:  Size  Location     Type
 14998 ;;		None               void
 14999 ;; Registers used:
 15000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15001 ;; Tracked objects:
 15002 ;;		On entry : 0/0
 15003 ;;		On exit  : 0/0
 15004 ;;		Unchanged: 0/0
 15005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15006 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15007 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;Total ram usage:        4 bytes
 15011 ;; Hardware stack levels used:    1
 15012 ;; Hardware stack levels required when called:    8
 15013 ;; This function calls:
 15014 ;;		_getDimmerIntr_DimmingValue
 15015 ;;		_getDimmerLights_ValueToPercent
 15016 ;;		_setBuz
 15017 ;;		_setDimmerIntr_Dimming_Sw
 15018 ;;		_setDimmerIntr_MaxmumValue
 15019 ;;		_setDimmerLights_Line
 15020 ;;		_setMemory_Modify
 15021 ;;		_setProductData
 15022 ;;		_setRF_DimmerLights
 15023 ;;		_setRF_TransceiveGO
 15024 ;;		_setTxData
 15025 ;; This function is called by:
 15026 ;;		_setDimmerLights_Main
 15027 ;; This function uses a non-reentrant model
 15028 ;;
 15029                           
 15030                           
 15031                           ;psect for function _setDimmerLights_Dimming
 15032  14A5                     _setDimmerLights_Dimming:	
 15033                           
 15034                           ;incstack = 0
 15035                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15036                           ;setDimmerLights_Dimming@lights stored from wreg
 15037  14A5  0020               	movlb	0	; select bank0
 15038  14A6  00ED               	movwf	setDimmerLights_Dimming@lights
 15039                           
 15040                           ;Dimmer_B1.c: 955: if (status == 1) {
 15041  14A7  086A               	movf	setDimmerLights_Dimming@status,w
 15042  14A8  3A01               	xorlw	1
 15043  14A9  1D03               	skipz
 15044  14AA  2CBE               	goto	l9581
 15045                           
 15046                           ;Dimmer_B1.c: 956: setDimmerIntr_Dimming_Sw(lights, 1);
 15047  14AB  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15048  14AC  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15049  14AD  086D               	movf	setDimmerLights_Dimming@lights,w
 15050  14AE  319D  259E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15051                           
 15052                           ;Dimmer_B1.c: 959: setRF_TransceiveGO(0);
 15053  14B1  3000               	movlw	0
 15054  14B2  319C  24D4  3194   	fcall	_setRF_TransceiveGO
 15055                           
 15056                           ;Dimmer_B1.c: 961: setBuz(1, 100);
 15057  14B5  3064               	movlw	100
 15058  14B6  0020               	movlb	0	; select bank0
 15059  14B7  00A9               	movwf	setBuz@time
 15060  14B8  3000               	movlw	0
 15061  14B9  00AA               	movwf	setBuz@time+1
 15062  14BA  3001               	movlw	1
 15063  14BB  3194  24FB         	fcall	_setBuz
 15064                           
 15065                           ;Dimmer_B1.c: 962: } else if (status == 0) {
 15066  14BD  0008               	return
 15067  14BE                     l9581:	
 15068  14BE  0020               	movlb	0	; select bank0
 15069  14BF  08EA               	movf	setDimmerLights_Dimming@status,f
 15070  14C0  1D03               	skipz
 15071  14C1  0008               	return
 15072                           
 15073                           ;Dimmer_B1.c: 963: setDimmerIntr_Dimming_Sw(lights, 0);
 15074  14C2  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15075  14C3  086D               	movf	setDimmerLights_Dimming@lights,w
 15076  14C4  319D  259E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15077                           
 15078                           ;Dimmer_B1.c: 966: Dimmer.Load_Status = 0;
 15079  14C7  0022               	movlb	2	; select bank2
 15080  14C8  112C               	bcf	_Dimmer^(0+256),2
 15081                           
 15082                           ;Dimmer_B1.c: 967: setDimmerLights_Line(lights);
 15083  14C9  0020               	movlb	0	; select bank0
 15084  14CA  086D               	movf	setDimmerLights_Dimming@lights,w
 15085  14CB  319C  2413  3194   	fcall	_setDimmerLights_Line
 15086                           
 15087                           ;Dimmer_B1.c: 969: char value = getDimmerIntr_DimmingValue(lights);
 15088  14CE  0020               	movlb	0	; select bank0
 15089  14CF  086D               	movf	setDimmerLights_Dimming@lights,w
 15090  14D0  319B  23D4  3194   	fcall	_getDimmerIntr_DimmingValue
 15091  14D3  0020               	movlb	0	; select bank0
 15092  14D4  00EB               	movwf	??_setDimmerLights_Dimming
 15093  14D5  086B               	movf	??_setDimmerLights_Dimming,w
 15094  14D6  00EC               	movwf	setDimmerLights_Dimming@value
 15095                           
 15096                           ;Dimmer_B1.c: 970: setDimmerIntr_MaxmumValue(lights, value);
 15097  14D7  086C               	movf	setDimmerLights_Dimming@value,w
 15098  14D8  00EB               	movwf	??_setDimmerLights_Dimming
 15099  14D9  086B               	movf	??_setDimmerLights_Dimming,w
 15100  14DA  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15101  14DB  086D               	movf	setDimmerLights_Dimming@lights,w
 15102  14DC  319B  2358  3194   	fcall	_setDimmerIntr_MaxmumValue
 15103                           
 15104                           ;Dimmer_B1.c: 971: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15105  14DF  0020               	movlb	0	; select bank0
 15106  14E0  086C               	movf	setDimmerLights_Dimming@value,w
 15107  14E1  3197  2736  3194   	fcall	_getDimmerLights_ValueToPercent
 15108  14E4  0020               	movlb	0	; select bank0
 15109  14E5  00EB               	movwf	??_setDimmerLights_Dimming
 15110  14E6  086B               	movf	??_setDimmerLights_Dimming,w
 15111  14E7  00E2               	movwf	setProductData@value
 15112  14E8  086D               	movf	setDimmerLights_Dimming@lights,w
 15113  14E9  3E14               	addlw	20
 15114  14EA  319B  234C  3194   	fcall	_setProductData
 15115                           
 15116                           ;Dimmer_B1.c: 978: setMemory_Modify(1);
 15117  14ED  3001               	movlw	1
 15118  14EE  319C  24C1  3194   	fcall	_setMemory_Modify
 15119                           
 15120                           ;Dimmer_B1.c: 982: setRF_DimmerLights(lights, 1);
 15121  14F1  0020               	movlb	0	; select bank0
 15122  14F2  01E5               	clrf	setRF_DimmerLights@on
 15123  14F3  0AE5               	incf	setRF_DimmerLights@on,f
 15124  14F4  086D               	movf	setDimmerLights_Dimming@lights,w
 15125  14F5  3197  279B  3194   	fcall	_setRF_DimmerLights
 15126                           
 15127                           ;Dimmer_B1.c: 983: setTxData();
 15128  14F8  318F  2745         	fcall	_setTxData
 15129  14FA  0008               	return
 15130  14FB                     __end_of_setDimmerLights_Dimming:	
 15131                           
 15132                           	psect	text102
 15133  0F45                     __ptext102:	
 15134 ;; *************** function _setTxData *****************
 15135 ;; Defined at:
 15136 ;;		line 183 in file "../src/RF_Control_B1.c"
 15137 ;; Parameters:    Size  Location     Type
 15138 ;;		None
 15139 ;; Auto vars:     Size  Location     Type
 15140 ;;  i               1    0        unsigned char 
 15141 ;; Return value:  Size  Location     Type
 15142 ;;		None               void
 15143 ;; Registers used:
 15144 ;;		wreg, fsr1l, fsr1h, status,2
 15145 ;; Tracked objects:
 15146 ;;		On entry : 0/0
 15147 ;;		On exit  : 0/0
 15148 ;;		Unchanged: 0/0
 15149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;Total ram usage:        1 bytes
 15155 ;; Hardware stack levels used:    1
 15156 ;; Hardware stack levels required when called:    5
 15157 ;; This function calls:
 15158 ;;		Nothing
 15159 ;; This function is called by:
 15160 ;;		_setDimmerLights_OnOff
 15161 ;;		_setDimmerLights_Dimming
 15162 ;;		_getRxData
 15163 ;;		_setControl_Lights_Table
 15164 ;;		_setRFSW_Control
 15165 ;;		_setRFSW_AdjControl
 15166 ;; This function uses a non-reentrant model
 15167 ;;
 15168                           
 15169                           
 15170                           ;psect for function _setTxData
 15171  0F45                     _setTxData:	
 15172                           
 15173                           ;RF_Control_B1.c: 184: char i;
 15174                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15175                           
 15176                           ;incstack = 0
 15177                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15178  0F45  0021               	movlb	1	; select bank1
 15179  0F46  1C20               	btfss	_RF1^(0+128),0
 15180  0F47  0008               	return
 15181                           
 15182                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15183  0F48  1520               	bsf	_RF1^(0+128),2
 15184                           
 15185                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15186  0F49  01A3               	clrf	(_RF1^(0+128)+3)
 15187  0F4A  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15188                           
 15189                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15190  0F4B  3063               	movlw	99
 15191  0F4C  0020               	movlb	0	; select bank0
 15192  0F4D  00A0               	movwf	??_setTxData
 15193  0F4E  0820               	movf	??_setTxData,w
 15194  0F4F  0023               	movlb	3	; select bank3
 15195  0F50  00A0               	movwf	_RF_Data^(0+384)
 15196                           
 15197                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15198  0F51  3002               	movlw	2
 15199  0F52  0020               	movlb	0	; select bank0
 15200  0F53  00A0               	movwf	??_setTxData
 15201  0F54  0820               	movf	??_setTxData,w
 15202  0F55  0023               	movlb	3	; select bank3
 15203  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15204                           
 15205                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15206  0F57  0021               	movlb	1	; select bank1
 15207  0F58  086C               	movf	_product^(0+128),w
 15208  0F59  0086               	movwf	6
 15209  0F5A  3002               	movlw	2	; select bank4/5
 15210  0F5B  0087               	movwf	7
 15211  0F5C  3002               	movlw	2	; select bank4/5
 15212  0F5D  3F42               	moviw [2]fsr1
 15213  0F5E  0023               	movlb	3	; select bank3
 15214  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15215                           
 15216                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15217  0F60  0021               	movlb	1	; select bank1
 15218  0F61  086C               	movf	_product^(0+128),w
 15219  0F62  0086               	movwf	6
 15220  0F63  3002               	movlw	2	; select bank4/5
 15221  0F64  0087               	movwf	7
 15222  0F65  3002               	movlw	2	; select bank4/5
 15223  0F66  3F43               	moviw [3]fsr1
 15224  0F67  0023               	movlb	3	; select bank3
 15225  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15226                           
 15227                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15228  0F69  0021               	movlb	1	; select bank1
 15229  0F6A  086C               	movf	_product^(0+128),w
 15230  0F6B  0086               	movwf	6
 15231  0F6C  3002               	movlw	2	; select bank4/5
 15232  0F6D  0087               	movwf	7
 15233  0F6E  3002               	movlw	2	; select bank4/5
 15234  0F6F  3F44               	moviw [4]fsr1
 15235  0F70  0023               	movlb	3	; select bank3
 15236  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15237                           
 15238                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15239  0F72  0021               	movlb	1	; select bank1
 15240  0F73  086C               	movf	_product^(0+128),w
 15241  0F74  0086               	movwf	6
 15242  0F75  3002               	movlw	2	; select bank4/5
 15243  0F76  0087               	movwf	7
 15244  0F77  3002               	movlw	2	; select bank4/5
 15245  0F78  3F45               	moviw [5]fsr1
 15246  0F79  0023               	movlb	3	; select bank3
 15247  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15248                           
 15249                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15250  0F7B  0021               	movlb	1	; select bank1
 15251  0F7C  086C               	movf	_product^(0+128),w
 15252  0F7D  0086               	movwf	6
 15253  0F7E  3002               	movlw	2	; select bank4/5
 15254  0F7F  0087               	movwf	7
 15255  0F80  3002               	movlw	2	; select bank4/5
 15256  0F81  3F46               	moviw [6]fsr1
 15257  0F82  0023               	movlb	3	; select bank3
 15258  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15259                           
 15260                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15261  0F84  0021               	movlb	1	; select bank1
 15262  0F85  086C               	movf	_product^(0+128),w
 15263  0F86  0086               	movwf	6
 15264  0F87  3002               	movlw	2	; select bank4/5
 15265  0F88  0087               	movwf	7
 15266  0F89  3002               	movlw	2	; select bank4/5
 15267  0F8A  3F47               	moviw [7]fsr1
 15268  0F8B  0023               	movlb	3	; select bank3
 15269  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15270                           
 15271                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15272  0F8D  0021               	movlb	1	; select bank1
 15273  0F8E  086C               	movf	_product^(0+128),w
 15274  0F8F  0086               	movwf	6
 15275  0F90  3002               	movlw	2	; select bank4/5
 15276  0F91  0087               	movwf	7
 15277  0F92  3002               	movlw	2	; select bank4/5
 15278  0F93  3F48               	moviw [8]fsr1
 15279  0F94  0023               	movlb	3	; select bank3
 15280  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15281                           
 15282                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15283  0F96  0021               	movlb	1	; select bank1
 15284  0F97  086C               	movf	_product^(0+128),w
 15285  0F98  0086               	movwf	6
 15286  0F99  3002               	movlw	2	; select bank4/5
 15287  0F9A  0087               	movwf	7
 15288  0F9B  3002               	movlw	2	; select bank4/5
 15289  0F9C  3F49               	moviw [9]fsr1
 15290  0F9D  0023               	movlb	3	; select bank3
 15291  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15292                           
 15293                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15294  0F9F  0021               	movlb	1	; select bank1
 15295  0FA0  086C               	movf	_product^(0+128),w
 15296  0FA1  0086               	movwf	6
 15297  0FA2  3002               	movlw	2	; select bank4/5
 15298  0FA3  0087               	movwf	7
 15299  0FA4  3002               	movlw	2	; select bank4/5
 15300  0FA5  3F4A               	moviw [10]fsr1
 15301  0FA6  0023               	movlb	3	; select bank3
 15302  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15303                           
 15304                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15305  0FA8  0021               	movlb	1	; select bank1
 15306  0FA9  086C               	movf	_product^(0+128),w
 15307  0FAA  0086               	movwf	6
 15308  0FAB  3002               	movlw	2	; select bank4/5
 15309  0FAC  0087               	movwf	7
 15310  0FAD  3002               	movlw	2	; select bank4/5
 15311  0FAE  3F4B               	moviw [11]fsr1
 15312  0FAF  0023               	movlb	3	; select bank3
 15313  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15314                           
 15315                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15316  0FB1  0021               	movlb	1	; select bank1
 15317  0FB2  086C               	movf	_product^(0+128),w
 15318  0FB3  0086               	movwf	6
 15319  0FB4  3002               	movlw	2	; select bank4/5
 15320  0FB5  0087               	movwf	7
 15321  0FB6  3002               	movlw	2	; select bank4/5
 15322  0FB7  3F4C               	moviw [12]fsr1
 15323  0FB8  0023               	movlb	3	; select bank3
 15324  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15325                           
 15326                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15327  0FBA  0021               	movlb	1	; select bank1
 15328  0FBB  086C               	movf	_product^(0+128),w
 15329  0FBC  0086               	movwf	6
 15330  0FBD  3002               	movlw	2	; select bank4/5
 15331  0FBE  0087               	movwf	7
 15332  0FBF  3002               	movlw	2	; select bank4/5
 15333  0FC0  3F4D               	moviw [13]fsr1
 15334  0FC1  0023               	movlb	3	; select bank3
 15335  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15336                           
 15337                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15338  0FC3  0021               	movlb	1	; select bank1
 15339  0FC4  086C               	movf	_product^(0+128),w
 15340  0FC5  0086               	movwf	6
 15341  0FC6  3002               	movlw	2	; select bank4/5
 15342  0FC7  0087               	movwf	7
 15343  0FC8  3002               	movlw	2	; select bank4/5
 15344  0FC9  3F4E               	moviw [14]fsr1
 15345  0FCA  0023               	movlb	3	; select bank3
 15346  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15347                           
 15348                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15349  0FCC  0021               	movlb	1	; select bank1
 15350  0FCD  086C               	movf	_product^(0+128),w
 15351  0FCE  0086               	movwf	6
 15352  0FCF  3002               	movlw	2	; select bank4/5
 15353  0FD0  0087               	movwf	7
 15354  0FD1  3002               	movlw	2	; select bank4/5
 15355  0FD2  3F4F               	moviw [15]fsr1
 15356  0FD3  0023               	movlb	3	; select bank3
 15357  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15358                           
 15359                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15360  0FD5  0021               	movlb	1	; select bank1
 15361  0FD6  086C               	movf	_product^(0+128),w
 15362  0FD7  0086               	movwf	6
 15363  0FD8  3002               	movlw	2	; select bank4/5
 15364  0FD9  0087               	movwf	7
 15365  0FDA  3002               	movlw	2	; select bank4/5
 15366  0FDB  3F50               	moviw [16]fsr1
 15367  0FDC  0023               	movlb	3	; select bank3
 15368  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15369                           
 15370                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15371  0FDE  0021               	movlb	1	; select bank1
 15372  0FDF  086C               	movf	_product^(0+128),w
 15373  0FE0  0086               	movwf	6
 15374  0FE1  3002               	movlw	2	; select bank4/5
 15375  0FE2  0087               	movwf	7
 15376  0FE3  3002               	movlw	2	; select bank4/5
 15377  0FE4  3F51               	moviw [17]fsr1
 15378  0FE5  0023               	movlb	3	; select bank3
 15379  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15380                           
 15381                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15382  0FE7  0021               	movlb	1	; select bank1
 15383  0FE8  086C               	movf	_product^(0+128),w
 15384  0FE9  0086               	movwf	6
 15385  0FEA  3002               	movlw	2	; select bank4/5
 15386  0FEB  0087               	movwf	7
 15387  0FEC  3002               	movlw	2	; select bank4/5
 15388  0FED  3F52               	moviw [18]fsr1
 15389  0FEE  0023               	movlb	3	; select bank3
 15390  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15391                           
 15392                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15393  0FF0  0021               	movlb	1	; select bank1
 15394  0FF1  086C               	movf	_product^(0+128),w
 15395  0FF2  0086               	movwf	6
 15396  0FF3  3002               	movlw	2	; select bank4/5
 15397  0FF4  0087               	movwf	7
 15398  0FF5  3002               	movlw	2	; select bank4/5
 15399  0FF6  3F53               	moviw [19]fsr1
 15400  0FF7  0023               	movlb	3	; select bank3
 15401  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15402                           
 15403                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15404  0FF9  30D1               	movlw	209
 15405  0FFA  0020               	movlb	0	; select bank0
 15406  0FFB  00A0               	movwf	??_setTxData
 15407  0FFC  0820               	movf	??_setTxData,w
 15408  0FFD  0023               	movlb	3	; select bank3
 15409  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15410  0FFF  0008               	return
 15411  1000                     __end_of_setTxData:	
 15412                           
 15413                           	psect	text103
 15414  1CD4                     __ptext103:	
 15415 ;; *************** function _setRF_TransceiveGO *****************
 15416 ;; Defined at:
 15417 ;;		line 506 in file "../src/RF_Control_B1.c"
 15418 ;; Parameters:    Size  Location     Type
 15419 ;;  command         1    wreg     unsigned char 
 15420 ;; Auto vars:     Size  Location     Type
 15421 ;;  command         1    1[BANK0 ] unsigned char 
 15422 ;; Return value:  Size  Location     Type
 15423 ;;		None               void
 15424 ;; Registers used:
 15425 ;;		wreg, status,2, status,0
 15426 ;; Tracked objects:
 15427 ;;		On entry : 0/0
 15428 ;;		On exit  : 0/0
 15429 ;;		Unchanged: 0/0
 15430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;Total ram usage:        2 bytes
 15436 ;; Hardware stack levels used:    1
 15437 ;; Hardware stack levels required when called:    5
 15438 ;; This function calls:
 15439 ;;		Nothing
 15440 ;; This function is called by:
 15441 ;;		_setDimmerLights_Dimming
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445                           
 15446                           ;psect for function _setRF_TransceiveGO
 15447  1CD4                     _setRF_TransceiveGO:	
 15448                           
 15449                           ;incstack = 0
 15450                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15451                           ;setRF_TransceiveGO@command stored from wreg
 15452  1CD4  0020               	movlb	0	; select bank0
 15453  1CD5  00A1               	movwf	setRF_TransceiveGO@command
 15454                           
 15455                           ;RF_Control_B1.c: 507: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15456  1CD6  0821               	movf	setRF_TransceiveGO@command,w
 15457  1CD7  3A01               	xorlw	1
 15458  1CD8  3000               	movlw	0
 15459  1CD9  1903               	skipnz
 15460  1CDA  3001               	movlw	1
 15461  1CDB  00A0               	movwf	??_setRF_TransceiveGO
 15462  1CDC  0DA0               	rlf	??_setRF_TransceiveGO,f
 15463  1CDD  0DA0               	rlf	??_setRF_TransceiveGO,f
 15464  1CDE  0021               	movlb	1	; select bank1
 15465  1CDF  0820               	movf	_RF1^(0+128),w
 15466  1CE0  0020               	movlb	0	; select bank0
 15467  1CE1  0620               	xorwf	??_setRF_TransceiveGO,w
 15468  1CE2  39FB               	andlw	-5
 15469  1CE3  0620               	xorwf	??_setRF_TransceiveGO,w
 15470  1CE4  0021               	movlb	1	; select bank1
 15471  1CE5  00A0               	movwf	_RF1^(0+128)
 15472  1CE6  0008               	return
 15473  1CE7                     __end_of_setRF_TransceiveGO:	
 15474                           
 15475                           	psect	text104
 15476  179B                     __ptext104:	
 15477 ;; *************** function _setRF_DimmerLights *****************
 15478 ;; Defined at:
 15479 ;;		line 491 in file "../src/RF_Control_B1.c"
 15480 ;; Parameters:    Size  Location     Type
 15481 ;;  lights          1    wreg     unsigned char 
 15482 ;;  on              1   69[BANK0 ] unsigned char 
 15483 ;; Auto vars:     Size  Location     Type
 15484 ;;  lights          1   73[BANK0 ] unsigned char 
 15485 ;;  status          1   72[BANK0 ] unsigned char 
 15486 ;; Return value:  Size  Location     Type
 15487 ;;		None               void
 15488 ;; Registers used:
 15489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15490 ;; Tracked objects:
 15491 ;;		On entry : 0/0
 15492 ;;		On exit  : 0/0
 15493 ;;		Unchanged: 0/0
 15494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15495 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15496 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15498 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15499 ;;Total ram usage:        5 bytes
 15500 ;; Hardware stack levels used:    1
 15501 ;; Hardware stack levels required when called:    6
 15502 ;; This function calls:
 15503 ;;		_setProductData
 15504 ;; This function is called by:
 15505 ;;		_setDimmerLights_OnOff
 15506 ;;		_setDimmerLights_Dimming
 15507 ;;		_setRFSW_Control
 15508 ;; This function uses a non-reentrant model
 15509 ;;
 15510                           
 15511                           
 15512                           ;psect for function _setRF_DimmerLights
 15513  179B                     _setRF_DimmerLights:	
 15514                           
 15515                           ;incstack = 0
 15516                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15517                           ;setRF_DimmerLights@lights stored from wreg
 15518  179B  0020               	movlb	0	; select bank0
 15519  179C  00E9               	movwf	setRF_DimmerLights@lights
 15520                           
 15521                           ;RF_Control_B1.c: 492: char status = 1;
 15522  179D  01E8               	clrf	setRF_DimmerLights@status
 15523  179E  0AE8               	incf	setRF_DimmerLights@status,f
 15524                           
 15525                           ;RF_Control_B1.c: 493: status <<= (lights - 1);
 15526  179F  0869               	movf	setRF_DimmerLights@lights,w
 15527  17A0  3EFF               	addlw	-1
 15528  17A1  0A89               	incf	9,f
 15529  17A2  2FA5               	goto	u9680
 15530  17A3                     u9685:	
 15531  17A3  1003               	clrc
 15532  17A4  0DE8               	rlf	setRF_DimmerLights@status,f
 15533  17A5                     u9680:	
 15534  17A5  3EFF               	addlw	-1
 15535  17A6  1D03               	skipz
 15536  17A7  2FA3               	goto	u9685
 15537                           
 15538                           ;RF_Control_B1.c: 494: setProductData(11, lights);
 15539  17A8  0869               	movf	setRF_DimmerLights@lights,w
 15540  17A9  00E6               	movwf	??_setRF_DimmerLights
 15541  17AA  0866               	movf	??_setRF_DimmerLights,w
 15542  17AB  00E2               	movwf	setProductData@value
 15543  17AC  300B               	movlw	11
 15544  17AD  319B  234C  3197   	fcall	_setProductData
 15545                           
 15546                           ;RF_Control_B1.c: 495: setProductData(17, product->Data[26 + lights]);
 15547  17B0  0020               	movlb	0	; select bank0
 15548  17B1  0869               	movf	setRF_DimmerLights@lights,w
 15549  17B2  3E1A               	addlw	26
 15550  17B3  0021               	movlb	1	; select bank1
 15551  17B4  076C               	addwf	_product^(0+128),w
 15552  17B5  0020               	movlb	0	; select bank0
 15553  17B6  00E6               	movwf	??_setRF_DimmerLights
 15554  17B7  0866               	movf	??_setRF_DimmerLights,w
 15555  17B8  0086               	movwf	6
 15556  17B9  3002               	movlw	2	; select bank4/5
 15557  17BA  0087               	movwf	7
 15558  17BB  0801               	movf	1,w
 15559  17BC  00E7               	movwf	??_setRF_DimmerLights+1
 15560  17BD  0867               	movf	??_setRF_DimmerLights+1,w
 15561  17BE  00E2               	movwf	setProductData@value
 15562  17BF  3011               	movlw	17
 15563  17C0  319B  234C  3197   	fcall	_setProductData
 15564                           
 15565                           ;RF_Control_B1.c: 496: if (on == 1) {
 15566  17C3  0020               	movlb	0	; select bank0
 15567  17C4  0865               	movf	setRF_DimmerLights@on,w
 15568  17C5  3A01               	xorlw	1
 15569  17C6  1D03               	skipz
 15570  17C7  2FEA               	goto	l8905
 15571                           
 15572                           ;RF_Control_B1.c: 497: setProductData(9, product->Data[20 + lights]);
 15573  17C8  0869               	movf	setRF_DimmerLights@lights,w
 15574  17C9  3E14               	addlw	20
 15575  17CA  0021               	movlb	1	; select bank1
 15576  17CB  076C               	addwf	_product^(0+128),w
 15577  17CC  0020               	movlb	0	; select bank0
 15578  17CD  00E6               	movwf	??_setRF_DimmerLights
 15579  17CE  0866               	movf	??_setRF_DimmerLights,w
 15580  17CF  0086               	movwf	6
 15581  17D0  3002               	movlw	2	; select bank4/5
 15582  17D1  0087               	movwf	7
 15583  17D2  0801               	movf	1,w
 15584  17D3  00E7               	movwf	??_setRF_DimmerLights+1
 15585  17D4  0867               	movf	??_setRF_DimmerLights+1,w
 15586  17D5  00E2               	movwf	setProductData@value
 15587  17D6  3009               	movlw	9
 15588  17D7  319B  234C  3197   	fcall	_setProductData
 15589                           
 15590                           ;RF_Control_B1.c: 498: setProductData(15, (product->Data[15] | status));
 15591  17DA  0021               	movlb	1	; select bank1
 15592  17DB  086C               	movf	_product^(0+128),w
 15593  17DC  3E0F               	addlw	15
 15594  17DD  0086               	movwf	6
 15595  17DE  3002               	movlw	2	; select bank4/5
 15596  17DF  0087               	movwf	7
 15597  17E0  0801               	movf	1,w
 15598  17E1  0020               	movlb	0	; select bank0
 15599  17E2  0468               	iorwf	setRF_DimmerLights@status,w
 15600  17E3  00E6               	movwf	??_setRF_DimmerLights
 15601  17E4  0866               	movf	??_setRF_DimmerLights,w
 15602  17E5  00E2               	movwf	setProductData@value
 15603  17E6  300F               	movlw	15
 15604  17E7  319B  234C         	fcall	_setProductData
 15605                           
 15606                           ;RF_Control_B1.c: 499: } else {
 15607  17E9  0008               	return
 15608  17EA                     l8905:	
 15609                           
 15610                           ;RF_Control_B1.c: 500: setProductData(9, 0x00);
 15611  17EA  0020               	movlb	0	; select bank0
 15612  17EB  01E2               	clrf	setProductData@value
 15613  17EC  3009               	movlw	9
 15614  17ED  319B  234C  3197   	fcall	_setProductData
 15615                           
 15616                           ;RF_Control_B1.c: 501: setProductData(15, (product->Data[15]&(~status)));
 15617  17F0  0021               	movlb	1	; select bank1
 15618  17F1  086C               	movf	_product^(0+128),w
 15619  17F2  3E0F               	addlw	15
 15620  17F3  0086               	movwf	6
 15621  17F4  3002               	movlw	2	; select bank4/5
 15622  17F5  0087               	movwf	7
 15623  17F6  0020               	movlb	0	; select bank0
 15624  17F7  0968               	comf	setRF_DimmerLights@status,w
 15625  17F8  0501               	andwf	1,w
 15626  17F9  00E6               	movwf	??_setRF_DimmerLights
 15627  17FA  0866               	movf	??_setRF_DimmerLights,w
 15628  17FB  00E2               	movwf	setProductData@value
 15629  17FC  300F               	movlw	15
 15630  17FD  319B  234C         	fcall	_setProductData
 15631  17FF  0008               	return
 15632  1800                     __end_of_setRF_DimmerLights:	
 15633                           
 15634                           	psect	text105
 15635  1C13                     __ptext105:	
 15636 ;; *************** function _setDimmerLights_Line *****************
 15637 ;; Defined at:
 15638 ;;		line 1028 in file "../src/Dimmer_B1.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;  lights          1    wreg     unsigned char 
 15641 ;; Auto vars:     Size  Location     Type
 15642 ;;  lights          1    0[BANK0 ] unsigned char 
 15643 ;; Return value:  Size  Location     Type
 15644 ;;		None               void
 15645 ;; Registers used:
 15646 ;;		wreg
 15647 ;; Tracked objects:
 15648 ;;		On entry : 0/0
 15649 ;;		On exit  : 0/0
 15650 ;;		Unchanged: 0/0
 15651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;Total ram usage:        1 bytes
 15657 ;; Hardware stack levels used:    1
 15658 ;; Hardware stack levels required when called:    5
 15659 ;; This function calls:
 15660 ;;		Nothing
 15661 ;; This function is called by:
 15662 ;;		_setDimmerLights_OnOff
 15663 ;;		_setDimmerLights_Dimming
 15664 ;; This function uses a non-reentrant model
 15665 ;;
 15666                           
 15667                           
 15668                           ;psect for function _setDimmerLights_Line
 15669  1C13                     _setDimmerLights_Line:	
 15670                           
 15671                           ;incstack = 0
 15672                           ; Regs used in _setDimmerLights_Line: [wreg]
 15673                           ;setDimmerLights_Line@lights stored from wreg
 15674  1C13  0020               	movlb	0	; select bank0
 15675  1C14  00A0               	movwf	setDimmerLights_Line@lights
 15676                           
 15677                           ;Dimmer_B1.c: 1029: Dimmer.LoadGO = 1;
 15678  1C15  0022               	movlb	2	; select bank2
 15679  1C16  14AC               	bsf	_Dimmer^(0+256),1
 15680                           
 15681                           ;Dimmer_B1.c: 1031: DimmerLights1.Line = 0;
 15682  1C17  10DF               	bcf	(_DimmerLights1^(0+256)+1),1
 15683                           
 15684                           ;Dimmer_B1.c: 1032: if (lights == 1 && lights != 0) {
 15685  1C18  0020               	movlb	0	; select bank0
 15686  1C19  0820               	movf	setDimmerLights_Line@lights,w
 15687  1C1A  3A01               	xorlw	1
 15688  1C1B  1D03               	skipz
 15689  1C1C  0008               	return
 15690  1C1D  0820               	movf	setDimmerLights_Line@lights,w
 15691  1C1E  1903               	btfsc	3,2
 15692  1C1F  0008               	return
 15693                           
 15694                           ;Dimmer_B1.c: 1033: DimmerLights1.Line = 1;
 15695  1C20  0022               	movlb	2	; select bank2
 15696  1C21  14DF               	bsf	(_DimmerLights1^(0+256)+1),1
 15697  1C22  0020               	movlb	0	; select bank0
 15698  1C23  0008               	return
 15699  1C24                     __end_of_setDimmerLights_Line:	
 15700                           
 15701                           	psect	text106
 15702  1B58                     __ptext106:	
 15703 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15704 ;; Defined at:
 15705 ;;		line 132 in file "../src/Dimmer_B1.c"
 15706 ;; Parameters:    Size  Location     Type
 15707 ;;  lights          1    wreg     unsigned char 
 15708 ;;  value           1   66[BANK0 ] unsigned char 
 15709 ;; Auto vars:     Size  Location     Type
 15710 ;;  lights          1   68[BANK0 ] unsigned char 
 15711 ;; Return value:  Size  Location     Type
 15712 ;;		None               void
 15713 ;; Registers used:
 15714 ;;		wreg
 15715 ;; Tracked objects:
 15716 ;;		On entry : 0/0
 15717 ;;		On exit  : 0/0
 15718 ;;		Unchanged: 0/0
 15719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15720 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15721 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15724 ;;Total ram usage:        3 bytes
 15725 ;; Hardware stack levels used:    1
 15726 ;; Hardware stack levels required when called:    5
 15727 ;; This function calls:
 15728 ;;		Nothing
 15729 ;; This function is called by:
 15730 ;;		_setDimmerLights_OnOff
 15731 ;;		_setDimmerLights_Dimming
 15732 ;;		_setRFSW_AdjControl
 15733 ;; This function uses a non-reentrant model
 15734 ;;
 15735                           
 15736                           
 15737                           ;psect for function _setDimmerIntr_MaxmumValue
 15738  1B58                     _setDimmerIntr_MaxmumValue:	
 15739                           
 15740                           ;incstack = 0
 15741                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15742                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15743  1B58  0020               	movlb	0	; select bank0
 15744  1B59  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15745                           
 15746                           ;Dimmer_B1.c: 134: if (lights == 1) {
 15747  1B5A  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15748  1B5B  3A01               	xorlw	1
 15749  1B5C  1D03               	skipz
 15750  1B5D  0008               	return
 15751                           
 15752                           ;Dimmer_B1.c: 135: DimmerIntr1.MaxmumValue = value;
 15753  1B5E  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15754  1B5F  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15755  1B60  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15756  1B61  0021               	movlb	1	; select bank1
 15757  1B62  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 15758  1B63  0008               	return
 15759  1B64                     __end_of_setDimmerIntr_MaxmumValue:	
 15760                           
 15761                           	psect	text107
 15762  1D9E                     __ptext107:	
 15763 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15764 ;; Defined at:
 15765 ;;		line 209 in file "../src/Dimmer_B1.c"
 15766 ;; Parameters:    Size  Location     Type
 15767 ;;  lights          1    wreg     unsigned char 
 15768 ;;  command         1    0[BANK0 ] unsigned char 
 15769 ;; Auto vars:     Size  Location     Type
 15770 ;;  lights          1    2[BANK0 ] unsigned char 
 15771 ;; Return value:  Size  Location     Type
 15772 ;;		None               void
 15773 ;; Registers used:
 15774 ;;		wreg, status,2, status,0
 15775 ;; Tracked objects:
 15776 ;;		On entry : 0/0
 15777 ;;		On exit  : 0/0
 15778 ;;		Unchanged: 0/0
 15779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15780 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15783 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15784 ;;Total ram usage:        3 bytes
 15785 ;; Hardware stack levels used:    1
 15786 ;; Hardware stack levels required when called:    5
 15787 ;; This function calls:
 15788 ;;		Nothing
 15789 ;; This function is called by:
 15790 ;;		_setDimmerLights_Dimming
 15791 ;; This function uses a non-reentrant model
 15792 ;;
 15793                           
 15794                           
 15795                           ;psect for function _setDimmerIntr_Dimming_Sw
 15796  1D9E                     _setDimmerIntr_Dimming_Sw:	
 15797                           
 15798                           ;incstack = 0
 15799                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15800                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15801  1D9E  0020               	movlb	0	; select bank0
 15802  1D9F  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15803                           
 15804                           ;Dimmer_B1.c: 211: if (lights == 1) {
 15805  1DA0  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15806  1DA1  3A01               	xorlw	1
 15807  1DA2  1D03               	skipz
 15808  1DA3  0008               	return
 15809                           
 15810                           ;Dimmer_B1.c: 212: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15811  1DA4  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15812  1DA5  3A01               	xorlw	1
 15813  1DA6  3000               	movlw	0
 15814  1DA7  1903               	skipnz
 15815  1DA8  3001               	movlw	1
 15816  1DA9  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15817  1DAA  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15818  1DAB  0021               	movlb	1	; select bank1
 15819  1DAC  083C               	movf	_DimmerIntr1^(0+128),w
 15820  1DAD  0020               	movlb	0	; select bank0
 15821  1DAE  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15822  1DAF  39EF               	andlw	-17
 15823  1DB0  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15824  1DB1  0021               	movlb	1	; select bank1
 15825  1DB2  00BC               	movwf	_DimmerIntr1^(0+128)
 15826  1DB3  0008               	return
 15827  1DB4                     __end_of_setDimmerIntr_Dimming_Sw:	
 15828                           
 15829                           	psect	text108
 15830  1BD4                     __ptext108:	
 15831 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15832 ;; Defined at:
 15833 ;;		line 110 in file "../src/Dimmer_B1.c"
 15834 ;; Parameters:    Size  Location     Type
 15835 ;;  lights          1    wreg     unsigned char 
 15836 ;; Auto vars:     Size  Location     Type
 15837 ;;  lights          1    1[BANK0 ] unsigned char 
 15838 ;;  value           1    2[BANK0 ] unsigned char 
 15839 ;; Return value:  Size  Location     Type
 15840 ;;                  1    wreg      unsigned char 
 15841 ;; Registers used:
 15842 ;;		wreg, status,2
 15843 ;; Tracked objects:
 15844 ;;		On entry : 0/0
 15845 ;;		On exit  : 0/0
 15846 ;;		Unchanged: 0/0
 15847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15852 ;;Total ram usage:        3 bytes
 15853 ;; Hardware stack levels used:    1
 15854 ;; Hardware stack levels required when called:    5
 15855 ;; This function calls:
 15856 ;;		Nothing
 15857 ;; This function is called by:
 15858 ;;		_setDimmerLights_Dimming
 15859 ;; This function uses a non-reentrant model
 15860 ;;
 15861                           
 15862                           
 15863                           ;psect for function _getDimmerIntr_DimmingValue
 15864  1BD4                     _getDimmerIntr_DimmingValue:	
 15865                           
 15866                           ;incstack = 0
 15867                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15868                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15869  1BD4  0020               	movlb	0	; select bank0
 15870  1BD5  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 15871                           
 15872                           ;Dimmer_B1.c: 111: char value = 0;
 15873  1BD6  01A2               	clrf	getDimmerIntr_DimmingValue@value
 15874                           
 15875                           ;Dimmer_B1.c: 113: if (lights == 1) {
 15876  1BD7  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 15877  1BD8  3A01               	xorlw	1
 15878  1BD9  1D03               	skipz
 15879  1BDA  2BE1               	goto	l690
 15880                           
 15881                           ;Dimmer_B1.c: 114: value = DimmerIntr1.DimmingValue;
 15882  1BDB  0021               	movlb	1	; select bank1
 15883  1BDC  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 15884  1BDD  0020               	movlb	0	; select bank0
 15885  1BDE  00A0               	movwf	??_getDimmerIntr_DimmingValue
 15886  1BDF  0820               	movf	??_getDimmerIntr_DimmingValue,w
 15887  1BE0  00A2               	movwf	getDimmerIntr_DimmingValue@value
 15888  1BE1                     l690:	
 15889                           
 15890                           ;Dimmer_B1.c: 115: }
 15891                           ;Dimmer_B1.c: 127: return value;
 15892  1BE1  0822               	movf	getDimmerIntr_DimmingValue@value,w
 15893  1BE2  0008               	return
 15894  1BE3                     __end_of_getDimmerIntr_DimmingValue:	
 15895                           
 15896                           	psect	text109
 15897  1D88                     __ptext109:	
 15898 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15899 ;; Defined at:
 15900 ;;		line 989 in file "../src/Dimmer_B1.c"
 15901 ;; Parameters:    Size  Location     Type
 15902 ;;  lights          1    wreg     unsigned char 
 15903 ;; Auto vars:     Size  Location     Type
 15904 ;;  lights          1    0[COMMON] unsigned char 
 15905 ;;  allow           1    2[BANK0 ] unsigned char 
 15906 ;; Return value:  Size  Location     Type
 15907 ;;                  1    wreg      unsigned char 
 15908 ;; Registers used:
 15909 ;;		wreg, status,2, pclath, cstack
 15910 ;; Tracked objects:
 15911 ;;		On entry : 0/0
 15912 ;;		On exit  : 0/0
 15913 ;;		Unchanged: 0/0
 15914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15916 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15918 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15919 ;;Total ram usage:        3 bytes
 15920 ;; Hardware stack levels used:    1
 15921 ;; Hardware stack levels required when called:    6
 15922 ;; This function calls:
 15923 ;;		_getLoad_OK
 15924 ;; This function is called by:
 15925 ;;		_setDimmerLights_Main
 15926 ;; This function uses a non-reentrant model
 15927 ;;
 15928                           
 15929                           
 15930                           ;psect for function _getDimmerLights_Allow_Condition
 15931  1D88                     _getDimmerLights_Allow_Condition:	
 15932                           
 15933                           ;Dimmer_B1.c: 990: char allow = 0;
 15934                           
 15935                           ;incstack = 0
 15936                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 15937  1D88  0020               	movlb	0	; select bank0
 15938  1D89  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 15939                           
 15940                           ;Dimmer_B1.c: 996: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15941  1D8A  01A3               	clrf	_getDimmerLights_Allow_Condition$2285
 15942  1D8B  0AA3               	incf	_getDimmerLights_Allow_Condition$2285,f
 15943  1D8C  319A  22C8  319D   	fcall	_getLoad_OK
 15944  1D8F  3800               	iorlw	0
 15945  1D90  1D03               	skipz
 15946  1D91  2D97               	goto	l9517
 15947  1D92  0022               	movlb	2	; select bank2
 15948  1D93  18AC               	btfsc	_Dimmer^(0+256),1
 15949  1D94  2D97               	goto	l9517
 15950  1D95  0020               	movlb	0	; select bank0
 15951  1D96  01A3               	clrf	_getDimmerLights_Allow_Condition$2285
 15952  1D97                     l9517:	
 15953  1D97  0020               	movlb	0	; select bank0
 15954  1D98  0823               	movf	_getDimmerLights_Allow_Condition$2285,w
 15955  1D99  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15956  1D9A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15957  1D9B  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 15958                           
 15959                           ;Dimmer_B1.c: 1023: return allow;
 15960  1D9C  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 15961  1D9D  0008               	return
 15962  1D9E                     __end_of_getDimmerLights_Allow_Condition:	
 15963                           
 15964                           	psect	text110
 15965  1AC8                     __ptext110:	
 15966 ;; *************** function _getLoad_OK *****************
 15967 ;; Defined at:
 15968 ;;		line 274 in file "../src/OverLoad_B1.c"
 15969 ;; Parameters:    Size  Location     Type
 15970 ;;		None
 15971 ;; Auto vars:     Size  Location     Type
 15972 ;;  ok              1    0[BANK0 ] unsigned char 
 15973 ;; Return value:  Size  Location     Type
 15974 ;;                  1    wreg      unsigned char 
 15975 ;; Registers used:
 15976 ;;		wreg, status,2
 15977 ;; Tracked objects:
 15978 ;;		On entry : 0/0
 15979 ;;		On exit  : 0/0
 15980 ;;		Unchanged: 0/0
 15981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15985 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15986 ;;Total ram usage:        1 bytes
 15987 ;; Hardware stack levels used:    1
 15988 ;; Hardware stack levels required when called:    5
 15989 ;; This function calls:
 15990 ;;		Nothing
 15991 ;; This function is called by:
 15992 ;;		_DimmerLights_Main
 15993 ;;		_getDimmerLights_Allow_Condition
 15994 ;; This function uses a non-reentrant model
 15995 ;;
 15996                           
 15997                           
 15998                           ;psect for function _getLoad_OK
 15999  1AC8                     _getLoad_OK:	
 16000                           
 16001                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16002                           
 16003                           ;incstack = 0
 16004                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16005  1AC8  3000               	movlw	0
 16006  1AC9  0022               	movlb	2	; select bank2
 16007  1ACA  1BB6               	btfsc	_Load^(0+256),7
 16008  1ACB  3001               	movlw	1
 16009  1ACC  0020               	movlb	0	; select bank0
 16010  1ACD  00A0               	movwf	getLoad_OK@ok
 16011                           
 16012                           ;OverLoad_B1.c: 276: return ok;
 16013  1ACE  0820               	movf	getLoad_OK@ok,w
 16014  1ACF  0008               	return
 16015  1AD0                     __end_of_getLoad_OK:	
 16016                           
 16017                           	psect	text111
 16018  115B                     __ptext111:	
 16019 ;; *************** function _getMain_All_Error_Status *****************
 16020 ;; Defined at:
 16021 ;;		line 424 in file "../src/Main_B1.c"
 16022 ;; Parameters:    Size  Location     Type
 16023 ;;  command         1    wreg     unsigned char 
 16024 ;; Auto vars:     Size  Location     Type
 16025 ;;  command         1    5[BANK0 ] unsigned char 
 16026 ;;  status          1    6[BANK0 ] unsigned char 
 16027 ;; Return value:  Size  Location     Type
 16028 ;;                  1    wreg      unsigned char 
 16029 ;; Registers used:
 16030 ;;		wreg, status,2, status,0
 16031 ;; Tracked objects:
 16032 ;;		On entry : 0/0
 16033 ;;		On exit  : 0/0
 16034 ;;		Unchanged: 0/0
 16035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;Total ram usage:        7 bytes
 16041 ;; Hardware stack levels used:    1
 16042 ;; Hardware stack levels required when called:    5
 16043 ;; This function calls:
 16044 ;;		Nothing
 16045 ;; This function is called by:
 16046 ;;		_DimmerLights_Main
 16047 ;;		_Exception_Main
 16048 ;;		_Load_Main
 16049 ;;		_setTemp_Main
 16050 ;;		_getRxData
 16051 ;;		_setSw_Main
 16052 ;; This function uses a non-reentrant model
 16053 ;;
 16054                           
 16055                           
 16056                           ;psect for function _getMain_All_Error_Status
 16057  115B                     _getMain_All_Error_Status:	
 16058                           
 16059                           ;incstack = 0
 16060                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16061                           ;getMain_All_Error_Status@command stored from wreg
 16062  115B  0020               	movlb	0	; select bank0
 16063  115C  00A5               	movwf	getMain_All_Error_Status@command
 16064                           
 16065                           ;Main_B1.c: 425: char status = 0;
 16066  115D  01A6               	clrf	getMain_All_Error_Status@status
 16067                           
 16068                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16069  115E  08A6               	movf	getMain_All_Error_Status@status,f
 16070  115F  1D03               	skipz
 16071  1160  2975               	goto	l9255
 16072  1161  0825               	movf	getMain_All_Error_Status@command,w
 16073  1162  3A02               	xorlw	2
 16074  1163  1903               	skipnz
 16075  1164  2975               	goto	l9255
 16076                           
 16077                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16078  1165  0021               	movlb	1	; select bank1
 16079  1166  18DA               	btfsc	_Temp^(0+128),1
 16080  1167  296C               	goto	l9253
 16081  1168  0020               	movlb	0	; select bank0
 16082  1169  01A1               	clrf	_getMain_All_Error_Status$3616
 16083  116A  01A2               	clrf	_getMain_All_Error_Status$3616+1
 16084  116B  2971               	goto	l1469
 16085  116C                     l9253:	
 16086  116C  3002               	movlw	2
 16087  116D  0020               	movlb	0	; select bank0
 16088  116E  00A1               	movwf	_getMain_All_Error_Status$3616
 16089  116F  3000               	movlw	0
 16090  1170  00A2               	movwf	_getMain_All_Error_Status$3616+1
 16091  1171                     l1469:	
 16092  1171  0821               	movf	_getMain_All_Error_Status$3616,w
 16093  1172  00A0               	movwf	??_getMain_All_Error_Status
 16094  1173  0820               	movf	??_getMain_All_Error_Status,w
 16095  1174  00A6               	movwf	getMain_All_Error_Status@status
 16096  1175                     l9255:	
 16097                           
 16098                           ;Main_B1.c: 438: }
 16099                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16100  1175  08A6               	movf	getMain_All_Error_Status@status,f
 16101  1176  1D03               	skipz
 16102  1177  298C               	goto	l1470
 16103  1178  0825               	movf	getMain_All_Error_Status@command,w
 16104  1179  3A03               	xorlw	3
 16105  117A  1903               	skipnz
 16106  117B  298C               	goto	l1470
 16107                           
 16108                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16109  117C  0022               	movlb	2	; select bank2
 16110  117D  1AB6               	btfsc	_Load^(0+256),5
 16111  117E  2983               	goto	l9263
 16112  117F  0020               	movlb	0	; select bank0
 16113  1180  01A3               	clrf	_getMain_All_Error_Status$3617
 16114  1181  01A4               	clrf	_getMain_All_Error_Status$3617+1
 16115  1182  2988               	goto	l1474
 16116  1183                     l9263:	
 16117  1183  3003               	movlw	3
 16118  1184  0020               	movlb	0	; select bank0
 16119  1185  00A3               	movwf	_getMain_All_Error_Status$3617
 16120  1186  3000               	movlw	0
 16121  1187  00A4               	movwf	_getMain_All_Error_Status$3617+1
 16122  1188                     l1474:	
 16123  1188  0823               	movf	_getMain_All_Error_Status$3617,w
 16124  1189  00A0               	movwf	??_getMain_All_Error_Status
 16125  118A  0820               	movf	??_getMain_All_Error_Status,w
 16126  118B  00A6               	movwf	getMain_All_Error_Status@status
 16127  118C                     l1470:	
 16128                           
 16129                           ;Main_B1.c: 445: }
 16130                           ;Main_B1.c: 455: return status;
 16131  118C  0826               	movf	getMain_All_Error_Status@status,w
 16132  118D  0008               	return
 16133  118E                     __end_of_getMain_All_Error_Status:	
 16134                           
 16135                           	psect	text112
 16136  1AB3                     __ptext112:	
 16137 ;; *************** function _DimmerLights_Initialization *****************
 16138 ;; Defined at:
 16139 ;;		line 640 in file "../src/Dimmer_B1.c"
 16140 ;; Parameters:    Size  Location     Type
 16141 ;;		None
 16142 ;; Auto vars:     Size  Location     Type
 16143 ;;		None
 16144 ;; Return value:  Size  Location     Type
 16145 ;;		None               void
 16146 ;; Registers used:
 16147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16148 ;; Tracked objects:
 16149 ;;		On entry : 0/0
 16150 ;;		On exit  : 0/0
 16151 ;;		Unchanged: 0/0
 16152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;Total ram usage:        0 bytes
 16158 ;; Hardware stack levels used:    1
 16159 ;; Hardware stack levels required when called:    9
 16160 ;; This function calls:
 16161 ;;		_DimmerIntr_Initialization
 16162 ;;		_setDimmerLights_Initialization
 16163 ;; This function is called by:
 16164 ;;		_main
 16165 ;; This function uses a non-reentrant model
 16166 ;;
 16167                           
 16168                           
 16169                           ;psect for function _DimmerLights_Initialization
 16170  1AB3                     _DimmerLights_Initialization:	
 16171                           
 16172                           ;Dimmer_B1.c: 642: setDimmerLights_Initialization(1);
 16173                           
 16174                           ;incstack = 0
 16175                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16176  1AB3  3001               	movlw	1
 16177  1AB4  319A  2260  319A   	fcall	_setDimmerLights_Initialization
 16178                           
 16179                           ;Dimmer_B1.c: 652: DimmerIntr_Initialization();
 16180  1AB7  3195  25AF         	fcall	_DimmerIntr_Initialization
 16181  1AB9  0008               	return
 16182  1ABA                     __end_of_DimmerLights_Initialization:	
 16183                           
 16184                           	psect	text113
 16185  1A60                     __ptext113:	
 16186 ;; *************** function _setDimmerLights_Initialization *****************
 16187 ;; Defined at:
 16188 ;;		line 656 in file "../src/Dimmer_B1.c"
 16189 ;; Parameters:    Size  Location     Type
 16190 ;;  lights          1    wreg     unsigned char 
 16191 ;; Auto vars:     Size  Location     Type
 16192 ;;  lights          1    0[COMMON] unsigned char 
 16193 ;; Return value:  Size  Location     Type
 16194 ;;		None               void
 16195 ;; Registers used:
 16196 ;;		wreg
 16197 ;; Tracked objects:
 16198 ;;		On entry : 0/0
 16199 ;;		On exit  : 0/0
 16200 ;;		Unchanged: 0/0
 16201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16206 ;;Total ram usage:        0 bytes
 16207 ;; Hardware stack levels used:    1
 16208 ;; Hardware stack levels required when called:    5
 16209 ;; This function calls:
 16210 ;;		Nothing
 16211 ;; This function is called by:
 16212 ;;		_DimmerLights_Initialization
 16213 ;; This function uses a non-reentrant model
 16214 ;;
 16215                           
 16216                           
 16217                           ;psect for function _setDimmerLights_Initialization
 16218  1A60                     _setDimmerLights_Initialization:	
 16219                           
 16220                           ;incstack = 0
 16221                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16222  1A60  0008               	return
 16223  1A61                     __end_of_setDimmerLights_Initialization:	
 16224                           
 16225                           	psect	text114
 16226  15AF                     __ptext114:	
 16227 ;; *************** function _DimmerIntr_Initialization *****************
 16228 ;; Defined at:
 16229 ;;		line 7 in file "../src/Dimmer_B1.c"
 16230 ;; Parameters:    Size  Location     Type
 16231 ;;		None
 16232 ;; Auto vars:     Size  Location     Type
 16233 ;;		None
 16234 ;; Return value:  Size  Location     Type
 16235 ;;		None               void
 16236 ;; Registers used:
 16237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16238 ;; Tracked objects:
 16239 ;;		On entry : 0/0
 16240 ;;		On exit  : 0/0
 16241 ;;		Unchanged: 0/0
 16242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16245 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;Total ram usage:        2 bytes
 16248 ;; Hardware stack levels used:    1
 16249 ;; Hardware stack levels required when called:    8
 16250 ;; This function calls:
 16251 ;;		_Division
 16252 ;;		_getDimmerLights_PercentToValue
 16253 ;;		_getDimmerLights_ValueToPercent
 16254 ;;		_setMemory_Modify
 16255 ;; This function is called by:
 16256 ;;		_DimmerLights_Initialization
 16257 ;; This function uses a non-reentrant model
 16258 ;;
 16259                           
 16260                           
 16261                           ;psect for function _DimmerIntr_Initialization
 16262  15AF                     _DimmerIntr_Initialization:	
 16263                           
 16264                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16265                           
 16266                           ;incstack = 0
 16267                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16268  15AF  3007               	movlw	7
 16269  15B0  0020               	movlb	0	; select bank0
 16270  15B1  00E2               	movwf	??_DimmerIntr_Initialization
 16271  15B2  0862               	movf	??_DimmerIntr_Initialization,w
 16272  15B3  0021               	movlb	1	; select bank1
 16273  15B4  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16274                           
 16275                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(84*0.6));
 16276  15B5  3032               	movlw	50
 16277  15B6  0020               	movlb	0	; select bank0
 16278  15B7  00E2               	movwf	??_DimmerIntr_Initialization
 16279  15B8  0862               	movf	??_DimmerIntr_Initialization,w
 16280  15B9  0021               	movlb	1	; select bank1
 16281  15BA  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16282                           
 16283                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16284  15BB  3006               	movlw	6
 16285  15BC  0020               	movlb	0	; select bank0
 16286  15BD  00E2               	movwf	??_DimmerIntr_Initialization
 16287  15BE  0862               	movf	??_DimmerIntr_Initialization,w
 16288  15BF  0021               	movlb	1	; select bank1
 16289  15C0  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16290                           
 16291                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16292  15C1  1E39               	btfss	(_myMain^(0+128)+10),4
 16293  15C2  2DD3               	goto	l9823
 16294                           
 16295                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(84*0.6)));
 16296  15C3  3032               	movlw	50
 16297  15C4  3197  2736  3195   	fcall	_getDimmerLights_ValueToPercent
 16298  15C7  0020               	movlb	0	; select bank0
 16299  15C8  00E2               	movwf	??_DimmerIntr_Initialization
 16300  15C9  0021               	movlb	1	; select bank1
 16301  15CA  086C               	movf	_product^(0+128),w
 16302  15CB  3E15               	addlw	21
 16303  15CC  0086               	movwf	6
 16304  15CD  3002               	movlw	2	; select bank4/5
 16305  15CE  0087               	movwf	7
 16306  15CF  0020               	movlb	0	; select bank0
 16307  15D0  0862               	movf	??_DimmerIntr_Initialization,w
 16308  15D1  0081               	movwf	1
 16309                           
 16310                           ;Dimmer_B1.c: 18: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16311  15D2  0021               	movlb	1	; select bank1
 16312  15D3                     l9823:	
 16313                           ;Dimmer_B1.c: 19: } else {
 16314                           
 16315                           
 16316                           ;Dimmer_B1.c: 20: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16317  15D3  086C               	movf	_product^(0+128),w
 16318  15D4  3E15               	addlw	21
 16319  15D5  0086               	movwf	6
 16320  15D6  3002               	movlw	2	; select bank4/5
 16321  15D7  0087               	movwf	7
 16322  15D8  0801               	movf	1,w
 16323  15D9  3196  26D1  3195   	fcall	_getDimmerLights_PercentToValue
 16324  15DC  0020               	movlb	0	; select bank0
 16325  15DD  00E2               	movwf	??_DimmerIntr_Initialization
 16326  15DE  0862               	movf	??_DimmerIntr_Initialization,w
 16327  15DF  0021               	movlb	1	; select bank1
 16328  15E0  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16329                           
 16330                           ;Dimmer_B1.c: 21: }
 16331                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue2 = Division(((char)(84*0.6)), 2);
 16332  15E1  3002               	movlw	2
 16333  15E2  0020               	movlb	0	; select bank0
 16334  15E3  00E2               	movwf	??_DimmerIntr_Initialization
 16335  15E4  0862               	movf	??_DimmerIntr_Initialization,w
 16336  15E5  00A5               	movwf	Division@num
 16337  15E6  3032               	movlw	50
 16338  15E7  319B  23C5  3195   	fcall	_Division
 16339  15EA  0020               	movlb	0	; select bank0
 16340  15EB  00E3               	movwf	??_DimmerIntr_Initialization+1
 16341  15EC  0863               	movf	??_DimmerIntr_Initialization+1,w
 16342  15ED  0021               	movlb	1	; select bank1
 16343  15EE  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16344                           
 16345                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(84*0.6
      +                          )));
 16346  15EF  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16347  15F0  3E0A               	addlw	10
 16348  15F1  0020               	movlb	0	; select bank0
 16349  15F2  00E2               	movwf	??_DimmerIntr_Initialization
 16350  15F3  0862               	movf	??_DimmerIntr_Initialization,w
 16351  15F4  0021               	movlb	1	; select bank1
 16352  15F5  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16353                           
 16354                           ;Dimmer_B1.c: 32: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16355  15F6  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16356  15F7  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16357  15F8  0020               	movlb	0	; select bank0
 16358  15F9  00E2               	movwf	??_DimmerIntr_Initialization
 16359  15FA  0862               	movf	??_DimmerIntr_Initialization,w
 16360  15FB  0021               	movlb	1	; select bank1
 16361  15FC  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16362                           
 16363                           ;Dimmer_B1.c: 33: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16364  15FD  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16365  15FE  3E01               	addlw	1
 16366  15FF  0020               	movlb	0	; select bank0
 16367  1600  00E2               	movwf	??_DimmerIntr_Initialization
 16368  1601  0862               	movf	??_DimmerIntr_Initialization,w
 16369  1602  0021               	movlb	1	; select bank1
 16370  1603  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16371                           
 16372                           ;Dimmer_B1.c: 66: if (myMain.InitDimmer == 1) {
 16373  1604  1E39               	btfss	(_myMain^(0+128)+10),4
 16374  1605  0008               	return
 16375                           
 16376                           ;Dimmer_B1.c: 67: myMain.InitDimmer = 0;
 16377  1606  1239               	bcf	(_myMain^(0+128)+10),4
 16378                           
 16379                           ;Dimmer_B1.c: 68: myMain.SaveDimmer = 1;
 16380  1607  16B9               	bsf	(_myMain^(0+128)+10),5
 16381                           
 16382                           ;Dimmer_B1.c: 69: setMemory_Modify(1);
 16383  1608  3001               	movlw	1
 16384  1609  319C  24C1         	fcall	_setMemory_Modify
 16385  160B  0008               	return
 16386  160C                     __end_of_DimmerIntr_Initialization:	
 16387                           
 16388                           	psect	text115
 16389  1CC1                     __ptext115:	
 16390 ;; *************** function _setMemory_Modify *****************
 16391 ;; Defined at:
 16392 ;;		line 1083 in file "../src/MCU_B1.c"
 16393 ;; Parameters:    Size  Location     Type
 16394 ;;  command         1    wreg     unsigned char 
 16395 ;; Auto vars:     Size  Location     Type
 16396 ;;  command         1    1[BANK0 ] unsigned char 
 16397 ;; Return value:  Size  Location     Type
 16398 ;;		None               void
 16399 ;; Registers used:
 16400 ;;		wreg, status,2, status,0
 16401 ;; Tracked objects:
 16402 ;;		On entry : 0/0
 16403 ;;		On exit  : 0/0
 16404 ;;		Unchanged: 0/0
 16405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;Total ram usage:        2 bytes
 16411 ;; Hardware stack levels used:    1
 16412 ;; Hardware stack levels required when called:    5
 16413 ;; This function calls:
 16414 ;;		Nothing
 16415 ;; This function is called by:
 16416 ;;		_DimmerIntr_Initialization
 16417 ;;		_setDimmerLights_Dimming
 16418 ;;		_setLog_Code
 16419 ;;		_setRFSW_AdjControl
 16420 ;; This function uses a non-reentrant model
 16421 ;;
 16422                           
 16423                           
 16424                           ;psect for function _setMemory_Modify
 16425  1CC1                     _setMemory_Modify:	
 16426                           
 16427                           ;incstack = 0
 16428                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16429                           ;setMemory_Modify@command stored from wreg
 16430  1CC1  0020               	movlb	0	; select bank0
 16431  1CC2  00A1               	movwf	setMemory_Modify@command
 16432                           
 16433                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16434  1CC3  0821               	movf	setMemory_Modify@command,w
 16435  1CC4  3A01               	xorlw	1
 16436  1CC5  3000               	movlw	0
 16437  1CC6  1903               	skipnz
 16438  1CC7  3001               	movlw	1
 16439  1CC8  00A0               	movwf	??_setMemory_Modify
 16440  1CC9  0023               	movlb	3	; select bank3
 16441  1CCA  0862               	movf	(_Memory^(0+384)+36),w
 16442  1CCB  0020               	movlb	0	; select bank0
 16443  1CCC  0620               	xorwf	??_setMemory_Modify,w
 16444  1CCD  39FE               	andlw	-2
 16445  1CCE  0620               	xorwf	??_setMemory_Modify,w
 16446  1CCF  0023               	movlb	3	; select bank3
 16447  1CD0  00E2               	movwf	(_Memory^(0+384)+36)
 16448                           
 16449                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16450  1CD1  01E0               	clrf	(_Memory^(0+384)+34)
 16451  1CD2  01E1               	clrf	((_Memory+1)^(0+384)+34)
 16452  1CD3  0008               	return
 16453  1CD4                     __end_of_setMemory_Modify:	
 16454                           
 16455                           	psect	text116
 16456  1736                     __ptext116:	
 16457 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16458 ;; Defined at:
 16459 ;;		line 1128 in file "../src/Dimmer_B1.c"
 16460 ;; Parameters:    Size  Location     Type
 16461 ;;  value           1    wreg     unsigned char 
 16462 ;; Auto vars:     Size  Location     Type
 16463 ;;  value           1   62[BANK0 ] unsigned char 
 16464 ;;  i               3   63[BANK0 ] float 
 16465 ;; Return value:  Size  Location     Type
 16466 ;;                  1    wreg      unsigned char 
 16467 ;; Registers used:
 16468 ;;		wreg, status,2, status,0, pclath, cstack
 16469 ;; Tracked objects:
 16470 ;;		On entry : 0/0
 16471 ;;		On exit  : 0/0
 16472 ;;		Unchanged: 0/0
 16473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16475 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16476 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16477 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16478 ;;Total ram usage:        6 bytes
 16479 ;; Hardware stack levels used:    1
 16480 ;; Hardware stack levels required when called:    7
 16481 ;; This function calls:
 16482 ;;		___awtoft
 16483 ;;		___ftadd
 16484 ;;		___ftdiv
 16485 ;;		___ftneg
 16486 ;;		___fttol
 16487 ;; This function is called by:
 16488 ;;		_DimmerIntr_Initialization
 16489 ;;		_setDimmerLights_Dimming
 16490 ;; This function uses a non-reentrant model
 16491 ;;
 16492                           
 16493                           
 16494                           ;psect for function _getDimmerLights_ValueToPercent
 16495  1736                     _getDimmerLights_ValueToPercent:	
 16496                           
 16497                           ;incstack = 0
 16498                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16499                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16500  1736  0020               	movlb	0	; select bank0
 16501  1737  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16502                           
 16503                           ;Dimmer_B1.c: 1136: float i = ((char)(84*0.6)) - ((char)(10*0.6));
 16504  1738  3000               	movlw	0
 16505  1739  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16506  173A  3030               	movlw	48
 16507  173B  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16508  173C  3042               	movlw	66
 16509  173D  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16510                           
 16511                           ;Dimmer_B1.c: 1137: i /= 100;
 16512  173E  3000               	movlw	0
 16513  173F  00AE               	movwf	___ftdiv@f2
 16514  1740  30C8               	movlw	200
 16515  1741  00AF               	movwf	___ftdiv@f2+1
 16516  1742  3042               	movlw	66
 16517  1743  00B0               	movwf	___ftdiv@f2+2
 16518  1744  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16519  1745  00B1               	movwf	___ftdiv@f1
 16520  1746  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16521  1747  00B2               	movwf	___ftdiv@f1+1
 16522  1748  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16523  1749  00B3               	movwf	___ftdiv@f1+2
 16524  174A  318D  2537  3197   	fcall	___ftdiv
 16525  174D  0020               	movlb	0	; select bank0
 16526  174E  082E               	movf	?___ftdiv,w
 16527  174F  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16528  1750  082F               	movf	?___ftdiv+1,w
 16529  1751  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16530  1752  0830               	movf	?___ftdiv+2,w
 16531  1753  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16532                           
 16533                           ;Dimmer_B1.c: 1139: return (char) (100 - ((((char)(84*0.6)) - value) / i));
 16534  1754  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16535  1755  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16536  1756  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16537  1757  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16538  1758  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16539  1759  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16540  175A  1903               	skipnz
 16541  175B  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16542  175C  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16543  175D  3E32               	addlw	50
 16544  175E  00A8               	movwf	___awtoft@c
 16545  175F  3000               	movlw	0
 16546  1760  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16547  1761  00A9               	movwf	___awtoft@c+1
 16548  1762  319F  2796  3197   	fcall	___awtoft
 16549  1765  0020               	movlb	0	; select bank0
 16550  1766  0828               	movf	?___awtoft,w
 16551  1767  00B1               	movwf	___ftdiv@f1
 16552  1768  0829               	movf	?___awtoft+1,w
 16553  1769  00B2               	movwf	___ftdiv@f1+1
 16554  176A  082A               	movf	?___awtoft+2,w
 16555  176B  00B3               	movwf	___ftdiv@f1+2
 16556  176C  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16557  176D  00AE               	movwf	___ftdiv@f2
 16558  176E  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16559  176F  00AF               	movwf	___ftdiv@f2+1
 16560  1770  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16561  1771  00B0               	movwf	___ftdiv@f2+2
 16562  1772  318D  2537  3197   	fcall	___ftdiv
 16563  1775  0020               	movlb	0	; select bank0
 16564  1776  082E               	movf	?___ftdiv,w
 16565  1777  00BE               	movwf	___ftneg@f1
 16566  1778  082F               	movf	?___ftdiv+1,w
 16567  1779  00BF               	movwf	___ftneg@f1+1
 16568  177A  0830               	movf	?___ftdiv+2,w
 16569  177B  00C0               	movwf	___ftneg@f1+2
 16570  177C  319A  22E1  3197   	fcall	___ftneg
 16571  177F  0020               	movlb	0	; select bank0
 16572  1780  083E               	movf	?___ftneg,w
 16573  1781  00C4               	movwf	___ftadd@f2
 16574  1782  083F               	movf	?___ftneg+1,w
 16575  1783  00C5               	movwf	___ftadd@f2+1
 16576  1784  0840               	movf	?___ftneg+2,w
 16577  1785  00C6               	movwf	___ftadd@f2+2
 16578  1786  3000               	movlw	0
 16579  1787  00C1               	movwf	___ftadd@f1
 16580  1788  30C8               	movlw	200
 16581  1789  00C2               	movwf	___ftadd@f1+1
 16582  178A  3042               	movlw	66
 16583  178B  00C3               	movwf	___ftadd@f1+2
 16584  178C  3183  2381  3197   	fcall	___ftadd
 16585  178F  0020               	movlb	0	; select bank0
 16586  1790  0841               	movf	?___ftadd,w
 16587  1791  00CE               	movwf	___fttol@f1
 16588  1792  0842               	movf	?___ftadd+1,w
 16589  1793  00CF               	movwf	___fttol@f1+1
 16590  1794  0843               	movf	?___ftadd+2,w
 16591  1795  00D0               	movwf	___fttol@f1+2
 16592  1796  318C  2424         	fcall	___fttol
 16593  1798  0020               	movlb	0	; select bank0
 16594  1799  084E               	movf	?___fttol,w
 16595  179A  0008               	return
 16596  179B                     __end_of_getDimmerLights_ValueToPercent:	
 16597                           
 16598                           	psect	text117
 16599  16D1                     __ptext117:	
 16600 ;; *************** function _getDimmerLights_PercentToValue *****************
 16601 ;; Defined at:
 16602 ;;		line 1112 in file "../src/Dimmer_B1.c"
 16603 ;; Parameters:    Size  Location     Type
 16604 ;;  value           1    wreg     unsigned char 
 16605 ;; Auto vars:     Size  Location     Type
 16606 ;;  value           1   62[BANK0 ] unsigned char 
 16607 ;;  i               3   63[BANK0 ] float 
 16608 ;; Return value:  Size  Location     Type
 16609 ;;                  1    wreg      unsigned char 
 16610 ;; Registers used:
 16611 ;;		wreg, status,2, status,0, pclath, cstack
 16612 ;; Tracked objects:
 16613 ;;		On entry : 0/0
 16614 ;;		On exit  : 0/0
 16615 ;;		Unchanged: 0/0
 16616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;Total ram usage:        6 bytes
 16622 ;; Hardware stack levels used:    1
 16623 ;; Hardware stack levels required when called:    7
 16624 ;; This function calls:
 16625 ;;		___awtoft
 16626 ;;		___ftadd
 16627 ;;		___ftdiv
 16628 ;;		___ftmul
 16629 ;;		___ftneg
 16630 ;;		___fttol
 16631 ;; This function is called by:
 16632 ;;		_DimmerIntr_Initialization
 16633 ;;		_setDimmerLights_OnOff
 16634 ;;		_setRFSW_AdjControl
 16635 ;; This function uses a non-reentrant model
 16636 ;;
 16637                           
 16638                           
 16639                           ;psect for function _getDimmerLights_PercentToValue
 16640  16D1                     _getDimmerLights_PercentToValue:	
 16641                           
 16642                           ;incstack = 0
 16643                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16644                           ;getDimmerLights_PercentToValue@value stored from wreg
 16645  16D1  0020               	movlb	0	; select bank0
 16646  16D2  00DE               	movwf	getDimmerLights_PercentToValue@value
 16647                           
 16648                           ;Dimmer_B1.c: 1120: float i = ((char)(84*0.6)) - ((char)(10*0.6));
 16649  16D3  3000               	movlw	0
 16650  16D4  00DF               	movwf	getDimmerLights_PercentToValue@i
 16651  16D5  3030               	movlw	48
 16652  16D6  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16653  16D7  3042               	movlw	66
 16654  16D8  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16655                           
 16656                           ;Dimmer_B1.c: 1121: i /= 100;
 16657  16D9  3000               	movlw	0
 16658  16DA  00AE               	movwf	___ftdiv@f2
 16659  16DB  30C8               	movlw	200
 16660  16DC  00AF               	movwf	___ftdiv@f2+1
 16661  16DD  3042               	movlw	66
 16662  16DE  00B0               	movwf	___ftdiv@f2+2
 16663  16DF  085F               	movf	getDimmerLights_PercentToValue@i,w
 16664  16E0  00B1               	movwf	___ftdiv@f1
 16665  16E1  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16666  16E2  00B2               	movwf	___ftdiv@f1+1
 16667  16E3  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16668  16E4  00B3               	movwf	___ftdiv@f1+2
 16669  16E5  318D  2537  3196   	fcall	___ftdiv
 16670  16E8  0020               	movlb	0	; select bank0
 16671  16E9  082E               	movf	?___ftdiv,w
 16672  16EA  00DF               	movwf	getDimmerLights_PercentToValue@i
 16673  16EB  082F               	movf	?___ftdiv+1,w
 16674  16EC  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16675  16ED  0830               	movf	?___ftdiv+2,w
 16676  16EE  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16677                           
 16678                           ;Dimmer_B1.c: 1123: return (char) (((char)(84*0.6)) - ((100 - value) * i));
 16679  16EF  085E               	movf	getDimmerLights_PercentToValue@value,w
 16680  16F0  00DC               	movwf	??_getDimmerLights_PercentToValue
 16681  16F1  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16682  16F2  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16683  16F3  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16684  16F4  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16685  16F5  1903               	skipnz
 16686  16F6  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16687  16F7  085C               	movf	??_getDimmerLights_PercentToValue,w
 16688  16F8  3E64               	addlw	100
 16689  16F9  00A8               	movwf	___awtoft@c
 16690  16FA  3000               	movlw	0
 16691  16FB  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16692  16FC  00A9               	movwf	___awtoft@c+1
 16693  16FD  319F  2796  3196   	fcall	___awtoft
 16694  1700  0020               	movlb	0	; select bank0
 16695  1701  0828               	movf	?___awtoft,w
 16696  1702  00B1               	movwf	___ftmul@f2
 16697  1703  0829               	movf	?___awtoft+1,w
 16698  1704  00B2               	movwf	___ftmul@f2+1
 16699  1705  082A               	movf	?___awtoft+2,w
 16700  1706  00B3               	movwf	___ftmul@f2+2
 16701  1707  085F               	movf	getDimmerLights_PercentToValue@i,w
 16702  1708  00AE               	movwf	___ftmul@f1
 16703  1709  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16704  170A  00AF               	movwf	___ftmul@f1+1
 16705  170B  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16706  170C  00B0               	movwf	___ftmul@f1+2
 16707  170D  318E  2691  3196   	fcall	___ftmul
 16708  1710  0020               	movlb	0	; select bank0
 16709  1711  082E               	movf	?___ftmul,w
 16710  1712  00BE               	movwf	___ftneg@f1
 16711  1713  082F               	movf	?___ftmul+1,w
 16712  1714  00BF               	movwf	___ftneg@f1+1
 16713  1715  0830               	movf	?___ftmul+2,w
 16714  1716  00C0               	movwf	___ftneg@f1+2
 16715  1717  319A  22E1  3196   	fcall	___ftneg
 16716  171A  0020               	movlb	0	; select bank0
 16717  171B  083E               	movf	?___ftneg,w
 16718  171C  00C4               	movwf	___ftadd@f2
 16719  171D  083F               	movf	?___ftneg+1,w
 16720  171E  00C5               	movwf	___ftadd@f2+1
 16721  171F  0840               	movf	?___ftneg+2,w
 16722  1720  00C6               	movwf	___ftadd@f2+2
 16723  1721  3000               	movlw	0
 16724  1722  00C1               	movwf	___ftadd@f1
 16725  1723  3048               	movlw	72
 16726  1724  00C2               	movwf	___ftadd@f1+1
 16727  1725  3042               	movlw	66
 16728  1726  00C3               	movwf	___ftadd@f1+2
 16729  1727  3183  2381  3196   	fcall	___ftadd
 16730  172A  0020               	movlb	0	; select bank0
 16731  172B  0841               	movf	?___ftadd,w
 16732  172C  00CE               	movwf	___fttol@f1
 16733  172D  0842               	movf	?___ftadd+1,w
 16734  172E  00CF               	movwf	___fttol@f1+1
 16735  172F  0843               	movf	?___ftadd+2,w
 16736  1730  00D0               	movwf	___fttol@f1+2
 16737  1731  318C  2424         	fcall	___fttol
 16738  1733  0020               	movlb	0	; select bank0
 16739  1734  084E               	movf	?___fttol,w
 16740  1735  0008               	return
 16741  1736                     __end_of_getDimmerLights_PercentToValue:	
 16742                           
 16743                           	psect	text118
 16744  0C24                     __ptext118:	
 16745 ;; *************** function ___fttol *****************
 16746 ;; Defined at:
 16747 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16748 ;; Parameters:    Size  Location     Type
 16749 ;;  f1              3   46[BANK0 ] float 
 16750 ;; Auto vars:     Size  Location     Type
 16751 ;;  lval            4   55[BANK0 ] unsigned long 
 16752 ;;  exp1            1   59[BANK0 ] unsigned char 
 16753 ;;  sign1           1   54[BANK0 ] unsigned char 
 16754 ;; Return value:  Size  Location     Type
 16755 ;;                  4   46[BANK0 ] long 
 16756 ;; Registers used:
 16757 ;;		wreg, status,2, status,0
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16763 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;Total ram usage:       14 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    5
 16770 ;; This function calls:
 16771 ;;		Nothing
 16772 ;; This function is called by:
 16773 ;;		_getDimmerLights_PercentToValue
 16774 ;;		_getDimmerLights_ValueToPercent
 16775 ;; This function uses a non-reentrant model
 16776 ;;
 16777                           
 16778                           
 16779                           ;psect for function ___fttol
 16780  0C24                     ___fttol:	
 16781                           
 16782                           ;incstack = 0
 16783                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16784  0C24  0020               	movlb	0	; select bank0
 16785  0C25  084E               	movf	___fttol@f1,w
 16786  0C26  00D2               	movwf	??___fttol
 16787  0C27  084F               	movf	___fttol@f1+1,w
 16788  0C28  00D3               	movwf	??___fttol+1
 16789  0C29  0850               	movf	___fttol@f1+2,w
 16790  0C2A  00D4               	movwf	??___fttol+2
 16791  0C2B  1003               	clrc
 16792  0C2C  0D53               	rlf	??___fttol+1,w
 16793  0C2D  0D54               	rlf	??___fttol+2,w
 16794  0C2E  00D5               	movwf	??___fttol+3
 16795  0C2F  0855               	movf	??___fttol+3,w
 16796  0C30  00DB               	movwf	___fttol@exp1
 16797  0C31  08DB               	movf	___fttol@exp1,f
 16798  0C32  1D03               	skipz
 16799  0C33  2C3D               	goto	l8737
 16800  0C34  3000               	movlw	0
 16801  0C35  00D1               	movwf	?___fttol+3
 16802  0C36  3000               	movlw	0
 16803  0C37  00D0               	movwf	?___fttol+2
 16804  0C38  3000               	movlw	0
 16805  0C39  00CF               	movwf	?___fttol+1
 16806  0C3A  3000               	movlw	0
 16807  0C3B  00CE               	movwf	?___fttol
 16808  0C3C  0008               	return
 16809  0C3D                     l8737:	
 16810  0C3D  084E               	movf	___fttol@f1,w
 16811  0C3E  00D2               	movwf	??___fttol
 16812  0C3F  084F               	movf	___fttol@f1+1,w
 16813  0C40  00D3               	movwf	??___fttol+1
 16814  0C41  0850               	movf	___fttol@f1+2,w
 16815  0C42  00D4               	movwf	??___fttol+2
 16816  0C43  3017               	movlw	23
 16817  0C44                     u9425:	
 16818  0C44  36D4               	lsrf	??___fttol+2,f
 16819  0C45  0CD3               	rrf	??___fttol+1,f
 16820  0C46  0CD2               	rrf	??___fttol,f
 16821  0C47  0B89               	decfsz	9,f
 16822  0C48  2C44               	goto	u9425
 16823  0C49  0852               	movf	??___fttol,w
 16824  0C4A  00D5               	movwf	??___fttol+3
 16825  0C4B  0855               	movf	??___fttol+3,w
 16826  0C4C  00D6               	movwf	___fttol@sign1
 16827  0C4D  17CF               	bsf	___fttol@f1+1,7
 16828  0C4E  30FF               	movlw	255
 16829  0C4F  05CE               	andwf	___fttol@f1,f
 16830  0C50  30FF               	movlw	255
 16831  0C51  05CF               	andwf	___fttol@f1+1,f
 16832  0C52  3000               	movlw	0
 16833  0C53  05D0               	andwf	___fttol@f1+2,f
 16834  0C54  084E               	movf	___fttol@f1,w
 16835  0C55  00D7               	movwf	___fttol@lval
 16836  0C56  084F               	movf	___fttol@f1+1,w
 16837  0C57  00D8               	movwf	___fttol@lval+1
 16838  0C58  0850               	movf	___fttol@f1+2,w
 16839  0C59  00D9               	movwf	___fttol@lval+2
 16840  0C5A  01DA               	clrf	___fttol@lval+3
 16841  0C5B  308E               	movlw	142
 16842  0C5C  02DB               	subwf	___fttol@exp1,f
 16843  0C5D  1FDB               	btfss	___fttol@exp1,7
 16844  0C5E  2C7B               	goto	l8757
 16845  0C5F  085B               	movf	___fttol@exp1,w
 16846  0C60  3A80               	xorlw	128
 16847  0C61  3E8F               	addlw	143
 16848  0C62  1803               	skipnc
 16849  0C63  2C6D               	goto	l8755
 16850  0C64  3000               	movlw	0
 16851  0C65  00D1               	movwf	?___fttol+3
 16852  0C66  3000               	movlw	0
 16853  0C67  00D0               	movwf	?___fttol+2
 16854  0C68  3000               	movlw	0
 16855  0C69  00CF               	movwf	?___fttol+1
 16856  0C6A  3000               	movlw	0
 16857  0C6B  00CE               	movwf	?___fttol
 16858  0C6C  0008               	return
 16859  0C6D                     l8755:	
 16860  0C6D  3001               	movlw	1
 16861  0C6E                     u9455:	
 16862  0C6E  36DA               	lsrf	___fttol@lval+3,f
 16863  0C6F  0CD9               	rrf	___fttol@lval+2,f
 16864  0C70  0CD8               	rrf	___fttol@lval+1,f
 16865  0C71  0CD7               	rrf	___fttol@lval,f
 16866  0C72  0B89               	decfsz	9,f
 16867  0C73  2C6E               	goto	u9455
 16868  0C74  3001               	movlw	1
 16869  0C75  00D2               	movwf	??___fttol
 16870  0C76  0852               	movf	??___fttol,w
 16871  0C77  07DB               	addwf	___fttol@exp1,f
 16872  0C78  1903               	btfsc	3,2
 16873  0C79  2C94               	goto	l8767
 16874  0C7A  2C6D               	goto	l8755
 16875  0C7B                     l8757:	
 16876  0C7B  3018               	movlw	24
 16877  0C7C  025B               	subwf	___fttol@exp1,w
 16878  0C7D  1C03               	skipc
 16879  0C7E  2C91               	goto	l8765
 16880  0C7F  3000               	movlw	0
 16881  0C80  00D1               	movwf	?___fttol+3
 16882  0C81  3000               	movlw	0
 16883  0C82  00D0               	movwf	?___fttol+2
 16884  0C83  3000               	movlw	0
 16885  0C84  00CF               	movwf	?___fttol+1
 16886  0C85  3000               	movlw	0
 16887  0C86  00CE               	movwf	?___fttol
 16888  0C87  0008               	return
 16889  0C88                     l8763:	
 16890  0C88  3001               	movlw	1
 16891  0C89                     u9485:	
 16892  0C89  35D7               	lslf	___fttol@lval,f
 16893  0C8A  0DD8               	rlf	___fttol@lval+1,f
 16894  0C8B  0DD9               	rlf	___fttol@lval+2,f
 16895  0C8C  0DDA               	rlf	___fttol@lval+3,f
 16896  0C8D  0B89               	decfsz	9,f
 16897  0C8E  2C89               	goto	u9485
 16898  0C8F  3001               	movlw	1
 16899  0C90  02DB               	subwf	___fttol@exp1,f
 16900  0C91                     l8765:	
 16901  0C91  08DB               	movf	___fttol@exp1,f
 16902  0C92  1D03               	skipz
 16903  0C93  2C88               	goto	l8763
 16904  0C94                     l8767:	
 16905  0C94  0856               	movf	___fttol@sign1,w
 16906  0C95  1903               	btfsc	3,2
 16907  0C96  2CA2               	goto	l8771
 16908  0C97  09D7               	comf	___fttol@lval,f
 16909  0C98  09D8               	comf	___fttol@lval+1,f
 16910  0C99  09D9               	comf	___fttol@lval+2,f
 16911  0C9A  09DA               	comf	___fttol@lval+3,f
 16912  0C9B  0AD7               	incf	___fttol@lval,f
 16913  0C9C  1903               	skipnz
 16914  0C9D  0AD8               	incf	___fttol@lval+1,f
 16915  0C9E  1903               	skipnz
 16916  0C9F  0AD9               	incf	___fttol@lval+2,f
 16917  0CA0  1903               	skipnz
 16918  0CA1  0ADA               	incf	___fttol@lval+3,f
 16919  0CA2                     l8771:	
 16920  0CA2  085A               	movf	___fttol@lval+3,w
 16921  0CA3  00D1               	movwf	?___fttol+3
 16922  0CA4  0859               	movf	___fttol@lval+2,w
 16923  0CA5  00D0               	movwf	?___fttol+2
 16924  0CA6  0858               	movf	___fttol@lval+1,w
 16925  0CA7  00CF               	movwf	?___fttol+1
 16926  0CA8  0857               	movf	___fttol@lval,w
 16927  0CA9  00CE               	movwf	?___fttol
 16928  0CAA  0008               	return
 16929  0CAB                     __end_of___fttol:	
 16930                           
 16931                           	psect	text119
 16932  1AE1                     __ptext119:	
 16933 ;; *************** function ___ftneg *****************
 16934 ;; Defined at:
 16935 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16936 ;; Parameters:    Size  Location     Type
 16937 ;;  f1              3   30[BANK0 ] float 
 16938 ;; Auto vars:     Size  Location     Type
 16939 ;;		None
 16940 ;; Return value:  Size  Location     Type
 16941 ;;                  3   30[BANK0 ] float 
 16942 ;; Registers used:
 16943 ;;		wreg
 16944 ;; Tracked objects:
 16945 ;;		On entry : 0/0
 16946 ;;		On exit  : 0/0
 16947 ;;		Unchanged: 0/0
 16948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16949 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;Total ram usage:        3 bytes
 16954 ;; Hardware stack levels used:    1
 16955 ;; Hardware stack levels required when called:    5
 16956 ;; This function calls:
 16957 ;;		Nothing
 16958 ;; This function is called by:
 16959 ;;		_getDimmerLights_PercentToValue
 16960 ;;		_getDimmerLights_ValueToPercent
 16961 ;; This function uses a non-reentrant model
 16962 ;;
 16963                           
 16964                           
 16965                           ;psect for function ___ftneg
 16966  1AE1                     ___ftneg:	
 16967                           
 16968                           ;incstack = 0
 16969                           ; Regs used in ___ftneg: [wreg]
 16970  1AE1  0020               	movlb	0	; select bank0
 16971  1AE2  0840               	movf	___ftneg@f1+2,w
 16972  1AE3  043F               	iorwf	___ftneg@f1+1,w
 16973  1AE4  043E               	iorwf	___ftneg@f1,w
 16974  1AE5  1903               	skipnz
 16975  1AE6  0008               	return
 16976  1AE7  3080               	movlw	128
 16977  1AE8  06C0               	xorwf	___ftneg@f1+2,f
 16978  1AE9  0008               	return
 16979  1AEA                     __end_of___ftneg:	
 16980                           
 16981                           	psect	text120
 16982  0E91                     __ptext120:	
 16983 ;; *************** function ___ftmul *****************
 16984 ;; Defined at:
 16985 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16986 ;; Parameters:    Size  Location     Type
 16987 ;;  f1              3   14[BANK0 ] float 
 16988 ;;  f2              3   17[BANK0 ] float 
 16989 ;; Auto vars:     Size  Location     Type
 16990 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 16991 ;;  sign            1   29[BANK0 ] unsigned char 
 16992 ;;  cntr            1   28[BANK0 ] unsigned char 
 16993 ;;  exp             1   24[BANK0 ] unsigned char 
 16994 ;; Return value:  Size  Location     Type
 16995 ;;                  3   14[BANK0 ] float 
 16996 ;; Registers used:
 16997 ;;		wreg, status,2, status,0, pclath, cstack
 16998 ;; Tracked objects:
 16999 ;;		On entry : 0/0
 17000 ;;		On exit  : 0/0
 17001 ;;		Unchanged: 0/0
 17002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17003 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17004 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17005 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17006 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17007 ;;Total ram usage:       16 bytes
 17008 ;; Hardware stack levels used:    1
 17009 ;; Hardware stack levels required when called:    6
 17010 ;; This function calls:
 17011 ;;		___ftpack
 17012 ;; This function is called by:
 17013 ;;		_getDimmerLights_PercentToValue
 17014 ;; This function uses a non-reentrant model
 17015 ;;
 17016                           
 17017                           
 17018                           ;psect for function ___ftmul
 17019  0E91                     ___ftmul:	
 17020                           
 17021                           ;incstack = 0
 17022                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17023  0E91  0020               	movlb	0	; select bank0
 17024  0E92  082E               	movf	___ftmul@f1,w
 17025  0E93  00B4               	movwf	??___ftmul
 17026  0E94  082F               	movf	___ftmul@f1+1,w
 17027  0E95  00B5               	movwf	??___ftmul+1
 17028  0E96  0830               	movf	___ftmul@f1+2,w
 17029  0E97  00B6               	movwf	??___ftmul+2
 17030  0E98  1003               	clrc
 17031  0E99  0D35               	rlf	??___ftmul+1,w
 17032  0E9A  0D36               	rlf	??___ftmul+2,w
 17033  0E9B  00B7               	movwf	??___ftmul+3
 17034  0E9C  0837               	movf	??___ftmul+3,w
 17035  0E9D  00B8               	movwf	___ftmul@exp
 17036  0E9E  08B8               	movf	___ftmul@exp,f
 17037  0E9F  1D03               	skipz
 17038  0EA0  2EA8               	goto	l8679
 17039  0EA1  3000               	movlw	0
 17040  0EA2  00AE               	movwf	?___ftmul
 17041  0EA3  3000               	movlw	0
 17042  0EA4  00AF               	movwf	?___ftmul+1
 17043  0EA5  3000               	movlw	0
 17044  0EA6  00B0               	movwf	?___ftmul+2
 17045  0EA7  0008               	return
 17046  0EA8                     l8679:	
 17047  0EA8  0831               	movf	___ftmul@f2,w
 17048  0EA9  00B4               	movwf	??___ftmul
 17049  0EAA  0832               	movf	___ftmul@f2+1,w
 17050  0EAB  00B5               	movwf	??___ftmul+1
 17051  0EAC  0833               	movf	___ftmul@f2+2,w
 17052  0EAD  00B6               	movwf	??___ftmul+2
 17053  0EAE  1003               	clrc
 17054  0EAF  0D35               	rlf	??___ftmul+1,w
 17055  0EB0  0D36               	rlf	??___ftmul+2,w
 17056  0EB1  00B7               	movwf	??___ftmul+3
 17057  0EB2  0837               	movf	??___ftmul+3,w
 17058  0EB3  00BD               	movwf	___ftmul@sign
 17059  0EB4  08BD               	movf	___ftmul@sign,f
 17060  0EB5  1D03               	skipz
 17061  0EB6  2EBE               	goto	l8685
 17062  0EB7  3000               	movlw	0
 17063  0EB8  00AE               	movwf	?___ftmul
 17064  0EB9  3000               	movlw	0
 17065  0EBA  00AF               	movwf	?___ftmul+1
 17066  0EBB  3000               	movlw	0
 17067  0EBC  00B0               	movwf	?___ftmul+2
 17068  0EBD  0008               	return
 17069  0EBE                     l8685:	
 17070  0EBE  083D               	movf	___ftmul@sign,w
 17071  0EBF  3E7B               	addlw	123
 17072  0EC0  00B4               	movwf	??___ftmul
 17073  0EC1  0834               	movf	??___ftmul,w
 17074  0EC2  07B8               	addwf	___ftmul@exp,f
 17075  0EC3  082E               	movf	___ftmul@f1,w
 17076  0EC4  00B4               	movwf	??___ftmul
 17077  0EC5  082F               	movf	___ftmul@f1+1,w
 17078  0EC6  00B5               	movwf	??___ftmul+1
 17079  0EC7  0830               	movf	___ftmul@f1+2,w
 17080  0EC8  00B6               	movwf	??___ftmul+2
 17081  0EC9  3010               	movlw	16
 17082  0ECA                     u9305:	
 17083  0ECA  36B6               	lsrf	??___ftmul+2,f
 17084  0ECB  0CB5               	rrf	??___ftmul+1,f
 17085  0ECC  0CB4               	rrf	??___ftmul,f
 17086  0ECD  0B89               	decfsz	9,f
 17087  0ECE  2ECA               	goto	u9305
 17088  0ECF  0834               	movf	??___ftmul,w
 17089  0ED0  00B7               	movwf	??___ftmul+3
 17090  0ED1  0837               	movf	??___ftmul+3,w
 17091  0ED2  00BD               	movwf	___ftmul@sign
 17092  0ED3  0831               	movf	___ftmul@f2,w
 17093  0ED4  00B4               	movwf	??___ftmul
 17094  0ED5  0832               	movf	___ftmul@f2+1,w
 17095  0ED6  00B5               	movwf	??___ftmul+1
 17096  0ED7  0833               	movf	___ftmul@f2+2,w
 17097  0ED8  00B6               	movwf	??___ftmul+2
 17098  0ED9  3010               	movlw	16
 17099  0EDA                     u9315:	
 17100  0EDA  36B6               	lsrf	??___ftmul+2,f
 17101  0EDB  0CB5               	rrf	??___ftmul+1,f
 17102  0EDC  0CB4               	rrf	??___ftmul,f
 17103  0EDD  0B89               	decfsz	9,f
 17104  0EDE  2EDA               	goto	u9315
 17105  0EDF  0834               	movf	??___ftmul,w
 17106  0EE0  00B7               	movwf	??___ftmul+3
 17107  0EE1  0837               	movf	??___ftmul+3,w
 17108  0EE2  06BD               	xorwf	___ftmul@sign,f
 17109  0EE3  3080               	movlw	128
 17110  0EE4  00B4               	movwf	??___ftmul
 17111  0EE5  0834               	movf	??___ftmul,w
 17112  0EE6  05BD               	andwf	___ftmul@sign,f
 17113  0EE7  17AF               	bsf	___ftmul@f1+1,7
 17114  0EE8  17B2               	bsf	___ftmul@f2+1,7
 17115  0EE9  30FF               	movlw	255
 17116  0EEA  05B1               	andwf	___ftmul@f2,f
 17117  0EEB  30FF               	movlw	255
 17118  0EEC  05B2               	andwf	___ftmul@f2+1,f
 17119  0EED  3000               	movlw	0
 17120  0EEE  05B3               	andwf	___ftmul@f2+2,f
 17121  0EEF  3000               	movlw	0
 17122  0EF0  00B9               	movwf	___ftmul@f3_as_product
 17123  0EF1  3000               	movlw	0
 17124  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 17125  0EF3  3000               	movlw	0
 17126  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 17127  0EF5  3007               	movlw	7
 17128  0EF6  00B4               	movwf	??___ftmul
 17129  0EF7  0834               	movf	??___ftmul,w
 17130  0EF8  00BC               	movwf	___ftmul@cntr
 17131  0EF9                     l8697:	
 17132  0EF9  1C2E               	btfss	___ftmul@f1,0
 17133  0EFA  2F01               	goto	l8701
 17134  0EFB  0831               	movf	___ftmul@f2,w
 17135  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 17136  0EFD  0832               	movf	___ftmul@f2+1,w
 17137  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17138  0EFF  0833               	movf	___ftmul@f2+2,w
 17139  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17140  0F01                     l8701:	
 17141  0F01  3001               	movlw	1
 17142  0F02                     u9335:	
 17143  0F02  36B0               	lsrf	___ftmul@f1+2,f
 17144  0F03  0CAF               	rrf	___ftmul@f1+1,f
 17145  0F04  0CAE               	rrf	___ftmul@f1,f
 17146  0F05  0B89               	decfsz	9,f
 17147  0F06  2F02               	goto	u9335
 17148  0F07  3001               	movlw	1
 17149  0F08                     u9345:	
 17150  0F08  35B1               	lslf	___ftmul@f2,f
 17151  0F09  0DB2               	rlf	___ftmul@f2+1,f
 17152  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 17153  0F0B  0B89               	decfsz	9,f
 17154  0F0C  2F08               	goto	u9345
 17155  0F0D  3001               	movlw	1
 17156  0F0E  02BC               	subwf	___ftmul@cntr,f
 17157  0F0F  1D03               	btfss	3,2
 17158  0F10  2EF9               	goto	l8697
 17159  0F11  3009               	movlw	9
 17160  0F12  00B4               	movwf	??___ftmul
 17161  0F13  0834               	movf	??___ftmul,w
 17162  0F14  00BC               	movwf	___ftmul@cntr
 17163  0F15                     l8709:	
 17164  0F15  1C2E               	btfss	___ftmul@f1,0
 17165  0F16  2F1D               	goto	l8713
 17166  0F17  0831               	movf	___ftmul@f2,w
 17167  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 17168  0F19  0832               	movf	___ftmul@f2+1,w
 17169  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17170  0F1B  0833               	movf	___ftmul@f2+2,w
 17171  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17172  0F1D                     l8713:	
 17173  0F1D  3001               	movlw	1
 17174  0F1E                     u9375:	
 17175  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 17176  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 17177  0F20  0CAE               	rrf	___ftmul@f1,f
 17178  0F21  0B89               	decfsz	9,f
 17179  0F22  2F1E               	goto	u9375
 17180  0F23  3001               	movlw	1
 17181  0F24                     u9385:	
 17182  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17183  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17184  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 17185  0F27  0B89               	decfsz	9,f
 17186  0F28  2F24               	goto	u9385
 17187  0F29  3001               	movlw	1
 17188  0F2A  02BC               	subwf	___ftmul@cntr,f
 17189  0F2B  1D03               	btfss	3,2
 17190  0F2C  2F15               	goto	l8709
 17191  0F2D  0839               	movf	___ftmul@f3_as_product,w
 17192  0F2E  00A0               	movwf	___ftpack@arg
 17193  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 17194  0F30  00A1               	movwf	___ftpack@arg+1
 17195  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 17196  0F32  00A2               	movwf	___ftpack@arg+2
 17197  0F33  0838               	movf	___ftmul@exp,w
 17198  0F34  00B4               	movwf	??___ftmul
 17199  0F35  0834               	movf	??___ftmul,w
 17200  0F36  00A3               	movwf	___ftpack@exp
 17201  0F37  083D               	movf	___ftmul@sign,w
 17202  0F38  00B5               	movwf	??___ftmul+1
 17203  0F39  0835               	movf	??___ftmul+1,w
 17204  0F3A  00A4               	movwf	___ftpack@sign
 17205  0F3B  3196  260C         	fcall	___ftpack
 17206  0F3D  0020               	movlb	0	; select bank0
 17207  0F3E  0820               	movf	?___ftpack,w
 17208  0F3F  00AE               	movwf	?___ftmul
 17209  0F40  0821               	movf	?___ftpack+1,w
 17210  0F41  00AF               	movwf	?___ftmul+1
 17211  0F42  0822               	movf	?___ftpack+2,w
 17212  0F43  00B0               	movwf	?___ftmul+2
 17213  0F44  0008               	return
 17214  0F45                     __end_of___ftmul:	
 17215                           
 17216                           	psect	text121
 17217  0D37                     __ptext121:	
 17218 ;; *************** function ___ftdiv *****************
 17219 ;; Defined at:
 17220 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17221 ;; Parameters:    Size  Location     Type
 17222 ;;  f2              3   14[BANK0 ] float 
 17223 ;;  f1              3   17[BANK0 ] float 
 17224 ;; Auto vars:     Size  Location     Type
 17225 ;;  f3              3   25[BANK0 ] float 
 17226 ;;  sign            1   29[BANK0 ] unsigned char 
 17227 ;;  exp             1   28[BANK0 ] unsigned char 
 17228 ;;  cntr            1   24[BANK0 ] unsigned char 
 17229 ;; Return value:  Size  Location     Type
 17230 ;;                  3   14[BANK0 ] float 
 17231 ;; Registers used:
 17232 ;;		wreg, status,2, status,0, pclath, cstack
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17238 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17240 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;Total ram usage:       16 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; Hardware stack levels required when called:    6
 17245 ;; This function calls:
 17246 ;;		___ftpack
 17247 ;; This function is called by:
 17248 ;;		_getDimmerLights_PercentToValue
 17249 ;;		_getDimmerLights_ValueToPercent
 17250 ;; This function uses a non-reentrant model
 17251 ;;
 17252                           
 17253                           
 17254                           ;psect for function ___ftdiv
 17255  0D37                     ___ftdiv:	
 17256                           
 17257                           ;incstack = 0
 17258                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17259  0D37  0020               	movlb	0	; select bank0
 17260  0D38  0831               	movf	___ftdiv@f1,w
 17261  0D39  00B4               	movwf	??___ftdiv
 17262  0D3A  0832               	movf	___ftdiv@f1+1,w
 17263  0D3B  00B5               	movwf	??___ftdiv+1
 17264  0D3C  0833               	movf	___ftdiv@f1+2,w
 17265  0D3D  00B6               	movwf	??___ftdiv+2
 17266  0D3E  1003               	clrc
 17267  0D3F  0D35               	rlf	??___ftdiv+1,w
 17268  0D40  0D36               	rlf	??___ftdiv+2,w
 17269  0D41  00B7               	movwf	??___ftdiv+3
 17270  0D42  0837               	movf	??___ftdiv+3,w
 17271  0D43  00BC               	movwf	___ftdiv@exp
 17272  0D44  08BC               	movf	___ftdiv@exp,f
 17273  0D45  1D03               	skipz
 17274  0D46  2D4E               	goto	l8637
 17275  0D47  3000               	movlw	0
 17276  0D48  00AE               	movwf	?___ftdiv
 17277  0D49  3000               	movlw	0
 17278  0D4A  00AF               	movwf	?___ftdiv+1
 17279  0D4B  3000               	movlw	0
 17280  0D4C  00B0               	movwf	?___ftdiv+2
 17281  0D4D  0008               	return
 17282  0D4E                     l8637:	
 17283  0D4E  082E               	movf	___ftdiv@f2,w
 17284  0D4F  00B4               	movwf	??___ftdiv
 17285  0D50  082F               	movf	___ftdiv@f2+1,w
 17286  0D51  00B5               	movwf	??___ftdiv+1
 17287  0D52  0830               	movf	___ftdiv@f2+2,w
 17288  0D53  00B6               	movwf	??___ftdiv+2
 17289  0D54  1003               	clrc
 17290  0D55  0D35               	rlf	??___ftdiv+1,w
 17291  0D56  0D36               	rlf	??___ftdiv+2,w
 17292  0D57  00B7               	movwf	??___ftdiv+3
 17293  0D58  0837               	movf	??___ftdiv+3,w
 17294  0D59  00BD               	movwf	___ftdiv@sign
 17295  0D5A  08BD               	movf	___ftdiv@sign,f
 17296  0D5B  1D03               	skipz
 17297  0D5C  2D64               	goto	l8643
 17298  0D5D  3000               	movlw	0
 17299  0D5E  00AE               	movwf	?___ftdiv
 17300  0D5F  3000               	movlw	0
 17301  0D60  00AF               	movwf	?___ftdiv+1
 17302  0D61  3000               	movlw	0
 17303  0D62  00B0               	movwf	?___ftdiv+2
 17304  0D63  0008               	return
 17305  0D64                     l8643:	
 17306  0D64  3000               	movlw	0
 17307  0D65  00B9               	movwf	___ftdiv@f3
 17308  0D66  3000               	movlw	0
 17309  0D67  00BA               	movwf	___ftdiv@f3+1
 17310  0D68  3000               	movlw	0
 17311  0D69  00BB               	movwf	___ftdiv@f3+2
 17312  0D6A  3089               	movlw	137
 17313  0D6B  073D               	addwf	___ftdiv@sign,w
 17314  0D6C  00B4               	movwf	??___ftdiv
 17315  0D6D  0834               	movf	??___ftdiv,w
 17316  0D6E  02BC               	subwf	___ftdiv@exp,f
 17317  0D6F  0831               	movf	___ftdiv@f1,w
 17318  0D70  00B4               	movwf	??___ftdiv
 17319  0D71  0832               	movf	___ftdiv@f1+1,w
 17320  0D72  00B5               	movwf	??___ftdiv+1
 17321  0D73  0833               	movf	___ftdiv@f1+2,w
 17322  0D74  00B6               	movwf	??___ftdiv+2
 17323  0D75  3010               	movlw	16
 17324  0D76                     u9225:	
 17325  0D76  36B6               	lsrf	??___ftdiv+2,f
 17326  0D77  0CB5               	rrf	??___ftdiv+1,f
 17327  0D78  0CB4               	rrf	??___ftdiv,f
 17328  0D79  0B89               	decfsz	9,f
 17329  0D7A  2D76               	goto	u9225
 17330  0D7B  0834               	movf	??___ftdiv,w
 17331  0D7C  00B7               	movwf	??___ftdiv+3
 17332  0D7D  0837               	movf	??___ftdiv+3,w
 17333  0D7E  00BD               	movwf	___ftdiv@sign
 17334  0D7F  082E               	movf	___ftdiv@f2,w
 17335  0D80  00B4               	movwf	??___ftdiv
 17336  0D81  082F               	movf	___ftdiv@f2+1,w
 17337  0D82  00B5               	movwf	??___ftdiv+1
 17338  0D83  0830               	movf	___ftdiv@f2+2,w
 17339  0D84  00B6               	movwf	??___ftdiv+2
 17340  0D85  3010               	movlw	16
 17341  0D86                     u9235:	
 17342  0D86  36B6               	lsrf	??___ftdiv+2,f
 17343  0D87  0CB5               	rrf	??___ftdiv+1,f
 17344  0D88  0CB4               	rrf	??___ftdiv,f
 17345  0D89  0B89               	decfsz	9,f
 17346  0D8A  2D86               	goto	u9235
 17347  0D8B  0834               	movf	??___ftdiv,w
 17348  0D8C  00B7               	movwf	??___ftdiv+3
 17349  0D8D  0837               	movf	??___ftdiv+3,w
 17350  0D8E  06BD               	xorwf	___ftdiv@sign,f
 17351  0D8F  3080               	movlw	128
 17352  0D90  00B4               	movwf	??___ftdiv
 17353  0D91  0834               	movf	??___ftdiv,w
 17354  0D92  05BD               	andwf	___ftdiv@sign,f
 17355  0D93  17B2               	bsf	___ftdiv@f1+1,7
 17356  0D94  30FF               	movlw	255
 17357  0D95  05B1               	andwf	___ftdiv@f1,f
 17358  0D96  30FF               	movlw	255
 17359  0D97  05B2               	andwf	___ftdiv@f1+1,f
 17360  0D98  3000               	movlw	0
 17361  0D99  05B3               	andwf	___ftdiv@f1+2,f
 17362  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 17363  0D9B  30FF               	movlw	255
 17364  0D9C  05AE               	andwf	___ftdiv@f2,f
 17365  0D9D  30FF               	movlw	255
 17366  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 17367  0D9F  3000               	movlw	0
 17368  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 17369  0DA1  3018               	movlw	24
 17370  0DA2  00B4               	movwf	??___ftdiv
 17371  0DA3  0834               	movf	??___ftdiv,w
 17372  0DA4  00B8               	movwf	___ftdiv@cntr
 17373  0DA5                     l8657:	
 17374  0DA5  3001               	movlw	1
 17375  0DA6                     u9245:	
 17376  0DA6  35B9               	lslf	___ftdiv@f3,f
 17377  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 17378  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 17379  0DA9  0B89               	decfsz	9,f
 17380  0DAA  2DA6               	goto	u9245
 17381  0DAB  0830               	movf	___ftdiv@f2+2,w
 17382  0DAC  0233               	subwf	___ftdiv@f1+2,w
 17383  0DAD  1D03               	skipz
 17384  0DAE  2DB5               	goto	u9255
 17385  0DAF  082F               	movf	___ftdiv@f2+1,w
 17386  0DB0  0232               	subwf	___ftdiv@f1+1,w
 17387  0DB1  1D03               	skipz
 17388  0DB2  2DB5               	goto	u9255
 17389  0DB3  082E               	movf	___ftdiv@f2,w
 17390  0DB4  0231               	subwf	___ftdiv@f1,w
 17391  0DB5                     u9255:	
 17392  0DB5  1C03               	skipc
 17393  0DB6  2DBE               	goto	l8665
 17394  0DB7  082E               	movf	___ftdiv@f2,w
 17395  0DB8  02B1               	subwf	___ftdiv@f1,f
 17396  0DB9  082F               	movf	___ftdiv@f2+1,w
 17397  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 17398  0DBB  0830               	movf	___ftdiv@f2+2,w
 17399  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 17400  0DBD  1439               	bsf	___ftdiv@f3,0
 17401  0DBE                     l8665:	
 17402  0DBE  3001               	movlw	1
 17403  0DBF                     u9265:	
 17404  0DBF  35B1               	lslf	___ftdiv@f1,f
 17405  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 17406  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 17407  0DC2  0B89               	decfsz	9,f
 17408  0DC3  2DBF               	goto	u9265
 17409  0DC4  3001               	movlw	1
 17410  0DC5  02B8               	subwf	___ftdiv@cntr,f
 17411  0DC6  1D03               	btfss	3,2
 17412  0DC7  2DA5               	goto	l8657
 17413  0DC8  0839               	movf	___ftdiv@f3,w
 17414  0DC9  00A0               	movwf	___ftpack@arg
 17415  0DCA  083A               	movf	___ftdiv@f3+1,w
 17416  0DCB  00A1               	movwf	___ftpack@arg+1
 17417  0DCC  083B               	movf	___ftdiv@f3+2,w
 17418  0DCD  00A2               	movwf	___ftpack@arg+2
 17419  0DCE  083C               	movf	___ftdiv@exp,w
 17420  0DCF  00B4               	movwf	??___ftdiv
 17421  0DD0  0834               	movf	??___ftdiv,w
 17422  0DD1  00A3               	movwf	___ftpack@exp
 17423  0DD2  083D               	movf	___ftdiv@sign,w
 17424  0DD3  00B5               	movwf	??___ftdiv+1
 17425  0DD4  0835               	movf	??___ftdiv+1,w
 17426  0DD5  00A4               	movwf	___ftpack@sign
 17427  0DD6  3196  260C         	fcall	___ftpack
 17428  0DD8  0020               	movlb	0	; select bank0
 17429  0DD9  0820               	movf	?___ftpack,w
 17430  0DDA  00AE               	movwf	?___ftdiv
 17431  0DDB  0821               	movf	?___ftpack+1,w
 17432  0DDC  00AF               	movwf	?___ftdiv+1
 17433  0DDD  0822               	movf	?___ftpack+2,w
 17434  0DDE  00B0               	movwf	?___ftdiv+2
 17435  0DDF  0008               	return
 17436  0DE0                     __end_of___ftdiv:	
 17437                           
 17438                           	psect	text122
 17439  0381                     __ptext122:	
 17440 ;; *************** function ___ftadd *****************
 17441 ;; Defined at:
 17442 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17443 ;; Parameters:    Size  Location     Type
 17444 ;;  f1              3   33[BANK0 ] float 
 17445 ;;  f2              3   36[BANK0 ] float 
 17446 ;; Auto vars:     Size  Location     Type
 17447 ;;  exp1            1   45[BANK0 ] unsigned char 
 17448 ;;  exp2            1   44[BANK0 ] unsigned char 
 17449 ;;  sign            1   43[BANK0 ] unsigned char 
 17450 ;; Return value:  Size  Location     Type
 17451 ;;                  3   33[BANK0 ] float 
 17452 ;; Registers used:
 17453 ;;		wreg, status,2, status,0, pclath, cstack
 17454 ;; Tracked objects:
 17455 ;;		On entry : 0/0
 17456 ;;		On exit  : 0/0
 17457 ;;		Unchanged: 0/0
 17458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17459 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17460 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17461 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17462 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;Total ram usage:       13 bytes
 17464 ;; Hardware stack levels used:    1
 17465 ;; Hardware stack levels required when called:    6
 17466 ;; This function calls:
 17467 ;;		___ftpack
 17468 ;; This function is called by:
 17469 ;;		_getDimmerLights_PercentToValue
 17470 ;;		_getDimmerLights_ValueToPercent
 17471 ;; This function uses a non-reentrant model
 17472 ;;
 17473                           
 17474                           
 17475                           ;psect for function ___ftadd
 17476  0381                     ___ftadd:	
 17477                           
 17478                           ;incstack = 0
 17479                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17480  0381  0020               	movlb	0	; select bank0
 17481  0382  0841               	movf	___ftadd@f1,w
 17482  0383  00C7               	movwf	??___ftadd
 17483  0384  0842               	movf	___ftadd@f1+1,w
 17484  0385  00C8               	movwf	??___ftadd+1
 17485  0386  0843               	movf	___ftadd@f1+2,w
 17486  0387  00C9               	movwf	??___ftadd+2
 17487  0388  1003               	clrc
 17488  0389  0D48               	rlf	??___ftadd+1,w
 17489  038A  0D49               	rlf	??___ftadd+2,w
 17490  038B  00CA               	movwf	??___ftadd+3
 17491  038C  084A               	movf	??___ftadd+3,w
 17492  038D  00CD               	movwf	___ftadd@exp1
 17493  038E  0844               	movf	___ftadd@f2,w
 17494  038F  00C7               	movwf	??___ftadd
 17495  0390  0845               	movf	___ftadd@f2+1,w
 17496  0391  00C8               	movwf	??___ftadd+1
 17497  0392  0846               	movf	___ftadd@f2+2,w
 17498  0393  00C9               	movwf	??___ftadd+2
 17499  0394  1003               	clrc
 17500  0395  0D48               	rlf	??___ftadd+1,w
 17501  0396  0D49               	rlf	??___ftadd+2,w
 17502  0397  00CA               	movwf	??___ftadd+3
 17503  0398  084A               	movf	??___ftadd+3,w
 17504  0399  00CC               	movwf	___ftadd@exp2
 17505  039A  084D               	movf	___ftadd@exp1,w
 17506  039B  1903               	btfsc	3,2
 17507  039C  2BA9               	goto	l8567
 17508  039D  084C               	movf	___ftadd@exp2,w
 17509  039E  024D               	subwf	___ftadd@exp1,w
 17510  039F  1803               	skipnc
 17511  03A0  2BB0               	goto	l8571
 17512  03A1  034D               	decf	___ftadd@exp1,w
 17513  03A2  3AFF               	xorlw	255
 17514  03A3  074C               	addwf	___ftadd@exp2,w
 17515  03A4  00C7               	movwf	??___ftadd
 17516  03A5  3019               	movlw	25
 17517  03A6  0247               	subwf	??___ftadd,w
 17518  03A7  1C03               	skipc
 17519  03A8  2BB0               	goto	l8571
 17520  03A9                     l8567:	
 17521  03A9  0844               	movf	___ftadd@f2,w
 17522  03AA  00C1               	movwf	?___ftadd
 17523  03AB  0845               	movf	___ftadd@f2+1,w
 17524  03AC  00C2               	movwf	?___ftadd+1
 17525  03AD  0846               	movf	___ftadd@f2+2,w
 17526  03AE  00C3               	movwf	?___ftadd+2
 17527  03AF  0008               	return
 17528  03B0                     l8571:	
 17529  03B0  084C               	movf	___ftadd@exp2,w
 17530  03B1  1903               	btfsc	3,2
 17531  03B2  0008               	return
 17532  03B3  084D               	movf	___ftadd@exp1,w
 17533  03B4  024C               	subwf	___ftadd@exp2,w
 17534  03B5  1803               	skipnc
 17535  03B6  2BBF               	goto	l8577
 17536  03B7  034C               	decf	___ftadd@exp2,w
 17537  03B8  3AFF               	xorlw	255
 17538  03B9  074D               	addwf	___ftadd@exp1,w
 17539  03BA  00C7               	movwf	??___ftadd
 17540  03BB  3019               	movlw	25
 17541  03BC  0247               	subwf	??___ftadd,w
 17542  03BD  1803               	btfsc	3,0
 17543  03BE  0008               	return
 17544  03BF                     l8577:	
 17545  03BF  3006               	movlw	6
 17546  03C0  00C7               	movwf	??___ftadd
 17547  03C1  0847               	movf	??___ftadd,w
 17548  03C2  00CB               	movwf	___ftadd@sign
 17549  03C3  1BC3               	btfsc	___ftadd@f1+2,7
 17550  03C4  17CB               	bsf	___ftadd@sign,7
 17551  03C5  1BC6               	btfsc	___ftadd@f2+2,7
 17552  03C6  174B               	bsf	___ftadd@sign,6
 17553  03C7  17C2               	bsf	___ftadd@f1+1,7
 17554  03C8  30FF               	movlw	255
 17555  03C9  05C1               	andwf	___ftadd@f1,f
 17556  03CA  30FF               	movlw	255
 17557  03CB  05C2               	andwf	___ftadd@f1+1,f
 17558  03CC  3000               	movlw	0
 17559  03CD  05C3               	andwf	___ftadd@f1+2,f
 17560  03CE  17C5               	bsf	___ftadd@f2+1,7
 17561  03CF  30FF               	movlw	255
 17562  03D0  05C4               	andwf	___ftadd@f2,f
 17563  03D1  30FF               	movlw	255
 17564  03D2  05C5               	andwf	___ftadd@f2+1,f
 17565  03D3  3000               	movlw	0
 17566  03D4  05C6               	andwf	___ftadd@f2+2,f
 17567  03D5  084C               	movf	___ftadd@exp2,w
 17568  03D6  024D               	subwf	___ftadd@exp1,w
 17569  03D7  1803               	skipnc
 17570  03D8  2BFB               	goto	l8599
 17571  03D9                     l8589:	
 17572  03D9  3001               	movlw	1
 17573  03DA                     u9065:	
 17574  03DA  35C4               	lslf	___ftadd@f2,f
 17575  03DB  0DC5               	rlf	___ftadd@f2+1,f
 17576  03DC  0DC6               	rlf	___ftadd@f2+2,f
 17577  03DD  0B89               	decfsz	9,f
 17578  03DE  2BDA               	goto	u9065
 17579  03DF  3001               	movlw	1
 17580  03E0  02CC               	subwf	___ftadd@exp2,f
 17581  03E1  084C               	movf	___ftadd@exp2,w
 17582  03E2  064D               	xorwf	___ftadd@exp1,w
 17583  03E3  1903               	skipnz
 17584  03E4  2BF6               	goto	l8597
 17585  03E5  3001               	movlw	1
 17586  03E6  02CB               	subwf	___ftadd@sign,f
 17587  03E7  084B               	movf	___ftadd@sign,w
 17588  03E8  3907               	andlw	7
 17589  03E9  1903               	btfsc	3,2
 17590  03EA  2BF6               	goto	l8597
 17591  03EB  2BD9               	goto	l8589
 17592  03EC                     l8595:	
 17593  03EC  3001               	movlw	1
 17594  03ED                     u9095:	
 17595  03ED  36C3               	lsrf	___ftadd@f1+2,f
 17596  03EE  0CC2               	rrf	___ftadd@f1+1,f
 17597  03EF  0CC1               	rrf	___ftadd@f1,f
 17598  03F0  0B89               	decfsz	9,f
 17599  03F1  2BED               	goto	u9095
 17600  03F2  3001               	movlw	1
 17601  03F3  00C7               	movwf	??___ftadd
 17602  03F4  0847               	movf	??___ftadd,w
 17603  03F5  07CD               	addwf	___ftadd@exp1,f
 17604  03F6                     l8597:	
 17605  03F6  084D               	movf	___ftadd@exp1,w
 17606  03F7  064C               	xorwf	___ftadd@exp2,w
 17607  03F8  1903               	btfsc	3,2
 17608  03F9  2C20               	goto	l2884
 17609  03FA  2BEC               	goto	l8595
 17610  03FB                     l8599:	
 17611  03FB  084D               	movf	___ftadd@exp1,w
 17612  03FC  024C               	subwf	___ftadd@exp2,w
 17613  03FD  1803               	skipnc
 17614  03FE  2C20               	goto	l2884
 17615  03FF                     l8601:	
 17616  03FF  3001               	movlw	1
 17617  0400                     u9125:	
 17618  0400  35C1               	lslf	___ftadd@f1,f
 17619  0401  0DC2               	rlf	___ftadd@f1+1,f
 17620  0402  0DC3               	rlf	___ftadd@f1+2,f
 17621  0403  0B89               	decfsz	9,f
 17622  0404  2C00               	goto	u9125
 17623  0405  3001               	movlw	1
 17624  0406  02CD               	subwf	___ftadd@exp1,f
 17625  0407  084C               	movf	___ftadd@exp2,w
 17626  0408  064D               	xorwf	___ftadd@exp1,w
 17627  0409  1903               	skipnz
 17628  040A  2C1C               	goto	l8609
 17629  040B  3001               	movlw	1
 17630  040C  02CB               	subwf	___ftadd@sign,f
 17631  040D  084B               	movf	___ftadd@sign,w
 17632  040E  3907               	andlw	7
 17633  040F  1903               	btfsc	3,2
 17634  0410  2C1C               	goto	l8609
 17635  0411  2BFF               	goto	l8601
 17636  0412                     l8607:	
 17637  0412  3001               	movlw	1
 17638  0413                     u9155:	
 17639  0413  36C6               	lsrf	___ftadd@f2+2,f
 17640  0414  0CC5               	rrf	___ftadd@f2+1,f
 17641  0415  0CC4               	rrf	___ftadd@f2,f
 17642  0416  0B89               	decfsz	9,f
 17643  0417  2C13               	goto	u9155
 17644  0418  3001               	movlw	1
 17645  0419  00C7               	movwf	??___ftadd
 17646  041A  0847               	movf	??___ftadd,w
 17647  041B  07CC               	addwf	___ftadd@exp2,f
 17648  041C                     l8609:	
 17649  041C  084D               	movf	___ftadd@exp1,w
 17650  041D  064C               	xorwf	___ftadd@exp2,w
 17651  041E  1D03               	skipz
 17652  041F  2C12               	goto	l8607
 17653  0420                     l2884:	
 17654  0420  1FCB               	btfss	___ftadd@sign,7
 17655  0421  2C32               	goto	l8613
 17656  0422  30FF               	movlw	255
 17657  0423  06C1               	xorwf	___ftadd@f1,f
 17658  0424  30FF               	movlw	255
 17659  0425  06C2               	xorwf	___ftadd@f1+1,f
 17660  0426  30FF               	movlw	255
 17661  0427  06C3               	xorwf	___ftadd@f1+2,f
 17662  0428  3001               	movlw	1
 17663  0429  07C1               	addwf	___ftadd@f1,f
 17664  042A  3000               	movlw	0
 17665  042B  1803               	skipnc
 17666  042C  3001               	movlw	1
 17667  042D  07C2               	addwf	___ftadd@f1+1,f
 17668  042E  3000               	movlw	0
 17669  042F  1803               	skipnc
 17670  0430  3001               	movlw	1
 17671  0431  07C3               	addwf	___ftadd@f1+2,f
 17672  0432                     l8613:	
 17673  0432  1F4B               	btfss	___ftadd@sign,6
 17674  0433  2C44               	goto	l8617
 17675  0434  30FF               	movlw	255
 17676  0435  06C4               	xorwf	___ftadd@f2,f
 17677  0436  30FF               	movlw	255
 17678  0437  06C5               	xorwf	___ftadd@f2+1,f
 17679  0438  30FF               	movlw	255
 17680  0439  06C6               	xorwf	___ftadd@f2+2,f
 17681  043A  3001               	movlw	1
 17682  043B  07C4               	addwf	___ftadd@f2,f
 17683  043C  3000               	movlw	0
 17684  043D  1803               	skipnc
 17685  043E  3001               	movlw	1
 17686  043F  07C5               	addwf	___ftadd@f2+1,f
 17687  0440  3000               	movlw	0
 17688  0441  1803               	skipnc
 17689  0442  3001               	movlw	1
 17690  0443  07C6               	addwf	___ftadd@f2+2,f
 17691  0444                     l8617:	
 17692  0444  01CB               	clrf	___ftadd@sign
 17693  0445  0841               	movf	___ftadd@f1,w
 17694  0446  07C4               	addwf	___ftadd@f2,f
 17695  0447  0842               	movf	___ftadd@f1+1,w
 17696  0448  3DC5               	addwfc	___ftadd@f2+1,f
 17697  0449  0843               	movf	___ftadd@f1+2,w
 17698  044A  3DC6               	addwfc	___ftadd@f2+2,f
 17699  044B  1FC6               	btfss	___ftadd@f2+2,7
 17700  044C  2C5F               	goto	l8627
 17701  044D  30FF               	movlw	255
 17702  044E  06C4               	xorwf	___ftadd@f2,f
 17703  044F  30FF               	movlw	255
 17704  0450  06C5               	xorwf	___ftadd@f2+1,f
 17705  0451  30FF               	movlw	255
 17706  0452  06C6               	xorwf	___ftadd@f2+2,f
 17707  0453  3001               	movlw	1
 17708  0454  07C4               	addwf	___ftadd@f2,f
 17709  0455  3000               	movlw	0
 17710  0456  1803               	skipnc
 17711  0457  3001               	movlw	1
 17712  0458  07C5               	addwf	___ftadd@f2+1,f
 17713  0459  3000               	movlw	0
 17714  045A  1803               	skipnc
 17715  045B  3001               	movlw	1
 17716  045C  07C6               	addwf	___ftadd@f2+2,f
 17717  045D  01CB               	clrf	___ftadd@sign
 17718  045E  0ACB               	incf	___ftadd@sign,f
 17719  045F                     l8627:	
 17720  045F  0844               	movf	___ftadd@f2,w
 17721  0460  00A0               	movwf	___ftpack@arg
 17722  0461  0845               	movf	___ftadd@f2+1,w
 17723  0462  00A1               	movwf	___ftpack@arg+1
 17724  0463  0846               	movf	___ftadd@f2+2,w
 17725  0464  00A2               	movwf	___ftpack@arg+2
 17726  0465  084D               	movf	___ftadd@exp1,w
 17727  0466  00C7               	movwf	??___ftadd
 17728  0467  0847               	movf	??___ftadd,w
 17729  0468  00A3               	movwf	___ftpack@exp
 17730  0469  084B               	movf	___ftadd@sign,w
 17731  046A  00C8               	movwf	??___ftadd+1
 17732  046B  0848               	movf	??___ftadd+1,w
 17733  046C  00A4               	movwf	___ftpack@sign
 17734  046D  3196  260C         	fcall	___ftpack
 17735  046F  0020               	movlb	0	; select bank0
 17736  0470  0820               	movf	?___ftpack,w
 17737  0471  00C1               	movwf	?___ftadd
 17738  0472  0821               	movf	?___ftpack+1,w
 17739  0473  00C2               	movwf	?___ftadd+1
 17740  0474  0822               	movf	?___ftpack+2,w
 17741  0475  00C3               	movwf	?___ftadd+2
 17742  0476  0008               	return
 17743  0477                     __end_of___ftadd:	
 17744                           
 17745                           	psect	text123
 17746  1F96                     __ptext123:	
 17747 ;; *************** function ___awtoft *****************
 17748 ;; Defined at:
 17749 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17750 ;; Parameters:    Size  Location     Type
 17751 ;;  c               2    8[BANK0 ] int 
 17752 ;; Auto vars:     Size  Location     Type
 17753 ;;  sign            1   13[BANK0 ] unsigned char 
 17754 ;; Return value:  Size  Location     Type
 17755 ;;                  3    8[BANK0 ] float 
 17756 ;; Registers used:
 17757 ;;		wreg, status,2, status,0, pclath, cstack
 17758 ;; Tracked objects:
 17759 ;;		On entry : 0/0
 17760 ;;		On exit  : 0/0
 17761 ;;		Unchanged: 0/0
 17762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17763 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17765 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17766 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17767 ;;Total ram usage:        6 bytes
 17768 ;; Hardware stack levels used:    1
 17769 ;; Hardware stack levels required when called:    6
 17770 ;; This function calls:
 17771 ;;		___ftpack
 17772 ;; This function is called by:
 17773 ;;		_getDimmerLights_PercentToValue
 17774 ;;		_getDimmerLights_ValueToPercent
 17775 ;; This function uses a non-reentrant model
 17776 ;;
 17777                           
 17778                           
 17779                           ;psect for function ___awtoft
 17780  1F96                     ___awtoft:	
 17781                           
 17782                           ;incstack = 0
 17783                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17784  1F96  0020               	movlb	0	; select bank0
 17785  1F97  01AD               	clrf	___awtoft@sign
 17786  1F98  1FA9               	btfss	___awtoft@c+1,7
 17787  1F99  2FA1               	goto	l8555
 17788  1F9A  09A8               	comf	___awtoft@c,f
 17789  1F9B  09A9               	comf	___awtoft@c+1,f
 17790  1F9C  0AA8               	incf	___awtoft@c,f
 17791  1F9D  1903               	skipnz
 17792  1F9E  0AA9               	incf	___awtoft@c+1,f
 17793  1F9F  01AD               	clrf	___awtoft@sign
 17794  1FA0  0AAD               	incf	___awtoft@sign,f
 17795  1FA1                     l8555:	
 17796  1FA1  0828               	movf	___awtoft@c,w
 17797  1FA2  00A0               	movwf	___ftpack@arg
 17798  1FA3  0829               	movf	___awtoft@c+1,w
 17799  1FA4  00A1               	movwf	___ftpack@arg+1
 17800  1FA5  01A2               	clrf	___ftpack@arg+2
 17801  1FA6  308E               	movlw	142
 17802  1FA7  00AB               	movwf	??___awtoft
 17803  1FA8  082B               	movf	??___awtoft,w
 17804  1FA9  00A3               	movwf	___ftpack@exp
 17805  1FAA  082D               	movf	___awtoft@sign,w
 17806  1FAB  00AC               	movwf	??___awtoft+1
 17807  1FAC  082C               	movf	??___awtoft+1,w
 17808  1FAD  00A4               	movwf	___ftpack@sign
 17809  1FAE  3196  260C         	fcall	___ftpack
 17810  1FB0  0020               	movlb	0	; select bank0
 17811  1FB1  0820               	movf	?___ftpack,w
 17812  1FB2  00A8               	movwf	?___awtoft
 17813  1FB3  0821               	movf	?___ftpack+1,w
 17814  1FB4  00A9               	movwf	?___awtoft+1
 17815  1FB5  0822               	movf	?___ftpack+2,w
 17816  1FB6  00AA               	movwf	?___awtoft+2
 17817  1FB7  0008               	return
 17818  1FB8                     __end_of___awtoft:	
 17819                           
 17820                           	psect	text124
 17821  160C                     __ptext124:	
 17822 ;; *************** function ___ftpack *****************
 17823 ;; Defined at:
 17824 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17825 ;; Parameters:    Size  Location     Type
 17826 ;;  arg             3    0[BANK0 ] unsigned um
 17827 ;;  exp             1    3[BANK0 ] unsigned char 
 17828 ;;  sign            1    4[BANK0 ] unsigned char 
 17829 ;; Auto vars:     Size  Location     Type
 17830 ;;		None
 17831 ;; Return value:  Size  Location     Type
 17832 ;;                  3    0[BANK0 ] float 
 17833 ;; Registers used:
 17834 ;;		wreg, status,2, status,0
 17835 ;; Tracked objects:
 17836 ;;		On entry : 0/0
 17837 ;;		On exit  : 0/0
 17838 ;;		Unchanged: 0/0
 17839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17840 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17842 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17843 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17844 ;;Total ram usage:        8 bytes
 17845 ;; Hardware stack levels used:    1
 17846 ;; Hardware stack levels required when called:    5
 17847 ;; This function calls:
 17848 ;;		Nothing
 17849 ;; This function is called by:
 17850 ;;		___awtoft
 17851 ;;		___ftadd
 17852 ;;		___ftdiv
 17853 ;;		___ftmul
 17854 ;; This function uses a non-reentrant model
 17855 ;;
 17856                           
 17857                           
 17858                           ;psect for function ___ftpack
 17859  160C                     ___ftpack:	
 17860                           
 17861                           ;incstack = 0
 17862                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17863  160C  0020               	movlb	0	; select bank0
 17864  160D  0823               	movf	___ftpack@exp,w
 17865  160E  1903               	btfsc	3,2
 17866  160F  2E15               	goto	l8423
 17867  1610  0822               	movf	___ftpack@arg+2,w
 17868  1611  0421               	iorwf	___ftpack@arg+1,w
 17869  1612  0420               	iorwf	___ftpack@arg,w
 17870  1613  1D03               	skipz
 17871  1614  2E26               	goto	l8429
 17872  1615                     l8423:	
 17873  1615  3000               	movlw	0
 17874  1616  00A0               	movwf	?___ftpack
 17875  1617  3000               	movlw	0
 17876  1618  00A1               	movwf	?___ftpack+1
 17877  1619  3000               	movlw	0
 17878  161A  00A2               	movwf	?___ftpack+2
 17879  161B  0008               	return
 17880  161C                     l8427:	
 17881  161C  3001               	movlw	1
 17882  161D  00A5               	movwf	??___ftpack
 17883  161E  0825               	movf	??___ftpack,w
 17884  161F  07A3               	addwf	___ftpack@exp,f
 17885  1620  3001               	movlw	1
 17886  1621                     u8695:	
 17887  1621  36A2               	lsrf	___ftpack@arg+2,f
 17888  1622  0CA1               	rrf	___ftpack@arg+1,f
 17889  1623  0CA0               	rrf	___ftpack@arg,f
 17890  1624  0B89               	decfsz	9,f
 17891  1625  2E21               	goto	u8695
 17892  1626                     l8429:	
 17893  1626  30FE               	movlw	254
 17894  1627  0522               	andwf	___ftpack@arg+2,w
 17895  1628  1903               	btfsc	3,2
 17896  1629  2E3F               	goto	l2855
 17897  162A  2E1C               	goto	l8427
 17898  162B                     l8431:	
 17899  162B  3001               	movlw	1
 17900  162C  00A5               	movwf	??___ftpack
 17901  162D  0825               	movf	??___ftpack,w
 17902  162E  07A3               	addwf	___ftpack@exp,f
 17903  162F  3001               	movlw	1
 17904  1630  07A0               	addwf	___ftpack@arg,f
 17905  1631  3000               	movlw	0
 17906  1632  1803               	skipnc
 17907  1633  3001               	movlw	1
 17908  1634  07A1               	addwf	___ftpack@arg+1,f
 17909  1635  3000               	movlw	0
 17910  1636  1803               	skipnc
 17911  1637  3001               	movlw	1
 17912  1638  07A2               	addwf	___ftpack@arg+2,f
 17913  1639  3001               	movlw	1
 17914  163A                     u8715:	
 17915  163A  36A2               	lsrf	___ftpack@arg+2,f
 17916  163B  0CA1               	rrf	___ftpack@arg+1,f
 17917  163C  0CA0               	rrf	___ftpack@arg,f
 17918  163D  0B89               	decfsz	9,f
 17919  163E  2E3A               	goto	u8715
 17920  163F                     l2855:	
 17921  163F  30FF               	movlw	255
 17922  1640  0522               	andwf	___ftpack@arg+2,w
 17923  1641  1903               	btfsc	3,2
 17924  1642  2E4C               	goto	l8439
 17925  1643  2E2B               	goto	l8431
 17926  1644                     l8437:	
 17927  1644  3001               	movlw	1
 17928  1645  02A3               	subwf	___ftpack@exp,f
 17929  1646  3001               	movlw	1
 17930  1647                     u8735:	
 17931  1647  35A0               	lslf	___ftpack@arg,f
 17932  1648  0DA1               	rlf	___ftpack@arg+1,f
 17933  1649  0DA2               	rlf	___ftpack@arg+2,f
 17934  164A  0B89               	decfsz	9,f
 17935  164B  2E47               	goto	u8735
 17936  164C                     l8439:	
 17937  164C  1FA1               	btfss	___ftpack@arg+1,7
 17938  164D  2E44               	goto	l8437
 17939  164E  1823               	btfsc	___ftpack@exp,0
 17940  164F  2E56               	goto	l2861
 17941  1650  30FF               	movlw	255
 17942  1651  05A0               	andwf	___ftpack@arg,f
 17943  1652  307F               	movlw	127
 17944  1653  05A1               	andwf	___ftpack@arg+1,f
 17945  1654  30FF               	movlw	255
 17946  1655  05A2               	andwf	___ftpack@arg+2,f
 17947  1656                     l2861:	
 17948  1656  1003               	clrc
 17949  1657  0CA3               	rrf	___ftpack@exp,f
 17950  1658  0823               	movf	___ftpack@exp,w
 17951  1659  00A5               	movwf	??___ftpack
 17952  165A  01A6               	clrf	??___ftpack+1
 17953  165B  01A7               	clrf	??___ftpack+2
 17954  165C  3010               	movlw	16
 17955  165D                     u8765:	
 17956  165D  35A5               	lslf	??___ftpack,f
 17957  165E  0DA6               	rlf	??___ftpack+1,f
 17958  165F  0DA7               	rlf	??___ftpack+2,f
 17959  1660  0B89               	decfsz	9,f
 17960  1661  2E5D               	goto	u8765
 17961  1662  0825               	movf	??___ftpack,w
 17962  1663  04A0               	iorwf	___ftpack@arg,f
 17963  1664  0826               	movf	??___ftpack+1,w
 17964  1665  04A1               	iorwf	___ftpack@arg+1,f
 17965  1666  0827               	movf	??___ftpack+2,w
 17966  1667  04A2               	iorwf	___ftpack@arg+2,f
 17967  1668  0824               	movf	___ftpack@sign,w
 17968  1669  1903               	btfsc	3,2
 17969  166A  0008               	return
 17970  166B  17A2               	bsf	___ftpack@arg+2,7
 17971  166C  0008               	return
 17972  166D                     __end_of___ftpack:	
 17973                           
 17974                           	psect	text125
 17975  1BC5                     __ptext125:	
 17976 ;; *************** function _Division *****************
 17977 ;; Defined at:
 17978 ;;		line 1381 in file "../src/Dimmer_B1.c"
 17979 ;; Parameters:    Size  Location     Type
 17980 ;;  value           1    wreg     unsigned char 
 17981 ;;  num             1    5[BANK0 ] unsigned char 
 17982 ;; Auto vars:     Size  Location     Type
 17983 ;;  value           1    8[BANK0 ] unsigned char 
 17984 ;;  result          1    9[BANK0 ] unsigned char 
 17985 ;; Return value:  Size  Location     Type
 17986 ;;                  1    wreg      unsigned char 
 17987 ;; Registers used:
 17988 ;;		wreg, status,2, status,0, pclath, cstack
 17989 ;; Tracked objects:
 17990 ;;		On entry : 0/0
 17991 ;;		On exit  : 0/0
 17992 ;;		Unchanged: 0/0
 17993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17994 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17995 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17997 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17998 ;;Total ram usage:        5 bytes
 17999 ;; Hardware stack levels used:    1
 18000 ;; Hardware stack levels required when called:    6
 18001 ;; This function calls:
 18002 ;;		___lbdiv
 18003 ;; This function is called by:
 18004 ;;		_DimmerIntr_Initialization
 18005 ;; This function uses a non-reentrant model
 18006 ;;
 18007                           
 18008                           
 18009                           ;psect for function _Division
 18010  1BC5                     _Division:	
 18011                           
 18012                           ;incstack = 0
 18013                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18014                           ;Division@value stored from wreg
 18015  1BC5  0020               	movlb	0	; select bank0
 18016  1BC6  00A8               	movwf	Division@value
 18017                           
 18018                           ;Dimmer_B1.c: 1382: char result = (char) (value / num);
 18019  1BC7  0825               	movf	Division@num,w
 18020  1BC8  00A6               	movwf	??_Division
 18021  1BC9  0826               	movf	??_Division,w
 18022  1BCA  00A0               	movwf	___lbdiv@divisor
 18023  1BCB  0828               	movf	Division@value,w
 18024  1BCC  319F  2774         	fcall	___lbdiv
 18025  1BCE  0020               	movlb	0	; select bank0
 18026  1BCF  00A7               	movwf	??_Division+1
 18027  1BD0  0827               	movf	??_Division+1,w
 18028  1BD1  00A9               	movwf	Division@result
 18029                           
 18030                           ;Dimmer_B1.c: 1383: return result;
 18031  1BD2  0829               	movf	Division@result,w
 18032  1BD3  0008               	return
 18033  1BD4                     __end_of_Division:	
 18034                           
 18035                           	psect	text126
 18036  1F74                     __ptext126:	
 18037 ;; *************** function ___lbdiv *****************
 18038 ;; Defined at:
 18039 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18040 ;; Parameters:    Size  Location     Type
 18041 ;;  dividend        1    wreg     unsigned char 
 18042 ;;  divisor         1    0[BANK0 ] unsigned char 
 18043 ;; Auto vars:     Size  Location     Type
 18044 ;;  dividend        1    2[BANK0 ] unsigned char 
 18045 ;;  quotient        1    4[BANK0 ] unsigned char 
 18046 ;;  counter         1    3[BANK0 ] unsigned char 
 18047 ;; Return value:  Size  Location     Type
 18048 ;;                  1    wreg      unsigned char 
 18049 ;; Registers used:
 18050 ;;		wreg, status,2, status,0
 18051 ;; Tracked objects:
 18052 ;;		On entry : 0/0
 18053 ;;		On exit  : 0/0
 18054 ;;		Unchanged: 0/0
 18055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18056 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18059 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18060 ;;Total ram usage:        5 bytes
 18061 ;; Hardware stack levels used:    1
 18062 ;; Hardware stack levels required when called:    5
 18063 ;; This function calls:
 18064 ;;		Nothing
 18065 ;; This function is called by:
 18066 ;;		_Division
 18067 ;; This function uses a non-reentrant model
 18068 ;;
 18069                           
 18070                           
 18071                           ;psect for function ___lbdiv
 18072  1F74                     ___lbdiv:	
 18073                           
 18074                           ;incstack = 0
 18075                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18076                           ;___lbdiv@dividend stored from wreg
 18077  1F74  0020               	movlb	0	; select bank0
 18078  1F75  00A2               	movwf	___lbdiv@dividend
 18079  1F76  01A4               	clrf	___lbdiv@quotient
 18080  1F77  0820               	movf	___lbdiv@divisor,w
 18081  1F78  1903               	btfsc	3,2
 18082  1F79  2F94               	goto	l9379
 18083  1F7A  01A3               	clrf	___lbdiv@counter
 18084  1F7B  0AA3               	incf	___lbdiv@counter,f
 18085  1F7C                     l9367:	
 18086  1F7C  1BA0               	btfsc	___lbdiv@divisor,7
 18087  1F7D  2F85               	goto	l9369
 18088  1F7E  1003               	clrc
 18089  1F7F  0DA0               	rlf	___lbdiv@divisor,f
 18090  1F80  3001               	movlw	1
 18091  1F81  00A1               	movwf	??___lbdiv
 18092  1F82  0821               	movf	??___lbdiv,w
 18093  1F83  07A3               	addwf	___lbdiv@counter,f
 18094  1F84  2F7C               	goto	l9367
 18095  1F85                     l9369:	
 18096  1F85  1003               	clrc
 18097  1F86  0DA4               	rlf	___lbdiv@quotient,f
 18098  1F87  0820               	movf	___lbdiv@divisor,w
 18099  1F88  0222               	subwf	___lbdiv@dividend,w
 18100  1F89  1C03               	skipc
 18101  1F8A  2F8F               	goto	L10
 18102  1F8B  0820               	movf	___lbdiv@divisor,w
 18103  1F8C  02A2               	subwf	___lbdiv@dividend,f
 18104  1F8D  1424               	bsf	___lbdiv@quotient,0
 18105  1F8E  1003               	clrc
 18106  1F8F                     L10:	
 18107  1F8F  0CA0               	rrf	___lbdiv@divisor,f
 18108  1F90  3001               	movlw	1
 18109  1F91  02A3               	subwf	___lbdiv@counter,f
 18110  1F92  1D03               	btfss	3,2
 18111  1F93  2F85               	goto	l9369
 18112  1F94                     l9379:	
 18113  1F94  0824               	movf	___lbdiv@quotient,w
 18114  1F95  0008               	return
 18115  1F96                     __end_of___lbdiv:	
 18116                           
 18117                           	psect	text127
 18118  1A78                     __ptext127:	
 18119 ;; *************** function _DelayOff_Main *****************
 18120 ;; Defined at:
 18121 ;;		line 41 in file "../src/DelayOff_B1.c"
 18122 ;; Parameters:    Size  Location     Type
 18123 ;;		None
 18124 ;; Auto vars:     Size  Location     Type
 18125 ;;		None
 18126 ;; Return value:  Size  Location     Type
 18127 ;;		None               void
 18128 ;; Registers used:
 18129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18130 ;; Tracked objects:
 18131 ;;		On entry : 0/0
 18132 ;;		On exit  : 0/0
 18133 ;;		Unchanged: 0/0
 18134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18139 ;;Total ram usage:        0 bytes
 18140 ;; Hardware stack levels used:    1
 18141 ;; Hardware stack levels required when called:    9
 18142 ;; This function calls:
 18143 ;;		_DlyOff_Main
 18144 ;; This function is called by:
 18145 ;;		_main
 18146 ;; This function uses a non-reentrant model
 18147 ;;
 18148                           
 18149                           
 18150                           ;psect for function _DelayOff_Main
 18151  1A78                     _DelayOff_Main:	
 18152                           
 18153                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18154                           
 18155                           ;incstack = 0
 18156                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18157  1A78  3001               	movlw	1
 18158  1A79  3189  2154         	fcall	_DlyOff_Main
 18159  1A7B  0008               	return
 18160  1A7C                     __end_of_DelayOff_Main:	
 18161                           
 18162                           	psect	text128
 18163  0954                     __ptext128:	
 18164 ;; *************** function _DlyOff_Main *****************
 18165 ;; Defined at:
 18166 ;;		line 61 in file "../src/DelayOff_B1.c"
 18167 ;; Parameters:    Size  Location     Type
 18168 ;;  sw              1    wreg     unsigned char 
 18169 ;; Auto vars:     Size  Location     Type
 18170 ;;  sw              1   71[BANK0 ] unsigned char 
 18171 ;; Return value:  Size  Location     Type
 18172 ;;		None               void
 18173 ;; Registers used:
 18174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18175 ;; Tracked objects:
 18176 ;;		On entry : 0/0
 18177 ;;		On exit  : 0/0
 18178 ;;		Unchanged: 0/0
 18179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18183 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18184 ;;Total ram usage:        3 bytes
 18185 ;; Hardware stack levels used:    1
 18186 ;; Hardware stack levels required when called:    8
 18187 ;; This function calls:
 18188 ;;		_DelayOffPointSelect
 18189 ;;		_getDimmerLights_Status
 18190 ;;		_setDimmerLights_SwOff
 18191 ;;		_setDimmerLights_SwOn
 18192 ;;		_setProductData
 18193 ;; This function is called by:
 18194 ;;		_DelayOff_Main
 18195 ;; This function uses a non-reentrant model
 18196 ;;
 18197                           
 18198                           
 18199                           ;psect for function _DlyOff_Main
 18200  0954                     _DlyOff_Main:	
 18201                           
 18202                           ;incstack = 0
 18203                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18204                           ;DlyOff_Main@sw stored from wreg
 18205  0954  0020               	movlb	0	; select bank0
 18206  0955  00E7               	movwf	DlyOff_Main@sw
 18207                           
 18208                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18209  0956  0867               	movf	DlyOff_Main@sw,w
 18210  0957  319B  2334  3189   	fcall	_DelayOffPointSelect
 18211                           
 18212                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18213  095A  0021               	movlb	1	; select bank1
 18214  095B  084C               	movf	_DelayOff^(0+128),w
 18215  095C  0086               	movwf	6
 18216  095D  3001               	movlw	1	; select bank2/3
 18217  095E  0087               	movwf	7
 18218  095F  1C81               	btfss	1,1
 18219  0960  0008               	return
 18220                           
 18221                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18222  0961  084C               	movf	_DelayOff^(0+128),w
 18223  0962  3E02               	addlw	2
 18224  0963  0086               	movwf	6
 18225  0964  3001               	movlw	1	; select bank2/3
 18226  0965  0087               	movwf	7
 18227  0966  3001               	movlw	1
 18228  0967  0781               	addwf	1,f
 18229  0968  3141               	addfsr 1,1
 18230  0969  1803               	skipnc
 18231  096A  0A81               	incf	1,f
 18232                           
 18233                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18234  096B  084C               	movf	_DelayOff^(0+128),w
 18235  096C  3E02               	addlw	2
 18236  096D  0086               	movwf	6
 18237  096E  3001               	movlw	1	; select bank2/3
 18238  096F  0087               	movwf	7
 18239  0970  3F40               	moviw [0]fsr1
 18240  0971  0020               	movlb	0	; select bank0
 18241  0972  00E5               	movwf	??_DlyOff_Main
 18242  0973  3F41               	moviw [1]fsr1
 18243  0974  00E6               	movwf	??_DlyOff_Main+1
 18244  0975  300B               	movlw	11
 18245  0976  0266               	subwf	??_DlyOff_Main+1,w
 18246  0977  30B8               	movlw	184
 18247  0978  1903               	skipnz
 18248  0979  0265               	subwf	??_DlyOff_Main,w
 18249  097A  1C03               	skipc
 18250  097B  0008               	return
 18251                           
 18252                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18253  097C  0021               	movlb	1	; select bank1
 18254  097D  084C               	movf	_DelayOff^(0+128),w
 18255  097E  3E02               	addlw	2
 18256  097F  0086               	movwf	6
 18257  0980  3001               	movlw	1	; select bank2/3
 18258  0981  0087               	movwf	7
 18259  0982  3000               	movlw	0
 18260  0983  3FC0               	movwi [0]fsr1
 18261  0984  3FC1               	movwi [1]fsr1
 18262                           
 18263                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18264  0985  3001               	movlw	1
 18265  0986  0020               	movlb	0	; select bank0
 18266  0987  00E5               	movwf	??_DlyOff_Main
 18267  0988  0021               	movlb	1	; select bank1
 18268  0989  084C               	movf	_DelayOff^(0+128),w
 18269  098A  3E04               	addlw	4
 18270  098B  0086               	movwf	6
 18271  098C  3001               	movlw	1	; select bank2/3
 18272  098D  0087               	movwf	7
 18273  098E  0020               	movlb	0	; select bank0
 18274  098F  0865               	movf	??_DlyOff_Main,w
 18275  0990  0781               	addwf	1,f
 18276                           
 18277                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18278  0991  0021               	movlb	1	; select bank1
 18279  0992  084C               	movf	_DelayOff^(0+128),w
 18280  0993  3E04               	addlw	4
 18281  0994  0086               	movwf	6
 18282  0995  3001               	movlw	1	; select bank2/3
 18283  0996  0087               	movwf	7
 18284  0997  0A4C               	incf	_DelayOff^(0+128),w
 18285  0998  0084               	movwf	4
 18286  0999  3001               	movlw	1	; select bank2/3
 18287  099A  0085               	movwf	5
 18288  099B  0800               	movf	0,w
 18289  099C  0201               	subwf	1,w
 18290  099D  1C03               	skipc
 18291  099E  0008               	return
 18292                           
 18293                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18294  099F  084C               	movf	_DelayOff^(0+128),w
 18295  09A0  3E04               	addlw	4
 18296  09A1  0086               	movwf	6
 18297  09A2  3001               	movlw	1	; select bank2/3
 18298  09A3  0087               	movwf	7
 18299  09A4  0181               	clrf	1
 18300                           
 18301                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18302  09A5  084C               	movf	_DelayOff^(0+128),w
 18303  09A6  0086               	movwf	6
 18304  09A7  3001               	movlw	1	; select bank2/3
 18305  09A8  0087               	movwf	7
 18306  09A9  1081               	bcf	1,1
 18307                           
 18308                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18309  09AA  0020               	movlb	0	; select bank0
 18310  09AB  0867               	movf	DlyOff_Main@sw,w
 18311  09AC  319C  2402  3189   	fcall	_getDimmerLights_Status
 18312  09AF  3A01               	xorlw	1
 18313  09B0  1D03               	skipz
 18314  09B1  29BC               	goto	l531
 18315                           
 18316                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18317  09B2  0020               	movlb	0	; select bank0
 18318  09B3  0867               	movf	DlyOff_Main@sw,w
 18319  09B4  3191  21C2  3189   	fcall	_setDimmerLights_SwOn
 18320                           
 18321                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18322  09B7  0020               	movlb	0	; select bank0
 18323  09B8  0867               	movf	DlyOff_Main@sw,w
 18324  09B9  3192  2264  3189   	fcall	_setDimmerLights_SwOff
 18325  09BC                     l531:	
 18326                           
 18327                           ;DelayOff_B1.c: 78: }
 18328                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18329  09BC  0020               	movlb	0	; select bank0
 18330  09BD  01E2               	clrf	setProductData@value
 18331  09BE  0867               	movf	DlyOff_Main@sw,w
 18332  09BF  3E1A               	addlw	26
 18333  09C0  319B  234C         	fcall	_setProductData
 18334  09C2  0008               	return
 18335  09C3                     __end_of_DlyOff_Main:	
 18336                           
 18337                           	psect	text129
 18338  1B4C                     __ptext129:	
 18339 ;; *************** function _setProductData *****************
 18340 ;; Defined at:
 18341 ;;		line 645 in file "../src/Main_B1.c"
 18342 ;; Parameters:    Size  Location     Type
 18343 ;;  address         1    wreg     unsigned char 
 18344 ;;  value           1   66[BANK0 ] unsigned char 
 18345 ;; Auto vars:     Size  Location     Type
 18346 ;;  address         1   68[BANK0 ] unsigned char 
 18347 ;; Return value:  Size  Location     Type
 18348 ;;		None               void
 18349 ;; Registers used:
 18350 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18351 ;; Tracked objects:
 18352 ;;		On entry : 0/0
 18353 ;;		On exit  : 0/0
 18354 ;;		Unchanged: 0/0
 18355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18356 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18358 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18359 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18360 ;;Total ram usage:        3 bytes
 18361 ;; Hardware stack levels used:    1
 18362 ;; Hardware stack levels required when called:    5
 18363 ;; This function calls:
 18364 ;;		Nothing
 18365 ;; This function is called by:
 18366 ;;		_DlyOff_Main
 18367 ;;		_setDelayOff_GO
 18368 ;;		_setDimmerLights_OnOff
 18369 ;;		_setDimmerLights_Dimming
 18370 ;;		_setTemp_Main
 18371 ;;		_setLog_Code
 18372 ;;		_setControl_Lights_Table
 18373 ;;		_setRFSW_AdjControl
 18374 ;;		_setRF_DimmerLights
 18375 ;; This function uses a non-reentrant model
 18376 ;;
 18377                           
 18378                           
 18379                           ;psect for function _setProductData
 18380  1B4C                     _setProductData:	
 18381                           
 18382                           ;incstack = 0
 18383                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18384                           ;setProductData@address stored from wreg
 18385  1B4C  0020               	movlb	0	; select bank0
 18386  1B4D  00E4               	movwf	setProductData@address
 18387                           
 18388                           ;Main_B1.c: 646: _product.Data[address] = value;
 18389  1B4E  0862               	movf	setProductData@value,w
 18390  1B4F  00E3               	movwf	??_setProductData
 18391  1B50  0864               	movf	setProductData@address,w
 18392  1B51  3E20               	addlw	__product& (0+255)
 18393  1B52  0086               	movwf	6
 18394  1B53  3002               	movlw	2	; select bank4/5
 18395  1B54  0087               	movwf	7
 18396  1B55  0863               	movf	??_setProductData,w
 18397  1B56  0081               	movwf	1
 18398  1B57  0008               	return
 18399  1B58                     __end_of_setProductData:	
 18400                           
 18401                           	psect	text130
 18402  11C2                     __ptext130:	
 18403 ;; *************** function _setDimmerLights_SwOn *****************
 18404 ;; Defined at:
 18405 ;;		line 696 in file "../src/Dimmer_B1.c"
 18406 ;; Parameters:    Size  Location     Type
 18407 ;;  sw              1    wreg     unsigned char 
 18408 ;; Auto vars:     Size  Location     Type
 18409 ;;  sw              1   13[BANK0 ] unsigned char 
 18410 ;;  idle            1   14[BANK0 ] unsigned char 
 18411 ;; Return value:  Size  Location     Type
 18412 ;;		None               void
 18413 ;; Registers used:
 18414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18415 ;; Tracked objects:
 18416 ;;		On entry : 0/0
 18417 ;;		On exit  : 0/0
 18418 ;;		Unchanged: 0/0
 18419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18421 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18424 ;;Total ram usage:        2 bytes
 18425 ;; Hardware stack levels used:    1
 18426 ;; Hardware stack levels required when called:    7
 18427 ;; This function calls:
 18428 ;;		_DimmerLights_SelectPointer
 18429 ;;		_setBuz
 18430 ;; This function is called by:
 18431 ;;		_DlyOff_Main
 18432 ;;		_setControl_Lights_Table
 18433 ;;		_setRFSW_Control
 18434 ;;		_setRFSW_AdjControl
 18435 ;;		_setSw_Main
 18436 ;; This function uses a non-reentrant model
 18437 ;;
 18438                           
 18439                           
 18440                           ;psect for function _setDimmerLights_SwOn
 18441  11C2                     _setDimmerLights_SwOn:	
 18442                           
 18443                           ;incstack = 0
 18444                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18445                           ;setDimmerLights_SwOn@sw stored from wreg
 18446  11C2  0020               	movlb	0	; select bank0
 18447  11C3  00AD               	movwf	setDimmerLights_SwOn@sw
 18448                           
 18449                           ;Dimmer_B1.c: 697: char idle = 0;
 18450  11C4  01AE               	clrf	setDimmerLights_SwOn@idle
 18451                           
 18452                           ;Dimmer_B1.c: 722: DimmerLights_SelectPointer(sw);
 18453  11C5  082D               	movf	setDimmerLights_SwOn@sw,w
 18454  11C6  319B  2340  3191   	fcall	_DimmerLights_SelectPointer
 18455                           
 18456                           ;Dimmer_B1.c: 723: if (idle == 0) {
 18457  11C9  0020               	movlb	0	; select bank0
 18458  11CA  08AE               	movf	setDimmerLights_SwOn@idle,f
 18459  11CB  1D03               	skipz
 18460  11CC  0008               	return
 18461                           
 18462                           ;Dimmer_B1.c: 725: DimmerLights->SwFlag = 1;
 18463  11CD  0021               	movlb	1	; select bank1
 18464  11CE  084E               	movf	_DimmerLights^(0+128),w
 18465  11CF  0086               	movwf	6
 18466  11D0  3001               	movlw	1	; select bank2/3
 18467  11D1  0087               	movwf	7
 18468  11D2  1401               	bsf	1,0
 18469                           
 18470                           ;Dimmer_B1.c: 726: if (DimmerLights->Status == 0) {
 18471  11D3  0A4E               	incf	_DimmerLights^(0+128),w
 18472  11D4  0086               	movwf	6
 18473  11D5  3001               	movlw	1	; select bank2/3
 18474  11D6  0087               	movwf	7
 18475  11D7  1801               	btfsc	1,0
 18476  11D8  29E9               	goto	l8819
 18477                           
 18478                           ;Dimmer_B1.c: 727: DimmerLights->Status = 1;
 18479  11D9  0A4E               	incf	_DimmerLights^(0+128),w
 18480  11DA  0086               	movwf	6
 18481  11DB  3001               	movlw	1	; select bank2/3
 18482  11DC  0087               	movwf	7
 18483  11DD  1401               	bsf	1,0
 18484                           
 18485                           ;Dimmer_B1.c: 728: DimmerLights->Trigger = 1;
 18486  11DE  084E               	movf	_DimmerLights^(0+128),w
 18487  11DF  0086               	movwf	6
 18488  11E0  3001               	movlw	1	; select bank2/3
 18489  11E1  0087               	movwf	7
 18490  11E2  1481               	bsf	1,1
 18491                           
 18492                           ;Dimmer_B1.c: 729: DimmerLights->Switch = 1;
 18493  11E3  084E               	movf	_DimmerLights^(0+128),w
 18494  11E4  0086               	movwf	6
 18495  11E5  3001               	movlw	1	; select bank2/3
 18496  11E6  0087               	movwf	7
 18497  11E7  1501               	bsf	1,2
 18498                           
 18499                           ;Dimmer_B1.c: 730: } else {
 18500  11E8  29EE               	goto	l8821
 18501  11E9                     l8819:	
 18502                           
 18503                           ;Dimmer_B1.c: 731: DimmerLights->Status = 0;
 18504  11E9  0A4E               	incf	_DimmerLights^(0+128),w
 18505  11EA  0086               	movwf	6
 18506  11EB  3001               	movlw	1	; select bank2/3
 18507  11EC  0087               	movwf	7
 18508  11ED  1001               	bcf	1,0
 18509  11EE                     l8821:	
 18510                           
 18511                           ;Dimmer_B1.c: 732: }
 18512                           ;Dimmer_B1.c: 733: setBuz(1, 100);
 18513  11EE  3064               	movlw	100
 18514  11EF  0020               	movlb	0	; select bank0
 18515  11F0  00A9               	movwf	setBuz@time
 18516  11F1  3000               	movlw	0
 18517  11F2  00AA               	movwf	setBuz@time+1
 18518  11F3  3001               	movlw	1
 18519  11F4  3194  24FB         	fcall	_setBuz
 18520  11F6  0008               	return
 18521  11F7                     __end_of_setDimmerLights_SwOn:	
 18522                           
 18523                           	psect	text131
 18524  14FB                     __ptext131:	
 18525 ;; *************** function _setBuz *****************
 18526 ;; Defined at:
 18527 ;;		line 22 in file "../src/Buzzer_B1.c"
 18528 ;; Parameters:    Size  Location     Type
 18529 ;;  count           1    wreg     unsigned char 
 18530 ;;  time            2    9[BANK0 ] int 
 18531 ;; Auto vars:     Size  Location     Type
 18532 ;;  count           1   12[BANK0 ] unsigned char 
 18533 ;; Return value:  Size  Location     Type
 18534 ;;		None               void
 18535 ;; Registers used:
 18536 ;;		wreg, status,2, status,0, pclath, cstack
 18537 ;; Tracked objects:
 18538 ;;		On entry : 0/0
 18539 ;;		On exit  : 0/0
 18540 ;;		Unchanged: 0/0
 18541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18542 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18545 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18546 ;;Total ram usage:        4 bytes
 18547 ;; Hardware stack levels used:    1
 18548 ;; Hardware stack levels required when called:    6
 18549 ;; This function calls:
 18550 ;;		___awdiv
 18551 ;; This function is called by:
 18552 ;;		_setDimmerLights_SwOn
 18553 ;;		_setDimmerLights_Dimming
 18554 ;;		_my_MainTimer
 18555 ;;		_Exception_Main
 18556 ;;		_setTemp_Main
 18557 ;;		_setLog_Code
 18558 ;;		_setRFSW_Control
 18559 ;;		_setRF_AdjControl
 18560 ;;		_setSw_Main
 18561 ;; This function uses a non-reentrant model
 18562 ;;
 18563                           
 18564                           
 18565                           ;psect for function _setBuz
 18566  14FB                     _setBuz:	
 18567                           
 18568                           ;incstack = 0
 18569                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18570                           ;setBuz@count stored from wreg
 18571  14FB  0020               	movlb	0	; select bank0
 18572  14FC  00AC               	movwf	setBuz@count
 18573                           
 18574                           ;Buzzer_B1.c: 23: time /= 20;
 18575  14FD  3014               	movlw	20
 18576  14FE  00A0               	movwf	___awdiv@divisor
 18577  14FF  3000               	movlw	0
 18578  1500  00A1               	movwf	___awdiv@divisor+1
 18579  1501  082A               	movf	setBuz@time+1,w
 18580  1502  01A3               	clrf	___awdiv@dividend+1
 18581  1503  07A3               	addwf	___awdiv@dividend+1,f
 18582  1504  0829               	movf	setBuz@time,w
 18583  1505  01A2               	clrf	___awdiv@dividend
 18584  1506  07A2               	addwf	___awdiv@dividend,f
 18585  1507  3194  2451  3194   	fcall	___awdiv
 18586  150A  0020               	movlb	0	; select bank0
 18587  150B  0821               	movf	?___awdiv+1,w
 18588  150C  01AA               	clrf	setBuz@time+1
 18589  150D  07AA               	addwf	setBuz@time+1,f
 18590  150E  0820               	movf	?___awdiv,w
 18591  150F  01A9               	clrf	setBuz@time
 18592  1510  07A9               	addwf	setBuz@time,f
 18593                           
 18594                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18595  1511  0022               	movlb	2	; select bank2
 18596  1512  1C20               	btfss	_Buz1^(0+256),0
 18597  1513  0008               	return
 18598                           
 18599                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18600  1514  18A0               	btfsc	_Buz1^(0+256),1
 18601  1515  2D2C               	goto	l86
 18602                           
 18603                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18604  1516  14A0               	bsf	_Buz1^(0+256),1
 18605                           
 18606                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18607  1517  01A1               	clrf	(_Buz1^(0+256)+1)
 18608  1518  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18609                           
 18610                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18611  1519  0020               	movlb	0	; select bank0
 18612  151A  082C               	movf	setBuz@count,w
 18613  151B  00AB               	movwf	??_setBuz
 18614  151C  082B               	movf	??_setBuz,w
 18615  151D  0022               	movlb	2	; select bank2
 18616  151E  00A3               	movwf	(_Buz1^(0+256)+3)
 18617                           
 18618                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18619  151F  0020               	movlb	0	; select bank0
 18620  1520  082A               	movf	setBuz@time+1,w
 18621  1521  0022               	movlb	2	; select bank2
 18622  1522  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18623  1523  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18624  1524  0020               	movlb	0	; select bank0
 18625  1525  0829               	movf	setBuz@time,w
 18626  1526  0022               	movlb	2	; select bank2
 18627  1527  01A6               	clrf	(_Buz1^(0+256)+6)
 18628  1528  07A6               	addwf	(_Buz1^(0+256)+6),f
 18629                           
 18630                           ;Buzzer_B1.c: 30: RB3 = 1;
 18631  1529  0020               	movlb	0	; select bank0
 18632  152A  158D               	bsf	13,3	;volatile
 18633                           
 18634                           ;Buzzer_B1.c: 31: } else {
 18635  152B  0008               	return
 18636  152C                     l86:	
 18637                           
 18638                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18639  152C  19A0               	btfsc	_Buz1^(0+256),3
 18640  152D  2D40               	goto	l88
 18641                           
 18642                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18643  152E  15A0               	bsf	_Buz1^(0+256),3
 18644                           
 18645                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18646  152F  0020               	movlb	0	; select bank0
 18647  1530  082C               	movf	setBuz@count,w
 18648  1531  00AB               	movwf	??_setBuz
 18649  1532  082B               	movf	??_setBuz,w
 18650  1533  0022               	movlb	2	; select bank2
 18651  1534  00A4               	movwf	(_Buz1^(0+256)+4)
 18652                           
 18653                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18654  1535  0020               	movlb	0	; select bank0
 18655  1536  082A               	movf	setBuz@time+1,w
 18656  1537  0022               	movlb	2	; select bank2
 18657  1538  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18658  1539  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18659  153A  0020               	movlb	0	; select bank0
 18660  153B  0829               	movf	setBuz@time,w
 18661  153C  0022               	movlb	2	; select bank2
 18662  153D  01A8               	clrf	(_Buz1^(0+256)+8)
 18663  153E  07A8               	addwf	(_Buz1^(0+256)+8),f
 18664                           
 18665                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18666  153F  0008               	return
 18667  1540                     l88:	
 18668  1540  1A20               	btfsc	_Buz1^(0+256),4
 18669  1541  0008               	return
 18670                           
 18671                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18672  1542  1620               	bsf	_Buz1^(0+256),4
 18673                           
 18674                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18675  1543  0020               	movlb	0	; select bank0
 18676  1544  082C               	movf	setBuz@count,w
 18677  1545  00AB               	movwf	??_setBuz
 18678  1546  082B               	movf	??_setBuz,w
 18679  1547  0022               	movlb	2	; select bank2
 18680  1548  00A5               	movwf	(_Buz1^(0+256)+5)
 18681                           
 18682                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18683  1549  0020               	movlb	0	; select bank0
 18684  154A  082A               	movf	setBuz@time+1,w
 18685  154B  0022               	movlb	2	; select bank2
 18686  154C  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18687  154D  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18688  154E  0020               	movlb	0	; select bank0
 18689  154F  0829               	movf	setBuz@time,w
 18690  1550  0022               	movlb	2	; select bank2
 18691  1551  01AA               	clrf	(_Buz1^(0+256)+10)
 18692  1552  07AA               	addwf	(_Buz1^(0+256)+10),f
 18693  1553  0008               	return
 18694  1554                     __end_of_setBuz:	
 18695                           
 18696                           	psect	text132
 18697  1451                     __ptext132:	
 18698 ;; *************** function ___awdiv *****************
 18699 ;; Defined at:
 18700 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18701 ;; Parameters:    Size  Location     Type
 18702 ;;  divisor         2    0[BANK0 ] int 
 18703 ;;  dividend        2    2[BANK0 ] int 
 18704 ;; Auto vars:     Size  Location     Type
 18705 ;;  quotient        2    7[BANK0 ] int 
 18706 ;;  sign            1    6[BANK0 ] unsigned char 
 18707 ;;  counter         1    5[BANK0 ] unsigned char 
 18708 ;; Return value:  Size  Location     Type
 18709 ;;                  2    0[BANK0 ] int 
 18710 ;; Registers used:
 18711 ;;		wreg, status,2, status,0
 18712 ;; Tracked objects:
 18713 ;;		On entry : 0/0
 18714 ;;		On exit  : 0/0
 18715 ;;		Unchanged: 0/0
 18716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18717 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18718 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18720 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18721 ;;Total ram usage:        9 bytes
 18722 ;; Hardware stack levels used:    1
 18723 ;; Hardware stack levels required when called:    5
 18724 ;; This function calls:
 18725 ;;		Nothing
 18726 ;; This function is called by:
 18727 ;;		_setBuz
 18728 ;; This function uses a non-reentrant model
 18729 ;;
 18730                           
 18731                           
 18732                           ;psect for function ___awdiv
 18733  1451                     ___awdiv:	
 18734                           
 18735                           ;incstack = 0
 18736                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18737  1451  0020               	movlb	0	; select bank0
 18738  1452  01A6               	clrf	___awdiv@sign
 18739  1453  1FA1               	btfss	___awdiv@divisor+1,7
 18740  1454  2C5C               	goto	l8457
 18741  1455  09A0               	comf	___awdiv@divisor,f
 18742  1456  09A1               	comf	___awdiv@divisor+1,f
 18743  1457  0AA0               	incf	___awdiv@divisor,f
 18744  1458  1903               	skipnz
 18745  1459  0AA1               	incf	___awdiv@divisor+1,f
 18746  145A  01A6               	clrf	___awdiv@sign
 18747  145B  0AA6               	incf	___awdiv@sign,f
 18748  145C                     l8457:	
 18749  145C  1FA3               	btfss	___awdiv@dividend+1,7
 18750  145D  2C67               	goto	l8463
 18751  145E  09A2               	comf	___awdiv@dividend,f
 18752  145F  09A3               	comf	___awdiv@dividend+1,f
 18753  1460  0AA2               	incf	___awdiv@dividend,f
 18754  1461  1903               	skipnz
 18755  1462  0AA3               	incf	___awdiv@dividend+1,f
 18756  1463  3001               	movlw	1
 18757  1464  00A4               	movwf	??___awdiv
 18758  1465  0824               	movf	??___awdiv,w
 18759  1466  06A6               	xorwf	___awdiv@sign,f
 18760  1467                     l8463:	
 18761  1467  01A7               	clrf	___awdiv@quotient
 18762  1468  01A8               	clrf	___awdiv@quotient+1
 18763  1469  0821               	movf	___awdiv@divisor+1,w
 18764  146A  0420               	iorwf	___awdiv@divisor,w
 18765  146B  1903               	skipnz
 18766  146C  2C96               	goto	l8485
 18767  146D  01A5               	clrf	___awdiv@counter
 18768  146E  0AA5               	incf	___awdiv@counter,f
 18769  146F                     l8473:	
 18770  146F  1BA1               	btfsc	___awdiv@divisor+1,7
 18771  1470  2C7B               	goto	l8475
 18772  1471  3001               	movlw	1
 18773  1472                     u8815:	
 18774  1472  35A0               	lslf	___awdiv@divisor,f
 18775  1473  0DA1               	rlf	___awdiv@divisor+1,f
 18776  1474  0B89               	decfsz	9,f
 18777  1475  2C72               	goto	u8815
 18778  1476  3001               	movlw	1
 18779  1477  00A4               	movwf	??___awdiv
 18780  1478  0824               	movf	??___awdiv,w
 18781  1479  07A5               	addwf	___awdiv@counter,f
 18782  147A  2C6F               	goto	l8473
 18783  147B                     l8475:	
 18784  147B  3001               	movlw	1
 18785  147C                     u8835:	
 18786  147C  35A7               	lslf	___awdiv@quotient,f
 18787  147D  0DA8               	rlf	___awdiv@quotient+1,f
 18788  147E  0B89               	decfsz	9,f
 18789  147F  2C7C               	goto	u8835
 18790  1480  0821               	movf	___awdiv@divisor+1,w
 18791  1481  0223               	subwf	___awdiv@dividend+1,w
 18792  1482  1D03               	skipz
 18793  1483  2C86               	goto	u8845
 18794  1484  0820               	movf	___awdiv@divisor,w
 18795  1485  0222               	subwf	___awdiv@dividend,w
 18796  1486                     u8845:	
 18797  1486  1C03               	skipc
 18798  1487  2C8D               	goto	l8481
 18799  1488  0820               	movf	___awdiv@divisor,w
 18800  1489  02A2               	subwf	___awdiv@dividend,f
 18801  148A  0821               	movf	___awdiv@divisor+1,w
 18802  148B  3BA3               	subwfb	___awdiv@dividend+1,f
 18803  148C  1427               	bsf	___awdiv@quotient,0
 18804  148D                     l8481:	
 18805  148D  3001               	movlw	1
 18806  148E                     u8855:	
 18807  148E  36A1               	lsrf	___awdiv@divisor+1,f
 18808  148F  0CA0               	rrf	___awdiv@divisor,f
 18809  1490  0B89               	decfsz	9,f
 18810  1491  2C8E               	goto	u8855
 18811  1492  3001               	movlw	1
 18812  1493  02A5               	subwf	___awdiv@counter,f
 18813  1494  1D03               	btfss	3,2
 18814  1495  2C7B               	goto	l8475
 18815  1496                     l8485:	
 18816  1496  0826               	movf	___awdiv@sign,w
 18817  1497  1903               	btfsc	3,2
 18818  1498  2C9E               	goto	l8489
 18819  1499  09A7               	comf	___awdiv@quotient,f
 18820  149A  09A8               	comf	___awdiv@quotient+1,f
 18821  149B  0AA7               	incf	___awdiv@quotient,f
 18822  149C  1903               	skipnz
 18823  149D  0AA8               	incf	___awdiv@quotient+1,f
 18824  149E                     l8489:	
 18825  149E  0828               	movf	___awdiv@quotient+1,w
 18826  149F  01A1               	clrf	?___awdiv+1
 18827  14A0  07A1               	addwf	?___awdiv+1,f
 18828  14A1  0827               	movf	___awdiv@quotient,w
 18829  14A2  01A0               	clrf	?___awdiv
 18830  14A3  07A0               	addwf	?___awdiv,f
 18831  14A4  0008               	return
 18832  14A5                     __end_of___awdiv:	
 18833                           
 18834                           	psect	text133
 18835  1264                     __ptext133:	
 18836 ;; *************** function _setDimmerLights_SwOff *****************
 18837 ;; Defined at:
 18838 ;;		line 738 in file "../src/Dimmer_B1.c"
 18839 ;; Parameters:    Size  Location     Type
 18840 ;;  sw              1    wreg     unsigned char 
 18841 ;; Auto vars:     Size  Location     Type
 18842 ;;  sw              1    2[BANK0 ] unsigned char 
 18843 ;; Return value:  Size  Location     Type
 18844 ;;		None               void
 18845 ;; Registers used:
 18846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18847 ;; Tracked objects:
 18848 ;;		On entry : 0/0
 18849 ;;		On exit  : 0/0
 18850 ;;		Unchanged: 0/0
 18851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18855 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18856 ;;Total ram usage:        1 bytes
 18857 ;; Hardware stack levels used:    1
 18858 ;; Hardware stack levels required when called:    6
 18859 ;; This function calls:
 18860 ;;		_DimmerLights_SelectPointer
 18861 ;; This function is called by:
 18862 ;;		_DlyOff_Main
 18863 ;;		_Exception_Main
 18864 ;;		_setControl_Lights_Table
 18865 ;;		_setRFSW_Control
 18866 ;;		_setRFSW_AdjControl
 18867 ;;		_setSw_Main
 18868 ;; This function uses a non-reentrant model
 18869 ;;
 18870                           
 18871                           
 18872                           ;psect for function _setDimmerLights_SwOff
 18873  1264                     _setDimmerLights_SwOff:	
 18874                           
 18875                           ;incstack = 0
 18876                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18877                           ;setDimmerLights_SwOff@sw stored from wreg
 18878  1264  0020               	movlb	0	; select bank0
 18879  1265  00A2               	movwf	setDimmerLights_SwOff@sw
 18880                           
 18881                           ;Dimmer_B1.c: 739: DimmerLights_SelectPointer(sw);
 18882  1266  0822               	movf	setDimmerLights_SwOff@sw,w
 18883  1267  319B  2340  3192   	fcall	_DimmerLights_SelectPointer
 18884                           
 18885                           ;Dimmer_B1.c: 741: if (DimmerLights->SwFlag == 1) {
 18886  126A  0021               	movlb	1	; select bank1
 18887  126B  084E               	movf	_DimmerLights^(0+128),w
 18888  126C  0086               	movwf	6
 18889  126D  3001               	movlw	1	; select bank2/3
 18890  126E  0087               	movwf	7
 18891  126F  1C01               	btfss	1,0
 18892  1270  0008               	return
 18893                           
 18894                           ;Dimmer_B1.c: 742: DimmerLights->SwFlag = 0;
 18895  1271  084E               	movf	_DimmerLights^(0+128),w
 18896  1272  0086               	movwf	6
 18897  1273  3001               	movlw	1	; select bank2/3
 18898  1274  0087               	movwf	7
 18899  1275  1001               	bcf	1,0
 18900                           
 18901                           ;Dimmer_B1.c: 743: if (DimmerLights->Status == 1) {
 18902  1276  0A4E               	incf	_DimmerLights^(0+128),w
 18903  1277  0086               	movwf	6
 18904  1278  3001               	movlw	1	; select bank2/3
 18905  1279  0087               	movwf	7
 18906  127A  1C01               	btfss	1,0
 18907  127B  2A92               	goto	l8833
 18908                           
 18909                           ;Dimmer_B1.c: 744: if (DimmerLights->DimmingSwFlag == 1) {
 18910  127C  084E               	movf	_DimmerLights^(0+128),w
 18911  127D  0086               	movwf	6
 18912  127E  3001               	movlw	1	; select bank2/3
 18913  127F  0087               	movwf	7
 18914  1280  1D81               	btfss	1,3
 18915  1281  0008               	return
 18916                           
 18917                           ;Dimmer_B1.c: 745: DimmerLights->DimmingSwFlag = 0;
 18918  1282  084E               	movf	_DimmerLights^(0+128),w
 18919  1283  0086               	movwf	6
 18920  1284  3001               	movlw	1	; select bank2/3
 18921  1285  0087               	movwf	7
 18922  1286  1181               	bcf	1,3
 18923                           
 18924                           ;Dimmer_B1.c: 747: DimmerLights->DimmingTrigger = 1;
 18925  1287  084E               	movf	_DimmerLights^(0+128),w
 18926  1288  0086               	movwf	6
 18927  1289  3001               	movlw	1	; select bank2/3
 18928  128A  0087               	movwf	7
 18929  128B  1601               	bsf	1,4
 18930                           
 18931                           ;Dimmer_B1.c: 748: DimmerLights->DimmingSwitch = 0;
 18932  128C  084E               	movf	_DimmerLights^(0+128),w
 18933  128D  0086               	movwf	6
 18934  128E  3001               	movlw	1	; select bank2/3
 18935  128F  0087               	movwf	7
 18936  1290  1281               	bcf	1,5
 18937                           
 18938                           ;Dimmer_B1.c: 749: }
 18939                           ;Dimmer_B1.c: 750: } else {
 18940  1291  0008               	return
 18941  1292                     l8833:	
 18942                           
 18943                           ;Dimmer_B1.c: 752: DimmerLights->Trigger = 1;
 18944  1292  084E               	movf	_DimmerLights^(0+128),w
 18945  1293  0086               	movwf	6
 18946  1294  3001               	movlw	1	; select bank2/3
 18947  1295  0087               	movwf	7
 18948  1296  1481               	bsf	1,1
 18949                           
 18950                           ;Dimmer_B1.c: 753: DimmerLights->Switch = 0;
 18951  1297  084E               	movf	_DimmerLights^(0+128),w
 18952  1298  0086               	movwf	6
 18953  1299  3001               	movlw	1	; select bank2/3
 18954  129A  0087               	movwf	7
 18955  129B  1101               	bcf	1,2
 18956  129C  0008               	return
 18957  129D                     __end_of_setDimmerLights_SwOff:	
 18958                           
 18959                           	psect	text134
 18960  1C02                     __ptext134:	
 18961 ;; *************** function _getDimmerLights_Status *****************
 18962 ;; Defined at:
 18963 ;;		line 1079 in file "../src/Dimmer_B1.c"
 18964 ;; Parameters:    Size  Location     Type
 18965 ;;  lights          1    wreg     unsigned char 
 18966 ;; Auto vars:     Size  Location     Type
 18967 ;;  lights          1    2[BANK0 ] unsigned char 
 18968 ;;  status          1    3[BANK0 ] unsigned char 
 18969 ;; Return value:  Size  Location     Type
 18970 ;;                  1    wreg      unsigned char 
 18971 ;; Registers used:
 18972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18973 ;; Tracked objects:
 18974 ;;		On entry : 0/0
 18975 ;;		On exit  : 0/0
 18976 ;;		Unchanged: 0/0
 18977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18979 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18981 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18982 ;;Total ram usage:        2 bytes
 18983 ;; Hardware stack levels used:    1
 18984 ;; Hardware stack levels required when called:    6
 18985 ;; This function calls:
 18986 ;;		_DimmerLights_SelectPointer
 18987 ;; This function is called by:
 18988 ;;		_DlyOff_Main
 18989 ;;		_Exception_Main
 18990 ;;		_setControl_Lights_Table
 18991 ;;		_setRFSW_Control
 18992 ;;		_setRFSW_AdjControl
 18993 ;;		_setRF_AdjControl
 18994 ;; This function uses a non-reentrant model
 18995 ;;
 18996                           
 18997                           
 18998                           ;psect for function _getDimmerLights_Status
 18999  1C02                     _getDimmerLights_Status:	
 19000                           
 19001                           ;incstack = 0
 19002                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19003                           ;getDimmerLights_Status@lights stored from wreg
 19004  1C02  0020               	movlb	0	; select bank0
 19005  1C03  00A2               	movwf	getDimmerLights_Status@lights
 19006                           
 19007                           ;Dimmer_B1.c: 1080: DimmerLights_SelectPointer(lights);
 19008  1C04  0822               	movf	getDimmerLights_Status@lights,w
 19009  1C05  319B  2340         	fcall	_DimmerLights_SelectPointer
 19010                           
 19011                           ;Dimmer_B1.c: 1081: char status = DimmerLights->Status == 1 ? 1 : 0;
 19012  1C07  0021               	movlb	1	; select bank1
 19013  1C08  0A4E               	incf	_DimmerLights^(0+128),w
 19014  1C09  0086               	movwf	6
 19015  1C0A  3001               	movlw	1	; select bank2/3
 19016  1C0B  0087               	movwf	7
 19017  1C0C  3000               	movlw	0
 19018  1C0D  1801               	btfsc	1,0
 19019  1C0E  3001               	movlw	1
 19020  1C0F  0020               	movlb	0	; select bank0
 19021  1C10  00A3               	movwf	getDimmerLights_Status@status
 19022                           
 19023                           ;Dimmer_B1.c: 1082: return status;
 19024  1C11  0823               	movf	getDimmerLights_Status@status,w
 19025  1C12  0008               	return
 19026  1C13                     __end_of_getDimmerLights_Status:	
 19027                           
 19028                           	psect	text135
 19029  1B40                     __ptext135:	
 19030 ;; *************** function _DimmerLights_SelectPointer *****************
 19031 ;; Defined at:
 19032 ;;		line 619 in file "../src/Dimmer_B1.c"
 19033 ;; Parameters:    Size  Location     Type
 19034 ;;  lights          1    wreg     unsigned char 
 19035 ;; Auto vars:     Size  Location     Type
 19036 ;;  lights          1    1[BANK0 ] unsigned char 
 19037 ;; Return value:  Size  Location     Type
 19038 ;;		None               void
 19039 ;; Registers used:
 19040 ;;		wreg
 19041 ;; Tracked objects:
 19042 ;;		On entry : 0/0
 19043 ;;		On exit  : 0/0
 19044 ;;		Unchanged: 0/0
 19045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19049 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19050 ;;Total ram usage:        2 bytes
 19051 ;; Hardware stack levels used:    1
 19052 ;; Hardware stack levels required when called:    5
 19053 ;; This function calls:
 19054 ;;		Nothing
 19055 ;; This function is called by:
 19056 ;;		_setDimmerLights_SwOn
 19057 ;;		_setDimmerLights_SwOff
 19058 ;;		_setDimmerLights_DimmingOn
 19059 ;;		_setDimmerLights_Main
 19060 ;;		_getDimmerLights_Status
 19061 ;;		_setDimmerLights_DimmingRun
 19062 ;;		_setRF_AdjControl
 19063 ;;		_setDimmerLights_Status
 19064 ;; This function uses a non-reentrant model
 19065 ;;
 19066                           
 19067                           
 19068                           ;psect for function _DimmerLights_SelectPointer
 19069  1B40                     _DimmerLights_SelectPointer:	
 19070                           
 19071                           ;incstack = 0
 19072                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19073                           ;DimmerLights_SelectPointer@lights stored from wreg
 19074  1B40  0020               	movlb	0	; select bank0
 19075  1B41  00A1               	movwf	DimmerLights_SelectPointer@lights
 19076                           
 19077                           ;Dimmer_B1.c: 621: if (lights == 1) {
 19078  1B42  0821               	movf	DimmerLights_SelectPointer@lights,w
 19079  1B43  3A01               	xorlw	1
 19080  1B44  1D03               	skipz
 19081  1B45  0008               	return
 19082                           
 19083                           ;Dimmer_B1.c: 622: DimmerLights = &DimmerLights1;
 19084  1B46  305E               	movlw	_DimmerLights1& (0+255)
 19085  1B47  00A0               	movwf	??_DimmerLights_SelectPointer
 19086  1B48  0820               	movf	??_DimmerLights_SelectPointer,w
 19087  1B49  0021               	movlb	1	; select bank1
 19088  1B4A  00CE               	movwf	_DimmerLights^(0+128)
 19089  1B4B  0008               	return
 19090  1B4C                     __end_of_DimmerLights_SelectPointer:	
 19091                           
 19092                           	psect	text136
 19093  1A74                     __ptext136:	
 19094 ;; *************** function _DelayOff_Initialization *****************
 19095 ;; Defined at:
 19096 ;;		line 26 in file "../src/DelayOff_B1.c"
 19097 ;; Parameters:    Size  Location     Type
 19098 ;;		None
 19099 ;; Auto vars:     Size  Location     Type
 19100 ;;		None
 19101 ;; Return value:  Size  Location     Type
 19102 ;;		None               void
 19103 ;; Registers used:
 19104 ;;		wreg, status,2, status,0, pclath, cstack
 19105 ;; Tracked objects:
 19106 ;;		On entry : 0/0
 19107 ;;		On exit  : 0/0
 19108 ;;		Unchanged: 0/0
 19109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19114 ;;Total ram usage:        0 bytes
 19115 ;; Hardware stack levels used:    1
 19116 ;; Hardware stack levels required when called:    7
 19117 ;; This function calls:
 19118 ;;		_DlyOff_Initialization
 19119 ;; This function is called by:
 19120 ;;		_main
 19121 ;; This function uses a non-reentrant model
 19122 ;;
 19123                           
 19124                           
 19125                           ;psect for function _DelayOff_Initialization
 19126  1A74                     _DelayOff_Initialization:	
 19127                           
 19128                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19129                           
 19130                           ;incstack = 0
 19131                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19132  1A74  3001               	movlw	1
 19133  1A75  319A  22A1         	fcall	_DlyOff_Initialization
 19134  1A77  0008               	return
 19135  1A78                     __end_of_DelayOff_Initialization:	
 19136                           
 19137                           	psect	text137
 19138  1AA1                     __ptext137:	
 19139 ;; *************** function _DlyOff_Initialization *****************
 19140 ;; Defined at:
 19141 ;;		line 56 in file "../src/DelayOff_B1.c"
 19142 ;; Parameters:    Size  Location     Type
 19143 ;;  sw              1    wreg     unsigned char 
 19144 ;; Auto vars:     Size  Location     Type
 19145 ;;  sw              1    2[BANK0 ] unsigned char 
 19146 ;; Return value:  Size  Location     Type
 19147 ;;		None               void
 19148 ;; Registers used:
 19149 ;;		wreg, status,2, status,0, pclath, cstack
 19150 ;; Tracked objects:
 19151 ;;		On entry : 0/0
 19152 ;;		On exit  : 0/0
 19153 ;;		Unchanged: 0/0
 19154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19158 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19159 ;;Total ram usage:        1 bytes
 19160 ;; Hardware stack levels used:    1
 19161 ;; Hardware stack levels required when called:    6
 19162 ;; This function calls:
 19163 ;;		_DelayOffPointSelect
 19164 ;; This function is called by:
 19165 ;;		_DelayOff_Initialization
 19166 ;; This function uses a non-reentrant model
 19167 ;;
 19168                           
 19169                           
 19170                           ;psect for function _DlyOff_Initialization
 19171  1AA1                     _DlyOff_Initialization:	
 19172                           
 19173                           ;incstack = 0
 19174                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19175                           ;DlyOff_Initialization@sw stored from wreg
 19176  1AA1  0020               	movlb	0	; select bank0
 19177  1AA2  00A2               	movwf	DlyOff_Initialization@sw
 19178                           
 19179                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19180  1AA3  0822               	movf	DlyOff_Initialization@sw,w
 19181  1AA4  319B  2334         	fcall	_DelayOffPointSelect
 19182  1AA6  0008               	return
 19183  1AA7                     __end_of_DlyOff_Initialization:	
 19184                           
 19185                           	psect	text138
 19186  1B34                     __ptext138:	
 19187 ;; *************** function _DelayOffPointSelect *****************
 19188 ;; Defined at:
 19189 ;;		line 7 in file "../src/DelayOff_B1.c"
 19190 ;; Parameters:    Size  Location     Type
 19191 ;;  sw              1    wreg     unsigned char 
 19192 ;; Auto vars:     Size  Location     Type
 19193 ;;  sw              1    1[BANK0 ] unsigned char 
 19194 ;; Return value:  Size  Location     Type
 19195 ;;		None               void
 19196 ;; Registers used:
 19197 ;;		wreg
 19198 ;; Tracked objects:
 19199 ;;		On entry : 0/0
 19200 ;;		On exit  : 0/0
 19201 ;;		Unchanged: 0/0
 19202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19207 ;;Total ram usage:        2 bytes
 19208 ;; Hardware stack levels used:    1
 19209 ;; Hardware stack levels required when called:    5
 19210 ;; This function calls:
 19211 ;;		Nothing
 19212 ;; This function is called by:
 19213 ;;		_DlyOff_Initialization
 19214 ;;		_DlyOff_Main
 19215 ;;		_setDelayOff_GO
 19216 ;;		_getDelayOff_GO
 19217 ;; This function uses a non-reentrant model
 19218 ;;
 19219                           
 19220                           
 19221                           ;psect for function _DelayOffPointSelect
 19222  1B34                     _DelayOffPointSelect:	
 19223                           
 19224                           ;incstack = 0
 19225                           ; Regs used in _DelayOffPointSelect: [wreg]
 19226                           ;DelayOffPointSelect@sw stored from wreg
 19227  1B34  0020               	movlb	0	; select bank0
 19228  1B35  00A1               	movwf	DelayOffPointSelect@sw
 19229                           
 19230                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19231  1B36  0821               	movf	DelayOffPointSelect@sw,w
 19232  1B37  3A01               	xorlw	1
 19233  1B38  1D03               	skipz
 19234  1B39  0008               	return
 19235                           
 19236                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19237  1B3A  3066               	movlw	_DlySw1& (0+255)
 19238  1B3B  00A0               	movwf	??_DelayOffPointSelect
 19239  1B3C  0820               	movf	??_DelayOffPointSelect,w
 19240  1B3D  0021               	movlb	1	; select bank1
 19241  1B3E  00CC               	movwf	_DelayOff^(0+128)
 19242  1B3F  0008               	return
 19243  1B40                     __end_of_DelayOffPointSelect:	
 19244                           
 19245                           	psect	text139
 19246  07AE                     __ptext139:	
 19247 ;; *************** function _Buzzer_Main *****************
 19248 ;; Defined at:
 19249 ;;		line 46 in file "../src/Buzzer_B1.c"
 19250 ;; Parameters:    Size  Location     Type
 19251 ;;		None
 19252 ;; Auto vars:     Size  Location     Type
 19253 ;;		None
 19254 ;; Return value:  Size  Location     Type
 19255 ;;		None               void
 19256 ;; Registers used:
 19257 ;;		wreg, status,2, status,0
 19258 ;; Tracked objects:
 19259 ;;		On entry : 0/0
 19260 ;;		On exit  : 0/0
 19261 ;;		Unchanged: 0/0
 19262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19266 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19267 ;;Total ram usage:        1 bytes
 19268 ;; Hardware stack levels used:    1
 19269 ;; Hardware stack levels required when called:    5
 19270 ;; This function calls:
 19271 ;;		Nothing
 19272 ;; This function is called by:
 19273 ;;		_main
 19274 ;; This function uses a non-reentrant model
 19275 ;;
 19276                           
 19277                           
 19278                           ;psect for function _Buzzer_Main
 19279  07AE                     _Buzzer_Main:	
 19280                           
 19281                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19282                           
 19283                           ;incstack = 0
 19284                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19285  07AE  0022               	movlb	2	; select bank2
 19286  07AF  1CA0               	btfss	_Buz1^(0+256),1
 19287  07B0  0008               	return
 19288                           
 19289                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19290  07B1  3001               	movlw	1
 19291  07B2  07A1               	addwf	(_Buz1^(0+256)+1),f
 19292  07B3  3000               	movlw	0
 19293  07B4  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19294                           
 19295                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19296  07B5  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19297  07B6  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19298  07B7  1D03               	skipz
 19299  07B8  2FBB               	goto	u11915
 19300  07B9  0826               	movf	(_Buz1^(0+256)+6),w
 19301  07BA  0221               	subwf	(_Buz1^(0+256)+1),w
 19302  07BB                     u11915:	
 19303  07BB  1C03               	skipc
 19304  07BC  0008               	return
 19305                           
 19306                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19307  07BD  01A1               	clrf	(_Buz1^(0+256)+1)
 19308  07BE  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19309                           
 19310                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19311  07BF  12A0               	bcf	_Buz1^(0+256),5
 19312  07C0  0020               	movlb	0	; select bank0
 19313  07C1  1D8D               	btfss	13,3	;volatile
 19314  07C2  2FC5               	goto	l10403
 19315  07C3  0022               	movlb	2	; select bank2
 19316  07C4  16A0               	bsf	_Buz1^(0+256),5
 19317  07C5                     l10403:	
 19318                           
 19319                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19320  07C5  0022               	movlb	2	; select bank2
 19321  07C6  1AA0               	btfsc	_Buz1^(0+256),5
 19322  07C7  2FF1               	goto	l96
 19323                           
 19324                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19325  07C8  08A3               	movf	(_Buz1^(0+256)+3),f
 19326  07C9  1D03               	skipz
 19327  07CA  2FED               	goto	l97
 19328                           
 19329                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19330  07CB  1DA0               	btfss	_Buz1^(0+256),3
 19331  07CC  2FDB               	goto	l98
 19332                           
 19333                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19334  07CD  11A0               	bcf	_Buz1^(0+256),3
 19335                           
 19336                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19337  07CE  0824               	movf	(_Buz1^(0+256)+4),w
 19338  07CF  0020               	movlb	0	; select bank0
 19339  07D0  00A0               	movwf	??_Buzzer_Main
 19340  07D1  0820               	movf	??_Buzzer_Main,w
 19341  07D2  0022               	movlb	2	; select bank2
 19342  07D3  00A3               	movwf	(_Buz1^(0+256)+3)
 19343                           
 19344                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19345  07D4  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19346  07D5  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19347  07D6  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19348  07D7  0828               	movf	(_Buz1^(0+256)+8),w
 19349  07D8  01A6               	clrf	(_Buz1^(0+256)+6)
 19350  07D9  07A6               	addwf	(_Buz1^(0+256)+6),f
 19351                           
 19352                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19353  07DA  0008               	return
 19354  07DB                     l98:	
 19355  07DB  1E20               	btfss	_Buz1^(0+256),4
 19356  07DC  2FEB               	goto	l100
 19357                           
 19358                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19359  07DD  1220               	bcf	_Buz1^(0+256),4
 19360                           
 19361                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19362  07DE  0825               	movf	(_Buz1^(0+256)+5),w
 19363  07DF  0020               	movlb	0	; select bank0
 19364  07E0  00A0               	movwf	??_Buzzer_Main
 19365  07E1  0820               	movf	??_Buzzer_Main,w
 19366  07E2  0022               	movlb	2	; select bank2
 19367  07E3  00A3               	movwf	(_Buz1^(0+256)+3)
 19368                           
 19369                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19370  07E4  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19371  07E5  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19372  07E6  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19373  07E7  082A               	movf	(_Buz1^(0+256)+10),w
 19374  07E8  01A6               	clrf	(_Buz1^(0+256)+6)
 19375  07E9  07A6               	addwf	(_Buz1^(0+256)+6),f
 19376                           
 19377                           ;Buzzer_B1.c: 62: } else {
 19378  07EA  0008               	return
 19379  07EB                     l100:	
 19380                           
 19381                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19382  07EB  10A0               	bcf	_Buz1^(0+256),1
 19383                           
 19384                           ;Buzzer_B1.c: 64: }
 19385                           ;Buzzer_B1.c: 65: } else {
 19386  07EC  0008               	return
 19387  07ED                     l97:	
 19388                           
 19389                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19390  07ED  16A0               	bsf	_Buz1^(0+256),5
 19391                           
 19392                           ;Buzzer_B1.c: 68: RB3 = 1;
 19393  07EE  0020               	movlb	0	; select bank0
 19394  07EF  158D               	bsf	13,3	;volatile
 19395                           
 19396                           ;Buzzer_B1.c: 69: }
 19397                           ;Buzzer_B1.c: 70: } else {
 19398  07F0  0008               	return
 19399  07F1                     l96:	
 19400                           
 19401                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19402  07F1  12A0               	bcf	_Buz1^(0+256),5
 19403                           
 19404                           ;Buzzer_B1.c: 73: RB3 = 0;
 19405  07F2  0020               	movlb	0	; select bank0
 19406  07F3  118D               	bcf	13,3	;volatile
 19407                           
 19408                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19409  07F4  3001               	movlw	1
 19410  07F5  0022               	movlb	2	; select bank2
 19411  07F6  02A3               	subwf	(_Buz1^(0+256)+3),f
 19412  07F7  0008               	return
 19413  07F8                     __end_of_Buzzer_Main:	
 19414                           
 19415                           	psect	text140
 19416  1A62                     __ptext140:	
 19417 ;; *************** function _Buzzer_Initialization *****************
 19418 ;; Defined at:
 19419 ;;		line 11 in file "../src/Buzzer_B1.c"
 19420 ;; Parameters:    Size  Location     Type
 19421 ;;		None
 19422 ;; Auto vars:     Size  Location     Type
 19423 ;;		None
 19424 ;; Return value:  Size  Location     Type
 19425 ;;		None               void
 19426 ;; Registers used:
 19427 ;;		None
 19428 ;; Tracked objects:
 19429 ;;		On entry : 0/0
 19430 ;;		On exit  : 0/0
 19431 ;;		Unchanged: 0/0
 19432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19437 ;;Total ram usage:        0 bytes
 19438 ;; Hardware stack levels used:    1
 19439 ;; Hardware stack levels required when called:    5
 19440 ;; This function calls:
 19441 ;;		Nothing
 19442 ;; This function is called by:
 19443 ;;		_main
 19444 ;; This function uses a non-reentrant model
 19445 ;;
 19446                           
 19447                           
 19448                           ;psect for function _Buzzer_Initialization
 19449  1A62                     _Buzzer_Initialization:	
 19450                           
 19451                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19452                           
 19453                           ;incstack = 0
 19454                           ; Regs used in _Buzzer_Initialization: []
 19455  1A62  0022               	movlb	2	; select bank2
 19456  1A63  1420               	bsf	_Buz1^(0+256),0
 19457  1A64  0008               	return
 19458  1A65                     __end_of_Buzzer_Initialization:	
 19459                           
 19460                           	psect	intentry
 19461  0004                     __pintentry:	
 19462 ;; *************** function _ISR *****************
 19463 ;; Defined at:
 19464 ;;		line 116 in file "../src/MCU_B1.c"
 19465 ;; Parameters:    Size  Location     Type
 19466 ;;		None
 19467 ;; Auto vars:     Size  Location     Type
 19468 ;;		None
 19469 ;; Return value:  Size  Location     Type
 19470 ;;		None               void
 19471 ;; Registers used:
 19472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19473 ;; Tracked objects:
 19474 ;;		On entry : 0/0
 19475 ;;		On exit  : 0/0
 19476 ;;		Unchanged: 0/0
 19477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19481 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19482 ;;Total ram usage:        1 bytes
 19483 ;; Hardware stack levels used:    1
 19484 ;; Hardware stack levels required when called:    4
 19485 ;; This function calls:
 19486 ;;		_IOC_ISR
 19487 ;;		_TMR1_ISR
 19488 ;; This function is called by:
 19489 ;;		Interrupt level 1
 19490 ;; This function uses a non-reentrant model
 19491 ;;
 19492                           
 19493  0004                     _ISR:	
 19494                           
 19495                           ;incstack = 0
 19496                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19497  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19498  0005  3180               	pagesel	$
 19499  0006  0020               	movlb	0	; select bank0
 19500  0007  087F               	movf	127,w
 19501  0008  00FC               	movwf	??_ISR
 19502                           
 19503                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19504  0009  0021               	movlb	1	; select bank1
 19505  000A  1C11               	btfss	17,0	;volatile
 19506  000B  2812               	goto	i1l10903
 19507  000C  0020               	movlb	0	; select bank0
 19508  000D  1C11               	btfss	17,0	;volatile
 19509  000E  2812               	goto	i1l10903
 19510                           
 19511                           ;MCU_B1.c: 126: TMR1_ISR();
 19512  000F  319E  26D5  3180   	fcall	_TMR1_ISR
 19513  0012                     i1l10903:	
 19514                           
 19515                           ;MCU_B1.c: 127: }
 19516                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19517  0012  198B               	btfsc	11,3	;volatile
 19518  0013  1C0B               	btfss	11,0	;volatile
 19519  0014  281A               	goto	i1l1208
 19520  0015  0027               	movlb	7	; select bank7
 19521  0016  1D16               	btfss	22,2	;volatile
 19522  0017  281A               	goto	i1l1208
 19523                           
 19524                           ;MCU_B1.c: 139: IOC_ISR();
 19525  0018  319A  22D8         	fcall	_IOC_ISR
 19526  001A                     i1l1208:	
 19527                           ;MCU_B1.c: 140: }
 19528                           ;MCU_B1.c: 148: return;
 19529                           
 19530  001A  087C               	movf	??_ISR,w
 19531  001B  0020               	movlb	0	; select bank0
 19532  001C  00FF               	movwf	127
 19533  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19534  001E  0009               	retfie
 19535  001F                     __end_of_ISR:	
 19536                           
 19537                           	psect	text142
 19538  1ED5                     __ptext142:	
 19539 ;; *************** function _TMR1_ISR *****************
 19540 ;; Defined at:
 19541 ;;		line 236 in file "../src/MCU_B1.c"
 19542 ;; Parameters:    Size  Location     Type
 19543 ;;		None
 19544 ;; Auto vars:     Size  Location     Type
 19545 ;;		None
 19546 ;; Return value:  Size  Location     Type
 19547 ;;		None               void
 19548 ;; Registers used:
 19549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19550 ;; Tracked objects:
 19551 ;;		On entry : 0/0
 19552 ;;		On exit  : 0/0
 19553 ;;		Unchanged: 0/0
 19554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19559 ;;Total ram usage:        0 bytes
 19560 ;; Hardware stack levels used:    1
 19561 ;; Hardware stack levels required when called:    1
 19562 ;; This function calls:
 19563 ;;		_DimmerLights_TMR_1
 19564 ;; This function is called by:
 19565 ;;		_ISR
 19566 ;; This function uses a non-reentrant model
 19567 ;;
 19568                           
 19569                           
 19570                           ;psect for function _TMR1_ISR
 19571  1ED5                     _TMR1_ISR:	
 19572                           
 19573                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19574                           
 19575                           ;incstack = 0
 19576                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19577  1ED5  3189  21C3  319E   	fcall	_DimmerLights_TMR_1
 19578                           
 19579                           ;MCU_B1.c: 268: Timer1.Count++;
 19580  1ED8  3001               	movlw	1
 19581  1ED9  0022               	movlb	2	; select bank2
 19582  1EDA  07B2               	addwf	(_Timer1^(0+256)+1),f
 19583  1EDB  3000               	movlw	0
 19584  1EDC  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19585                           
 19586                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19587  1EDD  3001               	movlw	1
 19588  1EDE  3E31               	addlw	_Timer1& (0+255)
 19589  1EDF  0086               	movwf	6
 19590  1EE0  3001               	movlw	1	; select bank2/3
 19591  1EE1  0087               	movwf	7
 19592  1EE2  3F40               	moviw [0]fsr1
 19593  1EE3  3AC8               	xorlw	200
 19594  1EE4  1D03               	skipz
 19595  1EE5  2EE8               	goto	u1201_25
 19596  1EE6  3F41               	moviw [1]fsr1
 19597  1EE7  3A00               	xorlw	0
 19598  1EE8                     u1201_25:	
 19599  1EE8  1D03               	skipz
 19600  1EE9  2EED               	goto	i1l10457
 19601                           
 19602                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19603  1EEA  01B2               	clrf	(_Timer1^(0+256)+1)
 19604  1EEB  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19605                           
 19606                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19607  1EEC  1431               	bsf	_Timer1^(0+256),0
 19608  1EED                     i1l10457:	
 19609                           
 19610                           ;MCU_B1.c: 272: }
 19611                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19612  1EED  30FA               	movlw	250
 19613  1EEE  0020               	movlb	0	; select bank0
 19614  1EEF  0097               	movwf	23	;volatile
 19615                           
 19616                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19617  1EF0  3038               	movlw	56
 19618  1EF1  0096               	movwf	22	;volatile
 19619                           
 19620                           ;MCU_B1.c: 276: TMR1IF = 0;
 19621  1EF2  1011               	bcf	17,0	;volatile
 19622  1EF3  0008               	return
 19623  1EF4                     __end_of_TMR1_ISR:	
 19624                           
 19625                           	psect	text143
 19626  09C3                     __ptext143:	
 19627 ;; *************** function _DimmerLights_TMR_1 *****************
 19628 ;; Defined at:
 19629 ;;		line 1386 in file "../src/Dimmer_B1.c"
 19630 ;; Parameters:    Size  Location     Type
 19631 ;;		None
 19632 ;; Auto vars:     Size  Location     Type
 19633 ;;		None
 19634 ;; Return value:  Size  Location     Type
 19635 ;;		None               void
 19636 ;; Registers used:
 19637 ;;		wreg, status,2, status,0
 19638 ;; Tracked objects:
 19639 ;;		On entry : 0/0
 19640 ;;		On exit  : 0/0
 19641 ;;		Unchanged: 0/0
 19642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19647 ;;Total ram usage:        1 bytes
 19648 ;; Hardware stack levels used:    1
 19649 ;; This function calls:
 19650 ;;		Nothing
 19651 ;; This function is called by:
 19652 ;;		_TMR1_ISR
 19653 ;; This function uses a non-reentrant model
 19654 ;;
 19655                           
 19656                           
 19657                           ;psect for function _DimmerLights_TMR_1
 19658  09C3                     _DimmerLights_TMR_1:	
 19659                           
 19660                           ;Dimmer_B1.c: 1388: if (DimmerIntr1.Start == 1) {
 19661                           
 19662                           ;incstack = 0
 19663                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19664  09C3  0021               	movlb	1	; select bank1
 19665  09C4  1D3C               	btfss	_DimmerIntr1^(0+128),2
 19666  09C5  29E8               	goto	i1l843
 19667                           
 19668                           ;Dimmer_B1.c: 1389: DimmerIntr1.Count++;
 19669  09C6  3001               	movlw	1
 19670  09C7  00F0               	movwf	??_DimmerLights_TMR_1
 19671  09C8  0870               	movf	??_DimmerLights_TMR_1,w
 19672  09C9  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19673                           
 19674                           ;Dimmer_B1.c: 1391: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19675  09CA  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19676  09CB  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19677  09CC  1D03               	skipz
 19678  09CD  29D0               	goto	i1l9911
 19679                           
 19680                           ;Dimmer_B1.c: 1392: DimmerIntr1.Count = 0;
 19681  09CE  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19682                           
 19683                           ;Dimmer_B1.c: 1393: DimmerIntr1.Start = 0;
 19684  09CF  113C               	bcf	_DimmerIntr1^(0+128),2
 19685  09D0                     i1l9911:	
 19686                           
 19687                           ;Dimmer_B1.c: 1394: }
 19688                           ;Dimmer_B1.c: 1408: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19689  09D0  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19690  09D1  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19691  09D2  1903               	btfsc	3,2
 19692                           
 19693                           ;Dimmer_B1.c: 1409: if (DimmerIntr1.ControlStatus == 1) {
 19694  09D3  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19695  09D4  29D7               	goto	i1l9917
 19696                           
 19697                           ;Dimmer_B1.c: 1410: RB1 = 0;
 19698  09D5  0020               	movlb	0	; select bank0
 19699  09D6  108D               	bcf	13,1	;volatile
 19700  09D7                     i1l9917:	
 19701                           
 19702                           ;Dimmer_B1.c: 1411: }
 19703                           ;Dimmer_B1.c: 1412: }
 19704                           ;Dimmer_B1.c: 1415: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19705  09D7  0021               	movlb	1	; select bank1
 19706  09D8  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19707  09D9  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19708  09DA  1903               	btfsc	3,2
 19709                           
 19710                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.ControlStatus == 1) {
 19711  09DB  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19712  09DC  29DF               	goto	i1l9923
 19713                           
 19714                           ;Dimmer_B1.c: 1417: RB1 = 1;
 19715  09DD  0020               	movlb	0	; select bank0
 19716  09DE  148D               	bsf	13,1	;volatile
 19717  09DF                     i1l9923:	
 19718                           
 19719                           ;Dimmer_B1.c: 1418: }
 19720                           ;Dimmer_B1.c: 1419: }
 19721                           ;Dimmer_B1.c: 1422: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19722  09DF  0021               	movlb	1	; select bank1
 19723  09E0  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19724  09E1  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19725  09E2  1903               	btfsc	3,2
 19726                           
 19727                           ;Dimmer_B1.c: 1423: if (DimmerIntr1.ControlStatus == 1) {
 19728  09E3  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19729  09E4  29F9               	goto	i1l851
 19730                           
 19731                           ;Dimmer_B1.c: 1424: RB1 = 0;
 19732  09E5  0020               	movlb	0	; select bank0
 19733  09E6  108D               	bcf	13,1	;volatile
 19734                           
 19735                           ;Dimmer_B1.c: 1425: }
 19736                           ;Dimmer_B1.c: 1428: }
 19737                           ;Dimmer_B1.c: 1430: } else {
 19738  09E7  29F9               	goto	i1l851
 19739  09E8                     i1l843:	
 19740                           
 19741                           ;Dimmer_B1.c: 1431: if (DimmerIntr1.GO == 1) {
 19742  09E8  1C3C               	btfss	_DimmerIntr1^(0+128),0
 19743  09E9  29F9               	goto	i1l851
 19744                           
 19745                           ;Dimmer_B1.c: 1432: DimmerIntr1.Count++;
 19746  09EA  3001               	movlw	1
 19747  09EB  00F0               	movwf	??_DimmerLights_TMR_1
 19748  09EC  0870               	movf	??_DimmerLights_TMR_1,w
 19749  09ED  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 19750                           
 19751                           ;Dimmer_B1.c: 1433: if (DimmerIntr1.Count == 4) {
 19752  09EE  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 19753  09EF  3A04               	xorlw	4
 19754  09F0  1D03               	skipz
 19755  09F1  29F9               	goto	i1l851
 19756                           
 19757                           ;Dimmer_B1.c: 1434: DimmerIntr1.Count = 0;
 19758  09F2  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 19759                           
 19760                           ;Dimmer_B1.c: 1435: DimmerIntr1.GO = 0;
 19761  09F3  103C               	bcf	_DimmerIntr1^(0+128),0
 19762                           
 19763                           ;Dimmer_B1.c: 1436: DimmerIntr1.Start = 1;
 19764  09F4  153C               	bsf	_DimmerIntr1^(0+128),2
 19765                           
 19766                           ;Dimmer_B1.c: 1438: if (DimmerIntr1.ControlStatus == 1) {
 19767  09F5  1DBC               	btfss	_DimmerIntr1^(0+128),3
 19768  09F6  29F9               	goto	i1l851
 19769                           
 19770                           ;Dimmer_B1.c: 1439: RB1 = 1;
 19771  09F7  0020               	movlb	0	; select bank0
 19772  09F8  148D               	bsf	13,1	;volatile
 19773  09F9                     i1l851:	
 19774                           
 19775                           ;Dimmer_B1.c: 1440: }
 19776                           ;Dimmer_B1.c: 1441: }
 19777                           ;Dimmer_B1.c: 1442: }
 19778                           ;Dimmer_B1.c: 1443: }
 19779                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.Tune == 1) {
 19780  09F9  0021               	movlb	1	; select bank1
 19781  09FA  1CBC               	btfss	_DimmerIntr1^(0+128),1
 19782  09FB  0008               	return
 19783                           
 19784                           ;Dimmer_B1.c: 1446: DimmerIntr1.Tune = 0;
 19785  09FC  10BC               	bcf	_DimmerIntr1^(0+128),1
 19786                           
 19787                           ;Dimmer_B1.c: 1447: DimmerIntr1.TuneTime++;
 19788  09FD  3001               	movlw	1
 19789  09FE  00F0               	movwf	??_DimmerLights_TMR_1
 19790  09FF  0870               	movf	??_DimmerLights_TMR_1,w
 19791  0A00  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 19792                           
 19793                           ;Dimmer_B1.c: 1448: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19794  0A01  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 19795  0A02  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 19796  0A03  1C03               	skipc
 19797  0A04  0008               	return
 19798                           
 19799                           ;Dimmer_B1.c: 1449: DimmerIntr1.TuneTime = 0;
 19800  0A05  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 19801                           
 19802                           ;Dimmer_B1.c: 1450: DimmerIntr1.TuneGO = 1;
 19803  0A06  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 19804                           
 19805                           ;Dimmer_B1.c: 1451: if (DimmerIntr1.Dimming_Sw == 1) {
 19806  0A07  1E3C               	btfss	_DimmerIntr1^(0+128),4
 19807  0A08  2A1F               	goto	i1l857
 19808                           
 19809                           ;Dimmer_B1.c: 1452: if (DimmerIntr1.Dimming_Status == 0) {
 19810  0A09  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 19811  0A0A  2A16               	goto	i1l9961
 19812                           
 19813                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.DimmingValue < ((char)(84*0.6))) {
 19814  0A0B  3032               	movlw	50
 19815  0A0C  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 19816  0A0D  1803               	skipnc
 19817  0A0E  2A14               	goto	i1l859
 19818                           
 19819                           ;Dimmer_B1.c: 1454: DimmerIntr1.DimmingValue++;
 19820  0A0F  3001               	movlw	1
 19821  0A10  00F0               	movwf	??_DimmerLights_TMR_1
 19822  0A11  0870               	movf	??_DimmerLights_TMR_1,w
 19823  0A12  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 19824                           
 19825                           ;Dimmer_B1.c: 1455: } else {
 19826  0A13  0008               	return
 19827  0A14                     i1l859:	
 19828                           
 19829                           ;Dimmer_B1.c: 1456: DimmerIntr1.Dimming_Status = 1;
 19830  0A14  16BC               	bsf	_DimmerIntr1^(0+128),5
 19831                           
 19832                           ;Dimmer_B1.c: 1457: }
 19833                           ;Dimmer_B1.c: 1458: } else {
 19834  0A15  0008               	return
 19835  0A16                     i1l9961:	
 19836                           
 19837                           ;Dimmer_B1.c: 1459: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 19838  0A16  3007               	movlw	7
 19839  0A17  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 19840  0A18  1C03               	skipc
 19841  0A19  2A1D               	goto	i1l862
 19842                           
 19843                           ;Dimmer_B1.c: 1460: DimmerIntr1.DimmingValue--;
 19844  0A1A  3001               	movlw	1
 19845  0A1B  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 19846                           
 19847                           ;Dimmer_B1.c: 1461: } else {
 19848  0A1C  0008               	return
 19849  0A1D                     i1l862:	
 19850                           
 19851                           ;Dimmer_B1.c: 1462: DimmerIntr1.Dimming_Status = 0;
 19852  0A1D  12BC               	bcf	_DimmerIntr1^(0+128),5
 19853                           
 19854                           ;Dimmer_B1.c: 1463: }
 19855                           ;Dimmer_B1.c: 1464: }
 19856                           ;Dimmer_B1.c: 1465: } else if (DimmerIntr1.Dimming_RF == 1) {
 19857  0A1E  0008               	return
 19858  0A1F                     i1l857:	
 19859  0A1F  1F3C               	btfss	_DimmerIntr1^(0+128),6
 19860  0A20  0008               	return
 19861                           
 19862                           ;Dimmer_B1.c: 1466: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19863  0A21  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 19864  0A22  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 19865  0A23  1803               	skipnc
 19866  0A24  2A2A               	goto	i1l9969
 19867                           
 19868                           ;Dimmer_B1.c: 1467: DimmerIntr1.DimmingValue++;
 19869  0A25  3001               	movlw	1
 19870  0A26  00F0               	movwf	??_DimmerLights_TMR_1
 19871  0A27  0870               	movf	??_DimmerLights_TMR_1,w
 19872  0A28  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 19873                           
 19874                           ;Dimmer_B1.c: 1468: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19875  0A29  0008               	return
 19876  0A2A                     i1l9969:	
 19877  0A2A  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 19878  0A2B  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 19879  0A2C  1803               	skipnc
 19880  0A2D  2A31               	goto	i1l868
 19881                           
 19882                           ;Dimmer_B1.c: 1469: DimmerIntr1.DimmingValue--;
 19883  0A2E  3001               	movlw	1
 19884  0A2F  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 19885                           
 19886                           ;Dimmer_B1.c: 1470: } else {
 19887  0A30  0008               	return
 19888  0A31                     i1l868:	
 19889                           
 19890                           ;Dimmer_B1.c: 1471: DimmerIntr1.Dimming_RF = 0;
 19891  0A31  133C               	bcf	_DimmerIntr1^(0+128),6
 19892  0A32  0008               	return
 19893  0A33                     __end_of_DimmerLights_TMR_1:	
 19894                           
 19895                           	psect	text144
 19896  1AD8                     __ptext144:	
 19897 ;; *************** function _IOC_ISR *****************
 19898 ;; Defined at:
 19899 ;;		line 395 in file "../src/MCU_B1.c"
 19900 ;; Parameters:    Size  Location     Type
 19901 ;;		None
 19902 ;; Auto vars:     Size  Location     Type
 19903 ;;		None
 19904 ;; Return value:  Size  Location     Type
 19905 ;;		None               void
 19906 ;; Registers used:
 19907 ;;		wreg, status,2, status,0, pclath, cstack
 19908 ;; Tracked objects:
 19909 ;;		On entry : 0/0
 19910 ;;		On exit  : 0/0
 19911 ;;		Unchanged: 0/0
 19912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19916 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19917 ;;Total ram usage:        0 bytes
 19918 ;; Hardware stack levels used:    1
 19919 ;; Hardware stack levels required when called:    3
 19920 ;; This function calls:
 19921 ;;		_DimmerLights_IOC_1
 19922 ;; This function is called by:
 19923 ;;		_ISR
 19924 ;; This function uses a non-reentrant model
 19925 ;;
 19926                           
 19927                           
 19928                           ;psect for function _IOC_ISR
 19929  1AD8                     _IOC_ISR:	
 19930                           
 19931                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 19932                           
 19933                           ;incstack = 0
 19934                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19935  1AD8  0021               	movlb	1	; select bank1
 19936  1AD9  1C2F               	btfss	_myMain^(0+128),0
 19937  1ADA  2ADD               	goto	i1l7857
 19938                           
 19939                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 19940  1ADB  3193  2312         	fcall	_DimmerLights_IOC_1
 19941  1ADD                     i1l7857:	
 19942                           
 19943                           ;MCU_B1.c: 416: }
 19944                           ;MCU_B1.c: 418: IOCBF2 = 0;
 19945  1ADD  0027               	movlb	7	; select bank7
 19946  1ADE  1116               	bcf	22,2	;volatile
 19947                           
 19948                           ;MCU_B1.c: 419: IOCIF = 0;
 19949  1ADF  100B               	bcf	11,0	;volatile
 19950  1AE0  0008               	return
 19951  1AE1                     __end_of_IOC_ISR:	
 19952                           
 19953                           	psect	text145
 19954  1312                     __ptext145:	
 19955 ;; *************** function _DimmerLights_IOC_1 *****************
 19956 ;; Defined at:
 19957 ;;		line 1478 in file "../src/Dimmer_B1.c"
 19958 ;; Parameters:    Size  Location     Type
 19959 ;;		None
 19960 ;; Auto vars:     Size  Location     Type
 19961 ;;		None
 19962 ;; Return value:  Size  Location     Type
 19963 ;;		None               void
 19964 ;; Registers used:
 19965 ;;		wreg, status,2, status,0, pclath, cstack
 19966 ;; Tracked objects:
 19967 ;;		On entry : 0/0
 19968 ;;		On exit  : 0/0
 19969 ;;		Unchanged: 0/0
 19970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19973 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19974 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19975 ;;Total ram usage:        2 bytes
 19976 ;; Hardware stack levels used:    1
 19977 ;; Hardware stack levels required when called:    2
 19978 ;; This function calls:
 19979 ;;		i1_Division
 19980 ;; This function is called by:
 19981 ;;		_IOC_ISR
 19982 ;; This function uses a non-reentrant model
 19983 ;;
 19984                           
 19985                           
 19986                           ;psect for function _DimmerLights_IOC_1
 19987  1312                     _DimmerLights_IOC_1:	
 19988                           
 19989                           ;Dimmer_B1.c: 1492: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 19990                           
 19991                           ;incstack = 0
 19992                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19993  1312  0021               	movlb	1	; select bank1
 19994  1313  193C               	btfsc	_DimmerIntr1^(0+128),2
 19995  1314  0008               	return
 19996  1315  183C               	btfsc	_DimmerIntr1^(0+128),0
 19997  1316  0008               	return
 19998                           
 19999                           ;Dimmer_B1.c: 1494: if (RB2 != DimmerIntr1.Status) {
 20000  1317  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20001  1318  0C89               	rrf	9,f
 20002  1319  3901               	andlw	1
 20003  131A  00FA               	movwf	??_DimmerLights_IOC_1
 20004  131B  3000               	movlw	0
 20005  131C  0020               	movlb	0	; select bank0
 20006  131D  190D               	btfsc	13,2	;volatile
 20007  131E  3001               	movlw	1
 20008  131F  067A               	xorwf	??_DimmerLights_IOC_1,w
 20009  1320  1903               	skipnz
 20010  1321  0008               	return
 20011                           
 20012                           ;Dimmer_B1.c: 1497: DimmerIntr1.Count = 0;
 20013  1322  0021               	movlb	1	; select bank1
 20014  1323  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20015                           
 20016                           ;Dimmer_B1.c: 1498: DimmerIntr1.GO = 1;
 20017  1324  143C               	bsf	_DimmerIntr1^(0+128),0
 20018                           
 20019                           ;Dimmer_B1.c: 1500: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20020  1325  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20021  1326  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20022                           
 20023                           ;Dimmer_B1.c: 1501: DimmerIntr1.Tune = 1;
 20024  1327  14BC               	bsf	_DimmerIntr1^(0+128),1
 20025                           
 20026                           ;Dimmer_B1.c: 1502: }
 20027                           ;Dimmer_B1.c: 1504: if (DimmerIntr1.TuneGO == 1) {
 20028  1328  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20029  1329  2B48               	goto	i1l7361
 20030                           
 20031                           ;Dimmer_B1.c: 1505: DimmerIntr1.TuneGO = 0;
 20032  132A  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20033                           
 20034                           ;Dimmer_B1.c: 1508: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20035  132B  3002               	movlw	2
 20036  132C  00FA               	movwf	??_DimmerLights_IOC_1
 20037  132D  087A               	movf	??_DimmerLights_IOC_1,w
 20038  132E  00F5               	movwf	i1Division@num
 20039  132F  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20040  1330  319B  23B8  3193   	fcall	i1_Division
 20041  1333  00FB               	movwf	??_DimmerLights_IOC_1+1
 20042  1334  087B               	movf	??_DimmerLights_IOC_1+1,w
 20043  1335  0021               	movlb	1	; select bank1
 20044  1336  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20045                           
 20046                           ;Dimmer_B1.c: 1509: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20047  1337  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20048  1338  3AFF               	xorlw	255
 20049  1339  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20050  133A  3E3C               	addlw	60
 20051  133B  00FA               	movwf	??_DimmerLights_IOC_1
 20052  133C  087A               	movf	??_DimmerLights_IOC_1,w
 20053  133D  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20054                           
 20055                           ;Dimmer_B1.c: 1510: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20056  133E  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20057  133F  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20058  1340  00FA               	movwf	??_DimmerLights_IOC_1
 20059  1341  087A               	movf	??_DimmerLights_IOC_1,w
 20060  1342  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20061                           
 20062                           ;Dimmer_B1.c: 1511: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20063  1343  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20064  1344  3E01               	addlw	1
 20065  1345  00FA               	movwf	??_DimmerLights_IOC_1
 20066  1346  087A               	movf	??_DimmerLights_IOC_1,w
 20067  1347  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20068  1348                     i1l7361:	
 20069                           
 20070                           ;Dimmer_B1.c: 1512: }
 20071                           ;Dimmer_B1.c: 1518: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20072  1348  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20073  1349  0020               	movlb	0	; select bank0
 20074  134A  1D0D               	btfss	13,2	;volatile
 20075  134B  0008               	return
 20076  134C  0021               	movlb	1	; select bank1
 20077  134D  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20078  134E  0008               	return
 20079  134F                     __end_of_DimmerLights_IOC_1:	
 20080                           
 20081                           	psect	text146
 20082  1BB8                     __ptext146:	
 20083 ;; *************** function i1_Division *****************
 20084 ;; Defined at:
 20085 ;;		line 1381 in file "../src/Dimmer_B1.c"
 20086 ;; Parameters:    Size  Location     Type
 20087 ;;  value           1    wreg     unsigned char 
 20088 ;;  num             1    5[COMMON] unsigned char 
 20089 ;; Auto vars:     Size  Location     Type
 20090 ;;  value           1    8[COMMON] unsigned char 
 20091 ;;  Division        1    9[COMMON] unsigned char 
 20092 ;; Return value:  Size  Location     Type
 20093 ;;                  1    wreg      unsigned char 
 20094 ;; Registers used:
 20095 ;;		wreg, status,2, status,0, pclath, cstack
 20096 ;; Tracked objects:
 20097 ;;		On entry : 0/0
 20098 ;;		On exit  : 0/0
 20099 ;;		Unchanged: 0/0
 20100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20101 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20104 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20105 ;;Total ram usage:        5 bytes
 20106 ;; Hardware stack levels used:    1
 20107 ;; Hardware stack levels required when called:    1
 20108 ;; This function calls:
 20109 ;;		i1___lbdiv
 20110 ;; This function is called by:
 20111 ;;		_DimmerLights_IOC_1
 20112 ;; This function uses a non-reentrant model
 20113 ;;
 20114                           
 20115                           
 20116                           ;psect for function i1_Division
 20117  1BB8                     i1_Division:	
 20118                           
 20119                           ;incstack = 0
 20120                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20121                           ;i1Division@value stored from wreg
 20122  1BB8  00F8               	movwf	i1Division@value
 20123                           
 20124                           ;Dimmer_B1.c: 1382: char result = (char) (value / num);
 20125  1BB9  0875               	movf	i1Division@num,w
 20126  1BBA  00F6               	movwf	??i1_Division
 20127  1BBB  0876               	movf	??i1_Division,w
 20128  1BBC  00F0               	movwf	i1___lbdiv@divisor
 20129  1BBD  0878               	movf	i1Division@value,w
 20130  1BBE  319F  2753         	fcall	i1___lbdiv
 20131  1BC0  00F7               	movwf	??i1_Division+1
 20132  1BC1  0877               	movf	??i1_Division+1,w
 20133  1BC2  00F9               	movwf	i1Division@result
 20134                           
 20135                           ;Dimmer_B1.c: 1383: return result;
 20136  1BC3  0879               	movf	i1Division@result,w
 20137  1BC4  0008               	return
 20138  1BC5                     __end_ofi1_Division:	
 20139                           
 20140                           	psect	text147
 20141  1F53                     __ptext147:	
 20142 ;; *************** function i1___lbdiv *****************
 20143 ;; Defined at:
 20144 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20145 ;; Parameters:    Size  Location     Type
 20146 ;;  dividend        1    wreg     unsigned char 
 20147 ;;  divisor         1    0[COMMON] unsigned char 
 20148 ;; Auto vars:     Size  Location     Type
 20149 ;;  dividend        1    2[COMMON] unsigned char 
 20150 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20151 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20152 ;; Return value:  Size  Location     Type
 20153 ;;                  1    wreg      unsigned char 
 20154 ;; Registers used:
 20155 ;;		wreg, status,2, status,0
 20156 ;; Tracked objects:
 20157 ;;		On entry : 0/0
 20158 ;;		On exit  : 0/0
 20159 ;;		Unchanged: 0/0
 20160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20161 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20162 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20163 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20164 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20165 ;;Total ram usage:        5 bytes
 20166 ;; Hardware stack levels used:    1
 20167 ;; This function calls:
 20168 ;;		Nothing
 20169 ;; This function is called by:
 20170 ;;		i1_Division
 20171 ;; This function uses a non-reentrant model
 20172 ;;
 20173                           
 20174                           
 20175                           ;psect for function i1___lbdiv
 20176  1F53                     i1___lbdiv:	
 20177                           
 20178                           ;incstack = 0
 20179                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20180                           ;i1___lbdiv@dividend stored from wreg
 20181  1F53  00F2               	movwf	i1___lbdiv@dividend
 20182  1F54  01F4               	clrf	i1___lbdiv@quotient
 20183  1F55  0870               	movf	i1___lbdiv@divisor,w
 20184  1F56  1903               	btfsc	3,2
 20185  1F57  2F72               	goto	i1l6737
 20186  1F58  01F3               	clrf	i1___lbdiv@counter
 20187  1F59  0AF3               	incf	i1___lbdiv@counter,f
 20188  1F5A                     i1l6725:	
 20189  1F5A  1BF0               	btfsc	i1___lbdiv@divisor,7
 20190  1F5B  2F63               	goto	i1l6727
 20191  1F5C  1003               	clrc
 20192  1F5D  0DF0               	rlf	i1___lbdiv@divisor,f
 20193  1F5E  3001               	movlw	1
 20194  1F5F  00F1               	movwf	??i1___lbdiv
 20195  1F60  0871               	movf	??i1___lbdiv,w
 20196  1F61  07F3               	addwf	i1___lbdiv@counter,f
 20197  1F62  2F5A               	goto	i1l6725
 20198  1F63                     i1l6727:	
 20199  1F63  1003               	clrc
 20200  1F64  0DF4               	rlf	i1___lbdiv@quotient,f
 20201  1F65  0870               	movf	i1___lbdiv@divisor,w
 20202  1F66  0272               	subwf	i1___lbdiv@dividend,w
 20203  1F67  1C03               	skipc
 20204  1F68  2F6D               	goto	L11
 20205  1F69  0870               	movf	i1___lbdiv@divisor,w
 20206  1F6A  02F2               	subwf	i1___lbdiv@dividend,f
 20207  1F6B  1474               	bsf	i1___lbdiv@quotient,0
 20208  1F6C  1003               	clrc
 20209  1F6D                     L11:	
 20210  1F6D  0CF0               	rrf	i1___lbdiv@divisor,f
 20211  1F6E  3001               	movlw	1
 20212  1F6F  02F3               	subwf	i1___lbdiv@counter,f
 20213  1F70  1D03               	btfss	3,2
 20214  1F71  2F63               	goto	i1l6727
 20215  1F72                     i1l6737:	
 20216  1F72  0874               	movf	i1___lbdiv@quotient,w
 20217  1F73  0008               	return
 20218  1F74                     __end_ofi1___lbdiv:	
 20219  007E                     btemp	set	126	;btemp
 20220  007E                     pic14e$flags	set	126
 20221  007E                     wtemp	set	126
 20222  007E                     wtemp0	set	126
 20223  0080                     wtemp1	set	128
 20224  0082                     wtemp2	set	130
 20225  0084                     wtemp3	set	132
 20226  0086                     wtemp4	set	134
 20227  0088                     wtemp5	set	136
 20228  007F                     wtemp6	set	127
 20229  007E                     ttemp	set	126
 20230  007E                     ttemp0	set	126
 20231  0081                     ttemp1	set	129
 20232  0084                     ttemp2	set	132
 20233  0087                     ttemp3	set	135
 20234  007F                     ttemp4	set	127
 20235  007E                     ltemp	set	126
 20236  007E                     ltemp0	set	126
 20237  0082                     ltemp1	set	130
 20238  0086                     ltemp2	set	134
 20239  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         223
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      78
    BANK2            80      0      79
    BANK3            80      0      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_setBuz
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  180160
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1913
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     400
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     799
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5608
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5608
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4575
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4575
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1069
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1069
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   55241
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   55241
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   50371
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5157
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   44942
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     3     3      0    2139
                                             13 BANK0      3     3      0
         _DimmerLights_SelectPointer
             _getDimmerLights_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12442
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   24705
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2614
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1281
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1100
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1100
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2043
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1858
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1728
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1518
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3851
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   57925
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   57616
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   32906
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1007
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     166
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4453
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     344
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   24317
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3717
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     374
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32899
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   32899
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     614
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     345
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5535
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5535
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3182
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    2009
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1913
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     167      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     167      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Mar 07 16:44:46 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1DFD                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 152C  
                                      l96 07F1                                        l88 1540  
                                      l97 07ED                                        l98 07DB  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1FDB  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D4                            setTemp_Main@AD 006C  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1AFD  
                  __end_of_setDelayOff_GO 0D37                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 002E  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0812  
                    _setDimmerLights_Line 1C13                              ___ftadd@sign 004B  
                                     l100 07EB                                       l303 1E09  
                                     l304 1E0B                                       l235 092C  
                    _setDimmerLights_SwOn 11C2                                       l531 09BC  
                                     l347 1088                                       l690 1BE1  
                                     l759 1E95                                       l786 0770  
                                     _GIE 005F                                       _CRC 00CA  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CF  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C8                                       _Cmd 00CB  
            getDimmerLights_Status@lights 0022                                       _Sw1 01E3  
              ??_setDimmerIntr_Dimming_RF 0021                ??_setDimmerIntr_Dimming_Sw 0021  
         setDimmerIntr_Dimming_RF@command 0020                  __end_of_CC2500_WriteByte 1E16  
                   _Buzzer_Initialization 1A62                           __end_of_ADC_Set 1AC1  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0023       __end_of_setDimmerIntr_ControlStatus 1DCC  
             _setDimmerIntr_ControlStatus 1DB4                         ??_getSw_KeyStatus 0020  
                                    ?_ISR 0070                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1AE1                     _setDimmerLights_OnOff 06EB  
        setDimmerLights_DimmingRun@lights 0024                                Load_Main@i 0030  
                            ___ftdiv@sign 003D                                      l2121 0548  
                                    l2212 1378                                      l1501 0620  
                                    l1245 1407                                      l2125 0497  
                                    l1510 1DFC                                      l2126 04E8  
                                    l2151 1BE8                                      l1259 1123  
                                    l1269 0C1C                                      l1470 118C  
                                    l2166 16CF                                      l2510 0379  
                                    l1446 1310                                      l1623 01F7  
                                    l2512 0245                                      l1633 01D3  
                                    l1625 0083                                      l2193 0B1D  
                                    l1474 1188                                      l1634 01D1  
                                    l1626 007F                                      l1627 007A  
                                    l2179 11BE                                      l1469 1171  
                         __end_of_IOC_Set 1B1E                                      l2490 1D7A  
                                    l1791 0E00                                      l1785 0E8D  
                                    l1796 0E85                                      l2861 1656  
                                    l2694 1EC0                                      l2855 163F  
                                    l2884 0420                            _Load_Main$3992 002B  
                                    l9001 1099                                      l9003 10A4  
                                    l9011 1FC4                     _setDimmerLights_SwOff 1264  
                                    l9031 1DE7                                      l9015 1FCA  
                                    l9009 1FC1                                      l9113 1FE5  
                                    l9035 1DF6                                      l9115 1FE8  
                                    l9107 1383                                      l9141 1432  
                                    l8431 162B                                      l8423 1615  
                                    l9303 1C7D                                      l9151 1442  
                                    l9143 1435                                      l9119 1FEE  
                                    l8601 03FF                                      l9153 1445  
                                    l9073 0B3A                                      l9057 13BF  
                                    l8427 161C                                      l9307 1C84  
                                    l9147 143B                                      l9083 0B8A  
                                    l8437 1644                                      l8429 1626  
                                    l8613 0432                                      l8701 0F01  
                                    l9253 116C                                      l9309 1C89  
                                    l8533 1C8E                                      l9157 144B  
                                    l9413 0913                                      l9069 0B35  
                                    l9341 0ABB                                      l8463 1467  
                                    l8439 164C                                      l8607 0412  
                                    l9263 1183                                      l9255 1175  
                                    l9431 0948                                      l9423 093B  
                                    l9351 0B07                                      l9343 0AC2  
                                    l9335 0AA6                                      l8481 148D  
                                    l8473 146F                                      l8457 145C  
                                    l8617 0444                                      l8609 041C  
                                    l8713 0F1D                                      l8537 1C94  
                                    l9425 093F                                      l9417 0932  
                                    l9345 0ADD                                      l8475 147B  
                                    l8555 1FA1                                      l8627 045F  
                                    l8571 03B0                                      l8643 0D64  
                                    l9283 12AC                                      l9451 0893  
                                    l9427 0942                                      l9419 0935  
                                    l9347 0AFF                                      l9355 0B0B  
                                    l8485 1496                                      l8821 11EE  
                                    l8637 0D4E                                      l8709 0F15  
                                    l9517 1D97                                      l9541 0749  
                                    l9349 0B03                     _myMain_Initialization 1D0D  
                                    l9367 1F7C                                      l8567 03A9  
                                    l9471 08AB                                      l9455 0899  
                                    l8833 1292                                      l8489 149E  
                                    l9369 1F85                                      l8577 03BF  
                                    l8665 0DBE                                      l8657 0DA5  
                                    l8737 0C3D                                      l8905 17EA  
                                    l9297 12CB                                      l9289 12B5  
                                    l9561 077F                                      l9473 08C4  
                                    l9449 0890                                      l9393 08F8  
                                    l8819 11E9                                      l9379 1F94  
                                    l8595 03EC                                      l8771 0CA2  
                                    l8763 0C88                                      l8755 0C6D  
                                    l9539 0732                                      l9547 0750  
                                    l9651 110B                                      l9395 08FB  
                                    l9731 16A4                                      l9715 1683  
                                    l8597 03F6                                      l8589 03D9  
                                    l8685 0EBE                                      l8765 0C91  
                                    l8757 0C7B                                      l9581 14BE  
                                    l8599 03FB                                      l8679 0EA8  
                                    l8767 0C94                                      l9823 15D3  
                                    l8855 0CE9                                      l9575 07AB  
                                    l9399 0901                                      l9727 169B  
                                    l8697 0EF9                                      l8865 0D19  
                                    l9761 1C73                                      _CFGS 0CAE  
                                    l8963 1E53                                      l8869 0D2D  
                                    l9861 083A                                      l8965 1E56  
                                    l9863 0841                                      l9847 1CF8  
                                    l9695 1C62                              __CFG_WDTE$ON 0000  
                                    l9873 0869                                      l9785 1254  
                                    l9777 1236                                      l8969 1E5C  
                                    l9875 0870                                      l9779 1242  
                                    l8987 1076                                      l9885 1B05  
                                    l9789 125D                                      l8989 107C  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u9125 0400  
                                    u9065 03DA                                      u9225 0D76  
                                    u9305 0ECA                                      u9155 0413  
                                    u9235 0D86                                      u9315 0EDA  
                                    u9245 0DA6                                      u9095 03ED  
                                    u9255 0DB5                                      u9335 0F02  
                                    u9265 0DBF                                      u9345 0F08  
                                    u9425 0C44                                      u8715 163A  
                                    u9515 1D43                                      u8815 1472  
                                    u8735 1647                                      u9375 0F1E  
                                    u9455 0C6E                                      u9385 0F24  
                                    u8835 147C                                      u8845 1486  
                                    u8765 165D                                      u9485 0C89  
                                    u9645 0CF5                                      u8855 148E  
                                    u8695 1621                                      u9680 17A5  
                                    _LWLO 0CAD                                      u9685 17A3  
                                    u9785 108E                                      _RSSI 00D1  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1E7F                _setDimmerLights_DimmingRun 1E64  
                                    _Buz1 0120                                      _Load 0136  
                                    _Temp 00DA                                      _main 1554  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 09C3  
                         __end_of_RF_Main 1A6E                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B29  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0B9E  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2285 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1D9E  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1D88                    _getDimmerLights_Status 1C02  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1A84  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00CD  
                                   l10043 1F1E                                     l10141 0E03  
                                   l10045 1F21                                     l10303 022F  
                                   l10081 0BA5                                     l10241 04F7  
                                   l10049 1F26                                     l10403 07C5  
                                   l10227 04E3                                     l10147 0E12  
                                   l10069 1C40                                     l10149 0E15  
                                   l10095 0C15                                     l10087 0BBA  
                                   l10503 13E6                                     l10255 0529  
                                   l10343 02ED                                     l10319 0278  
                                   l10191 0E74                                     l10329 02AD  
                                   l10353 0321                                     l10179 0E5D  
                                   l10269 0541                                     l10285 1D7F  
                                   l10189 0E72                                     l10439 1E97  
                                   l10383 1EBA                                     l10615 12F0  
                                   l10713 015B                                     l10289 1D85  
                                   l10723 0187                                     l10477 06A3  
                                   l10733 01A3                                     l10565 0A71  
                                   l10557 0A52                                     l10831 05B9  
                                   l10815 057A                                     l10743 01B9  
                                   l10719 016A                                     l10727 0193  
                                   l10647 0061                     ?_setDimmerLights_Main 0070  
                                   l10809 056A                                     l10681 00A6  
                                   l10665 0082                                     l10585 0AA0  
                                   l10569 0A79                                     l10851 0605  
                                   l10827 05B1                                     l10819 0589  
                                   l10845 05F3                                     l10829 058C  
                                   l10933 1578                                     l10847 05CE  
                                   l10687 00D8                                     l10849 05FB  
                                   l10857 0616                                     l10937 1583  
                                   l10779 01E6                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00E8                           __end_of___awdiv 14A5  
                         __end_of___lbdiv 1F96                           __end_of___ftadd 0477  
                         __end_of___ftdiv 0DE0                           __end_of___ftneg 1AEA  
                         __end_of___ftmul 0F45                                     u12105 13FE  
                         ___awdiv@divisor 0020                                     u12215 0A90  
                                   _T1CON 0018                                     u10545 1D6D  
                                   u11505 0E64                                     u12305 1308  
                         __end_of___fttol 0CAB                                     u12165 0A61  
                                   u10825 1239                                     u11625 0518  
                                   u12265 114E                                     u10845 1243  
                                   u12445 00A4                                     u11485 0E46  
                                   u12710 05F9                                     u10855 124D  
                                   u12455 00D6                                     u10865 1255  
                                   u12545 019A                                     u12465 011A  
                                   u11915 07BB                                     u12715 05D7  
                                   u11595 04BB                                     u12680 05B7  
                                   u11875 1EC1                                     u12685 0595  
                                   u11885 1EC6                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1264                                     i1l851 09F9  
                                   i1l843 09E8                                     i1l862 0A1D  
                                   i1l857 0A1F                                     i1l859 0A14  
                                   i1l868 0A31                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1D73  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 179B  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1736  
                                   _Light 00D0                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1EF4                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1BA0                                     _getAD 1F13  
                           ___awtoft@sign 002D                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 0812               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03E8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1B13  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1CAF  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      __size_ofi1___lbdiv 0021                       _getAll_Sw_KeyStatus 1C35  
                      _setRF_DimmerLights 179B                           ___lbdiv@divisor 0020  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0023                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1BD4                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 15AF                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 1A88            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 054C                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1BF2  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0AA5                            _setMemory_Data 1B7C  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0768        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 14A5                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1AF3                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1D34                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0954  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 07F8  
                               ??_WDT_Set 0020                          __end_of___awtoft 1FB8  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 166D  
                _getMain_All_Error_Status 115B                                    _IOCBF2 1CB2  
                                  i1l1208 001A                                    i1l7361 1348  
                                  i1l6725 1F5A                                    i1l6727 1F63  
                                  i1l6737 1F72                                    i1l7857 1ADD  
                                  i1l9911 09D0                                    i1l9923 09DF  
                                  i1l9917 09D7                                    _FVRCON 0117  
                                  i1l9961 0A16                                    i1l9969 0A2A  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E30  
                                  _WDTCON 0097                      Exception_Main@i_3628 0033  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 002F  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1D5E                                    _Dimmer 012C  
                                  _DlySw1 0166                          _setRF_AdjControl 134F  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1C8B  
              __end_of_Mcu_Initialization 1CC1                       __end_of_Buzzer_Main 07F8  
                                  _Memory 01BE                          i1Division@result 0079  
                                  _Timer1 0131                                    ___bmul 1C8B  
                  __end_of_Exception_Main 0621                      Exception_Main@lights 0035  
                                  ___wmul 1EB7                       __size_ofi1_Division 000D  
                               ??___awdiv 0024                                 ??___lbdiv 0021  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 000C  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D8  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1CFA  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1CE7  
                                  _s_data 00D9                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 129D                                    _myMain 00AF  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 1B88  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 14FB                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 002F               __end_of_Load_Initialization 1A68  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0020          __end_of_setDimmerIntr_Dimming_RF 1DE4  
        __end_of_setDimmerIntr_Dimming_Sw 1DB4                     ___ftmul@f3_as_product 0039  
                       __end_ofi1___lbdiv 1F74                 _setDimmerLights_DimmingOn 10A9  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1D0D               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 003D                     __end_of_SwPointSelect 1BB8  
             __size_of_DimmerLights_TMR_1 0070              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 0067                          ___lbdiv@dividend 0022  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1D73               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0047           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5413 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1F33  
                           __end_of_getAD 1F33                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1A7C  
                         _getSw_KeyStatus 1C68                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 1B08  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01FD  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1B58                __end_of_set_TimeoutCleared 1AA1  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0064  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1B4C                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1A6E                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 07AE  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 1A74                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1A74  
                           ??_Switch_Main 0032                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00CE                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0020                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1554  
                          _getDelayOff_GO 1C24                       _CC2500_WriteCommand 1E4A  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 160C  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0A33                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1AC8                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1ABA  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 112A  
      __end_of_DimmerLights_SelectPointer 1B4C                _DimmerLights_SelectPointer 1B40  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 1B34  
                                 u1201_25 1EE8                        _setRFSW_AdjControl 0B1E  
                  __end_of_setProductData 1B58                                   i1l10457 1EED  
                                 i1l10903 0012             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1AD8                                   _IOC_Set 1B13  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 13CC  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1E16  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1A6B                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 1B1E           __end_of_setControl_Lights_Table 0B1E  
                         setRF_Main@error 00E7                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 14FB                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 1BAC  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1C57                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1C35  
          __end_of_getDimmerLights_Status 1C13                         __end_of_getRxData 16D1  
                 __end_of_getSw_KeyStatus 1C79                  _CC2500_registers_address 1000  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1451  
                                 ___lbdiv 1F74                                   ___ftadd 0381  
                                 ___ftdiv 0D37                                   ___ftneg 1AE1  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0C24                       __end_of_Switch_Main 1AC8  
                      __end_ofi1_Division 1BC5                                   ___lwdiv 122D  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1C57                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 12D6                                   __ptext2 1D0D  
                                 __ptext3 112A                                   __ptext4 0A33  
                                 __ptext5 1F13                                   __ptext6 0800  
                                 __ptext7 0002                                   __ptext8 1A71  
                                 __ptext9 0DE0                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
                      i1___lbdiv@dividend 0072                 __end_of_Flash_Memory_Main 140D  
               __end_of_Flash_Memory_Read 1E30                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 0477                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1A78                  __end_of_setRF_AdjControl 138C  
                       _DimmerLights_Main 1E7F            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1AA7                __end_of_CC2500_ClearRXFIFO 1A90  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1A94  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EC                            _LedPointSelect 1B70  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1B34                                   clrloop0 1AAE  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1A9C  
                    end_of_initialization 0047                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 10D1                             _DelayTime_1us 1083  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 112A  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 1AA7  
              __end_of_setRF_TransceiveGO 1CE7                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 1AA8                                _setSw_Main 01FD  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 002D  
                       _CC2500_ReadStatus 1FDB                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1C9D                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                      i1___lbdiv@quotient 0074                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 087D                             _CC2500_TxData 08E8  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0B9E  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                           _setCmd_Status 1DE4                       _Flash_Memory_Unlock 1AEA  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 006A  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1E9B  
                      _Mcu_Initialization 1CAF                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1A8C                      __end_of_my_MainTimer 1312  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1B7C                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0021                                 i1___lbdiv 1F53  
               __end_of_CC2500_InitSetREG 10FB                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 2000  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 10D1                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1E4A  
                    _setRF_Initialization 1B29                        _setMemory_LoopSave 1CFA  
                             _Switch_Main 1AC1                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1C68  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D49               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1C46  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1C9D       __size_of_getDimmerIntr_DimmingValue 000F  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1ED5  
                       getSw_KeyStatus@sw 0070               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 001F             __size_of_getDimmerLights_Line 000B  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 12D6  
                           __pbitbssBANK1 0768             __size_of_setDimmerLights_Line 0011  
           __size_of_setDimmerLights_SwOn 0035                            __end_of_setBuz 1554  
              __end_of_DimmerLights_IOC_1 134F                      _CC2500_FrequencyCabr 1BA0  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 138C                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 0A33                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 004B  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 1AD0                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1F13  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1736  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 16D1  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1A9C         __end_of_setDimmerIntr_MaxmumValue 1B64  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 016B                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0031  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1A71                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00D2  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0030                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1AFD                                 _Tx_Length 00D6  
                             __pdataBANK4 0220                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 118E  
                        _CC2500_SIDLEMode 1A94                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1CC1                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E4  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 15AF                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 015E  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1EB7                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EC  
                          getRxData@error 00E5               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1A88                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1C79  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002A  
                  _setTemp_Initialization 1A61                                 _getBuz_GO 1C46  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 06EB  
             _Flash_Memory_Initialization 0621                                  ?___awdiv 0020  
                               __ptext100 1C79                                 __ptext101 14A5  
                                ?___lbdiv 0020                                 __ptext110 1AC8  
                               __ptext102 0F45                                 __ptext111 115B  
                               __ptext103 1CD4                                 __ptext120 0E91  
                               __ptext112 1AB3                                 __ptext104 179B  
                               __ptext121 0D37                                 __ptext113 1A60  
                               __ptext105 1C13                                 __ptext130 11C2  
                               __ptext122 0381                                 __ptext114 15AF  
                               __ptext106 1B58                                 __ptext131 14FB  
                               __ptext123 1F96                                 __ptext115 1CC1  
                               __ptext107 1D9E                                 __ptext140 1A62  
                               __ptext132 1451                                 __ptext124 160C  
                               __ptext116 1736                                 __ptext108 1BD4  
                               __ptext133 1264                                 __ptext125 1BC5  
                               __ptext117 16D1                                 __ptext109 1D88  
                                ?___ftadd 0041                                 __ptext142 1ED5  
                               __ptext134 1C02                                 __ptext126 1F74  
                               __ptext118 0C24                                 __ptext143 09C3  
                               __ptext135 1B40                                 __ptext127 1A78  
                               __ptext119 1AE1                                 __ptext144 1AD8  
                               __ptext136 1A74                                 __ptext128 0954  
                               __ptext145 1312                                 __ptext137 1AA1  
                               __ptext129 1B4C                                 __ptext146 1BB8  
                               __ptext138 1B34                                 __ptext147 1F53  
                               __ptext139 07AE                                 _getRxData 166D  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 13CC                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1A65                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0020                        __end_of_TouchPower 1D88  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1BE3              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1BD4                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00C3                         ?_setRF_AdjControl 0070  
                               _r_address 00D7             __end_of_setDimmerLights_OnOff 07AE  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 129D              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1D20                               ??i1___lbdiv 0071  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                      ??_setRF_AdjControl 002D                             _SwPointSelect 1BAC  
                     __end_of_setLED_Main 122D                          ??_getDelayOff_GO 0022  
                       i1___lbdiv@divisor 0070                         i1___lbdiv@counter 0073  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1A71  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1A80                           SwPointSelect@sw 0021  
                               clear_ram0 1AAD                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 12D6  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 1ABA  
             _DimmerLights_Initialization 1AB3                    _Flash_Memory_Main$3155 0028  
                      _CC2500_ClearRXFIFO 1A8C                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1A90                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1D34  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 10FB                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1ED5  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1B94  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1CD4                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 1BF2                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1E64                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 0800                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00CC  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1B94  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11C2  
                   _DlyOff_Initialization 1AA1         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1BC5  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1DCC               setDimmerLights_OnOff@lights 00E4  
                _setDimmerIntr_Dimming_Sw 1D9E                                  _Fosc_Set 1A84  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 0AA5                        __end_of_getLoad_OK 1AD0  
                   _Switch_Initialization 1A98         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 115B  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1DFD                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00D5                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3616 0021  
           _getMain_All_Error_Status$3617 0023                  __end_of_getDimmer_LoadGO 1AD8  
                     _Load_Initialization 1A65          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0DE0                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0022                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1F96  
                        ??_LedPointSelect 0020                                  ___ftpack 160C  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E6  
                    CC2500_WriteREG@value 0022                               _setLED_Main 11F7  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 0800  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0025  
                                __ptext10 1A6E                                  __ptext11 1A61  
                                __ptext20 1D5E                                  __ptext12 1AC1  
                                __ptext21 1A98                                  __ptext13 01FD  
                                __ptext30 138C                                  __ptext22 1BF2  
                                __ptext14 1D20                                  __ptext31 0B1E  
                                __ptext23 1A6B                                  __ptext15 10A9  
                                __ptext40 1D49                                  __ptext32 1E64  
                                __ptext24 0477                                  __ptext16 1C68  
                                __ptext41 1A94                                  __ptext33 1C57  
                                __ptext25 166D                                  __ptext17 1BAC  
                                __ptext50 1E4A                                  __ptext42 140D  
                                __ptext34 1C46                                  __ptext26 118E  
                                __ptext18 1D73                                  __ptext51 1A88  
                                __ptext43 10D1                                  __ptext35 1BE3  
                                __ptext27 1CFA                                  __ptext19 1A9C  
                                __ptext60 1B13                                  __ptext52 1D34  
                                __ptext44 1EF4                                  __ptext36 08E8  
                                __ptext28 0AA5                                  __ptext61 1A84  
                                __ptext53 1DFD                                  __ptext45 1FB8  
                                __ptext37 087D                                  __ptext29 134F  
                                __ptext70 1A65                                  __ptext62 1ABA  
                                __ptext54 1A68                                  __ptext46 1BA0  
                                __ptext38 1FDB                                  __ptext71 1E9B  
                                __ptext63 004B                                  __ptext55 1B29  
                                __ptext47 1083                                  __ptext39 1066  
                                __ptext80 0621                                  __ptext72 1A80  
                                __ptext64 1B08                                  __ptext56 1CAF  
                                __ptext48 1A90                                  __ptext81 1B7C  
                                __ptext73 11F7                                  __ptext65 07F8  
                                __ptext57 1B1E                                  __ptext49 1A8C  
                                __ptext90 129D                                  __ptext82 10FB  
                                __ptext74 1A7C                                  __ptext66 1AD0  
                                __ptext58 1B94                                  __ptext91 1B70  
                                __ptext83 1AEA                                  __ptext75 1C9D  
                                __ptext67 1CE7                                  __ptext59 1E30  
                                __ptext92 1DCC                                  __ptext84 1E16  
                                __ptext76 13CC                                  __ptext68 1EB7  
                                __ptext93 1B64                                  __ptext85 054C  
                                __ptext77 1C35                                  __ptext69 122D  
                                __ptext94 1DB4                                  __ptext86 1AFD  
                                __ptext78 0B9E                                  __ptext95 0CAB  
                                __ptext87 1E7F                                  __ptext79 1B88  
                                __ptext96 1C8B                                  __ptext88 0812  
                                __ptext97 1DE4                                  __ptext89 06EB  
                                __ptext98 1AF3                                  __ptext99 1C24  
                                __product 0220                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1B08  
            __end_of_setDimmerLights_Main 087D              __end_of_setDimmerLights_Line 1C24  
                      _DimmerLights_IOC_1 1312              __end_of_setDimmerLights_SwOn 11F7  
                            ??_setSw_Main 002F                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1D20  
      __size_of_DimmerIntr_Initialization 005D                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 09C3                  __end_of_CC2500_SIDLEMode 1A98  
              setDimmerLights_Main@lights 00E5               __end_of_DelayOffPointSelect 1B40  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1066  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1EF4  
                __end_of_setMemory_Modify 1CD4                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 054C                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 105E                               ??_getRxData 00E4  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1D49  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6473 0022  
                                main@argc 00E8                                  main@argv 00EA  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6470 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 140D  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1B70                _setDimmerIntr_DimmingValue 1B64  
             __end_of_Flash_Memory_Modify 0C24              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 118E               __end_of_Flash_Memory_Unlock 1AF3  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1FB8  
                      __end_of_setSw_Main 0381                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0029                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 1A61   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1A60                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1A68  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1B88  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D3  
                 __size_of_Exception_Main 00D5                             Division@value 0028  
         __end_of_DelayOff_Initialization 1A78                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1A7C                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0CAB  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0079  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 1BB8  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 10A9  
                 __end_of_CC2500_ReadByte 1083              __end_of_setSw_Initialization 1C02  
                         _Timeout_Counter 1D5E           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1BE3  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 1A80  
          __end_of_setTemp_Initialization 1A62                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 1A6B  
               __size_of_setRF_AdjControl 003D                     __end_of_CC2500_RxData 08E8  
                   __end_of_CC2500_TxData 0954                     _setLoad_AH_AL_Restore 1E9B  
                 __end_of_CC2500_PowerRST 1451  
