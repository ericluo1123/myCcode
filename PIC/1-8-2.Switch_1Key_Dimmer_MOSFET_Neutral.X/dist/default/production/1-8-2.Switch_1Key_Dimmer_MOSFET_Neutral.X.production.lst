

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Feb 26 10:29:56 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,delta=2
   165                           	dabs	1,0x7E,2
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0015                     	;# 
   185  0016                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001C                     	;# 
   193  008C                     	;# 
   194  008D                     	;# 
   195  008E                     	;# 
   196  0090                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  010C                     	;# 
   210  010D                     	;# 
   211  010E                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  011D                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  018E                     	;# 
   218  0191                     	;# 
   219  0191                     	;# 
   220  0192                     	;# 
   221  0193                     	;# 
   222  0193                     	;# 
   223  0194                     	;# 
   224  0195                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0199                     	;# 
   228  019A                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019D                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  020D                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  0212                     	;# 
   243  0212                     	;# 
   244  0213                     	;# 
   245  0213                     	;# 
   246  0214                     	;# 
   247  0214                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0216                     	;# 
   252  0216                     	;# 
   253  0217                     	;# 
   254  0217                     	;# 
   255  0291                     	;# 
   256  0291                     	;# 
   257  0292                     	;# 
   258  0293                     	;# 
   259  0298                     	;# 
   260  0298                     	;# 
   261  0299                     	;# 
   262  029A                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0FE4                     	;# 
   267  0FE5                     	;# 
   268  0FE6                     	;# 
   269  0FE7                     	;# 
   270  0FE8                     	;# 
   271  0FE9                     	;# 
   272  0FEA                     	;# 
   273  0FEB                     	;# 
   274  0FED                     	;# 
   275  0FEE                     	;# 
   276  0FEF                     	;# 
   277  0000                     	;# 
   278  0001                     	;# 
   279  0002                     	;# 
   280  0003                     	;# 
   281  0004                     	;# 
   282  0005                     	;# 
   283  0006                     	;# 
   284  0007                     	;# 
   285  0008                     	;# 
   286  0009                     	;# 
   287  000A                     	;# 
   288  000B                     	;# 
   289  000C                     	;# 
   290  000D                     	;# 
   291  000E                     	;# 
   292  0010                     	;# 
   293  0011                     	;# 
   294  0012                     	;# 
   295  0015                     	;# 
   296  0016                     	;# 
   297  0016                     	;# 
   298  0017                     	;# 
   299  0018                     	;# 
   300  0019                     	;# 
   301  001A                     	;# 
   302  001B                     	;# 
   303  001C                     	;# 
   304  008C                     	;# 
   305  008D                     	;# 
   306  008E                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0095                     	;# 
   311  0096                     	;# 
   312  0097                     	;# 
   313  0099                     	;# 
   314  009A                     	;# 
   315  009B                     	;# 
   316  009B                     	;# 
   317  009C                     	;# 
   318  009D                     	;# 
   319  009E                     	;# 
   320  010C                     	;# 
   321  010D                     	;# 
   322  010E                     	;# 
   323  0116                     	;# 
   324  0117                     	;# 
   325  011D                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  018E                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0197                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0298                     	;# 
   371  0298                     	;# 
   372  0299                     	;# 
   373  029A                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  000D                     	;# 
   402  000E                     	;# 
   403  0010                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0016                     	;# 
   409  0017                     	;# 
   410  0018                     	;# 
   411  0019                     	;# 
   412  001A                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  008C                     	;# 
   416  008D                     	;# 
   417  008E                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0099                     	;# 
   425  009A                     	;# 
   426  009B                     	;# 
   427  009B                     	;# 
   428  009C                     	;# 
   429  009D                     	;# 
   430  009E                     	;# 
   431  010C                     	;# 
   432  010D                     	;# 
   433  010E                     	;# 
   434  0116                     	;# 
   435  0117                     	;# 
   436  011D                     	;# 
   437  018C                     	;# 
   438  018D                     	;# 
   439  018E                     	;# 
   440  0191                     	;# 
   441  0191                     	;# 
   442  0192                     	;# 
   443  0193                     	;# 
   444  0193                     	;# 
   445  0194                     	;# 
   446  0195                     	;# 
   447  0196                     	;# 
   448  0197                     	;# 
   449  0199                     	;# 
   450  019A                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019C                     	;# 
   456  019C                     	;# 
   457  019D                     	;# 
   458  019E                     	;# 
   459  019F                     	;# 
   460  020D                     	;# 
   461  0210                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0298                     	;# 
   482  0298                     	;# 
   483  0299                     	;# 
   484  029A                     	;# 
   485  0394                     	;# 
   486  0395                     	;# 
   487  0396                     	;# 
   488  0FE4                     	;# 
   489  0FE5                     	;# 
   490  0FE6                     	;# 
   491  0FE7                     	;# 
   492  0FE8                     	;# 
   493  0FE9                     	;# 
   494  0FEA                     	;# 
   495  0FEB                     	;# 
   496  0FED                     	;# 
   497  0FEE                     	;# 
   498  0FEF                     	;# 
   499  0000                     	;# 
   500  0001                     	;# 
   501  0002                     	;# 
   502  0003                     	;# 
   503  0004                     	;# 
   504  0005                     	;# 
   505  0006                     	;# 
   506  0007                     	;# 
   507  0008                     	;# 
   508  0009                     	;# 
   509  000A                     	;# 
   510  000B                     	;# 
   511  000C                     	;# 
   512  000D                     	;# 
   513  000E                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0016                     	;# 
   520  0017                     	;# 
   521  0018                     	;# 
   522  0019                     	;# 
   523  001A                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  008C                     	;# 
   527  008D                     	;# 
   528  008E                     	;# 
   529  0090                     	;# 
   530  0091                     	;# 
   531  0092                     	;# 
   532  0095                     	;# 
   533  0096                     	;# 
   534  0097                     	;# 
   535  0099                     	;# 
   536  009A                     	;# 
   537  009B                     	;# 
   538  009B                     	;# 
   539  009C                     	;# 
   540  009D                     	;# 
   541  009E                     	;# 
   542  010C                     	;# 
   543  010D                     	;# 
   544  010E                     	;# 
   545  0116                     	;# 
   546  0117                     	;# 
   547  011D                     	;# 
   548  018C                     	;# 
   549  018D                     	;# 
   550  018E                     	;# 
   551  0191                     	;# 
   552  0191                     	;# 
   553  0192                     	;# 
   554  0193                     	;# 
   555  0193                     	;# 
   556  0194                     	;# 
   557  0195                     	;# 
   558  0196                     	;# 
   559  0197                     	;# 
   560  0199                     	;# 
   561  019A                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019C                     	;# 
   567  019C                     	;# 
   568  019D                     	;# 
   569  019E                     	;# 
   570  019F                     	;# 
   571  020D                     	;# 
   572  0210                     	;# 
   573  0211                     	;# 
   574  0211                     	;# 
   575  0212                     	;# 
   576  0212                     	;# 
   577  0213                     	;# 
   578  0213                     	;# 
   579  0214                     	;# 
   580  0214                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0216                     	;# 
   585  0216                     	;# 
   586  0217                     	;# 
   587  0217                     	;# 
   588  0291                     	;# 
   589  0291                     	;# 
   590  0292                     	;# 
   591  0293                     	;# 
   592  0298                     	;# 
   593  0298                     	;# 
   594  0299                     	;# 
   595  029A                     	;# 
   596  0394                     	;# 
   597  0395                     	;# 
   598  0396                     	;# 
   599  0FE4                     	;# 
   600  0FE5                     	;# 
   601  0FE6                     	;# 
   602  0FE7                     	;# 
   603  0FE8                     	;# 
   604  0FE9                     	;# 
   605  0FEA                     	;# 
   606  0FEB                     	;# 
   607  0FED                     	;# 
   608  0FEE                     	;# 
   609  0FEF                     	;# 
   610  0000                     	;# 
   611  0001                     	;# 
   612  0002                     	;# 
   613  0003                     	;# 
   614  0004                     	;# 
   615  0005                     	;# 
   616  0006                     	;# 
   617  0007                     	;# 
   618  0008                     	;# 
   619  0009                     	;# 
   620  000A                     	;# 
   621  000B                     	;# 
   622  000C                     	;# 
   623  000D                     	;# 
   624  000E                     	;# 
   625  0010                     	;# 
   626  0011                     	;# 
   627  0012                     	;# 
   628  0015                     	;# 
   629  0016                     	;# 
   630  0016                     	;# 
   631  0017                     	;# 
   632  0018                     	;# 
   633  0019                     	;# 
   634  001A                     	;# 
   635  001B                     	;# 
   636  001C                     	;# 
   637  008C                     	;# 
   638  008D                     	;# 
   639  008E                     	;# 
   640  0090                     	;# 
   641  0091                     	;# 
   642  0092                     	;# 
   643  0095                     	;# 
   644  0096                     	;# 
   645  0097                     	;# 
   646  0099                     	;# 
   647  009A                     	;# 
   648  009B                     	;# 
   649  009B                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  010C                     	;# 
   654  010D                     	;# 
   655  010E                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  011D                     	;# 
   659  018C                     	;# 
   660  018D                     	;# 
   661  018E                     	;# 
   662  0191                     	;# 
   663  0191                     	;# 
   664  0192                     	;# 
   665  0193                     	;# 
   666  0193                     	;# 
   667  0194                     	;# 
   668  0195                     	;# 
   669  0196                     	;# 
   670  0197                     	;# 
   671  0199                     	;# 
   672  019A                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019C                     	;# 
   678  019C                     	;# 
   679  019D                     	;# 
   680  019E                     	;# 
   681  019F                     	;# 
   682  020D                     	;# 
   683  0210                     	;# 
   684  0211                     	;# 
   685  0211                     	;# 
   686  0212                     	;# 
   687  0212                     	;# 
   688  0213                     	;# 
   689  0213                     	;# 
   690  0214                     	;# 
   691  0214                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0216                     	;# 
   696  0216                     	;# 
   697  0217                     	;# 
   698  0217                     	;# 
   699  0291                     	;# 
   700  0291                     	;# 
   701  0292                     	;# 
   702  0293                     	;# 
   703  0298                     	;# 
   704  0298                     	;# 
   705  0299                     	;# 
   706  029A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  0FE4                     	;# 
   711  0FE5                     	;# 
   712  0FE6                     	;# 
   713  0FE7                     	;# 
   714  0FE8                     	;# 
   715  0FE9                     	;# 
   716  0FEA                     	;# 
   717  0FEB                     	;# 
   718  0FED                     	;# 
   719  0FEE                     	;# 
   720  0FEF                     	;# 
   721  0000                     	;# 
   722  0001                     	;# 
   723  0002                     	;# 
   724  0003                     	;# 
   725  0004                     	;# 
   726  0005                     	;# 
   727  0006                     	;# 
   728  0007                     	;# 
   729  0008                     	;# 
   730  0009                     	;# 
   731  000A                     	;# 
   732  000B                     	;# 
   733  000C                     	;# 
   734  000D                     	;# 
   735  000E                     	;# 
   736  0010                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0015                     	;# 
   740  0016                     	;# 
   741  0016                     	;# 
   742  0017                     	;# 
   743  0018                     	;# 
   744  0019                     	;# 
   745  001A                     	;# 
   746  001B                     	;# 
   747  001C                     	;# 
   748  008C                     	;# 
   749  008D                     	;# 
   750  008E                     	;# 
   751  0090                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0095                     	;# 
   755  0096                     	;# 
   756  0097                     	;# 
   757  0099                     	;# 
   758  009A                     	;# 
   759  009B                     	;# 
   760  009B                     	;# 
   761  009C                     	;# 
   762  009D                     	;# 
   763  009E                     	;# 
   764  010C                     	;# 
   765  010D                     	;# 
   766  010E                     	;# 
   767  0116                     	;# 
   768  0117                     	;# 
   769  011D                     	;# 
   770  018C                     	;# 
   771  018D                     	;# 
   772  018E                     	;# 
   773  0191                     	;# 
   774  0191                     	;# 
   775  0192                     	;# 
   776  0193                     	;# 
   777  0193                     	;# 
   778  0194                     	;# 
   779  0195                     	;# 
   780  0196                     	;# 
   781  0197                     	;# 
   782  0199                     	;# 
   783  019A                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019C                     	;# 
   789  019C                     	;# 
   790  019D                     	;# 
   791  019E                     	;# 
   792  019F                     	;# 
   793  020D                     	;# 
   794  0210                     	;# 
   795  0211                     	;# 
   796  0211                     	;# 
   797  0212                     	;# 
   798  0212                     	;# 
   799  0213                     	;# 
   800  0213                     	;# 
   801  0214                     	;# 
   802  0214                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0216                     	;# 
   807  0216                     	;# 
   808  0217                     	;# 
   809  0217                     	;# 
   810  0291                     	;# 
   811  0291                     	;# 
   812  0292                     	;# 
   813  0293                     	;# 
   814  0298                     	;# 
   815  0298                     	;# 
   816  0299                     	;# 
   817  029A                     	;# 
   818  0394                     	;# 
   819  0395                     	;# 
   820  0396                     	;# 
   821  0FE4                     	;# 
   822  0FE5                     	;# 
   823  0FE6                     	;# 
   824  0FE7                     	;# 
   825  0FE8                     	;# 
   826  0FE9                     	;# 
   827  0FEA                     	;# 
   828  0FEB                     	;# 
   829  0FED                     	;# 
   830  0FEE                     	;# 
   831  0FEF                     	;# 
   832  0000                     	;# 
   833  0001                     	;# 
   834  0002                     	;# 
   835  0003                     	;# 
   836  0004                     	;# 
   837  0005                     	;# 
   838  0006                     	;# 
   839  0007                     	;# 
   840  0008                     	;# 
   841  0009                     	;# 
   842  000A                     	;# 
   843  000B                     	;# 
   844  000C                     	;# 
   845  000D                     	;# 
   846  000E                     	;# 
   847  0010                     	;# 
   848  0011                     	;# 
   849  0012                     	;# 
   850  0015                     	;# 
   851  0016                     	;# 
   852  0016                     	;# 
   853  0017                     	;# 
   854  0018                     	;# 
   855  0019                     	;# 
   856  001A                     	;# 
   857  001B                     	;# 
   858  001C                     	;# 
   859  008C                     	;# 
   860  008D                     	;# 
   861  008E                     	;# 
   862  0090                     	;# 
   863  0091                     	;# 
   864  0092                     	;# 
   865  0095                     	;# 
   866  0096                     	;# 
   867  0097                     	;# 
   868  0099                     	;# 
   869  009A                     	;# 
   870  009B                     	;# 
   871  009B                     	;# 
   872  009C                     	;# 
   873  009D                     	;# 
   874  009E                     	;# 
   875  010C                     	;# 
   876  010D                     	;# 
   877  010E                     	;# 
   878  0116                     	;# 
   879  0117                     	;# 
   880  011D                     	;# 
   881  018C                     	;# 
   882  018D                     	;# 
   883  018E                     	;# 
   884  0191                     	;# 
   885  0191                     	;# 
   886  0192                     	;# 
   887  0193                     	;# 
   888  0193                     	;# 
   889  0194                     	;# 
   890  0195                     	;# 
   891  0196                     	;# 
   892  0197                     	;# 
   893  0199                     	;# 
   894  019A                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019C                     	;# 
   900  019C                     	;# 
   901  019D                     	;# 
   902  019E                     	;# 
   903  019F                     	;# 
   904  020D                     	;# 
   905  0210                     	;# 
   906  0211                     	;# 
   907  0211                     	;# 
   908  0212                     	;# 
   909  0212                     	;# 
   910  0213                     	;# 
   911  0213                     	;# 
   912  0214                     	;# 
   913  0214                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  0291                     	;# 
   922  0291                     	;# 
   923  0292                     	;# 
   924  0293                     	;# 
   925  0298                     	;# 
   926  0298                     	;# 
   927  0299                     	;# 
   928  029A                     	;# 
   929  0394                     	;# 
   930  0395                     	;# 
   931  0396                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0010                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0015                     	;# 
   962  0016                     	;# 
   963  0016                     	;# 
   964  0017                     	;# 
   965  0018                     	;# 
   966  0019                     	;# 
   967  001A                     	;# 
   968  001B                     	;# 
   969  001C                     	;# 
   970  008C                     	;# 
   971  008D                     	;# 
   972  008E                     	;# 
   973  0090                     	;# 
   974  0091                     	;# 
   975  0092                     	;# 
   976  0095                     	;# 
   977  0096                     	;# 
   978  0097                     	;# 
   979  0099                     	;# 
   980  009A                     	;# 
   981  009B                     	;# 
   982  009B                     	;# 
   983  009C                     	;# 
   984  009D                     	;# 
   985  009E                     	;# 
   986  010C                     	;# 
   987  010D                     	;# 
   988  010E                     	;# 
   989  0116                     	;# 
   990  0117                     	;# 
   991  011D                     	;# 
   992  018C                     	;# 
   993  018D                     	;# 
   994  018E                     	;# 
   995  0191                     	;# 
   996  0191                     	;# 
   997  0192                     	;# 
   998  0193                     	;# 
   999  0193                     	;# 
  1000  0194                     	;# 
  1001  0195                     	;# 
  1002  0196                     	;# 
  1003  0197                     	;# 
  1004  0199                     	;# 
  1005  019A                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019C                     	;# 
  1011  019C                     	;# 
  1012  019D                     	;# 
  1013  019E                     	;# 
  1014  019F                     	;# 
  1015  020D                     	;# 
  1016  0210                     	;# 
  1017  0211                     	;# 
  1018  0211                     	;# 
  1019  0212                     	;# 
  1020  0212                     	;# 
  1021  0213                     	;# 
  1022  0213                     	;# 
  1023  0214                     	;# 
  1024  0214                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0216                     	;# 
  1029  0216                     	;# 
  1030  0217                     	;# 
  1031  0217                     	;# 
  1032  0291                     	;# 
  1033  0291                     	;# 
  1034  0292                     	;# 
  1035  0293                     	;# 
  1036  0298                     	;# 
  1037  0298                     	;# 
  1038  0299                     	;# 
  1039  029A                     	;# 
  1040  0394                     	;# 
  1041  0395                     	;# 
  1042  0396                     	;# 
  1043  0FE4                     	;# 
  1044  0FE5                     	;# 
  1045  0FE6                     	;# 
  1046  0FE7                     	;# 
  1047  0FE8                     	;# 
  1048  0FE9                     	;# 
  1049  0FEA                     	;# 
  1050  0FEB                     	;# 
  1051  0FED                     	;# 
  1052  0FEE                     	;# 
  1053  0FEF                     	;# 
  1054  0000                     	;# 
  1055  0001                     	;# 
  1056  0002                     	;# 
  1057  0003                     	;# 
  1058  0004                     	;# 
  1059  0005                     	;# 
  1060  0006                     	;# 
  1061  0007                     	;# 
  1062  0008                     	;# 
  1063  0009                     	;# 
  1064  000A                     	;# 
  1065  000B                     	;# 
  1066  000C                     	;# 
  1067  000D                     	;# 
  1068  000E                     	;# 
  1069  0010                     	;# 
  1070  0011                     	;# 
  1071  0012                     	;# 
  1072  0015                     	;# 
  1073  0016                     	;# 
  1074  0016                     	;# 
  1075  0017                     	;# 
  1076  0018                     	;# 
  1077  0019                     	;# 
  1078  001A                     	;# 
  1079  001B                     	;# 
  1080  001C                     	;# 
  1081  008C                     	;# 
  1082  008D                     	;# 
  1083  008E                     	;# 
  1084  0090                     	;# 
  1085  0091                     	;# 
  1086  0092                     	;# 
  1087  0095                     	;# 
  1088  0096                     	;# 
  1089  0097                     	;# 
  1090  0099                     	;# 
  1091  009A                     	;# 
  1092  009B                     	;# 
  1093  009B                     	;# 
  1094  009C                     	;# 
  1095  009D                     	;# 
  1096  009E                     	;# 
  1097  010C                     	;# 
  1098  010D                     	;# 
  1099  010E                     	;# 
  1100  0116                     	;# 
  1101  0117                     	;# 
  1102  011D                     	;# 
  1103  018C                     	;# 
  1104  018D                     	;# 
  1105  018E                     	;# 
  1106  0191                     	;# 
  1107  0191                     	;# 
  1108  0192                     	;# 
  1109  0193                     	;# 
  1110  0193                     	;# 
  1111  0194                     	;# 
  1112  0195                     	;# 
  1113  0196                     	;# 
  1114  0197                     	;# 
  1115  0199                     	;# 
  1116  019A                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019C                     	;# 
  1122  019C                     	;# 
  1123  019D                     	;# 
  1124  019E                     	;# 
  1125  019F                     	;# 
  1126  020D                     	;# 
  1127  0210                     	;# 
  1128  0211                     	;# 
  1129  0211                     	;# 
  1130  0212                     	;# 
  1131  0212                     	;# 
  1132  0213                     	;# 
  1133  0213                     	;# 
  1134  0214                     	;# 
  1135  0214                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0216                     	;# 
  1140  0216                     	;# 
  1141  0217                     	;# 
  1142  0217                     	;# 
  1143  0291                     	;# 
  1144  0291                     	;# 
  1145  0292                     	;# 
  1146  0293                     	;# 
  1147  0298                     	;# 
  1148  0298                     	;# 
  1149  0299                     	;# 
  1150  029A                     	;# 
  1151  0394                     	;# 
  1152  0395                     	;# 
  1153  0396                     	;# 
  1154  0FE4                     	;# 
  1155  0FE5                     	;# 
  1156  0FE6                     	;# 
  1157  0FE7                     	;# 
  1158  0FE8                     	;# 
  1159  0FE9                     	;# 
  1160  0FEA                     	;# 
  1161  0FEB                     	;# 
  1162  0FED                     	;# 
  1163  0FEE                     	;# 
  1164  0FEF                     	;# 
  1165  0000                     	;# 
  1166  0001                     	;# 
  1167  0002                     	;# 
  1168  0003                     	;# 
  1169  0004                     	;# 
  1170  0005                     	;# 
  1171  0006                     	;# 
  1172  0007                     	;# 
  1173  0008                     	;# 
  1174  0009                     	;# 
  1175  000A                     	;# 
  1176  000B                     	;# 
  1177  000C                     	;# 
  1178  000D                     	;# 
  1179  000E                     	;# 
  1180  0010                     	;# 
  1181  0011                     	;# 
  1182  0012                     	;# 
  1183  0015                     	;# 
  1184  0016                     	;# 
  1185  0016                     	;# 
  1186  0017                     	;# 
  1187  0018                     	;# 
  1188  0019                     	;# 
  1189  001A                     	;# 
  1190  001B                     	;# 
  1191  001C                     	;# 
  1192  008C                     	;# 
  1193  008D                     	;# 
  1194  008E                     	;# 
  1195  0090                     	;# 
  1196  0091                     	;# 
  1197  0092                     	;# 
  1198  0095                     	;# 
  1199  0096                     	;# 
  1200  0097                     	;# 
  1201  0099                     	;# 
  1202  009A                     	;# 
  1203  009B                     	;# 
  1204  009B                     	;# 
  1205  009C                     	;# 
  1206  009D                     	;# 
  1207  009E                     	;# 
  1208  010C                     	;# 
  1209  010D                     	;# 
  1210  010E                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  011D                     	;# 
  1214  018C                     	;# 
  1215  018D                     	;# 
  1216  018E                     	;# 
  1217  0191                     	;# 
  1218  0191                     	;# 
  1219  0192                     	;# 
  1220  0193                     	;# 
  1221  0193                     	;# 
  1222  0194                     	;# 
  1223  0195                     	;# 
  1224  0196                     	;# 
  1225  0197                     	;# 
  1226  0199                     	;# 
  1227  019A                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019C                     	;# 
  1233  019C                     	;# 
  1234  019D                     	;# 
  1235  019E                     	;# 
  1236  019F                     	;# 
  1237  020D                     	;# 
  1238  0210                     	;# 
  1239  0211                     	;# 
  1240  0211                     	;# 
  1241  0212                     	;# 
  1242  0212                     	;# 
  1243  0213                     	;# 
  1244  0213                     	;# 
  1245  0214                     	;# 
  1246  0214                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0216                     	;# 
  1251  0216                     	;# 
  1252  0217                     	;# 
  1253  0217                     	;# 
  1254  0291                     	;# 
  1255  0291                     	;# 
  1256  0292                     	;# 
  1257  0293                     	;# 
  1258  0298                     	;# 
  1259  0298                     	;# 
  1260  0299                     	;# 
  1261  029A                     	;# 
  1262  0394                     	;# 
  1263  0395                     	;# 
  1264  0396                     	;# 
  1265  0FE4                     	;# 
  1266  0FE5                     	;# 
  1267  0FE6                     	;# 
  1268  0FE7                     	;# 
  1269  0FE8                     	;# 
  1270  0FE9                     	;# 
  1271  0FEA                     	;# 
  1272  0FEB                     	;# 
  1273  0FED                     	;# 
  1274  0FEE                     	;# 
  1275  0FEF                     	;# 
  1276  0000                     	;# 
  1277  0001                     	;# 
  1278  0002                     	;# 
  1279  0003                     	;# 
  1280  0004                     	;# 
  1281  0005                     	;# 
  1282  0006                     	;# 
  1283  0007                     	;# 
  1284  0008                     	;# 
  1285  0009                     	;# 
  1286  000A                     	;# 
  1287  000B                     	;# 
  1288  000C                     	;# 
  1289  000D                     	;# 
  1290  000E                     	;# 
  1291  0010                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  0090                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0116                     	;# 
  1323  0117                     	;# 
  1324  011D                     	;# 
  1325  018C                     	;# 
  1326  018D                     	;# 
  1327  018E                     	;# 
  1328  0191                     	;# 
  1329  0191                     	;# 
  1330  0192                     	;# 
  1331  0193                     	;# 
  1332  0193                     	;# 
  1333  0194                     	;# 
  1334  0195                     	;# 
  1335  0196                     	;# 
  1336  0197                     	;# 
  1337  0199                     	;# 
  1338  019A                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019C                     	;# 
  1344  019C                     	;# 
  1345  019D                     	;# 
  1346  019E                     	;# 
  1347  019F                     	;# 
  1348  020D                     	;# 
  1349  0210                     	;# 
  1350  0211                     	;# 
  1351  0211                     	;# 
  1352  0212                     	;# 
  1353  0212                     	;# 
  1354  0213                     	;# 
  1355  0213                     	;# 
  1356  0214                     	;# 
  1357  0214                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0216                     	;# 
  1362  0216                     	;# 
  1363  0217                     	;# 
  1364  0217                     	;# 
  1365  0291                     	;# 
  1366  0291                     	;# 
  1367  0292                     	;# 
  1368  0293                     	;# 
  1369  0298                     	;# 
  1370  0298                     	;# 
  1371  0299                     	;# 
  1372  029A                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0FE4                     	;# 
  1377  0FE5                     	;# 
  1378  0FE6                     	;# 
  1379  0FE7                     	;# 
  1380  0FE8                     	;# 
  1381  0FE9                     	;# 
  1382  0FEA                     	;# 
  1383  0FEB                     	;# 
  1384  0FED                     	;# 
  1385  0FEE                     	;# 
  1386  0FEF                     	;# 
  1387  0000                     	;# 
  1388  0001                     	;# 
  1389  0002                     	;# 
  1390  0003                     	;# 
  1391  0004                     	;# 
  1392  0005                     	;# 
  1393  0006                     	;# 
  1394  0007                     	;# 
  1395  0008                     	;# 
  1396  0009                     	;# 
  1397  000A                     	;# 
  1398  000B                     	;# 
  1399  000C                     	;# 
  1400  000D                     	;# 
  1401  000E                     	;# 
  1402  0010                     	;# 
  1403  0011                     	;# 
  1404  0012                     	;# 
  1405  0015                     	;# 
  1406  0016                     	;# 
  1407  0016                     	;# 
  1408  0017                     	;# 
  1409  0018                     	;# 
  1410  0019                     	;# 
  1411  001A                     	;# 
  1412  001B                     	;# 
  1413  001C                     	;# 
  1414  008C                     	;# 
  1415  008D                     	;# 
  1416  008E                     	;# 
  1417  0090                     	;# 
  1418  0091                     	;# 
  1419  0092                     	;# 
  1420  0095                     	;# 
  1421  0096                     	;# 
  1422  0097                     	;# 
  1423  0099                     	;# 
  1424  009A                     	;# 
  1425  009B                     	;# 
  1426  009B                     	;# 
  1427  009C                     	;# 
  1428  009D                     	;# 
  1429  009E                     	;# 
  1430  010C                     	;# 
  1431  010D                     	;# 
  1432  010E                     	;# 
  1433  0116                     	;# 
  1434  0117                     	;# 
  1435  011D                     	;# 
  1436  018C                     	;# 
  1437  018D                     	;# 
  1438  018E                     	;# 
  1439  0191                     	;# 
  1440  0191                     	;# 
  1441  0192                     	;# 
  1442  0193                     	;# 
  1443  0193                     	;# 
  1444  0194                     	;# 
  1445  0195                     	;# 
  1446  0196                     	;# 
  1447  0197                     	;# 
  1448  0199                     	;# 
  1449  019A                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019C                     	;# 
  1455  019C                     	;# 
  1456  019D                     	;# 
  1457  019E                     	;# 
  1458  019F                     	;# 
  1459  020D                     	;# 
  1460  0210                     	;# 
  1461  0211                     	;# 
  1462  0211                     	;# 
  1463  0212                     	;# 
  1464  0212                     	;# 
  1465  0213                     	;# 
  1466  0213                     	;# 
  1467  0214                     	;# 
  1468  0214                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0216                     	;# 
  1473  0216                     	;# 
  1474  0217                     	;# 
  1475  0217                     	;# 
  1476  0291                     	;# 
  1477  0291                     	;# 
  1478  0292                     	;# 
  1479  0293                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  0394                     	;# 
  1485  0395                     	;# 
  1486  0396                     	;# 
  1487  0FE4                     	;# 
  1488  0FE5                     	;# 
  1489  0FE6                     	;# 
  1490  0FE7                     	;# 
  1491  0FE8                     	;# 
  1492  0FE9                     	;# 
  1493  0FEA                     	;# 
  1494  0FEB                     	;# 
  1495  0FED                     	;# 
  1496  0FEE                     	;# 
  1497  0FEF                     	;# 
  1498  0000                     	;# 
  1499  0001                     	;# 
  1500  0002                     	;# 
  1501  0003                     	;# 
  1502  0004                     	;# 
  1503  0005                     	;# 
  1504  0006                     	;# 
  1505  0007                     	;# 
  1506  0008                     	;# 
  1507  0009                     	;# 
  1508  000A                     	;# 
  1509  000B                     	;# 
  1510  000C                     	;# 
  1511  000D                     	;# 
  1512  000E                     	;# 
  1513  0010                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0090                     	;# 
  1529  0091                     	;# 
  1530  0092                     	;# 
  1531  0095                     	;# 
  1532  0096                     	;# 
  1533  0097                     	;# 
  1534  0099                     	;# 
  1535  009A                     	;# 
  1536  009B                     	;# 
  1537  009B                     	;# 
  1538  009C                     	;# 
  1539  009D                     	;# 
  1540  009E                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0197                     	;# 
  1559  0199                     	;# 
  1560  019A                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019D                     	;# 
  1568  019E                     	;# 
  1569  019F                     	;# 
  1570  020D                     	;# 
  1571  0210                     	;# 
  1572  0211                     	;# 
  1573  0211                     	;# 
  1574  0212                     	;# 
  1575  0212                     	;# 
  1576  0213                     	;# 
  1577  0213                     	;# 
  1578  0214                     	;# 
  1579  0214                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0216                     	;# 
  1584  0216                     	;# 
  1585  0217                     	;# 
  1586  0217                     	;# 
  1587  0291                     	;# 
  1588  0291                     	;# 
  1589  0292                     	;# 
  1590  0293                     	;# 
  1591  0298                     	;# 
  1592  0298                     	;# 
  1593  0299                     	;# 
  1594  029A                     	;# 
  1595  0394                     	;# 
  1596  0395                     	;# 
  1597  0396                     	;# 
  1598  0FE4                     	;# 
  1599  0FE5                     	;# 
  1600  0FE6                     	;# 
  1601  0FE7                     	;# 
  1602  0FE8                     	;# 
  1603  0FE9                     	;# 
  1604  0FEA                     	;# 
  1605  0FEB                     	;# 
  1606  0FED                     	;# 
  1607  0FEE                     	;# 
  1608  0FEF                     	;# 
  1609  0000                     	;# 
  1610  0001                     	;# 
  1611  0002                     	;# 
  1612  0003                     	;# 
  1613  0004                     	;# 
  1614  0005                     	;# 
  1615  0006                     	;# 
  1616  0007                     	;# 
  1617  0008                     	;# 
  1618  0009                     	;# 
  1619  000A                     	;# 
  1620  000B                     	;# 
  1621  000C                     	;# 
  1622  000D                     	;# 
  1623  000E                     	;# 
  1624  0010                     	;# 
  1625  0011                     	;# 
  1626  0012                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  008C                     	;# 
  1637  008D                     	;# 
  1638  008E                     	;# 
  1639  0090                     	;# 
  1640  0091                     	;# 
  1641  0092                     	;# 
  1642  0095                     	;# 
  1643  0096                     	;# 
  1644  0097                     	;# 
  1645  0099                     	;# 
  1646  009A                     	;# 
  1647  009B                     	;# 
  1648  009B                     	;# 
  1649  009C                     	;# 
  1650  009D                     	;# 
  1651  009E                     	;# 
  1652  010C                     	;# 
  1653  010D                     	;# 
  1654  010E                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  011D                     	;# 
  1658  018C                     	;# 
  1659  018D                     	;# 
  1660  018E                     	;# 
  1661  0191                     	;# 
  1662  0191                     	;# 
  1663  0192                     	;# 
  1664  0193                     	;# 
  1665  0193                     	;# 
  1666  0194                     	;# 
  1667  0195                     	;# 
  1668  0196                     	;# 
  1669  0197                     	;# 
  1670  0199                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019C                     	;# 
  1677  019C                     	;# 
  1678  019D                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  020D                     	;# 
  1682  0210                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0216                     	;# 
  1695  0216                     	;# 
  1696  0217                     	;# 
  1697  0217                     	;# 
  1698  0291                     	;# 
  1699  0291                     	;# 
  1700  0292                     	;# 
  1701  0293                     	;# 
  1702  0298                     	;# 
  1703  0298                     	;# 
  1704  0299                     	;# 
  1705  029A                     	;# 
  1706  0394                     	;# 
  1707  0395                     	;# 
  1708  0396                     	;# 
  1709  0FE4                     	;# 
  1710  0FE5                     	;# 
  1711  0FE6                     	;# 
  1712  0FE7                     	;# 
  1713  0FE8                     	;# 
  1714  0FE9                     	;# 
  1715  0FEA                     	;# 
  1716  0FEB                     	;# 
  1717  0FED                     	;# 
  1718  0FEE                     	;# 
  1719  0FEF                     	;# 
  1720  0000                     	;# 
  1721  0001                     	;# 
  1722  0002                     	;# 
  1723  0003                     	;# 
  1724  0004                     	;# 
  1725  0005                     	;# 
  1726  0006                     	;# 
  1727  0007                     	;# 
  1728  0008                     	;# 
  1729  0009                     	;# 
  1730  000A                     	;# 
  1731  000B                     	;# 
  1732  000C                     	;# 
  1733  000D                     	;# 
  1734  000E                     	;# 
  1735  0010                     	;# 
  1736  0011                     	;# 
  1737  0012                     	;# 
  1738  0015                     	;# 
  1739  0016                     	;# 
  1740  0016                     	;# 
  1741  0017                     	;# 
  1742  0018                     	;# 
  1743  0019                     	;# 
  1744  001A                     	;# 
  1745  001B                     	;# 
  1746  001C                     	;# 
  1747  008C                     	;# 
  1748  008D                     	;# 
  1749  008E                     	;# 
  1750  0090                     	;# 
  1751  0091                     	;# 
  1752  0092                     	;# 
  1753  0095                     	;# 
  1754  0096                     	;# 
  1755  0097                     	;# 
  1756  0099                     	;# 
  1757  009A                     	;# 
  1758  009B                     	;# 
  1759  009B                     	;# 
  1760  009C                     	;# 
  1761  009D                     	;# 
  1762  009E                     	;# 
  1763  010C                     	;# 
  1764  010D                     	;# 
  1765  010E                     	;# 
  1766  0116                     	;# 
  1767  0117                     	;# 
  1768  011D                     	;# 
  1769  018C                     	;# 
  1770  018D                     	;# 
  1771  018E                     	;# 
  1772  0191                     	;# 
  1773  0191                     	;# 
  1774  0192                     	;# 
  1775  0193                     	;# 
  1776  0193                     	;# 
  1777  0194                     	;# 
  1778  0195                     	;# 
  1779  0196                     	;# 
  1780  0197                     	;# 
  1781  0199                     	;# 
  1782  019A                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019C                     	;# 
  1788  019C                     	;# 
  1789  019D                     	;# 
  1790  019E                     	;# 
  1791  019F                     	;# 
  1792  020D                     	;# 
  1793  0210                     	;# 
  1794  0211                     	;# 
  1795  0211                     	;# 
  1796  0212                     	;# 
  1797  0212                     	;# 
  1798  0213                     	;# 
  1799  0213                     	;# 
  1800  0214                     	;# 
  1801  0214                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0216                     	;# 
  1806  0216                     	;# 
  1807  0217                     	;# 
  1808  0217                     	;# 
  1809  0291                     	;# 
  1810  0291                     	;# 
  1811  0292                     	;# 
  1812  0293                     	;# 
  1813  0298                     	;# 
  1814  0298                     	;# 
  1815  0299                     	;# 
  1816  029A                     	;# 
  1817  0394                     	;# 
  1818  0395                     	;# 
  1819  0396                     	;# 
  1820  0FE4                     	;# 
  1821  0FE5                     	;# 
  1822  0FE6                     	;# 
  1823  0FE7                     	;# 
  1824  0FE8                     	;# 
  1825  0FE9                     	;# 
  1826  0FEA                     	;# 
  1827  0FEB                     	;# 
  1828  0FED                     	;# 
  1829  0FEE                     	;# 
  1830  0FEF                     	;# 
  1831  0000                     	;# 
  1832  0001                     	;# 
  1833  0002                     	;# 
  1834  0003                     	;# 
  1835  0004                     	;# 
  1836  0005                     	;# 
  1837  0006                     	;# 
  1838  0007                     	;# 
  1839  0008                     	;# 
  1840  0009                     	;# 
  1841  000A                     	;# 
  1842  000B                     	;# 
  1843  000C                     	;# 
  1844  000D                     	;# 
  1845  000E                     	;# 
  1846  0010                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0015                     	;# 
  1850  0016                     	;# 
  1851  0016                     	;# 
  1852  0017                     	;# 
  1853  0018                     	;# 
  1854  0019                     	;# 
  1855  001A                     	;# 
  1856  001B                     	;# 
  1857  001C                     	;# 
  1858  008C                     	;# 
  1859  008D                     	;# 
  1860  008E                     	;# 
  1861  0090                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0095                     	;# 
  1865  0096                     	;# 
  1866  0097                     	;# 
  1867  0099                     	;# 
  1868  009A                     	;# 
  1869  009B                     	;# 
  1870  009B                     	;# 
  1871  009C                     	;# 
  1872  009D                     	;# 
  1873  009E                     	;# 
  1874  010C                     	;# 
  1875  010D                     	;# 
  1876  010E                     	;# 
  1877  0116                     	;# 
  1878  0117                     	;# 
  1879  011D                     	;# 
  1880  018C                     	;# 
  1881  018D                     	;# 
  1882  018E                     	;# 
  1883  0191                     	;# 
  1884  0191                     	;# 
  1885  0192                     	;# 
  1886  0193                     	;# 
  1887  0193                     	;# 
  1888  0194                     	;# 
  1889  0195                     	;# 
  1890  0196                     	;# 
  1891  0197                     	;# 
  1892  0199                     	;# 
  1893  019A                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019C                     	;# 
  1899  019C                     	;# 
  1900  019D                     	;# 
  1901  019E                     	;# 
  1902  019F                     	;# 
  1903  020D                     	;# 
  1904  0210                     	;# 
  1905  0211                     	;# 
  1906  0211                     	;# 
  1907  0212                     	;# 
  1908  0212                     	;# 
  1909  0213                     	;# 
  1910  0213                     	;# 
  1911  0214                     	;# 
  1912  0214                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0216                     	;# 
  1917  0216                     	;# 
  1918  0217                     	;# 
  1919  0217                     	;# 
  1920  0291                     	;# 
  1921  0291                     	;# 
  1922  0292                     	;# 
  1923  0293                     	;# 
  1924  0298                     	;# 
  1925  0298                     	;# 
  1926  0299                     	;# 
  1927  029A                     	;# 
  1928  0394                     	;# 
  1929  0395                     	;# 
  1930  0396                     	;# 
  1931  0FE4                     	;# 
  1932  0FE5                     	;# 
  1933  0FE6                     	;# 
  1934  0FE7                     	;# 
  1935  0FE8                     	;# 
  1936  0FE9                     	;# 
  1937  0FEA                     	;# 
  1938  0FEB                     	;# 
  1939  0FED                     	;# 
  1940  0FEE                     	;# 
  1941  0FEF                     	;# 
  1942  0000                     	;# 
  1943  0001                     	;# 
  1944  0002                     	;# 
  1945  0003                     	;# 
  1946  0004                     	;# 
  1947  0005                     	;# 
  1948  0006                     	;# 
  1949  0007                     	;# 
  1950  0008                     	;# 
  1951  0009                     	;# 
  1952  000A                     	;# 
  1953  000B                     	;# 
  1954  000C                     	;# 
  1955  000D                     	;# 
  1956  000E                     	;# 
  1957  0010                     	;# 
  1958  0011                     	;# 
  1959  0012                     	;# 
  1960  0015                     	;# 
  1961  0016                     	;# 
  1962  0016                     	;# 
  1963  0017                     	;# 
  1964  0018                     	;# 
  1965  0019                     	;# 
  1966  001A                     	;# 
  1967  001B                     	;# 
  1968  001C                     	;# 
  1969  008C                     	;# 
  1970  008D                     	;# 
  1971  008E                     	;# 
  1972  0090                     	;# 
  1973  0091                     	;# 
  1974  0092                     	;# 
  1975  0095                     	;# 
  1976  0096                     	;# 
  1977  0097                     	;# 
  1978  0099                     	;# 
  1979  009A                     	;# 
  1980  009B                     	;# 
  1981  009B                     	;# 
  1982  009C                     	;# 
  1983  009D                     	;# 
  1984  009E                     	;# 
  1985  010C                     	;# 
  1986  010D                     	;# 
  1987  010E                     	;# 
  1988  0116                     	;# 
  1989  0117                     	;# 
  1990  011D                     	;# 
  1991  018C                     	;# 
  1992  018D                     	;# 
  1993  018E                     	;# 
  1994  0191                     	;# 
  1995  0191                     	;# 
  1996  0192                     	;# 
  1997  0193                     	;# 
  1998  0193                     	;# 
  1999  0194                     	;# 
  2000  0195                     	;# 
  2001  0196                     	;# 
  2002  0197                     	;# 
  2003  0199                     	;# 
  2004  019A                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019C                     	;# 
  2010  019C                     	;# 
  2011  019D                     	;# 
  2012  019E                     	;# 
  2013  019F                     	;# 
  2014  020D                     	;# 
  2015  0210                     	;# 
  2016  0211                     	;# 
  2017  0211                     	;# 
  2018  0212                     	;# 
  2019  0212                     	;# 
  2020  0213                     	;# 
  2021  0213                     	;# 
  2022  0214                     	;# 
  2023  0214                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0216                     	;# 
  2028  0216                     	;# 
  2029  0217                     	;# 
  2030  0217                     	;# 
  2031  0291                     	;# 
  2032  0291                     	;# 
  2033  0292                     	;# 
  2034  0293                     	;# 
  2035  0298                     	;# 
  2036  0298                     	;# 
  2037  0299                     	;# 
  2038  029A                     	;# 
  2039  0394                     	;# 
  2040  0395                     	;# 
  2041  0396                     	;# 
  2042  0FE4                     	;# 
  2043  0FE5                     	;# 
  2044  0FE6                     	;# 
  2045  0FE7                     	;# 
  2046  0FE8                     	;# 
  2047  0FE9                     	;# 
  2048  0FEA                     	;# 
  2049  0FEB                     	;# 
  2050  0FED                     	;# 
  2051  0FEE                     	;# 
  2052  0FEF                     	;# 
  2053  0000                     	;# 
  2054  0001                     	;# 
  2055  0002                     	;# 
  2056  0003                     	;# 
  2057  0004                     	;# 
  2058  0005                     	;# 
  2059  0006                     	;# 
  2060  0007                     	;# 
  2061  0008                     	;# 
  2062  0009                     	;# 
  2063  000A                     	;# 
  2064  000B                     	;# 
  2065  000C                     	;# 
  2066  000D                     	;# 
  2067  000E                     	;# 
  2068  0010                     	;# 
  2069  0011                     	;# 
  2070  0012                     	;# 
  2071  0015                     	;# 
  2072  0016                     	;# 
  2073  0016                     	;# 
  2074  0017                     	;# 
  2075  0018                     	;# 
  2076  0019                     	;# 
  2077  001A                     	;# 
  2078  001B                     	;# 
  2079  001C                     	;# 
  2080  008C                     	;# 
  2081  008D                     	;# 
  2082  008E                     	;# 
  2083  0090                     	;# 
  2084  0091                     	;# 
  2085  0092                     	;# 
  2086  0095                     	;# 
  2087  0096                     	;# 
  2088  0097                     	;# 
  2089  0099                     	;# 
  2090  009A                     	;# 
  2091  009B                     	;# 
  2092  009B                     	;# 
  2093  009C                     	;# 
  2094  009D                     	;# 
  2095  009E                     	;# 
  2096  010C                     	;# 
  2097  010D                     	;# 
  2098  010E                     	;# 
  2099  0116                     	;# 
  2100  0117                     	;# 
  2101  011D                     	;# 
  2102  018C                     	;# 
  2103  018D                     	;# 
  2104  018E                     	;# 
  2105  0191                     	;# 
  2106  0191                     	;# 
  2107  0192                     	;# 
  2108  0193                     	;# 
  2109  0193                     	;# 
  2110  0194                     	;# 
  2111  0195                     	;# 
  2112  0196                     	;# 
  2113  0197                     	;# 
  2114  0199                     	;# 
  2115  019A                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019C                     	;# 
  2121  019C                     	;# 
  2122  019D                     	;# 
  2123  019E                     	;# 
  2124  019F                     	;# 
  2125  020D                     	;# 
  2126  0210                     	;# 
  2127  0211                     	;# 
  2128  0211                     	;# 
  2129  0212                     	;# 
  2130  0212                     	;# 
  2131  0213                     	;# 
  2132  0213                     	;# 
  2133  0214                     	;# 
  2134  0214                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0216                     	;# 
  2139  0216                     	;# 
  2140  0217                     	;# 
  2141  0217                     	;# 
  2142  0291                     	;# 
  2143  0291                     	;# 
  2144  0292                     	;# 
  2145  0293                     	;# 
  2146  0298                     	;# 
  2147  0298                     	;# 
  2148  0299                     	;# 
  2149  029A                     	;# 
  2150  0394                     	;# 
  2151  0395                     	;# 
  2152  0396                     	;# 
  2153  0FE4                     	;# 
  2154  0FE5                     	;# 
  2155  0FE6                     	;# 
  2156  0FE7                     	;# 
  2157  0FE8                     	;# 
  2158  0FE9                     	;# 
  2159  0FEA                     	;# 
  2160  0FEB                     	;# 
  2161  0FED                     	;# 
  2162  0FEE                     	;# 
  2163  0FEF                     	;# 
  2164                           
  2165                           	psect	idataBANK4
  2166  102F                     __pidataBANK4:	
  2167                           
  2168                           ;initializer for __product
  2169  102F  3463               	retlw	99
  2170  1030  3402               	retlw	2
  2171  1031  3400               	retlw	0
  2172  1032  3400               	retlw	0
  2173  1033  3400               	retlw	0
  2174  1034  3400               	retlw	0
  2175  1035  3400               	retlw	0
  2176  1036  3400               	retlw	0
  2177  1037  3400               	retlw	0
  2178  1038  3400               	retlw	0
  2179  1039  3400               	retlw	0
  2180  103A  3400               	retlw	0
  2181  103B  34FF               	retlw	255
  2182  103C  34FF               	retlw	255
  2183  103D  34FF               	retlw	255
  2184  103E  3400               	retlw	0
  2185  103F  3400               	retlw	0
  2186  1040  3400               	retlw	0
  2187  1041  3400               	retlw	0
  2188  1042  3400               	retlw	0
  2189  1043  3400               	retlw	0
  2190  1044  3400               	retlw	0
  2191  1045  3400               	retlw	0
  2192  1046  3400               	retlw	0
  2193  1047  3400               	retlw	0
  2194  1048  3400               	retlw	0
  2195  1049  3400               	retlw	0
  2196  104A  3400               	retlw	0
  2197  104B  3400               	retlw	0
  2198  104C  3400               	retlw	0
  2199  104D  3400               	retlw	0
  2200  104E  3400               	retlw	0
  2201                           
  2202                           	psect	stringtext
  2203  1800                     __pstringtext:	
  2204  1800                     _CC2500_registers_address:	
  2205  1800  3403               	retlw	3
  2206  1801  3416               	retlw	22
  2207  1802  3417               	retlw	23
  2208  1803  341E               	retlw	30
  2209  1804  341F               	retlw	31
  2210  1805  3420               	retlw	32
  2211  1806  342A               	retlw	42
  2212  1807  342B               	retlw	43
  2213  1808  340B               	retlw	11
  2214  1809  340C               	retlw	12
  2215  180A  340D               	retlw	13
  2216  180B  340E               	retlw	14
  2217  180C  340F               	retlw	15
  2218  180D  3410               	retlw	16
  2219  180E  3411               	retlw	17
  2220  180F  3412               	retlw	18
  2221  1810  3413               	retlw	19
  2222  1811  3414               	retlw	20
  2223  1812  340A               	retlw	10
  2224  1813  3415               	retlw	21
  2225  1814  3421               	retlw	33
  2226  1815  3422               	retlw	34
  2227  1816  3418               	retlw	24
  2228  1817  3419               	retlw	25
  2229  1818  341A               	retlw	26
  2230  1819  341B               	retlw	27
  2231  181A  341C               	retlw	28
  2232  181B  341D               	retlw	29
  2233  181C  3423               	retlw	35
  2234  181D  3424               	retlw	36
  2235  181E  3425               	retlw	37
  2236  181F  3426               	retlw	38
  2237  1820  3429               	retlw	41
  2238  1821  342C               	retlw	44
  2239  1822  342D               	retlw	45
  2240  1823  342E               	retlw	46
  2241  1824  3400               	retlw	0
  2242  1825  3401               	retlw	1
  2243  1826  3402               	retlw	2
  2244  1827  3407               	retlw	7
  2245  1828  3408               	retlw	8
  2246  1829  3409               	retlw	9
  2247  182A  3406               	retlw	6
  2248  182B  3404               	retlw	4
  2249  182C  3405               	retlw	5
  2250  182D  3427               	retlw	39
  2251  182E  3428               	retlw	40
  2252  182F                     __end_of_CC2500_registers_address:	
  2253  182F                     _CC2500_rfSettings:	
  2254  182F  3407               	retlw	7
  2255  1830  3407               	retlw	7
  2256  1831  3430               	retlw	48
  2257  1832  3487               	retlw	135
  2258  1833  346B               	retlw	107
  2259  1834  34F8               	retlw	248
  2260  1835  347F               	retlw	127
  2261  1836  343F               	retlw	63
  2262  1837  3409               	retlw	9
  2263  1838  3400               	retlw	0
  2264  1839  345C               	retlw	92
  2265  183A  34A7               	retlw	167
  2266  183B  3462               	retlw	98
  2267  183C  3486               	retlw	134
  2268  183D  3483               	retlw	131
  2269  183E  3403               	retlw	3
  2270  183F  3422               	retlw	34
  2271  1840  34F8               	retlw	248
  2272  1841  3400               	retlw	0
  2273  1842  3444               	retlw	68
  2274  1843  34B6               	retlw	182
  2275  1844  3410               	retlw	16
  2276  1845  3418               	retlw	24
  2277  1846  341D               	retlw	29
  2278  1847  341C               	retlw	28
  2279  1848  34C7               	retlw	199
  2280  1849  3400               	retlw	0
  2281  184A  34B2               	retlw	178
  2282  184B  34EA               	retlw	234
  2283  184C  340A               	retlw	10
  2284  184D  3400               	retlw	0
  2285  184E  3411               	retlw	17
  2286  184F  3459               	retlw	89
  2287  1850  3488               	retlw	136
  2288  1851  3431               	retlw	49
  2289  1852  340B               	retlw	11
  2290  1853  342F               	retlw	47
  2291  1854  342E               	retlw	46
  2292  1855  3406               	retlw	6
  2293  1856  3404               	retlw	4
  2294  1857  3405               	retlw	5
  2295  1858  3400               	retlw	0
  2296  1859  3430               	retlw	48
  2297  185A  34D3               	retlw	211
  2298  185B  3491               	retlw	145
  2299  185C  3441               	retlw	65
  2300  185D  3400               	retlw	0
  2301  185E                     __end_of_CC2500_rfSettings:	
  2302  185E                     _CC2500_patable_vaule:	
  2303  185E  34FE               	retlw	254
  2304  185F  34FE               	retlw	254
  2305  1860  34FE               	retlw	254
  2306  1861  34FE               	retlw	254
  2307  1862  34FE               	retlw	254
  2308  1863  34FE               	retlw	254
  2309  1864  34FE               	retlw	254
  2310  1865  34FE               	retlw	254
  2311  1866                     __end_of_CC2500_patable_vaule:	
  2312                           
  2313                           	psect	nvBANK1
  2314  00E3                     __pnvBANK1:	
  2315  00E3                     _product:	
  2316  00E3                     	ds	1
  2317  000C                     _PORTA	set	12
  2318  000D                     _PORTB	set	13
  2319  000E                     _PORTC	set	14
  2320  0018                     _T1CON	set	24
  2321  0017                     _TMR1H	set	23
  2322  0016                     _TMR1L	set	22
  2323  005F                     _GIE	set	95
  2324  005B                     _IOCIE	set	91
  2325  0058                     _IOCIF	set	88
  2326  005E                     _PEIE	set	94
  2327  0060                     _RA0	set	96
  2328  0064                     _RA4	set	100
  2329  0066                     _RA6	set	102
  2330  0067                     _RA7	set	103
  2331  0068                     _RB0	set	104
  2332  0069                     _RB1	set	105
  2333  006A                     _RB2	set	106
  2334  006B                     _RB3	set	107
  2335  006D                     _RB5	set	109
  2336  0070                     _RC0	set	112
  2337  0071                     _RC1	set	113
  2338  0073                     _RC3	set	115
  2339  0074                     _RC4	set	116
  2340  0075                     _RC5	set	117
  2341  0088                     _TMR1IF	set	136
  2342  009D                     _ADCON0	set	157
  2343  009E                     _ADCON1	set	158
  2344  009C                     _ADRESH	set	156
  2345  009B                     _ADRESL	set	155
  2346  0099                     _OSCCON	set	153
  2347  008C                     _TRISA	set	140
  2348  008D                     _TRISB	set	141
  2349  008E                     _TRISC	set	142
  2350  0097                     _WDTCON	set	151
  2351  04E9                     _GO_nDONE	set	1257
  2352  0488                     _TMR1IE	set	1160
  2353  0117                     _FVRCON	set	279
  2354  010C                     _LATA	set	268
  2355  010D                     _LATB	set	269
  2356  010E                     _LATC	set	270
  2357  018C                     _ANSELA	set	396
  2358  018D                     _ANSELB	set	397
  2359  018E                     _ANSELC	set	398
  2360  0192                     _PMADRH	set	402
  2361  0191                     _PMADRL	set	401
  2362  0196                     _PMCON2	set	406
  2363  0194                     _PMDATH	set	404
  2364  0193                     _PMDATL	set	403
  2365  0CAE                     _CFGS	set	3246
  2366  0CAC                     _FREE	set	3244
  2367  0CAD                     _LWLO	set	3245
  2368  0CA8                     _RD	set	3240
  2369  0CA9                     _WR	set	3241
  2370  0CAA                     _WREN	set	3242
  2371  020D                     _WPUB	set	525
  2372  0396                     _IOCBF	set	918
  2373  0395                     _IOCBN	set	917
  2374  0394                     _IOCBP	set	916
  2375  1CB2                     _IOCBF2	set	7346
  2376                           
  2377                           ; #config settings
  2378  0000                     
  2379                           	psect	cinit
  2380  0021                     start_initialization:	
  2381  0021                     __initialization:	
  2382                           
  2383                           ; Clear objects allocated to BITCOMMON
  2384  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BITBANK1
  2387  0022  0021               	movlb	1	; select bank1
  2388  0023  01E4               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2389                           
  2390                           ; Clear objects allocated to BANK1
  2391  0024  30A0               	movlw	low __pbssBANK1
  2392  0025  0084               	movwf	4
  2393  0026  3000               	movlw	high __pbssBANK1
  2394  0027  0085               	movwf	5
  2395  0028  303B               	movlw	59
  2396  0029  319B  2391  3180   	fcall	clear_ram0
  2397                           
  2398                           ; Clear objects allocated to BANK2
  2399  002C  3020               	movlw	low __pbssBANK2
  2400  002D  0084               	movwf	4
  2401  002E  3001               	movlw	high __pbssBANK2
  2402  002F  0085               	movwf	5
  2403  0030  304F               	movlw	79
  2404  0031  319B  2391  3180   	fcall	clear_ram0
  2405                           
  2406                           ; Clear objects allocated to BANK3
  2407  0034  30A0               	movlw	low __pbssBANK3
  2408  0035  0084               	movwf	4
  2409  0036  3001               	movlw	high __pbssBANK3
  2410  0037  0085               	movwf	5
  2411  0038  302F               	movlw	47
  2412  0039  319B  2391  3180   	fcall	clear_ram0
  2413                           
  2414                           ; Clear objects allocated to BANK4
  2415  003C  3020               	movlw	low __pbssBANK4
  2416  003D  0084               	movwf	4
  2417  003E  3002               	movlw	high __pbssBANK4
  2418  003F  0085               	movwf	5
  2419  0040  3025               	movlw	37
  2420  0041  319B  2391  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Initialize objects allocated to BANK4
  2423  0044  302F               	movlw	low __pidataBANK4
  2424  0045  0084               	movwf	4
  2425  0046  3090               	movlw	(high __pidataBANK4)| (0+128)
  2426  0047  0085               	movwf	5
  2427  0048  3045               	movlw	low __pdataBANK4
  2428  0049  0086               	movwf	6
  2429  004A  3002               	movlw	high __pdataBANK4
  2430  004B  0087               	movwf	7
  2431  004C  3020               	movlw	32
  2432  004D  319B  238B         	fcall	init_ram
  2433  004F                     end_of_initialization:	
  2434                           ;End of C runtime variable initialization code
  2435                           
  2436  004F                     __end_of__initialization:	
  2437  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2438  0050  0020               	movlb	0
  2439  0051  3195  2DAA         	ljmp	_main	;jump to C main() function
  2440                           
  2441                           	psect	bitbssCOMMON
  2442  03E8                     __pbitbssCOMMON:	
  2443  03E8                     _Transceive_OK:	
  2444  03E8                     	ds	1
  2445                           
  2446                           	psect	bitbssBANK1
  2447  0720                     __pbitbssBANK1:	
  2448  0720                     _Receive_OK:	
  2449  0720                     	ds	1
  2450                           
  2451                           	psect	bssBANK1
  2452  00A0                     __pbssBANK1:	
  2453  00A0                     _RF1:	
  2454  00A0                     	ds	14
  2455  00AE                     _myMain:	
  2456  00AE                     	ds	13
  2457  00BB                     _DimmerIntr1:	
  2458  00BB                     	ds	12
  2459  00C7                     _CRC:	
  2460  00C7                     	ds	1
  2461  00C8                     _Cmd:	
  2462  00C8                     	ds	1
  2463  00C9                     _DelayOff:	
  2464  00C9                     	ds	1
  2465  00CA                     _DimmerLights:	
  2466  00CA                     	ds	1
  2467  00CB                     _LED:	
  2468  00CB                     	ds	1
  2469  00CC                     _Rx_Length:	
  2470  00CC                     	ds	1
  2471  00CD                     _SPI0Buffer:	
  2472  00CD                     	ds	1
  2473  00CE                     _Sw:	
  2474  00CE                     	ds	1
  2475  00CF                     _Tx_Length:	
  2476  00CF                     	ds	1
  2477  00D0                     _s_data:	
  2478  00D0                     	ds	1
  2479  00D1                     _Temp:	
  2480  00D1                     	ds	10
  2481                           
  2482                           	psect	bssBANK2
  2483  0120                     __pbssBANK2:	
  2484  0120                     _Buz1:	
  2485  0120                     	ds	12
  2486  012C                     _Dimmer:	
  2487  012C                     	ds	5
  2488  0131                     _Timer1:	
  2489  0131                     	ds	3
  2490  0134                     _RF_Count:	
  2491  0134                     	ds	2
  2492  0136                     _WDT:	
  2493  0136                     	ds	2
  2494  0138                     _DimmerIntr:	
  2495  0138                     	ds	1
  2496  0139                     _Light:	
  2497  0139                     	ds	1
  2498  013A                     _RSSI:	
  2499  013A                     	ds	1
  2500  013B                     _SwDetect:	
  2501  013B                     	ds	1
  2502  013C                     _r_address:	
  2503  013C                     	ds	1
  2504  013D                     _r_data:	
  2505  013D                     	ds	1
  2506  013E                     _Load:	
  2507  013E                     	ds	40
  2508  0166                     _DlySw1:	
  2509  0166                     	ds	5
  2510  016B                     _VarErrLED:	
  2511  016B                     	ds	4
  2512                           
  2513                           	psect	bssBANK3
  2514  01A0                     __pbssBANK3:	
  2515  01A0                     _RF_Data:	
  2516  01A0                     	ds	30
  2517  01BE                     _Sw1:	
  2518  01BE                     	ds	9
  2519  01C7                     _DimmerLights1:	
  2520  01C7                     	ds	8
  2521                           
  2522                           	psect	bssBANK4
  2523  0220                     __pbssBANK4:	
  2524  0220                     _Memory:	
  2525  0220                     	ds	37
  2526                           
  2527                           	psect	dataBANK4
  2528  0245                     __pdataBANK4:	
  2529  0245                     __product:	
  2530  0245                     	ds	32
  2531                           
  2532                           	psect	clrtext
  2533  1B91                     clear_ram0:	
  2534                           ;	Called with FSR0 containing the base address, and
  2535                           ;	WREG with the size to clear
  2536                           
  2537  1B91  0064               	clrwdt	;clear the watchdog before getting into this loop
  2538  1B92                     clrloop0:	
  2539  1B92  0180               	clrf	0	;clear RAM location pointed to by FSR
  2540  1B93  3101               	addfsr 0,1
  2541  1B94  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2542  1B95  2B92               	goto	clrloop0	;have we reached the end yet?
  2543  1B96  3400               	retlw	0	;all done for this memory range, return
  2544                           
  2545                           	psect	inittext
  2546  1B8B                     init_ram:	
  2547  1B8B  00FE               	movwf	126
  2548  1B8C                     initloop:	
  2549  1B8C  0012               	moviw fsr0++
  2550  1B8D  001E               	movwi fsr1++
  2551  1B8E  0BFE               	decfsz	126,f
  2552  1B8F  2B8C               	goto	initloop
  2553  1B90  3400               	retlw	0
  2554                           
  2555                           	psect	cstackBANK1
  2556  00DB                     __pcstackBANK1:	
  2557  00DB                     ??_getRxData:	
  2558  00DB                     setDimmerLights_OnOff@lights:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561                           
  2562                           ; 1 bytes @ 0x0
  2563  00DB                     	ds	1
  2564  00DC                     setDimmerLights_Main@lights:	
  2565  00DC                     getRxData@error:	
  2566                           ; 1 bytes @ 0x1
  2567                           
  2568                           
  2569                           ; 1 bytes @ 0x1
  2570  00DC                     	ds	1
  2571  00DD                     ??_setRF_Main:	
  2572                           
  2573                           ; 0 bytes @ 0x2
  2574  00DD                     	ds	1
  2575  00DE                     setRF_Main@error:	
  2576                           
  2577                           ; 1 bytes @ 0x3
  2578  00DE                     	ds	1
  2579  00DF                     ?_main:	
  2580  00DF                     main@argc:	
  2581                           ; 2 bytes @ 0x4
  2582                           
  2583                           
  2584                           ; 2 bytes @ 0x4
  2585  00DF                     	ds	2
  2586  00E1                     main@argv:	
  2587                           
  2588                           ; 2 bytes @ 0x6
  2589  00E1                     	ds	2
  2590                           
  2591                           	psect	cstackCOMMON
  2592  0070                     __pcstackCOMMON:	
  2593  0070                     ?_CC2500_WriteCommand:	
  2594  0070                     ?_RF_Timeout_Counter:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setRF_TimeoutCleared:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_WriteByte:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_ReadStatus:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_ReadByte:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_PowerRST:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_InitSetREG:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_InitPATable:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_ClearTXFIFO:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_ClearRXFIFO:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_FrequencyCabr:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_SIDLEMode:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_DlyOff_Initialization:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DlyOff_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setDimmerLights_SwOn:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_SwOff:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setMemory_Modify:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setDimmerLights_Initialization:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setDimmerLights_Main:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_Line:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setTxData:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_setRF_TransceiveGO:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setLED_Initialization:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_setLED_Main:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_Fosc_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_IO_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_TMR1_Set:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_ADC_Set:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_IOC_Set:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_WDT_Set:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_TMR1_ISR:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_IOC_ISR:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Timeout_Counter:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_set_TimeoutCleared:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Flash_Memory_Write:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Flash_Memory_Modify:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_WDT_Clearing:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_myMain_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Temp_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Load_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Switch_Initialization:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_RF_Initialization:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_getLoad_AD:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_getTemp_AD:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_my_MainTimer:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Temp_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_Load_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Switch_Main:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_RF_Main:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_Exception_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setLoad_AH_AL_Restore:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setTemp_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_setTemp_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_setRF_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setRF_Main:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_RF_RxDisable:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_getRxData:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setLog_Code:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setControl_Lights_Table:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setRFSW_Control:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setRFSW_AdjControl:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setSw_Initialization:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_setSw_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_Buzzer_Initialization:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_Buzzer_Main:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_CC2500_TxData:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_CC2500_RxData:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_CC2500_PowerOnInitial:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DelayOffPointSelect:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DelayOff_Initialization:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DelayOff_Main:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_DimmerIntr_Initialization:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_DimmerLights_SelectPointer:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_DimmerLights_Initialization:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_setDimmerLights_DimmingOn:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_DimmerLights_Main:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_DimmerLights_TMR_1:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ??_DimmerLights_TMR_1:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_DimmerLights_IOC_1:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_LedPointSelect:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_LED_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_LED_Main:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Mcu_Initialization:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_ISR:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_Flash_Memory_Initialization:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_Flash_Memory_Main:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_Flash_Memory_Unlock:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_Flash_Memory_Erasing:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_setMemory_LoopSave:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_WDT_Main:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_setRF_Learn:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_TouchPower:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_SwPointSelect:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_getDimmerLights_Status:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_getDimmerLights_ValueToPercent:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_getDimmerLights_PercentToValue:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getLoad_OK:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_getMain_All_Error_Status:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getMain_All_LightsStatus:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_getDimmerLights_Allow_Condition:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getCmd_Status:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_Flash_Memory_Read:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getAll_Sw_KeyStatus:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getRF_KeyStatus:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getSw_KeyStatus:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getDelayOff_GO:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getDimmerIntr_DimmingValue:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDimmerLights_Line:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getDimmer_LoadGO:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getDimmer_Load_Status:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getMain_Lights_Count:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?___lbdiv:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     setDimmerLights_Initialization@lights:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     getDimmerLights_Allow_Condition@lights:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     getSw_KeyStatus@sw:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ___lbdiv@divisor:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x0
  2947  0070                     	ds	1
  2948  0071                     ??_TMR1_ISR:	
  2949  0071                     ??___lbdiv:	
  2950                           ; 0 bytes @ 0x1
  2951                           
  2952                           
  2953                           ; 0 bytes @ 0x1
  2954  0071                     	ds	1
  2955  0072                     ___lbdiv@dividend:	
  2956                           
  2957                           ; 1 bytes @ 0x2
  2958  0072                     	ds	1
  2959  0073                     ___lbdiv@counter:	
  2960                           
  2961                           ; 1 bytes @ 0x3
  2962  0073                     	ds	1
  2963  0074                     ___lbdiv@quotient:	
  2964                           
  2965                           ; 1 bytes @ 0x4
  2966  0074                     	ds	1
  2967  0075                     ?_Division:	
  2968  0075                     Division@num:	
  2969                           ; 1 bytes @ 0x5
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x5
  2973  0075                     	ds	1
  2974  0076                     ??_Division:	
  2975                           
  2976                           ; 0 bytes @ 0x6
  2977  0076                     	ds	2
  2978  0078                     Division@value:	
  2979                           
  2980                           ; 1 bytes @ 0x8
  2981  0078                     	ds	1
  2982  0079                     Division@result:	
  2983                           
  2984                           ; 1 bytes @ 0x9
  2985  0079                     	ds	1
  2986  007A                     ??_DimmerLights_IOC_1:	
  2987                           
  2988                           ; 0 bytes @ 0xA
  2989  007A                     	ds	2
  2990  007C                     ??_IOC_ISR:	
  2991  007C                     ??_ISR:	
  2992                           ; 0 bytes @ 0xC
  2993                           
  2994                           
  2995                           ; 0 bytes @ 0xC
  2996  007C                     	ds	1
  2997                           
  2998                           	psect	cstackBANK0
  2999  0020                     __pcstackBANK0:	
  3000  0020                     ??_RF_Timeout_Counter:	
  3001  0020                     ??_setRF_TimeoutCleared:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ??_CC2500_WriteByte:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_CC2500_ReadByte:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ?_DelayTime_1us:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_setMemory_Modify:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_setDimmerLights_Initialization:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_getLoad_OK:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_getMain_All_Error_Status:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_getMain_All_LightsStatus:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_setDimmerLights_Line:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_getCmd_Status:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ?_setCmd_Status:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_setTxData:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_setRF_TransceiveGO:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_Fosc_Set:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_IO_Set:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_TMR1_Set:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_ADC_Set:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_IOC_Set:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_WDT_Set:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Timeout_Counter:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_set_TimeoutCleared:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_Flash_Memory_Read:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ?_setMemory_Data:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_Flash_Memory_Write:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_getAll_Sw_KeyStatus:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_WDT_Clearing:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_myMain_Initialization:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_Temp_Initialization:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_setLoad_AH_AL_Restore:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_setTemp_Initialization:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_setRF_Initialization:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_getRF_KeyStatus:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_getSw_KeyStatus:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_Buzzer_Initialization:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ??_Buzzer_Main:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_DelayOffPointSelect:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ?_setDimmerIntr_ControlStatus:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ??_getDimmerIntr_DimmingValue:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ?_setDimmerIntr_Dimming_RF:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_DimmerLights_SelectPointer:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_getDimmerLights_Line:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_getDimmer_LoadGO:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_getDimmer_Load_Status:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_LedPointSelect:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ??_Flash_Memory_Unlock:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_Flash_Memory_Erasing:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ??_setMemory_LoopSave:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ??_WDT_Main:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ??_getMain_Lights_Count:	
  3155                           ; 0 bytes @ 0x0
  3156                           
  3157  0020                     ??_setRF_Learn:	
  3158                           ; 0 bytes @ 0x0
  3159                           
  3160  0020                     ??_TouchPower:	
  3161                           ; 0 bytes @ 0x0
  3162                           
  3163  0020                     ??_SwPointSelect:	
  3164                           ; 0 bytes @ 0x0
  3165                           
  3166  0020                     ?___bmul:	
  3167                           ; 0 bytes @ 0x0
  3168                           
  3169  0020                     ?_getBuz_GO:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172  0020                     ?_getAD:	
  3173                           ; 2 bytes @ 0x0
  3174                           
  3175  0020                     ?___wmul:	
  3176                           ; 2 bytes @ 0x0
  3177                           
  3178  0020                     ?___awdiv:	
  3179                           ; 2 bytes @ 0x0
  3180                           
  3181  0020                     ?___lwdiv:	
  3182                           ; 2 bytes @ 0x0
  3183                           
  3184  0020                     ?___ftpack:	
  3185                           ; 2 bytes @ 0x0
  3186                           
  3187  0020                     setDimmerIntr_ControlStatus@command:	
  3188                           ; 3 bytes @ 0x0
  3189                           
  3190  0020                     setDimmerIntr_Dimming_Sw@command:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     setDimmerIntr_Dimming_RF@command:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0020                     setDimmerLights_Line@lights:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0020                     getDimmerLights_Line@line:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     getDimmer_LoadGO@loadgo:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     getDimmer_Load_Status@status:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0020                     getAD@adcon1:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0020                     setMemory_Data@data:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0020                     getMain_All_LightsStatus@status:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220  0020                     getMain_Lights_Count@count:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223  0020                     setCmd_Status@cmd:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226  0020                     getCmd_Status@number:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229  0020                     getLoad_OK@ok:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232  0020                     ___bmul@multiplicand:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235  0020                     DelayTime_1us@count:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238  0020                     ___wmul@multiplier:	
  3239                           ; 2 bytes @ 0x0
  3240                           
  3241  0020                     ___awdiv@divisor:	
  3242                           ; 2 bytes @ 0x0
  3243                           
  3244  0020                     ___lwdiv@divisor:	
  3245                           ; 2 bytes @ 0x0
  3246                           
  3247  0020                     ___ftpack@arg:	
  3248                           ; 2 bytes @ 0x0
  3249                           
  3250                           
  3251                           ; 3 bytes @ 0x0
  3252  0020                     	ds	1
  3253  0021                     ??_getDimmerLights_Allow_Condition:	
  3254  0021                     ??_setCmd_Status:	
  3255                           ; 0 bytes @ 0x1
  3256                           
  3257  0021                     ??_setMemory_Data:	
  3258                           ; 0 bytes @ 0x1
  3259                           
  3260  0021                     ??_RF_Initialization:	
  3261                           ; 0 bytes @ 0x1
  3262                           
  3263  0021                     ??_setDimmerIntr_ControlStatus:	
  3264                           ; 0 bytes @ 0x1
  3265                           
  3266  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3267                           ; 0 bytes @ 0x1
  3268                           
  3269  0021                     ??_setDimmerIntr_Dimming_RF:	
  3270                           ; 0 bytes @ 0x1
  3271                           
  3272  0021                     ??_Mcu_Initialization:	
  3273                           ; 0 bytes @ 0x1
  3274                           
  3275  0021                     ??___bmul:	
  3276                           ; 0 bytes @ 0x1
  3277                           
  3278  0021                     CC2500_WriteByte@loop_a:	
  3279                           ; 0 bytes @ 0x1
  3280                           
  3281  0021                     CC2500_ReadByte@loop_b:	
  3282                           ; 1 bytes @ 0x1
  3283                           
  3284  0021                     DelayOffPointSelect@sw:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     getDimmerIntr_DimmingValue@lights:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     DimmerLights_SelectPointer@lights:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293  0021                     LedPointSelect@led:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296  0021                     Flash_Memory_Read@i:	
  3297                           ; 1 bytes @ 0x1
  3298                           
  3299  0021                     Flash_Memory_Write@i:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302  0021                     setMemory_Modify@command:	
  3303                           ; 1 bytes @ 0x1
  3304                           
  3305  0021                     setMemory_LoopSave@command:	
  3306                           ; 1 bytes @ 0x1
  3307                           
  3308  0021                     getMain_Lights_Count@status1:	
  3309                           ; 1 bytes @ 0x1
  3310                           
  3311  0021                     getCmd_Status@cmd:	
  3312                           ; 1 bytes @ 0x1
  3313                           
  3314  0021                     setLoad_AH_AL_Restore@i:	
  3315                           ; 1 bytes @ 0x1
  3316                           
  3317  0021                     setRF_Learn@command:	
  3318                           ; 1 bytes @ 0x1
  3319                           
  3320  0021                     getRF_KeyStatus@key:	
  3321                           ; 1 bytes @ 0x1
  3322                           
  3323  0021                     setRF_TransceiveGO@command:	
  3324                           ; 1 bytes @ 0x1
  3325                           
  3326  0021                     SwPointSelect@sw:	
  3327                           ; 1 bytes @ 0x1
  3328                           
  3329  0021                     getSw_KeyStatus@status:	
  3330                           ; 1 bytes @ 0x1
  3331                           
  3332  0021                     getAll_Sw_KeyStatus@status:	
  3333                           ; 1 bytes @ 0x1
  3334                           
  3335  0021                     _getMain_All_Error_Status$3576:	
  3336                           ; 1 bytes @ 0x1
  3337                           
  3338                           
  3339                           ; 2 bytes @ 0x1
  3340  0021                     	ds	1
  3341  0022                     ??_CC2500_WriteCommand:	
  3342  0022                     ??_CC2500_ReadStatus:	
  3343                           ; 0 bytes @ 0x2
  3344                           
  3345  0022                     ??_DelayTime_1us:	
  3346                           ; 0 bytes @ 0x2
  3347                           
  3348  0022                     ?_CC2500_WriteREG:	
  3349                           ; 0 bytes @ 0x2
  3350                           
  3351  0022                     ??_DlyOff_Initialization:	
  3352                           ; 0 bytes @ 0x2
  3353                           
  3354  0022                     ??_getDimmerLights_Status:	
  3355                           ; 0 bytes @ 0x2
  3356                           
  3357  0022                     ??_setDimmerLights_SwOff:	
  3358                           ; 0 bytes @ 0x2
  3359                           
  3360  0022                     ?_setLED:	
  3361                           ; 0 bytes @ 0x2
  3362                           
  3363  0022                     ??_setLED_Main:	
  3364                           ; 0 bytes @ 0x2
  3365                           
  3366  0022                     ??_Load_Initialization:	
  3367                           ; 0 bytes @ 0x2
  3368                           
  3369  0022                     ??_getBuz_GO:	
  3370                           ; 0 bytes @ 0x2
  3371                           
  3372  0022                     ??_getDelayOff_GO:	
  3373                           ; 0 bytes @ 0x2
  3374                           
  3375  0022                     ??_setDimmerLights_DimmingOn:	
  3376                           ; 0 bytes @ 0x2
  3377                           
  3378  0022                     ?_setDimmerLights_DimmingRun:	
  3379                           ; 0 bytes @ 0x2
  3380                           
  3381  0022                     CC2500_WriteREG@value:	
  3382                           ; 0 bytes @ 0x2
  3383                           
  3384  0022                     DlyOff_Initialization@sw:	
  3385                           ; 1 bytes @ 0x2
  3386                           
  3387  0022                     getDelayOff_GO@sw:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0022                     setDimmerIntr_ControlStatus@lights:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0022                     getDimmerIntr_DimmingValue@value:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0022                     setDimmerIntr_Dimming_RF@lights:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0022                     setDimmerLights_SwOff@sw:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0022                     setDimmerLights_DimmingOn@sw:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0022                     getDimmerLights_Allow_Condition@allow:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0022                     getDimmerLights_Status@lights:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0022                     setDimmerLights_DimmingRun@command:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417  0022                     setLED@command:	
  3418                           ; 1 bytes @ 0x2
  3419                           
  3420  0022                     Flash_Memory_Read@address:	
  3421                           ; 1 bytes @ 0x2
  3422                           
  3423  0022                     setMemory_Data@address:	
  3424                           ; 1 bytes @ 0x2
  3425                           
  3426  0022                     setCmd_Status@number:	
  3427                           ; 1 bytes @ 0x2
  3428                           
  3429  0022                     _getRF_KeyStatus$5346:	
  3430                           ; 1 bytes @ 0x2
  3431                           
  3432  0022                     _getSw_KeyStatus$6384:	
  3433                           ; 1 bytes @ 0x2
  3434                           
  3435  0022                     _getAll_Sw_KeyStatus$6387:	
  3436                           ; 1 bytes @ 0x2
  3437                           
  3438  0022                     ___bmul@product:	
  3439                           ; 1 bytes @ 0x2
  3440                           
  3441  0022                     DelayTime_1us@i:	
  3442                           ; 1 bytes @ 0x2
  3443                           
  3444  0022                     ___wmul@multiplicand:	
  3445                           ; 2 bytes @ 0x2
  3446                           
  3447  0022                     ___awdiv@dividend:	
  3448                           ; 2 bytes @ 0x2
  3449                           
  3450  0022                     ___lwdiv@dividend:	
  3451                           ; 2 bytes @ 0x2
  3452                           
  3453                           
  3454                           ; 2 bytes @ 0x2
  3455  0022                     	ds	1
  3456  0023                     ??_CC2500_WriteREG:	
  3457  0023                     ??_setLED:	
  3458                           ; 0 bytes @ 0x3
  3459                           
  3460  0023                     ??_DelayOff_Initialization:	
  3461                           ; 0 bytes @ 0x3
  3462                           
  3463  0023                     ??_setDimmerLights_DimmingRun:	
  3464                           ; 0 bytes @ 0x3
  3465                           
  3466  0023                     ??_getAD:	
  3467                           ; 0 bytes @ 0x3
  3468                           
  3469  0023                     CC2500_WriteCommand@command:	
  3470                           ; 0 bytes @ 0x3
  3471                           
  3472  0023                     CC2500_ReadStatus@status_addr:	
  3473                           ; 1 bytes @ 0x3
  3474                           
  3475  0023                     getDelayOff_GO@go:	
  3476                           ; 1 bytes @ 0x3
  3477                           
  3478  0023                     _getDimmerLights_Allow_Condition$2255:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0023                     getDimmerLights_Status@status:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0023                     setLED@led:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487  0023                     getAD@adcon0:	
  3488                           ; 1 bytes @ 0x3
  3489                           
  3490  0023                     Flash_Memory_Read@ret:	
  3491                           ; 1 bytes @ 0x3
  3492                           
  3493  0023                     ___bmul@multiplier:	
  3494                           ; 1 bytes @ 0x3
  3495                           
  3496  0023                     ___ftpack@exp:	
  3497                           ; 1 bytes @ 0x3
  3498                           
  3499  0023                     _getMain_All_Error_Status$3577:	
  3500                           ; 1 bytes @ 0x3
  3501                           
  3502                           
  3503                           ; 2 bytes @ 0x3
  3504  0023                     	ds	1
  3505  0024                     ??_CC2500_ClearTXFIFO:	
  3506  0024                     ??_CC2500_ClearRXFIFO:	
  3507                           ; 0 bytes @ 0x4
  3508                           
  3509  0024                     ??_CC2500_SIDLEMode:	
  3510                           ; 0 bytes @ 0x4
  3511                           
  3512  0024                     ??_setLED_Initialization:	
  3513                           ; 0 bytes @ 0x4
  3514                           
  3515  0024                     ??_Flash_Memory_Modify:	
  3516                           ; 0 bytes @ 0x4
  3517                           
  3518  0024                     ??_getLoad_AD:	
  3519                           ; 0 bytes @ 0x4
  3520                           
  3521  0024                     ??_getTemp_AD:	
  3522                           ; 0 bytes @ 0x4
  3523                           
  3524  0024                     ??_RF_RxDisable:	
  3525                           ; 0 bytes @ 0x4
  3526                           
  3527  0024                     ??_setSw_Initialization:	
  3528                           ; 0 bytes @ 0x4
  3529                           
  3530  0024                     ??_CC2500_TxData:	
  3531                           ; 0 bytes @ 0x4
  3532                           
  3533  0024                     ??_CC2500_RxData:	
  3534                           ; 0 bytes @ 0x4
  3535                           
  3536  0024                     ??_Flash_Memory_Initialization:	
  3537                           ; 0 bytes @ 0x4
  3538                           
  3539  0024                     ??___wmul:	
  3540                           ; 0 bytes @ 0x4
  3541                           
  3542  0024                     ??___awdiv:	
  3543                           ; 0 bytes @ 0x4
  3544                           
  3545  0024                     ??___lwdiv:	
  3546                           ; 0 bytes @ 0x4
  3547                           
  3548  0024                     CC2500_WriteREG@w_addr:	
  3549                           ; 0 bytes @ 0x4
  3550                           
  3551  0024                     setDimmerLights_DimmingRun@lights:	
  3552                           ; 1 bytes @ 0x4
  3553                           
  3554  0024                     setLED_Initialization@led:	
  3555                           ; 1 bytes @ 0x4
  3556                           
  3557  0024                     setLED_Main@led:	
  3558                           ; 1 bytes @ 0x4
  3559                           
  3560  0024                     setSw_Initialization@sw:	
  3561                           ; 1 bytes @ 0x4
  3562                           
  3563  0024                     ___ftpack@sign:	
  3564                           ; 1 bytes @ 0x4
  3565                           
  3566  0024                     getBuz_GO@i:	
  3567                           ; 1 bytes @ 0x4
  3568                           
  3569  0024                     DelayTime_1us@j:	
  3570                           ; 2 bytes @ 0x4
  3571                           
  3572  0024                     ___wmul@product:	
  3573                           ; 2 bytes @ 0x4
  3574                           
  3575                           
  3576                           ; 2 bytes @ 0x4
  3577  0024                     	ds	1
  3578  0025                     ??_CC2500_InitSetREG:	
  3579  0025                     ??_CC2500_InitPATable:	
  3580                           ; 0 bytes @ 0x5
  3581                           
  3582  0025                     ??_Switch_Initialization:	
  3583                           ; 0 bytes @ 0x5
  3584                           
  3585  0025                     ??___ftpack:	
  3586                           ; 0 bytes @ 0x5
  3587                           
  3588  0025                     ??_LED_Initialization:	
  3589                           ; 0 bytes @ 0x5
  3590                           
  3591  0025                     ??_LED_Main:	
  3592                           ; 0 bytes @ 0x5
  3593                           
  3594  0025                     CC2500_TxData@loop_e:	
  3595                           ; 0 bytes @ 0x5
  3596                           
  3597  0025                     CC2500_RxData@loop_f:	
  3598                           ; 1 bytes @ 0x5
  3599                           
  3600  0025                     Flash_Memory_Initialization@value:	
  3601                           ; 1 bytes @ 0x5
  3602                           
  3603  0025                     Flash_Memory_Modify@i:	
  3604                           ; 1 bytes @ 0x5
  3605                           
  3606  0025                     getMain_All_Error_Status@command:	
  3607                           ; 1 bytes @ 0x5
  3608                           
  3609  0025                     getTemp_AD@channel:	
  3610                           ; 1 bytes @ 0x5
  3611                           
  3612  0025                     ___awdiv@counter:	
  3613                           ; 1 bytes @ 0x5
  3614                           
  3615  0025                     ___lwdiv@quotient:	
  3616                           ; 1 bytes @ 0x5
  3617                           
  3618                           
  3619                           ; 2 bytes @ 0x5
  3620  0025                     	ds	1
  3621  0026                     ??_CC2500_PowerRST:	
  3622  0026                     ??_CC2500_FrequencyCabr:	
  3623                           ; 0 bytes @ 0x6
  3624                           
  3625  0026                     ??_Flash_Memory_Main:	
  3626                           ; 0 bytes @ 0x6
  3627                           
  3628  0026                     CC2500_InitSetREG@temp1:	
  3629                           ; 0 bytes @ 0x6
  3630                           
  3631  0026                     CC2500_InitPATable@temp:	
  3632                           ; 1 bytes @ 0x6
  3633                           
  3634  0026                     getMain_All_Error_Status@status:	
  3635                           ; 1 bytes @ 0x6
  3636                           
  3637  0026                     getLoad_AD@channel:	
  3638                           ; 1 bytes @ 0x6
  3639                           
  3640  0026                     ___awdiv@sign:	
  3641                           ; 1 bytes @ 0x6
  3642                           
  3643  0026                     getTemp_AD@ADRES:	
  3644                           ; 1 bytes @ 0x6
  3645                           
  3646                           
  3647                           ; 2 bytes @ 0x6
  3648  0026                     	ds	1
  3649  0027                     CC2500_InitSetREG@temp2:	
  3650  0027                     CC2500_InitPATable@loop_d:	
  3651                           ; 1 bytes @ 0x7
  3652                           
  3653  0027                     Flash_Memory_Main@key_Status:	
  3654                           ; 1 bytes @ 0x7
  3655                           
  3656  0027                     getLoad_AD@k:	
  3657                           ; 1 bytes @ 0x7
  3658                           
  3659  0027                     ___lwdiv@counter:	
  3660                           ; 1 bytes @ 0x7
  3661                           
  3662  0027                     ___awdiv@quotient:	
  3663                           ; 1 bytes @ 0x7
  3664                           
  3665                           
  3666                           ; 2 bytes @ 0x7
  3667  0027                     	ds	1
  3668  0028                     ??_Load_Main:	
  3669  0028                     ?___awtoft:	
  3670                           ; 0 bytes @ 0x8
  3671                           
  3672  0028                     CC2500_InitSetREG@loop_c:	
  3673                           ; 3 bytes @ 0x8
  3674                           
  3675  0028                     _Flash_Memory_Main$3119:	
  3676                           ; 1 bytes @ 0x8
  3677                           
  3678  0028                     getLoad_AD@j:	
  3679                           ; 1 bytes @ 0x8
  3680                           
  3681  0028                     ___awtoft@c:	
  3682                           ; 1 bytes @ 0x8
  3683                           
  3684                           
  3685                           ; 2 bytes @ 0x8
  3686  0028                     	ds	1
  3687  0029                     ?_setBuz:	
  3688  0029                     ??_CC2500_PowerOnInitial:	
  3689                           ; 0 bytes @ 0x9
  3690                           
  3691  0029                     setBuz@time:	
  3692                           ; 0 bytes @ 0x9
  3693                           
  3694  0029                     getLoad_AD@ADRES:	
  3695                           ; 2 bytes @ 0x9
  3696                           
  3697                           
  3698                           ; 2 bytes @ 0x9
  3699  0029                     	ds	1
  3700  002A                     Load_Main@error:	
  3701                           
  3702                           ; 1 bytes @ 0xA
  3703  002A                     	ds	1
  3704  002B                     ??_setBuz:	
  3705  002B                     ??___awtoft:	
  3706                           ; 0 bytes @ 0xB
  3707                           
  3708  002B                     getLoad_AD@i:	
  3709                           ; 0 bytes @ 0xB
  3710                           
  3711  002B                     _Load_Main$3948:	
  3712                           ; 1 bytes @ 0xB
  3713                           
  3714                           
  3715                           ; 2 bytes @ 0xB
  3716  002B                     	ds	1
  3717  002C                     setBuz@count:	
  3718                           
  3719                           ; 1 bytes @ 0xC
  3720  002C                     	ds	1
  3721  002D                     ??_setDimmerLights_SwOn:	
  3722  002D                     ??_my_MainTimer:	
  3723                           ; 0 bytes @ 0xD
  3724                           
  3725  002D                     ??_Exception_Main:	
  3726                           ; 0 bytes @ 0xD
  3727                           
  3728  002D                     setDimmerLights_SwOn@sw:	
  3729                           ; 0 bytes @ 0xD
  3730                           
  3731  002D                     Load_Main@ErrorCountValue:	
  3732                           ; 1 bytes @ 0xD
  3733                           
  3734  002D                     ___awtoft@sign:	
  3735                           ; 1 bytes @ 0xD
  3736                           
  3737                           
  3738                           ; 1 bytes @ 0xD
  3739  002D                     	ds	1
  3740  002E                     ?___ftdiv:	
  3741  002E                     ?___ftmul:	
  3742                           ; 3 bytes @ 0xE
  3743                           
  3744  002E                     setDimmerLights_SwOn@idle:	
  3745                           ; 3 bytes @ 0xE
  3746                           
  3747  002E                     Exception_Main@status:	
  3748                           ; 1 bytes @ 0xE
  3749                           
  3750  002E                     Load_Main@Load_RunStatus:	
  3751                           ; 1 bytes @ 0xE
  3752                           
  3753  002E                     ___ftdiv@f2:	
  3754                           ; 1 bytes @ 0xE
  3755                           
  3756  002E                     ___ftmul@f1:	
  3757                           ; 3 bytes @ 0xE
  3758                           
  3759                           
  3760                           ; 3 bytes @ 0xE
  3761  002E                     	ds	1
  3762  002F                     ??_setSw_Main:	
  3763  002F                     Exception_Main@count:	
  3764                           ; 0 bytes @ 0xF
  3765                           
  3766  002F                     Load_Main@LightsCount:	
  3767                           ; 1 bytes @ 0xF
  3768                           
  3769                           
  3770                           ; 1 bytes @ 0xF
  3771  002F                     	ds	1
  3772  0030                     Exception_Main@error:	
  3773  0030                     Load_Main@i:	
  3774                           ; 1 bytes @ 0x10
  3775                           
  3776                           
  3777                           ; 2 bytes @ 0x10
  3778  0030                     	ds	1
  3779  0031                     setSw_Main@sw:	
  3780  0031                     Exception_Main@i:	
  3781                           ; 1 bytes @ 0x11
  3782                           
  3783  0031                     ___ftdiv@f1:	
  3784                           ; 2 bytes @ 0x11
  3785                           
  3786  0031                     ___ftmul@f2:	
  3787                           ; 3 bytes @ 0x11
  3788                           
  3789                           
  3790                           ; 3 bytes @ 0x11
  3791  0031                     	ds	1
  3792  0032                     ??_Switch_Main:	
  3793                           
  3794                           ; 0 bytes @ 0x12
  3795  0032                     	ds	1
  3796  0033                     Exception_Main@i_3588:	
  3797                           
  3798                           ; 2 bytes @ 0x13
  3799  0033                     	ds	1
  3800  0034                     ??___ftdiv:	
  3801  0034                     ??___ftmul:	
  3802                           ; 0 bytes @ 0x14
  3803                           
  3804                           
  3805                           ; 0 bytes @ 0x14
  3806  0034                     	ds	1
  3807  0035                     Exception_Main@lights:	
  3808                           
  3809                           ; 1 bytes @ 0x15
  3810  0035                     	ds	3
  3811  0038                     ___ftdiv@cntr:	
  3812  0038                     ___ftmul@exp:	
  3813                           ; 1 bytes @ 0x18
  3814                           
  3815                           
  3816                           ; 1 bytes @ 0x18
  3817  0038                     	ds	1
  3818  0039                     ___ftdiv@f3:	
  3819  0039                     ___ftmul@f3_as_product:	
  3820                           ; 3 bytes @ 0x19
  3821                           
  3822                           
  3823                           ; 3 bytes @ 0x19
  3824  0039                     	ds	3
  3825  003C                     ___ftdiv@exp:	
  3826  003C                     ___ftmul@cntr:	
  3827                           ; 1 bytes @ 0x1C
  3828                           
  3829                           
  3830                           ; 1 bytes @ 0x1C
  3831  003C                     	ds	1
  3832  003D                     ___ftdiv@sign:	
  3833  003D                     ___ftmul@sign:	
  3834                           ; 1 bytes @ 0x1D
  3835                           
  3836                           
  3837                           ; 1 bytes @ 0x1D
  3838  003D                     	ds	1
  3839  003E                     ?___ftneg:	
  3840  003E                     ___ftneg@f1:	
  3841                           ; 3 bytes @ 0x1E
  3842                           
  3843                           
  3844                           ; 3 bytes @ 0x1E
  3845  003E                     	ds	3
  3846  0041                     ??___ftneg:	
  3847  0041                     ?___ftadd:	
  3848                           ; 0 bytes @ 0x21
  3849                           
  3850  0041                     ___ftadd@f1:	
  3851                           ; 3 bytes @ 0x21
  3852                           
  3853                           
  3854                           ; 3 bytes @ 0x21
  3855  0041                     	ds	3
  3856  0044                     ___ftadd@f2:	
  3857                           
  3858                           ; 3 bytes @ 0x24
  3859  0044                     	ds	3
  3860  0047                     ??___ftadd:	
  3861                           
  3862                           ; 0 bytes @ 0x27
  3863  0047                     	ds	4
  3864  004B                     ___ftadd@sign:	
  3865                           
  3866                           ; 1 bytes @ 0x2B
  3867  004B                     	ds	1
  3868  004C                     ___ftadd@exp2:	
  3869                           
  3870                           ; 1 bytes @ 0x2C
  3871  004C                     	ds	1
  3872  004D                     ___ftadd@exp1:	
  3873                           
  3874                           ; 1 bytes @ 0x2D
  3875  004D                     	ds	1
  3876  004E                     ?___fttol:	
  3877  004E                     ___fttol@f1:	
  3878                           ; 4 bytes @ 0x2E
  3879                           
  3880                           
  3881                           ; 3 bytes @ 0x2E
  3882  004E                     	ds	4
  3883  0052                     ??___fttol:	
  3884                           
  3885                           ; 0 bytes @ 0x32
  3886  0052                     	ds	4
  3887  0056                     ___fttol@sign1:	
  3888                           
  3889                           ; 1 bytes @ 0x36
  3890  0056                     	ds	1
  3891  0057                     ___fttol@lval:	
  3892                           
  3893                           ; 4 bytes @ 0x37
  3894  0057                     	ds	4
  3895  005B                     ___fttol@exp1:	
  3896                           
  3897                           ; 1 bytes @ 0x3B
  3898  005B                     	ds	1
  3899  005C                     ??_getDimmerLights_ValueToPercent:	
  3900  005C                     ??_getDimmerLights_PercentToValue:	
  3901                           ; 0 bytes @ 0x3C
  3902                           
  3903                           
  3904                           ; 0 bytes @ 0x3C
  3905  005C                     	ds	2
  3906  005E                     getDimmerLights_PercentToValue@value:	
  3907  005E                     getDimmerLights_ValueToPercent@value:	
  3908                           ; 1 bytes @ 0x3E
  3909                           
  3910                           
  3911                           ; 1 bytes @ 0x3E
  3912  005E                     	ds	1
  3913  005F                     getDimmerLights_PercentToValue@i:	
  3914  005F                     getDimmerLights_ValueToPercent@i:	
  3915                           ; 3 bytes @ 0x3F
  3916                           
  3917                           
  3918                           ; 3 bytes @ 0x3F
  3919  005F                     	ds	3
  3920  0062                     ?_setProductData:	
  3921  0062                     ??_DimmerIntr_Initialization:	
  3922                           ; 0 bytes @ 0x42
  3923                           
  3924  0062                     ?_setDimmerIntr_DimmingValue:	
  3925                           ; 0 bytes @ 0x42
  3926                           
  3927  0062                     ?_setDimmerIntr_MaxmumValue:	
  3928                           ; 0 bytes @ 0x42
  3929                           
  3930  0062                     setDimmerIntr_DimmingValue@value:	
  3931                           ; 0 bytes @ 0x42
  3932                           
  3933  0062                     setDimmerIntr_MaxmumValue@value:	
  3934                           ; 1 bytes @ 0x42
  3935                           
  3936  0062                     setProductData@value:	
  3937                           ; 1 bytes @ 0x42
  3938                           
  3939                           
  3940                           ; 1 bytes @ 0x42
  3941  0062                     	ds	1
  3942  0063                     ??_setProductData:	
  3943  0063                     ??_setDimmerIntr_DimmingValue:	
  3944                           ; 0 bytes @ 0x43
  3945                           
  3946  0063                     ??_setDimmerIntr_MaxmumValue:	
  3947                           ; 0 bytes @ 0x43
  3948                           
  3949  0063                     ??_DimmerLights_Initialization:	
  3950                           ; 0 bytes @ 0x43
  3951                           
  3952                           
  3953                           ; 0 bytes @ 0x43
  3954  0063                     	ds	1
  3955  0064                     setDimmerIntr_DimmingValue@lights:	
  3956  0064                     setDimmerIntr_MaxmumValue@lights:	
  3957                           ; 1 bytes @ 0x44
  3958                           
  3959  0064                     setProductData@address:	
  3960                           ; 1 bytes @ 0x44
  3961                           
  3962                           
  3963                           ; 1 bytes @ 0x44
  3964  0064                     	ds	1
  3965  0065                     ??_DlyOff_Main:	
  3966  0065                     ?_setRF_DimmerLights:	
  3967                           ; 0 bytes @ 0x45
  3968                           
  3969  0065                     ??_setTemp_Main:	
  3970                           ; 0 bytes @ 0x45
  3971                           
  3972  0065                     ??_setLog_Code:	
  3973                           ; 0 bytes @ 0x45
  3974                           
  3975  0065                     ??_setRFSW_AdjControl:	
  3976                           ; 0 bytes @ 0x45
  3977                           
  3978  0065                     ?_setDelayOff_GO:	
  3979                           ; 0 bytes @ 0x45
  3980                           
  3981  0065                     setDelayOff_GO@command:	
  3982                           ; 0 bytes @ 0x45
  3983                           
  3984  0065                     setRF_DimmerLights@on:	
  3985                           ; 1 bytes @ 0x45
  3986                           
  3987                           
  3988                           ; 1 bytes @ 0x45
  3989  0065                     	ds	1
  3990  0066                     ??_setRF_DimmerLights:	
  3991  0066                     setDelayOff_GO@value:	
  3992                           ; 0 bytes @ 0x46
  3993                           
  3994  0066                     setTemp_Main@error:	
  3995                           ; 1 bytes @ 0x46
  3996                           
  3997                           
  3998                           ; 1 bytes @ 0x46
  3999  0066                     	ds	1
  4000  0067                     ??_setDelayOff_GO:	
  4001  0067                     DlyOff_Main@sw:	
  4002                           ; 0 bytes @ 0x47
  4003                           
  4004  0067                     setTemp_Main@TempGO:	
  4005                           ; 1 bytes @ 0x47
  4006                           
  4007  0067                     setRFSW_AdjControl@status:	
  4008                           ; 1 bytes @ 0x47
  4009                           
  4010                           
  4011                           ; 1 bytes @ 0x47
  4012  0067                     	ds	1
  4013  0068                     ??_DelayOff_Main:	
  4014  0068                     setRFSW_AdjControl@sw:	
  4015                           ; 0 bytes @ 0x48
  4016                           
  4017  0068                     setRF_DimmerLights@status:	
  4018                           ; 1 bytes @ 0x48
  4019                           
  4020  0068                     setTemp_Main@SafeValue:	
  4021                           ; 1 bytes @ 0x48
  4022                           
  4023                           
  4024                           ; 2 bytes @ 0x48
  4025  0068                     	ds	1
  4026  0069                     setDelayOff_GO@i:	
  4027  0069                     setRF_DimmerLights@lights:	
  4028                           ; 1 bytes @ 0x49
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x49
  4032  0069                     	ds	1
  4033  006A                     ?_setDimmerLights_Dimming:	
  4034  006A                     setDelayOff_GO@j:	
  4035                           ; 0 bytes @ 0x4A
  4036                           
  4037  006A                     setDimmerLights_Dimming@status:	
  4038                           ; 1 bytes @ 0x4A
  4039                           
  4040  006A                     setTemp_Main@DangerValue:	
  4041                           ; 1 bytes @ 0x4A
  4042                           
  4043                           
  4044                           ; 2 bytes @ 0x4A
  4045  006A                     	ds	1
  4046  006B                     ??_setDimmerLights_Dimming:	
  4047  006B                     setDelayOff_GO@k:	
  4048                           ; 0 bytes @ 0x4B
  4049                           
  4050                           
  4051                           ; 1 bytes @ 0x4B
  4052  006B                     	ds	1
  4053  006C                     setDelayOff_GO@sw:	
  4054  006C                     setDimmerLights_Dimming@value:	
  4055                           ; 1 bytes @ 0x4C
  4056                           
  4057  006C                     setTemp_Main@AD:	
  4058                           ; 1 bytes @ 0x4C
  4059                           
  4060                           
  4061                           ; 2 bytes @ 0x4C
  4062  006C                     	ds	1
  4063  006D                     ?_setDimmerLights_OnOff:	
  4064  006D                     ??_setRFSW_Control:	
  4065                           ; 0 bytes @ 0x4D
  4066                           
  4067  006D                     setDimmerLights_OnOff@command:	
  4068                           ; 0 bytes @ 0x4D
  4069                           
  4070  006D                     setDimmerLights_Dimming@lights:	
  4071                           ; 1 bytes @ 0x4D
  4072                           
  4073                           
  4074                           ; 1 bytes @ 0x4D
  4075  006D                     	ds	1
  4076  006E                     ??_setDimmerLights_OnOff:	
  4077  006E                     ??_Temp_Main:	
  4078                           ; 0 bytes @ 0x4E
  4079                           
  4080  006E                     setRFSW_Control@status:	
  4081                           ; 0 bytes @ 0x4E
  4082                           
  4083                           
  4084                           ; 1 bytes @ 0x4E
  4085  006E                     	ds	1
  4086  006F                     setRFSW_Control@sw:	
  4087                           
  4088                           ; 1 bytes @ 0x4F
  4089  006F                     	ds	1
  4090  0070                     ??_setDimmerLights_Main:	
  4091  0070                     ??_RF_Main:	
  4092                           ; 0 bytes @ 0x50
  4093                           
  4094  0070                     ??_setControl_Lights_Table:	
  4095                           ; 0 bytes @ 0x50
  4096                           
  4097  0070                     ??_DimmerLights_Main:	
  4098                           ; 0 bytes @ 0x50
  4099                           
  4100  0070                     ??_main:	
  4101                           ; 0 bytes @ 0x50
  4102                           
  4103                           
  4104                           	psect	maintext
  4105  15AA                     __pmaintext:	
  4106                           ; 0 bytes @ 0x50
  4107 ;;
  4108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4109 ;;
  4110 ;; *************** function _main *****************
  4111 ;; Defined at:
  4112 ;;		line 7 in file "../src/Main_B1.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  argc            2    4[BANK1 ] int 
  4115 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  2    4[BANK1 ] int 
  4120 ;; Registers used:
  4121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4122 ;; Tracked objects:
  4123 ;;		On entry : 17F/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4127 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;Total ram usage:        4 bytes
  4132 ;; Hardware stack levels required when called:   13
  4133 ;; This function calls:
  4134 ;;		_Buzzer_Initialization
  4135 ;;		_Buzzer_Main
  4136 ;;		_CC2500_PowerOnInitial
  4137 ;;		_DelayOff_Initialization
  4138 ;;		_DelayOff_Main
  4139 ;;		_DimmerLights_Initialization
  4140 ;;		_DimmerLights_Main
  4141 ;;		_Exception_Main
  4142 ;;		_Flash_Memory_Initialization
  4143 ;;		_Flash_Memory_Main
  4144 ;;		_LED_Initialization
  4145 ;;		_LED_Main
  4146 ;;		_Load_Initialization
  4147 ;;		_Load_Main
  4148 ;;		_Mcu_Initialization
  4149 ;;		_RF_Initialization
  4150 ;;		_RF_Main
  4151 ;;		_Switch_Initialization
  4152 ;;		_Switch_Main
  4153 ;;		_Temp_Initialization
  4154 ;;		_Temp_Main
  4155 ;;		_WDT_Main
  4156 ;;		_getLoad_AD
  4157 ;;		_getTemp_AD
  4158 ;;		_myMain_Initialization
  4159 ;;		_my_MainTimer
  4160 ;; This function is called by:
  4161 ;;		Startup code after reset
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           
  4166                           ;psect for function _main
  4167  15AA                     _main:	
  4168                           
  4169                           ;Main_B1.c: 8: myMain_Initialization();
  4170                           
  4171                           ;incstack = 0
  4172                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4173  15AA  319D  25DD  3195   	fcall	_myMain_Initialization
  4174                           
  4175                           ;Main_B1.c: 9: Mcu_Initialization();
  4176  15AD  319D  257F  3195   	fcall	_Mcu_Initialization
  4177                           
  4178                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4179  15B0  3186  2629  3195   	fcall	_Flash_Memory_Initialization
  4180                           
  4181                           ;Main_B1.c: 11: LED_Initialization();
  4182  15B3  319B  2360  3195   	fcall	_LED_Initialization
  4183                           
  4184                           ;Main_B1.c: 12: Buzzer_Initialization();
  4185  15B6  319B  2346  3195   	fcall	_Buzzer_Initialization
  4186                           
  4187                           ;Main_B1.c: 14: ;;
  4188                           ;Main_B1.c: 15: Temp_Initialization();
  4189  15B9  319B  2352  3195   	fcall	_Temp_Initialization
  4190                           
  4191                           ;Main_B1.c: 16: Load_Initialization();
  4192  15BC  319B  2349  3195   	fcall	_Load_Initialization
  4193                           
  4194                           ;Main_B1.c: 17: ;;
  4195                           ;Main_B1.c: 18: DelayOff_Initialization();
  4196  15BF  319B  2358  3195   	fcall	_DelayOff_Initialization
  4197                           
  4198                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4199  15C2  319B  2397  3195   	fcall	_DimmerLights_Initialization
  4200                           
  4201                           ;Main_B1.c: 21: ;;
  4202                           ;Main_B1.c: 22: ;;
  4203                           ;Main_B1.c: 23: ;;
  4204                           ;Main_B1.c: 24: Switch_Initialization();
  4205  15C5  319B  237C  3195   	fcall	_Switch_Initialization
  4206                           
  4207                           ;Main_B1.c: 25: RF_Initialization();
  4208  15C8  319B  234C  3195   	fcall	_RF_Initialization
  4209                           
  4210                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4211  15CB  319E  2619  3195   	fcall	_CC2500_PowerOnInitial
  4212  15CE                     l10334:	
  4213                           ;Main_B1.c: 27: ;;
  4214                           ;Main_B1.c: 28: ;;
  4215                           ;Main_B1.c: 30: while (1) {
  4216                           
  4217                           
  4218                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4219  15CE  0021               	movlb	1	; select bank1
  4220  15CF  1C2E               	btfss	_myMain^(0+128),0
  4221  15D0  2DD9               	goto	l10338
  4222                           
  4223                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4224  15D1  3005               	movlw	5
  4225  15D2  318A  22AC  3195   	fcall	_getLoad_AD
  4226                           
  4227                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4228  15D5  3009               	movlw	9
  4229  15D6  3191  2181  3195   	fcall	_getTemp_AD
  4230  15D9                     l10338:	
  4231                           
  4232                           ;Main_B1.c: 57: }
  4233                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4234  15D9  0022               	movlb	2	; select bank2
  4235  15DA  1C31               	btfss	_Timer1^(0+256),0
  4236  15DB  2DCE               	goto	l10334
  4237                           
  4238                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4239  15DC  1031               	bcf	_Timer1^(0+256),0
  4240                           
  4241                           ;Main_B1.c: 96: my_MainTimer();
  4242  15DD  3193  2369  3195   	fcall	_my_MainTimer
  4243                           
  4244                           ;Main_B1.c: 97: WDT_Main();
  4245  15E0  3188  2000  3195   	fcall	_WDT_Main
  4246                           
  4247                           ;Main_B1.c: 98: ;;
  4248                           ;Main_B1.c: 99: ;;
  4249                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4250  15E3  0021               	movlb	1	; select bank1
  4251  15E4  1C2E               	btfss	_myMain^(0+128),0
  4252  15E5  2DCE               	goto	l10334
  4253                           
  4254                           ;Main_B1.c: 101: Flash_Memory_Main();
  4255  15E6  3194  2422  3195   	fcall	_Flash_Memory_Main
  4256                           
  4257                           ;Main_B1.c: 103: LED_Main();
  4258  15E9  319B  2364  3195   	fcall	_LED_Main
  4259                           
  4260                           ;Main_B1.c: 104: Buzzer_Main();
  4261  15EC  3187  27B6  3195   	fcall	_Buzzer_Main
  4262                           
  4263                           ;Main_B1.c: 106: ;;
  4264                           ;Main_B1.c: 107: Temp_Main();
  4265  15EF  319B  2355  3195   	fcall	_Temp_Main
  4266                           
  4267                           ;Main_B1.c: 108: Load_Main();
  4268  15F2  3180  2053  3195   	fcall	_Load_Main
  4269                           
  4270                           ;Main_B1.c: 109: ;;
  4271                           ;Main_B1.c: 111: ;;
  4272                           ;Main_B1.c: 112: DimmerLights_Main();
  4273  15F5  319F  274F  3195   	fcall	_DimmerLights_Main
  4274                           
  4275                           ;Main_B1.c: 113: Switch_Main();
  4276  15F8  319B  23A5  3195   	fcall	_Switch_Main
  4277                           
  4278                           ;Main_B1.c: 114: ;;
  4279                           ;Main_B1.c: 115: ;;
  4280                           ;Main_B1.c: 117: RF_Main();
  4281  15FB  319B  234F  3195   	fcall	_RF_Main
  4282                           
  4283                           ;Main_B1.c: 118: DelayOff_Main();
  4284  15FE  319B  235C  3195   	fcall	_DelayOff_Main
  4285                           
  4286                           ;Main_B1.c: 119: ;;
  4287                           ;Main_B1.c: 120: ;;
  4288                           ;Main_B1.c: 121: Exception_Main();
  4289  1601  3185  2554  3195   	fcall	_Exception_Main
  4290  1604  2DCE               	goto	l10334
  4291  1605                     __end_of_main:	
  4292                           ;Main_B1.c: 128: }
  4293                           ;Main_B1.c: 129: }
  4294                           ;Main_B1.c: 163: }
  4295                           ;Main_B1.c: 164: return (0);
  4296                           ;	Return value of _main is never used
  4297                           
  4298                           
  4299                           	psect	text1
  4300  1369                     __ptext1:	
  4301 ;; *************** function _my_MainTimer *****************
  4302 ;; Defined at:
  4303 ;;		line 185 in file "../src/Main_B1.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;		None               void
  4310 ;; Registers used:
  4311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4320 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;Total ram usage:        1 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    7
  4324 ;; This function calls:
  4325 ;;		_setBuz
  4326 ;; This function is called by:
  4327 ;;		_main
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           
  4332                           ;psect for function _my_MainTimer
  4333  1369                     _my_MainTimer:	
  4334                           
  4335                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4336                           
  4337                           ;incstack = 0
  4338                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4339  1369  0021               	movlb	1	; select bank1
  4340  136A  182E               	btfsc	_myMain^(0+128),0
  4341  136B  2B83               	goto	l10024
  4342                           
  4343                           ;Main_B1.c: 188: myMain.PowerCount++;
  4344  136C  3001               	movlw	1
  4345  136D  0020               	movlb	0	; select bank0
  4346  136E  00AD               	movwf	??_my_MainTimer
  4347  136F  082D               	movf	??_my_MainTimer,w
  4348  1370  0021               	movlb	1	; select bank1
  4349  1371  07AF               	addwf	(_myMain^(0+128)+1),f
  4350                           
  4351                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4352  1372  082F               	movf	(_myMain^(0+128)+1),w
  4353  1373  3A4B               	xorlw	75
  4354  1374  1D03               	skipz
  4355  1375  0008               	return
  4356                           
  4357                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4358  1376  01AF               	clrf	(_myMain^(0+128)+1)
  4359                           
  4360                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4361  1377  142E               	bsf	_myMain^(0+128),0
  4362                           
  4363                           ;Main_B1.c: 196: setBuz(3, 50);
  4364  1378  3032               	movlw	50
  4365  1379  0020               	movlb	0	; select bank0
  4366  137A  00A9               	movwf	setBuz@time
  4367  137B  3000               	movlw	0
  4368  137C  00AA               	movwf	setBuz@time+1
  4369  137D  3003               	movlw	3
  4370  137E  3195  2551         	fcall	_setBuz
  4371                           
  4372                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4373  1380  0021               	movlb	1	; select bank1
  4374  1381  162E               	bsf	_myMain^(0+128),4
  4375                           
  4376                           ;Main_B1.c: 206: }
  4377                           ;Main_B1.c: 207: } else {
  4378  1382  0008               	return
  4379  1383                     l10024:	
  4380                           
  4381                           ;Main_B1.c: 208: myMain.PowerCount++;
  4382  1383  3001               	movlw	1
  4383  1384  0020               	movlb	0	; select bank0
  4384  1385  00AD               	movwf	??_my_MainTimer
  4385  1386  082D               	movf	??_my_MainTimer,w
  4386  1387  0021               	movlb	1	; select bank1
  4387  1388  07AF               	addwf	(_myMain^(0+128)+1),f
  4388                           
  4389                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4390  1389  082F               	movf	(_myMain^(0+128)+1),w
  4391  138A  3A32               	xorlw	50
  4392  138B  1903               	btfsc	3,2
  4393                           
  4394                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4395  138C  01AF               	clrf	(_myMain^(0+128)+1)
  4396                           
  4397                           ;Main_B1.c: 226: }
  4398                           ;Main_B1.c: 228: myMain.Count1++;
  4399  138D  3001               	movlw	1
  4400  138E  07B2               	addwf	(_myMain^(0+128)+4),f
  4401  138F  3000               	movlw	0
  4402  1390  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4403                           
  4404                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4405  1391  3004               	movlw	4
  4406  1392  3EAE               	addlw	_myMain& (0+255)
  4407  1393  0086               	movwf	6
  4408  1394  0187               	clrf	7
  4409  1395  3F40               	moviw [0]fsr1
  4410  1396  3A32               	xorlw	50
  4411  1397  1D03               	skipz
  4412  1398  2B9B               	goto	u11525
  4413  1399  3F41               	moviw [1]fsr1
  4414  139A  3A00               	xorlw	0
  4415  139B                     u11525:	
  4416  139B  1D03               	skipz
  4417  139C  0008               	return
  4418                           
  4419                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4420  139D  01B2               	clrf	(_myMain^(0+128)+4)
  4421  139E  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4422                           
  4423                           ;Main_B1.c: 242: if (myMain.Flag) {
  4424  139F  1CAE               	btfss	_myMain^(0+128),1
  4425  13A0  2BA3               	goto	l1444
  4426                           
  4427                           ;Main_B1.c: 243: myMain.Flag = 0;
  4428  13A1  10AE               	bcf	_myMain^(0+128),1
  4429                           
  4430                           ;Main_B1.c: 252: } else {
  4431  13A2  0008               	return
  4432  13A3                     l1444:	
  4433                           
  4434                           ;Main_B1.c: 253: myMain.Flag = 1;
  4435  13A3  14AE               	bsf	_myMain^(0+128),1
  4436  13A4  0008               	return
  4437  13A5                     __end_of_my_MainTimer:	
  4438                           
  4439                           	psect	text2
  4440  1DDD                     __ptext2:	
  4441 ;; *************** function _myMain_Initialization *****************
  4442 ;; Defined at:
  4443 ;;		line 170 in file "../src/Main_B1.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;		None               void
  4450 ;; Registers used:
  4451 ;;		wreg, fsr1l, fsr1h
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4459 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4460 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4461 ;;Total ram usage:        1 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    5
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_main
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           
  4472                           ;psect for function _myMain_Initialization
  4473  1DDD                     _myMain_Initialization:	
  4474                           
  4475                           ;Main_B1.c: 173: product = &_product;
  4476                           
  4477                           ;incstack = 0
  4478                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4479  1DDD  3045               	movlw	__product& (0+255)
  4480  1DDE  0020               	movlb	0	; select bank0
  4481  1DDF  00A0               	movwf	??_myMain_Initialization
  4482  1DE0  0820               	movf	??_myMain_Initialization,w
  4483  1DE1  0021               	movlb	1	; select bank1
  4484  1DE2  00E3               	movwf	_product^(0+128)
  4485                           
  4486                           ;Main_B1.c: 174: product->Data[20] = 209;
  4487  1DE3  30D1               	movlw	209
  4488  1DE4  0020               	movlb	0	; select bank0
  4489  1DE5  00A0               	movwf	??_myMain_Initialization
  4490  1DE6  0021               	movlb	1	; select bank1
  4491  1DE7  0863               	movf	_product^(0+128),w
  4492  1DE8  3E14               	addlw	20
  4493  1DE9  0086               	movwf	6
  4494  1DEA  3002               	movlw	2	; select bank4/5
  4495  1DEB  0087               	movwf	7
  4496  1DEC  0020               	movlb	0	; select bank0
  4497  1DED  0820               	movf	??_myMain_Initialization,w
  4498  1DEE  0081               	movwf	1
  4499  1DEF  0008               	return
  4500  1DF0                     __end_of_myMain_Initialization:	
  4501                           
  4502                           	psect	text3
  4503  1181                     __ptext3:	
  4504 ;; *************** function _getTemp_AD *****************
  4505 ;; Defined at:
  4506 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  channel         1    wreg     unsigned char 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  channel         1    5[BANK0 ] unsigned char 
  4511 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4512 ;; Return value:  Size  Location     Type
  4513 ;;		None               void
  4514 ;; Registers used:
  4515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;Total ram usage:        4 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; Hardware stack levels required when called:    7
  4528 ;; This function calls:
  4529 ;;		_getAD
  4530 ;; This function is called by:
  4531 ;;		_main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _getTemp_AD
  4537  1181                     _getTemp_AD:	
  4538                           
  4539                           ;incstack = 0
  4540                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4541                           ;getTemp_AD@channel stored from wreg
  4542  1181  0020               	movlb	0	; select bank0
  4543  1182  00A5               	movwf	getTemp_AD@channel
  4544                           
  4545                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4546  1183  01A6               	clrf	getTemp_AD@ADRES
  4547  1184  01A7               	clrf	getTemp_AD@ADRES+1
  4548                           
  4549                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4550  1185  0021               	movlb	1	; select bank1
  4551  1186  1D51               	btfss	_Temp^(0+128),2
  4552  1187  0008               	return
  4553                           
  4554                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4555  1188  30F0               	movlw	240
  4556  1189  0020               	movlb	0	; select bank0
  4557  118A  00A4               	movwf	??_getTemp_AD
  4558  118B  0824               	movf	??_getTemp_AD,w
  4559  118C  00A0               	movwf	getAD@adcon1
  4560  118D  0825               	movf	getTemp_AD@channel,w
  4561  118E  3190  200F  3191   	fcall	_getAD
  4562  1191  0020               	movlb	0	; select bank0
  4563  1192  0821               	movf	?_getAD+1,w
  4564  1193  01A7               	clrf	getTemp_AD@ADRES+1
  4565  1194  07A7               	addwf	getTemp_AD@ADRES+1,f
  4566  1195  0820               	movf	?_getAD,w
  4567  1196  01A6               	clrf	getTemp_AD@ADRES
  4568  1197  07A6               	addwf	getTemp_AD@ADRES,f
  4569                           
  4570                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4571  1198  0827               	movf	getTemp_AD@ADRES+1,w
  4572  1199  0426               	iorwf	getTemp_AD@ADRES,w
  4573  119A  1903               	skipnz
  4574  119B  0008               	return
  4575                           
  4576                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4577  119C  0827               	movf	getTemp_AD@ADRES+1,w
  4578  119D  0021               	movlb	1	; select bank1
  4579  119E  025A               	subwf	((_Temp+1)^(0+128)+8),w
  4580  119F  1D03               	skipz
  4581  11A0  29A5               	goto	u7995
  4582  11A1  0020               	movlb	0	; select bank0
  4583  11A2  0826               	movf	getTemp_AD@ADRES,w
  4584  11A3  0021               	movlb	1	; select bank1
  4585  11A4  0259               	subwf	(_Temp^(0+128)+8),w
  4586  11A5                     u7995:	
  4587  11A5  1803               	skipnc
  4588  11A6  0008               	return
  4589                           
  4590                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4591  11A7  0020               	movlb	0	; select bank0
  4592  11A8  0827               	movf	getTemp_AD@ADRES+1,w
  4593  11A9  0021               	movlb	1	; select bank1
  4594  11AA  01DA               	clrf	((_Temp+1)^(0+128)+8)
  4595  11AB  07DA               	addwf	((_Temp+1)^(0+128)+8),f
  4596  11AC  0020               	movlb	0	; select bank0
  4597  11AD  0826               	movf	getTemp_AD@ADRES,w
  4598  11AE  0021               	movlb	1	; select bank1
  4599  11AF  01D9               	clrf	(_Temp^(0+128)+8)
  4600  11B0  07D9               	addwf	(_Temp^(0+128)+8),f
  4601  11B1  0008               	return
  4602  11B2                     __end_of_getTemp_AD:	
  4603                           
  4604                           	psect	text4
  4605  0AAC                     __ptext4:	
  4606 ;; *************** function _getLoad_AD *****************
  4607 ;; Defined at:
  4608 ;;		line 15 in file "../src/OverLoad_B1.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  channel         1    wreg     unsigned char 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  channel         1    6[BANK0 ] unsigned char 
  4613 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4614 ;;  i               1   11[BANK0 ] unsigned char 
  4615 ;;  j               1    8[BANK0 ] unsigned char 
  4616 ;;  k               1    7[BANK0 ] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;		None               void
  4619 ;; Registers used:
  4620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4627 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4628 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4629 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4630 ;;Total ram usage:        8 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; Hardware stack levels required when called:    7
  4633 ;; This function calls:
  4634 ;;		_getAD
  4635 ;; This function is called by:
  4636 ;;		_main
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           
  4641                           ;psect for function _getLoad_AD
  4642  0AAC                     _getLoad_AD:	
  4643                           
  4644                           ;incstack = 0
  4645                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4646                           ;getLoad_AD@channel stored from wreg
  4647  0AAC  0020               	movlb	0	; select bank0
  4648  0AAD  00A6               	movwf	getLoad_AD@channel
  4649                           
  4650                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4651  0AAE  01AB               	clrf	getLoad_AD@i
  4652  0AAF  01A8               	clrf	getLoad_AD@j
  4653  0AB0  01A7               	clrf	getLoad_AD@k
  4654                           
  4655                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4656  0AB1  01A9               	clrf	getLoad_AD@ADRES
  4657  0AB2  01AA               	clrf	getLoad_AD@ADRES+1
  4658                           
  4659                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4660  0AB3  0022               	movlb	2	; select bank2
  4661  0AB4  1E3E               	btfss	_Load^(0+256),4
  4662  0AB5  0008               	return
  4663                           
  4664                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4665  0AB6  30F3               	movlw	243
  4666  0AB7  0020               	movlb	0	; select bank0
  4667  0AB8  00A4               	movwf	??_getLoad_AD
  4668  0AB9  0824               	movf	??_getLoad_AD,w
  4669  0ABA  00A0               	movwf	getAD@adcon1
  4670  0ABB  0826               	movf	getLoad_AD@channel,w
  4671  0ABC  3190  200F  318A   	fcall	_getAD
  4672  0ABF  0020               	movlb	0	; select bank0
  4673  0AC0  0821               	movf	?_getAD+1,w
  4674  0AC1  01AA               	clrf	getLoad_AD@ADRES+1
  4675  0AC2  07AA               	addwf	getLoad_AD@ADRES+1,f
  4676  0AC3  0820               	movf	?_getAD,w
  4677  0AC4  01A9               	clrf	getLoad_AD@ADRES
  4678  0AC5  07A9               	addwf	getLoad_AD@ADRES,f
  4679                           
  4680                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4681  0AC6  01AB               	clrf	getLoad_AD@i
  4682  0AC7  3004               	movlw	4
  4683  0AC8  022B               	subwf	getLoad_AD@i,w
  4684  0AC9  1803               	btfsc	3,0
  4685  0ACA  2AF2               	goto	l7832
  4686  0ACB                     l7820:	
  4687                           
  4688                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4689  0ACB  352B               	lslf	getLoad_AD@i,w
  4690  0ACC  3E49               	addlw	(_Load+11)& (0+255)
  4691  0ACD  0086               	movwf	6
  4692  0ACE  3001               	movlw	1	; select bank2/3
  4693  0ACF  0087               	movwf	7
  4694  0AD0  3F40               	moviw [0]fsr1
  4695  0AD1  00A4               	movwf	??_getLoad_AD
  4696  0AD2  3F41               	moviw [1]fsr1
  4697  0AD3  00A5               	movwf	??_getLoad_AD+1
  4698  0AD4  082A               	movf	getLoad_AD@ADRES+1,w
  4699  0AD5  0225               	subwf	??_getLoad_AD+1,w
  4700  0AD6  1D03               	skipz
  4701  0AD7  2ADA               	goto	u7895
  4702  0AD8  0829               	movf	getLoad_AD@ADRES,w
  4703  0AD9  0224               	subwf	??_getLoad_AD,w
  4704  0ADA                     u7895:	
  4705  0ADA  1803               	skipnc
  4706  0ADB  2AEA               	goto	l7828
  4707  0ADC  08A8               	movf	getLoad_AD@j,f
  4708  0ADD  1D03               	skipz
  4709  0ADE  2AEA               	goto	l7828
  4710                           
  4711                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4712  0ADF  352B               	lslf	getLoad_AD@i,w
  4713  0AE0  3E49               	addlw	(_Load+11)& (0+255)
  4714  0AE1  0086               	movwf	6
  4715  0AE2  3001               	movlw	1	; select bank2/3
  4716  0AE3  0087               	movwf	7
  4717  0AE4  0829               	movf	getLoad_AD@ADRES,w
  4718  0AE5  3FC0               	movwi [0]fsr1
  4719  0AE6  082A               	movf	getLoad_AD@ADRES+1,w
  4720  0AE7  3FC1               	movwi [1]fsr1
  4721                           
  4722                           ;OverLoad_B1.c: 24: j = 1;
  4723  0AE8  01A8               	clrf	getLoad_AD@j
  4724  0AE9  0AA8               	incf	getLoad_AD@j,f
  4725  0AEA                     l7828:	
  4726  0AEA  3001               	movlw	1
  4727  0AEB  00A4               	movwf	??_getLoad_AD
  4728  0AEC  0824               	movf	??_getLoad_AD,w
  4729  0AED  07AB               	addwf	getLoad_AD@i,f
  4730  0AEE  3004               	movlw	4
  4731  0AEF  022B               	subwf	getLoad_AD@i,w
  4732  0AF0  1C03               	skipc
  4733  0AF1  2ACB               	goto	l7820
  4734  0AF2                     l7832:	
  4735                           
  4736                           ;OverLoad_B1.c: 25: }
  4737                           ;OverLoad_B1.c: 26: }
  4738                           ;OverLoad_B1.c: 27: if (j == 0) {
  4739  0AF2  08A8               	movf	getLoad_AD@j,f
  4740  0AF3  1D03               	skipz
  4741  0AF4  0008               	return
  4742                           
  4743                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4744  0AF5  01AB               	clrf	getLoad_AD@i
  4745  0AF6                     L1:	
  4746  0AF6  3004               	movlw	4
  4747  0AF7  022B               	subwf	getLoad_AD@i,w
  4748  0AF8  1803               	btfsc	3,0
  4749  0AF9  0008               	return
  4750                           
  4751                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4752  0AFA  352B               	lslf	getLoad_AD@i,w
  4753  0AFB  3E53               	addlw	(_Load+21)& (0+255)
  4754  0AFC  0086               	movwf	6
  4755  0AFD  3001               	movlw	1	; select bank2/3
  4756  0AFE  0087               	movwf	7
  4757  0AFF  3F40               	moviw [0]fsr1
  4758  0B00  00A4               	movwf	??_getLoad_AD
  4759  0B01  3F41               	moviw [1]fsr1
  4760  0B02  00A5               	movwf	??_getLoad_AD+1
  4761  0B03  0825               	movf	??_getLoad_AD+1,w
  4762  0B04  022A               	subwf	getLoad_AD@ADRES+1,w
  4763  0B05  1D03               	skipz
  4764  0B06  2B09               	goto	u7945
  4765  0B07  0824               	movf	??_getLoad_AD,w
  4766  0B08  0229               	subwf	getLoad_AD@ADRES,w
  4767  0B09                     u7945:	
  4768  0B09  1803               	skipnc
  4769  0B0A  2B19               	goto	l7848
  4770  0B0B  08A7               	movf	getLoad_AD@k,f
  4771  0B0C  1D03               	skipz
  4772  0B0D  2B19               	goto	l7848
  4773                           
  4774                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4775  0B0E  352B               	lslf	getLoad_AD@i,w
  4776  0B0F  3E53               	addlw	(_Load+21)& (0+255)
  4777  0B10  0086               	movwf	6
  4778  0B11  3001               	movlw	1	; select bank2/3
  4779  0B12  0087               	movwf	7
  4780  0B13  0829               	movf	getLoad_AD@ADRES,w
  4781  0B14  3FC0               	movwi [0]fsr1
  4782  0B15  082A               	movf	getLoad_AD@ADRES+1,w
  4783  0B16  3FC1               	movwi [1]fsr1
  4784                           
  4785                           ;OverLoad_B1.c: 31: k = 1;
  4786  0B17  01A7               	clrf	getLoad_AD@k
  4787  0B18  0AA7               	incf	getLoad_AD@k,f
  4788  0B19                     l7848:	
  4789  0B19  3001               	movlw	1
  4790  0B1A  00A4               	movwf	??_getLoad_AD
  4791  0B1B  0824               	movf	??_getLoad_AD,w
  4792  0B1C  07AB               	addwf	getLoad_AD@i,f
  4793  0B1D  2AF6               	goto	L1
  4794  0B1E                     __end_of_getLoad_AD:	
  4795                           
  4796                           	psect	text5
  4797  100F                     __ptext5:	
  4798 ;; *************** function _getAD *****************
  4799 ;; Defined at:
  4800 ;;		line 461 in file "../src/MCU_B1.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;  adcon0          1    wreg     unsigned char 
  4803 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  2    0[BANK0 ] int 
  4808 ;; Registers used:
  4809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4815 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;Total ram usage:        4 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    6
  4822 ;; This function calls:
  4823 ;;		_Timeout_Counter
  4824 ;;		_set_TimeoutCleared
  4825 ;; This function is called by:
  4826 ;;		_getLoad_AD
  4827 ;;		_getTemp_AD
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830                           
  4831                           
  4832                           ;psect for function _getAD
  4833  100F                     _getAD:	
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4837                           ;getAD@adcon0 stored from wreg
  4838  100F  0020               	movlb	0	; select bank0
  4839  1010  00A3               	movwf	getAD@adcon0
  4840                           
  4841                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4842  1011  0823               	movf	getAD@adcon0,w
  4843  1012  0021               	movlb	1	; select bank1
  4844  1013  009D               	movwf	29	;volatile
  4845                           
  4846                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4847  1014  0020               	movlb	0	; select bank0
  4848  1015  0820               	movf	getAD@adcon1,w
  4849  1016  0021               	movlb	1	; select bank1
  4850  1017  009E               	movwf	30	;volatile
  4851                           
  4852                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4853  1018  149D               	bsf	29,1	;volatile
  4854                           
  4855                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4856  1019  281D               	goto	l7300
  4857  101A                     l7298:	
  4858                           
  4859                           ;MCU_B1.c: 466: Timeout_Counter();
  4860  101A  319E  262E  3190   	fcall	_Timeout_Counter
  4861  101D                     l7300:	
  4862  101D  0021               	movlb	1	; select bank1
  4863  101E  1C9D               	btfss	29,1	;volatile
  4864  101F  2822               	goto	l7304
  4865  1020  1D38               	btfss	(_myMain^(0+128)+10),2
  4866  1021  281A               	goto	l7298
  4867  1022                     l7304:	
  4868                           
  4869                           ;MCU_B1.c: 467: };
  4870                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4871  1022  319B  2380         	fcall	_set_TimeoutCleared
  4872                           
  4873                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4874  1024  0021               	movlb	1	; select bank1
  4875  1025  081C               	movf	28,w	;volatile
  4876  1026  0020               	movlb	0	; select bank0
  4877  1027  01A1               	clrf	?_getAD+1
  4878  1028  07A1               	addwf	?_getAD+1,f
  4879  1029  0021               	movlb	1	; select bank1
  4880  102A  081B               	movf	27,w	;volatile
  4881  102B  0020               	movlb	0	; select bank0
  4882  102C  01A0               	clrf	?_getAD
  4883  102D  07A0               	addwf	?_getAD,f
  4884  102E  0008               	return
  4885  102F                     __end_of_getAD:	
  4886                           
  4887                           	psect	text6
  4888  0800                     __ptext6:	
  4889 ;; *************** function _WDT_Main *****************
  4890 ;; Defined at:
  4891 ;;		line 1116 in file "../src/MCU_B1.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0, pclath, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;Total ram usage:        1 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    6
  4912 ;; This function calls:
  4913 ;;		_WDT_Clearing
  4914 ;; This function is called by:
  4915 ;;		_main
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function _WDT_Main
  4921  0800                     _WDT_Main:	
  4922                           
  4923                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4924                           
  4925                           ;incstack = 0
  4926                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4927  0800  0022               	movlb	2	; select bank2
  4928  0801  1C36               	btfss	_WDT^(0+256),0
  4929  0802  0008               	return
  4930                           
  4931                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  4932  0803  3001               	movlw	1
  4933  0804  02B7               	subwf	(_WDT^(0+256)+1),f
  4934  0805  0837               	movf	(_WDT^(0+256)+1),w
  4935  0806  3AFF               	xorlw	255
  4936  0807  1903               	skipnz
  4937  0808  0008               	return
  4938                           
  4939                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  4940  0809  3064               	movlw	100
  4941  080A  0020               	movlb	0	; select bank0
  4942  080B  00A0               	movwf	??_WDT_Main
  4943  080C  0820               	movf	??_WDT_Main,w
  4944  080D  0022               	movlb	2	; select bank2
  4945  080E  00B7               	movwf	(_WDT^(0+256)+1)
  4946                           
  4947                           ;MCU_B1.c: 1120: WDT_Clearing();
  4948  080F  3180  2002         	fcall	_WDT_Clearing
  4949  0811  0008               	return
  4950  0812                     __end_of_WDT_Main:	
  4951                           
  4952                           	psect	text7
  4953  0002                     __ptext7:	
  4954 ;; *************** function _WDT_Clearing *****************
  4955 ;; Defined at:
  4956 ;;		line 1126 in file "../src/MCU_B1.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;		None               void
  4963 ;; Registers used:
  4964 ;;		None
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;Total ram usage:        0 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    5
  4977 ;; This function calls:
  4978 ;;		Nothing
  4979 ;; This function is called by:
  4980 ;;		_WDT_Main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           
  4985                           ;psect for function _WDT_Clearing
  4986  0002                     _WDT_Clearing:	
  4987                           
  4988                           ;incstack = 0
  4989                           ; Regs used in _WDT_Clearing: []
  4990  0002  0064               	clrwdt	;# 
  4991  0003  0008               	return
  4992  0004                     __end_of_WDT_Clearing:	
  4993                           
  4994                           	psect	text8
  4995  1B55                     __ptext8:	
  4996 ;; *************** function _Temp_Main *****************
  4997 ;; Defined at:
  4998 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;		None
  5001 ;; Auto vars:     Size  Location     Type
  5002 ;;		None
  5003 ;; Return value:  Size  Location     Type
  5004 ;;		None               void
  5005 ;; Registers used:
  5006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5007 ;; Tracked objects:
  5008 ;;		On entry : 0/0
  5009 ;;		On exit  : 0/0
  5010 ;;		Unchanged: 0/0
  5011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;Total ram usage:        0 bytes
  5017 ;; Hardware stack levels used:    1
  5018 ;; Hardware stack levels required when called:    8
  5019 ;; This function calls:
  5020 ;;		_setTemp_Main
  5021 ;; This function is called by:
  5022 ;;		_main
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           
  5027                           ;psect for function _Temp_Main
  5028  1B55                     _Temp_Main:	
  5029                           
  5030                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5031                           
  5032                           ;incstack = 0
  5033                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5034  1B55  318D  25E0         	fcall	_setTemp_Main
  5035  1B57  0008               	return
  5036  1B58                     __end_of_Temp_Main:	
  5037                           
  5038                           	psect	text9
  5039  0DE0                     __ptext9:	
  5040 ;; *************** function _setTemp_Main *****************
  5041 ;; Defined at:
  5042 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;		None
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  AD              2   76[BANK0 ] unsigned int 
  5047 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5048 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5049 ;;  TempGO          1   71[BANK0 ] unsigned char 
  5050 ;;  error           1   70[BANK0 ] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;		None               void
  5053 ;; Registers used:
  5054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5061 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;Total ram usage:        9 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    7
  5067 ;; This function calls:
  5068 ;;		_getMain_All_Error_Status
  5069 ;;		_getMain_All_LightsStatus
  5070 ;;		_setBuz
  5071 ;;		_setProductData
  5072 ;; This function is called by:
  5073 ;;		_Temp_Main
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function _setTemp_Main
  5079  0DE0                     _setTemp_Main:	
  5080                           
  5081                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5082                           
  5083                           ;incstack = 0
  5084                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5085  0DE0  3000               	movlw	0
  5086  0DE1  3191  21B2  318D   	fcall	_getMain_All_Error_Status
  5087  0DE4  0020               	movlb	0	; select bank0
  5088  0DE5  00E5               	movwf	??_setTemp_Main
  5089  0DE6  0865               	movf	??_setTemp_Main,w
  5090  0DE7  00E6               	movwf	setTemp_Main@error
  5091                           
  5092                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5093  0DE8  01E8               	clrf	setTemp_Main@SafeValue
  5094  0DE9  01E9               	clrf	setTemp_Main@SafeValue+1
  5095  0DEA  01EA               	clrf	setTemp_Main@DangerValue
  5096  0DEB  01EB               	clrf	setTemp_Main@DangerValue+1
  5097                           
  5098                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5099  0DEC  319B  23DF  318D   	fcall	_getMain_All_LightsStatus
  5100  0DEF  0020               	movlb	0	; select bank0
  5101  0DF0  00E5               	movwf	??_setTemp_Main
  5102  0DF1  0865               	movf	??_setTemp_Main,w
  5103  0DF2  00E7               	movwf	setTemp_Main@TempGO
  5104                           
  5105                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5106  0DF3  0021               	movlb	1	; select bank1
  5107  0DF4  1C51               	btfss	_Temp^(0+128),0
  5108  0DF5  2E8D               	goto	l1783
  5109                           
  5110                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5111  0DF6  1951               	btfsc	_Temp^(0+128),2
  5112  0DF7  2E15               	goto	l9678
  5113                           
  5114                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5115  0DF8  0020               	movlb	0	; select bank0
  5116  0DF9  0867               	movf	setTemp_Main@TempGO,w
  5117  0DFA  3A01               	xorlw	1
  5118  0DFB  1D03               	skipz
  5119  0DFC  2E00               	goto	l1789
  5120  0DFD  0021               	movlb	1	; select bank1
  5121  0DFE  1CD1               	btfss	_Temp^(0+128),1
  5122  0DFF  2E03               	goto	l9670
  5123  0E00                     l1789:	
  5124  0E00  0021               	movlb	1	; select bank1
  5125  0E01  1CD1               	btfss	_Temp^(0+128),1
  5126  0E02  2E12               	goto	l9676
  5127  0E03                     l9670:	
  5128                           
  5129                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5130  0E03  3001               	movlw	1
  5131  0E04  07D2               	addwf	(_Temp^(0+128)+1),f
  5132  0E05  3000               	movlw	0
  5133  0E06  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5134                           
  5135                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5136  0E07  3000               	movlw	0
  5137  0E08  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5138  0E09  30FA               	movlw	250
  5139  0E0A  1903               	skipnz
  5140  0E0B  0252               	subwf	(_Temp^(0+128)+1),w
  5141  0E0C  1C03               	skipc
  5142  0E0D  0008               	return
  5143                           
  5144                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5145  0E0E  01D2               	clrf	(_Temp^(0+128)+1)
  5146  0E0F  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5147                           
  5148                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5149  0E10  1551               	bsf	_Temp^(0+128),2
  5150                           
  5151                           ;OverTemperature_B1.c: 83: }
  5152                           ;OverTemperature_B1.c: 84: } else {
  5153  0E11  0008               	return
  5154  0E12                     l9676:	
  5155                           
  5156                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5157  0E12  01D2               	clrf	(_Temp^(0+128)+1)
  5158  0E13  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5159                           
  5160                           ;OverTemperature_B1.c: 86: }
  5161                           ;OverTemperature_B1.c: 87: } else {
  5162  0E14  0008               	return
  5163  0E15                     l9678:	
  5164                           
  5165                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5166  0E15  3001               	movlw	1
  5167  0E16  07D2               	addwf	(_Temp^(0+128)+1),f
  5168  0E17  3000               	movlw	0
  5169  0E18  3DD3               	addwfc	((_Temp+1)^(0+128)+1),f
  5170                           
  5171                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5172  0E19  3000               	movlw	0
  5173  0E1A  0253               	subwf	((_Temp+1)^(0+128)+1),w
  5174  0E1B  3005               	movlw	5
  5175  0E1C  1903               	skipnz
  5176  0E1D  0252               	subwf	(_Temp^(0+128)+1),w
  5177  0E1E  1C03               	skipc
  5178  0E1F  0008               	return
  5179                           
  5180                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5181  0E20  01D2               	clrf	(_Temp^(0+128)+1)
  5182  0E21  01D3               	clrf	((_Temp+1)^(0+128)+1)
  5183                           
  5184                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5185  0E22  3008               	movlw	8
  5186  0E23  3ED1               	addlw	_Temp& (0+255)
  5187  0E24  0086               	movwf	6
  5188  0E25  0187               	clrf	7
  5189  0E26  0016               	moviw fsr1++
  5190  0E27  0401               	iorwf	1,w
  5191  0E28  1903               	skipnz
  5192  0E29  2E85               	goto	l1794
  5193                           
  5194                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5195  0E2A  1151               	bcf	_Temp^(0+128),2
  5196                           
  5197                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5198  0E2B  085A               	movf	((_Temp+1)^(0+128)+8),w
  5199  0E2C  0020               	movlb	0	; select bank0
  5200  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5201  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5202  0E2F  0021               	movlb	1	; select bank1
  5203  0E30  0859               	movf	(_Temp^(0+128)+8),w
  5204  0E31  0020               	movlb	0	; select bank0
  5205  0E32  01EC               	clrf	setTemp_Main@AD
  5206  0E33  07EC               	addwf	setTemp_Main@AD,f
  5207                           
  5208                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5209  0E34  3090               	movlw	144
  5210  0E35  00E8               	movwf	setTemp_Main@SafeValue
  5211  0E36  3001               	movlw	1
  5212  0E37  00E9               	movwf	setTemp_Main@SafeValue+1
  5213                           
  5214                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5215  0E38  3059               	movlw	89
  5216  0E39  00EA               	movwf	setTemp_Main@DangerValue
  5217  0E3A  3001               	movlw	1
  5218  0E3B  00EB               	movwf	setTemp_Main@DangerValue+1
  5219                           
  5220                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5221  0E3C  0021               	movlb	1	; select bank1
  5222  0E3D  1CD1               	btfss	_Temp^(0+128),1
  5223  0E3E  2E5D               	goto	l9708
  5224                           
  5225                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5226  0E3F  0020               	movlb	0	; select bank0
  5227  0E40  0869               	movf	setTemp_Main@SafeValue+1,w
  5228  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5229  0E42  1D03               	skipz
  5230  0E43  2E46               	goto	u10945
  5231  0E44  0868               	movf	setTemp_Main@SafeValue,w
  5232  0E45  026C               	subwf	setTemp_Main@AD,w
  5233  0E46                     u10945:	
  5234  0E46  1C03               	skipc
  5235  0E47  2E72               	goto	l9718
  5236                           
  5237                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5238  0E48  3001               	movlw	1
  5239  0E49  00E5               	movwf	??_setTemp_Main
  5240  0E4A  0865               	movf	??_setTemp_Main,w
  5241  0E4B  0021               	movlb	1	; select bank1
  5242  0E4C  07D4               	addwf	(_Temp^(0+128)+3),f
  5243                           
  5244                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5245  0E4D  3003               	movlw	3
  5246  0E4E  0254               	subwf	(_Temp^(0+128)+3),w
  5247  0E4F  1C03               	skipc
  5248  0E50  2E74               	goto	l9720
  5249                           
  5250                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5251  0E51  01D4               	clrf	(_Temp^(0+128)+3)
  5252                           
  5253                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5254  0E52  10D1               	bcf	_Temp^(0+128),1
  5255                           
  5256                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5257  0E53  3064               	movlw	100
  5258  0E54  0020               	movlb	0	; select bank0
  5259  0E55  00A9               	movwf	setBuz@time
  5260  0E56  3000               	movlw	0
  5261  0E57  00AA               	movwf	setBuz@time+1
  5262  0E58  3002               	movlw	2
  5263  0E59  3195  2551  318D   	fcall	_setBuz
  5264                           
  5265                           ;OverTemperature_B1.c: 126: }
  5266                           ;OverTemperature_B1.c: 127: } else {
  5267  0E5C  2E74               	goto	l9720
  5268  0E5D                     l9708:	
  5269                           ;OverTemperature_B1.c: 129: }
  5270                           ;OverTemperature_B1.c: 130: } else {
  5271                           
  5272                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5273                           
  5274                           
  5275                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5276  0E5D  0020               	movlb	0	; select bank0
  5277  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5278  0E5F  026B               	subwf	setTemp_Main@DangerValue+1,w
  5279  0E60  1D03               	skipz
  5280  0E61  2E64               	goto	u10965
  5281  0E62  086C               	movf	setTemp_Main@AD,w
  5282  0E63  026A               	subwf	setTemp_Main@DangerValue,w
  5283  0E64                     u10965:	
  5284  0E64  1C03               	skipc
  5285  0E65  2E72               	goto	l9718
  5286                           
  5287                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5288  0E66  3001               	movlw	1
  5289  0E67  00E5               	movwf	??_setTemp_Main
  5290  0E68  0865               	movf	??_setTemp_Main,w
  5291  0E69  0021               	movlb	1	; select bank1
  5292  0E6A  07D4               	addwf	(_Temp^(0+128)+3),f
  5293                           
  5294                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5295  0E6B  3003               	movlw	3
  5296  0E6C  0254               	subwf	(_Temp^(0+128)+3),w
  5297  0E6D  1C03               	skipc
  5298  0E6E  2E74               	goto	l9720
  5299                           
  5300                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5301  0E6F  01D4               	clrf	(_Temp^(0+128)+3)
  5302                           
  5303                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5304  0E70  14D1               	bsf	_Temp^(0+128),1
  5305                           
  5306                           ;OverTemperature_B1.c: 136: }
  5307                           ;OverTemperature_B1.c: 137: } else {
  5308  0E71  2E74               	goto	l9720
  5309  0E72                     l9718:	
  5310                           
  5311                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5312  0E72  0021               	movlb	1	; select bank1
  5313  0E73  01D4               	clrf	(_Temp^(0+128)+3)
  5314  0E74                     l9720:	
  5315                           
  5316                           ;OverTemperature_B1.c: 139: }
  5317                           ;OverTemperature_B1.c: 140: }
  5318                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5319  0E74  0020               	movlb	0	; select bank0
  5320  0E75  086D               	movf	setTemp_Main@AD+1,w
  5321  0E76  00E5               	movwf	??_setTemp_Main
  5322  0E77  0865               	movf	??_setTemp_Main,w
  5323  0E78  00E2               	movwf	setProductData@value
  5324  0E79  3018               	movlw	24
  5325  0E7A  319C  242D  318D   	fcall	_setProductData
  5326                           
  5327                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5328  0E7D  0020               	movlb	0	; select bank0
  5329  0E7E  086C               	movf	setTemp_Main@AD,w
  5330  0E7F  00E5               	movwf	??_setTemp_Main
  5331  0E80  0865               	movf	??_setTemp_Main,w
  5332  0E81  00E2               	movwf	setProductData@value
  5333  0E82  3019               	movlw	25
  5334  0E83  319C  242D         	fcall	_setProductData
  5335  0E85                     l1794:	
  5336                           
  5337                           ;OverTemperature_B1.c: 158: }
  5338                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5339  0E85  0021               	movlb	1	; select bank1
  5340  0E86  01D5               	clrf	(_Temp^(0+128)+4)
  5341  0E87  01D6               	clrf	((_Temp+1)^(0+128)+4)
  5342                           
  5343                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5344  0E88  01D7               	clrf	(_Temp^(0+128)+6)
  5345  0E89  01D8               	clrf	((_Temp+1)^(0+128)+6)
  5346                           
  5347                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5348  0E8A  01D9               	clrf	(_Temp^(0+128)+8)
  5349  0E8B  01DA               	clrf	((_Temp+1)^(0+128)+8)
  5350                           
  5351                           ;OverTemperature_B1.c: 162: }
  5352                           ;OverTemperature_B1.c: 163: }
  5353                           ;OverTemperature_B1.c: 166: } else {
  5354  0E8C  0008               	return
  5355  0E8D                     l1783:	
  5356                           
  5357                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5358  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5359  0E8E  0008               	return
  5360                           
  5361                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5362  0E8F  1451               	bsf	_Temp^(0+128),0
  5363  0E90  0008               	return
  5364  0E91                     __end_of_setTemp_Main:	
  5365                           
  5366                           	psect	text10
  5367  1B52                     __ptext10:	
  5368 ;; *************** function _Temp_Initialization *****************
  5369 ;; Defined at:
  5370 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;		None
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;		None
  5375 ;; Return value:  Size  Location     Type
  5376 ;;		None               void
  5377 ;; Registers used:
  5378 ;;		status,2, status,0, pclath, cstack
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5388 ;;Total ram usage:        0 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:    6
  5391 ;; This function calls:
  5392 ;;		_setTemp_Initialization
  5393 ;; This function is called by:
  5394 ;;		_main
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           
  5399                           ;psect for function _Temp_Initialization
  5400  1B52                     _Temp_Initialization:	
  5401                           
  5402                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5403                           
  5404                           ;incstack = 0
  5405                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5406  1B52  319B  2345         	fcall	_setTemp_Initialization
  5407  1B54  0008               	return
  5408  1B55                     __end_of_Temp_Initialization:	
  5409                           
  5410                           	psect	text11
  5411  1B45                     __ptext11:	
  5412 ;; *************** function _setTemp_Initialization *****************
  5413 ;; Defined at:
  5414 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;		None
  5419 ;; Return value:  Size  Location     Type
  5420 ;;		None               void
  5421 ;; Registers used:
  5422 ;;		None
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5432 ;;Total ram usage:        0 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:    5
  5435 ;; This function calls:
  5436 ;;		Nothing
  5437 ;; This function is called by:
  5438 ;;		_Temp_Initialization
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           
  5443                           ;psect for function _setTemp_Initialization
  5444  1B45                     _setTemp_Initialization:	
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in _setTemp_Initialization: []
  5448  1B45  0008               	return
  5449  1B46                     __end_of_setTemp_Initialization:	
  5450                           
  5451                           	psect	text12
  5452  1BA5                     __ptext12:	
  5453 ;; *************** function _Switch_Main *****************
  5454 ;; Defined at:
  5455 ;;		line 76 in file "../src/Switch_B1.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;		None
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;		None
  5460 ;; Return value:  Size  Location     Type
  5461 ;;		None               void
  5462 ;; Registers used:
  5463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5473 ;;Total ram usage:        0 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; Hardware stack levels required when called:    9
  5476 ;; This function calls:
  5477 ;;		_TouchPower
  5478 ;;		_setSw_Main
  5479 ;; This function is called by:
  5480 ;;		_main
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function _Switch_Main
  5486  1BA5                     _Switch_Main:	
  5487                           
  5488                           ;Switch_B1.c: 79: setSw_Main(1);
  5489                           
  5490                           ;incstack = 0
  5491                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5492  1BA5  3001               	movlw	1
  5493  1BA6  3182  2205  319B   	fcall	_setSw_Main
  5494                           
  5495                           ;Switch_B1.c: 91: TouchPower();
  5496  1BA9  319E  2643         	fcall	_TouchPower
  5497  1BAB  0008               	return
  5498  1BAC                     __end_of_Switch_Main:	
  5499                           
  5500                           	psect	text13
  5501  0205                     __ptext13:	
  5502 ;; *************** function _setSw_Main *****************
  5503 ;; Defined at:
  5504 ;;		line 117 in file "../src/Switch_B1.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  sw              1    wreg     unsigned char 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  sw              1   17[BANK0 ] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;		None               void
  5511 ;; Registers used:
  5512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;Total ram usage:        3 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    8
  5525 ;; This function calls:
  5526 ;;		_SwPointSelect
  5527 ;;		_getMain_All_Error_Status
  5528 ;;		_getSw_KeyStatus
  5529 ;;		_setBuz
  5530 ;;		_setDimmerLights_DimmingOn
  5531 ;;		_setDimmerLights_SwOff
  5532 ;;		_setDimmerLights_SwOn
  5533 ;;		_setRF_Learn
  5534 ;; This function is called by:
  5535 ;;		_Switch_Main
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           
  5540                           ;psect for function _setSw_Main
  5541  0205                     _setSw_Main:	
  5542                           
  5543                           ;incstack = 0
  5544                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5545                           ;setSw_Main@sw stored from wreg
  5546  0205  0020               	movlb	0	; select bank0
  5547  0206  00B1               	movwf	setSw_Main@sw
  5548                           
  5549                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5550  0207  0831               	movf	setSw_Main@sw,w
  5551  0208  319C  2499  3182   	fcall	_SwPointSelect
  5552                           
  5553                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5554  020B  0021               	movlb	1	; select bank1
  5555  020C  084E               	movf	_Sw^(0+128),w
  5556  020D  0086               	movwf	6
  5557  020E  3001               	movlw	1	; select bank2/3
  5558  020F  0087               	movwf	7
  5559  0210  1C01               	btfss	1,0
  5560  0211  2B81               	goto	l2493
  5561                           
  5562                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5563  0212  3000               	movlw	0
  5564  0213  3191  21B2  3182   	fcall	_getMain_All_Error_Status
  5565  0216  3800               	iorlw	0
  5566  0217  1D03               	skipz
  5567  0218  2A37               	goto	l9816
  5568                           
  5569                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5570  0219  0021               	movlb	1	; select bank1
  5571  021A  0A4E               	incf	_Sw^(0+128),w
  5572  021B  0086               	movwf	6
  5573  021C  3001               	movlw	1	; select bank2/3
  5574  021D  0087               	movwf	7
  5575  021E  1081               	bcf	1,1
  5576                           
  5577                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5578  021F  0020               	movlb	0	; select bank0
  5579  0220  0831               	movf	setSw_Main@sw,w
  5580  0221  319D  2526  3182   	fcall	_getSw_KeyStatus
  5581  0224  3A01               	xorlw	1
  5582  0225  3000               	movlw	0
  5583  0226  1903               	skipnz
  5584  0227  3001               	movlw	1
  5585  0228  0020               	movlb	0	; select bank0
  5586  0229  00AF               	movwf	??_setSw_Main
  5587  022A  0021               	movlb	1	; select bank1
  5588  022B  084E               	movf	_Sw^(0+128),w
  5589  022C  0086               	movwf	6
  5590  022D  3001               	movlw	1	; select bank2/3
  5591  022E  0087               	movwf	7
  5592  022F  0020               	movlb	0	; select bank0
  5593  0230  0DAF               	rlf	??_setSw_Main,f
  5594  0231  0801               	movf	1,w
  5595  0232  062F               	xorwf	??_setSw_Main,w
  5596  0233  39FD               	andlw	-3
  5597  0234  062F               	xorwf	??_setSw_Main,w
  5598  0235  0081               	movwf	1
  5599                           
  5600                           ;Switch_B1.c: 124: } else {
  5601  0236  2A4D               	goto	l2495
  5602  0237                     l9816:	
  5603                           
  5604                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5605  0237  0021               	movlb	1	; select bank1
  5606  0238  0A4E               	incf	_Sw^(0+128),w
  5607  0239  0086               	movwf	6
  5608  023A  3001               	movlw	1	; select bank2/3
  5609  023B  0087               	movwf	7
  5610  023C  1881               	btfsc	1,1
  5611  023D  2A4D               	goto	l2495
  5612                           
  5613                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5614  023E  0A4E               	incf	_Sw^(0+128),w
  5615  023F  0086               	movwf	6
  5616  0240  3001               	movlw	1	; select bank2/3
  5617  0241  0087               	movwf	7
  5618  0242  1481               	bsf	1,1
  5619                           
  5620                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5621  0243  084E               	movf	_Sw^(0+128),w
  5622  0244  0086               	movwf	6
  5623  0245  3001               	movlw	1	; select bank2/3
  5624  0246  0087               	movwf	7
  5625  0247  1081               	bcf	1,1
  5626                           
  5627                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5628  0248  084E               	movf	_Sw^(0+128),w
  5629  0249  0086               	movwf	6
  5630  024A  3001               	movlw	1	; select bank2/3
  5631  024B  0087               	movwf	7
  5632  024C  1501               	bsf	1,2
  5633  024D                     l2495:	
  5634                           
  5635                           ;Switch_B1.c: 130: }
  5636                           ;Switch_B1.c: 131: }
  5637                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5638  024D  0021               	movlb	1	; select bank1
  5639  024E  084E               	movf	_Sw^(0+128),w
  5640  024F  0086               	movwf	6
  5641  0250  3001               	movlw	1	; select bank2/3
  5642  0251  0087               	movwf	7
  5643  0252  1C81               	btfss	1,1
  5644  0253  2B29               	goto	l9866
  5645                           
  5646                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5647  0254  084E               	movf	_Sw^(0+128),w
  5648  0255  0086               	movwf	6
  5649  0256  3001               	movlw	1	; select bank2/3
  5650  0257  0087               	movwf	7
  5651  0258  1901               	btfsc	1,2
  5652  0259  2A80               	goto	l9832
  5653                           
  5654                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5655  025A  3001               	movlw	1
  5656  025B  0020               	movlb	0	; select bank0
  5657  025C  00AF               	movwf	??_setSw_Main
  5658  025D  0021               	movlb	1	; select bank1
  5659  025E  084E               	movf	_Sw^(0+128),w
  5660  025F  3E02               	addlw	2
  5661  0260  0086               	movwf	6
  5662  0261  3001               	movlw	1	; select bank2/3
  5663  0262  0087               	movwf	7
  5664  0263  0020               	movlb	0	; select bank0
  5665  0264  082F               	movf	??_setSw_Main,w
  5666  0265  0781               	addwf	1,f
  5667                           
  5668                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5669  0266  0021               	movlb	1	; select bank1
  5670  0267  084E               	movf	_Sw^(0+128),w
  5671  0268  3E02               	addlw	2
  5672  0269  0086               	movwf	6
  5673  026A  3001               	movlw	1	; select bank2/3
  5674  026B  0087               	movwf	7
  5675  026C  3003               	movlw	3
  5676  026D  0201               	subwf	1,w
  5677  026E  1C03               	skipc
  5678  026F  0008               	return
  5679                           
  5680                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5681  0270  084E               	movf	_Sw^(0+128),w
  5682  0271  3E02               	addlw	2
  5683  0272  0086               	movwf	6
  5684  0273  3001               	movlw	1	; select bank2/3
  5685  0274  0087               	movwf	7
  5686  0275  0181               	clrf	1
  5687                           
  5688                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5689  0276  084E               	movf	_Sw^(0+128),w
  5690  0277  0086               	movwf	6
  5691  0278  3001               	movlw	1	; select bank2/3
  5692  0279  0087               	movwf	7
  5693  027A  1501               	bsf	1,2
  5694                           
  5695                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5696  027B  0020               	movlb	0	; select bank0
  5697  027C  0831               	movf	setSw_Main@sw,w
  5698  027D  3192  2219         	fcall	_setDimmerLights_SwOn
  5699                           
  5700                           ;Switch_B1.c: 146: }
  5701                           ;Switch_B1.c: 147: } else {
  5702  027F  0008               	return
  5703  0280                     l9832:	
  5704                           
  5705                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5706  0280  0021               	movlb	1	; select bank1
  5707  0281  084E               	movf	_Sw^(0+128),w
  5708  0282  0086               	movwf	6
  5709  0283  3001               	movlw	1	; select bank2/3
  5710  0284  0087               	movwf	7
  5711  0285  1981               	btfsc	1,3
  5712  0286  2AB5               	goto	l9842
  5713                           
  5714                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5715  0287  084E               	movf	_Sw^(0+128),w
  5716  0288  3E03               	addlw	3
  5717  0289  0086               	movwf	6
  5718  028A  3001               	movlw	1	; select bank2/3
  5719  028B  0087               	movwf	7
  5720  028C  3001               	movlw	1
  5721  028D  0781               	addwf	1,f
  5722  028E  3141               	addfsr 1,1
  5723  028F  1803               	skipnc
  5724  0290  0A81               	incf	1,f
  5725                           
  5726                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5727  0291  084E               	movf	_Sw^(0+128),w
  5728  0292  3E03               	addlw	3
  5729  0293  0086               	movwf	6
  5730  0294  3001               	movlw	1	; select bank2/3
  5731  0295  0087               	movwf	7
  5732  0296  3F40               	moviw [0]fsr1
  5733  0297  0020               	movlb	0	; select bank0
  5734  0298  00AF               	movwf	??_setSw_Main
  5735  0299  3F41               	moviw [1]fsr1
  5736  029A  00B0               	movwf	??_setSw_Main+1
  5737  029B  3000               	movlw	0
  5738  029C  0230               	subwf	??_setSw_Main+1,w
  5739  029D  304B               	movlw	75
  5740  029E  1903               	skipnz
  5741  029F  022F               	subwf	??_setSw_Main,w
  5742  02A0  1C03               	skipc
  5743  02A1  0008               	return
  5744                           
  5745                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5746  02A2  0021               	movlb	1	; select bank1
  5747  02A3  084E               	movf	_Sw^(0+128),w
  5748  02A4  3E03               	addlw	3
  5749  02A5  0086               	movwf	6
  5750  02A6  3001               	movlw	1	; select bank2/3
  5751  02A7  0087               	movwf	7
  5752  02A8  3000               	movlw	0
  5753  02A9  3FC0               	movwi [0]fsr1
  5754  02AA  3FC1               	movwi [1]fsr1
  5755                           
  5756                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5757  02AB  084E               	movf	_Sw^(0+128),w
  5758  02AC  0086               	movwf	6
  5759  02AD  3001               	movlw	1	; select bank2/3
  5760  02AE  0087               	movwf	7
  5761  02AF  1581               	bsf	1,3
  5762                           
  5763                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5764  02B0  0020               	movlb	0	; select bank0
  5765  02B1  0831               	movf	setSw_Main@sw,w
  5766  02B2  3191  2100         	fcall	_setDimmerLights_DimmingOn
  5767                           
  5768                           ;Switch_B1.c: 161: }
  5769                           ;Switch_B1.c: 162: } else {
  5770  02B4  0008               	return
  5771  02B5                     l9842:	
  5772                           
  5773                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5774  02B5  0021               	movlb	1	; select bank1
  5775  02B6  084E               	movf	_Sw^(0+128),w
  5776  02B7  0086               	movwf	6
  5777  02B8  3001               	movlw	1	; select bank2/3
  5778  02B9  0087               	movwf	7
  5779  02BA  1A01               	btfsc	1,4
  5780  02BB  2AF5               	goto	l9856
  5781                           
  5782                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5783  02BC  084E               	movf	_Sw^(0+128),w
  5784  02BD  3E05               	addlw	5
  5785  02BE  0086               	movwf	6
  5786  02BF  3001               	movlw	1	; select bank2/3
  5787  02C0  0087               	movwf	7
  5788  02C1  3001               	movlw	1
  5789  02C2  0781               	addwf	1,f
  5790  02C3  3141               	addfsr 1,1
  5791  02C4  1803               	skipnc
  5792  02C5  0A81               	incf	1,f
  5793                           
  5794                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5795  02C6  084E               	movf	_Sw^(0+128),w
  5796  02C7  3E05               	addlw	5
  5797  02C8  0086               	movwf	6
  5798  02C9  3001               	movlw	1	; select bank2/3
  5799  02CA  0087               	movwf	7
  5800  02CB  3F40               	moviw [0]fsr1
  5801  02CC  0020               	movlb	0	; select bank0
  5802  02CD  00AF               	movwf	??_setSw_Main
  5803  02CE  3F41               	moviw [1]fsr1
  5804  02CF  00B0               	movwf	??_setSw_Main+1
  5805  02D0  3000               	movlw	0
  5806  02D1  0230               	subwf	??_setSw_Main+1,w
  5807  02D2  304B               	movlw	75
  5808  02D3  1903               	skipnz
  5809  02D4  022F               	subwf	??_setSw_Main,w
  5810  02D5  1C03               	skipc
  5811  02D6  0008               	return
  5812                           
  5813                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5814  02D7  0021               	movlb	1	; select bank1
  5815  02D8  084E               	movf	_Sw^(0+128),w
  5816  02D9  3E05               	addlw	5
  5817  02DA  0086               	movwf	6
  5818  02DB  3001               	movlw	1	; select bank2/3
  5819  02DC  0087               	movwf	7
  5820  02DD  3000               	movlw	0
  5821  02DE  3FC0               	movwi [0]fsr1
  5822  02DF  3FC1               	movwi [1]fsr1
  5823                           
  5824                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5825  02E0  084E               	movf	_Sw^(0+128),w
  5826  02E1  0086               	movwf	6
  5827  02E2  3001               	movlw	1	; select bank2/3
  5828  02E3  0087               	movwf	7
  5829  02E4  1601               	bsf	1,4
  5830                           
  5831                           ;Switch_B1.c: 171: setRF_Learn(1);
  5832  02E5  3001               	movlw	1
  5833  02E6  319D  25F0  3182   	fcall	_setRF_Learn
  5834                           
  5835                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5836  02E9  0021               	movlb	1	; select bank1
  5837  02EA  1EAE               	btfss	_myMain^(0+128),5
  5838  02EB  0008               	return
  5839                           
  5840                           ;Switch_B1.c: 173: setBuz(2, 100);
  5841  02EC  3064               	movlw	100
  5842  02ED  0020               	movlb	0	; select bank0
  5843  02EE  00A9               	movwf	setBuz@time
  5844  02EF  3000               	movlw	0
  5845  02F0  00AA               	movwf	setBuz@time+1
  5846  02F1  3002               	movlw	2
  5847  02F2  3195  2551         	fcall	_setBuz
  5848                           
  5849                           ;Switch_B1.c: 174: }
  5850                           ;Switch_B1.c: 178: }
  5851                           ;Switch_B1.c: 179: } else {
  5852  02F4  0008               	return
  5853  02F5                     l9856:	
  5854                           
  5855                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5856  02F5  0021               	movlb	1	; select bank1
  5857  02F6  084E               	movf	_Sw^(0+128),w
  5858  02F7  0086               	movwf	6
  5859  02F8  3001               	movlw	1	; select bank2/3
  5860  02F9  0087               	movwf	7
  5861  02FA  1A81               	btfsc	1,5
  5862  02FB  0008               	return
  5863                           
  5864                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5865  02FC  084E               	movf	_Sw^(0+128),w
  5866  02FD  3E07               	addlw	7
  5867  02FE  0086               	movwf	6
  5868  02FF  3001               	movlw	1	; select bank2/3
  5869  0300  0087               	movwf	7
  5870  0301  3001               	movlw	1
  5871  0302  0781               	addwf	1,f
  5872  0303  3141               	addfsr 1,1
  5873  0304  1803               	skipnc
  5874  0305  0A81               	incf	1,f
  5875                           
  5876                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5877  0306  084E               	movf	_Sw^(0+128),w
  5878  0307  3E07               	addlw	7
  5879  0308  0086               	movwf	6
  5880  0309  3001               	movlw	1	; select bank2/3
  5881  030A  0087               	movwf	7
  5882  030B  3F40               	moviw [0]fsr1
  5883  030C  0020               	movlb	0	; select bank0
  5884  030D  00AF               	movwf	??_setSw_Main
  5885  030E  3F41               	moviw [1]fsr1
  5886  030F  00B0               	movwf	??_setSw_Main+1
  5887  0310  3000               	movlw	0
  5888  0311  0230               	subwf	??_setSw_Main+1,w
  5889  0312  3096               	movlw	150
  5890  0313  1903               	skipnz
  5891  0314  022F               	subwf	??_setSw_Main,w
  5892  0315  1C03               	skipc
  5893  0316  0008               	return
  5894                           
  5895                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5896  0317  0021               	movlb	1	; select bank1
  5897  0318  084E               	movf	_Sw^(0+128),w
  5898  0319  3E07               	addlw	7
  5899  031A  0086               	movwf	6
  5900  031B  3001               	movlw	1	; select bank2/3
  5901  031C  0087               	movwf	7
  5902  031D  3000               	movlw	0
  5903  031E  3FC0               	movwi [0]fsr1
  5904  031F  3FC1               	movwi [1]fsr1
  5905                           
  5906                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5907  0320  084E               	movf	_Sw^(0+128),w
  5908  0321  0086               	movwf	6
  5909  0322  3001               	movlw	1	; select bank2/3
  5910  0323  0087               	movwf	7
  5911  0324  1681               	bsf	1,5
  5912                           
  5913                           ;Switch_B1.c: 187: setRF_Learn(0);
  5914  0325  3000               	movlw	0
  5915  0326  319D  25F0         	fcall	_setRF_Learn
  5916                           
  5917                           ;Switch_B1.c: 190: }
  5918                           ;Switch_B1.c: 191: }
  5919                           ;Switch_B1.c: 192: }
  5920                           ;Switch_B1.c: 194: }
  5921                           ;Switch_B1.c: 195: }
  5922                           ;Switch_B1.c: 196: } else {
  5923  0328  0008               	return
  5924  0329                     l9866:	
  5925                           
  5926                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5927  0329  0021               	movlb	1	; select bank1
  5928  032A  084E               	movf	_Sw^(0+128),w
  5929  032B  0086               	movwf	6
  5930  032C  3001               	movlw	1	; select bank2/3
  5931  032D  0087               	movwf	7
  5932  032E  1D01               	btfss	1,2
  5933  032F  0008               	return
  5934                           
  5935                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5936  0330  3001               	movlw	1
  5937  0331  0020               	movlb	0	; select bank0
  5938  0332  00AF               	movwf	??_setSw_Main
  5939  0333  0021               	movlb	1	; select bank1
  5940  0334  084E               	movf	_Sw^(0+128),w
  5941  0335  3E02               	addlw	2
  5942  0336  0086               	movwf	6
  5943  0337  3001               	movlw	1	; select bank2/3
  5944  0338  0087               	movwf	7
  5945  0339  0020               	movlb	0	; select bank0
  5946  033A  082F               	movf	??_setSw_Main,w
  5947  033B  0781               	addwf	1,f
  5948                           
  5949                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5950  033C  0021               	movlb	1	; select bank1
  5951  033D  084E               	movf	_Sw^(0+128),w
  5952  033E  3E02               	addlw	2
  5953  033F  0086               	movwf	6
  5954  0340  3001               	movlw	1	; select bank2/3
  5955  0341  0087               	movwf	7
  5956  0342  3003               	movlw	3
  5957  0343  0201               	subwf	1,w
  5958  0344  1C03               	skipc
  5959  0345  0008               	return
  5960                           
  5961                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5962  0346  084E               	movf	_Sw^(0+128),w
  5963  0347  3E02               	addlw	2
  5964  0348  0086               	movwf	6
  5965  0349  3001               	movlw	1	; select bank2/3
  5966  034A  0087               	movwf	7
  5967  034B  0181               	clrf	1
  5968                           
  5969                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5970  034C  084E               	movf	_Sw^(0+128),w
  5971  034D  0086               	movwf	6
  5972  034E  3001               	movlw	1	; select bank2/3
  5973  034F  0087               	movwf	7
  5974  0350  1101               	bcf	1,2
  5975                           
  5976                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5977  0351  084E               	movf	_Sw^(0+128),w
  5978  0352  3E03               	addlw	3
  5979  0353  0086               	movwf	6
  5980  0354  3001               	movlw	1	; select bank2/3
  5981  0355  0087               	movwf	7
  5982  0356  3000               	movlw	0
  5983  0357  3FC0               	movwi [0]fsr1
  5984  0358  3FC1               	movwi [1]fsr1
  5985                           
  5986                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5987  0359  084E               	movf	_Sw^(0+128),w
  5988  035A  0086               	movwf	6
  5989  035B  3001               	movlw	1	; select bank2/3
  5990  035C  0087               	movwf	7
  5991  035D  1181               	bcf	1,3
  5992                           
  5993                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  5994  035E  084E               	movf	_Sw^(0+128),w
  5995  035F  0086               	movwf	6
  5996  0360  3001               	movlw	1	; select bank2/3
  5997  0361  0087               	movwf	7
  5998  0362  1201               	bcf	1,4
  5999                           
  6000                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6001  0363  084E               	movf	_Sw^(0+128),w
  6002  0364  0086               	movwf	6
  6003  0365  3001               	movlw	1	; select bank2/3
  6004  0366  0087               	movwf	7
  6005  0367  1281               	bcf	1,5
  6006                           
  6007                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6008  0368  084E               	movf	_Sw^(0+128),w
  6009  0369  3E05               	addlw	5
  6010  036A  0086               	movwf	6
  6011  036B  3001               	movlw	1	; select bank2/3
  6012  036C  0087               	movwf	7
  6013  036D  3000               	movlw	0
  6014  036E  3FC0               	movwi [0]fsr1
  6015  036F  3FC1               	movwi [1]fsr1
  6016                           
  6017                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6018  0370  084E               	movf	_Sw^(0+128),w
  6019  0371  3E07               	addlw	7
  6020  0372  0086               	movwf	6
  6021  0373  3001               	movlw	1	; select bank2/3
  6022  0374  0087               	movwf	7
  6023  0375  3000               	movlw	0
  6024  0376  3FC0               	movwi [0]fsr1
  6025  0377  3FC1               	movwi [1]fsr1
  6026                           
  6027                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6028  0378  0020               	movlb	0	; select bank0
  6029  0379  0831               	movf	setSw_Main@sw,w
  6030  037A  3192  22BB  3182   	fcall	_setDimmerLights_SwOff
  6031                           
  6032                           ;Switch_B1.c: 219: setRF_Learn(0);
  6033  037D  3000               	movlw	0
  6034  037E  319D  25F0         	fcall	_setRF_Learn
  6035                           
  6036                           ;Switch_B1.c: 221: }
  6037                           ;Switch_B1.c: 222: }
  6038                           ;Switch_B1.c: 223: }
  6039                           ;Switch_B1.c: 224: } else {
  6040  0380  0008               	return
  6041  0381                     l2493:	
  6042                           
  6043                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6044  0381  1C2E               	btfss	_myMain^(0+128),0
  6045  0382  0008               	return
  6046                           
  6047                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6048  0383  084E               	movf	_Sw^(0+128),w
  6049  0384  0086               	movwf	6
  6050  0385  3001               	movlw	1	; select bank2/3
  6051  0386  0087               	movwf	7
  6052  0387  1401               	bsf	1,0
  6053  0388  0008               	return
  6054  0389                     __end_of_setSw_Main:	
  6055                           
  6056                           	psect	text14
  6057  1DF0                     __ptext14:	
  6058 ;; *************** function _setRF_Learn *****************
  6059 ;; Defined at:
  6060 ;;		line 33 in file "../src/RF_Control_B1.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;  command         1    wreg     unsigned char 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;  command         1    1[BANK0 ] unsigned char 
  6065 ;; Return value:  Size  Location     Type
  6066 ;;		None               void
  6067 ;; Registers used:
  6068 ;;		wreg, status,2, status,0
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;Total ram usage:        2 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:    5
  6081 ;; This function calls:
  6082 ;;		Nothing
  6083 ;; This function is called by:
  6084 ;;		_setSw_Main
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           
  6089                           ;psect for function _setRF_Learn
  6090  1DF0                     _setRF_Learn:	
  6091                           
  6092                           ;incstack = 0
  6093                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6094                           ;setRF_Learn@command stored from wreg
  6095  1DF0  0020               	movlb	0	; select bank0
  6096  1DF1  00A1               	movwf	setRF_Learn@command
  6097                           
  6098                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6099  1DF2  0821               	movf	setRF_Learn@command,w
  6100  1DF3  3A01               	xorlw	1
  6101  1DF4  3000               	movlw	0
  6102  1DF5  1903               	skipnz
  6103  1DF6  3001               	movlw	1
  6104  1DF7  00A0               	movwf	??_setRF_Learn
  6105  1DF8  0EA0               	swapf	??_setRF_Learn,f
  6106  1DF9  0DA0               	rlf	??_setRF_Learn,f
  6107  1DFA  0DA0               	rlf	??_setRF_Learn,f
  6108  1DFB  0021               	movlb	1	; select bank1
  6109  1DFC  0820               	movf	_RF1^(0+128),w
  6110  1DFD  0020               	movlb	0	; select bank0
  6111  1DFE  0620               	xorwf	??_setRF_Learn,w
  6112  1DFF  39BF               	andlw	-65
  6113  1E00  0620               	xorwf	??_setRF_Learn,w
  6114  1E01  0021               	movlb	1	; select bank1
  6115  1E02  00A0               	movwf	_RF1^(0+128)
  6116  1E03  0008               	return
  6117  1E04                     __end_of_setRF_Learn:	
  6118                           
  6119                           	psect	text15
  6120  1100                     __ptext15:	
  6121 ;; *************** function _setDimmerLights_DimmingOn *****************
  6122 ;; Defined at:
  6123 ;;		line 753 in file "../src/Dimmer_B1.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  sw              1    wreg     unsigned char 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;  sw              1    2[BANK0 ] unsigned char 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;		None               void
  6130 ;; Registers used:
  6131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6140 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;Total ram usage:        1 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; Hardware stack levels required when called:    6
  6144 ;; This function calls:
  6145 ;;		_DimmerLights_SelectPointer
  6146 ;; This function is called by:
  6147 ;;		_setSw_Main
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           
  6152                           ;psect for function _setDimmerLights_DimmingOn
  6153  1100                     _setDimmerLights_DimmingOn:	
  6154                           
  6155                           ;incstack = 0
  6156                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6157                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6158  1100  0020               	movlb	0	; select bank0
  6159  1101  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6160                           
  6161                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(sw);
  6162  1102  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6163  1103  319C  2421  3191   	fcall	_DimmerLights_SelectPointer
  6164                           
  6165                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 0) {
  6166  1106  0021               	movlb	1	; select bank1
  6167  1107  084A               	movf	_DimmerLights^(0+128),w
  6168  1108  0086               	movwf	6
  6169  1109  3001               	movlw	1	; select bank2/3
  6170  110A  0087               	movwf	7
  6171  110B  1881               	btfsc	1,1
  6172  110C  0008               	return
  6173                           
  6174                           ;Dimmer_B1.c: 761: if (DimmerLights->SwFlag == 1) {
  6175  110D  084A               	movf	_DimmerLights^(0+128),w
  6176  110E  0086               	movwf	6
  6177  110F  3001               	movlw	1	; select bank2/3
  6178  1110  0087               	movwf	7
  6179  1111  1C01               	btfss	1,0
  6180  1112  0008               	return
  6181                           
  6182                           ;Dimmer_B1.c: 762: DimmerLights->Status = 1;
  6183  1113  0A4A               	incf	_DimmerLights^(0+128),w
  6184  1114  0086               	movwf	6
  6185  1115  3001               	movlw	1	; select bank2/3
  6186  1116  0087               	movwf	7
  6187  1117  1401               	bsf	1,0
  6188                           
  6189                           ;Dimmer_B1.c: 764: DimmerLights->DimmingSwFlag = 1;
  6190  1118  084A               	movf	_DimmerLights^(0+128),w
  6191  1119  0086               	movwf	6
  6192  111A  3001               	movlw	1	; select bank2/3
  6193  111B  0087               	movwf	7
  6194  111C  1581               	bsf	1,3
  6195                           
  6196                           ;Dimmer_B1.c: 765: DimmerLights->DimmingTrigger = 1;
  6197  111D  084A               	movf	_DimmerLights^(0+128),w
  6198  111E  0086               	movwf	6
  6199  111F  3001               	movlw	1	; select bank2/3
  6200  1120  0087               	movwf	7
  6201  1121  1601               	bsf	1,4
  6202                           
  6203                           ;Dimmer_B1.c: 766: DimmerLights->DimmingSwitch = 1;
  6204  1122  084A               	movf	_DimmerLights^(0+128),w
  6205  1123  0086               	movwf	6
  6206  1124  3001               	movlw	1	; select bank2/3
  6207  1125  0087               	movwf	7
  6208  1126  1681               	bsf	1,5
  6209  1127  0008               	return
  6210  1128                     __end_of_setDimmerLights_DimmingOn:	
  6211                           
  6212                           	psect	text16
  6213  1D26                     __ptext16:	
  6214 ;; *************** function _getSw_KeyStatus *****************
  6215 ;; Defined at:
  6216 ;;		line 237 in file "../src/Switch_B1.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  sw              1    wreg     unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  sw              1    0[COMMON] unsigned char 
  6221 ;;  status          1    1[BANK0 ] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  1    wreg      unsigned char 
  6224 ;; Registers used:
  6225 ;;		wreg, status,2
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;Total ram usage:        3 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    5
  6238 ;; This function calls:
  6239 ;;		Nothing
  6240 ;; This function is called by:
  6241 ;;		_setSw_Main
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           
  6246                           ;psect for function _getSw_KeyStatus
  6247  1D26                     _getSw_KeyStatus:	
  6248                           
  6249                           ;Switch_B1.c: 238: char status = 0;
  6250                           
  6251                           ;incstack = 0
  6252                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6253  1D26  0020               	movlb	0	; select bank0
  6254  1D27  01A1               	clrf	getSw_KeyStatus@status
  6255                           
  6256                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6257  1D28  01A2               	clrf	_getSw_KeyStatus$6384
  6258  1D29  0AA2               	incf	_getSw_KeyStatus$6384,f
  6259  1D2A  1F0C               	btfss	12,6	;volatile
  6260  1D2B  1A0C               	btfsc	12,4	;volatile
  6261  1D2C  2D31               	goto	l6998
  6262  1D2D  1C0C               	btfss	12,0	;volatile
  6263  1D2E  1B8C               	btfsc	12,7	;volatile
  6264  1D2F  2D31               	goto	l6998
  6265  1D30  01A2               	clrf	_getSw_KeyStatus$6384
  6266  1D31                     l6998:	
  6267  1D31  0822               	movf	_getSw_KeyStatus$6384,w
  6268  1D32  00A0               	movwf	??_getSw_KeyStatus
  6269  1D33  0820               	movf	??_getSw_KeyStatus,w
  6270  1D34  00A1               	movwf	getSw_KeyStatus@status
  6271                           
  6272                           ;Switch_B1.c: 275: return status;
  6273  1D35  0821               	movf	getSw_KeyStatus@status,w
  6274  1D36  0008               	return
  6275  1D37                     __end_of_getSw_KeyStatus:	
  6276                           
  6277                           	psect	text17
  6278  1C99                     __ptext17:	
  6279 ;; *************** function _SwPointSelect *****************
  6280 ;; Defined at:
  6281 ;;		line 25 in file "../src/Switch_B1.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;  sw              1    wreg     unsigned char 
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;  sw              1    1[BANK0 ] unsigned char 
  6286 ;; Return value:  Size  Location     Type
  6287 ;;		None               void
  6288 ;; Registers used:
  6289 ;;		wreg
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;Total ram usage:        2 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    5
  6302 ;; This function calls:
  6303 ;;		Nothing
  6304 ;; This function is called by:
  6305 ;;		_setSw_Main
  6306 ;; This function uses a non-reentrant model
  6307 ;;
  6308                           
  6309                           
  6310                           ;psect for function _SwPointSelect
  6311  1C99                     _SwPointSelect:	
  6312                           
  6313                           ;incstack = 0
  6314                           ; Regs used in _SwPointSelect: [wreg]
  6315                           ;SwPointSelect@sw stored from wreg
  6316  1C99  0020               	movlb	0	; select bank0
  6317  1C9A  00A1               	movwf	SwPointSelect@sw
  6318                           
  6319                           ;Switch_B1.c: 28: if (sw == 1) {
  6320  1C9B  0821               	movf	SwPointSelect@sw,w
  6321  1C9C  3A01               	xorlw	1
  6322  1C9D  1D03               	skipz
  6323  1C9E  0008               	return
  6324                           
  6325                           ;Switch_B1.c: 29: Sw = &Sw1;
  6326  1C9F  30BE               	movlw	_Sw1& (0+255)
  6327  1CA0  00A0               	movwf	??_SwPointSelect
  6328  1CA1  0820               	movf	??_SwPointSelect,w
  6329  1CA2  0021               	movlb	1	; select bank1
  6330  1CA3  00CE               	movwf	_Sw^(0+128)
  6331  1CA4  0008               	return
  6332  1CA5                     __end_of_SwPointSelect:	
  6333                           
  6334                           	psect	text18
  6335  1E43                     __ptext18:	
  6336 ;; *************** function _TouchPower *****************
  6337 ;; Defined at:
  6338 ;;		line 10 in file "../src/Switch_B1.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;		None
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;		None
  6343 ;; Return value:  Size  Location     Type
  6344 ;;		None               void
  6345 ;; Registers used:
  6346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;Total ram usage:        0 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    6
  6359 ;; This function calls:
  6360 ;;		_Timeout_Counter
  6361 ;;		_set_TimeoutCleared
  6362 ;; This function is called by:
  6363 ;;		_Switch_Main
  6364 ;; This function uses a non-reentrant model
  6365 ;;
  6366                           
  6367                           
  6368                           ;psect for function _TouchPower
  6369  1E43                     _TouchPower:	
  6370                           
  6371                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6372                           
  6373                           ;incstack = 0
  6374                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6375  1E43  0021               	movlb	1	; select bank1
  6376  1E44  1C2E               	btfss	_myMain^(0+128),0
  6377  1E45  0008               	return
  6378                           
  6379                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6380  1E46  0020               	movlb	0	; select bank0
  6381  1E47  180D               	btfsc	13,0	;volatile
  6382  1E48  0008               	return
  6383  1E49  2E4F               	goto	l7540
  6384  1E4A                     l2473:	
  6385                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6386                           
  6387                           
  6388                           ;Switch_B1.c: 14: RB0 = 1;
  6389  1E4A  0020               	movlb	0	; select bank0
  6390  1E4B  140D               	bsf	13,0	;volatile
  6391                           
  6392                           ;Switch_B1.c: 15: Timeout_Counter();
  6393  1E4C  319E  262E  319E   	fcall	_Timeout_Counter
  6394  1E4F                     l7540:	
  6395  1E4F  0020               	movlb	0	; select bank0
  6396  1E50  180D               	btfsc	13,0	;volatile
  6397  1E51  2E55               	goto	l7544
  6398  1E52  0021               	movlb	1	; select bank1
  6399  1E53  1D38               	btfss	(_myMain^(0+128)+10),2
  6400  1E54  2E4A               	goto	l2473
  6401  1E55                     l7544:	
  6402                           
  6403                           ;Switch_B1.c: 16: }
  6404                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6405  1E55  319B  2380         	fcall	_set_TimeoutCleared
  6406  1E57  0008               	return
  6407  1E58                     __end_of_TouchPower:	
  6408                           
  6409                           	psect	text19
  6410  1B80                     __ptext19:	
  6411 ;; *************** function _set_TimeoutCleared *****************
  6412 ;; Defined at:
  6413 ;;		line 281 in file "../src/Main_B1.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;		None
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;		None               void
  6420 ;; Registers used:
  6421 ;;		status,2
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;Total ram usage:        0 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    5
  6434 ;; This function calls:
  6435 ;;		Nothing
  6436 ;; This function is called by:
  6437 ;;		_getAD
  6438 ;;		_TouchPower
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           
  6443                           ;psect for function _set_TimeoutCleared
  6444  1B80                     _set_TimeoutCleared:	
  6445                           
  6446                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6447                           
  6448                           ;incstack = 0
  6449                           ; Regs used in _set_TimeoutCleared: [status,2]
  6450  1B80  0021               	movlb	1	; select bank1
  6451  1B81  1138               	bcf	(_myMain^(0+128)+10),2
  6452                           
  6453                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6454  1B82  01B9               	clrf	(_myMain^(0+128)+11)
  6455  1B83  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6456  1B84  0008               	return
  6457  1B85                     __end_of_set_TimeoutCleared:	
  6458                           
  6459                           	psect	text20
  6460  1E2E                     __ptext20:	
  6461 ;; *************** function _Timeout_Counter *****************
  6462 ;; Defined at:
  6463 ;;		line 272 in file "../src/Main_B1.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;		None
  6468 ;; Return value:  Size  Location     Type
  6469 ;;		None               void
  6470 ;; Registers used:
  6471 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6472 ;; Tracked objects:
  6473 ;;		On entry : 0/0
  6474 ;;		On exit  : 0/0
  6475 ;;		Unchanged: 0/0
  6476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;Total ram usage:        0 bytes
  6482 ;; Hardware stack levels used:    1
  6483 ;; Hardware stack levels required when called:    5
  6484 ;; This function calls:
  6485 ;;		Nothing
  6486 ;; This function is called by:
  6487 ;;		_getAD
  6488 ;;		_TouchPower
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           
  6493                           ;psect for function _Timeout_Counter
  6494  1E2E                     _Timeout_Counter:	
  6495                           
  6496                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6497                           
  6498                           ;incstack = 0
  6499                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6500  1E2E  3001               	movlw	1
  6501  1E2F  0021               	movlb	1	; select bank1
  6502  1E30  07B9               	addwf	(_myMain^(0+128)+11),f
  6503  1E31  3000               	movlw	0
  6504  1E32  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6505                           
  6506                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6507  1E33  300B               	movlw	11
  6508  1E34  3EAE               	addlw	_myMain& (0+255)
  6509  1E35  0086               	movwf	6
  6510  1E36  0187               	clrf	7
  6511  1E37  3F40               	moviw [0]fsr1
  6512  1E38  3AA8               	xorlw	168
  6513  1E39  1D03               	skipz
  6514  1E3A  2E3D               	goto	u6165
  6515  1E3B  3F41               	moviw [1]fsr1
  6516  1E3C  3A61               	xorlw	97
  6517  1E3D                     u6165:	
  6518  1E3D  1D03               	skipz
  6519  1E3E  0008               	return
  6520                           
  6521                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6522  1E3F  01B9               	clrf	(_myMain^(0+128)+11)
  6523  1E40  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6524                           
  6525                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6526  1E41  1538               	bsf	(_myMain^(0+128)+10),2
  6527  1E42  0008               	return
  6528  1E43                     __end_of_Timeout_Counter:	
  6529                           
  6530                           	psect	text21
  6531  1B7C                     __ptext21:	
  6532 ;; *************** function _Switch_Initialization *****************
  6533 ;; Defined at:
  6534 ;;		line 46 in file "../src/Switch_B1.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;		None
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;		None
  6539 ;; Return value:  Size  Location     Type
  6540 ;;		None               void
  6541 ;; Registers used:
  6542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;Total ram usage:        0 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    8
  6555 ;; This function calls:
  6556 ;;		_setSw_Initialization
  6557 ;; This function is called by:
  6558 ;;		_main
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function _Switch_Initialization
  6564  1B7C                     _Switch_Initialization:	
  6565                           
  6566                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6567                           
  6568                           ;incstack = 0
  6569                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6570  1B7C  3001               	movlw	1
  6571  1B7D  319C  24C1         	fcall	_setSw_Initialization
  6572  1B7F  0008               	return
  6573  1B80                     __end_of_Switch_Initialization:	
  6574                           
  6575                           	psect	text22
  6576  1CC1                     __ptext22:	
  6577 ;; *************** function _setSw_Initialization *****************
  6578 ;; Defined at:
  6579 ;;		line 66 in file "../src/Switch_B1.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  sw              1    wreg     unsigned char 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  sw              1    4[BANK0 ] unsigned char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;		None               void
  6586 ;; Registers used:
  6587 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6588 ;; Tracked objects:
  6589 ;;		On entry : 0/0
  6590 ;;		On exit  : 0/0
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;Total ram usage:        1 bytes
  6598 ;; Hardware stack levels used:    1
  6599 ;; Hardware stack levels required when called:    7
  6600 ;; This function calls:
  6601 ;;		_setLED
  6602 ;; This function is called by:
  6603 ;;		_Switch_Initialization
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607                           
  6608                           ;psect for function _setSw_Initialization
  6609  1CC1                     _setSw_Initialization:	
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6613                           ;setSw_Initialization@sw stored from wreg
  6614  1CC1  0020               	movlb	0	; select bank0
  6615  1CC2  00A4               	movwf	setSw_Initialization@sw
  6616                           
  6617                           ;Switch_B1.c: 68: setLED(sw, 1);
  6618  1CC3  01A2               	clrf	setLED@command
  6619  1CC4  0AA2               	incf	setLED@command,f
  6620  1CC5  0824               	movf	setSw_Initialization@sw,w
  6621  1CC6  3192  22F4  319C   	fcall	_setLED
  6622                           
  6623                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6624  1CC9  0020               	movlb	0	; select bank0
  6625  1CCA  01A2               	clrf	setLED@command
  6626  1CCB  0AA2               	incf	setLED@command,f
  6627  1CCC  0824               	movf	setSw_Initialization@sw,w
  6628  1CCD  3E01               	addlw	1
  6629  1CCE  3192  22F4         	fcall	_setLED
  6630  1CD0  0008               	return
  6631  1CD1                     __end_of_setSw_Initialization:	
  6632                           
  6633                           	psect	text23
  6634  1B4F                     __ptext23:	
  6635 ;; *************** function _RF_Main *****************
  6636 ;; Defined at:
  6637 ;;		line 26 in file "../src/RF_Control_B1.c"
  6638 ;; Parameters:    Size  Location     Type
  6639 ;;		None
  6640 ;; Auto vars:     Size  Location     Type
  6641 ;;		None
  6642 ;; Return value:  Size  Location     Type
  6643 ;;		None               void
  6644 ;; Registers used:
  6645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;Total ram usage:        0 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:   12
  6658 ;; This function calls:
  6659 ;;		_setRF_Main
  6660 ;; This function is called by:
  6661 ;;		_main
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _RF_Main
  6667  1B4F                     _RF_Main:	
  6668                           
  6669                           ;RF_Control_B1.c: 28: setRF_Main();
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6673  1B4F  3184  247F         	fcall	_setRF_Main
  6674  1B51  0008               	return
  6675  1B52                     __end_of_RF_Main:	
  6676                           
  6677                           	psect	text24
  6678  047F                     __ptext24:	
  6679 ;; *************** function _setRF_Main *****************
  6680 ;; Defined at:
  6681 ;;		line 53 in file "../src/RF_Control_B1.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;		None
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  error           1    3[BANK1 ] unsigned char 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;		None               void
  6688 ;; Registers used:
  6689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;Total ram usage:        2 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:   11
  6702 ;; This function calls:
  6703 ;;		_CC2500_PowerOnInitial
  6704 ;;		_CC2500_RxData
  6705 ;;		_CC2500_TxData
  6706 ;;		_CC2500_WriteCommand
  6707 ;;		_RF_RxDisable
  6708 ;;		___lwdiv
  6709 ;;		_getBuz_GO
  6710 ;;		_getRF_KeyStatus
  6711 ;;		_getRxData
  6712 ;; This function is called by:
  6713 ;;		_RF_Main
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           
  6718                           ;psect for function _setRF_Main
  6719  047F                     _setRF_Main:	
  6720                           
  6721                           ;RF_Control_B1.c: 54: char error = 0;
  6722                           
  6723                           ;incstack = 0
  6724                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6725  047F  0021               	movlb	1	; select bank1
  6726  0480  01DE               	clrf	setRF_Main@error^(0+128)
  6727                           
  6728                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6729  0481  1C20               	btfss	_RF1^(0+128),0
  6730  0482  2D50               	goto	l2115
  6731                           
  6732                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6733  0483  319D  2504  3184   	fcall	_getBuz_GO
  6734  0486  0020               	movlb	0	; select bank0
  6735  0487  0821               	movf	?_getBuz_GO+1,w
  6736  0488  0420               	iorwf	?_getBuz_GO,w
  6737  0489  1D03               	skipz
  6738  048A  2D31               	goto	l9782
  6739                           
  6740                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6741  048B  319D  2515  3184   	fcall	_getRF_KeyStatus
  6742  048E  3A01               	xorlw	1
  6743  048F  3000               	movlw	0
  6744  0490  1903               	skipnz
  6745  0491  3001               	movlw	1
  6746  0492  0021               	movlb	1	; select bank1
  6747  0493  00DD               	movwf	??_setRF_Main^(0+128)
  6748  0494  0CDD               	rrf	??_setRF_Main^(0+128),f
  6749  0495  0CDD               	rrf	??_setRF_Main^(0+128),f
  6750  0496  0820               	movf	_RF1^(0+128),w
  6751  0497  065D               	xorwf	??_setRF_Main^(0+128),w
  6752  0498  397F               	andlw	-129
  6753  0499  065D               	xorwf	??_setRF_Main^(0+128),w
  6754  049A  00A0               	movwf	_RF1^(0+128)
  6755                           
  6756                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6757  049B  1FA0               	btfss	_RF1^(0+128),7
  6758  049C  2C9F               	goto	l2119
  6759  049D  1F20               	btfss	_RF1^(0+128),6
  6760  049E  2D31               	goto	l9782
  6761  049F                     l2119:	
  6762                           
  6763                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6764  049F  1D20               	btfss	_RF1^(0+128),2
  6765  04A0  2CF0               	goto	l2120
  6766                           
  6767                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6768  04A1  1B20               	btfsc	_RF1^(0+128),6
  6769  04A2  2CEB               	goto	l9754
  6770                           
  6771                           ;RF_Control_B1.c: 68: RF1.Count++;
  6772  04A3  3001               	movlw	1
  6773  04A4  07A2               	addwf	(_RF1^(0+128)+2),f
  6774  04A5  3000               	movlw	0
  6775  04A6  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6776                           
  6777                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6778  04A7  3014               	movlw	20
  6779  04A8  0020               	movlb	0	; select bank0
  6780  04A9  00A0               	movwf	___lwdiv@divisor
  6781  04AA  3000               	movlw	0
  6782  04AB  00A1               	movwf	___lwdiv@divisor+1
  6783  04AC  0021               	movlb	1	; select bank1
  6784  04AD  0828               	movf	((_RF1+1)^(0+128)+7),w
  6785  04AE  0020               	movlb	0	; select bank0
  6786  04AF  01A3               	clrf	___lwdiv@dividend+1
  6787  04B0  07A3               	addwf	___lwdiv@dividend+1,f
  6788  04B1  0021               	movlb	1	; select bank1
  6789  04B2  0827               	movf	(_RF1^(0+128)+7),w
  6790  04B3  0020               	movlb	0	; select bank0
  6791  04B4  01A2               	clrf	___lwdiv@dividend
  6792  04B5  07A2               	addwf	___lwdiv@dividend,f
  6793  04B6  3192  2284  3184   	fcall	___lwdiv
  6794  04B9  0020               	movlb	0	; select bank0
  6795  04BA  0821               	movf	?___lwdiv+1,w
  6796  04BB  0021               	movlb	1	; select bank1
  6797  04BC  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6798  04BD  1D03               	skipz
  6799  04BE  2CC3               	goto	u11055
  6800  04BF  0020               	movlb	0	; select bank0
  6801  04C0  0820               	movf	?___lwdiv,w
  6802  04C1  0021               	movlb	1	; select bank1
  6803  04C2  0222               	subwf	(_RF1^(0+128)+2),w
  6804  04C3                     u11055:	
  6805  04C3  1C03               	skipc
  6806  04C4  2D31               	goto	l9782
  6807                           
  6808                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6809  04C5  3014               	movlw	20
  6810  04C6  0020               	movlb	0	; select bank0
  6811  04C7  00A0               	movwf	___lwdiv@divisor
  6812  04C8  3000               	movlw	0
  6813  04C9  00A1               	movwf	___lwdiv@divisor+1
  6814  04CA  0021               	movlb	1	; select bank1
  6815  04CB  0828               	movf	((_RF1+1)^(0+128)+7),w
  6816  04CC  0020               	movlb	0	; select bank0
  6817  04CD  01A3               	clrf	___lwdiv@dividend+1
  6818  04CE  07A3               	addwf	___lwdiv@dividend+1,f
  6819  04CF  0021               	movlb	1	; select bank1
  6820  04D0  0827               	movf	(_RF1^(0+128)+7),w
  6821  04D1  0020               	movlb	0	; select bank0
  6822  04D2  01A2               	clrf	___lwdiv@dividend
  6823  04D3  07A2               	addwf	___lwdiv@dividend,f
  6824  04D4  3192  2284  3184   	fcall	___lwdiv
  6825  04D7  0020               	movlb	0	; select bank0
  6826  04D8  0821               	movf	?___lwdiv+1,w
  6827  04D9  0021               	movlb	1	; select bank1
  6828  04DA  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6829  04DB  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6830  04DC  0020               	movlb	0	; select bank0
  6831  04DD  0820               	movf	?___lwdiv,w
  6832  04DE  0021               	movlb	1	; select bank1
  6833  04DF  01A2               	clrf	(_RF1^(0+128)+2)
  6834  04E0  07A2               	addwf	(_RF1^(0+128)+2),f
  6835                           
  6836                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6837  04E1  1120               	bcf	_RF1^(0+128),2
  6838                           
  6839                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6840  04E2  01AA               	clrf	(_RF1^(0+128)+10)
  6841  04E3  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6842                           
  6843                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6844  04E4  3190  2000  3184   	fcall	_RF_RxDisable
  6845                           
  6846                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6847  04E7  3188  207D  3184   	fcall	_CC2500_TxData
  6848                           
  6849                           ;RF_Control_B1.c: 77: }
  6850                           ;RF_Control_B1.c: 78: } else {
  6851  04EA  2D31               	goto	l9782
  6852  04EB                     l9754:	
  6853                           
  6854                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6855  04EB  0021               	movlb	1	; select bank1
  6856  04EC  01A2               	clrf	(_RF1^(0+128)+2)
  6857  04ED  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6858                           
  6859                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6860  04EE  1120               	bcf	_RF1^(0+128),2
  6861                           
  6862                           ;RF_Control_B1.c: 81: }
  6863                           ;RF_Control_B1.c: 82: } else {
  6864  04EF  2D31               	goto	l9782
  6865  04F0                     l2120:	
  6866                           
  6867                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6868  04F0  1DA0               	btfss	_RF1^(0+128),3
  6869  04F1  2CFF               	goto	l9768
  6870                           
  6871                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6872  04F2  3188  2012  3184   	fcall	_CC2500_RxData
  6873                           
  6874                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6875  04F5  0021               	movlb	1	; select bank1
  6876  04F6  1CA0               	btfss	_RF1^(0+128),1
  6877  04F7  2D31               	goto	l9782
  6878                           
  6879                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6880  04F8  10A0               	bcf	_RF1^(0+128),1
  6881                           
  6882                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6883  04F9  01AA               	clrf	(_RF1^(0+128)+10)
  6884  04FA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6885                           
  6886                           ;RF_Control_B1.c: 97: getRxData();
  6887  04FB  318A  223A  3184   	fcall	_getRxData
  6888                           
  6889                           ;RF_Control_B1.c: 100: }
  6890                           ;RF_Control_B1.c: 101: } else {
  6891  04FE  2D31               	goto	l9782
  6892  04FF                     l9768:	
  6893                           
  6894                           ;RF_Control_B1.c: 102: RF1.Count++;
  6895  04FF  3001               	movlw	1
  6896  0500  0021               	movlb	1	; select bank1
  6897  0501  07A2               	addwf	(_RF1^(0+128)+2),f
  6898  0502  3000               	movlw	0
  6899  0503  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6900                           
  6901                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6902  0504  3014               	movlw	20
  6903  0505  0020               	movlb	0	; select bank0
  6904  0506  00A0               	movwf	___lwdiv@divisor
  6905  0507  3000               	movlw	0
  6906  0508  00A1               	movwf	___lwdiv@divisor+1
  6907  0509  0021               	movlb	1	; select bank1
  6908  050A  0828               	movf	((_RF1+1)^(0+128)+7),w
  6909  050B  0020               	movlb	0	; select bank0
  6910  050C  01A3               	clrf	___lwdiv@dividend+1
  6911  050D  07A3               	addwf	___lwdiv@dividend+1,f
  6912  050E  0021               	movlb	1	; select bank1
  6913  050F  0827               	movf	(_RF1^(0+128)+7),w
  6914  0510  0020               	movlb	0	; select bank0
  6915  0511  01A2               	clrf	___lwdiv@dividend
  6916  0512  07A2               	addwf	___lwdiv@dividend,f
  6917  0513  3192  2284  3184   	fcall	___lwdiv
  6918  0516  0020               	movlb	0	; select bank0
  6919  0517  0821               	movf	?___lwdiv+1,w
  6920  0518  0021               	movlb	1	; select bank1
  6921  0519  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6922  051A  1D03               	skipz
  6923  051B  2D20               	goto	u11085
  6924  051C  0020               	movlb	0	; select bank0
  6925  051D  0820               	movf	?___lwdiv,w
  6926  051E  0021               	movlb	1	; select bank1
  6927  051F  0222               	subwf	(_RF1^(0+128)+2),w
  6928  0520                     u11085:	
  6929  0520  1C03               	skipc
  6930  0521  2D31               	goto	l9782
  6931                           
  6932                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6933  0522  01A2               	clrf	(_RF1^(0+128)+2)
  6934  0523  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6935                           
  6936                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6937  0524  15A0               	bsf	_RF1^(0+128),3
  6938                           
  6939                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6940  0525  3036               	movlw	54
  6941  0526  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6942                           
  6943                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6944  0529  303A               	movlw	58
  6945  052A  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6946                           
  6947                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6948  052D  3034               	movlw	52
  6949  052E  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6950  0531                     l9782:	
  6951                           
  6952                           ;RF_Control_B1.c: 111: }
  6953                           ;RF_Control_B1.c: 112: }
  6954                           ;RF_Control_B1.c: 113: }
  6955                           ;RF_Control_B1.c: 114: }
  6956                           ;RF_Control_B1.c: 115: }
  6957                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6958  0531  3001               	movlw	1
  6959  0532  0021               	movlb	1	; select bank1
  6960  0533  07AA               	addwf	(_RF1^(0+128)+10),f
  6961  0534  3000               	movlw	0
  6962  0535  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6963                           
  6964                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6965  0536  300B               	movlw	11
  6966  0537  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6967  0538  30B9               	movlw	185
  6968  0539  1903               	skipnz
  6969  053A  022A               	subwf	(_RF1^(0+128)+10),w
  6970  053B  1C03               	skipc
  6971  053C  2D49               	goto	l9796
  6972                           
  6973                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6974  053D  01AA               	clrf	(_RF1^(0+128)+10)
  6975  053E  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6976                           
  6977                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6978  053F  11A0               	bcf	_RF1^(0+128),3
  6979                           
  6980                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6981  0540  10A0               	bcf	_RF1^(0+128),1
  6982                           
  6983                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6984  0541  3036               	movlw	54
  6985  0542  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6986                           
  6987                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6988  0545  303A               	movlw	58
  6989  0546  319F  271A  3184   	fcall	_CC2500_WriteCommand
  6990  0549                     l9796:	
  6991                           
  6992                           ;RF_Control_B1.c: 125: }
  6993                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6994  0549  0021               	movlb	1	; select bank1
  6995  054A  1F21               	btfss	(_RF1^(0+128)+1),6
  6996  054B  0008               	return
  6997                           
  6998                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6999  054C  1321               	bcf	(_RF1^(0+128)+1),6
  7000                           
  7001                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7002  054D  319E  2619         	fcall	_CC2500_PowerOnInitial
  7003                           
  7004                           ;RF_Control_B1.c: 130: }
  7005                           ;RF_Control_B1.c: 132: } else {
  7006  054F  0008               	return
  7007  0550                     l2115:	
  7008                           
  7009                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7010  0550  1C2E               	btfss	_myMain^(0+128),0
  7011  0551  0008               	return
  7012                           
  7013                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7014  0552  1420               	bsf	_RF1^(0+128),0
  7015  0553  0008               	return
  7016  0554                     __end_of_setRF_Main:	
  7017                           
  7018                           	psect	text25
  7019  0A3A                     __ptext25:	
  7020 ;; *************** function _getRxData *****************
  7021 ;; Defined at:
  7022 ;;		line 227 in file "../src/RF_Control_B1.c"
  7023 ;; Parameters:    Size  Location     Type
  7024 ;;		None
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;  error           1    1[BANK1 ] unsigned char 
  7027 ;; Return value:  Size  Location     Type
  7028 ;;		None               void
  7029 ;; Registers used:
  7030 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7031 ;; Tracked objects:
  7032 ;;		On entry : 0/0
  7033 ;;		On exit  : 0/0
  7034 ;;		Unchanged: 0/0
  7035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7040 ;;Total ram usage:        2 bytes
  7041 ;; Hardware stack levels used:    1
  7042 ;; Hardware stack levels required when called:   10
  7043 ;; This function calls:
  7044 ;;		_getMain_All_Error_Status
  7045 ;;		_setControl_Lights_Table
  7046 ;;		_setLog_Code
  7047 ;;		_setTxData
  7048 ;; This function is called by:
  7049 ;;		_setRF_Main
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           
  7054                           ;psect for function _getRxData
  7055  0A3A                     _getRxData:	
  7056                           
  7057                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7058                           
  7059                           ;incstack = 0
  7060                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7061  0A3A  0023               	movlb	3	; select bank3
  7062  0A3B  0820               	movf	_RF_Data^(0+384),w
  7063  0A3C  3AAA               	xorlw	170
  7064  0A3D  1D03               	skipz
  7065  0A3E  2A50               	goto	l9472
  7066  0A3F  0821               	movf	(_RF_Data^(0+384)+1),w
  7067  0A40  3A01               	xorlw	1
  7068  0A41  1D03               	skipz
  7069  0A42  2A50               	goto	l9472
  7070                           
  7071                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7072  0A43  3055               	movlw	85
  7073  0A44  0021               	movlb	1	; select bank1
  7074  0A45  00DB               	movwf	??_getRxData^(0+128)
  7075  0A46  0863               	movf	_product^(0+128),w
  7076  0A47  3E02               	addlw	2
  7077  0A48  0086               	movwf	6
  7078  0A49  3002               	movlw	2	; select bank4/5
  7079  0A4A  0087               	movwf	7
  7080  0A4B  085B               	movf	??_getRxData^(0+128),w
  7081  0A4C  0081               	movwf	1
  7082                           
  7083                           ;RF_Control_B1.c: 231: setTxData();
  7084  0A4D  318F  2745         	fcall	_setTxData
  7085                           
  7086                           ;RF_Control_B1.c: 235: } else {
  7087  0A4F  0008               	return
  7088  0A50                     l9472:	
  7089                           
  7090                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7091  0A50  3000               	movlw	0
  7092  0A51  3191  21B2  318A   	fcall	_getMain_All_Error_Status
  7093  0A54  0021               	movlb	1	; select bank1
  7094  0A55  00DB               	movwf	??_getRxData^(0+128)
  7095  0A56  085B               	movf	??_getRxData^(0+128),w
  7096  0A57  00DC               	movwf	getRxData@error^(0+128)
  7097                           
  7098                           ;RF_Control_B1.c: 237: if (error == 0) {
  7099  0A58  08DC               	movf	getRxData@error^(0+128),f
  7100  0A59  1D03               	skipz
  7101  0A5A  2AAA               	goto	l2160
  7102                           
  7103                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7104  0A5B  1F20               	btfss	_RF1^(0+128),6
  7105  0A5C  2A68               	goto	l9484
  7106                           
  7107                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7108  0A5D  0023               	movlb	3	; select bank3
  7109  0A5E  08A0               	movf	_RF_Data^(0+384),f
  7110  0A5F  1D03               	skipz
  7111  0A60  0008               	return
  7112  0A61  0821               	movf	(_RF_Data^(0+384)+1),w
  7113  0A62  3A64               	xorlw	100
  7114  0A63  1D03               	skipz
  7115  0A64  0008               	return
  7116                           
  7117                           ;RF_Control_B1.c: 241: setLog_Code();
  7118  0A65  3191  21E5         	fcall	_setLog_Code
  7119                           
  7120                           ;RF_Control_B1.c: 242: }
  7121                           ;RF_Control_B1.c: 243: } else {
  7122  0A67  0008               	return
  7123  0A68                     l9484:	
  7124                           
  7125                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7126  0A68  0023               	movlb	3	; select bank3
  7127  0A69  0834               	movf	(_RF_Data^(0+384)+20),w
  7128  0A6A  3AD1               	xorlw	209
  7129  0A6B  1903               	skipnz
  7130  0A6C  2A71               	goto	l9488
  7131  0A6D  0834               	movf	(_RF_Data^(0+384)+20),w
  7132  0A6E  3A0A               	xorlw	10
  7133  0A6F  1D03               	skipz
  7134  0A70  0008               	return
  7135  0A71                     l9488:	
  7136                           
  7137                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7138  0A71  08A0               	movf	_RF_Data^(0+384),f
  7139  0A72  1D03               	skipz
  7140  0A73  0008               	return
  7141  0A74  0821               	movf	(_RF_Data^(0+384)+1),w
  7142  0A75  3A02               	xorlw	2
  7143  0A76  1D03               	skipz
  7144  0A77  0008               	return
  7145                           
  7146                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7147  0A78  082C               	movf	(_RF_Data^(0+384)+12),w
  7148  0A79  3AFF               	xorlw	255
  7149  0A7A  1D03               	skipz
  7150  0A7B  2A86               	goto	l9500
  7151  0A7C  082D               	movf	(_RF_Data^(0+384)+13),w
  7152  0A7D  3AFF               	xorlw	255
  7153  0A7E  1D03               	skipz
  7154  0A7F  2A86               	goto	l9500
  7155  0A80  082E               	movf	(_RF_Data^(0+384)+14),w
  7156  0A81  3AFF               	xorlw	255
  7157  0A82  1D03               	skipz
  7158  0A83  2A86               	goto	l9500
  7159                           
  7160                           ;RF_Control_B1.c: 249: __nop();
  7161  0A84  0000               	nop
  7162                           
  7163                           ;RF_Control_B1.c: 250: } else {
  7164  0A85  0008               	return
  7165  0A86                     l9500:	
  7166                           
  7167                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7168  0A86  0021               	movlb	1	; select bank1
  7169  0A87  0863               	movf	_product^(0+128),w
  7170  0A88  3E0C               	addlw	12
  7171  0A89  0086               	movwf	6
  7172  0A8A  3002               	movlw	2	; select bank4/5
  7173  0A8B  0087               	movwf	7
  7174  0A8C  0023               	movlb	3	; select bank3
  7175  0A8D  082C               	movf	(_RF_Data^(0+384)+12),w
  7176  0A8E  0601               	xorwf	1,w
  7177  0A8F  1D03               	skipz
  7178  0A90  0008               	return
  7179  0A91  0021               	movlb	1	; select bank1
  7180  0A92  0863               	movf	_product^(0+128),w
  7181  0A93  3E0D               	addlw	13
  7182  0A94  0086               	movwf	6
  7183  0A95  3002               	movlw	2	; select bank4/5
  7184  0A96  0087               	movwf	7
  7185  0A97  0023               	movlb	3	; select bank3
  7186  0A98  082D               	movf	(_RF_Data^(0+384)+13),w
  7187  0A99  0601               	xorwf	1,w
  7188  0A9A  1D03               	skipz
  7189  0A9B  0008               	return
  7190  0A9C  0021               	movlb	1	; select bank1
  7191  0A9D  0863               	movf	_product^(0+128),w
  7192  0A9E  3E0E               	addlw	14
  7193  0A9F  0086               	movwf	6
  7194  0AA0  3002               	movlw	2	; select bank4/5
  7195  0AA1  0087               	movwf	7
  7196  0AA2  0023               	movlb	3	; select bank3
  7197  0AA3  082E               	movf	(_RF_Data^(0+384)+14),w
  7198  0AA4  0601               	xorwf	1,w
  7199  0AA5  1D03               	skipz
  7200  0AA6  0008               	return
  7201                           
  7202                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7203  0AA7  3189  21C8         	fcall	_setControl_Lights_Table
  7204                           
  7205                           ;RF_Control_B1.c: 253: }
  7206                           ;RF_Control_B1.c: 254: }
  7207                           ;RF_Control_B1.c: 256: }
  7208                           ;RF_Control_B1.c: 267: }
  7209                           ;RF_Control_B1.c: 268: }
  7210                           ;RF_Control_B1.c: 269: } else {
  7211  0AA9  0008               	return
  7212  0AAA                     l2160:	
  7213                           
  7214                           ;RF_Control_B1.c: 270: __nop();
  7215  0AAA  0000               	nop
  7216  0AAB  0008               	return
  7217  0AAC                     __end_of_getRxData:	
  7218                           
  7219                           	psect	text26
  7220  11E5                     __ptext26:	
  7221 ;; *************** function _setLog_Code *****************
  7222 ;; Defined at:
  7223 ;;		line 276 in file "../src/RF_Control_B1.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;		None
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;		None
  7228 ;; Return value:  Size  Location     Type
  7229 ;;		None               void
  7230 ;; Registers used:
  7231 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;Total ram usage:        1 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    7
  7244 ;; This function calls:
  7245 ;;		_setBuz
  7246 ;;		_setMemory_LoopSave
  7247 ;;		_setMemory_Modify
  7248 ;;		_setProductData
  7249 ;; This function is called by:
  7250 ;;		_getRxData
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           
  7255                           ;psect for function _setLog_Code
  7256  11E5                     _setLog_Code:	
  7257                           
  7258                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7259                           
  7260                           ;incstack = 0
  7261                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7262  11E5  0021               	movlb	1	; select bank1
  7263  11E6  1320               	bcf	_RF1^(0+128),6
  7264                           
  7265                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7266  11E7  0023               	movlb	3	; select bank3
  7267  11E8  082C               	movf	(_RF_Data^(0+384)+12),w
  7268  11E9  0020               	movlb	0	; select bank0
  7269  11EA  00E5               	movwf	??_setLog_Code
  7270  11EB  0865               	movf	??_setLog_Code,w
  7271  11EC  00E2               	movwf	setProductData@value
  7272  11ED  300C               	movlw	12
  7273  11EE  319C  242D  3191   	fcall	_setProductData
  7274                           
  7275                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7276  11F1  0023               	movlb	3	; select bank3
  7277  11F2  082D               	movf	(_RF_Data^(0+384)+13),w
  7278  11F3  0020               	movlb	0	; select bank0
  7279  11F4  00E5               	movwf	??_setLog_Code
  7280  11F5  0865               	movf	??_setLog_Code,w
  7281  11F6  00E2               	movwf	setProductData@value
  7282  11F7  300D               	movlw	13
  7283  11F8  319C  242D  3191   	fcall	_setProductData
  7284                           
  7285                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7286  11FB  0023               	movlb	3	; select bank3
  7287  11FC  082E               	movf	(_RF_Data^(0+384)+14),w
  7288  11FD  0020               	movlb	0	; select bank0
  7289  11FE  00E5               	movwf	??_setLog_Code
  7290  11FF  0865               	movf	??_setLog_Code,w
  7291  1200  00E2               	movwf	setProductData@value
  7292  1201  300E               	movlw	14
  7293  1202  319C  242D  3191   	fcall	_setProductData
  7294                           
  7295                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7296  1205  3064               	movlw	100
  7297  1206  0020               	movlb	0	; select bank0
  7298  1207  00A9               	movwf	setBuz@time
  7299  1208  3000               	movlw	0
  7300  1209  00AA               	movwf	setBuz@time+1
  7301  120A  3001               	movlw	1
  7302  120B  3195  2551  3191   	fcall	_setBuz
  7303                           
  7304                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7305  120E  0021               	movlb	1	; select bank1
  7306  120F  1EAE               	btfss	_myMain^(0+128),5
  7307  1210  2A15               	goto	l2175
  7308                           
  7309                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7310  1211  3001               	movlw	1
  7311  1212  319D  25CA  3191   	fcall	_setMemory_LoopSave
  7312  1215                     l2175:	
  7313                           
  7314                           ;RF_Control_B1.c: 284: }
  7315                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7316  1215  3001               	movlw	1
  7317  1216  319D  2591         	fcall	_setMemory_Modify
  7318  1218  0008               	return
  7319  1219                     __end_of_setLog_Code:	
  7320                           
  7321                           	psect	text27
  7322  1DCA                     __ptext27:	
  7323 ;; *************** function _setMemory_LoopSave *****************
  7324 ;; Defined at:
  7325 ;;		line 1089 in file "../src/MCU_B1.c"
  7326 ;; Parameters:    Size  Location     Type
  7327 ;;  command         1    wreg     unsigned char 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;  command         1    1[BANK0 ] unsigned char 
  7330 ;; Return value:  Size  Location     Type
  7331 ;;		None               void
  7332 ;; Registers used:
  7333 ;;		wreg, status,2, status,0
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;Total ram usage:        2 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:    5
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		_setLog_Code
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           
  7354                           ;psect for function _setMemory_LoopSave
  7355  1DCA                     _setMemory_LoopSave:	
  7356                           
  7357                           ;incstack = 0
  7358                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7359                           ;setMemory_LoopSave@command stored from wreg
  7360  1DCA  0020               	movlb	0	; select bank0
  7361  1DCB  00A1               	movwf	setMemory_LoopSave@command
  7362                           
  7363                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7364  1DCC  0821               	movf	setMemory_LoopSave@command,w
  7365  1DCD  3A01               	xorlw	1
  7366  1DCE  3000               	movlw	0
  7367  1DCF  1903               	skipnz
  7368  1DD0  3001               	movlw	1
  7369  1DD1  00A0               	movwf	??_setMemory_LoopSave
  7370  1DD2  0DA0               	rlf	??_setMemory_LoopSave,f
  7371  1DD3  0DA0               	rlf	??_setMemory_LoopSave,f
  7372  1DD4  0024               	movlb	4	; select bank4
  7373  1DD5  0844               	movf	(_Memory^(0+512)+36),w
  7374  1DD6  0020               	movlb	0	; select bank0
  7375  1DD7  0620               	xorwf	??_setMemory_LoopSave,w
  7376  1DD8  39FB               	andlw	-5
  7377  1DD9  0620               	xorwf	??_setMemory_LoopSave,w
  7378  1DDA  0024               	movlb	4	; select bank4
  7379  1DDB  00C4               	movwf	(_Memory^(0+512)+36)
  7380  1DDC  0008               	return
  7381  1DDD                     __end_of_setMemory_LoopSave:	
  7382                           
  7383                           	psect	text28
  7384  09C8                     __ptext28:	
  7385 ;; *************** function _setControl_Lights_Table *****************
  7386 ;; Defined at:
  7387 ;;		line 289 in file "../src/RF_Control_B1.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;		None
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;		None
  7392 ;; Return value:  Size  Location     Type
  7393 ;;		None               void
  7394 ;; Registers used:
  7395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;Total ram usage:        0 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    9
  7408 ;; This function calls:
  7409 ;;		_getDimmerLights_Status
  7410 ;;		_getMain_All_LightsStatus
  7411 ;;		_setCmd_Status
  7412 ;;		_setDimmerLights_SwOff
  7413 ;;		_setDimmerLights_SwOn
  7414 ;;		_setProductData
  7415 ;;		_setRFSW_AdjControl
  7416 ;;		_setRFSW_Control
  7417 ;;		_setTxData
  7418 ;; This function is called by:
  7419 ;;		_getRxData
  7420 ;; This function uses a non-reentrant model
  7421 ;;
  7422                           
  7423                           
  7424                           ;psect for function _setControl_Lights_Table
  7425  09C8                     _setControl_Lights_Table:	
  7426                           
  7427                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7428                           
  7429                           ;incstack = 0
  7430                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7431  09C8  2A2A               	goto	l9178
  7432  09C9                     l9160:	
  7433                           ;RF_Control_B1.c: 292: case 0x00:
  7434                           
  7435                           
  7436                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7437  09C9  319B  23DF  3189   	fcall	_getMain_All_LightsStatus
  7438  09CC  3A01               	xorlw	1
  7439  09CD  1D03               	skipz
  7440  09CE  29E5               	goto	l9168
  7441                           
  7442                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7443  09CF  3001               	movlw	1
  7444  09D0  319C  24D1  3189   	fcall	_getDimmerLights_Status
  7445  09D3  3A01               	xorlw	1
  7446  09D4  1D03               	skipz
  7447  09D5  29DE               	goto	l9166
  7448                           
  7449                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7450  09D6  3001               	movlw	1
  7451  09D7  3192  2219  3189   	fcall	_setDimmerLights_SwOn
  7452                           
  7453                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7454  09DA  3001               	movlw	1
  7455  09DB  3192  22BB  3189   	fcall	_setDimmerLights_SwOff
  7456  09DE                     l9166:	
  7457                           
  7458                           ;RF_Control_B1.c: 299: }
  7459                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7460  09DE  0020               	movlb	0	; select bank0
  7461  09DF  01A0               	clrf	setCmd_Status@cmd
  7462  09E0  0AA0               	incf	setCmd_Status@cmd,f
  7463  09E1  3001               	movlw	1
  7464  09E2  319E  26B4         	fcall	_setCmd_Status
  7465                           
  7466                           ;RF_Control_B1.c: 315: } else {
  7467  09E4  0008               	return
  7468  09E5                     l9168:	
  7469                           
  7470                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7471  09E5  0020               	movlb	0	; select bank0
  7472  09E6  01E2               	clrf	setProductData@value
  7473  09E7  3009               	movlw	9
  7474  09E8  319C  242D  3189   	fcall	_setProductData
  7475                           
  7476                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7477  09EB  0020               	movlb	0	; select bank0
  7478  09EC  01E2               	clrf	setProductData@value
  7479  09ED  300B               	movlw	11
  7480  09EE  319C  242D  3189   	fcall	_setProductData
  7481                           
  7482                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7483  09F1  0020               	movlb	0	; select bank0
  7484  09F2  01E2               	clrf	setProductData@value
  7485  09F3  300F               	movlw	15
  7486  09F4  319C  242D  3189   	fcall	_setProductData
  7487                           
  7488                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7489  09F7  0020               	movlb	0	; select bank0
  7490  09F8  01E2               	clrf	setProductData@value
  7491  09F9  3011               	movlw	17
  7492  09FA  319C  242D  3189   	fcall	_setProductData
  7493                           
  7494                           ;RF_Control_B1.c: 320: setTxData();
  7495  09FD  318F  2745         	fcall	_setTxData
  7496                           
  7497                           ;RF_Control_B1.c: 321: }
  7498                           ;RF_Control_B1.c: 322: break;
  7499  09FF  0008               	return
  7500  0A00                     l9170:	
  7501                           ;RF_Control_B1.c: 324: case 0x20:
  7502                           
  7503                           
  7504                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7505  0A00  0020               	movlb	0	; select bank0
  7506  0A01  01E2               	clrf	setProductData@value
  7507  0A02  3009               	movlw	9
  7508  0A03  319C  242D  3189   	fcall	_setProductData
  7509                           
  7510                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7511  0A06  0020               	movlb	0	; select bank0
  7512  0A07  01E2               	clrf	setProductData@value
  7513  0A08  300B               	movlw	11
  7514  0A09  319C  242D  3189   	fcall	_setProductData
  7515                           
  7516                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7517  0A0C  0021               	movlb	1	; select bank1
  7518  0A0D  0863               	movf	_product^(0+128),w
  7519  0A0E  0086               	movwf	6
  7520  0A0F  3002               	movlw	2	; select bank4/5
  7521  0A10  0087               	movwf	7
  7522  0A11  3002               	movlw	2	; select bank4/5
  7523  0A12  3F4F               	moviw [15]fsr1
  7524  0A13  0020               	movlb	0	; select bank0
  7525  0A14  00E2               	movwf	setProductData@value
  7526  0A15  300F               	movlw	15
  7527  0A16  319C  242D  3189   	fcall	_setProductData
  7528                           
  7529                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7530  0A19  0020               	movlb	0	; select bank0
  7531  0A1A  01E2               	clrf	setProductData@value
  7532  0A1B  3011               	movlw	17
  7533  0A1C  319C  242D  3189   	fcall	_setProductData
  7534                           
  7535                           ;RF_Control_B1.c: 329: setTxData();
  7536  0A1F  318F  2745         	fcall	_setTxData
  7537                           
  7538                           ;RF_Control_B1.c: 330: break;
  7539  0A21  0008               	return
  7540  0A22                     l9172:	
  7541                           ;RF_Control_B1.c: 333: case 0x01:
  7542                           
  7543                           
  7544                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7545  0A22  3001               	movlw	1
  7546  0A23  3193  23E2         	fcall	_setRFSW_Control
  7547                           
  7548                           ;RF_Control_B1.c: 335: break;
  7549  0A25  0008               	return
  7550  0A26                     l9174:	
  7551                           ;RF_Control_B1.c: 339: case 0x11:
  7552                           
  7553                           
  7554                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7555  0A26  3001               	movlw	1
  7556  0A27  318B  231E         	fcall	_setRFSW_AdjControl
  7557                           
  7558                           ;RF_Control_B1.c: 370: }
  7559                           
  7560                           ;RF_Control_B1.c: 341: break;
  7561  0A29  0008               	return
  7562  0A2A                     l9178:	
  7563  0A2A  0023               	movlb	3	; select bank3
  7564  0A2B  082F               	movf	(_RF_Data^(0+384)+15),w
  7565                           
  7566                           ; Switch size 1, requested type "space"
  7567                           ; Number of cases is 4, Range of values is 0 to 32
  7568                           ; switch strategies available:
  7569                           ; Name         Instructions Cycles
  7570                           ; simple_byte           13     7 (average)
  7571                           ; direct_byte           72     6 (fixed)
  7572                           ; jumptable            260     6 (fixed)
  7573                           ;	Chosen strategy is simple_byte
  7574  0A2C  3A00               	xorlw	0	; case 0
  7575  0A2D  1903               	skipnz
  7576  0A2E  29C9               	goto	l9160
  7577  0A2F  3A01               	xorlw	1	; case 1
  7578  0A30  1903               	skipnz
  7579  0A31  2A22               	goto	l9172
  7580  0A32  3A10               	xorlw	16	; case 17
  7581  0A33  1903               	skipnz
  7582  0A34  2A26               	goto	l9174
  7583  0A35  3A31               	xorlw	49	; case 32
  7584  0A36  1903               	skipnz
  7585  0A37  2A00               	goto	l9170
  7586  0A38  2A39               	goto	l2188
  7587  0A39                     l2188:	
  7588  0A39  0008               	return
  7589  0A3A                     __end_of_setControl_Lights_Table:	
  7590                           
  7591                           	psect	text29
  7592  13E2                     __ptext29:	
  7593 ;; *************** function _setRFSW_Control *****************
  7594 ;; Defined at:
  7595 ;;		line 378 in file "../src/RF_Control_B1.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  sw              1    wreg     unsigned char 
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  sw              1   79[BANK0 ] unsigned char 
  7600 ;;  status          1   78[BANK0 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;Total ram usage:        3 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    8
  7617 ;; This function calls:
  7618 ;;		_getDimmerLights_Status
  7619 ;;		_setBuz
  7620 ;;		_setDelayOff_GO
  7621 ;;		_setDimmerLights_SwOff
  7622 ;;		_setDimmerLights_SwOn
  7623 ;;		_setRF_DimmerLights
  7624 ;;		_setTxData
  7625 ;; This function is called by:
  7626 ;;		_setControl_Lights_Table
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           
  7631                           ;psect for function _setRFSW_Control
  7632  13E2                     _setRFSW_Control:	
  7633                           
  7634                           ;incstack = 0
  7635                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7636                           ;setRFSW_Control@sw stored from wreg
  7637  13E2  0020               	movlb	0	; select bank0
  7638  13E3  00EF               	movwf	setRFSW_Control@sw
  7639                           
  7640                           ;RF_Control_B1.c: 379: char status = 0;
  7641  13E4  01EE               	clrf	setRFSW_Control@status
  7642                           
  7643                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7644  13E5  0023               	movlb	3	; select bank3
  7645  13E6  0830               	movf	(_RF_Data^(0+384)+16),w
  7646  13E7  3A80               	xorlw	128
  7647  13E8  1D03               	skipz
  7648  13E9  2C15               	goto	l8904
  7649                           
  7650                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7651  13EA  0020               	movlb	0	; select bank0
  7652  13EB  01E5               	clrf	setDelayOff_GO@command
  7653  13EC  0AE5               	incf	setDelayOff_GO@command,f
  7654  13ED  0023               	movlb	3	; select bank3
  7655  13EE  0831               	movf	(_RF_Data^(0+384)+17),w
  7656  13EF  0020               	movlb	0	; select bank0
  7657  13F0  00ED               	movwf	??_setRFSW_Control
  7658  13F1  086D               	movf	??_setRFSW_Control,w
  7659  13F2  00E6               	movwf	setDelayOff_GO@value
  7660  13F3  086F               	movf	setRFSW_Control@sw,w
  7661  13F4  318C  24AB  3193   	fcall	_setDelayOff_GO
  7662                           
  7663                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7664  13F7  0020               	movlb	0	; select bank0
  7665  13F8  086F               	movf	setRFSW_Control@sw,w
  7666  13F9  319C  24D1  3193   	fcall	_getDimmerLights_Status
  7667  13FC  3A01               	xorlw	1
  7668  13FD  1D03               	skipz
  7669  13FE  2C15               	goto	l8904
  7670                           
  7671                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7672  13FF  3064               	movlw	100
  7673  1400  0020               	movlb	0	; select bank0
  7674  1401  00A9               	movwf	setBuz@time
  7675  1402  3000               	movlw	0
  7676  1403  00AA               	movwf	setBuz@time+1
  7677  1404  3001               	movlw	1
  7678  1405  3195  2551  3193   	fcall	_setBuz
  7679                           
  7680                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7681  1408  0020               	movlb	0	; select bank0
  7682  1409  01E5               	clrf	setRF_DimmerLights@on
  7683  140A  0AE5               	incf	setRF_DimmerLights@on,f
  7684  140B  086F               	movf	setRFSW_Control@sw,w
  7685  140C  3197  2730  3193   	fcall	_setRF_DimmerLights
  7686                           
  7687                           ;RF_Control_B1.c: 386: setTxData();
  7688  140F  318F  2745  3193   	fcall	_setTxData
  7689                           
  7690                           ;RF_Control_B1.c: 387: status = 1;
  7691  1412  0020               	movlb	0	; select bank0
  7692  1413  01EE               	clrf	setRFSW_Control@status
  7693  1414  0AEE               	incf	setRFSW_Control@status,f
  7694  1415                     l8904:	
  7695                           
  7696                           ;RF_Control_B1.c: 388: }
  7697                           ;RF_Control_B1.c: 389: }
  7698                           ;RF_Control_B1.c: 391: if (status == 0) {
  7699  1415  0020               	movlb	0	; select bank0
  7700  1416  08EE               	movf	setRFSW_Control@status,f
  7701  1417  1D03               	skipz
  7702  1418  0008               	return
  7703                           
  7704                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7705  1419  086F               	movf	setRFSW_Control@sw,w
  7706  141A  3192  2219  3193   	fcall	_setDimmerLights_SwOn
  7707                           
  7708                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7709  141D  0020               	movlb	0	; select bank0
  7710  141E  086F               	movf	setRFSW_Control@sw,w
  7711  141F  3192  22BB         	fcall	_setDimmerLights_SwOff
  7712  1421  0008               	return
  7713  1422                     __end_of_setRFSW_Control:	
  7714                           
  7715                           	psect	text30
  7716  0B1E                     __ptext30:	
  7717 ;; *************** function _setRFSW_AdjControl *****************
  7718 ;; Defined at:
  7719 ;;		line 400 in file "../src/RF_Control_B1.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;  sw              1    wreg     unsigned char 
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;  sw              1   72[BANK0 ] unsigned char 
  7724 ;;  status          1   71[BANK0 ] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;		None               void
  7727 ;; Registers used:
  7728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;Total ram usage:        4 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    8
  7741 ;; This function calls:
  7742 ;;		_getDimmerLights_PercentToValue
  7743 ;;		_getDimmerLights_Status
  7744 ;;		_setDimmerIntr_Dimming_RF
  7745 ;;		_setDimmerIntr_MaxmumValue
  7746 ;;		_setDimmerLights_DimmingRun
  7747 ;;		_setDimmerLights_SwOff
  7748 ;;		_setDimmerLights_SwOn
  7749 ;;		_setMemory_Modify
  7750 ;;		_setProductData
  7751 ;;		_setTxData
  7752 ;; This function is called by:
  7753 ;;		_setControl_Lights_Table
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           
  7758                           ;psect for function _setRFSW_AdjControl
  7759  0B1E                     _setRFSW_AdjControl:	
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7763                           ;setRFSW_AdjControl@sw stored from wreg
  7764  0B1E  0020               	movlb	0	; select bank0
  7765  0B1F  00E8               	movwf	setRFSW_AdjControl@sw
  7766                           
  7767                           ;RF_Control_B1.c: 401: char status = 0;
  7768  0B20  01E7               	clrf	setRFSW_AdjControl@status
  7769                           
  7770                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7771  0B21  0868               	movf	setRFSW_AdjControl@sw,w
  7772  0B22  319C  24D1  318B   	fcall	_getDimmerLights_Status
  7773  0B25  0020               	movlb	0	; select bank0
  7774  0B26  00E5               	movwf	??_setRFSW_AdjControl
  7775  0B27  0865               	movf	??_setRFSW_AdjControl,w
  7776  0B28  00E7               	movwf	setRFSW_AdjControl@status
  7777                           
  7778                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7779  0B29  3065               	movlw	101
  7780  0B2A  0023               	movlb	3	; select bank3
  7781  0B2B  0229               	subwf	(_RF_Data^(0+384)+9),w
  7782  0B2C  1C03               	skipc
  7783  0B2D  2B35               	goto	l8916
  7784                           
  7785                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7786  0B2E  3064               	movlw	100
  7787  0B2F  0020               	movlb	0	; select bank0
  7788  0B30  00E5               	movwf	??_setRFSW_AdjControl
  7789  0B31  0865               	movf	??_setRFSW_AdjControl,w
  7790  0B32  0023               	movlb	3	; select bank3
  7791  0B33  00A9               	movwf	(_RF_Data^(0+384)+9)
  7792                           
  7793                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7794  0B34  2B3A               	goto	l8920
  7795  0B35                     l8916:	
  7796  0B35  08A9               	movf	(_RF_Data^(0+384)+9),f
  7797  0B36  1D03               	skipz
  7798  0B37  2B3A               	goto	l8920
  7799                           
  7800                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7801  0B38  01A9               	clrf	(_RF_Data^(0+384)+9)
  7802  0B39  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7803  0B3A                     l8920:	
  7804                           
  7805                           ;RF_Control_B1.c: 409: }
  7806                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7807  0B3A  0829               	movf	(_RF_Data^(0+384)+9),w
  7808  0B3B  0020               	movlb	0	; select bank0
  7809  0B3C  00E5               	movwf	??_setRFSW_AdjControl
  7810  0B3D  0865               	movf	??_setRFSW_AdjControl,w
  7811  0B3E  00E2               	movwf	setProductData@value
  7812  0B3F  3009               	movlw	9
  7813  0B40  319C  242D  318B   	fcall	_setProductData
  7814                           
  7815                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7816  0B43  0020               	movlb	0	; select bank0
  7817  0B44  0868               	movf	setRFSW_AdjControl@sw,w
  7818  0B45  00E5               	movwf	??_setRFSW_AdjControl
  7819  0B46  0865               	movf	??_setRFSW_AdjControl,w
  7820  0B47  00E2               	movwf	setProductData@value
  7821  0B48  300B               	movlw	11
  7822  0B49  319C  242D  318B   	fcall	_setProductData
  7823                           
  7824                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7825  0B4C  0020               	movlb	0	; select bank0
  7826  0B4D  0868               	movf	setRFSW_AdjControl@sw,w
  7827  0B4E  3E1A               	addlw	26
  7828  0B4F  0021               	movlb	1	; select bank1
  7829  0B50  0763               	addwf	_product^(0+128),w
  7830  0B51  0020               	movlb	0	; select bank0
  7831  0B52  00E5               	movwf	??_setRFSW_AdjControl
  7832  0B53  0865               	movf	??_setRFSW_AdjControl,w
  7833  0B54  0086               	movwf	6
  7834  0B55  3002               	movlw	2	; select bank4/5
  7835  0B56  0087               	movwf	7
  7836  0B57  0801               	movf	1,w
  7837  0B58  00E6               	movwf	??_setRFSW_AdjControl+1
  7838  0B59  0866               	movf	??_setRFSW_AdjControl+1,w
  7839  0B5A  00E2               	movwf	setProductData@value
  7840  0B5B  3011               	movlw	17
  7841  0B5C  319C  242D  318B   	fcall	_setProductData
  7842                           
  7843                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7844  0B5F  0023               	movlb	3	; select bank3
  7845  0B60  0829               	movf	(_RF_Data^(0+384)+9),w
  7846  0B61  0020               	movlb	0	; select bank0
  7847  0B62  00E5               	movwf	??_setRFSW_AdjControl
  7848  0B63  0865               	movf	??_setRFSW_AdjControl,w
  7849  0B64  00E2               	movwf	setProductData@value
  7850  0B65  0868               	movf	setRFSW_AdjControl@sw,w
  7851  0B66  3E14               	addlw	20
  7852  0B67  319C  242D  318B   	fcall	_setProductData
  7853                           
  7854                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  7855  0B6A  3001               	movlw	1
  7856  0B6B  319D  2591  318B   	fcall	_setMemory_Modify
  7857                           
  7858                           ;RF_Control_B1.c: 425: if (status == 1) {
  7859  0B6E  0020               	movlb	0	; select bank0
  7860  0B6F  0867               	movf	setRFSW_AdjControl@status,w
  7861  0B70  3A01               	xorlw	1
  7862  0B71  1D03               	skipz
  7863  0B72  2B8A               	goto	l8930
  7864                           
  7865                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7866  0B73  0023               	movlb	3	; select bank3
  7867  0B74  0829               	movf	(_RF_Data^(0+384)+9),w
  7868  0B75  3196  2666  318B   	fcall	_getDimmerLights_PercentToValue
  7869  0B78  0020               	movlb	0	; select bank0
  7870  0B79  00E5               	movwf	??_setRFSW_AdjControl
  7871  0B7A  0865               	movf	??_setRFSW_AdjControl,w
  7872  0B7B  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  7873  0B7C  0868               	movf	setRFSW_AdjControl@sw,w
  7874  0B7D  319C  2439  318B   	fcall	_setDimmerIntr_MaxmumValue
  7875                           
  7876                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  7877  0B80  0020               	movlb	0	; select bank0
  7878  0B81  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  7879  0B82  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  7880  0B83  0868               	movf	setRFSW_AdjControl@sw,w
  7881  0B84  319E  269C  318B   	fcall	_setDimmerIntr_Dimming_RF
  7882                           
  7883                           ;RF_Control_B1.c: 428: setTxData();
  7884  0B87  318F  2745         	fcall	_setTxData
  7885                           
  7886                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  7887  0B89  0008               	return
  7888  0B8A                     l8930:	
  7889  0B8A  0020               	movlb	0	; select bank0
  7890  0B8B  08E7               	movf	setRFSW_AdjControl@status,f
  7891  0B8C  1D03               	skipz
  7892  0B8D  0008               	return
  7893                           
  7894                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  7895  0B8E  01A2               	clrf	setDimmerLights_DimmingRun@command
  7896  0B8F  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  7897  0B90  0868               	movf	setRFSW_AdjControl@sw,w
  7898  0B91  319F  2734  318B   	fcall	_setDimmerLights_DimmingRun
  7899                           
  7900                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  7901  0B94  0020               	movlb	0	; select bank0
  7902  0B95  0868               	movf	setRFSW_AdjControl@sw,w
  7903  0B96  3192  2219  318B   	fcall	_setDimmerLights_SwOn
  7904                           
  7905                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  7906  0B99  0020               	movlb	0	; select bank0
  7907  0B9A  0868               	movf	setRFSW_AdjControl@sw,w
  7908  0B9B  3192  22BB         	fcall	_setDimmerLights_SwOff
  7909  0B9D  0008               	return
  7910  0B9E                     __end_of_setRFSW_AdjControl:	
  7911                           
  7912                           	psect	text31
  7913  1F34                     __ptext31:	
  7914 ;; *************** function _setDimmerLights_DimmingRun *****************
  7915 ;; Defined at:
  7916 ;;		line 1079 in file "../src/Dimmer_B1.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  lights          1    wreg     unsigned char 
  7919 ;;  command         1    2[BANK0 ] unsigned char 
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;  lights          1    4[BANK0 ] unsigned char 
  7922 ;; Return value:  Size  Location     Type
  7923 ;;		None               void
  7924 ;; Registers used:
  7925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7926 ;; Tracked objects:
  7927 ;;		On entry : 0/0
  7928 ;;		On exit  : 0/0
  7929 ;;		Unchanged: 0/0
  7930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7931 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;Total ram usage:        3 bytes
  7936 ;; Hardware stack levels used:    1
  7937 ;; Hardware stack levels required when called:    6
  7938 ;; This function calls:
  7939 ;;		_DimmerLights_SelectPointer
  7940 ;; This function is called by:
  7941 ;;		_setRFSW_AdjControl
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           
  7946                           ;psect for function _setDimmerLights_DimmingRun
  7947  1F34                     _setDimmerLights_DimmingRun:	
  7948                           
  7949                           ;incstack = 0
  7950                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7951                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7952  1F34  0020               	movlb	0	; select bank0
  7953  1F35  00A4               	movwf	setDimmerLights_DimmingRun@lights
  7954                           
  7955                           ;Dimmer_B1.c: 1080: DimmerLights_SelectPointer(lights);
  7956  1F36  0824               	movf	setDimmerLights_DimmingRun@lights,w
  7957  1F37  319C  2421         	fcall	_DimmerLights_SelectPointer
  7958                           
  7959                           ;Dimmer_B1.c: 1081: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7960  1F39  0020               	movlb	0	; select bank0
  7961  1F3A  0822               	movf	setDimmerLights_DimmingRun@command,w
  7962  1F3B  3A01               	xorlw	1
  7963  1F3C  3000               	movlw	0
  7964  1F3D  1903               	skipnz
  7965  1F3E  3001               	movlw	1
  7966  1F3F  00A3               	movwf	??_setDimmerLights_DimmingRun
  7967  1F40  0021               	movlb	1	; select bank1
  7968  1F41  0A4A               	incf	_DimmerLights^(0+128),w
  7969  1F42  0086               	movwf	6
  7970  1F43  3001               	movlw	1	; select bank2/3
  7971  1F44  0087               	movwf	7
  7972  1F45  0020               	movlb	0	; select bank0
  7973  1F46  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  7974  1F47  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  7975  1F48  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  7976  1F49  0801               	movf	1,w
  7977  1F4A  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  7978  1F4B  39BF               	andlw	-65
  7979  1F4C  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  7980  1F4D  0081               	movwf	1
  7981  1F4E  0008               	return
  7982  1F4F                     __end_of_setDimmerLights_DimmingRun:	
  7983                           
  7984                           	psect	text32
  7985  1D15                     __ptext32:	
  7986 ;; *************** function _getRF_KeyStatus *****************
  7987 ;; Defined at:
  7988 ;;		line 166 in file "../src/RF_Control_B1.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;		None
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;  key             1    1[BANK0 ] unsigned char 
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  1    wreg      unsigned char 
  7995 ;; Registers used:
  7996 ;;		wreg, status,2
  7997 ;; Tracked objects:
  7998 ;;		On entry : 0/0
  7999 ;;		On exit  : 0/0
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;Total ram usage:        3 bytes
  8007 ;; Hardware stack levels used:    1
  8008 ;; Hardware stack levels required when called:    5
  8009 ;; This function calls:
  8010 ;;		Nothing
  8011 ;; This function is called by:
  8012 ;;		_setRF_Main
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           
  8017                           ;psect for function _getRF_KeyStatus
  8018  1D15                     _getRF_KeyStatus:	
  8019                           
  8020                           ;RF_Control_B1.c: 167: char key = 0;
  8021                           
  8022                           ;incstack = 0
  8023                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8024  1D15  0020               	movlb	0	; select bank0
  8025  1D16  01A1               	clrf	getRF_KeyStatus@key
  8026                           
  8027                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8028  1D17  01A2               	clrf	_getRF_KeyStatus$5346
  8029  1D18  0AA2               	incf	_getRF_KeyStatus$5346,f
  8030  1D19  1F0C               	btfss	12,6	;volatile
  8031  1D1A  1A0C               	btfsc	12,4	;volatile
  8032  1D1B  2D20               	goto	l6924
  8033  1D1C  1C0C               	btfss	12,0	;volatile
  8034  1D1D  1B8C               	btfsc	12,7	;volatile
  8035  1D1E  2D20               	goto	l6924
  8036  1D1F  01A2               	clrf	_getRF_KeyStatus$5346
  8037  1D20                     l6924:	
  8038  1D20  0822               	movf	_getRF_KeyStatus$5346,w
  8039  1D21  00A0               	movwf	??_getRF_KeyStatus
  8040  1D22  0820               	movf	??_getRF_KeyStatus,w
  8041  1D23  00A1               	movwf	getRF_KeyStatus@key
  8042                           
  8043                           ;RF_Control_B1.c: 179: return key;
  8044  1D24  0821               	movf	getRF_KeyStatus@key,w
  8045  1D25  0008               	return
  8046  1D26                     __end_of_getRF_KeyStatus:	
  8047                           
  8048                           	psect	text33
  8049  1D04                     __ptext33:	
  8050 ;; *************** function _getBuz_GO *****************
  8051 ;; Defined at:
  8052 ;;		line 82 in file "../src/Buzzer_B1.c"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;		None
  8055 ;; Auto vars:     Size  Location     Type
  8056 ;;  i               2    4[BANK0 ] int 
  8057 ;; Return value:  Size  Location     Type
  8058 ;;                  2    0[BANK0 ] int 
  8059 ;; Registers used:
  8060 ;;		wreg, status,2, status,0
  8061 ;; Tracked objects:
  8062 ;;		On entry : 0/0
  8063 ;;		On exit  : 0/0
  8064 ;;		Unchanged: 0/0
  8065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8066 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;Total ram usage:        6 bytes
  8071 ;; Hardware stack levels used:    1
  8072 ;; Hardware stack levels required when called:    5
  8073 ;; This function calls:
  8074 ;;		Nothing
  8075 ;; This function is called by:
  8076 ;;		_setRF_Main
  8077 ;; This function uses a non-reentrant model
  8078 ;;
  8079                           
  8080                           
  8081                           ;psect for function _getBuz_GO
  8082  1D04                     _getBuz_GO:	
  8083                           
  8084                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8085                           
  8086                           ;incstack = 0
  8087                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8088  1D04  0022               	movlb	2	; select bank2
  8089  1D05  0C20               	rrf	_Buz1^(0+256),w
  8090  1D06  3901               	andlw	1
  8091  1D07  0020               	movlb	0	; select bank0
  8092  1D08  00A2               	movwf	??_getBuz_GO
  8093  1D09  01A3               	clrf	??_getBuz_GO+1
  8094  1D0A  0822               	movf	??_getBuz_GO,w
  8095  1D0B  00A4               	movwf	getBuz_GO@i
  8096  1D0C  0823               	movf	??_getBuz_GO+1,w
  8097  1D0D  00A5               	movwf	getBuz_GO@i+1
  8098                           
  8099                           ;Buzzer_B1.c: 84: return i;
  8100  1D0E  0825               	movf	getBuz_GO@i+1,w
  8101  1D0F  01A1               	clrf	?_getBuz_GO+1
  8102  1D10  07A1               	addwf	?_getBuz_GO+1,f
  8103  1D11  0824               	movf	getBuz_GO@i,w
  8104  1D12  01A0               	clrf	?_getBuz_GO
  8105  1D13  07A0               	addwf	?_getBuz_GO,f
  8106  1D14  0008               	return
  8107  1D15                     __end_of_getBuz_GO:	
  8108                           
  8109                           	psect	text34
  8110  1000                     __ptext34:	
  8111 ;; *************** function _RF_RxDisable *****************
  8112 ;; Defined at:
  8113 ;;		line 154 in file "../src/RF_Control_B1.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;		None
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;		None
  8118 ;; Return value:  Size  Location     Type
  8119 ;;		None               void
  8120 ;; Registers used:
  8121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;Total ram usage:        0 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    7
  8134 ;; This function calls:
  8135 ;;		_CC2500_WriteCommand
  8136 ;; This function is called by:
  8137 ;;		_setRF_Main
  8138 ;; This function uses a non-reentrant model
  8139 ;;
  8140                           
  8141                           
  8142                           ;psect for function _RF_RxDisable
  8143  1000                     _RF_RxDisable:	
  8144                           
  8145                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8146                           
  8147                           ;incstack = 0
  8148                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8149  1000  0021               	movlb	1	; select bank1
  8150  1001  18A0               	btfsc	_RF1^(0+128),1
  8151  1002  2805               	goto	l2145
  8152  1003  1DA0               	btfss	_RF1^(0+128),3
  8153  1004  0008               	return
  8154  1005                     l2145:	
  8155                           
  8156                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8157  1005  11A0               	bcf	_RF1^(0+128),3
  8158                           
  8159                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8160  1006  10A0               	bcf	_RF1^(0+128),1
  8161                           
  8162                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8163  1007  3036               	movlw	54
  8164  1008  319F  271A  3190   	fcall	_CC2500_WriteCommand
  8165                           
  8166                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8167  100B  303A               	movlw	58
  8168  100C  319F  271A         	fcall	_CC2500_WriteCommand
  8169  100E  0008               	return
  8170  100F                     __end_of_RF_RxDisable:	
  8171                           
  8172                           	psect	text35
  8173  087D                     __ptext35:	
  8174 ;; *************** function _CC2500_TxData *****************
  8175 ;; Defined at:
  8176 ;;		line 32 in file "../src/CC2500_B1.c"
  8177 ;; Parameters:    Size  Location     Type
  8178 ;;		None
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;		None               void
  8183 ;; Registers used:
  8184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : 0/0
  8187 ;;		On exit  : 0/0
  8188 ;;		Unchanged: 0/0
  8189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;Total ram usage:        2 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    7
  8197 ;; This function calls:
  8198 ;;		_CC2500_WriteByte
  8199 ;;		_CC2500_WriteCommand
  8200 ;;		_RF_Timeout_Counter
  8201 ;;		_setRF_TimeoutCleared
  8202 ;; This function is called by:
  8203 ;;		_setRF_Main
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           
  8208                           ;psect for function _CC2500_TxData
  8209  087D                     _CC2500_TxData:	
  8210                           
  8211                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8212                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8213                           
  8214                           ;incstack = 0
  8215                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8216  087D  3036               	movlw	54
  8217  087E  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8218                           
  8219                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8220  0881  303B               	movlw	59
  8221  0882  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8222                           
  8223                           ;CC2500_B1.c: 38: RC0 = 0;
  8224  0885  0020               	movlb	0	; select bank0
  8225  0886  100E               	bcf	14,0	;volatile
  8226                           
  8227                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8228  0887  307F               	movlw	127
  8229  0888  00A4               	movwf	??_CC2500_TxData
  8230  0889  0824               	movf	??_CC2500_TxData,w
  8231  088A  0021               	movlb	1	; select bank1
  8232  088B  00CD               	movwf	_SPI0Buffer^(0+128)
  8233                           
  8234                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8235  088C  2890               	goto	l9192
  8236  088D                     l9190:	
  8237                           
  8238                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8239  088D  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8240  0890                     l9192:	
  8241  0890  0020               	movlb	0	; select bank0
  8242  0891  1E8E               	btfss	14,5	;volatile
  8243  0892  2896               	goto	l9196
  8244  0893  0021               	movlb	1	; select bank1
  8245  0894  1F21               	btfss	(_RF1^(0+128)+1),6
  8246  0895  288D               	goto	l9190
  8247  0896                     l9196:	
  8248                           
  8249                           ;CC2500_B1.c: 42: };
  8250                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8251  0896  319B  236C  3188   	fcall	_setRF_TimeoutCleared
  8252                           
  8253                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8254  0899  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8255                           
  8256                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8257  089C  0021               	movlb	1	; select bank1
  8258  089D  084F               	movf	_Tx_Length^(0+128),w
  8259  089E  0020               	movlb	0	; select bank0
  8260  089F  00A4               	movwf	??_CC2500_TxData
  8261  08A0  0824               	movf	??_CC2500_TxData,w
  8262  08A1  0021               	movlb	1	; select bank1
  8263  08A2  00CD               	movwf	_SPI0Buffer^(0+128)
  8264                           
  8265                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8266  08A3  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8267                           
  8268                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8269  08A6  0020               	movlb	0	; select bank0
  8270  08A7  01A5               	clrf	CC2500_TxData@loop_e
  8271  08A8                     l9210:	
  8272  08A8  0021               	movlb	1	; select bank1
  8273  08A9  084F               	movf	_Tx_Length^(0+128),w
  8274  08AA  0020               	movlb	0	; select bank0
  8275  08AB  0225               	subwf	CC2500_TxData@loop_e,w
  8276  08AC  1803               	btfsc	3,0
  8277  08AD  28C1               	goto	l235
  8278                           
  8279                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8280  08AE  0825               	movf	CC2500_TxData@loop_e,w
  8281  08AF  3EA0               	addlw	_RF_Data& (0+255)
  8282  08B0  0086               	movwf	6
  8283  08B1  3001               	movlw	1	; select bank3/4
  8284  08B2  0087               	movwf	7
  8285  08B3  0801               	movf	1,w
  8286  08B4  00A4               	movwf	??_CC2500_TxData
  8287  08B5  0824               	movf	??_CC2500_TxData,w
  8288  08B6  0021               	movlb	1	; select bank1
  8289  08B7  00CD               	movwf	_SPI0Buffer^(0+128)
  8290                           
  8291                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8292  08B8  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8293  08BB  3001               	movlw	1
  8294  08BC  0020               	movlb	0	; select bank0
  8295  08BD  00A4               	movwf	??_CC2500_TxData
  8296  08BE  0824               	movf	??_CC2500_TxData,w
  8297  08BF  07A5               	addwf	CC2500_TxData@loop_e,f
  8298  08C0  28A8               	goto	l9210
  8299  08C1                     l235:	
  8300                           
  8301                           ;CC2500_B1.c: 51: }
  8302                           ;CC2500_B1.c: 52: RC0 = 1;
  8303  08C1  140E               	bsf	14,0	;volatile
  8304                           
  8305                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8306  08C2  3035               	movlw	53
  8307  08C3  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8308                           
  8309                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8310  08C6  28CA               	goto	l9216
  8311  08C7                     l9214:	
  8312                           
  8313                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8314  08C7  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8315  08CA                     l9216:	
  8316  08CA  0020               	movlb	0	; select bank0
  8317  08CB  188E               	btfsc	14,1	;volatile
  8318  08CC  28D0               	goto	l9220
  8319  08CD  0021               	movlb	1	; select bank1
  8320  08CE  1F21               	btfss	(_RF1^(0+128)+1),6
  8321  08CF  28C7               	goto	l9214
  8322  08D0                     l9220:	
  8323                           
  8324                           ;CC2500_B1.c: 56: };
  8325                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8326  08D0  319B  236C  3188   	fcall	_setRF_TimeoutCleared
  8327                           
  8328                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8329  08D3  28D7               	goto	l9224
  8330  08D4                     l9222:	
  8331                           
  8332                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8333  08D4  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8334  08D7                     l9224:	
  8335  08D7  0020               	movlb	0	; select bank0
  8336  08D8  1C8E               	btfss	14,1	;volatile
  8337  08D9  28DD               	goto	l9228
  8338  08DA  0021               	movlb	1	; select bank1
  8339  08DB  1F21               	btfss	(_RF1^(0+128)+1),6
  8340  08DC  28D4               	goto	l9222
  8341  08DD                     l9228:	
  8342                           
  8343                           ;CC2500_B1.c: 61: };
  8344                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8345  08DD  319B  236C  3188   	fcall	_setRF_TimeoutCleared
  8346                           
  8347                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8348  08E0  3036               	movlw	54
  8349  08E1  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8350                           
  8351                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8352  08E4  303B               	movlw	59
  8353  08E5  319F  271A         	fcall	_CC2500_WriteCommand
  8354                           
  8355                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8356  08E7  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8357  08E8  0008               	return
  8358  08E9                     __end_of_CC2500_TxData:	
  8359                           
  8360                           	psect	text36
  8361  0812                     __ptext36:	
  8362 ;; *************** function _CC2500_RxData *****************
  8363 ;; Defined at:
  8364 ;;		line 73 in file "../src/CC2500_B1.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;		None
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;		None               void
  8371 ;; Registers used:
  8372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;Total ram usage:        2 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    7
  8385 ;; This function calls:
  8386 ;;		_CC2500_ReadByte
  8387 ;;		_CC2500_ReadStatus
  8388 ;;		_CC2500_WriteByte
  8389 ;;		_CC2500_WriteCommand
  8390 ;;		_RF_Timeout_Counter
  8391 ;;		_setRF_TimeoutCleared
  8392 ;; This function is called by:
  8393 ;;		_setRF_Main
  8394 ;; This function uses a non-reentrant model
  8395 ;;
  8396                           
  8397                           
  8398                           ;psect for function _CC2500_RxData
  8399  0812                     _CC2500_RxData:	
  8400                           
  8401                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8402                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8403                           
  8404                           ;incstack = 0
  8405                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8406  0812  0020               	movlb	0	; select bank0
  8407  0813  188E               	btfsc	14,1	;volatile
  8408  0814  0008               	return
  8409                           
  8410                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8411  0815  303B               	movlw	59
  8412  0816  3190  20B5  3188   	fcall	_CC2500_ReadStatus
  8413                           
  8414                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8415  0819  0021               	movlb	1	; select bank1
  8416  081A  0850               	movf	_s_data^(0+128),w
  8417  081B  1903               	btfsc	3,2
  8418  081C  0008               	return
  8419                           
  8420                           ;CC2500_B1.c: 90: RC0 = 0;
  8421  081D  0020               	movlb	0	; select bank0
  8422  081E  100E               	bcf	14,0	;volatile
  8423                           
  8424                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8425  081F  30FF               	movlw	255
  8426  0820  00A4               	movwf	??_CC2500_RxData
  8427  0821  0824               	movf	??_CC2500_RxData,w
  8428  0822  0021               	movlb	1	; select bank1
  8429  0823  00CD               	movwf	_SPI0Buffer^(0+128)
  8430                           
  8431                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8432  0824  2828               	goto	l9248
  8433  0825                     l9246:	
  8434                           
  8435                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8436  0825  319E  2604  3188   	fcall	_RF_Timeout_Counter
  8437  0828                     l9248:	
  8438  0828  0020               	movlb	0	; select bank0
  8439  0829  1E8E               	btfss	14,5	;volatile
  8440  082A  282E               	goto	l9252
  8441  082B  0021               	movlb	1	; select bank1
  8442  082C  1F21               	btfss	(_RF1^(0+128)+1),6
  8443  082D  2825               	goto	l9246
  8444  082E                     l9252:	
  8445                           
  8446                           ;CC2500_B1.c: 95: };
  8447                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8448  082E  319B  236C  3188   	fcall	_setRF_TimeoutCleared
  8449                           
  8450                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8451  0831  319E  26CD  3188   	fcall	_CC2500_WriteByte
  8452                           
  8453                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8454  0834  319F  2787  3188   	fcall	_CC2500_ReadByte
  8455                           
  8456                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8457  0837  0021               	movlb	1	; select bank1
  8458  0838  084D               	movf	_SPI0Buffer^(0+128),w
  8459  0839  0020               	movlb	0	; select bank0
  8460  083A  00A4               	movwf	??_CC2500_RxData
  8461  083B  0824               	movf	??_CC2500_RxData,w
  8462  083C  0021               	movlb	1	; select bank1
  8463  083D  00CC               	movwf	_Rx_Length^(0+128)
  8464                           
  8465                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8466  083E  0020               	movlb	0	; select bank0
  8467  083F  01A5               	clrf	CC2500_RxData@loop_f
  8468  0840                     l9268:	
  8469  0840  0021               	movlb	1	; select bank1
  8470  0841  084C               	movf	_Rx_Length^(0+128),w
  8471  0842  0020               	movlb	0	; select bank0
  8472  0843  0225               	subwf	CC2500_RxData@loop_f,w
  8473  0844  1803               	btfsc	3,0
  8474  0845  2859               	goto	l9270
  8475                           
  8476                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8477  0846  319F  2787  3188   	fcall	_CC2500_ReadByte
  8478                           
  8479                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8480  0849  0021               	movlb	1	; select bank1
  8481  084A  084D               	movf	_SPI0Buffer^(0+128),w
  8482  084B  0020               	movlb	0	; select bank0
  8483  084C  00A4               	movwf	??_CC2500_RxData
  8484  084D  0825               	movf	CC2500_RxData@loop_f,w
  8485  084E  3EA0               	addlw	_RF_Data& (0+255)
  8486  084F  0086               	movwf	6
  8487  0850  3001               	movlw	1	; select bank3/4
  8488  0851  0087               	movwf	7
  8489  0852  0824               	movf	??_CC2500_RxData,w
  8490  0853  0081               	movwf	1
  8491  0854  3001               	movlw	1
  8492  0855  00A4               	movwf	??_CC2500_RxData
  8493  0856  0824               	movf	??_CC2500_RxData,w
  8494  0857  07A5               	addwf	CC2500_RxData@loop_f,f
  8495  0858  2840               	goto	l9268
  8496  0859                     l9270:	
  8497                           
  8498                           ;CC2500_B1.c: 104: }
  8499                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8500  0859  319F  2787  3188   	fcall	_CC2500_ReadByte
  8501                           
  8502                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8503  085C  0021               	movlb	1	; select bank1
  8504  085D  084D               	movf	_SPI0Buffer^(0+128),w
  8505  085E  0020               	movlb	0	; select bank0
  8506  085F  00A4               	movwf	??_CC2500_RxData
  8507  0860  0824               	movf	??_CC2500_RxData,w
  8508  0861  0022               	movlb	2	; select bank2
  8509  0862  00BA               	movwf	_RSSI^(0+256)
  8510                           
  8511                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8512  0863  319F  2787  3188   	fcall	_CC2500_ReadByte
  8513                           
  8514                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8515  0866  0021               	movlb	1	; select bank1
  8516  0867  084D               	movf	_SPI0Buffer^(0+128),w
  8517  0868  0020               	movlb	0	; select bank0
  8518  0869  00A4               	movwf	??_CC2500_RxData
  8519  086A  0824               	movf	??_CC2500_RxData,w
  8520  086B  0021               	movlb	1	; select bank1
  8521  086C  00C7               	movwf	_CRC^(0+128)
  8522                           
  8523                           ;CC2500_B1.c: 109: RC0 = 1;
  8524  086D  0020               	movlb	0	; select bank0
  8525  086E  140E               	bsf	14,0	;volatile
  8526                           
  8527                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8528  086F  0021               	movlb	1	; select bank1
  8529  0870  1BC7               	btfsc	_CRC^(0+128),7
  8530                           
  8531                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8532  0871  1464               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8533                           
  8534                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8535  0872  11A0               	bcf	_RF1^(0+128),3
  8536                           
  8537                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8538  0873  14A0               	bsf	_RF1^(0+128),1
  8539                           
  8540                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8541  0874  3036               	movlw	54
  8542  0875  319F  271A  3188   	fcall	_CC2500_WriteCommand
  8543                           
  8544                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8545  0878  303A               	movlw	58
  8546  0879  319F  271A         	fcall	_CC2500_WriteCommand
  8547  087B  0021               	movlb	1	; select bank1
  8548  087C  0008               	return
  8549  087D                     __end_of_CC2500_RxData:	
  8550                           
  8551                           	psect	text37
  8552  10B5                     __ptext37:	
  8553 ;; *************** function _CC2500_ReadStatus *****************
  8554 ;; Defined at:
  8555 ;;		line 308 in file "../src/CC2500_B1.c"
  8556 ;; Parameters:    Size  Location     Type
  8557 ;;  status_addr     1    wreg     unsigned char 
  8558 ;; Auto vars:     Size  Location     Type
  8559 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8560 ;; Return value:  Size  Location     Type
  8561 ;;		None               void
  8562 ;; Registers used:
  8563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8564 ;; Tracked objects:
  8565 ;;		On entry : 0/0
  8566 ;;		On exit  : 0/0
  8567 ;;		Unchanged: 0/0
  8568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8573 ;;Total ram usage:        2 bytes
  8574 ;; Hardware stack levels used:    1
  8575 ;; Hardware stack levels required when called:    6
  8576 ;; This function calls:
  8577 ;;		_CC2500_ReadByte
  8578 ;;		_CC2500_WriteByte
  8579 ;;		_RF_Timeout_Counter
  8580 ;;		_setRF_TimeoutCleared
  8581 ;; This function is called by:
  8582 ;;		_CC2500_RxData
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           
  8587                           ;psect for function _CC2500_ReadStatus
  8588  10B5                     _CC2500_ReadStatus:	
  8589                           
  8590                           ;incstack = 0
  8591                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8592                           ;CC2500_ReadStatus@status_addr stored from wreg
  8593  10B5  0020               	movlb	0	; select bank0
  8594  10B6  00A3               	movwf	CC2500_ReadStatus@status_addr
  8595                           
  8596                           ;CC2500_B1.c: 309: RC0 = 0;
  8597  10B7  100E               	bcf	14,0	;volatile
  8598                           
  8599                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8600  10B8  0823               	movf	CC2500_ReadStatus@status_addr,w
  8601  10B9  3EC0               	addlw	192
  8602  10BA  00A2               	movwf	??_CC2500_ReadStatus
  8603  10BB  0822               	movf	??_CC2500_ReadStatus,w
  8604  10BC  0021               	movlb	1	; select bank1
  8605  10BD  00CD               	movwf	_SPI0Buffer^(0+128)
  8606                           
  8607                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8608  10BE  28C2               	goto	l8940
  8609  10BF                     l8938:	
  8610                           
  8611                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8612  10BF  319E  2604  3190   	fcall	_RF_Timeout_Counter
  8613  10C2                     l8940:	
  8614  10C2  0020               	movlb	0	; select bank0
  8615  10C3  1E8E               	btfss	14,5	;volatile
  8616  10C4  28C8               	goto	l8944
  8617  10C5  0021               	movlb	1	; select bank1
  8618  10C6  1F21               	btfss	(_RF1^(0+128)+1),6
  8619  10C7  28BF               	goto	l8938
  8620  10C8                     l8944:	
  8621                           
  8622                           ;CC2500_B1.c: 314: };
  8623                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8624  10C8  319B  236C  3190   	fcall	_setRF_TimeoutCleared
  8625                           
  8626                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8627  10CB  319E  26CD  3190   	fcall	_CC2500_WriteByte
  8628                           
  8629                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8630  10CE  319F  2787         	fcall	_CC2500_ReadByte
  8631                           
  8632                           ;CC2500_B1.c: 319: RC0 = 1;
  8633  10D0  0020               	movlb	0	; select bank0
  8634  10D1  140E               	bsf	14,0	;volatile
  8635                           
  8636                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8637  10D2  0021               	movlb	1	; select bank1
  8638  10D3  084D               	movf	_SPI0Buffer^(0+128),w
  8639  10D4  0020               	movlb	0	; select bank0
  8640  10D5  00A2               	movwf	??_CC2500_ReadStatus
  8641  10D6  0822               	movf	??_CC2500_ReadStatus,w
  8642  10D7  0021               	movlb	1	; select bank1
  8643  10D8  00D0               	movwf	_s_data^(0+128)
  8644  10D9  0008               	return
  8645  10DA                     __end_of_CC2500_ReadStatus:	
  8646                           
  8647                           	psect	text38
  8648  1F87                     __ptext38:	
  8649 ;; *************** function _CC2500_ReadByte *****************
  8650 ;; Defined at:
  8651 ;;		line 242 in file "../src/CC2500_B1.c"
  8652 ;; Parameters:    Size  Location     Type
  8653 ;;		None
  8654 ;; Auto vars:     Size  Location     Type
  8655 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8656 ;; Return value:  Size  Location     Type
  8657 ;;		None               void
  8658 ;; Registers used:
  8659 ;;		wreg, status,2, status,0
  8660 ;; Tracked objects:
  8661 ;;		On entry : 0/0
  8662 ;;		On exit  : 0/0
  8663 ;;		Unchanged: 0/0
  8664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8669 ;;Total ram usage:        2 bytes
  8670 ;; Hardware stack levels used:    1
  8671 ;; Hardware stack levels required when called:    5
  8672 ;; This function calls:
  8673 ;;		Nothing
  8674 ;; This function is called by:
  8675 ;;		_CC2500_RxData
  8676 ;;		_CC2500_ReadStatus
  8677 ;;		_CC2500_ReadREG
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           
  8682                           ;psect for function _CC2500_ReadByte
  8683  1F87                     _CC2500_ReadByte:	
  8684                           
  8685                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8686                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8687                           
  8688                           ;incstack = 0
  8689                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8690  1F87  0020               	movlb	0	; select bank0
  8691  1F88  01A1               	clrf	CC2500_ReadByte@loop_b
  8692  1F89                     L2:	
  8693  1F89  3008               	movlw	8
  8694  1F8A  0221               	subwf	CC2500_ReadByte@loop_b,w
  8695  1F8B  1803               	btfsc	3,0
  8696  1F8C  0008               	return
  8697                           
  8698                           ;CC2500_B1.c: 245: RC3 = 1;
  8699  1F8D  158E               	bsf	14,3	;volatile
  8700                           
  8701                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8702  1F8E  1003               	clrc
  8703  1F8F  0021               	movlb	1	; select bank1
  8704  1F90  0DCD               	rlf	_SPI0Buffer^(0+128),f
  8705                           
  8706                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8707  1F91  0020               	movlb	0	; select bank0
  8708  1F92  1E8E               	btfss	14,5	;volatile
  8709  1F93  2F97               	goto	l8846
  8710                           
  8711                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8712  1F94  0021               	movlb	1	; select bank1
  8713  1F95  144D               	bsf	_SPI0Buffer^(0+128),0
  8714  1F96  2F9D               	goto	l8848
  8715  1F97                     l8846:	
  8716                           
  8717                           ;CC2500_B1.c: 249: else
  8718                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8719  1F97  30FE               	movlw	254
  8720  1F98  0020               	movlb	0	; select bank0
  8721  1F99  00A0               	movwf	??_CC2500_ReadByte
  8722  1F9A  0820               	movf	??_CC2500_ReadByte,w
  8723  1F9B  0021               	movlb	1	; select bank1
  8724  1F9C  05CD               	andwf	_SPI0Buffer^(0+128),f
  8725  1F9D                     l8848:	
  8726                           
  8727                           ;CC2500_B1.c: 251: RC3 = 0;
  8728  1F9D  0020               	movlb	0	; select bank0
  8729  1F9E  118E               	bcf	14,3	;volatile
  8730  1F9F  3001               	movlw	1
  8731  1FA0  00A0               	movwf	??_CC2500_ReadByte
  8732  1FA1  0820               	movf	??_CC2500_ReadByte,w
  8733  1FA2  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8734  1FA3  2F89               	goto	L2
  8735  1FA4                     __end_of_CC2500_ReadByte:	
  8736                           
  8737                           	psect	text39
  8738  1E19                     __ptext39:	
  8739 ;; *************** function _CC2500_PowerOnInitial *****************
  8740 ;; Defined at:
  8741 ;;		line 126 in file "../src/CC2500_B1.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;		None
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;		None
  8746 ;; Return value:  Size  Location     Type
  8747 ;;		None               void
  8748 ;; Registers used:
  8749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;Total ram usage:        0 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    8
  8762 ;; This function calls:
  8763 ;;		_CC2500_ClearRXFIFO
  8764 ;;		_CC2500_ClearTXFIFO
  8765 ;;		_CC2500_FrequencyCabr
  8766 ;;		_CC2500_InitPATable
  8767 ;;		_CC2500_InitSetREG
  8768 ;;		_CC2500_PowerRST
  8769 ;;		_CC2500_SIDLEMode
  8770 ;; This function is called by:
  8771 ;;		_main
  8772 ;;		_setRF_Main
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           
  8777                           ;psect for function _CC2500_PowerOnInitial
  8778  1E19                     _CC2500_PowerOnInitial:	
  8779                           
  8780                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8781                           
  8782                           ;incstack = 0
  8783                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8784  1E19  3194  2463  319E   	fcall	_CC2500_PowerRST
  8785                           
  8786                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8787  1E1C  3191  2128  319E   	fcall	_CC2500_InitSetREG
  8788                           
  8789                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8790  1E1F  319F  27E1  319E   	fcall	_CC2500_InitPATable
  8791                           
  8792                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8793  1E22  319B  2374  319E   	fcall	_CC2500_ClearTXFIFO
  8794                           
  8795                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8796  1E25  319B  2370  319E   	fcall	_CC2500_ClearRXFIFO
  8797                           
  8798                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8799  1E28  319C  248D  319E   	fcall	_CC2500_FrequencyCabr
  8800                           
  8801                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8802  1E2B  319B  2378         	fcall	_CC2500_SIDLEMode
  8803  1E2D  0008               	return
  8804  1E2E                     __end_of_CC2500_PowerOnInitial:	
  8805                           
  8806                           	psect	text40
  8807  1B78                     __ptext40:	
  8808 ;; *************** function _CC2500_SIDLEMode *****************
  8809 ;; Defined at:
  8810 ;;		line 216 in file "../src/CC2500_B1.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;		None
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;		None
  8815 ;; Return value:  Size  Location     Type
  8816 ;;		None               void
  8817 ;; Registers used:
  8818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;Total ram usage:        0 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    7
  8831 ;; This function calls:
  8832 ;;		_CC2500_WriteCommand
  8833 ;; This function is called by:
  8834 ;;		_CC2500_PowerOnInitial
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           
  8839                           ;psect for function _CC2500_SIDLEMode
  8840  1B78                     _CC2500_SIDLEMode:	
  8841                           
  8842                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8843                           
  8844                           ;incstack = 0
  8845                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8846  1B78  3036               	movlw	54
  8847  1B79  319F  271A         	fcall	_CC2500_WriteCommand
  8848  1B7B  0008               	return
  8849  1B7C                     __end_of_CC2500_SIDLEMode:	
  8850                           
  8851                           	psect	text41
  8852  1463                     __ptext41:	
  8853 ;; *************** function _CC2500_PowerRST *****************
  8854 ;; Defined at:
  8855 ;;		line 139 in file "../src/CC2500_B1.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;		None
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;		None
  8860 ;; Return value:  Size  Location     Type
  8861 ;;		None               void
  8862 ;; Registers used:
  8863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;Total ram usage:        1 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:    6
  8876 ;; This function calls:
  8877 ;;		_CC2500_WriteByte
  8878 ;;		_DelayTime_1us
  8879 ;;		_RF_Timeout_Counter
  8880 ;;		_setRF_TimeoutCleared
  8881 ;; This function is called by:
  8882 ;;		_CC2500_PowerOnInitial
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           
  8887                           ;psect for function _CC2500_PowerRST
  8888  1463                     _CC2500_PowerRST:	
  8889                           
  8890                           ;CC2500_B1.c: 140: RC3 = 0;
  8891                           
  8892                           ;incstack = 0
  8893                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8894  1463  0020               	movlb	0	; select bank0
  8895  1464  118E               	bcf	14,3	;volatile
  8896                           
  8897                           ;CC2500_B1.c: 141: RC4 = 0;
  8898  1465  120E               	bcf	14,4	;volatile
  8899                           
  8900                           ;CC2500_B1.c: 142: RC0 = 1;
  8901  1466  140E               	bsf	14,0	;volatile
  8902                           
  8903                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8904  1467  300A               	movlw	10
  8905  1468  00A0               	movwf	DelayTime_1us@count
  8906  1469  3000               	movlw	0
  8907  146A  00A1               	movwf	DelayTime_1us@count+1
  8908  146B  3190  20DA  3194   	fcall	_DelayTime_1us
  8909                           
  8910                           ;CC2500_B1.c: 144: RC0 = 0;
  8911  146E  0020               	movlb	0	; select bank0
  8912  146F  100E               	bcf	14,0	;volatile
  8913                           
  8914                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8915  1470  300A               	movlw	10
  8916  1471  00A0               	movwf	DelayTime_1us@count
  8917  1472  3000               	movlw	0
  8918  1473  00A1               	movwf	DelayTime_1us@count+1
  8919  1474  3190  20DA  3194   	fcall	_DelayTime_1us
  8920                           
  8921                           ;CC2500_B1.c: 146: RC0 = 1;
  8922  1477  0020               	movlb	0	; select bank0
  8923  1478  140E               	bsf	14,0	;volatile
  8924                           
  8925                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8926  1479  3028               	movlw	40
  8927  147A  00A0               	movwf	DelayTime_1us@count
  8928  147B  3000               	movlw	0
  8929  147C  00A1               	movwf	DelayTime_1us@count+1
  8930  147D  3190  20DA  3194   	fcall	_DelayTime_1us
  8931                           
  8932                           ;CC2500_B1.c: 148: RC0 = 0;
  8933  1480  0020               	movlb	0	; select bank0
  8934  1481  100E               	bcf	14,0	;volatile
  8935                           
  8936                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8937  1482  3030               	movlw	48
  8938  1483  00A6               	movwf	??_CC2500_PowerRST
  8939  1484  0826               	movf	??_CC2500_PowerRST,w
  8940  1485  0021               	movlb	1	; select bank1
  8941  1486  00CD               	movwf	_SPI0Buffer^(0+128)
  8942                           
  8943                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8944  1487  2C8B               	goto	l8968
  8945  1488                     l8966:	
  8946                           
  8947                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8948  1488  319E  2604  3194   	fcall	_RF_Timeout_Counter
  8949  148B                     l8968:	
  8950  148B  0020               	movlb	0	; select bank0
  8951  148C  1E8E               	btfss	14,5	;volatile
  8952  148D  2C91               	goto	l8972
  8953  148E  0021               	movlb	1	; select bank1
  8954  148F  1F21               	btfss	(_RF1^(0+128)+1),6
  8955  1490  2C88               	goto	l8966
  8956  1491                     l8972:	
  8957                           
  8958                           ;CC2500_B1.c: 152: };
  8959                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8960  1491  319B  236C  3194   	fcall	_setRF_TimeoutCleared
  8961                           
  8962                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8963  1494  319E  26CD  3194   	fcall	_CC2500_WriteByte
  8964                           
  8965                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  8966  1497  2C9B               	goto	l8978
  8967  1498                     l8976:	
  8968                           
  8969                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8970  1498  319E  2604  3194   	fcall	_RF_Timeout_Counter
  8971  149B                     l8978:	
  8972  149B  0020               	movlb	0	; select bank0
  8973  149C  1E8E               	btfss	14,5	;volatile
  8974  149D  2CA1               	goto	l8982
  8975  149E  0021               	movlb	1	; select bank1
  8976  149F  1F21               	btfss	(_RF1^(0+128)+1),6
  8977  14A0  2C98               	goto	l8976
  8978  14A1                     l8982:	
  8979                           
  8980                           ;CC2500_B1.c: 157: };
  8981                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  8982  14A1  319B  236C         	fcall	_setRF_TimeoutCleared
  8983                           
  8984                           ;CC2500_B1.c: 159: RC4 = 0;
  8985  14A3  0020               	movlb	0	; select bank0
  8986  14A4  120E               	bcf	14,4	;volatile
  8987                           
  8988                           ;CC2500_B1.c: 160: RC0 = 1;
  8989  14A5  140E               	bsf	14,0	;volatile
  8990  14A6  0008               	return
  8991  14A7                     __end_of_CC2500_PowerRST:	
  8992                           
  8993                           	psect	text42
  8994  1128                     __ptext42:	
  8995 ;; *************** function _CC2500_InitSetREG *****************
  8996 ;; Defined at:
  8997 ;;		line 166 in file "../src/CC2500_B1.c"
  8998 ;; Parameters:    Size  Location     Type
  8999 ;;		None
  9000 ;; Auto vars:     Size  Location     Type
  9001 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9002 ;;  temp2           1    7[BANK0 ] unsigned char 
  9003 ;;  temp1           1    6[BANK0 ] unsigned char 
  9004 ;; Return value:  Size  Location     Type
  9005 ;;		None               void
  9006 ;; Registers used:
  9007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;Total ram usage:        4 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    7
  9020 ;; This function calls:
  9021 ;;		_CC2500_WriteREG
  9022 ;; This function is called by:
  9023 ;;		_CC2500_PowerOnInitial
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027                           
  9028                           ;psect for function _CC2500_InitSetREG
  9029  1128                     _CC2500_InitSetREG:	
  9030                           
  9031                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9032                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9033                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9034                           
  9035                           ;incstack = 0
  9036                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9037  1128  0020               	movlb	0	; select bank0
  9038  1129  01A8               	clrf	CC2500_InitSetREG@loop_c
  9039  112A                     L3:	
  9040  112A  302F               	movlw	47
  9041  112B  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9042  112C  1803               	btfsc	3,0
  9043  112D  0008               	return
  9044                           
  9045                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9046  112E  0828               	movf	CC2500_InitSetREG@loop_c,w
  9047  112F  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9048  1130  0084               	movwf	4
  9049  1131  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9050  1132  1803               	skipnc
  9051  1133  3E01               	addlw	1
  9052  1134  0085               	movwf	5
  9053  1135  0800               	movf	0,w	;code access
  9054  1136  00A5               	movwf	??_CC2500_InitSetREG
  9055  1137  0825               	movf	??_CC2500_InitSetREG,w
  9056  1138  00A6               	movwf	CC2500_InitSetREG@temp1
  9057                           
  9058                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9059  1139  0828               	movf	CC2500_InitSetREG@loop_c,w
  9060  113A  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9061  113B  0084               	movwf	4
  9062  113C  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9063  113D  1803               	skipnc
  9064  113E  3E01               	addlw	1
  9065  113F  0085               	movwf	5
  9066  1140  0800               	movf	0,w	;code access
  9067  1141  00A5               	movwf	??_CC2500_InitSetREG
  9068  1142  0825               	movf	??_CC2500_InitSetREG,w
  9069  1143  00A7               	movwf	CC2500_InitSetREG@temp2
  9070                           
  9071                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9072  1144  0827               	movf	CC2500_InitSetREG@temp2,w
  9073  1145  00A5               	movwf	??_CC2500_InitSetREG
  9074  1146  0825               	movf	??_CC2500_InitSetREG,w
  9075  1147  00A2               	movwf	CC2500_WriteREG@value
  9076  1148  0826               	movf	CC2500_InitSetREG@temp1,w
  9077  1149  3190  2092  3191   	fcall	_CC2500_WriteREG
  9078  114C  3001               	movlw	1
  9079  114D  0020               	movlb	0	; select bank0
  9080  114E  00A5               	movwf	??_CC2500_InitSetREG
  9081  114F  0825               	movf	??_CC2500_InitSetREG,w
  9082  1150  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9083  1151  292A               	goto	L3
  9084  1152                     __end_of_CC2500_InitSetREG:	
  9085                           
  9086                           	psect	text43
  9087  1FE1                     __ptext43:	
  9088 ;; *************** function _CC2500_InitPATable *****************
  9089 ;; Defined at:
  9090 ;;		line 181 in file "../src/CC2500_B1.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;		None
  9093 ;; Auto vars:     Size  Location     Type
  9094 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9095 ;;  temp            1    6[BANK0 ] unsigned char 
  9096 ;; Return value:  Size  Location     Type
  9097 ;;		None               void
  9098 ;; Registers used:
  9099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;Total ram usage:        3 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; Hardware stack levels required when called:    7
  9112 ;; This function calls:
  9113 ;;		_CC2500_WriteREG
  9114 ;; This function is called by:
  9115 ;;		_CC2500_PowerOnInitial
  9116 ;; This function uses a non-reentrant model
  9117 ;;
  9118                           
  9119                           
  9120                           ;psect for function _CC2500_InitPATable
  9121  1FE1                     _CC2500_InitPATable:	
  9122                           
  9123                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9124                           ;CC2500_B1.c: 183: unsigned char temp;
  9125                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9129  1FE1  0020               	movlb	0	; select bank0
  9130  1FE2  01A7               	clrf	CC2500_InitPATable@loop_d
  9131  1FE3                     L4:	
  9132  1FE3  3008               	movlw	8
  9133  1FE4  0227               	subwf	CC2500_InitPATable@loop_d,w
  9134  1FE5  1803               	btfsc	3,0
  9135  1FE6  0008               	return
  9136                           
  9137                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9138  1FE7  0827               	movf	CC2500_InitPATable@loop_d,w
  9139  1FE8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9140  1FE9  0084               	movwf	4
  9141  1FEA  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9142  1FEB  1803               	skipnc
  9143  1FEC  3E01               	addlw	1
  9144  1FED  0085               	movwf	5
  9145  1FEE  0800               	movf	0,w	;code access
  9146  1FEF  00A5               	movwf	??_CC2500_InitPATable
  9147  1FF0  0825               	movf	??_CC2500_InitPATable,w
  9148  1FF1  00A6               	movwf	CC2500_InitPATable@temp
  9149                           
  9150                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9151  1FF2  0826               	movf	CC2500_InitPATable@temp,w
  9152  1FF3  00A5               	movwf	??_CC2500_InitPATable
  9153  1FF4  0825               	movf	??_CC2500_InitPATable,w
  9154  1FF5  00A2               	movwf	CC2500_WriteREG@value
  9155  1FF6  303E               	movlw	62
  9156  1FF7  3190  2092  319F   	fcall	_CC2500_WriteREG
  9157  1FFA  3001               	movlw	1
  9158  1FFB  0020               	movlb	0	; select bank0
  9159  1FFC  00A5               	movwf	??_CC2500_InitPATable
  9160  1FFD  0825               	movf	??_CC2500_InitPATable,w
  9161  1FFE  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9162  1FFF  2FE3               	goto	L4
  9163  2000                     __end_of_CC2500_InitPATable:	
  9164                           
  9165                           	psect	text44
  9166  1092                     __ptext44:	
  9167 ;; *************** function _CC2500_WriteREG *****************
  9168 ;; Defined at:
  9169 ;;		line 258 in file "../src/CC2500_B1.c"
  9170 ;; Parameters:    Size  Location     Type
  9171 ;;  w_addr          1    wreg     unsigned char 
  9172 ;;  value           1    2[BANK0 ] unsigned char 
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9175 ;; Return value:  Size  Location     Type
  9176 ;;		None               void
  9177 ;; Registers used:
  9178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9179 ;; Tracked objects:
  9180 ;;		On entry : 0/0
  9181 ;;		On exit  : 0/0
  9182 ;;		Unchanged: 0/0
  9183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9184 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;Total ram usage:        3 bytes
  9189 ;; Hardware stack levels used:    1
  9190 ;; Hardware stack levels required when called:    6
  9191 ;; This function calls:
  9192 ;;		_CC2500_WriteByte
  9193 ;;		_RF_Timeout_Counter
  9194 ;;		_setRF_TimeoutCleared
  9195 ;; This function is called by:
  9196 ;;		_CC2500_InitSetREG
  9197 ;;		_CC2500_InitPATable
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           
  9202                           ;psect for function _CC2500_WriteREG
  9203  1092                     _CC2500_WriteREG:	
  9204                           
  9205                           ;incstack = 0
  9206                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9207                           ;CC2500_WriteREG@w_addr stored from wreg
  9208  1092  0020               	movlb	0	; select bank0
  9209  1093  00A4               	movwf	CC2500_WriteREG@w_addr
  9210                           
  9211                           ;CC2500_B1.c: 259: RC0 = 0;
  9212  1094  100E               	bcf	14,0	;volatile
  9213                           
  9214                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9215  1095  0824               	movf	CC2500_WriteREG@w_addr,w
  9216  1096  00A3               	movwf	??_CC2500_WriteREG
  9217  1097  0823               	movf	??_CC2500_WriteREG,w
  9218  1098  0021               	movlb	1	; select bank1
  9219  1099  00CD               	movwf	_SPI0Buffer^(0+128)
  9220                           
  9221                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9222  109A  289E               	goto	l8858
  9223  109B                     l8856:	
  9224                           
  9225                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9226  109B  319E  2604  3190   	fcall	_RF_Timeout_Counter
  9227  109E                     l8858:	
  9228  109E  0020               	movlb	0	; select bank0
  9229  109F  1E8E               	btfss	14,5	;volatile
  9230  10A0  28A4               	goto	l8862
  9231  10A1  0021               	movlb	1	; select bank1
  9232  10A2  1F21               	btfss	(_RF1^(0+128)+1),6
  9233  10A3  289B               	goto	l8856
  9234  10A4                     l8862:	
  9235                           
  9236                           ;CC2500_B1.c: 263: };
  9237                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9238  10A4  319B  236C  3190   	fcall	_setRF_TimeoutCleared
  9239                           
  9240                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9241  10A7  319E  26CD  3190   	fcall	_CC2500_WriteByte
  9242                           
  9243                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9244  10AA  0020               	movlb	0	; select bank0
  9245  10AB  0822               	movf	CC2500_WriteREG@value,w
  9246  10AC  00A3               	movwf	??_CC2500_WriteREG
  9247  10AD  0823               	movf	??_CC2500_WriteREG,w
  9248  10AE  0021               	movlb	1	; select bank1
  9249  10AF  00CD               	movwf	_SPI0Buffer^(0+128)
  9250                           
  9251                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9252  10B0  319E  26CD         	fcall	_CC2500_WriteByte
  9253                           
  9254                           ;CC2500_B1.c: 269: RC0 = 1;
  9255  10B2  0020               	movlb	0	; select bank0
  9256  10B3  140E               	bsf	14,0	;volatile
  9257  10B4  0008               	return
  9258  10B5                     __end_of_CC2500_WriteREG:	
  9259                           
  9260                           	psect	text45
  9261  1C8D                     __ptext45:	
  9262 ;; *************** function _CC2500_FrequencyCabr *****************
  9263 ;; Defined at:
  9264 ;;		line 208 in file "../src/CC2500_B1.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;		None
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;		None
  9269 ;; Return value:  Size  Location     Type
  9270 ;;		None               void
  9271 ;; Registers used:
  9272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;Total ram usage:        0 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    7
  9285 ;; This function calls:
  9286 ;;		_CC2500_WriteCommand
  9287 ;;		_DelayTime_1us
  9288 ;; This function is called by:
  9289 ;;		_CC2500_PowerOnInitial
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           
  9294                           ;psect for function _CC2500_FrequencyCabr
  9295  1C8D                     _CC2500_FrequencyCabr:	
  9296                           
  9297                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9298                           
  9299                           ;incstack = 0
  9300                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9301  1C8D  3033               	movlw	51
  9302  1C8E  319F  271A  319C   	fcall	_CC2500_WriteCommand
  9303                           
  9304                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9305  1C91  30E8               	movlw	232
  9306  1C92  0020               	movlb	0	; select bank0
  9307  1C93  00A0               	movwf	DelayTime_1us@count
  9308  1C94  3003               	movlw	3
  9309  1C95  00A1               	movwf	DelayTime_1us@count+1
  9310  1C96  3190  20DA         	fcall	_DelayTime_1us
  9311  1C98  0008               	return
  9312  1C99                     __end_of_CC2500_FrequencyCabr:	
  9313                           
  9314                           	psect	text46
  9315  10DA                     __ptext46:	
  9316 ;; *************** function _DelayTime_1us *****************
  9317 ;; Defined at:
  9318 ;;		line 327 in file "../src/CC2500_B1.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;  count           2    0[BANK0 ] int 
  9321 ;; Auto vars:     Size  Location     Type
  9322 ;;  j               2    4[BANK0 ] unsigned int 
  9323 ;;  i               2    2[BANK0 ] unsigned int 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;		None               void
  9326 ;; Registers used:
  9327 ;;		wreg, status,2
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9334 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;Total ram usage:        6 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    5
  9340 ;; This function calls:
  9341 ;;		Nothing
  9342 ;; This function is called by:
  9343 ;;		_CC2500_PowerRST
  9344 ;;		_CC2500_FrequencyCabr
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           
  9349                           ;psect for function _DelayTime_1us
  9350  10DA                     _DelayTime_1us:	
  9351                           
  9352                           ;CC2500_B1.c: 328: unsigned int i, j;
  9353                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9354                           
  9355                           ;incstack = 0
  9356                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9357  10DA  3001               	movlw	1
  9358  10DB  0020               	movlb	0	; select bank0
  9359  10DC  00A2               	movwf	DelayTime_1us@i
  9360  10DD  3000               	movlw	0
  9361  10DE  00A3               	movwf	DelayTime_1us@i+1
  9362  10DF                     l347:	
  9363  10DF  0821               	movf	DelayTime_1us@count+1,w
  9364  10E0  0223               	subwf	DelayTime_1us@i+1,w
  9365  10E1  1D03               	skipz
  9366  10E2  28E5               	goto	u5425
  9367  10E3  0820               	movf	DelayTime_1us@count,w
  9368  10E4  0222               	subwf	DelayTime_1us@i,w
  9369  10E5                     u5425:	
  9370  10E5  1803               	btfsc	3,0
  9371  10E6  0008               	return
  9372                           
  9373                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9374  10E7  01A4               	clrf	DelayTime_1us@j
  9375  10E8  01A5               	clrf	DelayTime_1us@j+1
  9376  10E9  3000               	movlw	0
  9377  10EA  0225               	subwf	DelayTime_1us@j+1,w
  9378  10EB  3002               	movlw	2
  9379  10EC  1903               	skipnz
  9380  10ED  0224               	subwf	DelayTime_1us@j,w
  9381  10EE  1803               	btfsc	3,0
  9382  10EF  28FB               	goto	l6256
  9383  10F0                     l6254:	
  9384  10F0  3001               	movlw	1
  9385  10F1  07A4               	addwf	DelayTime_1us@j,f
  9386  10F2  3000               	movlw	0
  9387  10F3  3DA5               	addwfc	DelayTime_1us@j+1,f
  9388  10F4  3000               	movlw	0
  9389  10F5  0225               	subwf	DelayTime_1us@j+1,w
  9390  10F6  3002               	movlw	2
  9391  10F7  1903               	skipnz
  9392  10F8  0224               	subwf	DelayTime_1us@j,w
  9393  10F9  1C03               	skipc
  9394  10FA  28F0               	goto	l6254
  9395  10FB                     l6256:	
  9396  10FB  3001               	movlw	1
  9397  10FC  07A2               	addwf	DelayTime_1us@i,f
  9398  10FD  3000               	movlw	0
  9399  10FE  3DA3               	addwfc	DelayTime_1us@i+1,f
  9400  10FF  28DF               	goto	l347
  9401  1100                     __end_of_DelayTime_1us:	
  9402                           
  9403                           	psect	text47
  9404  1B74                     __ptext47:	
  9405 ;; *************** function _CC2500_ClearTXFIFO *****************
  9406 ;; Defined at:
  9407 ;;		line 194 in file "../src/CC2500_B1.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;		None               void
  9414 ;; Registers used:
  9415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;Total ram usage:        0 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    7
  9428 ;; This function calls:
  9429 ;;		_CC2500_WriteCommand
  9430 ;; This function is called by:
  9431 ;;		_CC2500_PowerOnInitial
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           
  9436                           ;psect for function _CC2500_ClearTXFIFO
  9437  1B74                     _CC2500_ClearTXFIFO:	
  9438                           
  9439                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9443  1B74  303B               	movlw	59
  9444  1B75  319F  271A         	fcall	_CC2500_WriteCommand
  9445  1B77  0008               	return
  9446  1B78                     __end_of_CC2500_ClearTXFIFO:	
  9447                           
  9448                           	psect	text48
  9449  1B70                     __ptext48:	
  9450 ;; *************** function _CC2500_ClearRXFIFO *****************
  9451 ;; Defined at:
  9452 ;;		line 201 in file "../src/CC2500_B1.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;		None
  9455 ;; Auto vars:     Size  Location     Type
  9456 ;;		None
  9457 ;; Return value:  Size  Location     Type
  9458 ;;		None               void
  9459 ;; Registers used:
  9460 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9461 ;; Tracked objects:
  9462 ;;		On entry : 0/0
  9463 ;;		On exit  : 0/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;Total ram usage:        0 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:    7
  9473 ;; This function calls:
  9474 ;;		_CC2500_WriteCommand
  9475 ;; This function is called by:
  9476 ;;		_CC2500_PowerOnInitial
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           
  9481                           ;psect for function _CC2500_ClearRXFIFO
  9482  1B70                     _CC2500_ClearRXFIFO:	
  9483                           
  9484                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9485                           
  9486                           ;incstack = 0
  9487                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9488  1B70  303A               	movlw	58
  9489  1B71  319F  271A         	fcall	_CC2500_WriteCommand
  9490  1B73  0008               	return
  9491  1B74                     __end_of_CC2500_ClearRXFIFO:	
  9492                           
  9493                           	psect	text49
  9494  1F1A                     __ptext49:	
  9495 ;; *************** function _CC2500_WriteCommand *****************
  9496 ;; Defined at:
  9497 ;;		line 292 in file "../src/CC2500_B1.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;  command         1    wreg     unsigned char 
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;  command         1    3[BANK0 ] unsigned char 
  9502 ;; Return value:  Size  Location     Type
  9503 ;;		None               void
  9504 ;; Registers used:
  9505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;Total ram usage:        2 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    6
  9518 ;; This function calls:
  9519 ;;		_CC2500_WriteByte
  9520 ;;		_RF_Timeout_Counter
  9521 ;;		_setRF_TimeoutCleared
  9522 ;; This function is called by:
  9523 ;;		_CC2500_TxData
  9524 ;;		_CC2500_RxData
  9525 ;;		_CC2500_ClearTXFIFO
  9526 ;;		_CC2500_ClearRXFIFO
  9527 ;;		_CC2500_FrequencyCabr
  9528 ;;		_CC2500_SIDLEMode
  9529 ;;		_setRF_Main
  9530 ;;		_RF_RxDisable
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           
  9535                           ;psect for function _CC2500_WriteCommand
  9536  1F1A                     _CC2500_WriteCommand:	
  9537                           
  9538                           ;incstack = 0
  9539                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9540                           ;CC2500_WriteCommand@command stored from wreg
  9541  1F1A  0020               	movlb	0	; select bank0
  9542  1F1B  00A3               	movwf	CC2500_WriteCommand@command
  9543                           
  9544                           ;CC2500_B1.c: 293: RC0 = 0;
  9545  1F1C  100E               	bcf	14,0	;volatile
  9546                           
  9547                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9548  1F1D  0823               	movf	CC2500_WriteCommand@command,w
  9549  1F1E  00A2               	movwf	??_CC2500_WriteCommand
  9550  1F1F  0822               	movf	??_CC2500_WriteCommand,w
  9551  1F20  0021               	movlb	1	; select bank1
  9552  1F21  00CD               	movwf	_SPI0Buffer^(0+128)
  9553                           
  9554                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9555  1F22  2F26               	goto	l8824
  9556  1F23                     l8822:	
  9557                           
  9558                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9559  1F23  319E  2604  319F   	fcall	_RF_Timeout_Counter
  9560  1F26                     l8824:	
  9561  1F26  0020               	movlb	0	; select bank0
  9562  1F27  1E8E               	btfss	14,5	;volatile
  9563  1F28  2F2C               	goto	l8828
  9564  1F29  0021               	movlb	1	; select bank1
  9565  1F2A  1F21               	btfss	(_RF1^(0+128)+1),6
  9566  1F2B  2F23               	goto	l8822
  9567  1F2C                     l8828:	
  9568                           
  9569                           ;CC2500_B1.c: 298: };
  9570                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9571  1F2C  319B  236C  319F   	fcall	_setRF_TimeoutCleared
  9572                           
  9573                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9574  1F2F  319E  26CD         	fcall	_CC2500_WriteByte
  9575                           
  9576                           ;CC2500_B1.c: 302: RC0 = 1;
  9577  1F31  0020               	movlb	0	; select bank0
  9578  1F32  140E               	bsf	14,0	;volatile
  9579  1F33  0008               	return
  9580  1F34                     __end_of_CC2500_WriteCommand:	
  9581                           
  9582                           	psect	text50
  9583  1B6C                     __ptext50:	
  9584 ;; *************** function _setRF_TimeoutCleared *****************
  9585 ;; Defined at:
  9586 ;;		line 149 in file "../src/RF_Control_B1.c"
  9587 ;; Parameters:    Size  Location     Type
  9588 ;;		None
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;		None
  9591 ;; Return value:  Size  Location     Type
  9592 ;;		None               void
  9593 ;; Registers used:
  9594 ;;		status,2
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;Total ram usage:        0 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    5
  9607 ;; This function calls:
  9608 ;;		Nothing
  9609 ;; This function is called by:
  9610 ;;		_CC2500_TxData
  9611 ;;		_CC2500_RxData
  9612 ;;		_CC2500_PowerRST
  9613 ;;		_CC2500_WriteREG
  9614 ;;		_CC2500_WriteCommand
  9615 ;;		_CC2500_ReadStatus
  9616 ;;		_CC2500_ReadREG
  9617 ;; This function uses a non-reentrant model
  9618 ;;
  9619                           
  9620                           
  9621                           ;psect for function _setRF_TimeoutCleared
  9622  1B6C                     _setRF_TimeoutCleared:	
  9623                           
  9624                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9625                           
  9626                           ;incstack = 0
  9627                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9628  1B6C  0021               	movlb	1	; select bank1
  9629  1B6D  01AC               	clrf	(_RF1^(0+128)+12)
  9630  1B6E  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9631  1B6F  0008               	return
  9632  1B70                     __end_of_setRF_TimeoutCleared:	
  9633                           
  9634                           	psect	text51
  9635  1E04                     __ptext51:	
  9636 ;; *************** function _RF_Timeout_Counter *****************
  9637 ;; Defined at:
  9638 ;;		line 141 in file "../src/RF_Control_B1.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;		None
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;		None
  9643 ;; Return value:  Size  Location     Type
  9644 ;;		None               void
  9645 ;; Registers used:
  9646 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;Total ram usage:        0 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; Hardware stack levels required when called:    5
  9659 ;; This function calls:
  9660 ;;		Nothing
  9661 ;; This function is called by:
  9662 ;;		_CC2500_TxData
  9663 ;;		_CC2500_RxData
  9664 ;;		_CC2500_PowerRST
  9665 ;;		_CC2500_WriteREG
  9666 ;;		_CC2500_WriteCommand
  9667 ;;		_CC2500_ReadStatus
  9668 ;;		_CC2500_ReadREG
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           
  9673                           ;psect for function _RF_Timeout_Counter
  9674  1E04                     _RF_Timeout_Counter:	
  9675                           
  9676                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9677                           
  9678                           ;incstack = 0
  9679                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9680  1E04  3001               	movlw	1
  9681  1E05  0021               	movlb	1	; select bank1
  9682  1E06  07AC               	addwf	(_RF1^(0+128)+12),f
  9683  1E07  3000               	movlw	0
  9684  1E08  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9685                           
  9686                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9687  1E09  300C               	movlw	12
  9688  1E0A  3EA0               	addlw	_RF1& (0+255)
  9689  1E0B  0086               	movwf	6
  9690  1E0C  0187               	clrf	7
  9691  1E0D  3F40               	moviw [0]fsr1
  9692  1E0E  3AA8               	xorlw	168
  9693  1E0F  1D03               	skipz
  9694  1E10  2E13               	goto	u9455
  9695  1E11  3F41               	moviw [1]fsr1
  9696  1E12  3A61               	xorlw	97
  9697  1E13                     u9455:	
  9698  1E13  1D03               	skipz
  9699  1E14  0008               	return
  9700                           
  9701                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9702  1E15  01AC               	clrf	(_RF1^(0+128)+12)
  9703  1E16  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9704                           
  9705                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9706  1E17  1721               	bsf	(_RF1^(0+128)+1),6
  9707  1E18  0008               	return
  9708  1E19                     __end_of_RF_Timeout_Counter:	
  9709                           
  9710                           	psect	text52
  9711  1ECD                     __ptext52:	
  9712 ;; *************** function _CC2500_WriteByte *****************
  9713 ;; Defined at:
  9714 ;;		line 226 in file "../src/CC2500_B1.c"
  9715 ;; Parameters:    Size  Location     Type
  9716 ;;		None
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9719 ;; Return value:  Size  Location     Type
  9720 ;;		None               void
  9721 ;; Registers used:
  9722 ;;		wreg, status,2, status,0
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;Total ram usage:        2 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    5
  9735 ;; This function calls:
  9736 ;;		Nothing
  9737 ;; This function is called by:
  9738 ;;		_CC2500_TxData
  9739 ;;		_CC2500_RxData
  9740 ;;		_CC2500_PowerRST
  9741 ;;		_CC2500_WriteREG
  9742 ;;		_CC2500_WriteCommand
  9743 ;;		_CC2500_ReadStatus
  9744 ;;		_CC2500_ReadREG
  9745 ;; This function uses a non-reentrant model
  9746 ;;
  9747                           
  9748                           
  9749                           ;psect for function _CC2500_WriteByte
  9750  1ECD                     _CC2500_WriteByte:	
  9751                           
  9752                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9753                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9754                           
  9755                           ;incstack = 0
  9756                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9757  1ECD  0020               	movlb	0	; select bank0
  9758  1ECE  01A1               	clrf	CC2500_WriteByte@loop_a
  9759  1ECF                     L5:	
  9760  1ECF  3008               	movlw	8
  9761  1ED0  0221               	subwf	CC2500_WriteByte@loop_a,w
  9762  1ED1  1803               	btfsc	3,0
  9763  1ED2  0008               	return
  9764                           
  9765                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9766  1ED3  0021               	movlb	1	; select bank1
  9767  1ED4  1FCD               	btfss	_SPI0Buffer^(0+128),7
  9768  1ED5  2ED9               	goto	l303
  9769                           
  9770                           ;CC2500_B1.c: 230: RC4 = 1;
  9771  1ED6  0020               	movlb	0	; select bank0
  9772  1ED7  160E               	bsf	14,4	;volatile
  9773  1ED8  2EDB               	goto	l304
  9774  1ED9                     l303:	
  9775                           
  9776                           ;CC2500_B1.c: 231: else
  9777                           ;CC2500_B1.c: 232: RC4 = 0;
  9778  1ED9  0020               	movlb	0	; select bank0
  9779  1EDA  120E               	bcf	14,4	;volatile
  9780  1EDB                     l304:	
  9781                           
  9782                           ;CC2500_B1.c: 233: RC3 = 1;
  9783  1EDB  158E               	bsf	14,3	;volatile
  9784                           
  9785                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9786  1EDC  1003               	clrc
  9787  1EDD  0021               	movlb	1	; select bank1
  9788  1EDE  0DCD               	rlf	_SPI0Buffer^(0+128),f
  9789                           
  9790                           ;CC2500_B1.c: 235: RC3 = 0;
  9791  1EDF  0020               	movlb	0	; select bank0
  9792  1EE0  118E               	bcf	14,3	;volatile
  9793  1EE1  3001               	movlw	1
  9794  1EE2  00A0               	movwf	??_CC2500_WriteByte
  9795  1EE3  0820               	movf	??_CC2500_WriteByte,w
  9796  1EE4  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9797  1EE5  2ECF               	goto	L5
  9798  1EE6                     __end_of_CC2500_WriteByte:	
  9799                           
  9800                           	psect	text53
  9801  1B4C                     __ptext53:	
  9802 ;; *************** function _RF_Initialization *****************
  9803 ;; Defined at:
  9804 ;;		line 9 in file "../src/RF_Control_B1.c"
  9805 ;; Parameters:    Size  Location     Type
  9806 ;;		None
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;		None
  9809 ;; Return value:  Size  Location     Type
  9810 ;;		None               void
  9811 ;; Registers used:
  9812 ;;		wreg, status,2, status,0, pclath, cstack
  9813 ;; Tracked objects:
  9814 ;;		On entry : 0/0
  9815 ;;		On exit  : 0/0
  9816 ;;		Unchanged: 0/0
  9817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;Total ram usage:        0 bytes
  9823 ;; Hardware stack levels used:    1
  9824 ;; Hardware stack levels required when called:    6
  9825 ;; This function calls:
  9826 ;;		_setRF_Initialization
  9827 ;; This function is called by:
  9828 ;;		_main
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           
  9833                           ;psect for function _RF_Initialization
  9834  1B4C                     _RF_Initialization:	
  9835                           
  9836                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9837                           
  9838                           ;incstack = 0
  9839                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9840  1B4C  319C  240A         	fcall	_setRF_Initialization
  9841  1B4E  0008               	return
  9842  1B4F                     __end_of_RF_Initialization:	
  9843                           
  9844                           	psect	text54
  9845  1C0A                     __ptext54:	
  9846 ;; *************** function _setRF_Initialization *****************
  9847 ;; Defined at:
  9848 ;;		line 17 in file "../src/RF_Control_B1.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;		None
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;		None
  9853 ;; Return value:  Size  Location     Type
  9854 ;;		None               void
  9855 ;; Registers used:
  9856 ;;		wreg
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;Total ram usage:        1 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    5
  9869 ;; This function calls:
  9870 ;;		Nothing
  9871 ;; This function is called by:
  9872 ;;		_RF_Initialization
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           
  9877                           ;psect for function _setRF_Initialization
  9878  1C0A                     _setRF_Initialization:	
  9879                           
  9880                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9881                           
  9882                           ;incstack = 0
  9883                           ; Regs used in _setRF_Initialization: [wreg]
  9884  1C0A  3015               	movlw	21
  9885  1C0B  0020               	movlb	0	; select bank0
  9886  1C0C  00A0               	movwf	??_setRF_Initialization
  9887  1C0D  0820               	movf	??_setRF_Initialization,w
  9888  1C0E  0021               	movlb	1	; select bank1
  9889  1C0F  00CF               	movwf	_Tx_Length^(0+128)
  9890                           
  9891                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9892  1C10  30C8               	movlw	200
  9893  1C11  00A7               	movwf	(_RF1^(0+128)+7)
  9894  1C12  3000               	movlw	0
  9895  1C13  00A8               	movwf	(_RF1^(0+128)+8)
  9896  1C14  0008               	return
  9897  1C15                     __end_of_setRF_Initialization:	
  9898                           
  9899                           	psect	text55
  9900  1D7F                     __ptext55:	
  9901 ;; *************** function _Mcu_Initialization *****************
  9902 ;; Defined at:
  9903 ;;		line 30 in file "../src/MCU_B1.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;		None
  9906 ;; Auto vars:     Size  Location     Type
  9907 ;;		None
  9908 ;; Return value:  Size  Location     Type
  9909 ;;		None               void
  9910 ;; Registers used:
  9911 ;;		wreg, status,2, status,0, pclath, cstack
  9912 ;; Tracked objects:
  9913 ;;		On entry : 0/0
  9914 ;;		On exit  : 0/0
  9915 ;;		Unchanged: 0/0
  9916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;Total ram usage:        0 bytes
  9922 ;; Hardware stack levels used:    1
  9923 ;; Hardware stack levels required when called:    6
  9924 ;; This function calls:
  9925 ;;		_ADC_Set
  9926 ;;		_Fosc_Set
  9927 ;;		_IOC_Set
  9928 ;;		_IO_Set
  9929 ;;		_TMR1_Set
  9930 ;;		_WDT_Set
  9931 ;; This function is called by:
  9932 ;;		_main
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           
  9937                           ;psect for function _Mcu_Initialization
  9938  1D7F                     _Mcu_Initialization:	
  9939                           
  9940                           ;MCU_B1.c: 32: Fosc_Set();
  9941                           
  9942                           ;incstack = 0
  9943                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9944  1D7F  319B  2368  319D   	fcall	_Fosc_Set
  9945                           
  9946                           ;MCU_B1.c: 34: IO_Set();
  9947  1D82  319F  2700  319D   	fcall	_IO_Set
  9948                           
  9949                           ;MCU_B1.c: 36: ;;
  9950                           ;MCU_B1.c: 38: TMR1_Set();
  9951  1D85  319C  2475  319D   	fcall	_TMR1_Set
  9952                           
  9953                           ;MCU_B1.c: 40: ADC_Set();
  9954  1D88  319B  239E  319D   	fcall	_ADC_Set
  9955                           
  9956                           ;MCU_B1.c: 42: ;;
  9957                           ;MCU_B1.c: 44: ;;
  9958                           ;MCU_B1.c: 46: IOC_Set();
  9959  1D8B  319B  23FF  319D   	fcall	_IOC_Set
  9960                           
  9961                           ;MCU_B1.c: 48: ;;
  9962                           ;MCU_B1.c: 50: ;;
  9963                           ;MCU_B1.c: 52: WDT_Set();
  9964  1D8E  319C  2481         	fcall	_WDT_Set
  9965  1D90  0008               	return
  9966  1D91                     __end_of_Mcu_Initialization:	
  9967                           
  9968                           	psect	text56
  9969  1C81                     __ptext56:	
  9970 ;; *************** function _WDT_Set *****************
  9971 ;; Defined at:
  9972 ;;		line 1102 in file "../src/MCU_B1.c"
  9973 ;; Parameters:    Size  Location     Type
  9974 ;;		None
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;		None
  9977 ;; Return value:  Size  Location     Type
  9978 ;;		None               void
  9979 ;; Registers used:
  9980 ;;		wreg
  9981 ;; Tracked objects:
  9982 ;;		On entry : 0/0
  9983 ;;		On exit  : 0/0
  9984 ;;		Unchanged: 0/0
  9985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;Total ram usage:        1 bytes
  9991 ;; Hardware stack levels used:    1
  9992 ;; Hardware stack levels required when called:    5
  9993 ;; This function calls:
  9994 ;;		Nothing
  9995 ;; This function is called by:
  9996 ;;		_Mcu_Initialization
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function _WDT_Set
 10002  1C81                     _WDT_Set:	
 10003                           
 10004                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10005                           
 10006                           ;incstack = 0
 10007                           ; Regs used in _WDT_Set: [wreg]
 10008  1C81  3017               	movlw	23
 10009  1C82  0021               	movlb	1	; select bank1
 10010  1C83  0097               	movwf	23	;volatile
 10011                           
 10012                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10013  1C84  0022               	movlb	2	; select bank2
 10014  1C85  1436               	bsf	_WDT^(0+256),0
 10015                           
 10016                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10017  1C86  300A               	movlw	10
 10018  1C87  0020               	movlb	0	; select bank0
 10019  1C88  00A0               	movwf	??_WDT_Set
 10020  1C89  0820               	movf	??_WDT_Set,w
 10021  1C8A  0022               	movlb	2	; select bank2
 10022  1C8B  00B7               	movwf	(_WDT^(0+256)+1)
 10023  1C8C  0008               	return
 10024  1C8D                     __end_of_WDT_Set:	
 10025                           
 10026                           	psect	text57
 10027  1C75                     __ptext57:	
 10028 ;; *************** function _TMR1_Set *****************
 10029 ;; Defined at:
 10030 ;;		line 226 in file "../src/MCU_B1.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;		None
 10033 ;; Auto vars:     Size  Location     Type
 10034 ;;		None
 10035 ;; Return value:  Size  Location     Type
 10036 ;;		None               void
 10037 ;; Registers used:
 10038 ;;		wreg
 10039 ;; Tracked objects:
 10040 ;;		On entry : 0/0
 10041 ;;		On exit  : 0/0
 10042 ;;		Unchanged: 0/0
 10043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10048 ;;Total ram usage:        0 bytes
 10049 ;; Hardware stack levels used:    1
 10050 ;; Hardware stack levels required when called:    5
 10051 ;; This function calls:
 10052 ;;		Nothing
 10053 ;; This function is called by:
 10054 ;;		_Mcu_Initialization
 10055 ;; This function uses a non-reentrant model
 10056 ;;
 10057                           
 10058                           
 10059                           ;psect for function _TMR1_Set
 10060  1C75                     _TMR1_Set:	
 10061                           
 10062                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10063                           
 10064                           ;incstack = 0
 10065                           ; Regs used in _TMR1_Set: [wreg]
 10066  1C75  3041               	movlw	65
 10067  1C76  0020               	movlb	0	; select bank0
 10068  1C77  0098               	movwf	24	;volatile
 10069                           
 10070                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10071  1C78  30FA               	movlw	250
 10072  1C79  0097               	movwf	23	;volatile
 10073                           
 10074                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10075  1C7A  3038               	movlw	56
 10076  1C7B  0096               	movwf	22	;volatile
 10077                           
 10078                           ;MCU_B1.c: 230: TMR1IE = 1;
 10079  1C7C  0021               	movlb	1	; select bank1
 10080  1C7D  1411               	bsf	17,0	;volatile
 10081                           
 10082                           ;MCU_B1.c: 231: PEIE = 1;
 10083  1C7E  170B               	bsf	11,6	;volatile
 10084                           
 10085                           ;MCU_B1.c: 232: GIE = 1;
 10086  1C7F  178B               	bsf	11,7	;volatile
 10087  1C80  0008               	return
 10088  1C81                     __end_of_TMR1_Set:	
 10089                           
 10090                           	psect	text58
 10091  1F00                     __ptext58:	
 10092 ;; *************** function _IO_Set *****************
 10093 ;; Defined at:
 10094 ;;		line 60 in file "../src/MCU_B1.c"
 10095 ;; Parameters:    Size  Location     Type
 10096 ;;		None
 10097 ;; Auto vars:     Size  Location     Type
 10098 ;;		None
 10099 ;; Return value:  Size  Location     Type
 10100 ;;		None               void
 10101 ;; Registers used:
 10102 ;;		wreg, status,2
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;Total ram usage:        0 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; Hardware stack levels required when called:    5
 10115 ;; This function calls:
 10116 ;;		Nothing
 10117 ;; This function is called by:
 10118 ;;		_Mcu_Initialization
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           
 10123                           ;psect for function _IO_Set
 10124  1F00                     _IO_Set:	
 10125                           
 10126                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10127                           
 10128                           ;incstack = 0
 10129                           ; Regs used in _IO_Set: [wreg+status,2]
 10130  1F00  30F7               	movlw	247
 10131  1F01  0021               	movlb	1	; select bank1
 10132  1F02  008C               	movwf	12	;volatile
 10133                           
 10134                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10135  1F03  3004               	movlw	4
 10136  1F04  008D               	movwf	13	;volatile
 10137                           
 10138                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10139  1F05  3026               	movlw	38
 10140  1F06  008E               	movwf	14	;volatile
 10141                           
 10142                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10143  1F07  0022               	movlb	2	; select bank2
 10144  1F08  018C               	clrf	12	;volatile
 10145                           
 10146                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10147  1F09  018D               	clrf	13	;volatile
 10148                           
 10149                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10150  1F0A  018E               	clrf	14	;volatile
 10151                           
 10152                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10153  1F0B  300E               	movlw	14
 10154  1F0C  0023               	movlb	3	; select bank3
 10155  1F0D  008C               	movwf	12	;volatile
 10156                           
 10157                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10158  1F0E  018D               	clrf	13	;volatile
 10159                           
 10160                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10161  1F0F  018E               	clrf	14	;volatile
 10162                           
 10163                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10164  1F10  30F7               	movlw	247
 10165  1F11  0020               	movlb	0	; select bank0
 10166  1F12  008C               	movwf	12	;volatile
 10167                           
 10168                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10169  1F13  3004               	movlw	4
 10170  1F14  008D               	movwf	13	;volatile
 10171                           
 10172                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10173  1F15  3026               	movlw	38
 10174  1F16  008E               	movwf	14	;volatile
 10175                           
 10176                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10177  1F17  0024               	movlb	4	; select bank4
 10178  1F18  018D               	clrf	13	;volatile
 10179  1F19  0008               	return
 10180  1F1A                     __end_of_IO_Set:	
 10181                           
 10182                           	psect	text59
 10183  1BFF                     __ptext59:	
 10184 ;; *************** function _IOC_Set *****************
 10185 ;; Defined at:
 10186 ;;		line 380 in file "../src/MCU_B1.c"
 10187 ;; Parameters:    Size  Location     Type
 10188 ;;		None
 10189 ;; Auto vars:     Size  Location     Type
 10190 ;;		None
 10191 ;; Return value:  Size  Location     Type
 10192 ;;		None               void
 10193 ;; Registers used:
 10194 ;;		wreg, status,2
 10195 ;; Tracked objects:
 10196 ;;		On entry : 0/0
 10197 ;;		On exit  : 0/0
 10198 ;;		Unchanged: 0/0
 10199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;Total ram usage:        0 bytes
 10205 ;; Hardware stack levels used:    1
 10206 ;; Hardware stack levels required when called:    5
 10207 ;; This function calls:
 10208 ;;		Nothing
 10209 ;; This function is called by:
 10210 ;;		_Mcu_Initialization
 10211 ;; This function uses a non-reentrant model
 10212 ;;
 10213                           
 10214                           
 10215                           ;psect for function _IOC_Set
 10216  1BFF                     _IOC_Set:	
 10217                           
 10218                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10219                           
 10220                           ;incstack = 0
 10221                           ; Regs used in _IOC_Set: [wreg+status,2]
 10222  1BFF  3004               	movlw	4
 10223  1C00  0027               	movlb	7	; select bank7
 10224  1C01  0094               	movwf	20	;volatile
 10225                           
 10226                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10227  1C02  3004               	movlw	4
 10228  1C03  0095               	movwf	21	;volatile
 10229                           
 10230                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10231  1C04  0196               	clrf	22	;volatile
 10232                           
 10233                           ;MCU_B1.c: 387: IOCIE = 1;
 10234  1C05  158B               	bsf	11,3	;volatile
 10235                           
 10236                           ;MCU_B1.c: 388: IOCIF = 0;
 10237  1C06  100B               	bcf	11,0	;volatile
 10238                           
 10239                           ;MCU_B1.c: 389: PEIE = 1;
 10240  1C07  170B               	bsf	11,6	;volatile
 10241                           
 10242                           ;MCU_B1.c: 390: GIE = 1;
 10243  1C08  178B               	bsf	11,7	;volatile
 10244  1C09  0008               	return
 10245  1C0A                     __end_of_IOC_Set:	
 10246                           
 10247                           	psect	text60
 10248  1B68                     __ptext60:	
 10249 ;; *************** function _Fosc_Set *****************
 10250 ;; Defined at:
 10251 ;;		line 56 in file "../src/MCU_B1.c"
 10252 ;; Parameters:    Size  Location     Type
 10253 ;;		None
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;		None
 10256 ;; Return value:  Size  Location     Type
 10257 ;;		None               void
 10258 ;; Registers used:
 10259 ;;		wreg
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/0
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;Total ram usage:        0 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; Hardware stack levels required when called:    5
 10272 ;; This function calls:
 10273 ;;		Nothing
 10274 ;; This function is called by:
 10275 ;;		_Mcu_Initialization
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           
 10280                           ;psect for function _Fosc_Set
 10281  1B68                     _Fosc_Set:	
 10282                           
 10283                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10284                           
 10285                           ;incstack = 0
 10286                           ; Regs used in _Fosc_Set: [wreg]
 10287  1B68  3078               	movlw	120
 10288  1B69  0021               	movlb	1	; select bank1
 10289  1B6A  0099               	movwf	25	;volatile
 10290  1B6B  0008               	return
 10291  1B6C                     __end_of_Fosc_Set:	
 10292                           
 10293                           	psect	text61
 10294  1B9E                     __ptext61:	
 10295 ;; *************** function _ADC_Set *****************
 10296 ;; Defined at:
 10297 ;;		line 427 in file "../src/MCU_B1.c"
 10298 ;; Parameters:    Size  Location     Type
 10299 ;;		None
 10300 ;; Auto vars:     Size  Location     Type
 10301 ;;		None
 10302 ;; Return value:  Size  Location     Type
 10303 ;;		None               void
 10304 ;; Registers used:
 10305 ;;		wreg
 10306 ;; Tracked objects:
 10307 ;;		On entry : 0/0
 10308 ;;		On exit  : 0/0
 10309 ;;		Unchanged: 0/0
 10310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;Total ram usage:        0 bytes
 10316 ;; Hardware stack levels used:    1
 10317 ;; Hardware stack levels required when called:    5
 10318 ;; This function calls:
 10319 ;;		Nothing
 10320 ;; This function is called by:
 10321 ;;		_Mcu_Initialization
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           
 10326                           ;psect for function _ADC_Set
 10327  1B9E                     _ADC_Set:	
 10328                           
 10329                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10330                           
 10331                           ;incstack = 0
 10332                           ; Regs used in _ADC_Set: [wreg]
 10333  1B9E  30F3               	movlw	243
 10334  1B9F  0021               	movlb	1	; select bank1
 10335  1BA0  009E               	movwf	30	;volatile
 10336                           
 10337                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10338  1BA1  30C1               	movlw	193
 10339  1BA2  0022               	movlb	2	; select bank2
 10340  1BA3  0097               	movwf	23	;volatile
 10341  1BA4  0008               	return
 10342  1BA5                     __end_of_ADC_Set:	
 10343                           
 10344                           	psect	text62
 10345  0053                     __ptext62:	
 10346 ;; *************** function _Load_Main *****************
 10347 ;; Defined at:
 10348 ;;		line 39 in file "../src/OverLoad_B1.c"
 10349 ;; Parameters:    Size  Location     Type
 10350 ;;		None
 10351 ;; Auto vars:     Size  Location     Type
 10352 ;;  i               2   16[BANK0 ] int 
 10353 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10354 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10355 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10356 ;;  error           1   10[BANK0 ] unsigned char 
 10357 ;; Return value:  Size  Location     Type
 10358 ;;		None               void
 10359 ;; Registers used:
 10360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;Total ram usage:       10 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    6
 10373 ;; This function calls:
 10374 ;;		___lwdiv
 10375 ;;		___wmul
 10376 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10377 ;;		_getDimmer_LoadGO
 10378 ;;		_getDimmer_Load_Status
 10379 ;;		_getMain_All_Error_Status
 10380 ;;		_getMain_All_LightsStatus
 10381 ;;		_getMain_Lights_Count
 10382 ;;		_setLoad_AH_AL_Restore
 10383 ;; This function is called by:
 10384 ;;		_main
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function _Load_Main
 10390  0053                     _Load_Main:	
 10391                           
 10392                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10393                           
 10394                           ;incstack = 0
 10395                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10396  0053  3000               	movlw	0
 10397  0054  3191  21B2  3180   	fcall	_getMain_All_Error_Status
 10398  0057  0020               	movlb	0	; select bank0
 10399  0058  00A8               	movwf	??_Load_Main
 10400  0059  0828               	movf	??_Load_Main,w
 10401  005A  00AA               	movwf	Load_Main@error
 10402                           
 10403                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10404  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10405  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10406  005D  01AF               	clrf	Load_Main@LightsCount
 10407                           
 10408                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10409  005E  0022               	movlb	2	; select bank2
 10410  005F  1C3E               	btfss	_Load^(0+256),0
 10411  0060  29FF               	goto	l1621
 10412                           
 10413                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10414  0061  319B  23DF  3180   	fcall	_getMain_All_LightsStatus
 10415  0064  3800               	iorlw	0
 10416  0065  1D03               	skipz
 10417  0066  2869               	goto	l10056
 10418                           
 10419                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10420  0067  0022               	movlb	2	; select bank2
 10421  0068  288A               	goto	l10074
 10422  0069                     l10056:	
 10423                           ;OverLoad_B1.c: 46: } else {
 10424                           
 10425                           
 10426                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10427  0069  0020               	movlb	0	; select bank0
 10428  006A  08AA               	movf	Load_Main@error,f
 10429  006B  1D03               	skipz
 10430  006C  2887               	goto	l1624
 10431  006D  319D  25B7  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10432  0070  3800               	iorlw	0
 10433  0071  1D03               	skipz
 10434  0072  2887               	goto	l1624
 10435                           
 10436                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10437  0073  0022               	movlb	2	; select bank2
 10438  0074  14BE               	bsf	_Load^(0+256),1
 10439                           
 10440                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10441  0075  319B  23B4  3180   	fcall	_getDimmer_LoadGO
 10442  0078  3A01               	xorlw	1
 10443  0079  1D03               	skipz
 10444  007A  2882               	goto	l1625
 10445                           
 10446                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10447  007B  0022               	movlb	2	; select bank2
 10448  007C  1DBE               	btfss	_Load^(0+256),3
 10449  007D  1BBE               	btfsc	_Load^(0+256),7
 10450  007E  288B               	goto	l1623
 10451                           
 10452                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10453  007F  15BE               	bsf	_Load^(0+256),3
 10454                           
 10455                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10456  0080  01E3               	clrf	(_Load^(0+256)+37)
 10457                           
 10458                           ;OverLoad_B1.c: 56: }
 10459                           ;OverLoad_B1.c: 57: } else {
 10460  0081  288B               	goto	l1623
 10461  0082                     l1625:	
 10462                           
 10463                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10464  0082  0022               	movlb	2	; select bank2
 10465  0083  1FBE               	btfss	_Load^(0+256),7
 10466  0084  288B               	goto	l1623
 10467                           
 10468                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10469  0085  13BE               	bcf	_Load^(0+256),7
 10470                           
 10471                           ;OverLoad_B1.c: 60: }
 10472                           ;OverLoad_B1.c: 61: }
 10473                           ;OverLoad_B1.c: 62: } else {
 10474  0086  288B               	goto	l1623
 10475  0087                     l1624:	
 10476                           
 10477                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10478  0087  0022               	movlb	2	; select bank2
 10479  0088  1CBE               	btfss	_Load^(0+256),1
 10480  0089  288B               	goto	l1623
 10481  008A                     l10074:	
 10482                           
 10483                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10484  008A  10BE               	bcf	_Load^(0+256),1
 10485  008B                     l1623:	
 10486                           
 10487                           ;OverLoad_B1.c: 65: }
 10488                           ;OverLoad_B1.c: 66: }
 10489                           ;OverLoad_B1.c: 88: }
 10490                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10491  008B  1CBE               	btfss	_Load^(0+256),1
 10492  008C  29DB               	goto	l1631
 10493                           
 10494                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10495  008D  153E               	bsf	_Load^(0+256),2
 10496                           
 10497                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10498  008E  1E3E               	btfss	_Load^(0+256),4
 10499  008F  29D9               	goto	l1632
 10500                           
 10501                           ;OverLoad_B1.c: 95: Load.Time++;
 10502  0090  3001               	movlw	1
 10503  0091  07BF               	addwf	(_Load^(0+256)+1),f
 10504  0092  3000               	movlw	0
 10505  0093  3DC0               	addwfc	((_Load+1)^(0+256)+1),f
 10506                           
 10507                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10508  0094  3000               	movlw	0
 10509  0095  0240               	subwf	((_Load+1)^(0+256)+1),w
 10510  0096  3002               	movlw	2
 10511  0097  1903               	skipnz
 10512  0098  023F               	subwf	(_Load^(0+256)+1),w
 10513  0099  1C03               	skipc
 10514  009A  0008               	return
 10515                           
 10516                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10517  009B  01BF               	clrf	(_Load^(0+256)+1)
 10518  009C  01C0               	clrf	((_Load+1)^(0+256)+1)
 10519                           
 10520                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10521  009D  123E               	bcf	_Load^(0+256),4
 10522                           
 10523                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10524  009E  3001               	movlw	1
 10525  009F  0020               	movlb	0	; select bank0
 10526  00A0  00B0               	movwf	Load_Main@i
 10527  00A1  3000               	movlw	0
 10528  00A2  00B1               	movwf	Load_Main@i+1
 10529  00A3  0831               	movf	Load_Main@i+1,w
 10530  00A4  3A80               	xorlw	128
 10531  00A5  00A8               	movwf	??_Load_Main
 10532  00A6  3080               	movlw	128
 10533  00A7  0228               	subwf	??_Load_Main,w
 10534  00A8  1D03               	skipz
 10535  00A9  28AC               	goto	u11665
 10536  00AA  3004               	movlw	4
 10537  00AB  0230               	subwf	Load_Main@i,w
 10538  00AC                     u11665:	
 10539  00AC  1803               	btfsc	3,0
 10540  00AD  28E0               	goto	l10096
 10541  00AE                     l10090:	
 10542                           
 10543                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10544  00AE  0020               	movlb	0	; select bank0
 10545  00AF  3530               	lslf	Load_Main@i,w
 10546  00B0  3E49               	addlw	(_Load+11)& (0+255)
 10547  00B1  0086               	movwf	6
 10548  00B2  3001               	movlw	1	; select bank2/3
 10549  00B3  0087               	movwf	7
 10550  00B4  3F40               	moviw [0]fsr1
 10551  00B5  00A8               	movwf	??_Load_Main
 10552  00B6  3F41               	moviw [1]fsr1
 10553  00B7  00A9               	movwf	??_Load_Main+1
 10554  00B8  0828               	movf	??_Load_Main,w
 10555  00B9  0022               	movlb	2	; select bank2
 10556  00BA  07C3               	addwf	(_Load^(0+256)+5),f
 10557  00BB  0020               	movlb	0	; select bank0
 10558  00BC  0829               	movf	??_Load_Main+1,w
 10559  00BD  0022               	movlb	2	; select bank2
 10560  00BE  3DC4               	addwfc	((_Load+1)^(0+256)+5),f
 10561                           
 10562                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10563  00BF  0020               	movlb	0	; select bank0
 10564  00C0  3530               	lslf	Load_Main@i,w
 10565  00C1  3E53               	addlw	(_Load+21)& (0+255)
 10566  00C2  0086               	movwf	6
 10567  00C3  3001               	movlw	1	; select bank2/3
 10568  00C4  0087               	movwf	7
 10569  00C5  3F40               	moviw [0]fsr1
 10570  00C6  00A8               	movwf	??_Load_Main
 10571  00C7  3F41               	moviw [1]fsr1
 10572  00C8  00A9               	movwf	??_Load_Main+1
 10573  00C9  0828               	movf	??_Load_Main,w
 10574  00CA  0022               	movlb	2	; select bank2
 10575  00CB  07C5               	addwf	(_Load^(0+256)+7),f
 10576  00CC  0020               	movlb	0	; select bank0
 10577  00CD  0829               	movf	??_Load_Main+1,w
 10578  00CE  0022               	movlb	2	; select bank2
 10579  00CF  3DC6               	addwfc	((_Load+1)^(0+256)+7),f
 10580  00D0  3001               	movlw	1
 10581  00D1  0020               	movlb	0	; select bank0
 10582  00D2  07B0               	addwf	Load_Main@i,f
 10583  00D3  3000               	movlw	0
 10584  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10585  00D5  0831               	movf	Load_Main@i+1,w
 10586  00D6  3A80               	xorlw	128
 10587  00D7  00A8               	movwf	??_Load_Main
 10588  00D8  3080               	movlw	128
 10589  00D9  0228               	subwf	??_Load_Main,w
 10590  00DA  1D03               	skipz
 10591  00DB  28DE               	goto	u11675
 10592  00DC  3004               	movlw	4
 10593  00DD  0230               	subwf	Load_Main@i,w
 10594  00DE                     u11675:	
 10595  00DE  1C03               	skipc
 10596  00DF  28AE               	goto	l10090
 10597  00E0                     l10096:	
 10598                           
 10599                           ;OverLoad_B1.c: 103: }
 10600                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10601  00E0  3003               	movlw	3
 10602  00E1  0020               	movlb	0	; select bank0
 10603  00E2  00A0               	movwf	___lwdiv@divisor
 10604  00E3  3000               	movlw	0
 10605  00E4  00A1               	movwf	___lwdiv@divisor+1
 10606  00E5  0022               	movlb	2	; select bank2
 10607  00E6  0844               	movf	((_Load+1)^(0+256)+5),w
 10608  00E7  0020               	movlb	0	; select bank0
 10609  00E8  01A3               	clrf	___lwdiv@dividend+1
 10610  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 10611  00EA  0022               	movlb	2	; select bank2
 10612  00EB  0843               	movf	(_Load^(0+256)+5),w
 10613  00EC  0020               	movlb	0	; select bank0
 10614  00ED  01A2               	clrf	___lwdiv@dividend
 10615  00EE  07A2               	addwf	___lwdiv@dividend,f
 10616  00EF  3192  2284  3180   	fcall	___lwdiv
 10617  00F2  0020               	movlb	0	; select bank0
 10618  00F3  0821               	movf	?___lwdiv+1,w
 10619  00F4  0022               	movlb	2	; select bank2
 10620  00F5  01C4               	clrf	((_Load+1)^(0+256)+5)
 10621  00F6  07C4               	addwf	((_Load+1)^(0+256)+5),f
 10622  00F7  0020               	movlb	0	; select bank0
 10623  00F8  0820               	movf	?___lwdiv,w
 10624  00F9  0022               	movlb	2	; select bank2
 10625  00FA  01C3               	clrf	(_Load^(0+256)+5)
 10626  00FB  07C3               	addwf	(_Load^(0+256)+5),f
 10627                           
 10628                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10629  00FC  3003               	movlw	3
 10630  00FD  0020               	movlb	0	; select bank0
 10631  00FE  00A0               	movwf	___lwdiv@divisor
 10632  00FF  3000               	movlw	0
 10633  0100  00A1               	movwf	___lwdiv@divisor+1
 10634  0101  0022               	movlb	2	; select bank2
 10635  0102  0846               	movf	((_Load+1)^(0+256)+7),w
 10636  0103  0020               	movlb	0	; select bank0
 10637  0104  01A3               	clrf	___lwdiv@dividend+1
 10638  0105  07A3               	addwf	___lwdiv@dividend+1,f
 10639  0106  0022               	movlb	2	; select bank2
 10640  0107  0845               	movf	(_Load^(0+256)+7),w
 10641  0108  0020               	movlb	0	; select bank0
 10642  0109  01A2               	clrf	___lwdiv@dividend
 10643  010A  07A2               	addwf	___lwdiv@dividend,f
 10644  010B  3192  2284  3180   	fcall	___lwdiv
 10645  010E  0020               	movlb	0	; select bank0
 10646  010F  0821               	movf	?___lwdiv+1,w
 10647  0110  0022               	movlb	2	; select bank2
 10648  0111  01C6               	clrf	((_Load+1)^(0+256)+7)
 10649  0112  07C6               	addwf	((_Load+1)^(0+256)+7),f
 10650  0113  0020               	movlb	0	; select bank0
 10651  0114  0820               	movf	?___lwdiv,w
 10652  0115  0022               	movlb	2	; select bank2
 10653  0116  01C5               	clrf	(_Load^(0+256)+7)
 10654  0117  07C5               	addwf	(_Load^(0+256)+7),f
 10655                           
 10656                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10657  0118  319F  276B  3180   	fcall	_setLoad_AH_AL_Restore
 10658                           
 10659                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10660  011B  0022               	movlb	2	; select bank2
 10661  011C  0846               	movf	((_Load+1)^(0+256)+7),w
 10662  011D  0244               	subwf	((_Load+1)^(0+256)+5),w
 10663  011E  1D03               	skipz
 10664  011F  2922               	goto	u11685
 10665  0120  0845               	movf	(_Load^(0+256)+7),w
 10666  0121  0243               	subwf	(_Load^(0+256)+5),w
 10667  0122                     u11685:	
 10668  0122  1C03               	skipc
 10669  0123  0008               	return
 10670                           
 10671                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10672  0124  3005               	movlw	5
 10673  0125  3E3E               	addlw	_Load& (0+255)
 10674  0126  0086               	movwf	6
 10675  0127  3001               	movlw	1	; select bank2/3
 10676  0128  0087               	movwf	7
 10677  0129  0945               	comf	(_Load^(0+256)+7),w
 10678  012A  0020               	movlb	0	; select bank0
 10679  012B  00A8               	movwf	??_Load_Main
 10680  012C  0022               	movlb	2	; select bank2
 10681  012D  0946               	comf	((_Load+1)^(0+256)+7),w
 10682  012E  0020               	movlb	0	; select bank0
 10683  012F  00A9               	movwf	??_Load_Main+1
 10684  0130  0AA8               	incf	??_Load_Main,f
 10685  0131  1903               	skipnz
 10686  0132  0AA9               	incf	??_Load_Main+1,f
 10687  0133  3F40               	moviw [0]fsr1
 10688  0134  0728               	addwf	??_Load_Main,w
 10689  0135  0022               	movlb	2	; select bank2
 10690  0136  00DD               	movwf	(_Load^(0+256)+31)
 10691  0137  3F41               	moviw [1]fsr1
 10692  0138  0020               	movlb	0	; select bank0
 10693  0139  3D29               	addwfc	??_Load_Main+1,w
 10694  013A  0022               	movlb	2	; select bank2
 10695  013B  00DE               	movwf	(_Load^(0+256)+32)
 10696                           
 10697                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10698  013C  01C3               	clrf	(_Load^(0+256)+5)
 10699  013D  01C4               	clrf	((_Load+1)^(0+256)+5)
 10700                           
 10701                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10702  013E  01C5               	clrf	(_Load^(0+256)+7)
 10703  013F  01C6               	clrf	((_Load+1)^(0+256)+7)
 10704                           
 10705                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10706  0140  1DBE               	btfss	_Load^(0+256),3
 10707  0141  299B               	goto	l10136
 10708                           
 10709                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10710  0142  3002               	movlw	2
 10711  0143  0263               	subwf	(_Load^(0+256)+37),w
 10712  0144  1803               	skipnc
 10713  0145  299B               	goto	l10136
 10714                           
 10715                           ;OverLoad_B1.c: 115: Load.Count++;
 10716  0146  3001               	movlw	1
 10717  0147  0020               	movlb	0	; select bank0
 10718  0148  00A8               	movwf	??_Load_Main
 10719  0149  0828               	movf	??_Load_Main,w
 10720  014A  0022               	movlb	2	; select bank2
 10721  014B  07E3               	addwf	(_Load^(0+256)+37),f
 10722                           
 10723                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10724  014C  319B  23BC  3180   	fcall	_getDimmer_Load_Status
 10725  014F  0020               	movlb	0	; select bank0
 10726  0150  00A8               	movwf	??_Load_Main
 10727  0151  0828               	movf	??_Load_Main,w
 10728  0152  00AE               	movwf	Load_Main@Load_RunStatus
 10729                           
 10730                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10731  0153  319B  23F4  3180   	fcall	_getMain_Lights_Count
 10732  0156  0020               	movlb	0	; select bank0
 10733  0157  00A8               	movwf	??_Load_Main
 10734  0158  0828               	movf	??_Load_Main,w
 10735  0159  00AF               	movwf	Load_Main@LightsCount
 10736                           
 10737                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10738  015A  0022               	movlb	2	; select bank2
 10739  015B  0863               	movf	(_Load^(0+256)+37),w
 10740  015C  3A01               	xorlw	1
 10741  015D  1D03               	skipz
 10742  015E  2963               	goto	l10122
 10743                           
 10744                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10745  015F  3074               	movlw	116
 10746  0160  00E1               	movwf	(_Load^(0+256)+35)
 10747  0161  3004               	movlw	4
 10748  0162  2970               	goto	L6
 10749  0163                     l10122:	
 10750                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10751                           
 10752  0163  0863               	movf	(_Load^(0+256)+37),w
 10753  0164  3A02               	xorlw	2
 10754  0165  1D03               	skipz
 10755  0166  299B               	goto	l10136
 10756                           
 10757                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10758  0167  0020               	movlb	0	; select bank0
 10759  0168  082F               	movf	Load_Main@LightsCount,w
 10760  0169  3A01               	xorlw	1
 10761  016A  1D03               	skipz
 10762  016B  2972               	goto	l10128
 10763                           
 10764                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.8*57);
 10765  016C  3066               	movlw	102
 10766  016D  0022               	movlb	2	; select bank2
 10767  016E  00E1               	movwf	(_Load^(0+256)+35)
 10768  016F  3000               	movlw	0
 10769  0170                     L6:	
 10770  0170  00E2               	movwf	(_Load^(0+256)+36)
 10771                           
 10772                           ;OverLoad_B1.c: 130: } else {
 10773  0171  299B               	goto	l10136
 10774  0172                     l10128:	
 10775                           
 10776                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10777  0172  0020               	movlb	0	; select bank0
 10778  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 10779  0174  1D03               	skipz
 10780  0175  298F               	goto	l10132
 10781                           
 10782                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.8*57) * LightsCount;
 10783  0176  082F               	movf	Load_Main@LightsCount,w
 10784  0177  00A8               	movwf	??_Load_Main
 10785  0178  01A9               	clrf	??_Load_Main+1
 10786  0179  0828               	movf	??_Load_Main,w
 10787  017A  00A0               	movwf	___wmul@multiplier
 10788  017B  0829               	movf	??_Load_Main+1,w
 10789  017C  00A1               	movwf	___wmul@multiplier+1
 10790  017D  3066               	movlw	102
 10791  017E  00A2               	movwf	___wmul@multiplicand
 10792  017F  3000               	movlw	0
 10793  0180  00A3               	movwf	___wmul@multiplicand+1
 10794  0181  319F  27A4  3180   	fcall	___wmul
 10795  0184  0020               	movlb	0	; select bank0
 10796  0185  0821               	movf	?___wmul+1,w
 10797  0186  0022               	movlb	2	; select bank2
 10798  0187  01E2               	clrf	((_Load+1)^(0+256)+35)
 10799  0188  07E2               	addwf	((_Load+1)^(0+256)+35),f
 10800  0189  0020               	movlb	0	; select bank0
 10801  018A  0820               	movf	?___wmul,w
 10802  018B  0022               	movlb	2	; select bank2
 10803  018C  01E1               	clrf	(_Load^(0+256)+35)
 10804  018D  07E1               	addwf	(_Load^(0+256)+35),f
 10805                           
 10806                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10807  018E  299B               	goto	l10136
 10808  018F                     l10132:	
 10809  018F  0020               	movlb	0	; select bank0
 10810  0190  082E               	movf	Load_Main@Load_RunStatus,w
 10811  0191  3A01               	xorlw	1
 10812  0192  1D03               	skipz
 10813  0193  299B               	goto	l10136
 10814                           
 10815                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10816  0194  0022               	movlb	2	; select bank2
 10817  0195  0847               	movf	(_Load^(0+256)+9),w
 10818  0196  3E66               	addlw	102
 10819  0197  00E1               	movwf	(_Load^(0+256)+35)
 10820  0198  3000               	movlw	0
 10821  0199  3D48               	addwfc	((_Load+1)^(0+256)+9),w
 10822  019A  00E2               	movwf	((_Load+1)^(0+256)+35)
 10823  019B                     l10136:	
 10824                           
 10825                           ;OverLoad_B1.c: 135: }
 10826                           ;OverLoad_B1.c: 136: }
 10827                           ;OverLoad_B1.c: 137: }
 10828                           ;OverLoad_B1.c: 138: }
 10829                           ;OverLoad_B1.c: 139: }
 10830                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10831  019B  0022               	movlb	2	; select bank2
 10832  019C  0862               	movf	((_Load+1)^(0+256)+35),w
 10833  019D  025E               	subwf	((_Load+1)^(0+256)+31),w
 10834  019E  1D03               	skipz
 10835  019F  29A2               	goto	u11765
 10836  01A0  0861               	movf	(_Load^(0+256)+35),w
 10837  01A1  025D               	subwf	(_Load^(0+256)+31),w
 10838  01A2                     u11765:	
 10839  01A2  1C03               	skipc
 10840  01A3  29C1               	goto	l10152
 10841                           
 10842                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10843  01A4  0020               	movlb	0	; select bank0
 10844  01A5  082F               	movf	Load_Main@LightsCount,w
 10845  01A6  3A01               	xorlw	1
 10846  01A7  1903               	skipnz
 10847  01A8  29AB               	goto	l10142
 10848  01A9  3003               	movlw	3
 10849  01AA  29AC               	goto	L7
 10850  01AB                     l10142:	
 10851  01AB  3002               	movlw	2
 10852  01AC                     L7:	
 10853  01AC  00AB               	movwf	_Load_Main$3948
 10854  01AD  3000               	movlw	0
 10855  01AE  00AC               	movwf	_Load_Main$3948+1
 10856  01AF  082B               	movf	_Load_Main$3948,w
 10857  01B0  00A8               	movwf	??_Load_Main
 10858  01B1  0828               	movf	??_Load_Main,w
 10859  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 10860                           
 10861                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10862  01B3  3001               	movlw	1
 10863  01B4  00A8               	movwf	??_Load_Main
 10864  01B5  0828               	movf	??_Load_Main,w
 10865  01B6  0022               	movlb	2	; select bank2
 10866  01B7  07E4               	addwf	(_Load^(0+256)+38),f
 10867                           
 10868                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10869  01B8  0864               	movf	(_Load^(0+256)+38),w
 10870  01B9  0020               	movlb	0	; select bank0
 10871  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 10872  01BB  1803               	skipnc
 10873  01BC  0008               	return
 10874                           
 10875                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10876  01BD  0022               	movlb	2	; select bank2
 10877  01BE  01E4               	clrf	(_Load^(0+256)+38)
 10878                           
 10879                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10880  01BF  16BE               	bsf	_Load^(0+256),5
 10881                           
 10882                           ;OverLoad_B1.c: 168: }
 10883                           ;OverLoad_B1.c: 169: } else {
 10884  01C0  0008               	return
 10885  01C1                     l10152:	
 10886                           
 10887                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10888  01C1  01E4               	clrf	(_Load^(0+256)+38)
 10889                           
 10890                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10891  01C2  1DBE               	btfss	_Load^(0+256),3
 10892  01C3  0008               	return
 10893                           
 10894                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10895  01C4  3001               	movlw	1
 10896  01C5  0020               	movlb	0	; select bank0
 10897  01C6  00A8               	movwf	??_Load_Main
 10898  01C7  0828               	movf	??_Load_Main,w
 10899  01C8  0022               	movlb	2	; select bank2
 10900  01C9  07E5               	addwf	(_Load^(0+256)+39),f
 10901                           
 10902                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10903  01CA  3003               	movlw	3
 10904  01CB  0265               	subwf	(_Load^(0+256)+39),w
 10905  01CC  1C03               	skipc
 10906  01CD  0008               	return
 10907                           
 10908                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10909  01CE  01E5               	clrf	(_Load^(0+256)+39)
 10910                           
 10911                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10912  01CF  17BE               	bsf	_Load^(0+256),7
 10913                           
 10914                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10915  01D0  11BE               	bcf	_Load^(0+256),3
 10916                           
 10917                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10918  01D1  01E3               	clrf	(_Load^(0+256)+37)
 10919                           
 10920                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10921  01D2  085E               	movf	((_Load+1)^(0+256)+31),w
 10922  01D3  01C8               	clrf	((_Load+1)^(0+256)+9)
 10923  01D4  07C8               	addwf	((_Load+1)^(0+256)+9),f
 10924  01D5  085D               	movf	(_Load^(0+256)+31),w
 10925  01D6  01C7               	clrf	(_Load^(0+256)+9)
 10926  01D7  07C7               	addwf	(_Load^(0+256)+9),f
 10927                           
 10928                           ;OverLoad_B1.c: 182: }
 10929                           ;OverLoad_B1.c: 183: }
 10930                           ;OverLoad_B1.c: 206: }
 10931                           ;OverLoad_B1.c: 207: }
 10932                           ;OverLoad_B1.c: 208: }
 10933                           ;OverLoad_B1.c: 209: } else {
 10934  01D8  0008               	return
 10935  01D9                     l1632:	
 10936                           
 10937                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10938  01D9  163E               	bsf	_Load^(0+256),4
 10939                           
 10940                           ;OverLoad_B1.c: 211: }
 10941                           ;OverLoad_B1.c: 212: } else {
 10942  01DA  0008               	return
 10943  01DB                     l1631:	
 10944                           
 10945                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10946  01DB  1D3E               	btfss	_Load^(0+256),2
 10947  01DC  29EE               	goto	l10188
 10948                           
 10949                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10950  01DD  113E               	bcf	_Load^(0+256),2
 10951                           
 10952                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10953  01DE  123E               	bcf	_Load^(0+256),4
 10954                           
 10955                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10956  01DF  01BF               	clrf	(_Load^(0+256)+1)
 10957  01E0  01C0               	clrf	((_Load+1)^(0+256)+1)
 10958                           
 10959                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10960  01E1  319F  276B  3180   	fcall	_setLoad_AH_AL_Restore
 10961                           
 10962                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 10963  01E4  0022               	movlb	2	; select bank2
 10964  01E5  01E4               	clrf	(_Load^(0+256)+38)
 10965                           
 10966                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 10967  01E6  01E5               	clrf	(_Load^(0+256)+39)
 10968                           
 10969                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 10970  01E7  01C3               	clrf	(_Load^(0+256)+5)
 10971  01E8  01C4               	clrf	((_Load+1)^(0+256)+5)
 10972                           
 10973                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 10974  01E9  01C5               	clrf	(_Load^(0+256)+7)
 10975  01EA  01C6               	clrf	((_Load+1)^(0+256)+7)
 10976                           
 10977                           ;OverLoad_B1.c: 231: Load.Run = 0;
 10978  01EB  11BE               	bcf	_Load^(0+256),3
 10979                           
 10980                           ;OverLoad_B1.c: 232: Load.Count = 0;
 10981  01EC  01E3               	clrf	(_Load^(0+256)+37)
 10982                           
 10983                           ;OverLoad_B1.c: 233: Load.OK = 0;
 10984  01ED  13BE               	bcf	_Load^(0+256),7
 10985  01EE                     l10188:	
 10986                           
 10987                           ;OverLoad_B1.c: 255: }
 10988                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 10989  01EE  1EBE               	btfss	_Load^(0+256),5
 10990  01EF  0008               	return
 10991                           
 10992                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 10993  01F0  3001               	movlw	1
 10994  01F1  07C1               	addwf	(_Load^(0+256)+3),f
 10995  01F2  3000               	movlw	0
 10996  01F3  3DC2               	addwfc	((_Load+1)^(0+256)+3),f
 10997                           
 10998                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 10999  01F4  3001               	movlw	1
 11000  01F5  0242               	subwf	((_Load+1)^(0+256)+3),w
 11001  01F6  30F4               	movlw	244
 11002  01F7  1903               	skipnz
 11003  01F8  0241               	subwf	(_Load^(0+256)+3),w
 11004  01F9  1C03               	skipc
 11005  01FA  0008               	return
 11006                           
 11007                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11008  01FB  01C1               	clrf	(_Load^(0+256)+3)
 11009  01FC  01C2               	clrf	((_Load+1)^(0+256)+3)
 11010                           
 11011                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11012  01FD  12BE               	bcf	_Load^(0+256),5
 11013                           
 11014                           ;OverLoad_B1.c: 261: }
 11015                           ;OverLoad_B1.c: 262: }
 11016                           ;OverLoad_B1.c: 263: }
 11017                           ;OverLoad_B1.c: 264: } else {
 11018  01FE  0008               	return
 11019  01FF                     l1621:	
 11020                           
 11021                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11022  01FF  0021               	movlb	1	; select bank1
 11023  0200  1C2E               	btfss	_myMain^(0+128),0
 11024  0201  0008               	return
 11025                           
 11026                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11027  0202  0022               	movlb	2	; select bank2
 11028  0203  143E               	bsf	_Load^(0+256),0
 11029  0204  0008               	return
 11030  0205                     __end_of_Load_Main:	
 11031                           
 11032                           	psect	text63
 11033  1BF4                     __ptext63:	
 11034 ;; *************** function _getMain_Lights_Count *****************
 11035 ;; Defined at:
 11036 ;;		line 459 in file "../src/Main_B1.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;		None
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  status1         1    1[BANK0 ] unsigned char 
 11041 ;;  count           1    0[BANK0 ] unsigned char 
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      unsigned char 
 11044 ;; Registers used:
 11045 ;;		wreg, status,2
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;Total ram usage:        2 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    5
 11058 ;; This function calls:
 11059 ;;		Nothing
 11060 ;; This function is called by:
 11061 ;;		_Load_Main
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           
 11066                           ;psect for function _getMain_Lights_Count
 11067  1BF4                     _getMain_Lights_Count:	
 11068                           
 11069                           ;Main_B1.c: 460: char count = 0;
 11070                           
 11071                           ;incstack = 0
 11072                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11073  1BF4  0020               	movlb	0	; select bank0
 11074  1BF5  01A0               	clrf	getMain_Lights_Count@count
 11075                           
 11076                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11077  1BF6  3000               	movlw	0
 11078  1BF7  0021               	movlb	1	; select bank1
 11079  1BF8  19BB               	btfsc	_DimmerIntr1^(0+128),3
 11080  1BF9  3001               	movlw	1
 11081  1BFA  0020               	movlb	0	; select bank0
 11082  1BFB  00A1               	movwf	getMain_Lights_Count@status1
 11083                           
 11084                           ;Main_B1.c: 487: return count = status1;
 11085  1BFC  0821               	movf	getMain_Lights_Count@status1,w
 11086  1BFD  00A0               	movwf	getMain_Lights_Count@count
 11087  1BFE  0008               	return
 11088  1BFF                     __end_of_getMain_Lights_Count:	
 11089                           
 11090                           	psect	text64
 11091  1BBC                     __ptext64:	
 11092 ;; *************** function _getDimmer_Load_Status *****************
 11093 ;; Defined at:
 11094 ;;		line 1151 in file "../src/Dimmer_B1.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;		None
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;  status          1    0[BANK0 ] unsigned char 
 11099 ;; Return value:  Size  Location     Type
 11100 ;;                  1    wreg      unsigned char 
 11101 ;; Registers used:
 11102 ;;		wreg, status,2
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;Total ram usage:        1 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; Hardware stack levels required when called:    5
 11115 ;; This function calls:
 11116 ;;		Nothing
 11117 ;; This function is called by:
 11118 ;;		_Load_Main
 11119 ;; This function uses a non-reentrant model
 11120 ;;
 11121                           
 11122                           
 11123                           ;psect for function _getDimmer_Load_Status
 11124  1BBC                     _getDimmer_Load_Status:	
 11125                           
 11126                           ;Dimmer_B1.c: 1152: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11127                           
 11128                           ;incstack = 0
 11129                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11130  1BBC  3000               	movlw	0
 11131  1BBD  0022               	movlb	2	; select bank2
 11132  1BBE  192C               	btfsc	_Dimmer^(0+256),2
 11133  1BBF  3001               	movlw	1
 11134  1BC0  0020               	movlb	0	; select bank0
 11135  1BC1  00A0               	movwf	getDimmer_Load_Status@status
 11136                           
 11137                           ;Dimmer_B1.c: 1153: return status;
 11138  1BC2  0820               	movf	getDimmer_Load_Status@status,w
 11139  1BC3  0008               	return
 11140  1BC4                     __end_of_getDimmer_Load_Status:	
 11141                           
 11142                           	psect	text65
 11143  1BB4                     __ptext65:	
 11144 ;; *************** function _getDimmer_LoadGO *****************
 11145 ;; Defined at:
 11146 ;;		line 1145 in file "../src/Dimmer_B1.c"
 11147 ;; Parameters:    Size  Location     Type
 11148 ;;		None
 11149 ;; Auto vars:     Size  Location     Type
 11150 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11151 ;; Return value:  Size  Location     Type
 11152 ;;                  1    wreg      unsigned char 
 11153 ;; Registers used:
 11154 ;;		wreg, status,2
 11155 ;; Tracked objects:
 11156 ;;		On entry : 0/0
 11157 ;;		On exit  : 0/0
 11158 ;;		Unchanged: 0/0
 11159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;Total ram usage:        1 bytes
 11165 ;; Hardware stack levels used:    1
 11166 ;; Hardware stack levels required when called:    5
 11167 ;; This function calls:
 11168 ;;		Nothing
 11169 ;; This function is called by:
 11170 ;;		_Load_Main
 11171 ;; This function uses a non-reentrant model
 11172 ;;
 11173                           
 11174                           
 11175                           ;psect for function _getDimmer_LoadGO
 11176  1BB4                     _getDimmer_LoadGO:	
 11177                           
 11178                           ;Dimmer_B1.c: 1146: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11179                           
 11180                           ;incstack = 0
 11181                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11182  1BB4  3000               	movlw	0
 11183  1BB5  0022               	movlb	2	; select bank2
 11184  1BB6  18AC               	btfsc	_Dimmer^(0+256),1
 11185  1BB7  3001               	movlw	1
 11186  1BB8  0020               	movlb	0	; select bank0
 11187  1BB9  00A0               	movwf	getDimmer_LoadGO@loadgo
 11188                           
 11189                           ;Dimmer_B1.c: 1147: return loadgo;
 11190  1BBA  0820               	movf	getDimmer_LoadGO@loadgo,w
 11191  1BBB  0008               	return
 11192  1BBC                     __end_of_getDimmer_LoadGO:	
 11193                           
 11194                           	psect	text66
 11195  1DB7                     __ptext66:	
 11196 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11197 ;; Defined at:
 11198 ;;		line 280 in file "../src/Dimmer_B1.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;		None
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  status          1    0[BANK0 ] unsigned char 
 11203 ;; Return value:  Size  Location     Type
 11204 ;;                  1    wreg      unsigned char 
 11205 ;; Registers used:
 11206 ;;		wreg, status,2, status,0
 11207 ;; Tracked objects:
 11208 ;;		On entry : 0/0
 11209 ;;		On exit  : 0/0
 11210 ;;		Unchanged: 0/0
 11211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;Total ram usage:        1 bytes
 11217 ;; Hardware stack levels used:    1
 11218 ;; Hardware stack levels required when called:    5
 11219 ;; This function calls:
 11220 ;;		Nothing
 11221 ;; This function is called by:
 11222 ;;		_Load_Main
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           
 11227                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11228  1DB7                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11229                           
 11230                           ;Dimmer_B1.c: 281: char status = 0;
 11231                           
 11232                           ;incstack = 0
 11233                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11234  1DB7  0020               	movlb	0	; select bank0
 11235  1DB8  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11236                           
 11237                           ;Dimmer_B1.c: 292: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11238  1DB9  3000               	movlw	0
 11239  1DBA  0021               	movlb	1	; select bank1
 11240  1DBB  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 11241  1DBC  3001               	movlw	1
 11242  1DBD  0020               	movlb	0	; select bank0
 11243  1DBE  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11244                           
 11245                           ;Dimmer_B1.c: 296: if (status == 0) {
 11246  1DBF  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11247  1DC0  1D03               	skipz
 11248  1DC1  2DC8               	goto	l7076
 11249                           
 11250                           ;Dimmer_B1.c: 306: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11251  1DC2  3000               	movlw	0
 11252  1DC3  0021               	movlb	1	; select bank1
 11253  1DC4  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 11254  1DC5  3001               	movlw	1
 11255  1DC6  0020               	movlb	0	; select bank0
 11256  1DC7  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11257  1DC8                     l7076:	
 11258                           
 11259                           ;Dimmer_B1.c: 308: }
 11260                           ;Dimmer_B1.c: 310: return status;
 11261  1DC8  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11262  1DC9  0008               	return
 11263  1DCA                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11264                           
 11265                           	psect	text67
 11266  1FA4                     __ptext67:	
 11267 ;; *************** function ___wmul *****************
 11268 ;; Defined at:
 11269 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11270 ;; Parameters:    Size  Location     Type
 11271 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11272 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11273 ;; Auto vars:     Size  Location     Type
 11274 ;;  product         2    4[BANK0 ] unsigned int 
 11275 ;; Return value:  Size  Location     Type
 11276 ;;                  2    0[BANK0 ] unsigned int 
 11277 ;; Registers used:
 11278 ;;		wreg, status,2, status,0
 11279 ;; Tracked objects:
 11280 ;;		On entry : 0/0
 11281 ;;		On exit  : 0/0
 11282 ;;		Unchanged: 0/0
 11283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;Total ram usage:        6 bytes
 11289 ;; Hardware stack levels used:    1
 11290 ;; Hardware stack levels required when called:    5
 11291 ;; This function calls:
 11292 ;;		Nothing
 11293 ;; This function is called by:
 11294 ;;		_Load_Main
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           
 11299                           ;psect for function ___wmul
 11300  1FA4                     ___wmul:	
 11301                           
 11302                           ;incstack = 0
 11303                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11304  1FA4  0020               	movlb	0	; select bank0
 11305  1FA5  01A4               	clrf	___wmul@product
 11306  1FA6  01A5               	clrf	___wmul@product+1
 11307  1FA7                     l7638:	
 11308  1FA7  1C20               	btfss	___wmul@multiplier,0
 11309  1FA8  2FAD               	goto	l2677
 11310  1FA9  0822               	movf	___wmul@multiplicand,w
 11311  1FAA  07A4               	addwf	___wmul@product,f
 11312  1FAB  0823               	movf	___wmul@multiplicand+1,w
 11313  1FAC  3DA5               	addwfc	___wmul@product+1,f
 11314  1FAD                     l2677:	
 11315  1FAD  3001               	movlw	1
 11316  1FAE                     u7595:	
 11317  1FAE  35A2               	lslf	___wmul@multiplicand,f
 11318  1FAF  0DA3               	rlf	___wmul@multiplicand+1,f
 11319  1FB0  0B89               	decfsz	9,f
 11320  1FB1  2FAE               	goto	u7595
 11321  1FB2  3001               	movlw	1
 11322  1FB3                     u7605:	
 11323  1FB3  36A1               	lsrf	___wmul@multiplier+1,f
 11324  1FB4  0CA0               	rrf	___wmul@multiplier,f
 11325  1FB5  0B89               	decfsz	9,f
 11326  1FB6  2FB3               	goto	u7605
 11327  1FB7  0821               	movf	___wmul@multiplier+1,w
 11328  1FB8  0420               	iorwf	___wmul@multiplier,w
 11329  1FB9  1D03               	skipz
 11330  1FBA  2FA7               	goto	l7638
 11331  1FBB  0825               	movf	___wmul@product+1,w
 11332  1FBC  01A1               	clrf	?___wmul+1
 11333  1FBD  07A1               	addwf	?___wmul+1,f
 11334  1FBE  0824               	movf	___wmul@product,w
 11335  1FBF  01A0               	clrf	?___wmul
 11336  1FC0  07A0               	addwf	?___wmul,f
 11337  1FC1  0008               	return
 11338  1FC2                     __end_of___wmul:	
 11339                           
 11340                           	psect	text68
 11341  1284                     __ptext68:	
 11342 ;; *************** function ___lwdiv *****************
 11343 ;; Defined at:
 11344 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;  divisor         2    0[BANK0 ] unsigned int 
 11347 ;;  dividend        2    2[BANK0 ] unsigned int 
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;  quotient        2    5[BANK0 ] unsigned int 
 11350 ;;  counter         1    7[BANK0 ] unsigned char 
 11351 ;; Return value:  Size  Location     Type
 11352 ;;                  2    0[BANK0 ] unsigned int 
 11353 ;; Registers used:
 11354 ;;		wreg, status,2, status,0
 11355 ;; Tracked objects:
 11356 ;;		On entry : 0/0
 11357 ;;		On exit  : 0/0
 11358 ;;		Unchanged: 0/0
 11359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11360 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;Total ram usage:        8 bytes
 11365 ;; Hardware stack levels used:    1
 11366 ;; Hardware stack levels required when called:    5
 11367 ;; This function calls:
 11368 ;;		Nothing
 11369 ;; This function is called by:
 11370 ;;		_Load_Main
 11371 ;;		_setRF_Main
 11372 ;; This function uses a non-reentrant model
 11373 ;;
 11374                           
 11375                           
 11376                           ;psect for function ___lwdiv
 11377  1284                     ___lwdiv:	
 11378                           
 11379                           ;incstack = 0
 11380                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11381  1284  0020               	movlb	0	; select bank0
 11382  1285  01A5               	clrf	___lwdiv@quotient
 11383  1286  01A6               	clrf	___lwdiv@quotient+1
 11384  1287  0821               	movf	___lwdiv@divisor+1,w
 11385  1288  0420               	iorwf	___lwdiv@divisor,w
 11386  1289  1903               	skipnz
 11387  128A  2AB4               	goto	l7026
 11388  128B  01A7               	clrf	___lwdiv@counter
 11389  128C  0AA7               	incf	___lwdiv@counter,f
 11390  128D                     l7014:	
 11391  128D  1BA1               	btfsc	___lwdiv@divisor+1,7
 11392  128E  2A99               	goto	l7016
 11393  128F  3001               	movlw	1
 11394  1290                     u6475:	
 11395  1290  35A0               	lslf	___lwdiv@divisor,f
 11396  1291  0DA1               	rlf	___lwdiv@divisor+1,f
 11397  1292  0B89               	decfsz	9,f
 11398  1293  2A90               	goto	u6475
 11399  1294  3001               	movlw	1
 11400  1295  00A4               	movwf	??___lwdiv
 11401  1296  0824               	movf	??___lwdiv,w
 11402  1297  07A7               	addwf	___lwdiv@counter,f
 11403  1298  2A8D               	goto	l7014
 11404  1299                     l7016:	
 11405  1299  3001               	movlw	1
 11406  129A                     u6495:	
 11407  129A  35A5               	lslf	___lwdiv@quotient,f
 11408  129B  0DA6               	rlf	___lwdiv@quotient+1,f
 11409  129C  0B89               	decfsz	9,f
 11410  129D  2A9A               	goto	u6495
 11411  129E  0821               	movf	___lwdiv@divisor+1,w
 11412  129F  0223               	subwf	___lwdiv@dividend+1,w
 11413  12A0  1D03               	skipz
 11414  12A1  2AA4               	goto	u6505
 11415  12A2  0820               	movf	___lwdiv@divisor,w
 11416  12A3  0222               	subwf	___lwdiv@dividend,w
 11417  12A4                     u6505:	
 11418  12A4  1C03               	skipc
 11419  12A5  2AAB               	goto	l7022
 11420  12A6  0820               	movf	___lwdiv@divisor,w
 11421  12A7  02A2               	subwf	___lwdiv@dividend,f
 11422  12A8  0821               	movf	___lwdiv@divisor+1,w
 11423  12A9  3BA3               	subwfb	___lwdiv@dividend+1,f
 11424  12AA  1425               	bsf	___lwdiv@quotient,0
 11425  12AB                     l7022:	
 11426  12AB  3001               	movlw	1
 11427  12AC                     u6515:	
 11428  12AC  36A1               	lsrf	___lwdiv@divisor+1,f
 11429  12AD  0CA0               	rrf	___lwdiv@divisor,f
 11430  12AE  0B89               	decfsz	9,f
 11431  12AF  2AAC               	goto	u6515
 11432  12B0  3001               	movlw	1
 11433  12B1  02A7               	subwf	___lwdiv@counter,f
 11434  12B2  1D03               	btfss	3,2
 11435  12B3  2A99               	goto	l7016
 11436  12B4                     l7026:	
 11437  12B4  0826               	movf	___lwdiv@quotient+1,w
 11438  12B5  01A1               	clrf	?___lwdiv+1
 11439  12B6  07A1               	addwf	?___lwdiv+1,f
 11440  12B7  0825               	movf	___lwdiv@quotient,w
 11441  12B8  01A0               	clrf	?___lwdiv
 11442  12B9  07A0               	addwf	?___lwdiv,f
 11443  12BA  0008               	return
 11444  12BB                     __end_of___lwdiv:	
 11445                           
 11446                           	psect	text69
 11447  1B49                     __ptext69:	
 11448 ;; *************** function _Load_Initialization *****************
 11449 ;; Defined at:
 11450 ;;		line 9 in file "../src/OverLoad_B1.c"
 11451 ;; Parameters:    Size  Location     Type
 11452 ;;		None
 11453 ;; Auto vars:     Size  Location     Type
 11454 ;;		None
 11455 ;; Return value:  Size  Location     Type
 11456 ;;		None               void
 11457 ;; Registers used:
 11458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11459 ;; Tracked objects:
 11460 ;;		On entry : 0/0
 11461 ;;		On exit  : 0/0
 11462 ;;		Unchanged: 0/0
 11463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;Total ram usage:        0 bytes
 11469 ;; Hardware stack levels used:    1
 11470 ;; Hardware stack levels required when called:    6
 11471 ;; This function calls:
 11472 ;;		_setLoad_AH_AL_Restore
 11473 ;; This function is called by:
 11474 ;;		_main
 11475 ;; This function uses a non-reentrant model
 11476 ;;
 11477                           
 11478                           
 11479                           ;psect for function _Load_Initialization
 11480  1B49                     _Load_Initialization:	
 11481                           
 11482                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11483                           
 11484                           ;incstack = 0
 11485                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11486  1B49  319F  276B         	fcall	_setLoad_AH_AL_Restore
 11487  1B4B  0008               	return
 11488  1B4C                     __end_of_Load_Initialization:	
 11489                           
 11490                           	psect	text70
 11491  1F6B                     __ptext70:	
 11492 ;; *************** function _setLoad_AH_AL_Restore *****************
 11493 ;; Defined at:
 11494 ;;		line 292 in file "../src/OverLoad_B1.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;		None
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;  i               1    1[BANK0 ] unsigned char 
 11499 ;; Return value:  Size  Location     Type
 11500 ;;		None               void
 11501 ;; Registers used:
 11502 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;Total ram usage:        2 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; Hardware stack levels required when called:    5
 11515 ;; This function calls:
 11516 ;;		Nothing
 11517 ;; This function is called by:
 11518 ;;		_Load_Initialization
 11519 ;;		_Load_Main
 11520 ;; This function uses a non-reentrant model
 11521 ;;
 11522                           
 11523                           
 11524                           ;psect for function _setLoad_AH_AL_Restore
 11525  1F6B                     _setLoad_AH_AL_Restore:	
 11526                           
 11527                           ;OverLoad_B1.c: 293: char i;
 11528                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11529                           
 11530                           ;incstack = 0
 11531                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11532  1F6B  0020               	movlb	0	; select bank0
 11533  1F6C  01A1               	clrf	setLoad_AH_AL_Restore@i
 11534  1F6D                     L8:	
 11535  1F6D  3005               	movlw	5
 11536  1F6E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11537  1F6F  1803               	btfsc	3,0
 11538  1F70  0008               	return
 11539                           
 11540                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11541  1F71  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11542  1F72  3E49               	addlw	(_Load+11)& (0+255)
 11543  1F73  0086               	movwf	6
 11544  1F74  3001               	movlw	1	; select bank2/3
 11545  1F75  0087               	movwf	7
 11546  1F76  3000               	movlw	0
 11547  1F77  3FC0               	movwi [0]fsr1
 11548  1F78  3FC1               	movwi [1]fsr1
 11549                           
 11550                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11551  1F79  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11552  1F7A  3E53               	addlw	(_Load+21)& (0+255)
 11553  1F7B  0086               	movwf	6
 11554  1F7C  3001               	movlw	1	; select bank2/3
 11555  1F7D  0087               	movwf	7
 11556  1F7E  30FF               	movlw	255
 11557  1F7F  3FC0               	movwi [0]fsr1
 11558  1F80  30FF               	movlw	255
 11559  1F81  3FC1               	movwi [1]fsr1
 11560  1F82  3001               	movlw	1
 11561  1F83  00A0               	movwf	??_setLoad_AH_AL_Restore
 11562  1F84  0820               	movf	??_setLoad_AH_AL_Restore,w
 11563  1F85  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11564  1F86  2F6D               	goto	L8
 11565  1F87                     __end_of_setLoad_AH_AL_Restore:	
 11566                           
 11567                           	psect	text71
 11568  1B64                     __ptext71:	
 11569 ;; *************** function _LED_Main *****************
 11570 ;; Defined at:
 11571 ;;		line 47 in file "../src/LED_B1.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;		None
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;		None               void
 11578 ;; Registers used:
 11579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;Total ram usage:        0 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    7
 11592 ;; This function calls:
 11593 ;;		_setLED_Main
 11594 ;; This function is called by:
 11595 ;;		_main
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           
 11600                           ;psect for function _LED_Main
 11601  1B64                     _LED_Main:	
 11602                           
 11603                           ;LED_B1.c: 67: setLED_Main(99);
 11604                           
 11605                           ;incstack = 0
 11606                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11607  1B64  3063               	movlw	99
 11608  1B65  3192  224E         	fcall	_setLED_Main
 11609  1B67  0008               	return
 11610  1B68                     __end_of_LED_Main:	
 11611                           
 11612                           	psect	text72
 11613  124E                     __ptext72:	
 11614 ;; *************** function _setLED_Main *****************
 11615 ;; Defined at:
 11616 ;;		line 229 in file "../src/LED_B1.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;  led             1    wreg     unsigned char 
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;  led             1    4[BANK0 ] unsigned char 
 11621 ;; Return value:  Size  Location     Type
 11622 ;;		None               void
 11623 ;; Registers used:
 11624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11625 ;; Tracked objects:
 11626 ;;		On entry : 0/0
 11627 ;;		On exit  : 0/0
 11628 ;;		Unchanged: 0/0
 11629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;Total ram usage:        3 bytes
 11635 ;; Hardware stack levels used:    1
 11636 ;; Hardware stack levels required when called:    6
 11637 ;; This function calls:
 11638 ;;		_LedPointSelect
 11639 ;; This function is called by:
 11640 ;;		_LED_Main
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           
 11645                           ;psect for function _setLED_Main
 11646  124E                     _setLED_Main:	
 11647                           
 11648                           ;incstack = 0
 11649                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11650                           ;setLED_Main@led stored from wreg
 11651  124E  0020               	movlb	0	; select bank0
 11652  124F  00A4               	movwf	setLED_Main@led
 11653                           
 11654                           ;LED_B1.c: 230: LedPointSelect(led);
 11655  1250  0824               	movf	setLED_Main@led,w
 11656  1251  319C  2451  3192   	fcall	_LedPointSelect
 11657                           
 11658                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11659  1254  0021               	movlb	1	; select bank1
 11660  1255  084B               	movf	_LED^(0+128),w
 11661  1256  0086               	movwf	6
 11662  1257  3001               	movlw	1	; select bank2/3
 11663  1258  0087               	movwf	7
 11664  1259  1C81               	btfss	1,1
 11665  125A  0008               	return
 11666                           
 11667                           ;LED_B1.c: 232: LED->Time++;
 11668  125B  0A4B               	incf	_LED^(0+128),w
 11669  125C  0086               	movwf	6
 11670  125D  3001               	movlw	1	; select bank2/3
 11671  125E  0087               	movwf	7
 11672  125F  3001               	movlw	1
 11673  1260  0781               	addwf	1,f
 11674  1261  3141               	addfsr 1,1
 11675  1262  1803               	skipnc
 11676  1263  0A81               	incf	1,f
 11677                           
 11678                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11679  1264  0A4B               	incf	_LED^(0+128),w
 11680  1265  0086               	movwf	6
 11681  1266  3001               	movlw	1	; select bank2/3
 11682  1267  0087               	movwf	7
 11683  1268  3F40               	moviw [0]fsr1
 11684  1269  0020               	movlb	0	; select bank0
 11685  126A  00A2               	movwf	??_setLED_Main
 11686  126B  3F41               	moviw [1]fsr1
 11687  126C  00A3               	movwf	??_setLED_Main+1
 11688  126D  3000               	movlw	0
 11689  126E  0223               	subwf	??_setLED_Main+1,w
 11690  126F  3019               	movlw	25
 11691  1270  1903               	skipnz
 11692  1271  0222               	subwf	??_setLED_Main,w
 11693  1272  1C03               	skipc
 11694  1273  0008               	return
 11695                           
 11696                           ;LED_B1.c: 234: LED->Time = 0;
 11697  1274  0021               	movlb	1	; select bank1
 11698  1275  0A4B               	incf	_LED^(0+128),w
 11699  1276  0086               	movwf	6
 11700  1277  3001               	movlw	1	; select bank2/3
 11701  1278  0087               	movwf	7
 11702  1279  3000               	movlw	0
 11703  127A  3FC0               	movwi [0]fsr1
 11704  127B  3FC1               	movwi [1]fsr1
 11705                           
 11706                           ;LED_B1.c: 252: if (led == 99) {
 11707  127C  0020               	movlb	0	; select bank0
 11708  127D  0824               	movf	setLED_Main@led,w
 11709  127E  3A63               	xorlw	99
 11710  127F  1D03               	skipz
 11711  1280  0008               	return
 11712                           
 11713                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11714  1281  3020               	movlw	32
 11715  1282  068D               	xorwf	13,f
 11716  1283  0008               	return
 11717  1284                     __end_of_setLED_Main:	
 11718                           
 11719                           	psect	text73
 11720  1B60                     __ptext73:	
 11721 ;; *************** function _LED_Initialization *****************
 11722 ;; Defined at:
 11723 ;;		line 31 in file "../src/LED_B1.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;		None
 11726 ;; Auto vars:     Size  Location     Type
 11727 ;;		None
 11728 ;; Return value:  Size  Location     Type
 11729 ;;		None               void
 11730 ;; Registers used:
 11731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11732 ;; Tracked objects:
 11733 ;;		On entry : 0/0
 11734 ;;		On exit  : 0/0
 11735 ;;		Unchanged: 0/0
 11736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;Total ram usage:        0 bytes
 11742 ;; Hardware stack levels used:    1
 11743 ;; Hardware stack levels required when called:    8
 11744 ;; This function calls:
 11745 ;;		_setLED_Initialization
 11746 ;; This function is called by:
 11747 ;;		_main
 11748 ;; This function uses a non-reentrant model
 11749 ;;
 11750                           
 11751                           
 11752                           ;psect for function _LED_Initialization
 11753  1B60                     _LED_Initialization:	
 11754                           
 11755                           ;LED_B1.c: 42: setLED_Initialization(99);
 11756                           
 11757                           ;incstack = 0
 11758                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11759  1B60  3063               	movlw	99
 11760  1B61  319D  256D         	fcall	_setLED_Initialization
 11761  1B63  0008               	return
 11762  1B64                     __end_of_LED_Initialization:	
 11763                           
 11764                           	psect	text74
 11765  1D6D                     __ptext74:	
 11766 ;; *************** function _setLED_Initialization *****************
 11767 ;; Defined at:
 11768 ;;		line 74 in file "../src/LED_B1.c"
 11769 ;; Parameters:    Size  Location     Type
 11770 ;;  led             1    wreg     unsigned char 
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;  led             1    4[BANK0 ] unsigned char 
 11773 ;; Return value:  Size  Location     Type
 11774 ;;		None               void
 11775 ;; Registers used:
 11776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;Total ram usage:        1 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:    7
 11789 ;; This function calls:
 11790 ;;		_LedPointSelect
 11791 ;;		_setLED
 11792 ;; This function is called by:
 11793 ;;		_LED_Initialization
 11794 ;; This function uses a non-reentrant model
 11795 ;;
 11796                           
 11797                           
 11798                           ;psect for function _setLED_Initialization
 11799  1D6D                     _setLED_Initialization:	
 11800                           
 11801                           ;incstack = 0
 11802                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11803                           ;setLED_Initialization@led stored from wreg
 11804  1D6D  0020               	movlb	0	; select bank0
 11805  1D6E  00A4               	movwf	setLED_Initialization@led
 11806                           
 11807                           ;LED_B1.c: 75: LedPointSelect(led);
 11808  1D6F  0824               	movf	setLED_Initialization@led,w
 11809  1D70  319C  2451  319D   	fcall	_LedPointSelect
 11810                           
 11811                           ;LED_B1.c: 76: LED->Enable = 1;
 11812  1D73  0021               	movlb	1	; select bank1
 11813  1D74  084B               	movf	_LED^(0+128),w
 11814  1D75  0086               	movwf	6
 11815  1D76  3001               	movlw	1	; select bank2/3
 11816  1D77  0087               	movwf	7
 11817  1D78  1401               	bsf	1,0
 11818                           
 11819                           ;LED_B1.c: 77: setLED(led, 0);
 11820  1D79  0020               	movlb	0	; select bank0
 11821  1D7A  01A2               	clrf	setLED@command
 11822  1D7B  0824               	movf	setLED_Initialization@led,w
 11823  1D7C  3192  22F4         	fcall	_setLED
 11824  1D7E  0008               	return
 11825  1D7F                     __end_of_setLED_Initialization:	
 11826                           
 11827                           	psect	text75
 11828  1422                     __ptext75:	
 11829 ;; *************** function _Flash_Memory_Main *****************
 11830 ;; Defined at:
 11831 ;;		line 976 in file "../src/MCU_B1.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;		None
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;  key_Status      1    7[BANK0 ] unsigned char 
 11836 ;; Return value:  Size  Location     Type
 11837 ;;		None               void
 11838 ;; Registers used:
 11839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11840 ;; Tracked objects:
 11841 ;;		On entry : 0/0
 11842 ;;		On exit  : 0/0
 11843 ;;		Unchanged: 0/0
 11844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11848 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;Total ram usage:        3 bytes
 11850 ;; Hardware stack levels used:    1
 11851 ;; Hardware stack levels required when called:    8
 11852 ;; This function calls:
 11853 ;;		_Flash_Memory_Modify
 11854 ;;		_getAll_Sw_KeyStatus
 11855 ;;		_getMain_All_LightsStatus
 11856 ;; This function is called by:
 11857 ;;		_main
 11858 ;; This function uses a non-reentrant model
 11859 ;;
 11860                           
 11861                           
 11862                           ;psect for function _Flash_Memory_Main
 11863  1422                     _Flash_Memory_Main:	
 11864                           
 11865                           ;MCU_B1.c: 977: char key_Status = 0;
 11866                           
 11867                           ;incstack = 0
 11868                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11869  1422  0020               	movlb	0	; select bank0
 11870  1423  01A7               	clrf	Flash_Memory_Main@key_Status
 11871                           
 11872                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 11873  1424  319C  24F3  3194   	fcall	_getAll_Sw_KeyStatus
 11874  1427  0020               	movlb	0	; select bank0
 11875  1428  00A6               	movwf	??_Flash_Memory_Main
 11876  1429  0826               	movf	??_Flash_Memory_Main,w
 11877  142A  00A7               	movwf	Flash_Memory_Main@key_Status
 11878                           
 11879                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 11880  142B  0024               	movlb	4	; select bank4
 11881  142C  1C44               	btfss	(_Memory^(0+512)+36),0
 11882  142D  0008               	return
 11883                           
 11884                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 11885  142E  0020               	movlb	0	; select bank0
 11886  142F  01A8               	clrf	_Flash_Memory_Main$3119
 11887  1430  319B  23DF  3194   	fcall	_getMain_All_LightsStatus
 11888  1433  3800               	iorlw	0
 11889  1434  1D03               	skipz
 11890  1435  2C3C               	goto	l9986
 11891  1436  0020               	movlb	0	; select bank0
 11892  1437  08A7               	movf	Flash_Memory_Main@key_Status,f
 11893  1438  1D03               	skipz
 11894  1439  2C3C               	goto	l9986
 11895  143A  01A8               	clrf	_Flash_Memory_Main$3119
 11896  143B  0AA8               	incf	_Flash_Memory_Main$3119,f
 11897  143C                     l9986:	
 11898  143C  0020               	movlb	0	; select bank0
 11899  143D  0828               	movf	_Flash_Memory_Main$3119,w
 11900  143E  0024               	movlb	4	; select bank4
 11901  143F  10C4               	bcf	(_Memory^(0+512)+36),1
 11902  1440  1D03               	skipz
 11903  1441  14C4               	bsf	(_Memory^(0+512)+36),1
 11904                           
 11905                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 11906  1442  1CC4               	btfss	(_Memory^(0+512)+36),1
 11907  1443  2C5D               	goto	l1243
 11908                           
 11909                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 11910  1444  15C4               	bsf	(_Memory^(0+512)+36),3
 11911                           
 11912                           ;MCU_B1.c: 985: Memory.Time++;
 11913  1445  3001               	movlw	1
 11914  1446  07C2               	addwf	(_Memory^(0+512)+34),f
 11915  1447  3000               	movlw	0
 11916  1448  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11917                           
 11918                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 11919  1449  3022               	movlw	34
 11920  144A  3E20               	addlw	_Memory& (0+255)
 11921  144B  0086               	movwf	6
 11922  144C  3002               	movlw	2	; select bank4/5
 11923  144D  0087               	movwf	7
 11924  144E  3F40               	moviw [0]fsr1
 11925  144F  3A0A               	xorlw	10
 11926  1450  1D03               	skipz
 11927  1451  2C54               	goto	u11475
 11928  1452  3F41               	moviw [1]fsr1
 11929  1453  3A00               	xorlw	0
 11930  1454                     u11475:	
 11931  1454  1D03               	skipz
 11932  1455  0008               	return
 11933                           
 11934                           ;MCU_B1.c: 987: Memory.Time = 0;
 11935  1456  01C2               	clrf	(_Memory^(0+512)+34)
 11936  1457  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11937                           
 11938                           ;MCU_B1.c: 988: Memory.Modify = 0;
 11939  1458  1044               	bcf	(_Memory^(0+512)+36),0
 11940                           
 11941                           ;MCU_B1.c: 989: Memory.GO = 0;
 11942  1459  10C4               	bcf	(_Memory^(0+512)+36),1
 11943                           
 11944                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 11945  145A  318B  239E         	fcall	_Flash_Memory_Modify
 11946                           
 11947                           ;MCU_B1.c: 991: }
 11948                           ;MCU_B1.c: 992: } else {
 11949  145C  0008               	return
 11950  145D                     l1243:	
 11951                           
 11952                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 11953  145D  1DC4               	btfss	(_Memory^(0+512)+36),3
 11954  145E  0008               	return
 11955                           
 11956                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 11957  145F  11C4               	bcf	(_Memory^(0+512)+36),3
 11958                           
 11959                           ;MCU_B1.c: 995: Memory.Time = 0;
 11960  1460  01C2               	clrf	(_Memory^(0+512)+34)
 11961  1461  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11962  1462  0008               	return
 11963  1463                     __end_of_Flash_Memory_Main:	
 11964                           
 11965                           	psect	text76
 11966  1CF3                     __ptext76:	
 11967 ;; *************** function _getAll_Sw_KeyStatus *****************
 11968 ;; Defined at:
 11969 ;;		line 278 in file "../src/Switch_B1.c"
 11970 ;; Parameters:    Size  Location     Type
 11971 ;;		None
 11972 ;; Auto vars:     Size  Location     Type
 11973 ;;  status          1    1[BANK0 ] unsigned char 
 11974 ;; Return value:  Size  Location     Type
 11975 ;;                  1    wreg      unsigned char 
 11976 ;; Registers used:
 11977 ;;		wreg, status,2
 11978 ;; Tracked objects:
 11979 ;;		On entry : 0/0
 11980 ;;		On exit  : 0/0
 11981 ;;		Unchanged: 0/0
 11982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;Total ram usage:        3 bytes
 11988 ;; Hardware stack levels used:    1
 11989 ;; Hardware stack levels required when called:    5
 11990 ;; This function calls:
 11991 ;;		Nothing
 11992 ;; This function is called by:
 11993 ;;		_Flash_Memory_Main
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           
 11998                           ;psect for function _getAll_Sw_KeyStatus
 11999  1CF3                     _getAll_Sw_KeyStatus:	
 12000                           
 12001                           ;Switch_B1.c: 279: char status = 0;
 12002                           
 12003                           ;incstack = 0
 12004                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12005  1CF3  0020               	movlb	0	; select bank0
 12006  1CF4  01A1               	clrf	getAll_Sw_KeyStatus@status
 12007                           
 12008                           ;Switch_B1.c: 298: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12009  1CF5  01A2               	clrf	_getAll_Sw_KeyStatus$6387
 12010  1CF6  0AA2               	incf	_getAll_Sw_KeyStatus$6387,f
 12011  1CF7  1F0C               	btfss	12,6	;volatile
 12012  1CF8  1A0C               	btfsc	12,4	;volatile
 12013  1CF9  2CFE               	goto	l9618
 12014  1CFA  1C0C               	btfss	12,0	;volatile
 12015  1CFB  1B8C               	btfsc	12,7	;volatile
 12016  1CFC  2CFE               	goto	l9618
 12017  1CFD  01A2               	clrf	_getAll_Sw_KeyStatus$6387
 12018  1CFE                     l9618:	
 12019  1CFE  0822               	movf	_getAll_Sw_KeyStatus$6387,w
 12020  1CFF  00A0               	movwf	??_getAll_Sw_KeyStatus
 12021  1D00  0820               	movf	??_getAll_Sw_KeyStatus,w
 12022  1D01  00A1               	movwf	getAll_Sw_KeyStatus@status
 12023                           
 12024                           ;Switch_B1.c: 302: return status;
 12025  1D02  0821               	movf	getAll_Sw_KeyStatus@status,w
 12026  1D03  0008               	return
 12027  1D04                     __end_of_getAll_Sw_KeyStatus:	
 12028                           
 12029                           	psect	text77
 12030  0B9E                     __ptext77:	
 12031 ;; *************** function _Flash_Memory_Modify *****************
 12032 ;; Defined at:
 12033 ;;		line 1053 in file "../src/MCU_B1.c"
 12034 ;; Parameters:    Size  Location     Type
 12035 ;;		None
 12036 ;; Auto vars:     Size  Location     Type
 12037 ;;  i               1    5[BANK0 ] unsigned char 
 12038 ;; Return value:  Size  Location     Type
 12039 ;;		None               void
 12040 ;; Registers used:
 12041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12042 ;; Tracked objects:
 12043 ;;		On entry : 0/0
 12044 ;;		On exit  : 0/0
 12045 ;;		Unchanged: 0/0
 12046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;Total ram usage:        2 bytes
 12052 ;; Hardware stack levels used:    1
 12053 ;; Hardware stack levels required when called:    7
 12054 ;; This function calls:
 12055 ;;		_Flash_Memory_Erasing
 12056 ;;		_Flash_Memory_Read
 12057 ;;		_Flash_Memory_Write
 12058 ;;		_setMemory_Data
 12059 ;; This function is called by:
 12060 ;;		_Flash_Memory_Main
 12061 ;; This function uses a non-reentrant model
 12062 ;;
 12063                           
 12064                           
 12065                           ;psect for function _Flash_Memory_Modify
 12066  0B9E                     _Flash_Memory_Modify:	
 12067                           
 12068                           ;MCU_B1.c: 1054: char i = 0;
 12069                           
 12070                           ;incstack = 0
 12071                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12072  0B9E  0020               	movlb	0	; select bank0
 12073  0B9F  01A5               	clrf	Flash_Memory_Modify@i
 12074                           
 12075                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12076  0BA0  01A5               	clrf	Flash_Memory_Modify@i
 12077  0BA1  3020               	movlw	32
 12078  0BA2  0225               	subwf	Flash_Memory_Modify@i,w
 12079  0BA3  1803               	btfsc	3,0
 12080  0BA4  2BBA               	goto	l9636
 12081  0BA5                     l9630:	
 12082                           
 12083                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12084  0BA5  0825               	movf	Flash_Memory_Modify@i,w
 12085  0BA6  319E  26E6  318B   	fcall	_Flash_Memory_Read
 12086  0BA9  0020               	movlb	0	; select bank0
 12087  0BAA  00A4               	movwf	??_Flash_Memory_Modify
 12088  0BAB  0825               	movf	Flash_Memory_Modify@i,w
 12089  0BAC  3E20               	addlw	_Memory& (0+255)
 12090  0BAD  0086               	movwf	6
 12091  0BAE  3002               	movlw	2	; select bank4/5
 12092  0BAF  0087               	movwf	7
 12093  0BB0  0824               	movf	??_Flash_Memory_Modify,w
 12094  0BB1  0081               	movwf	1
 12095  0BB2  3001               	movlw	1
 12096  0BB3  00A4               	movwf	??_Flash_Memory_Modify
 12097  0BB4  0824               	movf	??_Flash_Memory_Modify,w
 12098  0BB5  07A5               	addwf	Flash_Memory_Modify@i,f
 12099  0BB6  3020               	movlw	32
 12100  0BB7  0225               	subwf	Flash_Memory_Modify@i,w
 12101  0BB8  1C03               	skipc
 12102  0BB9  2BA5               	goto	l9630
 12103  0BBA                     l9636:	
 12104                           
 12105                           ;MCU_B1.c: 1057: }
 12106                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12107  0BBA  0021               	movlb	1	; select bank1
 12108  0BBB  0863               	movf	_product^(0+128),w
 12109  0BBC  0086               	movwf	6
 12110  0BBD  3002               	movlw	2	; select bank4/5
 12111  0BBE  0087               	movwf	7
 12112  0BBF  3002               	movlw	2	; select bank4/5
 12113  0BC0  3F4C               	moviw [12]fsr1
 12114  0BC1  0020               	movlb	0	; select bank0
 12115  0BC2  00A0               	movwf	setMemory_Data@data
 12116  0BC3  3000               	movlw	0
 12117  0BC4  319C  245D  318B   	fcall	_setMemory_Data
 12118                           
 12119                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12120  0BC7  0021               	movlb	1	; select bank1
 12121  0BC8  0863               	movf	_product^(0+128),w
 12122  0BC9  0086               	movwf	6
 12123  0BCA  3002               	movlw	2	; select bank4/5
 12124  0BCB  0087               	movwf	7
 12125  0BCC  3002               	movlw	2	; select bank4/5
 12126  0BCD  3F4D               	moviw [13]fsr1
 12127  0BCE  0020               	movlb	0	; select bank0
 12128  0BCF  00A0               	movwf	setMemory_Data@data
 12129  0BD0  3001               	movlw	1
 12130  0BD1  319C  245D  318B   	fcall	_setMemory_Data
 12131                           
 12132                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12133  0BD4  0021               	movlb	1	; select bank1
 12134  0BD5  0863               	movf	_product^(0+128),w
 12135  0BD6  0086               	movwf	6
 12136  0BD7  3002               	movlw	2	; select bank4/5
 12137  0BD8  0087               	movwf	7
 12138  0BD9  3002               	movlw	2	; select bank4/5
 12139  0BDA  3F4E               	moviw [14]fsr1
 12140  0BDB  0020               	movlb	0	; select bank0
 12141  0BDC  00A0               	movwf	setMemory_Data@data
 12142  0BDD  3002               	movlw	2
 12143  0BDE  319C  245D  318B   	fcall	_setMemory_Data
 12144                           
 12145                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12146  0BE1  0021               	movlb	1	; select bank1
 12147  0BE2  0863               	movf	_product^(0+128),w
 12148  0BE3  0086               	movwf	6
 12149  0BE4  3002               	movlw	2	; select bank4/5
 12150  0BE5  0087               	movwf	7
 12151  0BE6  3002               	movlw	2	; select bank4/5
 12152  0BE7  3F55               	moviw [21]fsr1
 12153  0BE8  0020               	movlb	0	; select bank0
 12154  0BE9  00A0               	movwf	setMemory_Data@data
 12155  0BEA  3003               	movlw	3
 12156  0BEB  319C  245D  318B   	fcall	_setMemory_Data
 12157                           
 12158                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12159  0BEE  0021               	movlb	1	; select bank1
 12160  0BEF  0863               	movf	_product^(0+128),w
 12161  0BF0  0086               	movwf	6
 12162  0BF1  3002               	movlw	2	; select bank4/5
 12163  0BF2  0087               	movwf	7
 12164  0BF3  3002               	movlw	2	; select bank4/5
 12165  0BF4  3F56               	moviw [22]fsr1
 12166  0BF5  0020               	movlb	0	; select bank0
 12167  0BF6  00A0               	movwf	setMemory_Data@data
 12168  0BF7  3004               	movlw	4
 12169  0BF8  319C  245D  318B   	fcall	_setMemory_Data
 12170                           
 12171                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12172  0BFB  0021               	movlb	1	; select bank1
 12173  0BFC  0863               	movf	_product^(0+128),w
 12174  0BFD  0086               	movwf	6
 12175  0BFE  3002               	movlw	2	; select bank4/5
 12176  0BFF  0087               	movwf	7
 12177  0C00  3002               	movlw	2	; select bank4/5
 12178  0C01  3F57               	moviw [23]fsr1
 12179  0C02  0020               	movlb	0	; select bank0
 12180  0C03  00A0               	movwf	setMemory_Data@data
 12181  0C04  3005               	movlw	5
 12182  0C05  319C  245D  318B   	fcall	_setMemory_Data
 12183                           
 12184                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12185  0C08  0021               	movlb	1	; select bank1
 12186  0C09  1EB8               	btfss	(_myMain^(0+128)+10),5
 12187  0C0A  2C15               	goto	l9644
 12188                           
 12189                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12190  0C0B  12B8               	bcf	(_myMain^(0+128)+10),5
 12191                           
 12192                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12193  0C0C  30AA               	movlw	170
 12194  0C0D  0020               	movlb	0	; select bank0
 12195  0C0E  00A4               	movwf	??_Flash_Memory_Modify
 12196  0C0F  0824               	movf	??_Flash_Memory_Modify,w
 12197  0C10  00A0               	movwf	setMemory_Data@data
 12198  0C11  301E               	movlw	30
 12199  0C12  319C  245D  318B   	fcall	_setMemory_Data
 12200  0C15                     l9644:	
 12201                           
 12202                           ;MCU_B1.c: 1068: }
 12203                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12204  0C15  0024               	movlb	4	; select bank4
 12205  0C16  1D44               	btfss	(_Memory^(0+512)+36),2
 12206  0C17  2C1C               	goto	l1267
 12207                           
 12208                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12209  0C18  1144               	bcf	(_Memory^(0+512)+36),2
 12210                           
 12211                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12212  0C19  0021               	movlb	1	; select bank1
 12213  0C1A  11AE               	bcf	_myMain^(0+128),3
 12214                           
 12215                           ;MCU_B1.c: 1073: myMain.First = 0;
 12216  0C1B  12AE               	bcf	_myMain^(0+128),5
 12217  0C1C                     l1267:	
 12218                           
 12219                           ;MCU_B1.c: 1075: }
 12220                           ;MCU_B1.c: 1076: GIE = 0;
 12221  0C1C  138B               	bcf	11,7	;volatile
 12222                           
 12223                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12224  0C1D  319C  2469  318B   	fcall	_Flash_Memory_Erasing
 12225                           
 12226                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12227  0C20  3191  2152         	fcall	_Flash_Memory_Write
 12228                           
 12229                           ;MCU_B1.c: 1079: GIE = 1;
 12230  0C22  178B               	bsf	11,7	;volatile
 12231  0C23  0008               	return
 12232  0C24                     __end_of_Flash_Memory_Modify:	
 12233                           
 12234                           	psect	text78
 12235  1C69                     __ptext78:	
 12236 ;; *************** function _Flash_Memory_Erasing *****************
 12237 ;; Defined at:
 12238 ;;		line 1042 in file "../src/MCU_B1.c"
 12239 ;; Parameters:    Size  Location     Type
 12240 ;;		None
 12241 ;; Auto vars:     Size  Location     Type
 12242 ;;		None
 12243 ;; Return value:  Size  Location     Type
 12244 ;;		None               void
 12245 ;; Registers used:
 12246 ;;		wreg, status,2, status,0, pclath, cstack
 12247 ;; Tracked objects:
 12248 ;;		On entry : 0/0
 12249 ;;		On exit  : 0/0
 12250 ;;		Unchanged: 0/0
 12251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;Total ram usage:        0 bytes
 12257 ;; Hardware stack levels used:    1
 12258 ;; Hardware stack levels required when called:    6
 12259 ;; This function calls:
 12260 ;;		_Flash_Memory_Unlock
 12261 ;; This function is called by:
 12262 ;;		_Flash_Memory_Modify
 12263 ;; This function uses a non-reentrant model
 12264 ;;
 12265                           
 12266                           
 12267                           ;psect for function _Flash_Memory_Erasing
 12268  1C69                     _Flash_Memory_Erasing:	
 12269                           
 12270                           ;MCU_B1.c: 1043: CFGS = 0;
 12271                           
 12272                           ;incstack = 0
 12273                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12274  1C69  0023               	movlb	3	; select bank3
 12275  1C6A  1315               	bcf	21,6	;volatile
 12276                           
 12277                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12278  1C6B  3030               	movlw	48
 12279  1C6C  0092               	movwf	18	;volatile
 12280                           
 12281                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12282  1C6D  0191               	clrf	17	;volatile
 12283                           
 12284                           ;MCU_B1.c: 1046: FREE = 1;
 12285  1C6E  1615               	bsf	21,4	;volatile
 12286                           
 12287                           ;MCU_B1.c: 1047: WREN = 1;
 12288  1C6F  1515               	bsf	21,2	;volatile
 12289                           
 12290                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12291  1C70  319B  23D6         	fcall	_Flash_Memory_Unlock
 12292                           
 12293                           ;MCU_B1.c: 1049: WREN = 0;
 12294  1C72  0023               	movlb	3	; select bank3
 12295  1C73  1115               	bcf	21,2	;volatile
 12296  1C74  0008               	return
 12297  1C75                     __end_of_Flash_Memory_Erasing:	
 12298                           
 12299                           	psect	text79
 12300  0629                     __ptext79:	
 12301 ;; *************** function _Flash_Memory_Initialization *****************
 12302 ;; Defined at:
 12303 ;;		line 932 in file "../src/MCU_B1.c"
 12304 ;; Parameters:    Size  Location     Type
 12305 ;;		None
 12306 ;; Auto vars:     Size  Location     Type
 12307 ;;  value           1    5[BANK0 ] unsigned char 
 12308 ;; Return value:  Size  Location     Type
 12309 ;;		None               void
 12310 ;; Registers used:
 12311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12312 ;; Tracked objects:
 12313 ;;		On entry : 0/0
 12314 ;;		On exit  : 0/0
 12315 ;;		Unchanged: 0/0
 12316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;Total ram usage:        2 bytes
 12322 ;; Hardware stack levels used:    1
 12323 ;; Hardware stack levels required when called:    7
 12324 ;; This function calls:
 12325 ;;		_Flash_Memory_Read
 12326 ;;		_Flash_Memory_Write
 12327 ;;		_setMemory_Data
 12328 ;; This function is called by:
 12329 ;;		_main
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           
 12334                           ;psect for function _Flash_Memory_Initialization
 12335  0629                     _Flash_Memory_Initialization:	
 12336                           
 12337                           ;MCU_B1.c: 933: char value = 0;
 12338                           
 12339                           ;incstack = 0
 12340                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12341  0629  0020               	movlb	0	; select bank0
 12342  062A  01A5               	clrf	Flash_Memory_Initialization@value
 12343                           
 12344                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12345  062B  301F               	movlw	31
 12346  062C  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12347  062F  3AAA               	xorlw	170
 12348  0630  1D03               	skipz
 12349  0631  2EAB               	goto	l9960
 12350                           
 12351                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12352  0632  3000               	movlw	0
 12353  0633  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12354  0636  0020               	movlb	0	; select bank0
 12355  0637  00A4               	movwf	??_Flash_Memory_Initialization
 12356  0638  0021               	movlb	1	; select bank1
 12357  0639  0863               	movf	_product^(0+128),w
 12358  063A  3E0C               	addlw	12
 12359  063B  0086               	movwf	6
 12360  063C  3002               	movlw	2	; select bank4/5
 12361  063D  0087               	movwf	7
 12362  063E  0020               	movlb	0	; select bank0
 12363  063F  0824               	movf	??_Flash_Memory_Initialization,w
 12364  0640  0081               	movwf	1
 12365                           
 12366                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12367  0641  3001               	movlw	1
 12368  0642  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12369  0645  0020               	movlb	0	; select bank0
 12370  0646  00A4               	movwf	??_Flash_Memory_Initialization
 12371  0647  0021               	movlb	1	; select bank1
 12372  0648  0863               	movf	_product^(0+128),w
 12373  0649  3E0D               	addlw	13
 12374  064A  0086               	movwf	6
 12375  064B  3002               	movlw	2	; select bank4/5
 12376  064C  0087               	movwf	7
 12377  064D  0020               	movlb	0	; select bank0
 12378  064E  0824               	movf	??_Flash_Memory_Initialization,w
 12379  064F  0081               	movwf	1
 12380                           
 12381                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12382  0650  3002               	movlw	2
 12383  0651  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12384  0654  0020               	movlb	0	; select bank0
 12385  0655  00A4               	movwf	??_Flash_Memory_Initialization
 12386  0656  0021               	movlb	1	; select bank1
 12387  0657  0863               	movf	_product^(0+128),w
 12388  0658  3E0E               	addlw	14
 12389  0659  0086               	movwf	6
 12390  065A  3002               	movlw	2	; select bank4/5
 12391  065B  0087               	movwf	7
 12392  065C  0020               	movlb	0	; select bank0
 12393  065D  0824               	movf	??_Flash_Memory_Initialization,w
 12394  065E  0081               	movwf	1
 12395                           
 12396                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12397  065F  3003               	movlw	3
 12398  0660  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12399  0663  0020               	movlb	0	; select bank0
 12400  0664  00A4               	movwf	??_Flash_Memory_Initialization
 12401  0665  0021               	movlb	1	; select bank1
 12402  0666  0863               	movf	_product^(0+128),w
 12403  0667  3E15               	addlw	21
 12404  0668  0086               	movwf	6
 12405  0669  3002               	movlw	2	; select bank4/5
 12406  066A  0087               	movwf	7
 12407  066B  0020               	movlb	0	; select bank0
 12408  066C  0824               	movf	??_Flash_Memory_Initialization,w
 12409  066D  0081               	movwf	1
 12410                           
 12411                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12412  066E  3004               	movlw	4
 12413  066F  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12414  0672  0020               	movlb	0	; select bank0
 12415  0673  00A4               	movwf	??_Flash_Memory_Initialization
 12416  0674  0021               	movlb	1	; select bank1
 12417  0675  0863               	movf	_product^(0+128),w
 12418  0676  3E16               	addlw	22
 12419  0677  0086               	movwf	6
 12420  0678  3002               	movlw	2	; select bank4/5
 12421  0679  0087               	movwf	7
 12422  067A  0020               	movlb	0	; select bank0
 12423  067B  0824               	movf	??_Flash_Memory_Initialization,w
 12424  067C  0081               	movwf	1
 12425                           
 12426                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12427  067D  3005               	movlw	5
 12428  067E  319E  26E6  3186   	fcall	_Flash_Memory_Read
 12429  0681  0020               	movlb	0	; select bank0
 12430  0682  00A4               	movwf	??_Flash_Memory_Initialization
 12431  0683  0021               	movlb	1	; select bank1
 12432  0684  0863               	movf	_product^(0+128),w
 12433  0685  3E17               	addlw	23
 12434  0686  0086               	movwf	6
 12435  0687  3002               	movlw	2	; select bank4/5
 12436  0688  0087               	movwf	7
 12437  0689  0020               	movlb	0	; select bank0
 12438  068A  0824               	movf	??_Flash_Memory_Initialization,w
 12439  068B  0081               	movwf	1
 12440                           
 12441                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12442  068C  0021               	movlb	1	; select bank1
 12443  068D  0863               	movf	_product^(0+128),w
 12444  068E  3E0C               	addlw	12
 12445  068F  0086               	movwf	6
 12446  0690  3002               	movlw	2	; select bank4/5
 12447  0691  0087               	movwf	7
 12448  0692  0801               	movf	1,w
 12449  0693  3AFF               	xorlw	255
 12450  0694  1D03               	skipz
 12451  0695  0008               	return
 12452  0696  0863               	movf	_product^(0+128),w
 12453  0697  3E0D               	addlw	13
 12454  0698  0086               	movwf	6
 12455  0699  3002               	movlw	2	; select bank4/5
 12456  069A  0087               	movwf	7
 12457  069B  0801               	movf	1,w
 12458  069C  3AFF               	xorlw	255
 12459  069D  1D03               	skipz
 12460  069E  0008               	return
 12461  069F  0863               	movf	_product^(0+128),w
 12462  06A0  3E0E               	addlw	14
 12463  06A1  0086               	movwf	6
 12464  06A2  3002               	movlw	2	; select bank4/5
 12465  06A3  0087               	movwf	7
 12466  06A4  0801               	movf	1,w
 12467  06A5  3AFF               	xorlw	255
 12468  06A6  1D03               	skipz
 12469  06A7  0008               	return
 12470                           
 12471                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12472  06A8  15AE               	bsf	_myMain^(0+128),3
 12473                           
 12474                           ;MCU_B1.c: 951: myMain.First = 1;
 12475  06A9  16AE               	bsf	_myMain^(0+128),5
 12476                           
 12477                           ;MCU_B1.c: 952: }
 12478                           ;MCU_B1.c: 953: } else {
 12479  06AA  0008               	return
 12480  06AB                     l9960:	
 12481                           
 12482                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12483  06AB  30FF               	movlw	255
 12484  06AC  0020               	movlb	0	; select bank0
 12485  06AD  00A4               	movwf	??_Flash_Memory_Initialization
 12486  06AE  0824               	movf	??_Flash_Memory_Initialization,w
 12487  06AF  00A0               	movwf	setMemory_Data@data
 12488  06B0  3000               	movlw	0
 12489  06B1  319C  245D  3186   	fcall	_setMemory_Data
 12490                           
 12491                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12492  06B4  30FF               	movlw	255
 12493  06B5  0020               	movlb	0	; select bank0
 12494  06B6  00A4               	movwf	??_Flash_Memory_Initialization
 12495  06B7  0824               	movf	??_Flash_Memory_Initialization,w
 12496  06B8  00A0               	movwf	setMemory_Data@data
 12497  06B9  3001               	movlw	1
 12498  06BA  319C  245D  3186   	fcall	_setMemory_Data
 12499                           
 12500                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12501  06BD  30FF               	movlw	255
 12502  06BE  0020               	movlb	0	; select bank0
 12503  06BF  00A4               	movwf	??_Flash_Memory_Initialization
 12504  06C0  0824               	movf	??_Flash_Memory_Initialization,w
 12505  06C1  00A0               	movwf	setMemory_Data@data
 12506  06C2  3002               	movlw	2
 12507  06C3  319C  245D  3186   	fcall	_setMemory_Data
 12508                           
 12509                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12510  06C6  30FF               	movlw	255
 12511  06C7  0020               	movlb	0	; select bank0
 12512  06C8  00A4               	movwf	??_Flash_Memory_Initialization
 12513  06C9  0824               	movf	??_Flash_Memory_Initialization,w
 12514  06CA  00A0               	movwf	setMemory_Data@data
 12515  06CB  3003               	movlw	3
 12516  06CC  319C  245D  3186   	fcall	_setMemory_Data
 12517                           
 12518                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12519  06CF  30FF               	movlw	255
 12520  06D0  0020               	movlb	0	; select bank0
 12521  06D1  00A4               	movwf	??_Flash_Memory_Initialization
 12522  06D2  0824               	movf	??_Flash_Memory_Initialization,w
 12523  06D3  00A0               	movwf	setMemory_Data@data
 12524  06D4  3004               	movlw	4
 12525  06D5  319C  245D  3186   	fcall	_setMemory_Data
 12526                           
 12527                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12528  06D8  30FF               	movlw	255
 12529  06D9  0020               	movlb	0	; select bank0
 12530  06DA  00A4               	movwf	??_Flash_Memory_Initialization
 12531  06DB  0824               	movf	??_Flash_Memory_Initialization,w
 12532  06DC  00A0               	movwf	setMemory_Data@data
 12533  06DD  3005               	movlw	5
 12534  06DE  319C  245D  3186   	fcall	_setMemory_Data
 12535                           
 12536                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12537  06E1  30AA               	movlw	170
 12538  06E2  0020               	movlb	0	; select bank0
 12539  06E3  00A4               	movwf	??_Flash_Memory_Initialization
 12540  06E4  0824               	movf	??_Flash_Memory_Initialization,w
 12541  06E5  00A0               	movwf	setMemory_Data@data
 12542  06E6  301F               	movlw	31
 12543  06E7  319C  245D  3186   	fcall	_setMemory_Data
 12544                           
 12545                           ;MCU_B1.c: 966: GIE = 0;
 12546  06EA  138B               	bcf	11,7	;volatile
 12547                           
 12548                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12549  06EB  3191  2152         	fcall	_Flash_Memory_Write
 12550                           
 12551                           ;MCU_B1.c: 968: GIE = 1;
 12552  06ED  178B               	bsf	11,7	;volatile
 12553                           
 12554                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12555  06EE  0021               	movlb	1	; select bank1
 12556  06EF  15AE               	bsf	_myMain^(0+128),3
 12557                           
 12558                           ;MCU_B1.c: 970: myMain.First = 1;
 12559  06F0  16AE               	bsf	_myMain^(0+128),5
 12560                           
 12561                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12562  06F1  1638               	bsf	(_myMain^(0+128)+10),4
 12563  06F2  0008               	return
 12564  06F3                     __end_of_Flash_Memory_Initialization:	
 12565                           
 12566                           	psect	text80
 12567  1C5D                     __ptext80:	
 12568 ;; *************** function _setMemory_Data *****************
 12569 ;; Defined at:
 12570 ;;		line 1094 in file "../src/MCU_B1.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;  address         1    wreg     unsigned char 
 12573 ;;  data            1    0[BANK0 ] unsigned char 
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;  address         1    2[BANK0 ] unsigned char 
 12576 ;; Return value:  Size  Location     Type
 12577 ;;		None               void
 12578 ;; Registers used:
 12579 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12585 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;Total ram usage:        3 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    5
 12592 ;; This function calls:
 12593 ;;		Nothing
 12594 ;; This function is called by:
 12595 ;;		_Flash_Memory_Initialization
 12596 ;;		_Flash_Memory_Modify
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           
 12601                           ;psect for function _setMemory_Data
 12602  1C5D                     _setMemory_Data:	
 12603                           
 12604                           ;incstack = 0
 12605                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12606                           ;setMemory_Data@address stored from wreg
 12607  1C5D  0020               	movlb	0	; select bank0
 12608  1C5E  00A2               	movwf	setMemory_Data@address
 12609                           
 12610                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12611  1C5F  0820               	movf	setMemory_Data@data,w
 12612  1C60  00A1               	movwf	??_setMemory_Data
 12613  1C61  0822               	movf	setMemory_Data@address,w
 12614  1C62  3E20               	addlw	_Memory& (0+255)
 12615  1C63  0086               	movwf	6
 12616  1C64  3002               	movlw	2	; select bank4/5
 12617  1C65  0087               	movwf	7
 12618  1C66  0821               	movf	??_setMemory_Data,w
 12619  1C67  0081               	movwf	1
 12620  1C68  0008               	return
 12621  1C69                     __end_of_setMemory_Data:	
 12622                           
 12623                           	psect	text81
 12624  1152                     __ptext81:	
 12625 ;; *************** function _Flash_Memory_Write *****************
 12626 ;; Defined at:
 12627 ;;		line 1023 in file "../src/MCU_B1.c"
 12628 ;; Parameters:    Size  Location     Type
 12629 ;;		None
 12630 ;; Auto vars:     Size  Location     Type
 12631 ;;  i               1    1[BANK0 ] unsigned char 
 12632 ;; Return value:  Size  Location     Type
 12633 ;;		None               void
 12634 ;; Registers used:
 12635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12636 ;; Tracked objects:
 12637 ;;		On entry : 0/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12645 ;;Total ram usage:        2 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    6
 12648 ;; This function calls:
 12649 ;;		_Flash_Memory_Unlock
 12650 ;; This function is called by:
 12651 ;;		_Flash_Memory_Initialization
 12652 ;;		_Flash_Memory_Modify
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           
 12657                           ;psect for function _Flash_Memory_Write
 12658  1152                     _Flash_Memory_Write:	
 12659                           
 12660                           ;MCU_B1.c: 1024: char i = 0;
 12661                           
 12662                           ;incstack = 0
 12663                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12664  1152  0020               	movlb	0	; select bank0
 12665  1153  01A1               	clrf	Flash_Memory_Write@i
 12666                           
 12667                           ;MCU_B1.c: 1025: CFGS = 0;
 12668  1154  0023               	movlb	3	; select bank3
 12669  1155  1315               	bcf	21,6	;volatile
 12670                           
 12671                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12672  1156  3030               	movlw	48
 12673  1157  0092               	movwf	18	;volatile
 12674                           
 12675                           ;MCU_B1.c: 1027: PMDATH = 0;
 12676  1158  0194               	clrf	20	;volatile
 12677                           
 12678                           ;MCU_B1.c: 1028: FREE = 0;
 12679  1159  1215               	bcf	21,4	;volatile
 12680                           
 12681                           ;MCU_B1.c: 1029: LWLO = 1;
 12682  115A  1695               	bsf	21,5	;volatile
 12683                           
 12684                           ;MCU_B1.c: 1030: WREN = 1;
 12685  115B  1515               	bsf	21,2	;volatile
 12686                           
 12687                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12688  115C  0020               	movlb	0	; select bank0
 12689  115D  01A1               	clrf	Flash_Memory_Write@i
 12690  115E  3020               	movlw	32
 12691  115F  0221               	subwf	Flash_Memory_Write@i,w
 12692  1160  1803               	btfsc	3,0
 12693  1161  297A               	goto	l1257
 12694  1162                     l9430:	
 12695                           
 12696                           ;MCU_B1.c: 1032: PMADRL = i;
 12697  1162  0821               	movf	Flash_Memory_Write@i,w
 12698  1163  0023               	movlb	3	; select bank3
 12699  1164  0091               	movwf	17	;volatile
 12700                           
 12701                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12702  1165  0020               	movlb	0	; select bank0
 12703  1166  0821               	movf	Flash_Memory_Write@i,w
 12704  1167  3E20               	addlw	_Memory& (0+255)
 12705  1168  0086               	movwf	6
 12706  1169  3002               	movlw	2	; select bank4/5
 12707  116A  0087               	movwf	7
 12708  116B  0801               	movf	1,w
 12709  116C  0023               	movlb	3	; select bank3
 12710  116D  0093               	movwf	19	;volatile
 12711                           
 12712                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12713  116E  319B  23D6  3191   	fcall	_Flash_Memory_Unlock
 12714  1171  3001               	movlw	1
 12715  1172  0020               	movlb	0	; select bank0
 12716  1173  00A0               	movwf	??_Flash_Memory_Write
 12717  1174  0820               	movf	??_Flash_Memory_Write,w
 12718  1175  07A1               	addwf	Flash_Memory_Write@i,f
 12719  1176  3020               	movlw	32
 12720  1177  0221               	subwf	Flash_Memory_Write@i,w
 12721  1178  1C03               	skipc
 12722  1179  2962               	goto	l9430
 12723  117A                     l1257:	
 12724                           
 12725                           ;MCU_B1.c: 1035: }
 12726                           ;MCU_B1.c: 1036: LWLO = 0;
 12727  117A  0023               	movlb	3	; select bank3
 12728  117B  1295               	bcf	21,5	;volatile
 12729                           
 12730                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12731  117C  319B  23D6         	fcall	_Flash_Memory_Unlock
 12732                           
 12733                           ;MCU_B1.c: 1038: WREN = 0;
 12734  117E  0023               	movlb	3	; select bank3
 12735  117F  1115               	bcf	21,2	;volatile
 12736  1180  0008               	return
 12737  1181                     __end_of_Flash_Memory_Write:	
 12738                           
 12739                           	psect	text82
 12740  1BD6                     __ptext82:	
 12741 ;; *************** function _Flash_Memory_Unlock *****************
 12742 ;; Defined at:
 12743 ;;		line 1002 in file "../src/MCU_B1.c"
 12744 ;; Parameters:    Size  Location     Type
 12745 ;;		None
 12746 ;; Auto vars:     Size  Location     Type
 12747 ;;		None
 12748 ;; Return value:  Size  Location     Type
 12749 ;;		None               void
 12750 ;; Registers used:
 12751 ;;		wreg
 12752 ;; Tracked objects:
 12753 ;;		On entry : 0/0
 12754 ;;		On exit  : 0/0
 12755 ;;		Unchanged: 0/0
 12756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;Total ram usage:        0 bytes
 12762 ;; Hardware stack levels used:    1
 12763 ;; Hardware stack levels required when called:    5
 12764 ;; This function calls:
 12765 ;;		Nothing
 12766 ;; This function is called by:
 12767 ;;		_Flash_Memory_Write
 12768 ;;		_Flash_Memory_Erasing
 12769 ;; This function uses a non-reentrant model
 12770 ;;
 12771                           
 12772                           
 12773                           ;psect for function _Flash_Memory_Unlock
 12774  1BD6                     _Flash_Memory_Unlock:	
 12775                           
 12776                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 12777                           
 12778                           ;incstack = 0
 12779                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12780  1BD6  3055               	movlw	85
 12781  1BD7  0023               	movlb	3	; select bank3
 12782  1BD8  0096               	movwf	22	;volatile
 12783                           
 12784                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 12785  1BD9  30AA               	movlw	170
 12786  1BDA  0096               	movwf	22	;volatile
 12787                           
 12788                           ;MCU_B1.c: 1005: WR = 1;
 12789  1BDB  1495               	bsf	21,1	;volatile
 12790                           
 12791                           ;MCU_B1.c: 1006: __nop();
 12792  1BDC  0000               	nop
 12793                           
 12794                           ;MCU_B1.c: 1007: __nop();
 12795  1BDD  0000               	nop
 12796  1BDE  0008               	return
 12797  1BDF                     __end_of_Flash_Memory_Unlock:	
 12798                           
 12799                           	psect	text83
 12800  1EE6                     __ptext83:	
 12801 ;; *************** function _Flash_Memory_Read *****************
 12802 ;; Defined at:
 12803 ;;		line 1011 in file "../src/MCU_B1.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;  address         1    wreg     unsigned char 
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;  address         1    2[BANK0 ] unsigned char 
 12808 ;;  ret             1    3[BANK0 ] unsigned char 
 12809 ;;  i               1    1[BANK0 ] unsigned char 
 12810 ;; Return value:  Size  Location     Type
 12811 ;;                  1    wreg      unsigned char 
 12812 ;; Registers used:
 12813 ;;		wreg, status,2
 12814 ;; Tracked objects:
 12815 ;;		On entry : 0/0
 12816 ;;		On exit  : 0/0
 12817 ;;		Unchanged: 0/0
 12818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;Total ram usage:        4 bytes
 12824 ;; Hardware stack levels used:    1
 12825 ;; Hardware stack levels required when called:    5
 12826 ;; This function calls:
 12827 ;;		Nothing
 12828 ;; This function is called by:
 12829 ;;		_Flash_Memory_Initialization
 12830 ;;		_Flash_Memory_Modify
 12831 ;; This function uses a non-reentrant model
 12832 ;;
 12833                           
 12834                           
 12835                           ;psect for function _Flash_Memory_Read
 12836  1EE6                     _Flash_Memory_Read:	
 12837                           
 12838                           ;incstack = 0
 12839                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12840                           ;Flash_Memory_Read@address stored from wreg
 12841  1EE6  0020               	movlb	0	; select bank0
 12842  1EE7  00A2               	movwf	Flash_Memory_Read@address
 12843                           
 12844                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 12845  1EE8  01A1               	clrf	Flash_Memory_Read@i
 12846  1EE9  01A3               	clrf	Flash_Memory_Read@ret
 12847                           
 12848                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 12849  1EEA  3030               	movlw	48
 12850  1EEB  0023               	movlb	3	; select bank3
 12851  1EEC  0092               	movwf	18	;volatile
 12852                           
 12853                           ;MCU_B1.c: 1014: PMADRL = address;
 12854  1EED  0020               	movlb	0	; select bank0
 12855  1EEE  0822               	movf	Flash_Memory_Read@address,w
 12856  1EEF  0023               	movlb	3	; select bank3
 12857  1EF0  0091               	movwf	17	;volatile
 12858                           
 12859                           ;MCU_B1.c: 1015: CFGS = 0;
 12860  1EF1  1315               	bcf	21,6	;volatile
 12861                           
 12862                           ;MCU_B1.c: 1016: RD = 1;
 12863  1EF2  1415               	bsf	21,0	;volatile
 12864                           
 12865                           ;MCU_B1.c: 1017: i = PMDATH;
 12866  1EF3  0814               	movf	20,w	;volatile
 12867  1EF4  0020               	movlb	0	; select bank0
 12868  1EF5  00A0               	movwf	??_Flash_Memory_Read
 12869  1EF6  0820               	movf	??_Flash_Memory_Read,w
 12870  1EF7  00A1               	movwf	Flash_Memory_Read@i
 12871                           
 12872                           ;MCU_B1.c: 1018: ret = PMDATL;
 12873  1EF8  0023               	movlb	3	; select bank3
 12874  1EF9  0813               	movf	19,w	;volatile
 12875  1EFA  0020               	movlb	0	; select bank0
 12876  1EFB  00A0               	movwf	??_Flash_Memory_Read
 12877  1EFC  0820               	movf	??_Flash_Memory_Read,w
 12878  1EFD  00A3               	movwf	Flash_Memory_Read@ret
 12879                           
 12880                           ;MCU_B1.c: 1019: return ret;
 12881  1EFE  0823               	movf	Flash_Memory_Read@ret,w
 12882  1EFF  0008               	return
 12883  1F00                     __end_of_Flash_Memory_Read:	
 12884                           
 12885                           	psect	text84
 12886  0554                     __ptext84:	
 12887 ;; *************** function _Exception_Main *****************
 12888 ;; Defined at:
 12889 ;;		line 499 in file "../src/Main_B1.c"
 12890 ;; Parameters:    Size  Location     Type
 12891 ;;		None
 12892 ;; Auto vars:     Size  Location     Type
 12893 ;;  i               2   19[BANK0 ] int 
 12894 ;;  i               2   17[BANK0 ] int 
 12895 ;;  lights          1   21[BANK0 ] unsigned char 
 12896 ;;  error           1   16[BANK0 ] unsigned char 
 12897 ;;  count           1   15[BANK0 ] unsigned char 
 12898 ;;  status          1   14[BANK0 ] unsigned char 
 12899 ;; Return value:  Size  Location     Type
 12900 ;;		None               void
 12901 ;; Registers used:
 12902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12903 ;; Tracked objects:
 12904 ;;		On entry : 0/0
 12905 ;;		On exit  : 0/0
 12906 ;;		Unchanged: 0/0
 12907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;Total ram usage:        9 bytes
 12913 ;; Hardware stack levels used:    1
 12914 ;; Hardware stack levels required when called:    7
 12915 ;; This function calls:
 12916 ;;		_getDimmerLights_Line
 12917 ;;		_getDimmerLights_Status
 12918 ;;		_getMain_All_Error_Status
 12919 ;;		_getMain_All_LightsStatus
 12920 ;;		_setBuz
 12921 ;;		_setDimmerLights_SwOff
 12922 ;;		_setLED
 12923 ;; This function is called by:
 12924 ;;		_main
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           
 12929                           ;psect for function _Exception_Main
 12930  0554                     _Exception_Main:	
 12931                           
 12932                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12933                           
 12934                           ;incstack = 0
 12935                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12936  0554  3000               	movlw	0
 12937  0555  3191  21B2  3185   	fcall	_getMain_All_Error_Status
 12938  0558  0020               	movlb	0	; select bank0
 12939  0559  00AD               	movwf	??_Exception_Main
 12940  055A  082D               	movf	??_Exception_Main,w
 12941  055B  00B0               	movwf	Exception_Main@error
 12942                           
 12943                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12944  055C  01B5               	clrf	Exception_Main@lights
 12945  055D  01AF               	clrf	Exception_Main@count
 12946  055E  0AAF               	incf	Exception_Main@count,f
 12947                           
 12948                           ;Main_B1.c: 502: char status = 0;
 12949  055F  01AE               	clrf	Exception_Main@status
 12950                           
 12951                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12952  0560  0021               	movlb	1	; select bank1
 12953  0561  1DB8               	btfss	(_myMain^(0+128)+10),3
 12954  0562  2D72               	goto	l10218
 12955                           
 12956                           ;Main_B1.c: 505: if (error == 0) {
 12957  0563  0020               	movlb	0	; select bank0
 12958  0564  08B0               	movf	Exception_Main@error,f
 12959  0565  1D03               	skipz
 12960  0566  0008               	return
 12961                           
 12962                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12963  0567  0021               	movlb	1	; select bank1
 12964  0568  11B8               	bcf	(_myMain^(0+128)+10),3
 12965                           
 12966                           ;Main_B1.c: 509: setLED(99, 10);
 12967  0569  300A               	movlw	10
 12968  056A  0020               	movlb	0	; select bank0
 12969  056B  00AD               	movwf	??_Exception_Main
 12970  056C  082D               	movf	??_Exception_Main,w
 12971  056D  00A2               	movwf	setLED@command
 12972  056E  3063               	movlw	99
 12973  056F  3192  22F4         	fcall	_setLED
 12974                           
 12975                           ;Main_B1.c: 522: }
 12976                           ;Main_B1.c: 523: } else {
 12977  0571  0008               	return
 12978  0572                     l10218:	
 12979                           
 12980                           ;Main_B1.c: 524: if (error != 0) {
 12981  0572  0020               	movlb	0	; select bank0
 12982  0573  0830               	movf	Exception_Main@error,w
 12983  0574  1903               	btfsc	3,2
 12984  0575  0008               	return
 12985                           
 12986                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12987  0576  0021               	movlb	1	; select bank1
 12988  0577  15B8               	bsf	(_myMain^(0+128)+10),3
 12989                           
 12990                           ;Main_B1.c: 527: setLED(99, 11);
 12991  0578  300B               	movlw	11
 12992  0579  0020               	movlb	0	; select bank0
 12993  057A  00AD               	movwf	??_Exception_Main
 12994  057B  082D               	movf	??_Exception_Main,w
 12995  057C  00A2               	movwf	setLED@command
 12996  057D  3063               	movlw	99
 12997  057E  3192  22F4  3185   	fcall	_setLED
 12998                           
 12999                           ;Main_B1.c: 538: switch (error) {
 13000  0581  2E1E               	goto	l10266
 13001  0582                     l10224:	
 13002                           ;Main_B1.c: 539: case 2:
 13003                           
 13004                           
 13005                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13006  0582  319B  23DF  3185   	fcall	_getMain_All_LightsStatus
 13007  0585  3A01               	xorlw	1
 13008  0586  1D03               	skipz
 13009  0587  2D91               	goto	l10228
 13010                           
 13011                           ;Main_B1.c: 547: setBuz(10, 300);
 13012  0588  302C               	movlw	44
 13013  0589  0020               	movlb	0	; select bank0
 13014  058A  00A9               	movwf	setBuz@time
 13015  058B  3001               	movlw	1
 13016  058C  00AA               	movwf	setBuz@time+1
 13017  058D  300A               	movlw	10
 13018  058E  3195  2551  3185   	fcall	_setBuz
 13019  0591                     l10228:	
 13020                           
 13021                           ;Main_B1.c: 548: }
 13022                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13023  0591  0020               	movlb	0	; select bank0
 13024  0592  01B1               	clrf	Exception_Main@i
 13025  0593  01B2               	clrf	Exception_Main@i+1
 13026  0594                     l10238:	
 13027  0594  0832               	movf	Exception_Main@i+1,w
 13028  0595  3A80               	xorlw	128
 13029  0596  00AD               	movwf	??_Exception_Main
 13030  0597  3080               	movlw	128
 13031  0598  022D               	subwf	??_Exception_Main,w
 13032  0599  1D03               	skipz
 13033  059A  2D9D               	goto	u11905
 13034  059B  082F               	movf	Exception_Main@count,w
 13035  059C  0231               	subwf	Exception_Main@i,w
 13036  059D                     u11905:	
 13037  059D  1803               	btfsc	3,0
 13038  059E  2DBF               	goto	u11900
 13039                           
 13040                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13041  059F  0020               	movlb	0	; select bank0
 13042  05A0  0831               	movf	Exception_Main@i,w
 13043  05A1  3E01               	addlw	1
 13044  05A2  319C  24D1  3185   	fcall	_getDimmerLights_Status
 13045  05A5  3A01               	xorlw	1
 13046  05A6  1D03               	skipz
 13047  05A7  2DB9               	goto	l10236
 13048                           
 13049                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13050  05A8  0021               	movlb	1	; select bank1
 13051  05A9  084A               	movf	_DimmerLights^(0+128),w
 13052  05AA  0086               	movwf	6
 13053  05AB  3001               	movlw	1	; select bank2/3
 13054  05AC  0087               	movwf	7
 13055  05AD  1401               	bsf	1,0
 13056                           
 13057                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13058  05AE  0A4A               	incf	_DimmerLights^(0+128),w
 13059  05AF  0086               	movwf	6
 13060  05B0  3001               	movlw	1	; select bank2/3
 13061  05B1  0087               	movwf	7
 13062  05B2  1001               	bcf	1,0
 13063                           
 13064                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13065  05B3  0020               	movlb	0	; select bank0
 13066  05B4  0831               	movf	Exception_Main@i,w
 13067  05B5  3E01               	addlw	1
 13068  05B6  3192  22BB  3185   	fcall	_setDimmerLights_SwOff
 13069  05B9                     l10236:	
 13070  05B9  3001               	movlw	1
 13071  05BA  0020               	movlb	0	; select bank0
 13072  05BB  07B1               	addwf	Exception_Main@i,f
 13073  05BC  3000               	movlw	0
 13074  05BD  3DB2               	addwfc	Exception_Main@i+1,f
 13075  05BE  2D94               	goto	l10238
 13076  05BF                     u11900:	
 13077  05BF  0020               	movlb	0	; select bank0
 13078  05C0  0008               	return
 13079  05C1                     l10240:	
 13080                           ;Main_B1.c: 561: case 3:
 13081                           
 13082                           ;Main_B1.c: 556: }
 13083                           ;Main_B1.c: 557: }
 13084                           ;Main_B1.c: 560: break;
 13085                           
 13086                           
 13087                           ;Main_B1.c: 563: setBuz(5, 300);
 13088  05C1  302C               	movlw	44
 13089  05C2  0020               	movlb	0	; select bank0
 13090  05C3  00A9               	movwf	setBuz@time
 13091  05C4  3001               	movlw	1
 13092  05C5  00AA               	movwf	setBuz@time+1
 13093  05C6  3005               	movlw	5
 13094  05C7  3195  2551  3185   	fcall	_setBuz
 13095                           
 13096                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13097  05CA  319B  23E9  3185   	fcall	_getDimmerLights_Line
 13098  05CD  0020               	movlb	0	; select bank0
 13099  05CE  00AD               	movwf	??_Exception_Main
 13100  05CF  082D               	movf	??_Exception_Main,w
 13101  05D0  00B5               	movwf	Exception_Main@lights
 13102                           
 13103                           ;Main_B1.c: 565: if (lights == 0) {
 13104  05D1  08B5               	movf	Exception_Main@lights,f
 13105  05D2  1D03               	skipz
 13106  05D3  2E03               	goto	l10258
 13107                           
 13108                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13109  05D4  01B3               	clrf	Exception_Main@i_3588
 13110  05D5  01B4               	clrf	Exception_Main@i_3588+1
 13111  05D6                     l10256:	
 13112  05D6  0834               	movf	Exception_Main@i_3588+1,w
 13113  05D7  3A80               	xorlw	128
 13114  05D8  00AD               	movwf	??_Exception_Main
 13115  05D9  3080               	movlw	128
 13116  05DA  022D               	subwf	??_Exception_Main,w
 13117  05DB  1D03               	skipz
 13118  05DC  2DDF               	goto	u11935
 13119  05DD  082F               	movf	Exception_Main@count,w
 13120  05DE  0233               	subwf	Exception_Main@i_3588,w
 13121  05DF                     u11935:	
 13122  05DF  1803               	btfsc	3,0
 13123  05E0  2E01               	goto	u11930
 13124                           
 13125                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13126  05E1  0020               	movlb	0	; select bank0
 13127  05E2  0833               	movf	Exception_Main@i_3588,w
 13128  05E3  3E01               	addlw	1
 13129  05E4  319C  24D1  3185   	fcall	_getDimmerLights_Status
 13130  05E7  3A01               	xorlw	1
 13131  05E8  1D03               	skipz
 13132  05E9  2DFB               	goto	l10254
 13133                           
 13134                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13135  05EA  0021               	movlb	1	; select bank1
 13136  05EB  084A               	movf	_DimmerLights^(0+128),w
 13137  05EC  0086               	movwf	6
 13138  05ED  3001               	movlw	1	; select bank2/3
 13139  05EE  0087               	movwf	7
 13140  05EF  1401               	bsf	1,0
 13141                           
 13142                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13143  05F0  0A4A               	incf	_DimmerLights^(0+128),w
 13144  05F1  0086               	movwf	6
 13145  05F2  3001               	movlw	1	; select bank2/3
 13146  05F3  0087               	movwf	7
 13147  05F4  1001               	bcf	1,0
 13148                           
 13149                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13150  05F5  0020               	movlb	0	; select bank0
 13151  05F6  0833               	movf	Exception_Main@i_3588,w
 13152  05F7  3E01               	addlw	1
 13153  05F8  3192  22BB  3185   	fcall	_setDimmerLights_SwOff
 13154  05FB                     l10254:	
 13155  05FB  3001               	movlw	1
 13156  05FC  0020               	movlb	0	; select bank0
 13157  05FD  07B3               	addwf	Exception_Main@i_3588,f
 13158  05FE  3000               	movlw	0
 13159  05FF  3DB4               	addwfc	Exception_Main@i_3588+1,f
 13160  0600  2DD6               	goto	l10256
 13161  0601                     u11930:	
 13162  0601  0020               	movlb	0	; select bank0
 13163  0602  0008               	return
 13164  0603                     l10258:	
 13165                           ;Main_B1.c: 573: }
 13166                           ;Main_B1.c: 574: }
 13167                           ;Main_B1.c: 575: } else {
 13168                           
 13169                           
 13170                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13171  0603  0020               	movlb	0	; select bank0
 13172  0604  0835               	movf	Exception_Main@lights,w
 13173  0605  319C  24D1  3185   	fcall	_getDimmerLights_Status
 13174  0608  3A01               	xorlw	1
 13175  0609  1903               	btfsc	3,2
 13176  060A  2E0D               	goto	l10260
 13177  060B  0020               	movlb	0	; select bank0
 13178  060C  0008               	return
 13179  060D                     l10260:	
 13180                           
 13181                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13182  060D  0021               	movlb	1	; select bank1
 13183  060E  084A               	movf	_DimmerLights^(0+128),w
 13184  060F  0086               	movwf	6
 13185  0610  3001               	movlw	1	; select bank2/3
 13186  0611  0087               	movwf	7
 13187  0612  1401               	bsf	1,0
 13188                           
 13189                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13190  0613  0A4A               	incf	_DimmerLights^(0+128),w
 13191  0614  0086               	movwf	6
 13192  0615  3001               	movlw	1	; select bank2/3
 13193  0616  0087               	movwf	7
 13194  0617  1001               	bcf	1,0
 13195                           
 13196                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13197  0618  0020               	movlb	0	; select bank0
 13198  0619  0835               	movf	Exception_Main@lights,w
 13199  061A  3192  22BB         	fcall	_setDimmerLights_SwOff
 13200  061C  0020               	movlb	0	; select bank0
 13201  061D  0008               	return
 13202  061E                     l10266:	
 13203                           ;Main_B1.c: 586: }
 13204                           
 13205                           ;Main_B1.c: 582: }
 13206                           ;Main_B1.c: 583: }
 13207                           ;Main_B1.c: 585: break;
 13208                           
 13209  061E  0020               	movlb	0	; select bank0
 13210  061F  0830               	movf	Exception_Main@error,w
 13211                           
 13212                           ; Switch size 1, requested type "space"
 13213                           ; Number of cases is 2, Range of values is 2 to 3
 13214                           ; switch strategies available:
 13215                           ; Name         Instructions Cycles
 13216                           ; simple_byte            7     4 (average)
 13217                           ; direct_byte           13     9 (fixed)
 13218                           ; jumptable            263     9 (fixed)
 13219                           ;	Chosen strategy is simple_byte
 13220  0620  3A02               	xorlw	2	; case 2
 13221  0621  1903               	skipnz
 13222  0622  2D82               	goto	l10224
 13223  0623  3A01               	xorlw	1	; case 3
 13224  0624  1903               	skipnz
 13225  0625  2DC1               	goto	l10240
 13226  0626  2E28               	goto	l1499
 13227  0627  0008               	return
 13228  0628                     l1499:	
 13229  0628  0008               	return
 13230  0629                     __end_of_Exception_Main:	
 13231                           
 13232                           	psect	text85
 13233  1BE9                     __ptext85:	
 13234 ;; *************** function _getDimmerLights_Line *****************
 13235 ;; Defined at:
 13236 ;;		line 1045 in file "../src/Dimmer_B1.c"
 13237 ;; Parameters:    Size  Location     Type
 13238 ;;		None
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;  line            1    0[BANK0 ] unsigned char 
 13241 ;; Return value:  Size  Location     Type
 13242 ;;                  1    wreg      unsigned char 
 13243 ;; Registers used:
 13244 ;;		wreg, status,2
 13245 ;; Tracked objects:
 13246 ;;		On entry : 0/0
 13247 ;;		On exit  : 0/0
 13248 ;;		Unchanged: 0/0
 13249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;Total ram usage:        1 bytes
 13255 ;; Hardware stack levels used:    1
 13256 ;; Hardware stack levels required when called:    5
 13257 ;; This function calls:
 13258 ;;		Nothing
 13259 ;; This function is called by:
 13260 ;;		_Exception_Main
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264                           
 13265                           ;psect for function _getDimmerLights_Line
 13266  1BE9                     _getDimmerLights_Line:	
 13267                           
 13268                           ;Dimmer_B1.c: 1046: char line = 0;
 13269                           
 13270                           ;incstack = 0
 13271                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13272  1BE9  0020               	movlb	0	; select bank0
 13273  1BEA  01A0               	clrf	getDimmerLights_Line@line
 13274                           
 13275                           ;Dimmer_B1.c: 1048: if (DimmerLights1.Line == 1) {
 13276  1BEB  0023               	movlb	3	; select bank3
 13277  1BEC  1CC8               	btfss	(_DimmerLights1^(0+384)+1),1
 13278  1BED  2BF1               	goto	l9580
 13279                           
 13280                           ;Dimmer_B1.c: 1049: line = 1;
 13281  1BEE  0020               	movlb	0	; select bank0
 13282  1BEF  01A0               	clrf	getDimmerLights_Line@line
 13283  1BF0  0AA0               	incf	getDimmerLights_Line@line,f
 13284  1BF1                     l9580:	
 13285                           
 13286                           ;Dimmer_B1.c: 1050: }
 13287                           ;Dimmer_B1.c: 1062: return line;
 13288  1BF1  0020               	movlb	0	; select bank0
 13289  1BF2  0820               	movf	getDimmerLights_Line@line,w
 13290  1BF3  0008               	return
 13291  1BF4                     __end_of_getDimmerLights_Line:	
 13292                           
 13293                           	psect	text86
 13294  1F4F                     __ptext86:	
 13295 ;; *************** function _DimmerLights_Main *****************
 13296 ;; Defined at:
 13297 ;;		line 774 in file "../src/Dimmer_B1.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;		None
 13300 ;; Auto vars:     Size  Location     Type
 13301 ;;		None
 13302 ;; Return value:  Size  Location     Type
 13303 ;;		None               void
 13304 ;; Registers used:
 13305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13306 ;; Tracked objects:
 13307 ;;		On entry : 0/0
 13308 ;;		On exit  : 0/0
 13309 ;;		Unchanged: 0/0
 13310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;Total ram usage:        0 bytes
 13316 ;; Hardware stack levels used:    1
 13317 ;; Hardware stack levels required when called:   10
 13318 ;; This function calls:
 13319 ;;		_getLoad_OK
 13320 ;;		_getMain_All_Error_Status
 13321 ;;		_getMain_All_LightsStatus
 13322 ;;		_setDimmerLights_Main
 13323 ;; This function is called by:
 13324 ;;		_main
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           
 13329                           ;psect for function _DimmerLights_Main
 13330  1F4F                     _DimmerLights_Main:	
 13331                           
 13332                           ;Dimmer_B1.c: 777: if (Dimmer.LoadGO == 1) {
 13333                           
 13334                           ;incstack = 0
 13335                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13336  1F4F  0022               	movlb	2	; select bank2
 13337  1F50  1CAC               	btfss	_Dimmer^(0+256),1
 13338  1F51  2F67               	goto	l9940
 13339                           
 13340                           ;Dimmer_B1.c: 778: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13341  1F52  319B  23AC  319F   	fcall	_getLoad_OK
 13342  1F55  3A01               	xorlw	1
 13343  1F56  1903               	skipnz
 13344  1F57  2F65               	goto	l757
 13345  1F58  3000               	movlw	0
 13346  1F59  3191  21B2  319F   	fcall	_getMain_All_Error_Status
 13347  1F5C  3800               	iorlw	0
 13348  1F5D  1D03               	skipz
 13349  1F5E  2F65               	goto	l757
 13350  1F5F  319B  23DF  319F   	fcall	_getMain_All_LightsStatus
 13351  1F62  3800               	iorlw	0
 13352  1F63  1D03               	skipz
 13353  1F64  2F67               	goto	l9940
 13354  1F65                     l757:	
 13355                           
 13356                           ;Dimmer_B1.c: 779: Dimmer.LoadGO = 0;
 13357  1F65  0022               	movlb	2	; select bank2
 13358  1F66  10AC               	bcf	_Dimmer^(0+256),1
 13359  1F67                     l9940:	
 13360                           
 13361                           ;Dimmer_B1.c: 780: }
 13362                           ;Dimmer_B1.c: 781: }
 13363                           ;Dimmer_B1.c: 785: setDimmerLights_Main(1);
 13364  1F67  3001               	movlw	1
 13365  1F68  3197  2795         	fcall	_setDimmerLights_Main
 13366  1F6A  0008               	return
 13367  1F6B                     __end_of_DimmerLights_Main:	
 13368                           
 13369                           	psect	text87
 13370  1795                     __ptext87:	
 13371 ;; *************** function _setDimmerLights_Main *****************
 13372 ;; Defined at:
 13373 ;;		line 803 in file "../src/Dimmer_B1.c"
 13374 ;; Parameters:    Size  Location     Type
 13375 ;;  lights          1    wreg     unsigned char 
 13376 ;; Auto vars:     Size  Location     Type
 13377 ;;  lights          1    1[BANK1 ] unsigned char 
 13378 ;; Return value:  Size  Location     Type
 13379 ;;		None               void
 13380 ;; Registers used:
 13381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;Total ram usage:        1 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    9
 13394 ;; This function calls:
 13395 ;;		_DimmerLights_SelectPointer
 13396 ;;		_getDimmerLights_Allow_Condition
 13397 ;;		_getMain_All_LightsStatus
 13398 ;;		_setDimmerLights_Dimming
 13399 ;;		_setDimmerLights_OnOff
 13400 ;; This function is called by:
 13401 ;;		_DimmerLights_Main
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           
 13406                           ;psect for function _setDimmerLights_Main
 13407  1795                     _setDimmerLights_Main:	
 13408                           
 13409                           ;incstack = 0
 13410                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13411                           ;setDimmerLights_Main@lights stored from wreg
 13412  1795  0021               	movlb	1	; select bank1
 13413  1796  00DC               	movwf	setDimmerLights_Main@lights^(0+128)
 13414                           
 13415                           ;Dimmer_B1.c: 805: DimmerLights_SelectPointer(lights);
 13416  1797  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13417  1798  319C  2421  3197   	fcall	_DimmerLights_SelectPointer
 13418                           
 13419                           ;Dimmer_B1.c: 806: if (DimmerLights->Trigger == 1) {
 13420  179B  0021               	movlb	1	; select bank1
 13421  179C  084A               	movf	_DimmerLights^(0+128),w
 13422  179D  0086               	movwf	6
 13423  179E  3001               	movlw	1	; select bank2/3
 13424  179F  0087               	movwf	7
 13425  17A0  1C81               	btfss	1,1
 13426  17A1  2FC4               	goto	l9558
 13427                           
 13428                           ;Dimmer_B1.c: 807: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13429  17A2  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13430  17A3  319E  2658  3197   	fcall	_getDimmerLights_Allow_Condition
 13431  17A6  3800               	iorlw	0
 13432  17A7  1D03               	skipz
 13433  17A8  0008               	return
 13434                           
 13435                           ;Dimmer_B1.c: 808: DimmerLights->Trigger = 0;
 13436  17A9  0021               	movlb	1	; select bank1
 13437  17AA  084A               	movf	_DimmerLights^(0+128),w
 13438  17AB  0086               	movwf	6
 13439  17AC  3001               	movlw	1	; select bank2/3
 13440  17AD  0087               	movwf	7
 13441  17AE  1081               	bcf	1,1
 13442                           
 13443                           ;Dimmer_B1.c: 809: if (DimmerLights->Switch == 1) {
 13444  17AF  084A               	movf	_DimmerLights^(0+128),w
 13445  17B0  0086               	movwf	6
 13446  17B1  3001               	movlw	1	; select bank2/3
 13447  17B2  0087               	movwf	7
 13448  17B3  1D01               	btfss	1,2
 13449  17B4  2FBD               	goto	l9556
 13450                           
 13451                           ;Dimmer_B1.c: 810: setDimmerLights_OnOff(lights, 1);
 13452  17B5  0020               	movlb	0	; select bank0
 13453  17B6  01ED               	clrf	setDimmerLights_OnOff@command
 13454  17B7  0AED               	incf	setDimmerLights_OnOff@command,f
 13455  17B8  0021               	movlb	1	; select bank1
 13456  17B9  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13457  17BA  3186  26F3         	fcall	_setDimmerLights_OnOff
 13458                           
 13459                           ;Dimmer_B1.c: 811: } else {
 13460  17BC  0008               	return
 13461  17BD                     l9556:	
 13462                           
 13463                           ;Dimmer_B1.c: 812: setDimmerLights_OnOff(lights, 0);
 13464  17BD  0020               	movlb	0	; select bank0
 13465  17BE  01ED               	clrf	setDimmerLights_OnOff@command
 13466  17BF  0021               	movlb	1	; select bank1
 13467  17C0  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13468  17C1  3186  26F3         	fcall	_setDimmerLights_OnOff
 13469                           
 13470                           ;Dimmer_B1.c: 813: }
 13471                           ;Dimmer_B1.c: 814: }
 13472                           ;Dimmer_B1.c: 815: } else {
 13473  17C3  0008               	return
 13474  17C4                     l9558:	
 13475                           
 13476                           ;Dimmer_B1.c: 816: if (getMain_All_LightsStatus() == 1) {
 13477  17C4  319B  23DF  3197   	fcall	_getMain_All_LightsStatus
 13478  17C7  3A01               	xorlw	1
 13479  17C8  1D03               	skipz
 13480  17C9  2FF3               	goto	l9570
 13481                           
 13482                           ;Dimmer_B1.c: 817: if (DimmerLights->DimmingTrigger == 1) {
 13483  17CA  0021               	movlb	1	; select bank1
 13484  17CB  084A               	movf	_DimmerLights^(0+128),w
 13485  17CC  0086               	movwf	6
 13486  17CD  3001               	movlw	1	; select bank2/3
 13487  17CE  0087               	movwf	7
 13488  17CF  1E01               	btfss	1,4
 13489  17D0  0008               	return
 13490                           
 13491                           ;Dimmer_B1.c: 818: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13492  17D1  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13493  17D2  319E  2658  3197   	fcall	_getDimmerLights_Allow_Condition
 13494  17D5  3800               	iorlw	0
 13495  17D6  1D03               	skipz
 13496  17D7  0008               	return
 13497                           
 13498                           ;Dimmer_B1.c: 819: DimmerLights->DimmingTrigger = 0;
 13499  17D8  0021               	movlb	1	; select bank1
 13500  17D9  084A               	movf	_DimmerLights^(0+128),w
 13501  17DA  0086               	movwf	6
 13502  17DB  3001               	movlw	1	; select bank2/3
 13503  17DC  0087               	movwf	7
 13504  17DD  1201               	bcf	1,4
 13505                           
 13506                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingSwitch == 1) {
 13507  17DE  084A               	movf	_DimmerLights^(0+128),w
 13508  17DF  0086               	movwf	6
 13509  17E0  3001               	movlw	1	; select bank2/3
 13510  17E1  0087               	movwf	7
 13511  17E2  1E81               	btfss	1,5
 13512  17E3  2FEC               	goto	l9568
 13513                           
 13514                           ;Dimmer_B1.c: 821: setDimmerLights_Dimming(lights, 1);
 13515  17E4  0020               	movlb	0	; select bank0
 13516  17E5  01EA               	clrf	setDimmerLights_Dimming@status
 13517  17E6  0AEA               	incf	setDimmerLights_Dimming@status,f
 13518  17E7  0021               	movlb	1	; select bank1
 13519  17E8  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13520  17E9  3194  24FB         	fcall	_setDimmerLights_Dimming
 13521                           
 13522                           ;Dimmer_B1.c: 822: } else {
 13523  17EB  0008               	return
 13524  17EC                     l9568:	
 13525                           
 13526                           ;Dimmer_B1.c: 823: setDimmerLights_Dimming(lights, 0);
 13527  17EC  0020               	movlb	0	; select bank0
 13528  17ED  01EA               	clrf	setDimmerLights_Dimming@status
 13529  17EE  0021               	movlb	1	; select bank1
 13530  17EF  085C               	movf	setDimmerLights_Main@lights^(0+128),w
 13531  17F0  3194  24FB         	fcall	_setDimmerLights_Dimming
 13532                           
 13533                           ;Dimmer_B1.c: 824: }
 13534                           ;Dimmer_B1.c: 825: }
 13535                           ;Dimmer_B1.c: 826: }
 13536                           ;Dimmer_B1.c: 827: } else {
 13537  17F2  0008               	return
 13538  17F3                     l9570:	
 13539                           
 13540                           ;Dimmer_B1.c: 828: if (DimmerLights->DimmingTrigger == 1) {
 13541  17F3  0021               	movlb	1	; select bank1
 13542  17F4  084A               	movf	_DimmerLights^(0+128),w
 13543  17F5  0086               	movwf	6
 13544  17F6  3001               	movlw	1	; select bank2/3
 13545  17F7  0087               	movwf	7
 13546  17F8  1E01               	btfss	1,4
 13547  17F9  0008               	return
 13548                           
 13549                           ;Dimmer_B1.c: 829: DimmerLights->DimmingTrigger = 0;
 13550  17FA  084A               	movf	_DimmerLights^(0+128),w
 13551  17FB  0086               	movwf	6
 13552  17FC  3001               	movlw	1	; select bank2/3
 13553  17FD  0087               	movwf	7
 13554  17FE  1201               	bcf	1,4
 13555  17FF  0008               	return
 13556  1800                     __end_of_setDimmerLights_Main:	
 13557                           
 13558                           	psect	text88
 13559  06F3                     __ptext88:	
 13560 ;; *************** function _setDimmerLights_OnOff *****************
 13561 ;; Defined at:
 13562 ;;		line 837 in file "../src/Dimmer_B1.c"
 13563 ;; Parameters:    Size  Location     Type
 13564 ;;  lights          1    wreg     unsigned char 
 13565 ;;  command         1   77[BANK0 ] unsigned char 
 13566 ;; Auto vars:     Size  Location     Type
 13567 ;;  lights          1    0[BANK1 ] unsigned char 
 13568 ;; Return value:  Size  Location     Type
 13569 ;;		None               void
 13570 ;; Registers used:
 13571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13572 ;; Tracked objects:
 13573 ;;		On entry : 0/0
 13574 ;;		On exit  : 0/0
 13575 ;;		Unchanged: 0/0
 13576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13577 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13578 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13579 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13580 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13581 ;;Total ram usage:        4 bytes
 13582 ;; Hardware stack levels used:    1
 13583 ;; Hardware stack levels required when called:    8
 13584 ;; This function calls:
 13585 ;;		_getCmd_Status
 13586 ;;		_getDelayOff_GO
 13587 ;;		_getDimmerLights_PercentToValue
 13588 ;;		_getMain_All_LightsStatus
 13589 ;;		_setCmd_Status
 13590 ;;		_setDelayOff_GO
 13591 ;;		_setDimmerIntr_ControlStatus
 13592 ;;		_setDimmerIntr_DimmingValue
 13593 ;;		_setDimmerIntr_Dimming_RF
 13594 ;;		_setDimmerIntr_MaxmumValue
 13595 ;;		_setDimmerLights_Line
 13596 ;;		_setLED
 13597 ;;		_setProductData
 13598 ;;		_setRF_DimmerLights
 13599 ;;		_setTxData
 13600 ;; This function is called by:
 13601 ;;		_setDimmerLights_Main
 13602 ;; This function uses a non-reentrant model
 13603 ;;
 13604                           
 13605                           
 13606                           ;psect for function _setDimmerLights_OnOff
 13607  06F3                     _setDimmerLights_OnOff:	
 13608                           
 13609                           ;incstack = 0
 13610                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13611                           ;setDimmerLights_OnOff@lights stored from wreg
 13612  06F3  0021               	movlb	1	; select bank1
 13613  06F4  00DB               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13614                           
 13615                           ;Dimmer_B1.c: 839: if (command == 1) {
 13616  06F5  0020               	movlb	0	; select bank0
 13617  06F6  086D               	movf	setDimmerLights_OnOff@command,w
 13618  06F7  3A01               	xorlw	1
 13619  06F8  1D03               	skipz
 13620  06F9  2F58               	goto	l9338
 13621                           
 13622                           ;Dimmer_B1.c: 840: setDimmerIntr_ControlStatus(lights, 1);
 13623  06FA  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13624  06FB  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13625  06FC  0021               	movlb	1	; select bank1
 13626  06FD  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13627  06FE  319E  2684  3186   	fcall	_setDimmerIntr_ControlStatus
 13628                           
 13629                           ;Dimmer_B1.c: 843: Dimmer.Load_Status = 1;
 13630  0701  0022               	movlb	2	; select bank2
 13631  0702  152C               	bsf	_Dimmer^(0+256),2
 13632                           
 13633                           ;Dimmer_B1.c: 844: setDimmerLights_Line(lights);
 13634  0703  0021               	movlb	1	; select bank1
 13635  0704  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13636  0705  319D  2537  3186   	fcall	_setDimmerLights_Line
 13637                           
 13638                           ;Dimmer_B1.c: 850: setLED(lights, 0);
 13639  0708  0020               	movlb	0	; select bank0
 13640  0709  01A2               	clrf	setLED@command
 13641  070A  0021               	movlb	1	; select bank1
 13642  070B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13643  070C  3192  22F4  3186   	fcall	_setLED
 13644                           
 13645                           ;Dimmer_B1.c: 851: ;;
 13646                           ;Dimmer_B1.c: 871: if (DimmerLights->DimmingRun == 1) {
 13647  070F  0021               	movlb	1	; select bank1
 13648  0710  0A4A               	incf	_DimmerLights^(0+128),w
 13649  0711  0086               	movwf	6
 13650  0712  3001               	movlw	1	; select bank2/3
 13651  0713  0087               	movwf	7
 13652  0714  1F01               	btfss	1,6
 13653  0715  2F3A               	goto	l9330
 13654                           
 13655                           ;Dimmer_B1.c: 872: DimmerLights->DimmingRun = 0;
 13656  0716  0A4A               	incf	_DimmerLights^(0+128),w
 13657  0717  0086               	movwf	6
 13658  0718  3001               	movlw	1	; select bank2/3
 13659  0719  0087               	movwf	7
 13660  071A  1301               	bcf	1,6
 13661                           
 13662                           ;Dimmer_B1.c: 873: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13663  071B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13664  071C  3E14               	addlw	20
 13665  071D  0763               	addwf	_product^(0+128),w
 13666  071E  0020               	movlb	0	; select bank0
 13667  071F  00EE               	movwf	??_setDimmerLights_OnOff
 13668  0720  086E               	movf	??_setDimmerLights_OnOff,w
 13669  0721  0086               	movwf	6
 13670  0722  3002               	movlw	2	; select bank4/5
 13671  0723  0087               	movwf	7
 13672  0724  0801               	movf	1,w
 13673  0725  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13674  0728  0020               	movlb	0	; select bank0
 13675  0729  00EF               	movwf	??_setDimmerLights_OnOff+1
 13676  072A  086F               	movf	??_setDimmerLights_OnOff+1,w
 13677  072B  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13678  072C  0021               	movlb	1	; select bank1
 13679  072D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13680  072E  319C  2439  3186   	fcall	_setDimmerIntr_MaxmumValue
 13681                           
 13682                           ;Dimmer_B1.c: 874: setDimmerIntr_Dimming_RF(lights, 1);
 13683  0731  0020               	movlb	0	; select bank0
 13684  0732  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13685  0733  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13686  0734  0021               	movlb	1	; select bank1
 13687  0735  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13688  0736  319E  269C  3186   	fcall	_setDimmerIntr_Dimming_RF
 13689                           
 13690                           ;Dimmer_B1.c: 875: } else {
 13691  0739  2F51               	goto	l9332
 13692  073A                     l9330:	
 13693                           
 13694                           ;Dimmer_B1.c: 876: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13695  073A  0021               	movlb	1	; select bank1
 13696  073B  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13697  073C  3E14               	addlw	20
 13698  073D  0763               	addwf	_product^(0+128),w
 13699  073E  0020               	movlb	0	; select bank0
 13700  073F  00EE               	movwf	??_setDimmerLights_OnOff
 13701  0740  086E               	movf	??_setDimmerLights_OnOff,w
 13702  0741  0086               	movwf	6
 13703  0742  3002               	movlw	2	; select bank4/5
 13704  0743  0087               	movwf	7
 13705  0744  0801               	movf	1,w
 13706  0745  3196  2666  3186   	fcall	_getDimmerLights_PercentToValue
 13707  0748  0020               	movlb	0	; select bank0
 13708  0749  00EF               	movwf	??_setDimmerLights_OnOff+1
 13709  074A  086F               	movf	??_setDimmerLights_OnOff+1,w
 13710  074B  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13711  074C  0021               	movlb	1	; select bank1
 13712  074D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13713  074E  319C  2445  3186   	fcall	_setDimmerIntr_DimmingValue
 13714  0751                     l9332:	
 13715                           
 13716                           ;Dimmer_B1.c: 879: }
 13717                           ;Dimmer_B1.c: 881: if (lights == 1) {
 13718  0751  0021               	movlb	1	; select bank1
 13719  0752  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13720  0753  3A01               	xorlw	1
 13721  0754  1D03               	skipz
 13722  0755  2F87               	goto	l9352
 13723                           
 13724                           ;Dimmer_B1.c: 883: DimmerIntr1.TuneGO = 1;
 13725  0756  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 13726                           
 13727                           ;Dimmer_B1.c: 889: }
 13728                           ;Dimmer_B1.c: 895: } else if (command == 0) {
 13729                           
 13730                           ;Dimmer_B1.c: 885: } else if (lights == 2) {
 13731  0757  2F87               	goto	l9352
 13732  0758                     l9338:	
 13733  0758  0020               	movlb	0	; select bank0
 13734  0759  08ED               	movf	setDimmerLights_OnOff@command,f
 13735  075A  1D03               	skipz
 13736  075B  2F87               	goto	l9352
 13737                           
 13738                           ;Dimmer_B1.c: 896: setDimmerIntr_ControlStatus(lights, 0);
 13739  075C  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13740  075D  0021               	movlb	1	; select bank1
 13741  075E  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13742  075F  319E  2684  3186   	fcall	_setDimmerIntr_ControlStatus
 13743                           
 13744                           ;Dimmer_B1.c: 898: Dimmer.Load_Status = 0;
 13745  0762  0022               	movlb	2	; select bank2
 13746  0763  112C               	bcf	_Dimmer^(0+256),2
 13747                           
 13748                           ;Dimmer_B1.c: 899: setDimmerLights_Line(0);
 13749  0764  3000               	movlw	0
 13750  0765  319D  2537  3186   	fcall	_setDimmerLights_Line
 13751                           
 13752                           ;Dimmer_B1.c: 903: if (getDelayOff_GO(lights) == 1) {
 13753  0768  0021               	movlb	1	; select bank1
 13754  0769  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13755  076A  319C  24E2  3186   	fcall	_getDelayOff_GO
 13756  076D  3A01               	xorlw	1
 13757  076E  1D03               	skipz
 13758  076F  2F78               	goto	l784
 13759                           
 13760                           ;Dimmer_B1.c: 904: setDelayOff_GO(lights, 0, 0);
 13761  0770  0020               	movlb	0	; select bank0
 13762  0771  01E5               	clrf	setDelayOff_GO@command
 13763  0772  01E6               	clrf	setDelayOff_GO@value
 13764  0773  0021               	movlb	1	; select bank1
 13765  0774  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13766  0775  318C  24AB  3186   	fcall	_setDelayOff_GO
 13767  0778                     l784:	
 13768                           
 13769                           ;Dimmer_B1.c: 905: }
 13770                           ;Dimmer_B1.c: 910: setLED(lights, 1);
 13771  0778  0020               	movlb	0	; select bank0
 13772  0779  01A2               	clrf	setLED@command
 13773  077A  0AA2               	incf	setLED@command,f
 13774  077B  0021               	movlb	1	; select bank1
 13775  077C  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13776  077D  3192  22F4  3186   	fcall	_setLED
 13777                           
 13778                           ;Dimmer_B1.c: 911: ;;
 13779                           ;Dimmer_B1.c: 915: if (lights == 1) {
 13780  0780  0021               	movlb	1	; select bank1
 13781  0781  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13782  0782  3A01               	xorlw	1
 13783  0783  1D03               	skipz
 13784  0784  2F87               	goto	l9352
 13785                           
 13786                           ;Dimmer_B1.c: 916: RB1 = 0;
 13787  0785  0020               	movlb	0	; select bank0
 13788  0786  108D               	bcf	13,1	;volatile
 13789  0787                     l9352:	
 13790                           
 13791                           ;Dimmer_B1.c: 918: }
 13792                           ;Dimmer_B1.c: 929: }
 13793                           ;Dimmer_B1.c: 932: setRF_DimmerLights(lights, command);
 13794  0787  0020               	movlb	0	; select bank0
 13795  0788  086D               	movf	setDimmerLights_OnOff@command,w
 13796  0789  00EE               	movwf	??_setDimmerLights_OnOff
 13797  078A  086E               	movf	??_setDimmerLights_OnOff,w
 13798  078B  00E5               	movwf	setRF_DimmerLights@on
 13799  078C  0021               	movlb	1	; select bank1
 13800  078D  085B               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13801  078E  3197  2730  3186   	fcall	_setRF_DimmerLights
 13802                           
 13803                           ;Dimmer_B1.c: 934: if (getCmd_Status(1) == 1) {
 13804  0791  3001               	movlw	1
 13805  0792  319D  2549  3186   	fcall	_getCmd_Status
 13806  0795  3A01               	xorlw	1
 13807  0796  1D03               	skipz
 13808  0797  2FB3               	goto	l9366
 13809                           
 13810                           ;Dimmer_B1.c: 935: if (getMain_All_LightsStatus() == 0) {
 13811  0798  319B  23DF  3186   	fcall	_getMain_All_LightsStatus
 13812  079B  3800               	iorlw	0
 13813  079C  1D03               	skipz
 13814  079D  0008               	return
 13815                           
 13816                           ;Dimmer_B1.c: 936: setCmd_Status(1, 0);
 13817  079E  0020               	movlb	0	; select bank0
 13818  079F  01A0               	clrf	setCmd_Status@cmd
 13819  07A0  3001               	movlw	1
 13820  07A1  319E  26B4  3186   	fcall	_setCmd_Status
 13821                           
 13822                           ;Dimmer_B1.c: 937: setProductData(11, 0);
 13823  07A4  0020               	movlb	0	; select bank0
 13824  07A5  01E2               	clrf	setProductData@value
 13825  07A6  300B               	movlw	11
 13826  07A7  319C  242D  3186   	fcall	_setProductData
 13827                           
 13828                           ;Dimmer_B1.c: 938: setProductData(17, 0);
 13829  07AA  0020               	movlb	0	; select bank0
 13830  07AB  01E2               	clrf	setProductData@value
 13831  07AC  3011               	movlw	17
 13832  07AD  319C  242D  3186   	fcall	_setProductData
 13833                           
 13834                           ;Dimmer_B1.c: 939: setTxData();
 13835  07B0  318F  2745         	fcall	_setTxData
 13836                           
 13837                           ;Dimmer_B1.c: 940: }
 13838                           ;Dimmer_B1.c: 941: } else {
 13839  07B2  0008               	return
 13840  07B3                     l9366:	
 13841                           
 13842                           ;Dimmer_B1.c: 942: setTxData();
 13843  07B3  318F  2745         	fcall	_setTxData
 13844  07B5  0008               	return
 13845  07B6                     __end_of_setDimmerLights_OnOff:	
 13846                           
 13847                           	psect	text89
 13848  12F4                     __ptext89:	
 13849 ;; *************** function _setLED *****************
 13850 ;; Defined at:
 13851 ;;		line 81 in file "../src/LED_B1.c"
 13852 ;; Parameters:    Size  Location     Type
 13853 ;;  led             1    wreg     unsigned char 
 13854 ;;  command         1    2[BANK0 ] unsigned char 
 13855 ;; Auto vars:     Size  Location     Type
 13856 ;;  led             1    3[BANK0 ] unsigned char 
 13857 ;; Return value:  Size  Location     Type
 13858 ;;		None               void
 13859 ;; Registers used:
 13860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13861 ;; Tracked objects:
 13862 ;;		On entry : 0/0
 13863 ;;		On exit  : 0/0
 13864 ;;		Unchanged: 0/0
 13865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13866 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;Total ram usage:        2 bytes
 13871 ;; Hardware stack levels used:    1
 13872 ;; Hardware stack levels required when called:    6
 13873 ;; This function calls:
 13874 ;;		_LedPointSelect
 13875 ;; This function is called by:
 13876 ;;		_setDimmerLights_OnOff
 13877 ;;		_setLED_Initialization
 13878 ;;		_Exception_Main
 13879 ;;		_setSw_Initialization
 13880 ;; This function uses a non-reentrant model
 13881 ;;
 13882                           
 13883                           
 13884                           ;psect for function _setLED
 13885  12F4                     _setLED:	
 13886                           
 13887                           ;incstack = 0
 13888                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13889                           ;setLED@led stored from wreg
 13890  12F4  0020               	movlb	0	; select bank0
 13891  12F5  00A3               	movwf	setLED@led
 13892                           
 13893                           ;LED_B1.c: 82: LedPointSelect(led);
 13894  12F6  0823               	movf	setLED@led,w
 13895  12F7  319C  2451  3192   	fcall	_LedPointSelect
 13896                           
 13897                           ;LED_B1.c: 83: if (command == 0) {
 13898  12FA  0020               	movlb	0	; select bank0
 13899  12FB  08A2               	movf	setLED@command,f
 13900  12FC  1D03               	skipz
 13901  12FD  2B03               	goto	l9108
 13902                           
 13903                           ;LED_B1.c: 112: if (led == 99) {
 13904  12FE  0823               	movf	setLED@led,w
 13905  12FF  3A63               	xorlw	99
 13906  1300  1D03               	skipz
 13907  1301  2B03               	goto	l9108
 13908                           
 13909                           ;LED_B1.c: 116: RB5 = 1;
 13910  1302  168D               	bsf	13,5	;volatile
 13911  1303                     l9108:	
 13912                           
 13913                           ;LED_B1.c: 118: }
 13914                           ;LED_B1.c: 120: }
 13915                           ;LED_B1.c: 121: if (command == 1) {
 13916  1303  0822               	movf	setLED@command,w
 13917  1304  3A01               	xorlw	1
 13918  1305  1D03               	skipz
 13919  1306  2B0C               	goto	l9114
 13920                           
 13921                           ;LED_B1.c: 150: if (led == 99) {
 13922  1307  0823               	movf	setLED@led,w
 13923  1308  3A63               	xorlw	99
 13924  1309  1D03               	skipz
 13925  130A  2B0C               	goto	l9114
 13926                           
 13927                           ;LED_B1.c: 154: RB5 = 0;
 13928  130B  128D               	bcf	13,5	;volatile
 13929  130C                     l9114:	
 13930                           
 13931                           ;LED_B1.c: 156: }
 13932                           ;LED_B1.c: 158: }
 13933                           ;LED_B1.c: 159: if (command == 10) {
 13934  130C  0822               	movf	setLED@command,w
 13935  130D  3A0A               	xorlw	10
 13936  130E  1D03               	skipz
 13937  130F  2B22               	goto	l9122
 13938                           
 13939                           ;LED_B1.c: 160: LED->GO = 0;
 13940  1310  0021               	movlb	1	; select bank1
 13941  1311  084B               	movf	_LED^(0+128),w
 13942  1312  0086               	movwf	6
 13943  1313  3001               	movlw	1	; select bank2/3
 13944  1314  0087               	movwf	7
 13945  1315  1081               	bcf	1,1
 13946                           
 13947                           ;LED_B1.c: 161: LED->Time = 0;
 13948  1316  0A4B               	incf	_LED^(0+128),w
 13949  1317  0086               	movwf	6
 13950  1318  3001               	movlw	1	; select bank2/3
 13951  1319  0087               	movwf	7
 13952  131A  3000               	movlw	0
 13953  131B  3FC0               	movwi [0]fsr1
 13954  131C  3FC1               	movwi [1]fsr1
 13955                           
 13956                           ;LED_B1.c: 190: if (led == 99) {
 13957  131D  0020               	movlb	0	; select bank0
 13958  131E  0823               	movf	setLED@led,w
 13959  131F  3A63               	xorlw	99
 13960  1320  1903               	btfsc	3,2
 13961                           
 13962                           ;LED_B1.c: 194: RB5 = 1;
 13963  1321  168D               	bsf	13,5	;volatile
 13964  1322                     l9122:	
 13965                           
 13966                           ;LED_B1.c: 196: }
 13967                           ;LED_B1.c: 198: }
 13968                           ;LED_B1.c: 199: if (command == 11) {
 13969  1322  0822               	movf	setLED@command,w
 13970  1323  3A0B               	xorlw	11
 13971  1324  1D03               	skipz
 13972  1325  0008               	return
 13973                           
 13974                           ;LED_B1.c: 200: LED->GO = 1;
 13975  1326  0021               	movlb	1	; select bank1
 13976  1327  084B               	movf	_LED^(0+128),w
 13977  1328  0086               	movwf	6
 13978  1329  3001               	movlw	1	; select bank2/3
 13979  132A  0087               	movwf	7
 13980  132B  1481               	bsf	1,1
 13981  132C  0008               	return
 13982  132D                     __end_of_setLED:	
 13983                           
 13984                           	psect	text90
 13985  1C51                     __ptext90:	
 13986 ;; *************** function _LedPointSelect *****************
 13987 ;; Defined at:
 13988 ;;		line 7 in file "../src/LED_B1.c"
 13989 ;; Parameters:    Size  Location     Type
 13990 ;;  led             1    wreg     unsigned char 
 13991 ;; Auto vars:     Size  Location     Type
 13992 ;;  led             1    1[BANK0 ] unsigned char 
 13993 ;; Return value:  Size  Location     Type
 13994 ;;		None               void
 13995 ;; Registers used:
 13996 ;;		wreg
 13997 ;; Tracked objects:
 13998 ;;		On entry : 0/0
 13999 ;;		On exit  : 0/0
 14000 ;;		Unchanged: 0/0
 14001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14006 ;;Total ram usage:        2 bytes
 14007 ;; Hardware stack levels used:    1
 14008 ;; Hardware stack levels required when called:    5
 14009 ;; This function calls:
 14010 ;;		Nothing
 14011 ;; This function is called by:
 14012 ;;		_setLED_Initialization
 14013 ;;		_setLED
 14014 ;;		_setLED_Main
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018                           
 14019                           ;psect for function _LedPointSelect
 14020  1C51                     _LedPointSelect:	
 14021                           
 14022                           ;incstack = 0
 14023                           ; Regs used in _LedPointSelect: [wreg]
 14024                           ;LedPointSelect@led stored from wreg
 14025  1C51  0020               	movlb	0	; select bank0
 14026  1C52  00A1               	movwf	LedPointSelect@led
 14027                           
 14028                           ;LED_B1.c: 24: if (led == 99) {
 14029  1C53  0821               	movf	LedPointSelect@led,w
 14030  1C54  3A63               	xorlw	99
 14031  1C55  1D03               	skipz
 14032  1C56  0008               	return
 14033                           
 14034                           ;LED_B1.c: 25: LED = &VarErrLED;
 14035  1C57  306B               	movlw	_VarErrLED& (0+255)
 14036  1C58  00A0               	movwf	??_LedPointSelect
 14037  1C59  0820               	movf	??_LedPointSelect,w
 14038  1C5A  0021               	movlb	1	; select bank1
 14039  1C5B  00CB               	movwf	_LED^(0+128)
 14040  1C5C  0008               	return
 14041  1C5D                     __end_of_LedPointSelect:	
 14042                           
 14043                           	psect	text91
 14044  1E9C                     __ptext91:	
 14045 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14046 ;; Defined at:
 14047 ;;		line 222 in file "../src/Dimmer_B1.c"
 14048 ;; Parameters:    Size  Location     Type
 14049 ;;  lights          1    wreg     unsigned char 
 14050 ;;  command         1    0[BANK0 ] unsigned char 
 14051 ;; Auto vars:     Size  Location     Type
 14052 ;;  lights          1    2[BANK0 ] unsigned char 
 14053 ;; Return value:  Size  Location     Type
 14054 ;;		None               void
 14055 ;; Registers used:
 14056 ;;		wreg, status,2, status,0
 14057 ;; Tracked objects:
 14058 ;;		On entry : 0/0
 14059 ;;		On exit  : 0/0
 14060 ;;		Unchanged: 0/0
 14061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14062 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;Total ram usage:        3 bytes
 14067 ;; Hardware stack levels used:    1
 14068 ;; Hardware stack levels required when called:    5
 14069 ;; This function calls:
 14070 ;;		Nothing
 14071 ;; This function is called by:
 14072 ;;		_setDimmerLights_OnOff
 14073 ;;		_setRFSW_AdjControl
 14074 ;; This function uses a non-reentrant model
 14075 ;;
 14076                           
 14077                           
 14078                           ;psect for function _setDimmerIntr_Dimming_RF
 14079  1E9C                     _setDimmerIntr_Dimming_RF:	
 14080                           
 14081                           ;incstack = 0
 14082                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14083                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14084  1E9C  0020               	movlb	0	; select bank0
 14085  1E9D  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14086                           
 14087                           ;Dimmer_B1.c: 224: if (lights == 1) {
 14088  1E9E  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14089  1E9F  3A01               	xorlw	1
 14090  1EA0  1D03               	skipz
 14091  1EA1  0008               	return
 14092                           
 14093                           ;Dimmer_B1.c: 225: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14094  1EA2  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14095  1EA3  3A01               	xorlw	1
 14096  1EA4  3000               	movlw	0
 14097  1EA5  1903               	skipnz
 14098  1EA6  3001               	movlw	1
 14099  1EA7  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14100  1EA8  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14101  1EA9  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14102  1EAA  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14103  1EAB  0021               	movlb	1	; select bank1
 14104  1EAC  083B               	movf	_DimmerIntr1^(0+128),w
 14105  1EAD  0020               	movlb	0	; select bank0
 14106  1EAE  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14107  1EAF  39BF               	andlw	-65
 14108  1EB0  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14109  1EB1  0021               	movlb	1	; select bank1
 14110  1EB2  00BB               	movwf	_DimmerIntr1^(0+128)
 14111  1EB3  0008               	return
 14112  1EB4                     __end_of_setDimmerIntr_Dimming_RF:	
 14113                           
 14114                           	psect	text92
 14115  1C45                     __ptext92:	
 14116 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14117 ;; Defined at:
 14118 ;;		line 87 in file "../src/Dimmer_B1.c"
 14119 ;; Parameters:    Size  Location     Type
 14120 ;;  lights          1    wreg     unsigned char 
 14121 ;;  value           1   66[BANK0 ] unsigned char 
 14122 ;; Auto vars:     Size  Location     Type
 14123 ;;  lights          1   68[BANK0 ] unsigned char 
 14124 ;; Return value:  Size  Location     Type
 14125 ;;		None               void
 14126 ;; Registers used:
 14127 ;;		wreg
 14128 ;; Tracked objects:
 14129 ;;		On entry : 0/0
 14130 ;;		On exit  : 0/0
 14131 ;;		Unchanged: 0/0
 14132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14133 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;Total ram usage:        3 bytes
 14138 ;; Hardware stack levels used:    1
 14139 ;; Hardware stack levels required when called:    5
 14140 ;; This function calls:
 14141 ;;		Nothing
 14142 ;; This function is called by:
 14143 ;;		_setDimmerLights_OnOff
 14144 ;; This function uses a non-reentrant model
 14145 ;;
 14146                           
 14147                           
 14148                           ;psect for function _setDimmerIntr_DimmingValue
 14149  1C45                     _setDimmerIntr_DimmingValue:	
 14150                           
 14151                           ;incstack = 0
 14152                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14153                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14154  1C45  0020               	movlb	0	; select bank0
 14155  1C46  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14156                           
 14157                           ;Dimmer_B1.c: 89: if (lights == 1) {
 14158  1C47  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14159  1C48  3A01               	xorlw	1
 14160  1C49  1D03               	skipz
 14161  1C4A  0008               	return
 14162                           
 14163                           ;Dimmer_B1.c: 90: DimmerIntr1.DimmingValue = value;
 14164  1C4B  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14165  1C4C  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14166  1C4D  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14167  1C4E  0021               	movlb	1	; select bank1
 14168  1C4F  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 14169  1C50  0008               	return
 14170  1C51                     __end_of_setDimmerIntr_DimmingValue:	
 14171                           
 14172                           	psect	text93
 14173  1E84                     __ptext93:	
 14174 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14175 ;; Defined at:
 14176 ;;		line 69 in file "../src/Dimmer_B1.c"
 14177 ;; Parameters:    Size  Location     Type
 14178 ;;  lights          1    wreg     unsigned char 
 14179 ;;  command         1    0[BANK0 ] unsigned char 
 14180 ;; Auto vars:     Size  Location     Type
 14181 ;;  lights          1    2[BANK0 ] unsigned char 
 14182 ;; Return value:  Size  Location     Type
 14183 ;;		None               void
 14184 ;; Registers used:
 14185 ;;		wreg, status,2, status,0
 14186 ;; Tracked objects:
 14187 ;;		On entry : 0/0
 14188 ;;		On exit  : 0/0
 14189 ;;		Unchanged: 0/0
 14190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14191 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;Total ram usage:        3 bytes
 14196 ;; Hardware stack levels used:    1
 14197 ;; Hardware stack levels required when called:    5
 14198 ;; This function calls:
 14199 ;;		Nothing
 14200 ;; This function is called by:
 14201 ;;		_setDimmerLights_OnOff
 14202 ;; This function uses a non-reentrant model
 14203 ;;
 14204                           
 14205                           
 14206                           ;psect for function _setDimmerIntr_ControlStatus
 14207  1E84                     _setDimmerIntr_ControlStatus:	
 14208                           
 14209                           ;incstack = 0
 14210                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14211                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14212  1E84  0020               	movlb	0	; select bank0
 14213  1E85  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14214                           
 14215                           ;Dimmer_B1.c: 71: if (lights == 1) {
 14216  1E86  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14217  1E87  3A01               	xorlw	1
 14218  1E88  1D03               	skipz
 14219  1E89  0008               	return
 14220                           
 14221                           ;Dimmer_B1.c: 72: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14222  1E8A  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14223  1E8B  3A01               	xorlw	1
 14224  1E8C  3000               	movlw	0
 14225  1E8D  1903               	skipnz
 14226  1E8E  3001               	movlw	1
 14227  1E8F  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14228  1E90  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14229  1E91  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14230  1E92  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14231  1E93  0021               	movlb	1	; select bank1
 14232  1E94  083B               	movf	_DimmerIntr1^(0+128),w
 14233  1E95  0020               	movlb	0	; select bank0
 14234  1E96  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14235  1E97  39F7               	andlw	-9
 14236  1E98  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14237  1E99  0021               	movlb	1	; select bank1
 14238  1E9A  00BB               	movwf	_DimmerIntr1^(0+128)
 14239  1E9B  0008               	return
 14240  1E9C                     __end_of_setDimmerIntr_ControlStatus:	
 14241                           
 14242                           	psect	text94
 14243  0CAB                     __ptext94:	
 14244 ;; *************** function _setDelayOff_GO *****************
 14245 ;; Defined at:
 14246 ;;		line 87 in file "../src/DelayOff_B1.c"
 14247 ;; Parameters:    Size  Location     Type
 14248 ;;  sw              1    wreg     unsigned char 
 14249 ;;  command         1   69[BANK0 ] unsigned char 
 14250 ;;  value           1   70[BANK0 ] unsigned char 
 14251 ;; Auto vars:     Size  Location     Type
 14252 ;;  sw              1   76[BANK0 ] unsigned char 
 14253 ;;  k               1   75[BANK0 ] unsigned char 
 14254 ;;  j               1   74[BANK0 ] unsigned char 
 14255 ;;  i               1   73[BANK0 ] unsigned char 
 14256 ;; Return value:  Size  Location     Type
 14257 ;;		None               void
 14258 ;; Registers used:
 14259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14260 ;; Tracked objects:
 14261 ;;		On entry : 0/0
 14262 ;;		On exit  : 0/0
 14263 ;;		Unchanged: 0/0
 14264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14265 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14266 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14267 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14268 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;Total ram usage:        8 bytes
 14270 ;; Hardware stack levels used:    1
 14271 ;; Hardware stack levels required when called:    6
 14272 ;; This function calls:
 14273 ;;		_DelayOffPointSelect
 14274 ;;		___bmul
 14275 ;;		_setProductData
 14276 ;; This function is called by:
 14277 ;;		_setDimmerLights_OnOff
 14278 ;;		_setRFSW_Control
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           
 14283                           ;psect for function _setDelayOff_GO
 14284  0CAB                     _setDelayOff_GO:	
 14285                           
 14286                           ;incstack = 0
 14287                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14288                           ;setDelayOff_GO@sw stored from wreg
 14289  0CAB  0020               	movlb	0	; select bank0
 14290  0CAC  00EC               	movwf	setDelayOff_GO@sw
 14291                           
 14292                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14293  0CAD  086C               	movf	setDelayOff_GO@sw,w
 14294  0CAE  319C  2415  318C   	fcall	_DelayOffPointSelect
 14295                           
 14296                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14297  0CB1  0020               	movlb	0	; select bank0
 14298  0CB2  0865               	movf	setDelayOff_GO@command,w
 14299  0CB3  3A01               	xorlw	1
 14300  0CB4  3000               	movlw	0
 14301  0CB5  1903               	skipnz
 14302  0CB6  3001               	movlw	1
 14303  0CB7  00E7               	movwf	??_setDelayOff_GO
 14304  0CB8  0021               	movlb	1	; select bank1
 14305  0CB9  0849               	movf	_DelayOff^(0+128),w
 14306  0CBA  0086               	movwf	6
 14307  0CBB  3001               	movlw	1	; select bank2/3
 14308  0CBC  0087               	movwf	7
 14309  0CBD  0020               	movlb	0	; select bank0
 14310  0CBE  0DE7               	rlf	??_setDelayOff_GO,f
 14311  0CBF  0801               	movf	1,w
 14312  0CC0  0667               	xorwf	??_setDelayOff_GO,w
 14313  0CC1  39FD               	andlw	-3
 14314  0CC2  0667               	xorwf	??_setDelayOff_GO,w
 14315  0CC3  0081               	movwf	1
 14316                           
 14317                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14318  0CC4  0021               	movlb	1	; select bank1
 14319  0CC5  0849               	movf	_DelayOff^(0+128),w
 14320  0CC6  3E02               	addlw	2
 14321  0CC7  0086               	movwf	6
 14322  0CC8  3001               	movlw	1	; select bank2/3
 14323  0CC9  0087               	movwf	7
 14324  0CCA  3000               	movlw	0
 14325  0CCB  3FC0               	movwi [0]fsr1
 14326  0CCC  3FC1               	movwi [1]fsr1
 14327                           
 14328                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14329  0CCD  0849               	movf	_DelayOff^(0+128),w
 14330  0CCE  3E04               	addlw	4
 14331  0CCF  0086               	movwf	6
 14332  0CD0  3001               	movlw	1	; select bank2/3
 14333  0CD1  0087               	movwf	7
 14334  0CD2  0181               	clrf	1
 14335                           
 14336                           ;DelayOff_B1.c: 94: if (command == 1) {
 14337  0CD3  0020               	movlb	0	; select bank0
 14338  0CD4  0865               	movf	setDelayOff_GO@command,w
 14339  0CD5  3A01               	xorlw	1
 14340  0CD6  1D03               	skipz
 14341  0CD7  2D2D               	goto	l8728
 14342                           
 14343                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14344  0CD8  3005               	movlw	5
 14345  0CD9  00E7               	movwf	??_setDelayOff_GO
 14346  0CDA  0867               	movf	??_setDelayOff_GO,w
 14347  0CDB  00E9               	movwf	setDelayOff_GO@i
 14348  0CDC  01EA               	clrf	setDelayOff_GO@j
 14349  0CDD  01EB               	clrf	setDelayOff_GO@k
 14350                           
 14351                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14352  0CDE  300F               	movlw	15
 14353  0CDF  0566               	andwf	setDelayOff_GO@value,w
 14354  0CE0  00E7               	movwf	??_setDelayOff_GO
 14355  0CE1  0867               	movf	??_setDelayOff_GO,w
 14356  0CE2  3A05               	xorlw	5
 14357  0CE3  1903               	skipnz
 14358  0CE4  2CE9               	goto	l8714
 14359  0CE5  0866               	movf	setDelayOff_GO@value,w
 14360  0CE6  390F               	andlw	15
 14361  0CE7  1D03               	btfss	3,2
 14362  0CE8  2D19               	goto	l8724
 14363  0CE9                     l8714:	
 14364  0CE9  3031               	movlw	49
 14365  0CEA  0266               	subwf	setDelayOff_GO@value,w
 14366  0CEB  1803               	skipnc
 14367  0CEC  2D19               	goto	l8724
 14368                           
 14369                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14370  0CED  0866               	movf	setDelayOff_GO@value,w
 14371  0CEE  390F               	andlw	15
 14372  0CEF  00E7               	movwf	??_setDelayOff_GO
 14373  0CF0  0867               	movf	??_setDelayOff_GO,w
 14374  0CF1  00EA               	movwf	setDelayOff_GO@j
 14375                           
 14376                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14377  0CF2  0866               	movf	setDelayOff_GO@value,w
 14378  0CF3  00E7               	movwf	??_setDelayOff_GO
 14379  0CF4  3004               	movlw	4
 14380  0CF5                     u9585:	
 14381  0CF5  36E7               	lsrf	??_setDelayOff_GO,f
 14382  0CF6  0B89               	decfsz	9,f
 14383  0CF7  2CF5               	goto	u9585
 14384  0CF8  0867               	movf	??_setDelayOff_GO,w
 14385  0CF9  390F               	andlw	15
 14386  0CFA  00E8               	movwf	??_setDelayOff_GO+1
 14387  0CFB  0868               	movf	??_setDelayOff_GO+1,w
 14388  0CFC  00EB               	movwf	setDelayOff_GO@k
 14389                           
 14390                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14391  0CFD  300A               	movlw	10
 14392  0CFE  00E7               	movwf	??_setDelayOff_GO
 14393  0CFF  0867               	movf	??_setDelayOff_GO,w
 14394  0D00  00A0               	movwf	___bmul@multiplicand
 14395  0D01  086B               	movf	setDelayOff_GO@k,w
 14396  0D02  319D  255B  318C   	fcall	___bmul
 14397  0D05  0020               	movlb	0	; select bank0
 14398  0D06  076A               	addwf	setDelayOff_GO@j,w
 14399  0D07  00E8               	movwf	??_setDelayOff_GO+1
 14400  0D08  0021               	movlb	1	; select bank1
 14401  0D09  0A49               	incf	_DelayOff^(0+128),w
 14402  0D0A  0086               	movwf	6
 14403  0D0B  3001               	movlw	1	; select bank2/3
 14404  0D0C  0087               	movwf	7
 14405  0D0D  0020               	movlb	0	; select bank0
 14406  0D0E  0868               	movf	??_setDelayOff_GO+1,w
 14407  0D0F  0081               	movwf	1
 14408                           
 14409                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14410  0D10  0866               	movf	setDelayOff_GO@value,w
 14411  0D11  00E7               	movwf	??_setDelayOff_GO
 14412  0D12  0867               	movf	??_setDelayOff_GO,w
 14413  0D13  00E2               	movwf	setProductData@value
 14414  0D14  086C               	movf	setDelayOff_GO@sw,w
 14415  0D15  3E1A               	addlw	26
 14416  0D16  319C  242D         	fcall	_setProductData
 14417                           
 14418                           ;DelayOff_B1.c: 103: } else {
 14419  0D18  0008               	return
 14420  0D19                     l8724:	
 14421                           
 14422                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14423  0D19  3005               	movlw	5
 14424  0D1A  0020               	movlb	0	; select bank0
 14425  0D1B  00E7               	movwf	??_setDelayOff_GO
 14426  0D1C  0021               	movlb	1	; select bank1
 14427  0D1D  0A49               	incf	_DelayOff^(0+128),w
 14428  0D1E  0086               	movwf	6
 14429  0D1F  3001               	movlw	1	; select bank2/3
 14430  0D20  0087               	movwf	7
 14431  0D21  0020               	movlb	0	; select bank0
 14432  0D22  0867               	movf	??_setDelayOff_GO,w
 14433  0D23  0081               	movwf	1
 14434                           
 14435                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14436  0D24  3005               	movlw	5
 14437  0D25  00E7               	movwf	??_setDelayOff_GO
 14438  0D26  0867               	movf	??_setDelayOff_GO,w
 14439  0D27  00E2               	movwf	setProductData@value
 14440  0D28  086C               	movf	setDelayOff_GO@sw,w
 14441  0D29  3E1A               	addlw	26
 14442  0D2A  319C  242D         	fcall	_setProductData
 14443                           
 14444                           ;DelayOff_B1.c: 106: }
 14445                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14446  0D2C  0008               	return
 14447  0D2D                     l8728:	
 14448  0D2D  0020               	movlb	0	; select bank0
 14449  0D2E  08E5               	movf	setDelayOff_GO@command,f
 14450  0D2F  1D03               	skipz
 14451  0D30  0008               	return
 14452                           
 14453                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14454  0D31  01E2               	clrf	setProductData@value
 14455  0D32  086C               	movf	setDelayOff_GO@sw,w
 14456  0D33  3E1A               	addlw	26
 14457  0D34  319C  242D         	fcall	_setProductData
 14458  0D36  0008               	return
 14459  0D37                     __end_of_setDelayOff_GO:	
 14460                           
 14461                           	psect	text95
 14462  1D5B                     __ptext95:	
 14463 ;; *************** function ___bmul *****************
 14464 ;; Defined at:
 14465 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14466 ;; Parameters:    Size  Location     Type
 14467 ;;  multiplier      1    wreg     unsigned char 
 14468 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14469 ;; Auto vars:     Size  Location     Type
 14470 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14471 ;;  product         1    2[BANK0 ] unsigned char 
 14472 ;; Return value:  Size  Location     Type
 14473 ;;                  1    wreg      unsigned char 
 14474 ;; Registers used:
 14475 ;;		wreg, status,2, status,0
 14476 ;; Tracked objects:
 14477 ;;		On entry : 0/0
 14478 ;;		On exit  : 0/0
 14479 ;;		Unchanged: 0/0
 14480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14481 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14482 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14485 ;;Total ram usage:        4 bytes
 14486 ;; Hardware stack levels used:    1
 14487 ;; Hardware stack levels required when called:    5
 14488 ;; This function calls:
 14489 ;;		Nothing
 14490 ;; This function is called by:
 14491 ;;		_setDelayOff_GO
 14492 ;;		_DelayTimejudge
 14493 ;; This function uses a non-reentrant model
 14494 ;;
 14495                           
 14496                           
 14497                           ;psect for function ___bmul
 14498  1D5B                     ___bmul:	
 14499                           
 14500                           ;incstack = 0
 14501                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14502                           ;___bmul@multiplier stored from wreg
 14503  1D5B  0020               	movlb	0	; select bank0
 14504  1D5C  00A3               	movwf	___bmul@multiplier
 14505  1D5D  01A2               	clrf	___bmul@product
 14506  1D5E                     l8392:	
 14507  1D5E  1C23               	btfss	___bmul@multiplier,0
 14508  1D5F  2D64               	goto	l8396
 14509  1D60  0820               	movf	___bmul@multiplicand,w
 14510  1D61  00A1               	movwf	??___bmul
 14511  1D62  0821               	movf	??___bmul,w
 14512  1D63  07A2               	addwf	___bmul@product,f
 14513  1D64                     l8396:	
 14514  1D64  1003               	clrc
 14515  1D65  0DA0               	rlf	___bmul@multiplicand,f
 14516  1D66  1003               	clrc
 14517  1D67  0CA3               	rrf	___bmul@multiplier,f
 14518  1D68  08A3               	movf	___bmul@multiplier,f
 14519  1D69  1D03               	skipz
 14520  1D6A  2D5E               	goto	l8392
 14521  1D6B  0822               	movf	___bmul@product,w
 14522  1D6C  0008               	return
 14523  1D6D                     __end_of___bmul:	
 14524                           
 14525                           	psect	text96
 14526  1EB4                     __ptext96:	
 14527 ;; *************** function _setCmd_Status *****************
 14528 ;; Defined at:
 14529 ;;		line 651 in file "../src/Main_B1.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;  number          1    wreg     unsigned char 
 14532 ;;  cmd             1    0[BANK0 ] unsigned char 
 14533 ;; Auto vars:     Size  Location     Type
 14534 ;;  number          1    2[BANK0 ] unsigned char 
 14535 ;; Return value:  Size  Location     Type
 14536 ;;		None               void
 14537 ;; Registers used:
 14538 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14539 ;; Tracked objects:
 14540 ;;		On entry : 0/0
 14541 ;;		On exit  : 0/0
 14542 ;;		Unchanged: 0/0
 14543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14544 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;Total ram usage:        3 bytes
 14549 ;; Hardware stack levels used:    1
 14550 ;; Hardware stack levels required when called:    5
 14551 ;; This function calls:
 14552 ;;		Nothing
 14553 ;; This function is called by:
 14554 ;;		_setDimmerLights_OnOff
 14555 ;;		_setControl_Lights_Table
 14556 ;; This function uses a non-reentrant model
 14557 ;;
 14558                           
 14559                           
 14560                           ;psect for function _setCmd_Status
 14561  1EB4                     _setCmd_Status:	
 14562                           
 14563                           ;incstack = 0
 14564                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14565                           ;setCmd_Status@number stored from wreg
 14566  1EB4  0020               	movlb	0	; select bank0
 14567  1EB5  00A2               	movwf	setCmd_Status@number
 14568                           
 14569                           ;Main_B1.c: 652: switch (number) {
 14570  1EB6  2EC6               	goto	l8882
 14571  1EB7                     l8878:	
 14572                           ;Main_B1.c: 653: case 1:
 14573                           
 14574                           
 14575                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14576  1EB7  0820               	movf	setCmd_Status@cmd,w
 14577  1EB8  3A01               	xorlw	1
 14578  1EB9  3000               	movlw	0
 14579  1EBA  1903               	skipnz
 14580  1EBB  3001               	movlw	1
 14581  1EBC  00A1               	movwf	??_setCmd_Status
 14582  1EBD  0021               	movlb	1	; select bank1
 14583  1EBE  0848               	movf	_Cmd^(0+128),w
 14584  1EBF  0020               	movlb	0	; select bank0
 14585  1EC0  0621               	xorwf	??_setCmd_Status,w
 14586  1EC1  39FE               	andlw	-2
 14587  1EC2  0621               	xorwf	??_setCmd_Status,w
 14588  1EC3  0021               	movlb	1	; select bank1
 14589  1EC4  00C8               	movwf	_Cmd^(0+128)
 14590                           
 14591                           ;Main_B1.c: 656: }
 14592                           
 14593                           ;Main_B1.c: 655: break;
 14594  1EC5  0008               	return
 14595  1EC6                     l8882:	
 14596  1EC6  0020               	movlb	0	; select bank0
 14597  1EC7  0822               	movf	setCmd_Status@number,w
 14598                           
 14599                           ; Switch size 1, requested type "space"
 14600                           ; Number of cases is 1, Range of values is 1 to 1
 14601                           ; switch strategies available:
 14602                           ; Name         Instructions Cycles
 14603                           ; simple_byte            4     3 (average)
 14604                           ; direct_byte           11     9 (fixed)
 14605                           ; jumptable            263     9 (fixed)
 14606                           ;	Chosen strategy is simple_byte
 14607  1EC8  3A01               	xorlw	1	; case 1
 14608  1EC9  1903               	skipnz
 14609  1ECA  2EB7               	goto	l8878
 14610  1ECB  2ECC               	goto	l1508
 14611  1ECC                     l1508:	
 14612  1ECC  0008               	return
 14613  1ECD                     __end_of_setCmd_Status:	
 14614                           
 14615                           	psect	text97
 14616  1BDF                     __ptext97:	
 14617 ;; *************** function _getMain_All_LightsStatus *****************
 14618 ;; Defined at:
 14619 ;;		line 373 in file "../src/Main_B1.c"
 14620 ;; Parameters:    Size  Location     Type
 14621 ;;		None
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;  status          1    0[BANK0 ] unsigned char 
 14624 ;; Return value:  Size  Location     Type
 14625 ;;                  1    wreg      unsigned char 
 14626 ;; Registers used:
 14627 ;;		wreg, status,2
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;Total ram usage:        1 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; Hardware stack levels required when called:    5
 14640 ;; This function calls:
 14641 ;;		Nothing
 14642 ;; This function is called by:
 14643 ;;		_DimmerLights_Main
 14644 ;;		_setDimmerLights_Main
 14645 ;;		_setDimmerLights_OnOff
 14646 ;;		_Flash_Memory_Main
 14647 ;;		_Exception_Main
 14648 ;;		_Load_Main
 14649 ;;		_setTemp_Main
 14650 ;;		_setControl_Lights_Table
 14651 ;; This function uses a non-reentrant model
 14652 ;;
 14653                           
 14654                           
 14655                           ;psect for function _getMain_All_LightsStatus
 14656  1BDF                     _getMain_All_LightsStatus:	
 14657                           
 14658                           ;Main_B1.c: 374: char status = 0;
 14659                           
 14660                           ;incstack = 0
 14661                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14662  1BDF  0020               	movlb	0	; select bank0
 14663  1BE0  01A0               	clrf	getMain_All_LightsStatus@status
 14664                           
 14665                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14666  1BE1  3000               	movlw	0
 14667  1BE2  0023               	movlb	3	; select bank3
 14668  1BE3  1848               	btfsc	(_DimmerLights1^(0+384)+1),0
 14669  1BE4  3001               	movlw	1
 14670  1BE5  0020               	movlb	0	; select bank0
 14671  1BE6  00A0               	movwf	getMain_All_LightsStatus@status
 14672                           
 14673                           ;Main_B1.c: 420: return status;
 14674  1BE7  0820               	movf	getMain_All_LightsStatus@status,w
 14675  1BE8  0008               	return
 14676  1BE9                     __end_of_getMain_All_LightsStatus:	
 14677                           
 14678                           	psect	text98
 14679  1CE2                     __ptext98:	
 14680 ;; *************** function _getDelayOff_GO *****************
 14681 ;; Defined at:
 14682 ;;		line 114 in file "../src/DelayOff_B1.c"
 14683 ;; Parameters:    Size  Location     Type
 14684 ;;  sw              1    wreg     unsigned char 
 14685 ;; Auto vars:     Size  Location     Type
 14686 ;;  sw              1    2[BANK0 ] unsigned char 
 14687 ;;  go              1    3[BANK0 ] unsigned char 
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  1    wreg      unsigned char 
 14690 ;; Registers used:
 14691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14698 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;Total ram usage:        2 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:    6
 14704 ;; This function calls:
 14705 ;;		_DelayOffPointSelect
 14706 ;; This function is called by:
 14707 ;;		_setDimmerLights_OnOff
 14708 ;; This function uses a non-reentrant model
 14709 ;;
 14710                           
 14711                           
 14712                           ;psect for function _getDelayOff_GO
 14713  1CE2                     _getDelayOff_GO:	
 14714                           
 14715                           ;incstack = 0
 14716                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14717                           ;getDelayOff_GO@sw stored from wreg
 14718  1CE2  0020               	movlb	0	; select bank0
 14719  1CE3  00A2               	movwf	getDelayOff_GO@sw
 14720                           
 14721                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14722  1CE4  0822               	movf	getDelayOff_GO@sw,w
 14723  1CE5  319C  2415         	fcall	_DelayOffPointSelect
 14724                           
 14725                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14726  1CE7  0021               	movlb	1	; select bank1
 14727  1CE8  0849               	movf	_DelayOff^(0+128),w
 14728  1CE9  0086               	movwf	6
 14729  1CEA  3001               	movlw	1	; select bank2/3
 14730  1CEB  0087               	movwf	7
 14731  1CEC  3000               	movlw	0
 14732  1CED  1881               	btfsc	1,1
 14733  1CEE  3001               	movlw	1
 14734  1CEF  0020               	movlb	0	; select bank0
 14735  1CF0  00A3               	movwf	getDelayOff_GO@go
 14736                           
 14737                           ;DelayOff_B1.c: 117: return go;
 14738  1CF1  0823               	movf	getDelayOff_GO@go,w
 14739  1CF2  0008               	return
 14740  1CF3                     __end_of_getDelayOff_GO:	
 14741                           
 14742                           	psect	text99
 14743  1D49                     __ptext99:	
 14744 ;; *************** function _getCmd_Status *****************
 14745 ;; Defined at:
 14746 ;;		line 659 in file "../src/Main_B1.c"
 14747 ;; Parameters:    Size  Location     Type
 14748 ;;  number          1    wreg     unsigned char 
 14749 ;; Auto vars:     Size  Location     Type
 14750 ;;  number          1    0[BANK0 ] unsigned char 
 14751 ;;  cmd             1    1[BANK0 ] unsigned char 
 14752 ;; Return value:  Size  Location     Type
 14753 ;;                  1    wreg      unsigned char 
 14754 ;; Registers used:
 14755 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14756 ;; Tracked objects:
 14757 ;;		On entry : 0/0
 14758 ;;		On exit  : 0/0
 14759 ;;		Unchanged: 0/0
 14760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;Total ram usage:        2 bytes
 14766 ;; Hardware stack levels used:    1
 14767 ;; Hardware stack levels required when called:    5
 14768 ;; This function calls:
 14769 ;;		Nothing
 14770 ;; This function is called by:
 14771 ;;		_setDimmerLights_OnOff
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           
 14776                           ;psect for function _getCmd_Status
 14777  1D49                     _getCmd_Status:	
 14778                           
 14779                           ;incstack = 0
 14780                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14781                           ;getCmd_Status@number stored from wreg
 14782  1D49  0020               	movlb	0	; select bank0
 14783  1D4A  00A0               	movwf	getCmd_Status@number
 14784                           
 14785                           ;Main_B1.c: 660: char cmd = 0;
 14786  1D4B  01A1               	clrf	getCmd_Status@cmd
 14787                           
 14788                           ;Main_B1.c: 661: switch (number) {
 14789  1D4C  2D54               	goto	l9132
 14790  1D4D                     l9128:	
 14791                           ;Main_B1.c: 662: case 1:
 14792                           
 14793                           
 14794                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 14795  1D4D  3000               	movlw	0
 14796  1D4E  0021               	movlb	1	; select bank1
 14797  1D4F  1848               	btfsc	_Cmd^(0+128),0
 14798  1D50  3001               	movlw	1
 14799  1D51  0020               	movlb	0	; select bank0
 14800  1D52  00A1               	movwf	getCmd_Status@cmd
 14801                           
 14802                           ;Main_B1.c: 665: }
 14803                           
 14804                           ;Main_B1.c: 664: break;
 14805  1D53  2D59               	goto	l9134
 14806  1D54                     l9132:	
 14807  1D54  0820               	movf	getCmd_Status@number,w
 14808                           
 14809                           ; Switch size 1, requested type "space"
 14810                           ; Number of cases is 1, Range of values is 1 to 1
 14811                           ; switch strategies available:
 14812                           ; Name         Instructions Cycles
 14813                           ; simple_byte            4     3 (average)
 14814                           ; direct_byte           11     9 (fixed)
 14815                           ; jumptable            263     9 (fixed)
 14816                           ;	Chosen strategy is simple_byte
 14817  1D55  3A01               	xorlw	1	; case 1
 14818  1D56  1903               	skipnz
 14819  1D57  2D4D               	goto	l9128
 14820  1D58  2D59               	goto	l9134
 14821  1D59                     l9134:	
 14822                           
 14823                           ;Main_B1.c: 666: return cmd;
 14824  1D59  0821               	movf	getCmd_Status@cmd,w
 14825  1D5A  0008               	return
 14826  1D5B                     __end_of_getCmd_Status:	
 14827                           
 14828                           	psect	text100
 14829  14FB                     __ptext100:	
 14830 ;; *************** function _setDimmerLights_Dimming *****************
 14831 ;; Defined at:
 14832 ;;		line 948 in file "../src/Dimmer_B1.c"
 14833 ;; Parameters:    Size  Location     Type
 14834 ;;  lights          1    wreg     unsigned char 
 14835 ;;  status          1   74[BANK0 ] unsigned char 
 14836 ;; Auto vars:     Size  Location     Type
 14837 ;;  lights          1   77[BANK0 ] unsigned char 
 14838 ;;  value           1   76[BANK0 ] unsigned char 
 14839 ;; Return value:  Size  Location     Type
 14840 ;;		None               void
 14841 ;; Registers used:
 14842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14843 ;; Tracked objects:
 14844 ;;		On entry : 0/0
 14845 ;;		On exit  : 0/0
 14846 ;;		Unchanged: 0/0
 14847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14848 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14851 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14852 ;;Total ram usage:        4 bytes
 14853 ;; Hardware stack levels used:    1
 14854 ;; Hardware stack levels required when called:    8
 14855 ;; This function calls:
 14856 ;;		_getDimmerIntr_DimmingValue
 14857 ;;		_getDimmerLights_ValueToPercent
 14858 ;;		_setBuz
 14859 ;;		_setDimmerIntr_Dimming_Sw
 14860 ;;		_setDimmerIntr_MaxmumValue
 14861 ;;		_setDimmerLights_Line
 14862 ;;		_setMemory_Modify
 14863 ;;		_setProductData
 14864 ;;		_setRF_DimmerLights
 14865 ;;		_setRF_TransceiveGO
 14866 ;;		_setTxData
 14867 ;; This function is called by:
 14868 ;;		_setDimmerLights_Main
 14869 ;; This function uses a non-reentrant model
 14870 ;;
 14871                           
 14872                           
 14873                           ;psect for function _setDimmerLights_Dimming
 14874  14FB                     _setDimmerLights_Dimming:	
 14875                           
 14876                           ;incstack = 0
 14877                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14878                           ;setDimmerLights_Dimming@lights stored from wreg
 14879  14FB  0020               	movlb	0	; select bank0
 14880  14FC  00ED               	movwf	setDimmerLights_Dimming@lights
 14881                           
 14882                           ;Dimmer_B1.c: 949: if (status == 1) {
 14883  14FD  086A               	movf	setDimmerLights_Dimming@status,w
 14884  14FE  3A01               	xorlw	1
 14885  14FF  1D03               	skipz
 14886  1500  2D14               	goto	l9372
 14887                           
 14888                           ;Dimmer_B1.c: 950: setDimmerIntr_Dimming_Sw(lights, 1);
 14889  1501  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14890  1502  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 14891  1503  086D               	movf	setDimmerLights_Dimming@lights,w
 14892  1504  319E  266E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14893                           
 14894                           ;Dimmer_B1.c: 953: setRF_TransceiveGO(0);
 14895  1507  3000               	movlw	0
 14896  1508  319D  25A4  3194   	fcall	_setRF_TransceiveGO
 14897                           
 14898                           ;Dimmer_B1.c: 955: setBuz(1, 100);
 14899  150B  3064               	movlw	100
 14900  150C  0020               	movlb	0	; select bank0
 14901  150D  00A9               	movwf	setBuz@time
 14902  150E  3000               	movlw	0
 14903  150F  00AA               	movwf	setBuz@time+1
 14904  1510  3001               	movlw	1
 14905  1511  3195  2551         	fcall	_setBuz
 14906                           
 14907                           ;Dimmer_B1.c: 956: } else if (status == 0) {
 14908  1513  0008               	return
 14909  1514                     l9372:	
 14910  1514  0020               	movlb	0	; select bank0
 14911  1515  08EA               	movf	setDimmerLights_Dimming@status,f
 14912  1516  1D03               	skipz
 14913  1517  0008               	return
 14914                           
 14915                           ;Dimmer_B1.c: 957: setDimmerIntr_Dimming_Sw(lights, 0);
 14916  1518  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14917  1519  086D               	movf	setDimmerLights_Dimming@lights,w
 14918  151A  319E  266E  3194   	fcall	_setDimmerIntr_Dimming_Sw
 14919                           
 14920                           ;Dimmer_B1.c: 960: Dimmer.Load_Status = 0;
 14921  151D  0022               	movlb	2	; select bank2
 14922  151E  112C               	bcf	_Dimmer^(0+256),2
 14923                           
 14924                           ;Dimmer_B1.c: 961: setDimmerLights_Line(lights);
 14925  151F  0020               	movlb	0	; select bank0
 14926  1520  086D               	movf	setDimmerLights_Dimming@lights,w
 14927  1521  319D  2537  3194   	fcall	_setDimmerLights_Line
 14928                           
 14929                           ;Dimmer_B1.c: 963: char value = getDimmerIntr_DimmingValue(lights);
 14930  1524  0020               	movlb	0	; select bank0
 14931  1525  086D               	movf	setDimmerLights_Dimming@lights,w
 14932  1526  319C  24B2  3194   	fcall	_getDimmerIntr_DimmingValue
 14933  1529  0020               	movlb	0	; select bank0
 14934  152A  00EB               	movwf	??_setDimmerLights_Dimming
 14935  152B  086B               	movf	??_setDimmerLights_Dimming,w
 14936  152C  00EC               	movwf	setDimmerLights_Dimming@value
 14937                           
 14938                           ;Dimmer_B1.c: 964: setDimmerIntr_MaxmumValue(lights, value);
 14939  152D  086C               	movf	setDimmerLights_Dimming@value,w
 14940  152E  00EB               	movwf	??_setDimmerLights_Dimming
 14941  152F  086B               	movf	??_setDimmerLights_Dimming,w
 14942  1530  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14943  1531  086D               	movf	setDimmerLights_Dimming@lights,w
 14944  1532  319C  2439  3194   	fcall	_setDimmerIntr_MaxmumValue
 14945                           
 14946                           ;Dimmer_B1.c: 965: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 14947  1535  0020               	movlb	0	; select bank0
 14948  1536  086C               	movf	setDimmerLights_Dimming@value,w
 14949  1537  3196  26CB  3194   	fcall	_getDimmerLights_ValueToPercent
 14950  153A  0020               	movlb	0	; select bank0
 14951  153B  00EB               	movwf	??_setDimmerLights_Dimming
 14952  153C  086B               	movf	??_setDimmerLights_Dimming,w
 14953  153D  00E2               	movwf	setProductData@value
 14954  153E  086D               	movf	setDimmerLights_Dimming@lights,w
 14955  153F  3E14               	addlw	20
 14956  1540  319C  242D  3194   	fcall	_setProductData
 14957                           
 14958                           ;Dimmer_B1.c: 972: setMemory_Modify(1);
 14959  1543  3001               	movlw	1
 14960  1544  319D  2591  3194   	fcall	_setMemory_Modify
 14961                           
 14962                           ;Dimmer_B1.c: 976: setRF_DimmerLights(lights, 1);
 14963  1547  0020               	movlb	0	; select bank0
 14964  1548  01E5               	clrf	setRF_DimmerLights@on
 14965  1549  0AE5               	incf	setRF_DimmerLights@on,f
 14966  154A  086D               	movf	setDimmerLights_Dimming@lights,w
 14967  154B  3197  2730  3194   	fcall	_setRF_DimmerLights
 14968                           
 14969                           ;Dimmer_B1.c: 977: setTxData();
 14970  154E  318F  2745         	fcall	_setTxData
 14971  1550  0008               	return
 14972  1551                     __end_of_setDimmerLights_Dimming:	
 14973                           
 14974                           	psect	text101
 14975  0F45                     __ptext101:	
 14976 ;; *************** function _setTxData *****************
 14977 ;; Defined at:
 14978 ;;		line 183 in file "../src/RF_Control_B1.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;		None
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;  i               1    0        unsigned char 
 14983 ;; Return value:  Size  Location     Type
 14984 ;;		None               void
 14985 ;; Registers used:
 14986 ;;		wreg, fsr1l, fsr1h, status,2
 14987 ;; Tracked objects:
 14988 ;;		On entry : 0/0
 14989 ;;		On exit  : 0/0
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;Total ram usage:        1 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; Hardware stack levels required when called:    5
 14999 ;; This function calls:
 15000 ;;		Nothing
 15001 ;; This function is called by:
 15002 ;;		_setDimmerLights_OnOff
 15003 ;;		_setDimmerLights_Dimming
 15004 ;;		_getRxData
 15005 ;;		_setControl_Lights_Table
 15006 ;;		_setRFSW_Control
 15007 ;;		_setRFSW_AdjControl
 15008 ;; This function uses a non-reentrant model
 15009 ;;
 15010                           
 15011                           
 15012                           ;psect for function _setTxData
 15013  0F45                     _setTxData:	
 15014                           
 15015                           ;RF_Control_B1.c: 184: char i;
 15016                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15017                           
 15018                           ;incstack = 0
 15019                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15020  0F45  0021               	movlb	1	; select bank1
 15021  0F46  1C20               	btfss	_RF1^(0+128),0
 15022  0F47  0008               	return
 15023                           
 15024                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15025  0F48  1520               	bsf	_RF1^(0+128),2
 15026                           
 15027                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15028  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15029  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15030                           
 15031                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15032  0F4B  3063               	movlw	99
 15033  0F4C  0020               	movlb	0	; select bank0
 15034  0F4D  00A0               	movwf	??_setTxData
 15035  0F4E  0820               	movf	??_setTxData,w
 15036  0F4F  0023               	movlb	3	; select bank3
 15037  0F50  00A0               	movwf	_RF_Data^(0+384)
 15038                           
 15039                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15040  0F51  3002               	movlw	2
 15041  0F52  0020               	movlb	0	; select bank0
 15042  0F53  00A0               	movwf	??_setTxData
 15043  0F54  0820               	movf	??_setTxData,w
 15044  0F55  0023               	movlb	3	; select bank3
 15045  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15046                           
 15047                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15048  0F57  0021               	movlb	1	; select bank1
 15049  0F58  0863               	movf	_product^(0+128),w
 15050  0F59  0086               	movwf	6
 15051  0F5A  3002               	movlw	2	; select bank4/5
 15052  0F5B  0087               	movwf	7
 15053  0F5C  3002               	movlw	2	; select bank4/5
 15054  0F5D  3F42               	moviw [2]fsr1
 15055  0F5E  0023               	movlb	3	; select bank3
 15056  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15057                           
 15058                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15059  0F60  0021               	movlb	1	; select bank1
 15060  0F61  0863               	movf	_product^(0+128),w
 15061  0F62  0086               	movwf	6
 15062  0F63  3002               	movlw	2	; select bank4/5
 15063  0F64  0087               	movwf	7
 15064  0F65  3002               	movlw	2	; select bank4/5
 15065  0F66  3F43               	moviw [3]fsr1
 15066  0F67  0023               	movlb	3	; select bank3
 15067  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15068                           
 15069                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15070  0F69  0021               	movlb	1	; select bank1
 15071  0F6A  0863               	movf	_product^(0+128),w
 15072  0F6B  0086               	movwf	6
 15073  0F6C  3002               	movlw	2	; select bank4/5
 15074  0F6D  0087               	movwf	7
 15075  0F6E  3002               	movlw	2	; select bank4/5
 15076  0F6F  3F44               	moviw [4]fsr1
 15077  0F70  0023               	movlb	3	; select bank3
 15078  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15079                           
 15080                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15081  0F72  0021               	movlb	1	; select bank1
 15082  0F73  0863               	movf	_product^(0+128),w
 15083  0F74  0086               	movwf	6
 15084  0F75  3002               	movlw	2	; select bank4/5
 15085  0F76  0087               	movwf	7
 15086  0F77  3002               	movlw	2	; select bank4/5
 15087  0F78  3F45               	moviw [5]fsr1
 15088  0F79  0023               	movlb	3	; select bank3
 15089  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15090                           
 15091                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15092  0F7B  0021               	movlb	1	; select bank1
 15093  0F7C  0863               	movf	_product^(0+128),w
 15094  0F7D  0086               	movwf	6
 15095  0F7E  3002               	movlw	2	; select bank4/5
 15096  0F7F  0087               	movwf	7
 15097  0F80  3002               	movlw	2	; select bank4/5
 15098  0F81  3F46               	moviw [6]fsr1
 15099  0F82  0023               	movlb	3	; select bank3
 15100  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15101                           
 15102                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15103  0F84  0021               	movlb	1	; select bank1
 15104  0F85  0863               	movf	_product^(0+128),w
 15105  0F86  0086               	movwf	6
 15106  0F87  3002               	movlw	2	; select bank4/5
 15107  0F88  0087               	movwf	7
 15108  0F89  3002               	movlw	2	; select bank4/5
 15109  0F8A  3F47               	moviw [7]fsr1
 15110  0F8B  0023               	movlb	3	; select bank3
 15111  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15112                           
 15113                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15114  0F8D  0021               	movlb	1	; select bank1
 15115  0F8E  0863               	movf	_product^(0+128),w
 15116  0F8F  0086               	movwf	6
 15117  0F90  3002               	movlw	2	; select bank4/5
 15118  0F91  0087               	movwf	7
 15119  0F92  3002               	movlw	2	; select bank4/5
 15120  0F93  3F48               	moviw [8]fsr1
 15121  0F94  0023               	movlb	3	; select bank3
 15122  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15123                           
 15124                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15125  0F96  0021               	movlb	1	; select bank1
 15126  0F97  0863               	movf	_product^(0+128),w
 15127  0F98  0086               	movwf	6
 15128  0F99  3002               	movlw	2	; select bank4/5
 15129  0F9A  0087               	movwf	7
 15130  0F9B  3002               	movlw	2	; select bank4/5
 15131  0F9C  3F49               	moviw [9]fsr1
 15132  0F9D  0023               	movlb	3	; select bank3
 15133  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15134                           
 15135                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15136  0F9F  0021               	movlb	1	; select bank1
 15137  0FA0  0863               	movf	_product^(0+128),w
 15138  0FA1  0086               	movwf	6
 15139  0FA2  3002               	movlw	2	; select bank4/5
 15140  0FA3  0087               	movwf	7
 15141  0FA4  3002               	movlw	2	; select bank4/5
 15142  0FA5  3F4A               	moviw [10]fsr1
 15143  0FA6  0023               	movlb	3	; select bank3
 15144  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15145                           
 15146                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15147  0FA8  0021               	movlb	1	; select bank1
 15148  0FA9  0863               	movf	_product^(0+128),w
 15149  0FAA  0086               	movwf	6
 15150  0FAB  3002               	movlw	2	; select bank4/5
 15151  0FAC  0087               	movwf	7
 15152  0FAD  3002               	movlw	2	; select bank4/5
 15153  0FAE  3F4B               	moviw [11]fsr1
 15154  0FAF  0023               	movlb	3	; select bank3
 15155  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15156                           
 15157                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15158  0FB1  0021               	movlb	1	; select bank1
 15159  0FB2  0863               	movf	_product^(0+128),w
 15160  0FB3  0086               	movwf	6
 15161  0FB4  3002               	movlw	2	; select bank4/5
 15162  0FB5  0087               	movwf	7
 15163  0FB6  3002               	movlw	2	; select bank4/5
 15164  0FB7  3F4C               	moviw [12]fsr1
 15165  0FB8  0023               	movlb	3	; select bank3
 15166  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15167                           
 15168                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15169  0FBA  0021               	movlb	1	; select bank1
 15170  0FBB  0863               	movf	_product^(0+128),w
 15171  0FBC  0086               	movwf	6
 15172  0FBD  3002               	movlw	2	; select bank4/5
 15173  0FBE  0087               	movwf	7
 15174  0FBF  3002               	movlw	2	; select bank4/5
 15175  0FC0  3F4D               	moviw [13]fsr1
 15176  0FC1  0023               	movlb	3	; select bank3
 15177  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15178                           
 15179                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15180  0FC3  0021               	movlb	1	; select bank1
 15181  0FC4  0863               	movf	_product^(0+128),w
 15182  0FC5  0086               	movwf	6
 15183  0FC6  3002               	movlw	2	; select bank4/5
 15184  0FC7  0087               	movwf	7
 15185  0FC8  3002               	movlw	2	; select bank4/5
 15186  0FC9  3F4E               	moviw [14]fsr1
 15187  0FCA  0023               	movlb	3	; select bank3
 15188  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15189                           
 15190                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15191  0FCC  0021               	movlb	1	; select bank1
 15192  0FCD  0863               	movf	_product^(0+128),w
 15193  0FCE  0086               	movwf	6
 15194  0FCF  3002               	movlw	2	; select bank4/5
 15195  0FD0  0087               	movwf	7
 15196  0FD1  3002               	movlw	2	; select bank4/5
 15197  0FD2  3F4F               	moviw [15]fsr1
 15198  0FD3  0023               	movlb	3	; select bank3
 15199  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15200                           
 15201                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15202  0FD5  0021               	movlb	1	; select bank1
 15203  0FD6  0863               	movf	_product^(0+128),w
 15204  0FD7  0086               	movwf	6
 15205  0FD8  3002               	movlw	2	; select bank4/5
 15206  0FD9  0087               	movwf	7
 15207  0FDA  3002               	movlw	2	; select bank4/5
 15208  0FDB  3F50               	moviw [16]fsr1
 15209  0FDC  0023               	movlb	3	; select bank3
 15210  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15211                           
 15212                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15213  0FDE  0021               	movlb	1	; select bank1
 15214  0FDF  0863               	movf	_product^(0+128),w
 15215  0FE0  0086               	movwf	6
 15216  0FE1  3002               	movlw	2	; select bank4/5
 15217  0FE2  0087               	movwf	7
 15218  0FE3  3002               	movlw	2	; select bank4/5
 15219  0FE4  3F51               	moviw [17]fsr1
 15220  0FE5  0023               	movlb	3	; select bank3
 15221  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15222                           
 15223                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15224  0FE7  0021               	movlb	1	; select bank1
 15225  0FE8  0863               	movf	_product^(0+128),w
 15226  0FE9  0086               	movwf	6
 15227  0FEA  3002               	movlw	2	; select bank4/5
 15228  0FEB  0087               	movwf	7
 15229  0FEC  3002               	movlw	2	; select bank4/5
 15230  0FED  3F52               	moviw [18]fsr1
 15231  0FEE  0023               	movlb	3	; select bank3
 15232  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15233                           
 15234                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15235  0FF0  0021               	movlb	1	; select bank1
 15236  0FF1  0863               	movf	_product^(0+128),w
 15237  0FF2  0086               	movwf	6
 15238  0FF3  3002               	movlw	2	; select bank4/5
 15239  0FF4  0087               	movwf	7
 15240  0FF5  3002               	movlw	2	; select bank4/5
 15241  0FF6  3F53               	moviw [19]fsr1
 15242  0FF7  0023               	movlb	3	; select bank3
 15243  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15244                           
 15245                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15246  0FF9  30D1               	movlw	209
 15247  0FFA  0020               	movlb	0	; select bank0
 15248  0FFB  00A0               	movwf	??_setTxData
 15249  0FFC  0820               	movf	??_setTxData,w
 15250  0FFD  0023               	movlb	3	; select bank3
 15251  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15252  0FFF  0008               	return
 15253  1000                     __end_of_setTxData:	
 15254                           
 15255                           	psect	text102
 15256  1DA4                     __ptext102:	
 15257 ;; *************** function _setRF_TransceiveGO *****************
 15258 ;; Defined at:
 15259 ;;		line 470 in file "../src/RF_Control_B1.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;  command         1    wreg     unsigned char 
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;  command         1    1[BANK0 ] unsigned char 
 15264 ;; Return value:  Size  Location     Type
 15265 ;;		None               void
 15266 ;; Registers used:
 15267 ;;		wreg, status,2, status,0
 15268 ;; Tracked objects:
 15269 ;;		On entry : 0/0
 15270 ;;		On exit  : 0/0
 15271 ;;		Unchanged: 0/0
 15272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;Total ram usage:        2 bytes
 15278 ;; Hardware stack levels used:    1
 15279 ;; Hardware stack levels required when called:    5
 15280 ;; This function calls:
 15281 ;;		Nothing
 15282 ;; This function is called by:
 15283 ;;		_setDimmerLights_Dimming
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287                           
 15288                           ;psect for function _setRF_TransceiveGO
 15289  1DA4                     _setRF_TransceiveGO:	
 15290                           
 15291                           ;incstack = 0
 15292                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15293                           ;setRF_TransceiveGO@command stored from wreg
 15294  1DA4  0020               	movlb	0	; select bank0
 15295  1DA5  00A1               	movwf	setRF_TransceiveGO@command
 15296                           
 15297                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15298  1DA6  0821               	movf	setRF_TransceiveGO@command,w
 15299  1DA7  3A01               	xorlw	1
 15300  1DA8  3000               	movlw	0
 15301  1DA9  1903               	skipnz
 15302  1DAA  3001               	movlw	1
 15303  1DAB  00A0               	movwf	??_setRF_TransceiveGO
 15304  1DAC  0DA0               	rlf	??_setRF_TransceiveGO,f
 15305  1DAD  0DA0               	rlf	??_setRF_TransceiveGO,f
 15306  1DAE  0021               	movlb	1	; select bank1
 15307  1DAF  0820               	movf	_RF1^(0+128),w
 15308  1DB0  0020               	movlb	0	; select bank0
 15309  1DB1  0620               	xorwf	??_setRF_TransceiveGO,w
 15310  1DB2  39FB               	andlw	-5
 15311  1DB3  0620               	xorwf	??_setRF_TransceiveGO,w
 15312  1DB4  0021               	movlb	1	; select bank1
 15313  1DB5  00A0               	movwf	_RF1^(0+128)
 15314  1DB6  0008               	return
 15315  1DB7                     __end_of_setRF_TransceiveGO:	
 15316                           
 15317                           	psect	text103
 15318  1730                     __ptext103:	
 15319 ;; *************** function _setRF_DimmerLights *****************
 15320 ;; Defined at:
 15321 ;;		line 455 in file "../src/RF_Control_B1.c"
 15322 ;; Parameters:    Size  Location     Type
 15323 ;;  lights          1    wreg     unsigned char 
 15324 ;;  on              1   69[BANK0 ] unsigned char 
 15325 ;; Auto vars:     Size  Location     Type
 15326 ;;  lights          1   73[BANK0 ] unsigned char 
 15327 ;;  status          1   72[BANK0 ] unsigned char 
 15328 ;; Return value:  Size  Location     Type
 15329 ;;		None               void
 15330 ;; Registers used:
 15331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15332 ;; Tracked objects:
 15333 ;;		On entry : 0/0
 15334 ;;		On exit  : 0/0
 15335 ;;		Unchanged: 0/0
 15336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15337 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;Total ram usage:        5 bytes
 15342 ;; Hardware stack levels used:    1
 15343 ;; Hardware stack levels required when called:    6
 15344 ;; This function calls:
 15345 ;;		_setProductData
 15346 ;; This function is called by:
 15347 ;;		_setDimmerLights_OnOff
 15348 ;;		_setDimmerLights_Dimming
 15349 ;;		_setRFSW_Control
 15350 ;; This function uses a non-reentrant model
 15351 ;;
 15352                           
 15353                           
 15354                           ;psect for function _setRF_DimmerLights
 15355  1730                     _setRF_DimmerLights:	
 15356                           
 15357                           ;incstack = 0
 15358                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15359                           ;setRF_DimmerLights@lights stored from wreg
 15360  1730  0020               	movlb	0	; select bank0
 15361  1731  00E9               	movwf	setRF_DimmerLights@lights
 15362                           
 15363                           ;RF_Control_B1.c: 456: char status = 1;
 15364  1732  01E8               	clrf	setRF_DimmerLights@status
 15365  1733  0AE8               	incf	setRF_DimmerLights@status,f
 15366                           
 15367                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15368  1734  0869               	movf	setRF_DimmerLights@lights,w
 15369  1735  3EFF               	addlw	-1
 15370  1736  0A89               	incf	9,f
 15371  1737  2F3A               	goto	u9620
 15372  1738                     u9625:	
 15373  1738  1003               	clrc
 15374  1739  0DE8               	rlf	setRF_DimmerLights@status,f
 15375  173A                     u9620:	
 15376  173A  3EFF               	addlw	-1
 15377  173B  1D03               	skipz
 15378  173C  2F38               	goto	u9625
 15379                           
 15380                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15381  173D  0869               	movf	setRF_DimmerLights@lights,w
 15382  173E  00E6               	movwf	??_setRF_DimmerLights
 15383  173F  0866               	movf	??_setRF_DimmerLights,w
 15384  1740  00E2               	movwf	setProductData@value
 15385  1741  300B               	movlw	11
 15386  1742  319C  242D  3197   	fcall	_setProductData
 15387                           
 15388                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15389  1745  0020               	movlb	0	; select bank0
 15390  1746  0869               	movf	setRF_DimmerLights@lights,w
 15391  1747  3E1A               	addlw	26
 15392  1748  0021               	movlb	1	; select bank1
 15393  1749  0763               	addwf	_product^(0+128),w
 15394  174A  0020               	movlb	0	; select bank0
 15395  174B  00E6               	movwf	??_setRF_DimmerLights
 15396  174C  0866               	movf	??_setRF_DimmerLights,w
 15397  174D  0086               	movwf	6
 15398  174E  3002               	movlw	2	; select bank4/5
 15399  174F  0087               	movwf	7
 15400  1750  0801               	movf	1,w
 15401  1751  00E7               	movwf	??_setRF_DimmerLights+1
 15402  1752  0867               	movf	??_setRF_DimmerLights+1,w
 15403  1753  00E2               	movwf	setProductData@value
 15404  1754  3011               	movlw	17
 15405  1755  319C  242D  3197   	fcall	_setProductData
 15406                           
 15407                           ;RF_Control_B1.c: 460: if (on == 1) {
 15408  1758  0020               	movlb	0	; select bank0
 15409  1759  0865               	movf	setRF_DimmerLights@on,w
 15410  175A  3A01               	xorlw	1
 15411  175B  1D03               	skipz
 15412  175C  2F7F               	goto	l8764
 15413                           
 15414                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15415  175D  0869               	movf	setRF_DimmerLights@lights,w
 15416  175E  3E14               	addlw	20
 15417  175F  0021               	movlb	1	; select bank1
 15418  1760  0763               	addwf	_product^(0+128),w
 15419  1761  0020               	movlb	0	; select bank0
 15420  1762  00E6               	movwf	??_setRF_DimmerLights
 15421  1763  0866               	movf	??_setRF_DimmerLights,w
 15422  1764  0086               	movwf	6
 15423  1765  3002               	movlw	2	; select bank4/5
 15424  1766  0087               	movwf	7
 15425  1767  0801               	movf	1,w
 15426  1768  00E7               	movwf	??_setRF_DimmerLights+1
 15427  1769  0867               	movf	??_setRF_DimmerLights+1,w
 15428  176A  00E2               	movwf	setProductData@value
 15429  176B  3009               	movlw	9
 15430  176C  319C  242D  3197   	fcall	_setProductData
 15431                           
 15432                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15433  176F  0021               	movlb	1	; select bank1
 15434  1770  0863               	movf	_product^(0+128),w
 15435  1771  3E0F               	addlw	15
 15436  1772  0086               	movwf	6
 15437  1773  3002               	movlw	2	; select bank4/5
 15438  1774  0087               	movwf	7
 15439  1775  0801               	movf	1,w
 15440  1776  0020               	movlb	0	; select bank0
 15441  1777  0468               	iorwf	setRF_DimmerLights@status,w
 15442  1778  00E6               	movwf	??_setRF_DimmerLights
 15443  1779  0866               	movf	??_setRF_DimmerLights,w
 15444  177A  00E2               	movwf	setProductData@value
 15445  177B  300F               	movlw	15
 15446  177C  319C  242D         	fcall	_setProductData
 15447                           
 15448                           ;RF_Control_B1.c: 463: } else {
 15449  177E  0008               	return
 15450  177F                     l8764:	
 15451                           
 15452                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15453  177F  0020               	movlb	0	; select bank0
 15454  1780  01E2               	clrf	setProductData@value
 15455  1781  3009               	movlw	9
 15456  1782  319C  242D  3197   	fcall	_setProductData
 15457                           
 15458                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15459  1785  0021               	movlb	1	; select bank1
 15460  1786  0863               	movf	_product^(0+128),w
 15461  1787  3E0F               	addlw	15
 15462  1788  0086               	movwf	6
 15463  1789  3002               	movlw	2	; select bank4/5
 15464  178A  0087               	movwf	7
 15465  178B  0020               	movlb	0	; select bank0
 15466  178C  0968               	comf	setRF_DimmerLights@status,w
 15467  178D  0501               	andwf	1,w
 15468  178E  00E6               	movwf	??_setRF_DimmerLights
 15469  178F  0866               	movf	??_setRF_DimmerLights,w
 15470  1790  00E2               	movwf	setProductData@value
 15471  1791  300F               	movlw	15
 15472  1792  319C  242D         	fcall	_setProductData
 15473  1794  0008               	return
 15474  1795                     __end_of_setRF_DimmerLights:	
 15475                           
 15476                           	psect	text104
 15477  1D37                     __ptext104:	
 15478 ;; *************** function _setDimmerLights_Line *****************
 15479 ;; Defined at:
 15480 ;;		line 1022 in file "../src/Dimmer_B1.c"
 15481 ;; Parameters:    Size  Location     Type
 15482 ;;  lights          1    wreg     unsigned char 
 15483 ;; Auto vars:     Size  Location     Type
 15484 ;;  lights          1    0[BANK0 ] unsigned char 
 15485 ;; Return value:  Size  Location     Type
 15486 ;;		None               void
 15487 ;; Registers used:
 15488 ;;		wreg
 15489 ;; Tracked objects:
 15490 ;;		On entry : 0/0
 15491 ;;		On exit  : 0/0
 15492 ;;		Unchanged: 0/0
 15493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15498 ;;Total ram usage:        1 bytes
 15499 ;; Hardware stack levels used:    1
 15500 ;; Hardware stack levels required when called:    5
 15501 ;; This function calls:
 15502 ;;		Nothing
 15503 ;; This function is called by:
 15504 ;;		_setDimmerLights_OnOff
 15505 ;;		_setDimmerLights_Dimming
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           
 15510                           ;psect for function _setDimmerLights_Line
 15511  1D37                     _setDimmerLights_Line:	
 15512                           
 15513                           ;incstack = 0
 15514                           ; Regs used in _setDimmerLights_Line: [wreg]
 15515                           ;setDimmerLights_Line@lights stored from wreg
 15516  1D37  0020               	movlb	0	; select bank0
 15517  1D38  00A0               	movwf	setDimmerLights_Line@lights
 15518                           
 15519                           ;Dimmer_B1.c: 1023: Dimmer.LoadGO = 1;
 15520  1D39  0022               	movlb	2	; select bank2
 15521  1D3A  14AC               	bsf	_Dimmer^(0+256),1
 15522                           
 15523                           ;Dimmer_B1.c: 1025: DimmerLights1.Line = 0;
 15524  1D3B  0023               	movlb	3	; select bank3
 15525  1D3C  10C8               	bcf	(_DimmerLights1^(0+384)+1),1
 15526                           
 15527                           ;Dimmer_B1.c: 1026: if (lights == 1 && lights != 0) {
 15528  1D3D  0020               	movlb	0	; select bank0
 15529  1D3E  0820               	movf	setDimmerLights_Line@lights,w
 15530  1D3F  3A01               	xorlw	1
 15531  1D40  1D03               	skipz
 15532  1D41  0008               	return
 15533  1D42  0820               	movf	setDimmerLights_Line@lights,w
 15534  1D43  1903               	btfsc	3,2
 15535  1D44  0008               	return
 15536                           
 15537                           ;Dimmer_B1.c: 1027: DimmerLights1.Line = 1;
 15538  1D45  0023               	movlb	3	; select bank3
 15539  1D46  14C8               	bsf	(_DimmerLights1^(0+384)+1),1
 15540  1D47  0020               	movlb	0	; select bank0
 15541  1D48  0008               	return
 15542  1D49                     __end_of_setDimmerLights_Line:	
 15543                           
 15544                           	psect	text105
 15545  1C39                     __ptext105:	
 15546 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15547 ;; Defined at:
 15548 ;;		line 127 in file "../src/Dimmer_B1.c"
 15549 ;; Parameters:    Size  Location     Type
 15550 ;;  lights          1    wreg     unsigned char 
 15551 ;;  value           1   66[BANK0 ] unsigned char 
 15552 ;; Auto vars:     Size  Location     Type
 15553 ;;  lights          1   68[BANK0 ] unsigned char 
 15554 ;; Return value:  Size  Location     Type
 15555 ;;		None               void
 15556 ;; Registers used:
 15557 ;;		wreg
 15558 ;; Tracked objects:
 15559 ;;		On entry : 0/0
 15560 ;;		On exit  : 0/0
 15561 ;;		Unchanged: 0/0
 15562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15563 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15564 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15566 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15567 ;;Total ram usage:        3 bytes
 15568 ;; Hardware stack levels used:    1
 15569 ;; Hardware stack levels required when called:    5
 15570 ;; This function calls:
 15571 ;;		Nothing
 15572 ;; This function is called by:
 15573 ;;		_setDimmerLights_OnOff
 15574 ;;		_setDimmerLights_Dimming
 15575 ;;		_setRFSW_AdjControl
 15576 ;; This function uses a non-reentrant model
 15577 ;;
 15578                           
 15579                           
 15580                           ;psect for function _setDimmerIntr_MaxmumValue
 15581  1C39                     _setDimmerIntr_MaxmumValue:	
 15582                           
 15583                           ;incstack = 0
 15584                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15585                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15586  1C39  0020               	movlb	0	; select bank0
 15587  1C3A  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 15588                           
 15589                           ;Dimmer_B1.c: 129: if (lights == 1) {
 15590  1C3B  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 15591  1C3C  3A01               	xorlw	1
 15592  1C3D  1D03               	skipz
 15593  1C3E  0008               	return
 15594                           
 15595                           ;Dimmer_B1.c: 130: DimmerIntr1.MaxmumValue = value;
 15596  1C3F  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 15597  1C40  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 15598  1C41  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 15599  1C42  0021               	movlb	1	; select bank1
 15600  1C43  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 15601  1C44  0008               	return
 15602  1C45                     __end_of_setDimmerIntr_MaxmumValue:	
 15603                           
 15604                           	psect	text106
 15605  1E6E                     __ptext106:	
 15606 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15607 ;; Defined at:
 15608 ;;		line 204 in file "../src/Dimmer_B1.c"
 15609 ;; Parameters:    Size  Location     Type
 15610 ;;  lights          1    wreg     unsigned char 
 15611 ;;  command         1    0[BANK0 ] unsigned char 
 15612 ;; Auto vars:     Size  Location     Type
 15613 ;;  lights          1    2[BANK0 ] unsigned char 
 15614 ;; Return value:  Size  Location     Type
 15615 ;;		None               void
 15616 ;; Registers used:
 15617 ;;		wreg, status,2, status,0
 15618 ;; Tracked objects:
 15619 ;;		On entry : 0/0
 15620 ;;		On exit  : 0/0
 15621 ;;		Unchanged: 0/0
 15622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15623 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15625 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15626 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;Total ram usage:        3 bytes
 15628 ;; Hardware stack levels used:    1
 15629 ;; Hardware stack levels required when called:    5
 15630 ;; This function calls:
 15631 ;;		Nothing
 15632 ;; This function is called by:
 15633 ;;		_setDimmerLights_Dimming
 15634 ;; This function uses a non-reentrant model
 15635 ;;
 15636                           
 15637                           
 15638                           ;psect for function _setDimmerIntr_Dimming_Sw
 15639  1E6E                     _setDimmerIntr_Dimming_Sw:	
 15640                           
 15641                           ;incstack = 0
 15642                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15643                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15644  1E6E  0020               	movlb	0	; select bank0
 15645  1E6F  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 15646                           
 15647                           ;Dimmer_B1.c: 206: if (lights == 1) {
 15648  1E70  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15649  1E71  3A01               	xorlw	1
 15650  1E72  1D03               	skipz
 15651  1E73  0008               	return
 15652                           
 15653                           ;Dimmer_B1.c: 207: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15654  1E74  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 15655  1E75  3A01               	xorlw	1
 15656  1E76  3000               	movlw	0
 15657  1E77  1903               	skipnz
 15658  1E78  3001               	movlw	1
 15659  1E79  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 15660  1E7A  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15661  1E7B  0021               	movlb	1	; select bank1
 15662  1E7C  083B               	movf	_DimmerIntr1^(0+128),w
 15663  1E7D  0020               	movlb	0	; select bank0
 15664  1E7E  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15665  1E7F  39EF               	andlw	-17
 15666  1E80  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15667  1E81  0021               	movlb	1	; select bank1
 15668  1E82  00BB               	movwf	_DimmerIntr1^(0+128)
 15669  1E83  0008               	return
 15670  1E84                     __end_of_setDimmerIntr_Dimming_Sw:	
 15671                           
 15672                           	psect	text107
 15673  1CB2                     __ptext107:	
 15674 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15675 ;; Defined at:
 15676 ;;		line 105 in file "../src/Dimmer_B1.c"
 15677 ;; Parameters:    Size  Location     Type
 15678 ;;  lights          1    wreg     unsigned char 
 15679 ;; Auto vars:     Size  Location     Type
 15680 ;;  lights          1    1[BANK0 ] unsigned char 
 15681 ;;  value           1    2[BANK0 ] unsigned char 
 15682 ;; Return value:  Size  Location     Type
 15683 ;;                  1    wreg      unsigned char 
 15684 ;; Registers used:
 15685 ;;		wreg, status,2
 15686 ;; Tracked objects:
 15687 ;;		On entry : 0/0
 15688 ;;		On exit  : 0/0
 15689 ;;		Unchanged: 0/0
 15690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;Total ram usage:        3 bytes
 15696 ;; Hardware stack levels used:    1
 15697 ;; Hardware stack levels required when called:    5
 15698 ;; This function calls:
 15699 ;;		Nothing
 15700 ;; This function is called by:
 15701 ;;		_setDimmerLights_Dimming
 15702 ;; This function uses a non-reentrant model
 15703 ;;
 15704                           
 15705                           
 15706                           ;psect for function _getDimmerIntr_DimmingValue
 15707  1CB2                     _getDimmerIntr_DimmingValue:	
 15708                           
 15709                           ;incstack = 0
 15710                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15711                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15712  1CB2  0020               	movlb	0	; select bank0
 15713  1CB3  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 15714                           
 15715                           ;Dimmer_B1.c: 106: char value = 0;
 15716  1CB4  01A2               	clrf	getDimmerIntr_DimmingValue@value
 15717                           
 15718                           ;Dimmer_B1.c: 108: if (lights == 1) {
 15719  1CB5  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 15720  1CB6  3A01               	xorlw	1
 15721  1CB7  1D03               	skipz
 15722  1CB8  2CBF               	goto	l688
 15723                           
 15724                           ;Dimmer_B1.c: 109: value = DimmerIntr1.DimmingValue;
 15725  1CB9  0021               	movlb	1	; select bank1
 15726  1CBA  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 15727  1CBB  0020               	movlb	0	; select bank0
 15728  1CBC  00A0               	movwf	??_getDimmerIntr_DimmingValue
 15729  1CBD  0820               	movf	??_getDimmerIntr_DimmingValue,w
 15730  1CBE  00A2               	movwf	getDimmerIntr_DimmingValue@value
 15731  1CBF                     l688:	
 15732                           
 15733                           ;Dimmer_B1.c: 110: }
 15734                           ;Dimmer_B1.c: 122: return value;
 15735  1CBF  0822               	movf	getDimmerIntr_DimmingValue@value,w
 15736  1CC0  0008               	return
 15737  1CC1                     __end_of_getDimmerIntr_DimmingValue:	
 15738                           
 15739                           	psect	text108
 15740  1E58                     __ptext108:	
 15741 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15742 ;; Defined at:
 15743 ;;		line 983 in file "../src/Dimmer_B1.c"
 15744 ;; Parameters:    Size  Location     Type
 15745 ;;  lights          1    wreg     unsigned char 
 15746 ;; Auto vars:     Size  Location     Type
 15747 ;;  lights          1    0[COMMON] unsigned char 
 15748 ;;  allow           1    2[BANK0 ] unsigned char 
 15749 ;; Return value:  Size  Location     Type
 15750 ;;                  1    wreg      unsigned char 
 15751 ;; Registers used:
 15752 ;;		wreg, status,2, pclath, cstack
 15753 ;; Tracked objects:
 15754 ;;		On entry : 0/0
 15755 ;;		On exit  : 0/0
 15756 ;;		Unchanged: 0/0
 15757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;Total ram usage:        3 bytes
 15763 ;; Hardware stack levels used:    1
 15764 ;; Hardware stack levels required when called:    6
 15765 ;; This function calls:
 15766 ;;		_getLoad_OK
 15767 ;; This function is called by:
 15768 ;;		_setDimmerLights_Main
 15769 ;; This function uses a non-reentrant model
 15770 ;;
 15771                           
 15772                           
 15773                           ;psect for function _getDimmerLights_Allow_Condition
 15774  1E58                     _getDimmerLights_Allow_Condition:	
 15775                           
 15776                           ;Dimmer_B1.c: 984: char allow = 0;
 15777                           
 15778                           ;incstack = 0
 15779                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 15780  1E58  0020               	movlb	0	; select bank0
 15781  1E59  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 15782                           
 15783                           ;Dimmer_B1.c: 990: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15784  1E5A  01A3               	clrf	_getDimmerLights_Allow_Condition$2255
 15785  1E5B  0AA3               	incf	_getDimmerLights_Allow_Condition$2255,f
 15786  1E5C  319B  23AC  319E   	fcall	_getLoad_OK
 15787  1E5F  3800               	iorlw	0
 15788  1E60  1D03               	skipz
 15789  1E61  2E67               	goto	l9308
 15790  1E62  0022               	movlb	2	; select bank2
 15791  1E63  18AC               	btfsc	_Dimmer^(0+256),1
 15792  1E64  2E67               	goto	l9308
 15793  1E65  0020               	movlb	0	; select bank0
 15794  1E66  01A3               	clrf	_getDimmerLights_Allow_Condition$2255
 15795  1E67                     l9308:	
 15796  1E67  0020               	movlb	0	; select bank0
 15797  1E68  0823               	movf	_getDimmerLights_Allow_Condition$2255,w
 15798  1E69  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15799  1E6A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15800  1E6B  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 15801                           
 15802                           ;Dimmer_B1.c: 1017: return allow;
 15803  1E6C  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 15804  1E6D  0008               	return
 15805  1E6E                     __end_of_getDimmerLights_Allow_Condition:	
 15806                           
 15807                           	psect	text109
 15808  1BAC                     __ptext109:	
 15809 ;; *************** function _getLoad_OK *****************
 15810 ;; Defined at:
 15811 ;;		line 272 in file "../src/OverLoad_B1.c"
 15812 ;; Parameters:    Size  Location     Type
 15813 ;;		None
 15814 ;; Auto vars:     Size  Location     Type
 15815 ;;  ok              1    0[BANK0 ] unsigned char 
 15816 ;; Return value:  Size  Location     Type
 15817 ;;                  1    wreg      unsigned char 
 15818 ;; Registers used:
 15819 ;;		wreg, status,2
 15820 ;; Tracked objects:
 15821 ;;		On entry : 0/0
 15822 ;;		On exit  : 0/0
 15823 ;;		Unchanged: 0/0
 15824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15828 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15829 ;;Total ram usage:        1 bytes
 15830 ;; Hardware stack levels used:    1
 15831 ;; Hardware stack levels required when called:    5
 15832 ;; This function calls:
 15833 ;;		Nothing
 15834 ;; This function is called by:
 15835 ;;		_DimmerLights_Main
 15836 ;;		_getDimmerLights_Allow_Condition
 15837 ;; This function uses a non-reentrant model
 15838 ;;
 15839                           
 15840                           
 15841                           ;psect for function _getLoad_OK
 15842  1BAC                     _getLoad_OK:	
 15843                           
 15844                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 15845                           
 15846                           ;incstack = 0
 15847                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15848  1BAC  3000               	movlw	0
 15849  1BAD  0022               	movlb	2	; select bank2
 15850  1BAE  1BBE               	btfsc	_Load^(0+256),7
 15851  1BAF  3001               	movlw	1
 15852  1BB0  0020               	movlb	0	; select bank0
 15853  1BB1  00A0               	movwf	getLoad_OK@ok
 15854                           
 15855                           ;OverLoad_B1.c: 274: return ok;
 15856  1BB2  0820               	movf	getLoad_OK@ok,w
 15857  1BB3  0008               	return
 15858  1BB4                     __end_of_getLoad_OK:	
 15859                           
 15860                           	psect	text110
 15861  11B2                     __ptext110:	
 15862 ;; *************** function _getMain_All_Error_Status *****************
 15863 ;; Defined at:
 15864 ;;		line 424 in file "../src/Main_B1.c"
 15865 ;; Parameters:    Size  Location     Type
 15866 ;;  command         1    wreg     unsigned char 
 15867 ;; Auto vars:     Size  Location     Type
 15868 ;;  command         1    5[BANK0 ] unsigned char 
 15869 ;;  status          1    6[BANK0 ] unsigned char 
 15870 ;; Return value:  Size  Location     Type
 15871 ;;                  1    wreg      unsigned char 
 15872 ;; Registers used:
 15873 ;;		wreg, status,2, status,0
 15874 ;; Tracked objects:
 15875 ;;		On entry : 0/0
 15876 ;;		On exit  : 0/0
 15877 ;;		Unchanged: 0/0
 15878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;Total ram usage:        7 bytes
 15884 ;; Hardware stack levels used:    1
 15885 ;; Hardware stack levels required when called:    5
 15886 ;; This function calls:
 15887 ;;		Nothing
 15888 ;; This function is called by:
 15889 ;;		_DimmerLights_Main
 15890 ;;		_Exception_Main
 15891 ;;		_Load_Main
 15892 ;;		_setTemp_Main
 15893 ;;		_getRxData
 15894 ;;		_setSw_Main
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           
 15899                           ;psect for function _getMain_All_Error_Status
 15900  11B2                     _getMain_All_Error_Status:	
 15901                           
 15902                           ;incstack = 0
 15903                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15904                           ;getMain_All_Error_Status@command stored from wreg
 15905  11B2  0020               	movlb	0	; select bank0
 15906  11B3  00A5               	movwf	getMain_All_Error_Status@command
 15907                           
 15908                           ;Main_B1.c: 425: char status = 0;
 15909  11B4  01A6               	clrf	getMain_All_Error_Status@status
 15910                           
 15911                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 15912  11B5  08A6               	movf	getMain_All_Error_Status@status,f
 15913  11B6  1D03               	skipz
 15914  11B7  29CC               	goto	l9080
 15915  11B8  0825               	movf	getMain_All_Error_Status@command,w
 15916  11B9  3A02               	xorlw	2
 15917  11BA  1903               	skipnz
 15918  11BB  29CC               	goto	l9080
 15919                           
 15920                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 15921  11BC  0021               	movlb	1	; select bank1
 15922  11BD  18D1               	btfsc	_Temp^(0+128),1
 15923  11BE  29C3               	goto	l9078
 15924  11BF  0020               	movlb	0	; select bank0
 15925  11C0  01A1               	clrf	_getMain_All_Error_Status$3576
 15926  11C1  01A2               	clrf	_getMain_All_Error_Status$3576+1
 15927  11C2  29C8               	goto	l1467
 15928  11C3                     l9078:	
 15929  11C3  3002               	movlw	2
 15930  11C4  0020               	movlb	0	; select bank0
 15931  11C5  00A1               	movwf	_getMain_All_Error_Status$3576
 15932  11C6  3000               	movlw	0
 15933  11C7  00A2               	movwf	_getMain_All_Error_Status$3576+1
 15934  11C8                     l1467:	
 15935  11C8  0821               	movf	_getMain_All_Error_Status$3576,w
 15936  11C9  00A0               	movwf	??_getMain_All_Error_Status
 15937  11CA  0820               	movf	??_getMain_All_Error_Status,w
 15938  11CB  00A6               	movwf	getMain_All_Error_Status@status
 15939  11CC                     l9080:	
 15940                           
 15941                           ;Main_B1.c: 438: }
 15942                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 15943  11CC  08A6               	movf	getMain_All_Error_Status@status,f
 15944  11CD  1D03               	skipz
 15945  11CE  29E3               	goto	l1468
 15946  11CF  0825               	movf	getMain_All_Error_Status@command,w
 15947  11D0  3A03               	xorlw	3
 15948  11D1  1903               	skipnz
 15949  11D2  29E3               	goto	l1468
 15950                           
 15951                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 15952  11D3  0022               	movlb	2	; select bank2
 15953  11D4  1ABE               	btfsc	_Load^(0+256),5
 15954  11D5  29DA               	goto	l9088
 15955  11D6  0020               	movlb	0	; select bank0
 15956  11D7  01A3               	clrf	_getMain_All_Error_Status$3577
 15957  11D8  01A4               	clrf	_getMain_All_Error_Status$3577+1
 15958  11D9  29DF               	goto	l1472
 15959  11DA                     l9088:	
 15960  11DA  3003               	movlw	3
 15961  11DB  0020               	movlb	0	; select bank0
 15962  11DC  00A3               	movwf	_getMain_All_Error_Status$3577
 15963  11DD  3000               	movlw	0
 15964  11DE  00A4               	movwf	_getMain_All_Error_Status$3577+1
 15965  11DF                     l1472:	
 15966  11DF  0823               	movf	_getMain_All_Error_Status$3577,w
 15967  11E0  00A0               	movwf	??_getMain_All_Error_Status
 15968  11E1  0820               	movf	??_getMain_All_Error_Status,w
 15969  11E2  00A6               	movwf	getMain_All_Error_Status@status
 15970  11E3                     l1468:	
 15971                           
 15972                           ;Main_B1.c: 445: }
 15973                           ;Main_B1.c: 455: return status;
 15974  11E3  0826               	movf	getMain_All_Error_Status@status,w
 15975  11E4  0008               	return
 15976  11E5                     __end_of_getMain_All_Error_Status:	
 15977                           
 15978                           	psect	text111
 15979  1B97                     __ptext111:	
 15980 ;; *************** function _DimmerLights_Initialization *****************
 15981 ;; Defined at:
 15982 ;;		line 635 in file "../src/Dimmer_B1.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;		None
 15985 ;; Auto vars:     Size  Location     Type
 15986 ;;		None
 15987 ;; Return value:  Size  Location     Type
 15988 ;;		None               void
 15989 ;; Registers used:
 15990 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15991 ;; Tracked objects:
 15992 ;;		On entry : 0/0
 15993 ;;		On exit  : 0/0
 15994 ;;		Unchanged: 0/0
 15995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16000 ;;Total ram usage:        0 bytes
 16001 ;; Hardware stack levels used:    1
 16002 ;; Hardware stack levels required when called:    9
 16003 ;; This function calls:
 16004 ;;		_DimmerIntr_Initialization
 16005 ;;		_setDimmerLights_Initialization
 16006 ;; This function is called by:
 16007 ;;		_main
 16008 ;; This function uses a non-reentrant model
 16009 ;;
 16010                           
 16011                           
 16012                           ;psect for function _DimmerLights_Initialization
 16013  1B97                     _DimmerLights_Initialization:	
 16014                           
 16015                           ;Dimmer_B1.c: 637: setDimmerLights_Initialization(1);
 16016                           
 16017                           ;incstack = 0
 16018                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16019  1B97  3001               	movlw	1
 16020  1B98  319B  2344  319B   	fcall	_setDimmerLights_Initialization
 16021                           
 16022                           ;Dimmer_B1.c: 647: DimmerIntr_Initialization();
 16023  1B9B  3193  232D         	fcall	_DimmerIntr_Initialization
 16024  1B9D  0008               	return
 16025  1B9E                     __end_of_DimmerLights_Initialization:	
 16026                           
 16027                           	psect	text112
 16028  1B44                     __ptext112:	
 16029 ;; *************** function _setDimmerLights_Initialization *****************
 16030 ;; Defined at:
 16031 ;;		line 651 in file "../src/Dimmer_B1.c"
 16032 ;; Parameters:    Size  Location     Type
 16033 ;;  lights          1    wreg     unsigned char 
 16034 ;; Auto vars:     Size  Location     Type
 16035 ;;  lights          1    0[COMMON] unsigned char 
 16036 ;; Return value:  Size  Location     Type
 16037 ;;		None               void
 16038 ;; Registers used:
 16039 ;;		wreg
 16040 ;; Tracked objects:
 16041 ;;		On entry : 0/0
 16042 ;;		On exit  : 0/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;Total ram usage:        0 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; Hardware stack levels required when called:    5
 16052 ;; This function calls:
 16053 ;;		Nothing
 16054 ;; This function is called by:
 16055 ;;		_DimmerLights_Initialization
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function _setDimmerLights_Initialization
 16061  1B44                     _setDimmerLights_Initialization:	
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16065  1B44  0008               	return
 16066  1B45                     __end_of_setDimmerLights_Initialization:	
 16067                           
 16068                           	psect	text113
 16069  132D                     __ptext113:	
 16070 ;; *************** function _DimmerIntr_Initialization *****************
 16071 ;; Defined at:
 16072 ;;		line 7 in file "../src/Dimmer_B1.c"
 16073 ;; Parameters:    Size  Location     Type
 16074 ;;		None
 16075 ;; Auto vars:     Size  Location     Type
 16076 ;;		None
 16077 ;; Return value:  Size  Location     Type
 16078 ;;		None               void
 16079 ;; Registers used:
 16080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16081 ;; Tracked objects:
 16082 ;;		On entry : 0/0
 16083 ;;		On exit  : 0/0
 16084 ;;		Unchanged: 0/0
 16085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16089 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16090 ;;Total ram usage:        1 bytes
 16091 ;; Hardware stack levels used:    1
 16092 ;; Hardware stack levels required when called:    8
 16093 ;; This function calls:
 16094 ;;		_getDimmerLights_PercentToValue
 16095 ;;		_getDimmerLights_ValueToPercent
 16096 ;;		_setMemory_Modify
 16097 ;; This function is called by:
 16098 ;;		_DimmerLights_Initialization
 16099 ;; This function uses a non-reentrant model
 16100 ;;
 16101                           
 16102                           
 16103                           ;psect for function _DimmerIntr_Initialization
 16104  132D                     _DimmerIntr_Initialization:	
 16105                           
 16106                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16107                           
 16108                           ;incstack = 0
 16109                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16110  132D  3007               	movlw	7
 16111  132E  0020               	movlb	0	; select bank0
 16112  132F  00E2               	movwf	??_DimmerIntr_Initialization
 16113  1330  0862               	movf	??_DimmerIntr_Initialization,w
 16114  1331  0021               	movlb	1	; select bank1
 16115  1332  00BF               	movwf	(_DimmerIntr1^(0+128)+4)
 16116                           
 16117                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(80*0.6));
 16118  1333  3030               	movlw	48
 16119  1334  0020               	movlb	0	; select bank0
 16120  1335  00E2               	movwf	??_DimmerIntr_Initialization
 16121  1336  0862               	movf	??_DimmerIntr_Initialization,w
 16122  1337  0021               	movlb	1	; select bank1
 16123  1338  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16124                           
 16125                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16126  1339  3006               	movlw	6
 16127  133A  0020               	movlb	0	; select bank0
 16128  133B  00E2               	movwf	??_DimmerIntr_Initialization
 16129  133C  0862               	movf	??_DimmerIntr_Initialization,w
 16130  133D  0021               	movlb	1	; select bank1
 16131  133E  00C2               	movwf	(_DimmerIntr1^(0+128)+7)
 16132                           
 16133                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16134  133F  1E38               	btfss	(_myMain^(0+128)+10),4
 16135  1340  2B51               	goto	l9538
 16136                           
 16137                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(80*0.6)));
 16138  1341  3030               	movlw	48
 16139  1342  3196  26CB  3193   	fcall	_getDimmerLights_ValueToPercent
 16140  1345  0020               	movlb	0	; select bank0
 16141  1346  00E2               	movwf	??_DimmerIntr_Initialization
 16142  1347  0021               	movlb	1	; select bank1
 16143  1348  0863               	movf	_product^(0+128),w
 16144  1349  3E15               	addlw	21
 16145  134A  0086               	movwf	6
 16146  134B  3002               	movlw	2	; select bank4/5
 16147  134C  0087               	movwf	7
 16148  134D  0020               	movlb	0	; select bank0
 16149  134E  0862               	movf	??_DimmerIntr_Initialization,w
 16150  134F  0081               	movwf	1
 16151                           
 16152                           ;Dimmer_B1.c: 18: } else {
 16153  1350  2B60               	goto	l9540
 16154  1351                     l9538:	
 16155                           
 16156                           ;Dimmer_B1.c: 19: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16157  1351  0021               	movlb	1	; select bank1
 16158  1352  0863               	movf	_product^(0+128),w
 16159  1353  3E15               	addlw	21
 16160  1354  0086               	movwf	6
 16161  1355  3002               	movlw	2	; select bank4/5
 16162  1356  0087               	movwf	7
 16163  1357  0801               	movf	1,w
 16164  1358  3196  2666  3193   	fcall	_getDimmerLights_PercentToValue
 16165  135B  0020               	movlb	0	; select bank0
 16166  135C  00E2               	movwf	??_DimmerIntr_Initialization
 16167  135D  0862               	movf	??_DimmerIntr_Initialization,w
 16168  135E  0021               	movlb	1	; select bank1
 16169  135F  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 16170  1360                     l9540:	
 16171                           
 16172                           ;Dimmer_B1.c: 20: }
 16173                           ;Dimmer_B1.c: 61: if (myMain.InitDimmer == 1) {
 16174  1360  0021               	movlb	1	; select bank1
 16175  1361  1E38               	btfss	(_myMain^(0+128)+10),4
 16176  1362  0008               	return
 16177                           
 16178                           ;Dimmer_B1.c: 62: myMain.InitDimmer = 0;
 16179  1363  1238               	bcf	(_myMain^(0+128)+10),4
 16180                           
 16181                           ;Dimmer_B1.c: 63: myMain.SaveDimmer = 1;
 16182  1364  16B8               	bsf	(_myMain^(0+128)+10),5
 16183                           
 16184                           ;Dimmer_B1.c: 64: setMemory_Modify(1);
 16185  1365  3001               	movlw	1
 16186  1366  319D  2591         	fcall	_setMemory_Modify
 16187  1368  0008               	return
 16188  1369                     __end_of_DimmerIntr_Initialization:	
 16189                           
 16190                           	psect	text114
 16191  1D91                     __ptext114:	
 16192 ;; *************** function _setMemory_Modify *****************
 16193 ;; Defined at:
 16194 ;;		line 1083 in file "../src/MCU_B1.c"
 16195 ;; Parameters:    Size  Location     Type
 16196 ;;  command         1    wreg     unsigned char 
 16197 ;; Auto vars:     Size  Location     Type
 16198 ;;  command         1    1[BANK0 ] unsigned char 
 16199 ;; Return value:  Size  Location     Type
 16200 ;;		None               void
 16201 ;; Registers used:
 16202 ;;		wreg, status,2, status,0
 16203 ;; Tracked objects:
 16204 ;;		On entry : 0/0
 16205 ;;		On exit  : 0/0
 16206 ;;		Unchanged: 0/0
 16207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16211 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;Total ram usage:        2 bytes
 16213 ;; Hardware stack levels used:    1
 16214 ;; Hardware stack levels required when called:    5
 16215 ;; This function calls:
 16216 ;;		Nothing
 16217 ;; This function is called by:
 16218 ;;		_DimmerIntr_Initialization
 16219 ;;		_setDimmerLights_Dimming
 16220 ;;		_setLog_Code
 16221 ;;		_setRFSW_AdjControl
 16222 ;; This function uses a non-reentrant model
 16223 ;;
 16224                           
 16225                           
 16226                           ;psect for function _setMemory_Modify
 16227  1D91                     _setMemory_Modify:	
 16228                           
 16229                           ;incstack = 0
 16230                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16231                           ;setMemory_Modify@command stored from wreg
 16232  1D91  0020               	movlb	0	; select bank0
 16233  1D92  00A1               	movwf	setMemory_Modify@command
 16234                           
 16235                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16236  1D93  0821               	movf	setMemory_Modify@command,w
 16237  1D94  3A01               	xorlw	1
 16238  1D95  3000               	movlw	0
 16239  1D96  1903               	skipnz
 16240  1D97  3001               	movlw	1
 16241  1D98  00A0               	movwf	??_setMemory_Modify
 16242  1D99  0024               	movlb	4	; select bank4
 16243  1D9A  0844               	movf	(_Memory^(0+512)+36),w
 16244  1D9B  0020               	movlb	0	; select bank0
 16245  1D9C  0620               	xorwf	??_setMemory_Modify,w
 16246  1D9D  39FE               	andlw	-2
 16247  1D9E  0620               	xorwf	??_setMemory_Modify,w
 16248  1D9F  0024               	movlb	4	; select bank4
 16249  1DA0  00C4               	movwf	(_Memory^(0+512)+36)
 16250                           
 16251                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16252  1DA1  01C2               	clrf	(_Memory^(0+512)+34)
 16253  1DA2  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16254  1DA3  0008               	return
 16255  1DA4                     __end_of_setMemory_Modify:	
 16256                           
 16257                           	psect	text115
 16258  16CB                     __ptext115:	
 16259 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16260 ;; Defined at:
 16261 ;;		line 1122 in file "../src/Dimmer_B1.c"
 16262 ;; Parameters:    Size  Location     Type
 16263 ;;  value           1    wreg     unsigned char 
 16264 ;; Auto vars:     Size  Location     Type
 16265 ;;  value           1   62[BANK0 ] unsigned char 
 16266 ;;  i               3   63[BANK0 ] float 
 16267 ;; Return value:  Size  Location     Type
 16268 ;;                  1    wreg      unsigned char 
 16269 ;; Registers used:
 16270 ;;		wreg, status,2, status,0, pclath, cstack
 16271 ;; Tracked objects:
 16272 ;;		On entry : 0/0
 16273 ;;		On exit  : 0/0
 16274 ;;		Unchanged: 0/0
 16275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;Total ram usage:        6 bytes
 16281 ;; Hardware stack levels used:    1
 16282 ;; Hardware stack levels required when called:    7
 16283 ;; This function calls:
 16284 ;;		___awtoft
 16285 ;;		___ftadd
 16286 ;;		___ftdiv
 16287 ;;		___ftneg
 16288 ;;		___fttol
 16289 ;; This function is called by:
 16290 ;;		_DimmerIntr_Initialization
 16291 ;;		_setDimmerLights_Dimming
 16292 ;; This function uses a non-reentrant model
 16293 ;;
 16294                           
 16295                           
 16296                           ;psect for function _getDimmerLights_ValueToPercent
 16297  16CB                     _getDimmerLights_ValueToPercent:	
 16298                           
 16299                           ;incstack = 0
 16300                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16301                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16302  16CB  0020               	movlb	0	; select bank0
 16303  16CC  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16304                           
 16305                           ;Dimmer_B1.c: 1130: float i = ((char)(80*0.6)) - ((char)(10*0.6));
 16306  16CD  3000               	movlw	0
 16307  16CE  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16308  16CF  3028               	movlw	40
 16309  16D0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16310  16D1  3042               	movlw	66
 16311  16D2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16312                           
 16313                           ;Dimmer_B1.c: 1131: i /= 100;
 16314  16D3  3000               	movlw	0
 16315  16D4  00AE               	movwf	___ftdiv@f2
 16316  16D5  30C8               	movlw	200
 16317  16D6  00AF               	movwf	___ftdiv@f2+1
 16318  16D7  3042               	movlw	66
 16319  16D8  00B0               	movwf	___ftdiv@f2+2
 16320  16D9  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16321  16DA  00B1               	movwf	___ftdiv@f1
 16322  16DB  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16323  16DC  00B2               	movwf	___ftdiv@f1+1
 16324  16DD  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16325  16DE  00B3               	movwf	___ftdiv@f1+2
 16326  16DF  318D  2537  3196   	fcall	___ftdiv
 16327  16E2  0020               	movlb	0	; select bank0
 16328  16E3  082E               	movf	?___ftdiv,w
 16329  16E4  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16330  16E5  082F               	movf	?___ftdiv+1,w
 16331  16E6  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16332  16E7  0830               	movf	?___ftdiv+2,w
 16333  16E8  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16334                           
 16335                           ;Dimmer_B1.c: 1133: return (char) (100 - ((((char)(80*0.6)) - value) / i));
 16336  16E9  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16337  16EA  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16338  16EB  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16339  16EC  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16340  16ED  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16341  16EE  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16342  16EF  1903               	skipnz
 16343  16F0  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16344  16F1  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16345  16F2  3E30               	addlw	48
 16346  16F3  00A8               	movwf	___awtoft@c
 16347  16F4  3000               	movlw	0
 16348  16F5  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16349  16F6  00A9               	movwf	___awtoft@c+1
 16350  16F7  3190  2070  3196   	fcall	___awtoft
 16351  16FA  0020               	movlb	0	; select bank0
 16352  16FB  0828               	movf	?___awtoft,w
 16353  16FC  00B1               	movwf	___ftdiv@f1
 16354  16FD  0829               	movf	?___awtoft+1,w
 16355  16FE  00B2               	movwf	___ftdiv@f1+1
 16356  16FF  082A               	movf	?___awtoft+2,w
 16357  1700  00B3               	movwf	___ftdiv@f1+2
 16358  1701  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16359  1702  00AE               	movwf	___ftdiv@f2
 16360  1703  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16361  1704  00AF               	movwf	___ftdiv@f2+1
 16362  1705  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16363  1706  00B0               	movwf	___ftdiv@f2+2
 16364  1707  318D  2537  3196   	fcall	___ftdiv
 16365  170A  0020               	movlb	0	; select bank0
 16366  170B  082E               	movf	?___ftdiv,w
 16367  170C  00BE               	movwf	___ftneg@f1
 16368  170D  082F               	movf	?___ftdiv+1,w
 16369  170E  00BF               	movwf	___ftneg@f1+1
 16370  170F  0830               	movf	?___ftdiv+2,w
 16371  1710  00C0               	movwf	___ftneg@f1+2
 16372  1711  319B  23CD  3196   	fcall	___ftneg
 16373  1714  0020               	movlb	0	; select bank0
 16374  1715  083E               	movf	?___ftneg,w
 16375  1716  00C4               	movwf	___ftadd@f2
 16376  1717  083F               	movf	?___ftneg+1,w
 16377  1718  00C5               	movwf	___ftadd@f2+1
 16378  1719  0840               	movf	?___ftneg+2,w
 16379  171A  00C6               	movwf	___ftadd@f2+2
 16380  171B  3000               	movlw	0
 16381  171C  00C1               	movwf	___ftadd@f1
 16382  171D  30C8               	movlw	200
 16383  171E  00C2               	movwf	___ftadd@f1+1
 16384  171F  3042               	movlw	66
 16385  1720  00C3               	movwf	___ftadd@f1+2
 16386  1721  3183  2389  3196   	fcall	___ftadd
 16387  1724  0020               	movlb	0	; select bank0
 16388  1725  0841               	movf	?___ftadd,w
 16389  1726  00CE               	movwf	___fttol@f1
 16390  1727  0842               	movf	?___ftadd+1,w
 16391  1728  00CF               	movwf	___fttol@f1+1
 16392  1729  0843               	movf	?___ftadd+2,w
 16393  172A  00D0               	movwf	___fttol@f1+2
 16394  172B  318C  2424         	fcall	___fttol
 16395  172D  0020               	movlb	0	; select bank0
 16396  172E  084E               	movf	?___fttol,w
 16397  172F  0008               	return
 16398  1730                     __end_of_getDimmerLights_ValueToPercent:	
 16399                           
 16400                           	psect	text116
 16401  1666                     __ptext116:	
 16402 ;; *************** function _getDimmerLights_PercentToValue *****************
 16403 ;; Defined at:
 16404 ;;		line 1106 in file "../src/Dimmer_B1.c"
 16405 ;; Parameters:    Size  Location     Type
 16406 ;;  value           1    wreg     unsigned char 
 16407 ;; Auto vars:     Size  Location     Type
 16408 ;;  value           1   62[BANK0 ] unsigned char 
 16409 ;;  i               3   63[BANK0 ] float 
 16410 ;; Return value:  Size  Location     Type
 16411 ;;                  1    wreg      unsigned char 
 16412 ;; Registers used:
 16413 ;;		wreg, status,2, status,0, pclath, cstack
 16414 ;; Tracked objects:
 16415 ;;		On entry : 0/0
 16416 ;;		On exit  : 0/0
 16417 ;;		Unchanged: 0/0
 16418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;Total ram usage:        6 bytes
 16424 ;; Hardware stack levels used:    1
 16425 ;; Hardware stack levels required when called:    7
 16426 ;; This function calls:
 16427 ;;		___awtoft
 16428 ;;		___ftadd
 16429 ;;		___ftdiv
 16430 ;;		___ftmul
 16431 ;;		___ftneg
 16432 ;;		___fttol
 16433 ;; This function is called by:
 16434 ;;		_DimmerIntr_Initialization
 16435 ;;		_setDimmerLights_OnOff
 16436 ;;		_setRFSW_AdjControl
 16437 ;; This function uses a non-reentrant model
 16438 ;;
 16439                           
 16440                           
 16441                           ;psect for function _getDimmerLights_PercentToValue
 16442  1666                     _getDimmerLights_PercentToValue:	
 16443                           
 16444                           ;incstack = 0
 16445                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16446                           ;getDimmerLights_PercentToValue@value stored from wreg
 16447  1666  0020               	movlb	0	; select bank0
 16448  1667  00DE               	movwf	getDimmerLights_PercentToValue@value
 16449                           
 16450                           ;Dimmer_B1.c: 1114: float i = ((char)(80*0.6)) - ((char)(10*0.6));
 16451  1668  3000               	movlw	0
 16452  1669  00DF               	movwf	getDimmerLights_PercentToValue@i
 16453  166A  3028               	movlw	40
 16454  166B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16455  166C  3042               	movlw	66
 16456  166D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16457                           
 16458                           ;Dimmer_B1.c: 1115: i /= 100;
 16459  166E  3000               	movlw	0
 16460  166F  00AE               	movwf	___ftdiv@f2
 16461  1670  30C8               	movlw	200
 16462  1671  00AF               	movwf	___ftdiv@f2+1
 16463  1672  3042               	movlw	66
 16464  1673  00B0               	movwf	___ftdiv@f2+2
 16465  1674  085F               	movf	getDimmerLights_PercentToValue@i,w
 16466  1675  00B1               	movwf	___ftdiv@f1
 16467  1676  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16468  1677  00B2               	movwf	___ftdiv@f1+1
 16469  1678  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16470  1679  00B3               	movwf	___ftdiv@f1+2
 16471  167A  318D  2537  3196   	fcall	___ftdiv
 16472  167D  0020               	movlb	0	; select bank0
 16473  167E  082E               	movf	?___ftdiv,w
 16474  167F  00DF               	movwf	getDimmerLights_PercentToValue@i
 16475  1680  082F               	movf	?___ftdiv+1,w
 16476  1681  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 16477  1682  0830               	movf	?___ftdiv+2,w
 16478  1683  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 16479                           
 16480                           ;Dimmer_B1.c: 1117: return (char) (((char)(80*0.6)) - ((100 - value) * i));
 16481  1684  085E               	movf	getDimmerLights_PercentToValue@value,w
 16482  1685  00DC               	movwf	??_getDimmerLights_PercentToValue
 16483  1686  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 16484  1687  09DC               	comf	??_getDimmerLights_PercentToValue,f
 16485  1688  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 16486  1689  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 16487  168A  1903               	skipnz
 16488  168B  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 16489  168C  085C               	movf	??_getDimmerLights_PercentToValue,w
 16490  168D  3E64               	addlw	100
 16491  168E  00A8               	movwf	___awtoft@c
 16492  168F  3000               	movlw	0
 16493  1690  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16494  1691  00A9               	movwf	___awtoft@c+1
 16495  1692  3190  2070  3196   	fcall	___awtoft
 16496  1695  0020               	movlb	0	; select bank0
 16497  1696  0828               	movf	?___awtoft,w
 16498  1697  00B1               	movwf	___ftmul@f2
 16499  1698  0829               	movf	?___awtoft+1,w
 16500  1699  00B2               	movwf	___ftmul@f2+1
 16501  169A  082A               	movf	?___awtoft+2,w
 16502  169B  00B3               	movwf	___ftmul@f2+2
 16503  169C  085F               	movf	getDimmerLights_PercentToValue@i,w
 16504  169D  00AE               	movwf	___ftmul@f1
 16505  169E  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 16506  169F  00AF               	movwf	___ftmul@f1+1
 16507  16A0  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 16508  16A1  00B0               	movwf	___ftmul@f1+2
 16509  16A2  318E  2691  3196   	fcall	___ftmul
 16510  16A5  0020               	movlb	0	; select bank0
 16511  16A6  082E               	movf	?___ftmul,w
 16512  16A7  00BE               	movwf	___ftneg@f1
 16513  16A8  082F               	movf	?___ftmul+1,w
 16514  16A9  00BF               	movwf	___ftneg@f1+1
 16515  16AA  0830               	movf	?___ftmul+2,w
 16516  16AB  00C0               	movwf	___ftneg@f1+2
 16517  16AC  319B  23CD  3196   	fcall	___ftneg
 16518  16AF  0020               	movlb	0	; select bank0
 16519  16B0  083E               	movf	?___ftneg,w
 16520  16B1  00C4               	movwf	___ftadd@f2
 16521  16B2  083F               	movf	?___ftneg+1,w
 16522  16B3  00C5               	movwf	___ftadd@f2+1
 16523  16B4  0840               	movf	?___ftneg+2,w
 16524  16B5  00C6               	movwf	___ftadd@f2+2
 16525  16B6  3000               	movlw	0
 16526  16B7  00C1               	movwf	___ftadd@f1
 16527  16B8  3040               	movlw	64
 16528  16B9  00C2               	movwf	___ftadd@f1+1
 16529  16BA  3042               	movlw	66
 16530  16BB  00C3               	movwf	___ftadd@f1+2
 16531  16BC  3183  2389  3196   	fcall	___ftadd
 16532  16BF  0020               	movlb	0	; select bank0
 16533  16C0  0841               	movf	?___ftadd,w
 16534  16C1  00CE               	movwf	___fttol@f1
 16535  16C2  0842               	movf	?___ftadd+1,w
 16536  16C3  00CF               	movwf	___fttol@f1+1
 16537  16C4  0843               	movf	?___ftadd+2,w
 16538  16C5  00D0               	movwf	___fttol@f1+2
 16539  16C6  318C  2424         	fcall	___fttol
 16540  16C8  0020               	movlb	0	; select bank0
 16541  16C9  084E               	movf	?___fttol,w
 16542  16CA  0008               	return
 16543  16CB                     __end_of_getDimmerLights_PercentToValue:	
 16544                           
 16545                           	psect	text117
 16546  0C24                     __ptext117:	
 16547 ;; *************** function ___fttol *****************
 16548 ;; Defined at:
 16549 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16550 ;; Parameters:    Size  Location     Type
 16551 ;;  f1              3   46[BANK0 ] float 
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;  lval            4   55[BANK0 ] unsigned long 
 16554 ;;  exp1            1   59[BANK0 ] unsigned char 
 16555 ;;  sign1           1   54[BANK0 ] unsigned char 
 16556 ;; Return value:  Size  Location     Type
 16557 ;;                  4   46[BANK0 ] long 
 16558 ;; Registers used:
 16559 ;;		wreg, status,2, status,0
 16560 ;; Tracked objects:
 16561 ;;		On entry : 0/0
 16562 ;;		On exit  : 0/0
 16563 ;;		Unchanged: 0/0
 16564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16565 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;Total ram usage:       14 bytes
 16570 ;; Hardware stack levels used:    1
 16571 ;; Hardware stack levels required when called:    5
 16572 ;; This function calls:
 16573 ;;		Nothing
 16574 ;; This function is called by:
 16575 ;;		_getDimmerLights_PercentToValue
 16576 ;;		_getDimmerLights_ValueToPercent
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           
 16581                           ;psect for function ___fttol
 16582  0C24                     ___fttol:	
 16583                           
 16584                           ;incstack = 0
 16585                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16586  0C24  0020               	movlb	0	; select bank0
 16587  0C25  084E               	movf	___fttol@f1,w
 16588  0C26  00D2               	movwf	??___fttol
 16589  0C27  084F               	movf	___fttol@f1+1,w
 16590  0C28  00D3               	movwf	??___fttol+1
 16591  0C29  0850               	movf	___fttol@f1+2,w
 16592  0C2A  00D4               	movwf	??___fttol+2
 16593  0C2B  1003               	clrc
 16594  0C2C  0D53               	rlf	??___fttol+1,w
 16595  0C2D  0D54               	rlf	??___fttol+2,w
 16596  0C2E  00D5               	movwf	??___fttol+3
 16597  0C2F  0855               	movf	??___fttol+3,w
 16598  0C30  00DB               	movwf	___fttol@exp1
 16599  0C31  08DB               	movf	___fttol@exp1,f
 16600  0C32  1D03               	skipz
 16601  0C33  2C3D               	goto	l8596
 16602  0C34  3000               	movlw	0
 16603  0C35  00D1               	movwf	?___fttol+3
 16604  0C36  3000               	movlw	0
 16605  0C37  00D0               	movwf	?___fttol+2
 16606  0C38  3000               	movlw	0
 16607  0C39  00CF               	movwf	?___fttol+1
 16608  0C3A  3000               	movlw	0
 16609  0C3B  00CE               	movwf	?___fttol
 16610  0C3C  0008               	return
 16611  0C3D                     l8596:	
 16612  0C3D  084E               	movf	___fttol@f1,w
 16613  0C3E  00D2               	movwf	??___fttol
 16614  0C3F  084F               	movf	___fttol@f1+1,w
 16615  0C40  00D3               	movwf	??___fttol+1
 16616  0C41  0850               	movf	___fttol@f1+2,w
 16617  0C42  00D4               	movwf	??___fttol+2
 16618  0C43  3017               	movlw	23
 16619  0C44                     u9365:	
 16620  0C44  36D4               	lsrf	??___fttol+2,f
 16621  0C45  0CD3               	rrf	??___fttol+1,f
 16622  0C46  0CD2               	rrf	??___fttol,f
 16623  0C47  0B89               	decfsz	9,f
 16624  0C48  2C44               	goto	u9365
 16625  0C49  0852               	movf	??___fttol,w
 16626  0C4A  00D5               	movwf	??___fttol+3
 16627  0C4B  0855               	movf	??___fttol+3,w
 16628  0C4C  00D6               	movwf	___fttol@sign1
 16629  0C4D  17CF               	bsf	___fttol@f1+1,7
 16630  0C4E  30FF               	movlw	255
 16631  0C4F  05CE               	andwf	___fttol@f1,f
 16632  0C50  30FF               	movlw	255
 16633  0C51  05CF               	andwf	___fttol@f1+1,f
 16634  0C52  3000               	movlw	0
 16635  0C53  05D0               	andwf	___fttol@f1+2,f
 16636  0C54  084E               	movf	___fttol@f1,w
 16637  0C55  00D7               	movwf	___fttol@lval
 16638  0C56  084F               	movf	___fttol@f1+1,w
 16639  0C57  00D8               	movwf	___fttol@lval+1
 16640  0C58  0850               	movf	___fttol@f1+2,w
 16641  0C59  00D9               	movwf	___fttol@lval+2
 16642  0C5A  01DA               	clrf	___fttol@lval+3
 16643  0C5B  308E               	movlw	142
 16644  0C5C  02DB               	subwf	___fttol@exp1,f
 16645  0C5D  1FDB               	btfss	___fttol@exp1,7
 16646  0C5E  2C7B               	goto	l8616
 16647  0C5F  085B               	movf	___fttol@exp1,w
 16648  0C60  3A80               	xorlw	128
 16649  0C61  3E8F               	addlw	143
 16650  0C62  1803               	skipnc
 16651  0C63  2C6D               	goto	l8614
 16652  0C64  3000               	movlw	0
 16653  0C65  00D1               	movwf	?___fttol+3
 16654  0C66  3000               	movlw	0
 16655  0C67  00D0               	movwf	?___fttol+2
 16656  0C68  3000               	movlw	0
 16657  0C69  00CF               	movwf	?___fttol+1
 16658  0C6A  3000               	movlw	0
 16659  0C6B  00CE               	movwf	?___fttol
 16660  0C6C  0008               	return
 16661  0C6D                     l8614:	
 16662  0C6D  3001               	movlw	1
 16663  0C6E                     u9395:	
 16664  0C6E  36DA               	lsrf	___fttol@lval+3,f
 16665  0C6F  0CD9               	rrf	___fttol@lval+2,f
 16666  0C70  0CD8               	rrf	___fttol@lval+1,f
 16667  0C71  0CD7               	rrf	___fttol@lval,f
 16668  0C72  0B89               	decfsz	9,f
 16669  0C73  2C6E               	goto	u9395
 16670  0C74  3001               	movlw	1
 16671  0C75  00D2               	movwf	??___fttol
 16672  0C76  0852               	movf	??___fttol,w
 16673  0C77  07DB               	addwf	___fttol@exp1,f
 16674  0C78  1903               	btfsc	3,2
 16675  0C79  2C94               	goto	l8626
 16676  0C7A  2C6D               	goto	l8614
 16677  0C7B                     l8616:	
 16678  0C7B  3018               	movlw	24
 16679  0C7C  025B               	subwf	___fttol@exp1,w
 16680  0C7D  1C03               	skipc
 16681  0C7E  2C91               	goto	l8624
 16682  0C7F  3000               	movlw	0
 16683  0C80  00D1               	movwf	?___fttol+3
 16684  0C81  3000               	movlw	0
 16685  0C82  00D0               	movwf	?___fttol+2
 16686  0C83  3000               	movlw	0
 16687  0C84  00CF               	movwf	?___fttol+1
 16688  0C85  3000               	movlw	0
 16689  0C86  00CE               	movwf	?___fttol
 16690  0C87  0008               	return
 16691  0C88                     l8622:	
 16692  0C88  3001               	movlw	1
 16693  0C89                     u9425:	
 16694  0C89  35D7               	lslf	___fttol@lval,f
 16695  0C8A  0DD8               	rlf	___fttol@lval+1,f
 16696  0C8B  0DD9               	rlf	___fttol@lval+2,f
 16697  0C8C  0DDA               	rlf	___fttol@lval+3,f
 16698  0C8D  0B89               	decfsz	9,f
 16699  0C8E  2C89               	goto	u9425
 16700  0C8F  3001               	movlw	1
 16701  0C90  02DB               	subwf	___fttol@exp1,f
 16702  0C91                     l8624:	
 16703  0C91  08DB               	movf	___fttol@exp1,f
 16704  0C92  1D03               	skipz
 16705  0C93  2C88               	goto	l8622
 16706  0C94                     l8626:	
 16707  0C94  0856               	movf	___fttol@sign1,w
 16708  0C95  1903               	btfsc	3,2
 16709  0C96  2CA2               	goto	l8630
 16710  0C97  09D7               	comf	___fttol@lval,f
 16711  0C98  09D8               	comf	___fttol@lval+1,f
 16712  0C99  09D9               	comf	___fttol@lval+2,f
 16713  0C9A  09DA               	comf	___fttol@lval+3,f
 16714  0C9B  0AD7               	incf	___fttol@lval,f
 16715  0C9C  1903               	skipnz
 16716  0C9D  0AD8               	incf	___fttol@lval+1,f
 16717  0C9E  1903               	skipnz
 16718  0C9F  0AD9               	incf	___fttol@lval+2,f
 16719  0CA0  1903               	skipnz
 16720  0CA1  0ADA               	incf	___fttol@lval+3,f
 16721  0CA2                     l8630:	
 16722  0CA2  085A               	movf	___fttol@lval+3,w
 16723  0CA3  00D1               	movwf	?___fttol+3
 16724  0CA4  0859               	movf	___fttol@lval+2,w
 16725  0CA5  00D0               	movwf	?___fttol+2
 16726  0CA6  0858               	movf	___fttol@lval+1,w
 16727  0CA7  00CF               	movwf	?___fttol+1
 16728  0CA8  0857               	movf	___fttol@lval,w
 16729  0CA9  00CE               	movwf	?___fttol
 16730  0CAA  0008               	return
 16731  0CAB                     __end_of___fttol:	
 16732                           
 16733                           	psect	text118
 16734  1BCD                     __ptext118:	
 16735 ;; *************** function ___ftneg *****************
 16736 ;; Defined at:
 16737 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16738 ;; Parameters:    Size  Location     Type
 16739 ;;  f1              3   30[BANK0 ] float 
 16740 ;; Auto vars:     Size  Location     Type
 16741 ;;		None
 16742 ;; Return value:  Size  Location     Type
 16743 ;;                  3   30[BANK0 ] float 
 16744 ;; Registers used:
 16745 ;;		wreg
 16746 ;; Tracked objects:
 16747 ;;		On entry : 0/0
 16748 ;;		On exit  : 0/0
 16749 ;;		Unchanged: 0/0
 16750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16751 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;Total ram usage:        3 bytes
 16756 ;; Hardware stack levels used:    1
 16757 ;; Hardware stack levels required when called:    5
 16758 ;; This function calls:
 16759 ;;		Nothing
 16760 ;; This function is called by:
 16761 ;;		_getDimmerLights_PercentToValue
 16762 ;;		_getDimmerLights_ValueToPercent
 16763 ;; This function uses a non-reentrant model
 16764 ;;
 16765                           
 16766                           
 16767                           ;psect for function ___ftneg
 16768  1BCD                     ___ftneg:	
 16769                           
 16770                           ;incstack = 0
 16771                           ; Regs used in ___ftneg: [wreg]
 16772  1BCD  0020               	movlb	0	; select bank0
 16773  1BCE  0840               	movf	___ftneg@f1+2,w
 16774  1BCF  043F               	iorwf	___ftneg@f1+1,w
 16775  1BD0  043E               	iorwf	___ftneg@f1,w
 16776  1BD1  1903               	skipnz
 16777  1BD2  0008               	return
 16778  1BD3  3080               	movlw	128
 16779  1BD4  06C0               	xorwf	___ftneg@f1+2,f
 16780  1BD5  0008               	return
 16781  1BD6                     __end_of___ftneg:	
 16782                           
 16783                           	psect	text119
 16784  0E91                     __ptext119:	
 16785 ;; *************** function ___ftmul *****************
 16786 ;; Defined at:
 16787 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16788 ;; Parameters:    Size  Location     Type
 16789 ;;  f1              3   14[BANK0 ] float 
 16790 ;;  f2              3   17[BANK0 ] float 
 16791 ;; Auto vars:     Size  Location     Type
 16792 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 16793 ;;  sign            1   29[BANK0 ] unsigned char 
 16794 ;;  cntr            1   28[BANK0 ] unsigned char 
 16795 ;;  exp             1   24[BANK0 ] unsigned char 
 16796 ;; Return value:  Size  Location     Type
 16797 ;;                  3   14[BANK0 ] float 
 16798 ;; Registers used:
 16799 ;;		wreg, status,2, status,0, pclath, cstack
 16800 ;; Tracked objects:
 16801 ;;		On entry : 0/0
 16802 ;;		On exit  : 0/0
 16803 ;;		Unchanged: 0/0
 16804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16805 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16806 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16807 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16808 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16809 ;;Total ram usage:       16 bytes
 16810 ;; Hardware stack levels used:    1
 16811 ;; Hardware stack levels required when called:    6
 16812 ;; This function calls:
 16813 ;;		___ftpack
 16814 ;; This function is called by:
 16815 ;;		_getDimmerLights_PercentToValue
 16816 ;; This function uses a non-reentrant model
 16817 ;;
 16818                           
 16819                           
 16820                           ;psect for function ___ftmul
 16821  0E91                     ___ftmul:	
 16822                           
 16823                           ;incstack = 0
 16824                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16825  0E91  0020               	movlb	0	; select bank0
 16826  0E92  082E               	movf	___ftmul@f1,w
 16827  0E93  00B4               	movwf	??___ftmul
 16828  0E94  082F               	movf	___ftmul@f1+1,w
 16829  0E95  00B5               	movwf	??___ftmul+1
 16830  0E96  0830               	movf	___ftmul@f1+2,w
 16831  0E97  00B6               	movwf	??___ftmul+2
 16832  0E98  1003               	clrc
 16833  0E99  0D35               	rlf	??___ftmul+1,w
 16834  0E9A  0D36               	rlf	??___ftmul+2,w
 16835  0E9B  00B7               	movwf	??___ftmul+3
 16836  0E9C  0837               	movf	??___ftmul+3,w
 16837  0E9D  00B8               	movwf	___ftmul@exp
 16838  0E9E  08B8               	movf	___ftmul@exp,f
 16839  0E9F  1D03               	skipz
 16840  0EA0  2EA8               	goto	l8538
 16841  0EA1  3000               	movlw	0
 16842  0EA2  00AE               	movwf	?___ftmul
 16843  0EA3  3000               	movlw	0
 16844  0EA4  00AF               	movwf	?___ftmul+1
 16845  0EA5  3000               	movlw	0
 16846  0EA6  00B0               	movwf	?___ftmul+2
 16847  0EA7  0008               	return
 16848  0EA8                     l8538:	
 16849  0EA8  0831               	movf	___ftmul@f2,w
 16850  0EA9  00B4               	movwf	??___ftmul
 16851  0EAA  0832               	movf	___ftmul@f2+1,w
 16852  0EAB  00B5               	movwf	??___ftmul+1
 16853  0EAC  0833               	movf	___ftmul@f2+2,w
 16854  0EAD  00B6               	movwf	??___ftmul+2
 16855  0EAE  1003               	clrc
 16856  0EAF  0D35               	rlf	??___ftmul+1,w
 16857  0EB0  0D36               	rlf	??___ftmul+2,w
 16858  0EB1  00B7               	movwf	??___ftmul+3
 16859  0EB2  0837               	movf	??___ftmul+3,w
 16860  0EB3  00BD               	movwf	___ftmul@sign
 16861  0EB4  08BD               	movf	___ftmul@sign,f
 16862  0EB5  1D03               	skipz
 16863  0EB6  2EBE               	goto	l8544
 16864  0EB7  3000               	movlw	0
 16865  0EB8  00AE               	movwf	?___ftmul
 16866  0EB9  3000               	movlw	0
 16867  0EBA  00AF               	movwf	?___ftmul+1
 16868  0EBB  3000               	movlw	0
 16869  0EBC  00B0               	movwf	?___ftmul+2
 16870  0EBD  0008               	return
 16871  0EBE                     l8544:	
 16872  0EBE  083D               	movf	___ftmul@sign,w
 16873  0EBF  3E7B               	addlw	123
 16874  0EC0  00B4               	movwf	??___ftmul
 16875  0EC1  0834               	movf	??___ftmul,w
 16876  0EC2  07B8               	addwf	___ftmul@exp,f
 16877  0EC3  082E               	movf	___ftmul@f1,w
 16878  0EC4  00B4               	movwf	??___ftmul
 16879  0EC5  082F               	movf	___ftmul@f1+1,w
 16880  0EC6  00B5               	movwf	??___ftmul+1
 16881  0EC7  0830               	movf	___ftmul@f1+2,w
 16882  0EC8  00B6               	movwf	??___ftmul+2
 16883  0EC9  3010               	movlw	16
 16884  0ECA                     u9245:	
 16885  0ECA  36B6               	lsrf	??___ftmul+2,f
 16886  0ECB  0CB5               	rrf	??___ftmul+1,f
 16887  0ECC  0CB4               	rrf	??___ftmul,f
 16888  0ECD  0B89               	decfsz	9,f
 16889  0ECE  2ECA               	goto	u9245
 16890  0ECF  0834               	movf	??___ftmul,w
 16891  0ED0  00B7               	movwf	??___ftmul+3
 16892  0ED1  0837               	movf	??___ftmul+3,w
 16893  0ED2  00BD               	movwf	___ftmul@sign
 16894  0ED3  0831               	movf	___ftmul@f2,w
 16895  0ED4  00B4               	movwf	??___ftmul
 16896  0ED5  0832               	movf	___ftmul@f2+1,w
 16897  0ED6  00B5               	movwf	??___ftmul+1
 16898  0ED7  0833               	movf	___ftmul@f2+2,w
 16899  0ED8  00B6               	movwf	??___ftmul+2
 16900  0ED9  3010               	movlw	16
 16901  0EDA                     u9255:	
 16902  0EDA  36B6               	lsrf	??___ftmul+2,f
 16903  0EDB  0CB5               	rrf	??___ftmul+1,f
 16904  0EDC  0CB4               	rrf	??___ftmul,f
 16905  0EDD  0B89               	decfsz	9,f
 16906  0EDE  2EDA               	goto	u9255
 16907  0EDF  0834               	movf	??___ftmul,w
 16908  0EE0  00B7               	movwf	??___ftmul+3
 16909  0EE1  0837               	movf	??___ftmul+3,w
 16910  0EE2  06BD               	xorwf	___ftmul@sign,f
 16911  0EE3  3080               	movlw	128
 16912  0EE4  00B4               	movwf	??___ftmul
 16913  0EE5  0834               	movf	??___ftmul,w
 16914  0EE6  05BD               	andwf	___ftmul@sign,f
 16915  0EE7  17AF               	bsf	___ftmul@f1+1,7
 16916  0EE8  17B2               	bsf	___ftmul@f2+1,7
 16917  0EE9  30FF               	movlw	255
 16918  0EEA  05B1               	andwf	___ftmul@f2,f
 16919  0EEB  30FF               	movlw	255
 16920  0EEC  05B2               	andwf	___ftmul@f2+1,f
 16921  0EED  3000               	movlw	0
 16922  0EEE  05B3               	andwf	___ftmul@f2+2,f
 16923  0EEF  3000               	movlw	0
 16924  0EF0  00B9               	movwf	___ftmul@f3_as_product
 16925  0EF1  3000               	movlw	0
 16926  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 16927  0EF3  3000               	movlw	0
 16928  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 16929  0EF5  3007               	movlw	7
 16930  0EF6  00B4               	movwf	??___ftmul
 16931  0EF7  0834               	movf	??___ftmul,w
 16932  0EF8  00BC               	movwf	___ftmul@cntr
 16933  0EF9                     l8556:	
 16934  0EF9  1C2E               	btfss	___ftmul@f1,0
 16935  0EFA  2F01               	goto	l8560
 16936  0EFB  0831               	movf	___ftmul@f2,w
 16937  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 16938  0EFD  0832               	movf	___ftmul@f2+1,w
 16939  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16940  0EFF  0833               	movf	___ftmul@f2+2,w
 16941  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16942  0F01                     l8560:	
 16943  0F01  3001               	movlw	1
 16944  0F02                     u9275:	
 16945  0F02  36B0               	lsrf	___ftmul@f1+2,f
 16946  0F03  0CAF               	rrf	___ftmul@f1+1,f
 16947  0F04  0CAE               	rrf	___ftmul@f1,f
 16948  0F05  0B89               	decfsz	9,f
 16949  0F06  2F02               	goto	u9275
 16950  0F07  3001               	movlw	1
 16951  0F08                     u9285:	
 16952  0F08  35B1               	lslf	___ftmul@f2,f
 16953  0F09  0DB2               	rlf	___ftmul@f2+1,f
 16954  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 16955  0F0B  0B89               	decfsz	9,f
 16956  0F0C  2F08               	goto	u9285
 16957  0F0D  3001               	movlw	1
 16958  0F0E  02BC               	subwf	___ftmul@cntr,f
 16959  0F0F  1D03               	btfss	3,2
 16960  0F10  2EF9               	goto	l8556
 16961  0F11  3009               	movlw	9
 16962  0F12  00B4               	movwf	??___ftmul
 16963  0F13  0834               	movf	??___ftmul,w
 16964  0F14  00BC               	movwf	___ftmul@cntr
 16965  0F15                     l8568:	
 16966  0F15  1C2E               	btfss	___ftmul@f1,0
 16967  0F16  2F1D               	goto	l8572
 16968  0F17  0831               	movf	___ftmul@f2,w
 16969  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 16970  0F19  0832               	movf	___ftmul@f2+1,w
 16971  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 16972  0F1B  0833               	movf	___ftmul@f2+2,w
 16973  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 16974  0F1D                     l8572:	
 16975  0F1D  3001               	movlw	1
 16976  0F1E                     u9315:	
 16977  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 16978  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 16979  0F20  0CAE               	rrf	___ftmul@f1,f
 16980  0F21  0B89               	decfsz	9,f
 16981  0F22  2F1E               	goto	u9315
 16982  0F23  3001               	movlw	1
 16983  0F24                     u9325:	
 16984  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 16985  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 16986  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 16987  0F27  0B89               	decfsz	9,f
 16988  0F28  2F24               	goto	u9325
 16989  0F29  3001               	movlw	1
 16990  0F2A  02BC               	subwf	___ftmul@cntr,f
 16991  0F2B  1D03               	btfss	3,2
 16992  0F2C  2F15               	goto	l8568
 16993  0F2D  0839               	movf	___ftmul@f3_as_product,w
 16994  0F2E  00A0               	movwf	___ftpack@arg
 16995  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 16996  0F30  00A1               	movwf	___ftpack@arg+1
 16997  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 16998  0F32  00A2               	movwf	___ftpack@arg+2
 16999  0F33  0838               	movf	___ftmul@exp,w
 17000  0F34  00B4               	movwf	??___ftmul
 17001  0F35  0834               	movf	??___ftmul,w
 17002  0F36  00A3               	movwf	___ftpack@exp
 17003  0F37  083D               	movf	___ftmul@sign,w
 17004  0F38  00B5               	movwf	??___ftmul+1
 17005  0F39  0835               	movf	??___ftmul+1,w
 17006  0F3A  00A4               	movwf	___ftpack@sign
 17007  0F3B  3196  2605         	fcall	___ftpack
 17008  0F3D  0020               	movlb	0	; select bank0
 17009  0F3E  0820               	movf	?___ftpack,w
 17010  0F3F  00AE               	movwf	?___ftmul
 17011  0F40  0821               	movf	?___ftpack+1,w
 17012  0F41  00AF               	movwf	?___ftmul+1
 17013  0F42  0822               	movf	?___ftpack+2,w
 17014  0F43  00B0               	movwf	?___ftmul+2
 17015  0F44  0008               	return
 17016  0F45                     __end_of___ftmul:	
 17017                           
 17018                           	psect	text120
 17019  0D37                     __ptext120:	
 17020 ;; *************** function ___ftdiv *****************
 17021 ;; Defined at:
 17022 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17023 ;; Parameters:    Size  Location     Type
 17024 ;;  f2              3   14[BANK0 ] float 
 17025 ;;  f1              3   17[BANK0 ] float 
 17026 ;; Auto vars:     Size  Location     Type
 17027 ;;  f3              3   25[BANK0 ] float 
 17028 ;;  sign            1   29[BANK0 ] unsigned char 
 17029 ;;  exp             1   28[BANK0 ] unsigned char 
 17030 ;;  cntr            1   24[BANK0 ] unsigned char 
 17031 ;; Return value:  Size  Location     Type
 17032 ;;                  3   14[BANK0 ] float 
 17033 ;; Registers used:
 17034 ;;		wreg, status,2, status,0, pclath, cstack
 17035 ;; Tracked objects:
 17036 ;;		On entry : 0/0
 17037 ;;		On exit  : 0/0
 17038 ;;		Unchanged: 0/0
 17039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17040 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17041 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17042 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17043 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17044 ;;Total ram usage:       16 bytes
 17045 ;; Hardware stack levels used:    1
 17046 ;; Hardware stack levels required when called:    6
 17047 ;; This function calls:
 17048 ;;		___ftpack
 17049 ;; This function is called by:
 17050 ;;		_getDimmerLights_PercentToValue
 17051 ;;		_getDimmerLights_ValueToPercent
 17052 ;; This function uses a non-reentrant model
 17053 ;;
 17054                           
 17055                           
 17056                           ;psect for function ___ftdiv
 17057  0D37                     ___ftdiv:	
 17058                           
 17059                           ;incstack = 0
 17060                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17061  0D37  0020               	movlb	0	; select bank0
 17062  0D38  0831               	movf	___ftdiv@f1,w
 17063  0D39  00B4               	movwf	??___ftdiv
 17064  0D3A  0832               	movf	___ftdiv@f1+1,w
 17065  0D3B  00B5               	movwf	??___ftdiv+1
 17066  0D3C  0833               	movf	___ftdiv@f1+2,w
 17067  0D3D  00B6               	movwf	??___ftdiv+2
 17068  0D3E  1003               	clrc
 17069  0D3F  0D35               	rlf	??___ftdiv+1,w
 17070  0D40  0D36               	rlf	??___ftdiv+2,w
 17071  0D41  00B7               	movwf	??___ftdiv+3
 17072  0D42  0837               	movf	??___ftdiv+3,w
 17073  0D43  00BC               	movwf	___ftdiv@exp
 17074  0D44  08BC               	movf	___ftdiv@exp,f
 17075  0D45  1D03               	skipz
 17076  0D46  2D4E               	goto	l8496
 17077  0D47  3000               	movlw	0
 17078  0D48  00AE               	movwf	?___ftdiv
 17079  0D49  3000               	movlw	0
 17080  0D4A  00AF               	movwf	?___ftdiv+1
 17081  0D4B  3000               	movlw	0
 17082  0D4C  00B0               	movwf	?___ftdiv+2
 17083  0D4D  0008               	return
 17084  0D4E                     l8496:	
 17085  0D4E  082E               	movf	___ftdiv@f2,w
 17086  0D4F  00B4               	movwf	??___ftdiv
 17087  0D50  082F               	movf	___ftdiv@f2+1,w
 17088  0D51  00B5               	movwf	??___ftdiv+1
 17089  0D52  0830               	movf	___ftdiv@f2+2,w
 17090  0D53  00B6               	movwf	??___ftdiv+2
 17091  0D54  1003               	clrc
 17092  0D55  0D35               	rlf	??___ftdiv+1,w
 17093  0D56  0D36               	rlf	??___ftdiv+2,w
 17094  0D57  00B7               	movwf	??___ftdiv+3
 17095  0D58  0837               	movf	??___ftdiv+3,w
 17096  0D59  00BD               	movwf	___ftdiv@sign
 17097  0D5A  08BD               	movf	___ftdiv@sign,f
 17098  0D5B  1D03               	skipz
 17099  0D5C  2D64               	goto	l8502
 17100  0D5D  3000               	movlw	0
 17101  0D5E  00AE               	movwf	?___ftdiv
 17102  0D5F  3000               	movlw	0
 17103  0D60  00AF               	movwf	?___ftdiv+1
 17104  0D61  3000               	movlw	0
 17105  0D62  00B0               	movwf	?___ftdiv+2
 17106  0D63  0008               	return
 17107  0D64                     l8502:	
 17108  0D64  3000               	movlw	0
 17109  0D65  00B9               	movwf	___ftdiv@f3
 17110  0D66  3000               	movlw	0
 17111  0D67  00BA               	movwf	___ftdiv@f3+1
 17112  0D68  3000               	movlw	0
 17113  0D69  00BB               	movwf	___ftdiv@f3+2
 17114  0D6A  3089               	movlw	137
 17115  0D6B  073D               	addwf	___ftdiv@sign,w
 17116  0D6C  00B4               	movwf	??___ftdiv
 17117  0D6D  0834               	movf	??___ftdiv,w
 17118  0D6E  02BC               	subwf	___ftdiv@exp,f
 17119  0D6F  0831               	movf	___ftdiv@f1,w
 17120  0D70  00B4               	movwf	??___ftdiv
 17121  0D71  0832               	movf	___ftdiv@f1+1,w
 17122  0D72  00B5               	movwf	??___ftdiv+1
 17123  0D73  0833               	movf	___ftdiv@f1+2,w
 17124  0D74  00B6               	movwf	??___ftdiv+2
 17125  0D75  3010               	movlw	16
 17126  0D76                     u9165:	
 17127  0D76  36B6               	lsrf	??___ftdiv+2,f
 17128  0D77  0CB5               	rrf	??___ftdiv+1,f
 17129  0D78  0CB4               	rrf	??___ftdiv,f
 17130  0D79  0B89               	decfsz	9,f
 17131  0D7A  2D76               	goto	u9165
 17132  0D7B  0834               	movf	??___ftdiv,w
 17133  0D7C  00B7               	movwf	??___ftdiv+3
 17134  0D7D  0837               	movf	??___ftdiv+3,w
 17135  0D7E  00BD               	movwf	___ftdiv@sign
 17136  0D7F  082E               	movf	___ftdiv@f2,w
 17137  0D80  00B4               	movwf	??___ftdiv
 17138  0D81  082F               	movf	___ftdiv@f2+1,w
 17139  0D82  00B5               	movwf	??___ftdiv+1
 17140  0D83  0830               	movf	___ftdiv@f2+2,w
 17141  0D84  00B6               	movwf	??___ftdiv+2
 17142  0D85  3010               	movlw	16
 17143  0D86                     u9175:	
 17144  0D86  36B6               	lsrf	??___ftdiv+2,f
 17145  0D87  0CB5               	rrf	??___ftdiv+1,f
 17146  0D88  0CB4               	rrf	??___ftdiv,f
 17147  0D89  0B89               	decfsz	9,f
 17148  0D8A  2D86               	goto	u9175
 17149  0D8B  0834               	movf	??___ftdiv,w
 17150  0D8C  00B7               	movwf	??___ftdiv+3
 17151  0D8D  0837               	movf	??___ftdiv+3,w
 17152  0D8E  06BD               	xorwf	___ftdiv@sign,f
 17153  0D8F  3080               	movlw	128
 17154  0D90  00B4               	movwf	??___ftdiv
 17155  0D91  0834               	movf	??___ftdiv,w
 17156  0D92  05BD               	andwf	___ftdiv@sign,f
 17157  0D93  17B2               	bsf	___ftdiv@f1+1,7
 17158  0D94  30FF               	movlw	255
 17159  0D95  05B1               	andwf	___ftdiv@f1,f
 17160  0D96  30FF               	movlw	255
 17161  0D97  05B2               	andwf	___ftdiv@f1+1,f
 17162  0D98  3000               	movlw	0
 17163  0D99  05B3               	andwf	___ftdiv@f1+2,f
 17164  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 17165  0D9B  30FF               	movlw	255
 17166  0D9C  05AE               	andwf	___ftdiv@f2,f
 17167  0D9D  30FF               	movlw	255
 17168  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 17169  0D9F  3000               	movlw	0
 17170  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 17171  0DA1  3018               	movlw	24
 17172  0DA2  00B4               	movwf	??___ftdiv
 17173  0DA3  0834               	movf	??___ftdiv,w
 17174  0DA4  00B8               	movwf	___ftdiv@cntr
 17175  0DA5                     l8516:	
 17176  0DA5  3001               	movlw	1
 17177  0DA6                     u9185:	
 17178  0DA6  35B9               	lslf	___ftdiv@f3,f
 17179  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 17180  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 17181  0DA9  0B89               	decfsz	9,f
 17182  0DAA  2DA6               	goto	u9185
 17183  0DAB  0830               	movf	___ftdiv@f2+2,w
 17184  0DAC  0233               	subwf	___ftdiv@f1+2,w
 17185  0DAD  1D03               	skipz
 17186  0DAE  2DB5               	goto	u9195
 17187  0DAF  082F               	movf	___ftdiv@f2+1,w
 17188  0DB0  0232               	subwf	___ftdiv@f1+1,w
 17189  0DB1  1D03               	skipz
 17190  0DB2  2DB5               	goto	u9195
 17191  0DB3  082E               	movf	___ftdiv@f2,w
 17192  0DB4  0231               	subwf	___ftdiv@f1,w
 17193  0DB5                     u9195:	
 17194  0DB5  1C03               	skipc
 17195  0DB6  2DBE               	goto	l8524
 17196  0DB7  082E               	movf	___ftdiv@f2,w
 17197  0DB8  02B1               	subwf	___ftdiv@f1,f
 17198  0DB9  082F               	movf	___ftdiv@f2+1,w
 17199  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 17200  0DBB  0830               	movf	___ftdiv@f2+2,w
 17201  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 17202  0DBD  1439               	bsf	___ftdiv@f3,0
 17203  0DBE                     l8524:	
 17204  0DBE  3001               	movlw	1
 17205  0DBF                     u9205:	
 17206  0DBF  35B1               	lslf	___ftdiv@f1,f
 17207  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 17208  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 17209  0DC2  0B89               	decfsz	9,f
 17210  0DC3  2DBF               	goto	u9205
 17211  0DC4  3001               	movlw	1
 17212  0DC5  02B8               	subwf	___ftdiv@cntr,f
 17213  0DC6  1D03               	btfss	3,2
 17214  0DC7  2DA5               	goto	l8516
 17215  0DC8  0839               	movf	___ftdiv@f3,w
 17216  0DC9  00A0               	movwf	___ftpack@arg
 17217  0DCA  083A               	movf	___ftdiv@f3+1,w
 17218  0DCB  00A1               	movwf	___ftpack@arg+1
 17219  0DCC  083B               	movf	___ftdiv@f3+2,w
 17220  0DCD  00A2               	movwf	___ftpack@arg+2
 17221  0DCE  083C               	movf	___ftdiv@exp,w
 17222  0DCF  00B4               	movwf	??___ftdiv
 17223  0DD0  0834               	movf	??___ftdiv,w
 17224  0DD1  00A3               	movwf	___ftpack@exp
 17225  0DD2  083D               	movf	___ftdiv@sign,w
 17226  0DD3  00B5               	movwf	??___ftdiv+1
 17227  0DD4  0835               	movf	??___ftdiv+1,w
 17228  0DD5  00A4               	movwf	___ftpack@sign
 17229  0DD6  3196  2605         	fcall	___ftpack
 17230  0DD8  0020               	movlb	0	; select bank0
 17231  0DD9  0820               	movf	?___ftpack,w
 17232  0DDA  00AE               	movwf	?___ftdiv
 17233  0DDB  0821               	movf	?___ftpack+1,w
 17234  0DDC  00AF               	movwf	?___ftdiv+1
 17235  0DDD  0822               	movf	?___ftpack+2,w
 17236  0DDE  00B0               	movwf	?___ftdiv+2
 17237  0DDF  0008               	return
 17238  0DE0                     __end_of___ftdiv:	
 17239                           
 17240                           	psect	text121
 17241  0389                     __ptext121:	
 17242 ;; *************** function ___ftadd *****************
 17243 ;; Defined at:
 17244 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17245 ;; Parameters:    Size  Location     Type
 17246 ;;  f1              3   33[BANK0 ] float 
 17247 ;;  f2              3   36[BANK0 ] float 
 17248 ;; Auto vars:     Size  Location     Type
 17249 ;;  exp1            1   45[BANK0 ] unsigned char 
 17250 ;;  exp2            1   44[BANK0 ] unsigned char 
 17251 ;;  sign            1   43[BANK0 ] unsigned char 
 17252 ;; Return value:  Size  Location     Type
 17253 ;;                  3   33[BANK0 ] float 
 17254 ;; Registers used:
 17255 ;;		wreg, status,2, status,0, pclath, cstack
 17256 ;; Tracked objects:
 17257 ;;		On entry : 0/0
 17258 ;;		On exit  : 0/0
 17259 ;;		Unchanged: 0/0
 17260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17261 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17262 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17263 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17264 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17265 ;;Total ram usage:       13 bytes
 17266 ;; Hardware stack levels used:    1
 17267 ;; Hardware stack levels required when called:    6
 17268 ;; This function calls:
 17269 ;;		___ftpack
 17270 ;; This function is called by:
 17271 ;;		_getDimmerLights_PercentToValue
 17272 ;;		_getDimmerLights_ValueToPercent
 17273 ;; This function uses a non-reentrant model
 17274 ;;
 17275                           
 17276                           
 17277                           ;psect for function ___ftadd
 17278  0389                     ___ftadd:	
 17279                           
 17280                           ;incstack = 0
 17281                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17282  0389  0020               	movlb	0	; select bank0
 17283  038A  0841               	movf	___ftadd@f1,w
 17284  038B  00C7               	movwf	??___ftadd
 17285  038C  0842               	movf	___ftadd@f1+1,w
 17286  038D  00C8               	movwf	??___ftadd+1
 17287  038E  0843               	movf	___ftadd@f1+2,w
 17288  038F  00C9               	movwf	??___ftadd+2
 17289  0390  1003               	clrc
 17290  0391  0D48               	rlf	??___ftadd+1,w
 17291  0392  0D49               	rlf	??___ftadd+2,w
 17292  0393  00CA               	movwf	??___ftadd+3
 17293  0394  084A               	movf	??___ftadd+3,w
 17294  0395  00CD               	movwf	___ftadd@exp1
 17295  0396  0844               	movf	___ftadd@f2,w
 17296  0397  00C7               	movwf	??___ftadd
 17297  0398  0845               	movf	___ftadd@f2+1,w
 17298  0399  00C8               	movwf	??___ftadd+1
 17299  039A  0846               	movf	___ftadd@f2+2,w
 17300  039B  00C9               	movwf	??___ftadd+2
 17301  039C  1003               	clrc
 17302  039D  0D48               	rlf	??___ftadd+1,w
 17303  039E  0D49               	rlf	??___ftadd+2,w
 17304  039F  00CA               	movwf	??___ftadd+3
 17305  03A0  084A               	movf	??___ftadd+3,w
 17306  03A1  00CC               	movwf	___ftadd@exp2
 17307  03A2  084D               	movf	___ftadd@exp1,w
 17308  03A3  1903               	btfsc	3,2
 17309  03A4  2BB1               	goto	l8426
 17310  03A5  084C               	movf	___ftadd@exp2,w
 17311  03A6  024D               	subwf	___ftadd@exp1,w
 17312  03A7  1803               	skipnc
 17313  03A8  2BB8               	goto	l8430
 17314  03A9  034D               	decf	___ftadd@exp1,w
 17315  03AA  3AFF               	xorlw	255
 17316  03AB  074C               	addwf	___ftadd@exp2,w
 17317  03AC  00C7               	movwf	??___ftadd
 17318  03AD  3019               	movlw	25
 17319  03AE  0247               	subwf	??___ftadd,w
 17320  03AF  1C03               	skipc
 17321  03B0  2BB8               	goto	l8430
 17322  03B1                     l8426:	
 17323  03B1  0844               	movf	___ftadd@f2,w
 17324  03B2  00C1               	movwf	?___ftadd
 17325  03B3  0845               	movf	___ftadd@f2+1,w
 17326  03B4  00C2               	movwf	?___ftadd+1
 17327  03B5  0846               	movf	___ftadd@f2+2,w
 17328  03B6  00C3               	movwf	?___ftadd+2
 17329  03B7  0008               	return
 17330  03B8                     l8430:	
 17331  03B8  084C               	movf	___ftadd@exp2,w
 17332  03B9  1903               	btfsc	3,2
 17333  03BA  0008               	return
 17334  03BB  084D               	movf	___ftadd@exp1,w
 17335  03BC  024C               	subwf	___ftadd@exp2,w
 17336  03BD  1803               	skipnc
 17337  03BE  2BC7               	goto	l8436
 17338  03BF  034C               	decf	___ftadd@exp2,w
 17339  03C0  3AFF               	xorlw	255
 17340  03C1  074D               	addwf	___ftadd@exp1,w
 17341  03C2  00C7               	movwf	??___ftadd
 17342  03C3  3019               	movlw	25
 17343  03C4  0247               	subwf	??___ftadd,w
 17344  03C5  1803               	btfsc	3,0
 17345  03C6  0008               	return
 17346  03C7                     l8436:	
 17347  03C7  3006               	movlw	6
 17348  03C8  00C7               	movwf	??___ftadd
 17349  03C9  0847               	movf	??___ftadd,w
 17350  03CA  00CB               	movwf	___ftadd@sign
 17351  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 17352  03CC  17CB               	bsf	___ftadd@sign,7
 17353  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 17354  03CE  174B               	bsf	___ftadd@sign,6
 17355  03CF  17C2               	bsf	___ftadd@f1+1,7
 17356  03D0  30FF               	movlw	255
 17357  03D1  05C1               	andwf	___ftadd@f1,f
 17358  03D2  30FF               	movlw	255
 17359  03D3  05C2               	andwf	___ftadd@f1+1,f
 17360  03D4  3000               	movlw	0
 17361  03D5  05C3               	andwf	___ftadd@f1+2,f
 17362  03D6  17C5               	bsf	___ftadd@f2+1,7
 17363  03D7  30FF               	movlw	255
 17364  03D8  05C4               	andwf	___ftadd@f2,f
 17365  03D9  30FF               	movlw	255
 17366  03DA  05C5               	andwf	___ftadd@f2+1,f
 17367  03DB  3000               	movlw	0
 17368  03DC  05C6               	andwf	___ftadd@f2+2,f
 17369  03DD  084C               	movf	___ftadd@exp2,w
 17370  03DE  024D               	subwf	___ftadd@exp1,w
 17371  03DF  1803               	skipnc
 17372  03E0  2C03               	goto	l8458
 17373  03E1                     l8448:	
 17374  03E1  3001               	movlw	1
 17375  03E2                     u9005:	
 17376  03E2  35C4               	lslf	___ftadd@f2,f
 17377  03E3  0DC5               	rlf	___ftadd@f2+1,f
 17378  03E4  0DC6               	rlf	___ftadd@f2+2,f
 17379  03E5  0B89               	decfsz	9,f
 17380  03E6  2BE2               	goto	u9005
 17381  03E7  3001               	movlw	1
 17382  03E8  02CC               	subwf	___ftadd@exp2,f
 17383  03E9  084C               	movf	___ftadd@exp2,w
 17384  03EA  064D               	xorwf	___ftadd@exp1,w
 17385  03EB  1903               	skipnz
 17386  03EC  2BFE               	goto	l8456
 17387  03ED  3001               	movlw	1
 17388  03EE  02CB               	subwf	___ftadd@sign,f
 17389  03EF  084B               	movf	___ftadd@sign,w
 17390  03F0  3907               	andlw	7
 17391  03F1  1903               	btfsc	3,2
 17392  03F2  2BFE               	goto	l8456
 17393  03F3  2BE1               	goto	l8448
 17394  03F4                     l8454:	
 17395  03F4  3001               	movlw	1
 17396  03F5                     u9035:	
 17397  03F5  36C3               	lsrf	___ftadd@f1+2,f
 17398  03F6  0CC2               	rrf	___ftadd@f1+1,f
 17399  03F7  0CC1               	rrf	___ftadd@f1,f
 17400  03F8  0B89               	decfsz	9,f
 17401  03F9  2BF5               	goto	u9035
 17402  03FA  3001               	movlw	1
 17403  03FB  00C7               	movwf	??___ftadd
 17404  03FC  0847               	movf	??___ftadd,w
 17405  03FD  07CD               	addwf	___ftadd@exp1,f
 17406  03FE                     l8456:	
 17407  03FE  084D               	movf	___ftadd@exp1,w
 17408  03FF  064C               	xorwf	___ftadd@exp2,w
 17409  0400  1903               	btfsc	3,2
 17410  0401  2C28               	goto	l2867
 17411  0402  2BF4               	goto	l8454
 17412  0403                     l8458:	
 17413  0403  084D               	movf	___ftadd@exp1,w
 17414  0404  024C               	subwf	___ftadd@exp2,w
 17415  0405  1803               	skipnc
 17416  0406  2C28               	goto	l2867
 17417  0407                     l8460:	
 17418  0407  3001               	movlw	1
 17419  0408                     u9065:	
 17420  0408  35C1               	lslf	___ftadd@f1,f
 17421  0409  0DC2               	rlf	___ftadd@f1+1,f
 17422  040A  0DC3               	rlf	___ftadd@f1+2,f
 17423  040B  0B89               	decfsz	9,f
 17424  040C  2C08               	goto	u9065
 17425  040D  3001               	movlw	1
 17426  040E  02CD               	subwf	___ftadd@exp1,f
 17427  040F  084C               	movf	___ftadd@exp2,w
 17428  0410  064D               	xorwf	___ftadd@exp1,w
 17429  0411  1903               	skipnz
 17430  0412  2C24               	goto	l8468
 17431  0413  3001               	movlw	1
 17432  0414  02CB               	subwf	___ftadd@sign,f
 17433  0415  084B               	movf	___ftadd@sign,w
 17434  0416  3907               	andlw	7
 17435  0417  1903               	btfsc	3,2
 17436  0418  2C24               	goto	l8468
 17437  0419  2C07               	goto	l8460
 17438  041A                     l8466:	
 17439  041A  3001               	movlw	1
 17440  041B                     u9095:	
 17441  041B  36C6               	lsrf	___ftadd@f2+2,f
 17442  041C  0CC5               	rrf	___ftadd@f2+1,f
 17443  041D  0CC4               	rrf	___ftadd@f2,f
 17444  041E  0B89               	decfsz	9,f
 17445  041F  2C1B               	goto	u9095
 17446  0420  3001               	movlw	1
 17447  0421  00C7               	movwf	??___ftadd
 17448  0422  0847               	movf	??___ftadd,w
 17449  0423  07CC               	addwf	___ftadd@exp2,f
 17450  0424                     l8468:	
 17451  0424  084D               	movf	___ftadd@exp1,w
 17452  0425  064C               	xorwf	___ftadd@exp2,w
 17453  0426  1D03               	skipz
 17454  0427  2C1A               	goto	l8466
 17455  0428                     l2867:	
 17456  0428  1FCB               	btfss	___ftadd@sign,7
 17457  0429  2C3A               	goto	l8472
 17458  042A  30FF               	movlw	255
 17459  042B  06C1               	xorwf	___ftadd@f1,f
 17460  042C  30FF               	movlw	255
 17461  042D  06C2               	xorwf	___ftadd@f1+1,f
 17462  042E  30FF               	movlw	255
 17463  042F  06C3               	xorwf	___ftadd@f1+2,f
 17464  0430  3001               	movlw	1
 17465  0431  07C1               	addwf	___ftadd@f1,f
 17466  0432  3000               	movlw	0
 17467  0433  1803               	skipnc
 17468  0434  3001               	movlw	1
 17469  0435  07C2               	addwf	___ftadd@f1+1,f
 17470  0436  3000               	movlw	0
 17471  0437  1803               	skipnc
 17472  0438  3001               	movlw	1
 17473  0439  07C3               	addwf	___ftadd@f1+2,f
 17474  043A                     l8472:	
 17475  043A  1F4B               	btfss	___ftadd@sign,6
 17476  043B  2C4C               	goto	l8476
 17477  043C  30FF               	movlw	255
 17478  043D  06C4               	xorwf	___ftadd@f2,f
 17479  043E  30FF               	movlw	255
 17480  043F  06C5               	xorwf	___ftadd@f2+1,f
 17481  0440  30FF               	movlw	255
 17482  0441  06C6               	xorwf	___ftadd@f2+2,f
 17483  0442  3001               	movlw	1
 17484  0443  07C4               	addwf	___ftadd@f2,f
 17485  0444  3000               	movlw	0
 17486  0445  1803               	skipnc
 17487  0446  3001               	movlw	1
 17488  0447  07C5               	addwf	___ftadd@f2+1,f
 17489  0448  3000               	movlw	0
 17490  0449  1803               	skipnc
 17491  044A  3001               	movlw	1
 17492  044B  07C6               	addwf	___ftadd@f2+2,f
 17493  044C                     l8476:	
 17494  044C  01CB               	clrf	___ftadd@sign
 17495  044D  0841               	movf	___ftadd@f1,w
 17496  044E  07C4               	addwf	___ftadd@f2,f
 17497  044F  0842               	movf	___ftadd@f1+1,w
 17498  0450  3DC5               	addwfc	___ftadd@f2+1,f
 17499  0451  0843               	movf	___ftadd@f1+2,w
 17500  0452  3DC6               	addwfc	___ftadd@f2+2,f
 17501  0453  1FC6               	btfss	___ftadd@f2+2,7
 17502  0454  2C67               	goto	l8486
 17503  0455  30FF               	movlw	255
 17504  0456  06C4               	xorwf	___ftadd@f2,f
 17505  0457  30FF               	movlw	255
 17506  0458  06C5               	xorwf	___ftadd@f2+1,f
 17507  0459  30FF               	movlw	255
 17508  045A  06C6               	xorwf	___ftadd@f2+2,f
 17509  045B  3001               	movlw	1
 17510  045C  07C4               	addwf	___ftadd@f2,f
 17511  045D  3000               	movlw	0
 17512  045E  1803               	skipnc
 17513  045F  3001               	movlw	1
 17514  0460  07C5               	addwf	___ftadd@f2+1,f
 17515  0461  3000               	movlw	0
 17516  0462  1803               	skipnc
 17517  0463  3001               	movlw	1
 17518  0464  07C6               	addwf	___ftadd@f2+2,f
 17519  0465  01CB               	clrf	___ftadd@sign
 17520  0466  0ACB               	incf	___ftadd@sign,f
 17521  0467                     l8486:	
 17522  0467  0844               	movf	___ftadd@f2,w
 17523  0468  00A0               	movwf	___ftpack@arg
 17524  0469  0845               	movf	___ftadd@f2+1,w
 17525  046A  00A1               	movwf	___ftpack@arg+1
 17526  046B  0846               	movf	___ftadd@f2+2,w
 17527  046C  00A2               	movwf	___ftpack@arg+2
 17528  046D  084D               	movf	___ftadd@exp1,w
 17529  046E  00C7               	movwf	??___ftadd
 17530  046F  0847               	movf	??___ftadd,w
 17531  0470  00A3               	movwf	___ftpack@exp
 17532  0471  084B               	movf	___ftadd@sign,w
 17533  0472  00C8               	movwf	??___ftadd+1
 17534  0473  0848               	movf	??___ftadd+1,w
 17535  0474  00A4               	movwf	___ftpack@sign
 17536  0475  3196  2605         	fcall	___ftpack
 17537  0477  0020               	movlb	0	; select bank0
 17538  0478  0820               	movf	?___ftpack,w
 17539  0479  00C1               	movwf	?___ftadd
 17540  047A  0821               	movf	?___ftpack+1,w
 17541  047B  00C2               	movwf	?___ftadd+1
 17542  047C  0822               	movf	?___ftpack+2,w
 17543  047D  00C3               	movwf	?___ftadd+2
 17544  047E  0008               	return
 17545  047F                     __end_of___ftadd:	
 17546                           
 17547                           	psect	text122
 17548  1070                     __ptext122:	
 17549 ;; *************** function ___awtoft *****************
 17550 ;; Defined at:
 17551 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17552 ;; Parameters:    Size  Location     Type
 17553 ;;  c               2    8[BANK0 ] int 
 17554 ;; Auto vars:     Size  Location     Type
 17555 ;;  sign            1   13[BANK0 ] unsigned char 
 17556 ;; Return value:  Size  Location     Type
 17557 ;;                  3    8[BANK0 ] float 
 17558 ;; Registers used:
 17559 ;;		wreg, status,2, status,0, pclath, cstack
 17560 ;; Tracked objects:
 17561 ;;		On entry : 0/0
 17562 ;;		On exit  : 0/0
 17563 ;;		Unchanged: 0/0
 17564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17565 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17567 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17568 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17569 ;;Total ram usage:        6 bytes
 17570 ;; Hardware stack levels used:    1
 17571 ;; Hardware stack levels required when called:    6
 17572 ;; This function calls:
 17573 ;;		___ftpack
 17574 ;; This function is called by:
 17575 ;;		_getDimmerLights_PercentToValue
 17576 ;;		_getDimmerLights_ValueToPercent
 17577 ;; This function uses a non-reentrant model
 17578 ;;
 17579                           
 17580                           
 17581                           ;psect for function ___awtoft
 17582  1070                     ___awtoft:	
 17583                           
 17584                           ;incstack = 0
 17585                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17586  1070  0020               	movlb	0	; select bank0
 17587  1071  01AD               	clrf	___awtoft@sign
 17588  1072  1FA9               	btfss	___awtoft@c+1,7
 17589  1073  287B               	goto	l8414
 17590  1074  09A8               	comf	___awtoft@c,f
 17591  1075  09A9               	comf	___awtoft@c+1,f
 17592  1076  0AA8               	incf	___awtoft@c,f
 17593  1077  1903               	skipnz
 17594  1078  0AA9               	incf	___awtoft@c+1,f
 17595  1079  01AD               	clrf	___awtoft@sign
 17596  107A  0AAD               	incf	___awtoft@sign,f
 17597  107B                     l8414:	
 17598  107B  0828               	movf	___awtoft@c,w
 17599  107C  00A0               	movwf	___ftpack@arg
 17600  107D  0829               	movf	___awtoft@c+1,w
 17601  107E  00A1               	movwf	___ftpack@arg+1
 17602  107F  01A2               	clrf	___ftpack@arg+2
 17603  1080  308E               	movlw	142
 17604  1081  00AB               	movwf	??___awtoft
 17605  1082  082B               	movf	??___awtoft,w
 17606  1083  00A3               	movwf	___ftpack@exp
 17607  1084  082D               	movf	___awtoft@sign,w
 17608  1085  00AC               	movwf	??___awtoft+1
 17609  1086  082C               	movf	??___awtoft+1,w
 17610  1087  00A4               	movwf	___ftpack@sign
 17611  1088  3196  2605         	fcall	___ftpack
 17612  108A  0020               	movlb	0	; select bank0
 17613  108B  0820               	movf	?___ftpack,w
 17614  108C  00A8               	movwf	?___awtoft
 17615  108D  0821               	movf	?___ftpack+1,w
 17616  108E  00A9               	movwf	?___awtoft+1
 17617  108F  0822               	movf	?___ftpack+2,w
 17618  1090  00AA               	movwf	?___awtoft+2
 17619  1091  0008               	return
 17620  1092                     __end_of___awtoft:	
 17621                           
 17622                           	psect	text123
 17623  1605                     __ptext123:	
 17624 ;; *************** function ___ftpack *****************
 17625 ;; Defined at:
 17626 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17627 ;; Parameters:    Size  Location     Type
 17628 ;;  arg             3    0[BANK0 ] unsigned um
 17629 ;;  exp             1    3[BANK0 ] unsigned char 
 17630 ;;  sign            1    4[BANK0 ] unsigned char 
 17631 ;; Auto vars:     Size  Location     Type
 17632 ;;		None
 17633 ;; Return value:  Size  Location     Type
 17634 ;;                  3    0[BANK0 ] float 
 17635 ;; Registers used:
 17636 ;;		wreg, status,2, status,0
 17637 ;; Tracked objects:
 17638 ;;		On entry : 0/0
 17639 ;;		On exit  : 0/0
 17640 ;;		Unchanged: 0/0
 17641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17642 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17644 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17645 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17646 ;;Total ram usage:        8 bytes
 17647 ;; Hardware stack levels used:    1
 17648 ;; Hardware stack levels required when called:    5
 17649 ;; This function calls:
 17650 ;;		Nothing
 17651 ;; This function is called by:
 17652 ;;		___awtoft
 17653 ;;		___ftadd
 17654 ;;		___ftdiv
 17655 ;;		___ftmul
 17656 ;; This function uses a non-reentrant model
 17657 ;;
 17658                           
 17659                           
 17660                           ;psect for function ___ftpack
 17661  1605                     ___ftpack:	
 17662                           
 17663                           ;incstack = 0
 17664                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17665  1605  0020               	movlb	0	; select bank0
 17666  1606  0823               	movf	___ftpack@exp,w
 17667  1607  1903               	btfsc	3,2
 17668  1608  2E0E               	goto	l8282
 17669  1609  0822               	movf	___ftpack@arg+2,w
 17670  160A  0421               	iorwf	___ftpack@arg+1,w
 17671  160B  0420               	iorwf	___ftpack@arg,w
 17672  160C  1D03               	skipz
 17673  160D  2E1F               	goto	l8288
 17674  160E                     l8282:	
 17675  160E  3000               	movlw	0
 17676  160F  00A0               	movwf	?___ftpack
 17677  1610  3000               	movlw	0
 17678  1611  00A1               	movwf	?___ftpack+1
 17679  1612  3000               	movlw	0
 17680  1613  00A2               	movwf	?___ftpack+2
 17681  1614  0008               	return
 17682  1615                     l8286:	
 17683  1615  3001               	movlw	1
 17684  1616  00A5               	movwf	??___ftpack
 17685  1617  0825               	movf	??___ftpack,w
 17686  1618  07A3               	addwf	___ftpack@exp,f
 17687  1619  3001               	movlw	1
 17688  161A                     u8635:	
 17689  161A  36A2               	lsrf	___ftpack@arg+2,f
 17690  161B  0CA1               	rrf	___ftpack@arg+1,f
 17691  161C  0CA0               	rrf	___ftpack@arg,f
 17692  161D  0B89               	decfsz	9,f
 17693  161E  2E1A               	goto	u8635
 17694  161F                     l8288:	
 17695  161F  30FE               	movlw	254
 17696  1620  0522               	andwf	___ftpack@arg+2,w
 17697  1621  1903               	btfsc	3,2
 17698  1622  2E38               	goto	l2838
 17699  1623  2E15               	goto	l8286
 17700  1624                     l8290:	
 17701  1624  3001               	movlw	1
 17702  1625  00A5               	movwf	??___ftpack
 17703  1626  0825               	movf	??___ftpack,w
 17704  1627  07A3               	addwf	___ftpack@exp,f
 17705  1628  3001               	movlw	1
 17706  1629  07A0               	addwf	___ftpack@arg,f
 17707  162A  3000               	movlw	0
 17708  162B  1803               	skipnc
 17709  162C  3001               	movlw	1
 17710  162D  07A1               	addwf	___ftpack@arg+1,f
 17711  162E  3000               	movlw	0
 17712  162F  1803               	skipnc
 17713  1630  3001               	movlw	1
 17714  1631  07A2               	addwf	___ftpack@arg+2,f
 17715  1632  3001               	movlw	1
 17716  1633                     u8655:	
 17717  1633  36A2               	lsrf	___ftpack@arg+2,f
 17718  1634  0CA1               	rrf	___ftpack@arg+1,f
 17719  1635  0CA0               	rrf	___ftpack@arg,f
 17720  1636  0B89               	decfsz	9,f
 17721  1637  2E33               	goto	u8655
 17722  1638                     l2838:	
 17723  1638  30FF               	movlw	255
 17724  1639  0522               	andwf	___ftpack@arg+2,w
 17725  163A  1903               	btfsc	3,2
 17726  163B  2E45               	goto	l8298
 17727  163C  2E24               	goto	l8290
 17728  163D                     l8296:	
 17729  163D  3001               	movlw	1
 17730  163E  02A3               	subwf	___ftpack@exp,f
 17731  163F  3001               	movlw	1
 17732  1640                     u8675:	
 17733  1640  35A0               	lslf	___ftpack@arg,f
 17734  1641  0DA1               	rlf	___ftpack@arg+1,f
 17735  1642  0DA2               	rlf	___ftpack@arg+2,f
 17736  1643  0B89               	decfsz	9,f
 17737  1644  2E40               	goto	u8675
 17738  1645                     l8298:	
 17739  1645  1FA1               	btfss	___ftpack@arg+1,7
 17740  1646  2E3D               	goto	l8296
 17741  1647  1823               	btfsc	___ftpack@exp,0
 17742  1648  2E4F               	goto	l2844
 17743  1649  30FF               	movlw	255
 17744  164A  05A0               	andwf	___ftpack@arg,f
 17745  164B  307F               	movlw	127
 17746  164C  05A1               	andwf	___ftpack@arg+1,f
 17747  164D  30FF               	movlw	255
 17748  164E  05A2               	andwf	___ftpack@arg+2,f
 17749  164F                     l2844:	
 17750  164F  1003               	clrc
 17751  1650  0CA3               	rrf	___ftpack@exp,f
 17752  1651  0823               	movf	___ftpack@exp,w
 17753  1652  00A5               	movwf	??___ftpack
 17754  1653  01A6               	clrf	??___ftpack+1
 17755  1654  01A7               	clrf	??___ftpack+2
 17756  1655  3010               	movlw	16
 17757  1656                     u8705:	
 17758  1656  35A5               	lslf	??___ftpack,f
 17759  1657  0DA6               	rlf	??___ftpack+1,f
 17760  1658  0DA7               	rlf	??___ftpack+2,f
 17761  1659  0B89               	decfsz	9,f
 17762  165A  2E56               	goto	u8705
 17763  165B  0825               	movf	??___ftpack,w
 17764  165C  04A0               	iorwf	___ftpack@arg,f
 17765  165D  0826               	movf	??___ftpack+1,w
 17766  165E  04A1               	iorwf	___ftpack@arg+1,f
 17767  165F  0827               	movf	??___ftpack+2,w
 17768  1660  04A2               	iorwf	___ftpack@arg+2,f
 17769  1661  0824               	movf	___ftpack@sign,w
 17770  1662  1903               	btfsc	3,2
 17771  1663  0008               	return
 17772  1664  17A2               	bsf	___ftpack@arg+2,7
 17773  1665  0008               	return
 17774  1666                     __end_of___ftpack:	
 17775                           
 17776                           	psect	text124
 17777  1B5C                     __ptext124:	
 17778 ;; *************** function _DelayOff_Main *****************
 17779 ;; Defined at:
 17780 ;;		line 41 in file "../src/DelayOff_B1.c"
 17781 ;; Parameters:    Size  Location     Type
 17782 ;;		None
 17783 ;; Auto vars:     Size  Location     Type
 17784 ;;		None
 17785 ;; Return value:  Size  Location     Type
 17786 ;;		None               void
 17787 ;; Registers used:
 17788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17789 ;; Tracked objects:
 17790 ;;		On entry : 0/0
 17791 ;;		On exit  : 0/0
 17792 ;;		Unchanged: 0/0
 17793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17798 ;;Total ram usage:        0 bytes
 17799 ;; Hardware stack levels used:    1
 17800 ;; Hardware stack levels required when called:    9
 17801 ;; This function calls:
 17802 ;;		_DlyOff_Main
 17803 ;; This function is called by:
 17804 ;;		_main
 17805 ;; This function uses a non-reentrant model
 17806 ;;
 17807                           
 17808                           
 17809                           ;psect for function _DelayOff_Main
 17810  1B5C                     _DelayOff_Main:	
 17811                           
 17812                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17813                           
 17814                           ;incstack = 0
 17815                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17816  1B5C  3001               	movlw	1
 17817  1B5D  3188  20E9         	fcall	_DlyOff_Main
 17818  1B5F  0008               	return
 17819  1B60                     __end_of_DelayOff_Main:	
 17820                           
 17821                           	psect	text125
 17822  08E9                     __ptext125:	
 17823 ;; *************** function _DlyOff_Main *****************
 17824 ;; Defined at:
 17825 ;;		line 61 in file "../src/DelayOff_B1.c"
 17826 ;; Parameters:    Size  Location     Type
 17827 ;;  sw              1    wreg     unsigned char 
 17828 ;; Auto vars:     Size  Location     Type
 17829 ;;  sw              1   71[BANK0 ] unsigned char 
 17830 ;; Return value:  Size  Location     Type
 17831 ;;		None               void
 17832 ;; Registers used:
 17833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17834 ;; Tracked objects:
 17835 ;;		On entry : 0/0
 17836 ;;		On exit  : 0/0
 17837 ;;		Unchanged: 0/0
 17838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17841 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17842 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17843 ;;Total ram usage:        3 bytes
 17844 ;; Hardware stack levels used:    1
 17845 ;; Hardware stack levels required when called:    8
 17846 ;; This function calls:
 17847 ;;		_DelayOffPointSelect
 17848 ;;		_getDimmerLights_Status
 17849 ;;		_setDimmerLights_SwOff
 17850 ;;		_setDimmerLights_SwOn
 17851 ;;		_setProductData
 17852 ;; This function is called by:
 17853 ;;		_DelayOff_Main
 17854 ;; This function uses a non-reentrant model
 17855 ;;
 17856                           
 17857                           
 17858                           ;psect for function _DlyOff_Main
 17859  08E9                     _DlyOff_Main:	
 17860                           
 17861                           ;incstack = 0
 17862                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17863                           ;DlyOff_Main@sw stored from wreg
 17864  08E9  0020               	movlb	0	; select bank0
 17865  08EA  00E7               	movwf	DlyOff_Main@sw
 17866                           
 17867                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17868  08EB  0867               	movf	DlyOff_Main@sw,w
 17869  08EC  319C  2415  3188   	fcall	_DelayOffPointSelect
 17870                           
 17871                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17872  08EF  0021               	movlb	1	; select bank1
 17873  08F0  0849               	movf	_DelayOff^(0+128),w
 17874  08F1  0086               	movwf	6
 17875  08F2  3001               	movlw	1	; select bank2/3
 17876  08F3  0087               	movwf	7
 17877  08F4  1C81               	btfss	1,1
 17878  08F5  0008               	return
 17879                           
 17880                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17881  08F6  0849               	movf	_DelayOff^(0+128),w
 17882  08F7  3E02               	addlw	2
 17883  08F8  0086               	movwf	6
 17884  08F9  3001               	movlw	1	; select bank2/3
 17885  08FA  0087               	movwf	7
 17886  08FB  3001               	movlw	1
 17887  08FC  0781               	addwf	1,f
 17888  08FD  3141               	addfsr 1,1
 17889  08FE  1803               	skipnc
 17890  08FF  0A81               	incf	1,f
 17891                           
 17892                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17893  0900  0849               	movf	_DelayOff^(0+128),w
 17894  0901  3E02               	addlw	2
 17895  0902  0086               	movwf	6
 17896  0903  3001               	movlw	1	; select bank2/3
 17897  0904  0087               	movwf	7
 17898  0905  3F40               	moviw [0]fsr1
 17899  0906  0020               	movlb	0	; select bank0
 17900  0907  00E5               	movwf	??_DlyOff_Main
 17901  0908  3F41               	moviw [1]fsr1
 17902  0909  00E6               	movwf	??_DlyOff_Main+1
 17903  090A  300B               	movlw	11
 17904  090B  0266               	subwf	??_DlyOff_Main+1,w
 17905  090C  30B8               	movlw	184
 17906  090D  1903               	skipnz
 17907  090E  0265               	subwf	??_DlyOff_Main,w
 17908  090F  1C03               	skipc
 17909  0910  0008               	return
 17910                           
 17911                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17912  0911  0021               	movlb	1	; select bank1
 17913  0912  0849               	movf	_DelayOff^(0+128),w
 17914  0913  3E02               	addlw	2
 17915  0914  0086               	movwf	6
 17916  0915  3001               	movlw	1	; select bank2/3
 17917  0916  0087               	movwf	7
 17918  0917  3000               	movlw	0
 17919  0918  3FC0               	movwi [0]fsr1
 17920  0919  3FC1               	movwi [1]fsr1
 17921                           
 17922                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17923  091A  3001               	movlw	1
 17924  091B  0020               	movlb	0	; select bank0
 17925  091C  00E5               	movwf	??_DlyOff_Main
 17926  091D  0021               	movlb	1	; select bank1
 17927  091E  0849               	movf	_DelayOff^(0+128),w
 17928  091F  3E04               	addlw	4
 17929  0920  0086               	movwf	6
 17930  0921  3001               	movlw	1	; select bank2/3
 17931  0922  0087               	movwf	7
 17932  0923  0020               	movlb	0	; select bank0
 17933  0924  0865               	movf	??_DlyOff_Main,w
 17934  0925  0781               	addwf	1,f
 17935                           
 17936                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17937  0926  0021               	movlb	1	; select bank1
 17938  0927  0849               	movf	_DelayOff^(0+128),w
 17939  0928  3E04               	addlw	4
 17940  0929  0086               	movwf	6
 17941  092A  3001               	movlw	1	; select bank2/3
 17942  092B  0087               	movwf	7
 17943  092C  0A49               	incf	_DelayOff^(0+128),w
 17944  092D  0084               	movwf	4
 17945  092E  3001               	movlw	1	; select bank2/3
 17946  092F  0085               	movwf	5
 17947  0930  0800               	movf	0,w
 17948  0931  0201               	subwf	1,w
 17949  0932  1C03               	skipc
 17950  0933  0008               	return
 17951                           
 17952                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17953  0934  0849               	movf	_DelayOff^(0+128),w
 17954  0935  3E04               	addlw	4
 17955  0936  0086               	movwf	6
 17956  0937  3001               	movlw	1	; select bank2/3
 17957  0938  0087               	movwf	7
 17958  0939  0181               	clrf	1
 17959                           
 17960                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17961  093A  0849               	movf	_DelayOff^(0+128),w
 17962  093B  0086               	movwf	6
 17963  093C  3001               	movlw	1	; select bank2/3
 17964  093D  0087               	movwf	7
 17965  093E  1081               	bcf	1,1
 17966                           
 17967                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17968  093F  0020               	movlb	0	; select bank0
 17969  0940  0867               	movf	DlyOff_Main@sw,w
 17970  0941  319C  24D1  3188   	fcall	_getDimmerLights_Status
 17971  0944  3A01               	xorlw	1
 17972  0945  1D03               	skipz
 17973  0946  2951               	goto	l531
 17974                           
 17975                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17976  0947  0020               	movlb	0	; select bank0
 17977  0948  0867               	movf	DlyOff_Main@sw,w
 17978  0949  3192  2219  3188   	fcall	_setDimmerLights_SwOn
 17979                           
 17980                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17981  094C  0020               	movlb	0	; select bank0
 17982  094D  0867               	movf	DlyOff_Main@sw,w
 17983  094E  3192  22BB  3188   	fcall	_setDimmerLights_SwOff
 17984  0951                     l531:	
 17985                           
 17986                           ;DelayOff_B1.c: 78: }
 17987                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17988  0951  0020               	movlb	0	; select bank0
 17989  0952  01E2               	clrf	setProductData@value
 17990  0953  0867               	movf	DlyOff_Main@sw,w
 17991  0954  3E1A               	addlw	26
 17992  0955  319C  242D         	fcall	_setProductData
 17993  0957  0008               	return
 17994  0958                     __end_of_DlyOff_Main:	
 17995                           
 17996                           	psect	text126
 17997  1C2D                     __ptext126:	
 17998 ;; *************** function _setProductData *****************
 17999 ;; Defined at:
 18000 ;;		line 645 in file "../src/Main_B1.c"
 18001 ;; Parameters:    Size  Location     Type
 18002 ;;  address         1    wreg     unsigned char 
 18003 ;;  value           1   66[BANK0 ] unsigned char 
 18004 ;; Auto vars:     Size  Location     Type
 18005 ;;  address         1   68[BANK0 ] unsigned char 
 18006 ;; Return value:  Size  Location     Type
 18007 ;;		None               void
 18008 ;; Registers used:
 18009 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18010 ;; Tracked objects:
 18011 ;;		On entry : 0/0
 18012 ;;		On exit  : 0/0
 18013 ;;		Unchanged: 0/0
 18014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18015 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;Total ram usage:        3 bytes
 18020 ;; Hardware stack levels used:    1
 18021 ;; Hardware stack levels required when called:    5
 18022 ;; This function calls:
 18023 ;;		Nothing
 18024 ;; This function is called by:
 18025 ;;		_DlyOff_Main
 18026 ;;		_setDelayOff_GO
 18027 ;;		_setDimmerLights_OnOff
 18028 ;;		_setDimmerLights_Dimming
 18029 ;;		_setTemp_Main
 18030 ;;		_setLog_Code
 18031 ;;		_setControl_Lights_Table
 18032 ;;		_setRFSW_AdjControl
 18033 ;;		_setRF_DimmerLights
 18034 ;; This function uses a non-reentrant model
 18035 ;;
 18036                           
 18037                           
 18038                           ;psect for function _setProductData
 18039  1C2D                     _setProductData:	
 18040                           
 18041                           ;incstack = 0
 18042                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18043                           ;setProductData@address stored from wreg
 18044  1C2D  0020               	movlb	0	; select bank0
 18045  1C2E  00E4               	movwf	setProductData@address
 18046                           
 18047                           ;Main_B1.c: 646: _product.Data[address] = value;
 18048  1C2F  0862               	movf	setProductData@value,w
 18049  1C30  00E3               	movwf	??_setProductData
 18050  1C31  0864               	movf	setProductData@address,w
 18051  1C32  3E45               	addlw	__product& (0+255)
 18052  1C33  0086               	movwf	6
 18053  1C34  3002               	movlw	2	; select bank4/5
 18054  1C35  0087               	movwf	7
 18055  1C36  0863               	movf	??_setProductData,w
 18056  1C37  0081               	movwf	1
 18057  1C38  0008               	return
 18058  1C39                     __end_of_setProductData:	
 18059                           
 18060                           	psect	text127
 18061  1219                     __ptext127:	
 18062 ;; *************** function _setDimmerLights_SwOn *****************
 18063 ;; Defined at:
 18064 ;;		line 691 in file "../src/Dimmer_B1.c"
 18065 ;; Parameters:    Size  Location     Type
 18066 ;;  sw              1    wreg     unsigned char 
 18067 ;; Auto vars:     Size  Location     Type
 18068 ;;  sw              1   13[BANK0 ] unsigned char 
 18069 ;;  idle            1   14[BANK0 ] unsigned char 
 18070 ;; Return value:  Size  Location     Type
 18071 ;;		None               void
 18072 ;; Registers used:
 18073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18074 ;; Tracked objects:
 18075 ;;		On entry : 0/0
 18076 ;;		On exit  : 0/0
 18077 ;;		Unchanged: 0/0
 18078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18083 ;;Total ram usage:        2 bytes
 18084 ;; Hardware stack levels used:    1
 18085 ;; Hardware stack levels required when called:    7
 18086 ;; This function calls:
 18087 ;;		_DimmerLights_SelectPointer
 18088 ;;		_setBuz
 18089 ;; This function is called by:
 18090 ;;		_DlyOff_Main
 18091 ;;		_setControl_Lights_Table
 18092 ;;		_setRFSW_Control
 18093 ;;		_setRFSW_AdjControl
 18094 ;;		_setSw_Main
 18095 ;; This function uses a non-reentrant model
 18096 ;;
 18097                           
 18098                           
 18099                           ;psect for function _setDimmerLights_SwOn
 18100  1219                     _setDimmerLights_SwOn:	
 18101                           
 18102                           ;incstack = 0
 18103                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18104                           ;setDimmerLights_SwOn@sw stored from wreg
 18105  1219  0020               	movlb	0	; select bank0
 18106  121A  00AD               	movwf	setDimmerLights_SwOn@sw
 18107                           
 18108                           ;Dimmer_B1.c: 692: char idle = 0;
 18109  121B  01AE               	clrf	setDimmerLights_SwOn@idle
 18110                           
 18111                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
 18112  121C  082D               	movf	setDimmerLights_SwOn@sw,w
 18113  121D  319C  2421  3192   	fcall	_DimmerLights_SelectPointer
 18114                           
 18115                           ;Dimmer_B1.c: 718: if (idle == 0) {
 18116  1220  0020               	movlb	0	; select bank0
 18117  1221  08AE               	movf	setDimmerLights_SwOn@idle,f
 18118  1222  1D03               	skipz
 18119  1223  0008               	return
 18120                           
 18121                           ;Dimmer_B1.c: 719: DimmerLights->SwFlag = 1;
 18122  1224  0021               	movlb	1	; select bank1
 18123  1225  084A               	movf	_DimmerLights^(0+128),w
 18124  1226  0086               	movwf	6
 18125  1227  3001               	movlw	1	; select bank2/3
 18126  1228  0087               	movwf	7
 18127  1229  1401               	bsf	1,0
 18128                           
 18129                           ;Dimmer_B1.c: 720: if (DimmerLights->Status == 0) {
 18130  122A  0A4A               	incf	_DimmerLights^(0+128),w
 18131  122B  0086               	movwf	6
 18132  122C  3001               	movlw	1	; select bank2/3
 18133  122D  0087               	movwf	7
 18134  122E  1801               	btfsc	1,0
 18135  122F  2A40               	goto	l8678
 18136                           
 18137                           ;Dimmer_B1.c: 721: DimmerLights->Status = 1;
 18138  1230  0A4A               	incf	_DimmerLights^(0+128),w
 18139  1231  0086               	movwf	6
 18140  1232  3001               	movlw	1	; select bank2/3
 18141  1233  0087               	movwf	7
 18142  1234  1401               	bsf	1,0
 18143                           
 18144                           ;Dimmer_B1.c: 722: DimmerLights->Trigger = 1;
 18145  1235  084A               	movf	_DimmerLights^(0+128),w
 18146  1236  0086               	movwf	6
 18147  1237  3001               	movlw	1	; select bank2/3
 18148  1238  0087               	movwf	7
 18149  1239  1481               	bsf	1,1
 18150                           
 18151                           ;Dimmer_B1.c: 723: DimmerLights->Switch = 1;
 18152  123A  084A               	movf	_DimmerLights^(0+128),w
 18153  123B  0086               	movwf	6
 18154  123C  3001               	movlw	1	; select bank2/3
 18155  123D  0087               	movwf	7
 18156  123E  1501               	bsf	1,2
 18157                           
 18158                           ;Dimmer_B1.c: 724: } else {
 18159  123F  2A45               	goto	l8680
 18160  1240                     l8678:	
 18161                           
 18162                           ;Dimmer_B1.c: 725: DimmerLights->Status = 0;
 18163  1240  0A4A               	incf	_DimmerLights^(0+128),w
 18164  1241  0086               	movwf	6
 18165  1242  3001               	movlw	1	; select bank2/3
 18166  1243  0087               	movwf	7
 18167  1244  1001               	bcf	1,0
 18168  1245                     l8680:	
 18169                           
 18170                           ;Dimmer_B1.c: 726: }
 18171                           ;Dimmer_B1.c: 727: setBuz(1, 100);
 18172  1245  3064               	movlw	100
 18173  1246  0020               	movlb	0	; select bank0
 18174  1247  00A9               	movwf	setBuz@time
 18175  1248  3000               	movlw	0
 18176  1249  00AA               	movwf	setBuz@time+1
 18177  124A  3001               	movlw	1
 18178  124B  3195  2551         	fcall	_setBuz
 18179  124D  0008               	return
 18180  124E                     __end_of_setDimmerLights_SwOn:	
 18181                           
 18182                           	psect	text128
 18183  1551                     __ptext128:	
 18184 ;; *************** function _setBuz *****************
 18185 ;; Defined at:
 18186 ;;		line 22 in file "../src/Buzzer_B1.c"
 18187 ;; Parameters:    Size  Location     Type
 18188 ;;  count           1    wreg     unsigned char 
 18189 ;;  time            2    9[BANK0 ] int 
 18190 ;; Auto vars:     Size  Location     Type
 18191 ;;  count           1   12[BANK0 ] unsigned char 
 18192 ;; Return value:  Size  Location     Type
 18193 ;;		None               void
 18194 ;; Registers used:
 18195 ;;		wreg, status,2, status,0, pclath, cstack
 18196 ;; Tracked objects:
 18197 ;;		On entry : 0/0
 18198 ;;		On exit  : 0/0
 18199 ;;		Unchanged: 0/0
 18200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18204 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18205 ;;Total ram usage:        4 bytes
 18206 ;; Hardware stack levels used:    1
 18207 ;; Hardware stack levels required when called:    6
 18208 ;; This function calls:
 18209 ;;		___awdiv
 18210 ;; This function is called by:
 18211 ;;		_setDimmerLights_SwOn
 18212 ;;		_setDimmerLights_Dimming
 18213 ;;		_my_MainTimer
 18214 ;;		_Exception_Main
 18215 ;;		_setTemp_Main
 18216 ;;		_setLog_Code
 18217 ;;		_setRFSW_Control
 18218 ;;		_setSw_Main
 18219 ;; This function uses a non-reentrant model
 18220 ;;
 18221                           
 18222                           
 18223                           ;psect for function _setBuz
 18224  1551                     _setBuz:	
 18225                           
 18226                           ;incstack = 0
 18227                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18228                           ;setBuz@count stored from wreg
 18229  1551  0020               	movlb	0	; select bank0
 18230  1552  00AC               	movwf	setBuz@count
 18231                           
 18232                           ;Buzzer_B1.c: 23: time /= 20;
 18233  1553  3014               	movlw	20
 18234  1554  00A0               	movwf	___awdiv@divisor
 18235  1555  3000               	movlw	0
 18236  1556  00A1               	movwf	___awdiv@divisor+1
 18237  1557  082A               	movf	setBuz@time+1,w
 18238  1558  01A3               	clrf	___awdiv@dividend+1
 18239  1559  07A3               	addwf	___awdiv@dividend+1,f
 18240  155A  0829               	movf	setBuz@time,w
 18241  155B  01A2               	clrf	___awdiv@dividend
 18242  155C  07A2               	addwf	___awdiv@dividend,f
 18243  155D  3194  24A7  3195   	fcall	___awdiv
 18244  1560  0020               	movlb	0	; select bank0
 18245  1561  0821               	movf	?___awdiv+1,w
 18246  1562  01AA               	clrf	setBuz@time+1
 18247  1563  07AA               	addwf	setBuz@time+1,f
 18248  1564  0820               	movf	?___awdiv,w
 18249  1565  01A9               	clrf	setBuz@time
 18250  1566  07A9               	addwf	setBuz@time,f
 18251                           
 18252                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18253  1567  0022               	movlb	2	; select bank2
 18254  1568  1C20               	btfss	_Buz1^(0+256),0
 18255  1569  0008               	return
 18256                           
 18257                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18258  156A  18A0               	btfsc	_Buz1^(0+256),1
 18259  156B  2D82               	goto	l86
 18260                           
 18261                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18262  156C  14A0               	bsf	_Buz1^(0+256),1
 18263                           
 18264                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18265  156D  01A1               	clrf	(_Buz1^(0+256)+1)
 18266  156E  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18267                           
 18268                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18269  156F  0020               	movlb	0	; select bank0
 18270  1570  082C               	movf	setBuz@count,w
 18271  1571  00AB               	movwf	??_setBuz
 18272  1572  082B               	movf	??_setBuz,w
 18273  1573  0022               	movlb	2	; select bank2
 18274  1574  00A3               	movwf	(_Buz1^(0+256)+3)
 18275                           
 18276                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18277  1575  0020               	movlb	0	; select bank0
 18278  1576  082A               	movf	setBuz@time+1,w
 18279  1577  0022               	movlb	2	; select bank2
 18280  1578  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18281  1579  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18282  157A  0020               	movlb	0	; select bank0
 18283  157B  0829               	movf	setBuz@time,w
 18284  157C  0022               	movlb	2	; select bank2
 18285  157D  01A6               	clrf	(_Buz1^(0+256)+6)
 18286  157E  07A6               	addwf	(_Buz1^(0+256)+6),f
 18287                           
 18288                           ;Buzzer_B1.c: 30: RB3 = 1;
 18289  157F  0020               	movlb	0	; select bank0
 18290  1580  158D               	bsf	13,3	;volatile
 18291                           
 18292                           ;Buzzer_B1.c: 31: } else {
 18293  1581  0008               	return
 18294  1582                     l86:	
 18295                           
 18296                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18297  1582  19A0               	btfsc	_Buz1^(0+256),3
 18298  1583  2D96               	goto	l88
 18299                           
 18300                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18301  1584  15A0               	bsf	_Buz1^(0+256),3
 18302                           
 18303                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18304  1585  0020               	movlb	0	; select bank0
 18305  1586  082C               	movf	setBuz@count,w
 18306  1587  00AB               	movwf	??_setBuz
 18307  1588  082B               	movf	??_setBuz,w
 18308  1589  0022               	movlb	2	; select bank2
 18309  158A  00A4               	movwf	(_Buz1^(0+256)+4)
 18310                           
 18311                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18312  158B  0020               	movlb	0	; select bank0
 18313  158C  082A               	movf	setBuz@time+1,w
 18314  158D  0022               	movlb	2	; select bank2
 18315  158E  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18316  158F  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18317  1590  0020               	movlb	0	; select bank0
 18318  1591  0829               	movf	setBuz@time,w
 18319  1592  0022               	movlb	2	; select bank2
 18320  1593  01A8               	clrf	(_Buz1^(0+256)+8)
 18321  1594  07A8               	addwf	(_Buz1^(0+256)+8),f
 18322                           
 18323                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18324  1595  0008               	return
 18325  1596                     l88:	
 18326  1596  1A20               	btfsc	_Buz1^(0+256),4
 18327  1597  0008               	return
 18328                           
 18329                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18330  1598  1620               	bsf	_Buz1^(0+256),4
 18331                           
 18332                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18333  1599  0020               	movlb	0	; select bank0
 18334  159A  082C               	movf	setBuz@count,w
 18335  159B  00AB               	movwf	??_setBuz
 18336  159C  082B               	movf	??_setBuz,w
 18337  159D  0022               	movlb	2	; select bank2
 18338  159E  00A5               	movwf	(_Buz1^(0+256)+5)
 18339                           
 18340                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18341  159F  0020               	movlb	0	; select bank0
 18342  15A0  082A               	movf	setBuz@time+1,w
 18343  15A1  0022               	movlb	2	; select bank2
 18344  15A2  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18345  15A3  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18346  15A4  0020               	movlb	0	; select bank0
 18347  15A5  0829               	movf	setBuz@time,w
 18348  15A6  0022               	movlb	2	; select bank2
 18349  15A7  01AA               	clrf	(_Buz1^(0+256)+10)
 18350  15A8  07AA               	addwf	(_Buz1^(0+256)+10),f
 18351  15A9  0008               	return
 18352  15AA                     __end_of_setBuz:	
 18353                           
 18354                           	psect	text129
 18355  14A7                     __ptext129:	
 18356 ;; *************** function ___awdiv *****************
 18357 ;; Defined at:
 18358 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18359 ;; Parameters:    Size  Location     Type
 18360 ;;  divisor         2    0[BANK0 ] int 
 18361 ;;  dividend        2    2[BANK0 ] int 
 18362 ;; Auto vars:     Size  Location     Type
 18363 ;;  quotient        2    7[BANK0 ] int 
 18364 ;;  sign            1    6[BANK0 ] unsigned char 
 18365 ;;  counter         1    5[BANK0 ] unsigned char 
 18366 ;; Return value:  Size  Location     Type
 18367 ;;                  2    0[BANK0 ] int 
 18368 ;; Registers used:
 18369 ;;		wreg, status,2, status,0
 18370 ;; Tracked objects:
 18371 ;;		On entry : 0/0
 18372 ;;		On exit  : 0/0
 18373 ;;		Unchanged: 0/0
 18374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18375 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18376 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18379 ;;Total ram usage:        9 bytes
 18380 ;; Hardware stack levels used:    1
 18381 ;; Hardware stack levels required when called:    5
 18382 ;; This function calls:
 18383 ;;		Nothing
 18384 ;; This function is called by:
 18385 ;;		_setBuz
 18386 ;; This function uses a non-reentrant model
 18387 ;;
 18388                           
 18389                           
 18390                           ;psect for function ___awdiv
 18391  14A7                     ___awdiv:	
 18392                           
 18393                           ;incstack = 0
 18394                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18395  14A7  0020               	movlb	0	; select bank0
 18396  14A8  01A6               	clrf	___awdiv@sign
 18397  14A9  1FA1               	btfss	___awdiv@divisor+1,7
 18398  14AA  2CB2               	goto	l8316
 18399  14AB  09A0               	comf	___awdiv@divisor,f
 18400  14AC  09A1               	comf	___awdiv@divisor+1,f
 18401  14AD  0AA0               	incf	___awdiv@divisor,f
 18402  14AE  1903               	skipnz
 18403  14AF  0AA1               	incf	___awdiv@divisor+1,f
 18404  14B0  01A6               	clrf	___awdiv@sign
 18405  14B1  0AA6               	incf	___awdiv@sign,f
 18406  14B2                     l8316:	
 18407  14B2  1FA3               	btfss	___awdiv@dividend+1,7
 18408  14B3  2CBD               	goto	l8322
 18409  14B4  09A2               	comf	___awdiv@dividend,f
 18410  14B5  09A3               	comf	___awdiv@dividend+1,f
 18411  14B6  0AA2               	incf	___awdiv@dividend,f
 18412  14B7  1903               	skipnz
 18413  14B8  0AA3               	incf	___awdiv@dividend+1,f
 18414  14B9  3001               	movlw	1
 18415  14BA  00A4               	movwf	??___awdiv
 18416  14BB  0824               	movf	??___awdiv,w
 18417  14BC  06A6               	xorwf	___awdiv@sign,f
 18418  14BD                     l8322:	
 18419  14BD  01A7               	clrf	___awdiv@quotient
 18420  14BE  01A8               	clrf	___awdiv@quotient+1
 18421  14BF  0821               	movf	___awdiv@divisor+1,w
 18422  14C0  0420               	iorwf	___awdiv@divisor,w
 18423  14C1  1903               	skipnz
 18424  14C2  2CEC               	goto	l8344
 18425  14C3  01A5               	clrf	___awdiv@counter
 18426  14C4  0AA5               	incf	___awdiv@counter,f
 18427  14C5                     l8332:	
 18428  14C5  1BA1               	btfsc	___awdiv@divisor+1,7
 18429  14C6  2CD1               	goto	l8334
 18430  14C7  3001               	movlw	1
 18431  14C8                     u8755:	
 18432  14C8  35A0               	lslf	___awdiv@divisor,f
 18433  14C9  0DA1               	rlf	___awdiv@divisor+1,f
 18434  14CA  0B89               	decfsz	9,f
 18435  14CB  2CC8               	goto	u8755
 18436  14CC  3001               	movlw	1
 18437  14CD  00A4               	movwf	??___awdiv
 18438  14CE  0824               	movf	??___awdiv,w
 18439  14CF  07A5               	addwf	___awdiv@counter,f
 18440  14D0  2CC5               	goto	l8332
 18441  14D1                     l8334:	
 18442  14D1  3001               	movlw	1
 18443  14D2                     u8775:	
 18444  14D2  35A7               	lslf	___awdiv@quotient,f
 18445  14D3  0DA8               	rlf	___awdiv@quotient+1,f
 18446  14D4  0B89               	decfsz	9,f
 18447  14D5  2CD2               	goto	u8775
 18448  14D6  0821               	movf	___awdiv@divisor+1,w
 18449  14D7  0223               	subwf	___awdiv@dividend+1,w
 18450  14D8  1D03               	skipz
 18451  14D9  2CDC               	goto	u8785
 18452  14DA  0820               	movf	___awdiv@divisor,w
 18453  14DB  0222               	subwf	___awdiv@dividend,w
 18454  14DC                     u8785:	
 18455  14DC  1C03               	skipc
 18456  14DD  2CE3               	goto	l8340
 18457  14DE  0820               	movf	___awdiv@divisor,w
 18458  14DF  02A2               	subwf	___awdiv@dividend,f
 18459  14E0  0821               	movf	___awdiv@divisor+1,w
 18460  14E1  3BA3               	subwfb	___awdiv@dividend+1,f
 18461  14E2  1427               	bsf	___awdiv@quotient,0
 18462  14E3                     l8340:	
 18463  14E3  3001               	movlw	1
 18464  14E4                     u8795:	
 18465  14E4  36A1               	lsrf	___awdiv@divisor+1,f
 18466  14E5  0CA0               	rrf	___awdiv@divisor,f
 18467  14E6  0B89               	decfsz	9,f
 18468  14E7  2CE4               	goto	u8795
 18469  14E8  3001               	movlw	1
 18470  14E9  02A5               	subwf	___awdiv@counter,f
 18471  14EA  1D03               	btfss	3,2
 18472  14EB  2CD1               	goto	l8334
 18473  14EC                     l8344:	
 18474  14EC  0826               	movf	___awdiv@sign,w
 18475  14ED  1903               	btfsc	3,2
 18476  14EE  2CF4               	goto	l8348
 18477  14EF  09A7               	comf	___awdiv@quotient,f
 18478  14F0  09A8               	comf	___awdiv@quotient+1,f
 18479  14F1  0AA7               	incf	___awdiv@quotient,f
 18480  14F2  1903               	skipnz
 18481  14F3  0AA8               	incf	___awdiv@quotient+1,f
 18482  14F4                     l8348:	
 18483  14F4  0828               	movf	___awdiv@quotient+1,w
 18484  14F5  01A1               	clrf	?___awdiv+1
 18485  14F6  07A1               	addwf	?___awdiv+1,f
 18486  14F7  0827               	movf	___awdiv@quotient,w
 18487  14F8  01A0               	clrf	?___awdiv
 18488  14F9  07A0               	addwf	?___awdiv,f
 18489  14FA  0008               	return
 18490  14FB                     __end_of___awdiv:	
 18491                           
 18492                           	psect	text130
 18493  12BB                     __ptext130:	
 18494 ;; *************** function _setDimmerLights_SwOff *****************
 18495 ;; Defined at:
 18496 ;;		line 732 in file "../src/Dimmer_B1.c"
 18497 ;; Parameters:    Size  Location     Type
 18498 ;;  sw              1    wreg     unsigned char 
 18499 ;; Auto vars:     Size  Location     Type
 18500 ;;  sw              1    2[BANK0 ] unsigned char 
 18501 ;; Return value:  Size  Location     Type
 18502 ;;		None               void
 18503 ;; Registers used:
 18504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18505 ;; Tracked objects:
 18506 ;;		On entry : 0/0
 18507 ;;		On exit  : 0/0
 18508 ;;		Unchanged: 0/0
 18509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18511 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18513 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18514 ;;Total ram usage:        1 bytes
 18515 ;; Hardware stack levels used:    1
 18516 ;; Hardware stack levels required when called:    6
 18517 ;; This function calls:
 18518 ;;		_DimmerLights_SelectPointer
 18519 ;; This function is called by:
 18520 ;;		_DlyOff_Main
 18521 ;;		_Exception_Main
 18522 ;;		_setControl_Lights_Table
 18523 ;;		_setRFSW_Control
 18524 ;;		_setRFSW_AdjControl
 18525 ;;		_setSw_Main
 18526 ;; This function uses a non-reentrant model
 18527 ;;
 18528                           
 18529                           
 18530                           ;psect for function _setDimmerLights_SwOff
 18531  12BB                     _setDimmerLights_SwOff:	
 18532                           
 18533                           ;incstack = 0
 18534                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18535                           ;setDimmerLights_SwOff@sw stored from wreg
 18536  12BB  0020               	movlb	0	; select bank0
 18537  12BC  00A2               	movwf	setDimmerLights_SwOff@sw
 18538                           
 18539                           ;Dimmer_B1.c: 733: DimmerLights_SelectPointer(sw);
 18540  12BD  0822               	movf	setDimmerLights_SwOff@sw,w
 18541  12BE  319C  2421  3192   	fcall	_DimmerLights_SelectPointer
 18542                           
 18543                           ;Dimmer_B1.c: 735: if (DimmerLights->SwFlag == 1) {
 18544  12C1  0021               	movlb	1	; select bank1
 18545  12C2  084A               	movf	_DimmerLights^(0+128),w
 18546  12C3  0086               	movwf	6
 18547  12C4  3001               	movlw	1	; select bank2/3
 18548  12C5  0087               	movwf	7
 18549  12C6  1C01               	btfss	1,0
 18550  12C7  0008               	return
 18551                           
 18552                           ;Dimmer_B1.c: 736: DimmerLights->SwFlag = 0;
 18553  12C8  084A               	movf	_DimmerLights^(0+128),w
 18554  12C9  0086               	movwf	6
 18555  12CA  3001               	movlw	1	; select bank2/3
 18556  12CB  0087               	movwf	7
 18557  12CC  1001               	bcf	1,0
 18558                           
 18559                           ;Dimmer_B1.c: 737: if (DimmerLights->Status == 1) {
 18560  12CD  0A4A               	incf	_DimmerLights^(0+128),w
 18561  12CE  0086               	movwf	6
 18562  12CF  3001               	movlw	1	; select bank2/3
 18563  12D0  0087               	movwf	7
 18564  12D1  1C01               	btfss	1,0
 18565  12D2  2AE9               	goto	l8692
 18566                           
 18567                           ;Dimmer_B1.c: 738: if (DimmerLights->DimmingSwFlag == 1) {
 18568  12D3  084A               	movf	_DimmerLights^(0+128),w
 18569  12D4  0086               	movwf	6
 18570  12D5  3001               	movlw	1	; select bank2/3
 18571  12D6  0087               	movwf	7
 18572  12D7  1D81               	btfss	1,3
 18573  12D8  0008               	return
 18574                           
 18575                           ;Dimmer_B1.c: 739: DimmerLights->DimmingSwFlag = 0;
 18576  12D9  084A               	movf	_DimmerLights^(0+128),w
 18577  12DA  0086               	movwf	6
 18578  12DB  3001               	movlw	1	; select bank2/3
 18579  12DC  0087               	movwf	7
 18580  12DD  1181               	bcf	1,3
 18581                           
 18582                           ;Dimmer_B1.c: 741: DimmerLights->DimmingTrigger = 1;
 18583  12DE  084A               	movf	_DimmerLights^(0+128),w
 18584  12DF  0086               	movwf	6
 18585  12E0  3001               	movlw	1	; select bank2/3
 18586  12E1  0087               	movwf	7
 18587  12E2  1601               	bsf	1,4
 18588                           
 18589                           ;Dimmer_B1.c: 742: DimmerLights->DimmingSwitch = 0;
 18590  12E3  084A               	movf	_DimmerLights^(0+128),w
 18591  12E4  0086               	movwf	6
 18592  12E5  3001               	movlw	1	; select bank2/3
 18593  12E6  0087               	movwf	7
 18594  12E7  1281               	bcf	1,5
 18595                           
 18596                           ;Dimmer_B1.c: 743: }
 18597                           ;Dimmer_B1.c: 744: } else {
 18598  12E8  0008               	return
 18599  12E9                     l8692:	
 18600                           
 18601                           ;Dimmer_B1.c: 746: DimmerLights->Trigger = 1;
 18602  12E9  084A               	movf	_DimmerLights^(0+128),w
 18603  12EA  0086               	movwf	6
 18604  12EB  3001               	movlw	1	; select bank2/3
 18605  12EC  0087               	movwf	7
 18606  12ED  1481               	bsf	1,1
 18607                           
 18608                           ;Dimmer_B1.c: 747: DimmerLights->Switch = 0;
 18609  12EE  084A               	movf	_DimmerLights^(0+128),w
 18610  12EF  0086               	movwf	6
 18611  12F0  3001               	movlw	1	; select bank2/3
 18612  12F1  0087               	movwf	7
 18613  12F2  1101               	bcf	1,2
 18614  12F3  0008               	return
 18615  12F4                     __end_of_setDimmerLights_SwOff:	
 18616                           
 18617                           	psect	text131
 18618  1CD1                     __ptext131:	
 18619 ;; *************** function _getDimmerLights_Status *****************
 18620 ;; Defined at:
 18621 ;;		line 1073 in file "../src/Dimmer_B1.c"
 18622 ;; Parameters:    Size  Location     Type
 18623 ;;  lights          1    wreg     unsigned char 
 18624 ;; Auto vars:     Size  Location     Type
 18625 ;;  lights          1    2[BANK0 ] unsigned char 
 18626 ;;  status          1    3[BANK0 ] unsigned char 
 18627 ;; Return value:  Size  Location     Type
 18628 ;;                  1    wreg      unsigned char 
 18629 ;; Registers used:
 18630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18631 ;; Tracked objects:
 18632 ;;		On entry : 0/0
 18633 ;;		On exit  : 0/0
 18634 ;;		Unchanged: 0/0
 18635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18637 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18639 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18640 ;;Total ram usage:        2 bytes
 18641 ;; Hardware stack levels used:    1
 18642 ;; Hardware stack levels required when called:    6
 18643 ;; This function calls:
 18644 ;;		_DimmerLights_SelectPointer
 18645 ;; This function is called by:
 18646 ;;		_DlyOff_Main
 18647 ;;		_Exception_Main
 18648 ;;		_setControl_Lights_Table
 18649 ;;		_setRFSW_Control
 18650 ;;		_setRFSW_AdjControl
 18651 ;; This function uses a non-reentrant model
 18652 ;;
 18653                           
 18654                           
 18655                           ;psect for function _getDimmerLights_Status
 18656  1CD1                     _getDimmerLights_Status:	
 18657                           
 18658                           ;incstack = 0
 18659                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18660                           ;getDimmerLights_Status@lights stored from wreg
 18661  1CD1  0020               	movlb	0	; select bank0
 18662  1CD2  00A2               	movwf	getDimmerLights_Status@lights
 18663                           
 18664                           ;Dimmer_B1.c: 1074: DimmerLights_SelectPointer(lights);
 18665  1CD3  0822               	movf	getDimmerLights_Status@lights,w
 18666  1CD4  319C  2421         	fcall	_DimmerLights_SelectPointer
 18667                           
 18668                           ;Dimmer_B1.c: 1075: char status = DimmerLights->Status == 1 ? 1 : 0;
 18669  1CD6  0021               	movlb	1	; select bank1
 18670  1CD7  0A4A               	incf	_DimmerLights^(0+128),w
 18671  1CD8  0086               	movwf	6
 18672  1CD9  3001               	movlw	1	; select bank2/3
 18673  1CDA  0087               	movwf	7
 18674  1CDB  3000               	movlw	0
 18675  1CDC  1801               	btfsc	1,0
 18676  1CDD  3001               	movlw	1
 18677  1CDE  0020               	movlb	0	; select bank0
 18678  1CDF  00A3               	movwf	getDimmerLights_Status@status
 18679                           
 18680                           ;Dimmer_B1.c: 1076: return status;
 18681  1CE0  0823               	movf	getDimmerLights_Status@status,w
 18682  1CE1  0008               	return
 18683  1CE2                     __end_of_getDimmerLights_Status:	
 18684                           
 18685                           	psect	text132
 18686  1C21                     __ptext132:	
 18687 ;; *************** function _DimmerLights_SelectPointer *****************
 18688 ;; Defined at:
 18689 ;;		line 614 in file "../src/Dimmer_B1.c"
 18690 ;; Parameters:    Size  Location     Type
 18691 ;;  lights          1    wreg     unsigned char 
 18692 ;; Auto vars:     Size  Location     Type
 18693 ;;  lights          1    1[BANK0 ] unsigned char 
 18694 ;; Return value:  Size  Location     Type
 18695 ;;		None               void
 18696 ;; Registers used:
 18697 ;;		wreg
 18698 ;; Tracked objects:
 18699 ;;		On entry : 0/0
 18700 ;;		On exit  : 0/0
 18701 ;;		Unchanged: 0/0
 18702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18707 ;;Total ram usage:        2 bytes
 18708 ;; Hardware stack levels used:    1
 18709 ;; Hardware stack levels required when called:    5
 18710 ;; This function calls:
 18711 ;;		Nothing
 18712 ;; This function is called by:
 18713 ;;		_setDimmerLights_SwOn
 18714 ;;		_setDimmerLights_SwOff
 18715 ;;		_setDimmerLights_DimmingOn
 18716 ;;		_setDimmerLights_Main
 18717 ;;		_getDimmerLights_Status
 18718 ;;		_setDimmerLights_DimmingRun
 18719 ;;		_setDimmerLights_Status
 18720 ;; This function uses a non-reentrant model
 18721 ;;
 18722                           
 18723                           
 18724                           ;psect for function _DimmerLights_SelectPointer
 18725  1C21                     _DimmerLights_SelectPointer:	
 18726                           
 18727                           ;incstack = 0
 18728                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18729                           ;DimmerLights_SelectPointer@lights stored from wreg
 18730  1C21  0020               	movlb	0	; select bank0
 18731  1C22  00A1               	movwf	DimmerLights_SelectPointer@lights
 18732                           
 18733                           ;Dimmer_B1.c: 616: if (lights == 1) {
 18734  1C23  0821               	movf	DimmerLights_SelectPointer@lights,w
 18735  1C24  3A01               	xorlw	1
 18736  1C25  1D03               	skipz
 18737  1C26  0008               	return
 18738                           
 18739                           ;Dimmer_B1.c: 617: DimmerLights = &DimmerLights1;
 18740  1C27  30C7               	movlw	_DimmerLights1& (0+255)
 18741  1C28  00A0               	movwf	??_DimmerLights_SelectPointer
 18742  1C29  0820               	movf	??_DimmerLights_SelectPointer,w
 18743  1C2A  0021               	movlb	1	; select bank1
 18744  1C2B  00CA               	movwf	_DimmerLights^(0+128)
 18745  1C2C  0008               	return
 18746  1C2D                     __end_of_DimmerLights_SelectPointer:	
 18747                           
 18748                           	psect	text133
 18749  1B58                     __ptext133:	
 18750 ;; *************** function _DelayOff_Initialization *****************
 18751 ;; Defined at:
 18752 ;;		line 26 in file "../src/DelayOff_B1.c"
 18753 ;; Parameters:    Size  Location     Type
 18754 ;;		None
 18755 ;; Auto vars:     Size  Location     Type
 18756 ;;		None
 18757 ;; Return value:  Size  Location     Type
 18758 ;;		None               void
 18759 ;; Registers used:
 18760 ;;		wreg, status,2, status,0, pclath, cstack
 18761 ;; Tracked objects:
 18762 ;;		On entry : 0/0
 18763 ;;		On exit  : 0/0
 18764 ;;		Unchanged: 0/0
 18765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18770 ;;Total ram usage:        0 bytes
 18771 ;; Hardware stack levels used:    1
 18772 ;; Hardware stack levels required when called:    7
 18773 ;; This function calls:
 18774 ;;		_DlyOff_Initialization
 18775 ;; This function is called by:
 18776 ;;		_main
 18777 ;; This function uses a non-reentrant model
 18778 ;;
 18779                           
 18780                           
 18781                           ;psect for function _DelayOff_Initialization
 18782  1B58                     _DelayOff_Initialization:	
 18783                           
 18784                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18785                           
 18786                           ;incstack = 0
 18787                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18788  1B58  3001               	movlw	1
 18789  1B59  319B  2385         	fcall	_DlyOff_Initialization
 18790  1B5B  0008               	return
 18791  1B5C                     __end_of_DelayOff_Initialization:	
 18792                           
 18793                           	psect	text134
 18794  1B85                     __ptext134:	
 18795 ;; *************** function _DlyOff_Initialization *****************
 18796 ;; Defined at:
 18797 ;;		line 56 in file "../src/DelayOff_B1.c"
 18798 ;; Parameters:    Size  Location     Type
 18799 ;;  sw              1    wreg     unsigned char 
 18800 ;; Auto vars:     Size  Location     Type
 18801 ;;  sw              1    2[BANK0 ] unsigned char 
 18802 ;; Return value:  Size  Location     Type
 18803 ;;		None               void
 18804 ;; Registers used:
 18805 ;;		wreg, status,2, status,0, pclath, cstack
 18806 ;; Tracked objects:
 18807 ;;		On entry : 0/0
 18808 ;;		On exit  : 0/0
 18809 ;;		Unchanged: 0/0
 18810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18814 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18815 ;;Total ram usage:        1 bytes
 18816 ;; Hardware stack levels used:    1
 18817 ;; Hardware stack levels required when called:    6
 18818 ;; This function calls:
 18819 ;;		_DelayOffPointSelect
 18820 ;; This function is called by:
 18821 ;;		_DelayOff_Initialization
 18822 ;; This function uses a non-reentrant model
 18823 ;;
 18824                           
 18825                           
 18826                           ;psect for function _DlyOff_Initialization
 18827  1B85                     _DlyOff_Initialization:	
 18828                           
 18829                           ;incstack = 0
 18830                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18831                           ;DlyOff_Initialization@sw stored from wreg
 18832  1B85  0020               	movlb	0	; select bank0
 18833  1B86  00A2               	movwf	DlyOff_Initialization@sw
 18834                           
 18835                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18836  1B87  0822               	movf	DlyOff_Initialization@sw,w
 18837  1B88  319C  2415         	fcall	_DelayOffPointSelect
 18838  1B8A  0008               	return
 18839  1B8B                     __end_of_DlyOff_Initialization:	
 18840                           
 18841                           	psect	text135
 18842  1C15                     __ptext135:	
 18843 ;; *************** function _DelayOffPointSelect *****************
 18844 ;; Defined at:
 18845 ;;		line 7 in file "../src/DelayOff_B1.c"
 18846 ;; Parameters:    Size  Location     Type
 18847 ;;  sw              1    wreg     unsigned char 
 18848 ;; Auto vars:     Size  Location     Type
 18849 ;;  sw              1    1[BANK0 ] unsigned char 
 18850 ;; Return value:  Size  Location     Type
 18851 ;;		None               void
 18852 ;; Registers used:
 18853 ;;		wreg
 18854 ;; Tracked objects:
 18855 ;;		On entry : 0/0
 18856 ;;		On exit  : 0/0
 18857 ;;		Unchanged: 0/0
 18858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18860 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18862 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18863 ;;Total ram usage:        2 bytes
 18864 ;; Hardware stack levels used:    1
 18865 ;; Hardware stack levels required when called:    5
 18866 ;; This function calls:
 18867 ;;		Nothing
 18868 ;; This function is called by:
 18869 ;;		_DlyOff_Initialization
 18870 ;;		_DlyOff_Main
 18871 ;;		_setDelayOff_GO
 18872 ;;		_getDelayOff_GO
 18873 ;; This function uses a non-reentrant model
 18874 ;;
 18875                           
 18876                           
 18877                           ;psect for function _DelayOffPointSelect
 18878  1C15                     _DelayOffPointSelect:	
 18879                           
 18880                           ;incstack = 0
 18881                           ; Regs used in _DelayOffPointSelect: [wreg]
 18882                           ;DelayOffPointSelect@sw stored from wreg
 18883  1C15  0020               	movlb	0	; select bank0
 18884  1C16  00A1               	movwf	DelayOffPointSelect@sw
 18885                           
 18886                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18887  1C17  0821               	movf	DelayOffPointSelect@sw,w
 18888  1C18  3A01               	xorlw	1
 18889  1C19  1D03               	skipz
 18890  1C1A  0008               	return
 18891                           
 18892                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18893  1C1B  3066               	movlw	_DlySw1& (0+255)
 18894  1C1C  00A0               	movwf	??_DelayOffPointSelect
 18895  1C1D  0820               	movf	??_DelayOffPointSelect,w
 18896  1C1E  0021               	movlb	1	; select bank1
 18897  1C1F  00C9               	movwf	_DelayOff^(0+128)
 18898  1C20  0008               	return
 18899  1C21                     __end_of_DelayOffPointSelect:	
 18900                           
 18901                           	psect	text136
 18902  07B6                     __ptext136:	
 18903 ;; *************** function _Buzzer_Main *****************
 18904 ;; Defined at:
 18905 ;;		line 46 in file "../src/Buzzer_B1.c"
 18906 ;; Parameters:    Size  Location     Type
 18907 ;;		None
 18908 ;; Auto vars:     Size  Location     Type
 18909 ;;		None
 18910 ;; Return value:  Size  Location     Type
 18911 ;;		None               void
 18912 ;; Registers used:
 18913 ;;		wreg, status,2, status,0
 18914 ;; Tracked objects:
 18915 ;;		On entry : 0/0
 18916 ;;		On exit  : 0/0
 18917 ;;		Unchanged: 0/0
 18918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18922 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18923 ;;Total ram usage:        1 bytes
 18924 ;; Hardware stack levels used:    1
 18925 ;; Hardware stack levels required when called:    5
 18926 ;; This function calls:
 18927 ;;		Nothing
 18928 ;; This function is called by:
 18929 ;;		_main
 18930 ;; This function uses a non-reentrant model
 18931 ;;
 18932                           
 18933                           
 18934                           ;psect for function _Buzzer_Main
 18935  07B6                     _Buzzer_Main:	
 18936                           
 18937                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18938                           
 18939                           ;incstack = 0
 18940                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18941  07B6  0022               	movlb	2	; select bank2
 18942  07B7  1CA0               	btfss	_Buz1^(0+256),1
 18943  07B8  0008               	return
 18944                           
 18945                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18946  07B9  3001               	movlw	1
 18947  07BA  07A1               	addwf	(_Buz1^(0+256)+1),f
 18948  07BB  3000               	movlw	0
 18949  07BC  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 18950                           
 18951                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18952  07BD  0827               	movf	((_Buz1+1)^(0+256)+6),w
 18953  07BE  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 18954  07BF  1D03               	skipz
 18955  07C0  2FC3               	goto	u11295
 18956  07C1  0826               	movf	(_Buz1^(0+256)+6),w
 18957  07C2  0221               	subwf	(_Buz1^(0+256)+1),w
 18958  07C3                     u11295:	
 18959  07C3  1C03               	skipc
 18960  07C4  0008               	return
 18961                           
 18962                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18963  07C5  01A1               	clrf	(_Buz1^(0+256)+1)
 18964  07C6  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18965                           
 18966                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18967  07C7  12A0               	bcf	_Buz1^(0+256),5
 18968  07C8  0020               	movlb	0	; select bank0
 18969  07C9  1D8D               	btfss	13,3	;volatile
 18970  07CA  2FCD               	goto	l9904
 18971  07CB  0022               	movlb	2	; select bank2
 18972  07CC  16A0               	bsf	_Buz1^(0+256),5
 18973  07CD                     l9904:	
 18974                           
 18975                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18976  07CD  0022               	movlb	2	; select bank2
 18977  07CE  1AA0               	btfsc	_Buz1^(0+256),5
 18978  07CF  2FF9               	goto	l96
 18979                           
 18980                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18981  07D0  08A3               	movf	(_Buz1^(0+256)+3),f
 18982  07D1  1D03               	skipz
 18983  07D2  2FF5               	goto	l97
 18984                           
 18985                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18986  07D3  1DA0               	btfss	_Buz1^(0+256),3
 18987  07D4  2FE3               	goto	l98
 18988                           
 18989                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18990  07D5  11A0               	bcf	_Buz1^(0+256),3
 18991                           
 18992                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18993  07D6  0824               	movf	(_Buz1^(0+256)+4),w
 18994  07D7  0020               	movlb	0	; select bank0
 18995  07D8  00A0               	movwf	??_Buzzer_Main
 18996  07D9  0820               	movf	??_Buzzer_Main,w
 18997  07DA  0022               	movlb	2	; select bank2
 18998  07DB  00A3               	movwf	(_Buz1^(0+256)+3)
 18999                           
 19000                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19001  07DC  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19002  07DD  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19003  07DE  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19004  07DF  0828               	movf	(_Buz1^(0+256)+8),w
 19005  07E0  01A6               	clrf	(_Buz1^(0+256)+6)
 19006  07E1  07A6               	addwf	(_Buz1^(0+256)+6),f
 19007                           
 19008                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19009  07E2  0008               	return
 19010  07E3                     l98:	
 19011  07E3  1E20               	btfss	_Buz1^(0+256),4
 19012  07E4  2FF3               	goto	l100
 19013                           
 19014                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19015  07E5  1220               	bcf	_Buz1^(0+256),4
 19016                           
 19017                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19018  07E6  0825               	movf	(_Buz1^(0+256)+5),w
 19019  07E7  0020               	movlb	0	; select bank0
 19020  07E8  00A0               	movwf	??_Buzzer_Main
 19021  07E9  0820               	movf	??_Buzzer_Main,w
 19022  07EA  0022               	movlb	2	; select bank2
 19023  07EB  00A3               	movwf	(_Buz1^(0+256)+3)
 19024                           
 19025                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19026  07EC  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19027  07ED  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19028  07EE  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19029  07EF  082A               	movf	(_Buz1^(0+256)+10),w
 19030  07F0  01A6               	clrf	(_Buz1^(0+256)+6)
 19031  07F1  07A6               	addwf	(_Buz1^(0+256)+6),f
 19032                           
 19033                           ;Buzzer_B1.c: 62: } else {
 19034  07F2  0008               	return
 19035  07F3                     l100:	
 19036                           
 19037                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19038  07F3  10A0               	bcf	_Buz1^(0+256),1
 19039                           
 19040                           ;Buzzer_B1.c: 64: }
 19041                           ;Buzzer_B1.c: 65: } else {
 19042  07F4  0008               	return
 19043  07F5                     l97:	
 19044                           
 19045                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19046  07F5  16A0               	bsf	_Buz1^(0+256),5
 19047                           
 19048                           ;Buzzer_B1.c: 68: RB3 = 1;
 19049  07F6  0020               	movlb	0	; select bank0
 19050  07F7  158D               	bsf	13,3	;volatile
 19051                           
 19052                           ;Buzzer_B1.c: 69: }
 19053                           ;Buzzer_B1.c: 70: } else {
 19054  07F8  0008               	return
 19055  07F9                     l96:	
 19056                           
 19057                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19058  07F9  12A0               	bcf	_Buz1^(0+256),5
 19059                           
 19060                           ;Buzzer_B1.c: 73: RB3 = 0;
 19061  07FA  0020               	movlb	0	; select bank0
 19062  07FB  118D               	bcf	13,3	;volatile
 19063                           
 19064                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19065  07FC  3001               	movlw	1
 19066  07FD  0022               	movlb	2	; select bank2
 19067  07FE  02A3               	subwf	(_Buz1^(0+256)+3),f
 19068  07FF  0008               	return
 19069  0800                     __end_of_Buzzer_Main:	
 19070                           
 19071                           	psect	text137
 19072  1B46                     __ptext137:	
 19073 ;; *************** function _Buzzer_Initialization *****************
 19074 ;; Defined at:
 19075 ;;		line 11 in file "../src/Buzzer_B1.c"
 19076 ;; Parameters:    Size  Location     Type
 19077 ;;		None
 19078 ;; Auto vars:     Size  Location     Type
 19079 ;;		None
 19080 ;; Return value:  Size  Location     Type
 19081 ;;		None               void
 19082 ;; Registers used:
 19083 ;;		None
 19084 ;; Tracked objects:
 19085 ;;		On entry : 0/0
 19086 ;;		On exit  : 0/0
 19087 ;;		Unchanged: 0/0
 19088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19093 ;;Total ram usage:        0 bytes
 19094 ;; Hardware stack levels used:    1
 19095 ;; Hardware stack levels required when called:    5
 19096 ;; This function calls:
 19097 ;;		Nothing
 19098 ;; This function is called by:
 19099 ;;		_main
 19100 ;; This function uses a non-reentrant model
 19101 ;;
 19102                           
 19103                           
 19104                           ;psect for function _Buzzer_Initialization
 19105  1B46                     _Buzzer_Initialization:	
 19106                           
 19107                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19108                           
 19109                           ;incstack = 0
 19110                           ; Regs used in _Buzzer_Initialization: []
 19111  1B46  0022               	movlb	2	; select bank2
 19112  1B47  1420               	bsf	_Buz1^(0+256),0
 19113  1B48  0008               	return
 19114  1B49                     __end_of_Buzzer_Initialization:	
 19115                           
 19116                           	psect	intentry
 19117  0004                     __pintentry:	
 19118 ;; *************** function _ISR *****************
 19119 ;; Defined at:
 19120 ;;		line 116 in file "../src/MCU_B1.c"
 19121 ;; Parameters:    Size  Location     Type
 19122 ;;		None
 19123 ;; Auto vars:     Size  Location     Type
 19124 ;;		None
 19125 ;; Return value:  Size  Location     Type
 19126 ;;		None               void
 19127 ;; Registers used:
 19128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19129 ;; Tracked objects:
 19130 ;;		On entry : 0/0
 19131 ;;		On exit  : 0/0
 19132 ;;		Unchanged: 0/0
 19133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19137 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19138 ;;Total ram usage:        1 bytes
 19139 ;; Hardware stack levels used:    1
 19140 ;; Hardware stack levels required when called:    4
 19141 ;; This function calls:
 19142 ;;		_IOC_ISR
 19143 ;;		_TMR1_ISR
 19144 ;; This function is called by:
 19145 ;;		Interrupt level 1
 19146 ;; This function uses a non-reentrant model
 19147 ;;
 19148                           
 19149  0004                     _ISR:	
 19150                           
 19151                           ;incstack = 0
 19152                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19153  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19154  0005  3180               	pagesel	$
 19155  0006  0020               	movlb	0	; select bank0
 19156  0007  087F               	movf	127,w
 19157  0008  00FC               	movwf	??_ISR
 19158                           
 19159                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19160  0009  0021               	movlb	1	; select bank1
 19161  000A  1C11               	btfss	17,0	;volatile
 19162  000B  2812               	goto	i1l8206
 19163  000C  0020               	movlb	0	; select bank0
 19164  000D  1C11               	btfss	17,0	;volatile
 19165  000E  2812               	goto	i1l8206
 19166                           
 19167                           ;MCU_B1.c: 126: TMR1_ISR();
 19168  000F  319F  27C2  3180   	fcall	_TMR1_ISR
 19169  0012                     i1l8206:	
 19170                           
 19171                           ;MCU_B1.c: 127: }
 19172                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19173  0012  198B               	btfsc	11,3	;volatile
 19174  0013  1C0B               	btfss	11,0	;volatile
 19175  0014  281A               	goto	i1l1206
 19176  0015  0027               	movlb	7	; select bank7
 19177  0016  1D16               	btfss	22,2	;volatile
 19178  0017  281A               	goto	i1l1206
 19179                           
 19180                           ;MCU_B1.c: 139: IOC_ISR();
 19181  0018  319B  23C4         	fcall	_IOC_ISR
 19182  001A                     i1l1206:	
 19183                           ;MCU_B1.c: 140: }
 19184                           ;MCU_B1.c: 148: return;
 19185                           
 19186  001A  087C               	movf	??_ISR,w
 19187  001B  0020               	movlb	0	; select bank0
 19188  001C  00FF               	movwf	127
 19189  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19190  001E  0009               	retfie
 19191  001F                     __end_of_ISR:	
 19192                           
 19193                           	psect	text139
 19194  1FC2                     __ptext139:	
 19195 ;; *************** function _TMR1_ISR *****************
 19196 ;; Defined at:
 19197 ;;		line 236 in file "../src/MCU_B1.c"
 19198 ;; Parameters:    Size  Location     Type
 19199 ;;		None
 19200 ;; Auto vars:     Size  Location     Type
 19201 ;;		None
 19202 ;; Return value:  Size  Location     Type
 19203 ;;		None               void
 19204 ;; Registers used:
 19205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19206 ;; Tracked objects:
 19207 ;;		On entry : 0/0
 19208 ;;		On exit  : 0/0
 19209 ;;		Unchanged: 0/0
 19210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19215 ;;Total ram usage:        0 bytes
 19216 ;; Hardware stack levels used:    1
 19217 ;; Hardware stack levels required when called:    1
 19218 ;; This function calls:
 19219 ;;		_DimmerLights_TMR_1
 19220 ;; This function is called by:
 19221 ;;		_ISR
 19222 ;; This function uses a non-reentrant model
 19223 ;;
 19224                           
 19225                           
 19226                           ;psect for function _TMR1_ISR
 19227  1FC2                     _TMR1_ISR:	
 19228                           
 19229                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19230                           
 19231                           ;incstack = 0
 19232                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19233  1FC2  3189  2158  319F   	fcall	_DimmerLights_TMR_1
 19234                           
 19235                           ;MCU_B1.c: 268: Timer1.Count++;
 19236  1FC5  3001               	movlw	1
 19237  1FC6  0022               	movlb	2	; select bank2
 19238  1FC7  07B2               	addwf	(_Timer1^(0+256)+1),f
 19239  1FC8  3000               	movlw	0
 19240  1FC9  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19241                           
 19242                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19243  1FCA  3001               	movlw	1
 19244  1FCB  3E31               	addlw	_Timer1& (0+255)
 19245  1FCC  0086               	movwf	6
 19246  1FCD  3001               	movlw	1	; select bank2/3
 19247  1FCE  0087               	movwf	7
 19248  1FCF  3F40               	moviw [0]fsr1
 19249  1FD0  3AC8               	xorlw	200
 19250  1FD1  1D03               	skipz
 19251  1FD2  2FD5               	goto	u773_25
 19252  1FD3  3F41               	moviw [1]fsr1
 19253  1FD4  3A00               	xorlw	0
 19254  1FD5                     u773_25:	
 19255  1FD5  1D03               	skipz
 19256  1FD6  2FDA               	goto	i1l7712
 19257                           
 19258                           ;MCU_B1.c: 270: Timer1.Count = 0;
 19259  1FD7  01B2               	clrf	(_Timer1^(0+256)+1)
 19260  1FD8  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19261                           
 19262                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 19263  1FD9  1431               	bsf	_Timer1^(0+256),0
 19264  1FDA                     i1l7712:	
 19265                           
 19266                           ;MCU_B1.c: 272: }
 19267                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 19268  1FDA  30FA               	movlw	250
 19269  1FDB  0020               	movlb	0	; select bank0
 19270  1FDC  0097               	movwf	23	;volatile
 19271                           
 19272                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 19273  1FDD  3038               	movlw	56
 19274  1FDE  0096               	movwf	22	;volatile
 19275                           
 19276                           ;MCU_B1.c: 276: TMR1IF = 0;
 19277  1FDF  1011               	bcf	17,0	;volatile
 19278  1FE0  0008               	return
 19279  1FE1                     __end_of_TMR1_ISR:	
 19280                           
 19281                           	psect	text140
 19282  0958                     __ptext140:	
 19283 ;; *************** function _DimmerLights_TMR_1 *****************
 19284 ;; Defined at:
 19285 ;;		line 1380 in file "../src/Dimmer_B1.c"
 19286 ;; Parameters:    Size  Location     Type
 19287 ;;		None
 19288 ;; Auto vars:     Size  Location     Type
 19289 ;;		None
 19290 ;; Return value:  Size  Location     Type
 19291 ;;		None               void
 19292 ;; Registers used:
 19293 ;;		wreg, status,2, status,0
 19294 ;; Tracked objects:
 19295 ;;		On entry : 0/0
 19296 ;;		On exit  : 0/0
 19297 ;;		Unchanged: 0/0
 19298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19301 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19303 ;;Total ram usage:        1 bytes
 19304 ;; Hardware stack levels used:    1
 19305 ;; This function calls:
 19306 ;;		Nothing
 19307 ;; This function is called by:
 19308 ;;		_TMR1_ISR
 19309 ;; This function uses a non-reentrant model
 19310 ;;
 19311                           
 19312                           
 19313                           ;psect for function _DimmerLights_TMR_1
 19314  0958                     _DimmerLights_TMR_1:	
 19315                           
 19316                           ;Dimmer_B1.c: 1382: if (DimmerIntr1.Start == 1) {
 19317                           
 19318                           ;incstack = 0
 19319                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19320  0958  0021               	movlb	1	; select bank1
 19321  0959  1D3B               	btfss	_DimmerIntr1^(0+128),2
 19322  095A  297D               	goto	i1l841
 19323                           
 19324                           ;Dimmer_B1.c: 1383: DimmerIntr1.Count++;
 19325  095B  3001               	movlw	1
 19326  095C  00F0               	movwf	??_DimmerLights_TMR_1
 19327  095D  0870               	movf	??_DimmerLights_TMR_1,w
 19328  095E  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 19329                           
 19330                           ;Dimmer_B1.c: 1385: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 19331  095F  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19332  0960  0646               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19333  0961  1D03               	skipz
 19334  0962  2965               	goto	i1l7140
 19335                           
 19336                           ;Dimmer_B1.c: 1386: DimmerIntr1.Count = 0;
 19337  0963  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19338                           
 19339                           ;Dimmer_B1.c: 1387: DimmerIntr1.Start = 0;
 19340  0964  113B               	bcf	_DimmerIntr1^(0+128),2
 19341  0965                     i1l7140:	
 19342                           
 19343                           ;Dimmer_B1.c: 1388: }
 19344                           ;Dimmer_B1.c: 1402: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19345  0965  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19346  0966  0643               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19347  0967  1903               	btfsc	3,2
 19348                           
 19349                           ;Dimmer_B1.c: 1403: if (DimmerIntr1.ControlStatus == 1) {
 19350  0968  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19351  0969  296C               	goto	i1l7146
 19352                           
 19353                           ;Dimmer_B1.c: 1404: RB1 = 0;
 19354  096A  0020               	movlb	0	; select bank0
 19355  096B  108D               	bcf	13,1	;volatile
 19356  096C                     i1l7146:	
 19357                           
 19358                           ;Dimmer_B1.c: 1405: }
 19359                           ;Dimmer_B1.c: 1406: }
 19360                           ;Dimmer_B1.c: 1409: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19361  096C  0021               	movlb	1	; select bank1
 19362  096D  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19363  096E  0644               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19364  096F  1903               	btfsc	3,2
 19365                           
 19366                           ;Dimmer_B1.c: 1410: if (DimmerIntr1.ControlStatus == 1) {
 19367  0970  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19368  0971  2974               	goto	i1l7152
 19369                           
 19370                           ;Dimmer_B1.c: 1411: RB1 = 1;
 19371  0972  0020               	movlb	0	; select bank0
 19372  0973  148D               	bsf	13,1	;volatile
 19373  0974                     i1l7152:	
 19374                           
 19375                           ;Dimmer_B1.c: 1412: }
 19376                           ;Dimmer_B1.c: 1413: }
 19377                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19378  0974  0021               	movlb	1	; select bank1
 19379  0975  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19380  0976  0645               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19381  0977  1903               	btfsc	3,2
 19382                           
 19383                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.ControlStatus == 1) {
 19384  0978  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19385  0979  298E               	goto	i1l849
 19386                           
 19387                           ;Dimmer_B1.c: 1418: RB1 = 0;
 19388  097A  0020               	movlb	0	; select bank0
 19389  097B  108D               	bcf	13,1	;volatile
 19390                           
 19391                           ;Dimmer_B1.c: 1419: }
 19392                           ;Dimmer_B1.c: 1422: }
 19393                           ;Dimmer_B1.c: 1424: } else {
 19394  097C  298E               	goto	i1l849
 19395  097D                     i1l841:	
 19396                           
 19397                           ;Dimmer_B1.c: 1425: if (DimmerIntr1.GO == 1) {
 19398  097D  1C3B               	btfss	_DimmerIntr1^(0+128),0
 19399  097E  298E               	goto	i1l849
 19400                           
 19401                           ;Dimmer_B1.c: 1426: DimmerIntr1.Count++;
 19402  097F  3001               	movlw	1
 19403  0980  00F0               	movwf	??_DimmerLights_TMR_1
 19404  0981  0870               	movf	??_DimmerLights_TMR_1,w
 19405  0982  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 19406                           
 19407                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.Count == 6) {
 19408  0983  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19409  0984  3A06               	xorlw	6
 19410  0985  1D03               	skipz
 19411  0986  298E               	goto	i1l849
 19412                           
 19413                           ;Dimmer_B1.c: 1428: DimmerIntr1.Count = 0;
 19414  0987  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19415                           
 19416                           ;Dimmer_B1.c: 1429: DimmerIntr1.GO = 0;
 19417  0988  103B               	bcf	_DimmerIntr1^(0+128),0
 19418                           
 19419                           ;Dimmer_B1.c: 1430: DimmerIntr1.Start = 1;
 19420  0989  153B               	bsf	_DimmerIntr1^(0+128),2
 19421                           
 19422                           ;Dimmer_B1.c: 1432: if (DimmerIntr1.ControlStatus == 1) {
 19423  098A  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19424  098B  298E               	goto	i1l849
 19425                           
 19426                           ;Dimmer_B1.c: 1433: RB1 = 1;
 19427  098C  0020               	movlb	0	; select bank0
 19428  098D  148D               	bsf	13,1	;volatile
 19429  098E                     i1l849:	
 19430                           
 19431                           ;Dimmer_B1.c: 1434: }
 19432                           ;Dimmer_B1.c: 1435: }
 19433                           ;Dimmer_B1.c: 1436: }
 19434                           ;Dimmer_B1.c: 1437: }
 19435                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Tune == 1) {
 19436  098E  0021               	movlb	1	; select bank1
 19437  098F  1CBB               	btfss	_DimmerIntr1^(0+128),1
 19438  0990  0008               	return
 19439                           
 19440                           ;Dimmer_B1.c: 1440: DimmerIntr1.Tune = 0;
 19441  0991  10BB               	bcf	_DimmerIntr1^(0+128),1
 19442                           
 19443                           ;Dimmer_B1.c: 1441: DimmerIntr1.TuneTime++;
 19444  0992  3001               	movlw	1
 19445  0993  00F0               	movwf	??_DimmerLights_TMR_1
 19446  0994  0870               	movf	??_DimmerLights_TMR_1,w
 19447  0995  07BE               	addwf	(_DimmerIntr1^(0+128)+3),f
 19448                           
 19449                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19450  0996  083F               	movf	(_DimmerIntr1^(0+128)+4),w
 19451  0997  023E               	subwf	(_DimmerIntr1^(0+128)+3),w
 19452  0998  1C03               	skipc
 19453  0999  0008               	return
 19454                           
 19455                           ;Dimmer_B1.c: 1443: DimmerIntr1.TuneTime = 0;
 19456  099A  01BE               	clrf	(_DimmerIntr1^(0+128)+3)
 19457                           
 19458                           ;Dimmer_B1.c: 1444: DimmerIntr1.TuneGO = 1;
 19459  099B  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 19460                           
 19461                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.Dimming_Sw == 1) {
 19462  099C  1E3B               	btfss	_DimmerIntr1^(0+128),4
 19463  099D  29B4               	goto	i1l855
 19464                           
 19465                           ;Dimmer_B1.c: 1446: if (DimmerIntr1.Dimming_Status == 0) {
 19466  099E  1ABB               	btfsc	_DimmerIntr1^(0+128),5
 19467  099F  29AB               	goto	i1l7190
 19468                           
 19469                           ;Dimmer_B1.c: 1447: if (DimmerIntr1.DimmingValue < ((char)(80*0.6))) {
 19470  09A0  3030               	movlw	48
 19471  09A1  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19472  09A2  1803               	skipnc
 19473  09A3  29A9               	goto	i1l857
 19474                           
 19475                           ;Dimmer_B1.c: 1448: DimmerIntr1.DimmingValue++;
 19476  09A4  3001               	movlw	1
 19477  09A5  00F0               	movwf	??_DimmerLights_TMR_1
 19478  09A6  0870               	movf	??_DimmerLights_TMR_1,w
 19479  09A7  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 19480                           
 19481                           ;Dimmer_B1.c: 1449: } else {
 19482  09A8  0008               	return
 19483  09A9                     i1l857:	
 19484                           
 19485                           ;Dimmer_B1.c: 1450: DimmerIntr1.Dimming_Status = 1;
 19486  09A9  16BB               	bsf	_DimmerIntr1^(0+128),5
 19487                           
 19488                           ;Dimmer_B1.c: 1451: }
 19489                           ;Dimmer_B1.c: 1452: } else {
 19490  09AA  0008               	return
 19491  09AB                     i1l7190:	
 19492                           
 19493                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 19494  09AB  3007               	movlw	7
 19495  09AC  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19496  09AD  1C03               	skipc
 19497  09AE  29B2               	goto	i1l860
 19498                           
 19499                           ;Dimmer_B1.c: 1454: DimmerIntr1.DimmingValue--;
 19500  09AF  3001               	movlw	1
 19501  09B0  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 19502                           
 19503                           ;Dimmer_B1.c: 1455: } else {
 19504  09B1  0008               	return
 19505  09B2                     i1l860:	
 19506                           
 19507                           ;Dimmer_B1.c: 1456: DimmerIntr1.Dimming_Status = 0;
 19508  09B2  12BB               	bcf	_DimmerIntr1^(0+128),5
 19509                           
 19510                           ;Dimmer_B1.c: 1457: }
 19511                           ;Dimmer_B1.c: 1458: }
 19512                           ;Dimmer_B1.c: 1459: } else if (DimmerIntr1.Dimming_RF == 1) {
 19513  09B3  0008               	return
 19514  09B4                     i1l855:	
 19515  09B4  1F3B               	btfss	_DimmerIntr1^(0+128),6
 19516  09B5  0008               	return
 19517                           
 19518                           ;Dimmer_B1.c: 1460: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19519  09B6  0841               	movf	(_DimmerIntr1^(0+128)+6),w
 19520  09B7  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19521  09B8  1803               	skipnc
 19522  09B9  29BF               	goto	i1l7198
 19523                           
 19524                           ;Dimmer_B1.c: 1461: DimmerIntr1.DimmingValue++;
 19525  09BA  3001               	movlw	1
 19526  09BB  00F0               	movwf	??_DimmerLights_TMR_1
 19527  09BC  0870               	movf	??_DimmerLights_TMR_1,w
 19528  09BD  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 19529                           
 19530                           ;Dimmer_B1.c: 1462: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19531  09BE  0008               	return
 19532  09BF                     i1l7198:	
 19533  09BF  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 19534  09C0  0241               	subwf	(_DimmerIntr1^(0+128)+6),w
 19535  09C1  1803               	skipnc
 19536  09C2  29C6               	goto	i1l866
 19537                           
 19538                           ;Dimmer_B1.c: 1463: DimmerIntr1.DimmingValue--;
 19539  09C3  3001               	movlw	1
 19540  09C4  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 19541                           
 19542                           ;Dimmer_B1.c: 1464: } else {
 19543  09C5  0008               	return
 19544  09C6                     i1l866:	
 19545                           
 19546                           ;Dimmer_B1.c: 1465: DimmerIntr1.Dimming_RF = 0;
 19547  09C6  133B               	bcf	_DimmerIntr1^(0+128),6
 19548  09C7  0008               	return
 19549  09C8                     __end_of_DimmerLights_TMR_1:	
 19550                           
 19551                           	psect	text141
 19552  1BC4                     __ptext141:	
 19553 ;; *************** function _IOC_ISR *****************
 19554 ;; Defined at:
 19555 ;;		line 395 in file "../src/MCU_B1.c"
 19556 ;; Parameters:    Size  Location     Type
 19557 ;;		None
 19558 ;; Auto vars:     Size  Location     Type
 19559 ;;		None
 19560 ;; Return value:  Size  Location     Type
 19561 ;;		None               void
 19562 ;; Registers used:
 19563 ;;		wreg, status,2, status,0, pclath, cstack
 19564 ;; Tracked objects:
 19565 ;;		On entry : 0/0
 19566 ;;		On exit  : 0/0
 19567 ;;		Unchanged: 0/0
 19568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19573 ;;Total ram usage:        0 bytes
 19574 ;; Hardware stack levels used:    1
 19575 ;; Hardware stack levels required when called:    3
 19576 ;; This function calls:
 19577 ;;		_DimmerLights_IOC_1
 19578 ;; This function is called by:
 19579 ;;		_ISR
 19580 ;; This function uses a non-reentrant model
 19581 ;;
 19582                           
 19583                           
 19584                           ;psect for function _IOC_ISR
 19585  1BC4                     _IOC_ISR:	
 19586                           
 19587                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 19588                           
 19589                           ;incstack = 0
 19590                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19591  1BC4  0021               	movlb	1	; select bank1
 19592  1BC5  1C2E               	btfss	_myMain^(0+128),0
 19593  1BC6  2BC9               	goto	i1l7722
 19594                           
 19595                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 19596  1BC7  3193  23A5         	fcall	_DimmerLights_IOC_1
 19597  1BC9                     i1l7722:	
 19598                           
 19599                           ;MCU_B1.c: 416: }
 19600                           ;MCU_B1.c: 418: IOCBF2 = 0;
 19601  1BC9  0027               	movlb	7	; select bank7
 19602  1BCA  1116               	bcf	22,2	;volatile
 19603                           
 19604                           ;MCU_B1.c: 419: IOCIF = 0;
 19605  1BCB  100B               	bcf	11,0	;volatile
 19606  1BCC  0008               	return
 19607  1BCD                     __end_of_IOC_ISR:	
 19608                           
 19609                           	psect	text142
 19610  13A5                     __ptext142:	
 19611 ;; *************** function _DimmerLights_IOC_1 *****************
 19612 ;; Defined at:
 19613 ;;		line 1472 in file "../src/Dimmer_B1.c"
 19614 ;; Parameters:    Size  Location     Type
 19615 ;;		None
 19616 ;; Auto vars:     Size  Location     Type
 19617 ;;		None
 19618 ;; Return value:  Size  Location     Type
 19619 ;;		None               void
 19620 ;; Registers used:
 19621 ;;		wreg, status,2, status,0, pclath, cstack
 19622 ;; Tracked objects:
 19623 ;;		On entry : 0/0
 19624 ;;		On exit  : 0/0
 19625 ;;		Unchanged: 0/0
 19626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19629 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19630 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19631 ;;Total ram usage:        2 bytes
 19632 ;; Hardware stack levels used:    1
 19633 ;; Hardware stack levels required when called:    2
 19634 ;; This function calls:
 19635 ;;		_Division
 19636 ;; This function is called by:
 19637 ;;		_IOC_ISR
 19638 ;; This function uses a non-reentrant model
 19639 ;;
 19640                           
 19641                           
 19642                           ;psect for function _DimmerLights_IOC_1
 19643  13A5                     _DimmerLights_IOC_1:	
 19644                           
 19645                           ;Dimmer_B1.c: 1486: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 19646                           
 19647                           ;incstack = 0
 19648                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19649  13A5  0021               	movlb	1	; select bank1
 19650  13A6  193B               	btfsc	_DimmerIntr1^(0+128),2
 19651  13A7  0008               	return
 19652  13A8  183B               	btfsc	_DimmerIntr1^(0+128),0
 19653  13A9  0008               	return
 19654                           
 19655                           ;Dimmer_B1.c: 1487: if (RB2 != DimmerIntr1.Status) {
 19656  13AA  0E3C               	swapf	(_DimmerIntr1^(0+128)+1),w
 19657  13AB  0C89               	rrf	9,f
 19658  13AC  3901               	andlw	1
 19659  13AD  00FA               	movwf	??_DimmerLights_IOC_1
 19660  13AE  3000               	movlw	0
 19661  13AF  0020               	movlb	0	; select bank0
 19662  13B0  190D               	btfsc	13,2	;volatile
 19663  13B1  3001               	movlw	1
 19664  13B2  067A               	xorwf	??_DimmerLights_IOC_1,w
 19665  13B3  1903               	skipnz
 19666  13B4  0008               	return
 19667                           
 19668                           ;Dimmer_B1.c: 1489: DimmerIntr1.Count = 0;
 19669  13B5  0021               	movlb	1	; select bank1
 19670  13B6  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19671                           
 19672                           ;Dimmer_B1.c: 1490: DimmerIntr1.GO = 1;
 19673  13B7  143B               	bsf	_DimmerIntr1^(0+128),0
 19674                           
 19675                           ;Dimmer_B1.c: 1492: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 19676  13B8  1E3B               	btfss	_DimmerIntr1^(0+128),4
 19677  13B9  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 19678                           
 19679                           ;Dimmer_B1.c: 1493: DimmerIntr1.Tune = 1;
 19680  13BA  14BB               	bsf	_DimmerIntr1^(0+128),1
 19681                           
 19682                           ;Dimmer_B1.c: 1494: }
 19683                           ;Dimmer_B1.c: 1496: if (DimmerIntr1.TuneGO == 1) {
 19684  13BB  1F3C               	btfss	(_DimmerIntr1^(0+128)+1),6
 19685  13BC  2BDB               	goto	i1l7226
 19686                           
 19687                           ;Dimmer_B1.c: 1497: DimmerIntr1.TuneGO = 0;
 19688  13BD  133C               	bcf	(_DimmerIntr1^(0+128)+1),6
 19689                           
 19690                           ;Dimmer_B1.c: 1500: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 19691  13BE  3002               	movlw	2
 19692  13BF  00FA               	movwf	??_DimmerLights_IOC_1
 19693  13C0  087A               	movf	??_DimmerLights_IOC_1,w
 19694  13C1  00F5               	movwf	Division@num
 19695  13C2  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 19696  13C3  319C  24A5  3193   	fcall	_Division
 19697  13C6  00FB               	movwf	??_DimmerLights_IOC_1+1
 19698  13C7  087B               	movf	??_DimmerLights_IOC_1+1,w
 19699  13C8  0021               	movlb	1	; select bank1
 19700  13C9  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 19701                           
 19702                           ;Dimmer_B1.c: 1501: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 19703  13CA  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 19704  13CB  3AFF               	xorlw	255
 19705  13CC  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 19706  13CD  3E3C               	addlw	60
 19707  13CE  00FA               	movwf	??_DimmerLights_IOC_1
 19708  13CF  087A               	movf	??_DimmerLights_IOC_1,w
 19709  13D0  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 19710                           
 19711                           ;Dimmer_B1.c: 1502: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 19712  13D1  0844               	movf	(_DimmerIntr1^(0+128)+9),w
 19713  13D2  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 19714  13D3  00FA               	movwf	??_DimmerLights_IOC_1
 19715  13D4  087A               	movf	??_DimmerLights_IOC_1,w
 19716  13D5  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 19717                           
 19718                           ;Dimmer_B1.c: 1503: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 3;
 19719  13D6  0845               	movf	(_DimmerIntr1^(0+128)+10),w
 19720  13D7  3E03               	addlw	3
 19721  13D8  00FA               	movwf	??_DimmerLights_IOC_1
 19722  13D9  087A               	movf	??_DimmerLights_IOC_1,w
 19723  13DA  00C6               	movwf	(_DimmerIntr1^(0+128)+11)
 19724  13DB                     i1l7226:	
 19725                           
 19726                           ;Dimmer_B1.c: 1504: }
 19727                           ;Dimmer_B1.c: 1509: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 19728  13DB  12BC               	bcf	(_DimmerIntr1^(0+128)+1),5
 19729  13DC  0020               	movlb	0	; select bank0
 19730  13DD  1D0D               	btfss	13,2	;volatile
 19731  13DE  0008               	return
 19732  13DF  0021               	movlb	1	; select bank1
 19733  13E0  16BC               	bsf	(_DimmerIntr1^(0+128)+1),5
 19734  13E1  0008               	return
 19735  13E2                     __end_of_DimmerLights_IOC_1:	
 19736                           
 19737                           	psect	text143
 19738  1CA5                     __ptext143:	
 19739 ;; *************** function _Division *****************
 19740 ;; Defined at:
 19741 ;;		line 1375 in file "../src/Dimmer_B1.c"
 19742 ;; Parameters:    Size  Location     Type
 19743 ;;  value           1    wreg     unsigned char 
 19744 ;;  num             1    5[COMMON] unsigned char 
 19745 ;; Auto vars:     Size  Location     Type
 19746 ;;  value           1    8[COMMON] unsigned char 
 19747 ;;  result          1    9[COMMON] unsigned char 
 19748 ;; Return value:  Size  Location     Type
 19749 ;;                  1    wreg      unsigned char 
 19750 ;; Registers used:
 19751 ;;		wreg, status,2, status,0, pclath, cstack
 19752 ;; Tracked objects:
 19753 ;;		On entry : 0/0
 19754 ;;		On exit  : 0/0
 19755 ;;		Unchanged: 0/0
 19756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19757 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19759 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19760 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19761 ;;Total ram usage:        5 bytes
 19762 ;; Hardware stack levels used:    1
 19763 ;; Hardware stack levels required when called:    1
 19764 ;; This function calls:
 19765 ;;		___lbdiv
 19766 ;; This function is called by:
 19767 ;;		_DimmerLights_IOC_1
 19768 ;; This function uses a non-reentrant model
 19769 ;;
 19770                           
 19771                           
 19772                           ;psect for function _Division
 19773  1CA5                     _Division:	
 19774                           
 19775                           ;incstack = 0
 19776                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19777                           ;Division@value stored from wreg
 19778  1CA5  00F8               	movwf	Division@value
 19779                           
 19780                           ;Dimmer_B1.c: 1376: char result = (char) (value / num);
 19781  1CA6  0875               	movf	Division@num,w
 19782  1CA7  00F6               	movwf	??_Division
 19783  1CA8  0876               	movf	??_Division,w
 19784  1CA9  00F0               	movwf	___lbdiv@divisor
 19785  1CAA  0878               	movf	Division@value,w
 19786  1CAB  3190  204F         	fcall	___lbdiv
 19787  1CAD  00F7               	movwf	??_Division+1
 19788  1CAE  0877               	movf	??_Division+1,w
 19789  1CAF  00F9               	movwf	Division@result
 19790                           
 19791                           ;Dimmer_B1.c: 1377: return result;
 19792  1CB0  0879               	movf	Division@result,w
 19793  1CB1  0008               	return
 19794  1CB2                     __end_of_Division:	
 19795                           
 19796                           	psect	text144
 19797  104F                     __ptext144:	
 19798 ;; *************** function ___lbdiv *****************
 19799 ;; Defined at:
 19800 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19801 ;; Parameters:    Size  Location     Type
 19802 ;;  dividend        1    wreg     unsigned char 
 19803 ;;  divisor         1    0[COMMON] unsigned char 
 19804 ;; Auto vars:     Size  Location     Type
 19805 ;;  dividend        1    2[COMMON] unsigned char 
 19806 ;;  quotient        1    4[COMMON] unsigned char 
 19807 ;;  counter         1    3[COMMON] unsigned char 
 19808 ;; Return value:  Size  Location     Type
 19809 ;;                  1    wreg      unsigned char 
 19810 ;; Registers used:
 19811 ;;		wreg, status,2, status,0
 19812 ;; Tracked objects:
 19813 ;;		On entry : 0/0
 19814 ;;		On exit  : 0/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19817 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19818 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19820 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19821 ;;Total ram usage:        5 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; This function calls:
 19824 ;;		Nothing
 19825 ;; This function is called by:
 19826 ;;		_Division
 19827 ;; This function uses a non-reentrant model
 19828 ;;
 19829                           
 19830                           
 19831                           ;psect for function ___lbdiv
 19832  104F                     ___lbdiv:	
 19833                           
 19834                           ;incstack = 0
 19835                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19836                           ;___lbdiv@dividend stored from wreg
 19837  104F  00F2               	movwf	___lbdiv@dividend
 19838  1050  01F4               	clrf	___lbdiv@quotient
 19839  1051  0870               	movf	___lbdiv@divisor,w
 19840  1052  1903               	btfsc	3,2
 19841  1053  286E               	goto	i1l6608
 19842  1054  01F3               	clrf	___lbdiv@counter
 19843  1055  0AF3               	incf	___lbdiv@counter,f
 19844  1056                     i1l6596:	
 19845  1056  1BF0               	btfsc	___lbdiv@divisor,7
 19846  1057  285F               	goto	i1l6598
 19847  1058  1003               	clrc
 19848  1059  0DF0               	rlf	___lbdiv@divisor,f
 19849  105A  3001               	movlw	1
 19850  105B  00F1               	movwf	??___lbdiv
 19851  105C  0871               	movf	??___lbdiv,w
 19852  105D  07F3               	addwf	___lbdiv@counter,f
 19853  105E  2856               	goto	i1l6596
 19854  105F                     i1l6598:	
 19855  105F  1003               	clrc
 19856  1060  0DF4               	rlf	___lbdiv@quotient,f
 19857  1061  0870               	movf	___lbdiv@divisor,w
 19858  1062  0272               	subwf	___lbdiv@dividend,w
 19859  1063  1C03               	skipc
 19860  1064  2869               	goto	L9
 19861  1065  0870               	movf	___lbdiv@divisor,w
 19862  1066  02F2               	subwf	___lbdiv@dividend,f
 19863  1067  1474               	bsf	___lbdiv@quotient,0
 19864  1068  1003               	clrc
 19865  1069                     L9:	
 19866  1069  0CF0               	rrf	___lbdiv@divisor,f
 19867  106A  3001               	movlw	1
 19868  106B  02F3               	subwf	___lbdiv@counter,f
 19869  106C  1D03               	btfss	3,2
 19870  106D  285F               	goto	i1l6598
 19871  106E                     i1l6608:	
 19872  106E  0874               	movf	___lbdiv@quotient,w
 19873  106F  0008               	return
 19874  1070                     __end_of___lbdiv:	
 19875  007E                     btemp	set	126	;btemp
 19876  007E                     pic14e$flags	set	126
 19877  007E                     wtemp	set	126
 19878  007E                     wtemp0	set	126
 19879  0080                     wtemp1	set	128
 19880  0082                     wtemp2	set	130
 19881  0084                     wtemp3	set	132
 19882  0086                     wtemp4	set	134
 19883  0088                     wtemp5	set	136
 19884  007F                     wtemp6	set	127
 19885  007E                     ttemp	set	126
 19886  007E                     ttemp0	set	126
 19887  0081                     ttemp1	set	129
 19888  0084                     ttemp2	set	132
 19889  0087                     ttemp3	set	135
 19890  007F                     ttemp4	set	127
 19891  007E                     ltemp	set	126
 19892  007E                     ltemp0	set	126
 19893  0082                     ltemp1	set	130
 19894  0086                     ltemp2	set	134
 19895  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         222
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      69
    BANK2            80      0      79
    BANK3            80      0      47
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK3[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  174698
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     312
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5504
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5504
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4323
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4323
                                             15 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1069
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1069
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   52119
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   52119
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   47712
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5053
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   42387
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12234
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   24601
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2210
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      93
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      93
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1100
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1100
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2043
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1858
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1728
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1518
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3747
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   57821
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   57512
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   32906
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1007
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     166
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4453
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     344
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      96
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   24213
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3717
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     374
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     270
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0     108
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32285
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   32285
                                             66 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5431
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5431
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3182
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1905
                                             13 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     407
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     407
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     407
                                             10 COMMON     2     2      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      45       7       86.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     166      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     166      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Feb 26 10:29:56 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1ECD                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 1582  
                                      l96 07F9                                        l88 1596  
                                      l97 07F5                                        l98 07E3  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 10B5  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00CE                            setTemp_Main@AD 006C  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1BE9  
                  __end_of_setDelayOff_GO 0D37                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 1795                      _setDimmerLights_Line 1D37  
                            ___ftadd@sign 004B                                       l100 07F3  
                                     l303 1ED9                                       l304 1EDB  
                                     l235 08C1                      _setDimmerLights_SwOn 1219  
                                     l531 0951                                       l347 10DF  
                                     l757 1F65                                       l688 1CBF  
                                     l784 0778                                       _GIE 005F  
                                     _CRC 00C7                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CB                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00C8              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1EE6                     _Buzzer_Initialization 1B46  
                         __end_of_ADC_Set 1BA5                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1E9C               _setDimmerIntr_ControlStatus 1E84  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1BCD  
                   _setDimmerLights_OnOff 06F3          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l2120 04F0                                      l1243 145D  
                                    l2115 0550                                      l2119 049F  
                                    l2160 0AAA                                      l1257 117A  
                                    l2145 1005                                      l1267 0C1C  
                                    l1508 1ECC                                      l1444 13A3  
                                    l1621 01FF                                      l1631 01DB  
                                    l1623 008B                                      l2175 1215  
                                    l1472 11DF                                      l1632 01D9  
                                    l1624 0087                                      l1625 0082  
                                    l1467 11C8                                      l1468 11E3  
                                    l2188 0A39                           __end_of_IOC_Set 1C0A  
                                    l2473 1E4A                                      l1499 0628  
                                    l2493 0381                                      l2495 024D  
                                    l1783 0E8D                                      l1794 0E85  
                                    l2844 164F                                      l2677 1FAD  
                                    l1789 0E00                                      l2838 1638  
                                    l7022 12AB                                      l7014 128D  
                                    l7016 1299                                      l7026 12B4  
                          _Load_Main$3948 002B                                      l2867 0428  
                                    l7300 101D                                      l6254 10F0  
                                    l6256 10FB                                      l7304 1022  
                                    l7076 1DC8                     _setDimmerLights_SwOff 12BB  
                                    l8322 14BD                                      l9122 1322  
                                    l9114 130C                                      l9210 08A8  
                                    l8340 14E3                                      l8332 14C5  
                                    l8316 14B2                                      l9132 1D54  
                                    l9108 1303                                      l9220 08D0  
                                    l7540 1E4F                                      l8334 14D1  
                                    l8414 107B                                      l8430 03B8  
                                    l8502 0D64                                      l9134 1D59  
                                    l9222 08D4                                      l9214 08C7  
                                    l8344 14EC                                      l9080 11CC  
                                    l9128 1D4D                                      l9224 08D7  
                                    l9216 08CA                                      l9160 09C9  
                                    l7544 1E55                                      l8290 1624  
                                    l8282 160E                                      l8426 03B1  
                                    l9330 073A                                      l9170 0A00  
                                    l7298 101A                                      l8348 14F4  
                                    l8460 0407                                      l8436 03C7  
                                    l8524 0DBE                                      l8516 0DA5  
                                    l9308 1E67                                      l9332 0751  
                                    l9252 082E                                      l9228 08DD  
                                    l6924 1D20                                      l9172 0A22  
                                    l9500 0A86                                      l7820 0ACB  
                                    l8286 1615                                      l8454 03F4  
                                    l8630 0CA2                                      l8622 0C88  
                                    l8614 0C6D                                      l9078 11C3  
                                    l9430 1162                                      l7638 1FA7  
                                    l9270 0859                                      l9246 0825  
                                    l9190 088D                                      l9174 0A26  
                                    l9166 09DE                                      l8296 163D  
                                    l8288 161F                                      l8472 043A  
                                    l8456 03FE                                      l8448 03E1  
                                    l8560 0F01                                      l8544 0EBE  
                                    l8624 0C91                                      l8616 0C7B  
                                    l9088 11DA                                      l8392 1D5E  
                                    l9352 0787                                      l9248 0828  
                                    l9192 0890                                      l9168 09E5  
                                    l7832 0AF2                                      l8298 1645  
                                    l8466 041A                                      l8458 0403  
                                    l8538 0EA8                                      l8626 0C94  
                                    l8714 0CE9                                      l9338 0758  
                                    l9178 0A2A                                      l8476 044C  
                                    l8468 0424                                      l8572 0F1D  
                                    l8556 0EF9                                      l9540 1360  
                                    l9372 1514                                      l8396 1D64  
                                    l8724 0D19                                      l9268 0840  
                                    l9196 0896                                      l7828 0AEA  
                   _myMain_Initialization 1DDD                                      l8486 0467  
                                    l9366 07B3                                      l9630 0BA5  
                                    l8822 1F23                                      l8680 1245  
                                    l8496 0D4E                                      l8568 0F15  
                                    l8728 0D2D                                      l8824 1F26  
                                    l8920 0B3A                                      l8904 1415  
                                    l9472 0A50                                      l9720 0E74  
                                    l7848 0B19                                      l9538 1351  
                                    l9570 17F3                                      l9618 1CFE  
                                    l8930 0B8A                                      l8692 12E9  
                                    l8596 0C3D                                      l8764 177F  
                                    l9556 17BD                                      l9580 1BF1  
                                    l9644 0C15                                      l9636 0BBA  
                                    l8828 1F2C                                      l8940 10C2  
                                    l8916 0B35                                      l9484 0A68  
                                    l9708 0E5D                                      l8678 1240  
                                    l9558 17C4                                      l8862 10A4  
                                    l8846 1F97                                      l6998 1D31  
                                    l9718 0E72                                      l9670 0E03  
                                    l9904 07CD                                      l9568 17EC  
                                    l8856 109B                                      l8848 1F9D  
                                    l8944 10C8                                      l9488 0A71  
                                    l9832 0280                                      l9816 0237  
                                    _CFGS 0CAE                                      l8882 1EC6  
                                    l8858 109E                                      l8938 10BF  
                                    l9754 04EB                                      l9842 02B5  
                                    l9940 1F67                                      l8972 1491  
                                    l9676 0E12                                      l8878 1EB7  
                                    l8982 14A1                                      l8966 1488  
                                    l9782 0531                                      l9678 0E15  
                                    l9960 06AB                                      l8976 1498  
                                    l8968 148B                                      l9768 04FF  
                                    l9856 02F5                              __CFG_WDTE$ON 0000  
                                    l8978 149B                                      l9866 0329  
                                    l9796 0549                                      l9986 143C  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u5425 10E5  
                                    u6165 1E3D                                      u6505 12A4  
                                    u6515 12AC                                      u9005 03E2  
                                    u9035 03F5                                      u6475 1290  
                                    u9205 0DBF                                      u7605 1FB3  
                                    u6495 129A                                      u9065 0408  
                                    u9315 0F1E                                      u9165 0D76  
                                    u9325 0F24                                      u9245 0ECA  
                                    u9095 041B                                      u9175 0D86  
                                    u9255 0EDA                                      u8705 1656  
                                    u9185 0DA6                                      u9425 0C89  
                                    u8635 161A                                      u9195 0DB5  
                                    u9275 0F02                                      u7595 1FAE  
                                    u9620 173A                                      u9285 0F08  
                                    u9365 0C44                                      u8655 1633  
                                    u9455 1E13                                      u9625 1738  
                                    u7945 0B09                                      u8755 14C8  
                                    u8675 1640                                      u9395 0C6E  
                                    u8775 14D2                                      u7895 0ADA  
                                    u8785 14DC                                      u9585 0CF5  
                                    u8795 14E4                                      u7995 11A5  
                                    _LWLO 0CAD                                      _RSSI 013A  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1F4F                _setDimmerLights_DimmingRun 1F34  
                                    _Buz1 0120                                      _Load 013E  
                                    _Temp 00D1                                      _main 15AA  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0958  
                         __end_of_RF_Main 1B52                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1C8D  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0B9E  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2255 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1E6E  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1E58                    _getDimmerLights_Status 1CD1  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 1B68  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 0138  
                                   l10024 1383                                     l10122 0163  
                                   l10132 018F                                     l10142 01AB  
                                   l10240 05C1                                     l10224 0582  
                                   l10152 01C1                                     l10128 0172  
                                   l10136 019B                                     l10056 0069  
                                   l10218 0572                                     l10090 00AE  
                                   l10074 008A                                     l10260 060D  
                                   l10236 05B9                                     l10228 0591  
                                   l10254 05FB                                     l10238 0594  
                                   l10334 15CE                                     l10256 05D6  
                                   l10096 00E0                                     l10258 0603  
                                   l10266 061E                                     l10338 15D9  
                                   l10188 01EE                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00DF  
                         __end_of___awdiv 14FB                           __end_of___lbdiv 1070  
                         __end_of___ftadd 047F                           __end_of___ftdiv 0DE0  
                         __end_of___ftneg 1BD6                           __end_of___ftmul 0F45  
                                   u11055 04C3                           ___awdiv@divisor 0020  
                                   u11085 0520                                     _T1CON 0018  
                         __end_of___fttol 0CAB                                     u11525 139B  
                                   u11295 07C3                                     u11475 1454  
                                   u11900 05BF                                     u11905 059D  
                                   u11665 00AC                                     u10945 0E46  
                                   u11930 0601                                     u11675 00DE  
                                   u11765 01A2                                     u11685 0122  
                                   u10965 0E64                                     u11935 05DF  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 12BB  
                                   i1l841 097D                                     i1l860 09B2  
                                   i1l855 09B4                                     i1l857 09A9  
                                   i1l849 098E                                     i1l866 09C6  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1E43                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 1730   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 16CB                                     _Light 0139  
                        __end_of_TMR1_ISR 1FE1                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C81  
                                   _getAD 100F                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 0812  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1BFF                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1D7F                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                       _getAll_Sw_KeyStatus 1CF3  
                      _setRF_DimmerLights 1730                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0004                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1CB2                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 1605                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 1B6C            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0554                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1CC1  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 09C8                            _setMemory_Data 1C5D  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0720        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 14FB                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BB  
                _getMain_All_LightsStatus 1BDF                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1E04                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08E9  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1BBC  
                               ??_WDT_Set 0020                          __end_of___awtoft 1092  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1666  
                _getMain_All_Error_Status 11B2                                    _IOCBF2 1CB2  
                                  i1l1206 001A                                    i1l7140 0965  
                                  i1l7152 0974                                    i1l7226 13DB  
                                  i1l7146 096C                                    i1l7190 09AB  
                                  i1l8206 0012                                    i1l6608 106E  
                                  i1l7198 09BF                                    i1l7712 1FDA  
                                  i1l7722 1BC9                                    i1l6596 1056  
                                  i1l6598 105F                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u773_25 1FD5  
                                  _IO_Set 1F00                                    _WDTCON 0097  
                      DelayTime_1us@count 0020                      Exception_Main@i_3588 0033  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1E2E                                    _Dimmer 012C  
                                  _DlySw1 0166             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1D5B                __end_of_Mcu_Initialization 1D91  
                     __end_of_Buzzer_Main 0800                                    _Memory 0220  
                                  _Timer1 0131                                    ___bmul 1D5B  
                  __end_of_Exception_Main 0629                      Exception_Main@lights 0035  
                                  ___wmul 1FA4                                 ??___awdiv 0024  
                               ??___lbdiv 0071                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 013D                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1DCA  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1DB7                                    _s_data 00D0  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 12F4  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1C69                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 1551  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 1B4C          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1EB4          __end_of_setDimmerIntr_Dimming_Sw 1E84  
                   ___ftmul@f3_as_product 0039                 _setDimmerLights_DimmingOn 1100  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1DDD               getMain_Lights_Count@status1 0021  
             __size_of_DimmerLights_IOC_1 003D                     __end_of_SwPointSelect 1CA5  
             __size_of_DimmerLights_TMR_1 0070              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 0067                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E43               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0022                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5346 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 102F  
                           __end_of_getAD 102F                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 1B60  
                         _getSw_KeyStatus 1D26                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1BF4  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1C39                __end_of_set_TimeoutCleared 1B85  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1C2D                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1B52                        ??_CC2500_WriteByte 0020  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 07B6                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 1B58  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B58                             ??_Switch_Main 0032  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00CA  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0020  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 15AA                            _getDelayOff_GO 1CE2  
                     _CC2500_WriteCommand 1F1A                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 1369             ??_DimmerLights_Initialization 0063  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0AAC  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1BAC  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B9E                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1181        __end_of_DimmerLights_SelectPointer 1C2D  
              _DimmerLights_SelectPointer 1C21                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1C15                        _setRFSW_AdjControl 0B1E  
                  __end_of_setProductData 1C39             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1BC4                                   _IOC_Set 1BFF  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 1422                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1EE6                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1B4F  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0076                                   _WDT_Set 1C81  
         __end_of_setControl_Lights_Table 0A3A                           setRF_Main@error 00DE  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1551  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 1C99                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1D15  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1CF3            __end_of_getDimmerLights_Status 1CE2  
                       __end_of_getRxData 0AAC                   __end_of_getSw_KeyStatus 1D37  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0065                            ??_setTemp_Main 0065  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 14A7                                   ___lbdiv 104F  
                                 ___ftadd 0389                                   ___ftdiv 0D37  
                                 ___ftneg 1BCD                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0C24  
                     __end_of_Switch_Main 1BAC                                   ___lwdiv 1284  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1D15                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 1369                                   __ptext2 1DDD  
                                 __ptext3 1181                                   __ptext4 0AAC  
                                 __ptext5 100F                                   __ptext6 0800  
                                 __ptext7 0002                                   __ptext8 1B55  
                                 __ptext9 0DE0                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1463                 __end_of_Flash_Memory_Read 1F00  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 047F  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1B5C  
                       _DimmerLights_Main 1F4F            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1B8B                __end_of_CC2500_ClearRXFIFO 1B74  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1B78  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00E3                            _LedPointSelect 1C51  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1C15                                   clrloop0 1B92  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1B80  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 1128                             _DelayTime_1us 10DA  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 1181  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 1B8B  
              __end_of_setRF_TransceiveGO 1DB7                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 1B8C                                _setSw_Main 0205  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 002D  
                       _CC2500_ReadStatus 10B5                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1D6D                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0812  
                           _CC2500_TxData 087D                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0B9E                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1EB4  
                     _Flash_Memory_Unlock 1BD6                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F6B                        _Mcu_Initialization 1D7F  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1B70  
                    __end_of_my_MainTimer 13A5                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1C5D  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002D  
        setDimmerIntr_DimmingValue@lights 0064          getDimmerIntr_DimmingValue@lights 0021  
               __end_of_CC2500_InitSetREG 1152                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 10DA  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1128                          ??_Exception_Main 002D  
                          __end_of_IO_Set 1F1A                      _setRF_Initialization 1C0A  
                      _setMemory_LoopSave 1DCA                               _Switch_Main 1BA5  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1D26                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1E19  
             ??_DimmerIntr_Initialization 0062                      ??_Mcu_Initialization 0021  
             __end_of_getAll_Sw_KeyStatus 1D04                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0020  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1D6D  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 1FC2                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 132D                             __pbitbssBANK1 0720  
           __size_of_setDimmerLights_Line 0012             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 15AA                __end_of_DimmerLights_IOC_1 13E2  
                    _CC2500_FrequencyCabr 1C8D                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 13E2  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 09C8  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1BB4  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 2000  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 16CB  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1666  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1B80         __end_of_setDimmerIntr_MaxmumValue 1C45  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 016B                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0031  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1B55                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CC  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0030                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1BE9                                 _Tx_Length 00CF  
                             __pdataBANK4 0245                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11E5  
                        _CC2500_SIDLEMode 1B78                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1D91                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00DB  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 132D                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 01C7  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1F87                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00E3  
                          getRxData@error 00DC               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1B6C                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1D49  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002A  
                  _setTemp_Initialization 1B45                                 _getBuz_GO 1D04  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 06F3  
             _Flash_Memory_Initialization 0629                                  ?___awdiv 0020  
                               __ptext100 14FB                                 __ptext101 0F45  
                                ?___lbdiv 0070                                 __ptext110 11B2  
                               __ptext102 1DA4                                 __ptext111 1B97  
                               __ptext103 1730                                 __ptext120 0D37  
                               __ptext112 1B44                                 __ptext104 1D37  
                               __ptext121 0389                                 __ptext113 132D  
                               __ptext105 1C39                                 __ptext130 12BB  
                               __ptext122 1070                                 __ptext114 1D91  
                               __ptext106 1E6E                                 __ptext131 1CD1  
                               __ptext123 1605                                 __ptext115 16CB  
                               __ptext107 1CB2                                 __ptext140 0958  
                               __ptext132 1C21                                 __ptext124 1B5C  
                               __ptext116 1666                                 __ptext108 1E58  
                               __ptext141 1BC4                                 __ptext133 1B58  
                               __ptext125 08E9                                 __ptext117 0C24  
                               __ptext109 1BAC                                  ?___ftadd 0041  
                               __ptext142 13A5                                 __ptext134 1B85  
                               __ptext126 1C2D                                 __ptext118 1BCD  
                               __ptext143 1CA5                                 __ptext135 1C15  
                               __ptext127 1219                                 __ptext119 0E91  
                               __ptext144 104F                                 __ptext136 07B6  
                               __ptext128 1551                                 __ptext137 1B46  
                               __ptext129 14A7                                 __ptext139 1FC2  
                               _getRxData 0A3A                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 1422  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1B49  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1E58                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1CC1  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 1CB2  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00C3  
                               _r_address 013C             __end_of_setDimmerLights_OnOff 07B6  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 12F4              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1DF0                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                             _SwPointSelect 1C99  
                     __end_of_setLED_Main 1284                          ??_getDelayOff_GO 0022  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1B55  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 1B64                           SwPointSelect@sw 0021  
                               clear_ram0 1B91                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1369  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 1B9E  
             _DimmerLights_Initialization 1B97                    _Flash_Memory_Main$3119 0028  
                      _CC2500_ClearRXFIFO 1B70                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1B74                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1E04  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 1152                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FC2  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1C75  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1DA4                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 100F                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1F34                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 0800                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00C9  
                            setSw_Main@sw 0031                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1C75  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1219  
                   _DlyOff_Initialization 1B85         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1CA5  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1E9C               setDimmerLights_OnOff@lights 00DB  
                _setDimmerIntr_Dimming_Sw 1E6E                                  _Fosc_Set 1B68  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 0B1E                        __end_of_getLoad_OK 1BB4  
                   _Switch_Initialization 1B7C         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 11B2  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1ECD                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 013B                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$3576 0021  
           _getMain_All_Error_Status$3577 0023                  __end_of_getDimmer_LoadGO 1BBC  
                     _Load_Initialization 1B49          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0DE0                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002E                                  ___awtoft 1070  
                        ??_LedPointSelect 0020                                  ___ftpack 1605  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00DD  
                    CC2500_WriteREG@value 0022                               _setLED_Main 124E  
              __end_of_setRF_DimmerLights 1795            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1BC4  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 1B52                                  __ptext11 1B45  
                                __ptext20 1E2E                                  __ptext12 1BA5  
                                __ptext21 1B7C                                  __ptext13 0205  
                                __ptext30 0B1E                                  __ptext22 1CC1  
                                __ptext14 1DF0                                  __ptext31 1F34  
                                __ptext23 1B4F                                  __ptext15 1100  
                                __ptext40 1B78                                  __ptext32 1D15  
                                __ptext24 047F                                  __ptext16 1D26  
                                __ptext41 1463                                  __ptext33 1D04  
                                __ptext25 0A3A                                  __ptext17 1C99  
                                __ptext50 1B6C                                  __ptext42 1128  
                                __ptext34 1000                                  __ptext26 11E5  
                                __ptext18 1E43                                  __ptext51 1E04  
                                __ptext43 1FE1                                  __ptext35 087D  
                                __ptext27 1DCA                                  __ptext19 1B80  
                                __ptext60 1B68                                  __ptext52 1ECD  
                                __ptext44 1092                                  __ptext36 0812  
                                __ptext28 09C8                                  __ptext61 1B9E  
                                __ptext53 1B4C                                  __ptext45 1C8D  
                                __ptext37 10B5                                  __ptext29 13E2  
                                __ptext70 1F6B                                  __ptext62 0053  
                                __ptext54 1C0A                                  __ptext46 10DA  
                                __ptext38 1F87                                  __ptext71 1B64  
                                __ptext63 1BF4                                  __ptext55 1D7F  
                                __ptext47 1B74                                  __ptext39 1E19  
                                __ptext80 1C5D                                  __ptext72 124E  
                                __ptext64 1BBC                                  __ptext56 1C81  
                                __ptext48 1B70                                  __ptext81 1152  
                                __ptext73 1B60                                  __ptext65 1BB4  
                                __ptext57 1C75                                  __ptext49 1F1A  
                                __ptext90 1C51                                  __ptext82 1BD6  
                                __ptext74 1D6D                                  __ptext66 1DB7  
                                __ptext58 1F00                                  __ptext91 1E9C  
                                __ptext83 1EE6                                  __ptext75 1422  
                                __ptext67 1FA4                                  __ptext59 1BFF  
                                __ptext92 1C45                                  __ptext84 0554  
                                __ptext76 1CF3                                  __ptext68 1284  
                                __ptext93 1E84                                  __ptext85 1BE9  
                                __ptext77 0B9E                                  __ptext69 1B49  
                                __ptext94 0CAB                                  __ptext86 1F4F  
                                __ptext78 1C69                                  __ptext95 1D5B  
                                __ptext87 1795                                  __ptext79 0629  
                                __ptext96 1EB4                                  __ptext88 06F3  
                                __ptext97 1BDF                                  __ptext89 12F4  
                                __ptext98 1CE2                                  __ptext99 1D49  
                                __product 0245                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1BF4  
            __end_of_setDimmerLights_Main 1800              __end_of_setDimmerLights_Line 1D49  
                      _DimmerLights_IOC_1 13A5              __end_of_setDimmerLights_SwOn 124E  
                            ??_setSw_Main 002F                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1DF0  
      __size_of_DimmerIntr_Initialization 003C                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 0958                  __end_of_CC2500_SIDLEMode 1B7C  
              setDimmerLights_Main@lights 00DC               __end_of_DelayOffPointSelect 1C21  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1F87  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1FE1  
                __end_of_setMemory_Modify 1DA4                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 0554                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00DB  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1E19  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6387 0022  
                                main@argc 00DF                                  main@argv 00E1  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6384 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 1463  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1C51                _setDimmerIntr_DimmingValue 1C45  
             __end_of_Flash_Memory_Modify 0C24              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 11E5               __end_of_Flash_Memory_Unlock 1BDF  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1092  
                      __end_of_setSw_Main 0389                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 1B45   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1B44                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B4C  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1C69  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00CD  
                 __size_of_Exception_Main 00D5                             Division@value 0078  
         __end_of_DelayOff_Initialization 1B5C                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B60                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0CAB  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0072  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1100                   __end_of_CC2500_ReadByte 1FA4  
            __end_of_setSw_Initialization 1CD1                           _Timeout_Counter 1E2E  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 1000          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 1B64            __end_of_setTemp_Initialization 1B46  
                             Division@num 0075                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 1B4F                     __end_of_CC2500_RxData 087D  
                   __end_of_CC2500_TxData 08E9                     _setLoad_AH_AL_Restore 1F6B  
                 __end_of_CC2500_PowerRST 14A7  
