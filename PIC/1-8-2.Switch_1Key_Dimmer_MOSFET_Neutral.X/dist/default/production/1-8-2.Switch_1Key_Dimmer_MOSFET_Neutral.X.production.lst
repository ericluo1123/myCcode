

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Feb 05 16:30:40 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text144,local,class=CODE,merge=1,delta=2
   164                           	dabs	1,0x7E,2
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  0116                     	;# 
   212  0117                     	;# 
   213  011D                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  018E                     	;# 
   217  0191                     	;# 
   218  0191                     	;# 
   219  0192                     	;# 
   220  0193                     	;# 
   221  0193                     	;# 
   222  0194                     	;# 
   223  0195                     	;# 
   224  0196                     	;# 
   225  0197                     	;# 
   226  0199                     	;# 
   227  019A                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019C                     	;# 
   233  019C                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019F                     	;# 
   237  020D                     	;# 
   238  0210                     	;# 
   239  0211                     	;# 
   240  0211                     	;# 
   241  0212                     	;# 
   242  0212                     	;# 
   243  0213                     	;# 
   244  0213                     	;# 
   245  0214                     	;# 
   246  0214                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0216                     	;# 
   251  0216                     	;# 
   252  0217                     	;# 
   253  0217                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0298                     	;# 
   259  0298                     	;# 
   260  0299                     	;# 
   261  029A                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0FE4                     	;# 
   266  0FE5                     	;# 
   267  0FE6                     	;# 
   268  0FE7                     	;# 
   269  0FE8                     	;# 
   270  0FE9                     	;# 
   271  0FEA                     	;# 
   272  0FEB                     	;# 
   273  0FED                     	;# 
   274  0FEE                     	;# 
   275  0FEF                     	;# 
   276  0000                     	;# 
   277  0001                     	;# 
   278  0002                     	;# 
   279  0003                     	;# 
   280  0004                     	;# 
   281  0005                     	;# 
   282  0006                     	;# 
   283  0007                     	;# 
   284  0008                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  0010                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0015                     	;# 
   295  0016                     	;# 
   296  0016                     	;# 
   297  0017                     	;# 
   298  0018                     	;# 
   299  0019                     	;# 
   300  001A                     	;# 
   301  001B                     	;# 
   302  001C                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  0090                     	;# 
   307  0091                     	;# 
   308  0092                     	;# 
   309  0095                     	;# 
   310  0096                     	;# 
   311  0097                     	;# 
   312  0099                     	;# 
   313  009A                     	;# 
   314  009B                     	;# 
   315  009B                     	;# 
   316  009C                     	;# 
   317  009D                     	;# 
   318  009E                     	;# 
   319  010C                     	;# 
   320  010D                     	;# 
   321  010E                     	;# 
   322  0116                     	;# 
   323  0117                     	;# 
   324  011D                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  018E                     	;# 
   328  0191                     	;# 
   329  0191                     	;# 
   330  0192                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0194                     	;# 
   334  0195                     	;# 
   335  0196                     	;# 
   336  0197                     	;# 
   337  0199                     	;# 
   338  019A                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019C                     	;# 
   344  019C                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019F                     	;# 
   348  020D                     	;# 
   349  0210                     	;# 
   350  0211                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0212                     	;# 
   354  0213                     	;# 
   355  0213                     	;# 
   356  0214                     	;# 
   357  0214                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0216                     	;# 
   362  0216                     	;# 
   363  0217                     	;# 
   364  0217                     	;# 
   365  0291                     	;# 
   366  0291                     	;# 
   367  0292                     	;# 
   368  0293                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  0394                     	;# 
   374  0395                     	;# 
   375  0396                     	;# 
   376  0FE4                     	;# 
   377  0FE5                     	;# 
   378  0FE6                     	;# 
   379  0FE7                     	;# 
   380  0FE8                     	;# 
   381  0FE9                     	;# 
   382  0FEA                     	;# 
   383  0FEB                     	;# 
   384  0FED                     	;# 
   385  0FEE                     	;# 
   386  0FEF                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  0010                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  0116                     	;# 
   434  0117                     	;# 
   435  011D                     	;# 
   436  018C                     	;# 
   437  018D                     	;# 
   438  018E                     	;# 
   439  0191                     	;# 
   440  0191                     	;# 
   441  0192                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0197                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019C                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020D                     	;# 
   460  0210                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0298                     	;# 
   481  0298                     	;# 
   482  0299                     	;# 
   483  029A                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0010                     	;# 
   514  0011                     	;# 
   515  0012                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  008C                     	;# 
   526  008D                     	;# 
   527  008E                     	;# 
   528  0090                     	;# 
   529  0091                     	;# 
   530  0092                     	;# 
   531  0095                     	;# 
   532  0096                     	;# 
   533  0097                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009B                     	;# 
   538  009C                     	;# 
   539  009D                     	;# 
   540  009E                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  011D                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  018E                     	;# 
   550  0191                     	;# 
   551  0191                     	;# 
   552  0192                     	;# 
   553  0193                     	;# 
   554  0193                     	;# 
   555  0194                     	;# 
   556  0195                     	;# 
   557  0196                     	;# 
   558  0197                     	;# 
   559  0199                     	;# 
   560  019A                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019C                     	;# 
   566  019C                     	;# 
   567  019D                     	;# 
   568  019E                     	;# 
   569  019F                     	;# 
   570  020D                     	;# 
   571  0210                     	;# 
   572  0211                     	;# 
   573  0211                     	;# 
   574  0212                     	;# 
   575  0212                     	;# 
   576  0213                     	;# 
   577  0213                     	;# 
   578  0214                     	;# 
   579  0214                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0216                     	;# 
   584  0216                     	;# 
   585  0217                     	;# 
   586  0217                     	;# 
   587  0291                     	;# 
   588  0291                     	;# 
   589  0292                     	;# 
   590  0293                     	;# 
   591  0298                     	;# 
   592  0298                     	;# 
   593  0299                     	;# 
   594  029A                     	;# 
   595  0394                     	;# 
   596  0395                     	;# 
   597  0396                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0015                     	;# 
   628  0016                     	;# 
   629  0016                     	;# 
   630  0017                     	;# 
   631  0018                     	;# 
   632  0019                     	;# 
   633  001A                     	;# 
   634  001B                     	;# 
   635  001C                     	;# 
   636  008C                     	;# 
   637  008D                     	;# 
   638  008E                     	;# 
   639  0090                     	;# 
   640  0091                     	;# 
   641  0092                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0099                     	;# 
   646  009A                     	;# 
   647  009B                     	;# 
   648  009B                     	;# 
   649  009C                     	;# 
   650  009D                     	;# 
   651  009E                     	;# 
   652  010C                     	;# 
   653  010D                     	;# 
   654  010E                     	;# 
   655  0116                     	;# 
   656  0117                     	;# 
   657  011D                     	;# 
   658  018C                     	;# 
   659  018D                     	;# 
   660  018E                     	;# 
   661  0191                     	;# 
   662  0191                     	;# 
   663  0192                     	;# 
   664  0193                     	;# 
   665  0193                     	;# 
   666  0194                     	;# 
   667  0195                     	;# 
   668  0196                     	;# 
   669  0197                     	;# 
   670  0199                     	;# 
   671  019A                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019C                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020D                     	;# 
   682  0210                     	;# 
   683  0211                     	;# 
   684  0211                     	;# 
   685  0212                     	;# 
   686  0212                     	;# 
   687  0213                     	;# 
   688  0213                     	;# 
   689  0214                     	;# 
   690  0214                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0291                     	;# 
   699  0291                     	;# 
   700  0292                     	;# 
   701  0293                     	;# 
   702  0298                     	;# 
   703  0298                     	;# 
   704  0299                     	;# 
   705  029A                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000D                     	;# 
   734  000E                     	;# 
   735  0010                     	;# 
   736  0011                     	;# 
   737  0012                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  008C                     	;# 
   748  008D                     	;# 
   749  008E                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0099                     	;# 
   757  009A                     	;# 
   758  009B                     	;# 
   759  009B                     	;# 
   760  009C                     	;# 
   761  009D                     	;# 
   762  009E                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  011D                     	;# 
   769  018C                     	;# 
   770  018D                     	;# 
   771  018E                     	;# 
   772  0191                     	;# 
   773  0191                     	;# 
   774  0192                     	;# 
   775  0193                     	;# 
   776  0193                     	;# 
   777  0194                     	;# 
   778  0195                     	;# 
   779  0196                     	;# 
   780  0197                     	;# 
   781  0199                     	;# 
   782  019A                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019C                     	;# 
   788  019C                     	;# 
   789  019D                     	;# 
   790  019E                     	;# 
   791  019F                     	;# 
   792  020D                     	;# 
   793  0210                     	;# 
   794  0211                     	;# 
   795  0211                     	;# 
   796  0212                     	;# 
   797  0212                     	;# 
   798  0213                     	;# 
   799  0213                     	;# 
   800  0214                     	;# 
   801  0214                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0216                     	;# 
   806  0216                     	;# 
   807  0217                     	;# 
   808  0217                     	;# 
   809  0291                     	;# 
   810  0291                     	;# 
   811  0292                     	;# 
   812  0293                     	;# 
   813  0298                     	;# 
   814  0298                     	;# 
   815  0299                     	;# 
   816  029A                     	;# 
   817  0394                     	;# 
   818  0395                     	;# 
   819  0396                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000D                     	;# 
   845  000E                     	;# 
   846  0010                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0015                     	;# 
   850  0016                     	;# 
   851  0016                     	;# 
   852  0017                     	;# 
   853  0018                     	;# 
   854  0019                     	;# 
   855  001A                     	;# 
   856  001B                     	;# 
   857  001C                     	;# 
   858  008C                     	;# 
   859  008D                     	;# 
   860  008E                     	;# 
   861  0090                     	;# 
   862  0091                     	;# 
   863  0092                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0116                     	;# 
   878  0117                     	;# 
   879  011D                     	;# 
   880  018C                     	;# 
   881  018D                     	;# 
   882  018E                     	;# 
   883  0191                     	;# 
   884  0191                     	;# 
   885  0192                     	;# 
   886  0193                     	;# 
   887  0193                     	;# 
   888  0194                     	;# 
   889  0195                     	;# 
   890  0196                     	;# 
   891  0197                     	;# 
   892  0199                     	;# 
   893  019A                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019C                     	;# 
   900  019D                     	;# 
   901  019E                     	;# 
   902  019F                     	;# 
   903  020D                     	;# 
   904  0210                     	;# 
   905  0211                     	;# 
   906  0211                     	;# 
   907  0212                     	;# 
   908  0212                     	;# 
   909  0213                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0214                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0216                     	;# 
   917  0216                     	;# 
   918  0217                     	;# 
   919  0217                     	;# 
   920  0291                     	;# 
   921  0291                     	;# 
   922  0292                     	;# 
   923  0293                     	;# 
   924  0298                     	;# 
   925  0298                     	;# 
   926  0299                     	;# 
   927  029A                     	;# 
   928  0394                     	;# 
   929  0395                     	;# 
   930  0396                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0010                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0090                     	;# 
   973  0091                     	;# 
   974  0092                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0116                     	;# 
   989  0117                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0197                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019C                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019F                     	;# 
  1014  020D                     	;# 
  1015  0210                     	;# 
  1016  0211                     	;# 
  1017  0211                     	;# 
  1018  0212                     	;# 
  1019  0212                     	;# 
  1020  0213                     	;# 
  1021  0213                     	;# 
  1022  0214                     	;# 
  1023  0214                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0216                     	;# 
  1028  0216                     	;# 
  1029  0217                     	;# 
  1030  0217                     	;# 
  1031  0291                     	;# 
  1032  0291                     	;# 
  1033  0292                     	;# 
  1034  0293                     	;# 
  1035  0298                     	;# 
  1036  0298                     	;# 
  1037  0299                     	;# 
  1038  029A                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0FE4                     	;# 
  1043  0FE5                     	;# 
  1044  0FE6                     	;# 
  1045  0FE7                     	;# 
  1046  0FE8                     	;# 
  1047  0FE9                     	;# 
  1048  0FEA                     	;# 
  1049  0FEB                     	;# 
  1050  0FED                     	;# 
  1051  0FEE                     	;# 
  1052  0FEF                     	;# 
  1053  0000                     	;# 
  1054  0001                     	;# 
  1055  0002                     	;# 
  1056  0003                     	;# 
  1057  0004                     	;# 
  1058  0005                     	;# 
  1059  0006                     	;# 
  1060  0007                     	;# 
  1061  0008                     	;# 
  1062  0009                     	;# 
  1063  000A                     	;# 
  1064  000B                     	;# 
  1065  000C                     	;# 
  1066  000D                     	;# 
  1067  000E                     	;# 
  1068  0010                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  008C                     	;# 
  1081  008D                     	;# 
  1082  008E                     	;# 
  1083  0090                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0116                     	;# 
  1100  0117                     	;# 
  1101  011D                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  018E                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0197                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020D                     	;# 
  1126  0210                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0291                     	;# 
  1143  0291                     	;# 
  1144  0292                     	;# 
  1145  0293                     	;# 
  1146  0298                     	;# 
  1147  0298                     	;# 
  1148  0299                     	;# 
  1149  029A                     	;# 
  1150  0394                     	;# 
  1151  0395                     	;# 
  1152  0396                     	;# 
  1153  0FE4                     	;# 
  1154  0FE5                     	;# 
  1155  0FE6                     	;# 
  1156  0FE7                     	;# 
  1157  0FE8                     	;# 
  1158  0FE9                     	;# 
  1159  0FEA                     	;# 
  1160  0FEB                     	;# 
  1161  0FED                     	;# 
  1162  0FEE                     	;# 
  1163  0FEF                     	;# 
  1164  0000                     	;# 
  1165  0001                     	;# 
  1166  0002                     	;# 
  1167  0003                     	;# 
  1168  0004                     	;# 
  1169  0005                     	;# 
  1170  0006                     	;# 
  1171  0007                     	;# 
  1172  0008                     	;# 
  1173  0009                     	;# 
  1174  000A                     	;# 
  1175  000B                     	;# 
  1176  000C                     	;# 
  1177  000D                     	;# 
  1178  000E                     	;# 
  1179  0010                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0015                     	;# 
  1183  0016                     	;# 
  1184  0016                     	;# 
  1185  0017                     	;# 
  1186  0018                     	;# 
  1187  0019                     	;# 
  1188  001A                     	;# 
  1189  001B                     	;# 
  1190  001C                     	;# 
  1191  008C                     	;# 
  1192  008D                     	;# 
  1193  008E                     	;# 
  1194  0090                     	;# 
  1195  0091                     	;# 
  1196  0092                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0099                     	;# 
  1201  009A                     	;# 
  1202  009B                     	;# 
  1203  009B                     	;# 
  1204  009C                     	;# 
  1205  009D                     	;# 
  1206  009E                     	;# 
  1207  010C                     	;# 
  1208  010D                     	;# 
  1209  010E                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  011D                     	;# 
  1213  018C                     	;# 
  1214  018D                     	;# 
  1215  018E                     	;# 
  1216  0191                     	;# 
  1217  0191                     	;# 
  1218  0192                     	;# 
  1219  0193                     	;# 
  1220  0193                     	;# 
  1221  0194                     	;# 
  1222  0195                     	;# 
  1223  0196                     	;# 
  1224  0197                     	;# 
  1225  0199                     	;# 
  1226  019A                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019C                     	;# 
  1232  019C                     	;# 
  1233  019D                     	;# 
  1234  019E                     	;# 
  1235  019F                     	;# 
  1236  020D                     	;# 
  1237  0210                     	;# 
  1238  0211                     	;# 
  1239  0211                     	;# 
  1240  0212                     	;# 
  1241  0212                     	;# 
  1242  0213                     	;# 
  1243  0213                     	;# 
  1244  0214                     	;# 
  1245  0214                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0216                     	;# 
  1250  0216                     	;# 
  1251  0217                     	;# 
  1252  0217                     	;# 
  1253  0291                     	;# 
  1254  0291                     	;# 
  1255  0292                     	;# 
  1256  0293                     	;# 
  1257  0298                     	;# 
  1258  0298                     	;# 
  1259  0299                     	;# 
  1260  029A                     	;# 
  1261  0394                     	;# 
  1262  0395                     	;# 
  1263  0396                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000D                     	;# 
  1289  000E                     	;# 
  1290  0010                     	;# 
  1291  0011                     	;# 
  1292  0012                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0016                     	;# 
  1296  0017                     	;# 
  1297  0018                     	;# 
  1298  0019                     	;# 
  1299  001A                     	;# 
  1300  001B                     	;# 
  1301  001C                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0090                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018E                     	;# 
  1327  0191                     	;# 
  1328  0191                     	;# 
  1329  0192                     	;# 
  1330  0193                     	;# 
  1331  0193                     	;# 
  1332  0194                     	;# 
  1333  0195                     	;# 
  1334  0196                     	;# 
  1335  0197                     	;# 
  1336  0199                     	;# 
  1337  019A                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019C                     	;# 
  1343  019C                     	;# 
  1344  019D                     	;# 
  1345  019E                     	;# 
  1346  019F                     	;# 
  1347  020D                     	;# 
  1348  0210                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0216                     	;# 
  1361  0216                     	;# 
  1362  0217                     	;# 
  1363  0217                     	;# 
  1364  0291                     	;# 
  1365  0291                     	;# 
  1366  0292                     	;# 
  1367  0293                     	;# 
  1368  0298                     	;# 
  1369  0298                     	;# 
  1370  0299                     	;# 
  1371  029A                     	;# 
  1372  0394                     	;# 
  1373  0395                     	;# 
  1374  0396                     	;# 
  1375  0FE4                     	;# 
  1376  0FE5                     	;# 
  1377  0FE6                     	;# 
  1378  0FE7                     	;# 
  1379  0FE8                     	;# 
  1380  0FE9                     	;# 
  1381  0FEA                     	;# 
  1382  0FEB                     	;# 
  1383  0FED                     	;# 
  1384  0FEE                     	;# 
  1385  0FEF                     	;# 
  1386  0000                     	;# 
  1387  0001                     	;# 
  1388  0002                     	;# 
  1389  0003                     	;# 
  1390  0004                     	;# 
  1391  0005                     	;# 
  1392  0006                     	;# 
  1393  0007                     	;# 
  1394  0008                     	;# 
  1395  0009                     	;# 
  1396  000A                     	;# 
  1397  000B                     	;# 
  1398  000C                     	;# 
  1399  000D                     	;# 
  1400  000E                     	;# 
  1401  0010                     	;# 
  1402  0011                     	;# 
  1403  0012                     	;# 
  1404  0015                     	;# 
  1405  0016                     	;# 
  1406  0016                     	;# 
  1407  0017                     	;# 
  1408  0018                     	;# 
  1409  0019                     	;# 
  1410  001A                     	;# 
  1411  001B                     	;# 
  1412  001C                     	;# 
  1413  008C                     	;# 
  1414  008D                     	;# 
  1415  008E                     	;# 
  1416  0090                     	;# 
  1417  0091                     	;# 
  1418  0092                     	;# 
  1419  0095                     	;# 
  1420  0096                     	;# 
  1421  0097                     	;# 
  1422  0099                     	;# 
  1423  009A                     	;# 
  1424  009B                     	;# 
  1425  009B                     	;# 
  1426  009C                     	;# 
  1427  009D                     	;# 
  1428  009E                     	;# 
  1429  010C                     	;# 
  1430  010D                     	;# 
  1431  010E                     	;# 
  1432  0116                     	;# 
  1433  0117                     	;# 
  1434  011D                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0197                     	;# 
  1447  0199                     	;# 
  1448  019A                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019C                     	;# 
  1454  019C                     	;# 
  1455  019D                     	;# 
  1456  019E                     	;# 
  1457  019F                     	;# 
  1458  020D                     	;# 
  1459  0210                     	;# 
  1460  0211                     	;# 
  1461  0211                     	;# 
  1462  0212                     	;# 
  1463  0212                     	;# 
  1464  0213                     	;# 
  1465  0213                     	;# 
  1466  0214                     	;# 
  1467  0214                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0216                     	;# 
  1472  0216                     	;# 
  1473  0217                     	;# 
  1474  0217                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0298                     	;# 
  1480  0298                     	;# 
  1481  0299                     	;# 
  1482  029A                     	;# 
  1483  0394                     	;# 
  1484  0395                     	;# 
  1485  0396                     	;# 
  1486  0FE4                     	;# 
  1487  0FE5                     	;# 
  1488  0FE6                     	;# 
  1489  0FE7                     	;# 
  1490  0FE8                     	;# 
  1491  0FE9                     	;# 
  1492  0FEA                     	;# 
  1493  0FEB                     	;# 
  1494  0FED                     	;# 
  1495  0FEE                     	;# 
  1496  0FEF                     	;# 
  1497  0000                     	;# 
  1498  0001                     	;# 
  1499  0002                     	;# 
  1500  0003                     	;# 
  1501  0004                     	;# 
  1502  0005                     	;# 
  1503  0006                     	;# 
  1504  0007                     	;# 
  1505  0008                     	;# 
  1506  0009                     	;# 
  1507  000A                     	;# 
  1508  000B                     	;# 
  1509  000C                     	;# 
  1510  000D                     	;# 
  1511  000E                     	;# 
  1512  0010                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0090                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019F                     	;# 
  1569  020D                     	;# 
  1570  0210                     	;# 
  1571  0211                     	;# 
  1572  0211                     	;# 
  1573  0212                     	;# 
  1574  0212                     	;# 
  1575  0213                     	;# 
  1576  0213                     	;# 
  1577  0214                     	;# 
  1578  0214                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0216                     	;# 
  1583  0216                     	;# 
  1584  0217                     	;# 
  1585  0217                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0298                     	;# 
  1591  0298                     	;# 
  1592  0299                     	;# 
  1593  029A                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0010                     	;# 
  1624  0011                     	;# 
  1625  0012                     	;# 
  1626  0015                     	;# 
  1627  0016                     	;# 
  1628  0016                     	;# 
  1629  0017                     	;# 
  1630  0018                     	;# 
  1631  0019                     	;# 
  1632  001A                     	;# 
  1633  001B                     	;# 
  1634  001C                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  0090                     	;# 
  1639  0091                     	;# 
  1640  0092                     	;# 
  1641  0095                     	;# 
  1642  0096                     	;# 
  1643  0097                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009B                     	;# 
  1648  009C                     	;# 
  1649  009D                     	;# 
  1650  009E                     	;# 
  1651  010C                     	;# 
  1652  010D                     	;# 
  1653  010E                     	;# 
  1654  0116                     	;# 
  1655  0117                     	;# 
  1656  011D                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0194                     	;# 
  1666  0195                     	;# 
  1667  0196                     	;# 
  1668  0197                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019C                     	;# 
  1676  019C                     	;# 
  1677  019D                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  020D                     	;# 
  1681  0210                     	;# 
  1682  0211                     	;# 
  1683  0211                     	;# 
  1684  0212                     	;# 
  1685  0212                     	;# 
  1686  0213                     	;# 
  1687  0213                     	;# 
  1688  0214                     	;# 
  1689  0214                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0216                     	;# 
  1694  0216                     	;# 
  1695  0217                     	;# 
  1696  0217                     	;# 
  1697  0291                     	;# 
  1698  0291                     	;# 
  1699  0292                     	;# 
  1700  0293                     	;# 
  1701  0298                     	;# 
  1702  0298                     	;# 
  1703  0299                     	;# 
  1704  029A                     	;# 
  1705  0394                     	;# 
  1706  0395                     	;# 
  1707  0396                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000D                     	;# 
  1733  000E                     	;# 
  1734  0010                     	;# 
  1735  0011                     	;# 
  1736  0012                     	;# 
  1737  0015                     	;# 
  1738  0016                     	;# 
  1739  0016                     	;# 
  1740  0017                     	;# 
  1741  0018                     	;# 
  1742  0019                     	;# 
  1743  001A                     	;# 
  1744  001B                     	;# 
  1745  001C                     	;# 
  1746  008C                     	;# 
  1747  008D                     	;# 
  1748  008E                     	;# 
  1749  0090                     	;# 
  1750  0091                     	;# 
  1751  0092                     	;# 
  1752  0095                     	;# 
  1753  0096                     	;# 
  1754  0097                     	;# 
  1755  0099                     	;# 
  1756  009A                     	;# 
  1757  009B                     	;# 
  1758  009B                     	;# 
  1759  009C                     	;# 
  1760  009D                     	;# 
  1761  009E                     	;# 
  1762  010C                     	;# 
  1763  010D                     	;# 
  1764  010E                     	;# 
  1765  0116                     	;# 
  1766  0117                     	;# 
  1767  011D                     	;# 
  1768  018C                     	;# 
  1769  018D                     	;# 
  1770  018E                     	;# 
  1771  0191                     	;# 
  1772  0191                     	;# 
  1773  0192                     	;# 
  1774  0193                     	;# 
  1775  0193                     	;# 
  1776  0194                     	;# 
  1777  0195                     	;# 
  1778  0196                     	;# 
  1779  0197                     	;# 
  1780  0199                     	;# 
  1781  019A                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019C                     	;# 
  1787  019C                     	;# 
  1788  019D                     	;# 
  1789  019E                     	;# 
  1790  019F                     	;# 
  1791  020D                     	;# 
  1792  0210                     	;# 
  1793  0211                     	;# 
  1794  0211                     	;# 
  1795  0212                     	;# 
  1796  0212                     	;# 
  1797  0213                     	;# 
  1798  0213                     	;# 
  1799  0214                     	;# 
  1800  0214                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0216                     	;# 
  1805  0216                     	;# 
  1806  0217                     	;# 
  1807  0217                     	;# 
  1808  0291                     	;# 
  1809  0291                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0298                     	;# 
  1813  0298                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  0FE4                     	;# 
  1820  0FE5                     	;# 
  1821  0FE6                     	;# 
  1822  0FE7                     	;# 
  1823  0FE8                     	;# 
  1824  0FE9                     	;# 
  1825  0FEA                     	;# 
  1826  0FEB                     	;# 
  1827  0FED                     	;# 
  1828  0FEE                     	;# 
  1829  0FEF                     	;# 
  1830  0000                     	;# 
  1831  0001                     	;# 
  1832  0002                     	;# 
  1833  0003                     	;# 
  1834  0004                     	;# 
  1835  0005                     	;# 
  1836  0006                     	;# 
  1837  0007                     	;# 
  1838  0008                     	;# 
  1839  0009                     	;# 
  1840  000A                     	;# 
  1841  000B                     	;# 
  1842  000C                     	;# 
  1843  000D                     	;# 
  1844  000E                     	;# 
  1845  0010                     	;# 
  1846  0011                     	;# 
  1847  0012                     	;# 
  1848  0015                     	;# 
  1849  0016                     	;# 
  1850  0016                     	;# 
  1851  0017                     	;# 
  1852  0018                     	;# 
  1853  0019                     	;# 
  1854  001A                     	;# 
  1855  001B                     	;# 
  1856  001C                     	;# 
  1857  008C                     	;# 
  1858  008D                     	;# 
  1859  008E                     	;# 
  1860  0090                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0095                     	;# 
  1864  0096                     	;# 
  1865  0097                     	;# 
  1866  0099                     	;# 
  1867  009A                     	;# 
  1868  009B                     	;# 
  1869  009B                     	;# 
  1870  009C                     	;# 
  1871  009D                     	;# 
  1872  009E                     	;# 
  1873  010C                     	;# 
  1874  010D                     	;# 
  1875  010E                     	;# 
  1876  0116                     	;# 
  1877  0117                     	;# 
  1878  011D                     	;# 
  1879  018C                     	;# 
  1880  018D                     	;# 
  1881  018E                     	;# 
  1882  0191                     	;# 
  1883  0191                     	;# 
  1884  0192                     	;# 
  1885  0193                     	;# 
  1886  0193                     	;# 
  1887  0194                     	;# 
  1888  0195                     	;# 
  1889  0196                     	;# 
  1890  0197                     	;# 
  1891  0199                     	;# 
  1892  019A                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019C                     	;# 
  1898  019C                     	;# 
  1899  019D                     	;# 
  1900  019E                     	;# 
  1901  019F                     	;# 
  1902  020D                     	;# 
  1903  0210                     	;# 
  1904  0211                     	;# 
  1905  0211                     	;# 
  1906  0212                     	;# 
  1907  0212                     	;# 
  1908  0213                     	;# 
  1909  0213                     	;# 
  1910  0214                     	;# 
  1911  0214                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0291                     	;# 
  1920  0291                     	;# 
  1921  0292                     	;# 
  1922  0293                     	;# 
  1923  0298                     	;# 
  1924  0298                     	;# 
  1925  0299                     	;# 
  1926  029A                     	;# 
  1927  0394                     	;# 
  1928  0395                     	;# 
  1929  0396                     	;# 
  1930  0FE4                     	;# 
  1931  0FE5                     	;# 
  1932  0FE6                     	;# 
  1933  0FE7                     	;# 
  1934  0FE8                     	;# 
  1935  0FE9                     	;# 
  1936  0FEA                     	;# 
  1937  0FEB                     	;# 
  1938  0FED                     	;# 
  1939  0FEE                     	;# 
  1940  0FEF                     	;# 
  1941  0000                     	;# 
  1942  0001                     	;# 
  1943  0002                     	;# 
  1944  0003                     	;# 
  1945  0004                     	;# 
  1946  0005                     	;# 
  1947  0006                     	;# 
  1948  0007                     	;# 
  1949  0008                     	;# 
  1950  0009                     	;# 
  1951  000A                     	;# 
  1952  000B                     	;# 
  1953  000C                     	;# 
  1954  000D                     	;# 
  1955  000E                     	;# 
  1956  0010                     	;# 
  1957  0011                     	;# 
  1958  0012                     	;# 
  1959  0015                     	;# 
  1960  0016                     	;# 
  1961  0016                     	;# 
  1962  0017                     	;# 
  1963  0018                     	;# 
  1964  0019                     	;# 
  1965  001A                     	;# 
  1966  001B                     	;# 
  1967  001C                     	;# 
  1968  008C                     	;# 
  1969  008D                     	;# 
  1970  008E                     	;# 
  1971  0090                     	;# 
  1972  0091                     	;# 
  1973  0092                     	;# 
  1974  0095                     	;# 
  1975  0096                     	;# 
  1976  0097                     	;# 
  1977  0099                     	;# 
  1978  009A                     	;# 
  1979  009B                     	;# 
  1980  009B                     	;# 
  1981  009C                     	;# 
  1982  009D                     	;# 
  1983  009E                     	;# 
  1984  010C                     	;# 
  1985  010D                     	;# 
  1986  010E                     	;# 
  1987  0116                     	;# 
  1988  0117                     	;# 
  1989  011D                     	;# 
  1990  018C                     	;# 
  1991  018D                     	;# 
  1992  018E                     	;# 
  1993  0191                     	;# 
  1994  0191                     	;# 
  1995  0192                     	;# 
  1996  0193                     	;# 
  1997  0193                     	;# 
  1998  0194                     	;# 
  1999  0195                     	;# 
  2000  0196                     	;# 
  2001  0197                     	;# 
  2002  0199                     	;# 
  2003  019A                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019C                     	;# 
  2009  019C                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019F                     	;# 
  2013  020D                     	;# 
  2014  0210                     	;# 
  2015  0211                     	;# 
  2016  0211                     	;# 
  2017  0212                     	;# 
  2018  0212                     	;# 
  2019  0213                     	;# 
  2020  0213                     	;# 
  2021  0214                     	;# 
  2022  0214                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0216                     	;# 
  2027  0216                     	;# 
  2028  0217                     	;# 
  2029  0217                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0298                     	;# 
  2035  0298                     	;# 
  2036  0299                     	;# 
  2037  029A                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  0FE4                     	;# 
  2042  0FE5                     	;# 
  2043  0FE6                     	;# 
  2044  0FE7                     	;# 
  2045  0FE8                     	;# 
  2046  0FE9                     	;# 
  2047  0FEA                     	;# 
  2048  0FEB                     	;# 
  2049  0FED                     	;# 
  2050  0FEE                     	;# 
  2051  0FEF                     	;# 
  2052  0000                     	;# 
  2053  0001                     	;# 
  2054  0002                     	;# 
  2055  0003                     	;# 
  2056  0004                     	;# 
  2057  0005                     	;# 
  2058  0006                     	;# 
  2059  0007                     	;# 
  2060  0008                     	;# 
  2061  0009                     	;# 
  2062  000A                     	;# 
  2063  000B                     	;# 
  2064  000C                     	;# 
  2065  000D                     	;# 
  2066  000E                     	;# 
  2067  0010                     	;# 
  2068  0011                     	;# 
  2069  0012                     	;# 
  2070  0015                     	;# 
  2071  0016                     	;# 
  2072  0016                     	;# 
  2073  0017                     	;# 
  2074  0018                     	;# 
  2075  0019                     	;# 
  2076  001A                     	;# 
  2077  001B                     	;# 
  2078  001C                     	;# 
  2079  008C                     	;# 
  2080  008D                     	;# 
  2081  008E                     	;# 
  2082  0090                     	;# 
  2083  0091                     	;# 
  2084  0092                     	;# 
  2085  0095                     	;# 
  2086  0096                     	;# 
  2087  0097                     	;# 
  2088  0099                     	;# 
  2089  009A                     	;# 
  2090  009B                     	;# 
  2091  009B                     	;# 
  2092  009C                     	;# 
  2093  009D                     	;# 
  2094  009E                     	;# 
  2095  010C                     	;# 
  2096  010D                     	;# 
  2097  010E                     	;# 
  2098  0116                     	;# 
  2099  0117                     	;# 
  2100  011D                     	;# 
  2101  018C                     	;# 
  2102  018D                     	;# 
  2103  018E                     	;# 
  2104  0191                     	;# 
  2105  0191                     	;# 
  2106  0192                     	;# 
  2107  0193                     	;# 
  2108  0193                     	;# 
  2109  0194                     	;# 
  2110  0195                     	;# 
  2111  0196                     	;# 
  2112  0197                     	;# 
  2113  0199                     	;# 
  2114  019A                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019C                     	;# 
  2120  019C                     	;# 
  2121  019D                     	;# 
  2122  019E                     	;# 
  2123  019F                     	;# 
  2124  020D                     	;# 
  2125  0210                     	;# 
  2126  0211                     	;# 
  2127  0211                     	;# 
  2128  0212                     	;# 
  2129  0212                     	;# 
  2130  0213                     	;# 
  2131  0213                     	;# 
  2132  0214                     	;# 
  2133  0214                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0216                     	;# 
  2138  0216                     	;# 
  2139  0217                     	;# 
  2140  0217                     	;# 
  2141  0291                     	;# 
  2142  0291                     	;# 
  2143  0292                     	;# 
  2144  0293                     	;# 
  2145  0298                     	;# 
  2146  0298                     	;# 
  2147  0299                     	;# 
  2148  029A                     	;# 
  2149  0394                     	;# 
  2150  0395                     	;# 
  2151  0396                     	;# 
  2152  0FE4                     	;# 
  2153  0FE5                     	;# 
  2154  0FE6                     	;# 
  2155  0FE7                     	;# 
  2156  0FE8                     	;# 
  2157  0FE9                     	;# 
  2158  0FEA                     	;# 
  2159  0FEB                     	;# 
  2160  0FED                     	;# 
  2161  0FEE                     	;# 
  2162  0FEF                     	;# 
  2163                           
  2164                           	psect	idataBANK4
  2165  101E                     __pidataBANK4:	
  2166                           
  2167                           ;initializer for __product
  2168  101E  3463               	retlw	99
  2169  101F  3402               	retlw	2
  2170  1020  3400               	retlw	0
  2171  1021  3400               	retlw	0
  2172  1022  3400               	retlw	0
  2173  1023  3400               	retlw	0
  2174  1024  3400               	retlw	0
  2175  1025  3400               	retlw	0
  2176  1026  3400               	retlw	0
  2177  1027  3400               	retlw	0
  2178  1028  3400               	retlw	0
  2179  1029  3400               	retlw	0
  2180  102A  34FF               	retlw	255
  2181  102B  34FF               	retlw	255
  2182  102C  34FF               	retlw	255
  2183  102D  3400               	retlw	0
  2184  102E  3400               	retlw	0
  2185  102F  3400               	retlw	0
  2186  1030  3400               	retlw	0
  2187  1031  3400               	retlw	0
  2188  1032  3400               	retlw	0
  2189  1033  3400               	retlw	0
  2190  1034  3400               	retlw	0
  2191  1035  3400               	retlw	0
  2192  1036  3400               	retlw	0
  2193  1037  3400               	retlw	0
  2194  1038  3400               	retlw	0
  2195  1039  3400               	retlw	0
  2196  103A  3400               	retlw	0
  2197  103B  3400               	retlw	0
  2198  103C  3400               	retlw	0
  2199  103D  3400               	retlw	0
  2200                           
  2201                           	psect	stringtext
  2202  1800                     __pstringtext:	
  2203  1800                     _CC2500_registers_address:	
  2204  1800  3403               	retlw	3
  2205  1801  3416               	retlw	22
  2206  1802  3417               	retlw	23
  2207  1803  341E               	retlw	30
  2208  1804  341F               	retlw	31
  2209  1805  3420               	retlw	32
  2210  1806  342A               	retlw	42
  2211  1807  342B               	retlw	43
  2212  1808  340B               	retlw	11
  2213  1809  340C               	retlw	12
  2214  180A  340D               	retlw	13
  2215  180B  340E               	retlw	14
  2216  180C  340F               	retlw	15
  2217  180D  3410               	retlw	16
  2218  180E  3411               	retlw	17
  2219  180F  3412               	retlw	18
  2220  1810  3413               	retlw	19
  2221  1811  3414               	retlw	20
  2222  1812  340A               	retlw	10
  2223  1813  3415               	retlw	21
  2224  1814  3421               	retlw	33
  2225  1815  3422               	retlw	34
  2226  1816  3418               	retlw	24
  2227  1817  3419               	retlw	25
  2228  1818  341A               	retlw	26
  2229  1819  341B               	retlw	27
  2230  181A  341C               	retlw	28
  2231  181B  341D               	retlw	29
  2232  181C  3423               	retlw	35
  2233  181D  3424               	retlw	36
  2234  181E  3425               	retlw	37
  2235  181F  3426               	retlw	38
  2236  1820  3429               	retlw	41
  2237  1821  342C               	retlw	44
  2238  1822  342D               	retlw	45
  2239  1823  342E               	retlw	46
  2240  1824  3400               	retlw	0
  2241  1825  3401               	retlw	1
  2242  1826  3402               	retlw	2
  2243  1827  3407               	retlw	7
  2244  1828  3408               	retlw	8
  2245  1829  3409               	retlw	9
  2246  182A  3406               	retlw	6
  2247  182B  3404               	retlw	4
  2248  182C  3405               	retlw	5
  2249  182D  3427               	retlw	39
  2250  182E  3428               	retlw	40
  2251  182F                     __end_of_CC2500_registers_address:	
  2252  182F                     _CC2500_rfSettings:	
  2253  182F  3407               	retlw	7
  2254  1830  3407               	retlw	7
  2255  1831  3430               	retlw	48
  2256  1832  3487               	retlw	135
  2257  1833  346B               	retlw	107
  2258  1834  34F8               	retlw	248
  2259  1835  347F               	retlw	127
  2260  1836  343F               	retlw	63
  2261  1837  3409               	retlw	9
  2262  1838  3400               	retlw	0
  2263  1839  345C               	retlw	92
  2264  183A  34A7               	retlw	167
  2265  183B  3462               	retlw	98
  2266  183C  3486               	retlw	134
  2267  183D  3483               	retlw	131
  2268  183E  3403               	retlw	3
  2269  183F  3422               	retlw	34
  2270  1840  34F8               	retlw	248
  2271  1841  3400               	retlw	0
  2272  1842  3444               	retlw	68
  2273  1843  34B6               	retlw	182
  2274  1844  3410               	retlw	16
  2275  1845  3418               	retlw	24
  2276  1846  341D               	retlw	29
  2277  1847  341C               	retlw	28
  2278  1848  34C7               	retlw	199
  2279  1849  3400               	retlw	0
  2280  184A  34B2               	retlw	178
  2281  184B  34EA               	retlw	234
  2282  184C  340A               	retlw	10
  2283  184D  3400               	retlw	0
  2284  184E  3411               	retlw	17
  2285  184F  3459               	retlw	89
  2286  1850  3488               	retlw	136
  2287  1851  3431               	retlw	49
  2288  1852  340B               	retlw	11
  2289  1853  342F               	retlw	47
  2290  1854  342E               	retlw	46
  2291  1855  3406               	retlw	6
  2292  1856  3404               	retlw	4
  2293  1857  3405               	retlw	5
  2294  1858  3400               	retlw	0
  2295  1859  3430               	retlw	48
  2296  185A  34D3               	retlw	211
  2297  185B  3491               	retlw	145
  2298  185C  3441               	retlw	65
  2299  185D  3400               	retlw	0
  2300  185E                     __end_of_CC2500_rfSettings:	
  2301  185E                     _CC2500_patable_vaule:	
  2302  185E  34FE               	retlw	254
  2303  185F  34FE               	retlw	254
  2304  1860  34FE               	retlw	254
  2305  1861  34FE               	retlw	254
  2306  1862  34FE               	retlw	254
  2307  1863  34FE               	retlw	254
  2308  1864  34FE               	retlw	254
  2309  1865  34FE               	retlw	254
  2310  1866                     __end_of_CC2500_patable_vaule:	
  2311                           
  2312                           	psect	nvBANK1
  2313  00ED                     __pnvBANK1:	
  2314  00ED                     _product:	
  2315  00ED                     	ds	1
  2316  000C                     _PORTA	set	12
  2317  000D                     _PORTB	set	13
  2318  000E                     _PORTC	set	14
  2319  0018                     _T1CON	set	24
  2320  0017                     _TMR1H	set	23
  2321  0016                     _TMR1L	set	22
  2322  005F                     _GIE	set	95
  2323  005B                     _IOCIE	set	91
  2324  0058                     _IOCIF	set	88
  2325  005E                     _PEIE	set	94
  2326  0060                     _RA0	set	96
  2327  0064                     _RA4	set	100
  2328  0066                     _RA6	set	102
  2329  0067                     _RA7	set	103
  2330  0068                     _RB0	set	104
  2331  0069                     _RB1	set	105
  2332  006A                     _RB2	set	106
  2333  006B                     _RB3	set	107
  2334  006D                     _RB5	set	109
  2335  0070                     _RC0	set	112
  2336  0071                     _RC1	set	113
  2337  0073                     _RC3	set	115
  2338  0074                     _RC4	set	116
  2339  0075                     _RC5	set	117
  2340  0088                     _TMR1IF	set	136
  2341  009D                     _ADCON0	set	157
  2342  009E                     _ADCON1	set	158
  2343  009C                     _ADRESH	set	156
  2344  009B                     _ADRESL	set	155
  2345  0099                     _OSCCON	set	153
  2346  008C                     _TRISA	set	140
  2347  008D                     _TRISB	set	141
  2348  008E                     _TRISC	set	142
  2349  0097                     _WDTCON	set	151
  2350  04E9                     _GO_nDONE	set	1257
  2351  0488                     _TMR1IE	set	1160
  2352  0117                     _FVRCON	set	279
  2353  010C                     _LATA	set	268
  2354  010D                     _LATB	set	269
  2355  010E                     _LATC	set	270
  2356  018C                     _ANSELA	set	396
  2357  018D                     _ANSELB	set	397
  2358  018E                     _ANSELC	set	398
  2359  0192                     _PMADRH	set	402
  2360  0191                     _PMADRL	set	401
  2361  0196                     _PMCON2	set	406
  2362  0194                     _PMDATH	set	404
  2363  0193                     _PMDATL	set	403
  2364  0CAE                     _CFGS	set	3246
  2365  0CAC                     _FREE	set	3244
  2366  0CAD                     _LWLO	set	3245
  2367  0CA8                     _RD	set	3240
  2368  0CA9                     _WR	set	3241
  2369  0CAA                     _WREN	set	3242
  2370  020D                     _WPUB	set	525
  2371  0396                     _IOCBF	set	918
  2372  0395                     _IOCBN	set	917
  2373  0394                     _IOCBP	set	916
  2374  1CB2                     _IOCBF2	set	7346
  2375                           
  2376                           ; #config settings
  2377  0000                     
  2378                           	psect	cinit
  2379  0022                     start_initialization:	
  2380  0022                     __initialization:	
  2381                           
  2382                           ; Clear objects allocated to BITBANK0
  2383  0022  01EE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2384                           
  2385                           ; Clear objects allocated to BANK1
  2386  0023  30A0               	movlw	low __pbssBANK1
  2387  0024  0084               	movwf	4
  2388  0025  3000               	movlw	high __pbssBANK1
  2389  0026  0085               	movwf	5
  2390  0027  3045               	movlw	69
  2391  0028  319B  237D  3180   	fcall	clear_ram0
  2392                           
  2393                           ; Clear objects allocated to BANK2
  2394  002B  3020               	movlw	low __pbssBANK2
  2395  002C  0084               	movwf	4
  2396  002D  3001               	movlw	high __pbssBANK2
  2397  002E  0085               	movwf	5
  2398  002F  304D               	movlw	77
  2399  0030  319B  237D  3180   	fcall	clear_ram0
  2400                           
  2401                           ; Clear objects allocated to BANK3
  2402  0033  30A0               	movlw	low __pbssBANK3
  2403  0034  0084               	movwf	4
  2404  0035  3001               	movlw	high __pbssBANK3
  2405  0036  0085               	movwf	5
  2406  0037  304C               	movlw	76
  2407  0038  319B  237D  3180   	fcall	clear_ram0
  2408                           
  2409                           ; Initialize objects allocated to BANK4
  2410  003B  301E               	movlw	low __pidataBANK4
  2411  003C  0084               	movwf	4
  2412  003D  3090               	movlw	(high __pidataBANK4)| (0+128)
  2413  003E  0085               	movwf	5
  2414  003F  3020               	movlw	low __pdataBANK4
  2415  0040  0086               	movwf	6
  2416  0041  3002               	movlw	high __pdataBANK4
  2417  0042  0087               	movwf	7
  2418  0043  3020               	movlw	32
  2419  0044  319B  2377         	fcall	init_ram
  2420  0046                     end_of_initialization:	
  2421                           ;End of C runtime variable initialization code
  2422                           
  2423  0046                     __end_of__initialization:	
  2424  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2425  0047  0020               	movlb	0
  2426  0048  3195  2D4F         	ljmp	_main	;jump to C main() function
  2427                           
  2428                           	psect	bitbssBANK0
  2429  0370                     __pbitbssBANK0:	
  2430  0370                     _Receive_OK:	
  2431  0370                     	ds	1
  2432  0371                     _Transceive_OK:	
  2433  0371                     	ds	1
  2434                           
  2435                           	psect	bssBANK1
  2436  00A0                     __pbssBANK1:	
  2437  00A0                     _RF1:	
  2438  00A0                     	ds	14
  2439  00AE                     _myMain:	
  2440  00AE                     	ds	13
  2441  00BB                     _DimmerIntr1:	
  2442  00BB                     	ds	12
  2443  00C7                     _RF_Count:	
  2444  00C7                     	ds	2
  2445  00C9                     _WDT:	
  2446  00C9                     	ds	2
  2447  00CB                     _CRC:	
  2448  00CB                     	ds	1
  2449  00CC                     _Cmd:	
  2450  00CC                     	ds	1
  2451  00CD                     _DelayOff:	
  2452  00CD                     	ds	1
  2453  00CE                     _DimmerIntr:	
  2454  00CE                     	ds	1
  2455  00CF                     _DimmerLights:	
  2456  00CF                     	ds	1
  2457  00D0                     _LED:	
  2458  00D0                     	ds	1
  2459  00D1                     _Light:	
  2460  00D1                     	ds	1
  2461  00D2                     _RSSI:	
  2462  00D2                     	ds	1
  2463  00D3                     _Rx_Length:	
  2464  00D3                     	ds	1
  2465  00D4                     _SPI0Buffer:	
  2466  00D4                     	ds	1
  2467  00D5                     _Sw:	
  2468  00D5                     	ds	1
  2469  00D6                     _SwDetect:	
  2470  00D6                     	ds	1
  2471  00D7                     _Tx_Length:	
  2472  00D7                     	ds	1
  2473  00D8                     _r_address:	
  2474  00D8                     	ds	1
  2475  00D9                     _r_data:	
  2476  00D9                     	ds	1
  2477  00DA                     _s_data:	
  2478  00DA                     	ds	1
  2479  00DB                     _Temp:	
  2480  00DB                     	ds	10
  2481                           
  2482                           	psect	bssBANK2
  2483  0120                     __pbssBANK2:	
  2484  0120                     _Buz1:	
  2485  0120                     	ds	12
  2486  012C                     _Dimmer:	
  2487  012C                     	ds	5
  2488  0131                     _Timer1:	
  2489  0131                     	ds	3
  2490  0134                     _Load:	
  2491  0134                     	ds	40
  2492  015C                     _DimmerLights1:	
  2493  015C                     	ds	8
  2494  0164                     _DlySw1:	
  2495  0164                     	ds	5
  2496  0169                     _VarErrLED:	
  2497  0169                     	ds	4
  2498                           
  2499                           	psect	bssBANK3
  2500  01A0                     __pbssBANK3:	
  2501  01A0                     _RF_Data:	
  2502  01A0                     	ds	30
  2503  01BE                     _Memory:	
  2504  01BE                     	ds	37
  2505  01E3                     _Sw1:	
  2506  01E3                     	ds	9
  2507                           
  2508                           	psect	dataBANK4
  2509  0220                     __pdataBANK4:	
  2510  0220                     __product:	
  2511  0220                     	ds	32
  2512                           
  2513                           	psect	clrtext
  2514  1B7D                     clear_ram0:	
  2515                           ;	Called with FSR0 containing the base address, and
  2516                           ;	WREG with the size to clear
  2517                           
  2518  1B7D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2519  1B7E                     clrloop0:	
  2520  1B7E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2521  1B7F  3101               	addfsr 0,1
  2522  1B80  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2523  1B81  2B7E               	goto	clrloop0	;have we reached the end yet?
  2524  1B82  3400               	retlw	0	;all done for this memory range, return
  2525                           
  2526                           	psect	inittext
  2527  1B77                     init_ram:	
  2528  1B77  00FE               	movwf	126
  2529  1B78                     initloop:	
  2530  1B78  0012               	moviw fsr0++
  2531  1B79  001E               	movwi fsr1++
  2532  1B7A  0BFE               	decfsz	126,f
  2533  1B7B  2B78               	goto	initloop
  2534  1B7C  3400               	retlw	0
  2535                           
  2536                           	psect	cstackBANK3
  2537  01EC                     __pcstackBANK3:	
  2538  01EC                     ?_main:	
  2539  01EC                     main@argc:	
  2540                           ; 2 bytes @ 0x0
  2541                           
  2542                           
  2543                           ; 2 bytes @ 0x0
  2544  01EC                     	ds	2
  2545  01EE                     main@argv:	
  2546                           
  2547                           ; 2 bytes @ 0x2
  2548  01EE                     	ds	2
  2549                           
  2550                           	psect	cstackBANK1
  2551  00E5                     __pcstackBANK1:	
  2552  00E5                     ?_setDimmerLights_OnOff:	
  2553  00E5                     ??_setRFSW_Control:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  00E5                     setDimmerLights_OnOff@command:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  00E5                     setDimmerLights_Dimming@value:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  00E5                     setTemp_Main@error:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565                           
  2566                           ; 1 bytes @ 0x0
  2567  00E5                     	ds	1
  2568  00E6                     ??_setDimmerLights_OnOff:	
  2569  00E6                     setDimmerLights_Dimming@lights:	
  2570                           ; 0 bytes @ 0x1
  2571                           
  2572  00E6                     setTemp_Main@TempGO:	
  2573                           ; 1 bytes @ 0x1
  2574                           
  2575  00E6                     setRFSW_Control@status:	
  2576                           ; 1 bytes @ 0x1
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x1
  2580  00E6                     	ds	1
  2581  00E7                     setRFSW_Control@sw:	
  2582  00E7                     setTemp_Main@SafeValue:	
  2583                           ; 1 bytes @ 0x2
  2584                           
  2585                           
  2586                           ; 2 bytes @ 0x2
  2587  00E7                     	ds	1
  2588  00E8                     ??_getRxData:	
  2589  00E8                     setDimmerLights_OnOff@lights:	
  2590                           ; 0 bytes @ 0x3
  2591                           
  2592                           
  2593                           ; 1 bytes @ 0x3
  2594  00E8                     	ds	1
  2595  00E9                     setDimmerLights_Main@lights:	
  2596  00E9                     getRxData@error:	
  2597                           ; 1 bytes @ 0x4
  2598                           
  2599  00E9                     setTemp_Main@DangerValue:	
  2600                           ; 1 bytes @ 0x4
  2601                           
  2602                           
  2603                           ; 2 bytes @ 0x4
  2604  00E9                     	ds	1
  2605  00EA                     ??_setRF_Main:	
  2606                           
  2607                           ; 0 bytes @ 0x5
  2608  00EA                     	ds	1
  2609  00EB                     setRF_Main@error:	
  2610  00EB                     setTemp_Main@AD:	
  2611                           ; 1 bytes @ 0x6
  2612                           
  2613                           
  2614                           ; 2 bytes @ 0x6
  2615  00EB                     	ds	2
  2616                           
  2617                           	psect	cstackCOMMON
  2618  0070                     __pcstackCOMMON:	
  2619  0070                     ?_CC2500_WriteCommand:	
  2620  0070                     ?_RF_Timeout_Counter:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_setRF_TimeoutCleared:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_WriteByte:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_ReadStatus:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_ReadByte:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_PowerRST:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_InitSetREG:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_InitPATable:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_ClearTXFIFO:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_ClearRXFIFO:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_FrequencyCabr:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_SIDLEMode:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_DlyOff_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_DlyOff_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_SwOn:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_SwOff:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setMemory_Modify:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setDimmerLights_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setDimmerLights_Main:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setDimmerLights_Line:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setTxData:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setRF_TransceiveGO:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setLED_Initialization:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setLED_Main:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Fosc_Set:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IO_Set:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_TMR1_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_ADC_Set:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_IOC_Set:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_WDT_Set:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_TMR1_ISR:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_IOC_ISR:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Timeout_Counter:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_set_TimeoutCleared:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Write:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Flash_Memory_Modify:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_WDT_Clearing:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_myMain_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Temp_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Load_Initialization:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Switch_Initialization:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_RF_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_getLoad_AD:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_getTemp_AD:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_my_MainTimer:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_Temp_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Load_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_Switch_Main:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_RF_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Exception_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setLoad_AH_AL_Restore:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setTemp_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setTemp_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRF_Initialization:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setRF_Main:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_RF_RxDisable:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_getRxData:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setLog_Code:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setControl_Lights_Table:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setRFSW_Control:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setRFSW_AdjControl:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setSw_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setSw_Main:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_Buzzer_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_Buzzer_Main:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_CC2500_TxData:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_CC2500_RxData:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_CC2500_PowerOnInitial:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DelayOffPointSelect:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DelayOff_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DelayOff_Main:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerIntr_Initialization:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_SelectPointer:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_DimmerLights_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setDimmerLights_DimmingOn:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_DimmerLights_TMR_1:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ??_DimmerLights_TMR_1:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_DimmerLights_IOC_1:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LedPointSelect:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_LED_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_LED_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Mcu_Initialization:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_ISR:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Initialization:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Main:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Unlock:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_Flash_Memory_Erasing:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setMemory_LoopSave:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_WDT_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_setRF_Learn:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_TouchPower:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_SwPointSelect:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_Status:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_ValueToPercent:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_PercentToValue:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getLoad_OK:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_All_Error_Status:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getMain_All_LightsStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDimmerLights_Allow_Condition:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getCmd_Status:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_Flash_Memory_Read:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getAll_Sw_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getRF_KeyStatus:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getSw_KeyStatus:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDelayOff_GO:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerIntr_DimmingValue:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmerLights_Line:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDimmer_LoadGO:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDimmer_Load_Status:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getMain_Lights_Count:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?___lbdiv:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     setDimmerLights_Initialization@lights:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     getDimmerLights_Allow_Condition@lights:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     getSw_KeyStatus@sw:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ___lbdiv@divisor:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x0
  2973  0070                     	ds	1
  2974  0071                     ??_TMR1_ISR:	
  2975  0071                     ??___lbdiv:	
  2976                           ; 0 bytes @ 0x1
  2977                           
  2978                           
  2979                           ; 0 bytes @ 0x1
  2980  0071                     	ds	1
  2981  0072                     ___lbdiv@dividend:	
  2982                           
  2983                           ; 1 bytes @ 0x2
  2984  0072                     	ds	1
  2985  0073                     ___lbdiv@counter:	
  2986                           
  2987                           ; 1 bytes @ 0x3
  2988  0073                     	ds	1
  2989  0074                     ___lbdiv@quotient:	
  2990                           
  2991                           ; 1 bytes @ 0x4
  2992  0074                     	ds	1
  2993  0075                     ?_Division:	
  2994  0075                     Division@num:	
  2995                           ; 1 bytes @ 0x5
  2996                           
  2997                           
  2998                           ; 1 bytes @ 0x5
  2999  0075                     	ds	1
  3000  0076                     ??_Division:	
  3001                           
  3002                           ; 0 bytes @ 0x6
  3003  0076                     	ds	2
  3004  0078                     Division@value:	
  3005                           
  3006                           ; 1 bytes @ 0x8
  3007  0078                     	ds	1
  3008  0079                     Division@result:	
  3009                           
  3010                           ; 1 bytes @ 0x9
  3011  0079                     	ds	1
  3012  007A                     ??_DimmerLights_IOC_1:	
  3013                           
  3014                           ; 0 bytes @ 0xA
  3015  007A                     	ds	2
  3016  007C                     DimmerLights_IOC_1@count:	
  3017                           
  3018                           ; 1 bytes @ 0xC
  3019  007C                     	ds	1
  3020  007D                     DimmerLights_IOC_1@dimming:	
  3021                           
  3022                           ; 1 bytes @ 0xD
  3023  007D                     	ds	1
  3024  007E                     ??_IOC_ISR:	
  3025                           
  3026                           	psect	cstackBANK0
  3027  0020                     __pcstackBANK0:	
  3028                           ; 0 bytes @ 0xE
  3029                           
  3030  0020                     ??_ISR:	
  3031                           
  3032                           ; 0 bytes @ 0x0
  3033  0020                     	ds	1
  3034  0021                     ??_RF_Timeout_Counter:	
  3035  0021                     ??_setRF_TimeoutCleared:	
  3036                           ; 0 bytes @ 0x1
  3037                           
  3038  0021                     ??_CC2500_WriteByte:	
  3039                           ; 0 bytes @ 0x1
  3040                           
  3041  0021                     ??_CC2500_ReadByte:	
  3042                           ; 0 bytes @ 0x1
  3043                           
  3044  0021                     ?_DelayTime_1us:	
  3045                           ; 0 bytes @ 0x1
  3046                           
  3047  0021                     ??_setMemory_Modify:	
  3048                           ; 0 bytes @ 0x1
  3049                           
  3050  0021                     ??_setDimmerLights_Initialization:	
  3051                           ; 0 bytes @ 0x1
  3052                           
  3053  0021                     ??_getLoad_OK:	
  3054                           ; 0 bytes @ 0x1
  3055                           
  3056  0021                     ??_getMain_All_Error_Status:	
  3057                           ; 0 bytes @ 0x1
  3058                           
  3059  0021                     ??_getMain_All_LightsStatus:	
  3060                           ; 0 bytes @ 0x1
  3061                           
  3062  0021                     ??_setDimmerLights_Line:	
  3063                           ; 0 bytes @ 0x1
  3064                           
  3065  0021                     ??_getCmd_Status:	
  3066                           ; 0 bytes @ 0x1
  3067                           
  3068  0021                     ?_setCmd_Status:	
  3069                           ; 0 bytes @ 0x1
  3070                           
  3071  0021                     ??_setTxData:	
  3072                           ; 0 bytes @ 0x1
  3073                           
  3074  0021                     ??_setRF_TransceiveGO:	
  3075                           ; 0 bytes @ 0x1
  3076                           
  3077  0021                     ??_Fosc_Set:	
  3078                           ; 0 bytes @ 0x1
  3079                           
  3080  0021                     ??_IO_Set:	
  3081                           ; 0 bytes @ 0x1
  3082                           
  3083  0021                     ??_TMR1_Set:	
  3084                           ; 0 bytes @ 0x1
  3085                           
  3086  0021                     ??_ADC_Set:	
  3087                           ; 0 bytes @ 0x1
  3088                           
  3089  0021                     ??_IOC_Set:	
  3090                           ; 0 bytes @ 0x1
  3091                           
  3092  0021                     ??_WDT_Set:	
  3093                           ; 0 bytes @ 0x1
  3094                           
  3095  0021                     ??_Timeout_Counter:	
  3096                           ; 0 bytes @ 0x1
  3097                           
  3098  0021                     ??_set_TimeoutCleared:	
  3099                           ; 0 bytes @ 0x1
  3100                           
  3101  0021                     ??_Flash_Memory_Read:	
  3102                           ; 0 bytes @ 0x1
  3103                           
  3104  0021                     ?_setMemory_Data:	
  3105                           ; 0 bytes @ 0x1
  3106                           
  3107  0021                     ??_Flash_Memory_Write:	
  3108                           ; 0 bytes @ 0x1
  3109                           
  3110  0021                     ??_getAll_Sw_KeyStatus:	
  3111                           ; 0 bytes @ 0x1
  3112                           
  3113  0021                     ??_WDT_Clearing:	
  3114                           ; 0 bytes @ 0x1
  3115                           
  3116  0021                     ??_myMain_Initialization:	
  3117                           ; 0 bytes @ 0x1
  3118                           
  3119  0021                     ??_Temp_Initialization:	
  3120                           ; 0 bytes @ 0x1
  3121                           
  3122  0021                     ??_setLoad_AH_AL_Restore:	
  3123                           ; 0 bytes @ 0x1
  3124                           
  3125  0021                     ??_setTemp_Initialization:	
  3126                           ; 0 bytes @ 0x1
  3127                           
  3128  0021                     ??_setRF_Initialization:	
  3129                           ; 0 bytes @ 0x1
  3130                           
  3131  0021                     ??_getRF_KeyStatus:	
  3132                           ; 0 bytes @ 0x1
  3133                           
  3134  0021                     ??_getSw_KeyStatus:	
  3135                           ; 0 bytes @ 0x1
  3136                           
  3137  0021                     ??_Buzzer_Initialization:	
  3138                           ; 0 bytes @ 0x1
  3139                           
  3140  0021                     ??_Buzzer_Main:	
  3141                           ; 0 bytes @ 0x1
  3142                           
  3143  0021                     ??_DelayOffPointSelect:	
  3144                           ; 0 bytes @ 0x1
  3145                           
  3146  0021                     ?_setDimmerIntr_ControlStatus:	
  3147                           ; 0 bytes @ 0x1
  3148                           
  3149  0021                     ??_getDimmerIntr_DimmingValue:	
  3150                           ; 0 bytes @ 0x1
  3151                           
  3152  0021                     ?_setDimmerIntr_Dimming_Sw:	
  3153                           ; 0 bytes @ 0x1
  3154                           
  3155  0021                     ?_setDimmerIntr_Dimming_RF:	
  3156                           ; 0 bytes @ 0x1
  3157                           
  3158  0021                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3159                           ; 0 bytes @ 0x1
  3160                           
  3161  0021                     ??_DimmerLights_SelectPointer:	
  3162                           ; 0 bytes @ 0x1
  3163                           
  3164  0021                     ??_getDimmerLights_Line:	
  3165                           ; 0 bytes @ 0x1
  3166                           
  3167  0021                     ??_getDimmer_LoadGO:	
  3168                           ; 0 bytes @ 0x1
  3169                           
  3170  0021                     ??_getDimmer_Load_Status:	
  3171                           ; 0 bytes @ 0x1
  3172                           
  3173  0021                     ??_LedPointSelect:	
  3174                           ; 0 bytes @ 0x1
  3175                           
  3176  0021                     ??_Flash_Memory_Unlock:	
  3177                           ; 0 bytes @ 0x1
  3178                           
  3179  0021                     ??_Flash_Memory_Erasing:	
  3180                           ; 0 bytes @ 0x1
  3181                           
  3182  0021                     ??_setMemory_LoopSave:	
  3183                           ; 0 bytes @ 0x1
  3184                           
  3185  0021                     ??_WDT_Main:	
  3186                           ; 0 bytes @ 0x1
  3187                           
  3188  0021                     ??_getMain_Lights_Count:	
  3189                           ; 0 bytes @ 0x1
  3190                           
  3191  0021                     ??_setRF_Learn:	
  3192                           ; 0 bytes @ 0x1
  3193                           
  3194  0021                     ??_TouchPower:	
  3195                           ; 0 bytes @ 0x1
  3196                           
  3197  0021                     ??_SwPointSelect:	
  3198                           ; 0 bytes @ 0x1
  3199                           
  3200  0021                     ?___bmul:	
  3201                           ; 0 bytes @ 0x1
  3202                           
  3203  0021                     ?_getBuz_GO:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0021                     ?_getAD:	
  3207                           ; 2 bytes @ 0x1
  3208                           
  3209  0021                     ?___wmul:	
  3210                           ; 2 bytes @ 0x1
  3211                           
  3212  0021                     ?___awdiv:	
  3213                           ; 2 bytes @ 0x1
  3214                           
  3215  0021                     ?___lwdiv:	
  3216                           ; 2 bytes @ 0x1
  3217                           
  3218  0021                     ?___ftpack:	
  3219                           ; 2 bytes @ 0x1
  3220                           
  3221  0021                     setDimmerIntr_ControlStatus@command:	
  3222                           ; 3 bytes @ 0x1
  3223                           
  3224  0021                     setDimmerIntr_Dimming_Sw@command:	
  3225                           ; 1 bytes @ 0x1
  3226                           
  3227  0021                     setDimmerIntr_Dimming_RF@command:	
  3228                           ; 1 bytes @ 0x1
  3229                           
  3230  0021                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3231                           ; 1 bytes @ 0x1
  3232                           
  3233  0021                     setDimmerLights_Line@lights:	
  3234                           ; 1 bytes @ 0x1
  3235                           
  3236  0021                     getDimmerLights_Line@line:	
  3237                           ; 1 bytes @ 0x1
  3238                           
  3239  0021                     getDimmer_LoadGO@loadgo:	
  3240                           ; 1 bytes @ 0x1
  3241                           
  3242  0021                     getDimmer_Load_Status@status:	
  3243                           ; 1 bytes @ 0x1
  3244                           
  3245  0021                     getAD@adcon1:	
  3246                           ; 1 bytes @ 0x1
  3247                           
  3248  0021                     setMemory_Data@data:	
  3249                           ; 1 bytes @ 0x1
  3250                           
  3251  0021                     getMain_All_LightsStatus@status:	
  3252                           ; 1 bytes @ 0x1
  3253                           
  3254  0021                     getMain_Lights_Count@count:	
  3255                           ; 1 bytes @ 0x1
  3256                           
  3257  0021                     setCmd_Status@cmd:	
  3258                           ; 1 bytes @ 0x1
  3259                           
  3260  0021                     getCmd_Status@number:	
  3261                           ; 1 bytes @ 0x1
  3262                           
  3263  0021                     getLoad_OK@ok:	
  3264                           ; 1 bytes @ 0x1
  3265                           
  3266  0021                     ___bmul@multiplicand:	
  3267                           ; 1 bytes @ 0x1
  3268                           
  3269  0021                     DelayTime_1us@count:	
  3270                           ; 1 bytes @ 0x1
  3271                           
  3272  0021                     ___wmul@multiplier:	
  3273                           ; 2 bytes @ 0x1
  3274                           
  3275  0021                     ___awdiv@divisor:	
  3276                           ; 2 bytes @ 0x1
  3277                           
  3278  0021                     ___lwdiv@divisor:	
  3279                           ; 2 bytes @ 0x1
  3280                           
  3281  0021                     ___ftpack@arg:	
  3282                           ; 2 bytes @ 0x1
  3283                           
  3284                           
  3285                           ; 3 bytes @ 0x1
  3286  0021                     	ds	1
  3287  0022                     ??_getDimmerLights_Allow_Condition:	
  3288  0022                     ??_setCmd_Status:	
  3289                           ; 0 bytes @ 0x2
  3290                           
  3291  0022                     ??_setMemory_Data:	
  3292                           ; 0 bytes @ 0x2
  3293                           
  3294  0022                     ??_RF_Initialization:	
  3295                           ; 0 bytes @ 0x2
  3296                           
  3297  0022                     ??_setDimmerIntr_ControlStatus:	
  3298                           ; 0 bytes @ 0x2
  3299                           
  3300  0022                     ??_setDimmerIntr_Dimming_Sw:	
  3301                           ; 0 bytes @ 0x2
  3302                           
  3303  0022                     ??_setDimmerIntr_Dimming_RF:	
  3304                           ; 0 bytes @ 0x2
  3305                           
  3306  0022                     ??_Mcu_Initialization:	
  3307                           ; 0 bytes @ 0x2
  3308                           
  3309  0022                     ??___bmul:	
  3310                           ; 0 bytes @ 0x2
  3311                           
  3312  0022                     CC2500_WriteByte@loop_a:	
  3313                           ; 0 bytes @ 0x2
  3314                           
  3315  0022                     CC2500_ReadByte@loop_b:	
  3316                           ; 1 bytes @ 0x2
  3317                           
  3318  0022                     DelayOffPointSelect@sw:	
  3319                           ; 1 bytes @ 0x2
  3320                           
  3321  0022                     getDimmerIntr_DimmingValue@lights:	
  3322                           ; 1 bytes @ 0x2
  3323                           
  3324  0022                     DimmerLights_SelectPointer@lights:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327  0022                     LedPointSelect@led:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330  0022                     Flash_Memory_Read@i:	
  3331                           ; 1 bytes @ 0x2
  3332                           
  3333  0022                     Flash_Memory_Write@i:	
  3334                           ; 1 bytes @ 0x2
  3335                           
  3336  0022                     setMemory_Modify@command:	
  3337                           ; 1 bytes @ 0x2
  3338                           
  3339  0022                     setMemory_LoopSave@command:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342  0022                     getMain_Lights_Count@status1:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345  0022                     getCmd_Status@cmd:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348  0022                     setLoad_AH_AL_Restore@i:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351  0022                     setRF_Learn@command:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354  0022                     getRF_KeyStatus@key:	
  3355                           ; 1 bytes @ 0x2
  3356                           
  3357  0022                     setRF_TransceiveGO@command:	
  3358                           ; 1 bytes @ 0x2
  3359                           
  3360  0022                     SwPointSelect@sw:	
  3361                           ; 1 bytes @ 0x2
  3362                           
  3363  0022                     getSw_KeyStatus@status:	
  3364                           ; 1 bytes @ 0x2
  3365                           
  3366  0022                     getAll_Sw_KeyStatus@status:	
  3367                           ; 1 bytes @ 0x2
  3368                           
  3369  0022                     _getMain_All_Error_Status$3568:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372                           
  3373                           ; 2 bytes @ 0x2
  3374  0022                     	ds	1
  3375  0023                     ??_CC2500_WriteCommand:	
  3376  0023                     ??_CC2500_ReadStatus:	
  3377                           ; 0 bytes @ 0x3
  3378                           
  3379  0023                     ??_DelayTime_1us:	
  3380                           ; 0 bytes @ 0x3
  3381                           
  3382  0023                     ?_CC2500_WriteREG:	
  3383                           ; 0 bytes @ 0x3
  3384                           
  3385  0023                     ??_DlyOff_Initialization:	
  3386                           ; 0 bytes @ 0x3
  3387                           
  3388  0023                     ??_getDimmerLights_Status:	
  3389                           ; 0 bytes @ 0x3
  3390                           
  3391  0023                     ??_setDimmerLights_SwOff:	
  3392                           ; 0 bytes @ 0x3
  3393                           
  3394  0023                     ?_setLED:	
  3395                           ; 0 bytes @ 0x3
  3396                           
  3397  0023                     ??_setLED_Main:	
  3398                           ; 0 bytes @ 0x3
  3399                           
  3400  0023                     ??_Load_Initialization:	
  3401                           ; 0 bytes @ 0x3
  3402                           
  3403  0023                     ??_getBuz_GO:	
  3404                           ; 0 bytes @ 0x3
  3405                           
  3406  0023                     ??_getDelayOff_GO:	
  3407                           ; 0 bytes @ 0x3
  3408                           
  3409  0023                     ??_setDimmerLights_DimmingOn:	
  3410                           ; 0 bytes @ 0x3
  3411                           
  3412  0023                     ?_setDimmerLights_DimmingRun:	
  3413                           ; 0 bytes @ 0x3
  3414                           
  3415  0023                     CC2500_WriteREG@value:	
  3416                           ; 0 bytes @ 0x3
  3417                           
  3418  0023                     DlyOff_Initialization@sw:	
  3419                           ; 1 bytes @ 0x3
  3420                           
  3421  0023                     getDelayOff_GO@sw:	
  3422                           ; 1 bytes @ 0x3
  3423                           
  3424  0023                     setDimmerIntr_ControlStatus@lights:	
  3425                           ; 1 bytes @ 0x3
  3426                           
  3427  0023                     getDimmerIntr_DimmingValue@value:	
  3428                           ; 1 bytes @ 0x3
  3429                           
  3430  0023                     setDimmerIntr_Dimming_Sw@lights:	
  3431                           ; 1 bytes @ 0x3
  3432                           
  3433  0023                     setDimmerIntr_Dimming_RF@lights:	
  3434                           ; 1 bytes @ 0x3
  3435                           
  3436  0023                     setDimmerLights_SwOff@sw:	
  3437                           ; 1 bytes @ 0x3
  3438                           
  3439  0023                     setDimmerLights_DimmingOn@sw:	
  3440                           ; 1 bytes @ 0x3
  3441                           
  3442  0023                     getDimmerLights_Allow_Condition@allow:	
  3443                           ; 1 bytes @ 0x3
  3444                           
  3445  0023                     getDimmerLights_Status@lights:	
  3446                           ; 1 bytes @ 0x3
  3447                           
  3448  0023                     setDimmerLights_DimmingRun@command:	
  3449                           ; 1 bytes @ 0x3
  3450                           
  3451  0023                     setLED@command:	
  3452                           ; 1 bytes @ 0x3
  3453                           
  3454  0023                     Flash_Memory_Read@address:	
  3455                           ; 1 bytes @ 0x3
  3456                           
  3457  0023                     setMemory_Data@address:	
  3458                           ; 1 bytes @ 0x3
  3459                           
  3460  0023                     setCmd_Status@number:	
  3461                           ; 1 bytes @ 0x3
  3462                           
  3463  0023                     _getRF_KeyStatus$5333:	
  3464                           ; 1 bytes @ 0x3
  3465                           
  3466  0023                     _getSw_KeyStatus$6368:	
  3467                           ; 1 bytes @ 0x3
  3468                           
  3469  0023                     _getAll_Sw_KeyStatus$6371:	
  3470                           ; 1 bytes @ 0x3
  3471                           
  3472  0023                     ___bmul@product:	
  3473                           ; 1 bytes @ 0x3
  3474                           
  3475  0023                     DelayTime_1us@i:	
  3476                           ; 1 bytes @ 0x3
  3477                           
  3478  0023                     ___wmul@multiplicand:	
  3479                           ; 2 bytes @ 0x3
  3480                           
  3481  0023                     ___awdiv@dividend:	
  3482                           ; 2 bytes @ 0x3
  3483                           
  3484  0023                     ___lwdiv@dividend:	
  3485                           ; 2 bytes @ 0x3
  3486                           
  3487                           
  3488                           ; 2 bytes @ 0x3
  3489  0023                     	ds	1
  3490  0024                     ??_CC2500_WriteREG:	
  3491  0024                     ??_setLED:	
  3492                           ; 0 bytes @ 0x4
  3493                           
  3494  0024                     ??_DelayOff_Initialization:	
  3495                           ; 0 bytes @ 0x4
  3496                           
  3497  0024                     ??_setDimmerLights_DimmingRun:	
  3498                           ; 0 bytes @ 0x4
  3499                           
  3500  0024                     ??_getAD:	
  3501                           ; 0 bytes @ 0x4
  3502                           
  3503  0024                     CC2500_WriteCommand@command:	
  3504                           ; 0 bytes @ 0x4
  3505                           
  3506  0024                     CC2500_ReadStatus@status_addr:	
  3507                           ; 1 bytes @ 0x4
  3508                           
  3509  0024                     getDelayOff_GO@go:	
  3510                           ; 1 bytes @ 0x4
  3511                           
  3512  0024                     _getDimmerLights_Allow_Condition$2241:	
  3513                           ; 1 bytes @ 0x4
  3514                           
  3515  0024                     getDimmerLights_Status@status:	
  3516                           ; 1 bytes @ 0x4
  3517                           
  3518  0024                     setLED@led:	
  3519                           ; 1 bytes @ 0x4
  3520                           
  3521  0024                     getAD@adcon0:	
  3522                           ; 1 bytes @ 0x4
  3523                           
  3524  0024                     Flash_Memory_Read@ret:	
  3525                           ; 1 bytes @ 0x4
  3526                           
  3527  0024                     ___bmul@multiplier:	
  3528                           ; 1 bytes @ 0x4
  3529                           
  3530  0024                     ___ftpack@exp:	
  3531                           ; 1 bytes @ 0x4
  3532                           
  3533  0024                     _getMain_All_Error_Status$3569:	
  3534                           ; 1 bytes @ 0x4
  3535                           
  3536                           
  3537                           ; 2 bytes @ 0x4
  3538  0024                     	ds	1
  3539  0025                     ??_CC2500_ClearTXFIFO:	
  3540  0025                     ??_CC2500_ClearRXFIFO:	
  3541                           ; 0 bytes @ 0x5
  3542                           
  3543  0025                     ??_CC2500_SIDLEMode:	
  3544                           ; 0 bytes @ 0x5
  3545                           
  3546  0025                     ??_setLED_Initialization:	
  3547                           ; 0 bytes @ 0x5
  3548                           
  3549  0025                     ??_Flash_Memory_Modify:	
  3550                           ; 0 bytes @ 0x5
  3551                           
  3552  0025                     ??_getLoad_AD:	
  3553                           ; 0 bytes @ 0x5
  3554                           
  3555  0025                     ??_getTemp_AD:	
  3556                           ; 0 bytes @ 0x5
  3557                           
  3558  0025                     ??_RF_RxDisable:	
  3559                           ; 0 bytes @ 0x5
  3560                           
  3561  0025                     ??_setSw_Initialization:	
  3562                           ; 0 bytes @ 0x5
  3563                           
  3564  0025                     ??_CC2500_TxData:	
  3565                           ; 0 bytes @ 0x5
  3566                           
  3567  0025                     ??_CC2500_RxData:	
  3568                           ; 0 bytes @ 0x5
  3569                           
  3570  0025                     ??_Flash_Memory_Initialization:	
  3571                           ; 0 bytes @ 0x5
  3572                           
  3573  0025                     ??___wmul:	
  3574                           ; 0 bytes @ 0x5
  3575                           
  3576  0025                     ??___awdiv:	
  3577                           ; 0 bytes @ 0x5
  3578                           
  3579  0025                     ??___lwdiv:	
  3580                           ; 0 bytes @ 0x5
  3581                           
  3582  0025                     CC2500_WriteREG@w_addr:	
  3583                           ; 0 bytes @ 0x5
  3584                           
  3585  0025                     setDimmerLights_DimmingRun@lights:	
  3586                           ; 1 bytes @ 0x5
  3587                           
  3588  0025                     setLED_Initialization@led:	
  3589                           ; 1 bytes @ 0x5
  3590                           
  3591  0025                     setLED_Main@led:	
  3592                           ; 1 bytes @ 0x5
  3593                           
  3594  0025                     setSw_Initialization@sw:	
  3595                           ; 1 bytes @ 0x5
  3596                           
  3597  0025                     ___ftpack@sign:	
  3598                           ; 1 bytes @ 0x5
  3599                           
  3600  0025                     getBuz_GO@i:	
  3601                           ; 1 bytes @ 0x5
  3602                           
  3603  0025                     DelayTime_1us@j:	
  3604                           ; 2 bytes @ 0x5
  3605                           
  3606  0025                     ___wmul@product:	
  3607                           ; 2 bytes @ 0x5
  3608                           
  3609                           
  3610                           ; 2 bytes @ 0x5
  3611  0025                     	ds	1
  3612  0026                     ??_CC2500_InitSetREG:	
  3613  0026                     ??_CC2500_InitPATable:	
  3614                           ; 0 bytes @ 0x6
  3615                           
  3616  0026                     ??_Switch_Initialization:	
  3617                           ; 0 bytes @ 0x6
  3618                           
  3619  0026                     ??___ftpack:	
  3620                           ; 0 bytes @ 0x6
  3621                           
  3622  0026                     ??_LED_Initialization:	
  3623                           ; 0 bytes @ 0x6
  3624                           
  3625  0026                     ??_LED_Main:	
  3626                           ; 0 bytes @ 0x6
  3627                           
  3628  0026                     CC2500_TxData@loop_e:	
  3629                           ; 0 bytes @ 0x6
  3630                           
  3631  0026                     CC2500_RxData@loop_f:	
  3632                           ; 1 bytes @ 0x6
  3633                           
  3634  0026                     Flash_Memory_Initialization@value:	
  3635                           ; 1 bytes @ 0x6
  3636                           
  3637  0026                     Flash_Memory_Modify@i:	
  3638                           ; 1 bytes @ 0x6
  3639                           
  3640  0026                     getMain_All_Error_Status@command:	
  3641                           ; 1 bytes @ 0x6
  3642                           
  3643  0026                     getTemp_AD@channel:	
  3644                           ; 1 bytes @ 0x6
  3645                           
  3646  0026                     ___awdiv@counter:	
  3647                           ; 1 bytes @ 0x6
  3648                           
  3649  0026                     ___lwdiv@quotient:	
  3650                           ; 1 bytes @ 0x6
  3651                           
  3652                           
  3653                           ; 2 bytes @ 0x6
  3654  0026                     	ds	1
  3655  0027                     ??_CC2500_PowerRST:	
  3656  0027                     ??_CC2500_FrequencyCabr:	
  3657                           ; 0 bytes @ 0x7
  3658                           
  3659  0027                     ??_Flash_Memory_Main:	
  3660                           ; 0 bytes @ 0x7
  3661                           
  3662  0027                     CC2500_InitSetREG@temp1:	
  3663                           ; 0 bytes @ 0x7
  3664                           
  3665  0027                     CC2500_InitPATable@temp:	
  3666                           ; 1 bytes @ 0x7
  3667                           
  3668  0027                     getMain_All_Error_Status@status:	
  3669                           ; 1 bytes @ 0x7
  3670                           
  3671  0027                     getLoad_AD@channel:	
  3672                           ; 1 bytes @ 0x7
  3673                           
  3674  0027                     ___awdiv@sign:	
  3675                           ; 1 bytes @ 0x7
  3676                           
  3677  0027                     getTemp_AD@ADRES:	
  3678                           ; 1 bytes @ 0x7
  3679                           
  3680                           
  3681                           ; 2 bytes @ 0x7
  3682  0027                     	ds	1
  3683  0028                     CC2500_InitSetREG@temp2:	
  3684  0028                     CC2500_InitPATable@loop_d:	
  3685                           ; 1 bytes @ 0x8
  3686                           
  3687  0028                     Flash_Memory_Main@key_Status:	
  3688                           ; 1 bytes @ 0x8
  3689                           
  3690  0028                     getLoad_AD@k:	
  3691                           ; 1 bytes @ 0x8
  3692                           
  3693  0028                     ___lwdiv@counter:	
  3694                           ; 1 bytes @ 0x8
  3695                           
  3696  0028                     ___awdiv@quotient:	
  3697                           ; 1 bytes @ 0x8
  3698                           
  3699                           
  3700                           ; 2 bytes @ 0x8
  3701  0028                     	ds	1
  3702  0029                     ??_Load_Main:	
  3703  0029                     ?___awtoft:	
  3704                           ; 0 bytes @ 0x9
  3705                           
  3706  0029                     CC2500_InitSetREG@loop_c:	
  3707                           ; 3 bytes @ 0x9
  3708                           
  3709  0029                     _Flash_Memory_Main$3112:	
  3710                           ; 1 bytes @ 0x9
  3711                           
  3712  0029                     getLoad_AD@j:	
  3713                           ; 1 bytes @ 0x9
  3714                           
  3715  0029                     ___awtoft@c:	
  3716                           ; 1 bytes @ 0x9
  3717                           
  3718                           
  3719                           ; 2 bytes @ 0x9
  3720  0029                     	ds	1
  3721  002A                     ?_setBuz:	
  3722  002A                     ??_CC2500_PowerOnInitial:	
  3723                           ; 0 bytes @ 0xA
  3724                           
  3725  002A                     setBuz@time:	
  3726                           ; 0 bytes @ 0xA
  3727                           
  3728  002A                     getLoad_AD@ADRES:	
  3729                           ; 2 bytes @ 0xA
  3730                           
  3731                           
  3732                           ; 2 bytes @ 0xA
  3733  002A                     	ds	1
  3734  002B                     Load_Main@error:	
  3735                           
  3736                           ; 1 bytes @ 0xB
  3737  002B                     	ds	1
  3738  002C                     ??_setBuz:	
  3739  002C                     ??___awtoft:	
  3740                           ; 0 bytes @ 0xC
  3741                           
  3742  002C                     getLoad_AD@i:	
  3743                           ; 0 bytes @ 0xC
  3744                           
  3745  002C                     _Load_Main$3939:	
  3746                           ; 1 bytes @ 0xC
  3747                           
  3748                           
  3749                           ; 2 bytes @ 0xC
  3750  002C                     	ds	1
  3751  002D                     setBuz@count:	
  3752                           
  3753                           ; 1 bytes @ 0xD
  3754  002D                     	ds	1
  3755  002E                     ??_setDimmerLights_SwOn:	
  3756  002E                     ??_my_MainTimer:	
  3757                           ; 0 bytes @ 0xE
  3758                           
  3759  002E                     ??_Exception_Main:	
  3760                           ; 0 bytes @ 0xE
  3761                           
  3762  002E                     setDimmerLights_SwOn@sw:	
  3763                           ; 0 bytes @ 0xE
  3764                           
  3765  002E                     Load_Main@ErrorCountValue:	
  3766                           ; 1 bytes @ 0xE
  3767                           
  3768  002E                     ___awtoft@sign:	
  3769                           ; 1 bytes @ 0xE
  3770                           
  3771                           
  3772                           ; 1 bytes @ 0xE
  3773  002E                     	ds	1
  3774  002F                     ?___ftdiv:	
  3775  002F                     ?___ftmul:	
  3776                           ; 3 bytes @ 0xF
  3777                           
  3778  002F                     setDimmerLights_SwOn@idle:	
  3779                           ; 3 bytes @ 0xF
  3780                           
  3781  002F                     Exception_Main@status:	
  3782                           ; 1 bytes @ 0xF
  3783                           
  3784  002F                     Load_Main@Load_RunStatus:	
  3785                           ; 1 bytes @ 0xF
  3786                           
  3787  002F                     ___ftdiv@f2:	
  3788                           ; 1 bytes @ 0xF
  3789                           
  3790  002F                     ___ftmul@f1:	
  3791                           ; 3 bytes @ 0xF
  3792                           
  3793                           
  3794                           ; 3 bytes @ 0xF
  3795  002F                     	ds	1
  3796  0030                     ??_setSw_Main:	
  3797  0030                     Exception_Main@count:	
  3798                           ; 0 bytes @ 0x10
  3799                           
  3800  0030                     Load_Main@LightsCount:	
  3801                           ; 1 bytes @ 0x10
  3802                           
  3803                           
  3804                           ; 1 bytes @ 0x10
  3805  0030                     	ds	1
  3806  0031                     Exception_Main@error:	
  3807  0031                     Load_Main@i:	
  3808                           ; 1 bytes @ 0x11
  3809                           
  3810                           
  3811                           ; 2 bytes @ 0x11
  3812  0031                     	ds	1
  3813  0032                     setSw_Main@sw:	
  3814  0032                     Exception_Main@i:	
  3815                           ; 1 bytes @ 0x12
  3816                           
  3817  0032                     ___ftdiv@f1:	
  3818                           ; 2 bytes @ 0x12
  3819                           
  3820  0032                     ___ftmul@f2:	
  3821                           ; 3 bytes @ 0x12
  3822                           
  3823                           
  3824                           ; 3 bytes @ 0x12
  3825  0032                     	ds	1
  3826  0033                     ??_Switch_Main:	
  3827                           
  3828                           ; 0 bytes @ 0x13
  3829  0033                     	ds	1
  3830  0034                     Exception_Main@i_3580:	
  3831                           
  3832                           ; 2 bytes @ 0x14
  3833  0034                     	ds	1
  3834  0035                     ??___ftdiv:	
  3835  0035                     ??___ftmul:	
  3836                           ; 0 bytes @ 0x15
  3837                           
  3838                           
  3839                           ; 0 bytes @ 0x15
  3840  0035                     	ds	1
  3841  0036                     Exception_Main@lights:	
  3842                           
  3843                           ; 1 bytes @ 0x16
  3844  0036                     	ds	3
  3845  0039                     ___ftdiv@cntr:	
  3846  0039                     ___ftmul@exp:	
  3847                           ; 1 bytes @ 0x19
  3848                           
  3849                           
  3850                           ; 1 bytes @ 0x19
  3851  0039                     	ds	1
  3852  003A                     ___ftdiv@f3:	
  3853  003A                     ___ftmul@f3_as_product:	
  3854                           ; 3 bytes @ 0x1A
  3855                           
  3856                           
  3857                           ; 3 bytes @ 0x1A
  3858  003A                     	ds	3
  3859  003D                     ___ftdiv@exp:	
  3860  003D                     ___ftmul@cntr:	
  3861                           ; 1 bytes @ 0x1D
  3862                           
  3863                           
  3864                           ; 1 bytes @ 0x1D
  3865  003D                     	ds	1
  3866  003E                     ___ftdiv@sign:	
  3867  003E                     ___ftmul@sign:	
  3868                           ; 1 bytes @ 0x1E
  3869                           
  3870                           
  3871                           ; 1 bytes @ 0x1E
  3872  003E                     	ds	1
  3873  003F                     ?___ftneg:	
  3874  003F                     ___ftneg@f1:	
  3875                           ; 3 bytes @ 0x1F
  3876                           
  3877                           
  3878                           ; 3 bytes @ 0x1F
  3879  003F                     	ds	3
  3880  0042                     ??___ftneg:	
  3881  0042                     ?___ftadd:	
  3882                           ; 0 bytes @ 0x22
  3883                           
  3884  0042                     ___ftadd@f1:	
  3885                           ; 3 bytes @ 0x22
  3886                           
  3887                           
  3888                           ; 3 bytes @ 0x22
  3889  0042                     	ds	3
  3890  0045                     ___ftadd@f2:	
  3891                           
  3892                           ; 3 bytes @ 0x25
  3893  0045                     	ds	3
  3894  0048                     ??___ftadd:	
  3895                           
  3896                           ; 0 bytes @ 0x28
  3897  0048                     	ds	4
  3898  004C                     ___ftadd@sign:	
  3899                           
  3900                           ; 1 bytes @ 0x2C
  3901  004C                     	ds	1
  3902  004D                     ___ftadd@exp2:	
  3903                           
  3904                           ; 1 bytes @ 0x2D
  3905  004D                     	ds	1
  3906  004E                     ___ftadd@exp1:	
  3907                           
  3908                           ; 1 bytes @ 0x2E
  3909  004E                     	ds	1
  3910  004F                     ?___fttol:	
  3911  004F                     ___fttol@f1:	
  3912                           ; 4 bytes @ 0x2F
  3913                           
  3914                           
  3915                           ; 3 bytes @ 0x2F
  3916  004F                     	ds	4
  3917  0053                     ??___fttol:	
  3918                           
  3919                           ; 0 bytes @ 0x33
  3920  0053                     	ds	4
  3921  0057                     ___fttol@sign1:	
  3922                           
  3923                           ; 1 bytes @ 0x37
  3924  0057                     	ds	1
  3925  0058                     ___fttol@lval:	
  3926                           
  3927                           ; 4 bytes @ 0x38
  3928  0058                     	ds	4
  3929  005C                     ___fttol@exp1:	
  3930                           
  3931                           ; 1 bytes @ 0x3C
  3932  005C                     	ds	1
  3933  005D                     ??_getDimmerLights_ValueToPercent:	
  3934  005D                     ??_getDimmerLights_PercentToValue:	
  3935                           ; 0 bytes @ 0x3D
  3936                           
  3937                           
  3938                           ; 0 bytes @ 0x3D
  3939  005D                     	ds	2
  3940  005F                     getDimmerLights_PercentToValue@value:	
  3941  005F                     getDimmerLights_ValueToPercent@value:	
  3942                           ; 1 bytes @ 0x3F
  3943                           
  3944                           
  3945                           ; 1 bytes @ 0x3F
  3946  005F                     	ds	1
  3947  0060                     getDimmerLights_PercentToValue@i:	
  3948  0060                     getDimmerLights_ValueToPercent@i:	
  3949                           ; 3 bytes @ 0x40
  3950                           
  3951                           
  3952                           ; 3 bytes @ 0x40
  3953  0060                     	ds	3
  3954  0063                     ?_setProductData:	
  3955  0063                     ??_DimmerIntr_Initialization:	
  3956                           ; 0 bytes @ 0x43
  3957                           
  3958  0063                     ?_setDimmerIntr_DimmingValue:	
  3959                           ; 0 bytes @ 0x43
  3960                           
  3961  0063                     ?_setDimmerIntr_MaxmumValue:	
  3962                           ; 0 bytes @ 0x43
  3963                           
  3964  0063                     setDimmerIntr_DimmingValue@value:	
  3965                           ; 0 bytes @ 0x43
  3966                           
  3967  0063                     setDimmerIntr_MaxmumValue@value:	
  3968                           ; 1 bytes @ 0x43
  3969                           
  3970  0063                     setProductData@value:	
  3971                           ; 1 bytes @ 0x43
  3972                           
  3973                           
  3974                           ; 1 bytes @ 0x43
  3975  0063                     	ds	1
  3976  0064                     ??_setProductData:	
  3977  0064                     ??_setDimmerIntr_DimmingValue:	
  3978                           ; 0 bytes @ 0x44
  3979                           
  3980  0064                     ??_setDimmerIntr_MaxmumValue:	
  3981                           ; 0 bytes @ 0x44
  3982                           
  3983  0064                     ??_DimmerLights_Initialization:	
  3984                           ; 0 bytes @ 0x44
  3985                           
  3986                           
  3987                           ; 0 bytes @ 0x44
  3988  0064                     	ds	1
  3989  0065                     setDimmerIntr_DimmingValue@lights:	
  3990  0065                     setDimmerIntr_MaxmumValue@lights:	
  3991                           ; 1 bytes @ 0x45
  3992                           
  3993  0065                     setProductData@address:	
  3994                           ; 1 bytes @ 0x45
  3995                           
  3996                           
  3997                           ; 1 bytes @ 0x45
  3998  0065                     	ds	1
  3999  0066                     ??_DlyOff_Main:	
  4000  0066                     ?_setRF_DimmerLights:	
  4001                           ; 0 bytes @ 0x46
  4002                           
  4003  0066                     ??_setTemp_Main:	
  4004                           ; 0 bytes @ 0x46
  4005                           
  4006  0066                     ??_setLog_Code:	
  4007                           ; 0 bytes @ 0x46
  4008                           
  4009  0066                     ??_setRFSW_AdjControl:	
  4010                           ; 0 bytes @ 0x46
  4011                           
  4012  0066                     ?_setDelayOff_GO:	
  4013                           ; 0 bytes @ 0x46
  4014                           
  4015  0066                     setDelayOff_GO@command:	
  4016                           ; 0 bytes @ 0x46
  4017                           
  4018  0066                     setRF_DimmerLights@on:	
  4019                           ; 1 bytes @ 0x46
  4020                           
  4021                           
  4022                           ; 1 bytes @ 0x46
  4023  0066                     	ds	1
  4024  0067                     ??_setRF_DimmerLights:	
  4025  0067                     ??_Temp_Main:	
  4026                           ; 0 bytes @ 0x47
  4027                           
  4028  0067                     setDelayOff_GO@value:	
  4029                           ; 0 bytes @ 0x47
  4030                           
  4031                           
  4032                           ; 1 bytes @ 0x47
  4033  0067                     	ds	1
  4034  0068                     ??_setDelayOff_GO:	
  4035  0068                     DlyOff_Main@sw:	
  4036                           ; 0 bytes @ 0x48
  4037                           
  4038  0068                     setRFSW_AdjControl@status:	
  4039                           ; 1 bytes @ 0x48
  4040                           
  4041                           
  4042                           ; 1 bytes @ 0x48
  4043  0068                     	ds	1
  4044  0069                     ??_DelayOff_Main:	
  4045  0069                     setRFSW_AdjControl@sw:	
  4046                           ; 0 bytes @ 0x49
  4047                           
  4048  0069                     setRF_DimmerLights@status:	
  4049                           ; 1 bytes @ 0x49
  4050                           
  4051                           
  4052                           ; 1 bytes @ 0x49
  4053  0069                     	ds	1
  4054  006A                     setDelayOff_GO@i:	
  4055  006A                     setRF_DimmerLights@lights:	
  4056                           ; 1 bytes @ 0x4A
  4057                           
  4058                           
  4059                           ; 1 bytes @ 0x4A
  4060  006A                     	ds	1
  4061  006B                     ?_setDimmerLights_Dimming:	
  4062  006B                     setDelayOff_GO@j:	
  4063                           ; 0 bytes @ 0x4B
  4064                           
  4065  006B                     setDimmerLights_Dimming@status:	
  4066                           ; 1 bytes @ 0x4B
  4067                           
  4068                           
  4069                           ; 1 bytes @ 0x4B
  4070  006B                     	ds	1
  4071  006C                     ??_setDimmerLights_Dimming:	
  4072  006C                     setDelayOff_GO@k:	
  4073                           ; 0 bytes @ 0x4C
  4074                           
  4075                           
  4076                           ; 1 bytes @ 0x4C
  4077  006C                     	ds	1
  4078  006D                     setDelayOff_GO@sw:	
  4079                           
  4080                           ; 1 bytes @ 0x4D
  4081  006D                     	ds	1
  4082  006E                     ??_setDimmerLights_Main:	
  4083  006E                     ??_RF_Main:	
  4084                           ; 0 bytes @ 0x4E
  4085                           
  4086  006E                     ??_setControl_Lights_Table:	
  4087                           ; 0 bytes @ 0x4E
  4088                           
  4089  006E                     ??_DimmerLights_Main:	
  4090                           ; 0 bytes @ 0x4E
  4091                           
  4092  006E                     ??_main:	
  4093                           ; 0 bytes @ 0x4E
  4094                           
  4095                           
  4096                           	psect	maintext
  4097  154F                     __pmaintext:	
  4098                           ; 0 bytes @ 0x4E
  4099 ;;
  4100 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4101 ;;
  4102 ;; *************** function _main *****************
  4103 ;; Defined at:
  4104 ;;		line 7 in file "../src/Main_B1.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  argc            2    0[BANK3 ] int 
  4107 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  2    0[BANK3 ] int 
  4112 ;; Registers used:
  4113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4114 ;; Tracked objects:
  4115 ;;		On entry : 17F/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4119 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4123 ;;Total ram usage:        4 bytes
  4124 ;; Hardware stack levels required when called:   13
  4125 ;; This function calls:
  4126 ;;		_Buzzer_Initialization
  4127 ;;		_Buzzer_Main
  4128 ;;		_CC2500_PowerOnInitial
  4129 ;;		_DelayOff_Initialization
  4130 ;;		_DelayOff_Main
  4131 ;;		_DimmerLights_Initialization
  4132 ;;		_DimmerLights_Main
  4133 ;;		_Exception_Main
  4134 ;;		_Flash_Memory_Initialization
  4135 ;;		_Flash_Memory_Main
  4136 ;;		_LED_Initialization
  4137 ;;		_LED_Main
  4138 ;;		_Load_Initialization
  4139 ;;		_Load_Main
  4140 ;;		_Mcu_Initialization
  4141 ;;		_RF_Initialization
  4142 ;;		_RF_Main
  4143 ;;		_Switch_Initialization
  4144 ;;		_Switch_Main
  4145 ;;		_Temp_Initialization
  4146 ;;		_Temp_Main
  4147 ;;		_WDT_Main
  4148 ;;		_getLoad_AD
  4149 ;;		_getTemp_AD
  4150 ;;		_myMain_Initialization
  4151 ;;		_my_MainTimer
  4152 ;; This function is called by:
  4153 ;;		Startup code after reset
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _main
  4159  154F                     _main:	
  4160                           
  4161                           ;Main_B1.c: 8: myMain_Initialization();
  4162                           
  4163                           ;incstack = 0
  4164                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4165  154F  319D  25DB  3195   	fcall	_myMain_Initialization
  4166                           
  4167                           ;Main_B1.c: 9: Mcu_Initialization();
  4168  1552  319D  256B  3195   	fcall	_Mcu_Initialization
  4169                           
  4170                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4171  1555  3186  2620  3195   	fcall	_Flash_Memory_Initialization
  4172                           
  4173                           ;Main_B1.c: 11: LED_Initialization();
  4174  1558  319B  234C  3195   	fcall	_LED_Initialization
  4175                           
  4176                           ;Main_B1.c: 12: Buzzer_Initialization();
  4177  155B  319B  2335  3195   	fcall	_Buzzer_Initialization
  4178                           
  4179                           ;Main_B1.c: 14: ;;
  4180                           ;Main_B1.c: 15: Temp_Initialization();
  4181  155E  319B  2341  3195   	fcall	_Temp_Initialization
  4182                           
  4183                           ;Main_B1.c: 16: Load_Initialization();
  4184  1561  319B  2338  3195   	fcall	_Load_Initialization
  4185                           
  4186                           ;Main_B1.c: 17: ;;
  4187                           ;Main_B1.c: 18: DelayOff_Initialization();
  4188  1564  319B  2344  3195   	fcall	_DelayOff_Initialization
  4189                           
  4190                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4191  1567  319B  2383  3195   	fcall	_DimmerLights_Initialization
  4192                           
  4193                           ;Main_B1.c: 21: ;;
  4194                           ;Main_B1.c: 22: ;;
  4195                           ;Main_B1.c: 23: ;;
  4196                           ;Main_B1.c: 24: Switch_Initialization();
  4197  156A  319B  2368  3195   	fcall	_Switch_Initialization
  4198                           
  4199                           ;Main_B1.c: 25: RF_Initialization();
  4200  156D  319B  233B  3195   	fcall	_RF_Initialization
  4201                           
  4202                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4203  1570  319E  2617  3195   	fcall	_CC2500_PowerOnInitial
  4204  1573                     l9596:	
  4205                           ;Main_B1.c: 27: ;;
  4206                           ;Main_B1.c: 28: ;;
  4207                           ;Main_B1.c: 30: while (1) {
  4208                           
  4209                           
  4210                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4211  1573  0021               	movlb	1	; select bank1
  4212  1574  1C2E               	btfss	_myMain^(0+128),0
  4213  1575  2D7E               	goto	l9600
  4214                           
  4215                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4216  1576  3005               	movlw	5
  4217  1577  318A  223C  3195   	fcall	_getLoad_AD
  4218                           
  4219                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4220  157A  3009               	movlw	9
  4221  157B  3193  2363  3195   	fcall	_getTemp_AD
  4222  157E                     l9600:	
  4223                           
  4224                           ;Main_B1.c: 57: }
  4225                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4226  157E  0022               	movlb	2	; select bank2
  4227  157F  1C31               	btfss	_Timer1^(0+256),0
  4228  1580  2D73               	goto	l9596
  4229                           
  4230                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4231  1581  1031               	bcf	_Timer1^(0+256),0
  4232                           
  4233                           ;Main_B1.c: 96: my_MainTimer();
  4234  1582  3193  2327  3195   	fcall	_my_MainTimer
  4235                           
  4236                           ;Main_B1.c: 97: WDT_Main();
  4237  1585  319D  257D  3195   	fcall	_WDT_Main
  4238                           
  4239                           ;Main_B1.c: 98: ;;
  4240                           ;Main_B1.c: 99: ;;
  4241                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4242  1588  0021               	movlb	1	; select bank1
  4243  1589  1C2E               	btfss	_myMain^(0+128),0
  4244  158A  2D73               	goto	l9596
  4245                           
  4246                           ;Main_B1.c: 101: Flash_Memory_Main();
  4247  158B  3193  23E4  3195   	fcall	_Flash_Memory_Main
  4248                           
  4249                           ;Main_B1.c: 103: LED_Main();
  4250  158E  319B  2350  3195   	fcall	_LED_Main
  4251                           
  4252                           ;Main_B1.c: 104: Buzzer_Main();
  4253  1591  3194  24AC  3195   	fcall	_Buzzer_Main
  4254                           
  4255                           ;Main_B1.c: 106: ;;
  4256                           ;Main_B1.c: 107: Temp_Main();
  4257  1594  3187  27FD  3195   	fcall	_Temp_Main
  4258                           
  4259                           ;Main_B1.c: 108: Load_Main();
  4260  1597  3180  204A  3195   	fcall	_Load_Main
  4261                           
  4262                           ;Main_B1.c: 109: ;;
  4263                           ;Main_B1.c: 111: ;;
  4264                           ;Main_B1.c: 112: DimmerLights_Main();
  4265  159A  319F  274D  3195   	fcall	_DimmerLights_Main
  4266                           
  4267                           ;Main_B1.c: 113: Switch_Main();
  4268  159D  319B  2391  3195   	fcall	_Switch_Main
  4269                           
  4270                           ;Main_B1.c: 114: ;;
  4271                           ;Main_B1.c: 115: ;;
  4272                           ;Main_B1.c: 117: RF_Main();
  4273  15A0  319B  233E  3195   	fcall	_RF_Main
  4274                           
  4275                           ;Main_B1.c: 118: DelayOff_Main();
  4276  15A3  319B  2348  3195   	fcall	_DelayOff_Main
  4277                           
  4278                           ;Main_B1.c: 119: ;;
  4279                           ;Main_B1.c: 120: ;;
  4280                           ;Main_B1.c: 121: Exception_Main();
  4281  15A6  3185  254B  3195   	fcall	_Exception_Main
  4282  15A9  2D73               	goto	l9596
  4283  15AA                     __end_of_main:	
  4284                           ;Main_B1.c: 128: }
  4285                           ;Main_B1.c: 129: }
  4286                           ;Main_B1.c: 163: }
  4287                           ;Main_B1.c: 164: return (0);
  4288                           ;	Return value of _main is never used
  4289                           
  4290                           
  4291                           	psect	text1
  4292  1327                     __ptext1:	
  4293 ;; *************** function _my_MainTimer *****************
  4294 ;; Defined at:
  4295 ;;		line 185 in file "../src/Main_B1.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;		None
  4300 ;; Return value:  Size  Location     Type
  4301 ;;		None               void
  4302 ;; Registers used:
  4303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4313 ;;Total ram usage:        1 bytes
  4314 ;; Hardware stack levels used:    1
  4315 ;; Hardware stack levels required when called:    7
  4316 ;; This function calls:
  4317 ;;		_setBuz
  4318 ;; This function is called by:
  4319 ;;		_main
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           
  4324                           ;psect for function _my_MainTimer
  4325  1327                     _my_MainTimer:	
  4326                           
  4327                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4328                           
  4329                           ;incstack = 0
  4330                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4331  1327  0021               	movlb	1	; select bank1
  4332  1328  182E               	btfsc	_myMain^(0+128),0
  4333  1329  2B41               	goto	l9332
  4334                           
  4335                           ;Main_B1.c: 188: myMain.PowerCount++;
  4336  132A  3001               	movlw	1
  4337  132B  0020               	movlb	0	; select bank0
  4338  132C  00AE               	movwf	??_my_MainTimer
  4339  132D  082E               	movf	??_my_MainTimer,w
  4340  132E  0021               	movlb	1	; select bank1
  4341  132F  07AF               	addwf	(_myMain^(0+128)+1),f
  4342                           
  4343                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4344  1330  082F               	movf	(_myMain^(0+128)+1),w
  4345  1331  3A4B               	xorlw	75
  4346  1332  1D03               	skipz
  4347  1333  0008               	return
  4348                           
  4349                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4350  1334  01AF               	clrf	(_myMain^(0+128)+1)
  4351                           
  4352                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4353  1335  142E               	bsf	_myMain^(0+128),0
  4354                           
  4355                           ;Main_B1.c: 196: setBuz(3, 50);
  4356  1336  3032               	movlw	50
  4357  1337  0020               	movlb	0	; select bank0
  4358  1338  00AA               	movwf	setBuz@time
  4359  1339  3000               	movlw	0
  4360  133A  00AB               	movwf	setBuz@time+1
  4361  133B  3003               	movlw	3
  4362  133C  3194  24F6         	fcall	_setBuz
  4363                           
  4364                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4365  133E  0021               	movlb	1	; select bank1
  4366  133F  162E               	bsf	_myMain^(0+128),4
  4367                           
  4368                           ;Main_B1.c: 206: }
  4369                           ;Main_B1.c: 207: } else {
  4370  1340  0008               	return
  4371  1341                     l9332:	
  4372                           
  4373                           ;Main_B1.c: 208: myMain.PowerCount++;
  4374  1341  3001               	movlw	1
  4375  1342  0020               	movlb	0	; select bank0
  4376  1343  00AE               	movwf	??_my_MainTimer
  4377  1344  082E               	movf	??_my_MainTimer,w
  4378  1345  0021               	movlb	1	; select bank1
  4379  1346  07AF               	addwf	(_myMain^(0+128)+1),f
  4380                           
  4381                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4382  1347  082F               	movf	(_myMain^(0+128)+1),w
  4383  1348  3A32               	xorlw	50
  4384  1349  1903               	btfsc	3,2
  4385                           
  4386                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4387  134A  01AF               	clrf	(_myMain^(0+128)+1)
  4388                           
  4389                           ;Main_B1.c: 226: }
  4390                           ;Main_B1.c: 228: myMain.Count1++;
  4391  134B  3001               	movlw	1
  4392  134C  07B2               	addwf	(_myMain^(0+128)+4),f
  4393  134D  3000               	movlw	0
  4394  134E  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4395                           
  4396                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4397  134F  3004               	movlw	4
  4398  1350  3EAE               	addlw	_myMain& (0+255)
  4399  1351  0086               	movwf	6
  4400  1352  0187               	clrf	7
  4401  1353  3F40               	moviw [0]fsr1
  4402  1354  3A32               	xorlw	50
  4403  1355  1D03               	skipz
  4404  1356  2B59               	goto	u10645
  4405  1357  3F41               	moviw [1]fsr1
  4406  1358  3A00               	xorlw	0
  4407  1359                     u10645:	
  4408  1359  1D03               	skipz
  4409  135A  0008               	return
  4410                           
  4411                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4412  135B  01B2               	clrf	(_myMain^(0+128)+4)
  4413  135C  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4414                           
  4415                           ;Main_B1.c: 242: if (myMain.Flag) {
  4416  135D  1CAE               	btfss	_myMain^(0+128),1
  4417  135E  2B61               	goto	l1442
  4418                           
  4419                           ;Main_B1.c: 243: myMain.Flag = 0;
  4420  135F  10AE               	bcf	_myMain^(0+128),1
  4421                           
  4422                           ;Main_B1.c: 252: } else {
  4423  1360  0008               	return
  4424  1361                     l1442:	
  4425                           
  4426                           ;Main_B1.c: 253: myMain.Flag = 1;
  4427  1361  14AE               	bsf	_myMain^(0+128),1
  4428  1362  0008               	return
  4429  1363                     __end_of_my_MainTimer:	
  4430                           
  4431                           	psect	text2
  4432  1DDB                     __ptext2:	
  4433 ;; *************** function _myMain_Initialization *****************
  4434 ;; Defined at:
  4435 ;;		line 170 in file "../src/Main_B1.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;		None
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;		None
  4440 ;; Return value:  Size  Location     Type
  4441 ;;		None               void
  4442 ;; Registers used:
  4443 ;;		wreg, fsr1l, fsr1h
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;Total ram usage:        1 bytes
  4454 ;; Hardware stack levels used:    1
  4455 ;; Hardware stack levels required when called:    5
  4456 ;; This function calls:
  4457 ;;		Nothing
  4458 ;; This function is called by:
  4459 ;;		_main
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           
  4464                           ;psect for function _myMain_Initialization
  4465  1DDB                     _myMain_Initialization:	
  4466                           
  4467                           ;Main_B1.c: 173: product = &_product;
  4468                           
  4469                           ;incstack = 0
  4470                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4471  1DDB  3020               	movlw	__product& (0+255)
  4472  1DDC  0020               	movlb	0	; select bank0
  4473  1DDD  00A1               	movwf	??_myMain_Initialization
  4474  1DDE  0821               	movf	??_myMain_Initialization,w
  4475  1DDF  0021               	movlb	1	; select bank1
  4476  1DE0  00ED               	movwf	_product^(0+128)
  4477                           
  4478                           ;Main_B1.c: 174: product->Data[20] = 209;
  4479  1DE1  30D1               	movlw	209
  4480  1DE2  0020               	movlb	0	; select bank0
  4481  1DE3  00A1               	movwf	??_myMain_Initialization
  4482  1DE4  0021               	movlb	1	; select bank1
  4483  1DE5  086D               	movf	_product^(0+128),w
  4484  1DE6  3E14               	addlw	20
  4485  1DE7  0086               	movwf	6
  4486  1DE8  3002               	movlw	2	; select bank4/5
  4487  1DE9  0087               	movwf	7
  4488  1DEA  0020               	movlb	0	; select bank0
  4489  1DEB  0821               	movf	??_myMain_Initialization,w
  4490  1DEC  0081               	movwf	1
  4491  1DED  0008               	return
  4492  1DEE                     __end_of_myMain_Initialization:	
  4493                           
  4494                           	psect	text3
  4495  1363                     __ptext3:	
  4496 ;; *************** function _getTemp_AD *****************
  4497 ;; Defined at:
  4498 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  channel         1    wreg     unsigned char 
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;  channel         1    6[BANK0 ] unsigned char 
  4503 ;;  ADRES           2    7[BANK0 ] unsigned int 
  4504 ;; Return value:  Size  Location     Type
  4505 ;;		None               void
  4506 ;; Registers used:
  4507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4508 ;; Tracked objects:
  4509 ;;		On entry : 0/0
  4510 ;;		On exit  : 0/0
  4511 ;;		Unchanged: 0/0
  4512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4514 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;Total ram usage:        4 bytes
  4518 ;; Hardware stack levels used:    1
  4519 ;; Hardware stack levels required when called:    7
  4520 ;; This function calls:
  4521 ;;		_getAD
  4522 ;; This function is called by:
  4523 ;;		_main
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           
  4528                           ;psect for function _getTemp_AD
  4529  1363                     _getTemp_AD:	
  4530                           
  4531                           ;incstack = 0
  4532                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4533                           ;getTemp_AD@channel stored from wreg
  4534  1363  0020               	movlb	0	; select bank0
  4535  1364  00A6               	movwf	getTemp_AD@channel
  4536                           
  4537                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4538  1365  01A7               	clrf	getTemp_AD@ADRES
  4539  1366  01A8               	clrf	getTemp_AD@ADRES+1
  4540                           
  4541                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4542  1367  0021               	movlb	1	; select bank1
  4543  1368  1D5B               	btfss	_Temp^(0+128),2
  4544  1369  2B93               	goto	l7838
  4545                           
  4546                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4547  136A  30F0               	movlw	240
  4548  136B  0020               	movlb	0	; select bank0
  4549  136C  00A5               	movwf	??_getTemp_AD
  4550  136D  0825               	movf	??_getTemp_AD,w
  4551  136E  00A1               	movwf	getAD@adcon1
  4552  136F  0826               	movf	getTemp_AD@channel,w
  4553  1370  319F  27E0  3193   	fcall	_getAD
  4554  1373  0020               	movlb	0	; select bank0
  4555  1374  0822               	movf	?_getAD+1,w
  4556  1375  01A8               	clrf	getTemp_AD@ADRES+1
  4557  1376  07A8               	addwf	getTemp_AD@ADRES+1,f
  4558  1377  0821               	movf	?_getAD,w
  4559  1378  01A7               	clrf	getTemp_AD@ADRES
  4560  1379  07A7               	addwf	getTemp_AD@ADRES,f
  4561                           
  4562                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4563  137A  0828               	movf	getTemp_AD@ADRES+1,w
  4564  137B  0427               	iorwf	getTemp_AD@ADRES,w
  4565  137C  1903               	skipnz
  4566  137D  2B93               	goto	l7838
  4567                           
  4568                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4569  137E  0828               	movf	getTemp_AD@ADRES+1,w
  4570  137F  0021               	movlb	1	; select bank1
  4571  1380  0264               	subwf	((_Temp+1)^(0+128)+8),w
  4572  1381  1D03               	skipz
  4573  1382  2B87               	goto	u7955
  4574  1383  0020               	movlb	0	; select bank0
  4575  1384  0827               	movf	getTemp_AD@ADRES,w
  4576  1385  0021               	movlb	1	; select bank1
  4577  1386  0263               	subwf	(_Temp^(0+128)+8),w
  4578  1387                     u7955:	
  4579  1387  1803               	skipnc
  4580  1388  2B93               	goto	l7838
  4581                           
  4582                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4583  1389  0020               	movlb	0	; select bank0
  4584  138A  0828               	movf	getTemp_AD@ADRES+1,w
  4585  138B  0021               	movlb	1	; select bank1
  4586  138C  01E4               	clrf	((_Temp+1)^(0+128)+8)
  4587  138D  07E4               	addwf	((_Temp+1)^(0+128)+8),f
  4588  138E  0020               	movlb	0	; select bank0
  4589  138F  0827               	movf	getTemp_AD@ADRES,w
  4590  1390  0021               	movlb	1	; select bank1
  4591  1391  01E3               	clrf	(_Temp^(0+128)+8)
  4592  1392  07E3               	addwf	(_Temp^(0+128)+8),f
  4593  1393                     l7838:	
  4594                           
  4595                           ;OverTemperature_B1.c: 32: }
  4596                           ;OverTemperature_B1.c: 33: }
  4597                           ;OverTemperature_B1.c: 34: }
  4598                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4599  1393  30F0               	movlw	240
  4600  1394  0020               	movlb	0	; select bank0
  4601  1395  00A5               	movwf	??_getTemp_AD
  4602  1396  0825               	movf	??_getTemp_AD,w
  4603  1397  00A1               	movwf	getAD@adcon1
  4604  1398  0826               	movf	getTemp_AD@channel,w
  4605  1399  319F  27E0         	fcall	_getAD
  4606  139B  0020               	movlb	0	; select bank0
  4607  139C  0822               	movf	?_getAD+1,w
  4608  139D  01A8               	clrf	getTemp_AD@ADRES+1
  4609  139E  07A8               	addwf	getTemp_AD@ADRES+1,f
  4610  139F  0821               	movf	?_getAD,w
  4611  13A0  01A7               	clrf	getTemp_AD@ADRES
  4612  13A1  07A7               	addwf	getTemp_AD@ADRES,f
  4613  13A2  0008               	return
  4614  13A3                     __end_of_getTemp_AD:	
  4615                           
  4616                           	psect	text4
  4617  0A3C                     __ptext4:	
  4618 ;; *************** function _getLoad_AD *****************
  4619 ;; Defined at:
  4620 ;;		line 15 in file "../src/OverLoad_B1.c"
  4621 ;; Parameters:    Size  Location     Type
  4622 ;;  channel         1    wreg     unsigned char 
  4623 ;; Auto vars:     Size  Location     Type
  4624 ;;  channel         1    7[BANK0 ] unsigned char 
  4625 ;;  ADRES           2   10[BANK0 ] unsigned int 
  4626 ;;  i               1   12[BANK0 ] unsigned char 
  4627 ;;  j               1    9[BANK0 ] unsigned char 
  4628 ;;  k               1    8[BANK0 ] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;		None               void
  4631 ;; Registers used:
  4632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4639 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4641 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4642 ;;Total ram usage:        8 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    7
  4645 ;; This function calls:
  4646 ;;		_getAD
  4647 ;; This function is called by:
  4648 ;;		_main
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           
  4653                           ;psect for function _getLoad_AD
  4654  0A3C                     _getLoad_AD:	
  4655                           
  4656                           ;incstack = 0
  4657                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4658                           ;getLoad_AD@channel stored from wreg
  4659  0A3C  0020               	movlb	0	; select bank0
  4660  0A3D  00A7               	movwf	getLoad_AD@channel
  4661                           
  4662                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4663  0A3E  01AC               	clrf	getLoad_AD@i
  4664  0A3F  01A9               	clrf	getLoad_AD@j
  4665  0A40  01A8               	clrf	getLoad_AD@k
  4666                           
  4667                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4668  0A41  01AA               	clrf	getLoad_AD@ADRES
  4669  0A42  01AB               	clrf	getLoad_AD@ADRES+1
  4670                           
  4671                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4672  0A43  0022               	movlb	2	; select bank2
  4673  0A44  1E34               	btfss	_Load^(0+256),4
  4674  0A45  0008               	return
  4675                           
  4676                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4677  0A46  30F3               	movlw	243
  4678  0A47  0020               	movlb	0	; select bank0
  4679  0A48  00A5               	movwf	??_getLoad_AD
  4680  0A49  0825               	movf	??_getLoad_AD,w
  4681  0A4A  00A1               	movwf	getAD@adcon1
  4682  0A4B  0827               	movf	getLoad_AD@channel,w
  4683  0A4C  319F  27E0  318A   	fcall	_getAD
  4684  0A4F  0020               	movlb	0	; select bank0
  4685  0A50  0822               	movf	?_getAD+1,w
  4686  0A51  01AB               	clrf	getLoad_AD@ADRES+1
  4687  0A52  07AB               	addwf	getLoad_AD@ADRES+1,f
  4688  0A53  0821               	movf	?_getAD,w
  4689  0A54  01AA               	clrf	getLoad_AD@ADRES
  4690  0A55  07AA               	addwf	getLoad_AD@ADRES,f
  4691                           
  4692                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4693  0A56  01AC               	clrf	getLoad_AD@i
  4694  0A57  3004               	movlw	4
  4695  0A58  022C               	subwf	getLoad_AD@i,w
  4696  0A59  1803               	btfsc	3,0
  4697  0A5A  2A82               	goto	l7806
  4698  0A5B                     l7794:	
  4699                           
  4700                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4701  0A5B  352C               	lslf	getLoad_AD@i,w
  4702  0A5C  3E3F               	addlw	(_Load+11)& (0+255)
  4703  0A5D  0086               	movwf	6
  4704  0A5E  3001               	movlw	1	; select bank2/3
  4705  0A5F  0087               	movwf	7
  4706  0A60  3F40               	moviw [0]fsr1
  4707  0A61  00A5               	movwf	??_getLoad_AD
  4708  0A62  3F41               	moviw [1]fsr1
  4709  0A63  00A6               	movwf	??_getLoad_AD+1
  4710  0A64  082B               	movf	getLoad_AD@ADRES+1,w
  4711  0A65  0226               	subwf	??_getLoad_AD+1,w
  4712  0A66  1D03               	skipz
  4713  0A67  2A6A               	goto	u7855
  4714  0A68  082A               	movf	getLoad_AD@ADRES,w
  4715  0A69  0225               	subwf	??_getLoad_AD,w
  4716  0A6A                     u7855:	
  4717  0A6A  1803               	skipnc
  4718  0A6B  2A7A               	goto	l7802
  4719  0A6C  08A9               	movf	getLoad_AD@j,f
  4720  0A6D  1D03               	skipz
  4721  0A6E  2A7A               	goto	l7802
  4722                           
  4723                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4724  0A6F  352C               	lslf	getLoad_AD@i,w
  4725  0A70  3E3F               	addlw	(_Load+11)& (0+255)
  4726  0A71  0086               	movwf	6
  4727  0A72  3001               	movlw	1	; select bank2/3
  4728  0A73  0087               	movwf	7
  4729  0A74  082A               	movf	getLoad_AD@ADRES,w
  4730  0A75  3FC0               	movwi [0]fsr1
  4731  0A76  082B               	movf	getLoad_AD@ADRES+1,w
  4732  0A77  3FC1               	movwi [1]fsr1
  4733                           
  4734                           ;OverLoad_B1.c: 24: j = 1;
  4735  0A78  01A9               	clrf	getLoad_AD@j
  4736  0A79  0AA9               	incf	getLoad_AD@j,f
  4737  0A7A                     l7802:	
  4738  0A7A  3001               	movlw	1
  4739  0A7B  00A5               	movwf	??_getLoad_AD
  4740  0A7C  0825               	movf	??_getLoad_AD,w
  4741  0A7D  07AC               	addwf	getLoad_AD@i,f
  4742  0A7E  3004               	movlw	4
  4743  0A7F  022C               	subwf	getLoad_AD@i,w
  4744  0A80  1C03               	skipc
  4745  0A81  2A5B               	goto	l7794
  4746  0A82                     l7806:	
  4747                           
  4748                           ;OverLoad_B1.c: 25: }
  4749                           ;OverLoad_B1.c: 26: }
  4750                           ;OverLoad_B1.c: 27: if (j == 0) {
  4751  0A82  08A9               	movf	getLoad_AD@j,f
  4752  0A83  1D03               	skipz
  4753  0A84  0008               	return
  4754                           
  4755                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4756  0A85  01AC               	clrf	getLoad_AD@i
  4757  0A86                     L1:	
  4758  0A86  3004               	movlw	4
  4759  0A87  022C               	subwf	getLoad_AD@i,w
  4760  0A88  1803               	btfsc	3,0
  4761  0A89  0008               	return
  4762                           
  4763                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4764  0A8A  352C               	lslf	getLoad_AD@i,w
  4765  0A8B  3E49               	addlw	(_Load+21)& (0+255)
  4766  0A8C  0086               	movwf	6
  4767  0A8D  3001               	movlw	1	; select bank2/3
  4768  0A8E  0087               	movwf	7
  4769  0A8F  3F40               	moviw [0]fsr1
  4770  0A90  00A5               	movwf	??_getLoad_AD
  4771  0A91  3F41               	moviw [1]fsr1
  4772  0A92  00A6               	movwf	??_getLoad_AD+1
  4773  0A93  0826               	movf	??_getLoad_AD+1,w
  4774  0A94  022B               	subwf	getLoad_AD@ADRES+1,w
  4775  0A95  1D03               	skipz
  4776  0A96  2A99               	goto	u7905
  4777  0A97  0825               	movf	??_getLoad_AD,w
  4778  0A98  022A               	subwf	getLoad_AD@ADRES,w
  4779  0A99                     u7905:	
  4780  0A99  1803               	skipnc
  4781  0A9A  2AA9               	goto	l7822
  4782  0A9B  08A8               	movf	getLoad_AD@k,f
  4783  0A9C  1D03               	skipz
  4784  0A9D  2AA9               	goto	l7822
  4785                           
  4786                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4787  0A9E  352C               	lslf	getLoad_AD@i,w
  4788  0A9F  3E49               	addlw	(_Load+21)& (0+255)
  4789  0AA0  0086               	movwf	6
  4790  0AA1  3001               	movlw	1	; select bank2/3
  4791  0AA2  0087               	movwf	7
  4792  0AA3  082A               	movf	getLoad_AD@ADRES,w
  4793  0AA4  3FC0               	movwi [0]fsr1
  4794  0AA5  082B               	movf	getLoad_AD@ADRES+1,w
  4795  0AA6  3FC1               	movwi [1]fsr1
  4796                           
  4797                           ;OverLoad_B1.c: 31: k = 1;
  4798  0AA7  01A8               	clrf	getLoad_AD@k
  4799  0AA8  0AA8               	incf	getLoad_AD@k,f
  4800  0AA9                     l7822:	
  4801  0AA9  3001               	movlw	1
  4802  0AAA  00A5               	movwf	??_getLoad_AD
  4803  0AAB  0825               	movf	??_getLoad_AD,w
  4804  0AAC  07AC               	addwf	getLoad_AD@i,f
  4805  0AAD  2A86               	goto	L1
  4806  0AAE                     __end_of_getLoad_AD:	
  4807                           
  4808                           	psect	text5
  4809  1FE0                     __ptext5:	
  4810 ;; *************** function _getAD *****************
  4811 ;; Defined at:
  4812 ;;		line 459 in file "../src/MCU_B1.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  adcon0          1    wreg     unsigned char 
  4815 ;;  adcon1          1    1[BANK0 ] unsigned char 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  adcon0          1    4[BANK0 ] unsigned char 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  2    1[BANK0 ] int 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4827 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4830 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;Total ram usage:        4 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    6
  4834 ;; This function calls:
  4835 ;;		_Timeout_Counter
  4836 ;;		_set_TimeoutCleared
  4837 ;; This function is called by:
  4838 ;;		_getLoad_AD
  4839 ;;		_getTemp_AD
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           
  4844                           ;psect for function _getAD
  4845  1FE0                     _getAD:	
  4846                           
  4847                           ;incstack = 0
  4848                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4849                           ;getAD@adcon0 stored from wreg
  4850  1FE0  0020               	movlb	0	; select bank0
  4851  1FE1  00A4               	movwf	getAD@adcon0
  4852                           
  4853                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4854  1FE2  0824               	movf	getAD@adcon0,w
  4855  1FE3  0021               	movlb	1	; select bank1
  4856  1FE4  009D               	movwf	29	;volatile
  4857                           
  4858                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4859  1FE5  0020               	movlb	0	; select bank0
  4860  1FE6  0821               	movf	getAD@adcon1,w
  4861  1FE7  0021               	movlb	1	; select bank1
  4862  1FE8  009E               	movwf	30	;volatile
  4863                           
  4864                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4865  1FE9  149D               	bsf	29,1	;volatile
  4866                           
  4867                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4868  1FEA  2FEE               	goto	l7280
  4869  1FEB                     l7278:	
  4870                           
  4871                           ;MCU_B1.c: 464: Timeout_Counter();
  4872  1FEB  319E  262C  319F   	fcall	_Timeout_Counter
  4873  1FEE                     l7280:	
  4874  1FEE  0021               	movlb	1	; select bank1
  4875  1FEF  1C9D               	btfss	29,1	;volatile
  4876  1FF0  2FF3               	goto	l7284
  4877  1FF1  1D38               	btfss	(_myMain^(0+128)+10),2
  4878  1FF2  2FEB               	goto	l7278
  4879  1FF3                     l7284:	
  4880                           
  4881                           ;MCU_B1.c: 465: };
  4882                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4883  1FF3  319B  236C         	fcall	_set_TimeoutCleared
  4884                           
  4885                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4886  1FF5  0021               	movlb	1	; select bank1
  4887  1FF6  081C               	movf	28,w	;volatile
  4888  1FF7  0020               	movlb	0	; select bank0
  4889  1FF8  01A2               	clrf	?_getAD+1
  4890  1FF9  07A2               	addwf	?_getAD+1,f
  4891  1FFA  0021               	movlb	1	; select bank1
  4892  1FFB  081B               	movf	27,w	;volatile
  4893  1FFC  0020               	movlb	0	; select bank0
  4894  1FFD  01A1               	clrf	?_getAD
  4895  1FFE  07A1               	addwf	?_getAD,f
  4896  1FFF  0008               	return
  4897  2000                     __end_of_getAD:	
  4898                           
  4899                           	psect	text6
  4900  1D7D                     __ptext6:	
  4901 ;; *************** function _WDT_Main *****************
  4902 ;; Defined at:
  4903 ;;		line 1114 in file "../src/MCU_B1.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;		None
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;		None               void
  4910 ;; Registers used:
  4911 ;;		wreg, status,2, status,0, pclath, cstack
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4921 ;;Total ram usage:        1 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    6
  4924 ;; This function calls:
  4925 ;;		_WDT_Clearing
  4926 ;; This function is called by:
  4927 ;;		_main
  4928 ;; This function uses a non-reentrant model
  4929 ;;
  4930                           
  4931                           
  4932                           ;psect for function _WDT_Main
  4933  1D7D                     _WDT_Main:	
  4934                           
  4935                           ;MCU_B1.c: 1115: if (WDT.Enable == 1) {
  4936                           
  4937                           ;incstack = 0
  4938                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4939  1D7D  0021               	movlb	1	; select bank1
  4940  1D7E  1C49               	btfss	_WDT^(0+128),0
  4941  1D7F  0008               	return
  4942                           
  4943                           ;MCU_B1.c: 1116: if (WDT.Timer-- > 0) {
  4944  1D80  3001               	movlw	1
  4945  1D81  02CA               	subwf	(_WDT^(0+128)+1),f
  4946  1D82  084A               	movf	(_WDT^(0+128)+1),w
  4947  1D83  3AFF               	xorlw	255
  4948  1D84  1903               	skipnz
  4949  1D85  0008               	return
  4950                           
  4951                           ;MCU_B1.c: 1117: WDT.Timer = 100;
  4952  1D86  3064               	movlw	100
  4953  1D87  0020               	movlb	0	; select bank0
  4954  1D88  00A1               	movwf	??_WDT_Main
  4955  1D89  0821               	movf	??_WDT_Main,w
  4956  1D8A  0021               	movlb	1	; select bank1
  4957  1D8B  00CA               	movwf	(_WDT^(0+128)+1)
  4958                           
  4959                           ;MCU_B1.c: 1118: WDT_Clearing();
  4960  1D8C  3180  2002         	fcall	_WDT_Clearing
  4961  1D8E  0008               	return
  4962  1D8F                     __end_of_WDT_Main:	
  4963                           
  4964                           	psect	text7
  4965  0002                     __ptext7:	
  4966 ;; *************** function _WDT_Clearing *****************
  4967 ;; Defined at:
  4968 ;;		line 1124 in file "../src/MCU_B1.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;		None               void
  4975 ;; Registers used:
  4976 ;;		None
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4986 ;;Total ram usage:        0 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; Hardware stack levels required when called:    5
  4989 ;; This function calls:
  4990 ;;		Nothing
  4991 ;; This function is called by:
  4992 ;;		_WDT_Main
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           
  4997                           ;psect for function _WDT_Clearing
  4998  0002                     _WDT_Clearing:	
  4999                           
  5000                           ;incstack = 0
  5001                           ; Regs used in _WDT_Clearing: []
  5002  0002  0064               	clrwdt	;# 
  5003  0003  0008               	return
  5004  0004                     __end_of_WDT_Clearing:	
  5005                           
  5006                           	psect	text8
  5007  07FD                     __ptext8:	
  5008 ;; *************** function _Temp_Main *****************
  5009 ;; Defined at:
  5010 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;		None               void
  5017 ;; Registers used:
  5018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;Total ram usage:        0 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    8
  5031 ;; This function calls:
  5032 ;;		_setTemp_Main
  5033 ;; This function is called by:
  5034 ;;		_main
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           
  5039                           ;psect for function _Temp_Main
  5040  07FD                     _Temp_Main:	
  5041                           
  5042                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5043                           
  5044                           ;incstack = 0
  5045                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5046  07FD  318D  25E3         	fcall	_setTemp_Main
  5047  07FF  0008               	return
  5048  0800                     __end_of_Temp_Main:	
  5049                           
  5050                           	psect	text9
  5051  0DE3                     __ptext9:	
  5052 ;; *************** function _setTemp_Main *****************
  5053 ;; Defined at:
  5054 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;		None
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  AD              2    6[BANK1 ] unsigned int 
  5059 ;;  DangerValue     2    4[BANK1 ] unsigned int 
  5060 ;;  SafeValue       2    2[BANK1 ] unsigned int 
  5061 ;;  TempGO          1    1[BANK1 ] unsigned char 
  5062 ;;  error           1    0[BANK1 ] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;		None               void
  5065 ;; Registers used:
  5066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;Total ram usage:        9 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    7
  5079 ;; This function calls:
  5080 ;;		_getMain_All_Error_Status
  5081 ;;		_getMain_All_LightsStatus
  5082 ;;		_setBuz
  5083 ;;		_setProductData
  5084 ;; This function is called by:
  5085 ;;		_Temp_Main
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           
  5090                           ;psect for function _setTemp_Main
  5091  0DE3                     _setTemp_Main:	
  5092                           
  5093                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5094                           
  5095                           ;incstack = 0
  5096                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5097  0DE3  3000               	movlw	0
  5098  0DE4  3191  2170  318D   	fcall	_getMain_All_Error_Status
  5099  0DE7  0020               	movlb	0	; select bank0
  5100  0DE8  00E6               	movwf	??_setTemp_Main
  5101  0DE9  0866               	movf	??_setTemp_Main,w
  5102  0DEA  0021               	movlb	1	; select bank1
  5103  0DEB  00E5               	movwf	setTemp_Main@error^(0+128)
  5104                           
  5105                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5106  0DEC  01E7               	clrf	setTemp_Main@SafeValue^(0+128)
  5107  0DED  01E8               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5108  0DEE  01E9               	clrf	setTemp_Main@DangerValue^(0+128)
  5109  0DEF  01EA               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5110                           
  5111                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5112  0DF0  319B  23CB  318D   	fcall	_getMain_All_LightsStatus
  5113  0DF3  0020               	movlb	0	; select bank0
  5114  0DF4  00E6               	movwf	??_setTemp_Main
  5115  0DF5  0866               	movf	??_setTemp_Main,w
  5116  0DF6  0021               	movlb	1	; select bank1
  5117  0DF7  00E6               	movwf	setTemp_Main@TempGO^(0+128)
  5118                           
  5119                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5120  0DF8  1C5B               	btfss	_Temp^(0+128),0
  5121  0DF9  2E8D               	goto	l1781
  5122                           
  5123                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5124  0DFA  195B               	btfsc	_Temp^(0+128),2
  5125  0DFB  2E16               	goto	l9052
  5126                           
  5127                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5128  0DFC  0866               	movf	setTemp_Main@TempGO^(0+128),w
  5129  0DFD  3A01               	xorlw	1
  5130  0DFE  1D03               	skipz
  5131  0DFF  2E02               	goto	l1787
  5132  0E00  1CDB               	btfss	_Temp^(0+128),1
  5133  0E01  2E04               	goto	l9044
  5134  0E02                     l1787:	
  5135  0E02  1CDB               	btfss	_Temp^(0+128),1
  5136  0E03  2E13               	goto	l9050
  5137  0E04                     l9044:	
  5138                           
  5139                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5140  0E04  3001               	movlw	1
  5141  0E05  07DC               	addwf	(_Temp^(0+128)+1),f
  5142  0E06  3000               	movlw	0
  5143  0E07  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5144                           
  5145                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5146  0E08  3000               	movlw	0
  5147  0E09  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5148  0E0A  30FA               	movlw	250
  5149  0E0B  1903               	skipnz
  5150  0E0C  025C               	subwf	(_Temp^(0+128)+1),w
  5151  0E0D  1C03               	skipc
  5152  0E0E  0008               	return
  5153                           
  5154                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5155  0E0F  01DC               	clrf	(_Temp^(0+128)+1)
  5156  0E10  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5157                           
  5158                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5159  0E11  155B               	bsf	_Temp^(0+128),2
  5160                           
  5161                           ;OverTemperature_B1.c: 83: }
  5162                           ;OverTemperature_B1.c: 84: } else {
  5163  0E12  0008               	return
  5164  0E13                     l9050:	
  5165                           
  5166                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5167  0E13  01DC               	clrf	(_Temp^(0+128)+1)
  5168  0E14  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5169                           
  5170                           ;OverTemperature_B1.c: 86: }
  5171                           ;OverTemperature_B1.c: 87: } else {
  5172  0E15  0008               	return
  5173  0E16                     l9052:	
  5174                           
  5175                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5176  0E16  3001               	movlw	1
  5177  0E17  07DC               	addwf	(_Temp^(0+128)+1),f
  5178  0E18  3000               	movlw	0
  5179  0E19  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5180                           
  5181                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5182  0E1A  3000               	movlw	0
  5183  0E1B  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5184  0E1C  3005               	movlw	5
  5185  0E1D  1903               	skipnz
  5186  0E1E  025C               	subwf	(_Temp^(0+128)+1),w
  5187  0E1F  1C03               	skipc
  5188  0E20  0008               	return
  5189                           
  5190                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5191  0E21  01DC               	clrf	(_Temp^(0+128)+1)
  5192  0E22  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5193                           
  5194                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5195  0E23  3008               	movlw	8
  5196  0E24  3EDB               	addlw	_Temp& (0+255)
  5197  0E25  0086               	movwf	6
  5198  0E26  0187               	clrf	7
  5199  0E27  0016               	moviw fsr1++
  5200  0E28  0401               	iorwf	1,w
  5201  0E29  1903               	skipnz
  5202  0E2A  2E85               	goto	l1792
  5203                           
  5204                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5205  0E2B  115B               	bcf	_Temp^(0+128),2
  5206                           
  5207                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5208  0E2C  0864               	movf	((_Temp+1)^(0+128)+8),w
  5209  0E2D  01EC               	clrf	(setTemp_Main@AD+1)^(0+128)
  5210  0E2E  07EC               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5211  0E2F  0863               	movf	(_Temp^(0+128)+8),w
  5212  0E30  01EB               	clrf	setTemp_Main@AD^(0+128)
  5213  0E31  07EB               	addwf	setTemp_Main@AD^(0+128),f
  5214                           
  5215                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5216  0E32  3090               	movlw	144
  5217  0E33  00E7               	movwf	setTemp_Main@SafeValue^(0+128)
  5218  0E34  3001               	movlw	1
  5219  0E35  00E8               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5220                           
  5221                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5222  0E36  3059               	movlw	89
  5223  0E37  00E9               	movwf	setTemp_Main@DangerValue^(0+128)
  5224  0E38  3001               	movlw	1
  5225  0E39  00EA               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5226                           
  5227                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5228  0E3A  1CDB               	btfss	_Temp^(0+128),1
  5229  0E3B  2E5C               	goto	l9082
  5230                           
  5231                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5232  0E3C  0868               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5233  0E3D  026C               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5234  0E3E  1D03               	skipz
  5235  0E3F  2E42               	goto	u10175
  5236  0E40  0867               	movf	setTemp_Main@SafeValue^(0+128),w
  5237  0E41  026B               	subwf	setTemp_Main@AD^(0+128),w
  5238  0E42                     u10175:	
  5239  0E42  1C03               	skipc
  5240  0E43  2E5A               	goto	l9080
  5241                           
  5242                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5243  0E44  3001               	movlw	1
  5244  0E45  0020               	movlb	0	; select bank0
  5245  0E46  00E6               	movwf	??_setTemp_Main
  5246  0E47  0866               	movf	??_setTemp_Main,w
  5247  0E48  0021               	movlb	1	; select bank1
  5248  0E49  07DE               	addwf	(_Temp^(0+128)+3),f
  5249                           
  5250                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5251  0E4A  3003               	movlw	3
  5252  0E4B  025E               	subwf	(_Temp^(0+128)+3),w
  5253  0E4C  1C03               	skipc
  5254  0E4D  2E72               	goto	l9094
  5255                           
  5256                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5257  0E4E  01DE               	clrf	(_Temp^(0+128)+3)
  5258                           
  5259                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5260  0E4F  10DB               	bcf	_Temp^(0+128),1
  5261                           
  5262                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5263  0E50  3064               	movlw	100
  5264  0E51  0020               	movlb	0	; select bank0
  5265  0E52  00AA               	movwf	setBuz@time
  5266  0E53  3000               	movlw	0
  5267  0E54  00AB               	movwf	setBuz@time+1
  5268  0E55  3002               	movlw	2
  5269  0E56  3194  24F6  318D   	fcall	_setBuz
  5270                           
  5271                           ;OverTemperature_B1.c: 126: }
  5272                           ;OverTemperature_B1.c: 127: } else {
  5273  0E59  2E72               	goto	l9094
  5274  0E5A                     l9080:	
  5275                           
  5276                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5277  0E5A  0021               	movlb	1	; select bank1
  5278  0E5B  2E71               	goto	l9092
  5279  0E5C                     l9082:	
  5280                           ;OverTemperature_B1.c: 129: }
  5281                           ;OverTemperature_B1.c: 130: } else {
  5282                           
  5283                           
  5284                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5285  0E5C  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5286  0E5D  026A               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5287  0E5E  1D03               	skipz
  5288  0E5F  2E62               	goto	u10195
  5289  0E60  086B               	movf	setTemp_Main@AD^(0+128),w
  5290  0E61  0269               	subwf	setTemp_Main@DangerValue^(0+128),w
  5291  0E62                     u10195:	
  5292  0E62  1C03               	skipc
  5293  0E63  2E71               	goto	l9092
  5294                           
  5295                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5296  0E64  3001               	movlw	1
  5297  0E65  0020               	movlb	0	; select bank0
  5298  0E66  00E6               	movwf	??_setTemp_Main
  5299  0E67  0866               	movf	??_setTemp_Main,w
  5300  0E68  0021               	movlb	1	; select bank1
  5301  0E69  07DE               	addwf	(_Temp^(0+128)+3),f
  5302                           
  5303                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5304  0E6A  3003               	movlw	3
  5305  0E6B  025E               	subwf	(_Temp^(0+128)+3),w
  5306  0E6C  1C03               	skipc
  5307  0E6D  2E72               	goto	l9094
  5308                           
  5309                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5310  0E6E  01DE               	clrf	(_Temp^(0+128)+3)
  5311                           
  5312                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5313  0E6F  14DB               	bsf	_Temp^(0+128),1
  5314                           
  5315                           ;OverTemperature_B1.c: 136: }
  5316                           ;OverTemperature_B1.c: 137: } else {
  5317  0E70  2E72               	goto	l9094
  5318  0E71                     l9092:	
  5319                           
  5320                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5321  0E71  01DE               	clrf	(_Temp^(0+128)+3)
  5322  0E72                     l9094:	
  5323                           
  5324                           ;OverTemperature_B1.c: 139: }
  5325                           ;OverTemperature_B1.c: 140: }
  5326                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5327  0E72  0021               	movlb	1	; select bank1
  5328  0E73  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5329  0E74  0020               	movlb	0	; select bank0
  5330  0E75  00E6               	movwf	??_setTemp_Main
  5331  0E76  0866               	movf	??_setTemp_Main,w
  5332  0E77  00E3               	movwf	setProductData@value
  5333  0E78  3018               	movlw	24
  5334  0E79  319C  2424  318D   	fcall	_setProductData
  5335                           
  5336                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5337  0E7C  0021               	movlb	1	; select bank1
  5338  0E7D  086B               	movf	setTemp_Main@AD^(0+128),w
  5339  0E7E  0020               	movlb	0	; select bank0
  5340  0E7F  00E6               	movwf	??_setTemp_Main
  5341  0E80  0866               	movf	??_setTemp_Main,w
  5342  0E81  00E3               	movwf	setProductData@value
  5343  0E82  3019               	movlw	25
  5344  0E83  319C  2424         	fcall	_setProductData
  5345  0E85                     l1792:	
  5346                           
  5347                           ;OverTemperature_B1.c: 158: }
  5348                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5349  0E85  0021               	movlb	1	; select bank1
  5350  0E86  01DF               	clrf	(_Temp^(0+128)+4)
  5351  0E87  01E0               	clrf	((_Temp+1)^(0+128)+4)
  5352                           
  5353                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5354  0E88  01E1               	clrf	(_Temp^(0+128)+6)
  5355  0E89  01E2               	clrf	((_Temp+1)^(0+128)+6)
  5356                           
  5357                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5358  0E8A  01E3               	clrf	(_Temp^(0+128)+8)
  5359  0E8B  01E4               	clrf	((_Temp+1)^(0+128)+8)
  5360                           
  5361                           ;OverTemperature_B1.c: 162: }
  5362                           ;OverTemperature_B1.c: 163: }
  5363                           ;OverTemperature_B1.c: 166: } else {
  5364  0E8C  0008               	return
  5365  0E8D                     l1781:	
  5366                           
  5367                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5368  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5369  0E8E  0008               	return
  5370                           
  5371                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5372  0E8F  145B               	bsf	_Temp^(0+128),0
  5373  0E90  0008               	return
  5374  0E91                     __end_of_setTemp_Main:	
  5375                           
  5376                           	psect	text10
  5377  1B41                     __ptext10:	
  5378 ;; *************** function _Temp_Initialization *****************
  5379 ;; Defined at:
  5380 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;		None
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;		None
  5385 ;; Return value:  Size  Location     Type
  5386 ;;		None               void
  5387 ;; Registers used:
  5388 ;;		status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;Total ram usage:        0 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    6
  5401 ;; This function calls:
  5402 ;;		_setTemp_Initialization
  5403 ;; This function is called by:
  5404 ;;		_main
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function _Temp_Initialization
  5410  1B41                     _Temp_Initialization:	
  5411                           
  5412                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5413                           
  5414                           ;incstack = 0
  5415                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5416  1B41  3188  2000         	fcall	_setTemp_Initialization
  5417  1B43  0008               	return
  5418  1B44                     __end_of_Temp_Initialization:	
  5419                           
  5420                           	psect	text11
  5421  0800                     __ptext11:	
  5422 ;; *************** function _setTemp_Initialization *****************
  5423 ;; Defined at:
  5424 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		None
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    5
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_Temp_Initialization
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           
  5453                           ;psect for function _setTemp_Initialization
  5454  0800                     _setTemp_Initialization:	
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _setTemp_Initialization: []
  5458  0800  0008               	return
  5459  0801                     __end_of_setTemp_Initialization:	
  5460                           
  5461                           	psect	text12
  5462  1B91                     __ptext12:	
  5463 ;; *************** function _Switch_Main *****************
  5464 ;; Defined at:
  5465 ;;		line 76 in file "../src/Switch_B1.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;		None
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;		None
  5470 ;; Return value:  Size  Location     Type
  5471 ;;		None               void
  5472 ;; Registers used:
  5473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;Total ram usage:        0 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    9
  5486 ;; This function calls:
  5487 ;;		_TouchPower
  5488 ;;		_setSw_Main
  5489 ;; This function is called by:
  5490 ;;		_main
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           
  5495                           ;psect for function _Switch_Main
  5496  1B91                     _Switch_Main:	
  5497                           
  5498                           ;Switch_B1.c: 79: setSw_Main(1);
  5499                           
  5500                           ;incstack = 0
  5501                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5502  1B91  3001               	movlw	1
  5503  1B92  3181  21FC  319B   	fcall	_setSw_Main
  5504                           
  5505                           ;Switch_B1.c: 91: TouchPower();
  5506  1B95  319E  2641         	fcall	_TouchPower
  5507  1B97  0008               	return
  5508  1B98                     __end_of_Switch_Main:	
  5509                           
  5510                           	psect	text13
  5511  01FC                     __ptext13:	
  5512 ;; *************** function _setSw_Main *****************
  5513 ;; Defined at:
  5514 ;;		line 117 in file "../src/Switch_B1.c"
  5515 ;; Parameters:    Size  Location     Type
  5516 ;;  sw              1    wreg     unsigned char 
  5517 ;; Auto vars:     Size  Location     Type
  5518 ;;  sw              1   18[BANK0 ] unsigned char 
  5519 ;; Return value:  Size  Location     Type
  5520 ;;		None               void
  5521 ;; Registers used:
  5522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5531 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5532 ;;Total ram usage:        3 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; Hardware stack levels required when called:    8
  5535 ;; This function calls:
  5536 ;;		_SwPointSelect
  5537 ;;		_getMain_All_Error_Status
  5538 ;;		_getSw_KeyStatus
  5539 ;;		_setBuz
  5540 ;;		_setDimmerLights_DimmingOn
  5541 ;;		_setDimmerLights_SwOff
  5542 ;;		_setDimmerLights_SwOn
  5543 ;;		_setRF_Learn
  5544 ;; This function is called by:
  5545 ;;		_Switch_Main
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           
  5550                           ;psect for function _setSw_Main
  5551  01FC                     _setSw_Main:	
  5552                           
  5553                           ;incstack = 0
  5554                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5555                           ;setSw_Main@sw stored from wreg
  5556  01FC  0020               	movlb	0	; select bank0
  5557  01FD  00B2               	movwf	setSw_Main@sw
  5558                           
  5559                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5560  01FE  0832               	movf	setSw_Main@sw,w
  5561  01FF  319C  2484  3181   	fcall	_SwPointSelect
  5562                           
  5563                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5564  0202  0021               	movlb	1	; select bank1
  5565  0203  0855               	movf	_Sw^(0+128),w
  5566  0204  0086               	movwf	6
  5567  0205  3001               	movlw	1	; select bank2/3
  5568  0206  0087               	movwf	7
  5569  0207  1C01               	btfss	1,0
  5570  0208  2B78               	goto	l2491
  5571                           
  5572                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5573  0209  3000               	movlw	0
  5574  020A  3191  2170  3181   	fcall	_getMain_All_Error_Status
  5575  020D  3800               	iorlw	0
  5576  020E  1D03               	skipz
  5577  020F  2A2E               	goto	l9188
  5578                           
  5579                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5580  0210  0021               	movlb	1	; select bank1
  5581  0211  0A55               	incf	_Sw^(0+128),w
  5582  0212  0086               	movwf	6
  5583  0213  3001               	movlw	1	; select bank2/3
  5584  0214  0087               	movwf	7
  5585  0215  1081               	bcf	1,1
  5586                           
  5587                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5588  0216  0020               	movlb	0	; select bank0
  5589  0217  0832               	movf	setSw_Main@sw,w
  5590  0218  319D  2524  3181   	fcall	_getSw_KeyStatus
  5591  021B  3A01               	xorlw	1
  5592  021C  3000               	movlw	0
  5593  021D  1903               	skipnz
  5594  021E  3001               	movlw	1
  5595  021F  0020               	movlb	0	; select bank0
  5596  0220  00B0               	movwf	??_setSw_Main
  5597  0221  0021               	movlb	1	; select bank1
  5598  0222  0855               	movf	_Sw^(0+128),w
  5599  0223  0086               	movwf	6
  5600  0224  3001               	movlw	1	; select bank2/3
  5601  0225  0087               	movwf	7
  5602  0226  0020               	movlb	0	; select bank0
  5603  0227  0DB0               	rlf	??_setSw_Main,f
  5604  0228  0801               	movf	1,w
  5605  0229  0630               	xorwf	??_setSw_Main,w
  5606  022A  39FD               	andlw	-3
  5607  022B  0630               	xorwf	??_setSw_Main,w
  5608  022C  0081               	movwf	1
  5609                           
  5610                           ;Switch_B1.c: 124: } else {
  5611  022D  2A44               	goto	l2493
  5612  022E                     l9188:	
  5613                           
  5614                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5615  022E  0021               	movlb	1	; select bank1
  5616  022F  0A55               	incf	_Sw^(0+128),w
  5617  0230  0086               	movwf	6
  5618  0231  3001               	movlw	1	; select bank2/3
  5619  0232  0087               	movwf	7
  5620  0233  1881               	btfsc	1,1
  5621  0234  2A44               	goto	l2493
  5622                           
  5623                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5624  0235  0A55               	incf	_Sw^(0+128),w
  5625  0236  0086               	movwf	6
  5626  0237  3001               	movlw	1	; select bank2/3
  5627  0238  0087               	movwf	7
  5628  0239  1481               	bsf	1,1
  5629                           
  5630                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5631  023A  0855               	movf	_Sw^(0+128),w
  5632  023B  0086               	movwf	6
  5633  023C  3001               	movlw	1	; select bank2/3
  5634  023D  0087               	movwf	7
  5635  023E  1081               	bcf	1,1
  5636                           
  5637                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5638  023F  0855               	movf	_Sw^(0+128),w
  5639  0240  0086               	movwf	6
  5640  0241  3001               	movlw	1	; select bank2/3
  5641  0242  0087               	movwf	7
  5642  0243  1501               	bsf	1,2
  5643  0244                     l2493:	
  5644                           
  5645                           ;Switch_B1.c: 130: }
  5646                           ;Switch_B1.c: 131: }
  5647                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5648  0244  0021               	movlb	1	; select bank1
  5649  0245  0855               	movf	_Sw^(0+128),w
  5650  0246  0086               	movwf	6
  5651  0247  3001               	movlw	1	; select bank2/3
  5652  0248  0087               	movwf	7
  5653  0249  1C81               	btfss	1,1
  5654  024A  2B20               	goto	l9238
  5655                           
  5656                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5657  024B  0855               	movf	_Sw^(0+128),w
  5658  024C  0086               	movwf	6
  5659  024D  3001               	movlw	1	; select bank2/3
  5660  024E  0087               	movwf	7
  5661  024F  1901               	btfsc	1,2
  5662  0250  2A77               	goto	l9204
  5663                           
  5664                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5665  0251  3001               	movlw	1
  5666  0252  0020               	movlb	0	; select bank0
  5667  0253  00B0               	movwf	??_setSw_Main
  5668  0254  0021               	movlb	1	; select bank1
  5669  0255  0855               	movf	_Sw^(0+128),w
  5670  0256  3E02               	addlw	2
  5671  0257  0086               	movwf	6
  5672  0258  3001               	movlw	1	; select bank2/3
  5673  0259  0087               	movwf	7
  5674  025A  0020               	movlb	0	; select bank0
  5675  025B  0830               	movf	??_setSw_Main,w
  5676  025C  0781               	addwf	1,f
  5677                           
  5678                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5679  025D  0021               	movlb	1	; select bank1
  5680  025E  0855               	movf	_Sw^(0+128),w
  5681  025F  3E02               	addlw	2
  5682  0260  0086               	movwf	6
  5683  0261  3001               	movlw	1	; select bank2/3
  5684  0262  0087               	movwf	7
  5685  0263  3003               	movlw	3
  5686  0264  0201               	subwf	1,w
  5687  0265  1C03               	skipc
  5688  0266  0008               	return
  5689                           
  5690                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5691  0267  0855               	movf	_Sw^(0+128),w
  5692  0268  3E02               	addlw	2
  5693  0269  0086               	movwf	6
  5694  026A  3001               	movlw	1	; select bank2/3
  5695  026B  0087               	movwf	7
  5696  026C  0181               	clrf	1
  5697                           
  5698                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5699  026D  0855               	movf	_Sw^(0+128),w
  5700  026E  0086               	movwf	6
  5701  026F  3001               	movlw	1	; select bank2/3
  5702  0270  0087               	movwf	7
  5703  0271  1501               	bsf	1,2
  5704                           
  5705                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5706  0272  0020               	movlb	0	; select bank0
  5707  0273  0832               	movf	setSw_Main@sw,w
  5708  0274  3191  21D7         	fcall	_setDimmerLights_SwOn
  5709                           
  5710                           ;Switch_B1.c: 146: }
  5711                           ;Switch_B1.c: 147: } else {
  5712  0276  0008               	return
  5713  0277                     l9204:	
  5714                           
  5715                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5716  0277  0021               	movlb	1	; select bank1
  5717  0278  0855               	movf	_Sw^(0+128),w
  5718  0279  0086               	movwf	6
  5719  027A  3001               	movlw	1	; select bank2/3
  5720  027B  0087               	movwf	7
  5721  027C  1981               	btfsc	1,3
  5722  027D  2AAC               	goto	l9214
  5723                           
  5724                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5725  027E  0855               	movf	_Sw^(0+128),w
  5726  027F  3E03               	addlw	3
  5727  0280  0086               	movwf	6
  5728  0281  3001               	movlw	1	; select bank2/3
  5729  0282  0087               	movwf	7
  5730  0283  3001               	movlw	1
  5731  0284  0781               	addwf	1,f
  5732  0285  3141               	addfsr 1,1
  5733  0286  1803               	skipnc
  5734  0287  0A81               	incf	1,f
  5735                           
  5736                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5737  0288  0855               	movf	_Sw^(0+128),w
  5738  0289  3E03               	addlw	3
  5739  028A  0086               	movwf	6
  5740  028B  3001               	movlw	1	; select bank2/3
  5741  028C  0087               	movwf	7
  5742  028D  3F40               	moviw [0]fsr1
  5743  028E  0020               	movlb	0	; select bank0
  5744  028F  00B0               	movwf	??_setSw_Main
  5745  0290  3F41               	moviw [1]fsr1
  5746  0291  00B1               	movwf	??_setSw_Main+1
  5747  0292  3000               	movlw	0
  5748  0293  0231               	subwf	??_setSw_Main+1,w
  5749  0294  304B               	movlw	75
  5750  0295  1903               	skipnz
  5751  0296  0230               	subwf	??_setSw_Main,w
  5752  0297  1C03               	skipc
  5753  0298  0008               	return
  5754                           
  5755                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5756  0299  0021               	movlb	1	; select bank1
  5757  029A  0855               	movf	_Sw^(0+128),w
  5758  029B  3E03               	addlw	3
  5759  029C  0086               	movwf	6
  5760  029D  3001               	movlw	1	; select bank2/3
  5761  029E  0087               	movwf	7
  5762  029F  3000               	movlw	0
  5763  02A0  3FC0               	movwi [0]fsr1
  5764  02A1  3FC1               	movwi [1]fsr1
  5765                           
  5766                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5767  02A2  0855               	movf	_Sw^(0+128),w
  5768  02A3  0086               	movwf	6
  5769  02A4  3001               	movlw	1	; select bank2/3
  5770  02A5  0087               	movwf	7
  5771  02A6  1581               	bsf	1,3
  5772                           
  5773                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5774  02A7  0020               	movlb	0	; select bank0
  5775  02A8  0832               	movf	setSw_Main@sw,w
  5776  02A9  3190  20EF         	fcall	_setDimmerLights_DimmingOn
  5777                           
  5778                           ;Switch_B1.c: 161: }
  5779                           ;Switch_B1.c: 162: } else {
  5780  02AB  0008               	return
  5781  02AC                     l9214:	
  5782                           
  5783                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5784  02AC  0021               	movlb	1	; select bank1
  5785  02AD  0855               	movf	_Sw^(0+128),w
  5786  02AE  0086               	movwf	6
  5787  02AF  3001               	movlw	1	; select bank2/3
  5788  02B0  0087               	movwf	7
  5789  02B1  1A01               	btfsc	1,4
  5790  02B2  2AEC               	goto	l9228
  5791                           
  5792                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5793  02B3  0855               	movf	_Sw^(0+128),w
  5794  02B4  3E05               	addlw	5
  5795  02B5  0086               	movwf	6
  5796  02B6  3001               	movlw	1	; select bank2/3
  5797  02B7  0087               	movwf	7
  5798  02B8  3001               	movlw	1
  5799  02B9  0781               	addwf	1,f
  5800  02BA  3141               	addfsr 1,1
  5801  02BB  1803               	skipnc
  5802  02BC  0A81               	incf	1,f
  5803                           
  5804                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5805  02BD  0855               	movf	_Sw^(0+128),w
  5806  02BE  3E05               	addlw	5
  5807  02BF  0086               	movwf	6
  5808  02C0  3001               	movlw	1	; select bank2/3
  5809  02C1  0087               	movwf	7
  5810  02C2  3F40               	moviw [0]fsr1
  5811  02C3  0020               	movlb	0	; select bank0
  5812  02C4  00B0               	movwf	??_setSw_Main
  5813  02C5  3F41               	moviw [1]fsr1
  5814  02C6  00B1               	movwf	??_setSw_Main+1
  5815  02C7  3000               	movlw	0
  5816  02C8  0231               	subwf	??_setSw_Main+1,w
  5817  02C9  304B               	movlw	75
  5818  02CA  1903               	skipnz
  5819  02CB  0230               	subwf	??_setSw_Main,w
  5820  02CC  1C03               	skipc
  5821  02CD  0008               	return
  5822                           
  5823                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5824  02CE  0021               	movlb	1	; select bank1
  5825  02CF  0855               	movf	_Sw^(0+128),w
  5826  02D0  3E05               	addlw	5
  5827  02D1  0086               	movwf	6
  5828  02D2  3001               	movlw	1	; select bank2/3
  5829  02D3  0087               	movwf	7
  5830  02D4  3000               	movlw	0
  5831  02D5  3FC0               	movwi [0]fsr1
  5832  02D6  3FC1               	movwi [1]fsr1
  5833                           
  5834                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5835  02D7  0855               	movf	_Sw^(0+128),w
  5836  02D8  0086               	movwf	6
  5837  02D9  3001               	movlw	1	; select bank2/3
  5838  02DA  0087               	movwf	7
  5839  02DB  1601               	bsf	1,4
  5840                           
  5841                           ;Switch_B1.c: 171: setRF_Learn(1);
  5842  02DC  3001               	movlw	1
  5843  02DD  319D  25EE  3181   	fcall	_setRF_Learn
  5844                           
  5845                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5846  02E0  0021               	movlb	1	; select bank1
  5847  02E1  1EAE               	btfss	_myMain^(0+128),5
  5848  02E2  0008               	return
  5849                           
  5850                           ;Switch_B1.c: 173: setBuz(2, 100);
  5851  02E3  3064               	movlw	100
  5852  02E4  0020               	movlb	0	; select bank0
  5853  02E5  00AA               	movwf	setBuz@time
  5854  02E6  3000               	movlw	0
  5855  02E7  00AB               	movwf	setBuz@time+1
  5856  02E8  3002               	movlw	2
  5857  02E9  3194  24F6         	fcall	_setBuz
  5858                           
  5859                           ;Switch_B1.c: 174: }
  5860                           ;Switch_B1.c: 178: }
  5861                           ;Switch_B1.c: 179: } else {
  5862  02EB  0008               	return
  5863  02EC                     l9228:	
  5864                           
  5865                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5866  02EC  0021               	movlb	1	; select bank1
  5867  02ED  0855               	movf	_Sw^(0+128),w
  5868  02EE  0086               	movwf	6
  5869  02EF  3001               	movlw	1	; select bank2/3
  5870  02F0  0087               	movwf	7
  5871  02F1  1A81               	btfsc	1,5
  5872  02F2  0008               	return
  5873                           
  5874                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5875  02F3  0855               	movf	_Sw^(0+128),w
  5876  02F4  3E07               	addlw	7
  5877  02F5  0086               	movwf	6
  5878  02F6  3001               	movlw	1	; select bank2/3
  5879  02F7  0087               	movwf	7
  5880  02F8  3001               	movlw	1
  5881  02F9  0781               	addwf	1,f
  5882  02FA  3141               	addfsr 1,1
  5883  02FB  1803               	skipnc
  5884  02FC  0A81               	incf	1,f
  5885                           
  5886                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5887  02FD  0855               	movf	_Sw^(0+128),w
  5888  02FE  3E07               	addlw	7
  5889  02FF  0086               	movwf	6
  5890  0300  3001               	movlw	1	; select bank2/3
  5891  0301  0087               	movwf	7
  5892  0302  3F40               	moviw [0]fsr1
  5893  0303  0020               	movlb	0	; select bank0
  5894  0304  00B0               	movwf	??_setSw_Main
  5895  0305  3F41               	moviw [1]fsr1
  5896  0306  00B1               	movwf	??_setSw_Main+1
  5897  0307  3000               	movlw	0
  5898  0308  0231               	subwf	??_setSw_Main+1,w
  5899  0309  3096               	movlw	150
  5900  030A  1903               	skipnz
  5901  030B  0230               	subwf	??_setSw_Main,w
  5902  030C  1C03               	skipc
  5903  030D  0008               	return
  5904                           
  5905                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5906  030E  0021               	movlb	1	; select bank1
  5907  030F  0855               	movf	_Sw^(0+128),w
  5908  0310  3E07               	addlw	7
  5909  0311  0086               	movwf	6
  5910  0312  3001               	movlw	1	; select bank2/3
  5911  0313  0087               	movwf	7
  5912  0314  3000               	movlw	0
  5913  0315  3FC0               	movwi [0]fsr1
  5914  0316  3FC1               	movwi [1]fsr1
  5915                           
  5916                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5917  0317  0855               	movf	_Sw^(0+128),w
  5918  0318  0086               	movwf	6
  5919  0319  3001               	movlw	1	; select bank2/3
  5920  031A  0087               	movwf	7
  5921  031B  1681               	bsf	1,5
  5922                           
  5923                           ;Switch_B1.c: 187: setRF_Learn(0);
  5924  031C  3000               	movlw	0
  5925  031D  319D  25EE         	fcall	_setRF_Learn
  5926                           
  5927                           ;Switch_B1.c: 190: }
  5928                           ;Switch_B1.c: 191: }
  5929                           ;Switch_B1.c: 192: }
  5930                           ;Switch_B1.c: 194: }
  5931                           ;Switch_B1.c: 195: }
  5932                           ;Switch_B1.c: 196: } else {
  5933  031F  0008               	return
  5934  0320                     l9238:	
  5935                           
  5936                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5937  0320  0021               	movlb	1	; select bank1
  5938  0321  0855               	movf	_Sw^(0+128),w
  5939  0322  0086               	movwf	6
  5940  0323  3001               	movlw	1	; select bank2/3
  5941  0324  0087               	movwf	7
  5942  0325  1D01               	btfss	1,2
  5943  0326  0008               	return
  5944                           
  5945                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5946  0327  3001               	movlw	1
  5947  0328  0020               	movlb	0	; select bank0
  5948  0329  00B0               	movwf	??_setSw_Main
  5949  032A  0021               	movlb	1	; select bank1
  5950  032B  0855               	movf	_Sw^(0+128),w
  5951  032C  3E02               	addlw	2
  5952  032D  0086               	movwf	6
  5953  032E  3001               	movlw	1	; select bank2/3
  5954  032F  0087               	movwf	7
  5955  0330  0020               	movlb	0	; select bank0
  5956  0331  0830               	movf	??_setSw_Main,w
  5957  0332  0781               	addwf	1,f
  5958                           
  5959                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5960  0333  0021               	movlb	1	; select bank1
  5961  0334  0855               	movf	_Sw^(0+128),w
  5962  0335  3E02               	addlw	2
  5963  0336  0086               	movwf	6
  5964  0337  3001               	movlw	1	; select bank2/3
  5965  0338  0087               	movwf	7
  5966  0339  3003               	movlw	3
  5967  033A  0201               	subwf	1,w
  5968  033B  1C03               	skipc
  5969  033C  0008               	return
  5970                           
  5971                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5972  033D  0855               	movf	_Sw^(0+128),w
  5973  033E  3E02               	addlw	2
  5974  033F  0086               	movwf	6
  5975  0340  3001               	movlw	1	; select bank2/3
  5976  0341  0087               	movwf	7
  5977  0342  0181               	clrf	1
  5978                           
  5979                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5980  0343  0855               	movf	_Sw^(0+128),w
  5981  0344  0086               	movwf	6
  5982  0345  3001               	movlw	1	; select bank2/3
  5983  0346  0087               	movwf	7
  5984  0347  1101               	bcf	1,2
  5985                           
  5986                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5987  0348  0855               	movf	_Sw^(0+128),w
  5988  0349  3E03               	addlw	3
  5989  034A  0086               	movwf	6
  5990  034B  3001               	movlw	1	; select bank2/3
  5991  034C  0087               	movwf	7
  5992  034D  3000               	movlw	0
  5993  034E  3FC0               	movwi [0]fsr1
  5994  034F  3FC1               	movwi [1]fsr1
  5995                           
  5996                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5997  0350  0855               	movf	_Sw^(0+128),w
  5998  0351  0086               	movwf	6
  5999  0352  3001               	movlw	1	; select bank2/3
  6000  0353  0087               	movwf	7
  6001  0354  1181               	bcf	1,3
  6002                           
  6003                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6004  0355  0855               	movf	_Sw^(0+128),w
  6005  0356  0086               	movwf	6
  6006  0357  3001               	movlw	1	; select bank2/3
  6007  0358  0087               	movwf	7
  6008  0359  1201               	bcf	1,4
  6009                           
  6010                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6011  035A  0855               	movf	_Sw^(0+128),w
  6012  035B  0086               	movwf	6
  6013  035C  3001               	movlw	1	; select bank2/3
  6014  035D  0087               	movwf	7
  6015  035E  1281               	bcf	1,5
  6016                           
  6017                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6018  035F  0855               	movf	_Sw^(0+128),w
  6019  0360  3E05               	addlw	5
  6020  0361  0086               	movwf	6
  6021  0362  3001               	movlw	1	; select bank2/3
  6022  0363  0087               	movwf	7
  6023  0364  3000               	movlw	0
  6024  0365  3FC0               	movwi [0]fsr1
  6025  0366  3FC1               	movwi [1]fsr1
  6026                           
  6027                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6028  0367  0855               	movf	_Sw^(0+128),w
  6029  0368  3E07               	addlw	7
  6030  0369  0086               	movwf	6
  6031  036A  3001               	movlw	1	; select bank2/3
  6032  036B  0087               	movwf	7
  6033  036C  3000               	movlw	0
  6034  036D  3FC0               	movwi [0]fsr1
  6035  036E  3FC1               	movwi [1]fsr1
  6036                           
  6037                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6038  036F  0020               	movlb	0	; select bank0
  6039  0370  0832               	movf	setSw_Main@sw,w
  6040  0371  3192  2279  3181   	fcall	_setDimmerLights_SwOff
  6041                           
  6042                           ;Switch_B1.c: 219: setRF_Learn(0);
  6043  0374  3000               	movlw	0
  6044  0375  319D  25EE         	fcall	_setRF_Learn
  6045                           
  6046                           ;Switch_B1.c: 221: }
  6047                           ;Switch_B1.c: 222: }
  6048                           ;Switch_B1.c: 223: }
  6049                           ;Switch_B1.c: 224: } else {
  6050  0377  0008               	return
  6051  0378                     l2491:	
  6052                           
  6053                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6054  0378  1C2E               	btfss	_myMain^(0+128),0
  6055  0379  0008               	return
  6056                           
  6057                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6058  037A  0855               	movf	_Sw^(0+128),w
  6059  037B  0086               	movwf	6
  6060  037C  3001               	movlw	1	; select bank2/3
  6061  037D  0087               	movwf	7
  6062  037E  1401               	bsf	1,0
  6063  037F  0008               	return
  6064  0380                     __end_of_setSw_Main:	
  6065                           
  6066                           	psect	text14
  6067  1DEE                     __ptext14:	
  6068 ;; *************** function _setRF_Learn *****************
  6069 ;; Defined at:
  6070 ;;		line 33 in file "../src/RF_Control_B1.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;  command         1    wreg     unsigned char 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  command         1    2[BANK0 ] unsigned char 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;		None               void
  6077 ;; Registers used:
  6078 ;;		wreg, status,2, status,0
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;Total ram usage:        2 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    5
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		_setSw_Main
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           
  6099                           ;psect for function _setRF_Learn
  6100  1DEE                     _setRF_Learn:	
  6101                           
  6102                           ;incstack = 0
  6103                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6104                           ;setRF_Learn@command stored from wreg
  6105  1DEE  0020               	movlb	0	; select bank0
  6106  1DEF  00A2               	movwf	setRF_Learn@command
  6107                           
  6108                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6109  1DF0  0822               	movf	setRF_Learn@command,w
  6110  1DF1  3A01               	xorlw	1
  6111  1DF2  3000               	movlw	0
  6112  1DF3  1903               	skipnz
  6113  1DF4  3001               	movlw	1
  6114  1DF5  00A1               	movwf	??_setRF_Learn
  6115  1DF6  0EA1               	swapf	??_setRF_Learn,f
  6116  1DF7  0DA1               	rlf	??_setRF_Learn,f
  6117  1DF8  0DA1               	rlf	??_setRF_Learn,f
  6118  1DF9  0021               	movlb	1	; select bank1
  6119  1DFA  0820               	movf	_RF1^(0+128),w
  6120  1DFB  0020               	movlb	0	; select bank0
  6121  1DFC  0621               	xorwf	??_setRF_Learn,w
  6122  1DFD  39BF               	andlw	-65
  6123  1DFE  0621               	xorwf	??_setRF_Learn,w
  6124  1DFF  0021               	movlb	1	; select bank1
  6125  1E00  00A0               	movwf	_RF1^(0+128)
  6126  1E01  0008               	return
  6127  1E02                     __end_of_setRF_Learn:	
  6128                           
  6129                           	psect	text15
  6130  10EF                     __ptext15:	
  6131 ;; *************** function _setDimmerLights_DimmingOn *****************
  6132 ;; Defined at:
  6133 ;;		line 734 in file "../src/Dimmer_B1.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  sw              1    wreg     unsigned char 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  sw              1    3[BANK0 ] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;		None               void
  6140 ;; Registers used:
  6141 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;Total ram usage:        1 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    6
  6154 ;; This function calls:
  6155 ;;		_DimmerLights_SelectPointer
  6156 ;; This function is called by:
  6157 ;;		_setSw_Main
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _setDimmerLights_DimmingOn
  6163  10EF                     _setDimmerLights_DimmingOn:	
  6164                           
  6165                           ;incstack = 0
  6166                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6167                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6168  10EF  0020               	movlb	0	; select bank0
  6169  10F0  00A3               	movwf	setDimmerLights_DimmingOn@sw
  6170                           
  6171                           ;Dimmer_B1.c: 740: DimmerLights_SelectPointer(sw);
  6172  10F1  0823               	movf	setDimmerLights_DimmingOn@sw,w
  6173  10F2  319C  2418  3190   	fcall	_DimmerLights_SelectPointer
  6174                           
  6175                           ;Dimmer_B1.c: 741: if (DimmerLights->Trigger == 0) {
  6176  10F5  0021               	movlb	1	; select bank1
  6177  10F6  084F               	movf	_DimmerLights^(0+128),w
  6178  10F7  0086               	movwf	6
  6179  10F8  3001               	movlw	1	; select bank2/3
  6180  10F9  0087               	movwf	7
  6181  10FA  1881               	btfsc	1,1
  6182  10FB  0008               	return
  6183                           
  6184                           ;Dimmer_B1.c: 742: if (DimmerLights->SwFlag == 1) {
  6185  10FC  084F               	movf	_DimmerLights^(0+128),w
  6186  10FD  0086               	movwf	6
  6187  10FE  3001               	movlw	1	; select bank2/3
  6188  10FF  0087               	movwf	7
  6189  1100  1C01               	btfss	1,0
  6190  1101  0008               	return
  6191                           
  6192                           ;Dimmer_B1.c: 743: DimmerLights->Status = 1;
  6193  1102  0A4F               	incf	_DimmerLights^(0+128),w
  6194  1103  0086               	movwf	6
  6195  1104  3001               	movlw	1	; select bank2/3
  6196  1105  0087               	movwf	7
  6197  1106  1401               	bsf	1,0
  6198                           
  6199                           ;Dimmer_B1.c: 745: DimmerLights->DimmingSwFlag = 1;
  6200  1107  084F               	movf	_DimmerLights^(0+128),w
  6201  1108  0086               	movwf	6
  6202  1109  3001               	movlw	1	; select bank2/3
  6203  110A  0087               	movwf	7
  6204  110B  1581               	bsf	1,3
  6205                           
  6206                           ;Dimmer_B1.c: 746: DimmerLights->DimmingTrigger = 1;
  6207  110C  084F               	movf	_DimmerLights^(0+128),w
  6208  110D  0086               	movwf	6
  6209  110E  3001               	movlw	1	; select bank2/3
  6210  110F  0087               	movwf	7
  6211  1110  1601               	bsf	1,4
  6212                           
  6213                           ;Dimmer_B1.c: 747: DimmerLights->DimmingSwitch = 1;
  6214  1111  084F               	movf	_DimmerLights^(0+128),w
  6215  1112  0086               	movwf	6
  6216  1113  3001               	movlw	1	; select bank2/3
  6217  1114  0087               	movwf	7
  6218  1115  1681               	bsf	1,5
  6219  1116  0008               	return
  6220  1117                     __end_of_setDimmerLights_DimmingOn:	
  6221                           
  6222                           	psect	text16
  6223  1D24                     __ptext16:	
  6224 ;; *************** function _getSw_KeyStatus *****************
  6225 ;; Defined at:
  6226 ;;		line 237 in file "../src/Switch_B1.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;  sw              1    wreg     unsigned char 
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;  sw              1    0[COMMON] unsigned char 
  6231 ;;  status          1    2[BANK0 ] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      unsigned char 
  6234 ;; Registers used:
  6235 ;;		wreg, status,2
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;Total ram usage:        3 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; Hardware stack levels required when called:    5
  6248 ;; This function calls:
  6249 ;;		Nothing
  6250 ;; This function is called by:
  6251 ;;		_setSw_Main
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           
  6256                           ;psect for function _getSw_KeyStatus
  6257  1D24                     _getSw_KeyStatus:	
  6258                           
  6259                           ;Switch_B1.c: 238: char status = 0;
  6260                           
  6261                           ;incstack = 0
  6262                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6263  1D24  0020               	movlb	0	; select bank0
  6264  1D25  01A2               	clrf	getSw_KeyStatus@status
  6265                           
  6266                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6267  1D26  01A3               	clrf	_getSw_KeyStatus$6368
  6268  1D27  0AA3               	incf	_getSw_KeyStatus$6368,f
  6269  1D28  1F0C               	btfss	12,6	;volatile
  6270  1D29  1A0C               	btfsc	12,4	;volatile
  6271  1D2A  2D2F               	goto	l6978
  6272  1D2B  1C0C               	btfss	12,0	;volatile
  6273  1D2C  1B8C               	btfsc	12,7	;volatile
  6274  1D2D  2D2F               	goto	l6978
  6275  1D2E  01A3               	clrf	_getSw_KeyStatus$6368
  6276  1D2F                     l6978:	
  6277  1D2F  0823               	movf	_getSw_KeyStatus$6368,w
  6278  1D30  00A1               	movwf	??_getSw_KeyStatus
  6279  1D31  0821               	movf	??_getSw_KeyStatus,w
  6280  1D32  00A2               	movwf	getSw_KeyStatus@status
  6281                           
  6282                           ;Switch_B1.c: 275: return status;
  6283  1D33  0822               	movf	getSw_KeyStatus@status,w
  6284  1D34  0008               	return
  6285  1D35                     __end_of_getSw_KeyStatus:	
  6286                           
  6287                           	psect	text17
  6288  1C84                     __ptext17:	
  6289 ;; *************** function _SwPointSelect *****************
  6290 ;; Defined at:
  6291 ;;		line 25 in file "../src/Switch_B1.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;  sw              1    wreg     unsigned char 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  sw              1    2[BANK0 ] unsigned char 
  6296 ;; Return value:  Size  Location     Type
  6297 ;;		None               void
  6298 ;; Registers used:
  6299 ;;		wreg
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;Total ram usage:        2 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    5
  6312 ;; This function calls:
  6313 ;;		Nothing
  6314 ;; This function is called by:
  6315 ;;		_setSw_Main
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           
  6320                           ;psect for function _SwPointSelect
  6321  1C84                     _SwPointSelect:	
  6322                           
  6323                           ;incstack = 0
  6324                           ; Regs used in _SwPointSelect: [wreg]
  6325                           ;SwPointSelect@sw stored from wreg
  6326  1C84  0020               	movlb	0	; select bank0
  6327  1C85  00A2               	movwf	SwPointSelect@sw
  6328                           
  6329                           ;Switch_B1.c: 28: if (sw == 1) {
  6330  1C86  0822               	movf	SwPointSelect@sw,w
  6331  1C87  3A01               	xorlw	1
  6332  1C88  1D03               	skipz
  6333  1C89  0008               	return
  6334                           
  6335                           ;Switch_B1.c: 29: Sw = &Sw1;
  6336  1C8A  30E3               	movlw	_Sw1& (0+255)
  6337  1C8B  00A1               	movwf	??_SwPointSelect
  6338  1C8C  0821               	movf	??_SwPointSelect,w
  6339  1C8D  0021               	movlb	1	; select bank1
  6340  1C8E  00D5               	movwf	_Sw^(0+128)
  6341  1C8F  0008               	return
  6342  1C90                     __end_of_SwPointSelect:	
  6343                           
  6344                           	psect	text18
  6345  1E41                     __ptext18:	
  6346 ;; *************** function _TouchPower *****************
  6347 ;; Defined at:
  6348 ;;		line 10 in file "../src/Switch_B1.c"
  6349 ;; Parameters:    Size  Location     Type
  6350 ;;		None
  6351 ;; Auto vars:     Size  Location     Type
  6352 ;;		None
  6353 ;; Return value:  Size  Location     Type
  6354 ;;		None               void
  6355 ;; Registers used:
  6356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6357 ;; Tracked objects:
  6358 ;;		On entry : 0/0
  6359 ;;		On exit  : 0/0
  6360 ;;		Unchanged: 0/0
  6361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;Total ram usage:        0 bytes
  6367 ;; Hardware stack levels used:    1
  6368 ;; Hardware stack levels required when called:    6
  6369 ;; This function calls:
  6370 ;;		_Timeout_Counter
  6371 ;;		_set_TimeoutCleared
  6372 ;; This function is called by:
  6373 ;;		_Switch_Main
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           
  6378                           ;psect for function _TouchPower
  6379  1E41                     _TouchPower:	
  6380                           
  6381                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6382                           
  6383                           ;incstack = 0
  6384                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6385  1E41  0021               	movlb	1	; select bank1
  6386  1E42  1C2E               	btfss	_myMain^(0+128),0
  6387  1E43  0008               	return
  6388                           
  6389                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6390  1E44  0020               	movlb	0	; select bank0
  6391  1E45  180D               	btfsc	13,0	;volatile
  6392  1E46  0008               	return
  6393  1E47  2E4D               	goto	l7520
  6394  1E48                     l2471:	
  6395                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6396                           
  6397                           
  6398                           ;Switch_B1.c: 14: RB0 = 1;
  6399  1E48  0020               	movlb	0	; select bank0
  6400  1E49  140D               	bsf	13,0	;volatile
  6401                           
  6402                           ;Switch_B1.c: 15: Timeout_Counter();
  6403  1E4A  319E  262C  319E   	fcall	_Timeout_Counter
  6404  1E4D                     l7520:	
  6405  1E4D  0020               	movlb	0	; select bank0
  6406  1E4E  180D               	btfsc	13,0	;volatile
  6407  1E4F  2E53               	goto	l7524
  6408  1E50  0021               	movlb	1	; select bank1
  6409  1E51  1D38               	btfss	(_myMain^(0+128)+10),2
  6410  1E52  2E48               	goto	l2471
  6411  1E53                     l7524:	
  6412                           
  6413                           ;Switch_B1.c: 16: }
  6414                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6415  1E53  319B  236C         	fcall	_set_TimeoutCleared
  6416  1E55  0008               	return
  6417  1E56                     __end_of_TouchPower:	
  6418                           
  6419                           	psect	text19
  6420  1B6C                     __ptext19:	
  6421 ;; *************** function _set_TimeoutCleared *****************
  6422 ;; Defined at:
  6423 ;;		line 281 in file "../src/Main_B1.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;		None
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;		None               void
  6430 ;; Registers used:
  6431 ;;		status,2
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;Total ram usage:        0 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    5
  6444 ;; This function calls:
  6445 ;;		Nothing
  6446 ;; This function is called by:
  6447 ;;		_getAD
  6448 ;;		_TouchPower
  6449 ;; This function uses a non-reentrant model
  6450 ;;
  6451                           
  6452                           
  6453                           ;psect for function _set_TimeoutCleared
  6454  1B6C                     _set_TimeoutCleared:	
  6455                           
  6456                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6457                           
  6458                           ;incstack = 0
  6459                           ; Regs used in _set_TimeoutCleared: [status,2]
  6460  1B6C  0021               	movlb	1	; select bank1
  6461  1B6D  1138               	bcf	(_myMain^(0+128)+10),2
  6462                           
  6463                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6464  1B6E  01B9               	clrf	(_myMain^(0+128)+11)
  6465  1B6F  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6466  1B70  0008               	return
  6467  1B71                     __end_of_set_TimeoutCleared:	
  6468                           
  6469                           	psect	text20
  6470  1E2C                     __ptext20:	
  6471 ;; *************** function _Timeout_Counter *****************
  6472 ;; Defined at:
  6473 ;;		line 272 in file "../src/Main_B1.c"
  6474 ;; Parameters:    Size  Location     Type
  6475 ;;		None
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;		None
  6478 ;; Return value:  Size  Location     Type
  6479 ;;		None               void
  6480 ;; Registers used:
  6481 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;Total ram usage:        0 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    5
  6494 ;; This function calls:
  6495 ;;		Nothing
  6496 ;; This function is called by:
  6497 ;;		_getAD
  6498 ;;		_TouchPower
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           
  6503                           ;psect for function _Timeout_Counter
  6504  1E2C                     _Timeout_Counter:	
  6505                           
  6506                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6507                           
  6508                           ;incstack = 0
  6509                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6510  1E2C  3001               	movlw	1
  6511  1E2D  0021               	movlb	1	; select bank1
  6512  1E2E  07B9               	addwf	(_myMain^(0+128)+11),f
  6513  1E2F  3000               	movlw	0
  6514  1E30  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6515                           
  6516                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6517  1E31  300B               	movlw	11
  6518  1E32  3EAE               	addlw	_myMain& (0+255)
  6519  1E33  0086               	movwf	6
  6520  1E34  0187               	clrf	7
  6521  1E35  3F40               	moviw [0]fsr1
  6522  1E36  3AA8               	xorlw	168
  6523  1E37  1D03               	skipz
  6524  1E38  2E3B               	goto	u6135
  6525  1E39  3F41               	moviw [1]fsr1
  6526  1E3A  3A61               	xorlw	97
  6527  1E3B                     u6135:	
  6528  1E3B  1D03               	skipz
  6529  1E3C  0008               	return
  6530                           
  6531                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6532  1E3D  01B9               	clrf	(_myMain^(0+128)+11)
  6533  1E3E  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6534                           
  6535                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6536  1E3F  1538               	bsf	(_myMain^(0+128)+10),2
  6537  1E40  0008               	return
  6538  1E41                     __end_of_Timeout_Counter:	
  6539                           
  6540                           	psect	text21
  6541  1B68                     __ptext21:	
  6542 ;; *************** function _Switch_Initialization *****************
  6543 ;; Defined at:
  6544 ;;		line 46 in file "../src/Switch_B1.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;		None
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;		None
  6549 ;; Return value:  Size  Location     Type
  6550 ;;		None               void
  6551 ;; Registers used:
  6552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6561 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6562 ;;Total ram usage:        0 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    8
  6565 ;; This function calls:
  6566 ;;		_setSw_Initialization
  6567 ;; This function is called by:
  6568 ;;		_main
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           
  6573                           ;psect for function _Switch_Initialization
  6574  1B68                     _Switch_Initialization:	
  6575                           
  6576                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6577                           
  6578                           ;incstack = 0
  6579                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6580  1B68  3001               	movlw	1
  6581  1B69  319C  24AE         	fcall	_setSw_Initialization
  6582  1B6B  0008               	return
  6583  1B6C                     __end_of_Switch_Initialization:	
  6584                           
  6585                           	psect	text22
  6586  1CAE                     __ptext22:	
  6587 ;; *************** function _setSw_Initialization *****************
  6588 ;; Defined at:
  6589 ;;		line 66 in file "../src/Switch_B1.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  sw              1    wreg     unsigned char 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;  sw              1    5[BANK0 ] unsigned char 
  6594 ;; Return value:  Size  Location     Type
  6595 ;;		None               void
  6596 ;; Registers used:
  6597 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6606 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;Total ram usage:        1 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; Hardware stack levels required when called:    7
  6610 ;; This function calls:
  6611 ;;		_setLED
  6612 ;; This function is called by:
  6613 ;;		_Switch_Initialization
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function _setSw_Initialization
  6619  1CAE                     _setSw_Initialization:	
  6620                           
  6621                           ;incstack = 0
  6622                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6623                           ;setSw_Initialization@sw stored from wreg
  6624  1CAE  0020               	movlb	0	; select bank0
  6625  1CAF  00A5               	movwf	setSw_Initialization@sw
  6626                           
  6627                           ;Switch_B1.c: 68: setLED(sw, 1);
  6628  1CB0  01A3               	clrf	setLED@command
  6629  1CB1  0AA3               	incf	setLED@command,f
  6630  1CB2  0825               	movf	setSw_Initialization@sw,w
  6631  1CB3  3192  22B2  319C   	fcall	_setLED
  6632                           
  6633                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6634  1CB6  0020               	movlb	0	; select bank0
  6635  1CB7  01A3               	clrf	setLED@command
  6636  1CB8  0AA3               	incf	setLED@command,f
  6637  1CB9  0825               	movf	setSw_Initialization@sw,w
  6638  1CBA  3E01               	addlw	1
  6639  1CBB  3192  22B2         	fcall	_setLED
  6640  1CBD  0008               	return
  6641  1CBE                     __end_of_setSw_Initialization:	
  6642                           
  6643                           	psect	text23
  6644  1B3E                     __ptext23:	
  6645 ;; *************** function _RF_Main *****************
  6646 ;; Defined at:
  6647 ;;		line 26 in file "../src/RF_Control_B1.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;		None               void
  6654 ;; Registers used:
  6655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:   12
  6668 ;; This function calls:
  6669 ;;		_setRF_Main
  6670 ;; This function is called by:
  6671 ;;		_main
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function _RF_Main
  6677  1B3E                     _RF_Main:	
  6678                           
  6679                           ;RF_Control_B1.c: 28: setRF_Main();
  6680                           
  6681                           ;incstack = 0
  6682                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6683  1B3E  3184  2476         	fcall	_setRF_Main
  6684  1B40  0008               	return
  6685  1B41                     __end_of_RF_Main:	
  6686                           
  6687                           	psect	text24
  6688  0476                     __ptext24:	
  6689 ;; *************** function _setRF_Main *****************
  6690 ;; Defined at:
  6691 ;;		line 53 in file "../src/RF_Control_B1.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;		None
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  error           1    6[BANK1 ] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;		None               void
  6698 ;; Registers used:
  6699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6700 ;; Tracked objects:
  6701 ;;		On entry : 0/0
  6702 ;;		On exit  : 0/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6709 ;;Total ram usage:        2 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:   11
  6712 ;; This function calls:
  6713 ;;		_CC2500_PowerOnInitial
  6714 ;;		_CC2500_RxData
  6715 ;;		_CC2500_TxData
  6716 ;;		_CC2500_WriteCommand
  6717 ;;		_RF_RxDisable
  6718 ;;		___lwdiv
  6719 ;;		_getBuz_GO
  6720 ;;		_getRF_KeyStatus
  6721 ;;		_getRxData
  6722 ;; This function is called by:
  6723 ;;		_RF_Main
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           
  6728                           ;psect for function _setRF_Main
  6729  0476                     _setRF_Main:	
  6730                           
  6731                           ;RF_Control_B1.c: 54: char error = 0;
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6735  0476  0021               	movlb	1	; select bank1
  6736  0477  01EB               	clrf	setRF_Main@error^(0+128)
  6737                           
  6738                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6739  0478  1C20               	btfss	_RF1^(0+128),0
  6740  0479  2D47               	goto	l2113
  6741                           
  6742                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6743  047A  319D  2502  3184   	fcall	_getBuz_GO
  6744  047D  0020               	movlb	0	; select bank0
  6745  047E  0822               	movf	?_getBuz_GO+1,w
  6746  047F  0421               	iorwf	?_getBuz_GO,w
  6747  0480  1D03               	skipz
  6748  0481  2D28               	goto	l9156
  6749                           
  6750                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6751  0482  319D  2513  3184   	fcall	_getRF_KeyStatus
  6752  0485  3A01               	xorlw	1
  6753  0486  3000               	movlw	0
  6754  0487  1903               	skipnz
  6755  0488  3001               	movlw	1
  6756  0489  0021               	movlb	1	; select bank1
  6757  048A  00EA               	movwf	??_setRF_Main^(0+128)
  6758  048B  0CEA               	rrf	??_setRF_Main^(0+128),f
  6759  048C  0CEA               	rrf	??_setRF_Main^(0+128),f
  6760  048D  0820               	movf	_RF1^(0+128),w
  6761  048E  066A               	xorwf	??_setRF_Main^(0+128),w
  6762  048F  397F               	andlw	-129
  6763  0490  066A               	xorwf	??_setRF_Main^(0+128),w
  6764  0491  00A0               	movwf	_RF1^(0+128)
  6765                           
  6766                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6767  0492  1FA0               	btfss	_RF1^(0+128),7
  6768  0493  2C96               	goto	l2117
  6769  0494  1F20               	btfss	_RF1^(0+128),6
  6770  0495  2D28               	goto	l9156
  6771  0496                     l2117:	
  6772                           
  6773                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6774  0496  1D20               	btfss	_RF1^(0+128),2
  6775  0497  2CE7               	goto	l2118
  6776                           
  6777                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6778  0498  1B20               	btfsc	_RF1^(0+128),6
  6779  0499  2CE2               	goto	l9128
  6780                           
  6781                           ;RF_Control_B1.c: 68: RF1.Count++;
  6782  049A  3001               	movlw	1
  6783  049B  07A2               	addwf	(_RF1^(0+128)+2),f
  6784  049C  3000               	movlw	0
  6785  049D  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6786                           
  6787                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6788  049E  3014               	movlw	20
  6789  049F  0020               	movlb	0	; select bank0
  6790  04A0  00A1               	movwf	___lwdiv@divisor
  6791  04A1  3000               	movlw	0
  6792  04A2  00A2               	movwf	___lwdiv@divisor+1
  6793  04A3  0021               	movlb	1	; select bank1
  6794  04A4  0828               	movf	((_RF1+1)^(0+128)+7),w
  6795  04A5  0020               	movlb	0	; select bank0
  6796  04A6  01A4               	clrf	___lwdiv@dividend+1
  6797  04A7  07A4               	addwf	___lwdiv@dividend+1,f
  6798  04A8  0021               	movlb	1	; select bank1
  6799  04A9  0827               	movf	(_RF1^(0+128)+7),w
  6800  04AA  0020               	movlb	0	; select bank0
  6801  04AB  01A3               	clrf	___lwdiv@dividend
  6802  04AC  07A3               	addwf	___lwdiv@dividend,f
  6803  04AD  3192  2242  3184   	fcall	___lwdiv
  6804  04B0  0020               	movlb	0	; select bank0
  6805  04B1  0822               	movf	?___lwdiv+1,w
  6806  04B2  0021               	movlb	1	; select bank1
  6807  04B3  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6808  04B4  1D03               	skipz
  6809  04B5  2CBA               	goto	u10285
  6810  04B6  0020               	movlb	0	; select bank0
  6811  04B7  0821               	movf	?___lwdiv,w
  6812  04B8  0021               	movlb	1	; select bank1
  6813  04B9  0222               	subwf	(_RF1^(0+128)+2),w
  6814  04BA                     u10285:	
  6815  04BA  1C03               	skipc
  6816  04BB  2D28               	goto	l9156
  6817                           
  6818                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6819  04BC  3014               	movlw	20
  6820  04BD  0020               	movlb	0	; select bank0
  6821  04BE  00A1               	movwf	___lwdiv@divisor
  6822  04BF  3000               	movlw	0
  6823  04C0  00A2               	movwf	___lwdiv@divisor+1
  6824  04C1  0021               	movlb	1	; select bank1
  6825  04C2  0828               	movf	((_RF1+1)^(0+128)+7),w
  6826  04C3  0020               	movlb	0	; select bank0
  6827  04C4  01A4               	clrf	___lwdiv@dividend+1
  6828  04C5  07A4               	addwf	___lwdiv@dividend+1,f
  6829  04C6  0021               	movlb	1	; select bank1
  6830  04C7  0827               	movf	(_RF1^(0+128)+7),w
  6831  04C8  0020               	movlb	0	; select bank0
  6832  04C9  01A3               	clrf	___lwdiv@dividend
  6833  04CA  07A3               	addwf	___lwdiv@dividend,f
  6834  04CB  3192  2242  3184   	fcall	___lwdiv
  6835  04CE  0020               	movlb	0	; select bank0
  6836  04CF  0822               	movf	?___lwdiv+1,w
  6837  04D0  0021               	movlb	1	; select bank1
  6838  04D1  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6839  04D2  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6840  04D3  0020               	movlb	0	; select bank0
  6841  04D4  0821               	movf	?___lwdiv,w
  6842  04D5  0021               	movlb	1	; select bank1
  6843  04D6  01A2               	clrf	(_RF1^(0+128)+2)
  6844  04D7  07A2               	addwf	(_RF1^(0+128)+2),f
  6845                           
  6846                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6847  04D8  1120               	bcf	_RF1^(0+128),2
  6848                           
  6849                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6850  04D9  01AA               	clrf	(_RF1^(0+128)+10)
  6851  04DA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6852                           
  6853                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6854  04DB  319C  249F  3184   	fcall	_RF_RxDisable
  6855                           
  6856                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6857  04DE  3188  200E  3184   	fcall	_CC2500_TxData
  6858                           
  6859                           ;RF_Control_B1.c: 77: }
  6860                           ;RF_Control_B1.c: 78: } else {
  6861  04E1  2D28               	goto	l9156
  6862  04E2                     l9128:	
  6863                           
  6864                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6865  04E2  0021               	movlb	1	; select bank1
  6866  04E3  01A2               	clrf	(_RF1^(0+128)+2)
  6867  04E4  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6868                           
  6869                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6870  04E5  1120               	bcf	_RF1^(0+128),2
  6871                           
  6872                           ;RF_Control_B1.c: 81: }
  6873                           ;RF_Control_B1.c: 82: } else {
  6874  04E6  2D28               	goto	l9156
  6875  04E7                     l2118:	
  6876                           
  6877                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6878  04E7  1DA0               	btfss	_RF1^(0+128),3
  6879  04E8  2CF6               	goto	l9142
  6880                           
  6881                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6882  04E9  3188  207B  3184   	fcall	_CC2500_RxData
  6883                           
  6884                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6885  04EC  0021               	movlb	1	; select bank1
  6886  04ED  1CA0               	btfss	_RF1^(0+128),1
  6887  04EE  2D28               	goto	l9156
  6888                           
  6889                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6890  04EF  10A0               	bcf	_RF1^(0+128),1
  6891                           
  6892                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6893  04F0  01AA               	clrf	(_RF1^(0+128)+10)
  6894  04F1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6895                           
  6896                           ;RF_Control_B1.c: 97: getRxData();
  6897  04F2  3189  21CA  3184   	fcall	_getRxData
  6898                           
  6899                           ;RF_Control_B1.c: 100: }
  6900                           ;RF_Control_B1.c: 101: } else {
  6901  04F5  2D28               	goto	l9156
  6902  04F6                     l9142:	
  6903                           
  6904                           ;RF_Control_B1.c: 102: RF1.Count++;
  6905  04F6  3001               	movlw	1
  6906  04F7  0021               	movlb	1	; select bank1
  6907  04F8  07A2               	addwf	(_RF1^(0+128)+2),f
  6908  04F9  3000               	movlw	0
  6909  04FA  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6910                           
  6911                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6912  04FB  3014               	movlw	20
  6913  04FC  0020               	movlb	0	; select bank0
  6914  04FD  00A1               	movwf	___lwdiv@divisor
  6915  04FE  3000               	movlw	0
  6916  04FF  00A2               	movwf	___lwdiv@divisor+1
  6917  0500  0021               	movlb	1	; select bank1
  6918  0501  0828               	movf	((_RF1+1)^(0+128)+7),w
  6919  0502  0020               	movlb	0	; select bank0
  6920  0503  01A4               	clrf	___lwdiv@dividend+1
  6921  0504  07A4               	addwf	___lwdiv@dividend+1,f
  6922  0505  0021               	movlb	1	; select bank1
  6923  0506  0827               	movf	(_RF1^(0+128)+7),w
  6924  0507  0020               	movlb	0	; select bank0
  6925  0508  01A3               	clrf	___lwdiv@dividend
  6926  0509  07A3               	addwf	___lwdiv@dividend,f
  6927  050A  3192  2242  3184   	fcall	___lwdiv
  6928  050D  0020               	movlb	0	; select bank0
  6929  050E  0822               	movf	?___lwdiv+1,w
  6930  050F  0021               	movlb	1	; select bank1
  6931  0510  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6932  0511  1D03               	skipz
  6933  0512  2D17               	goto	u10315
  6934  0513  0020               	movlb	0	; select bank0
  6935  0514  0821               	movf	?___lwdiv,w
  6936  0515  0021               	movlb	1	; select bank1
  6937  0516  0222               	subwf	(_RF1^(0+128)+2),w
  6938  0517                     u10315:	
  6939  0517  1C03               	skipc
  6940  0518  2D28               	goto	l9156
  6941                           
  6942                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6943  0519  01A2               	clrf	(_RF1^(0+128)+2)
  6944  051A  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6945                           
  6946                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6947  051B  15A0               	bsf	_RF1^(0+128),3
  6948                           
  6949                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6950  051C  3036               	movlw	54
  6951  051D  319F  2718  3184   	fcall	_CC2500_WriteCommand
  6952                           
  6953                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6954  0520  303A               	movlw	58
  6955  0521  319F  2718  3184   	fcall	_CC2500_WriteCommand
  6956                           
  6957                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6958  0524  3034               	movlw	52
  6959  0525  319F  2718  3184   	fcall	_CC2500_WriteCommand
  6960  0528                     l9156:	
  6961                           
  6962                           ;RF_Control_B1.c: 111: }
  6963                           ;RF_Control_B1.c: 112: }
  6964                           ;RF_Control_B1.c: 113: }
  6965                           ;RF_Control_B1.c: 114: }
  6966                           ;RF_Control_B1.c: 115: }
  6967                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6968  0528  3001               	movlw	1
  6969  0529  0021               	movlb	1	; select bank1
  6970  052A  07AA               	addwf	(_RF1^(0+128)+10),f
  6971  052B  3000               	movlw	0
  6972  052C  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6973                           
  6974                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6975  052D  300B               	movlw	11
  6976  052E  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6977  052F  30B9               	movlw	185
  6978  0530  1903               	skipnz
  6979  0531  022A               	subwf	(_RF1^(0+128)+10),w
  6980  0532  1C03               	skipc
  6981  0533  2D40               	goto	l9170
  6982                           
  6983                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6984  0534  01AA               	clrf	(_RF1^(0+128)+10)
  6985  0535  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6986                           
  6987                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6988  0536  11A0               	bcf	_RF1^(0+128),3
  6989                           
  6990                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6991  0537  10A0               	bcf	_RF1^(0+128),1
  6992                           
  6993                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6994  0538  3036               	movlw	54
  6995  0539  319F  2718  3184   	fcall	_CC2500_WriteCommand
  6996                           
  6997                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6998  053C  303A               	movlw	58
  6999  053D  319F  2718  3184   	fcall	_CC2500_WriteCommand
  7000  0540                     l9170:	
  7001                           
  7002                           ;RF_Control_B1.c: 125: }
  7003                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7004  0540  0021               	movlb	1	; select bank1
  7005  0541  1F21               	btfss	(_RF1^(0+128)+1),6
  7006  0542  0008               	return
  7007                           
  7008                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7009  0543  1321               	bcf	(_RF1^(0+128)+1),6
  7010                           
  7011                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7012  0544  319E  2617         	fcall	_CC2500_PowerOnInitial
  7013                           
  7014                           ;RF_Control_B1.c: 130: }
  7015                           ;RF_Control_B1.c: 132: } else {
  7016  0546  0008               	return
  7017  0547                     l2113:	
  7018                           
  7019                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7020  0547  1C2E               	btfss	_myMain^(0+128),0
  7021  0548  0008               	return
  7022                           
  7023                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7024  0549  1420               	bsf	_RF1^(0+128),0
  7025  054A  0008               	return
  7026  054B                     __end_of_setRF_Main:	
  7027                           
  7028                           	psect	text25
  7029  09CA                     __ptext25:	
  7030 ;; *************** function _getRxData *****************
  7031 ;; Defined at:
  7032 ;;		line 227 in file "../src/RF_Control_B1.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;		None
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  error           1    4[BANK1 ] unsigned char 
  7037 ;; Return value:  Size  Location     Type
  7038 ;;		None               void
  7039 ;; Registers used:
  7040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7041 ;; Tracked objects:
  7042 ;;		On entry : 0/0
  7043 ;;		On exit  : 0/0
  7044 ;;		Unchanged: 0/0
  7045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7047 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7048 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7049 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7050 ;;Total ram usage:        2 bytes
  7051 ;; Hardware stack levels used:    1
  7052 ;; Hardware stack levels required when called:   10
  7053 ;; This function calls:
  7054 ;;		_getMain_All_Error_Status
  7055 ;;		_setControl_Lights_Table
  7056 ;;		_setLog_Code
  7057 ;;		_setTxData
  7058 ;; This function is called by:
  7059 ;;		_setRF_Main
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           
  7064                           ;psect for function _getRxData
  7065  09CA                     _getRxData:	
  7066                           
  7067                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7068                           
  7069                           ;incstack = 0
  7070                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7071  09CA  0023               	movlb	3	; select bank3
  7072  09CB  0820               	movf	_RF_Data^(0+384),w
  7073  09CC  3AAA               	xorlw	170
  7074  09CD  1D03               	skipz
  7075  09CE  29E0               	goto	l8928
  7076  09CF  0821               	movf	(_RF_Data^(0+384)+1),w
  7077  09D0  3A01               	xorlw	1
  7078  09D1  1D03               	skipz
  7079  09D2  29E0               	goto	l8928
  7080                           
  7081                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7082  09D3  3055               	movlw	85
  7083  09D4  0021               	movlb	1	; select bank1
  7084  09D5  00E8               	movwf	??_getRxData^(0+128)
  7085  09D6  086D               	movf	_product^(0+128),w
  7086  09D7  3E02               	addlw	2
  7087  09D8  0086               	movwf	6
  7088  09D9  3002               	movlw	2	; select bank4/5
  7089  09DA  0087               	movwf	7
  7090  09DB  0868               	movf	??_getRxData^(0+128),w
  7091  09DC  0081               	movwf	1
  7092                           
  7093                           ;RF_Control_B1.c: 231: setTxData();
  7094  09DD  318F  2745         	fcall	_setTxData
  7095                           
  7096                           ;RF_Control_B1.c: 235: } else {
  7097  09DF  0008               	return
  7098  09E0                     l8928:	
  7099                           
  7100                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7101  09E0  3000               	movlw	0
  7102  09E1  3191  2170  3189   	fcall	_getMain_All_Error_Status
  7103  09E4  0021               	movlb	1	; select bank1
  7104  09E5  00E8               	movwf	??_getRxData^(0+128)
  7105  09E6  0868               	movf	??_getRxData^(0+128),w
  7106  09E7  00E9               	movwf	getRxData@error^(0+128)
  7107                           
  7108                           ;RF_Control_B1.c: 237: if (error == 0) {
  7109  09E8  08E9               	movf	getRxData@error^(0+128),f
  7110  09E9  1D03               	skipz
  7111  09EA  2A3A               	goto	l2158
  7112                           
  7113                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7114  09EB  1F20               	btfss	_RF1^(0+128),6
  7115  09EC  29F8               	goto	l8940
  7116                           
  7117                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7118  09ED  0023               	movlb	3	; select bank3
  7119  09EE  08A0               	movf	_RF_Data^(0+384),f
  7120  09EF  1D03               	skipz
  7121  09F0  0008               	return
  7122  09F1  0821               	movf	(_RF_Data^(0+384)+1),w
  7123  09F2  3A64               	xorlw	100
  7124  09F3  1D03               	skipz
  7125  09F4  0008               	return
  7126                           
  7127                           ;RF_Control_B1.c: 241: setLog_Code();
  7128  09F5  3191  21A3         	fcall	_setLog_Code
  7129                           
  7130                           ;RF_Control_B1.c: 242: }
  7131                           ;RF_Control_B1.c: 243: } else {
  7132  09F7  0008               	return
  7133  09F8                     l8940:	
  7134                           
  7135                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7136  09F8  0023               	movlb	3	; select bank3
  7137  09F9  0834               	movf	(_RF_Data^(0+384)+20),w
  7138  09FA  3AD1               	xorlw	209
  7139  09FB  1903               	skipnz
  7140  09FC  2A01               	goto	l8944
  7141  09FD  0834               	movf	(_RF_Data^(0+384)+20),w
  7142  09FE  3A0A               	xorlw	10
  7143  09FF  1D03               	skipz
  7144  0A00  0008               	return
  7145  0A01                     l8944:	
  7146                           
  7147                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7148  0A01  08A0               	movf	_RF_Data^(0+384),f
  7149  0A02  1D03               	skipz
  7150  0A03  0008               	return
  7151  0A04  0821               	movf	(_RF_Data^(0+384)+1),w
  7152  0A05  3A02               	xorlw	2
  7153  0A06  1D03               	skipz
  7154  0A07  0008               	return
  7155                           
  7156                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7157  0A08  082C               	movf	(_RF_Data^(0+384)+12),w
  7158  0A09  3AFF               	xorlw	255
  7159  0A0A  1D03               	skipz
  7160  0A0B  2A16               	goto	l8956
  7161  0A0C  082D               	movf	(_RF_Data^(0+384)+13),w
  7162  0A0D  3AFF               	xorlw	255
  7163  0A0E  1D03               	skipz
  7164  0A0F  2A16               	goto	l8956
  7165  0A10  082E               	movf	(_RF_Data^(0+384)+14),w
  7166  0A11  3AFF               	xorlw	255
  7167  0A12  1D03               	skipz
  7168  0A13  2A16               	goto	l8956
  7169                           
  7170                           ;RF_Control_B1.c: 249: __nop();
  7171  0A14  0000               	nop
  7172                           
  7173                           ;RF_Control_B1.c: 250: } else {
  7174  0A15  0008               	return
  7175  0A16                     l8956:	
  7176                           
  7177                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7178  0A16  0021               	movlb	1	; select bank1
  7179  0A17  086D               	movf	_product^(0+128),w
  7180  0A18  3E0C               	addlw	12
  7181  0A19  0086               	movwf	6
  7182  0A1A  3002               	movlw	2	; select bank4/5
  7183  0A1B  0087               	movwf	7
  7184  0A1C  0023               	movlb	3	; select bank3
  7185  0A1D  082C               	movf	(_RF_Data^(0+384)+12),w
  7186  0A1E  0601               	xorwf	1,w
  7187  0A1F  1D03               	skipz
  7188  0A20  0008               	return
  7189  0A21  0021               	movlb	1	; select bank1
  7190  0A22  086D               	movf	_product^(0+128),w
  7191  0A23  3E0D               	addlw	13
  7192  0A24  0086               	movwf	6
  7193  0A25  3002               	movlw	2	; select bank4/5
  7194  0A26  0087               	movwf	7
  7195  0A27  0023               	movlb	3	; select bank3
  7196  0A28  082D               	movf	(_RF_Data^(0+384)+13),w
  7197  0A29  0601               	xorwf	1,w
  7198  0A2A  1D03               	skipz
  7199  0A2B  0008               	return
  7200  0A2C  0021               	movlb	1	; select bank1
  7201  0A2D  086D               	movf	_product^(0+128),w
  7202  0A2E  3E0E               	addlw	14
  7203  0A2F  0086               	movwf	6
  7204  0A30  3002               	movlw	2	; select bank4/5
  7205  0A31  0087               	movwf	7
  7206  0A32  0023               	movlb	3	; select bank3
  7207  0A33  082E               	movf	(_RF_Data^(0+384)+14),w
  7208  0A34  0601               	xorwf	1,w
  7209  0A35  1D03               	skipz
  7210  0A36  0008               	return
  7211                           
  7212                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7213  0A37  3189  2158         	fcall	_setControl_Lights_Table
  7214                           
  7215                           ;RF_Control_B1.c: 253: }
  7216                           ;RF_Control_B1.c: 254: }
  7217                           ;RF_Control_B1.c: 256: }
  7218                           ;RF_Control_B1.c: 267: }
  7219                           ;RF_Control_B1.c: 268: }
  7220                           ;RF_Control_B1.c: 269: } else {
  7221  0A39  0008               	return
  7222  0A3A                     l2158:	
  7223                           
  7224                           ;RF_Control_B1.c: 270: __nop();
  7225  0A3A  0000               	nop
  7226  0A3B  0008               	return
  7227  0A3C                     __end_of_getRxData:	
  7228                           
  7229                           	psect	text26
  7230  11A3                     __ptext26:	
  7231 ;; *************** function _setLog_Code *****************
  7232 ;; Defined at:
  7233 ;;		line 276 in file "../src/RF_Control_B1.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;		None
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;		None               void
  7240 ;; Registers used:
  7241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;Total ram usage:        1 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    7
  7254 ;; This function calls:
  7255 ;;		_setBuz
  7256 ;;		_setMemory_LoopSave
  7257 ;;		_setMemory_Modify
  7258 ;;		_setProductData
  7259 ;; This function is called by:
  7260 ;;		_getRxData
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           
  7265                           ;psect for function _setLog_Code
  7266  11A3                     _setLog_Code:	
  7267                           
  7268                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7269                           
  7270                           ;incstack = 0
  7271                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7272  11A3  0021               	movlb	1	; select bank1
  7273  11A4  1320               	bcf	_RF1^(0+128),6
  7274                           
  7275                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7276  11A5  0023               	movlb	3	; select bank3
  7277  11A6  082C               	movf	(_RF_Data^(0+384)+12),w
  7278  11A7  0020               	movlb	0	; select bank0
  7279  11A8  00E6               	movwf	??_setLog_Code
  7280  11A9  0866               	movf	??_setLog_Code,w
  7281  11AA  00E3               	movwf	setProductData@value
  7282  11AB  300C               	movlw	12
  7283  11AC  319C  2424  3191   	fcall	_setProductData
  7284                           
  7285                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7286  11AF  0023               	movlb	3	; select bank3
  7287  11B0  082D               	movf	(_RF_Data^(0+384)+13),w
  7288  11B1  0020               	movlb	0	; select bank0
  7289  11B2  00E6               	movwf	??_setLog_Code
  7290  11B3  0866               	movf	??_setLog_Code,w
  7291  11B4  00E3               	movwf	setProductData@value
  7292  11B5  300D               	movlw	13
  7293  11B6  319C  2424  3191   	fcall	_setProductData
  7294                           
  7295                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7296  11B9  0023               	movlb	3	; select bank3
  7297  11BA  082E               	movf	(_RF_Data^(0+384)+14),w
  7298  11BB  0020               	movlb	0	; select bank0
  7299  11BC  00E6               	movwf	??_setLog_Code
  7300  11BD  0866               	movf	??_setLog_Code,w
  7301  11BE  00E3               	movwf	setProductData@value
  7302  11BF  300E               	movlw	14
  7303  11C0  319C  2424  3191   	fcall	_setProductData
  7304                           
  7305                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7306  11C3  3064               	movlw	100
  7307  11C4  0020               	movlb	0	; select bank0
  7308  11C5  00AA               	movwf	setBuz@time
  7309  11C6  3000               	movlw	0
  7310  11C7  00AB               	movwf	setBuz@time+1
  7311  11C8  3001               	movlw	1
  7312  11C9  3194  24F6  3191   	fcall	_setBuz
  7313                           
  7314                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7315  11CC  0021               	movlb	1	; select bank1
  7316  11CD  1EAE               	btfss	_myMain^(0+128),5
  7317  11CE  29D3               	goto	l2173
  7318                           
  7319                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7320  11CF  3001               	movlw	1
  7321  11D0  319D  25C8  3191   	fcall	_setMemory_LoopSave
  7322  11D3                     l2173:	
  7323                           
  7324                           ;RF_Control_B1.c: 284: }
  7325                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7326  11D3  3001               	movlw	1
  7327  11D4  319D  258F         	fcall	_setMemory_Modify
  7328  11D6  0008               	return
  7329  11D7                     __end_of_setLog_Code:	
  7330                           
  7331                           	psect	text27
  7332  1DC8                     __ptext27:	
  7333 ;; *************** function _setMemory_LoopSave *****************
  7334 ;; Defined at:
  7335 ;;		line 1087 in file "../src/MCU_B1.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  command         1    wreg     unsigned char 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;  command         1    2[BANK0 ] unsigned char 
  7340 ;; Return value:  Size  Location     Type
  7341 ;;		None               void
  7342 ;; Registers used:
  7343 ;;		wreg, status,2, status,0
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7353 ;;Total ram usage:        2 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    5
  7356 ;; This function calls:
  7357 ;;		Nothing
  7358 ;; This function is called by:
  7359 ;;		_setLog_Code
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           
  7364                           ;psect for function _setMemory_LoopSave
  7365  1DC8                     _setMemory_LoopSave:	
  7366                           
  7367                           ;incstack = 0
  7368                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7369                           ;setMemory_LoopSave@command stored from wreg
  7370  1DC8  0020               	movlb	0	; select bank0
  7371  1DC9  00A2               	movwf	setMemory_LoopSave@command
  7372                           
  7373                           ;MCU_B1.c: 1088: Memory.LoopSave = command == 1 ? 1 : 0;
  7374  1DCA  0822               	movf	setMemory_LoopSave@command,w
  7375  1DCB  3A01               	xorlw	1
  7376  1DCC  3000               	movlw	0
  7377  1DCD  1903               	skipnz
  7378  1DCE  3001               	movlw	1
  7379  1DCF  00A1               	movwf	??_setMemory_LoopSave
  7380  1DD0  0DA1               	rlf	??_setMemory_LoopSave,f
  7381  1DD1  0DA1               	rlf	??_setMemory_LoopSave,f
  7382  1DD2  0023               	movlb	3	; select bank3
  7383  1DD3  0862               	movf	(_Memory^(0+384)+36),w
  7384  1DD4  0020               	movlb	0	; select bank0
  7385  1DD5  0621               	xorwf	??_setMemory_LoopSave,w
  7386  1DD6  39FB               	andlw	-5
  7387  1DD7  0621               	xorwf	??_setMemory_LoopSave,w
  7388  1DD8  0023               	movlb	3	; select bank3
  7389  1DD9  00E2               	movwf	(_Memory^(0+384)+36)
  7390  1DDA  0008               	return
  7391  1DDB                     __end_of_setMemory_LoopSave:	
  7392                           
  7393                           	psect	text28
  7394  0958                     __ptext28:	
  7395 ;; *************** function _setControl_Lights_Table *****************
  7396 ;; Defined at:
  7397 ;;		line 289 in file "../src/RF_Control_B1.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;		None
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;		None
  7402 ;; Return value:  Size  Location     Type
  7403 ;;		None               void
  7404 ;; Registers used:
  7405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;Total ram usage:        0 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    9
  7418 ;; This function calls:
  7419 ;;		_getDimmerLights_Status
  7420 ;;		_getMain_All_LightsStatus
  7421 ;;		_setCmd_Status
  7422 ;;		_setDimmerLights_SwOff
  7423 ;;		_setDimmerLights_SwOn
  7424 ;;		_setProductData
  7425 ;;		_setRFSW_AdjControl
  7426 ;;		_setRFSW_Control
  7427 ;;		_setTxData
  7428 ;; This function is called by:
  7429 ;;		_getRxData
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           
  7434                           ;psect for function _setControl_Lights_Table
  7435  0958                     _setControl_Lights_Table:	
  7436                           
  7437                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7438                           
  7439                           ;incstack = 0
  7440                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7441  0958  29BA               	goto	l8848
  7442  0959                     l8830:	
  7443                           ;RF_Control_B1.c: 292: case 0x00:
  7444                           
  7445                           
  7446                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7447  0959  319B  23CB  3189   	fcall	_getMain_All_LightsStatus
  7448  095C  3A01               	xorlw	1
  7449  095D  1D03               	skipz
  7450  095E  2975               	goto	l8838
  7451                           
  7452                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7453  095F  3001               	movlw	1
  7454  0960  319C  24BE  3189   	fcall	_getDimmerLights_Status
  7455  0963  3A01               	xorlw	1
  7456  0964  1D03               	skipz
  7457  0965  296E               	goto	l8836
  7458                           
  7459                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7460  0966  3001               	movlw	1
  7461  0967  3191  21D7  3189   	fcall	_setDimmerLights_SwOn
  7462                           
  7463                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7464  096A  3001               	movlw	1
  7465  096B  3192  2279  3189   	fcall	_setDimmerLights_SwOff
  7466  096E                     l8836:	
  7467                           
  7468                           ;RF_Control_B1.c: 299: }
  7469                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7470  096E  0020               	movlb	0	; select bank0
  7471  096F  01A1               	clrf	setCmd_Status@cmd
  7472  0970  0AA1               	incf	setCmd_Status@cmd,f
  7473  0971  3001               	movlw	1
  7474  0972  319E  26B2         	fcall	_setCmd_Status
  7475                           
  7476                           ;RF_Control_B1.c: 315: } else {
  7477  0974  0008               	return
  7478  0975                     l8838:	
  7479                           
  7480                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7481  0975  0020               	movlb	0	; select bank0
  7482  0976  01E3               	clrf	setProductData@value
  7483  0977  3009               	movlw	9
  7484  0978  319C  2424  3189   	fcall	_setProductData
  7485                           
  7486                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7487  097B  0020               	movlb	0	; select bank0
  7488  097C  01E3               	clrf	setProductData@value
  7489  097D  300B               	movlw	11
  7490  097E  319C  2424  3189   	fcall	_setProductData
  7491                           
  7492                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7493  0981  0020               	movlb	0	; select bank0
  7494  0982  01E3               	clrf	setProductData@value
  7495  0983  300F               	movlw	15
  7496  0984  319C  2424  3189   	fcall	_setProductData
  7497                           
  7498                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7499  0987  0020               	movlb	0	; select bank0
  7500  0988  01E3               	clrf	setProductData@value
  7501  0989  3011               	movlw	17
  7502  098A  319C  2424  3189   	fcall	_setProductData
  7503                           
  7504                           ;RF_Control_B1.c: 320: setTxData();
  7505  098D  318F  2745         	fcall	_setTxData
  7506                           
  7507                           ;RF_Control_B1.c: 321: }
  7508                           ;RF_Control_B1.c: 322: break;
  7509  098F  0008               	return
  7510  0990                     l8840:	
  7511                           ;RF_Control_B1.c: 324: case 0x20:
  7512                           
  7513                           
  7514                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7515  0990  0020               	movlb	0	; select bank0
  7516  0991  01E3               	clrf	setProductData@value
  7517  0992  3009               	movlw	9
  7518  0993  319C  2424  3189   	fcall	_setProductData
  7519                           
  7520                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7521  0996  0020               	movlb	0	; select bank0
  7522  0997  01E3               	clrf	setProductData@value
  7523  0998  300B               	movlw	11
  7524  0999  319C  2424  3189   	fcall	_setProductData
  7525                           
  7526                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7527  099C  0021               	movlb	1	; select bank1
  7528  099D  086D               	movf	_product^(0+128),w
  7529  099E  0086               	movwf	6
  7530  099F  3002               	movlw	2	; select bank4/5
  7531  09A0  0087               	movwf	7
  7532  09A1  3002               	movlw	2	; select bank4/5
  7533  09A2  3F4F               	moviw [15]fsr1
  7534  09A3  0020               	movlb	0	; select bank0
  7535  09A4  00E3               	movwf	setProductData@value
  7536  09A5  300F               	movlw	15
  7537  09A6  319C  2424  3189   	fcall	_setProductData
  7538                           
  7539                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7540  09A9  0020               	movlb	0	; select bank0
  7541  09AA  01E3               	clrf	setProductData@value
  7542  09AB  3011               	movlw	17
  7543  09AC  319C  2424  3189   	fcall	_setProductData
  7544                           
  7545                           ;RF_Control_B1.c: 329: setTxData();
  7546  09AF  318F  2745         	fcall	_setTxData
  7547                           
  7548                           ;RF_Control_B1.c: 330: break;
  7549  09B1  0008               	return
  7550  09B2                     l8842:	
  7551                           ;RF_Control_B1.c: 333: case 0x01:
  7552                           
  7553                           
  7554                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7555  09B2  3001               	movlw	1
  7556  09B3  3194  2425         	fcall	_setRFSW_Control
  7557                           
  7558                           ;RF_Control_B1.c: 335: break;
  7559  09B5  0008               	return
  7560  09B6                     l8844:	
  7561                           ;RF_Control_B1.c: 339: case 0x11:
  7562                           
  7563                           
  7564                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7565  09B6  3001               	movlw	1
  7566  09B7  318B  2321         	fcall	_setRFSW_AdjControl
  7567                           
  7568                           ;RF_Control_B1.c: 370: }
  7569                           
  7570                           ;RF_Control_B1.c: 341: break;
  7571  09B9  0008               	return
  7572  09BA                     l8848:	
  7573  09BA  0023               	movlb	3	; select bank3
  7574  09BB  082F               	movf	(_RF_Data^(0+384)+15),w
  7575                           
  7576                           ; Switch size 1, requested type "space"
  7577                           ; Number of cases is 4, Range of values is 0 to 32
  7578                           ; switch strategies available:
  7579                           ; Name         Instructions Cycles
  7580                           ; simple_byte           13     7 (average)
  7581                           ; direct_byte           72     6 (fixed)
  7582                           ; jumptable            260     6 (fixed)
  7583                           ;	Chosen strategy is simple_byte
  7584  09BC  3A00               	xorlw	0	; case 0
  7585  09BD  1903               	skipnz
  7586  09BE  2959               	goto	l8830
  7587  09BF  3A01               	xorlw	1	; case 1
  7588  09C0  1903               	skipnz
  7589  09C1  29B2               	goto	l8842
  7590  09C2  3A10               	xorlw	16	; case 17
  7591  09C3  1903               	skipnz
  7592  09C4  29B6               	goto	l8844
  7593  09C5  3A31               	xorlw	49	; case 32
  7594  09C6  1903               	skipnz
  7595  09C7  2990               	goto	l8840
  7596  09C8  29C9               	goto	l2186
  7597  09C9                     l2186:	
  7598  09C9  0008               	return
  7599  09CA                     __end_of_setControl_Lights_Table:	
  7600                           
  7601                           	psect	text29
  7602  1425                     __ptext29:	
  7603 ;; *************** function _setRFSW_Control *****************
  7604 ;; Defined at:
  7605 ;;		line 378 in file "../src/RF_Control_B1.c"
  7606 ;; Parameters:    Size  Location     Type
  7607 ;;  sw              1    wreg     unsigned char 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  sw              1    2[BANK1 ] unsigned char 
  7610 ;;  status          1    1[BANK1 ] unsigned char 
  7611 ;; Return value:  Size  Location     Type
  7612 ;;		None               void
  7613 ;; Registers used:
  7614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7615 ;; Tracked objects:
  7616 ;;		On entry : 0/0
  7617 ;;		On exit  : 0/0
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7621 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7622 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7623 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7624 ;;Total ram usage:        3 bytes
  7625 ;; Hardware stack levels used:    1
  7626 ;; Hardware stack levels required when called:    8
  7627 ;; This function calls:
  7628 ;;		_getDimmerLights_Status
  7629 ;;		_setBuz
  7630 ;;		_setDelayOff_GO
  7631 ;;		_setDimmerLights_SwOff
  7632 ;;		_setDimmerLights_SwOn
  7633 ;;		_setRF_DimmerLights
  7634 ;;		_setTxData
  7635 ;; This function is called by:
  7636 ;;		_setControl_Lights_Table
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           
  7641                           ;psect for function _setRFSW_Control
  7642  1425                     _setRFSW_Control:	
  7643                           
  7644                           ;incstack = 0
  7645                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7646                           ;setRFSW_Control@sw stored from wreg
  7647  1425  0021               	movlb	1	; select bank1
  7648  1426  00E7               	movwf	setRFSW_Control@sw^(0+128)
  7649                           
  7650                           ;RF_Control_B1.c: 379: char status = 0;
  7651  1427  01E6               	clrf	setRFSW_Control@status^(0+128)
  7652                           
  7653                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7654  1428  0023               	movlb	3	; select bank3
  7655  1429  0830               	movf	(_RF_Data^(0+384)+16),w
  7656  142A  3A80               	xorlw	128
  7657  142B  1D03               	skipz
  7658  142C  2C5B               	goto	l8734
  7659                           
  7660                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7661  142D  0020               	movlb	0	; select bank0
  7662  142E  01E6               	clrf	setDelayOff_GO@command
  7663  142F  0AE6               	incf	setDelayOff_GO@command,f
  7664  1430  0023               	movlb	3	; select bank3
  7665  1431  0831               	movf	(_RF_Data^(0+384)+17),w
  7666  1432  0021               	movlb	1	; select bank1
  7667  1433  00E5               	movwf	??_setRFSW_Control^(0+128)
  7668  1434  0865               	movf	??_setRFSW_Control^(0+128),w
  7669  1435  0020               	movlb	0	; select bank0
  7670  1436  00E7               	movwf	setDelayOff_GO@value
  7671  1437  0021               	movlb	1	; select bank1
  7672  1438  0867               	movf	setRFSW_Control@sw^(0+128),w
  7673  1439  318C  24AE  3194   	fcall	_setDelayOff_GO
  7674                           
  7675                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7676  143C  0021               	movlb	1	; select bank1
  7677  143D  0867               	movf	setRFSW_Control@sw^(0+128),w
  7678  143E  319C  24BE  3194   	fcall	_getDimmerLights_Status
  7679  1441  3A01               	xorlw	1
  7680  1442  1D03               	skipz
  7681  1443  2C5B               	goto	l8734
  7682                           
  7683                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7684  1444  3064               	movlw	100
  7685  1445  0020               	movlb	0	; select bank0
  7686  1446  00AA               	movwf	setBuz@time
  7687  1447  3000               	movlw	0
  7688  1448  00AB               	movwf	setBuz@time+1
  7689  1449  3001               	movlw	1
  7690  144A  3194  24F6  3194   	fcall	_setBuz
  7691                           
  7692                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7693  144D  0020               	movlb	0	; select bank0
  7694  144E  01E6               	clrf	setRF_DimmerLights@on
  7695  144F  0AE6               	incf	setRF_DimmerLights@on,f
  7696  1450  0021               	movlb	1	; select bank1
  7697  1451  0867               	movf	setRFSW_Control@sw^(0+128),w
  7698  1452  3197  2733  3194   	fcall	_setRF_DimmerLights
  7699                           
  7700                           ;RF_Control_B1.c: 386: setTxData();
  7701  1455  318F  2745  3194   	fcall	_setTxData
  7702                           
  7703                           ;RF_Control_B1.c: 387: status = 1;
  7704  1458  0021               	movlb	1	; select bank1
  7705  1459  01E6               	clrf	setRFSW_Control@status^(0+128)
  7706  145A  0AE6               	incf	setRFSW_Control@status^(0+128),f
  7707  145B                     l8734:	
  7708                           
  7709                           ;RF_Control_B1.c: 388: }
  7710                           ;RF_Control_B1.c: 389: }
  7711                           ;RF_Control_B1.c: 391: if (status == 0) {
  7712  145B  0021               	movlb	1	; select bank1
  7713  145C  08E6               	movf	setRFSW_Control@status^(0+128),f
  7714  145D  1D03               	skipz
  7715  145E  0008               	return
  7716                           
  7717                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7718  145F  0867               	movf	setRFSW_Control@sw^(0+128),w
  7719  1460  3191  21D7  3194   	fcall	_setDimmerLights_SwOn
  7720                           
  7721                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7722  1463  0021               	movlb	1	; select bank1
  7723  1464  0867               	movf	setRFSW_Control@sw^(0+128),w
  7724  1465  3192  2279         	fcall	_setDimmerLights_SwOff
  7725  1467  0008               	return
  7726  1468                     __end_of_setRFSW_Control:	
  7727                           
  7728                           	psect	text30
  7729  0B21                     __ptext30:	
  7730 ;; *************** function _setRFSW_AdjControl *****************
  7731 ;; Defined at:
  7732 ;;		line 400 in file "../src/RF_Control_B1.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  sw              1    wreg     unsigned char 
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  sw              1   73[BANK0 ] unsigned char 
  7737 ;;  status          1   72[BANK0 ] unsigned char 
  7738 ;; Return value:  Size  Location     Type
  7739 ;;		None               void
  7740 ;; Registers used:
  7741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7742 ;; Tracked objects:
  7743 ;;		On entry : 0/0
  7744 ;;		On exit  : 0/0
  7745 ;;		Unchanged: 0/0
  7746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7748 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;Total ram usage:        4 bytes
  7752 ;; Hardware stack levels used:    1
  7753 ;; Hardware stack levels required when called:    8
  7754 ;; This function calls:
  7755 ;;		_getDimmerLights_PercentToValue
  7756 ;;		_getDimmerLights_Status
  7757 ;;		_setDimmerIntr_Dimming_RF
  7758 ;;		_setDimmerIntr_MaxmumValue
  7759 ;;		_setDimmerLights_DimmingRun
  7760 ;;		_setDimmerLights_SwOff
  7761 ;;		_setDimmerLights_SwOn
  7762 ;;		_setMemory_Modify
  7763 ;;		_setProductData
  7764 ;;		_setTxData
  7765 ;; This function is called by:
  7766 ;;		_setControl_Lights_Table
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           
  7771                           ;psect for function _setRFSW_AdjControl
  7772  0B21                     _setRFSW_AdjControl:	
  7773                           
  7774                           ;incstack = 0
  7775                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7776                           ;setRFSW_AdjControl@sw stored from wreg
  7777  0B21  0020               	movlb	0	; select bank0
  7778  0B22  00E9               	movwf	setRFSW_AdjControl@sw
  7779                           
  7780                           ;RF_Control_B1.c: 401: char status = 0;
  7781  0B23  01E8               	clrf	setRFSW_AdjControl@status
  7782                           
  7783                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7784  0B24  0869               	movf	setRFSW_AdjControl@sw,w
  7785  0B25  319C  24BE  318B   	fcall	_getDimmerLights_Status
  7786  0B28  0020               	movlb	0	; select bank0
  7787  0B29  00E6               	movwf	??_setRFSW_AdjControl
  7788  0B2A  0866               	movf	??_setRFSW_AdjControl,w
  7789  0B2B  00E8               	movwf	setRFSW_AdjControl@status
  7790                           
  7791                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7792  0B2C  3065               	movlw	101
  7793  0B2D  0023               	movlb	3	; select bank3
  7794  0B2E  0229               	subwf	(_RF_Data^(0+384)+9),w
  7795  0B2F  1C03               	skipc
  7796  0B30  2B38               	goto	l8746
  7797                           
  7798                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7799  0B31  3064               	movlw	100
  7800  0B32  0020               	movlb	0	; select bank0
  7801  0B33  00E6               	movwf	??_setRFSW_AdjControl
  7802  0B34  0866               	movf	??_setRFSW_AdjControl,w
  7803  0B35  0023               	movlb	3	; select bank3
  7804  0B36  00A9               	movwf	(_RF_Data^(0+384)+9)
  7805                           
  7806                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7807  0B37  2B3D               	goto	l8750
  7808  0B38                     l8746:	
  7809  0B38  08A9               	movf	(_RF_Data^(0+384)+9),f
  7810  0B39  1D03               	skipz
  7811  0B3A  2B3D               	goto	l8750
  7812                           
  7813                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7814  0B3B  01A9               	clrf	(_RF_Data^(0+384)+9)
  7815  0B3C  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7816  0B3D                     l8750:	
  7817                           
  7818                           ;RF_Control_B1.c: 409: }
  7819                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7820  0B3D  0829               	movf	(_RF_Data^(0+384)+9),w
  7821  0B3E  0020               	movlb	0	; select bank0
  7822  0B3F  00E6               	movwf	??_setRFSW_AdjControl
  7823  0B40  0866               	movf	??_setRFSW_AdjControl,w
  7824  0B41  00E3               	movwf	setProductData@value
  7825  0B42  3009               	movlw	9
  7826  0B43  319C  2424  318B   	fcall	_setProductData
  7827                           
  7828                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7829  0B46  0020               	movlb	0	; select bank0
  7830  0B47  0869               	movf	setRFSW_AdjControl@sw,w
  7831  0B48  00E6               	movwf	??_setRFSW_AdjControl
  7832  0B49  0866               	movf	??_setRFSW_AdjControl,w
  7833  0B4A  00E3               	movwf	setProductData@value
  7834  0B4B  300B               	movlw	11
  7835  0B4C  319C  2424  318B   	fcall	_setProductData
  7836                           
  7837                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7838  0B4F  0020               	movlb	0	; select bank0
  7839  0B50  0869               	movf	setRFSW_AdjControl@sw,w
  7840  0B51  3E1A               	addlw	26
  7841  0B52  0021               	movlb	1	; select bank1
  7842  0B53  076D               	addwf	_product^(0+128),w
  7843  0B54  0020               	movlb	0	; select bank0
  7844  0B55  00E6               	movwf	??_setRFSW_AdjControl
  7845  0B56  0866               	movf	??_setRFSW_AdjControl,w
  7846  0B57  0086               	movwf	6
  7847  0B58  3002               	movlw	2	; select bank4/5
  7848  0B59  0087               	movwf	7
  7849  0B5A  0801               	movf	1,w
  7850  0B5B  00E7               	movwf	??_setRFSW_AdjControl+1
  7851  0B5C  0867               	movf	??_setRFSW_AdjControl+1,w
  7852  0B5D  00E3               	movwf	setProductData@value
  7853  0B5E  3011               	movlw	17
  7854  0B5F  319C  2424  318B   	fcall	_setProductData
  7855                           
  7856                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7857  0B62  0023               	movlb	3	; select bank3
  7858  0B63  0829               	movf	(_RF_Data^(0+384)+9),w
  7859  0B64  0020               	movlb	0	; select bank0
  7860  0B65  00E6               	movwf	??_setRFSW_AdjControl
  7861  0B66  0866               	movf	??_setRFSW_AdjControl,w
  7862  0B67  00E3               	movwf	setProductData@value
  7863  0B68  0869               	movf	setRFSW_AdjControl@sw,w
  7864  0B69  3E14               	addlw	20
  7865  0B6A  319C  2424  318B   	fcall	_setProductData
  7866                           
  7867                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  7868  0B6D  3001               	movlw	1
  7869  0B6E  319D  258F  318B   	fcall	_setMemory_Modify
  7870                           
  7871                           ;RF_Control_B1.c: 425: if (status == 1) {
  7872  0B71  0020               	movlb	0	; select bank0
  7873  0B72  0868               	movf	setRFSW_AdjControl@status,w
  7874  0B73  3A01               	xorlw	1
  7875  0B74  1D03               	skipz
  7876  0B75  2B8D               	goto	l8760
  7877                           
  7878                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7879  0B76  0023               	movlb	3	; select bank3
  7880  0B77  0829               	movf	(_RF_Data^(0+384)+9),w
  7881  0B78  3196  2669  318B   	fcall	_getDimmerLights_PercentToValue
  7882  0B7B  0020               	movlb	0	; select bank0
  7883  0B7C  00E6               	movwf	??_setRFSW_AdjControl
  7884  0B7D  0866               	movf	??_setRFSW_AdjControl,w
  7885  0B7E  00E3               	movwf	setDimmerIntr_MaxmumValue@value
  7886  0B7F  0869               	movf	setRFSW_AdjControl@sw,w
  7887  0B80  319C  2430  318B   	fcall	_setDimmerIntr_MaxmumValue
  7888                           
  7889                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  7890  0B83  0020               	movlb	0	; select bank0
  7891  0B84  01A1               	clrf	setDimmerIntr_Dimming_RF@command
  7892  0B85  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
  7893  0B86  0869               	movf	setRFSW_AdjControl@sw,w
  7894  0B87  319E  269A  318B   	fcall	_setDimmerIntr_Dimming_RF
  7895                           
  7896                           ;RF_Control_B1.c: 428: setTxData();
  7897  0B8A  318F  2745         	fcall	_setTxData
  7898                           
  7899                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  7900  0B8C  0008               	return
  7901  0B8D                     l8760:	
  7902  0B8D  0020               	movlb	0	; select bank0
  7903  0B8E  08E8               	movf	setRFSW_AdjControl@status,f
  7904  0B8F  1D03               	skipz
  7905  0B90  0008               	return
  7906                           
  7907                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  7908  0B91  01A3               	clrf	setDimmerLights_DimmingRun@command
  7909  0B92  0AA3               	incf	setDimmerLights_DimmingRun@command,f
  7910  0B93  0869               	movf	setRFSW_AdjControl@sw,w
  7911  0B94  319F  2732  318B   	fcall	_setDimmerLights_DimmingRun
  7912                           
  7913                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  7914  0B97  0020               	movlb	0	; select bank0
  7915  0B98  0869               	movf	setRFSW_AdjControl@sw,w
  7916  0B99  3191  21D7  318B   	fcall	_setDimmerLights_SwOn
  7917                           
  7918                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  7919  0B9C  0020               	movlb	0	; select bank0
  7920  0B9D  0869               	movf	setRFSW_AdjControl@sw,w
  7921  0B9E  3192  2279         	fcall	_setDimmerLights_SwOff
  7922  0BA0  0008               	return
  7923  0BA1                     __end_of_setRFSW_AdjControl:	
  7924                           
  7925                           	psect	text31
  7926  1F32                     __ptext31:	
  7927 ;; *************** function _setDimmerLights_DimmingRun *****************
  7928 ;; Defined at:
  7929 ;;		line 1049 in file "../src/Dimmer_B1.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;  lights          1    wreg     unsigned char 
  7932 ;;  command         1    3[BANK0 ] unsigned char 
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;  lights          1    5[BANK0 ] unsigned char 
  7935 ;; Return value:  Size  Location     Type
  7936 ;;		None               void
  7937 ;; Registers used:
  7938 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7939 ;; Tracked objects:
  7940 ;;		On entry : 0/0
  7941 ;;		On exit  : 0/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7944 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;Total ram usage:        3 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; Hardware stack levels required when called:    6
  7951 ;; This function calls:
  7952 ;;		_DimmerLights_SelectPointer
  7953 ;; This function is called by:
  7954 ;;		_setRFSW_AdjControl
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           
  7959                           ;psect for function _setDimmerLights_DimmingRun
  7960  1F32                     _setDimmerLights_DimmingRun:	
  7961                           
  7962                           ;incstack = 0
  7963                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7964                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7965  1F32  0020               	movlb	0	; select bank0
  7966  1F33  00A5               	movwf	setDimmerLights_DimmingRun@lights
  7967                           
  7968                           ;Dimmer_B1.c: 1050: DimmerLights_SelectPointer(lights);
  7969  1F34  0825               	movf	setDimmerLights_DimmingRun@lights,w
  7970  1F35  319C  2418         	fcall	_DimmerLights_SelectPointer
  7971                           
  7972                           ;Dimmer_B1.c: 1051: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7973  1F37  0020               	movlb	0	; select bank0
  7974  1F38  0823               	movf	setDimmerLights_DimmingRun@command,w
  7975  1F39  3A01               	xorlw	1
  7976  1F3A  3000               	movlw	0
  7977  1F3B  1903               	skipnz
  7978  1F3C  3001               	movlw	1
  7979  1F3D  00A4               	movwf	??_setDimmerLights_DimmingRun
  7980  1F3E  0021               	movlb	1	; select bank1
  7981  1F3F  0A4F               	incf	_DimmerLights^(0+128),w
  7982  1F40  0086               	movwf	6
  7983  1F41  3001               	movlw	1	; select bank2/3
  7984  1F42  0087               	movwf	7
  7985  1F43  0020               	movlb	0	; select bank0
  7986  1F44  0EA4               	swapf	??_setDimmerLights_DimmingRun,f
  7987  1F45  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  7988  1F46  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  7989  1F47  0801               	movf	1,w
  7990  1F48  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  7991  1F49  39BF               	andlw	-65
  7992  1F4A  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  7993  1F4B  0081               	movwf	1
  7994  1F4C  0008               	return
  7995  1F4D                     __end_of_setDimmerLights_DimmingRun:	
  7996                           
  7997                           	psect	text32
  7998  1D13                     __ptext32:	
  7999 ;; *************** function _getRF_KeyStatus *****************
  8000 ;; Defined at:
  8001 ;;		line 166 in file "../src/RF_Control_B1.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;		None
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;  key             1    2[BANK0 ] unsigned char 
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      unsigned char 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8019 ;;Total ram usage:        3 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    5
  8022 ;; This function calls:
  8023 ;;		Nothing
  8024 ;; This function is called by:
  8025 ;;		_setRF_Main
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           
  8030                           ;psect for function _getRF_KeyStatus
  8031  1D13                     _getRF_KeyStatus:	
  8032                           
  8033                           ;RF_Control_B1.c: 167: char key = 0;
  8034                           
  8035                           ;incstack = 0
  8036                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8037  1D13  0020               	movlb	0	; select bank0
  8038  1D14  01A2               	clrf	getRF_KeyStatus@key
  8039                           
  8040                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8041  1D15  01A3               	clrf	_getRF_KeyStatus$5333
  8042  1D16  0AA3               	incf	_getRF_KeyStatus$5333,f
  8043  1D17  1F0C               	btfss	12,6	;volatile
  8044  1D18  1A0C               	btfsc	12,4	;volatile
  8045  1D19  2D1E               	goto	l6904
  8046  1D1A  1C0C               	btfss	12,0	;volatile
  8047  1D1B  1B8C               	btfsc	12,7	;volatile
  8048  1D1C  2D1E               	goto	l6904
  8049  1D1D  01A3               	clrf	_getRF_KeyStatus$5333
  8050  1D1E                     l6904:	
  8051  1D1E  0823               	movf	_getRF_KeyStatus$5333,w
  8052  1D1F  00A1               	movwf	??_getRF_KeyStatus
  8053  1D20  0821               	movf	??_getRF_KeyStatus,w
  8054  1D21  00A2               	movwf	getRF_KeyStatus@key
  8055                           
  8056                           ;RF_Control_B1.c: 179: return key;
  8057  1D22  0822               	movf	getRF_KeyStatus@key,w
  8058  1D23  0008               	return
  8059  1D24                     __end_of_getRF_KeyStatus:	
  8060                           
  8061                           	psect	text33
  8062  1D02                     __ptext33:	
  8063 ;; *************** function _getBuz_GO *****************
  8064 ;; Defined at:
  8065 ;;		line 82 in file "../src/Buzzer_B1.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;		None
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;  i               2    5[BANK0 ] int 
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  2    1[BANK0 ] int 
  8072 ;; Registers used:
  8073 ;;		wreg, status,2, status,0
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8079 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;Total ram usage:        6 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    5
  8086 ;; This function calls:
  8087 ;;		Nothing
  8088 ;; This function is called by:
  8089 ;;		_setRF_Main
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           
  8094                           ;psect for function _getBuz_GO
  8095  1D02                     _getBuz_GO:	
  8096                           
  8097                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8098                           
  8099                           ;incstack = 0
  8100                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8101  1D02  0022               	movlb	2	; select bank2
  8102  1D03  0C20               	rrf	_Buz1^(0+256),w
  8103  1D04  3901               	andlw	1
  8104  1D05  0020               	movlb	0	; select bank0
  8105  1D06  00A3               	movwf	??_getBuz_GO
  8106  1D07  01A4               	clrf	??_getBuz_GO+1
  8107  1D08  0823               	movf	??_getBuz_GO,w
  8108  1D09  00A5               	movwf	getBuz_GO@i
  8109  1D0A  0824               	movf	??_getBuz_GO+1,w
  8110  1D0B  00A6               	movwf	getBuz_GO@i+1
  8111                           
  8112                           ;Buzzer_B1.c: 84: return i;
  8113  1D0C  0826               	movf	getBuz_GO@i+1,w
  8114  1D0D  01A2               	clrf	?_getBuz_GO+1
  8115  1D0E  07A2               	addwf	?_getBuz_GO+1,f
  8116  1D0F  0825               	movf	getBuz_GO@i,w
  8117  1D10  01A1               	clrf	?_getBuz_GO
  8118  1D11  07A1               	addwf	?_getBuz_GO,f
  8119  1D12  0008               	return
  8120  1D13                     __end_of_getBuz_GO:	
  8121                           
  8122                           	psect	text34
  8123  1C9F                     __ptext34:	
  8124 ;; *************** function _RF_RxDisable *****************
  8125 ;; Defined at:
  8126 ;;		line 154 in file "../src/RF_Control_B1.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;		None
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;		None
  8131 ;; Return value:  Size  Location     Type
  8132 ;;		None               void
  8133 ;; Registers used:
  8134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;Total ram usage:        0 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    7
  8147 ;; This function calls:
  8148 ;;		_CC2500_WriteCommand
  8149 ;; This function is called by:
  8150 ;;		_setRF_Main
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           
  8155                           ;psect for function _RF_RxDisable
  8156  1C9F                     _RF_RxDisable:	
  8157                           
  8158                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8159                           
  8160                           ;incstack = 0
  8161                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8162  1C9F  0021               	movlb	1	; select bank1
  8163  1CA0  18A0               	btfsc	_RF1^(0+128),1
  8164  1CA1  2CA4               	goto	l2143
  8165  1CA2  1DA0               	btfss	_RF1^(0+128),3
  8166  1CA3  0008               	return
  8167  1CA4                     l2143:	
  8168                           
  8169                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8170  1CA4  11A0               	bcf	_RF1^(0+128),3
  8171                           
  8172                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8173  1CA5  10A0               	bcf	_RF1^(0+128),1
  8174                           
  8175                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8176  1CA6  3036               	movlw	54
  8177  1CA7  319F  2718  319C   	fcall	_CC2500_WriteCommand
  8178                           
  8179                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8180  1CAA  303A               	movlw	58
  8181  1CAB  319F  2718         	fcall	_CC2500_WriteCommand
  8182  1CAD  0008               	return
  8183  1CAE                     __end_of_RF_RxDisable:	
  8184                           
  8185                           	psect	text35
  8186  080E                     __ptext35:	
  8187 ;; *************** function _CC2500_TxData *****************
  8188 ;; Defined at:
  8189 ;;		line 32 in file "../src/CC2500_B1.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;		None
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  loop_e          1    6[BANK0 ] unsigned char 
  8194 ;; Return value:  Size  Location     Type
  8195 ;;		None               void
  8196 ;; Registers used:
  8197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;Total ram usage:        2 bytes
  8208 ;; Hardware stack levels used:    1
  8209 ;; Hardware stack levels required when called:    7
  8210 ;; This function calls:
  8211 ;;		_CC2500_WriteByte
  8212 ;;		_CC2500_WriteCommand
  8213 ;;		_RF_Timeout_Counter
  8214 ;;		_setRF_TimeoutCleared
  8215 ;; This function is called by:
  8216 ;;		_setRF_Main
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           
  8221                           ;psect for function _CC2500_TxData
  8222  080E                     _CC2500_TxData:	
  8223                           
  8224                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8225                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8226                           
  8227                           ;incstack = 0
  8228                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8229  080E  3036               	movlw	54
  8230  080F  319F  2718  3188   	fcall	_CC2500_WriteCommand
  8231                           
  8232                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8233  0812  303B               	movlw	59
  8234  0813  319F  2718  3188   	fcall	_CC2500_WriteCommand
  8235                           
  8236                           ;CC2500_B1.c: 38: RC0 = 0;
  8237  0816  0020               	movlb	0	; select bank0
  8238  0817  100E               	bcf	14,0	;volatile
  8239                           
  8240                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8241  0818  307F               	movlw	127
  8242  0819  00A5               	movwf	??_CC2500_TxData
  8243  081A  0825               	movf	??_CC2500_TxData,w
  8244  081B  0021               	movlb	1	; select bank1
  8245  081C  00D4               	movwf	_SPI0Buffer^(0+128)
  8246                           
  8247                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8248  081D  2821               	goto	l6610
  8249  081E                     l6608:	
  8250                           
  8251                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8252  081E  319E  2602  3188   	fcall	_RF_Timeout_Counter
  8253  0821                     l6610:	
  8254  0821  0020               	movlb	0	; select bank0
  8255  0822  1E8E               	btfss	14,5	;volatile
  8256  0823  2827               	goto	l6614
  8257  0824  0021               	movlb	1	; select bank1
  8258  0825  1F21               	btfss	(_RF1^(0+128)+1),6
  8259  0826  281E               	goto	l6608
  8260  0827                     l6614:	
  8261                           
  8262                           ;CC2500_B1.c: 42: };
  8263                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8264  0827  319B  2358  3188   	fcall	_setRF_TimeoutCleared
  8265                           
  8266                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8267  082A  319E  26CB  3188   	fcall	_CC2500_WriteByte
  8268                           
  8269                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8270  082D  0021               	movlb	1	; select bank1
  8271  082E  0857               	movf	_Tx_Length^(0+128),w
  8272  082F  0020               	movlb	0	; select bank0
  8273  0830  00A5               	movwf	??_CC2500_TxData
  8274  0831  0825               	movf	??_CC2500_TxData,w
  8275  0832  0021               	movlb	1	; select bank1
  8276  0833  00D4               	movwf	_SPI0Buffer^(0+128)
  8277                           
  8278                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8279  0834  319E  26CB  3188   	fcall	_CC2500_WriteByte
  8280                           
  8281                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8282  0837  0020               	movlb	0	; select bank0
  8283  0838  01A6               	clrf	CC2500_TxData@loop_e
  8284  0839                     l6628:	
  8285  0839  0021               	movlb	1	; select bank1
  8286  083A  0857               	movf	_Tx_Length^(0+128),w
  8287  083B  0020               	movlb	0	; select bank0
  8288  083C  0226               	subwf	CC2500_TxData@loop_e,w
  8289  083D  1803               	btfsc	3,0
  8290  083E  2852               	goto	l235
  8291                           
  8292                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8293  083F  0826               	movf	CC2500_TxData@loop_e,w
  8294  0840  3EA0               	addlw	_RF_Data& (0+255)
  8295  0841  0086               	movwf	6
  8296  0842  3001               	movlw	1	; select bank3/4
  8297  0843  0087               	movwf	7
  8298  0844  0801               	movf	1,w
  8299  0845  00A5               	movwf	??_CC2500_TxData
  8300  0846  0825               	movf	??_CC2500_TxData,w
  8301  0847  0021               	movlb	1	; select bank1
  8302  0848  00D4               	movwf	_SPI0Buffer^(0+128)
  8303                           
  8304                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8305  0849  319E  26CB  3188   	fcall	_CC2500_WriteByte
  8306  084C  3001               	movlw	1
  8307  084D  0020               	movlb	0	; select bank0
  8308  084E  00A5               	movwf	??_CC2500_TxData
  8309  084F  0825               	movf	??_CC2500_TxData,w
  8310  0850  07A6               	addwf	CC2500_TxData@loop_e,f
  8311  0851  2839               	goto	l6628
  8312  0852                     l235:	
  8313                           
  8314                           ;CC2500_B1.c: 51: }
  8315                           ;CC2500_B1.c: 52: RC0 = 1;
  8316  0852  140E               	bsf	14,0	;volatile
  8317                           
  8318                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8319  0853  3035               	movlw	53
  8320  0854  319F  2718  3188   	fcall	_CC2500_WriteCommand
  8321                           
  8322                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8323  0857  285B               	goto	l6634
  8324  0858                     l6632:	
  8325                           
  8326                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8327  0858  319E  2602  3188   	fcall	_RF_Timeout_Counter
  8328  085B                     l6634:	
  8329  085B  0020               	movlb	0	; select bank0
  8330  085C  188E               	btfsc	14,1	;volatile
  8331  085D  2861               	goto	l6638
  8332  085E  0021               	movlb	1	; select bank1
  8333  085F  1F21               	btfss	(_RF1^(0+128)+1),6
  8334  0860  2858               	goto	l6632
  8335  0861                     l6638:	
  8336                           
  8337                           ;CC2500_B1.c: 56: };
  8338                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8339  0861  319B  2358  3188   	fcall	_setRF_TimeoutCleared
  8340                           
  8341                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8342  0864  2868               	goto	l6642
  8343  0865                     l6640:	
  8344                           
  8345                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8346  0865  319E  2602  3188   	fcall	_RF_Timeout_Counter
  8347  0868                     l6642:	
  8348  0868  0020               	movlb	0	; select bank0
  8349  0869  1C8E               	btfss	14,1	;volatile
  8350  086A  286E               	goto	l6646
  8351  086B  0021               	movlb	1	; select bank1
  8352  086C  1F21               	btfss	(_RF1^(0+128)+1),6
  8353  086D  2865               	goto	l6640
  8354  086E                     l6646:	
  8355                           
  8356                           ;CC2500_B1.c: 61: };
  8357                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8358  086E  319B  2358  3188   	fcall	_setRF_TimeoutCleared
  8359                           
  8360                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8361  0871  3036               	movlw	54
  8362  0872  319F  2718  3188   	fcall	_CC2500_WriteCommand
  8363                           
  8364                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8365  0875  303B               	movlw	59
  8366  0876  319F  2718         	fcall	_CC2500_WriteCommand
  8367                           
  8368                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8369  0878  0020               	movlb	0	; select bank0
  8370  0879  14EE               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8371  087A  0008               	return
  8372  087B                     __end_of_CC2500_TxData:	
  8373                           
  8374                           	psect	text36
  8375  087B                     __ptext36:	
  8376 ;; *************** function _CC2500_RxData *****************
  8377 ;; Defined at:
  8378 ;;		line 73 in file "../src/CC2500_B1.c"
  8379 ;; Parameters:    Size  Location     Type
  8380 ;;		None
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;  loop_f          1    6[BANK0 ] unsigned char 
  8383 ;; Return value:  Size  Location     Type
  8384 ;;		None               void
  8385 ;; Registers used:
  8386 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8393 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;Total ram usage:        2 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; Hardware stack levels required when called:    7
  8399 ;; This function calls:
  8400 ;;		_CC2500_ReadByte
  8401 ;;		_CC2500_ReadStatus
  8402 ;;		_CC2500_WriteByte
  8403 ;;		_CC2500_WriteCommand
  8404 ;;		_RF_Timeout_Counter
  8405 ;;		_setRF_TimeoutCleared
  8406 ;; This function is called by:
  8407 ;;		_setRF_Main
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           
  8412                           ;psect for function _CC2500_RxData
  8413  087B                     _CC2500_RxData:	
  8414                           
  8415                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8416                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8417                           
  8418                           ;incstack = 0
  8419                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8420  087B  0020               	movlb	0	; select bank0
  8421  087C  188E               	btfsc	14,1	;volatile
  8422  087D  0008               	return
  8423                           
  8424                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8425  087E  303B               	movlw	59
  8426  087F  3190  20A4  3188   	fcall	_CC2500_ReadStatus
  8427                           
  8428                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8429  0882  0021               	movlb	1	; select bank1
  8430  0883  085A               	movf	_s_data^(0+128),w
  8431  0884  1903               	btfsc	3,2
  8432  0885  0008               	return
  8433                           
  8434                           ;CC2500_B1.c: 90: RC0 = 0;
  8435  0886  0020               	movlb	0	; select bank0
  8436  0887  100E               	bcf	14,0	;volatile
  8437                           
  8438                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8439  0888  30FF               	movlw	255
  8440  0889  00A5               	movwf	??_CC2500_RxData
  8441  088A  0825               	movf	??_CC2500_RxData,w
  8442  088B  0021               	movlb	1	; select bank1
  8443  088C  00D4               	movwf	_SPI0Buffer^(0+128)
  8444                           
  8445                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8446  088D  2891               	goto	l6666
  8447  088E                     l6664:	
  8448                           
  8449                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8450  088E  319E  2602  3188   	fcall	_RF_Timeout_Counter
  8451  0891                     l6666:	
  8452  0891  0020               	movlb	0	; select bank0
  8453  0892  1E8E               	btfss	14,5	;volatile
  8454  0893  2897               	goto	l6670
  8455  0894  0021               	movlb	1	; select bank1
  8456  0895  1F21               	btfss	(_RF1^(0+128)+1),6
  8457  0896  288E               	goto	l6664
  8458  0897                     l6670:	
  8459                           
  8460                           ;CC2500_B1.c: 95: };
  8461                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8462  0897  319B  2358  3188   	fcall	_setRF_TimeoutCleared
  8463                           
  8464                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8465  089A  319E  26CB  3188   	fcall	_CC2500_WriteByte
  8466                           
  8467                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8468  089D  319F  2785  3188   	fcall	_CC2500_ReadByte
  8469                           
  8470                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8471  08A0  0021               	movlb	1	; select bank1
  8472  08A1  0854               	movf	_SPI0Buffer^(0+128),w
  8473  08A2  0020               	movlb	0	; select bank0
  8474  08A3  00A5               	movwf	??_CC2500_RxData
  8475  08A4  0825               	movf	??_CC2500_RxData,w
  8476  08A5  0021               	movlb	1	; select bank1
  8477  08A6  00D3               	movwf	_Rx_Length^(0+128)
  8478                           
  8479                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8480  08A7  0020               	movlb	0	; select bank0
  8481  08A8  01A6               	clrf	CC2500_RxData@loop_f
  8482  08A9                     l6686:	
  8483  08A9  0021               	movlb	1	; select bank1
  8484  08AA  0853               	movf	_Rx_Length^(0+128),w
  8485  08AB  0020               	movlb	0	; select bank0
  8486  08AC  0226               	subwf	CC2500_RxData@loop_f,w
  8487  08AD  1803               	btfsc	3,0
  8488  08AE  28C2               	goto	l6688
  8489                           
  8490                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8491  08AF  319F  2785  3188   	fcall	_CC2500_ReadByte
  8492                           
  8493                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8494  08B2  0021               	movlb	1	; select bank1
  8495  08B3  0854               	movf	_SPI0Buffer^(0+128),w
  8496  08B4  0020               	movlb	0	; select bank0
  8497  08B5  00A5               	movwf	??_CC2500_RxData
  8498  08B6  0826               	movf	CC2500_RxData@loop_f,w
  8499  08B7  3EA0               	addlw	_RF_Data& (0+255)
  8500  08B8  0086               	movwf	6
  8501  08B9  3001               	movlw	1	; select bank3/4
  8502  08BA  0087               	movwf	7
  8503  08BB  0825               	movf	??_CC2500_RxData,w
  8504  08BC  0081               	movwf	1
  8505  08BD  3001               	movlw	1
  8506  08BE  00A5               	movwf	??_CC2500_RxData
  8507  08BF  0825               	movf	??_CC2500_RxData,w
  8508  08C0  07A6               	addwf	CC2500_RxData@loop_f,f
  8509  08C1  28A9               	goto	l6686
  8510  08C2                     l6688:	
  8511                           
  8512                           ;CC2500_B1.c: 104: }
  8513                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8514  08C2  319F  2785  3188   	fcall	_CC2500_ReadByte
  8515                           
  8516                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8517  08C5  0021               	movlb	1	; select bank1
  8518  08C6  0854               	movf	_SPI0Buffer^(0+128),w
  8519  08C7  0020               	movlb	0	; select bank0
  8520  08C8  00A5               	movwf	??_CC2500_RxData
  8521  08C9  0825               	movf	??_CC2500_RxData,w
  8522  08CA  0021               	movlb	1	; select bank1
  8523  08CB  00D2               	movwf	_RSSI^(0+128)
  8524                           
  8525                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8526  08CC  319F  2785  3188   	fcall	_CC2500_ReadByte
  8527                           
  8528                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8529  08CF  0021               	movlb	1	; select bank1
  8530  08D0  0854               	movf	_SPI0Buffer^(0+128),w
  8531  08D1  0020               	movlb	0	; select bank0
  8532  08D2  00A5               	movwf	??_CC2500_RxData
  8533  08D3  0825               	movf	??_CC2500_RxData,w
  8534  08D4  0021               	movlb	1	; select bank1
  8535  08D5  00CB               	movwf	_CRC^(0+128)
  8536                           
  8537                           ;CC2500_B1.c: 109: RC0 = 1;
  8538  08D6  0020               	movlb	0	; select bank0
  8539  08D7  140E               	bsf	14,0	;volatile
  8540                           
  8541                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8542  08D8  0021               	movlb	1	; select bank1
  8543  08D9  1FCB               	btfss	_CRC^(0+128),7
  8544  08DA  28DD               	goto	l259
  8545                           
  8546                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8547  08DB  0020               	movlb	0	; select bank0
  8548  08DC  146E               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8549  08DD                     l259:	
  8550                           
  8551                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8552  08DD  0021               	movlb	1	; select bank1
  8553  08DE  11A0               	bcf	_RF1^(0+128),3
  8554                           
  8555                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8556  08DF  14A0               	bsf	_RF1^(0+128),1
  8557                           
  8558                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8559  08E0  3036               	movlw	54
  8560  08E1  319F  2718  3188   	fcall	_CC2500_WriteCommand
  8561                           
  8562                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8563  08E4  303A               	movlw	58
  8564  08E5  319F  2718         	fcall	_CC2500_WriteCommand
  8565  08E7  0021               	movlb	1	; select bank1
  8566  08E8  0008               	return
  8567  08E9                     __end_of_CC2500_RxData:	
  8568                           
  8569                           	psect	text37
  8570  10A4                     __ptext37:	
  8571 ;; *************** function _CC2500_ReadStatus *****************
  8572 ;; Defined at:
  8573 ;;		line 308 in file "../src/CC2500_B1.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;  status_addr     1    wreg     unsigned char 
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;  status_addr     1    4[BANK0 ] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;		None               void
  8580 ;; Registers used:
  8581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8591 ;;Total ram usage:        2 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    6
  8594 ;; This function calls:
  8595 ;;		_CC2500_ReadByte
  8596 ;;		_CC2500_WriteByte
  8597 ;;		_RF_Timeout_Counter
  8598 ;;		_setRF_TimeoutCleared
  8599 ;; This function is called by:
  8600 ;;		_CC2500_RxData
  8601 ;; This function uses a non-reentrant model
  8602 ;;
  8603                           
  8604                           
  8605                           ;psect for function _CC2500_ReadStatus
  8606  10A4                     _CC2500_ReadStatus:	
  8607                           
  8608                           ;incstack = 0
  8609                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8610                           ;CC2500_ReadStatus@status_addr stored from wreg
  8611  10A4  0020               	movlb	0	; select bank0
  8612  10A5  00A4               	movwf	CC2500_ReadStatus@status_addr
  8613                           
  8614                           ;CC2500_B1.c: 309: RC0 = 0;
  8615  10A6  100E               	bcf	14,0	;volatile
  8616                           
  8617                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8618  10A7  0824               	movf	CC2500_ReadStatus@status_addr,w
  8619  10A8  3EC0               	addlw	192
  8620  10A9  00A3               	movwf	??_CC2500_ReadStatus
  8621  10AA  0823               	movf	??_CC2500_ReadStatus,w
  8622  10AB  0021               	movlb	1	; select bank1
  8623  10AC  00D4               	movwf	_SPI0Buffer^(0+128)
  8624                           
  8625                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8626  10AD  28B1               	goto	l6332
  8627  10AE                     l6330:	
  8628                           
  8629                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8630  10AE  319E  2602  3190   	fcall	_RF_Timeout_Counter
  8631  10B1                     l6332:	
  8632  10B1  0020               	movlb	0	; select bank0
  8633  10B2  1E8E               	btfss	14,5	;volatile
  8634  10B3  28B7               	goto	l6336
  8635  10B4  0021               	movlb	1	; select bank1
  8636  10B5  1F21               	btfss	(_RF1^(0+128)+1),6
  8637  10B6  28AE               	goto	l6330
  8638  10B7                     l6336:	
  8639                           
  8640                           ;CC2500_B1.c: 314: };
  8641                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8642  10B7  319B  2358  3190   	fcall	_setRF_TimeoutCleared
  8643                           
  8644                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8645  10BA  319E  26CB  3190   	fcall	_CC2500_WriteByte
  8646                           
  8647                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8648  10BD  319F  2785         	fcall	_CC2500_ReadByte
  8649                           
  8650                           ;CC2500_B1.c: 319: RC0 = 1;
  8651  10BF  0020               	movlb	0	; select bank0
  8652  10C0  140E               	bsf	14,0	;volatile
  8653                           
  8654                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8655  10C1  0021               	movlb	1	; select bank1
  8656  10C2  0854               	movf	_SPI0Buffer^(0+128),w
  8657  10C3  0020               	movlb	0	; select bank0
  8658  10C4  00A3               	movwf	??_CC2500_ReadStatus
  8659  10C5  0823               	movf	??_CC2500_ReadStatus,w
  8660  10C6  0021               	movlb	1	; select bank1
  8661  10C7  00DA               	movwf	_s_data^(0+128)
  8662  10C8  0008               	return
  8663  10C9                     __end_of_CC2500_ReadStatus:	
  8664                           
  8665                           	psect	text38
  8666  1F85                     __ptext38:	
  8667 ;; *************** function _CC2500_ReadByte *****************
  8668 ;; Defined at:
  8669 ;;		line 242 in file "../src/CC2500_B1.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;		None
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;  loop_b          1    2[BANK0 ] unsigned char 
  8674 ;; Return value:  Size  Location     Type
  8675 ;;		None               void
  8676 ;; Registers used:
  8677 ;;		wreg, status,2, status,0
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;Total ram usage:        2 bytes
  8688 ;; Hardware stack levels used:    1
  8689 ;; Hardware stack levels required when called:    5
  8690 ;; This function calls:
  8691 ;;		Nothing
  8692 ;; This function is called by:
  8693 ;;		_CC2500_RxData
  8694 ;;		_CC2500_ReadStatus
  8695 ;;		_CC2500_ReadREG
  8696 ;; This function uses a non-reentrant model
  8697 ;;
  8698                           
  8699                           
  8700                           ;psect for function _CC2500_ReadByte
  8701  1F85                     _CC2500_ReadByte:	
  8702                           
  8703                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8704                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8705                           
  8706                           ;incstack = 0
  8707                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8708  1F85  0020               	movlb	0	; select bank0
  8709  1F86  01A2               	clrf	CC2500_ReadByte@loop_b
  8710  1F87                     L2:	
  8711  1F87  3008               	movlw	8
  8712  1F88  0222               	subwf	CC2500_ReadByte@loop_b,w
  8713  1F89  1803               	btfsc	3,0
  8714  1F8A  0008               	return
  8715                           
  8716                           ;CC2500_B1.c: 245: RC3 = 1;
  8717  1F8B  158E               	bsf	14,3	;volatile
  8718                           
  8719                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8720  1F8C  1003               	clrc
  8721  1F8D  0021               	movlb	1	; select bank1
  8722  1F8E  0DD4               	rlf	_SPI0Buffer^(0+128),f
  8723                           
  8724                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8725  1F8F  0020               	movlb	0	; select bank0
  8726  1F90  1E8E               	btfss	14,5	;volatile
  8727  1F91  2F95               	goto	l6226
  8728                           
  8729                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8730  1F92  0021               	movlb	1	; select bank1
  8731  1F93  1454               	bsf	_SPI0Buffer^(0+128),0
  8732  1F94  2F9B               	goto	l6228
  8733  1F95                     l6226:	
  8734                           
  8735                           ;CC2500_B1.c: 249: else
  8736                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8737  1F95  30FE               	movlw	254
  8738  1F96  0020               	movlb	0	; select bank0
  8739  1F97  00A1               	movwf	??_CC2500_ReadByte
  8740  1F98  0821               	movf	??_CC2500_ReadByte,w
  8741  1F99  0021               	movlb	1	; select bank1
  8742  1F9A  05D4               	andwf	_SPI0Buffer^(0+128),f
  8743  1F9B                     l6228:	
  8744                           
  8745                           ;CC2500_B1.c: 251: RC3 = 0;
  8746  1F9B  0020               	movlb	0	; select bank0
  8747  1F9C  118E               	bcf	14,3	;volatile
  8748  1F9D  3001               	movlw	1
  8749  1F9E  00A1               	movwf	??_CC2500_ReadByte
  8750  1F9F  0821               	movf	??_CC2500_ReadByte,w
  8751  1FA0  07A2               	addwf	CC2500_ReadByte@loop_b,f
  8752  1FA1  2F87               	goto	L2
  8753  1FA2                     __end_of_CC2500_ReadByte:	
  8754                           
  8755                           	psect	text39
  8756  1E17                     __ptext39:	
  8757 ;; *************** function _CC2500_PowerOnInitial *****************
  8758 ;; Defined at:
  8759 ;;		line 126 in file "../src/CC2500_B1.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;		None
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;		None
  8764 ;; Return value:  Size  Location     Type
  8765 ;;		None               void
  8766 ;; Registers used:
  8767 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8768 ;; Tracked objects:
  8769 ;;		On entry : 0/0
  8770 ;;		On exit  : 0/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;Total ram usage:        0 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    8
  8780 ;; This function calls:
  8781 ;;		_CC2500_ClearRXFIFO
  8782 ;;		_CC2500_ClearTXFIFO
  8783 ;;		_CC2500_FrequencyCabr
  8784 ;;		_CC2500_InitPATable
  8785 ;;		_CC2500_InitSetREG
  8786 ;;		_CC2500_PowerRST
  8787 ;;		_CC2500_SIDLEMode
  8788 ;; This function is called by:
  8789 ;;		_main
  8790 ;;		_setRF_Main
  8791 ;; This function uses a non-reentrant model
  8792 ;;
  8793                           
  8794                           
  8795                           ;psect for function _CC2500_PowerOnInitial
  8796  1E17                     _CC2500_PowerOnInitial:	
  8797                           
  8798                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8799                           
  8800                           ;incstack = 0
  8801                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8802  1E17  3194  2468  319E   	fcall	_CC2500_PowerRST
  8803                           
  8804                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8805  1E1A  3191  2117  319E   	fcall	_CC2500_InitSetREG
  8806                           
  8807                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8808  1E1D  319F  27C1  319E   	fcall	_CC2500_InitPATable
  8809                           
  8810                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8811  1E20  319B  2360  319E   	fcall	_CC2500_ClearTXFIFO
  8812                           
  8813                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8814  1E23  319B  235C  319E   	fcall	_CC2500_ClearRXFIFO
  8815                           
  8816                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8817  1E26  319C  2478  319E   	fcall	_CC2500_FrequencyCabr
  8818                           
  8819                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8820  1E29  319B  2364         	fcall	_CC2500_SIDLEMode
  8821  1E2B  0008               	return
  8822  1E2C                     __end_of_CC2500_PowerOnInitial:	
  8823                           
  8824                           	psect	text40
  8825  1B64                     __ptext40:	
  8826 ;; *************** function _CC2500_SIDLEMode *****************
  8827 ;; Defined at:
  8828 ;;		line 216 in file "../src/CC2500_B1.c"
  8829 ;; Parameters:    Size  Location     Type
  8830 ;;		None
  8831 ;; Auto vars:     Size  Location     Type
  8832 ;;		None
  8833 ;; Return value:  Size  Location     Type
  8834 ;;		None               void
  8835 ;; Registers used:
  8836 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8837 ;; Tracked objects:
  8838 ;;		On entry : 0/0
  8839 ;;		On exit  : 0/0
  8840 ;;		Unchanged: 0/0
  8841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;Total ram usage:        0 bytes
  8847 ;; Hardware stack levels used:    1
  8848 ;; Hardware stack levels required when called:    7
  8849 ;; This function calls:
  8850 ;;		_CC2500_WriteCommand
  8851 ;; This function is called by:
  8852 ;;		_CC2500_PowerOnInitial
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           
  8857                           ;psect for function _CC2500_SIDLEMode
  8858  1B64                     _CC2500_SIDLEMode:	
  8859                           
  8860                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8861                           
  8862                           ;incstack = 0
  8863                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8864  1B64  3036               	movlw	54
  8865  1B65  319F  2718         	fcall	_CC2500_WriteCommand
  8866  1B67  0008               	return
  8867  1B68                     __end_of_CC2500_SIDLEMode:	
  8868                           
  8869                           	psect	text41
  8870  1468                     __ptext41:	
  8871 ;; *************** function _CC2500_PowerRST *****************
  8872 ;; Defined at:
  8873 ;;		line 139 in file "../src/CC2500_B1.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;		None
  8878 ;; Return value:  Size  Location     Type
  8879 ;;		None               void
  8880 ;; Registers used:
  8881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : 0/0
  8885 ;;		Unchanged: 0/0
  8886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;Total ram usage:        1 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    6
  8894 ;; This function calls:
  8895 ;;		_CC2500_WriteByte
  8896 ;;		_DelayTime_1us
  8897 ;;		_RF_Timeout_Counter
  8898 ;;		_setRF_TimeoutCleared
  8899 ;; This function is called by:
  8900 ;;		_CC2500_PowerOnInitial
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           
  8905                           ;psect for function _CC2500_PowerRST
  8906  1468                     _CC2500_PowerRST:	
  8907                           
  8908                           ;CC2500_B1.c: 140: RC3 = 0;
  8909                           
  8910                           ;incstack = 0
  8911                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8912  1468  0020               	movlb	0	; select bank0
  8913  1469  118E               	bcf	14,3	;volatile
  8914                           
  8915                           ;CC2500_B1.c: 141: RC4 = 0;
  8916  146A  120E               	bcf	14,4	;volatile
  8917                           
  8918                           ;CC2500_B1.c: 142: RC0 = 1;
  8919  146B  140E               	bsf	14,0	;volatile
  8920                           
  8921                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8922  146C  300A               	movlw	10
  8923  146D  00A1               	movwf	DelayTime_1us@count
  8924  146E  3000               	movlw	0
  8925  146F  00A2               	movwf	DelayTime_1us@count+1
  8926  1470  3190  20C9  3194   	fcall	_DelayTime_1us
  8927                           
  8928                           ;CC2500_B1.c: 144: RC0 = 0;
  8929  1473  0020               	movlb	0	; select bank0
  8930  1474  100E               	bcf	14,0	;volatile
  8931                           
  8932                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8933  1475  300A               	movlw	10
  8934  1476  00A1               	movwf	DelayTime_1us@count
  8935  1477  3000               	movlw	0
  8936  1478  00A2               	movwf	DelayTime_1us@count+1
  8937  1479  3190  20C9  3194   	fcall	_DelayTime_1us
  8938                           
  8939                           ;CC2500_B1.c: 146: RC0 = 1;
  8940  147C  0020               	movlb	0	; select bank0
  8941  147D  140E               	bsf	14,0	;volatile
  8942                           
  8943                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8944  147E  3028               	movlw	40
  8945  147F  00A1               	movwf	DelayTime_1us@count
  8946  1480  3000               	movlw	0
  8947  1481  00A2               	movwf	DelayTime_1us@count+1
  8948  1482  3190  20C9  3194   	fcall	_DelayTime_1us
  8949                           
  8950                           ;CC2500_B1.c: 148: RC0 = 0;
  8951  1485  0020               	movlb	0	; select bank0
  8952  1486  100E               	bcf	14,0	;volatile
  8953                           
  8954                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8955  1487  3030               	movlw	48
  8956  1488  00A7               	movwf	??_CC2500_PowerRST
  8957  1489  0827               	movf	??_CC2500_PowerRST,w
  8958  148A  0021               	movlb	1	; select bank1
  8959  148B  00D4               	movwf	_SPI0Buffer^(0+128)
  8960                           
  8961                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8962  148C  2C90               	goto	l6360
  8963  148D                     l6358:	
  8964                           
  8965                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8966  148D  319E  2602  3194   	fcall	_RF_Timeout_Counter
  8967  1490                     l6360:	
  8968  1490  0020               	movlb	0	; select bank0
  8969  1491  1E8E               	btfss	14,5	;volatile
  8970  1492  2C96               	goto	l6364
  8971  1493  0021               	movlb	1	; select bank1
  8972  1494  1F21               	btfss	(_RF1^(0+128)+1),6
  8973  1495  2C8D               	goto	l6358
  8974  1496                     l6364:	
  8975                           
  8976                           ;CC2500_B1.c: 152: };
  8977                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8978  1496  319B  2358  3194   	fcall	_setRF_TimeoutCleared
  8979                           
  8980                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8981  1499  319E  26CB  3194   	fcall	_CC2500_WriteByte
  8982                           
  8983                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  8984  149C  2CA0               	goto	l6370
  8985  149D                     l6368:	
  8986                           
  8987                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8988  149D  319E  2602  3194   	fcall	_RF_Timeout_Counter
  8989  14A0                     l6370:	
  8990  14A0  0020               	movlb	0	; select bank0
  8991  14A1  1E8E               	btfss	14,5	;volatile
  8992  14A2  2CA6               	goto	l6374
  8993  14A3  0021               	movlb	1	; select bank1
  8994  14A4  1F21               	btfss	(_RF1^(0+128)+1),6
  8995  14A5  2C9D               	goto	l6368
  8996  14A6                     l6374:	
  8997                           
  8998                           ;CC2500_B1.c: 157: };
  8999                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9000  14A6  319B  2358         	fcall	_setRF_TimeoutCleared
  9001                           
  9002                           ;CC2500_B1.c: 159: RC4 = 0;
  9003  14A8  0020               	movlb	0	; select bank0
  9004  14A9  120E               	bcf	14,4	;volatile
  9005                           
  9006                           ;CC2500_B1.c: 160: RC0 = 1;
  9007  14AA  140E               	bsf	14,0	;volatile
  9008  14AB  0008               	return
  9009  14AC                     __end_of_CC2500_PowerRST:	
  9010                           
  9011                           	psect	text42
  9012  1117                     __ptext42:	
  9013 ;; *************** function _CC2500_InitSetREG *****************
  9014 ;; Defined at:
  9015 ;;		line 166 in file "../src/CC2500_B1.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;		None
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  loop_c          1    9[BANK0 ] unsigned char 
  9020 ;;  temp2           1    8[BANK0 ] unsigned char 
  9021 ;;  temp1           1    7[BANK0 ] unsigned char 
  9022 ;; Return value:  Size  Location     Type
  9023 ;;		None               void
  9024 ;; Registers used:
  9025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9034 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;Total ram usage:        4 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    7
  9038 ;; This function calls:
  9039 ;;		_CC2500_WriteREG
  9040 ;; This function is called by:
  9041 ;;		_CC2500_PowerOnInitial
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _CC2500_InitSetREG
  9047  1117                     _CC2500_InitSetREG:	
  9048                           
  9049                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9050                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9051                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9052                           
  9053                           ;incstack = 0
  9054                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9055  1117  0020               	movlb	0	; select bank0
  9056  1118  01A9               	clrf	CC2500_InitSetREG@loop_c
  9057  1119                     L3:	
  9058  1119  302F               	movlw	47
  9059  111A  0229               	subwf	CC2500_InitSetREG@loop_c,w
  9060  111B  1803               	btfsc	3,0
  9061  111C  0008               	return
  9062                           
  9063                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9064  111D  0829               	movf	CC2500_InitSetREG@loop_c,w
  9065  111E  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9066  111F  0084               	movwf	4
  9067  1120  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9068  1121  1803               	skipnc
  9069  1122  3E01               	addlw	1
  9070  1123  0085               	movwf	5
  9071  1124  0800               	movf	0,w	;code access
  9072  1125  00A6               	movwf	??_CC2500_InitSetREG
  9073  1126  0826               	movf	??_CC2500_InitSetREG,w
  9074  1127  00A7               	movwf	CC2500_InitSetREG@temp1
  9075                           
  9076                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9077  1128  0829               	movf	CC2500_InitSetREG@loop_c,w
  9078  1129  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9079  112A  0084               	movwf	4
  9080  112B  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9081  112C  1803               	skipnc
  9082  112D  3E01               	addlw	1
  9083  112E  0085               	movwf	5
  9084  112F  0800               	movf	0,w	;code access
  9085  1130  00A6               	movwf	??_CC2500_InitSetREG
  9086  1131  0826               	movf	??_CC2500_InitSetREG,w
  9087  1132  00A8               	movwf	CC2500_InitSetREG@temp2
  9088                           
  9089                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9090  1133  0828               	movf	CC2500_InitSetREG@temp2,w
  9091  1134  00A6               	movwf	??_CC2500_InitSetREG
  9092  1135  0826               	movf	??_CC2500_InitSetREG,w
  9093  1136  00A3               	movwf	CC2500_WriteREG@value
  9094  1137  0827               	movf	CC2500_InitSetREG@temp1,w
  9095  1138  3190  2081  3191   	fcall	_CC2500_WriteREG
  9096  113B  3001               	movlw	1
  9097  113C  0020               	movlb	0	; select bank0
  9098  113D  00A6               	movwf	??_CC2500_InitSetREG
  9099  113E  0826               	movf	??_CC2500_InitSetREG,w
  9100  113F  07A9               	addwf	CC2500_InitSetREG@loop_c,f
  9101  1140  2919               	goto	L3
  9102  1141                     __end_of_CC2500_InitSetREG:	
  9103                           
  9104                           	psect	text43
  9105  1FC1                     __ptext43:	
  9106 ;; *************** function _CC2500_InitPATable *****************
  9107 ;; Defined at:
  9108 ;;		line 181 in file "../src/CC2500_B1.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;		None
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;  loop_d          1    8[BANK0 ] unsigned char 
  9113 ;;  temp            1    7[BANK0 ] unsigned char 
  9114 ;; Return value:  Size  Location     Type
  9115 ;;		None               void
  9116 ;; Registers used:
  9117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;Total ram usage:        3 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    7
  9130 ;; This function calls:
  9131 ;;		_CC2500_WriteREG
  9132 ;; This function is called by:
  9133 ;;		_CC2500_PowerOnInitial
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           
  9138                           ;psect for function _CC2500_InitPATable
  9139  1FC1                     _CC2500_InitPATable:	
  9140                           
  9141                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9142                           ;CC2500_B1.c: 183: unsigned char temp;
  9143                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9144                           
  9145                           ;incstack = 0
  9146                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9147  1FC1  0020               	movlb	0	; select bank0
  9148  1FC2  01A8               	clrf	CC2500_InitPATable@loop_d
  9149  1FC3                     L4:	
  9150  1FC3  3008               	movlw	8
  9151  1FC4  0228               	subwf	CC2500_InitPATable@loop_d,w
  9152  1FC5  1803               	btfsc	3,0
  9153  1FC6  0008               	return
  9154                           
  9155                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9156  1FC7  0828               	movf	CC2500_InitPATable@loop_d,w
  9157  1FC8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9158  1FC9  0084               	movwf	4
  9159  1FCA  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9160  1FCB  1803               	skipnc
  9161  1FCC  3E01               	addlw	1
  9162  1FCD  0085               	movwf	5
  9163  1FCE  0800               	movf	0,w	;code access
  9164  1FCF  00A6               	movwf	??_CC2500_InitPATable
  9165  1FD0  0826               	movf	??_CC2500_InitPATable,w
  9166  1FD1  00A7               	movwf	CC2500_InitPATable@temp
  9167                           
  9168                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9169  1FD2  0827               	movf	CC2500_InitPATable@temp,w
  9170  1FD3  00A6               	movwf	??_CC2500_InitPATable
  9171  1FD4  0826               	movf	??_CC2500_InitPATable,w
  9172  1FD5  00A3               	movwf	CC2500_WriteREG@value
  9173  1FD6  303E               	movlw	62
  9174  1FD7  3190  2081  319F   	fcall	_CC2500_WriteREG
  9175  1FDA  3001               	movlw	1
  9176  1FDB  0020               	movlb	0	; select bank0
  9177  1FDC  00A6               	movwf	??_CC2500_InitPATable
  9178  1FDD  0826               	movf	??_CC2500_InitPATable,w
  9179  1FDE  07A8               	addwf	CC2500_InitPATable@loop_d,f
  9180  1FDF  2FC3               	goto	L4
  9181  1FE0                     __end_of_CC2500_InitPATable:	
  9182                           
  9183                           	psect	text44
  9184  1081                     __ptext44:	
  9185 ;; *************** function _CC2500_WriteREG *****************
  9186 ;; Defined at:
  9187 ;;		line 258 in file "../src/CC2500_B1.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;  w_addr          1    wreg     unsigned char 
  9190 ;;  value           1    3[BANK0 ] unsigned char 
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;  w_addr          1    5[BANK0 ] unsigned char 
  9193 ;; Return value:  Size  Location     Type
  9194 ;;		None               void
  9195 ;; Registers used:
  9196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : 0/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9202 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;Total ram usage:        3 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; Hardware stack levels required when called:    6
  9209 ;; This function calls:
  9210 ;;		_CC2500_WriteByte
  9211 ;;		_RF_Timeout_Counter
  9212 ;;		_setRF_TimeoutCleared
  9213 ;; This function is called by:
  9214 ;;		_CC2500_InitSetREG
  9215 ;;		_CC2500_InitPATable
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           
  9220                           ;psect for function _CC2500_WriteREG
  9221  1081                     _CC2500_WriteREG:	
  9222                           
  9223                           ;incstack = 0
  9224                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9225                           ;CC2500_WriteREG@w_addr stored from wreg
  9226  1081  0020               	movlb	0	; select bank0
  9227  1082  00A5               	movwf	CC2500_WriteREG@w_addr
  9228                           
  9229                           ;CC2500_B1.c: 259: RC0 = 0;
  9230  1083  100E               	bcf	14,0	;volatile
  9231                           
  9232                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9233  1084  0825               	movf	CC2500_WriteREG@w_addr,w
  9234  1085  00A4               	movwf	??_CC2500_WriteREG
  9235  1086  0824               	movf	??_CC2500_WriteREG,w
  9236  1087  0021               	movlb	1	; select bank1
  9237  1088  00D4               	movwf	_SPI0Buffer^(0+128)
  9238                           
  9239                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9240  1089  288D               	goto	l6250
  9241  108A                     l6248:	
  9242                           
  9243                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9244  108A  319E  2602  3190   	fcall	_RF_Timeout_Counter
  9245  108D                     l6250:	
  9246  108D  0020               	movlb	0	; select bank0
  9247  108E  1E8E               	btfss	14,5	;volatile
  9248  108F  2893               	goto	l6254
  9249  1090  0021               	movlb	1	; select bank1
  9250  1091  1F21               	btfss	(_RF1^(0+128)+1),6
  9251  1092  288A               	goto	l6248
  9252  1093                     l6254:	
  9253                           
  9254                           ;CC2500_B1.c: 263: };
  9255                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9256  1093  319B  2358  3190   	fcall	_setRF_TimeoutCleared
  9257                           
  9258                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9259  1096  319E  26CB  3190   	fcall	_CC2500_WriteByte
  9260                           
  9261                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9262  1099  0020               	movlb	0	; select bank0
  9263  109A  0823               	movf	CC2500_WriteREG@value,w
  9264  109B  00A4               	movwf	??_CC2500_WriteREG
  9265  109C  0824               	movf	??_CC2500_WriteREG,w
  9266  109D  0021               	movlb	1	; select bank1
  9267  109E  00D4               	movwf	_SPI0Buffer^(0+128)
  9268                           
  9269                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9270  109F  319E  26CB         	fcall	_CC2500_WriteByte
  9271                           
  9272                           ;CC2500_B1.c: 269: RC0 = 1;
  9273  10A1  0020               	movlb	0	; select bank0
  9274  10A2  140E               	bsf	14,0	;volatile
  9275  10A3  0008               	return
  9276  10A4                     __end_of_CC2500_WriteREG:	
  9277                           
  9278                           	psect	text45
  9279  1C78                     __ptext45:	
  9280 ;; *************** function _CC2500_FrequencyCabr *****************
  9281 ;; Defined at:
  9282 ;;		line 208 in file "../src/CC2500_B1.c"
  9283 ;; Parameters:    Size  Location     Type
  9284 ;;		None
  9285 ;; Auto vars:     Size  Location     Type
  9286 ;;		None
  9287 ;; Return value:  Size  Location     Type
  9288 ;;		None               void
  9289 ;; Registers used:
  9290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9291 ;; Tracked objects:
  9292 ;;		On entry : 0/0
  9293 ;;		On exit  : 0/0
  9294 ;;		Unchanged: 0/0
  9295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;Total ram usage:        0 bytes
  9301 ;; Hardware stack levels used:    1
  9302 ;; Hardware stack levels required when called:    7
  9303 ;; This function calls:
  9304 ;;		_CC2500_WriteCommand
  9305 ;;		_DelayTime_1us
  9306 ;; This function is called by:
  9307 ;;		_CC2500_PowerOnInitial
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           
  9312                           ;psect for function _CC2500_FrequencyCabr
  9313  1C78                     _CC2500_FrequencyCabr:	
  9314                           
  9315                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9319  1C78  3033               	movlw	51
  9320  1C79  319F  2718  319C   	fcall	_CC2500_WriteCommand
  9321                           
  9322                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9323  1C7C  30E8               	movlw	232
  9324  1C7D  0020               	movlb	0	; select bank0
  9325  1C7E  00A1               	movwf	DelayTime_1us@count
  9326  1C7F  3003               	movlw	3
  9327  1C80  00A2               	movwf	DelayTime_1us@count+1
  9328  1C81  3190  20C9         	fcall	_DelayTime_1us
  9329  1C83  0008               	return
  9330  1C84                     __end_of_CC2500_FrequencyCabr:	
  9331                           
  9332                           	psect	text46
  9333  10C9                     __ptext46:	
  9334 ;; *************** function _DelayTime_1us *****************
  9335 ;; Defined at:
  9336 ;;		line 327 in file "../src/CC2500_B1.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;  count           2    1[BANK0 ] int 
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;  j               2    5[BANK0 ] unsigned int 
  9341 ;;  i               2    3[BANK0 ] unsigned int 
  9342 ;; Return value:  Size  Location     Type
  9343 ;;		None               void
  9344 ;; Registers used:
  9345 ;;		wreg, status,2
  9346 ;; Tracked objects:
  9347 ;;		On entry : 0/0
  9348 ;;		On exit  : 0/0
  9349 ;;		Unchanged: 0/0
  9350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9351 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;Total ram usage:        6 bytes
  9356 ;; Hardware stack levels used:    1
  9357 ;; Hardware stack levels required when called:    5
  9358 ;; This function calls:
  9359 ;;		Nothing
  9360 ;; This function is called by:
  9361 ;;		_CC2500_PowerRST
  9362 ;;		_CC2500_FrequencyCabr
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _DelayTime_1us
  9368  10C9                     _DelayTime_1us:	
  9369                           
  9370                           ;CC2500_B1.c: 328: unsigned int i, j;
  9371                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9372                           
  9373                           ;incstack = 0
  9374                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9375  10C9  3001               	movlw	1
  9376  10CA  0020               	movlb	0	; select bank0
  9377  10CB  00A3               	movwf	DelayTime_1us@i
  9378  10CC  3000               	movlw	0
  9379  10CD  00A4               	movwf	DelayTime_1us@i+1
  9380  10CE                     l347:	
  9381  10CE  0822               	movf	DelayTime_1us@count+1,w
  9382  10CF  0224               	subwf	DelayTime_1us@i+1,w
  9383  10D0  1D03               	skipz
  9384  10D1  28D4               	goto	u5405
  9385  10D2  0821               	movf	DelayTime_1us@count,w
  9386  10D3  0223               	subwf	DelayTime_1us@i,w
  9387  10D4                     u5405:	
  9388  10D4  1803               	btfsc	3,0
  9389  10D5  0008               	return
  9390                           
  9391                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9392  10D6  01A5               	clrf	DelayTime_1us@j
  9393  10D7  01A6               	clrf	DelayTime_1us@j+1
  9394  10D8  3000               	movlw	0
  9395  10D9  0226               	subwf	DelayTime_1us@j+1,w
  9396  10DA  3002               	movlw	2
  9397  10DB  1903               	skipnz
  9398  10DC  0225               	subwf	DelayTime_1us@j,w
  9399  10DD  1803               	btfsc	3,0
  9400  10DE  28EA               	goto	l6242
  9401  10DF                     l6240:	
  9402  10DF  3001               	movlw	1
  9403  10E0  07A5               	addwf	DelayTime_1us@j,f
  9404  10E1  3000               	movlw	0
  9405  10E2  3DA6               	addwfc	DelayTime_1us@j+1,f
  9406  10E3  3000               	movlw	0
  9407  10E4  0226               	subwf	DelayTime_1us@j+1,w
  9408  10E5  3002               	movlw	2
  9409  10E6  1903               	skipnz
  9410  10E7  0225               	subwf	DelayTime_1us@j,w
  9411  10E8  1C03               	skipc
  9412  10E9  28DF               	goto	l6240
  9413  10EA                     l6242:	
  9414  10EA  3001               	movlw	1
  9415  10EB  07A3               	addwf	DelayTime_1us@i,f
  9416  10EC  3000               	movlw	0
  9417  10ED  3DA4               	addwfc	DelayTime_1us@i+1,f
  9418  10EE  28CE               	goto	l347
  9419  10EF                     __end_of_DelayTime_1us:	
  9420                           
  9421                           	psect	text47
  9422  1B60                     __ptext47:	
  9423 ;; *************** function _CC2500_ClearTXFIFO *****************
  9424 ;; Defined at:
  9425 ;;		line 194 in file "../src/CC2500_B1.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;		None
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;		None
  9430 ;; Return value:  Size  Location     Type
  9431 ;;		None               void
  9432 ;; Registers used:
  9433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9434 ;; Tracked objects:
  9435 ;;		On entry : 0/0
  9436 ;;		On exit  : 0/0
  9437 ;;		Unchanged: 0/0
  9438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;Total ram usage:        0 bytes
  9444 ;; Hardware stack levels used:    1
  9445 ;; Hardware stack levels required when called:    7
  9446 ;; This function calls:
  9447 ;;		_CC2500_WriteCommand
  9448 ;; This function is called by:
  9449 ;;		_CC2500_PowerOnInitial
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           
  9454                           ;psect for function _CC2500_ClearTXFIFO
  9455  1B60                     _CC2500_ClearTXFIFO:	
  9456                           
  9457                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9458                           
  9459                           ;incstack = 0
  9460                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9461  1B60  303B               	movlw	59
  9462  1B61  319F  2718         	fcall	_CC2500_WriteCommand
  9463  1B63  0008               	return
  9464  1B64                     __end_of_CC2500_ClearTXFIFO:	
  9465                           
  9466                           	psect	text48
  9467  1B5C                     __ptext48:	
  9468 ;; *************** function _CC2500_ClearRXFIFO *****************
  9469 ;; Defined at:
  9470 ;;		line 201 in file "../src/CC2500_B1.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;		None
  9475 ;; Return value:  Size  Location     Type
  9476 ;;		None               void
  9477 ;; Registers used:
  9478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;Total ram usage:        0 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    7
  9491 ;; This function calls:
  9492 ;;		_CC2500_WriteCommand
  9493 ;; This function is called by:
  9494 ;;		_CC2500_PowerOnInitial
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           
  9499                           ;psect for function _CC2500_ClearRXFIFO
  9500  1B5C                     _CC2500_ClearRXFIFO:	
  9501                           
  9502                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9503                           
  9504                           ;incstack = 0
  9505                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9506  1B5C  303A               	movlw	58
  9507  1B5D  319F  2718         	fcall	_CC2500_WriteCommand
  9508  1B5F  0008               	return
  9509  1B60                     __end_of_CC2500_ClearRXFIFO:	
  9510                           
  9511                           	psect	text49
  9512  1F18                     __ptext49:	
  9513 ;; *************** function _CC2500_WriteCommand *****************
  9514 ;; Defined at:
  9515 ;;		line 292 in file "../src/CC2500_B1.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;  command         1    wreg     unsigned char 
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;  command         1    4[BANK0 ] unsigned char 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;		None               void
  9522 ;; Registers used:
  9523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;Total ram usage:        2 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    6
  9536 ;; This function calls:
  9537 ;;		_CC2500_WriteByte
  9538 ;;		_RF_Timeout_Counter
  9539 ;;		_setRF_TimeoutCleared
  9540 ;; This function is called by:
  9541 ;;		_CC2500_TxData
  9542 ;;		_CC2500_RxData
  9543 ;;		_CC2500_ClearTXFIFO
  9544 ;;		_CC2500_ClearRXFIFO
  9545 ;;		_CC2500_FrequencyCabr
  9546 ;;		_CC2500_SIDLEMode
  9547 ;;		_setRF_Main
  9548 ;;		_RF_RxDisable
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           
  9553                           ;psect for function _CC2500_WriteCommand
  9554  1F18                     _CC2500_WriteCommand:	
  9555                           
  9556                           ;incstack = 0
  9557                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9558                           ;CC2500_WriteCommand@command stored from wreg
  9559  1F18  0020               	movlb	0	; select bank0
  9560  1F19  00A4               	movwf	CC2500_WriteCommand@command
  9561                           
  9562                           ;CC2500_B1.c: 293: RC0 = 0;
  9563  1F1A  100E               	bcf	14,0	;volatile
  9564                           
  9565                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9566  1F1B  0824               	movf	CC2500_WriteCommand@command,w
  9567  1F1C  00A3               	movwf	??_CC2500_WriteCommand
  9568  1F1D  0823               	movf	??_CC2500_WriteCommand,w
  9569  1F1E  0021               	movlb	1	; select bank1
  9570  1F1F  00D4               	movwf	_SPI0Buffer^(0+128)
  9571                           
  9572                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9573  1F20  2F24               	goto	l6204
  9574  1F21                     l6202:	
  9575                           
  9576                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9577  1F21  319E  2602  319F   	fcall	_RF_Timeout_Counter
  9578  1F24                     l6204:	
  9579  1F24  0020               	movlb	0	; select bank0
  9580  1F25  1E8E               	btfss	14,5	;volatile
  9581  1F26  2F2A               	goto	l6208
  9582  1F27  0021               	movlb	1	; select bank1
  9583  1F28  1F21               	btfss	(_RF1^(0+128)+1),6
  9584  1F29  2F21               	goto	l6202
  9585  1F2A                     l6208:	
  9586                           
  9587                           ;CC2500_B1.c: 298: };
  9588                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9589  1F2A  319B  2358  319F   	fcall	_setRF_TimeoutCleared
  9590                           
  9591                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9592  1F2D  319E  26CB         	fcall	_CC2500_WriteByte
  9593                           
  9594                           ;CC2500_B1.c: 302: RC0 = 1;
  9595  1F2F  0020               	movlb	0	; select bank0
  9596  1F30  140E               	bsf	14,0	;volatile
  9597  1F31  0008               	return
  9598  1F32                     __end_of_CC2500_WriteCommand:	
  9599                           
  9600                           	psect	text50
  9601  1B58                     __ptext50:	
  9602 ;; *************** function _setRF_TimeoutCleared *****************
  9603 ;; Defined at:
  9604 ;;		line 149 in file "../src/RF_Control_B1.c"
  9605 ;; Parameters:    Size  Location     Type
  9606 ;;		None
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;		None
  9609 ;; Return value:  Size  Location     Type
  9610 ;;		None               void
  9611 ;; Registers used:
  9612 ;;		status,2
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;Total ram usage:        0 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    5
  9625 ;; This function calls:
  9626 ;;		Nothing
  9627 ;; This function is called by:
  9628 ;;		_CC2500_TxData
  9629 ;;		_CC2500_RxData
  9630 ;;		_CC2500_PowerRST
  9631 ;;		_CC2500_WriteREG
  9632 ;;		_CC2500_WriteCommand
  9633 ;;		_CC2500_ReadStatus
  9634 ;;		_CC2500_ReadREG
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           
  9639                           ;psect for function _setRF_TimeoutCleared
  9640  1B58                     _setRF_TimeoutCleared:	
  9641                           
  9642                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9643                           
  9644                           ;incstack = 0
  9645                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9646  1B58  0021               	movlb	1	; select bank1
  9647  1B59  01AC               	clrf	(_RF1^(0+128)+12)
  9648  1B5A  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9649  1B5B  0008               	return
  9650  1B5C                     __end_of_setRF_TimeoutCleared:	
  9651                           
  9652                           	psect	text51
  9653  1E02                     __ptext51:	
  9654 ;; *************** function _RF_Timeout_Counter *****************
  9655 ;; Defined at:
  9656 ;;		line 141 in file "../src/RF_Control_B1.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;		None
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;		None
  9661 ;; Return value:  Size  Location     Type
  9662 ;;		None               void
  9663 ;; Registers used:
  9664 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;Total ram usage:        0 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    5
  9677 ;; This function calls:
  9678 ;;		Nothing
  9679 ;; This function is called by:
  9680 ;;		_CC2500_TxData
  9681 ;;		_CC2500_RxData
  9682 ;;		_CC2500_PowerRST
  9683 ;;		_CC2500_WriteREG
  9684 ;;		_CC2500_WriteCommand
  9685 ;;		_CC2500_ReadStatus
  9686 ;;		_CC2500_ReadREG
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           
  9691                           ;psect for function _RF_Timeout_Counter
  9692  1E02                     _RF_Timeout_Counter:	
  9693                           
  9694                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9695                           
  9696                           ;incstack = 0
  9697                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9698  1E02  3001               	movlw	1
  9699  1E03  0021               	movlb	1	; select bank1
  9700  1E04  07AC               	addwf	(_RF1^(0+128)+12),f
  9701  1E05  3000               	movlw	0
  9702  1E06  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9703                           
  9704                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9705  1E07  300C               	movlw	12
  9706  1E08  3EA0               	addlw	_RF1& (0+255)
  9707  1E09  0086               	movwf	6
  9708  1E0A  0187               	clrf	7
  9709  1E0B  3F40               	moviw [0]fsr1
  9710  1E0C  3AA8               	xorlw	168
  9711  1E0D  1D03               	skipz
  9712  1E0E  2E11               	goto	u5135
  9713  1E0F  3F41               	moviw [1]fsr1
  9714  1E10  3A61               	xorlw	97
  9715  1E11                     u5135:	
  9716  1E11  1D03               	skipz
  9717  1E12  0008               	return
  9718                           
  9719                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9720  1E13  01AC               	clrf	(_RF1^(0+128)+12)
  9721  1E14  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9722                           
  9723                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9724  1E15  1721               	bsf	(_RF1^(0+128)+1),6
  9725  1E16  0008               	return
  9726  1E17                     __end_of_RF_Timeout_Counter:	
  9727                           
  9728                           	psect	text52
  9729  1ECB                     __ptext52:	
  9730 ;; *************** function _CC2500_WriteByte *****************
  9731 ;; Defined at:
  9732 ;;		line 226 in file "../src/CC2500_B1.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;  loop_a          1    2[BANK0 ] unsigned char 
  9737 ;; Return value:  Size  Location     Type
  9738 ;;		None               void
  9739 ;; Registers used:
  9740 ;;		wreg, status,2, status,0
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;Total ram usage:        2 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    5
  9753 ;; This function calls:
  9754 ;;		Nothing
  9755 ;; This function is called by:
  9756 ;;		_CC2500_TxData
  9757 ;;		_CC2500_RxData
  9758 ;;		_CC2500_PowerRST
  9759 ;;		_CC2500_WriteREG
  9760 ;;		_CC2500_WriteCommand
  9761 ;;		_CC2500_ReadStatus
  9762 ;;		_CC2500_ReadREG
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           
  9767                           ;psect for function _CC2500_WriteByte
  9768  1ECB                     _CC2500_WriteByte:	
  9769                           
  9770                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9771                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9772                           
  9773                           ;incstack = 0
  9774                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9775  1ECB  0020               	movlb	0	; select bank0
  9776  1ECC  01A2               	clrf	CC2500_WriteByte@loop_a
  9777  1ECD                     L5:	
  9778  1ECD  3008               	movlw	8
  9779  1ECE  0222               	subwf	CC2500_WriteByte@loop_a,w
  9780  1ECF  1803               	btfsc	3,0
  9781  1ED0  0008               	return
  9782                           
  9783                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9784  1ED1  0021               	movlb	1	; select bank1
  9785  1ED2  1FD4               	btfss	_SPI0Buffer^(0+128),7
  9786  1ED3  2ED7               	goto	l303
  9787                           
  9788                           ;CC2500_B1.c: 230: RC4 = 1;
  9789  1ED4  0020               	movlb	0	; select bank0
  9790  1ED5  160E               	bsf	14,4	;volatile
  9791  1ED6  2ED9               	goto	l304
  9792  1ED7                     l303:	
  9793                           
  9794                           ;CC2500_B1.c: 231: else
  9795                           ;CC2500_B1.c: 232: RC4 = 0;
  9796  1ED7  0020               	movlb	0	; select bank0
  9797  1ED8  120E               	bcf	14,4	;volatile
  9798  1ED9                     l304:	
  9799                           
  9800                           ;CC2500_B1.c: 233: RC3 = 1;
  9801  1ED9  158E               	bsf	14,3	;volatile
  9802                           
  9803                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9804  1EDA  1003               	clrc
  9805  1EDB  0021               	movlb	1	; select bank1
  9806  1EDC  0DD4               	rlf	_SPI0Buffer^(0+128),f
  9807                           
  9808                           ;CC2500_B1.c: 235: RC3 = 0;
  9809  1EDD  0020               	movlb	0	; select bank0
  9810  1EDE  118E               	bcf	14,3	;volatile
  9811  1EDF  3001               	movlw	1
  9812  1EE0  00A1               	movwf	??_CC2500_WriteByte
  9813  1EE1  0821               	movf	??_CC2500_WriteByte,w
  9814  1EE2  07A2               	addwf	CC2500_WriteByte@loop_a,f
  9815  1EE3  2ECD               	goto	L5
  9816  1EE4                     __end_of_CC2500_WriteByte:	
  9817                           
  9818                           	psect	text53
  9819  1B3B                     __ptext53:	
  9820 ;; *************** function _RF_Initialization *****************
  9821 ;; Defined at:
  9822 ;;		line 9 in file "../src/RF_Control_B1.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;		None
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;		None
  9827 ;; Return value:  Size  Location     Type
  9828 ;;		None               void
  9829 ;; Registers used:
  9830 ;;		wreg, status,2, status,0, pclath, cstack
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;Total ram usage:        0 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    6
  9843 ;; This function calls:
  9844 ;;		_setRF_Initialization
  9845 ;; This function is called by:
  9846 ;;		_main
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           
  9851                           ;psect for function _RF_Initialization
  9852  1B3B                     _RF_Initialization:	
  9853                           
  9854                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9855                           
  9856                           ;incstack = 0
  9857                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9858  1B3B  319C  2401         	fcall	_setRF_Initialization
  9859  1B3D  0008               	return
  9860  1B3E                     __end_of_RF_Initialization:	
  9861                           
  9862                           	psect	text54
  9863  1C01                     __ptext54:	
  9864 ;; *************** function _setRF_Initialization *****************
  9865 ;; Defined at:
  9866 ;;		line 17 in file "../src/RF_Control_B1.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;		None
  9869 ;; Auto vars:     Size  Location     Type
  9870 ;;		None
  9871 ;; Return value:  Size  Location     Type
  9872 ;;		None               void
  9873 ;; Registers used:
  9874 ;;		wreg
  9875 ;; Tracked objects:
  9876 ;;		On entry : 0/0
  9877 ;;		On exit  : 0/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;Total ram usage:        1 bytes
  9885 ;; Hardware stack levels used:    1
  9886 ;; Hardware stack levels required when called:    5
  9887 ;; This function calls:
  9888 ;;		Nothing
  9889 ;; This function is called by:
  9890 ;;		_RF_Initialization
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894                           
  9895                           ;psect for function _setRF_Initialization
  9896  1C01                     _setRF_Initialization:	
  9897                           
  9898                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9899                           
  9900                           ;incstack = 0
  9901                           ; Regs used in _setRF_Initialization: [wreg]
  9902  1C01  3015               	movlw	21
  9903  1C02  0020               	movlb	0	; select bank0
  9904  1C03  00A1               	movwf	??_setRF_Initialization
  9905  1C04  0821               	movf	??_setRF_Initialization,w
  9906  1C05  0021               	movlb	1	; select bank1
  9907  1C06  00D7               	movwf	_Tx_Length^(0+128)
  9908                           
  9909                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9910  1C07  30C8               	movlw	200
  9911  1C08  00A7               	movwf	(_RF1^(0+128)+7)
  9912  1C09  3000               	movlw	0
  9913  1C0A  00A8               	movwf	(_RF1^(0+128)+8)
  9914  1C0B  0008               	return
  9915  1C0C                     __end_of_setRF_Initialization:	
  9916                           
  9917                           	psect	text55
  9918  1D6B                     __ptext55:	
  9919 ;; *************** function _Mcu_Initialization *****************
  9920 ;; Defined at:
  9921 ;;		line 30 in file "../src/MCU_B1.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;		None               void
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0, pclath, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;Total ram usage:        0 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    6
  9942 ;; This function calls:
  9943 ;;		_ADC_Set
  9944 ;;		_Fosc_Set
  9945 ;;		_IOC_Set
  9946 ;;		_IO_Set
  9947 ;;		_TMR1_Set
  9948 ;;		_WDT_Set
  9949 ;; This function is called by:
  9950 ;;		_main
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           
  9955                           ;psect for function _Mcu_Initialization
  9956  1D6B                     _Mcu_Initialization:	
  9957                           
  9958                           ;MCU_B1.c: 32: Fosc_Set();
  9959                           
  9960                           ;incstack = 0
  9961                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9962  1D6B  319B  2354  319D   	fcall	_Fosc_Set
  9963                           
  9964                           ;MCU_B1.c: 34: IO_Set();
  9965  1D6E  319E  26FE  319D   	fcall	_IO_Set
  9966                           
  9967                           ;MCU_B1.c: 36: ;;
  9968                           ;MCU_B1.c: 38: TMR1_Set();
  9969  1D71  319C  246C  319D   	fcall	_TMR1_Set
  9970                           
  9971                           ;MCU_B1.c: 40: ADC_Set();
  9972  1D74  319B  238A  319D   	fcall	_ADC_Set
  9973                           
  9974                           ;MCU_B1.c: 42: ;;
  9975                           ;MCU_B1.c: 44: ;;
  9976                           ;MCU_B1.c: 46: IOC_Set();
  9977  1D77  319B  23EB  319D   	fcall	_IOC_Set
  9978                           
  9979                           ;MCU_B1.c: 48: ;;
  9980                           ;MCU_B1.c: 50: ;;
  9981                           ;MCU_B1.c: 52: WDT_Set();
  9982  1D7A  319B  23F6         	fcall	_WDT_Set
  9983  1D7C  0008               	return
  9984  1D7D                     __end_of_Mcu_Initialization:	
  9985                           
  9986                           	psect	text56
  9987  1BF6                     __ptext56:	
  9988 ;; *************** function _WDT_Set *****************
  9989 ;; Defined at:
  9990 ;;		line 1100 in file "../src/MCU_B1.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;		None
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;		None
  9995 ;; Return value:  Size  Location     Type
  9996 ;;		None               void
  9997 ;; Registers used:
  9998 ;;		wreg
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;Total ram usage:        1 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    5
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_Mcu_Initialization
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           
 10019                           ;psect for function _WDT_Set
 10020  1BF6                     _WDT_Set:	
 10021                           
 10022                           ;MCU_B1.c: 1107: WDTCON = 0b00010111;;
 10023                           
 10024                           ;incstack = 0
 10025                           ; Regs used in _WDT_Set: [wreg]
 10026  1BF6  3017               	movlw	23
 10027  1BF7  0021               	movlb	1	; select bank1
 10028  1BF8  0097               	movwf	23	;volatile
 10029                           
 10030                           ;MCU_B1.c: 1109: WDT.Enable = 1;
 10031  1BF9  1449               	bsf	_WDT^(0+128),0
 10032                           
 10033                           ;MCU_B1.c: 1110: WDT.Timer = 10;
 10034  1BFA  300A               	movlw	10
 10035  1BFB  0020               	movlb	0	; select bank0
 10036  1BFC  00A1               	movwf	??_WDT_Set
 10037  1BFD  0821               	movf	??_WDT_Set,w
 10038  1BFE  0021               	movlb	1	; select bank1
 10039  1BFF  00CA               	movwf	(_WDT^(0+128)+1)
 10040  1C00  0008               	return
 10041  1C01                     __end_of_WDT_Set:	
 10042                           
 10043                           	psect	text57
 10044  1C6C                     __ptext57:	
 10045 ;; *************** function _TMR1_Set *****************
 10046 ;; Defined at:
 10047 ;;		line 226 in file "../src/MCU_B1.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;		None
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;		None
 10052 ;; Return value:  Size  Location     Type
 10053 ;;		None               void
 10054 ;; Registers used:
 10055 ;;		wreg
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;Total ram usage:        0 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    5
 10068 ;; This function calls:
 10069 ;;		Nothing
 10070 ;; This function is called by:
 10071 ;;		_Mcu_Initialization
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function _TMR1_Set
 10077  1C6C                     _TMR1_Set:	
 10078                           
 10079                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10080                           
 10081                           ;incstack = 0
 10082                           ; Regs used in _TMR1_Set: [wreg]
 10083  1C6C  3041               	movlw	65
 10084  1C6D  0020               	movlb	0	; select bank0
 10085  1C6E  0098               	movwf	24	;volatile
 10086                           
 10087                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10088  1C6F  30FA               	movlw	250
 10089  1C70  0097               	movwf	23	;volatile
 10090                           
 10091                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10092  1C71  3038               	movlw	56
 10093  1C72  0096               	movwf	22	;volatile
 10094                           
 10095                           ;MCU_B1.c: 230: TMR1IE = 1;
 10096  1C73  0021               	movlb	1	; select bank1
 10097  1C74  1411               	bsf	17,0	;volatile
 10098                           
 10099                           ;MCU_B1.c: 231: PEIE = 1;
 10100  1C75  170B               	bsf	11,6	;volatile
 10101                           
 10102                           ;MCU_B1.c: 232: GIE = 1;
 10103  1C76  178B               	bsf	11,7	;volatile
 10104  1C77  0008               	return
 10105  1C78                     __end_of_TMR1_Set:	
 10106                           
 10107                           	psect	text58
 10108  1EFE                     __ptext58:	
 10109 ;; *************** function _IO_Set *****************
 10110 ;; Defined at:
 10111 ;;		line 60 in file "../src/MCU_B1.c"
 10112 ;; Parameters:    Size  Location     Type
 10113 ;;		None
 10114 ;; Auto vars:     Size  Location     Type
 10115 ;;		None
 10116 ;; Return value:  Size  Location     Type
 10117 ;;		None               void
 10118 ;; Registers used:
 10119 ;;		wreg, status,2
 10120 ;; Tracked objects:
 10121 ;;		On entry : 0/0
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;Total ram usage:        0 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; Hardware stack levels required when called:    5
 10132 ;; This function calls:
 10133 ;;		Nothing
 10134 ;; This function is called by:
 10135 ;;		_Mcu_Initialization
 10136 ;; This function uses a non-reentrant model
 10137 ;;
 10138                           
 10139                           
 10140                           ;psect for function _IO_Set
 10141  1EFE                     _IO_Set:	
 10142                           
 10143                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10144                           
 10145                           ;incstack = 0
 10146                           ; Regs used in _IO_Set: [wreg+status,2]
 10147  1EFE  30F7               	movlw	247
 10148  1EFF  0021               	movlb	1	; select bank1
 10149  1F00  008C               	movwf	12	;volatile
 10150                           
 10151                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10152  1F01  3004               	movlw	4
 10153  1F02  008D               	movwf	13	;volatile
 10154                           
 10155                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10156  1F03  3026               	movlw	38
 10157  1F04  008E               	movwf	14	;volatile
 10158                           
 10159                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10160  1F05  0022               	movlb	2	; select bank2
 10161  1F06  018C               	clrf	12	;volatile
 10162                           
 10163                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10164  1F07  018D               	clrf	13	;volatile
 10165                           
 10166                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10167  1F08  018E               	clrf	14	;volatile
 10168                           
 10169                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10170  1F09  300E               	movlw	14
 10171  1F0A  0023               	movlb	3	; select bank3
 10172  1F0B  008C               	movwf	12	;volatile
 10173                           
 10174                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10175  1F0C  018D               	clrf	13	;volatile
 10176                           
 10177                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10178  1F0D  018E               	clrf	14	;volatile
 10179                           
 10180                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10181  1F0E  30F7               	movlw	247
 10182  1F0F  0020               	movlb	0	; select bank0
 10183  1F10  008C               	movwf	12	;volatile
 10184                           
 10185                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10186  1F11  3004               	movlw	4
 10187  1F12  008D               	movwf	13	;volatile
 10188                           
 10189                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10190  1F13  3026               	movlw	38
 10191  1F14  008E               	movwf	14	;volatile
 10192                           
 10193                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10194  1F15  0024               	movlb	4	; select bank4
 10195  1F16  018D               	clrf	13	;volatile
 10196  1F17  0008               	return
 10197  1F18                     __end_of_IO_Set:	
 10198                           
 10199                           	psect	text59
 10200  1BEB                     __ptext59:	
 10201 ;; *************** function _IOC_Set *****************
 10202 ;; Defined at:
 10203 ;;		line 379 in file "../src/MCU_B1.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;		None
 10208 ;; Return value:  Size  Location     Type
 10209 ;;		None               void
 10210 ;; Registers used:
 10211 ;;		wreg, status,2
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;Total ram usage:        0 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    5
 10224 ;; This function calls:
 10225 ;;		Nothing
 10226 ;; This function is called by:
 10227 ;;		_Mcu_Initialization
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           
 10232                           ;psect for function _IOC_Set
 10233  1BEB                     _IOC_Set:	
 10234                           
 10235                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _IOC_Set: [wreg+status,2]
 10239  1BEB  3004               	movlw	4
 10240  1BEC  0027               	movlb	7	; select bank7
 10241  1BED  0094               	movwf	20	;volatile
 10242                           
 10243                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10244  1BEE  3004               	movlw	4
 10245  1BEF  0095               	movwf	21	;volatile
 10246                           
 10247                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10248  1BF0  0196               	clrf	22	;volatile
 10249                           
 10250                           ;MCU_B1.c: 386: IOCIE = 1;
 10251  1BF1  158B               	bsf	11,3	;volatile
 10252                           
 10253                           ;MCU_B1.c: 387: IOCIF = 0;
 10254  1BF2  100B               	bcf	11,0	;volatile
 10255                           
 10256                           ;MCU_B1.c: 388: PEIE = 1;
 10257  1BF3  170B               	bsf	11,6	;volatile
 10258                           
 10259                           ;MCU_B1.c: 389: GIE = 1;
 10260  1BF4  178B               	bsf	11,7	;volatile
 10261  1BF5  0008               	return
 10262  1BF6                     __end_of_IOC_Set:	
 10263                           
 10264                           	psect	text60
 10265  1B54                     __ptext60:	
 10266 ;; *************** function _Fosc_Set *****************
 10267 ;; Defined at:
 10268 ;;		line 56 in file "../src/MCU_B1.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;		None
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;		None
 10273 ;; Return value:  Size  Location     Type
 10274 ;;		None               void
 10275 ;; Registers used:
 10276 ;;		wreg
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;Total ram usage:        0 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    5
 10289 ;; This function calls:
 10290 ;;		Nothing
 10291 ;; This function is called by:
 10292 ;;		_Mcu_Initialization
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           
 10297                           ;psect for function _Fosc_Set
 10298  1B54                     _Fosc_Set:	
 10299                           
 10300                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10301                           
 10302                           ;incstack = 0
 10303                           ; Regs used in _Fosc_Set: [wreg]
 10304  1B54  3078               	movlw	120
 10305  1B55  0021               	movlb	1	; select bank1
 10306  1B56  0099               	movwf	25	;volatile
 10307  1B57  0008               	return
 10308  1B58                     __end_of_Fosc_Set:	
 10309                           
 10310                           	psect	text61
 10311  1B8A                     __ptext61:	
 10312 ;; *************** function _ADC_Set *****************
 10313 ;; Defined at:
 10314 ;;		line 425 in file "../src/MCU_B1.c"
 10315 ;; Parameters:    Size  Location     Type
 10316 ;;		None
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;		None
 10319 ;; Return value:  Size  Location     Type
 10320 ;;		None               void
 10321 ;; Registers used:
 10322 ;;		wreg
 10323 ;; Tracked objects:
 10324 ;;		On entry : 0/0
 10325 ;;		On exit  : 0/0
 10326 ;;		Unchanged: 0/0
 10327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10332 ;;Total ram usage:        0 bytes
 10333 ;; Hardware stack levels used:    1
 10334 ;; Hardware stack levels required when called:    5
 10335 ;; This function calls:
 10336 ;;		Nothing
 10337 ;; This function is called by:
 10338 ;;		_Mcu_Initialization
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           
 10343                           ;psect for function _ADC_Set
 10344  1B8A                     _ADC_Set:	
 10345                           
 10346                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10347                           
 10348                           ;incstack = 0
 10349                           ; Regs used in _ADC_Set: [wreg]
 10350  1B8A  30F3               	movlw	243
 10351  1B8B  0021               	movlb	1	; select bank1
 10352  1B8C  009E               	movwf	30	;volatile
 10353                           
 10354                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10355  1B8D  30C1               	movlw	193
 10356  1B8E  0022               	movlb	2	; select bank2
 10357  1B8F  0097               	movwf	23	;volatile
 10358  1B90  0008               	return
 10359  1B91                     __end_of_ADC_Set:	
 10360                           
 10361                           	psect	text62
 10362  004A                     __ptext62:	
 10363 ;; *************** function _Load_Main *****************
 10364 ;; Defined at:
 10365 ;;		line 39 in file "../src/OverLoad_B1.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;		None
 10368 ;; Auto vars:     Size  Location     Type
 10369 ;;  i               2   17[BANK0 ] int 
 10370 ;;  LightsCount     1   16[BANK0 ] unsigned char 
 10371 ;;  Load_RunStat    1   15[BANK0 ] unsigned char 
 10372 ;;  ErrorCountVa    1   14[BANK0 ] unsigned char 
 10373 ;;  error           1   11[BANK0 ] unsigned char 
 10374 ;; Return value:  Size  Location     Type
 10375 ;;		None               void
 10376 ;; Registers used:
 10377 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;Total ram usage:       10 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; Hardware stack levels required when called:    6
 10390 ;; This function calls:
 10391 ;;		___lwdiv
 10392 ;;		___wmul
 10393 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10394 ;;		_getDimmer_LoadGO
 10395 ;;		_getDimmer_Load_Status
 10396 ;;		_getMain_All_Error_Status
 10397 ;;		_getMain_All_LightsStatus
 10398 ;;		_getMain_Lights_Count
 10399 ;;		_setLoad_AH_AL_Restore
 10400 ;; This function is called by:
 10401 ;;		_main
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           
 10406                           ;psect for function _Load_Main
 10407  004A                     _Load_Main:	
 10408                           
 10409                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10410                           
 10411                           ;incstack = 0
 10412                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10413  004A  3000               	movlw	0
 10414  004B  3191  2170  3180   	fcall	_getMain_All_Error_Status
 10415  004E  0020               	movlb	0	; select bank0
 10416  004F  00A9               	movwf	??_Load_Main
 10417  0050  0829               	movf	??_Load_Main,w
 10418  0051  00AB               	movwf	Load_Main@error
 10419                           
 10420                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10421  0052  01AF               	clrf	Load_Main@Load_RunStatus
 10422  0053  01AE               	clrf	Load_Main@ErrorCountValue
 10423  0054  01B0               	clrf	Load_Main@LightsCount
 10424                           
 10425                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10426  0055  0022               	movlb	2	; select bank2
 10427  0056  1C34               	btfss	_Load^(0+256),0
 10428  0057  29F6               	goto	l1619
 10429                           
 10430                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10431  0058  319B  23CB  3180   	fcall	_getMain_All_LightsStatus
 10432  005B  3800               	iorlw	0
 10433  005C  1D03               	skipz
 10434  005D  2860               	goto	l9364
 10435                           
 10436                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10437  005E  0022               	movlb	2	; select bank2
 10438  005F  2881               	goto	l9382
 10439  0060                     l9364:	
 10440                           ;OverLoad_B1.c: 46: } else {
 10441                           
 10442                           
 10443                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10444  0060  0020               	movlb	0	; select bank0
 10445  0061  08AB               	movf	Load_Main@error,f
 10446  0062  1D03               	skipz
 10447  0063  287E               	goto	l1622
 10448  0064  319D  25B5  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10449  0067  3800               	iorlw	0
 10450  0068  1D03               	skipz
 10451  0069  287E               	goto	l1622
 10452                           
 10453                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10454  006A  0022               	movlb	2	; select bank2
 10455  006B  14B4               	bsf	_Load^(0+256),1
 10456                           
 10457                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10458  006C  319B  23A0  3180   	fcall	_getDimmer_LoadGO
 10459  006F  3A01               	xorlw	1
 10460  0070  1D03               	skipz
 10461  0071  2879               	goto	l1623
 10462                           
 10463                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10464  0072  0022               	movlb	2	; select bank2
 10465  0073  1DB4               	btfss	_Load^(0+256),3
 10466  0074  1BB4               	btfsc	_Load^(0+256),7
 10467  0075  2882               	goto	l1621
 10468                           
 10469                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10470  0076  15B4               	bsf	_Load^(0+256),3
 10471                           
 10472                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10473  0077  01D9               	clrf	(_Load^(0+256)+37)
 10474                           
 10475                           ;OverLoad_B1.c: 56: }
 10476                           ;OverLoad_B1.c: 57: } else {
 10477  0078  2882               	goto	l1621
 10478  0079                     l1623:	
 10479                           
 10480                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10481  0079  0022               	movlb	2	; select bank2
 10482  007A  1FB4               	btfss	_Load^(0+256),7
 10483  007B  2882               	goto	l1621
 10484                           
 10485                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10486  007C  13B4               	bcf	_Load^(0+256),7
 10487                           
 10488                           ;OverLoad_B1.c: 60: }
 10489                           ;OverLoad_B1.c: 61: }
 10490                           ;OverLoad_B1.c: 62: } else {
 10491  007D  2882               	goto	l1621
 10492  007E                     l1622:	
 10493                           
 10494                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10495  007E  0022               	movlb	2	; select bank2
 10496  007F  1CB4               	btfss	_Load^(0+256),1
 10497  0080  2882               	goto	l1621
 10498  0081                     l9382:	
 10499                           
 10500                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10501  0081  10B4               	bcf	_Load^(0+256),1
 10502  0082                     l1621:	
 10503                           
 10504                           ;OverLoad_B1.c: 65: }
 10505                           ;OverLoad_B1.c: 66: }
 10506                           ;OverLoad_B1.c: 88: }
 10507                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10508  0082  1CB4               	btfss	_Load^(0+256),1
 10509  0083  29D2               	goto	l1629
 10510                           
 10511                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10512  0084  1534               	bsf	_Load^(0+256),2
 10513                           
 10514                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10515  0085  1E34               	btfss	_Load^(0+256),4
 10516  0086  29D0               	goto	l1630
 10517                           
 10518                           ;OverLoad_B1.c: 95: Load.Time++;
 10519  0087  3001               	movlw	1
 10520  0088  07B5               	addwf	(_Load^(0+256)+1),f
 10521  0089  3000               	movlw	0
 10522  008A  3DB6               	addwfc	((_Load+1)^(0+256)+1),f
 10523                           
 10524                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10525  008B  3000               	movlw	0
 10526  008C  0236               	subwf	((_Load+1)^(0+256)+1),w
 10527  008D  3002               	movlw	2
 10528  008E  1903               	skipnz
 10529  008F  0235               	subwf	(_Load^(0+256)+1),w
 10530  0090  1C03               	skipc
 10531  0091  0008               	return
 10532                           
 10533                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10534  0092  01B5               	clrf	(_Load^(0+256)+1)
 10535  0093  01B6               	clrf	((_Load+1)^(0+256)+1)
 10536                           
 10537                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10538  0094  1234               	bcf	_Load^(0+256),4
 10539                           
 10540                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10541  0095  3001               	movlw	1
 10542  0096  0020               	movlb	0	; select bank0
 10543  0097  00B1               	movwf	Load_Main@i
 10544  0098  3000               	movlw	0
 10545  0099  00B2               	movwf	Load_Main@i+1
 10546  009A  0832               	movf	Load_Main@i+1,w
 10547  009B  3A80               	xorlw	128
 10548  009C  00A9               	movwf	??_Load_Main
 10549  009D  3080               	movlw	128
 10550  009E  0229               	subwf	??_Load_Main,w
 10551  009F  1D03               	skipz
 10552  00A0  28A3               	goto	u10785
 10553  00A1  3004               	movlw	4
 10554  00A2  0231               	subwf	Load_Main@i,w
 10555  00A3                     u10785:	
 10556  00A3  1803               	btfsc	3,0
 10557  00A4  28D7               	goto	l9404
 10558  00A5                     l9398:	
 10559                           
 10560                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10561  00A5  0020               	movlb	0	; select bank0
 10562  00A6  3531               	lslf	Load_Main@i,w
 10563  00A7  3E3F               	addlw	(_Load+11)& (0+255)
 10564  00A8  0086               	movwf	6
 10565  00A9  3001               	movlw	1	; select bank2/3
 10566  00AA  0087               	movwf	7
 10567  00AB  3F40               	moviw [0]fsr1
 10568  00AC  00A9               	movwf	??_Load_Main
 10569  00AD  3F41               	moviw [1]fsr1
 10570  00AE  00AA               	movwf	??_Load_Main+1
 10571  00AF  0829               	movf	??_Load_Main,w
 10572  00B0  0022               	movlb	2	; select bank2
 10573  00B1  07B9               	addwf	(_Load^(0+256)+5),f
 10574  00B2  0020               	movlb	0	; select bank0
 10575  00B3  082A               	movf	??_Load_Main+1,w
 10576  00B4  0022               	movlb	2	; select bank2
 10577  00B5  3DBA               	addwfc	((_Load+1)^(0+256)+5),f
 10578                           
 10579                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10580  00B6  0020               	movlb	0	; select bank0
 10581  00B7  3531               	lslf	Load_Main@i,w
 10582  00B8  3E49               	addlw	(_Load+21)& (0+255)
 10583  00B9  0086               	movwf	6
 10584  00BA  3001               	movlw	1	; select bank2/3
 10585  00BB  0087               	movwf	7
 10586  00BC  3F40               	moviw [0]fsr1
 10587  00BD  00A9               	movwf	??_Load_Main
 10588  00BE  3F41               	moviw [1]fsr1
 10589  00BF  00AA               	movwf	??_Load_Main+1
 10590  00C0  0829               	movf	??_Load_Main,w
 10591  00C1  0022               	movlb	2	; select bank2
 10592  00C2  07BB               	addwf	(_Load^(0+256)+7),f
 10593  00C3  0020               	movlb	0	; select bank0
 10594  00C4  082A               	movf	??_Load_Main+1,w
 10595  00C5  0022               	movlb	2	; select bank2
 10596  00C6  3DBC               	addwfc	((_Load+1)^(0+256)+7),f
 10597  00C7  3001               	movlw	1
 10598  00C8  0020               	movlb	0	; select bank0
 10599  00C9  07B1               	addwf	Load_Main@i,f
 10600  00CA  3000               	movlw	0
 10601  00CB  3DB2               	addwfc	Load_Main@i+1,f
 10602  00CC  0832               	movf	Load_Main@i+1,w
 10603  00CD  3A80               	xorlw	128
 10604  00CE  00A9               	movwf	??_Load_Main
 10605  00CF  3080               	movlw	128
 10606  00D0  0229               	subwf	??_Load_Main,w
 10607  00D1  1D03               	skipz
 10608  00D2  28D5               	goto	u10795
 10609  00D3  3004               	movlw	4
 10610  00D4  0231               	subwf	Load_Main@i,w
 10611  00D5                     u10795:	
 10612  00D5  1C03               	skipc
 10613  00D6  28A5               	goto	l9398
 10614  00D7                     l9404:	
 10615                           
 10616                           ;OverLoad_B1.c: 103: }
 10617                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10618  00D7  3003               	movlw	3
 10619  00D8  0020               	movlb	0	; select bank0
 10620  00D9  00A1               	movwf	___lwdiv@divisor
 10621  00DA  3000               	movlw	0
 10622  00DB  00A2               	movwf	___lwdiv@divisor+1
 10623  00DC  0022               	movlb	2	; select bank2
 10624  00DD  083A               	movf	((_Load+1)^(0+256)+5),w
 10625  00DE  0020               	movlb	0	; select bank0
 10626  00DF  01A4               	clrf	___lwdiv@dividend+1
 10627  00E0  07A4               	addwf	___lwdiv@dividend+1,f
 10628  00E1  0022               	movlb	2	; select bank2
 10629  00E2  0839               	movf	(_Load^(0+256)+5),w
 10630  00E3  0020               	movlb	0	; select bank0
 10631  00E4  01A3               	clrf	___lwdiv@dividend
 10632  00E5  07A3               	addwf	___lwdiv@dividend,f
 10633  00E6  3192  2242  3180   	fcall	___lwdiv
 10634  00E9  0020               	movlb	0	; select bank0
 10635  00EA  0822               	movf	?___lwdiv+1,w
 10636  00EB  0022               	movlb	2	; select bank2
 10637  00EC  01BA               	clrf	((_Load+1)^(0+256)+5)
 10638  00ED  07BA               	addwf	((_Load+1)^(0+256)+5),f
 10639  00EE  0020               	movlb	0	; select bank0
 10640  00EF  0821               	movf	?___lwdiv,w
 10641  00F0  0022               	movlb	2	; select bank2
 10642  00F1  01B9               	clrf	(_Load^(0+256)+5)
 10643  00F2  07B9               	addwf	(_Load^(0+256)+5),f
 10644                           
 10645                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10646  00F3  3003               	movlw	3
 10647  00F4  0020               	movlb	0	; select bank0
 10648  00F5  00A1               	movwf	___lwdiv@divisor
 10649  00F6  3000               	movlw	0
 10650  00F7  00A2               	movwf	___lwdiv@divisor+1
 10651  00F8  0022               	movlb	2	; select bank2
 10652  00F9  083C               	movf	((_Load+1)^(0+256)+7),w
 10653  00FA  0020               	movlb	0	; select bank0
 10654  00FB  01A4               	clrf	___lwdiv@dividend+1
 10655  00FC  07A4               	addwf	___lwdiv@dividend+1,f
 10656  00FD  0022               	movlb	2	; select bank2
 10657  00FE  083B               	movf	(_Load^(0+256)+7),w
 10658  00FF  0020               	movlb	0	; select bank0
 10659  0100  01A3               	clrf	___lwdiv@dividend
 10660  0101  07A3               	addwf	___lwdiv@dividend,f
 10661  0102  3192  2242  3180   	fcall	___lwdiv
 10662  0105  0020               	movlb	0	; select bank0
 10663  0106  0822               	movf	?___lwdiv+1,w
 10664  0107  0022               	movlb	2	; select bank2
 10665  0108  01BC               	clrf	((_Load+1)^(0+256)+7)
 10666  0109  07BC               	addwf	((_Load+1)^(0+256)+7),f
 10667  010A  0020               	movlb	0	; select bank0
 10668  010B  0821               	movf	?___lwdiv,w
 10669  010C  0022               	movlb	2	; select bank2
 10670  010D  01BB               	clrf	(_Load^(0+256)+7)
 10671  010E  07BB               	addwf	(_Load^(0+256)+7),f
 10672                           
 10673                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10674  010F  319F  2769  3180   	fcall	_setLoad_AH_AL_Restore
 10675                           
 10676                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10677  0112  0022               	movlb	2	; select bank2
 10678  0113  083C               	movf	((_Load+1)^(0+256)+7),w
 10679  0114  023A               	subwf	((_Load+1)^(0+256)+5),w
 10680  0115  1D03               	skipz
 10681  0116  2919               	goto	u10805
 10682  0117  083B               	movf	(_Load^(0+256)+7),w
 10683  0118  0239               	subwf	(_Load^(0+256)+5),w
 10684  0119                     u10805:	
 10685  0119  1C03               	skipc
 10686  011A  0008               	return
 10687                           
 10688                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10689  011B  3005               	movlw	5
 10690  011C  3E34               	addlw	_Load& (0+255)
 10691  011D  0086               	movwf	6
 10692  011E  3001               	movlw	1	; select bank2/3
 10693  011F  0087               	movwf	7
 10694  0120  093B               	comf	(_Load^(0+256)+7),w
 10695  0121  0020               	movlb	0	; select bank0
 10696  0122  00A9               	movwf	??_Load_Main
 10697  0123  0022               	movlb	2	; select bank2
 10698  0124  093C               	comf	((_Load+1)^(0+256)+7),w
 10699  0125  0020               	movlb	0	; select bank0
 10700  0126  00AA               	movwf	??_Load_Main+1
 10701  0127  0AA9               	incf	??_Load_Main,f
 10702  0128  1903               	skipnz
 10703  0129  0AAA               	incf	??_Load_Main+1,f
 10704  012A  3F40               	moviw [0]fsr1
 10705  012B  0729               	addwf	??_Load_Main,w
 10706  012C  0022               	movlb	2	; select bank2
 10707  012D  00D3               	movwf	(_Load^(0+256)+31)
 10708  012E  3F41               	moviw [1]fsr1
 10709  012F  0020               	movlb	0	; select bank0
 10710  0130  3D2A               	addwfc	??_Load_Main+1,w
 10711  0131  0022               	movlb	2	; select bank2
 10712  0132  00D4               	movwf	(_Load^(0+256)+32)
 10713                           
 10714                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10715  0133  01B9               	clrf	(_Load^(0+256)+5)
 10716  0134  01BA               	clrf	((_Load+1)^(0+256)+5)
 10717                           
 10718                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10719  0135  01BB               	clrf	(_Load^(0+256)+7)
 10720  0136  01BC               	clrf	((_Load+1)^(0+256)+7)
 10721                           
 10722                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10723  0137  1DB4               	btfss	_Load^(0+256),3
 10724  0138  2992               	goto	l9444
 10725                           
 10726                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10727  0139  3002               	movlw	2
 10728  013A  0259               	subwf	(_Load^(0+256)+37),w
 10729  013B  1803               	skipnc
 10730  013C  2992               	goto	l9444
 10731                           
 10732                           ;OverLoad_B1.c: 115: Load.Count++;
 10733  013D  3001               	movlw	1
 10734  013E  0020               	movlb	0	; select bank0
 10735  013F  00A9               	movwf	??_Load_Main
 10736  0140  0829               	movf	??_Load_Main,w
 10737  0141  0022               	movlb	2	; select bank2
 10738  0142  07D9               	addwf	(_Load^(0+256)+37),f
 10739                           
 10740                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10741  0143  319B  23A8  3180   	fcall	_getDimmer_Load_Status
 10742  0146  0020               	movlb	0	; select bank0
 10743  0147  00A9               	movwf	??_Load_Main
 10744  0148  0829               	movf	??_Load_Main,w
 10745  0149  00AF               	movwf	Load_Main@Load_RunStatus
 10746                           
 10747                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10748  014A  319B  23E0  3180   	fcall	_getMain_Lights_Count
 10749  014D  0020               	movlb	0	; select bank0
 10750  014E  00A9               	movwf	??_Load_Main
 10751  014F  0829               	movf	??_Load_Main,w
 10752  0150  00B0               	movwf	Load_Main@LightsCount
 10753                           
 10754                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10755  0151  0022               	movlb	2	; select bank2
 10756  0152  0859               	movf	(_Load^(0+256)+37),w
 10757  0153  3A01               	xorlw	1
 10758  0154  1D03               	skipz
 10759  0155  295A               	goto	l9430
 10760                           
 10761                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10762  0156  3074               	movlw	116
 10763  0157  00D7               	movwf	(_Load^(0+256)+35)
 10764  0158  3004               	movlw	4
 10765  0159  2967               	goto	L6
 10766  015A                     l9430:	
 10767                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10768                           
 10769  015A  0859               	movf	(_Load^(0+256)+37),w
 10770  015B  3A02               	xorlw	2
 10771  015C  1D03               	skipz
 10772  015D  2992               	goto	l9444
 10773                           
 10774                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10775  015E  0020               	movlb	0	; select bank0
 10776  015F  0830               	movf	Load_Main@LightsCount,w
 10777  0160  3A01               	xorlw	1
 10778  0161  1D03               	skipz
 10779  0162  2969               	goto	l9436
 10780                           
 10781                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.8*57);
 10782  0163  3066               	movlw	102
 10783  0164  0022               	movlb	2	; select bank2
 10784  0165  00D7               	movwf	(_Load^(0+256)+35)
 10785  0166  3000               	movlw	0
 10786  0167                     L6:	
 10787  0167  00D8               	movwf	(_Load^(0+256)+36)
 10788                           
 10789                           ;OverLoad_B1.c: 130: } else {
 10790  0168  2992               	goto	l9444
 10791  0169                     l9436:	
 10792                           
 10793                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10794  0169  0020               	movlb	0	; select bank0
 10795  016A  08AF               	movf	Load_Main@Load_RunStatus,f
 10796  016B  1D03               	skipz
 10797  016C  2986               	goto	l9440
 10798                           
 10799                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.8*57) * LightsCount;
 10800  016D  0830               	movf	Load_Main@LightsCount,w
 10801  016E  00A9               	movwf	??_Load_Main
 10802  016F  01AA               	clrf	??_Load_Main+1
 10803  0170  0829               	movf	??_Load_Main,w
 10804  0171  00A1               	movwf	___wmul@multiplier
 10805  0172  082A               	movf	??_Load_Main+1,w
 10806  0173  00A2               	movwf	___wmul@multiplier+1
 10807  0174  3066               	movlw	102
 10808  0175  00A3               	movwf	___wmul@multiplicand
 10809  0176  3000               	movlw	0
 10810  0177  00A4               	movwf	___wmul@multiplicand+1
 10811  0178  3190  2000  3180   	fcall	___wmul
 10812  017B  0020               	movlb	0	; select bank0
 10813  017C  0822               	movf	?___wmul+1,w
 10814  017D  0022               	movlb	2	; select bank2
 10815  017E  01D8               	clrf	((_Load+1)^(0+256)+35)
 10816  017F  07D8               	addwf	((_Load+1)^(0+256)+35),f
 10817  0180  0020               	movlb	0	; select bank0
 10818  0181  0821               	movf	?___wmul,w
 10819  0182  0022               	movlb	2	; select bank2
 10820  0183  01D7               	clrf	(_Load^(0+256)+35)
 10821  0184  07D7               	addwf	(_Load^(0+256)+35),f
 10822                           
 10823                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10824  0185  2992               	goto	l9444
 10825  0186                     l9440:	
 10826  0186  0020               	movlb	0	; select bank0
 10827  0187  082F               	movf	Load_Main@Load_RunStatus,w
 10828  0188  3A01               	xorlw	1
 10829  0189  1D03               	skipz
 10830  018A  2992               	goto	l9444
 10831                           
 10832                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10833  018B  0022               	movlb	2	; select bank2
 10834  018C  083D               	movf	(_Load^(0+256)+9),w
 10835  018D  3E66               	addlw	102
 10836  018E  00D7               	movwf	(_Load^(0+256)+35)
 10837  018F  3000               	movlw	0
 10838  0190  3D3E               	addwfc	((_Load+1)^(0+256)+9),w
 10839  0191  00D8               	movwf	((_Load+1)^(0+256)+35)
 10840  0192                     l9444:	
 10841                           
 10842                           ;OverLoad_B1.c: 135: }
 10843                           ;OverLoad_B1.c: 136: }
 10844                           ;OverLoad_B1.c: 137: }
 10845                           ;OverLoad_B1.c: 138: }
 10846                           ;OverLoad_B1.c: 139: }
 10847                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10848  0192  0022               	movlb	2	; select bank2
 10849  0193  0858               	movf	((_Load+1)^(0+256)+35),w
 10850  0194  0254               	subwf	((_Load+1)^(0+256)+31),w
 10851  0195  1D03               	skipz
 10852  0196  2999               	goto	u10885
 10853  0197  0857               	movf	(_Load^(0+256)+35),w
 10854  0198  0253               	subwf	(_Load^(0+256)+31),w
 10855  0199                     u10885:	
 10856  0199  1C03               	skipc
 10857  019A  29B8               	goto	l9460
 10858                           
 10859                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10860  019B  0020               	movlb	0	; select bank0
 10861  019C  0830               	movf	Load_Main@LightsCount,w
 10862  019D  3A01               	xorlw	1
 10863  019E  1903               	skipnz
 10864  019F  29A2               	goto	l9450
 10865  01A0  3003               	movlw	3
 10866  01A1  29A3               	goto	L7
 10867  01A2                     l9450:	
 10868  01A2  3002               	movlw	2
 10869  01A3                     L7:	
 10870  01A3  00AC               	movwf	_Load_Main$3939
 10871  01A4  3000               	movlw	0
 10872  01A5  00AD               	movwf	_Load_Main$3939+1
 10873  01A6  082C               	movf	_Load_Main$3939,w
 10874  01A7  00A9               	movwf	??_Load_Main
 10875  01A8  0829               	movf	??_Load_Main,w
 10876  01A9  00AE               	movwf	Load_Main@ErrorCountValue
 10877                           
 10878                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10879  01AA  3001               	movlw	1
 10880  01AB  00A9               	movwf	??_Load_Main
 10881  01AC  0829               	movf	??_Load_Main,w
 10882  01AD  0022               	movlb	2	; select bank2
 10883  01AE  07DA               	addwf	(_Load^(0+256)+38),f
 10884                           
 10885                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10886  01AF  085A               	movf	(_Load^(0+256)+38),w
 10887  01B0  0020               	movlb	0	; select bank0
 10888  01B1  022E               	subwf	Load_Main@ErrorCountValue,w
 10889  01B2  1803               	skipnc
 10890  01B3  0008               	return
 10891                           
 10892                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10893  01B4  0022               	movlb	2	; select bank2
 10894  01B5  01DA               	clrf	(_Load^(0+256)+38)
 10895                           
 10896                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10897  01B6  16B4               	bsf	_Load^(0+256),5
 10898                           
 10899                           ;OverLoad_B1.c: 168: }
 10900                           ;OverLoad_B1.c: 169: } else {
 10901  01B7  0008               	return
 10902  01B8                     l9460:	
 10903                           
 10904                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10905  01B8  01DA               	clrf	(_Load^(0+256)+38)
 10906                           
 10907                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10908  01B9  1DB4               	btfss	_Load^(0+256),3
 10909  01BA  0008               	return
 10910                           
 10911                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10912  01BB  3001               	movlw	1
 10913  01BC  0020               	movlb	0	; select bank0
 10914  01BD  00A9               	movwf	??_Load_Main
 10915  01BE  0829               	movf	??_Load_Main,w
 10916  01BF  0022               	movlb	2	; select bank2
 10917  01C0  07DB               	addwf	(_Load^(0+256)+39),f
 10918                           
 10919                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10920  01C1  3003               	movlw	3
 10921  01C2  025B               	subwf	(_Load^(0+256)+39),w
 10922  01C3  1C03               	skipc
 10923  01C4  0008               	return
 10924                           
 10925                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10926  01C5  01DB               	clrf	(_Load^(0+256)+39)
 10927                           
 10928                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10929  01C6  17B4               	bsf	_Load^(0+256),7
 10930                           
 10931                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10932  01C7  11B4               	bcf	_Load^(0+256),3
 10933                           
 10934                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10935  01C8  01D9               	clrf	(_Load^(0+256)+37)
 10936                           
 10937                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10938  01C9  0854               	movf	((_Load+1)^(0+256)+31),w
 10939  01CA  01BE               	clrf	((_Load+1)^(0+256)+9)
 10940  01CB  07BE               	addwf	((_Load+1)^(0+256)+9),f
 10941  01CC  0853               	movf	(_Load^(0+256)+31),w
 10942  01CD  01BD               	clrf	(_Load^(0+256)+9)
 10943  01CE  07BD               	addwf	(_Load^(0+256)+9),f
 10944                           
 10945                           ;OverLoad_B1.c: 182: }
 10946                           ;OverLoad_B1.c: 183: }
 10947                           ;OverLoad_B1.c: 206: }
 10948                           ;OverLoad_B1.c: 207: }
 10949                           ;OverLoad_B1.c: 208: }
 10950                           ;OverLoad_B1.c: 209: } else {
 10951  01CF  0008               	return
 10952  01D0                     l1630:	
 10953                           
 10954                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 10955  01D0  1634               	bsf	_Load^(0+256),4
 10956                           
 10957                           ;OverLoad_B1.c: 211: }
 10958                           ;OverLoad_B1.c: 212: } else {
 10959  01D1  0008               	return
 10960  01D2                     l1629:	
 10961                           
 10962                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 10963  01D2  1D34               	btfss	_Load^(0+256),2
 10964  01D3  29E5               	goto	l9496
 10965                           
 10966                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 10967  01D4  1134               	bcf	_Load^(0+256),2
 10968                           
 10969                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 10970  01D5  1234               	bcf	_Load^(0+256),4
 10971                           
 10972                           ;OverLoad_B1.c: 218: Load.Time = 0;
 10973  01D6  01B5               	clrf	(_Load^(0+256)+1)
 10974  01D7  01B6               	clrf	((_Load+1)^(0+256)+1)
 10975                           
 10976                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 10977  01D8  319F  2769  3180   	fcall	_setLoad_AH_AL_Restore
 10978                           
 10979                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 10980  01DB  0022               	movlb	2	; select bank2
 10981  01DC  01DA               	clrf	(_Load^(0+256)+38)
 10982                           
 10983                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 10984  01DD  01DB               	clrf	(_Load^(0+256)+39)
 10985                           
 10986                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 10987  01DE  01B9               	clrf	(_Load^(0+256)+5)
 10988  01DF  01BA               	clrf	((_Load+1)^(0+256)+5)
 10989                           
 10990                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 10991  01E0  01BB               	clrf	(_Load^(0+256)+7)
 10992  01E1  01BC               	clrf	((_Load+1)^(0+256)+7)
 10993                           
 10994                           ;OverLoad_B1.c: 231: Load.Run = 0;
 10995  01E2  11B4               	bcf	_Load^(0+256),3
 10996                           
 10997                           ;OverLoad_B1.c: 232: Load.Count = 0;
 10998  01E3  01D9               	clrf	(_Load^(0+256)+37)
 10999                           
 11000                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11001  01E4  13B4               	bcf	_Load^(0+256),7
 11002  01E5                     l9496:	
 11003                           
 11004                           ;OverLoad_B1.c: 255: }
 11005                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11006  01E5  1EB4               	btfss	_Load^(0+256),5
 11007  01E6  0008               	return
 11008                           
 11009                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11010  01E7  3001               	movlw	1
 11011  01E8  07B7               	addwf	(_Load^(0+256)+3),f
 11012  01E9  3000               	movlw	0
 11013  01EA  3DB8               	addwfc	((_Load+1)^(0+256)+3),f
 11014                           
 11015                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11016  01EB  3001               	movlw	1
 11017  01EC  0238               	subwf	((_Load+1)^(0+256)+3),w
 11018  01ED  30F4               	movlw	244
 11019  01EE  1903               	skipnz
 11020  01EF  0237               	subwf	(_Load^(0+256)+3),w
 11021  01F0  1C03               	skipc
 11022  01F1  0008               	return
 11023                           
 11024                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11025  01F2  01B7               	clrf	(_Load^(0+256)+3)
 11026  01F3  01B8               	clrf	((_Load+1)^(0+256)+3)
 11027                           
 11028                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11029  01F4  12B4               	bcf	_Load^(0+256),5
 11030                           
 11031                           ;OverLoad_B1.c: 261: }
 11032                           ;OverLoad_B1.c: 262: }
 11033                           ;OverLoad_B1.c: 263: }
 11034                           ;OverLoad_B1.c: 264: } else {
 11035  01F5  0008               	return
 11036  01F6                     l1619:	
 11037                           
 11038                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11039  01F6  0021               	movlb	1	; select bank1
 11040  01F7  1C2E               	btfss	_myMain^(0+128),0
 11041  01F8  0008               	return
 11042                           
 11043                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11044  01F9  0022               	movlb	2	; select bank2
 11045  01FA  1434               	bsf	_Load^(0+256),0
 11046  01FB  0008               	return
 11047  01FC                     __end_of_Load_Main:	
 11048                           
 11049                           	psect	text63
 11050  1BE0                     __ptext63:	
 11051 ;; *************** function _getMain_Lights_Count *****************
 11052 ;; Defined at:
 11053 ;;		line 459 in file "../src/Main_B1.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;		None
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  status1         1    2[BANK0 ] unsigned char 
 11058 ;;  count           1    1[BANK0 ] unsigned char 
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  1    wreg      unsigned char 
 11061 ;; Registers used:
 11062 ;;		wreg, status,2
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;Total ram usage:        2 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    5
 11075 ;; This function calls:
 11076 ;;		Nothing
 11077 ;; This function is called by:
 11078 ;;		_Load_Main
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           
 11083                           ;psect for function _getMain_Lights_Count
 11084  1BE0                     _getMain_Lights_Count:	
 11085                           
 11086                           ;Main_B1.c: 460: char count = 0;
 11087                           
 11088                           ;incstack = 0
 11089                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11090  1BE0  0020               	movlb	0	; select bank0
 11091  1BE1  01A1               	clrf	getMain_Lights_Count@count
 11092                           
 11093                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11094  1BE2  3000               	movlw	0
 11095  1BE3  0021               	movlb	1	; select bank1
 11096  1BE4  19BB               	btfsc	_DimmerIntr1^(0+128),3
 11097  1BE5  3001               	movlw	1
 11098  1BE6  0020               	movlb	0	; select bank0
 11099  1BE7  00A2               	movwf	getMain_Lights_Count@status1
 11100                           
 11101                           ;Main_B1.c: 487: return count = status1;
 11102  1BE8  0822               	movf	getMain_Lights_Count@status1,w
 11103  1BE9  00A1               	movwf	getMain_Lights_Count@count
 11104  1BEA  0008               	return
 11105  1BEB                     __end_of_getMain_Lights_Count:	
 11106                           
 11107                           	psect	text64
 11108  1BA8                     __ptext64:	
 11109 ;; *************** function _getDimmer_Load_Status *****************
 11110 ;; Defined at:
 11111 ;;		line 1121 in file "../src/Dimmer_B1.c"
 11112 ;; Parameters:    Size  Location     Type
 11113 ;;		None
 11114 ;; Auto vars:     Size  Location     Type
 11115 ;;  status          1    1[BANK0 ] unsigned char 
 11116 ;; Return value:  Size  Location     Type
 11117 ;;                  1    wreg      unsigned char 
 11118 ;; Registers used:
 11119 ;;		wreg, status,2
 11120 ;; Tracked objects:
 11121 ;;		On entry : 0/0
 11122 ;;		On exit  : 0/0
 11123 ;;		Unchanged: 0/0
 11124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11129 ;;Total ram usage:        1 bytes
 11130 ;; Hardware stack levels used:    1
 11131 ;; Hardware stack levels required when called:    5
 11132 ;; This function calls:
 11133 ;;		Nothing
 11134 ;; This function is called by:
 11135 ;;		_Load_Main
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           
 11140                           ;psect for function _getDimmer_Load_Status
 11141  1BA8                     _getDimmer_Load_Status:	
 11142                           
 11143                           ;Dimmer_B1.c: 1122: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11144                           
 11145                           ;incstack = 0
 11146                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11147  1BA8  3000               	movlw	0
 11148  1BA9  0022               	movlb	2	; select bank2
 11149  1BAA  192C               	btfsc	_Dimmer^(0+256),2
 11150  1BAB  3001               	movlw	1
 11151  1BAC  0020               	movlb	0	; select bank0
 11152  1BAD  00A1               	movwf	getDimmer_Load_Status@status
 11153                           
 11154                           ;Dimmer_B1.c: 1123: return status;
 11155  1BAE  0821               	movf	getDimmer_Load_Status@status,w
 11156  1BAF  0008               	return
 11157  1BB0                     __end_of_getDimmer_Load_Status:	
 11158                           
 11159                           	psect	text65
 11160  1BA0                     __ptext65:	
 11161 ;; *************** function _getDimmer_LoadGO *****************
 11162 ;; Defined at:
 11163 ;;		line 1115 in file "../src/Dimmer_B1.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;		None
 11166 ;; Auto vars:     Size  Location     Type
 11167 ;;  loadgo          1    1[BANK0 ] unsigned char 
 11168 ;; Return value:  Size  Location     Type
 11169 ;;                  1    wreg      unsigned char 
 11170 ;; Registers used:
 11171 ;;		wreg, status,2
 11172 ;; Tracked objects:
 11173 ;;		On entry : 0/0
 11174 ;;		On exit  : 0/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;Total ram usage:        1 bytes
 11182 ;; Hardware stack levels used:    1
 11183 ;; Hardware stack levels required when called:    5
 11184 ;; This function calls:
 11185 ;;		Nothing
 11186 ;; This function is called by:
 11187 ;;		_Load_Main
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           
 11192                           ;psect for function _getDimmer_LoadGO
 11193  1BA0                     _getDimmer_LoadGO:	
 11194                           
 11195                           ;Dimmer_B1.c: 1116: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11196                           
 11197                           ;incstack = 0
 11198                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11199  1BA0  3000               	movlw	0
 11200  1BA1  0022               	movlb	2	; select bank2
 11201  1BA2  18AC               	btfsc	_Dimmer^(0+256),1
 11202  1BA3  3001               	movlw	1
 11203  1BA4  0020               	movlb	0	; select bank0
 11204  1BA5  00A1               	movwf	getDimmer_LoadGO@loadgo
 11205                           
 11206                           ;Dimmer_B1.c: 1117: return loadgo;
 11207  1BA6  0821               	movf	getDimmer_LoadGO@loadgo,w
 11208  1BA7  0008               	return
 11209  1BA8                     __end_of_getDimmer_LoadGO:	
 11210                           
 11211                           	psect	text66
 11212  1DB5                     __ptext66:	
 11213 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11214 ;; Defined at:
 11215 ;;		line 261 in file "../src/Dimmer_B1.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;		None
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  status          1    1[BANK0 ] unsigned char 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  1    wreg      unsigned char 
 11222 ;; Registers used:
 11223 ;;		wreg, status,2, status,0
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;Total ram usage:        1 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    5
 11236 ;; This function calls:
 11237 ;;		Nothing
 11238 ;; This function is called by:
 11239 ;;		_Load_Main
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           
 11244                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11245  1DB5                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11246                           
 11247                           ;Dimmer_B1.c: 262: char status = 0;
 11248                           
 11249                           ;incstack = 0
 11250                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11251  1DB5  0020               	movlb	0	; select bank0
 11252  1DB6  01A1               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11253                           
 11254                           ;Dimmer_B1.c: 273: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11255  1DB7  3000               	movlw	0
 11256  1DB8  0021               	movlb	1	; select bank1
 11257  1DB9  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 11258  1DBA  3001               	movlw	1
 11259  1DBB  0020               	movlb	0	; select bank0
 11260  1DBC  00A1               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11261                           
 11262                           ;Dimmer_B1.c: 277: if (status == 0) {
 11263  1DBD  08A1               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11264  1DBE  1D03               	skipz
 11265  1DBF  2DC6               	goto	l7056
 11266                           
 11267                           ;Dimmer_B1.c: 287: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11268  1DC0  3000               	movlw	0
 11269  1DC1  0021               	movlb	1	; select bank1
 11270  1DC2  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 11271  1DC3  3001               	movlw	1
 11272  1DC4  0020               	movlb	0	; select bank0
 11273  1DC5  00A1               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11274  1DC6                     l7056:	
 11275                           
 11276                           ;Dimmer_B1.c: 289: }
 11277                           ;Dimmer_B1.c: 291: return status;
 11278  1DC6  0821               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11279  1DC7  0008               	return
 11280  1DC8                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11281                           
 11282                           	psect	text67
 11283  1000                     __ptext67:	
 11284 ;; *************** function ___wmul *****************
 11285 ;; Defined at:
 11286 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11289 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;  product         2    5[BANK0 ] unsigned int 
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  2    1[BANK0 ] unsigned int 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2, status,0
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11301 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;Total ram usage:        6 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    5
 11308 ;; This function calls:
 11309 ;;		Nothing
 11310 ;; This function is called by:
 11311 ;;		_Load_Main
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           
 11316                           ;psect for function ___wmul
 11317  1000                     ___wmul:	
 11318                           
 11319                           ;incstack = 0
 11320                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11321  1000  0020               	movlb	0	; select bank0
 11322  1001  01A5               	clrf	___wmul@product
 11323  1002  01A6               	clrf	___wmul@product+1
 11324  1003                     l7618:	
 11325  1003  1C21               	btfss	___wmul@multiplier,0
 11326  1004  2809               	goto	l2675
 11327  1005  0823               	movf	___wmul@multiplicand,w
 11328  1006  07A5               	addwf	___wmul@product,f
 11329  1007  0824               	movf	___wmul@multiplicand+1,w
 11330  1008  3DA6               	addwfc	___wmul@product+1,f
 11331  1009                     l2675:	
 11332  1009  3001               	movlw	1
 11333  100A                     u7555:	
 11334  100A  35A3               	lslf	___wmul@multiplicand,f
 11335  100B  0DA4               	rlf	___wmul@multiplicand+1,f
 11336  100C  0B89               	decfsz	9,f
 11337  100D  280A               	goto	u7555
 11338  100E  3001               	movlw	1
 11339  100F                     u7565:	
 11340  100F  36A2               	lsrf	___wmul@multiplier+1,f
 11341  1010  0CA1               	rrf	___wmul@multiplier,f
 11342  1011  0B89               	decfsz	9,f
 11343  1012  280F               	goto	u7565
 11344  1013  0822               	movf	___wmul@multiplier+1,w
 11345  1014  0421               	iorwf	___wmul@multiplier,w
 11346  1015  1D03               	skipz
 11347  1016  2803               	goto	l7618
 11348  1017  0826               	movf	___wmul@product+1,w
 11349  1018  01A2               	clrf	?___wmul+1
 11350  1019  07A2               	addwf	?___wmul+1,f
 11351  101A  0825               	movf	___wmul@product,w
 11352  101B  01A1               	clrf	?___wmul
 11353  101C  07A1               	addwf	?___wmul,f
 11354  101D  0008               	return
 11355  101E                     __end_of___wmul:	
 11356                           
 11357                           	psect	text68
 11358  1242                     __ptext68:	
 11359 ;; *************** function ___lwdiv *****************
 11360 ;; Defined at:
 11361 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11362 ;; Parameters:    Size  Location     Type
 11363 ;;  divisor         2    1[BANK0 ] unsigned int 
 11364 ;;  dividend        2    3[BANK0 ] unsigned int 
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;  quotient        2    6[BANK0 ] unsigned int 
 11367 ;;  counter         1    8[BANK0 ] unsigned char 
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  2    1[BANK0 ] unsigned int 
 11370 ;; Registers used:
 11371 ;;		wreg, status,2, status,0
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11377 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;Total ram usage:        8 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    5
 11384 ;; This function calls:
 11385 ;;		Nothing
 11386 ;; This function is called by:
 11387 ;;		_Load_Main
 11388 ;;		_setRF_Main
 11389 ;; This function uses a non-reentrant model
 11390 ;;
 11391                           
 11392                           
 11393                           ;psect for function ___lwdiv
 11394  1242                     ___lwdiv:	
 11395                           
 11396                           ;incstack = 0
 11397                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11398  1242  0020               	movlb	0	; select bank0
 11399  1243  01A6               	clrf	___lwdiv@quotient
 11400  1244  01A7               	clrf	___lwdiv@quotient+1
 11401  1245  0822               	movf	___lwdiv@divisor+1,w
 11402  1246  0421               	iorwf	___lwdiv@divisor,w
 11403  1247  1903               	skipnz
 11404  1248  2A72               	goto	l7006
 11405  1249  01A8               	clrf	___lwdiv@counter
 11406  124A  0AA8               	incf	___lwdiv@counter,f
 11407  124B                     l6994:	
 11408  124B  1BA2               	btfsc	___lwdiv@divisor+1,7
 11409  124C  2A57               	goto	l6996
 11410  124D  3001               	movlw	1
 11411  124E                     u6445:	
 11412  124E  35A1               	lslf	___lwdiv@divisor,f
 11413  124F  0DA2               	rlf	___lwdiv@divisor+1,f
 11414  1250  0B89               	decfsz	9,f
 11415  1251  2A4E               	goto	u6445
 11416  1252  3001               	movlw	1
 11417  1253  00A5               	movwf	??___lwdiv
 11418  1254  0825               	movf	??___lwdiv,w
 11419  1255  07A8               	addwf	___lwdiv@counter,f
 11420  1256  2A4B               	goto	l6994
 11421  1257                     l6996:	
 11422  1257  3001               	movlw	1
 11423  1258                     u6465:	
 11424  1258  35A6               	lslf	___lwdiv@quotient,f
 11425  1259  0DA7               	rlf	___lwdiv@quotient+1,f
 11426  125A  0B89               	decfsz	9,f
 11427  125B  2A58               	goto	u6465
 11428  125C  0822               	movf	___lwdiv@divisor+1,w
 11429  125D  0224               	subwf	___lwdiv@dividend+1,w
 11430  125E  1D03               	skipz
 11431  125F  2A62               	goto	u6475
 11432  1260  0821               	movf	___lwdiv@divisor,w
 11433  1261  0223               	subwf	___lwdiv@dividend,w
 11434  1262                     u6475:	
 11435  1262  1C03               	skipc
 11436  1263  2A69               	goto	l7002
 11437  1264  0821               	movf	___lwdiv@divisor,w
 11438  1265  02A3               	subwf	___lwdiv@dividend,f
 11439  1266  0822               	movf	___lwdiv@divisor+1,w
 11440  1267  3BA4               	subwfb	___lwdiv@dividend+1,f
 11441  1268  1426               	bsf	___lwdiv@quotient,0
 11442  1269                     l7002:	
 11443  1269  3001               	movlw	1
 11444  126A                     u6485:	
 11445  126A  36A2               	lsrf	___lwdiv@divisor+1,f
 11446  126B  0CA1               	rrf	___lwdiv@divisor,f
 11447  126C  0B89               	decfsz	9,f
 11448  126D  2A6A               	goto	u6485
 11449  126E  3001               	movlw	1
 11450  126F  02A8               	subwf	___lwdiv@counter,f
 11451  1270  1D03               	btfss	3,2
 11452  1271  2A57               	goto	l6996
 11453  1272                     l7006:	
 11454  1272  0827               	movf	___lwdiv@quotient+1,w
 11455  1273  01A2               	clrf	?___lwdiv+1
 11456  1274  07A2               	addwf	?___lwdiv+1,f
 11457  1275  0826               	movf	___lwdiv@quotient,w
 11458  1276  01A1               	clrf	?___lwdiv
 11459  1277  07A1               	addwf	?___lwdiv,f
 11460  1278  0008               	return
 11461  1279                     __end_of___lwdiv:	
 11462                           
 11463                           	psect	text69
 11464  1B38                     __ptext69:	
 11465 ;; *************** function _Load_Initialization *****************
 11466 ;; Defined at:
 11467 ;;		line 9 in file "../src/OverLoad_B1.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;		None
 11470 ;; Auto vars:     Size  Location     Type
 11471 ;;		None
 11472 ;; Return value:  Size  Location     Type
 11473 ;;		None               void
 11474 ;; Registers used:
 11475 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11476 ;; Tracked objects:
 11477 ;;		On entry : 0/0
 11478 ;;		On exit  : 0/0
 11479 ;;		Unchanged: 0/0
 11480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;Total ram usage:        0 bytes
 11486 ;; Hardware stack levels used:    1
 11487 ;; Hardware stack levels required when called:    6
 11488 ;; This function calls:
 11489 ;;		_setLoad_AH_AL_Restore
 11490 ;; This function is called by:
 11491 ;;		_main
 11492 ;; This function uses a non-reentrant model
 11493 ;;
 11494                           
 11495                           
 11496                           ;psect for function _Load_Initialization
 11497  1B38                     _Load_Initialization:	
 11498                           
 11499                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11500                           
 11501                           ;incstack = 0
 11502                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11503  1B38  319F  2769         	fcall	_setLoad_AH_AL_Restore
 11504  1B3A  0008               	return
 11505  1B3B                     __end_of_Load_Initialization:	
 11506                           
 11507                           	psect	text70
 11508  1F69                     __ptext70:	
 11509 ;; *************** function _setLoad_AH_AL_Restore *****************
 11510 ;; Defined at:
 11511 ;;		line 292 in file "../src/OverLoad_B1.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;		None
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;  i               1    2[BANK0 ] unsigned char 
 11516 ;; Return value:  Size  Location     Type
 11517 ;;		None               void
 11518 ;; Registers used:
 11519 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;Total ram usage:        2 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    5
 11532 ;; This function calls:
 11533 ;;		Nothing
 11534 ;; This function is called by:
 11535 ;;		_Load_Initialization
 11536 ;;		_Load_Main
 11537 ;; This function uses a non-reentrant model
 11538 ;;
 11539                           
 11540                           
 11541                           ;psect for function _setLoad_AH_AL_Restore
 11542  1F69                     _setLoad_AH_AL_Restore:	
 11543                           
 11544                           ;OverLoad_B1.c: 293: char i;
 11545                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11546                           
 11547                           ;incstack = 0
 11548                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11549  1F69  0020               	movlb	0	; select bank0
 11550  1F6A  01A2               	clrf	setLoad_AH_AL_Restore@i
 11551  1F6B                     L8:	
 11552  1F6B  3005               	movlw	5
 11553  1F6C  0222               	subwf	setLoad_AH_AL_Restore@i,w
 11554  1F6D  1803               	btfsc	3,0
 11555  1F6E  0008               	return
 11556                           
 11557                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11558  1F6F  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11559  1F70  3E3F               	addlw	(_Load+11)& (0+255)
 11560  1F71  0086               	movwf	6
 11561  1F72  3001               	movlw	1	; select bank2/3
 11562  1F73  0087               	movwf	7
 11563  1F74  3000               	movlw	0
 11564  1F75  3FC0               	movwi [0]fsr1
 11565  1F76  3FC1               	movwi [1]fsr1
 11566                           
 11567                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11568  1F77  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11569  1F78  3E49               	addlw	(_Load+21)& (0+255)
 11570  1F79  0086               	movwf	6
 11571  1F7A  3001               	movlw	1	; select bank2/3
 11572  1F7B  0087               	movwf	7
 11573  1F7C  30FF               	movlw	255
 11574  1F7D  3FC0               	movwi [0]fsr1
 11575  1F7E  30FF               	movlw	255
 11576  1F7F  3FC1               	movwi [1]fsr1
 11577  1F80  3001               	movlw	1
 11578  1F81  00A1               	movwf	??_setLoad_AH_AL_Restore
 11579  1F82  0821               	movf	??_setLoad_AH_AL_Restore,w
 11580  1F83  07A2               	addwf	setLoad_AH_AL_Restore@i,f
 11581  1F84  2F6B               	goto	L8
 11582  1F85                     __end_of_setLoad_AH_AL_Restore:	
 11583                           
 11584                           	psect	text71
 11585  1B50                     __ptext71:	
 11586 ;; *************** function _LED_Main *****************
 11587 ;; Defined at:
 11588 ;;		line 47 in file "../src/LED_B1.c"
 11589 ;; Parameters:    Size  Location     Type
 11590 ;;		None
 11591 ;; Auto vars:     Size  Location     Type
 11592 ;;		None
 11593 ;; Return value:  Size  Location     Type
 11594 ;;		None               void
 11595 ;; Registers used:
 11596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11597 ;; Tracked objects:
 11598 ;;		On entry : 0/0
 11599 ;;		On exit  : 0/0
 11600 ;;		Unchanged: 0/0
 11601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11606 ;;Total ram usage:        0 bytes
 11607 ;; Hardware stack levels used:    1
 11608 ;; Hardware stack levels required when called:    7
 11609 ;; This function calls:
 11610 ;;		_setLED_Main
 11611 ;; This function is called by:
 11612 ;;		_main
 11613 ;; This function uses a non-reentrant model
 11614 ;;
 11615                           
 11616                           
 11617                           ;psect for function _LED_Main
 11618  1B50                     _LED_Main:	
 11619                           
 11620                           ;LED_B1.c: 67: setLED_Main(99);
 11621                           
 11622                           ;incstack = 0
 11623                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11624  1B50  3063               	movlw	99
 11625  1B51  3192  220C         	fcall	_setLED_Main
 11626  1B53  0008               	return
 11627  1B54                     __end_of_LED_Main:	
 11628                           
 11629                           	psect	text72
 11630  120C                     __ptext72:	
 11631 ;; *************** function _setLED_Main *****************
 11632 ;; Defined at:
 11633 ;;		line 229 in file "../src/LED_B1.c"
 11634 ;; Parameters:    Size  Location     Type
 11635 ;;  led             1    wreg     unsigned char 
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;  led             1    5[BANK0 ] unsigned char 
 11638 ;; Return value:  Size  Location     Type
 11639 ;;		None               void
 11640 ;; Registers used:
 11641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11650 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;Total ram usage:        3 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    6
 11654 ;; This function calls:
 11655 ;;		_LedPointSelect
 11656 ;; This function is called by:
 11657 ;;		_LED_Main
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           
 11662                           ;psect for function _setLED_Main
 11663  120C                     _setLED_Main:	
 11664                           
 11665                           ;incstack = 0
 11666                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11667                           ;setLED_Main@led stored from wreg
 11668  120C  0020               	movlb	0	; select bank0
 11669  120D  00A5               	movwf	setLED_Main@led
 11670                           
 11671                           ;LED_B1.c: 230: LedPointSelect(led);
 11672  120E  0825               	movf	setLED_Main@led,w
 11673  120F  319C  2448  3192   	fcall	_LedPointSelect
 11674                           
 11675                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11676  1212  0021               	movlb	1	; select bank1
 11677  1213  0850               	movf	_LED^(0+128),w
 11678  1214  0086               	movwf	6
 11679  1215  3001               	movlw	1	; select bank2/3
 11680  1216  0087               	movwf	7
 11681  1217  1C81               	btfss	1,1
 11682  1218  0008               	return
 11683                           
 11684                           ;LED_B1.c: 232: LED->Time++;
 11685  1219  0A50               	incf	_LED^(0+128),w
 11686  121A  0086               	movwf	6
 11687  121B  3001               	movlw	1	; select bank2/3
 11688  121C  0087               	movwf	7
 11689  121D  3001               	movlw	1
 11690  121E  0781               	addwf	1,f
 11691  121F  3141               	addfsr 1,1
 11692  1220  1803               	skipnc
 11693  1221  0A81               	incf	1,f
 11694                           
 11695                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11696  1222  0A50               	incf	_LED^(0+128),w
 11697  1223  0086               	movwf	6
 11698  1224  3001               	movlw	1	; select bank2/3
 11699  1225  0087               	movwf	7
 11700  1226  3F40               	moviw [0]fsr1
 11701  1227  0020               	movlb	0	; select bank0
 11702  1228  00A3               	movwf	??_setLED_Main
 11703  1229  3F41               	moviw [1]fsr1
 11704  122A  00A4               	movwf	??_setLED_Main+1
 11705  122B  3000               	movlw	0
 11706  122C  0224               	subwf	??_setLED_Main+1,w
 11707  122D  3019               	movlw	25
 11708  122E  1903               	skipnz
 11709  122F  0223               	subwf	??_setLED_Main,w
 11710  1230  1C03               	skipc
 11711  1231  0008               	return
 11712                           
 11713                           ;LED_B1.c: 234: LED->Time = 0;
 11714  1232  0021               	movlb	1	; select bank1
 11715  1233  0A50               	incf	_LED^(0+128),w
 11716  1234  0086               	movwf	6
 11717  1235  3001               	movlw	1	; select bank2/3
 11718  1236  0087               	movwf	7
 11719  1237  3000               	movlw	0
 11720  1238  3FC0               	movwi [0]fsr1
 11721  1239  3FC1               	movwi [1]fsr1
 11722                           
 11723                           ;LED_B1.c: 252: if (led == 99) {
 11724  123A  0020               	movlb	0	; select bank0
 11725  123B  0825               	movf	setLED_Main@led,w
 11726  123C  3A63               	xorlw	99
 11727  123D  1D03               	skipz
 11728  123E  0008               	return
 11729                           
 11730                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11731  123F  3020               	movlw	32
 11732  1240  068D               	xorwf	13,f
 11733  1241  0008               	return
 11734  1242                     __end_of_setLED_Main:	
 11735                           
 11736                           	psect	text73
 11737  1B4C                     __ptext73:	
 11738 ;; *************** function _LED_Initialization *****************
 11739 ;; Defined at:
 11740 ;;		line 31 in file "../src/LED_B1.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;		None
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;		None
 11745 ;; Return value:  Size  Location     Type
 11746 ;;		None               void
 11747 ;; Registers used:
 11748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11749 ;; Tracked objects:
 11750 ;;		On entry : 0/0
 11751 ;;		On exit  : 0/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;Total ram usage:        0 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; Hardware stack levels required when called:    8
 11761 ;; This function calls:
 11762 ;;		_setLED_Initialization
 11763 ;; This function is called by:
 11764 ;;		_main
 11765 ;; This function uses a non-reentrant model
 11766 ;;
 11767                           
 11768                           
 11769                           ;psect for function _LED_Initialization
 11770  1B4C                     _LED_Initialization:	
 11771                           
 11772                           ;LED_B1.c: 42: setLED_Initialization(99);
 11773                           
 11774                           ;incstack = 0
 11775                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11776  1B4C  3063               	movlw	99
 11777  1B4D  319D  2559         	fcall	_setLED_Initialization
 11778  1B4F  0008               	return
 11779  1B50                     __end_of_LED_Initialization:	
 11780                           
 11781                           	psect	text74
 11782  1D59                     __ptext74:	
 11783 ;; *************** function _setLED_Initialization *****************
 11784 ;; Defined at:
 11785 ;;		line 74 in file "../src/LED_B1.c"
 11786 ;; Parameters:    Size  Location     Type
 11787 ;;  led             1    wreg     unsigned char 
 11788 ;; Auto vars:     Size  Location     Type
 11789 ;;  led             1    5[BANK0 ] unsigned char 
 11790 ;; Return value:  Size  Location     Type
 11791 ;;		None               void
 11792 ;; Registers used:
 11793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11794 ;; Tracked objects:
 11795 ;;		On entry : 0/0
 11796 ;;		On exit  : 0/0
 11797 ;;		Unchanged: 0/0
 11798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;Total ram usage:        1 bytes
 11804 ;; Hardware stack levels used:    1
 11805 ;; Hardware stack levels required when called:    7
 11806 ;; This function calls:
 11807 ;;		_LedPointSelect
 11808 ;;		_setLED
 11809 ;; This function is called by:
 11810 ;;		_LED_Initialization
 11811 ;; This function uses a non-reentrant model
 11812 ;;
 11813                           
 11814                           
 11815                           ;psect for function _setLED_Initialization
 11816  1D59                     _setLED_Initialization:	
 11817                           
 11818                           ;incstack = 0
 11819                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11820                           ;setLED_Initialization@led stored from wreg
 11821  1D59  0020               	movlb	0	; select bank0
 11822  1D5A  00A5               	movwf	setLED_Initialization@led
 11823                           
 11824                           ;LED_B1.c: 75: LedPointSelect(led);
 11825  1D5B  0825               	movf	setLED_Initialization@led,w
 11826  1D5C  319C  2448  319D   	fcall	_LedPointSelect
 11827                           
 11828                           ;LED_B1.c: 76: LED->Enable = 1;
 11829  1D5F  0021               	movlb	1	; select bank1
 11830  1D60  0850               	movf	_LED^(0+128),w
 11831  1D61  0086               	movwf	6
 11832  1D62  3001               	movlw	1	; select bank2/3
 11833  1D63  0087               	movwf	7
 11834  1D64  1401               	bsf	1,0
 11835                           
 11836                           ;LED_B1.c: 77: setLED(led, 0);
 11837  1D65  0020               	movlb	0	; select bank0
 11838  1D66  01A3               	clrf	setLED@command
 11839  1D67  0825               	movf	setLED_Initialization@led,w
 11840  1D68  3192  22B2         	fcall	_setLED
 11841  1D6A  0008               	return
 11842  1D6B                     __end_of_setLED_Initialization:	
 11843                           
 11844                           	psect	text75
 11845  13E4                     __ptext75:	
 11846 ;; *************** function _Flash_Memory_Main *****************
 11847 ;; Defined at:
 11848 ;;		line 974 in file "../src/MCU_B1.c"
 11849 ;; Parameters:    Size  Location     Type
 11850 ;;		None
 11851 ;; Auto vars:     Size  Location     Type
 11852 ;;  key_Status      1    8[BANK0 ] unsigned char 
 11853 ;; Return value:  Size  Location     Type
 11854 ;;		None               void
 11855 ;; Registers used:
 11856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11857 ;; Tracked objects:
 11858 ;;		On entry : 0/0
 11859 ;;		On exit  : 0/0
 11860 ;;		Unchanged: 0/0
 11861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11863 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;Total ram usage:        3 bytes
 11867 ;; Hardware stack levels used:    1
 11868 ;; Hardware stack levels required when called:    8
 11869 ;; This function calls:
 11870 ;;		_Flash_Memory_Modify
 11871 ;;		_getAll_Sw_KeyStatus
 11872 ;;		_getMain_All_LightsStatus
 11873 ;; This function is called by:
 11874 ;;		_main
 11875 ;; This function uses a non-reentrant model
 11876 ;;
 11877                           
 11878                           
 11879                           ;psect for function _Flash_Memory_Main
 11880  13E4                     _Flash_Memory_Main:	
 11881                           
 11882                           ;MCU_B1.c: 975: char key_Status = 0;
 11883                           
 11884                           ;incstack = 0
 11885                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11886  13E4  0020               	movlb	0	; select bank0
 11887  13E5  01A8               	clrf	Flash_Memory_Main@key_Status
 11888                           
 11889                           ;MCU_B1.c: 977: key_Status = getAll_Sw_KeyStatus();
 11890  13E6  319C  24F1  3193   	fcall	_getAll_Sw_KeyStatus
 11891  13E9  0020               	movlb	0	; select bank0
 11892  13EA  00A7               	movwf	??_Flash_Memory_Main
 11893  13EB  0827               	movf	??_Flash_Memory_Main,w
 11894  13EC  00A8               	movwf	Flash_Memory_Main@key_Status
 11895                           
 11896                           ;MCU_B1.c: 979: if (Memory.Modify == 1) {
 11897  13ED  0023               	movlb	3	; select bank3
 11898  13EE  1C62               	btfss	(_Memory^(0+384)+36),0
 11899  13EF  0008               	return
 11900                           
 11901                           ;MCU_B1.c: 980: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 11902  13F0  0020               	movlb	0	; select bank0
 11903  13F1  01A9               	clrf	_Flash_Memory_Main$3112
 11904  13F2  319B  23CB  3193   	fcall	_getMain_All_LightsStatus
 11905  13F5  3800               	iorlw	0
 11906  13F6  1D03               	skipz
 11907  13F7  2BFE               	goto	l9296
 11908  13F8  0020               	movlb	0	; select bank0
 11909  13F9  08A8               	movf	Flash_Memory_Main@key_Status,f
 11910  13FA  1D03               	skipz
 11911  13FB  2BFE               	goto	l9296
 11912  13FC  01A9               	clrf	_Flash_Memory_Main$3112
 11913  13FD  0AA9               	incf	_Flash_Memory_Main$3112,f
 11914  13FE                     l9296:	
 11915  13FE  0020               	movlb	0	; select bank0
 11916  13FF  0829               	movf	_Flash_Memory_Main$3112,w
 11917  1400  0023               	movlb	3	; select bank3
 11918  1401  10E2               	bcf	(_Memory^(0+384)+36),1
 11919  1402  1D03               	skipz
 11920  1403  14E2               	bsf	(_Memory^(0+384)+36),1
 11921                           
 11922                           ;MCU_B1.c: 981: if (Memory.GO == 1) {
 11923  1404  1CE2               	btfss	(_Memory^(0+384)+36),1
 11924  1405  2C1F               	goto	l1241
 11925                           
 11926                           ;MCU_B1.c: 982: Memory.Runtime = 1;
 11927  1406  15E2               	bsf	(_Memory^(0+384)+36),3
 11928                           
 11929                           ;MCU_B1.c: 983: Memory.Time++;
 11930  1407  3001               	movlw	1
 11931  1408  07E0               	addwf	(_Memory^(0+384)+34),f
 11932  1409  3000               	movlw	0
 11933  140A  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11934                           
 11935                           ;MCU_B1.c: 984: if (Memory.Time == (200 / 20)) {
 11936  140B  3022               	movlw	34
 11937  140C  3EBE               	addlw	_Memory& (0+255)
 11938  140D  0086               	movwf	6
 11939  140E  3001               	movlw	1	; select bank3/4
 11940  140F  0087               	movwf	7
 11941  1410  3F40               	moviw [0]fsr1
 11942  1411  3A0A               	xorlw	10
 11943  1412  1D03               	skipz
 11944  1413  2C16               	goto	u10595
 11945  1414  3F41               	moviw [1]fsr1
 11946  1415  3A00               	xorlw	0
 11947  1416                     u10595:	
 11948  1416  1D03               	skipz
 11949  1417  0008               	return
 11950                           
 11951                           ;MCU_B1.c: 985: Memory.Time = 0;
 11952  1418  01E0               	clrf	(_Memory^(0+384)+34)
 11953  1419  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11954                           
 11955                           ;MCU_B1.c: 986: Memory.Modify = 0;
 11956  141A  1062               	bcf	(_Memory^(0+384)+36),0
 11957                           
 11958                           ;MCU_B1.c: 987: Memory.GO = 0;
 11959  141B  10E2               	bcf	(_Memory^(0+384)+36),1
 11960                           
 11961                           ;MCU_B1.c: 988: Flash_Memory_Modify();
 11962  141C  318B  23A1         	fcall	_Flash_Memory_Modify
 11963                           
 11964                           ;MCU_B1.c: 989: }
 11965                           ;MCU_B1.c: 990: } else {
 11966  141E  0008               	return
 11967  141F                     l1241:	
 11968                           
 11969                           ;MCU_B1.c: 991: if (Memory.Runtime == 1) {
 11970  141F  1DE2               	btfss	(_Memory^(0+384)+36),3
 11971  1420  0008               	return
 11972                           
 11973                           ;MCU_B1.c: 992: Memory.Runtime = 0;
 11974  1421  11E2               	bcf	(_Memory^(0+384)+36),3
 11975                           
 11976                           ;MCU_B1.c: 993: Memory.Time = 0;
 11977  1422  01E0               	clrf	(_Memory^(0+384)+34)
 11978  1423  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11979  1424  0008               	return
 11980  1425                     __end_of_Flash_Memory_Main:	
 11981                           
 11982                           	psect	text76
 11983  1CF1                     __ptext76:	
 11984 ;; *************** function _getAll_Sw_KeyStatus *****************
 11985 ;; Defined at:
 11986 ;;		line 278 in file "../src/Switch_B1.c"
 11987 ;; Parameters:    Size  Location     Type
 11988 ;;		None
 11989 ;; Auto vars:     Size  Location     Type
 11990 ;;  status          1    2[BANK0 ] unsigned char 
 11991 ;; Return value:  Size  Location     Type
 11992 ;;                  1    wreg      unsigned char 
 11993 ;; Registers used:
 11994 ;;		wreg, status,2
 11995 ;; Tracked objects:
 11996 ;;		On entry : 0/0
 11997 ;;		On exit  : 0/0
 11998 ;;		Unchanged: 0/0
 11999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12003 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12004 ;;Total ram usage:        3 bytes
 12005 ;; Hardware stack levels used:    1
 12006 ;; Hardware stack levels required when called:    5
 12007 ;; This function calls:
 12008 ;;		Nothing
 12009 ;; This function is called by:
 12010 ;;		_Flash_Memory_Main
 12011 ;; This function uses a non-reentrant model
 12012 ;;
 12013                           
 12014                           
 12015                           ;psect for function _getAll_Sw_KeyStatus
 12016  1CF1                     _getAll_Sw_KeyStatus:	
 12017                           
 12018                           ;Switch_B1.c: 279: char status = 0;
 12019                           
 12020                           ;incstack = 0
 12021                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12022  1CF1  0020               	movlb	0	; select bank0
 12023  1CF2  01A2               	clrf	getAll_Sw_KeyStatus@status
 12024                           
 12025                           ;Switch_B1.c: 302: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12026  1CF3  01A3               	clrf	_getAll_Sw_KeyStatus$6371
 12027  1CF4  0AA3               	incf	_getAll_Sw_KeyStatus$6371,f
 12028  1CF5  1F0C               	btfss	12,6	;volatile
 12029  1CF6  1A0C               	btfsc	12,4	;volatile
 12030  1CF7  2CFC               	goto	l7304
 12031  1CF8  1C0C               	btfss	12,0	;volatile
 12032  1CF9  1B8C               	btfsc	12,7	;volatile
 12033  1CFA  2CFC               	goto	l7304
 12034  1CFB  01A3               	clrf	_getAll_Sw_KeyStatus$6371
 12035  1CFC                     l7304:	
 12036  1CFC  0823               	movf	_getAll_Sw_KeyStatus$6371,w
 12037  1CFD  00A1               	movwf	??_getAll_Sw_KeyStatus
 12038  1CFE  0821               	movf	??_getAll_Sw_KeyStatus,w
 12039  1CFF  00A2               	movwf	getAll_Sw_KeyStatus@status
 12040                           
 12041                           ;Switch_B1.c: 306: return status;
 12042  1D00  0822               	movf	getAll_Sw_KeyStatus@status,w
 12043  1D01  0008               	return
 12044  1D02                     __end_of_getAll_Sw_KeyStatus:	
 12045                           
 12046                           	psect	text77
 12047  0BA1                     __ptext77:	
 12048 ;; *************** function _Flash_Memory_Modify *****************
 12049 ;; Defined at:
 12050 ;;		line 1051 in file "../src/MCU_B1.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;		None
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;  i               1    6[BANK0 ] unsigned char 
 12055 ;; Return value:  Size  Location     Type
 12056 ;;		None               void
 12057 ;; Registers used:
 12058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12059 ;; Tracked objects:
 12060 ;;		On entry : 0/0
 12061 ;;		On exit  : 0/0
 12062 ;;		Unchanged: 0/0
 12063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;Total ram usage:        2 bytes
 12069 ;; Hardware stack levels used:    1
 12070 ;; Hardware stack levels required when called:    7
 12071 ;; This function calls:
 12072 ;;		_Flash_Memory_Erasing
 12073 ;;		_Flash_Memory_Read
 12074 ;;		_Flash_Memory_Write
 12075 ;;		_setMemory_Data
 12076 ;; This function is called by:
 12077 ;;		_Flash_Memory_Main
 12078 ;; This function uses a non-reentrant model
 12079 ;;
 12080                           
 12081                           
 12082                           ;psect for function _Flash_Memory_Modify
 12083  0BA1                     _Flash_Memory_Modify:	
 12084                           
 12085                           ;MCU_B1.c: 1052: char i = 0;
 12086                           
 12087                           ;incstack = 0
 12088                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12089  0BA1  0020               	movlb	0	; select bank0
 12090  0BA2  01A6               	clrf	Flash_Memory_Modify@i
 12091                           
 12092                           ;MCU_B1.c: 1053: for (i = 0; i < 32; i++) {
 12093  0BA3  01A6               	clrf	Flash_Memory_Modify@i
 12094  0BA4  3020               	movlw	32
 12095  0BA5  0226               	subwf	Flash_Memory_Modify@i,w
 12096  0BA6  1803               	btfsc	3,0
 12097  0BA7  2BBD               	goto	l7322
 12098  0BA8                     l7316:	
 12099                           
 12100                           ;MCU_B1.c: 1054: Memory.Data[i] = Flash_Memory_Read(i);
 12101  0BA8  0826               	movf	Flash_Memory_Modify@i,w
 12102  0BA9  319E  26E4  318B   	fcall	_Flash_Memory_Read
 12103  0BAC  0020               	movlb	0	; select bank0
 12104  0BAD  00A5               	movwf	??_Flash_Memory_Modify
 12105  0BAE  0826               	movf	Flash_Memory_Modify@i,w
 12106  0BAF  3EBE               	addlw	_Memory& (0+255)
 12107  0BB0  0086               	movwf	6
 12108  0BB1  3001               	movlw	1	; select bank3/4
 12109  0BB2  0087               	movwf	7
 12110  0BB3  0825               	movf	??_Flash_Memory_Modify,w
 12111  0BB4  0081               	movwf	1
 12112  0BB5  3001               	movlw	1
 12113  0BB6  00A5               	movwf	??_Flash_Memory_Modify
 12114  0BB7  0825               	movf	??_Flash_Memory_Modify,w
 12115  0BB8  07A6               	addwf	Flash_Memory_Modify@i,f
 12116  0BB9  3020               	movlw	32
 12117  0BBA  0226               	subwf	Flash_Memory_Modify@i,w
 12118  0BBB  1C03               	skipc
 12119  0BBC  2BA8               	goto	l7316
 12120  0BBD                     l7322:	
 12121                           
 12122                           ;MCU_B1.c: 1055: }
 12123                           ;MCU_B1.c: 1056: setMemory_Data(0, product->Data[12]);
 12124  0BBD  0021               	movlb	1	; select bank1
 12125  0BBE  086D               	movf	_product^(0+128),w
 12126  0BBF  0086               	movwf	6
 12127  0BC0  3002               	movlw	2	; select bank4/5
 12128  0BC1  0087               	movwf	7
 12129  0BC2  3002               	movlw	2	; select bank4/5
 12130  0BC3  3F4C               	moviw [12]fsr1
 12131  0BC4  0020               	movlb	0	; select bank0
 12132  0BC5  00A1               	movwf	setMemory_Data@data
 12133  0BC6  3000               	movlw	0
 12134  0BC7  319C  2454  318B   	fcall	_setMemory_Data
 12135                           
 12136                           ;MCU_B1.c: 1057: setMemory_Data(1, product->Data[13]);
 12137  0BCA  0021               	movlb	1	; select bank1
 12138  0BCB  086D               	movf	_product^(0+128),w
 12139  0BCC  0086               	movwf	6
 12140  0BCD  3002               	movlw	2	; select bank4/5
 12141  0BCE  0087               	movwf	7
 12142  0BCF  3002               	movlw	2	; select bank4/5
 12143  0BD0  3F4D               	moviw [13]fsr1
 12144  0BD1  0020               	movlb	0	; select bank0
 12145  0BD2  00A1               	movwf	setMemory_Data@data
 12146  0BD3  3001               	movlw	1
 12147  0BD4  319C  2454  318B   	fcall	_setMemory_Data
 12148                           
 12149                           ;MCU_B1.c: 1058: setMemory_Data(2, product->Data[14]);
 12150  0BD7  0021               	movlb	1	; select bank1
 12151  0BD8  086D               	movf	_product^(0+128),w
 12152  0BD9  0086               	movwf	6
 12153  0BDA  3002               	movlw	2	; select bank4/5
 12154  0BDB  0087               	movwf	7
 12155  0BDC  3002               	movlw	2	; select bank4/5
 12156  0BDD  3F4E               	moviw [14]fsr1
 12157  0BDE  0020               	movlb	0	; select bank0
 12158  0BDF  00A1               	movwf	setMemory_Data@data
 12159  0BE0  3002               	movlw	2
 12160  0BE1  319C  2454  318B   	fcall	_setMemory_Data
 12161                           
 12162                           ;MCU_B1.c: 1060: setMemory_Data(3, product->Data[21]);
 12163  0BE4  0021               	movlb	1	; select bank1
 12164  0BE5  086D               	movf	_product^(0+128),w
 12165  0BE6  0086               	movwf	6
 12166  0BE7  3002               	movlw	2	; select bank4/5
 12167  0BE8  0087               	movwf	7
 12168  0BE9  3002               	movlw	2	; select bank4/5
 12169  0BEA  3F55               	moviw [21]fsr1
 12170  0BEB  0020               	movlb	0	; select bank0
 12171  0BEC  00A1               	movwf	setMemory_Data@data
 12172  0BED  3003               	movlw	3
 12173  0BEE  319C  2454  318B   	fcall	_setMemory_Data
 12174                           
 12175                           ;MCU_B1.c: 1061: setMemory_Data(4, product->Data[22]);
 12176  0BF1  0021               	movlb	1	; select bank1
 12177  0BF2  086D               	movf	_product^(0+128),w
 12178  0BF3  0086               	movwf	6
 12179  0BF4  3002               	movlw	2	; select bank4/5
 12180  0BF5  0087               	movwf	7
 12181  0BF6  3002               	movlw	2	; select bank4/5
 12182  0BF7  3F56               	moviw [22]fsr1
 12183  0BF8  0020               	movlb	0	; select bank0
 12184  0BF9  00A1               	movwf	setMemory_Data@data
 12185  0BFA  3004               	movlw	4
 12186  0BFB  319C  2454  318B   	fcall	_setMemory_Data
 12187                           
 12188                           ;MCU_B1.c: 1062: setMemory_Data(5, product->Data[23]);
 12189  0BFE  0021               	movlb	1	; select bank1
 12190  0BFF  086D               	movf	_product^(0+128),w
 12191  0C00  0086               	movwf	6
 12192  0C01  3002               	movlw	2	; select bank4/5
 12193  0C02  0087               	movwf	7
 12194  0C03  3002               	movlw	2	; select bank4/5
 12195  0C04  3F57               	moviw [23]fsr1
 12196  0C05  0020               	movlb	0	; select bank0
 12197  0C06  00A1               	movwf	setMemory_Data@data
 12198  0C07  3005               	movlw	5
 12199  0C08  319C  2454  318B   	fcall	_setMemory_Data
 12200                           
 12201                           ;MCU_B1.c: 1063: if (myMain.SaveDimmer == 1) {
 12202  0C0B  0021               	movlb	1	; select bank1
 12203  0C0C  1EB8               	btfss	(_myMain^(0+128)+10),5
 12204  0C0D  2C18               	goto	l7330
 12205                           
 12206                           ;MCU_B1.c: 1064: myMain.SaveDimmer = 0;
 12207  0C0E  12B8               	bcf	(_myMain^(0+128)+10),5
 12208                           
 12209                           ;MCU_B1.c: 1065: setMemory_Data(30, 0xaa);
 12210  0C0F  30AA               	movlw	170
 12211  0C10  0020               	movlb	0	; select bank0
 12212  0C11  00A5               	movwf	??_Flash_Memory_Modify
 12213  0C12  0825               	movf	??_Flash_Memory_Modify,w
 12214  0C13  00A1               	movwf	setMemory_Data@data
 12215  0C14  301E               	movlw	30
 12216  0C15  319C  2454  318B   	fcall	_setMemory_Data
 12217  0C18                     l7330:	
 12218                           
 12219                           ;MCU_B1.c: 1066: }
 12220                           ;MCU_B1.c: 1068: if (Memory.LoopSave == 1) {
 12221  0C18  0023               	movlb	3	; select bank3
 12222  0C19  1D62               	btfss	(_Memory^(0+384)+36),2
 12223  0C1A  2C1F               	goto	l1265
 12224                           
 12225                           ;MCU_B1.c: 1069: Memory.LoopSave = 0;
 12226  0C1B  1162               	bcf	(_Memory^(0+384)+36),2
 12227                           
 12228                           ;MCU_B1.c: 1070: myMain.FirstOpen = 0;
 12229  0C1C  0021               	movlb	1	; select bank1
 12230  0C1D  11AE               	bcf	_myMain^(0+128),3
 12231                           
 12232                           ;MCU_B1.c: 1071: myMain.First = 0;
 12233  0C1E  12AE               	bcf	_myMain^(0+128),5
 12234  0C1F                     l1265:	
 12235                           
 12236                           ;MCU_B1.c: 1073: }
 12237                           ;MCU_B1.c: 1074: GIE = 0;
 12238  0C1F  138B               	bcf	11,7	;volatile
 12239                           
 12240                           ;MCU_B1.c: 1075: Flash_Memory_Erasing();
 12241  0C20  319C  2460  318B   	fcall	_Flash_Memory_Erasing
 12242                           
 12243                           ;MCU_B1.c: 1076: Flash_Memory_Write();
 12244  0C23  3191  2141         	fcall	_Flash_Memory_Write
 12245                           
 12246                           ;MCU_B1.c: 1077: GIE = 1;
 12247  0C25  178B               	bsf	11,7	;volatile
 12248  0C26  0008               	return
 12249  0C27                     __end_of_Flash_Memory_Modify:	
 12250                           
 12251                           	psect	text78
 12252  1C60                     __ptext78:	
 12253 ;; *************** function _Flash_Memory_Erasing *****************
 12254 ;; Defined at:
 12255 ;;		line 1040 in file "../src/MCU_B1.c"
 12256 ;; Parameters:    Size  Location     Type
 12257 ;;		None
 12258 ;; Auto vars:     Size  Location     Type
 12259 ;;		None
 12260 ;; Return value:  Size  Location     Type
 12261 ;;		None               void
 12262 ;; Registers used:
 12263 ;;		wreg, status,2, status,0, pclath, cstack
 12264 ;; Tracked objects:
 12265 ;;		On entry : 0/0
 12266 ;;		On exit  : 0/0
 12267 ;;		Unchanged: 0/0
 12268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;Total ram usage:        0 bytes
 12274 ;; Hardware stack levels used:    1
 12275 ;; Hardware stack levels required when called:    6
 12276 ;; This function calls:
 12277 ;;		_Flash_Memory_Unlock
 12278 ;; This function is called by:
 12279 ;;		_Flash_Memory_Modify
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           
 12284                           ;psect for function _Flash_Memory_Erasing
 12285  1C60                     _Flash_Memory_Erasing:	
 12286                           
 12287                           ;MCU_B1.c: 1041: CFGS = 0;
 12288                           
 12289                           ;incstack = 0
 12290                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12291  1C60  0023               	movlb	3	; select bank3
 12292  1C61  1315               	bcf	21,6	;volatile
 12293                           
 12294                           ;MCU_B1.c: 1042: PMADRH = 0x30;
 12295  1C62  3030               	movlw	48
 12296  1C63  0092               	movwf	18	;volatile
 12297                           
 12298                           ;MCU_B1.c: 1043: PMADRL = 0x00;
 12299  1C64  0191               	clrf	17	;volatile
 12300                           
 12301                           ;MCU_B1.c: 1044: FREE = 1;
 12302  1C65  1615               	bsf	21,4	;volatile
 12303                           
 12304                           ;MCU_B1.c: 1045: WREN = 1;
 12305  1C66  1515               	bsf	21,2	;volatile
 12306                           
 12307                           ;MCU_B1.c: 1046: Flash_Memory_Unlock();
 12308  1C67  319B  23C2         	fcall	_Flash_Memory_Unlock
 12309                           
 12310                           ;MCU_B1.c: 1047: WREN = 0;
 12311  1C69  0023               	movlb	3	; select bank3
 12312  1C6A  1115               	bcf	21,2	;volatile
 12313  1C6B  0008               	return
 12314  1C6C                     __end_of_Flash_Memory_Erasing:	
 12315                           
 12316                           	psect	text79
 12317  0620                     __ptext79:	
 12318 ;; *************** function _Flash_Memory_Initialization *****************
 12319 ;; Defined at:
 12320 ;;		line 930 in file "../src/MCU_B1.c"
 12321 ;; Parameters:    Size  Location     Type
 12322 ;;		None
 12323 ;; Auto vars:     Size  Location     Type
 12324 ;;  value           1    6[BANK0 ] unsigned char 
 12325 ;; Return value:  Size  Location     Type
 12326 ;;		None               void
 12327 ;; Registers used:
 12328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12329 ;; Tracked objects:
 12330 ;;		On entry : 0/0
 12331 ;;		On exit  : 0/0
 12332 ;;		Unchanged: 0/0
 12333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;Total ram usage:        2 bytes
 12339 ;; Hardware stack levels used:    1
 12340 ;; Hardware stack levels required when called:    7
 12341 ;; This function calls:
 12342 ;;		_Flash_Memory_Read
 12343 ;;		_Flash_Memory_Write
 12344 ;;		_setMemory_Data
 12345 ;; This function is called by:
 12346 ;;		_main
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           
 12351                           ;psect for function _Flash_Memory_Initialization
 12352  0620                     _Flash_Memory_Initialization:	
 12353                           
 12354                           ;MCU_B1.c: 931: char value = 0;
 12355                           
 12356                           ;incstack = 0
 12357                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12358  0620  0020               	movlb	0	; select bank0
 12359  0621  01A6               	clrf	Flash_Memory_Initialization@value
 12360                           
 12361                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12362  0622  301F               	movlw	31
 12363  0623  319E  26E4  3186   	fcall	_Flash_Memory_Read
 12364  0626  3AAA               	xorlw	170
 12365  0627  1D03               	skipz
 12366  0628  2EA2               	goto	l7714
 12367                           
 12368                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12369  0629  3000               	movlw	0
 12370  062A  319E  26E4  3186   	fcall	_Flash_Memory_Read
 12371  062D  0020               	movlb	0	; select bank0
 12372  062E  00A5               	movwf	??_Flash_Memory_Initialization
 12373  062F  0021               	movlb	1	; select bank1
 12374  0630  086D               	movf	_product^(0+128),w
 12375  0631  3E0C               	addlw	12
 12376  0632  0086               	movwf	6
 12377  0633  3002               	movlw	2	; select bank4/5
 12378  0634  0087               	movwf	7
 12379  0635  0020               	movlb	0	; select bank0
 12380  0636  0825               	movf	??_Flash_Memory_Initialization,w
 12381  0637  0081               	movwf	1
 12382                           
 12383                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12384  0638  3001               	movlw	1
 12385  0639  319E  26E4  3186   	fcall	_Flash_Memory_Read
 12386  063C  0020               	movlb	0	; select bank0
 12387  063D  00A5               	movwf	??_Flash_Memory_Initialization
 12388  063E  0021               	movlb	1	; select bank1
 12389  063F  086D               	movf	_product^(0+128),w
 12390  0640  3E0D               	addlw	13
 12391  0641  0086               	movwf	6
 12392  0642  3002               	movlw	2	; select bank4/5
 12393  0643  0087               	movwf	7
 12394  0644  0020               	movlb	0	; select bank0
 12395  0645  0825               	movf	??_Flash_Memory_Initialization,w
 12396  0646  0081               	movwf	1
 12397                           
 12398                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12399  0647  3002               	movlw	2
 12400  0648  319E  26E4  3186   	fcall	_Flash_Memory_Read
 12401  064B  0020               	movlb	0	; select bank0
 12402  064C  00A5               	movwf	??_Flash_Memory_Initialization
 12403  064D  0021               	movlb	1	; select bank1
 12404  064E  086D               	movf	_product^(0+128),w
 12405  064F  3E0E               	addlw	14
 12406  0650  0086               	movwf	6
 12407  0651  3002               	movlw	2	; select bank4/5
 12408  0652  0087               	movwf	7
 12409  0653  0020               	movlb	0	; select bank0
 12410  0654  0825               	movf	??_Flash_Memory_Initialization,w
 12411  0655  0081               	movwf	1
 12412                           
 12413                           ;MCU_B1.c: 938: product->Data[21] = Flash_Memory_Read(3);
 12414  0656  3003               	movlw	3
 12415  0657  319E  26E4  3186   	fcall	_Flash_Memory_Read
 12416  065A  0020               	movlb	0	; select bank0
 12417  065B  00A5               	movwf	??_Flash_Memory_Initialization
 12418  065C  0021               	movlb	1	; select bank1
 12419  065D  086D               	movf	_product^(0+128),w
 12420  065E  3E15               	addlw	21
 12421  065F  0086               	movwf	6
 12422  0660  3002               	movlw	2	; select bank4/5
 12423  0661  0087               	movwf	7
 12424  0662  0020               	movlb	0	; select bank0
 12425  0663  0825               	movf	??_Flash_Memory_Initialization,w
 12426  0664  0081               	movwf	1
 12427                           
 12428                           ;MCU_B1.c: 939: product->Data[22] = Flash_Memory_Read(4);
 12429  0665  3004               	movlw	4
 12430  0666  319E  26E4  3186   	fcall	_Flash_Memory_Read
 12431  0669  0020               	movlb	0	; select bank0
 12432  066A  00A5               	movwf	??_Flash_Memory_Initialization
 12433  066B  0021               	movlb	1	; select bank1
 12434  066C  086D               	movf	_product^(0+128),w
 12435  066D  3E16               	addlw	22
 12436  066E  0086               	movwf	6
 12437  066F  3002               	movlw	2	; select bank4/5
 12438  0670  0087               	movwf	7
 12439  0671  0020               	movlb	0	; select bank0
 12440  0672  0825               	movf	??_Flash_Memory_Initialization,w
 12441  0673  0081               	movwf	1
 12442                           
 12443                           ;MCU_B1.c: 940: product->Data[23] = Flash_Memory_Read(5);
 12444  0674  3005               	movlw	5
 12445  0675  319E  26E4  3186   	fcall	_Flash_Memory_Read
 12446  0678  0020               	movlb	0	; select bank0
 12447  0679  00A5               	movwf	??_Flash_Memory_Initialization
 12448  067A  0021               	movlb	1	; select bank1
 12449  067B  086D               	movf	_product^(0+128),w
 12450  067C  3E17               	addlw	23
 12451  067D  0086               	movwf	6
 12452  067E  3002               	movlw	2	; select bank4/5
 12453  067F  0087               	movwf	7
 12454  0680  0020               	movlb	0	; select bank0
 12455  0681  0825               	movf	??_Flash_Memory_Initialization,w
 12456  0682  0081               	movwf	1
 12457                           
 12458                           ;MCU_B1.c: 947: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12459  0683  0021               	movlb	1	; select bank1
 12460  0684  086D               	movf	_product^(0+128),w
 12461  0685  3E0C               	addlw	12
 12462  0686  0086               	movwf	6
 12463  0687  3002               	movlw	2	; select bank4/5
 12464  0688  0087               	movwf	7
 12465  0689  0801               	movf	1,w
 12466  068A  3AFF               	xorlw	255
 12467  068B  1D03               	skipz
 12468  068C  0008               	return
 12469  068D  086D               	movf	_product^(0+128),w
 12470  068E  3E0D               	addlw	13
 12471  068F  0086               	movwf	6
 12472  0690  3002               	movlw	2	; select bank4/5
 12473  0691  0087               	movwf	7
 12474  0692  0801               	movf	1,w
 12475  0693  3AFF               	xorlw	255
 12476  0694  1D03               	skipz
 12477  0695  0008               	return
 12478  0696  086D               	movf	_product^(0+128),w
 12479  0697  3E0E               	addlw	14
 12480  0698  0086               	movwf	6
 12481  0699  3002               	movlw	2	; select bank4/5
 12482  069A  0087               	movwf	7
 12483  069B  0801               	movf	1,w
 12484  069C  3AFF               	xorlw	255
 12485  069D  1D03               	skipz
 12486  069E  0008               	return
 12487                           
 12488                           ;MCU_B1.c: 948: myMain.FirstOpen = 1;
 12489  069F  15AE               	bsf	_myMain^(0+128),3
 12490                           
 12491                           ;MCU_B1.c: 949: myMain.First = 1;
 12492  06A0  16AE               	bsf	_myMain^(0+128),5
 12493                           
 12494                           ;MCU_B1.c: 950: }
 12495                           ;MCU_B1.c: 951: } else {
 12496  06A1  0008               	return
 12497  06A2                     l7714:	
 12498                           
 12499                           ;MCU_B1.c: 953: setMemory_Data(0, 0xff);
 12500  06A2  30FF               	movlw	255
 12501  06A3  0020               	movlb	0	; select bank0
 12502  06A4  00A5               	movwf	??_Flash_Memory_Initialization
 12503  06A5  0825               	movf	??_Flash_Memory_Initialization,w
 12504  06A6  00A1               	movwf	setMemory_Data@data
 12505  06A7  3000               	movlw	0
 12506  06A8  319C  2454  3186   	fcall	_setMemory_Data
 12507                           
 12508                           ;MCU_B1.c: 954: setMemory_Data(1, 0xff);
 12509  06AB  30FF               	movlw	255
 12510  06AC  0020               	movlb	0	; select bank0
 12511  06AD  00A5               	movwf	??_Flash_Memory_Initialization
 12512  06AE  0825               	movf	??_Flash_Memory_Initialization,w
 12513  06AF  00A1               	movwf	setMemory_Data@data
 12514  06B0  3001               	movlw	1
 12515  06B1  319C  2454  3186   	fcall	_setMemory_Data
 12516                           
 12517                           ;MCU_B1.c: 955: setMemory_Data(2, 0xff);
 12518  06B4  30FF               	movlw	255
 12519  06B5  0020               	movlb	0	; select bank0
 12520  06B6  00A5               	movwf	??_Flash_Memory_Initialization
 12521  06B7  0825               	movf	??_Flash_Memory_Initialization,w
 12522  06B8  00A1               	movwf	setMemory_Data@data
 12523  06B9  3002               	movlw	2
 12524  06BA  319C  2454  3186   	fcall	_setMemory_Data
 12525                           
 12526                           ;MCU_B1.c: 956: setMemory_Data(3, 0xff);
 12527  06BD  30FF               	movlw	255
 12528  06BE  0020               	movlb	0	; select bank0
 12529  06BF  00A5               	movwf	??_Flash_Memory_Initialization
 12530  06C0  0825               	movf	??_Flash_Memory_Initialization,w
 12531  06C1  00A1               	movwf	setMemory_Data@data
 12532  06C2  3003               	movlw	3
 12533  06C3  319C  2454  3186   	fcall	_setMemory_Data
 12534                           
 12535                           ;MCU_B1.c: 957: setMemory_Data(4, 0xff);
 12536  06C6  30FF               	movlw	255
 12537  06C7  0020               	movlb	0	; select bank0
 12538  06C8  00A5               	movwf	??_Flash_Memory_Initialization
 12539  06C9  0825               	movf	??_Flash_Memory_Initialization,w
 12540  06CA  00A1               	movwf	setMemory_Data@data
 12541  06CB  3004               	movlw	4
 12542  06CC  319C  2454  3186   	fcall	_setMemory_Data
 12543                           
 12544                           ;MCU_B1.c: 958: setMemory_Data(5, 0xff);
 12545  06CF  30FF               	movlw	255
 12546  06D0  0020               	movlb	0	; select bank0
 12547  06D1  00A5               	movwf	??_Flash_Memory_Initialization
 12548  06D2  0825               	movf	??_Flash_Memory_Initialization,w
 12549  06D3  00A1               	movwf	setMemory_Data@data
 12550  06D4  3005               	movlw	5
 12551  06D5  319C  2454  3186   	fcall	_setMemory_Data
 12552                           
 12553                           ;MCU_B1.c: 959: setMemory_Data(31, 0xaa);
 12554  06D8  30AA               	movlw	170
 12555  06D9  0020               	movlb	0	; select bank0
 12556  06DA  00A5               	movwf	??_Flash_Memory_Initialization
 12557  06DB  0825               	movf	??_Flash_Memory_Initialization,w
 12558  06DC  00A1               	movwf	setMemory_Data@data
 12559  06DD  301F               	movlw	31
 12560  06DE  319C  2454  3186   	fcall	_setMemory_Data
 12561                           
 12562                           ;MCU_B1.c: 964: GIE = 0;
 12563  06E1  138B               	bcf	11,7	;volatile
 12564                           
 12565                           ;MCU_B1.c: 965: Flash_Memory_Write();
 12566  06E2  3191  2141         	fcall	_Flash_Memory_Write
 12567                           
 12568                           ;MCU_B1.c: 966: GIE = 1;
 12569  06E4  178B               	bsf	11,7	;volatile
 12570                           
 12571                           ;MCU_B1.c: 967: myMain.FirstOpen = 1;
 12572  06E5  0021               	movlb	1	; select bank1
 12573  06E6  15AE               	bsf	_myMain^(0+128),3
 12574                           
 12575                           ;MCU_B1.c: 968: myMain.First = 1;
 12576  06E7  16AE               	bsf	_myMain^(0+128),5
 12577                           
 12578                           ;MCU_B1.c: 969: myMain.InitDimmer = 1;
 12579  06E8  1638               	bsf	(_myMain^(0+128)+10),4
 12580  06E9  0008               	return
 12581  06EA                     __end_of_Flash_Memory_Initialization:	
 12582                           
 12583                           	psect	text80
 12584  1C54                     __ptext80:	
 12585 ;; *************** function _setMemory_Data *****************
 12586 ;; Defined at:
 12587 ;;		line 1092 in file "../src/MCU_B1.c"
 12588 ;; Parameters:    Size  Location     Type
 12589 ;;  address         1    wreg     unsigned char 
 12590 ;;  data            1    1[BANK0 ] unsigned char 
 12591 ;; Auto vars:     Size  Location     Type
 12592 ;;  address         1    3[BANK0 ] unsigned char 
 12593 ;; Return value:  Size  Location     Type
 12594 ;;		None               void
 12595 ;; Registers used:
 12596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12597 ;; Tracked objects:
 12598 ;;		On entry : 0/0
 12599 ;;		On exit  : 0/0
 12600 ;;		Unchanged: 0/0
 12601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12602 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;Total ram usage:        3 bytes
 12607 ;; Hardware stack levels used:    1
 12608 ;; Hardware stack levels required when called:    5
 12609 ;; This function calls:
 12610 ;;		Nothing
 12611 ;; This function is called by:
 12612 ;;		_Flash_Memory_Initialization
 12613 ;;		_Flash_Memory_Modify
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           
 12618                           ;psect for function _setMemory_Data
 12619  1C54                     _setMemory_Data:	
 12620                           
 12621                           ;incstack = 0
 12622                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12623                           ;setMemory_Data@address stored from wreg
 12624  1C54  0020               	movlb	0	; select bank0
 12625  1C55  00A3               	movwf	setMemory_Data@address
 12626                           
 12627                           ;MCU_B1.c: 1093: Memory.Data[address] = data;
 12628  1C56  0821               	movf	setMemory_Data@data,w
 12629  1C57  00A2               	movwf	??_setMemory_Data
 12630  1C58  0823               	movf	setMemory_Data@address,w
 12631  1C59  3EBE               	addlw	_Memory& (0+255)
 12632  1C5A  0086               	movwf	6
 12633  1C5B  3001               	movlw	1	; select bank3/4
 12634  1C5C  0087               	movwf	7
 12635  1C5D  0822               	movf	??_setMemory_Data,w
 12636  1C5E  0081               	movwf	1
 12637  1C5F  0008               	return
 12638  1C60                     __end_of_setMemory_Data:	
 12639                           
 12640                           	psect	text81
 12641  1141                     __ptext81:	
 12642 ;; *************** function _Flash_Memory_Write *****************
 12643 ;; Defined at:
 12644 ;;		line 1021 in file "../src/MCU_B1.c"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;		None
 12647 ;; Auto vars:     Size  Location     Type
 12648 ;;  i               1    2[BANK0 ] unsigned char 
 12649 ;; Return value:  Size  Location     Type
 12650 ;;		None               void
 12651 ;; Registers used:
 12652 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12653 ;; Tracked objects:
 12654 ;;		On entry : 0/0
 12655 ;;		On exit  : 0/0
 12656 ;;		Unchanged: 0/0
 12657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;Total ram usage:        2 bytes
 12663 ;; Hardware stack levels used:    1
 12664 ;; Hardware stack levels required when called:    6
 12665 ;; This function calls:
 12666 ;;		_Flash_Memory_Unlock
 12667 ;; This function is called by:
 12668 ;;		_Flash_Memory_Initialization
 12669 ;;		_Flash_Memory_Modify
 12670 ;; This function uses a non-reentrant model
 12671 ;;
 12672                           
 12673                           
 12674                           ;psect for function _Flash_Memory_Write
 12675  1141                     _Flash_Memory_Write:	
 12676                           
 12677                           ;MCU_B1.c: 1022: char i = 0;
 12678                           
 12679                           ;incstack = 0
 12680                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12681  1141  0020               	movlb	0	; select bank0
 12682  1142  01A2               	clrf	Flash_Memory_Write@i
 12683                           
 12684                           ;MCU_B1.c: 1023: CFGS = 0;
 12685  1143  0023               	movlb	3	; select bank3
 12686  1144  1315               	bcf	21,6	;volatile
 12687                           
 12688                           ;MCU_B1.c: 1024: PMADRH = 0x30;
 12689  1145  3030               	movlw	48
 12690  1146  0092               	movwf	18	;volatile
 12691                           
 12692                           ;MCU_B1.c: 1025: PMDATH = 0;
 12693  1147  0194               	clrf	20	;volatile
 12694                           
 12695                           ;MCU_B1.c: 1026: FREE = 0;
 12696  1148  1215               	bcf	21,4	;volatile
 12697                           
 12698                           ;MCU_B1.c: 1027: LWLO = 1;
 12699  1149  1695               	bsf	21,5	;volatile
 12700                           
 12701                           ;MCU_B1.c: 1028: WREN = 1;
 12702  114A  1515               	bsf	21,2	;volatile
 12703                           
 12704                           ;MCU_B1.c: 1029: for (i = 0; i < 32; i++) {
 12705  114B  0020               	movlb	0	; select bank0
 12706  114C  01A2               	clrf	Flash_Memory_Write@i
 12707  114D  3020               	movlw	32
 12708  114E  0222               	subwf	Flash_Memory_Write@i,w
 12709  114F  1803               	btfsc	3,0
 12710  1150  2969               	goto	l1255
 12711  1151                     l6860:	
 12712                           
 12713                           ;MCU_B1.c: 1030: PMADRL = i;
 12714  1151  0822               	movf	Flash_Memory_Write@i,w
 12715  1152  0023               	movlb	3	; select bank3
 12716  1153  0091               	movwf	17	;volatile
 12717                           
 12718                           ;MCU_B1.c: 1031: PMDATL = Memory.Data[i];
 12719  1154  0020               	movlb	0	; select bank0
 12720  1155  0822               	movf	Flash_Memory_Write@i,w
 12721  1156  3EBE               	addlw	_Memory& (0+255)
 12722  1157  0086               	movwf	6
 12723  1158  3001               	movlw	1	; select bank3/4
 12724  1159  0087               	movwf	7
 12725  115A  0801               	movf	1,w
 12726  115B  0023               	movlb	3	; select bank3
 12727  115C  0093               	movwf	19	;volatile
 12728                           
 12729                           ;MCU_B1.c: 1032: Flash_Memory_Unlock();
 12730  115D  319B  23C2  3191   	fcall	_Flash_Memory_Unlock
 12731  1160  3001               	movlw	1
 12732  1161  0020               	movlb	0	; select bank0
 12733  1162  00A1               	movwf	??_Flash_Memory_Write
 12734  1163  0821               	movf	??_Flash_Memory_Write,w
 12735  1164  07A2               	addwf	Flash_Memory_Write@i,f
 12736  1165  3020               	movlw	32
 12737  1166  0222               	subwf	Flash_Memory_Write@i,w
 12738  1167  1C03               	skipc
 12739  1168  2951               	goto	l6860
 12740  1169                     l1255:	
 12741                           
 12742                           ;MCU_B1.c: 1033: }
 12743                           ;MCU_B1.c: 1034: LWLO = 0;
 12744  1169  0023               	movlb	3	; select bank3
 12745  116A  1295               	bcf	21,5	;volatile
 12746                           
 12747                           ;MCU_B1.c: 1035: Flash_Memory_Unlock();
 12748  116B  319B  23C2         	fcall	_Flash_Memory_Unlock
 12749                           
 12750                           ;MCU_B1.c: 1036: WREN = 0;
 12751  116D  0023               	movlb	3	; select bank3
 12752  116E  1115               	bcf	21,2	;volatile
 12753  116F  0008               	return
 12754  1170                     __end_of_Flash_Memory_Write:	
 12755                           
 12756                           	psect	text82
 12757  1BC2                     __ptext82:	
 12758 ;; *************** function _Flash_Memory_Unlock *****************
 12759 ;; Defined at:
 12760 ;;		line 1000 in file "../src/MCU_B1.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;		None
 12763 ;; Auto vars:     Size  Location     Type
 12764 ;;		None
 12765 ;; Return value:  Size  Location     Type
 12766 ;;		None               void
 12767 ;; Registers used:
 12768 ;;		wreg
 12769 ;; Tracked objects:
 12770 ;;		On entry : 0/0
 12771 ;;		On exit  : 0/0
 12772 ;;		Unchanged: 0/0
 12773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;Total ram usage:        0 bytes
 12779 ;; Hardware stack levels used:    1
 12780 ;; Hardware stack levels required when called:    5
 12781 ;; This function calls:
 12782 ;;		Nothing
 12783 ;; This function is called by:
 12784 ;;		_Flash_Memory_Write
 12785 ;;		_Flash_Memory_Erasing
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           
 12790                           ;psect for function _Flash_Memory_Unlock
 12791  1BC2                     _Flash_Memory_Unlock:	
 12792                           
 12793                           ;MCU_B1.c: 1001: PMCON2 = 0x55;
 12794                           
 12795                           ;incstack = 0
 12796                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12797  1BC2  3055               	movlw	85
 12798  1BC3  0023               	movlb	3	; select bank3
 12799  1BC4  0096               	movwf	22	;volatile
 12800                           
 12801                           ;MCU_B1.c: 1002: PMCON2 = 0xaa;
 12802  1BC5  30AA               	movlw	170
 12803  1BC6  0096               	movwf	22	;volatile
 12804                           
 12805                           ;MCU_B1.c: 1003: WR = 1;
 12806  1BC7  1495               	bsf	21,1	;volatile
 12807                           
 12808                           ;MCU_B1.c: 1004: __nop();
 12809  1BC8  0000               	nop
 12810                           
 12811                           ;MCU_B1.c: 1005: __nop();
 12812  1BC9  0000               	nop
 12813  1BCA  0008               	return
 12814  1BCB                     __end_of_Flash_Memory_Unlock:	
 12815                           
 12816                           	psect	text83
 12817  1EE4                     __ptext83:	
 12818 ;; *************** function _Flash_Memory_Read *****************
 12819 ;; Defined at:
 12820 ;;		line 1009 in file "../src/MCU_B1.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;  address         1    wreg     unsigned char 
 12823 ;; Auto vars:     Size  Location     Type
 12824 ;;  address         1    3[BANK0 ] unsigned char 
 12825 ;;  ret             1    4[BANK0 ] unsigned char 
 12826 ;;  i               1    2[BANK0 ] unsigned char 
 12827 ;; Return value:  Size  Location     Type
 12828 ;;                  1    wreg      unsigned char 
 12829 ;; Registers used:
 12830 ;;		wreg, status,2
 12831 ;; Tracked objects:
 12832 ;;		On entry : 0/0
 12833 ;;		On exit  : 0/0
 12834 ;;		Unchanged: 0/0
 12835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;Total ram usage:        4 bytes
 12841 ;; Hardware stack levels used:    1
 12842 ;; Hardware stack levels required when called:    5
 12843 ;; This function calls:
 12844 ;;		Nothing
 12845 ;; This function is called by:
 12846 ;;		_Flash_Memory_Initialization
 12847 ;;		_Flash_Memory_Modify
 12848 ;; This function uses a non-reentrant model
 12849 ;;
 12850                           
 12851                           
 12852                           ;psect for function _Flash_Memory_Read
 12853  1EE4                     _Flash_Memory_Read:	
 12854                           
 12855                           ;incstack = 0
 12856                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12857                           ;Flash_Memory_Read@address stored from wreg
 12858  1EE4  0020               	movlb	0	; select bank0
 12859  1EE5  00A3               	movwf	Flash_Memory_Read@address
 12860                           
 12861                           ;MCU_B1.c: 1010: char i = 0, ret = 0;
 12862  1EE6  01A2               	clrf	Flash_Memory_Read@i
 12863  1EE7  01A4               	clrf	Flash_Memory_Read@ret
 12864                           
 12865                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 12866  1EE8  3030               	movlw	48
 12867  1EE9  0023               	movlb	3	; select bank3
 12868  1EEA  0092               	movwf	18	;volatile
 12869                           
 12870                           ;MCU_B1.c: 1012: PMADRL = address;
 12871  1EEB  0020               	movlb	0	; select bank0
 12872  1EEC  0823               	movf	Flash_Memory_Read@address,w
 12873  1EED  0023               	movlb	3	; select bank3
 12874  1EEE  0091               	movwf	17	;volatile
 12875                           
 12876                           ;MCU_B1.c: 1013: CFGS = 0;
 12877  1EEF  1315               	bcf	21,6	;volatile
 12878                           
 12879                           ;MCU_B1.c: 1014: RD = 1;
 12880  1EF0  1415               	bsf	21,0	;volatile
 12881                           
 12882                           ;MCU_B1.c: 1015: i = PMDATH;
 12883  1EF1  0814               	movf	20,w	;volatile
 12884  1EF2  0020               	movlb	0	; select bank0
 12885  1EF3  00A1               	movwf	??_Flash_Memory_Read
 12886  1EF4  0821               	movf	??_Flash_Memory_Read,w
 12887  1EF5  00A2               	movwf	Flash_Memory_Read@i
 12888                           
 12889                           ;MCU_B1.c: 1016: ret = PMDATL;
 12890  1EF6  0023               	movlb	3	; select bank3
 12891  1EF7  0813               	movf	19,w	;volatile
 12892  1EF8  0020               	movlb	0	; select bank0
 12893  1EF9  00A1               	movwf	??_Flash_Memory_Read
 12894  1EFA  0821               	movf	??_Flash_Memory_Read,w
 12895  1EFB  00A4               	movwf	Flash_Memory_Read@ret
 12896                           
 12897                           ;MCU_B1.c: 1017: return ret;
 12898  1EFC  0824               	movf	Flash_Memory_Read@ret,w
 12899  1EFD  0008               	return
 12900  1EFE                     __end_of_Flash_Memory_Read:	
 12901                           
 12902                           	psect	text84
 12903  054B                     __ptext84:	
 12904 ;; *************** function _Exception_Main *****************
 12905 ;; Defined at:
 12906 ;;		line 499 in file "../src/Main_B1.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;		None
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;  i               2   20[BANK0 ] int 
 12911 ;;  i               2   18[BANK0 ] int 
 12912 ;;  lights          1   22[BANK0 ] unsigned char 
 12913 ;;  error           1   17[BANK0 ] unsigned char 
 12914 ;;  count           1   16[BANK0 ] unsigned char 
 12915 ;;  status          1   15[BANK0 ] unsigned char 
 12916 ;; Return value:  Size  Location     Type
 12917 ;;		None               void
 12918 ;; Registers used:
 12919 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12920 ;; Tracked objects:
 12921 ;;		On entry : 0/0
 12922 ;;		On exit  : 0/0
 12923 ;;		Unchanged: 0/0
 12924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12929 ;;Total ram usage:        9 bytes
 12930 ;; Hardware stack levels used:    1
 12931 ;; Hardware stack levels required when called:    7
 12932 ;; This function calls:
 12933 ;;		_getDimmerLights_Line
 12934 ;;		_getDimmerLights_Status
 12935 ;;		_getMain_All_Error_Status
 12936 ;;		_getMain_All_LightsStatus
 12937 ;;		_setBuz
 12938 ;;		_setDimmerLights_SwOff
 12939 ;;		_setLED
 12940 ;; This function is called by:
 12941 ;;		_main
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           
 12946                           ;psect for function _Exception_Main
 12947  054B                     _Exception_Main:	
 12948                           
 12949                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12950                           
 12951                           ;incstack = 0
 12952                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12953  054B  3000               	movlw	0
 12954  054C  3191  2170  3185   	fcall	_getMain_All_Error_Status
 12955  054F  0020               	movlb	0	; select bank0
 12956  0550  00AE               	movwf	??_Exception_Main
 12957  0551  082E               	movf	??_Exception_Main,w
 12958  0552  00B1               	movwf	Exception_Main@error
 12959                           
 12960                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12961  0553  01B6               	clrf	Exception_Main@lights
 12962  0554  01B0               	clrf	Exception_Main@count
 12963  0555  0AB0               	incf	Exception_Main@count,f
 12964                           
 12965                           ;Main_B1.c: 502: char status = 0;
 12966  0556  01AF               	clrf	Exception_Main@status
 12967                           
 12968                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12969  0557  0021               	movlb	1	; select bank1
 12970  0558  1DB8               	btfss	(_myMain^(0+128)+10),3
 12971  0559  2D69               	goto	l9526
 12972                           
 12973                           ;Main_B1.c: 505: if (error == 0) {
 12974  055A  0020               	movlb	0	; select bank0
 12975  055B  08B1               	movf	Exception_Main@error,f
 12976  055C  1D03               	skipz
 12977  055D  0008               	return
 12978                           
 12979                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12980  055E  0021               	movlb	1	; select bank1
 12981  055F  11B8               	bcf	(_myMain^(0+128)+10),3
 12982                           
 12983                           ;Main_B1.c: 509: setLED(99, 10);
 12984  0560  300A               	movlw	10
 12985  0561  0020               	movlb	0	; select bank0
 12986  0562  00AE               	movwf	??_Exception_Main
 12987  0563  082E               	movf	??_Exception_Main,w
 12988  0564  00A3               	movwf	setLED@command
 12989  0565  3063               	movlw	99
 12990  0566  3192  22B2         	fcall	_setLED
 12991                           
 12992                           ;Main_B1.c: 522: }
 12993                           ;Main_B1.c: 523: } else {
 12994  0568  0008               	return
 12995  0569                     l9526:	
 12996                           
 12997                           ;Main_B1.c: 524: if (error != 0) {
 12998  0569  0020               	movlb	0	; select bank0
 12999  056A  0831               	movf	Exception_Main@error,w
 13000  056B  1903               	btfsc	3,2
 13001  056C  0008               	return
 13002                           
 13003                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13004  056D  0021               	movlb	1	; select bank1
 13005  056E  15B8               	bsf	(_myMain^(0+128)+10),3
 13006                           
 13007                           ;Main_B1.c: 527: setLED(99, 11);
 13008  056F  300B               	movlw	11
 13009  0570  0020               	movlb	0	; select bank0
 13010  0571  00AE               	movwf	??_Exception_Main
 13011  0572  082E               	movf	??_Exception_Main,w
 13012  0573  00A3               	movwf	setLED@command
 13013  0574  3063               	movlw	99
 13014  0575  3192  22B2  3185   	fcall	_setLED
 13015                           
 13016                           ;Main_B1.c: 538: switch (error) {
 13017  0578  2E15               	goto	l9574
 13018  0579                     l9532:	
 13019                           ;Main_B1.c: 539: case 2:
 13020                           
 13021                           
 13022                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13023  0579  319B  23CB  3185   	fcall	_getMain_All_LightsStatus
 13024  057C  3A01               	xorlw	1
 13025  057D  1D03               	skipz
 13026  057E  2D88               	goto	l9536
 13027                           
 13028                           ;Main_B1.c: 547: setBuz(10, 300);
 13029  057F  302C               	movlw	44
 13030  0580  0020               	movlb	0	; select bank0
 13031  0581  00AA               	movwf	setBuz@time
 13032  0582  3001               	movlw	1
 13033  0583  00AB               	movwf	setBuz@time+1
 13034  0584  300A               	movlw	10
 13035  0585  3194  24F6  3185   	fcall	_setBuz
 13036  0588                     l9536:	
 13037                           
 13038                           ;Main_B1.c: 548: }
 13039                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13040  0588  0020               	movlb	0	; select bank0
 13041  0589  01B2               	clrf	Exception_Main@i
 13042  058A  01B3               	clrf	Exception_Main@i+1
 13043  058B                     l9546:	
 13044  058B  0833               	movf	Exception_Main@i+1,w
 13045  058C  3A80               	xorlw	128
 13046  058D  00AE               	movwf	??_Exception_Main
 13047  058E  3080               	movlw	128
 13048  058F  022E               	subwf	??_Exception_Main,w
 13049  0590  1D03               	skipz
 13050  0591  2D94               	goto	u11025
 13051  0592  0830               	movf	Exception_Main@count,w
 13052  0593  0232               	subwf	Exception_Main@i,w
 13053  0594                     u11025:	
 13054  0594  1803               	btfsc	3,0
 13055  0595  2DB6               	goto	u11020
 13056                           
 13057                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13058  0596  0020               	movlb	0	; select bank0
 13059  0597  0832               	movf	Exception_Main@i,w
 13060  0598  3E01               	addlw	1
 13061  0599  319C  24BE  3185   	fcall	_getDimmerLights_Status
 13062  059C  3A01               	xorlw	1
 13063  059D  1D03               	skipz
 13064  059E  2DB0               	goto	l9544
 13065                           
 13066                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13067  059F  0021               	movlb	1	; select bank1
 13068  05A0  084F               	movf	_DimmerLights^(0+128),w
 13069  05A1  0086               	movwf	6
 13070  05A2  3001               	movlw	1	; select bank2/3
 13071  05A3  0087               	movwf	7
 13072  05A4  1401               	bsf	1,0
 13073                           
 13074                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13075  05A5  0A4F               	incf	_DimmerLights^(0+128),w
 13076  05A6  0086               	movwf	6
 13077  05A7  3001               	movlw	1	; select bank2/3
 13078  05A8  0087               	movwf	7
 13079  05A9  1001               	bcf	1,0
 13080                           
 13081                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13082  05AA  0020               	movlb	0	; select bank0
 13083  05AB  0832               	movf	Exception_Main@i,w
 13084  05AC  3E01               	addlw	1
 13085  05AD  3192  2279  3185   	fcall	_setDimmerLights_SwOff
 13086  05B0                     l9544:	
 13087  05B0  3001               	movlw	1
 13088  05B1  0020               	movlb	0	; select bank0
 13089  05B2  07B2               	addwf	Exception_Main@i,f
 13090  05B3  3000               	movlw	0
 13091  05B4  3DB3               	addwfc	Exception_Main@i+1,f
 13092  05B5  2D8B               	goto	l9546
 13093  05B6                     u11020:	
 13094  05B6  0020               	movlb	0	; select bank0
 13095  05B7  0008               	return
 13096  05B8                     l9548:	
 13097                           ;Main_B1.c: 561: case 3:
 13098                           
 13099                           ;Main_B1.c: 556: }
 13100                           ;Main_B1.c: 557: }
 13101                           ;Main_B1.c: 560: break;
 13102                           
 13103                           
 13104                           ;Main_B1.c: 563: setBuz(5, 300);
 13105  05B8  302C               	movlw	44
 13106  05B9  0020               	movlb	0	; select bank0
 13107  05BA  00AA               	movwf	setBuz@time
 13108  05BB  3001               	movlw	1
 13109  05BC  00AB               	movwf	setBuz@time+1
 13110  05BD  3005               	movlw	5
 13111  05BE  3194  24F6  3185   	fcall	_setBuz
 13112                           
 13113                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13114  05C1  319B  23D5  3185   	fcall	_getDimmerLights_Line
 13115  05C4  0020               	movlb	0	; select bank0
 13116  05C5  00AE               	movwf	??_Exception_Main
 13117  05C6  082E               	movf	??_Exception_Main,w
 13118  05C7  00B6               	movwf	Exception_Main@lights
 13119                           
 13120                           ;Main_B1.c: 565: if (lights == 0) {
 13121  05C8  08B6               	movf	Exception_Main@lights,f
 13122  05C9  1D03               	skipz
 13123  05CA  2DFA               	goto	l9566
 13124                           
 13125                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13126  05CB  01B4               	clrf	Exception_Main@i_3580
 13127  05CC  01B5               	clrf	Exception_Main@i_3580+1
 13128  05CD                     l9564:	
 13129  05CD  0835               	movf	Exception_Main@i_3580+1,w
 13130  05CE  3A80               	xorlw	128
 13131  05CF  00AE               	movwf	??_Exception_Main
 13132  05D0  3080               	movlw	128
 13133  05D1  022E               	subwf	??_Exception_Main,w
 13134  05D2  1D03               	skipz
 13135  05D3  2DD6               	goto	u11055
 13136  05D4  0830               	movf	Exception_Main@count,w
 13137  05D5  0234               	subwf	Exception_Main@i_3580,w
 13138  05D6                     u11055:	
 13139  05D6  1803               	btfsc	3,0
 13140  05D7  2DF8               	goto	u11050
 13141                           
 13142                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13143  05D8  0020               	movlb	0	; select bank0
 13144  05D9  0834               	movf	Exception_Main@i_3580,w
 13145  05DA  3E01               	addlw	1
 13146  05DB  319C  24BE  3185   	fcall	_getDimmerLights_Status
 13147  05DE  3A01               	xorlw	1
 13148  05DF  1D03               	skipz
 13149  05E0  2DF2               	goto	l9562
 13150                           
 13151                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13152  05E1  0021               	movlb	1	; select bank1
 13153  05E2  084F               	movf	_DimmerLights^(0+128),w
 13154  05E3  0086               	movwf	6
 13155  05E4  3001               	movlw	1	; select bank2/3
 13156  05E5  0087               	movwf	7
 13157  05E6  1401               	bsf	1,0
 13158                           
 13159                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13160  05E7  0A4F               	incf	_DimmerLights^(0+128),w
 13161  05E8  0086               	movwf	6
 13162  05E9  3001               	movlw	1	; select bank2/3
 13163  05EA  0087               	movwf	7
 13164  05EB  1001               	bcf	1,0
 13165                           
 13166                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13167  05EC  0020               	movlb	0	; select bank0
 13168  05ED  0834               	movf	Exception_Main@i_3580,w
 13169  05EE  3E01               	addlw	1
 13170  05EF  3192  2279  3185   	fcall	_setDimmerLights_SwOff
 13171  05F2                     l9562:	
 13172  05F2  3001               	movlw	1
 13173  05F3  0020               	movlb	0	; select bank0
 13174  05F4  07B4               	addwf	Exception_Main@i_3580,f
 13175  05F5  3000               	movlw	0
 13176  05F6  3DB5               	addwfc	Exception_Main@i_3580+1,f
 13177  05F7  2DCD               	goto	l9564
 13178  05F8                     u11050:	
 13179  05F8  0020               	movlb	0	; select bank0
 13180  05F9  0008               	return
 13181  05FA                     l9566:	
 13182                           ;Main_B1.c: 573: }
 13183                           ;Main_B1.c: 574: }
 13184                           ;Main_B1.c: 575: } else {
 13185                           
 13186                           
 13187                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13188  05FA  0020               	movlb	0	; select bank0
 13189  05FB  0836               	movf	Exception_Main@lights,w
 13190  05FC  319C  24BE  3185   	fcall	_getDimmerLights_Status
 13191  05FF  3A01               	xorlw	1
 13192  0600  1903               	btfsc	3,2
 13193  0601  2E04               	goto	l9568
 13194  0602  0020               	movlb	0	; select bank0
 13195  0603  0008               	return
 13196  0604                     l9568:	
 13197                           
 13198                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13199  0604  0021               	movlb	1	; select bank1
 13200  0605  084F               	movf	_DimmerLights^(0+128),w
 13201  0606  0086               	movwf	6
 13202  0607  3001               	movlw	1	; select bank2/3
 13203  0608  0087               	movwf	7
 13204  0609  1401               	bsf	1,0
 13205                           
 13206                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13207  060A  0A4F               	incf	_DimmerLights^(0+128),w
 13208  060B  0086               	movwf	6
 13209  060C  3001               	movlw	1	; select bank2/3
 13210  060D  0087               	movwf	7
 13211  060E  1001               	bcf	1,0
 13212                           
 13213                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13214  060F  0020               	movlb	0	; select bank0
 13215  0610  0836               	movf	Exception_Main@lights,w
 13216  0611  3192  2279         	fcall	_setDimmerLights_SwOff
 13217  0613  0020               	movlb	0	; select bank0
 13218  0614  0008               	return
 13219  0615                     l9574:	
 13220                           ;Main_B1.c: 586: }
 13221                           
 13222                           ;Main_B1.c: 582: }
 13223                           ;Main_B1.c: 583: }
 13224                           ;Main_B1.c: 585: break;
 13225                           
 13226  0615  0020               	movlb	0	; select bank0
 13227  0616  0831               	movf	Exception_Main@error,w
 13228                           
 13229                           ; Switch size 1, requested type "space"
 13230                           ; Number of cases is 2, Range of values is 2 to 3
 13231                           ; switch strategies available:
 13232                           ; Name         Instructions Cycles
 13233                           ; simple_byte            7     4 (average)
 13234                           ; direct_byte           13     9 (fixed)
 13235                           ; jumptable            263     9 (fixed)
 13236                           ;	Chosen strategy is simple_byte
 13237  0617  3A02               	xorlw	2	; case 2
 13238  0618  1903               	skipnz
 13239  0619  2D79               	goto	l9532
 13240  061A  3A01               	xorlw	1	; case 3
 13241  061B  1903               	skipnz
 13242  061C  2DB8               	goto	l9548
 13243  061D  2E1F               	goto	l1497
 13244  061E  0008               	return
 13245  061F                     l1497:	
 13246  061F  0008               	return
 13247  0620                     __end_of_Exception_Main:	
 13248                           
 13249                           	psect	text85
 13250  1BD5                     __ptext85:	
 13251 ;; *************** function _getDimmerLights_Line *****************
 13252 ;; Defined at:
 13253 ;;		line 1015 in file "../src/Dimmer_B1.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;		None
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;  line            1    1[BANK0 ] unsigned char 
 13258 ;; Return value:  Size  Location     Type
 13259 ;;                  1    wreg      unsigned char 
 13260 ;; Registers used:
 13261 ;;		wreg, status,2
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;Total ram usage:        1 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    5
 13274 ;; This function calls:
 13275 ;;		Nothing
 13276 ;; This function is called by:
 13277 ;;		_Exception_Main
 13278 ;; This function uses a non-reentrant model
 13279 ;;
 13280                           
 13281                           
 13282                           ;psect for function _getDimmerLights_Line
 13283  1BD5                     _getDimmerLights_Line:	
 13284                           
 13285                           ;Dimmer_B1.c: 1016: char line = 0;
 13286                           
 13287                           ;incstack = 0
 13288                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13289  1BD5  0020               	movlb	0	; select bank0
 13290  1BD6  01A1               	clrf	getDimmerLights_Line@line
 13291                           
 13292                           ;Dimmer_B1.c: 1018: if (DimmerLights1.Line == 1) {
 13293  1BD7  0022               	movlb	2	; select bank2
 13294  1BD8  1CDD               	btfss	(_DimmerLights1^(0+256)+1),1
 13295  1BD9  2BDD               	goto	l7094
 13296                           
 13297                           ;Dimmer_B1.c: 1019: line = 1;
 13298  1BDA  0020               	movlb	0	; select bank0
 13299  1BDB  01A1               	clrf	getDimmerLights_Line@line
 13300  1BDC  0AA1               	incf	getDimmerLights_Line@line,f
 13301  1BDD                     l7094:	
 13302                           
 13303                           ;Dimmer_B1.c: 1020: }
 13304                           ;Dimmer_B1.c: 1032: return line;
 13305  1BDD  0020               	movlb	0	; select bank0
 13306  1BDE  0821               	movf	getDimmerLights_Line@line,w
 13307  1BDF  0008               	return
 13308  1BE0                     __end_of_getDimmerLights_Line:	
 13309                           
 13310                           	psect	text86
 13311  1F4D                     __ptext86:	
 13312 ;; *************** function _DimmerLights_Main *****************
 13313 ;; Defined at:
 13314 ;;		line 755 in file "../src/Dimmer_B1.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;		None
 13317 ;; Auto vars:     Size  Location     Type
 13318 ;;		None
 13319 ;; Return value:  Size  Location     Type
 13320 ;;		None               void
 13321 ;; Registers used:
 13322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13323 ;; Tracked objects:
 13324 ;;		On entry : 0/0
 13325 ;;		On exit  : 0/0
 13326 ;;		Unchanged: 0/0
 13327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;Total ram usage:        0 bytes
 13333 ;; Hardware stack levels used:    1
 13334 ;; Hardware stack levels required when called:   10
 13335 ;; This function calls:
 13336 ;;		_getLoad_OK
 13337 ;;		_getMain_All_Error_Status
 13338 ;;		_getMain_All_LightsStatus
 13339 ;;		_setDimmerLights_Main
 13340 ;; This function is called by:
 13341 ;;		_main
 13342 ;; This function uses a non-reentrant model
 13343 ;;
 13344                           
 13345                           
 13346                           ;psect for function _DimmerLights_Main
 13347  1F4D                     _DimmerLights_Main:	
 13348                           
 13349                           ;Dimmer_B1.c: 758: if (Dimmer.LoadGO == 1) {
 13350                           
 13351                           ;incstack = 0
 13352                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13353  1F4D  0022               	movlb	2	; select bank2
 13354  1F4E  1CAC               	btfss	_Dimmer^(0+256),1
 13355  1F4F  2F65               	goto	l9280
 13356                           
 13357                           ;Dimmer_B1.c: 759: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13358  1F50  319B  2398  319F   	fcall	_getLoad_OK
 13359  1F53  3A01               	xorlw	1
 13360  1F54  1903               	skipnz
 13361  1F55  2F63               	goto	l757
 13362  1F56  3000               	movlw	0
 13363  1F57  3191  2170  319F   	fcall	_getMain_All_Error_Status
 13364  1F5A  3800               	iorlw	0
 13365  1F5B  1D03               	skipz
 13366  1F5C  2F63               	goto	l757
 13367  1F5D  319B  23CB  319F   	fcall	_getMain_All_LightsStatus
 13368  1F60  3800               	iorlw	0
 13369  1F61  1D03               	skipz
 13370  1F62  2F65               	goto	l9280
 13371  1F63                     l757:	
 13372                           
 13373                           ;Dimmer_B1.c: 760: Dimmer.LoadGO = 0;
 13374  1F63  0022               	movlb	2	; select bank2
 13375  1F64  10AC               	bcf	_Dimmer^(0+256),1
 13376  1F65                     l9280:	
 13377                           
 13378                           ;Dimmer_B1.c: 761: }
 13379                           ;Dimmer_B1.c: 762: }
 13380                           ;Dimmer_B1.c: 766: setDimmerLights_Main(1);
 13381  1F65  3001               	movlw	1
 13382  1F66  3197  2798         	fcall	_setDimmerLights_Main
 13383  1F68  0008               	return
 13384  1F69                     __end_of_DimmerLights_Main:	
 13385                           
 13386                           	psect	text87
 13387  1798                     __ptext87:	
 13388 ;; *************** function _setDimmerLights_Main *****************
 13389 ;; Defined at:
 13390 ;;		line 784 in file "../src/Dimmer_B1.c"
 13391 ;; Parameters:    Size  Location     Type
 13392 ;;  lights          1    wreg     unsigned char 
 13393 ;; Auto vars:     Size  Location     Type
 13394 ;;  lights          1    4[BANK1 ] unsigned char 
 13395 ;; Return value:  Size  Location     Type
 13396 ;;		None               void
 13397 ;; Registers used:
 13398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13399 ;; Tracked objects:
 13400 ;;		On entry : 0/0
 13401 ;;		On exit  : 0/0
 13402 ;;		Unchanged: 0/0
 13403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13405 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13407 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;Total ram usage:        1 bytes
 13409 ;; Hardware stack levels used:    1
 13410 ;; Hardware stack levels required when called:    9
 13411 ;; This function calls:
 13412 ;;		_DimmerLights_SelectPointer
 13413 ;;		_getDimmerLights_Allow_Condition
 13414 ;;		_getMain_All_LightsStatus
 13415 ;;		_setDimmerLights_Dimming
 13416 ;;		_setDimmerLights_OnOff
 13417 ;; This function is called by:
 13418 ;;		_DimmerLights_Main
 13419 ;; This function uses a non-reentrant model
 13420 ;;
 13421                           
 13422                           
 13423                           ;psect for function _setDimmerLights_Main
 13424  1798                     _setDimmerLights_Main:	
 13425                           
 13426                           ;incstack = 0
 13427                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13428                           ;setDimmerLights_Main@lights stored from wreg
 13429  1798  0021               	movlb	1	; select bank1
 13430  1799  00E9               	movwf	setDimmerLights_Main@lights^(0+128)
 13431                           
 13432                           ;Dimmer_B1.c: 786: DimmerLights_SelectPointer(lights);
 13433  179A  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13434  179B  319C  2418  3197   	fcall	_DimmerLights_SelectPointer
 13435                           
 13436                           ;Dimmer_B1.c: 787: if (DimmerLights->Trigger == 1) {
 13437  179E  0021               	movlb	1	; select bank1
 13438  179F  084F               	movf	_DimmerLights^(0+128),w
 13439  17A0  0086               	movwf	6
 13440  17A1  3001               	movlw	1	; select bank2/3
 13441  17A2  0087               	movwf	7
 13442  17A3  1C81               	btfss	1,1
 13443  17A4  2FC4               	goto	l9012
 13444                           
 13445                           ;Dimmer_B1.c: 788: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13446  17A5  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13447  17A6  319E  2656  3197   	fcall	_getDimmerLights_Allow_Condition
 13448  17A9  3800               	iorlw	0
 13449  17AA  1D03               	skipz
 13450  17AB  0008               	return
 13451                           
 13452                           ;Dimmer_B1.c: 789: DimmerLights->Trigger = 0;
 13453  17AC  0021               	movlb	1	; select bank1
 13454  17AD  084F               	movf	_DimmerLights^(0+128),w
 13455  17AE  0086               	movwf	6
 13456  17AF  3001               	movlw	1	; select bank2/3
 13457  17B0  0087               	movwf	7
 13458  17B1  1081               	bcf	1,1
 13459                           
 13460                           ;Dimmer_B1.c: 790: if (DimmerLights->Switch == 1) {
 13461  17B2  084F               	movf	_DimmerLights^(0+128),w
 13462  17B3  0086               	movwf	6
 13463  17B4  3001               	movlw	1	; select bank2/3
 13464  17B5  0087               	movwf	7
 13465  17B6  1D01               	btfss	1,2
 13466  17B7  2FBE               	goto	l9010
 13467                           
 13468                           ;Dimmer_B1.c: 791: setDimmerLights_OnOff(lights, 1);
 13469  17B8  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13470  17B9  0AE5               	incf	setDimmerLights_OnOff@command^(0+128),f
 13471  17BA  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13472  17BB  3186  26EA         	fcall	_setDimmerLights_OnOff
 13473                           
 13474                           ;Dimmer_B1.c: 792: } else {
 13475  17BD  0008               	return
 13476  17BE                     l9010:	
 13477                           
 13478                           ;Dimmer_B1.c: 793: setDimmerLights_OnOff(lights, 0);
 13479  17BE  0021               	movlb	1	; select bank1
 13480  17BF  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13481  17C0  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13482  17C1  3186  26EA         	fcall	_setDimmerLights_OnOff
 13483                           
 13484                           ;Dimmer_B1.c: 794: }
 13485                           ;Dimmer_B1.c: 795: }
 13486                           ;Dimmer_B1.c: 796: } else {
 13487  17C3  0008               	return
 13488  17C4                     l9012:	
 13489                           
 13490                           ;Dimmer_B1.c: 797: if (getMain_All_LightsStatus() == 1) {
 13491  17C4  319B  23CB  3197   	fcall	_getMain_All_LightsStatus
 13492  17C7  3A01               	xorlw	1
 13493  17C8  1D03               	skipz
 13494  17C9  2FF3               	goto	l9024
 13495                           
 13496                           ;Dimmer_B1.c: 798: if (DimmerLights->DimmingTrigger == 1) {
 13497  17CA  0021               	movlb	1	; select bank1
 13498  17CB  084F               	movf	_DimmerLights^(0+128),w
 13499  17CC  0086               	movwf	6
 13500  17CD  3001               	movlw	1	; select bank2/3
 13501  17CE  0087               	movwf	7
 13502  17CF  1E01               	btfss	1,4
 13503  17D0  0008               	return
 13504                           
 13505                           ;Dimmer_B1.c: 799: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13506  17D1  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13507  17D2  319E  2656  3197   	fcall	_getDimmerLights_Allow_Condition
 13508  17D5  3800               	iorlw	0
 13509  17D6  1D03               	skipz
 13510  17D7  0008               	return
 13511                           
 13512                           ;Dimmer_B1.c: 800: DimmerLights->DimmingTrigger = 0;
 13513  17D8  0021               	movlb	1	; select bank1
 13514  17D9  084F               	movf	_DimmerLights^(0+128),w
 13515  17DA  0086               	movwf	6
 13516  17DB  3001               	movlw	1	; select bank2/3
 13517  17DC  0087               	movwf	7
 13518  17DD  1201               	bcf	1,4
 13519                           
 13520                           ;Dimmer_B1.c: 801: if (DimmerLights->DimmingSwitch == 1) {
 13521  17DE  084F               	movf	_DimmerLights^(0+128),w
 13522  17DF  0086               	movwf	6
 13523  17E0  3001               	movlw	1	; select bank2/3
 13524  17E1  0087               	movwf	7
 13525  17E2  1E81               	btfss	1,5
 13526  17E3  2FEC               	goto	l9022
 13527                           
 13528                           ;Dimmer_B1.c: 802: setDimmerLights_Dimming(lights, 1);
 13529  17E4  0020               	movlb	0	; select bank0
 13530  17E5  01EB               	clrf	setDimmerLights_Dimming@status
 13531  17E6  0AEB               	incf	setDimmerLights_Dimming@status,f
 13532  17E7  0021               	movlb	1	; select bank1
 13533  17E8  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13534  17E9  3195  25AA         	fcall	_setDimmerLights_Dimming
 13535                           
 13536                           ;Dimmer_B1.c: 803: } else {
 13537  17EB  0008               	return
 13538  17EC                     l9022:	
 13539                           
 13540                           ;Dimmer_B1.c: 804: setDimmerLights_Dimming(lights, 0);
 13541  17EC  0020               	movlb	0	; select bank0
 13542  17ED  01EB               	clrf	setDimmerLights_Dimming@status
 13543  17EE  0021               	movlb	1	; select bank1
 13544  17EF  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13545  17F0  3195  25AA         	fcall	_setDimmerLights_Dimming
 13546                           
 13547                           ;Dimmer_B1.c: 805: }
 13548                           ;Dimmer_B1.c: 806: }
 13549                           ;Dimmer_B1.c: 807: }
 13550                           ;Dimmer_B1.c: 808: } else {
 13551  17F2  0008               	return
 13552  17F3                     l9024:	
 13553                           
 13554                           ;Dimmer_B1.c: 809: if (DimmerLights->DimmingTrigger == 1) {
 13555  17F3  0021               	movlb	1	; select bank1
 13556  17F4  084F               	movf	_DimmerLights^(0+128),w
 13557  17F5  0086               	movwf	6
 13558  17F6  3001               	movlw	1	; select bank2/3
 13559  17F7  0087               	movwf	7
 13560  17F8  1E01               	btfss	1,4
 13561  17F9  0008               	return
 13562                           
 13563                           ;Dimmer_B1.c: 810: DimmerLights->DimmingTrigger = 0;
 13564  17FA  084F               	movf	_DimmerLights^(0+128),w
 13565  17FB  0086               	movwf	6
 13566  17FC  3001               	movlw	1	; select bank2/3
 13567  17FD  0087               	movwf	7
 13568  17FE  1201               	bcf	1,4
 13569  17FF  0008               	return
 13570  1800                     __end_of_setDimmerLights_Main:	
 13571                           
 13572                           	psect	text88
 13573  06EA                     __ptext88:	
 13574 ;; *************** function _setDimmerLights_OnOff *****************
 13575 ;; Defined at:
 13576 ;;		line 818 in file "../src/Dimmer_B1.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;  lights          1    wreg     unsigned char 
 13579 ;;  command         1    0[BANK1 ] unsigned char 
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;  lights          1    3[BANK1 ] unsigned char 
 13582 ;; Return value:  Size  Location     Type
 13583 ;;		None               void
 13584 ;; Registers used:
 13585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13586 ;; Tracked objects:
 13587 ;;		On entry : 0/0
 13588 ;;		On exit  : 0/0
 13589 ;;		Unchanged: 0/0
 13590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13591 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;Total ram usage:        4 bytes
 13596 ;; Hardware stack levels used:    1
 13597 ;; Hardware stack levels required when called:    8
 13598 ;; This function calls:
 13599 ;;		_getCmd_Status
 13600 ;;		_getDelayOff_GO
 13601 ;;		_getDimmerLights_PercentToValue
 13602 ;;		_getMain_All_LightsStatus
 13603 ;;		_setCmd_Status
 13604 ;;		_setDelayOff_GO
 13605 ;;		_setDimmerIntr_ControlStatus
 13606 ;;		_setDimmerIntr_DimmingValue
 13607 ;;		_setDimmerIntr_Dimming_RF
 13608 ;;		_setDimmerIntr_MaxmumValue
 13609 ;;		_setDimmerLights_Line
 13610 ;;		_setLED
 13611 ;;		_setProductData
 13612 ;;		_setRF_DimmerLights
 13613 ;;		_setTxData
 13614 ;; This function is called by:
 13615 ;;		_setDimmerLights_Main
 13616 ;; This function uses a non-reentrant model
 13617 ;;
 13618                           
 13619                           
 13620                           ;psect for function _setDimmerLights_OnOff
 13621  06EA                     _setDimmerLights_OnOff:	
 13622                           
 13623                           ;incstack = 0
 13624                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13625                           ;setDimmerLights_OnOff@lights stored from wreg
 13626  06EA  0021               	movlb	1	; select bank1
 13627  06EB  00E8               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13628                           
 13629                           ;Dimmer_B1.c: 820: if (command == 1) {
 13630  06EC  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13631  06ED  3A01               	xorlw	1
 13632  06EE  1D03               	skipz
 13633  06EF  2F49               	goto	l8868
 13634                           
 13635                           ;Dimmer_B1.c: 821: setDimmerIntr_ControlStatus(lights, 1);
 13636  06F0  0020               	movlb	0	; select bank0
 13637  06F1  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13638  06F2  0AA1               	incf	setDimmerIntr_ControlStatus@command,f
 13639  06F3  0021               	movlb	1	; select bank1
 13640  06F4  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13641  06F5  319E  2682  3186   	fcall	_setDimmerIntr_ControlStatus
 13642                           
 13643                           ;Dimmer_B1.c: 824: Dimmer.Load_Status = 1;
 13644  06F8  0022               	movlb	2	; select bank2
 13645  06F9  152C               	bsf	_Dimmer^(0+256),2
 13646                           
 13647                           ;Dimmer_B1.c: 825: setDimmerLights_Line(lights);
 13648  06FA  0021               	movlb	1	; select bank1
 13649  06FB  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13650  06FC  319C  24CF  3186   	fcall	_setDimmerLights_Line
 13651                           
 13652                           ;Dimmer_B1.c: 831: setLED(lights, 0);
 13653  06FF  0020               	movlb	0	; select bank0
 13654  0700  01A3               	clrf	setLED@command
 13655  0701  0021               	movlb	1	; select bank1
 13656  0702  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13657  0703  3192  22B2  3186   	fcall	_setLED
 13658                           
 13659                           ;Dimmer_B1.c: 832: ;;
 13660                           ;Dimmer_B1.c: 852: if (DimmerLights->DimmingRun == 1) {
 13661  0706  0021               	movlb	1	; select bank1
 13662  0707  0A4F               	incf	_DimmerLights^(0+128),w
 13663  0708  0086               	movwf	6
 13664  0709  3001               	movlw	1	; select bank2/3
 13665  070A  0087               	movwf	7
 13666  070B  1F01               	btfss	1,6
 13667  070C  2F31               	goto	l8866
 13668                           
 13669                           ;Dimmer_B1.c: 853: DimmerLights->DimmingRun = 0;
 13670  070D  0A4F               	incf	_DimmerLights^(0+128),w
 13671  070E  0086               	movwf	6
 13672  070F  3001               	movlw	1	; select bank2/3
 13673  0710  0087               	movwf	7
 13674  0711  1301               	bcf	1,6
 13675                           
 13676                           ;Dimmer_B1.c: 854: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13677  0712  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13678  0713  3E14               	addlw	20
 13679  0714  076D               	addwf	_product^(0+128),w
 13680  0715  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13681  0716  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13682  0717  0086               	movwf	6
 13683  0718  3002               	movlw	2	; select bank4/5
 13684  0719  0087               	movwf	7
 13685  071A  0801               	movf	1,w
 13686  071B  3196  2669  3186   	fcall	_getDimmerLights_PercentToValue
 13687  071E  0021               	movlb	1	; select bank1
 13688  071F  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13689  0720  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13690  0721  0020               	movlb	0	; select bank0
 13691  0722  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13692  0723  0021               	movlb	1	; select bank1
 13693  0724  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13694  0725  319C  2430  3186   	fcall	_setDimmerIntr_MaxmumValue
 13695                           
 13696                           ;Dimmer_B1.c: 855: setDimmerIntr_Dimming_RF(lights, 1);
 13697  0728  0020               	movlb	0	; select bank0
 13698  0729  01A1               	clrf	setDimmerIntr_Dimming_RF@command
 13699  072A  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
 13700  072B  0021               	movlb	1	; select bank1
 13701  072C  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13702  072D  319E  269A  3186   	fcall	_setDimmerIntr_Dimming_RF
 13703                           
 13704                           ;Dimmer_B1.c: 856: } else {
 13705  0730  2F79               	goto	l8882
 13706  0731                     l8866:	
 13707                           
 13708                           ;Dimmer_B1.c: 857: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13709  0731  0021               	movlb	1	; select bank1
 13710  0732  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13711  0733  3E14               	addlw	20
 13712  0734  076D               	addwf	_product^(0+128),w
 13713  0735  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13714  0736  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13715  0737  0086               	movwf	6
 13716  0738  3002               	movlw	2	; select bank4/5
 13717  0739  0087               	movwf	7
 13718  073A  0801               	movf	1,w
 13719  073B  3196  2669  3186   	fcall	_getDimmerLights_PercentToValue
 13720  073E  0021               	movlb	1	; select bank1
 13721  073F  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13722  0740  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13723  0741  0020               	movlb	0	; select bank0
 13724  0742  00E3               	movwf	setDimmerIntr_DimmingValue@value
 13725  0743  0021               	movlb	1	; select bank1
 13726  0744  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13727  0745  319C  243C  3186   	fcall	_setDimmerIntr_DimmingValue
 13728                           
 13729                           ;Dimmer_B1.c: 860: }
 13730                           ;Dimmer_B1.c: 865: } else if (command == 0) {
 13731  0748  2F79               	goto	l8882
 13732  0749                     l8868:	
 13733  0749  0021               	movlb	1	; select bank1
 13734  074A  08E5               	movf	setDimmerLights_OnOff@command^(0+128),f
 13735  074B  1D03               	skipz
 13736  074C  2F79               	goto	l8882
 13737                           
 13738                           ;Dimmer_B1.c: 866: setDimmerIntr_ControlStatus(lights, 0);
 13739  074D  0020               	movlb	0	; select bank0
 13740  074E  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13741  074F  0021               	movlb	1	; select bank1
 13742  0750  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13743  0751  319E  2682  3186   	fcall	_setDimmerIntr_ControlStatus
 13744                           
 13745                           ;Dimmer_B1.c: 868: Dimmer.Load_Status = 0;
 13746  0754  0022               	movlb	2	; select bank2
 13747  0755  112C               	bcf	_Dimmer^(0+256),2
 13748                           
 13749                           ;Dimmer_B1.c: 869: setDimmerLights_Line(0);
 13750  0756  3000               	movlw	0
 13751  0757  319C  24CF  3186   	fcall	_setDimmerLights_Line
 13752                           
 13753                           ;Dimmer_B1.c: 873: if (getDelayOff_GO(lights) == 1) {
 13754  075A  0021               	movlb	1	; select bank1
 13755  075B  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13756  075C  319C  24E0  3186   	fcall	_getDelayOff_GO
 13757  075F  3A01               	xorlw	1
 13758  0760  1D03               	skipz
 13759  0761  2F6A               	goto	l781
 13760                           
 13761                           ;Dimmer_B1.c: 874: setDelayOff_GO(lights, 0, 0);
 13762  0762  0020               	movlb	0	; select bank0
 13763  0763  01E6               	clrf	setDelayOff_GO@command
 13764  0764  01E7               	clrf	setDelayOff_GO@value
 13765  0765  0021               	movlb	1	; select bank1
 13766  0766  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13767  0767  318C  24AE  3186   	fcall	_setDelayOff_GO
 13768  076A                     l781:	
 13769                           
 13770                           ;Dimmer_B1.c: 875: }
 13771                           ;Dimmer_B1.c: 880: setLED(lights, 1);
 13772  076A  0020               	movlb	0	; select bank0
 13773  076B  01A3               	clrf	setLED@command
 13774  076C  0AA3               	incf	setLED@command,f
 13775  076D  0021               	movlb	1	; select bank1
 13776  076E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13777  076F  3192  22B2  3186   	fcall	_setLED
 13778                           
 13779                           ;Dimmer_B1.c: 881: ;;
 13780                           ;Dimmer_B1.c: 885: if (lights == 1) {
 13781  0772  0021               	movlb	1	; select bank1
 13782  0773  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13783  0774  3A01               	xorlw	1
 13784  0775  1D03               	skipz
 13785  0776  2F79               	goto	l8882
 13786                           
 13787                           ;Dimmer_B1.c: 886: RB1 = 0;
 13788  0777  0020               	movlb	0	; select bank0
 13789  0778  108D               	bcf	13,1	;volatile
 13790  0779                     l8882:	
 13791                           
 13792                           ;Dimmer_B1.c: 888: }
 13793                           ;Dimmer_B1.c: 899: }
 13794                           ;Dimmer_B1.c: 902: setRF_DimmerLights(lights, command);
 13795  0779  0021               	movlb	1	; select bank1
 13796  077A  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13797  077B  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13798  077C  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13799  077D  0020               	movlb	0	; select bank0
 13800  077E  00E6               	movwf	setRF_DimmerLights@on
 13801  077F  0021               	movlb	1	; select bank1
 13802  0780  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13803  0781  3197  2733  3186   	fcall	_setRF_DimmerLights
 13804                           
 13805                           ;Dimmer_B1.c: 904: if (getCmd_Status(1) == 1) {
 13806  0784  3001               	movlw	1
 13807  0785  319D  2535  3186   	fcall	_getCmd_Status
 13808  0788  3A01               	xorlw	1
 13809  0789  1D03               	skipz
 13810  078A  2FA6               	goto	l8896
 13811                           
 13812                           ;Dimmer_B1.c: 905: if (getMain_All_LightsStatus() == 0) {
 13813  078B  319B  23CB  3186   	fcall	_getMain_All_LightsStatus
 13814  078E  3800               	iorlw	0
 13815  078F  1D03               	skipz
 13816  0790  0008               	return
 13817                           
 13818                           ;Dimmer_B1.c: 906: setCmd_Status(1, 0);
 13819  0791  0020               	movlb	0	; select bank0
 13820  0792  01A1               	clrf	setCmd_Status@cmd
 13821  0793  3001               	movlw	1
 13822  0794  319E  26B2  3186   	fcall	_setCmd_Status
 13823                           
 13824                           ;Dimmer_B1.c: 907: setProductData(11, 0);
 13825  0797  0020               	movlb	0	; select bank0
 13826  0798  01E3               	clrf	setProductData@value
 13827  0799  300B               	movlw	11
 13828  079A  319C  2424  3186   	fcall	_setProductData
 13829                           
 13830                           ;Dimmer_B1.c: 908: setProductData(17, 0);
 13831  079D  0020               	movlb	0	; select bank0
 13832  079E  01E3               	clrf	setProductData@value
 13833  079F  3011               	movlw	17
 13834  07A0  319C  2424  3186   	fcall	_setProductData
 13835                           
 13836                           ;Dimmer_B1.c: 909: setTxData();
 13837  07A3  318F  2745         	fcall	_setTxData
 13838                           
 13839                           ;Dimmer_B1.c: 910: }
 13840                           ;Dimmer_B1.c: 911: } else {
 13841  07A5  0008               	return
 13842  07A6                     l8896:	
 13843                           
 13844                           ;Dimmer_B1.c: 912: setTxData();
 13845  07A6  318F  2745         	fcall	_setTxData
 13846  07A8  0008               	return
 13847  07A9                     __end_of_setDimmerLights_OnOff:	
 13848                           
 13849                           	psect	text89
 13850  12B2                     __ptext89:	
 13851 ;; *************** function _setLED *****************
 13852 ;; Defined at:
 13853 ;;		line 81 in file "../src/LED_B1.c"
 13854 ;; Parameters:    Size  Location     Type
 13855 ;;  led             1    wreg     unsigned char 
 13856 ;;  command         1    3[BANK0 ] unsigned char 
 13857 ;; Auto vars:     Size  Location     Type
 13858 ;;  led             1    4[BANK0 ] unsigned char 
 13859 ;; Return value:  Size  Location     Type
 13860 ;;		None               void
 13861 ;; Registers used:
 13862 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13863 ;; Tracked objects:
 13864 ;;		On entry : 0/0
 13865 ;;		On exit  : 0/0
 13866 ;;		Unchanged: 0/0
 13867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13868 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;Total ram usage:        2 bytes
 13873 ;; Hardware stack levels used:    1
 13874 ;; Hardware stack levels required when called:    6
 13875 ;; This function calls:
 13876 ;;		_LedPointSelect
 13877 ;; This function is called by:
 13878 ;;		_setDimmerLights_OnOff
 13879 ;;		_setLED_Initialization
 13880 ;;		_Exception_Main
 13881 ;;		_setSw_Initialization
 13882 ;; This function uses a non-reentrant model
 13883 ;;
 13884                           
 13885                           
 13886                           ;psect for function _setLED
 13887  12B2                     _setLED:	
 13888                           
 13889                           ;incstack = 0
 13890                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13891                           ;setLED@led stored from wreg
 13892  12B2  0020               	movlb	0	; select bank0
 13893  12B3  00A4               	movwf	setLED@led
 13894                           
 13895                           ;LED_B1.c: 82: LedPointSelect(led);
 13896  12B4  0824               	movf	setLED@led,w
 13897  12B5  319C  2448  3192   	fcall	_LedPointSelect
 13898                           
 13899                           ;LED_B1.c: 83: if (command == 0) {
 13900  12B8  0020               	movlb	0	; select bank0
 13901  12B9  08A3               	movf	setLED@command,f
 13902  12BA  1D03               	skipz
 13903  12BB  2AC1               	goto	l6500
 13904                           
 13905                           ;LED_B1.c: 112: if (led == 99) {
 13906  12BC  0824               	movf	setLED@led,w
 13907  12BD  3A63               	xorlw	99
 13908  12BE  1D03               	skipz
 13909  12BF  2AC1               	goto	l6500
 13910                           
 13911                           ;LED_B1.c: 116: RB5 = 1;
 13912  12C0  168D               	bsf	13,5	;volatile
 13913  12C1                     l6500:	
 13914                           
 13915                           ;LED_B1.c: 118: }
 13916                           ;LED_B1.c: 120: }
 13917                           ;LED_B1.c: 121: if (command == 1) {
 13918  12C1  0823               	movf	setLED@command,w
 13919  12C2  3A01               	xorlw	1
 13920  12C3  1D03               	skipz
 13921  12C4  2ACA               	goto	l6506
 13922                           
 13923                           ;LED_B1.c: 150: if (led == 99) {
 13924  12C5  0824               	movf	setLED@led,w
 13925  12C6  3A63               	xorlw	99
 13926  12C7  1D03               	skipz
 13927  12C8  2ACA               	goto	l6506
 13928                           
 13929                           ;LED_B1.c: 154: RB5 = 0;
 13930  12C9  128D               	bcf	13,5	;volatile
 13931  12CA                     l6506:	
 13932                           
 13933                           ;LED_B1.c: 156: }
 13934                           ;LED_B1.c: 158: }
 13935                           ;LED_B1.c: 159: if (command == 10) {
 13936  12CA  0823               	movf	setLED@command,w
 13937  12CB  3A0A               	xorlw	10
 13938  12CC  1D03               	skipz
 13939  12CD  2AE0               	goto	l6514
 13940                           
 13941                           ;LED_B1.c: 160: LED->GO = 0;
 13942  12CE  0021               	movlb	1	; select bank1
 13943  12CF  0850               	movf	_LED^(0+128),w
 13944  12D0  0086               	movwf	6
 13945  12D1  3001               	movlw	1	; select bank2/3
 13946  12D2  0087               	movwf	7
 13947  12D3  1081               	bcf	1,1
 13948                           
 13949                           ;LED_B1.c: 161: LED->Time = 0;
 13950  12D4  0A50               	incf	_LED^(0+128),w
 13951  12D5  0086               	movwf	6
 13952  12D6  3001               	movlw	1	; select bank2/3
 13953  12D7  0087               	movwf	7
 13954  12D8  3000               	movlw	0
 13955  12D9  3FC0               	movwi [0]fsr1
 13956  12DA  3FC1               	movwi [1]fsr1
 13957                           
 13958                           ;LED_B1.c: 190: if (led == 99) {
 13959  12DB  0020               	movlb	0	; select bank0
 13960  12DC  0824               	movf	setLED@led,w
 13961  12DD  3A63               	xorlw	99
 13962  12DE  1903               	btfsc	3,2
 13963                           
 13964                           ;LED_B1.c: 194: RB5 = 1;
 13965  12DF  168D               	bsf	13,5	;volatile
 13966  12E0                     l6514:	
 13967                           
 13968                           ;LED_B1.c: 196: }
 13969                           ;LED_B1.c: 198: }
 13970                           ;LED_B1.c: 199: if (command == 11) {
 13971  12E0  0823               	movf	setLED@command,w
 13972  12E1  3A0B               	xorlw	11
 13973  12E2  1D03               	skipz
 13974  12E3  0008               	return
 13975                           
 13976                           ;LED_B1.c: 200: LED->GO = 1;
 13977  12E4  0021               	movlb	1	; select bank1
 13978  12E5  0850               	movf	_LED^(0+128),w
 13979  12E6  0086               	movwf	6
 13980  12E7  3001               	movlw	1	; select bank2/3
 13981  12E8  0087               	movwf	7
 13982  12E9  1481               	bsf	1,1
 13983  12EA  0008               	return
 13984  12EB                     __end_of_setLED:	
 13985                           
 13986                           	psect	text90
 13987  1C48                     __ptext90:	
 13988 ;; *************** function _LedPointSelect *****************
 13989 ;; Defined at:
 13990 ;;		line 7 in file "../src/LED_B1.c"
 13991 ;; Parameters:    Size  Location     Type
 13992 ;;  led             1    wreg     unsigned char 
 13993 ;; Auto vars:     Size  Location     Type
 13994 ;;  led             1    2[BANK0 ] unsigned char 
 13995 ;; Return value:  Size  Location     Type
 13996 ;;		None               void
 13997 ;; Registers used:
 13998 ;;		wreg
 13999 ;; Tracked objects:
 14000 ;;		On entry : 0/0
 14001 ;;		On exit  : 0/0
 14002 ;;		Unchanged: 0/0
 14003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14007 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14008 ;;Total ram usage:        2 bytes
 14009 ;; Hardware stack levels used:    1
 14010 ;; Hardware stack levels required when called:    5
 14011 ;; This function calls:
 14012 ;;		Nothing
 14013 ;; This function is called by:
 14014 ;;		_setLED_Initialization
 14015 ;;		_setLED
 14016 ;;		_setLED_Main
 14017 ;; This function uses a non-reentrant model
 14018 ;;
 14019                           
 14020                           
 14021                           ;psect for function _LedPointSelect
 14022  1C48                     _LedPointSelect:	
 14023                           
 14024                           ;incstack = 0
 14025                           ; Regs used in _LedPointSelect: [wreg]
 14026                           ;LedPointSelect@led stored from wreg
 14027  1C48  0020               	movlb	0	; select bank0
 14028  1C49  00A2               	movwf	LedPointSelect@led
 14029                           
 14030                           ;LED_B1.c: 24: if (led == 99) {
 14031  1C4A  0822               	movf	LedPointSelect@led,w
 14032  1C4B  3A63               	xorlw	99
 14033  1C4C  1D03               	skipz
 14034  1C4D  0008               	return
 14035                           
 14036                           ;LED_B1.c: 25: LED = &VarErrLED;
 14037  1C4E  3069               	movlw	_VarErrLED& (0+255)
 14038  1C4F  00A1               	movwf	??_LedPointSelect
 14039  1C50  0821               	movf	??_LedPointSelect,w
 14040  1C51  0021               	movlb	1	; select bank1
 14041  1C52  00D0               	movwf	_LED^(0+128)
 14042  1C53  0008               	return
 14043  1C54                     __end_of_LedPointSelect:	
 14044                           
 14045                           	psect	text91
 14046  1E9A                     __ptext91:	
 14047 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14048 ;; Defined at:
 14049 ;;		line 203 in file "../src/Dimmer_B1.c"
 14050 ;; Parameters:    Size  Location     Type
 14051 ;;  lights          1    wreg     unsigned char 
 14052 ;;  command         1    1[BANK0 ] unsigned char 
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;  lights          1    3[BANK0 ] unsigned char 
 14055 ;; Return value:  Size  Location     Type
 14056 ;;		None               void
 14057 ;; Registers used:
 14058 ;;		wreg, status,2, status,0
 14059 ;; Tracked objects:
 14060 ;;		On entry : 0/0
 14061 ;;		On exit  : 0/0
 14062 ;;		Unchanged: 0/0
 14063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14064 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;Total ram usage:        3 bytes
 14069 ;; Hardware stack levels used:    1
 14070 ;; Hardware stack levels required when called:    5
 14071 ;; This function calls:
 14072 ;;		Nothing
 14073 ;; This function is called by:
 14074 ;;		_setDimmerLights_OnOff
 14075 ;;		_setRFSW_AdjControl
 14076 ;; This function uses a non-reentrant model
 14077 ;;
 14078                           
 14079                           
 14080                           ;psect for function _setDimmerIntr_Dimming_RF
 14081  1E9A                     _setDimmerIntr_Dimming_RF:	
 14082                           
 14083                           ;incstack = 0
 14084                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14085                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14086  1E9A  0020               	movlb	0	; select bank0
 14087  1E9B  00A3               	movwf	setDimmerIntr_Dimming_RF@lights
 14088                           
 14089                           ;Dimmer_B1.c: 205: if (lights == 1) {
 14090  1E9C  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14091  1E9D  3A01               	xorlw	1
 14092  1E9E  1D03               	skipz
 14093  1E9F  0008               	return
 14094                           
 14095                           ;Dimmer_B1.c: 206: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14096  1EA0  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14097  1EA1  3A01               	xorlw	1
 14098  1EA2  3000               	movlw	0
 14099  1EA3  1903               	skipnz
 14100  1EA4  3001               	movlw	1
 14101  1EA5  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14102  1EA6  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14103  1EA7  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14104  1EA8  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14105  1EA9  0021               	movlb	1	; select bank1
 14106  1EAA  083B               	movf	_DimmerIntr1^(0+128),w
 14107  1EAB  0020               	movlb	0	; select bank0
 14108  1EAC  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14109  1EAD  39BF               	andlw	-65
 14110  1EAE  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14111  1EAF  0021               	movlb	1	; select bank1
 14112  1EB0  00BB               	movwf	_DimmerIntr1^(0+128)
 14113  1EB1  0008               	return
 14114  1EB2                     __end_of_setDimmerIntr_Dimming_RF:	
 14115                           
 14116                           	psect	text92
 14117  1C3C                     __ptext92:	
 14118 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14119 ;; Defined at:
 14120 ;;		line 68 in file "../src/Dimmer_B1.c"
 14121 ;; Parameters:    Size  Location     Type
 14122 ;;  lights          1    wreg     unsigned char 
 14123 ;;  value           1   67[BANK0 ] unsigned char 
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;  lights          1   69[BANK0 ] unsigned char 
 14126 ;; Return value:  Size  Location     Type
 14127 ;;		None               void
 14128 ;; Registers used:
 14129 ;;		wreg
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;Total ram usage:        3 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:    5
 14142 ;; This function calls:
 14143 ;;		Nothing
 14144 ;; This function is called by:
 14145 ;;		_setDimmerLights_OnOff
 14146 ;; This function uses a non-reentrant model
 14147 ;;
 14148                           
 14149                           
 14150                           ;psect for function _setDimmerIntr_DimmingValue
 14151  1C3C                     _setDimmerIntr_DimmingValue:	
 14152                           
 14153                           ;incstack = 0
 14154                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14155                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14156  1C3C  0020               	movlb	0	; select bank0
 14157  1C3D  00E5               	movwf	setDimmerIntr_DimmingValue@lights
 14158                           
 14159                           ;Dimmer_B1.c: 70: if (lights == 1) {
 14160  1C3E  0865               	movf	setDimmerIntr_DimmingValue@lights,w
 14161  1C3F  3A01               	xorlw	1
 14162  1C40  1D03               	skipz
 14163  1C41  0008               	return
 14164                           
 14165                           ;Dimmer_B1.c: 71: DimmerIntr1.DimmingValue = value;
 14166  1C42  0863               	movf	setDimmerIntr_DimmingValue@value,w
 14167  1C43  00E4               	movwf	??_setDimmerIntr_DimmingValue
 14168  1C44  0864               	movf	??_setDimmerIntr_DimmingValue,w
 14169  1C45  0021               	movlb	1	; select bank1
 14170  1C46  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 14171  1C47  0008               	return
 14172  1C48                     __end_of_setDimmerIntr_DimmingValue:	
 14173                           
 14174                           	psect	text93
 14175  1E82                     __ptext93:	
 14176 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14177 ;; Defined at:
 14178 ;;		line 50 in file "../src/Dimmer_B1.c"
 14179 ;; Parameters:    Size  Location     Type
 14180 ;;  lights          1    wreg     unsigned char 
 14181 ;;  command         1    1[BANK0 ] unsigned char 
 14182 ;; Auto vars:     Size  Location     Type
 14183 ;;  lights          1    3[BANK0 ] unsigned char 
 14184 ;; Return value:  Size  Location     Type
 14185 ;;		None               void
 14186 ;; Registers used:
 14187 ;;		wreg, status,2, status,0
 14188 ;; Tracked objects:
 14189 ;;		On entry : 0/0
 14190 ;;		On exit  : 0/0
 14191 ;;		Unchanged: 0/0
 14192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14193 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14195 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;Total ram usage:        3 bytes
 14198 ;; Hardware stack levels used:    1
 14199 ;; Hardware stack levels required when called:    5
 14200 ;; This function calls:
 14201 ;;		Nothing
 14202 ;; This function is called by:
 14203 ;;		_setDimmerLights_OnOff
 14204 ;; This function uses a non-reentrant model
 14205 ;;
 14206                           
 14207                           
 14208                           ;psect for function _setDimmerIntr_ControlStatus
 14209  1E82                     _setDimmerIntr_ControlStatus:	
 14210                           
 14211                           ;incstack = 0
 14212                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14213                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14214  1E82  0020               	movlb	0	; select bank0
 14215  1E83  00A3               	movwf	setDimmerIntr_ControlStatus@lights
 14216                           
 14217                           ;Dimmer_B1.c: 52: if (lights == 1) {
 14218  1E84  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14219  1E85  3A01               	xorlw	1
 14220  1E86  1D03               	skipz
 14221  1E87  0008               	return
 14222                           
 14223                           ;Dimmer_B1.c: 53: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14224  1E88  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14225  1E89  3A01               	xorlw	1
 14226  1E8A  3000               	movlw	0
 14227  1E8B  1903               	skipnz
 14228  1E8C  3001               	movlw	1
 14229  1E8D  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14230  1E8E  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14231  1E8F  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14232  1E90  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14233  1E91  0021               	movlb	1	; select bank1
 14234  1E92  083B               	movf	_DimmerIntr1^(0+128),w
 14235  1E93  0020               	movlb	0	; select bank0
 14236  1E94  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14237  1E95  39F7               	andlw	-9
 14238  1E96  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14239  1E97  0021               	movlb	1	; select bank1
 14240  1E98  00BB               	movwf	_DimmerIntr1^(0+128)
 14241  1E99  0008               	return
 14242  1E9A                     __end_of_setDimmerIntr_ControlStatus:	
 14243                           
 14244                           	psect	text94
 14245  0CAE                     __ptext94:	
 14246 ;; *************** function _setDelayOff_GO *****************
 14247 ;; Defined at:
 14248 ;;		line 87 in file "../src/DelayOff_B1.c"
 14249 ;; Parameters:    Size  Location     Type
 14250 ;;  sw              1    wreg     unsigned char 
 14251 ;;  command         1   70[BANK0 ] unsigned char 
 14252 ;;  value           1   71[BANK0 ] unsigned char 
 14253 ;; Auto vars:     Size  Location     Type
 14254 ;;  sw              1   77[BANK0 ] unsigned char 
 14255 ;;  k               1   76[BANK0 ] unsigned char 
 14256 ;;  j               1   75[BANK0 ] unsigned char 
 14257 ;;  i               1   74[BANK0 ] unsigned char 
 14258 ;; Return value:  Size  Location     Type
 14259 ;;		None               void
 14260 ;; Registers used:
 14261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14262 ;; Tracked objects:
 14263 ;;		On entry : 0/0
 14264 ;;		On exit  : 0/0
 14265 ;;		Unchanged: 0/0
 14266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14268 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;Total ram usage:        8 bytes
 14272 ;; Hardware stack levels used:    1
 14273 ;; Hardware stack levels required when called:    6
 14274 ;; This function calls:
 14275 ;;		_DelayOffPointSelect
 14276 ;;		___bmul
 14277 ;;		_setProductData
 14278 ;; This function is called by:
 14279 ;;		_setDimmerLights_OnOff
 14280 ;;		_setRFSW_Control
 14281 ;; This function uses a non-reentrant model
 14282 ;;
 14283                           
 14284                           
 14285                           ;psect for function _setDelayOff_GO
 14286  0CAE                     _setDelayOff_GO:	
 14287                           
 14288                           ;incstack = 0
 14289                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14290                           ;setDelayOff_GO@sw stored from wreg
 14291  0CAE  0020               	movlb	0	; select bank0
 14292  0CAF  00ED               	movwf	setDelayOff_GO@sw
 14293                           
 14294                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14295  0CB0  086D               	movf	setDelayOff_GO@sw,w
 14296  0CB1  319C  240C  318C   	fcall	_DelayOffPointSelect
 14297                           
 14298                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14299  0CB4  0020               	movlb	0	; select bank0
 14300  0CB5  0866               	movf	setDelayOff_GO@command,w
 14301  0CB6  3A01               	xorlw	1
 14302  0CB7  3000               	movlw	0
 14303  0CB8  1903               	skipnz
 14304  0CB9  3001               	movlw	1
 14305  0CBA  00E8               	movwf	??_setDelayOff_GO
 14306  0CBB  0021               	movlb	1	; select bank1
 14307  0CBC  084D               	movf	_DelayOff^(0+128),w
 14308  0CBD  0086               	movwf	6
 14309  0CBE  3001               	movlw	1	; select bank2/3
 14310  0CBF  0087               	movwf	7
 14311  0CC0  0020               	movlb	0	; select bank0
 14312  0CC1  0DE8               	rlf	??_setDelayOff_GO,f
 14313  0CC2  0801               	movf	1,w
 14314  0CC3  0668               	xorwf	??_setDelayOff_GO,w
 14315  0CC4  39FD               	andlw	-3
 14316  0CC5  0668               	xorwf	??_setDelayOff_GO,w
 14317  0CC6  0081               	movwf	1
 14318                           
 14319                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14320  0CC7  0021               	movlb	1	; select bank1
 14321  0CC8  084D               	movf	_DelayOff^(0+128),w
 14322  0CC9  3E02               	addlw	2
 14323  0CCA  0086               	movwf	6
 14324  0CCB  3001               	movlw	1	; select bank2/3
 14325  0CCC  0087               	movwf	7
 14326  0CCD  3000               	movlw	0
 14327  0CCE  3FC0               	movwi [0]fsr1
 14328  0CCF  3FC1               	movwi [1]fsr1
 14329                           
 14330                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14331  0CD0  084D               	movf	_DelayOff^(0+128),w
 14332  0CD1  3E04               	addlw	4
 14333  0CD2  0086               	movwf	6
 14334  0CD3  3001               	movlw	1	; select bank2/3
 14335  0CD4  0087               	movwf	7
 14336  0CD5  0181               	clrf	1
 14337                           
 14338                           ;DelayOff_B1.c: 94: if (command == 1) {
 14339  0CD6  0020               	movlb	0	; select bank0
 14340  0CD7  0866               	movf	setDelayOff_GO@command,w
 14341  0CD8  3A01               	xorlw	1
 14342  0CD9  1D03               	skipz
 14343  0CDA  2D30               	goto	l8632
 14344                           
 14345                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14346  0CDB  3005               	movlw	5
 14347  0CDC  00E8               	movwf	??_setDelayOff_GO
 14348  0CDD  0868               	movf	??_setDelayOff_GO,w
 14349  0CDE  00EA               	movwf	setDelayOff_GO@i
 14350  0CDF  01EB               	clrf	setDelayOff_GO@j
 14351  0CE0  01EC               	clrf	setDelayOff_GO@k
 14352                           
 14353                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14354  0CE1  300F               	movlw	15
 14355  0CE2  0567               	andwf	setDelayOff_GO@value,w
 14356  0CE3  00E8               	movwf	??_setDelayOff_GO
 14357  0CE4  0868               	movf	??_setDelayOff_GO,w
 14358  0CE5  3A05               	xorlw	5
 14359  0CE6  1903               	skipnz
 14360  0CE7  2CEC               	goto	l8618
 14361  0CE8  0867               	movf	setDelayOff_GO@value,w
 14362  0CE9  390F               	andlw	15
 14363  0CEA  1D03               	btfss	3,2
 14364  0CEB  2D1C               	goto	l8628
 14365  0CEC                     l8618:	
 14366  0CEC  3031               	movlw	49
 14367  0CED  0267               	subwf	setDelayOff_GO@value,w
 14368  0CEE  1803               	skipnc
 14369  0CEF  2D1C               	goto	l8628
 14370                           
 14371                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14372  0CF0  0867               	movf	setDelayOff_GO@value,w
 14373  0CF1  390F               	andlw	15
 14374  0CF2  00E8               	movwf	??_setDelayOff_GO
 14375  0CF3  0868               	movf	??_setDelayOff_GO,w
 14376  0CF4  00EB               	movwf	setDelayOff_GO@j
 14377                           
 14378                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14379  0CF5  0867               	movf	setDelayOff_GO@value,w
 14380  0CF6  00E8               	movwf	??_setDelayOff_GO
 14381  0CF7  3004               	movlw	4
 14382  0CF8                     u9435:	
 14383  0CF8  36E8               	lsrf	??_setDelayOff_GO,f
 14384  0CF9  0B89               	decfsz	9,f
 14385  0CFA  2CF8               	goto	u9435
 14386  0CFB  0868               	movf	??_setDelayOff_GO,w
 14387  0CFC  390F               	andlw	15
 14388  0CFD  00E9               	movwf	??_setDelayOff_GO+1
 14389  0CFE  0869               	movf	??_setDelayOff_GO+1,w
 14390  0CFF  00EC               	movwf	setDelayOff_GO@k
 14391                           
 14392                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14393  0D00  300A               	movlw	10
 14394  0D01  00E8               	movwf	??_setDelayOff_GO
 14395  0D02  0868               	movf	??_setDelayOff_GO,w
 14396  0D03  00A1               	movwf	___bmul@multiplicand
 14397  0D04  086C               	movf	setDelayOff_GO@k,w
 14398  0D05  319D  2547  318C   	fcall	___bmul
 14399  0D08  0020               	movlb	0	; select bank0
 14400  0D09  076B               	addwf	setDelayOff_GO@j,w
 14401  0D0A  00E9               	movwf	??_setDelayOff_GO+1
 14402  0D0B  0021               	movlb	1	; select bank1
 14403  0D0C  0A4D               	incf	_DelayOff^(0+128),w
 14404  0D0D  0086               	movwf	6
 14405  0D0E  3001               	movlw	1	; select bank2/3
 14406  0D0F  0087               	movwf	7
 14407  0D10  0020               	movlb	0	; select bank0
 14408  0D11  0869               	movf	??_setDelayOff_GO+1,w
 14409  0D12  0081               	movwf	1
 14410                           
 14411                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14412  0D13  0867               	movf	setDelayOff_GO@value,w
 14413  0D14  00E8               	movwf	??_setDelayOff_GO
 14414  0D15  0868               	movf	??_setDelayOff_GO,w
 14415  0D16  00E3               	movwf	setProductData@value
 14416  0D17  086D               	movf	setDelayOff_GO@sw,w
 14417  0D18  3E1A               	addlw	26
 14418  0D19  319C  2424         	fcall	_setProductData
 14419                           
 14420                           ;DelayOff_B1.c: 103: } else {
 14421  0D1B  0008               	return
 14422  0D1C                     l8628:	
 14423                           
 14424                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14425  0D1C  3005               	movlw	5
 14426  0D1D  0020               	movlb	0	; select bank0
 14427  0D1E  00E8               	movwf	??_setDelayOff_GO
 14428  0D1F  0021               	movlb	1	; select bank1
 14429  0D20  0A4D               	incf	_DelayOff^(0+128),w
 14430  0D21  0086               	movwf	6
 14431  0D22  3001               	movlw	1	; select bank2/3
 14432  0D23  0087               	movwf	7
 14433  0D24  0020               	movlb	0	; select bank0
 14434  0D25  0868               	movf	??_setDelayOff_GO,w
 14435  0D26  0081               	movwf	1
 14436                           
 14437                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14438  0D27  3005               	movlw	5
 14439  0D28  00E8               	movwf	??_setDelayOff_GO
 14440  0D29  0868               	movf	??_setDelayOff_GO,w
 14441  0D2A  00E3               	movwf	setProductData@value
 14442  0D2B  086D               	movf	setDelayOff_GO@sw,w
 14443  0D2C  3E1A               	addlw	26
 14444  0D2D  319C  2424         	fcall	_setProductData
 14445                           
 14446                           ;DelayOff_B1.c: 106: }
 14447                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14448  0D2F  0008               	return
 14449  0D30                     l8632:	
 14450  0D30  0020               	movlb	0	; select bank0
 14451  0D31  08E6               	movf	setDelayOff_GO@command,f
 14452  0D32  1D03               	skipz
 14453  0D33  0008               	return
 14454                           
 14455                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14456  0D34  01E3               	clrf	setProductData@value
 14457  0D35  086D               	movf	setDelayOff_GO@sw,w
 14458  0D36  3E1A               	addlw	26
 14459  0D37  319C  2424         	fcall	_setProductData
 14460  0D39  0008               	return
 14461  0D3A                     __end_of_setDelayOff_GO:	
 14462                           
 14463                           	psect	text95
 14464  1D47                     __ptext95:	
 14465 ;; *************** function ___bmul *****************
 14466 ;; Defined at:
 14467 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14468 ;; Parameters:    Size  Location     Type
 14469 ;;  multiplier      1    wreg     unsigned char 
 14470 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 14471 ;; Auto vars:     Size  Location     Type
 14472 ;;  multiplier      1    4[BANK0 ] unsigned char 
 14473 ;;  product         1    3[BANK0 ] unsigned char 
 14474 ;; Return value:  Size  Location     Type
 14475 ;;                  1    wreg      unsigned char 
 14476 ;; Registers used:
 14477 ;;		wreg, status,2, status,0
 14478 ;; Tracked objects:
 14479 ;;		On entry : 0/0
 14480 ;;		On exit  : 0/0
 14481 ;;		Unchanged: 0/0
 14482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14483 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14486 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;Total ram usage:        4 bytes
 14488 ;; Hardware stack levels used:    1
 14489 ;; Hardware stack levels required when called:    5
 14490 ;; This function calls:
 14491 ;;		Nothing
 14492 ;; This function is called by:
 14493 ;;		_setDelayOff_GO
 14494 ;;		_DelayTimejudge
 14495 ;; This function uses a non-reentrant model
 14496 ;;
 14497                           
 14498                           
 14499                           ;psect for function ___bmul
 14500  1D47                     ___bmul:	
 14501                           
 14502                           ;incstack = 0
 14503                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14504                           ;___bmul@multiplier stored from wreg
 14505  1D47  0020               	movlb	0	; select bank0
 14506  1D48  00A4               	movwf	___bmul@multiplier
 14507  1D49  01A3               	clrf	___bmul@product
 14508  1D4A                     l5772:	
 14509  1D4A  1C24               	btfss	___bmul@multiplier,0
 14510  1D4B  2D50               	goto	l5776
 14511  1D4C  0821               	movf	___bmul@multiplicand,w
 14512  1D4D  00A2               	movwf	??___bmul
 14513  1D4E  0822               	movf	??___bmul,w
 14514  1D4F  07A3               	addwf	___bmul@product,f
 14515  1D50                     l5776:	
 14516  1D50  1003               	clrc
 14517  1D51  0DA1               	rlf	___bmul@multiplicand,f
 14518  1D52  1003               	clrc
 14519  1D53  0CA4               	rrf	___bmul@multiplier,f
 14520  1D54  08A4               	movf	___bmul@multiplier,f
 14521  1D55  1D03               	skipz
 14522  1D56  2D4A               	goto	l5772
 14523  1D57  0823               	movf	___bmul@product,w
 14524  1D58  0008               	return
 14525  1D59                     __end_of___bmul:	
 14526                           
 14527                           	psect	text96
 14528  1EB2                     __ptext96:	
 14529 ;; *************** function _setCmd_Status *****************
 14530 ;; Defined at:
 14531 ;;		line 651 in file "../src/Main_B1.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;  number          1    wreg     unsigned char 
 14534 ;;  cmd             1    1[BANK0 ] unsigned char 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  number          1    3[BANK0 ] unsigned char 
 14537 ;; Return value:  Size  Location     Type
 14538 ;;		None               void
 14539 ;; Registers used:
 14540 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14541 ;; Tracked objects:
 14542 ;;		On entry : 0/0
 14543 ;;		On exit  : 0/0
 14544 ;;		Unchanged: 0/0
 14545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14546 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14550 ;;Total ram usage:        3 bytes
 14551 ;; Hardware stack levels used:    1
 14552 ;; Hardware stack levels required when called:    5
 14553 ;; This function calls:
 14554 ;;		Nothing
 14555 ;; This function is called by:
 14556 ;;		_setDimmerLights_OnOff
 14557 ;;		_setControl_Lights_Table
 14558 ;; This function uses a non-reentrant model
 14559 ;;
 14560                           
 14561                           
 14562                           ;psect for function _setCmd_Status
 14563  1EB2                     _setCmd_Status:	
 14564                           
 14565                           ;incstack = 0
 14566                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14567                           ;setCmd_Status@number stored from wreg
 14568  1EB2  0020               	movlb	0	; select bank0
 14569  1EB3  00A3               	movwf	setCmd_Status@number
 14570                           
 14571                           ;Main_B1.c: 652: switch (number) {
 14572  1EB4  2EC4               	goto	l6274
 14573  1EB5                     l6270:	
 14574                           ;Main_B1.c: 653: case 1:
 14575                           
 14576                           
 14577                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14578  1EB5  0821               	movf	setCmd_Status@cmd,w
 14579  1EB6  3A01               	xorlw	1
 14580  1EB7  3000               	movlw	0
 14581  1EB8  1903               	skipnz
 14582  1EB9  3001               	movlw	1
 14583  1EBA  00A2               	movwf	??_setCmd_Status
 14584  1EBB  0021               	movlb	1	; select bank1
 14585  1EBC  084C               	movf	_Cmd^(0+128),w
 14586  1EBD  0020               	movlb	0	; select bank0
 14587  1EBE  0622               	xorwf	??_setCmd_Status,w
 14588  1EBF  39FE               	andlw	-2
 14589  1EC0  0622               	xorwf	??_setCmd_Status,w
 14590  1EC1  0021               	movlb	1	; select bank1
 14591  1EC2  00CC               	movwf	_Cmd^(0+128)
 14592                           
 14593                           ;Main_B1.c: 656: }
 14594                           
 14595                           ;Main_B1.c: 655: break;
 14596  1EC3  0008               	return
 14597  1EC4                     l6274:	
 14598  1EC4  0020               	movlb	0	; select bank0
 14599  1EC5  0823               	movf	setCmd_Status@number,w
 14600                           
 14601                           ; Switch size 1, requested type "space"
 14602                           ; Number of cases is 1, Range of values is 1 to 1
 14603                           ; switch strategies available:
 14604                           ; Name         Instructions Cycles
 14605                           ; simple_byte            4     3 (average)
 14606                           ; direct_byte           11     9 (fixed)
 14607                           ; jumptable            263     9 (fixed)
 14608                           ;	Chosen strategy is simple_byte
 14609  1EC6  3A01               	xorlw	1	; case 1
 14610  1EC7  1903               	skipnz
 14611  1EC8  2EB5               	goto	l6270
 14612  1EC9  2ECA               	goto	l1506
 14613  1ECA                     l1506:	
 14614  1ECA  0008               	return
 14615  1ECB                     __end_of_setCmd_Status:	
 14616                           
 14617                           	psect	text97
 14618  1BCB                     __ptext97:	
 14619 ;; *************** function _getMain_All_LightsStatus *****************
 14620 ;; Defined at:
 14621 ;;		line 373 in file "../src/Main_B1.c"
 14622 ;; Parameters:    Size  Location     Type
 14623 ;;		None
 14624 ;; Auto vars:     Size  Location     Type
 14625 ;;  status          1    1[BANK0 ] unsigned char 
 14626 ;; Return value:  Size  Location     Type
 14627 ;;                  1    wreg      unsigned char 
 14628 ;; Registers used:
 14629 ;;		wreg, status,2
 14630 ;; Tracked objects:
 14631 ;;		On entry : 0/0
 14632 ;;		On exit  : 0/0
 14633 ;;		Unchanged: 0/0
 14634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14638 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;Total ram usage:        1 bytes
 14640 ;; Hardware stack levels used:    1
 14641 ;; Hardware stack levels required when called:    5
 14642 ;; This function calls:
 14643 ;;		Nothing
 14644 ;; This function is called by:
 14645 ;;		_DimmerLights_Main
 14646 ;;		_setDimmerLights_Main
 14647 ;;		_setDimmerLights_OnOff
 14648 ;;		_Flash_Memory_Main
 14649 ;;		_Exception_Main
 14650 ;;		_Load_Main
 14651 ;;		_setTemp_Main
 14652 ;;		_setControl_Lights_Table
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           
 14657                           ;psect for function _getMain_All_LightsStatus
 14658  1BCB                     _getMain_All_LightsStatus:	
 14659                           
 14660                           ;Main_B1.c: 374: char status = 0;
 14661                           
 14662                           ;incstack = 0
 14663                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14664  1BCB  0020               	movlb	0	; select bank0
 14665  1BCC  01A1               	clrf	getMain_All_LightsStatus@status
 14666                           
 14667                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14668  1BCD  3000               	movlw	0
 14669  1BCE  0022               	movlb	2	; select bank2
 14670  1BCF  185D               	btfsc	(_DimmerLights1^(0+256)+1),0
 14671  1BD0  3001               	movlw	1
 14672  1BD1  0020               	movlb	0	; select bank0
 14673  1BD2  00A1               	movwf	getMain_All_LightsStatus@status
 14674                           
 14675                           ;Main_B1.c: 420: return status;
 14676  1BD3  0821               	movf	getMain_All_LightsStatus@status,w
 14677  1BD4  0008               	return
 14678  1BD5                     __end_of_getMain_All_LightsStatus:	
 14679                           
 14680                           	psect	text98
 14681  1CE0                     __ptext98:	
 14682 ;; *************** function _getDelayOff_GO *****************
 14683 ;; Defined at:
 14684 ;;		line 114 in file "../src/DelayOff_B1.c"
 14685 ;; Parameters:    Size  Location     Type
 14686 ;;  sw              1    wreg     unsigned char 
 14687 ;; Auto vars:     Size  Location     Type
 14688 ;;  sw              1    3[BANK0 ] unsigned char 
 14689 ;;  go              1    4[BANK0 ] unsigned char 
 14690 ;; Return value:  Size  Location     Type
 14691 ;;                  1    wreg      unsigned char 
 14692 ;; Registers used:
 14693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14694 ;; Tracked objects:
 14695 ;;		On entry : 0/0
 14696 ;;		On exit  : 0/0
 14697 ;;		Unchanged: 0/0
 14698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;Total ram usage:        2 bytes
 14704 ;; Hardware stack levels used:    1
 14705 ;; Hardware stack levels required when called:    6
 14706 ;; This function calls:
 14707 ;;		_DelayOffPointSelect
 14708 ;; This function is called by:
 14709 ;;		_setDimmerLights_OnOff
 14710 ;; This function uses a non-reentrant model
 14711 ;;
 14712                           
 14713                           
 14714                           ;psect for function _getDelayOff_GO
 14715  1CE0                     _getDelayOff_GO:	
 14716                           
 14717                           ;incstack = 0
 14718                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14719                           ;getDelayOff_GO@sw stored from wreg
 14720  1CE0  0020               	movlb	0	; select bank0
 14721  1CE1  00A3               	movwf	getDelayOff_GO@sw
 14722                           
 14723                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14724  1CE2  0823               	movf	getDelayOff_GO@sw,w
 14725  1CE3  319C  240C         	fcall	_DelayOffPointSelect
 14726                           
 14727                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14728  1CE5  0021               	movlb	1	; select bank1
 14729  1CE6  084D               	movf	_DelayOff^(0+128),w
 14730  1CE7  0086               	movwf	6
 14731  1CE8  3001               	movlw	1	; select bank2/3
 14732  1CE9  0087               	movwf	7
 14733  1CEA  3000               	movlw	0
 14734  1CEB  1881               	btfsc	1,1
 14735  1CEC  3001               	movlw	1
 14736  1CED  0020               	movlb	0	; select bank0
 14737  1CEE  00A4               	movwf	getDelayOff_GO@go
 14738                           
 14739                           ;DelayOff_B1.c: 117: return go;
 14740  1CEF  0824               	movf	getDelayOff_GO@go,w
 14741  1CF0  0008               	return
 14742  1CF1                     __end_of_getDelayOff_GO:	
 14743                           
 14744                           	psect	text99
 14745  1D35                     __ptext99:	
 14746 ;; *************** function _getCmd_Status *****************
 14747 ;; Defined at:
 14748 ;;		line 659 in file "../src/Main_B1.c"
 14749 ;; Parameters:    Size  Location     Type
 14750 ;;  number          1    wreg     unsigned char 
 14751 ;; Auto vars:     Size  Location     Type
 14752 ;;  number          1    1[BANK0 ] unsigned char 
 14753 ;;  cmd             1    2[BANK0 ] unsigned char 
 14754 ;; Return value:  Size  Location     Type
 14755 ;;                  1    wreg      unsigned char 
 14756 ;; Registers used:
 14757 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14758 ;; Tracked objects:
 14759 ;;		On entry : 0/0
 14760 ;;		On exit  : 0/0
 14761 ;;		Unchanged: 0/0
 14762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;Total ram usage:        2 bytes
 14768 ;; Hardware stack levels used:    1
 14769 ;; Hardware stack levels required when called:    5
 14770 ;; This function calls:
 14771 ;;		Nothing
 14772 ;; This function is called by:
 14773 ;;		_setDimmerLights_OnOff
 14774 ;; This function uses a non-reentrant model
 14775 ;;
 14776                           
 14777                           
 14778                           ;psect for function _getCmd_Status
 14779  1D35                     _getCmd_Status:	
 14780                           
 14781                           ;incstack = 0
 14782                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14783                           ;getCmd_Status@number stored from wreg
 14784  1D35  0020               	movlb	0	; select bank0
 14785  1D36  00A1               	movwf	getCmd_Status@number
 14786                           
 14787                           ;Main_B1.c: 660: char cmd = 0;
 14788  1D37  01A2               	clrf	getCmd_Status@cmd
 14789                           
 14790                           ;Main_B1.c: 661: switch (number) {
 14791  1D38  2D40               	goto	l6524
 14792  1D39                     l6520:	
 14793                           ;Main_B1.c: 662: case 1:
 14794                           
 14795                           
 14796                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 14797  1D39  3000               	movlw	0
 14798  1D3A  0021               	movlb	1	; select bank1
 14799  1D3B  184C               	btfsc	_Cmd^(0+128),0
 14800  1D3C  3001               	movlw	1
 14801  1D3D  0020               	movlb	0	; select bank0
 14802  1D3E  00A2               	movwf	getCmd_Status@cmd
 14803                           
 14804                           ;Main_B1.c: 665: }
 14805                           
 14806                           ;Main_B1.c: 664: break;
 14807  1D3F  2D45               	goto	l6526
 14808  1D40                     l6524:	
 14809  1D40  0821               	movf	getCmd_Status@number,w
 14810                           
 14811                           ; Switch size 1, requested type "space"
 14812                           ; Number of cases is 1, Range of values is 1 to 1
 14813                           ; switch strategies available:
 14814                           ; Name         Instructions Cycles
 14815                           ; simple_byte            4     3 (average)
 14816                           ; direct_byte           11     9 (fixed)
 14817                           ; jumptable            263     9 (fixed)
 14818                           ;	Chosen strategy is simple_byte
 14819  1D41  3A01               	xorlw	1	; case 1
 14820  1D42  1903               	skipnz
 14821  1D43  2D39               	goto	l6520
 14822  1D44  2D45               	goto	l6526
 14823  1D45                     l6526:	
 14824                           
 14825                           ;Main_B1.c: 666: return cmd;
 14826  1D45  0822               	movf	getCmd_Status@cmd,w
 14827  1D46  0008               	return
 14828  1D47                     __end_of_getCmd_Status:	
 14829                           
 14830                           	psect	text100
 14831  15AA                     __ptext100:	
 14832 ;; *************** function _setDimmerLights_Dimming *****************
 14833 ;; Defined at:
 14834 ;;		line 918 in file "../src/Dimmer_B1.c"
 14835 ;; Parameters:    Size  Location     Type
 14836 ;;  lights          1    wreg     unsigned char 
 14837 ;;  status          1   75[BANK0 ] unsigned char 
 14838 ;; Auto vars:     Size  Location     Type
 14839 ;;  lights          1    1[BANK1 ] unsigned char 
 14840 ;;  value           1    0[BANK1 ] unsigned char 
 14841 ;; Return value:  Size  Location     Type
 14842 ;;		None               void
 14843 ;; Registers used:
 14844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14845 ;; Tracked objects:
 14846 ;;		On entry : 0/0
 14847 ;;		On exit  : 0/0
 14848 ;;		Unchanged: 0/0
 14849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14850 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14851 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 14852 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14853 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;Total ram usage:        4 bytes
 14855 ;; Hardware stack levels used:    1
 14856 ;; Hardware stack levels required when called:    8
 14857 ;; This function calls:
 14858 ;;		_getDimmerIntr_DimmingValue
 14859 ;;		_getDimmerLights_ValueToPercent
 14860 ;;		_setBuz
 14861 ;;		_setDimmerIntr_Dimming_Sw
 14862 ;;		_setDimmerIntr_MaxmumValue
 14863 ;;		_setDimmerLights_Line
 14864 ;;		_setMemory_Modify
 14865 ;;		_setProductData
 14866 ;;		_setRF_DimmerLights
 14867 ;;		_setRF_TransceiveGO
 14868 ;;		_setTxData
 14869 ;; This function is called by:
 14870 ;;		_setDimmerLights_Main
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           
 14875                           ;psect for function _setDimmerLights_Dimming
 14876  15AA                     _setDimmerLights_Dimming:	
 14877                           
 14878                           ;incstack = 0
 14879                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14880                           ;setDimmerLights_Dimming@lights stored from wreg
 14881  15AA  0021               	movlb	1	; select bank1
 14882  15AB  00E6               	movwf	setDimmerLights_Dimming@lights^(0+128)
 14883                           
 14884                           ;Dimmer_B1.c: 919: if (status == 1) {
 14885  15AC  0020               	movlb	0	; select bank0
 14886  15AD  086B               	movf	setDimmerLights_Dimming@status,w
 14887  15AE  3A01               	xorlw	1
 14888  15AF  1D03               	skipz
 14889  15B0  2DC5               	goto	l8902
 14890                           
 14891                           ;Dimmer_B1.c: 920: setDimmerIntr_Dimming_Sw(lights, 1);
 14892  15B1  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 14893  15B2  0AA1               	incf	setDimmerIntr_Dimming_Sw@command,f
 14894  15B3  0021               	movlb	1	; select bank1
 14895  15B4  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 14896  15B5  319E  266C  3195   	fcall	_setDimmerIntr_Dimming_Sw
 14897                           
 14898                           ;Dimmer_B1.c: 923: setRF_TransceiveGO(0);
 14899  15B8  3000               	movlw	0
 14900  15B9  319D  25A2  3195   	fcall	_setRF_TransceiveGO
 14901                           
 14902                           ;Dimmer_B1.c: 925: setBuz(1, 100);
 14903  15BC  3064               	movlw	100
 14904  15BD  0020               	movlb	0	; select bank0
 14905  15BE  00AA               	movwf	setBuz@time
 14906  15BF  3000               	movlw	0
 14907  15C0  00AB               	movwf	setBuz@time+1
 14908  15C1  3001               	movlw	1
 14909  15C2  3194  24F6         	fcall	_setBuz
 14910                           
 14911                           ;Dimmer_B1.c: 926: } else if (status == 0) {
 14912  15C4  0008               	return
 14913  15C5                     l8902:	
 14914  15C5  0020               	movlb	0	; select bank0
 14915  15C6  08EB               	movf	setDimmerLights_Dimming@status,f
 14916  15C7  1D03               	skipz
 14917  15C8  0008               	return
 14918                           
 14919                           ;Dimmer_B1.c: 927: setDimmerIntr_Dimming_Sw(lights, 0);
 14920  15C9  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 14921  15CA  0021               	movlb	1	; select bank1
 14922  15CB  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 14923  15CC  319E  266C  3195   	fcall	_setDimmerIntr_Dimming_Sw
 14924                           
 14925                           ;Dimmer_B1.c: 930: Dimmer.Load_Status = 0;
 14926  15CF  0022               	movlb	2	; select bank2
 14927  15D0  112C               	bcf	_Dimmer^(0+256),2
 14928                           
 14929                           ;Dimmer_B1.c: 931: setDimmerLights_Line(lights);
 14930  15D1  0021               	movlb	1	; select bank1
 14931  15D2  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 14932  15D3  319C  24CF  3195   	fcall	_setDimmerLights_Line
 14933                           
 14934                           ;Dimmer_B1.c: 933: char value = getDimmerIntr_DimmingValue(lights);
 14935  15D6  0021               	movlb	1	; select bank1
 14936  15D7  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 14937  15D8  319C  2490  3195   	fcall	_getDimmerIntr_DimmingValue
 14938  15DB  0020               	movlb	0	; select bank0
 14939  15DC  00EC               	movwf	??_setDimmerLights_Dimming
 14940  15DD  086C               	movf	??_setDimmerLights_Dimming,w
 14941  15DE  0021               	movlb	1	; select bank1
 14942  15DF  00E5               	movwf	setDimmerLights_Dimming@value^(0+128)
 14943                           
 14944                           ;Dimmer_B1.c: 934: setDimmerIntr_MaxmumValue(lights, value);
 14945  15E0  0865               	movf	setDimmerLights_Dimming@value^(0+128),w
 14946  15E1  0020               	movlb	0	; select bank0
 14947  15E2  00EC               	movwf	??_setDimmerLights_Dimming
 14948  15E3  086C               	movf	??_setDimmerLights_Dimming,w
 14949  15E4  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 14950  15E5  0021               	movlb	1	; select bank1
 14951  15E6  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 14952  15E7  319C  2430  3195   	fcall	_setDimmerIntr_MaxmumValue
 14953                           
 14954                           ;Dimmer_B1.c: 935: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 14955  15EA  0021               	movlb	1	; select bank1
 14956  15EB  0865               	movf	setDimmerLights_Dimming@value^(0+128),w
 14957  15EC  3196  26CE  3195   	fcall	_getDimmerLights_ValueToPercent
 14958  15EF  0020               	movlb	0	; select bank0
 14959  15F0  00EC               	movwf	??_setDimmerLights_Dimming
 14960  15F1  086C               	movf	??_setDimmerLights_Dimming,w
 14961  15F2  00E3               	movwf	setProductData@value
 14962  15F3  0021               	movlb	1	; select bank1
 14963  15F4  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 14964  15F5  3E14               	addlw	20
 14965  15F6  319C  2424  3195   	fcall	_setProductData
 14966                           
 14967                           ;Dimmer_B1.c: 942: setMemory_Modify(1);
 14968  15F9  3001               	movlw	1
 14969  15FA  319D  258F  3195   	fcall	_setMemory_Modify
 14970                           
 14971                           ;Dimmer_B1.c: 946: setRF_DimmerLights(lights, 1);
 14972  15FD  0020               	movlb	0	; select bank0
 14973  15FE  01E6               	clrf	setRF_DimmerLights@on
 14974  15FF  0AE6               	incf	setRF_DimmerLights@on,f
 14975  1600  0021               	movlb	1	; select bank1
 14976  1601  0866               	movf	setDimmerLights_Dimming@lights^(0+128),w
 14977  1602  3197  2733  3195   	fcall	_setRF_DimmerLights
 14978                           
 14979                           ;Dimmer_B1.c: 947: setTxData();
 14980  1605  318F  2745         	fcall	_setTxData
 14981  1607  0008               	return
 14982  1608                     __end_of_setDimmerLights_Dimming:	
 14983                           
 14984                           	psect	text101
 14985  0F45                     __ptext101:	
 14986 ;; *************** function _setTxData *****************
 14987 ;; Defined at:
 14988 ;;		line 183 in file "../src/RF_Control_B1.c"
 14989 ;; Parameters:    Size  Location     Type
 14990 ;;		None
 14991 ;; Auto vars:     Size  Location     Type
 14992 ;;  i               1    0        unsigned char 
 14993 ;; Return value:  Size  Location     Type
 14994 ;;		None               void
 14995 ;; Registers used:
 14996 ;;		wreg, fsr1l, fsr1h, status,2
 14997 ;; Tracked objects:
 14998 ;;		On entry : 0/0
 14999 ;;		On exit  : 0/0
 15000 ;;		Unchanged: 0/0
 15001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15006 ;;Total ram usage:        1 bytes
 15007 ;; Hardware stack levels used:    1
 15008 ;; Hardware stack levels required when called:    5
 15009 ;; This function calls:
 15010 ;;		Nothing
 15011 ;; This function is called by:
 15012 ;;		_setDimmerLights_OnOff
 15013 ;;		_setDimmerLights_Dimming
 15014 ;;		_getRxData
 15015 ;;		_setControl_Lights_Table
 15016 ;;		_setRFSW_Control
 15017 ;;		_setRFSW_AdjControl
 15018 ;; This function uses a non-reentrant model
 15019 ;;
 15020                           
 15021                           
 15022                           ;psect for function _setTxData
 15023  0F45                     _setTxData:	
 15024                           
 15025                           ;RF_Control_B1.c: 184: char i;
 15026                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15027                           
 15028                           ;incstack = 0
 15029                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15030  0F45  0021               	movlb	1	; select bank1
 15031  0F46  1C20               	btfss	_RF1^(0+128),0
 15032  0F47  0008               	return
 15033                           
 15034                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15035  0F48  1520               	bsf	_RF1^(0+128),2
 15036                           
 15037                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15038  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15039  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15040                           
 15041                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15042  0F4B  3063               	movlw	99
 15043  0F4C  0020               	movlb	0	; select bank0
 15044  0F4D  00A1               	movwf	??_setTxData
 15045  0F4E  0821               	movf	??_setTxData,w
 15046  0F4F  0023               	movlb	3	; select bank3
 15047  0F50  00A0               	movwf	_RF_Data^(0+384)
 15048                           
 15049                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15050  0F51  3002               	movlw	2
 15051  0F52  0020               	movlb	0	; select bank0
 15052  0F53  00A1               	movwf	??_setTxData
 15053  0F54  0821               	movf	??_setTxData,w
 15054  0F55  0023               	movlb	3	; select bank3
 15055  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15056                           
 15057                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15058  0F57  0021               	movlb	1	; select bank1
 15059  0F58  086D               	movf	_product^(0+128),w
 15060  0F59  0086               	movwf	6
 15061  0F5A  3002               	movlw	2	; select bank4/5
 15062  0F5B  0087               	movwf	7
 15063  0F5C  3002               	movlw	2	; select bank4/5
 15064  0F5D  3F42               	moviw [2]fsr1
 15065  0F5E  0023               	movlb	3	; select bank3
 15066  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15067                           
 15068                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15069  0F60  0021               	movlb	1	; select bank1
 15070  0F61  086D               	movf	_product^(0+128),w
 15071  0F62  0086               	movwf	6
 15072  0F63  3002               	movlw	2	; select bank4/5
 15073  0F64  0087               	movwf	7
 15074  0F65  3002               	movlw	2	; select bank4/5
 15075  0F66  3F43               	moviw [3]fsr1
 15076  0F67  0023               	movlb	3	; select bank3
 15077  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15078                           
 15079                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15080  0F69  0021               	movlb	1	; select bank1
 15081  0F6A  086D               	movf	_product^(0+128),w
 15082  0F6B  0086               	movwf	6
 15083  0F6C  3002               	movlw	2	; select bank4/5
 15084  0F6D  0087               	movwf	7
 15085  0F6E  3002               	movlw	2	; select bank4/5
 15086  0F6F  3F44               	moviw [4]fsr1
 15087  0F70  0023               	movlb	3	; select bank3
 15088  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15089                           
 15090                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15091  0F72  0021               	movlb	1	; select bank1
 15092  0F73  086D               	movf	_product^(0+128),w
 15093  0F74  0086               	movwf	6
 15094  0F75  3002               	movlw	2	; select bank4/5
 15095  0F76  0087               	movwf	7
 15096  0F77  3002               	movlw	2	; select bank4/5
 15097  0F78  3F45               	moviw [5]fsr1
 15098  0F79  0023               	movlb	3	; select bank3
 15099  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15100                           
 15101                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15102  0F7B  0021               	movlb	1	; select bank1
 15103  0F7C  086D               	movf	_product^(0+128),w
 15104  0F7D  0086               	movwf	6
 15105  0F7E  3002               	movlw	2	; select bank4/5
 15106  0F7F  0087               	movwf	7
 15107  0F80  3002               	movlw	2	; select bank4/5
 15108  0F81  3F46               	moviw [6]fsr1
 15109  0F82  0023               	movlb	3	; select bank3
 15110  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15111                           
 15112                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15113  0F84  0021               	movlb	1	; select bank1
 15114  0F85  086D               	movf	_product^(0+128),w
 15115  0F86  0086               	movwf	6
 15116  0F87  3002               	movlw	2	; select bank4/5
 15117  0F88  0087               	movwf	7
 15118  0F89  3002               	movlw	2	; select bank4/5
 15119  0F8A  3F47               	moviw [7]fsr1
 15120  0F8B  0023               	movlb	3	; select bank3
 15121  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15122                           
 15123                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15124  0F8D  0021               	movlb	1	; select bank1
 15125  0F8E  086D               	movf	_product^(0+128),w
 15126  0F8F  0086               	movwf	6
 15127  0F90  3002               	movlw	2	; select bank4/5
 15128  0F91  0087               	movwf	7
 15129  0F92  3002               	movlw	2	; select bank4/5
 15130  0F93  3F48               	moviw [8]fsr1
 15131  0F94  0023               	movlb	3	; select bank3
 15132  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15133                           
 15134                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15135  0F96  0021               	movlb	1	; select bank1
 15136  0F97  086D               	movf	_product^(0+128),w
 15137  0F98  0086               	movwf	6
 15138  0F99  3002               	movlw	2	; select bank4/5
 15139  0F9A  0087               	movwf	7
 15140  0F9B  3002               	movlw	2	; select bank4/5
 15141  0F9C  3F49               	moviw [9]fsr1
 15142  0F9D  0023               	movlb	3	; select bank3
 15143  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15144                           
 15145                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15146  0F9F  0021               	movlb	1	; select bank1
 15147  0FA0  086D               	movf	_product^(0+128),w
 15148  0FA1  0086               	movwf	6
 15149  0FA2  3002               	movlw	2	; select bank4/5
 15150  0FA3  0087               	movwf	7
 15151  0FA4  3002               	movlw	2	; select bank4/5
 15152  0FA5  3F4A               	moviw [10]fsr1
 15153  0FA6  0023               	movlb	3	; select bank3
 15154  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15155                           
 15156                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15157  0FA8  0021               	movlb	1	; select bank1
 15158  0FA9  086D               	movf	_product^(0+128),w
 15159  0FAA  0086               	movwf	6
 15160  0FAB  3002               	movlw	2	; select bank4/5
 15161  0FAC  0087               	movwf	7
 15162  0FAD  3002               	movlw	2	; select bank4/5
 15163  0FAE  3F4B               	moviw [11]fsr1
 15164  0FAF  0023               	movlb	3	; select bank3
 15165  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15166                           
 15167                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15168  0FB1  0021               	movlb	1	; select bank1
 15169  0FB2  086D               	movf	_product^(0+128),w
 15170  0FB3  0086               	movwf	6
 15171  0FB4  3002               	movlw	2	; select bank4/5
 15172  0FB5  0087               	movwf	7
 15173  0FB6  3002               	movlw	2	; select bank4/5
 15174  0FB7  3F4C               	moviw [12]fsr1
 15175  0FB8  0023               	movlb	3	; select bank3
 15176  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15177                           
 15178                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15179  0FBA  0021               	movlb	1	; select bank1
 15180  0FBB  086D               	movf	_product^(0+128),w
 15181  0FBC  0086               	movwf	6
 15182  0FBD  3002               	movlw	2	; select bank4/5
 15183  0FBE  0087               	movwf	7
 15184  0FBF  3002               	movlw	2	; select bank4/5
 15185  0FC0  3F4D               	moviw [13]fsr1
 15186  0FC1  0023               	movlb	3	; select bank3
 15187  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15188                           
 15189                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15190  0FC3  0021               	movlb	1	; select bank1
 15191  0FC4  086D               	movf	_product^(0+128),w
 15192  0FC5  0086               	movwf	6
 15193  0FC6  3002               	movlw	2	; select bank4/5
 15194  0FC7  0087               	movwf	7
 15195  0FC8  3002               	movlw	2	; select bank4/5
 15196  0FC9  3F4E               	moviw [14]fsr1
 15197  0FCA  0023               	movlb	3	; select bank3
 15198  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15199                           
 15200                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15201  0FCC  0021               	movlb	1	; select bank1
 15202  0FCD  086D               	movf	_product^(0+128),w
 15203  0FCE  0086               	movwf	6
 15204  0FCF  3002               	movlw	2	; select bank4/5
 15205  0FD0  0087               	movwf	7
 15206  0FD1  3002               	movlw	2	; select bank4/5
 15207  0FD2  3F4F               	moviw [15]fsr1
 15208  0FD3  0023               	movlb	3	; select bank3
 15209  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15210                           
 15211                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15212  0FD5  0021               	movlb	1	; select bank1
 15213  0FD6  086D               	movf	_product^(0+128),w
 15214  0FD7  0086               	movwf	6
 15215  0FD8  3002               	movlw	2	; select bank4/5
 15216  0FD9  0087               	movwf	7
 15217  0FDA  3002               	movlw	2	; select bank4/5
 15218  0FDB  3F50               	moviw [16]fsr1
 15219  0FDC  0023               	movlb	3	; select bank3
 15220  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15221                           
 15222                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15223  0FDE  0021               	movlb	1	; select bank1
 15224  0FDF  086D               	movf	_product^(0+128),w
 15225  0FE0  0086               	movwf	6
 15226  0FE1  3002               	movlw	2	; select bank4/5
 15227  0FE2  0087               	movwf	7
 15228  0FE3  3002               	movlw	2	; select bank4/5
 15229  0FE4  3F51               	moviw [17]fsr1
 15230  0FE5  0023               	movlb	3	; select bank3
 15231  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15232                           
 15233                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15234  0FE7  0021               	movlb	1	; select bank1
 15235  0FE8  086D               	movf	_product^(0+128),w
 15236  0FE9  0086               	movwf	6
 15237  0FEA  3002               	movlw	2	; select bank4/5
 15238  0FEB  0087               	movwf	7
 15239  0FEC  3002               	movlw	2	; select bank4/5
 15240  0FED  3F52               	moviw [18]fsr1
 15241  0FEE  0023               	movlb	3	; select bank3
 15242  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15243                           
 15244                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15245  0FF0  0021               	movlb	1	; select bank1
 15246  0FF1  086D               	movf	_product^(0+128),w
 15247  0FF2  0086               	movwf	6
 15248  0FF3  3002               	movlw	2	; select bank4/5
 15249  0FF4  0087               	movwf	7
 15250  0FF5  3002               	movlw	2	; select bank4/5
 15251  0FF6  3F53               	moviw [19]fsr1
 15252  0FF7  0023               	movlb	3	; select bank3
 15253  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15254                           
 15255                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15256  0FF9  30D1               	movlw	209
 15257  0FFA  0020               	movlb	0	; select bank0
 15258  0FFB  00A1               	movwf	??_setTxData
 15259  0FFC  0821               	movf	??_setTxData,w
 15260  0FFD  0023               	movlb	3	; select bank3
 15261  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15262  0FFF  0008               	return
 15263  1000                     __end_of_setTxData:	
 15264                           
 15265                           	psect	text102
 15266  1DA2                     __ptext102:	
 15267 ;; *************** function _setRF_TransceiveGO *****************
 15268 ;; Defined at:
 15269 ;;		line 470 in file "../src/RF_Control_B1.c"
 15270 ;; Parameters:    Size  Location     Type
 15271 ;;  command         1    wreg     unsigned char 
 15272 ;; Auto vars:     Size  Location     Type
 15273 ;;  command         1    2[BANK0 ] unsigned char 
 15274 ;; Return value:  Size  Location     Type
 15275 ;;		None               void
 15276 ;; Registers used:
 15277 ;;		wreg, status,2, status,0
 15278 ;; Tracked objects:
 15279 ;;		On entry : 0/0
 15280 ;;		On exit  : 0/0
 15281 ;;		Unchanged: 0/0
 15282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15287 ;;Total ram usage:        2 bytes
 15288 ;; Hardware stack levels used:    1
 15289 ;; Hardware stack levels required when called:    5
 15290 ;; This function calls:
 15291 ;;		Nothing
 15292 ;; This function is called by:
 15293 ;;		_setDimmerLights_Dimming
 15294 ;; This function uses a non-reentrant model
 15295 ;;
 15296                           
 15297                           
 15298                           ;psect for function _setRF_TransceiveGO
 15299  1DA2                     _setRF_TransceiveGO:	
 15300                           
 15301                           ;incstack = 0
 15302                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15303                           ;setRF_TransceiveGO@command stored from wreg
 15304  1DA2  0020               	movlb	0	; select bank0
 15305  1DA3  00A2               	movwf	setRF_TransceiveGO@command
 15306                           
 15307                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15308  1DA4  0822               	movf	setRF_TransceiveGO@command,w
 15309  1DA5  3A01               	xorlw	1
 15310  1DA6  3000               	movlw	0
 15311  1DA7  1903               	skipnz
 15312  1DA8  3001               	movlw	1
 15313  1DA9  00A1               	movwf	??_setRF_TransceiveGO
 15314  1DAA  0DA1               	rlf	??_setRF_TransceiveGO,f
 15315  1DAB  0DA1               	rlf	??_setRF_TransceiveGO,f
 15316  1DAC  0021               	movlb	1	; select bank1
 15317  1DAD  0820               	movf	_RF1^(0+128),w
 15318  1DAE  0020               	movlb	0	; select bank0
 15319  1DAF  0621               	xorwf	??_setRF_TransceiveGO,w
 15320  1DB0  39FB               	andlw	-5
 15321  1DB1  0621               	xorwf	??_setRF_TransceiveGO,w
 15322  1DB2  0021               	movlb	1	; select bank1
 15323  1DB3  00A0               	movwf	_RF1^(0+128)
 15324  1DB4  0008               	return
 15325  1DB5                     __end_of_setRF_TransceiveGO:	
 15326                           
 15327                           	psect	text103
 15328  1733                     __ptext103:	
 15329 ;; *************** function _setRF_DimmerLights *****************
 15330 ;; Defined at:
 15331 ;;		line 455 in file "../src/RF_Control_B1.c"
 15332 ;; Parameters:    Size  Location     Type
 15333 ;;  lights          1    wreg     unsigned char 
 15334 ;;  on              1   70[BANK0 ] unsigned char 
 15335 ;; Auto vars:     Size  Location     Type
 15336 ;;  lights          1   74[BANK0 ] unsigned char 
 15337 ;;  status          1   73[BANK0 ] unsigned char 
 15338 ;; Return value:  Size  Location     Type
 15339 ;;		None               void
 15340 ;; Registers used:
 15341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15347 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15351 ;;Total ram usage:        5 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; Hardware stack levels required when called:    6
 15354 ;; This function calls:
 15355 ;;		_setProductData
 15356 ;; This function is called by:
 15357 ;;		_setDimmerLights_OnOff
 15358 ;;		_setDimmerLights_Dimming
 15359 ;;		_setRFSW_Control
 15360 ;; This function uses a non-reentrant model
 15361 ;;
 15362                           
 15363                           
 15364                           ;psect for function _setRF_DimmerLights
 15365  1733                     _setRF_DimmerLights:	
 15366                           
 15367                           ;incstack = 0
 15368                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15369                           ;setRF_DimmerLights@lights stored from wreg
 15370  1733  0020               	movlb	0	; select bank0
 15371  1734  00EA               	movwf	setRF_DimmerLights@lights
 15372                           
 15373                           ;RF_Control_B1.c: 456: char status = 1;
 15374  1735  01E9               	clrf	setRF_DimmerLights@status
 15375  1736  0AE9               	incf	setRF_DimmerLights@status,f
 15376                           
 15377                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15378  1737  086A               	movf	setRF_DimmerLights@lights,w
 15379  1738  3EFF               	addlw	-1
 15380  1739  0A89               	incf	9,f
 15381  173A  2F3D               	goto	u9460
 15382  173B                     u9465:	
 15383  173B  1003               	clrc
 15384  173C  0DE9               	rlf	setRF_DimmerLights@status,f
 15385  173D                     u9460:	
 15386  173D  3EFF               	addlw	-1
 15387  173E  1D03               	skipz
 15388  173F  2F3B               	goto	u9465
 15389                           
 15390                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15391  1740  086A               	movf	setRF_DimmerLights@lights,w
 15392  1741  00E7               	movwf	??_setRF_DimmerLights
 15393  1742  0867               	movf	??_setRF_DimmerLights,w
 15394  1743  00E3               	movwf	setProductData@value
 15395  1744  300B               	movlw	11
 15396  1745  319C  2424  3197   	fcall	_setProductData
 15397                           
 15398                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15399  1748  0020               	movlb	0	; select bank0
 15400  1749  086A               	movf	setRF_DimmerLights@lights,w
 15401  174A  3E1A               	addlw	26
 15402  174B  0021               	movlb	1	; select bank1
 15403  174C  076D               	addwf	_product^(0+128),w
 15404  174D  0020               	movlb	0	; select bank0
 15405  174E  00E7               	movwf	??_setRF_DimmerLights
 15406  174F  0867               	movf	??_setRF_DimmerLights,w
 15407  1750  0086               	movwf	6
 15408  1751  3002               	movlw	2	; select bank4/5
 15409  1752  0087               	movwf	7
 15410  1753  0801               	movf	1,w
 15411  1754  00E8               	movwf	??_setRF_DimmerLights+1
 15412  1755  0868               	movf	??_setRF_DimmerLights+1,w
 15413  1756  00E3               	movwf	setProductData@value
 15414  1757  3011               	movlw	17
 15415  1758  319C  2424  3197   	fcall	_setProductData
 15416                           
 15417                           ;RF_Control_B1.c: 460: if (on == 1) {
 15418  175B  0020               	movlb	0	; select bank0
 15419  175C  0866               	movf	setRF_DimmerLights@on,w
 15420  175D  3A01               	xorlw	1
 15421  175E  1D03               	skipz
 15422  175F  2F82               	goto	l8664
 15423                           
 15424                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15425  1760  086A               	movf	setRF_DimmerLights@lights,w
 15426  1761  3E14               	addlw	20
 15427  1762  0021               	movlb	1	; select bank1
 15428  1763  076D               	addwf	_product^(0+128),w
 15429  1764  0020               	movlb	0	; select bank0
 15430  1765  00E7               	movwf	??_setRF_DimmerLights
 15431  1766  0867               	movf	??_setRF_DimmerLights,w
 15432  1767  0086               	movwf	6
 15433  1768  3002               	movlw	2	; select bank4/5
 15434  1769  0087               	movwf	7
 15435  176A  0801               	movf	1,w
 15436  176B  00E8               	movwf	??_setRF_DimmerLights+1
 15437  176C  0868               	movf	??_setRF_DimmerLights+1,w
 15438  176D  00E3               	movwf	setProductData@value
 15439  176E  3009               	movlw	9
 15440  176F  319C  2424  3197   	fcall	_setProductData
 15441                           
 15442                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15443  1772  0021               	movlb	1	; select bank1
 15444  1773  086D               	movf	_product^(0+128),w
 15445  1774  3E0F               	addlw	15
 15446  1775  0086               	movwf	6
 15447  1776  3002               	movlw	2	; select bank4/5
 15448  1777  0087               	movwf	7
 15449  1778  0801               	movf	1,w
 15450  1779  0020               	movlb	0	; select bank0
 15451  177A  0469               	iorwf	setRF_DimmerLights@status,w
 15452  177B  00E7               	movwf	??_setRF_DimmerLights
 15453  177C  0867               	movf	??_setRF_DimmerLights,w
 15454  177D  00E3               	movwf	setProductData@value
 15455  177E  300F               	movlw	15
 15456  177F  319C  2424         	fcall	_setProductData
 15457                           
 15458                           ;RF_Control_B1.c: 463: } else {
 15459  1781  0008               	return
 15460  1782                     l8664:	
 15461                           
 15462                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15463  1782  0020               	movlb	0	; select bank0
 15464  1783  01E3               	clrf	setProductData@value
 15465  1784  3009               	movlw	9
 15466  1785  319C  2424  3197   	fcall	_setProductData
 15467                           
 15468                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15469  1788  0021               	movlb	1	; select bank1
 15470  1789  086D               	movf	_product^(0+128),w
 15471  178A  3E0F               	addlw	15
 15472  178B  0086               	movwf	6
 15473  178C  3002               	movlw	2	; select bank4/5
 15474  178D  0087               	movwf	7
 15475  178E  0020               	movlb	0	; select bank0
 15476  178F  0969               	comf	setRF_DimmerLights@status,w
 15477  1790  0501               	andwf	1,w
 15478  1791  00E7               	movwf	??_setRF_DimmerLights
 15479  1792  0867               	movf	??_setRF_DimmerLights,w
 15480  1793  00E3               	movwf	setProductData@value
 15481  1794  300F               	movlw	15
 15482  1795  319C  2424         	fcall	_setProductData
 15483  1797  0008               	return
 15484  1798                     __end_of_setRF_DimmerLights:	
 15485                           
 15486                           	psect	text104
 15487  1CCF                     __ptext104:	
 15488 ;; *************** function _setDimmerLights_Line *****************
 15489 ;; Defined at:
 15490 ;;		line 992 in file "../src/Dimmer_B1.c"
 15491 ;; Parameters:    Size  Location     Type
 15492 ;;  lights          1    wreg     unsigned char 
 15493 ;; Auto vars:     Size  Location     Type
 15494 ;;  lights          1    1[BANK0 ] unsigned char 
 15495 ;; Return value:  Size  Location     Type
 15496 ;;		None               void
 15497 ;; Registers used:
 15498 ;;		wreg
 15499 ;; Tracked objects:
 15500 ;;		On entry : 0/0
 15501 ;;		On exit  : 0/0
 15502 ;;		Unchanged: 0/0
 15503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;Total ram usage:        1 bytes
 15509 ;; Hardware stack levels used:    1
 15510 ;; Hardware stack levels required when called:    5
 15511 ;; This function calls:
 15512 ;;		Nothing
 15513 ;; This function is called by:
 15514 ;;		_setDimmerLights_OnOff
 15515 ;;		_setDimmerLights_Dimming
 15516 ;; This function uses a non-reentrant model
 15517 ;;
 15518                           
 15519                           
 15520                           ;psect for function _setDimmerLights_Line
 15521  1CCF                     _setDimmerLights_Line:	
 15522                           
 15523                           ;incstack = 0
 15524                           ; Regs used in _setDimmerLights_Line: [wreg]
 15525                           ;setDimmerLights_Line@lights stored from wreg
 15526  1CCF  0020               	movlb	0	; select bank0
 15527  1CD0  00A1               	movwf	setDimmerLights_Line@lights
 15528                           
 15529                           ;Dimmer_B1.c: 993: Dimmer.LoadGO = 1;
 15530  1CD1  0022               	movlb	2	; select bank2
 15531  1CD2  14AC               	bsf	_Dimmer^(0+256),1
 15532                           
 15533                           ;Dimmer_B1.c: 995: DimmerLights1.Line = 0;
 15534  1CD3  10DD               	bcf	(_DimmerLights1^(0+256)+1),1
 15535                           
 15536                           ;Dimmer_B1.c: 996: if (lights == 1 && lights != 0) {
 15537  1CD4  0020               	movlb	0	; select bank0
 15538  1CD5  0821               	movf	setDimmerLights_Line@lights,w
 15539  1CD6  3A01               	xorlw	1
 15540  1CD7  1D03               	skipz
 15541  1CD8  0008               	return
 15542  1CD9  0821               	movf	setDimmerLights_Line@lights,w
 15543  1CDA  1903               	btfsc	3,2
 15544  1CDB  0008               	return
 15545                           
 15546                           ;Dimmer_B1.c: 997: DimmerLights1.Line = 1;
 15547  1CDC  0022               	movlb	2	; select bank2
 15548  1CDD  14DD               	bsf	(_DimmerLights1^(0+256)+1),1
 15549  1CDE  0020               	movlb	0	; select bank0
 15550  1CDF  0008               	return
 15551  1CE0                     __end_of_setDimmerLights_Line:	
 15552                           
 15553                           	psect	text105
 15554  1C30                     __ptext105:	
 15555 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15556 ;; Defined at:
 15557 ;;		line 108 in file "../src/Dimmer_B1.c"
 15558 ;; Parameters:    Size  Location     Type
 15559 ;;  lights          1    wreg     unsigned char 
 15560 ;;  value           1   67[BANK0 ] unsigned char 
 15561 ;; Auto vars:     Size  Location     Type
 15562 ;;  lights          1   69[BANK0 ] unsigned char 
 15563 ;; Return value:  Size  Location     Type
 15564 ;;		None               void
 15565 ;; Registers used:
 15566 ;;		wreg
 15567 ;; Tracked objects:
 15568 ;;		On entry : 0/0
 15569 ;;		On exit  : 0/0
 15570 ;;		Unchanged: 0/0
 15571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15572 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15575 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15576 ;;Total ram usage:        3 bytes
 15577 ;; Hardware stack levels used:    1
 15578 ;; Hardware stack levels required when called:    5
 15579 ;; This function calls:
 15580 ;;		Nothing
 15581 ;; This function is called by:
 15582 ;;		_setDimmerLights_OnOff
 15583 ;;		_setDimmerLights_Dimming
 15584 ;;		_setRFSW_AdjControl
 15585 ;; This function uses a non-reentrant model
 15586 ;;
 15587                           
 15588                           
 15589                           ;psect for function _setDimmerIntr_MaxmumValue
 15590  1C30                     _setDimmerIntr_MaxmumValue:	
 15591                           
 15592                           ;incstack = 0
 15593                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15594                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15595  1C30  0020               	movlb	0	; select bank0
 15596  1C31  00E5               	movwf	setDimmerIntr_MaxmumValue@lights
 15597                           
 15598                           ;Dimmer_B1.c: 110: if (lights == 1) {
 15599  1C32  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 15600  1C33  3A01               	xorlw	1
 15601  1C34  1D03               	skipz
 15602  1C35  0008               	return
 15603                           
 15604                           ;Dimmer_B1.c: 111: DimmerIntr1.MaxmumValue = value;
 15605  1C36  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 15606  1C37  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 15607  1C38  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 15608  1C39  0021               	movlb	1	; select bank1
 15609  1C3A  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 15610  1C3B  0008               	return
 15611  1C3C                     __end_of_setDimmerIntr_MaxmumValue:	
 15612                           
 15613                           	psect	text106
 15614  1E6C                     __ptext106:	
 15615 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15616 ;; Defined at:
 15617 ;;		line 185 in file "../src/Dimmer_B1.c"
 15618 ;; Parameters:    Size  Location     Type
 15619 ;;  lights          1    wreg     unsigned char 
 15620 ;;  command         1    1[BANK0 ] unsigned char 
 15621 ;; Auto vars:     Size  Location     Type
 15622 ;;  lights          1    3[BANK0 ] unsigned char 
 15623 ;; Return value:  Size  Location     Type
 15624 ;;		None               void
 15625 ;; Registers used:
 15626 ;;		wreg, status,2, status,0
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15632 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15635 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15636 ;;Total ram usage:        3 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    5
 15639 ;; This function calls:
 15640 ;;		Nothing
 15641 ;; This function is called by:
 15642 ;;		_setDimmerLights_Dimming
 15643 ;; This function uses a non-reentrant model
 15644 ;;
 15645                           
 15646                           
 15647                           ;psect for function _setDimmerIntr_Dimming_Sw
 15648  1E6C                     _setDimmerIntr_Dimming_Sw:	
 15649                           
 15650                           ;incstack = 0
 15651                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15652                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15653  1E6C  0020               	movlb	0	; select bank0
 15654  1E6D  00A3               	movwf	setDimmerIntr_Dimming_Sw@lights
 15655                           
 15656                           ;Dimmer_B1.c: 187: if (lights == 1) {
 15657  1E6E  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15658  1E6F  3A01               	xorlw	1
 15659  1E70  1D03               	skipz
 15660  1E71  0008               	return
 15661                           
 15662                           ;Dimmer_B1.c: 188: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15663  1E72  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 15664  1E73  3A01               	xorlw	1
 15665  1E74  3000               	movlw	0
 15666  1E75  1903               	skipnz
 15667  1E76  3001               	movlw	1
 15668  1E77  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 15669  1E78  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15670  1E79  0021               	movlb	1	; select bank1
 15671  1E7A  083B               	movf	_DimmerIntr1^(0+128),w
 15672  1E7B  0020               	movlb	0	; select bank0
 15673  1E7C  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15674  1E7D  39EF               	andlw	-17
 15675  1E7E  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15676  1E7F  0021               	movlb	1	; select bank1
 15677  1E80  00BB               	movwf	_DimmerIntr1^(0+128)
 15678  1E81  0008               	return
 15679  1E82                     __end_of_setDimmerIntr_Dimming_Sw:	
 15680                           
 15681                           	psect	text107
 15682  1C90                     __ptext107:	
 15683 ;; *************** function _getDimmerIntr_DimmingValue *****************
 15684 ;; Defined at:
 15685 ;;		line 86 in file "../src/Dimmer_B1.c"
 15686 ;; Parameters:    Size  Location     Type
 15687 ;;  lights          1    wreg     unsigned char 
 15688 ;; Auto vars:     Size  Location     Type
 15689 ;;  lights          1    2[BANK0 ] unsigned char 
 15690 ;;  value           1    3[BANK0 ] unsigned char 
 15691 ;; Return value:  Size  Location     Type
 15692 ;;                  1    wreg      unsigned char 
 15693 ;; Registers used:
 15694 ;;		wreg, status,2
 15695 ;; Tracked objects:
 15696 ;;		On entry : 0/0
 15697 ;;		On exit  : 0/0
 15698 ;;		Unchanged: 0/0
 15699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15703 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15704 ;;Total ram usage:        3 bytes
 15705 ;; Hardware stack levels used:    1
 15706 ;; Hardware stack levels required when called:    5
 15707 ;; This function calls:
 15708 ;;		Nothing
 15709 ;; This function is called by:
 15710 ;;		_setDimmerLights_Dimming
 15711 ;; This function uses a non-reentrant model
 15712 ;;
 15713                           
 15714                           
 15715                           ;psect for function _getDimmerIntr_DimmingValue
 15716  1C90                     _getDimmerIntr_DimmingValue:	
 15717                           
 15718                           ;incstack = 0
 15719                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 15720                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 15721  1C90  0020               	movlb	0	; select bank0
 15722  1C91  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 15723                           
 15724                           ;Dimmer_B1.c: 87: char value = 0;
 15725  1C92  01A3               	clrf	getDimmerIntr_DimmingValue@value
 15726                           
 15727                           ;Dimmer_B1.c: 89: if (lights == 1) {
 15728  1C93  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 15729  1C94  3A01               	xorlw	1
 15730  1C95  1D03               	skipz
 15731  1C96  2C9D               	goto	l688
 15732                           
 15733                           ;Dimmer_B1.c: 90: value = DimmerIntr1.DimmingValue;
 15734  1C97  0021               	movlb	1	; select bank1
 15735  1C98  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 15736  1C99  0020               	movlb	0	; select bank0
 15737  1C9A  00A1               	movwf	??_getDimmerIntr_DimmingValue
 15738  1C9B  0821               	movf	??_getDimmerIntr_DimmingValue,w
 15739  1C9C  00A3               	movwf	getDimmerIntr_DimmingValue@value
 15740  1C9D                     l688:	
 15741                           
 15742                           ;Dimmer_B1.c: 91: }
 15743                           ;Dimmer_B1.c: 103: return value;
 15744  1C9D  0823               	movf	getDimmerIntr_DimmingValue@value,w
 15745  1C9E  0008               	return
 15746  1C9F                     __end_of_getDimmerIntr_DimmingValue:	
 15747                           
 15748                           	psect	text108
 15749  1E56                     __ptext108:	
 15750 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15751 ;; Defined at:
 15752 ;;		line 953 in file "../src/Dimmer_B1.c"
 15753 ;; Parameters:    Size  Location     Type
 15754 ;;  lights          1    wreg     unsigned char 
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;  lights          1    0[COMMON] unsigned char 
 15757 ;;  allow           1    3[BANK0 ] unsigned char 
 15758 ;; Return value:  Size  Location     Type
 15759 ;;                  1    wreg      unsigned char 
 15760 ;; Registers used:
 15761 ;;		wreg, status,2, pclath, cstack
 15762 ;; Tracked objects:
 15763 ;;		On entry : 0/0
 15764 ;;		On exit  : 0/0
 15765 ;;		Unchanged: 0/0
 15766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15771 ;;Total ram usage:        3 bytes
 15772 ;; Hardware stack levels used:    1
 15773 ;; Hardware stack levels required when called:    6
 15774 ;; This function calls:
 15775 ;;		_getLoad_OK
 15776 ;; This function is called by:
 15777 ;;		_setDimmerLights_Main
 15778 ;; This function uses a non-reentrant model
 15779 ;;
 15780                           
 15781                           
 15782                           ;psect for function _getDimmerLights_Allow_Condition
 15783  1E56                     _getDimmerLights_Allow_Condition:	
 15784                           
 15785                           ;Dimmer_B1.c: 954: char allow = 0;
 15786                           
 15787                           ;incstack = 0
 15788                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 15789  1E56  0020               	movlb	0	; select bank0
 15790  1E57  01A3               	clrf	getDimmerLights_Allow_Condition@allow
 15791                           
 15792                           ;Dimmer_B1.c: 960: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15793  1E58  01A4               	clrf	_getDimmerLights_Allow_Condition$2241
 15794  1E59  0AA4               	incf	_getDimmerLights_Allow_Condition$2241,f
 15795  1E5A  319B  2398  319E   	fcall	_getLoad_OK
 15796  1E5D  3800               	iorlw	0
 15797  1E5E  1D03               	skipz
 15798  1E5F  2E65               	goto	l6726
 15799  1E60  0022               	movlb	2	; select bank2
 15800  1E61  18AC               	btfsc	_Dimmer^(0+256),1
 15801  1E62  2E65               	goto	l6726
 15802  1E63  0020               	movlb	0	; select bank0
 15803  1E64  01A4               	clrf	_getDimmerLights_Allow_Condition$2241
 15804  1E65                     l6726:	
 15805  1E65  0020               	movlb	0	; select bank0
 15806  1E66  0824               	movf	_getDimmerLights_Allow_Condition$2241,w
 15807  1E67  00A2               	movwf	??_getDimmerLights_Allow_Condition
 15808  1E68  0822               	movf	??_getDimmerLights_Allow_Condition,w
 15809  1E69  00A3               	movwf	getDimmerLights_Allow_Condition@allow
 15810                           
 15811                           ;Dimmer_B1.c: 987: return allow;
 15812  1E6A  0823               	movf	getDimmerLights_Allow_Condition@allow,w
 15813  1E6B  0008               	return
 15814  1E6C                     __end_of_getDimmerLights_Allow_Condition:	
 15815                           
 15816                           	psect	text109
 15817  1B98                     __ptext109:	
 15818 ;; *************** function _getLoad_OK *****************
 15819 ;; Defined at:
 15820 ;;		line 272 in file "../src/OverLoad_B1.c"
 15821 ;; Parameters:    Size  Location     Type
 15822 ;;		None
 15823 ;; Auto vars:     Size  Location     Type
 15824 ;;  ok              1    1[BANK0 ] unsigned char 
 15825 ;; Return value:  Size  Location     Type
 15826 ;;                  1    wreg      unsigned char 
 15827 ;; Registers used:
 15828 ;;		wreg, status,2
 15829 ;; Tracked objects:
 15830 ;;		On entry : 0/0
 15831 ;;		On exit  : 0/0
 15832 ;;		Unchanged: 0/0
 15833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;Total ram usage:        1 bytes
 15839 ;; Hardware stack levels used:    1
 15840 ;; Hardware stack levels required when called:    5
 15841 ;; This function calls:
 15842 ;;		Nothing
 15843 ;; This function is called by:
 15844 ;;		_DimmerLights_Main
 15845 ;;		_getDimmerLights_Allow_Condition
 15846 ;; This function uses a non-reentrant model
 15847 ;;
 15848                           
 15849                           
 15850                           ;psect for function _getLoad_OK
 15851  1B98                     _getLoad_OK:	
 15852                           
 15853                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 15854                           
 15855                           ;incstack = 0
 15856                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15857  1B98  3000               	movlw	0
 15858  1B99  0022               	movlb	2	; select bank2
 15859  1B9A  1BB4               	btfsc	_Load^(0+256),7
 15860  1B9B  3001               	movlw	1
 15861  1B9C  0020               	movlb	0	; select bank0
 15862  1B9D  00A1               	movwf	getLoad_OK@ok
 15863                           
 15864                           ;OverLoad_B1.c: 274: return ok;
 15865  1B9E  0821               	movf	getLoad_OK@ok,w
 15866  1B9F  0008               	return
 15867  1BA0                     __end_of_getLoad_OK:	
 15868                           
 15869                           	psect	text110
 15870  1170                     __ptext110:	
 15871 ;; *************** function _getMain_All_Error_Status *****************
 15872 ;; Defined at:
 15873 ;;		line 424 in file "../src/Main_B1.c"
 15874 ;; Parameters:    Size  Location     Type
 15875 ;;  command         1    wreg     unsigned char 
 15876 ;; Auto vars:     Size  Location     Type
 15877 ;;  command         1    6[BANK0 ] unsigned char 
 15878 ;;  status          1    7[BANK0 ] unsigned char 
 15879 ;; Return value:  Size  Location     Type
 15880 ;;                  1    wreg      unsigned char 
 15881 ;; Registers used:
 15882 ;;		wreg, status,2, status,0
 15883 ;; Tracked objects:
 15884 ;;		On entry : 0/0
 15885 ;;		On exit  : 0/0
 15886 ;;		Unchanged: 0/0
 15887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15889 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15891 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15892 ;;Total ram usage:        7 bytes
 15893 ;; Hardware stack levels used:    1
 15894 ;; Hardware stack levels required when called:    5
 15895 ;; This function calls:
 15896 ;;		Nothing
 15897 ;; This function is called by:
 15898 ;;		_DimmerLights_Main
 15899 ;;		_Exception_Main
 15900 ;;		_Load_Main
 15901 ;;		_setTemp_Main
 15902 ;;		_getRxData
 15903 ;;		_setSw_Main
 15904 ;; This function uses a non-reentrant model
 15905 ;;
 15906                           
 15907                           
 15908                           ;psect for function _getMain_All_Error_Status
 15909  1170                     _getMain_All_Error_Status:	
 15910                           
 15911                           ;incstack = 0
 15912                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15913                           ;getMain_All_Error_Status@command stored from wreg
 15914  1170  0020               	movlb	0	; select bank0
 15915  1171  00A6               	movwf	getMain_All_Error_Status@command
 15916                           
 15917                           ;Main_B1.c: 425: char status = 0;
 15918  1172  01A7               	clrf	getMain_All_Error_Status@status
 15919                           
 15920                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 15921  1173  08A7               	movf	getMain_All_Error_Status@status,f
 15922  1174  1D03               	skipz
 15923  1175  298A               	goto	l8796
 15924  1176  0826               	movf	getMain_All_Error_Status@command,w
 15925  1177  3A02               	xorlw	2
 15926  1178  1903               	skipnz
 15927  1179  298A               	goto	l8796
 15928                           
 15929                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 15930  117A  0021               	movlb	1	; select bank1
 15931  117B  18DB               	btfsc	_Temp^(0+128),1
 15932  117C  2981               	goto	l8794
 15933  117D  0020               	movlb	0	; select bank0
 15934  117E  01A2               	clrf	_getMain_All_Error_Status$3568
 15935  117F  01A3               	clrf	_getMain_All_Error_Status$3568+1
 15936  1180  2986               	goto	l1465
 15937  1181                     l8794:	
 15938  1181  3002               	movlw	2
 15939  1182  0020               	movlb	0	; select bank0
 15940  1183  00A2               	movwf	_getMain_All_Error_Status$3568
 15941  1184  3000               	movlw	0
 15942  1185  00A3               	movwf	_getMain_All_Error_Status$3568+1
 15943  1186                     l1465:	
 15944  1186  0822               	movf	_getMain_All_Error_Status$3568,w
 15945  1187  00A1               	movwf	??_getMain_All_Error_Status
 15946  1188  0821               	movf	??_getMain_All_Error_Status,w
 15947  1189  00A7               	movwf	getMain_All_Error_Status@status
 15948  118A                     l8796:	
 15949                           
 15950                           ;Main_B1.c: 438: }
 15951                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 15952  118A  08A7               	movf	getMain_All_Error_Status@status,f
 15953  118B  1D03               	skipz
 15954  118C  29A1               	goto	l1466
 15955  118D  0826               	movf	getMain_All_Error_Status@command,w
 15956  118E  3A03               	xorlw	3
 15957  118F  1903               	skipnz
 15958  1190  29A1               	goto	l1466
 15959                           
 15960                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 15961  1191  0022               	movlb	2	; select bank2
 15962  1192  1AB4               	btfsc	_Load^(0+256),5
 15963  1193  2998               	goto	l8804
 15964  1194  0020               	movlb	0	; select bank0
 15965  1195  01A4               	clrf	_getMain_All_Error_Status$3569
 15966  1196  01A5               	clrf	_getMain_All_Error_Status$3569+1
 15967  1197  299D               	goto	l1470
 15968  1198                     l8804:	
 15969  1198  3003               	movlw	3
 15970  1199  0020               	movlb	0	; select bank0
 15971  119A  00A4               	movwf	_getMain_All_Error_Status$3569
 15972  119B  3000               	movlw	0
 15973  119C  00A5               	movwf	_getMain_All_Error_Status$3569+1
 15974  119D                     l1470:	
 15975  119D  0824               	movf	_getMain_All_Error_Status$3569,w
 15976  119E  00A1               	movwf	??_getMain_All_Error_Status
 15977  119F  0821               	movf	??_getMain_All_Error_Status,w
 15978  11A0  00A7               	movwf	getMain_All_Error_Status@status
 15979  11A1                     l1466:	
 15980                           
 15981                           ;Main_B1.c: 445: }
 15982                           ;Main_B1.c: 455: return status;
 15983  11A1  0827               	movf	getMain_All_Error_Status@status,w
 15984  11A2  0008               	return
 15985  11A3                     __end_of_getMain_All_Error_Status:	
 15986                           
 15987                           	psect	text111
 15988  1B83                     __ptext111:	
 15989 ;; *************** function _DimmerLights_Initialization *****************
 15990 ;; Defined at:
 15991 ;;		line 616 in file "../src/Dimmer_B1.c"
 15992 ;; Parameters:    Size  Location     Type
 15993 ;;		None
 15994 ;; Auto vars:     Size  Location     Type
 15995 ;;		None
 15996 ;; Return value:  Size  Location     Type
 15997 ;;		None               void
 15998 ;; Registers used:
 15999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16000 ;; Tracked objects:
 16001 ;;		On entry : 0/0
 16002 ;;		On exit  : 0/0
 16003 ;;		Unchanged: 0/0
 16004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16009 ;;Total ram usage:        0 bytes
 16010 ;; Hardware stack levels used:    1
 16011 ;; Hardware stack levels required when called:    9
 16012 ;; This function calls:
 16013 ;;		_DimmerIntr_Initialization
 16014 ;;		_setDimmerLights_Initialization
 16015 ;; This function is called by:
 16016 ;;		_main
 16017 ;; This function uses a non-reentrant model
 16018 ;;
 16019                           
 16020                           
 16021                           ;psect for function _DimmerLights_Initialization
 16022  1B83                     _DimmerLights_Initialization:	
 16023                           
 16024                           ;Dimmer_B1.c: 618: setDimmerLights_Initialization(1);
 16025                           
 16026                           ;incstack = 0
 16027                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16028  1B83  3001               	movlw	1
 16029  1B84  319B  2334  319B   	fcall	_setDimmerLights_Initialization
 16030                           
 16031                           ;Dimmer_B1.c: 628: DimmerIntr_Initialization();
 16032  1B87  3192  22EB         	fcall	_DimmerIntr_Initialization
 16033  1B89  0008               	return
 16034  1B8A                     __end_of_DimmerLights_Initialization:	
 16035                           
 16036                           	psect	text112
 16037  1B34                     __ptext112:	
 16038 ;; *************** function _setDimmerLights_Initialization *****************
 16039 ;; Defined at:
 16040 ;;		line 632 in file "../src/Dimmer_B1.c"
 16041 ;; Parameters:    Size  Location     Type
 16042 ;;  lights          1    wreg     unsigned char 
 16043 ;; Auto vars:     Size  Location     Type
 16044 ;;  lights          1    0[COMMON] unsigned char 
 16045 ;; Return value:  Size  Location     Type
 16046 ;;		None               void
 16047 ;; Registers used:
 16048 ;;		wreg
 16049 ;; Tracked objects:
 16050 ;;		On entry : 0/0
 16051 ;;		On exit  : 0/0
 16052 ;;		Unchanged: 0/0
 16053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16058 ;;Total ram usage:        0 bytes
 16059 ;; Hardware stack levels used:    1
 16060 ;; Hardware stack levels required when called:    5
 16061 ;; This function calls:
 16062 ;;		Nothing
 16063 ;; This function is called by:
 16064 ;;		_DimmerLights_Initialization
 16065 ;; This function uses a non-reentrant model
 16066 ;;
 16067                           
 16068                           
 16069                           ;psect for function _setDimmerLights_Initialization
 16070  1B34                     _setDimmerLights_Initialization:	
 16071                           
 16072                           ;incstack = 0
 16073                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16074  1B34  0008               	return
 16075  1B35                     __end_of_setDimmerLights_Initialization:	
 16076                           
 16077                           	psect	text113
 16078  12EB                     __ptext113:	
 16079 ;; *************** function _DimmerIntr_Initialization *****************
 16080 ;; Defined at:
 16081 ;;		line 7 in file "../src/Dimmer_B1.c"
 16082 ;; Parameters:    Size  Location     Type
 16083 ;;		None
 16084 ;; Auto vars:     Size  Location     Type
 16085 ;;		None
 16086 ;; Return value:  Size  Location     Type
 16087 ;;		None               void
 16088 ;; Registers used:
 16089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16090 ;; Tracked objects:
 16091 ;;		On entry : 0/0
 16092 ;;		On exit  : 0/0
 16093 ;;		Unchanged: 0/0
 16094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;Total ram usage:        1 bytes
 16100 ;; Hardware stack levels used:    1
 16101 ;; Hardware stack levels required when called:    8
 16102 ;; This function calls:
 16103 ;;		_getDimmerLights_PercentToValue
 16104 ;;		_getDimmerLights_ValueToPercent
 16105 ;;		_setMemory_Modify
 16106 ;; This function is called by:
 16107 ;;		_DimmerLights_Initialization
 16108 ;; This function uses a non-reentrant model
 16109 ;;
 16110                           
 16111                           
 16112                           ;psect for function _DimmerIntr_Initialization
 16113  12EB                     _DimmerIntr_Initialization:	
 16114                           
 16115                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16116                           
 16117                           ;incstack = 0
 16118                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16119  12EB  3007               	movlw	7
 16120  12EC  0020               	movlb	0	; select bank0
 16121  12ED  00E3               	movwf	??_DimmerIntr_Initialization
 16122  12EE  0863               	movf	??_DimmerIntr_Initialization,w
 16123  12EF  0021               	movlb	1	; select bank1
 16124  12F0  00BF               	movwf	(_DimmerIntr1^(0+128)+4)
 16125                           
 16126                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(65*0.78));
 16127  12F1  3032               	movlw	50
 16128  12F2  0020               	movlb	0	; select bank0
 16129  12F3  00E3               	movwf	??_DimmerIntr_Initialization
 16130  12F4  0863               	movf	??_DimmerIntr_Initialization,w
 16131  12F5  0021               	movlb	1	; select bank1
 16132  12F6  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16133                           
 16134                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.78));
 16135  12F7  3003               	movlw	3
 16136  12F8  0020               	movlb	0	; select bank0
 16137  12F9  00E3               	movwf	??_DimmerIntr_Initialization
 16138  12FA  0863               	movf	??_DimmerIntr_Initialization,w
 16139  12FB  0021               	movlb	1	; select bank1
 16140  12FC  00C2               	movwf	(_DimmerIntr1^(0+128)+7)
 16141                           
 16142                           ;Dimmer_B1.c: 15: if (myMain.InitDimmer == 1) {
 16143  12FD  1E38               	btfss	(_myMain^(0+128)+10),4
 16144  12FE  2B0F               	goto	l8992
 16145                           
 16146                           ;Dimmer_B1.c: 16: product->Data[21] = getDimmerLights_ValueToPercent(((char)(65*0.78)));
 16147  12FF  3032               	movlw	50
 16148  1300  3196  26CE  3192   	fcall	_getDimmerLights_ValueToPercent
 16149  1303  0020               	movlb	0	; select bank0
 16150  1304  00E3               	movwf	??_DimmerIntr_Initialization
 16151  1305  0021               	movlb	1	; select bank1
 16152  1306  086D               	movf	_product^(0+128),w
 16153  1307  3E15               	addlw	21
 16154  1308  0086               	movwf	6
 16155  1309  3002               	movlw	2	; select bank4/5
 16156  130A  0087               	movwf	7
 16157  130B  0020               	movlb	0	; select bank0
 16158  130C  0863               	movf	??_DimmerIntr_Initialization,w
 16159  130D  0081               	movwf	1
 16160                           
 16161                           ;Dimmer_B1.c: 17: } else {
 16162  130E  2B1E               	goto	l8994
 16163  130F                     l8992:	
 16164                           
 16165                           ;Dimmer_B1.c: 18: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16166  130F  0021               	movlb	1	; select bank1
 16167  1310  086D               	movf	_product^(0+128),w
 16168  1311  3E15               	addlw	21
 16169  1312  0086               	movwf	6
 16170  1313  3002               	movlw	2	; select bank4/5
 16171  1314  0087               	movwf	7
 16172  1315  0801               	movf	1,w
 16173  1316  3196  2669  3192   	fcall	_getDimmerLights_PercentToValue
 16174  1319  0020               	movlb	0	; select bank0
 16175  131A  00E3               	movwf	??_DimmerIntr_Initialization
 16176  131B  0863               	movf	??_DimmerIntr_Initialization,w
 16177  131C  0021               	movlb	1	; select bank1
 16178  131D  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 16179  131E                     l8994:	
 16180                           
 16181                           ;Dimmer_B1.c: 19: }
 16182                           ;Dimmer_B1.c: 42: if (myMain.InitDimmer == 1) {
 16183  131E  0021               	movlb	1	; select bank1
 16184  131F  1E38               	btfss	(_myMain^(0+128)+10),4
 16185  1320  0008               	return
 16186                           
 16187                           ;Dimmer_B1.c: 43: myMain.InitDimmer =0;
 16188  1321  1238               	bcf	(_myMain^(0+128)+10),4
 16189                           
 16190                           ;Dimmer_B1.c: 44: myMain.SaveDimmer=1;
 16191  1322  16B8               	bsf	(_myMain^(0+128)+10),5
 16192                           
 16193                           ;Dimmer_B1.c: 45: setMemory_Modify(1);
 16194  1323  3001               	movlw	1
 16195  1324  319D  258F         	fcall	_setMemory_Modify
 16196  1326  0008               	return
 16197  1327                     __end_of_DimmerIntr_Initialization:	
 16198                           
 16199                           	psect	text114
 16200  1D8F                     __ptext114:	
 16201 ;; *************** function _setMemory_Modify *****************
 16202 ;; Defined at:
 16203 ;;		line 1081 in file "../src/MCU_B1.c"
 16204 ;; Parameters:    Size  Location     Type
 16205 ;;  command         1    wreg     unsigned char 
 16206 ;; Auto vars:     Size  Location     Type
 16207 ;;  command         1    2[BANK0 ] unsigned char 
 16208 ;; Return value:  Size  Location     Type
 16209 ;;		None               void
 16210 ;; Registers used:
 16211 ;;		wreg, status,2, status,0
 16212 ;; Tracked objects:
 16213 ;;		On entry : 0/0
 16214 ;;		On exit  : 0/0
 16215 ;;		Unchanged: 0/0
 16216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16219 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;Total ram usage:        2 bytes
 16222 ;; Hardware stack levels used:    1
 16223 ;; Hardware stack levels required when called:    5
 16224 ;; This function calls:
 16225 ;;		Nothing
 16226 ;; This function is called by:
 16227 ;;		_DimmerIntr_Initialization
 16228 ;;		_setDimmerLights_Dimming
 16229 ;;		_setLog_Code
 16230 ;;		_setRFSW_AdjControl
 16231 ;; This function uses a non-reentrant model
 16232 ;;
 16233                           
 16234                           
 16235                           ;psect for function _setMemory_Modify
 16236  1D8F                     _setMemory_Modify:	
 16237                           
 16238                           ;incstack = 0
 16239                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16240                           ;setMemory_Modify@command stored from wreg
 16241  1D8F  0020               	movlb	0	; select bank0
 16242  1D90  00A2               	movwf	setMemory_Modify@command
 16243                           
 16244                           ;MCU_B1.c: 1082: Memory.Modify = command == 1 ? 1 : 0;
 16245  1D91  0822               	movf	setMemory_Modify@command,w
 16246  1D92  3A01               	xorlw	1
 16247  1D93  3000               	movlw	0
 16248  1D94  1903               	skipnz
 16249  1D95  3001               	movlw	1
 16250  1D96  00A1               	movwf	??_setMemory_Modify
 16251  1D97  0023               	movlb	3	; select bank3
 16252  1D98  0862               	movf	(_Memory^(0+384)+36),w
 16253  1D99  0020               	movlb	0	; select bank0
 16254  1D9A  0621               	xorwf	??_setMemory_Modify,w
 16255  1D9B  39FE               	andlw	-2
 16256  1D9C  0621               	xorwf	??_setMemory_Modify,w
 16257  1D9D  0023               	movlb	3	; select bank3
 16258  1D9E  00E2               	movwf	(_Memory^(0+384)+36)
 16259                           
 16260                           ;MCU_B1.c: 1083: Memory.Time = 0;
 16261  1D9F  01E0               	clrf	(_Memory^(0+384)+34)
 16262  1DA0  01E1               	clrf	((_Memory+1)^(0+384)+34)
 16263  1DA1  0008               	return
 16264  1DA2                     __end_of_setMemory_Modify:	
 16265                           
 16266                           	psect	text115
 16267  16CE                     __ptext115:	
 16268 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16269 ;; Defined at:
 16270 ;;		line 1092 in file "../src/Dimmer_B1.c"
 16271 ;; Parameters:    Size  Location     Type
 16272 ;;  value           1    wreg     unsigned char 
 16273 ;; Auto vars:     Size  Location     Type
 16274 ;;  value           1   63[BANK0 ] unsigned char 
 16275 ;;  i               3   64[BANK0 ] float 
 16276 ;; Return value:  Size  Location     Type
 16277 ;;                  1    wreg      unsigned char 
 16278 ;; Registers used:
 16279 ;;		wreg, status,2, status,0, pclath, cstack
 16280 ;; Tracked objects:
 16281 ;;		On entry : 0/0
 16282 ;;		On exit  : 0/0
 16283 ;;		Unchanged: 0/0
 16284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16286 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16288 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16289 ;;Total ram usage:        6 bytes
 16290 ;; Hardware stack levels used:    1
 16291 ;; Hardware stack levels required when called:    7
 16292 ;; This function calls:
 16293 ;;		___awtoft
 16294 ;;		___ftadd
 16295 ;;		___ftdiv
 16296 ;;		___ftneg
 16297 ;;		___fttol
 16298 ;; This function is called by:
 16299 ;;		_DimmerIntr_Initialization
 16300 ;;		_setDimmerLights_Dimming
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           
 16305                           ;psect for function _getDimmerLights_ValueToPercent
 16306  16CE                     _getDimmerLights_ValueToPercent:	
 16307                           
 16308                           ;incstack = 0
 16309                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16310                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16311  16CE  0020               	movlb	0	; select bank0
 16312  16CF  00DF               	movwf	getDimmerLights_ValueToPercent@value
 16313                           
 16314                           ;Dimmer_B1.c: 1100: float i = ((char)(65*0.78)) - ((char)(5*0.78));
 16315  16D0  3000               	movlw	0
 16316  16D1  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16317  16D2  303C               	movlw	60
 16318  16D3  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16319  16D4  3042               	movlw	66
 16320  16D5  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16321                           
 16322                           ;Dimmer_B1.c: 1101: i /= 100;
 16323  16D6  3000               	movlw	0
 16324  16D7  00AF               	movwf	___ftdiv@f2
 16325  16D8  30C8               	movlw	200
 16326  16D9  00B0               	movwf	___ftdiv@f2+1
 16327  16DA  3042               	movlw	66
 16328  16DB  00B1               	movwf	___ftdiv@f2+2
 16329  16DC  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16330  16DD  00B2               	movwf	___ftdiv@f1
 16331  16DE  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16332  16DF  00B3               	movwf	___ftdiv@f1+1
 16333  16E0  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16334  16E1  00B4               	movwf	___ftdiv@f1+2
 16335  16E2  318D  253A  3196   	fcall	___ftdiv
 16336  16E5  0020               	movlb	0	; select bank0
 16337  16E6  082F               	movf	?___ftdiv,w
 16338  16E7  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16339  16E8  0830               	movf	?___ftdiv+1,w
 16340  16E9  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16341  16EA  0831               	movf	?___ftdiv+2,w
 16342  16EB  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16343                           
 16344                           ;Dimmer_B1.c: 1103: return (char) (100 - ((((char)(65*0.78)) - value) / i));
 16345  16EC  085F               	movf	getDimmerLights_ValueToPercent@value,w
 16346  16ED  00DD               	movwf	??_getDimmerLights_ValueToPercent
 16347  16EE  01DE               	clrf	??_getDimmerLights_ValueToPercent+1
 16348  16EF  09DD               	comf	??_getDimmerLights_ValueToPercent,f
 16349  16F0  09DE               	comf	??_getDimmerLights_ValueToPercent+1,f
 16350  16F1  0ADD               	incf	??_getDimmerLights_ValueToPercent,f
 16351  16F2  1903               	skipnz
 16352  16F3  0ADE               	incf	??_getDimmerLights_ValueToPercent+1,f
 16353  16F4  085D               	movf	??_getDimmerLights_ValueToPercent,w
 16354  16F5  3E32               	addlw	50
 16355  16F6  00A9               	movwf	___awtoft@c
 16356  16F7  3000               	movlw	0
 16357  16F8  3D5E               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16358  16F9  00AA               	movwf	___awtoft@c+1
 16359  16FA  3190  205F  3196   	fcall	___awtoft
 16360  16FD  0020               	movlb	0	; select bank0
 16361  16FE  0829               	movf	?___awtoft,w
 16362  16FF  00B2               	movwf	___ftdiv@f1
 16363  1700  082A               	movf	?___awtoft+1,w
 16364  1701  00B3               	movwf	___ftdiv@f1+1
 16365  1702  082B               	movf	?___awtoft+2,w
 16366  1703  00B4               	movwf	___ftdiv@f1+2
 16367  1704  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16368  1705  00AF               	movwf	___ftdiv@f2
 16369  1706  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16370  1707  00B0               	movwf	___ftdiv@f2+1
 16371  1708  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16372  1709  00B1               	movwf	___ftdiv@f2+2
 16373  170A  318D  253A  3196   	fcall	___ftdiv
 16374  170D  0020               	movlb	0	; select bank0
 16375  170E  082F               	movf	?___ftdiv,w
 16376  170F  00BF               	movwf	___ftneg@f1
 16377  1710  0830               	movf	?___ftdiv+1,w
 16378  1711  00C0               	movwf	___ftneg@f1+1
 16379  1712  0831               	movf	?___ftdiv+2,w
 16380  1713  00C1               	movwf	___ftneg@f1+2
 16381  1714  319B  23B9  3196   	fcall	___ftneg
 16382  1717  0020               	movlb	0	; select bank0
 16383  1718  083F               	movf	?___ftneg,w
 16384  1719  00C5               	movwf	___ftadd@f2
 16385  171A  0840               	movf	?___ftneg+1,w
 16386  171B  00C6               	movwf	___ftadd@f2+1
 16387  171C  0841               	movf	?___ftneg+2,w
 16388  171D  00C7               	movwf	___ftadd@f2+2
 16389  171E  3000               	movlw	0
 16390  171F  00C2               	movwf	___ftadd@f1
 16391  1720  30C8               	movlw	200
 16392  1721  00C3               	movwf	___ftadd@f1+1
 16393  1722  3042               	movlw	66
 16394  1723  00C4               	movwf	___ftadd@f1+2
 16395  1724  3183  2380  3196   	fcall	___ftadd
 16396  1727  0020               	movlb	0	; select bank0
 16397  1728  0842               	movf	?___ftadd,w
 16398  1729  00CF               	movwf	___fttol@f1
 16399  172A  0843               	movf	?___ftadd+1,w
 16400  172B  00D0               	movwf	___fttol@f1+1
 16401  172C  0844               	movf	?___ftadd+2,w
 16402  172D  00D1               	movwf	___fttol@f1+2
 16403  172E  318C  2427         	fcall	___fttol
 16404  1730  0020               	movlb	0	; select bank0
 16405  1731  084F               	movf	?___fttol,w
 16406  1732  0008               	return
 16407  1733                     __end_of_getDimmerLights_ValueToPercent:	
 16408                           
 16409                           	psect	text116
 16410  1669                     __ptext116:	
 16411 ;; *************** function _getDimmerLights_PercentToValue *****************
 16412 ;; Defined at:
 16413 ;;		line 1076 in file "../src/Dimmer_B1.c"
 16414 ;; Parameters:    Size  Location     Type
 16415 ;;  value           1    wreg     unsigned char 
 16416 ;; Auto vars:     Size  Location     Type
 16417 ;;  value           1   63[BANK0 ] unsigned char 
 16418 ;;  i               3   64[BANK0 ] float 
 16419 ;; Return value:  Size  Location     Type
 16420 ;;                  1    wreg      unsigned char 
 16421 ;; Registers used:
 16422 ;;		wreg, status,2, status,0, pclath, cstack
 16423 ;; Tracked objects:
 16424 ;;		On entry : 0/0
 16425 ;;		On exit  : 0/0
 16426 ;;		Unchanged: 0/0
 16427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16431 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16432 ;;Total ram usage:        6 bytes
 16433 ;; Hardware stack levels used:    1
 16434 ;; Hardware stack levels required when called:    7
 16435 ;; This function calls:
 16436 ;;		___awtoft
 16437 ;;		___ftadd
 16438 ;;		___ftdiv
 16439 ;;		___ftmul
 16440 ;;		___ftneg
 16441 ;;		___fttol
 16442 ;; This function is called by:
 16443 ;;		_DimmerIntr_Initialization
 16444 ;;		_setDimmerLights_OnOff
 16445 ;;		_setRFSW_AdjControl
 16446 ;; This function uses a non-reentrant model
 16447 ;;
 16448                           
 16449                           
 16450                           ;psect for function _getDimmerLights_PercentToValue
 16451  1669                     _getDimmerLights_PercentToValue:	
 16452                           
 16453                           ;incstack = 0
 16454                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 16455                           ;getDimmerLights_PercentToValue@value stored from wreg
 16456  1669  0020               	movlb	0	; select bank0
 16457  166A  00DF               	movwf	getDimmerLights_PercentToValue@value
 16458                           
 16459                           ;Dimmer_B1.c: 1084: float i = ((char)(65*0.78)) - ((char)(5*0.78));
 16460  166B  3000               	movlw	0
 16461  166C  00E0               	movwf	getDimmerLights_PercentToValue@i
 16462  166D  303C               	movlw	60
 16463  166E  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 16464  166F  3042               	movlw	66
 16465  1670  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 16466                           
 16467                           ;Dimmer_B1.c: 1085: i /= 100;
 16468  1671  3000               	movlw	0
 16469  1672  00AF               	movwf	___ftdiv@f2
 16470  1673  30C8               	movlw	200
 16471  1674  00B0               	movwf	___ftdiv@f2+1
 16472  1675  3042               	movlw	66
 16473  1676  00B1               	movwf	___ftdiv@f2+2
 16474  1677  0860               	movf	getDimmerLights_PercentToValue@i,w
 16475  1678  00B2               	movwf	___ftdiv@f1
 16476  1679  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 16477  167A  00B3               	movwf	___ftdiv@f1+1
 16478  167B  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 16479  167C  00B4               	movwf	___ftdiv@f1+2
 16480  167D  318D  253A  3196   	fcall	___ftdiv
 16481  1680  0020               	movlb	0	; select bank0
 16482  1681  082F               	movf	?___ftdiv,w
 16483  1682  00E0               	movwf	getDimmerLights_PercentToValue@i
 16484  1683  0830               	movf	?___ftdiv+1,w
 16485  1684  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 16486  1685  0831               	movf	?___ftdiv+2,w
 16487  1686  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 16488                           
 16489                           ;Dimmer_B1.c: 1087: return (char) (((char)(65*0.78)) - ((100 - value) * i));
 16490  1687  085F               	movf	getDimmerLights_PercentToValue@value,w
 16491  1688  00DD               	movwf	??_getDimmerLights_PercentToValue
 16492  1689  01DE               	clrf	??_getDimmerLights_PercentToValue+1
 16493  168A  09DD               	comf	??_getDimmerLights_PercentToValue,f
 16494  168B  09DE               	comf	??_getDimmerLights_PercentToValue+1,f
 16495  168C  0ADD               	incf	??_getDimmerLights_PercentToValue,f
 16496  168D  1903               	skipnz
 16497  168E  0ADE               	incf	??_getDimmerLights_PercentToValue+1,f
 16498  168F  085D               	movf	??_getDimmerLights_PercentToValue,w
 16499  1690  3E64               	addlw	100
 16500  1691  00A9               	movwf	___awtoft@c
 16501  1692  3000               	movlw	0
 16502  1693  3D5E               	addwfc	??_getDimmerLights_PercentToValue+1,w
 16503  1694  00AA               	movwf	___awtoft@c+1
 16504  1695  3190  205F  3196   	fcall	___awtoft
 16505  1698  0020               	movlb	0	; select bank0
 16506  1699  0829               	movf	?___awtoft,w
 16507  169A  00B2               	movwf	___ftmul@f2
 16508  169B  082A               	movf	?___awtoft+1,w
 16509  169C  00B3               	movwf	___ftmul@f2+1
 16510  169D  082B               	movf	?___awtoft+2,w
 16511  169E  00B4               	movwf	___ftmul@f2+2
 16512  169F  0860               	movf	getDimmerLights_PercentToValue@i,w
 16513  16A0  00AF               	movwf	___ftmul@f1
 16514  16A1  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 16515  16A2  00B0               	movwf	___ftmul@f1+1
 16516  16A3  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 16517  16A4  00B1               	movwf	___ftmul@f1+2
 16518  16A5  318E  2691  3196   	fcall	___ftmul
 16519  16A8  0020               	movlb	0	; select bank0
 16520  16A9  082F               	movf	?___ftmul,w
 16521  16AA  00BF               	movwf	___ftneg@f1
 16522  16AB  0830               	movf	?___ftmul+1,w
 16523  16AC  00C0               	movwf	___ftneg@f1+1
 16524  16AD  0831               	movf	?___ftmul+2,w
 16525  16AE  00C1               	movwf	___ftneg@f1+2
 16526  16AF  319B  23B9  3196   	fcall	___ftneg
 16527  16B2  0020               	movlb	0	; select bank0
 16528  16B3  083F               	movf	?___ftneg,w
 16529  16B4  00C5               	movwf	___ftadd@f2
 16530  16B5  0840               	movf	?___ftneg+1,w
 16531  16B6  00C6               	movwf	___ftadd@f2+1
 16532  16B7  0841               	movf	?___ftneg+2,w
 16533  16B8  00C7               	movwf	___ftadd@f2+2
 16534  16B9  3000               	movlw	0
 16535  16BA  00C2               	movwf	___ftadd@f1
 16536  16BB  3048               	movlw	72
 16537  16BC  00C3               	movwf	___ftadd@f1+1
 16538  16BD  3042               	movlw	66
 16539  16BE  00C4               	movwf	___ftadd@f1+2
 16540  16BF  3183  2380  3196   	fcall	___ftadd
 16541  16C2  0020               	movlb	0	; select bank0
 16542  16C3  0842               	movf	?___ftadd,w
 16543  16C4  00CF               	movwf	___fttol@f1
 16544  16C5  0843               	movf	?___ftadd+1,w
 16545  16C6  00D0               	movwf	___fttol@f1+1
 16546  16C7  0844               	movf	?___ftadd+2,w
 16547  16C8  00D1               	movwf	___fttol@f1+2
 16548  16C9  318C  2427         	fcall	___fttol
 16549  16CB  0020               	movlb	0	; select bank0
 16550  16CC  084F               	movf	?___fttol,w
 16551  16CD  0008               	return
 16552  16CE                     __end_of_getDimmerLights_PercentToValue:	
 16553                           
 16554                           	psect	text117
 16555  0C27                     __ptext117:	
 16556 ;; *************** function ___fttol *****************
 16557 ;; Defined at:
 16558 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16559 ;; Parameters:    Size  Location     Type
 16560 ;;  f1              3   47[BANK0 ] float 
 16561 ;; Auto vars:     Size  Location     Type
 16562 ;;  lval            4   56[BANK0 ] unsigned long 
 16563 ;;  exp1            1   60[BANK0 ] unsigned char 
 16564 ;;  sign1           1   55[BANK0 ] unsigned char 
 16565 ;; Return value:  Size  Location     Type
 16566 ;;                  4   47[BANK0 ] long 
 16567 ;; Registers used:
 16568 ;;		wreg, status,2, status,0
 16569 ;; Tracked objects:
 16570 ;;		On entry : 0/0
 16571 ;;		On exit  : 0/0
 16572 ;;		Unchanged: 0/0
 16573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16574 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16576 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16577 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16578 ;;Total ram usage:       14 bytes
 16579 ;; Hardware stack levels used:    1
 16580 ;; Hardware stack levels required when called:    5
 16581 ;; This function calls:
 16582 ;;		Nothing
 16583 ;; This function is called by:
 16584 ;;		_getDimmerLights_PercentToValue
 16585 ;;		_getDimmerLights_ValueToPercent
 16586 ;; This function uses a non-reentrant model
 16587 ;;
 16588                           
 16589                           
 16590                           ;psect for function ___fttol
 16591  0C27                     ___fttol:	
 16592                           
 16593                           ;incstack = 0
 16594                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16595  0C27  0020               	movlb	0	; select bank0
 16596  0C28  084F               	movf	___fttol@f1,w
 16597  0C29  00D3               	movwf	??___fttol
 16598  0C2A  0850               	movf	___fttol@f1+1,w
 16599  0C2B  00D4               	movwf	??___fttol+1
 16600  0C2C  0851               	movf	___fttol@f1+2,w
 16601  0C2D  00D5               	movwf	??___fttol+2
 16602  0C2E  1003               	clrc
 16603  0C2F  0D54               	rlf	??___fttol+1,w
 16604  0C30  0D55               	rlf	??___fttol+2,w
 16605  0C31  00D6               	movwf	??___fttol+3
 16606  0C32  0856               	movf	??___fttol+3,w
 16607  0C33  00DC               	movwf	___fttol@exp1
 16608  0C34  08DC               	movf	___fttol@exp1,f
 16609  0C35  1D03               	skipz
 16610  0C36  2C40               	goto	l8546
 16611  0C37  3000               	movlw	0
 16612  0C38  00D2               	movwf	?___fttol+3
 16613  0C39  3000               	movlw	0
 16614  0C3A  00D1               	movwf	?___fttol+2
 16615  0C3B  3000               	movlw	0
 16616  0C3C  00D0               	movwf	?___fttol+1
 16617  0C3D  3000               	movlw	0
 16618  0C3E  00CF               	movwf	?___fttol
 16619  0C3F  0008               	return
 16620  0C40                     l8546:	
 16621  0C40  084F               	movf	___fttol@f1,w
 16622  0C41  00D3               	movwf	??___fttol
 16623  0C42  0850               	movf	___fttol@f1+1,w
 16624  0C43  00D4               	movwf	??___fttol+1
 16625  0C44  0851               	movf	___fttol@f1+2,w
 16626  0C45  00D5               	movwf	??___fttol+2
 16627  0C46  3017               	movlw	23
 16628  0C47                     u9285:	
 16629  0C47  36D5               	lsrf	??___fttol+2,f
 16630  0C48  0CD4               	rrf	??___fttol+1,f
 16631  0C49  0CD3               	rrf	??___fttol,f
 16632  0C4A  0B89               	decfsz	9,f
 16633  0C4B  2C47               	goto	u9285
 16634  0C4C  0853               	movf	??___fttol,w
 16635  0C4D  00D6               	movwf	??___fttol+3
 16636  0C4E  0856               	movf	??___fttol+3,w
 16637  0C4F  00D7               	movwf	___fttol@sign1
 16638  0C50  17D0               	bsf	___fttol@f1+1,7
 16639  0C51  30FF               	movlw	255
 16640  0C52  05CF               	andwf	___fttol@f1,f
 16641  0C53  30FF               	movlw	255
 16642  0C54  05D0               	andwf	___fttol@f1+1,f
 16643  0C55  3000               	movlw	0
 16644  0C56  05D1               	andwf	___fttol@f1+2,f
 16645  0C57  084F               	movf	___fttol@f1,w
 16646  0C58  00D8               	movwf	___fttol@lval
 16647  0C59  0850               	movf	___fttol@f1+1,w
 16648  0C5A  00D9               	movwf	___fttol@lval+1
 16649  0C5B  0851               	movf	___fttol@f1+2,w
 16650  0C5C  00DA               	movwf	___fttol@lval+2
 16651  0C5D  01DB               	clrf	___fttol@lval+3
 16652  0C5E  308E               	movlw	142
 16653  0C5F  02DC               	subwf	___fttol@exp1,f
 16654  0C60  1FDC               	btfss	___fttol@exp1,7
 16655  0C61  2C7E               	goto	l8566
 16656  0C62  085C               	movf	___fttol@exp1,w
 16657  0C63  3A80               	xorlw	128
 16658  0C64  3E8F               	addlw	143
 16659  0C65  1803               	skipnc
 16660  0C66  2C70               	goto	l8564
 16661  0C67  3000               	movlw	0
 16662  0C68  00D2               	movwf	?___fttol+3
 16663  0C69  3000               	movlw	0
 16664  0C6A  00D1               	movwf	?___fttol+2
 16665  0C6B  3000               	movlw	0
 16666  0C6C  00D0               	movwf	?___fttol+1
 16667  0C6D  3000               	movlw	0
 16668  0C6E  00CF               	movwf	?___fttol
 16669  0C6F  0008               	return
 16670  0C70                     l8564:	
 16671  0C70  3001               	movlw	1
 16672  0C71                     u9315:	
 16673  0C71  36DB               	lsrf	___fttol@lval+3,f
 16674  0C72  0CDA               	rrf	___fttol@lval+2,f
 16675  0C73  0CD9               	rrf	___fttol@lval+1,f
 16676  0C74  0CD8               	rrf	___fttol@lval,f
 16677  0C75  0B89               	decfsz	9,f
 16678  0C76  2C71               	goto	u9315
 16679  0C77  3001               	movlw	1
 16680  0C78  00D3               	movwf	??___fttol
 16681  0C79  0853               	movf	??___fttol,w
 16682  0C7A  07DC               	addwf	___fttol@exp1,f
 16683  0C7B  1903               	btfsc	3,2
 16684  0C7C  2C97               	goto	l8576
 16685  0C7D  2C70               	goto	l8564
 16686  0C7E                     l8566:	
 16687  0C7E  3018               	movlw	24
 16688  0C7F  025C               	subwf	___fttol@exp1,w
 16689  0C80  1C03               	skipc
 16690  0C81  2C94               	goto	l8574
 16691  0C82  3000               	movlw	0
 16692  0C83  00D2               	movwf	?___fttol+3
 16693  0C84  3000               	movlw	0
 16694  0C85  00D1               	movwf	?___fttol+2
 16695  0C86  3000               	movlw	0
 16696  0C87  00D0               	movwf	?___fttol+1
 16697  0C88  3000               	movlw	0
 16698  0C89  00CF               	movwf	?___fttol
 16699  0C8A  0008               	return
 16700  0C8B                     l8572:	
 16701  0C8B  3001               	movlw	1
 16702  0C8C                     u9345:	
 16703  0C8C  35D8               	lslf	___fttol@lval,f
 16704  0C8D  0DD9               	rlf	___fttol@lval+1,f
 16705  0C8E  0DDA               	rlf	___fttol@lval+2,f
 16706  0C8F  0DDB               	rlf	___fttol@lval+3,f
 16707  0C90  0B89               	decfsz	9,f
 16708  0C91  2C8C               	goto	u9345
 16709  0C92  3001               	movlw	1
 16710  0C93  02DC               	subwf	___fttol@exp1,f
 16711  0C94                     l8574:	
 16712  0C94  08DC               	movf	___fttol@exp1,f
 16713  0C95  1D03               	skipz
 16714  0C96  2C8B               	goto	l8572
 16715  0C97                     l8576:	
 16716  0C97  0857               	movf	___fttol@sign1,w
 16717  0C98  1903               	btfsc	3,2
 16718  0C99  2CA5               	goto	l8580
 16719  0C9A  09D8               	comf	___fttol@lval,f
 16720  0C9B  09D9               	comf	___fttol@lval+1,f
 16721  0C9C  09DA               	comf	___fttol@lval+2,f
 16722  0C9D  09DB               	comf	___fttol@lval+3,f
 16723  0C9E  0AD8               	incf	___fttol@lval,f
 16724  0C9F  1903               	skipnz
 16725  0CA0  0AD9               	incf	___fttol@lval+1,f
 16726  0CA1  1903               	skipnz
 16727  0CA2  0ADA               	incf	___fttol@lval+2,f
 16728  0CA3  1903               	skipnz
 16729  0CA4  0ADB               	incf	___fttol@lval+3,f
 16730  0CA5                     l8580:	
 16731  0CA5  085B               	movf	___fttol@lval+3,w
 16732  0CA6  00D2               	movwf	?___fttol+3
 16733  0CA7  085A               	movf	___fttol@lval+2,w
 16734  0CA8  00D1               	movwf	?___fttol+2
 16735  0CA9  0859               	movf	___fttol@lval+1,w
 16736  0CAA  00D0               	movwf	?___fttol+1
 16737  0CAB  0858               	movf	___fttol@lval,w
 16738  0CAC  00CF               	movwf	?___fttol
 16739  0CAD  0008               	return
 16740  0CAE                     __end_of___fttol:	
 16741                           
 16742                           	psect	text118
 16743  1BB9                     __ptext118:	
 16744 ;; *************** function ___ftneg *****************
 16745 ;; Defined at:
 16746 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16747 ;; Parameters:    Size  Location     Type
 16748 ;;  f1              3   31[BANK0 ] float 
 16749 ;; Auto vars:     Size  Location     Type
 16750 ;;		None
 16751 ;; Return value:  Size  Location     Type
 16752 ;;                  3   31[BANK0 ] float 
 16753 ;; Registers used:
 16754 ;;		wreg
 16755 ;; Tracked objects:
 16756 ;;		On entry : 0/0
 16757 ;;		On exit  : 0/0
 16758 ;;		Unchanged: 0/0
 16759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16760 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;Total ram usage:        3 bytes
 16765 ;; Hardware stack levels used:    1
 16766 ;; Hardware stack levels required when called:    5
 16767 ;; This function calls:
 16768 ;;		Nothing
 16769 ;; This function is called by:
 16770 ;;		_getDimmerLights_PercentToValue
 16771 ;;		_getDimmerLights_ValueToPercent
 16772 ;; This function uses a non-reentrant model
 16773 ;;
 16774                           
 16775                           
 16776                           ;psect for function ___ftneg
 16777  1BB9                     ___ftneg:	
 16778                           
 16779                           ;incstack = 0
 16780                           ; Regs used in ___ftneg: [wreg]
 16781  1BB9  0020               	movlb	0	; select bank0
 16782  1BBA  0841               	movf	___ftneg@f1+2,w
 16783  1BBB  0440               	iorwf	___ftneg@f1+1,w
 16784  1BBC  043F               	iorwf	___ftneg@f1,w
 16785  1BBD  1903               	skipnz
 16786  1BBE  0008               	return
 16787  1BBF  3080               	movlw	128
 16788  1BC0  06C1               	xorwf	___ftneg@f1+2,f
 16789  1BC1  0008               	return
 16790  1BC2                     __end_of___ftneg:	
 16791                           
 16792                           	psect	text119
 16793  0E91                     __ptext119:	
 16794 ;; *************** function ___ftmul *****************
 16795 ;; Defined at:
 16796 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 16797 ;; Parameters:    Size  Location     Type
 16798 ;;  f1              3   15[BANK0 ] float 
 16799 ;;  f2              3   18[BANK0 ] float 
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
 16802 ;;  sign            1   30[BANK0 ] unsigned char 
 16803 ;;  cntr            1   29[BANK0 ] unsigned char 
 16804 ;;  exp             1   25[BANK0 ] unsigned char 
 16805 ;; Return value:  Size  Location     Type
 16806 ;;                  3   15[BANK0 ] float 
 16807 ;; Registers used:
 16808 ;;		wreg, status,2, status,0, pclath, cstack
 16809 ;; Tracked objects:
 16810 ;;		On entry : 0/0
 16811 ;;		On exit  : 0/0
 16812 ;;		Unchanged: 0/0
 16813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16814 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16817 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16818 ;;Total ram usage:       16 bytes
 16819 ;; Hardware stack levels used:    1
 16820 ;; Hardware stack levels required when called:    6
 16821 ;; This function calls:
 16822 ;;		___ftpack
 16823 ;; This function is called by:
 16824 ;;		_getDimmerLights_PercentToValue
 16825 ;; This function uses a non-reentrant model
 16826 ;;
 16827                           
 16828                           
 16829                           ;psect for function ___ftmul
 16830  0E91                     ___ftmul:	
 16831                           
 16832                           ;incstack = 0
 16833                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 16834  0E91  0020               	movlb	0	; select bank0
 16835  0E92  082F               	movf	___ftmul@f1,w
 16836  0E93  00B5               	movwf	??___ftmul
 16837  0E94  0830               	movf	___ftmul@f1+1,w
 16838  0E95  00B6               	movwf	??___ftmul+1
 16839  0E96  0831               	movf	___ftmul@f1+2,w
 16840  0E97  00B7               	movwf	??___ftmul+2
 16841  0E98  1003               	clrc
 16842  0E99  0D36               	rlf	??___ftmul+1,w
 16843  0E9A  0D37               	rlf	??___ftmul+2,w
 16844  0E9B  00B8               	movwf	??___ftmul+3
 16845  0E9C  0838               	movf	??___ftmul+3,w
 16846  0E9D  00B9               	movwf	___ftmul@exp
 16847  0E9E  08B9               	movf	___ftmul@exp,f
 16848  0E9F  1D03               	skipz
 16849  0EA0  2EA8               	goto	l8488
 16850  0EA1  3000               	movlw	0
 16851  0EA2  00AF               	movwf	?___ftmul
 16852  0EA3  3000               	movlw	0
 16853  0EA4  00B0               	movwf	?___ftmul+1
 16854  0EA5  3000               	movlw	0
 16855  0EA6  00B1               	movwf	?___ftmul+2
 16856  0EA7  0008               	return
 16857  0EA8                     l8488:	
 16858  0EA8  0832               	movf	___ftmul@f2,w
 16859  0EA9  00B5               	movwf	??___ftmul
 16860  0EAA  0833               	movf	___ftmul@f2+1,w
 16861  0EAB  00B6               	movwf	??___ftmul+1
 16862  0EAC  0834               	movf	___ftmul@f2+2,w
 16863  0EAD  00B7               	movwf	??___ftmul+2
 16864  0EAE  1003               	clrc
 16865  0EAF  0D36               	rlf	??___ftmul+1,w
 16866  0EB0  0D37               	rlf	??___ftmul+2,w
 16867  0EB1  00B8               	movwf	??___ftmul+3
 16868  0EB2  0838               	movf	??___ftmul+3,w
 16869  0EB3  00BE               	movwf	___ftmul@sign
 16870  0EB4  08BE               	movf	___ftmul@sign,f
 16871  0EB5  1D03               	skipz
 16872  0EB6  2EBE               	goto	l8494
 16873  0EB7  3000               	movlw	0
 16874  0EB8  00AF               	movwf	?___ftmul
 16875  0EB9  3000               	movlw	0
 16876  0EBA  00B0               	movwf	?___ftmul+1
 16877  0EBB  3000               	movlw	0
 16878  0EBC  00B1               	movwf	?___ftmul+2
 16879  0EBD  0008               	return
 16880  0EBE                     l8494:	
 16881  0EBE  083E               	movf	___ftmul@sign,w
 16882  0EBF  3E7B               	addlw	123
 16883  0EC0  00B5               	movwf	??___ftmul
 16884  0EC1  0835               	movf	??___ftmul,w
 16885  0EC2  07B9               	addwf	___ftmul@exp,f
 16886  0EC3  082F               	movf	___ftmul@f1,w
 16887  0EC4  00B5               	movwf	??___ftmul
 16888  0EC5  0830               	movf	___ftmul@f1+1,w
 16889  0EC6  00B6               	movwf	??___ftmul+1
 16890  0EC7  0831               	movf	___ftmul@f1+2,w
 16891  0EC8  00B7               	movwf	??___ftmul+2
 16892  0EC9  3010               	movlw	16
 16893  0ECA                     u9165:	
 16894  0ECA  36B7               	lsrf	??___ftmul+2,f
 16895  0ECB  0CB6               	rrf	??___ftmul+1,f
 16896  0ECC  0CB5               	rrf	??___ftmul,f
 16897  0ECD  0B89               	decfsz	9,f
 16898  0ECE  2ECA               	goto	u9165
 16899  0ECF  0835               	movf	??___ftmul,w
 16900  0ED0  00B8               	movwf	??___ftmul+3
 16901  0ED1  0838               	movf	??___ftmul+3,w
 16902  0ED2  00BE               	movwf	___ftmul@sign
 16903  0ED3  0832               	movf	___ftmul@f2,w
 16904  0ED4  00B5               	movwf	??___ftmul
 16905  0ED5  0833               	movf	___ftmul@f2+1,w
 16906  0ED6  00B6               	movwf	??___ftmul+1
 16907  0ED7  0834               	movf	___ftmul@f2+2,w
 16908  0ED8  00B7               	movwf	??___ftmul+2
 16909  0ED9  3010               	movlw	16
 16910  0EDA                     u9175:	
 16911  0EDA  36B7               	lsrf	??___ftmul+2,f
 16912  0EDB  0CB6               	rrf	??___ftmul+1,f
 16913  0EDC  0CB5               	rrf	??___ftmul,f
 16914  0EDD  0B89               	decfsz	9,f
 16915  0EDE  2EDA               	goto	u9175
 16916  0EDF  0835               	movf	??___ftmul,w
 16917  0EE0  00B8               	movwf	??___ftmul+3
 16918  0EE1  0838               	movf	??___ftmul+3,w
 16919  0EE2  06BE               	xorwf	___ftmul@sign,f
 16920  0EE3  3080               	movlw	128
 16921  0EE4  00B5               	movwf	??___ftmul
 16922  0EE5  0835               	movf	??___ftmul,w
 16923  0EE6  05BE               	andwf	___ftmul@sign,f
 16924  0EE7  17B0               	bsf	___ftmul@f1+1,7
 16925  0EE8  17B3               	bsf	___ftmul@f2+1,7
 16926  0EE9  30FF               	movlw	255
 16927  0EEA  05B2               	andwf	___ftmul@f2,f
 16928  0EEB  30FF               	movlw	255
 16929  0EEC  05B3               	andwf	___ftmul@f2+1,f
 16930  0EED  3000               	movlw	0
 16931  0EEE  05B4               	andwf	___ftmul@f2+2,f
 16932  0EEF  3000               	movlw	0
 16933  0EF0  00BA               	movwf	___ftmul@f3_as_product
 16934  0EF1  3000               	movlw	0
 16935  0EF2  00BB               	movwf	___ftmul@f3_as_product+1
 16936  0EF3  3000               	movlw	0
 16937  0EF4  00BC               	movwf	___ftmul@f3_as_product+2
 16938  0EF5  3007               	movlw	7
 16939  0EF6  00B5               	movwf	??___ftmul
 16940  0EF7  0835               	movf	??___ftmul,w
 16941  0EF8  00BD               	movwf	___ftmul@cntr
 16942  0EF9                     l8506:	
 16943  0EF9  1C2F               	btfss	___ftmul@f1,0
 16944  0EFA  2F01               	goto	l8510
 16945  0EFB  0832               	movf	___ftmul@f2,w
 16946  0EFC  07BA               	addwf	___ftmul@f3_as_product,f
 16947  0EFD  0833               	movf	___ftmul@f2+1,w
 16948  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 16949  0EFF  0834               	movf	___ftmul@f2+2,w
 16950  0F00  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 16951  0F01                     l8510:	
 16952  0F01  3001               	movlw	1
 16953  0F02                     u9195:	
 16954  0F02  36B1               	lsrf	___ftmul@f1+2,f
 16955  0F03  0CB0               	rrf	___ftmul@f1+1,f
 16956  0F04  0CAF               	rrf	___ftmul@f1,f
 16957  0F05  0B89               	decfsz	9,f
 16958  0F06  2F02               	goto	u9195
 16959  0F07  3001               	movlw	1
 16960  0F08                     u9205:	
 16961  0F08  35B2               	lslf	___ftmul@f2,f
 16962  0F09  0DB3               	rlf	___ftmul@f2+1,f
 16963  0F0A  0DB4               	rlf	___ftmul@f2+2,f
 16964  0F0B  0B89               	decfsz	9,f
 16965  0F0C  2F08               	goto	u9205
 16966  0F0D  3001               	movlw	1
 16967  0F0E  02BD               	subwf	___ftmul@cntr,f
 16968  0F0F  1D03               	btfss	3,2
 16969  0F10  2EF9               	goto	l8506
 16970  0F11  3009               	movlw	9
 16971  0F12  00B5               	movwf	??___ftmul
 16972  0F13  0835               	movf	??___ftmul,w
 16973  0F14  00BD               	movwf	___ftmul@cntr
 16974  0F15                     l8518:	
 16975  0F15  1C2F               	btfss	___ftmul@f1,0
 16976  0F16  2F1D               	goto	l8522
 16977  0F17  0832               	movf	___ftmul@f2,w
 16978  0F18  07BA               	addwf	___ftmul@f3_as_product,f
 16979  0F19  0833               	movf	___ftmul@f2+1,w
 16980  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 16981  0F1B  0834               	movf	___ftmul@f2+2,w
 16982  0F1C  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 16983  0F1D                     l8522:	
 16984  0F1D  3001               	movlw	1
 16985  0F1E                     u9235:	
 16986  0F1E  36B1               	lsrf	___ftmul@f1+2,f
 16987  0F1F  0CB0               	rrf	___ftmul@f1+1,f
 16988  0F20  0CAF               	rrf	___ftmul@f1,f
 16989  0F21  0B89               	decfsz	9,f
 16990  0F22  2F1E               	goto	u9235
 16991  0F23  3001               	movlw	1
 16992  0F24                     u9245:	
 16993  0F24  36BC               	lsrf	___ftmul@f3_as_product+2,f
 16994  0F25  0CBB               	rrf	___ftmul@f3_as_product+1,f
 16995  0F26  0CBA               	rrf	___ftmul@f3_as_product,f
 16996  0F27  0B89               	decfsz	9,f
 16997  0F28  2F24               	goto	u9245
 16998  0F29  3001               	movlw	1
 16999  0F2A  02BD               	subwf	___ftmul@cntr,f
 17000  0F2B  1D03               	btfss	3,2
 17001  0F2C  2F15               	goto	l8518
 17002  0F2D  083A               	movf	___ftmul@f3_as_product,w
 17003  0F2E  00A1               	movwf	___ftpack@arg
 17004  0F2F  083B               	movf	___ftmul@f3_as_product+1,w
 17005  0F30  00A2               	movwf	___ftpack@arg+1
 17006  0F31  083C               	movf	___ftmul@f3_as_product+2,w
 17007  0F32  00A3               	movwf	___ftpack@arg+2
 17008  0F33  0839               	movf	___ftmul@exp,w
 17009  0F34  00B5               	movwf	??___ftmul
 17010  0F35  0835               	movf	??___ftmul,w
 17011  0F36  00A4               	movwf	___ftpack@exp
 17012  0F37  083E               	movf	___ftmul@sign,w
 17013  0F38  00B6               	movwf	??___ftmul+1
 17014  0F39  0836               	movf	??___ftmul+1,w
 17015  0F3A  00A5               	movwf	___ftpack@sign
 17016  0F3B  3196  2608         	fcall	___ftpack
 17017  0F3D  0020               	movlb	0	; select bank0
 17018  0F3E  0821               	movf	?___ftpack,w
 17019  0F3F  00AF               	movwf	?___ftmul
 17020  0F40  0822               	movf	?___ftpack+1,w
 17021  0F41  00B0               	movwf	?___ftmul+1
 17022  0F42  0823               	movf	?___ftpack+2,w
 17023  0F43  00B1               	movwf	?___ftmul+2
 17024  0F44  0008               	return
 17025  0F45                     __end_of___ftmul:	
 17026                           
 17027                           	psect	text120
 17028  0D3A                     __ptext120:	
 17029 ;; *************** function ___ftdiv *****************
 17030 ;; Defined at:
 17031 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17032 ;; Parameters:    Size  Location     Type
 17033 ;;  f2              3   15[BANK0 ] float 
 17034 ;;  f1              3   18[BANK0 ] float 
 17035 ;; Auto vars:     Size  Location     Type
 17036 ;;  f3              3   26[BANK0 ] float 
 17037 ;;  sign            1   30[BANK0 ] unsigned char 
 17038 ;;  exp             1   29[BANK0 ] unsigned char 
 17039 ;;  cntr            1   25[BANK0 ] unsigned char 
 17040 ;; Return value:  Size  Location     Type
 17041 ;;                  3   15[BANK0 ] float 
 17042 ;; Registers used:
 17043 ;;		wreg, status,2, status,0, pclath, cstack
 17044 ;; Tracked objects:
 17045 ;;		On entry : 0/0
 17046 ;;		On exit  : 0/0
 17047 ;;		Unchanged: 0/0
 17048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17049 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17050 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17051 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17052 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17053 ;;Total ram usage:       16 bytes
 17054 ;; Hardware stack levels used:    1
 17055 ;; Hardware stack levels required when called:    6
 17056 ;; This function calls:
 17057 ;;		___ftpack
 17058 ;; This function is called by:
 17059 ;;		_getDimmerLights_PercentToValue
 17060 ;;		_getDimmerLights_ValueToPercent
 17061 ;; This function uses a non-reentrant model
 17062 ;;
 17063                           
 17064                           
 17065                           ;psect for function ___ftdiv
 17066  0D3A                     ___ftdiv:	
 17067                           
 17068                           ;incstack = 0
 17069                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17070  0D3A  0020               	movlb	0	; select bank0
 17071  0D3B  0832               	movf	___ftdiv@f1,w
 17072  0D3C  00B5               	movwf	??___ftdiv
 17073  0D3D  0833               	movf	___ftdiv@f1+1,w
 17074  0D3E  00B6               	movwf	??___ftdiv+1
 17075  0D3F  0834               	movf	___ftdiv@f1+2,w
 17076  0D40  00B7               	movwf	??___ftdiv+2
 17077  0D41  1003               	clrc
 17078  0D42  0D36               	rlf	??___ftdiv+1,w
 17079  0D43  0D37               	rlf	??___ftdiv+2,w
 17080  0D44  00B8               	movwf	??___ftdiv+3
 17081  0D45  0838               	movf	??___ftdiv+3,w
 17082  0D46  00BD               	movwf	___ftdiv@exp
 17083  0D47  08BD               	movf	___ftdiv@exp,f
 17084  0D48  1D03               	skipz
 17085  0D49  2D51               	goto	l8446
 17086  0D4A  3000               	movlw	0
 17087  0D4B  00AF               	movwf	?___ftdiv
 17088  0D4C  3000               	movlw	0
 17089  0D4D  00B0               	movwf	?___ftdiv+1
 17090  0D4E  3000               	movlw	0
 17091  0D4F  00B1               	movwf	?___ftdiv+2
 17092  0D50  0008               	return
 17093  0D51                     l8446:	
 17094  0D51  082F               	movf	___ftdiv@f2,w
 17095  0D52  00B5               	movwf	??___ftdiv
 17096  0D53  0830               	movf	___ftdiv@f2+1,w
 17097  0D54  00B6               	movwf	??___ftdiv+1
 17098  0D55  0831               	movf	___ftdiv@f2+2,w
 17099  0D56  00B7               	movwf	??___ftdiv+2
 17100  0D57  1003               	clrc
 17101  0D58  0D36               	rlf	??___ftdiv+1,w
 17102  0D59  0D37               	rlf	??___ftdiv+2,w
 17103  0D5A  00B8               	movwf	??___ftdiv+3
 17104  0D5B  0838               	movf	??___ftdiv+3,w
 17105  0D5C  00BE               	movwf	___ftdiv@sign
 17106  0D5D  08BE               	movf	___ftdiv@sign,f
 17107  0D5E  1D03               	skipz
 17108  0D5F  2D67               	goto	l8452
 17109  0D60  3000               	movlw	0
 17110  0D61  00AF               	movwf	?___ftdiv
 17111  0D62  3000               	movlw	0
 17112  0D63  00B0               	movwf	?___ftdiv+1
 17113  0D64  3000               	movlw	0
 17114  0D65  00B1               	movwf	?___ftdiv+2
 17115  0D66  0008               	return
 17116  0D67                     l8452:	
 17117  0D67  3000               	movlw	0
 17118  0D68  00BA               	movwf	___ftdiv@f3
 17119  0D69  3000               	movlw	0
 17120  0D6A  00BB               	movwf	___ftdiv@f3+1
 17121  0D6B  3000               	movlw	0
 17122  0D6C  00BC               	movwf	___ftdiv@f3+2
 17123  0D6D  3089               	movlw	137
 17124  0D6E  073E               	addwf	___ftdiv@sign,w
 17125  0D6F  00B5               	movwf	??___ftdiv
 17126  0D70  0835               	movf	??___ftdiv,w
 17127  0D71  02BD               	subwf	___ftdiv@exp,f
 17128  0D72  0832               	movf	___ftdiv@f1,w
 17129  0D73  00B5               	movwf	??___ftdiv
 17130  0D74  0833               	movf	___ftdiv@f1+1,w
 17131  0D75  00B6               	movwf	??___ftdiv+1
 17132  0D76  0834               	movf	___ftdiv@f1+2,w
 17133  0D77  00B7               	movwf	??___ftdiv+2
 17134  0D78  3010               	movlw	16
 17135  0D79                     u9085:	
 17136  0D79  36B7               	lsrf	??___ftdiv+2,f
 17137  0D7A  0CB6               	rrf	??___ftdiv+1,f
 17138  0D7B  0CB5               	rrf	??___ftdiv,f
 17139  0D7C  0B89               	decfsz	9,f
 17140  0D7D  2D79               	goto	u9085
 17141  0D7E  0835               	movf	??___ftdiv,w
 17142  0D7F  00B8               	movwf	??___ftdiv+3
 17143  0D80  0838               	movf	??___ftdiv+3,w
 17144  0D81  00BE               	movwf	___ftdiv@sign
 17145  0D82  082F               	movf	___ftdiv@f2,w
 17146  0D83  00B5               	movwf	??___ftdiv
 17147  0D84  0830               	movf	___ftdiv@f2+1,w
 17148  0D85  00B6               	movwf	??___ftdiv+1
 17149  0D86  0831               	movf	___ftdiv@f2+2,w
 17150  0D87  00B7               	movwf	??___ftdiv+2
 17151  0D88  3010               	movlw	16
 17152  0D89                     u9095:	
 17153  0D89  36B7               	lsrf	??___ftdiv+2,f
 17154  0D8A  0CB6               	rrf	??___ftdiv+1,f
 17155  0D8B  0CB5               	rrf	??___ftdiv,f
 17156  0D8C  0B89               	decfsz	9,f
 17157  0D8D  2D89               	goto	u9095
 17158  0D8E  0835               	movf	??___ftdiv,w
 17159  0D8F  00B8               	movwf	??___ftdiv+3
 17160  0D90  0838               	movf	??___ftdiv+3,w
 17161  0D91  06BE               	xorwf	___ftdiv@sign,f
 17162  0D92  3080               	movlw	128
 17163  0D93  00B5               	movwf	??___ftdiv
 17164  0D94  0835               	movf	??___ftdiv,w
 17165  0D95  05BE               	andwf	___ftdiv@sign,f
 17166  0D96  17B3               	bsf	___ftdiv@f1+1,7
 17167  0D97  30FF               	movlw	255
 17168  0D98  05B2               	andwf	___ftdiv@f1,f
 17169  0D99  30FF               	movlw	255
 17170  0D9A  05B3               	andwf	___ftdiv@f1+1,f
 17171  0D9B  3000               	movlw	0
 17172  0D9C  05B4               	andwf	___ftdiv@f1+2,f
 17173  0D9D  17B0               	bsf	___ftdiv@f2+1,7
 17174  0D9E  30FF               	movlw	255
 17175  0D9F  05AF               	andwf	___ftdiv@f2,f
 17176  0DA0  30FF               	movlw	255
 17177  0DA1  05B0               	andwf	___ftdiv@f2+1,f
 17178  0DA2  3000               	movlw	0
 17179  0DA3  05B1               	andwf	___ftdiv@f2+2,f
 17180  0DA4  3018               	movlw	24
 17181  0DA5  00B5               	movwf	??___ftdiv
 17182  0DA6  0835               	movf	??___ftdiv,w
 17183  0DA7  00B9               	movwf	___ftdiv@cntr
 17184  0DA8                     l8466:	
 17185  0DA8  3001               	movlw	1
 17186  0DA9                     u9105:	
 17187  0DA9  35BA               	lslf	___ftdiv@f3,f
 17188  0DAA  0DBB               	rlf	___ftdiv@f3+1,f
 17189  0DAB  0DBC               	rlf	___ftdiv@f3+2,f
 17190  0DAC  0B89               	decfsz	9,f
 17191  0DAD  2DA9               	goto	u9105
 17192  0DAE  0831               	movf	___ftdiv@f2+2,w
 17193  0DAF  0234               	subwf	___ftdiv@f1+2,w
 17194  0DB0  1D03               	skipz
 17195  0DB1  2DB8               	goto	u9115
 17196  0DB2  0830               	movf	___ftdiv@f2+1,w
 17197  0DB3  0233               	subwf	___ftdiv@f1+1,w
 17198  0DB4  1D03               	skipz
 17199  0DB5  2DB8               	goto	u9115
 17200  0DB6  082F               	movf	___ftdiv@f2,w
 17201  0DB7  0232               	subwf	___ftdiv@f1,w
 17202  0DB8                     u9115:	
 17203  0DB8  1C03               	skipc
 17204  0DB9  2DC1               	goto	l8474
 17205  0DBA  082F               	movf	___ftdiv@f2,w
 17206  0DBB  02B2               	subwf	___ftdiv@f1,f
 17207  0DBC  0830               	movf	___ftdiv@f2+1,w
 17208  0DBD  3BB3               	subwfb	___ftdiv@f1+1,f
 17209  0DBE  0831               	movf	___ftdiv@f2+2,w
 17210  0DBF  3BB4               	subwfb	___ftdiv@f1+2,f
 17211  0DC0  143A               	bsf	___ftdiv@f3,0
 17212  0DC1                     l8474:	
 17213  0DC1  3001               	movlw	1
 17214  0DC2                     u9125:	
 17215  0DC2  35B2               	lslf	___ftdiv@f1,f
 17216  0DC3  0DB3               	rlf	___ftdiv@f1+1,f
 17217  0DC4  0DB4               	rlf	___ftdiv@f1+2,f
 17218  0DC5  0B89               	decfsz	9,f
 17219  0DC6  2DC2               	goto	u9125
 17220  0DC7  3001               	movlw	1
 17221  0DC8  02B9               	subwf	___ftdiv@cntr,f
 17222  0DC9  1D03               	btfss	3,2
 17223  0DCA  2DA8               	goto	l8466
 17224  0DCB  083A               	movf	___ftdiv@f3,w
 17225  0DCC  00A1               	movwf	___ftpack@arg
 17226  0DCD  083B               	movf	___ftdiv@f3+1,w
 17227  0DCE  00A2               	movwf	___ftpack@arg+1
 17228  0DCF  083C               	movf	___ftdiv@f3+2,w
 17229  0DD0  00A3               	movwf	___ftpack@arg+2
 17230  0DD1  083D               	movf	___ftdiv@exp,w
 17231  0DD2  00B5               	movwf	??___ftdiv
 17232  0DD3  0835               	movf	??___ftdiv,w
 17233  0DD4  00A4               	movwf	___ftpack@exp
 17234  0DD5  083E               	movf	___ftdiv@sign,w
 17235  0DD6  00B6               	movwf	??___ftdiv+1
 17236  0DD7  0836               	movf	??___ftdiv+1,w
 17237  0DD8  00A5               	movwf	___ftpack@sign
 17238  0DD9  3196  2608         	fcall	___ftpack
 17239  0DDB  0020               	movlb	0	; select bank0
 17240  0DDC  0821               	movf	?___ftpack,w
 17241  0DDD  00AF               	movwf	?___ftdiv
 17242  0DDE  0822               	movf	?___ftpack+1,w
 17243  0DDF  00B0               	movwf	?___ftdiv+1
 17244  0DE0  0823               	movf	?___ftpack+2,w
 17245  0DE1  00B1               	movwf	?___ftdiv+2
 17246  0DE2  0008               	return
 17247  0DE3                     __end_of___ftdiv:	
 17248                           
 17249                           	psect	text121
 17250  0380                     __ptext121:	
 17251 ;; *************** function ___ftadd *****************
 17252 ;; Defined at:
 17253 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17254 ;; Parameters:    Size  Location     Type
 17255 ;;  f1              3   34[BANK0 ] float 
 17256 ;;  f2              3   37[BANK0 ] float 
 17257 ;; Auto vars:     Size  Location     Type
 17258 ;;  exp1            1   46[BANK0 ] unsigned char 
 17259 ;;  exp2            1   45[BANK0 ] unsigned char 
 17260 ;;  sign            1   44[BANK0 ] unsigned char 
 17261 ;; Return value:  Size  Location     Type
 17262 ;;                  3   34[BANK0 ] float 
 17263 ;; Registers used:
 17264 ;;		wreg, status,2, status,0, pclath, cstack
 17265 ;; Tracked objects:
 17266 ;;		On entry : 0/0
 17267 ;;		On exit  : 0/0
 17268 ;;		Unchanged: 0/0
 17269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17270 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17272 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17273 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17274 ;;Total ram usage:       13 bytes
 17275 ;; Hardware stack levels used:    1
 17276 ;; Hardware stack levels required when called:    6
 17277 ;; This function calls:
 17278 ;;		___ftpack
 17279 ;; This function is called by:
 17280 ;;		_getDimmerLights_PercentToValue
 17281 ;;		_getDimmerLights_ValueToPercent
 17282 ;; This function uses a non-reentrant model
 17283 ;;
 17284                           
 17285                           
 17286                           ;psect for function ___ftadd
 17287  0380                     ___ftadd:	
 17288                           
 17289                           ;incstack = 0
 17290                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17291  0380  0020               	movlb	0	; select bank0
 17292  0381  0842               	movf	___ftadd@f1,w
 17293  0382  00C8               	movwf	??___ftadd
 17294  0383  0843               	movf	___ftadd@f1+1,w
 17295  0384  00C9               	movwf	??___ftadd+1
 17296  0385  0844               	movf	___ftadd@f1+2,w
 17297  0386  00CA               	movwf	??___ftadd+2
 17298  0387  1003               	clrc
 17299  0388  0D49               	rlf	??___ftadd+1,w
 17300  0389  0D4A               	rlf	??___ftadd+2,w
 17301  038A  00CB               	movwf	??___ftadd+3
 17302  038B  084B               	movf	??___ftadd+3,w
 17303  038C  00CE               	movwf	___ftadd@exp1
 17304  038D  0845               	movf	___ftadd@f2,w
 17305  038E  00C8               	movwf	??___ftadd
 17306  038F  0846               	movf	___ftadd@f2+1,w
 17307  0390  00C9               	movwf	??___ftadd+1
 17308  0391  0847               	movf	___ftadd@f2+2,w
 17309  0392  00CA               	movwf	??___ftadd+2
 17310  0393  1003               	clrc
 17311  0394  0D49               	rlf	??___ftadd+1,w
 17312  0395  0D4A               	rlf	??___ftadd+2,w
 17313  0396  00CB               	movwf	??___ftadd+3
 17314  0397  084B               	movf	??___ftadd+3,w
 17315  0398  00CD               	movwf	___ftadd@exp2
 17316  0399  084E               	movf	___ftadd@exp1,w
 17317  039A  1903               	btfsc	3,2
 17318  039B  2BA8               	goto	l8376
 17319  039C  084D               	movf	___ftadd@exp2,w
 17320  039D  024E               	subwf	___ftadd@exp1,w
 17321  039E  1803               	skipnc
 17322  039F  2BAF               	goto	l8380
 17323  03A0  034E               	decf	___ftadd@exp1,w
 17324  03A1  3AFF               	xorlw	255
 17325  03A2  074D               	addwf	___ftadd@exp2,w
 17326  03A3  00C8               	movwf	??___ftadd
 17327  03A4  3019               	movlw	25
 17328  03A5  0248               	subwf	??___ftadd,w
 17329  03A6  1C03               	skipc
 17330  03A7  2BAF               	goto	l8380
 17331  03A8                     l8376:	
 17332  03A8  0845               	movf	___ftadd@f2,w
 17333  03A9  00C2               	movwf	?___ftadd
 17334  03AA  0846               	movf	___ftadd@f2+1,w
 17335  03AB  00C3               	movwf	?___ftadd+1
 17336  03AC  0847               	movf	___ftadd@f2+2,w
 17337  03AD  00C4               	movwf	?___ftadd+2
 17338  03AE  0008               	return
 17339  03AF                     l8380:	
 17340  03AF  084D               	movf	___ftadd@exp2,w
 17341  03B0  1903               	btfsc	3,2
 17342  03B1  0008               	return
 17343  03B2  084E               	movf	___ftadd@exp1,w
 17344  03B3  024D               	subwf	___ftadd@exp2,w
 17345  03B4  1803               	skipnc
 17346  03B5  2BBE               	goto	l8386
 17347  03B6  034D               	decf	___ftadd@exp2,w
 17348  03B7  3AFF               	xorlw	255
 17349  03B8  074E               	addwf	___ftadd@exp1,w
 17350  03B9  00C8               	movwf	??___ftadd
 17351  03BA  3019               	movlw	25
 17352  03BB  0248               	subwf	??___ftadd,w
 17353  03BC  1803               	btfsc	3,0
 17354  03BD  0008               	return
 17355  03BE                     l8386:	
 17356  03BE  3006               	movlw	6
 17357  03BF  00C8               	movwf	??___ftadd
 17358  03C0  0848               	movf	??___ftadd,w
 17359  03C1  00CC               	movwf	___ftadd@sign
 17360  03C2  1BC4               	btfsc	___ftadd@f1+2,7
 17361  03C3  17CC               	bsf	___ftadd@sign,7
 17362  03C4  1BC7               	btfsc	___ftadd@f2+2,7
 17363  03C5  174C               	bsf	___ftadd@sign,6
 17364  03C6  17C3               	bsf	___ftadd@f1+1,7
 17365  03C7  30FF               	movlw	255
 17366  03C8  05C2               	andwf	___ftadd@f1,f
 17367  03C9  30FF               	movlw	255
 17368  03CA  05C3               	andwf	___ftadd@f1+1,f
 17369  03CB  3000               	movlw	0
 17370  03CC  05C4               	andwf	___ftadd@f1+2,f
 17371  03CD  17C6               	bsf	___ftadd@f2+1,7
 17372  03CE  30FF               	movlw	255
 17373  03CF  05C5               	andwf	___ftadd@f2,f
 17374  03D0  30FF               	movlw	255
 17375  03D1  05C6               	andwf	___ftadd@f2+1,f
 17376  03D2  3000               	movlw	0
 17377  03D3  05C7               	andwf	___ftadd@f2+2,f
 17378  03D4  084D               	movf	___ftadd@exp2,w
 17379  03D5  024E               	subwf	___ftadd@exp1,w
 17380  03D6  1803               	skipnc
 17381  03D7  2BFA               	goto	l8408
 17382  03D8                     l8398:	
 17383  03D8  3001               	movlw	1
 17384  03D9                     u8925:	
 17385  03D9  35C5               	lslf	___ftadd@f2,f
 17386  03DA  0DC6               	rlf	___ftadd@f2+1,f
 17387  03DB  0DC7               	rlf	___ftadd@f2+2,f
 17388  03DC  0B89               	decfsz	9,f
 17389  03DD  2BD9               	goto	u8925
 17390  03DE  3001               	movlw	1
 17391  03DF  02CD               	subwf	___ftadd@exp2,f
 17392  03E0  084D               	movf	___ftadd@exp2,w
 17393  03E1  064E               	xorwf	___ftadd@exp1,w
 17394  03E2  1903               	skipnz
 17395  03E3  2BF5               	goto	l8406
 17396  03E4  3001               	movlw	1
 17397  03E5  02CC               	subwf	___ftadd@sign,f
 17398  03E6  084C               	movf	___ftadd@sign,w
 17399  03E7  3907               	andlw	7
 17400  03E8  1903               	btfsc	3,2
 17401  03E9  2BF5               	goto	l8406
 17402  03EA  2BD8               	goto	l8398
 17403  03EB                     l8404:	
 17404  03EB  3001               	movlw	1
 17405  03EC                     u8955:	
 17406  03EC  36C4               	lsrf	___ftadd@f1+2,f
 17407  03ED  0CC3               	rrf	___ftadd@f1+1,f
 17408  03EE  0CC2               	rrf	___ftadd@f1,f
 17409  03EF  0B89               	decfsz	9,f
 17410  03F0  2BEC               	goto	u8955
 17411  03F1  3001               	movlw	1
 17412  03F2  00C8               	movwf	??___ftadd
 17413  03F3  0848               	movf	??___ftadd,w
 17414  03F4  07CE               	addwf	___ftadd@exp1,f
 17415  03F5                     l8406:	
 17416  03F5  084E               	movf	___ftadd@exp1,w
 17417  03F6  064D               	xorwf	___ftadd@exp2,w
 17418  03F7  1903               	btfsc	3,2
 17419  03F8  2C1F               	goto	l2865
 17420  03F9  2BEB               	goto	l8404
 17421  03FA                     l8408:	
 17422  03FA  084E               	movf	___ftadd@exp1,w
 17423  03FB  024D               	subwf	___ftadd@exp2,w
 17424  03FC  1803               	skipnc
 17425  03FD  2C1F               	goto	l2865
 17426  03FE                     l8410:	
 17427  03FE  3001               	movlw	1
 17428  03FF                     u8985:	
 17429  03FF  35C2               	lslf	___ftadd@f1,f
 17430  0400  0DC3               	rlf	___ftadd@f1+1,f
 17431  0401  0DC4               	rlf	___ftadd@f1+2,f
 17432  0402  0B89               	decfsz	9,f
 17433  0403  2BFF               	goto	u8985
 17434  0404  3001               	movlw	1
 17435  0405  02CE               	subwf	___ftadd@exp1,f
 17436  0406  084D               	movf	___ftadd@exp2,w
 17437  0407  064E               	xorwf	___ftadd@exp1,w
 17438  0408  1903               	skipnz
 17439  0409  2C1B               	goto	l8418
 17440  040A  3001               	movlw	1
 17441  040B  02CC               	subwf	___ftadd@sign,f
 17442  040C  084C               	movf	___ftadd@sign,w
 17443  040D  3907               	andlw	7
 17444  040E  1903               	btfsc	3,2
 17445  040F  2C1B               	goto	l8418
 17446  0410  2BFE               	goto	l8410
 17447  0411                     l8416:	
 17448  0411  3001               	movlw	1
 17449  0412                     u9015:	
 17450  0412  36C7               	lsrf	___ftadd@f2+2,f
 17451  0413  0CC6               	rrf	___ftadd@f2+1,f
 17452  0414  0CC5               	rrf	___ftadd@f2,f
 17453  0415  0B89               	decfsz	9,f
 17454  0416  2C12               	goto	u9015
 17455  0417  3001               	movlw	1
 17456  0418  00C8               	movwf	??___ftadd
 17457  0419  0848               	movf	??___ftadd,w
 17458  041A  07CD               	addwf	___ftadd@exp2,f
 17459  041B                     l8418:	
 17460  041B  084E               	movf	___ftadd@exp1,w
 17461  041C  064D               	xorwf	___ftadd@exp2,w
 17462  041D  1D03               	skipz
 17463  041E  2C11               	goto	l8416
 17464  041F                     l2865:	
 17465  041F  1FCC               	btfss	___ftadd@sign,7
 17466  0420  2C31               	goto	l8422
 17467  0421  30FF               	movlw	255
 17468  0422  06C2               	xorwf	___ftadd@f1,f
 17469  0423  30FF               	movlw	255
 17470  0424  06C3               	xorwf	___ftadd@f1+1,f
 17471  0425  30FF               	movlw	255
 17472  0426  06C4               	xorwf	___ftadd@f1+2,f
 17473  0427  3001               	movlw	1
 17474  0428  07C2               	addwf	___ftadd@f1,f
 17475  0429  3000               	movlw	0
 17476  042A  1803               	skipnc
 17477  042B  3001               	movlw	1
 17478  042C  07C3               	addwf	___ftadd@f1+1,f
 17479  042D  3000               	movlw	0
 17480  042E  1803               	skipnc
 17481  042F  3001               	movlw	1
 17482  0430  07C4               	addwf	___ftadd@f1+2,f
 17483  0431                     l8422:	
 17484  0431  1F4C               	btfss	___ftadd@sign,6
 17485  0432  2C43               	goto	l8426
 17486  0433  30FF               	movlw	255
 17487  0434  06C5               	xorwf	___ftadd@f2,f
 17488  0435  30FF               	movlw	255
 17489  0436  06C6               	xorwf	___ftadd@f2+1,f
 17490  0437  30FF               	movlw	255
 17491  0438  06C7               	xorwf	___ftadd@f2+2,f
 17492  0439  3001               	movlw	1
 17493  043A  07C5               	addwf	___ftadd@f2,f
 17494  043B  3000               	movlw	0
 17495  043C  1803               	skipnc
 17496  043D  3001               	movlw	1
 17497  043E  07C6               	addwf	___ftadd@f2+1,f
 17498  043F  3000               	movlw	0
 17499  0440  1803               	skipnc
 17500  0441  3001               	movlw	1
 17501  0442  07C7               	addwf	___ftadd@f2+2,f
 17502  0443                     l8426:	
 17503  0443  01CC               	clrf	___ftadd@sign
 17504  0444  0842               	movf	___ftadd@f1,w
 17505  0445  07C5               	addwf	___ftadd@f2,f
 17506  0446  0843               	movf	___ftadd@f1+1,w
 17507  0447  3DC6               	addwfc	___ftadd@f2+1,f
 17508  0448  0844               	movf	___ftadd@f1+2,w
 17509  0449  3DC7               	addwfc	___ftadd@f2+2,f
 17510  044A  1FC7               	btfss	___ftadd@f2+2,7
 17511  044B  2C5E               	goto	l8436
 17512  044C  30FF               	movlw	255
 17513  044D  06C5               	xorwf	___ftadd@f2,f
 17514  044E  30FF               	movlw	255
 17515  044F  06C6               	xorwf	___ftadd@f2+1,f
 17516  0450  30FF               	movlw	255
 17517  0451  06C7               	xorwf	___ftadd@f2+2,f
 17518  0452  3001               	movlw	1
 17519  0453  07C5               	addwf	___ftadd@f2,f
 17520  0454  3000               	movlw	0
 17521  0455  1803               	skipnc
 17522  0456  3001               	movlw	1
 17523  0457  07C6               	addwf	___ftadd@f2+1,f
 17524  0458  3000               	movlw	0
 17525  0459  1803               	skipnc
 17526  045A  3001               	movlw	1
 17527  045B  07C7               	addwf	___ftadd@f2+2,f
 17528  045C  01CC               	clrf	___ftadd@sign
 17529  045D  0ACC               	incf	___ftadd@sign,f
 17530  045E                     l8436:	
 17531  045E  0845               	movf	___ftadd@f2,w
 17532  045F  00A1               	movwf	___ftpack@arg
 17533  0460  0846               	movf	___ftadd@f2+1,w
 17534  0461  00A2               	movwf	___ftpack@arg+1
 17535  0462  0847               	movf	___ftadd@f2+2,w
 17536  0463  00A3               	movwf	___ftpack@arg+2
 17537  0464  084E               	movf	___ftadd@exp1,w
 17538  0465  00C8               	movwf	??___ftadd
 17539  0466  0848               	movf	??___ftadd,w
 17540  0467  00A4               	movwf	___ftpack@exp
 17541  0468  084C               	movf	___ftadd@sign,w
 17542  0469  00C9               	movwf	??___ftadd+1
 17543  046A  0849               	movf	??___ftadd+1,w
 17544  046B  00A5               	movwf	___ftpack@sign
 17545  046C  3196  2608         	fcall	___ftpack
 17546  046E  0020               	movlb	0	; select bank0
 17547  046F  0821               	movf	?___ftpack,w
 17548  0470  00C2               	movwf	?___ftadd
 17549  0471  0822               	movf	?___ftpack+1,w
 17550  0472  00C3               	movwf	?___ftadd+1
 17551  0473  0823               	movf	?___ftpack+2,w
 17552  0474  00C4               	movwf	?___ftadd+2
 17553  0475  0008               	return
 17554  0476                     __end_of___ftadd:	
 17555                           
 17556                           	psect	text122
 17557  105F                     __ptext122:	
 17558 ;; *************** function ___awtoft *****************
 17559 ;; Defined at:
 17560 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17561 ;; Parameters:    Size  Location     Type
 17562 ;;  c               2    9[BANK0 ] int 
 17563 ;; Auto vars:     Size  Location     Type
 17564 ;;  sign            1   14[BANK0 ] unsigned char 
 17565 ;; Return value:  Size  Location     Type
 17566 ;;                  3    9[BANK0 ] float 
 17567 ;; Registers used:
 17568 ;;		wreg, status,2, status,0, pclath, cstack
 17569 ;; Tracked objects:
 17570 ;;		On entry : 0/0
 17571 ;;		On exit  : 0/0
 17572 ;;		Unchanged: 0/0
 17573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17577 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17578 ;;Total ram usage:        6 bytes
 17579 ;; Hardware stack levels used:    1
 17580 ;; Hardware stack levels required when called:    6
 17581 ;; This function calls:
 17582 ;;		___ftpack
 17583 ;; This function is called by:
 17584 ;;		_getDimmerLights_PercentToValue
 17585 ;;		_getDimmerLights_ValueToPercent
 17586 ;; This function uses a non-reentrant model
 17587 ;;
 17588                           
 17589                           
 17590                           ;psect for function ___awtoft
 17591  105F                     ___awtoft:	
 17592                           
 17593                           ;incstack = 0
 17594                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17595  105F  0020               	movlb	0	; select bank0
 17596  1060  01AE               	clrf	___awtoft@sign
 17597  1061  1FAA               	btfss	___awtoft@c+1,7
 17598  1062  286A               	goto	l8364
 17599  1063  09A9               	comf	___awtoft@c,f
 17600  1064  09AA               	comf	___awtoft@c+1,f
 17601  1065  0AA9               	incf	___awtoft@c,f
 17602  1066  1903               	skipnz
 17603  1067  0AAA               	incf	___awtoft@c+1,f
 17604  1068  01AE               	clrf	___awtoft@sign
 17605  1069  0AAE               	incf	___awtoft@sign,f
 17606  106A                     l8364:	
 17607  106A  0829               	movf	___awtoft@c,w
 17608  106B  00A1               	movwf	___ftpack@arg
 17609  106C  082A               	movf	___awtoft@c+1,w
 17610  106D  00A2               	movwf	___ftpack@arg+1
 17611  106E  01A3               	clrf	___ftpack@arg+2
 17612  106F  308E               	movlw	142
 17613  1070  00AC               	movwf	??___awtoft
 17614  1071  082C               	movf	??___awtoft,w
 17615  1072  00A4               	movwf	___ftpack@exp
 17616  1073  082E               	movf	___awtoft@sign,w
 17617  1074  00AD               	movwf	??___awtoft+1
 17618  1075  082D               	movf	??___awtoft+1,w
 17619  1076  00A5               	movwf	___ftpack@sign
 17620  1077  3196  2608         	fcall	___ftpack
 17621  1079  0020               	movlb	0	; select bank0
 17622  107A  0821               	movf	?___ftpack,w
 17623  107B  00A9               	movwf	?___awtoft
 17624  107C  0822               	movf	?___ftpack+1,w
 17625  107D  00AA               	movwf	?___awtoft+1
 17626  107E  0823               	movf	?___ftpack+2,w
 17627  107F  00AB               	movwf	?___awtoft+2
 17628  1080  0008               	return
 17629  1081                     __end_of___awtoft:	
 17630                           
 17631                           	psect	text123
 17632  1608                     __ptext123:	
 17633 ;; *************** function ___ftpack *****************
 17634 ;; Defined at:
 17635 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17636 ;; Parameters:    Size  Location     Type
 17637 ;;  arg             3    1[BANK0 ] unsigned um
 17638 ;;  exp             1    4[BANK0 ] unsigned char 
 17639 ;;  sign            1    5[BANK0 ] unsigned char 
 17640 ;; Auto vars:     Size  Location     Type
 17641 ;;		None
 17642 ;; Return value:  Size  Location     Type
 17643 ;;                  3    1[BANK0 ] float 
 17644 ;; Registers used:
 17645 ;;		wreg, status,2, status,0
 17646 ;; Tracked objects:
 17647 ;;		On entry : 0/0
 17648 ;;		On exit  : 0/0
 17649 ;;		Unchanged: 0/0
 17650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17651 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17653 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17654 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17655 ;;Total ram usage:        8 bytes
 17656 ;; Hardware stack levels used:    1
 17657 ;; Hardware stack levels required when called:    5
 17658 ;; This function calls:
 17659 ;;		Nothing
 17660 ;; This function is called by:
 17661 ;;		___awtoft
 17662 ;;		___ftadd
 17663 ;;		___ftdiv
 17664 ;;		___ftmul
 17665 ;; This function uses a non-reentrant model
 17666 ;;
 17667                           
 17668                           
 17669                           ;psect for function ___ftpack
 17670  1608                     ___ftpack:	
 17671                           
 17672                           ;incstack = 0
 17673                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17674  1608  0020               	movlb	0	; select bank0
 17675  1609  0824               	movf	___ftpack@exp,w
 17676  160A  1903               	btfsc	3,2
 17677  160B  2E11               	goto	l8256
 17678  160C  0823               	movf	___ftpack@arg+2,w
 17679  160D  0422               	iorwf	___ftpack@arg+1,w
 17680  160E  0421               	iorwf	___ftpack@arg,w
 17681  160F  1D03               	skipz
 17682  1610  2E22               	goto	l8262
 17683  1611                     l8256:	
 17684  1611  3000               	movlw	0
 17685  1612  00A1               	movwf	?___ftpack
 17686  1613  3000               	movlw	0
 17687  1614  00A2               	movwf	?___ftpack+1
 17688  1615  3000               	movlw	0
 17689  1616  00A3               	movwf	?___ftpack+2
 17690  1617  0008               	return
 17691  1618                     l8260:	
 17692  1618  3001               	movlw	1
 17693  1619  00A6               	movwf	??___ftpack
 17694  161A  0826               	movf	??___ftpack,w
 17695  161B  07A4               	addwf	___ftpack@exp,f
 17696  161C  3001               	movlw	1
 17697  161D                     u8595:	
 17698  161D  36A3               	lsrf	___ftpack@arg+2,f
 17699  161E  0CA2               	rrf	___ftpack@arg+1,f
 17700  161F  0CA1               	rrf	___ftpack@arg,f
 17701  1620  0B89               	decfsz	9,f
 17702  1621  2E1D               	goto	u8595
 17703  1622                     l8262:	
 17704  1622  30FE               	movlw	254
 17705  1623  0523               	andwf	___ftpack@arg+2,w
 17706  1624  1903               	btfsc	3,2
 17707  1625  2E3B               	goto	l2836
 17708  1626  2E18               	goto	l8260
 17709  1627                     l8264:	
 17710  1627  3001               	movlw	1
 17711  1628  00A6               	movwf	??___ftpack
 17712  1629  0826               	movf	??___ftpack,w
 17713  162A  07A4               	addwf	___ftpack@exp,f
 17714  162B  3001               	movlw	1
 17715  162C  07A1               	addwf	___ftpack@arg,f
 17716  162D  3000               	movlw	0
 17717  162E  1803               	skipnc
 17718  162F  3001               	movlw	1
 17719  1630  07A2               	addwf	___ftpack@arg+1,f
 17720  1631  3000               	movlw	0
 17721  1632  1803               	skipnc
 17722  1633  3001               	movlw	1
 17723  1634  07A3               	addwf	___ftpack@arg+2,f
 17724  1635  3001               	movlw	1
 17725  1636                     u8615:	
 17726  1636  36A3               	lsrf	___ftpack@arg+2,f
 17727  1637  0CA2               	rrf	___ftpack@arg+1,f
 17728  1638  0CA1               	rrf	___ftpack@arg,f
 17729  1639  0B89               	decfsz	9,f
 17730  163A  2E36               	goto	u8615
 17731  163B                     l2836:	
 17732  163B  30FF               	movlw	255
 17733  163C  0523               	andwf	___ftpack@arg+2,w
 17734  163D  1903               	btfsc	3,2
 17735  163E  2E48               	goto	l8272
 17736  163F  2E27               	goto	l8264
 17737  1640                     l8270:	
 17738  1640  3001               	movlw	1
 17739  1641  02A4               	subwf	___ftpack@exp,f
 17740  1642  3001               	movlw	1
 17741  1643                     u8635:	
 17742  1643  35A1               	lslf	___ftpack@arg,f
 17743  1644  0DA2               	rlf	___ftpack@arg+1,f
 17744  1645  0DA3               	rlf	___ftpack@arg+2,f
 17745  1646  0B89               	decfsz	9,f
 17746  1647  2E43               	goto	u8635
 17747  1648                     l8272:	
 17748  1648  1FA2               	btfss	___ftpack@arg+1,7
 17749  1649  2E40               	goto	l8270
 17750  164A  1824               	btfsc	___ftpack@exp,0
 17751  164B  2E52               	goto	l2842
 17752  164C  30FF               	movlw	255
 17753  164D  05A1               	andwf	___ftpack@arg,f
 17754  164E  307F               	movlw	127
 17755  164F  05A2               	andwf	___ftpack@arg+1,f
 17756  1650  30FF               	movlw	255
 17757  1651  05A3               	andwf	___ftpack@arg+2,f
 17758  1652                     l2842:	
 17759  1652  1003               	clrc
 17760  1653  0CA4               	rrf	___ftpack@exp,f
 17761  1654  0824               	movf	___ftpack@exp,w
 17762  1655  00A6               	movwf	??___ftpack
 17763  1656  01A7               	clrf	??___ftpack+1
 17764  1657  01A8               	clrf	??___ftpack+2
 17765  1658  3010               	movlw	16
 17766  1659                     u8665:	
 17767  1659  35A6               	lslf	??___ftpack,f
 17768  165A  0DA7               	rlf	??___ftpack+1,f
 17769  165B  0DA8               	rlf	??___ftpack+2,f
 17770  165C  0B89               	decfsz	9,f
 17771  165D  2E59               	goto	u8665
 17772  165E  0826               	movf	??___ftpack,w
 17773  165F  04A1               	iorwf	___ftpack@arg,f
 17774  1660  0827               	movf	??___ftpack+1,w
 17775  1661  04A2               	iorwf	___ftpack@arg+1,f
 17776  1662  0828               	movf	??___ftpack+2,w
 17777  1663  04A3               	iorwf	___ftpack@arg+2,f
 17778  1664  0825               	movf	___ftpack@sign,w
 17779  1665  1903               	btfsc	3,2
 17780  1666  0008               	return
 17781  1667  17A3               	bsf	___ftpack@arg+2,7
 17782  1668  0008               	return
 17783  1669                     __end_of___ftpack:	
 17784                           
 17785                           	psect	text124
 17786  1B48                     __ptext124:	
 17787 ;; *************** function _DelayOff_Main *****************
 17788 ;; Defined at:
 17789 ;;		line 41 in file "../src/DelayOff_B1.c"
 17790 ;; Parameters:    Size  Location     Type
 17791 ;;		None
 17792 ;; Auto vars:     Size  Location     Type
 17793 ;;		None
 17794 ;; Return value:  Size  Location     Type
 17795 ;;		None               void
 17796 ;; Registers used:
 17797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17798 ;; Tracked objects:
 17799 ;;		On entry : 0/0
 17800 ;;		On exit  : 0/0
 17801 ;;		Unchanged: 0/0
 17802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17807 ;;Total ram usage:        0 bytes
 17808 ;; Hardware stack levels used:    1
 17809 ;; Hardware stack levels required when called:    9
 17810 ;; This function calls:
 17811 ;;		_DlyOff_Main
 17812 ;; This function is called by:
 17813 ;;		_main
 17814 ;; This function uses a non-reentrant model
 17815 ;;
 17816                           
 17817                           
 17818                           ;psect for function _DelayOff_Main
 17819  1B48                     _DelayOff_Main:	
 17820                           
 17821                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17822                           
 17823                           ;incstack = 0
 17824                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17825  1B48  3001               	movlw	1
 17826  1B49  3188  20E9         	fcall	_DlyOff_Main
 17827  1B4B  0008               	return
 17828  1B4C                     __end_of_DelayOff_Main:	
 17829                           
 17830                           	psect	text125
 17831  08E9                     __ptext125:	
 17832 ;; *************** function _DlyOff_Main *****************
 17833 ;; Defined at:
 17834 ;;		line 61 in file "../src/DelayOff_B1.c"
 17835 ;; Parameters:    Size  Location     Type
 17836 ;;  sw              1    wreg     unsigned char 
 17837 ;; Auto vars:     Size  Location     Type
 17838 ;;  sw              1   72[BANK0 ] unsigned char 
 17839 ;; Return value:  Size  Location     Type
 17840 ;;		None               void
 17841 ;; Registers used:
 17842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17843 ;; Tracked objects:
 17844 ;;		On entry : 0/0
 17845 ;;		On exit  : 0/0
 17846 ;;		Unchanged: 0/0
 17847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;Total ram usage:        3 bytes
 17853 ;; Hardware stack levels used:    1
 17854 ;; Hardware stack levels required when called:    8
 17855 ;; This function calls:
 17856 ;;		_DelayOffPointSelect
 17857 ;;		_getDimmerLights_Status
 17858 ;;		_setDimmerLights_SwOff
 17859 ;;		_setDimmerLights_SwOn
 17860 ;;		_setProductData
 17861 ;; This function is called by:
 17862 ;;		_DelayOff_Main
 17863 ;; This function uses a non-reentrant model
 17864 ;;
 17865                           
 17866                           
 17867                           ;psect for function _DlyOff_Main
 17868  08E9                     _DlyOff_Main:	
 17869                           
 17870                           ;incstack = 0
 17871                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17872                           ;DlyOff_Main@sw stored from wreg
 17873  08E9  0020               	movlb	0	; select bank0
 17874  08EA  00E8               	movwf	DlyOff_Main@sw
 17875                           
 17876                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17877  08EB  0868               	movf	DlyOff_Main@sw,w
 17878  08EC  319C  240C  3188   	fcall	_DelayOffPointSelect
 17879                           
 17880                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17881  08EF  0021               	movlb	1	; select bank1
 17882  08F0  084D               	movf	_DelayOff^(0+128),w
 17883  08F1  0086               	movwf	6
 17884  08F2  3001               	movlw	1	; select bank2/3
 17885  08F3  0087               	movwf	7
 17886  08F4  1C81               	btfss	1,1
 17887  08F5  0008               	return
 17888                           
 17889                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17890  08F6  084D               	movf	_DelayOff^(0+128),w
 17891  08F7  3E02               	addlw	2
 17892  08F8  0086               	movwf	6
 17893  08F9  3001               	movlw	1	; select bank2/3
 17894  08FA  0087               	movwf	7
 17895  08FB  3001               	movlw	1
 17896  08FC  0781               	addwf	1,f
 17897  08FD  3141               	addfsr 1,1
 17898  08FE  1803               	skipnc
 17899  08FF  0A81               	incf	1,f
 17900                           
 17901                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17902  0900  084D               	movf	_DelayOff^(0+128),w
 17903  0901  3E02               	addlw	2
 17904  0902  0086               	movwf	6
 17905  0903  3001               	movlw	1	; select bank2/3
 17906  0904  0087               	movwf	7
 17907  0905  3F40               	moviw [0]fsr1
 17908  0906  0020               	movlb	0	; select bank0
 17909  0907  00E6               	movwf	??_DlyOff_Main
 17910  0908  3F41               	moviw [1]fsr1
 17911  0909  00E7               	movwf	??_DlyOff_Main+1
 17912  090A  300B               	movlw	11
 17913  090B  0267               	subwf	??_DlyOff_Main+1,w
 17914  090C  30B8               	movlw	184
 17915  090D  1903               	skipnz
 17916  090E  0266               	subwf	??_DlyOff_Main,w
 17917  090F  1C03               	skipc
 17918  0910  0008               	return
 17919                           
 17920                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17921  0911  0021               	movlb	1	; select bank1
 17922  0912  084D               	movf	_DelayOff^(0+128),w
 17923  0913  3E02               	addlw	2
 17924  0914  0086               	movwf	6
 17925  0915  3001               	movlw	1	; select bank2/3
 17926  0916  0087               	movwf	7
 17927  0917  3000               	movlw	0
 17928  0918  3FC0               	movwi [0]fsr1
 17929  0919  3FC1               	movwi [1]fsr1
 17930                           
 17931                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17932  091A  3001               	movlw	1
 17933  091B  0020               	movlb	0	; select bank0
 17934  091C  00E6               	movwf	??_DlyOff_Main
 17935  091D  0021               	movlb	1	; select bank1
 17936  091E  084D               	movf	_DelayOff^(0+128),w
 17937  091F  3E04               	addlw	4
 17938  0920  0086               	movwf	6
 17939  0921  3001               	movlw	1	; select bank2/3
 17940  0922  0087               	movwf	7
 17941  0923  0020               	movlb	0	; select bank0
 17942  0924  0866               	movf	??_DlyOff_Main,w
 17943  0925  0781               	addwf	1,f
 17944                           
 17945                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17946  0926  0021               	movlb	1	; select bank1
 17947  0927  084D               	movf	_DelayOff^(0+128),w
 17948  0928  3E04               	addlw	4
 17949  0929  0086               	movwf	6
 17950  092A  3001               	movlw	1	; select bank2/3
 17951  092B  0087               	movwf	7
 17952  092C  0A4D               	incf	_DelayOff^(0+128),w
 17953  092D  0084               	movwf	4
 17954  092E  3001               	movlw	1	; select bank2/3
 17955  092F  0085               	movwf	5
 17956  0930  0800               	movf	0,w
 17957  0931  0201               	subwf	1,w
 17958  0932  1C03               	skipc
 17959  0933  0008               	return
 17960                           
 17961                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17962  0934  084D               	movf	_DelayOff^(0+128),w
 17963  0935  3E04               	addlw	4
 17964  0936  0086               	movwf	6
 17965  0937  3001               	movlw	1	; select bank2/3
 17966  0938  0087               	movwf	7
 17967  0939  0181               	clrf	1
 17968                           
 17969                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17970  093A  084D               	movf	_DelayOff^(0+128),w
 17971  093B  0086               	movwf	6
 17972  093C  3001               	movlw	1	; select bank2/3
 17973  093D  0087               	movwf	7
 17974  093E  1081               	bcf	1,1
 17975                           
 17976                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17977  093F  0020               	movlb	0	; select bank0
 17978  0940  0868               	movf	DlyOff_Main@sw,w
 17979  0941  319C  24BE  3188   	fcall	_getDimmerLights_Status
 17980  0944  3A01               	xorlw	1
 17981  0945  1D03               	skipz
 17982  0946  2951               	goto	l531
 17983                           
 17984                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17985  0947  0020               	movlb	0	; select bank0
 17986  0948  0868               	movf	DlyOff_Main@sw,w
 17987  0949  3191  21D7  3188   	fcall	_setDimmerLights_SwOn
 17988                           
 17989                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17990  094C  0020               	movlb	0	; select bank0
 17991  094D  0868               	movf	DlyOff_Main@sw,w
 17992  094E  3192  2279  3188   	fcall	_setDimmerLights_SwOff
 17993  0951                     l531:	
 17994                           
 17995                           ;DelayOff_B1.c: 78: }
 17996                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17997  0951  0020               	movlb	0	; select bank0
 17998  0952  01E3               	clrf	setProductData@value
 17999  0953  0868               	movf	DlyOff_Main@sw,w
 18000  0954  3E1A               	addlw	26
 18001  0955  319C  2424         	fcall	_setProductData
 18002  0957  0008               	return
 18003  0958                     __end_of_DlyOff_Main:	
 18004                           
 18005                           	psect	text126
 18006  1C24                     __ptext126:	
 18007 ;; *************** function _setProductData *****************
 18008 ;; Defined at:
 18009 ;;		line 645 in file "../src/Main_B1.c"
 18010 ;; Parameters:    Size  Location     Type
 18011 ;;  address         1    wreg     unsigned char 
 18012 ;;  value           1   67[BANK0 ] unsigned char 
 18013 ;; Auto vars:     Size  Location     Type
 18014 ;;  address         1   69[BANK0 ] unsigned char 
 18015 ;; Return value:  Size  Location     Type
 18016 ;;		None               void
 18017 ;; Registers used:
 18018 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18019 ;; Tracked objects:
 18020 ;;		On entry : 0/0
 18021 ;;		On exit  : 0/0
 18022 ;;		Unchanged: 0/0
 18023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18024 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18027 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18028 ;;Total ram usage:        3 bytes
 18029 ;; Hardware stack levels used:    1
 18030 ;; Hardware stack levels required when called:    5
 18031 ;; This function calls:
 18032 ;;		Nothing
 18033 ;; This function is called by:
 18034 ;;		_DlyOff_Main
 18035 ;;		_setDelayOff_GO
 18036 ;;		_setDimmerLights_OnOff
 18037 ;;		_setDimmerLights_Dimming
 18038 ;;		_setTemp_Main
 18039 ;;		_setLog_Code
 18040 ;;		_setControl_Lights_Table
 18041 ;;		_setRFSW_AdjControl
 18042 ;;		_setRF_DimmerLights
 18043 ;; This function uses a non-reentrant model
 18044 ;;
 18045                           
 18046                           
 18047                           ;psect for function _setProductData
 18048  1C24                     _setProductData:	
 18049                           
 18050                           ;incstack = 0
 18051                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18052                           ;setProductData@address stored from wreg
 18053  1C24  0020               	movlb	0	; select bank0
 18054  1C25  00E5               	movwf	setProductData@address
 18055                           
 18056                           ;Main_B1.c: 646: _product.Data[address] = value;
 18057  1C26  0863               	movf	setProductData@value,w
 18058  1C27  00E4               	movwf	??_setProductData
 18059  1C28  0865               	movf	setProductData@address,w
 18060  1C29  3E20               	addlw	__product& (0+255)
 18061  1C2A  0086               	movwf	6
 18062  1C2B  3002               	movlw	2	; select bank4/5
 18063  1C2C  0087               	movwf	7
 18064  1C2D  0864               	movf	??_setProductData,w
 18065  1C2E  0081               	movwf	1
 18066  1C2F  0008               	return
 18067  1C30                     __end_of_setProductData:	
 18068                           
 18069                           	psect	text127
 18070  11D7                     __ptext127:	
 18071 ;; *************** function _setDimmerLights_SwOn *****************
 18072 ;; Defined at:
 18073 ;;		line 672 in file "../src/Dimmer_B1.c"
 18074 ;; Parameters:    Size  Location     Type
 18075 ;;  sw              1    wreg     unsigned char 
 18076 ;; Auto vars:     Size  Location     Type
 18077 ;;  sw              1   14[BANK0 ] unsigned char 
 18078 ;;  idle            1   15[BANK0 ] unsigned char 
 18079 ;; Return value:  Size  Location     Type
 18080 ;;		None               void
 18081 ;; Registers used:
 18082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18083 ;; Tracked objects:
 18084 ;;		On entry : 0/0
 18085 ;;		On exit  : 0/0
 18086 ;;		Unchanged: 0/0
 18087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;Total ram usage:        2 bytes
 18093 ;; Hardware stack levels used:    1
 18094 ;; Hardware stack levels required when called:    7
 18095 ;; This function calls:
 18096 ;;		_DimmerLights_SelectPointer
 18097 ;;		_setBuz
 18098 ;; This function is called by:
 18099 ;;		_DlyOff_Main
 18100 ;;		_setControl_Lights_Table
 18101 ;;		_setRFSW_Control
 18102 ;;		_setRFSW_AdjControl
 18103 ;;		_setSw_Main
 18104 ;; This function uses a non-reentrant model
 18105 ;;
 18106                           
 18107                           
 18108                           ;psect for function _setDimmerLights_SwOn
 18109  11D7                     _setDimmerLights_SwOn:	
 18110                           
 18111                           ;incstack = 0
 18112                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18113                           ;setDimmerLights_SwOn@sw stored from wreg
 18114  11D7  0020               	movlb	0	; select bank0
 18115  11D8  00AE               	movwf	setDimmerLights_SwOn@sw
 18116                           
 18117                           ;Dimmer_B1.c: 673: char idle = 0;
 18118  11D9  01AF               	clrf	setDimmerLights_SwOn@idle
 18119                           
 18120                           ;Dimmer_B1.c: 698: DimmerLights_SelectPointer(sw);
 18121  11DA  082E               	movf	setDimmerLights_SwOn@sw,w
 18122  11DB  319C  2418  3191   	fcall	_DimmerLights_SelectPointer
 18123                           
 18124                           ;Dimmer_B1.c: 699: if (idle == 0) {
 18125  11DE  0020               	movlb	0	; select bank0
 18126  11DF  08AF               	movf	setDimmerLights_SwOn@idle,f
 18127  11E0  1D03               	skipz
 18128  11E1  0008               	return
 18129                           
 18130                           ;Dimmer_B1.c: 700: DimmerLights->SwFlag = 1;
 18131  11E2  0021               	movlb	1	; select bank1
 18132  11E3  084F               	movf	_DimmerLights^(0+128),w
 18133  11E4  0086               	movwf	6
 18134  11E5  3001               	movlw	1	; select bank2/3
 18135  11E6  0087               	movwf	7
 18136  11E7  1401               	bsf	1,0
 18137                           
 18138                           ;Dimmer_B1.c: 701: if (DimmerLights->Status == 0) {
 18139  11E8  0A4F               	incf	_DimmerLights^(0+128),w
 18140  11E9  0086               	movwf	6
 18141  11EA  3001               	movlw	1	; select bank2/3
 18142  11EB  0087               	movwf	7
 18143  11EC  1801               	btfsc	1,0
 18144  11ED  29FE               	goto	l8594
 18145                           
 18146                           ;Dimmer_B1.c: 702: DimmerLights->Status = 1;
 18147  11EE  0A4F               	incf	_DimmerLights^(0+128),w
 18148  11EF  0086               	movwf	6
 18149  11F0  3001               	movlw	1	; select bank2/3
 18150  11F1  0087               	movwf	7
 18151  11F2  1401               	bsf	1,0
 18152                           
 18153                           ;Dimmer_B1.c: 703: DimmerLights->Trigger = 1;
 18154  11F3  084F               	movf	_DimmerLights^(0+128),w
 18155  11F4  0086               	movwf	6
 18156  11F5  3001               	movlw	1	; select bank2/3
 18157  11F6  0087               	movwf	7
 18158  11F7  1481               	bsf	1,1
 18159                           
 18160                           ;Dimmer_B1.c: 704: DimmerLights->Switch = 1;
 18161  11F8  084F               	movf	_DimmerLights^(0+128),w
 18162  11F9  0086               	movwf	6
 18163  11FA  3001               	movlw	1	; select bank2/3
 18164  11FB  0087               	movwf	7
 18165  11FC  1501               	bsf	1,2
 18166                           
 18167                           ;Dimmer_B1.c: 705: } else {
 18168  11FD  2A03               	goto	l8596
 18169  11FE                     l8594:	
 18170                           
 18171                           ;Dimmer_B1.c: 706: DimmerLights->Status = 0;
 18172  11FE  0A4F               	incf	_DimmerLights^(0+128),w
 18173  11FF  0086               	movwf	6
 18174  1200  3001               	movlw	1	; select bank2/3
 18175  1201  0087               	movwf	7
 18176  1202  1001               	bcf	1,0
 18177  1203                     l8596:	
 18178                           
 18179                           ;Dimmer_B1.c: 707: }
 18180                           ;Dimmer_B1.c: 708: setBuz(1, 100);
 18181  1203  3064               	movlw	100
 18182  1204  0020               	movlb	0	; select bank0
 18183  1205  00AA               	movwf	setBuz@time
 18184  1206  3000               	movlw	0
 18185  1207  00AB               	movwf	setBuz@time+1
 18186  1208  3001               	movlw	1
 18187  1209  3194  24F6         	fcall	_setBuz
 18188  120B  0008               	return
 18189  120C                     __end_of_setDimmerLights_SwOn:	
 18190                           
 18191                           	psect	text128
 18192  14F6                     __ptext128:	
 18193 ;; *************** function _setBuz *****************
 18194 ;; Defined at:
 18195 ;;		line 22 in file "../src/Buzzer_B1.c"
 18196 ;; Parameters:    Size  Location     Type
 18197 ;;  count           1    wreg     unsigned char 
 18198 ;;  time            2   10[BANK0 ] int 
 18199 ;; Auto vars:     Size  Location     Type
 18200 ;;  count           1   13[BANK0 ] unsigned char 
 18201 ;; Return value:  Size  Location     Type
 18202 ;;		None               void
 18203 ;; Registers used:
 18204 ;;		wreg, status,2, status,0, pclath, cstack
 18205 ;; Tracked objects:
 18206 ;;		On entry : 0/0
 18207 ;;		On exit  : 0/0
 18208 ;;		Unchanged: 0/0
 18209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18213 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18214 ;;Total ram usage:        4 bytes
 18215 ;; Hardware stack levels used:    1
 18216 ;; Hardware stack levels required when called:    6
 18217 ;; This function calls:
 18218 ;;		___awdiv
 18219 ;; This function is called by:
 18220 ;;		_setDimmerLights_SwOn
 18221 ;;		_setDimmerLights_Dimming
 18222 ;;		_my_MainTimer
 18223 ;;		_Exception_Main
 18224 ;;		_setTemp_Main
 18225 ;;		_setLog_Code
 18226 ;;		_setRFSW_Control
 18227 ;;		_setSw_Main
 18228 ;; This function uses a non-reentrant model
 18229 ;;
 18230                           
 18231                           
 18232                           ;psect for function _setBuz
 18233  14F6                     _setBuz:	
 18234                           
 18235                           ;incstack = 0
 18236                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18237                           ;setBuz@count stored from wreg
 18238  14F6  0020               	movlb	0	; select bank0
 18239  14F7  00AD               	movwf	setBuz@count
 18240                           
 18241                           ;Buzzer_B1.c: 23: time /= 20;
 18242  14F8  3014               	movlw	20
 18243  14F9  00A1               	movwf	___awdiv@divisor
 18244  14FA  3000               	movlw	0
 18245  14FB  00A2               	movwf	___awdiv@divisor+1
 18246  14FC  082B               	movf	setBuz@time+1,w
 18247  14FD  01A4               	clrf	___awdiv@dividend+1
 18248  14FE  07A4               	addwf	___awdiv@dividend+1,f
 18249  14FF  082A               	movf	setBuz@time,w
 18250  1500  01A3               	clrf	___awdiv@dividend
 18251  1501  07A3               	addwf	___awdiv@dividend,f
 18252  1502  3187  27A9  3194   	fcall	___awdiv
 18253  1505  0020               	movlb	0	; select bank0
 18254  1506  0822               	movf	?___awdiv+1,w
 18255  1507  01AB               	clrf	setBuz@time+1
 18256  1508  07AB               	addwf	setBuz@time+1,f
 18257  1509  0821               	movf	?___awdiv,w
 18258  150A  01AA               	clrf	setBuz@time
 18259  150B  07AA               	addwf	setBuz@time,f
 18260                           
 18261                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18262  150C  0022               	movlb	2	; select bank2
 18263  150D  1C20               	btfss	_Buz1^(0+256),0
 18264  150E  0008               	return
 18265                           
 18266                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18267  150F  18A0               	btfsc	_Buz1^(0+256),1
 18268  1510  2D27               	goto	l86
 18269                           
 18270                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18271  1511  14A0               	bsf	_Buz1^(0+256),1
 18272                           
 18273                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18274  1512  01A1               	clrf	(_Buz1^(0+256)+1)
 18275  1513  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18276                           
 18277                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18278  1514  0020               	movlb	0	; select bank0
 18279  1515  082D               	movf	setBuz@count,w
 18280  1516  00AC               	movwf	??_setBuz
 18281  1517  082C               	movf	??_setBuz,w
 18282  1518  0022               	movlb	2	; select bank2
 18283  1519  00A3               	movwf	(_Buz1^(0+256)+3)
 18284                           
 18285                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18286  151A  0020               	movlb	0	; select bank0
 18287  151B  082B               	movf	setBuz@time+1,w
 18288  151C  0022               	movlb	2	; select bank2
 18289  151D  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18290  151E  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18291  151F  0020               	movlb	0	; select bank0
 18292  1520  082A               	movf	setBuz@time,w
 18293  1521  0022               	movlb	2	; select bank2
 18294  1522  01A6               	clrf	(_Buz1^(0+256)+6)
 18295  1523  07A6               	addwf	(_Buz1^(0+256)+6),f
 18296                           
 18297                           ;Buzzer_B1.c: 30: RB3 = 1;
 18298  1524  0020               	movlb	0	; select bank0
 18299  1525  158D               	bsf	13,3	;volatile
 18300                           
 18301                           ;Buzzer_B1.c: 31: } else {
 18302  1526  0008               	return
 18303  1527                     l86:	
 18304                           
 18305                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18306  1527  19A0               	btfsc	_Buz1^(0+256),3
 18307  1528  2D3B               	goto	l88
 18308                           
 18309                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18310  1529  15A0               	bsf	_Buz1^(0+256),3
 18311                           
 18312                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18313  152A  0020               	movlb	0	; select bank0
 18314  152B  082D               	movf	setBuz@count,w
 18315  152C  00AC               	movwf	??_setBuz
 18316  152D  082C               	movf	??_setBuz,w
 18317  152E  0022               	movlb	2	; select bank2
 18318  152F  00A4               	movwf	(_Buz1^(0+256)+4)
 18319                           
 18320                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18321  1530  0020               	movlb	0	; select bank0
 18322  1531  082B               	movf	setBuz@time+1,w
 18323  1532  0022               	movlb	2	; select bank2
 18324  1533  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 18325  1534  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 18326  1535  0020               	movlb	0	; select bank0
 18327  1536  082A               	movf	setBuz@time,w
 18328  1537  0022               	movlb	2	; select bank2
 18329  1538  01A8               	clrf	(_Buz1^(0+256)+8)
 18330  1539  07A8               	addwf	(_Buz1^(0+256)+8),f
 18331                           
 18332                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18333  153A  0008               	return
 18334  153B                     l88:	
 18335  153B  1A20               	btfsc	_Buz1^(0+256),4
 18336  153C  0008               	return
 18337                           
 18338                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18339  153D  1620               	bsf	_Buz1^(0+256),4
 18340                           
 18341                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18342  153E  0020               	movlb	0	; select bank0
 18343  153F  082D               	movf	setBuz@count,w
 18344  1540  00AC               	movwf	??_setBuz
 18345  1541  082C               	movf	??_setBuz,w
 18346  1542  0022               	movlb	2	; select bank2
 18347  1543  00A5               	movwf	(_Buz1^(0+256)+5)
 18348                           
 18349                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18350  1544  0020               	movlb	0	; select bank0
 18351  1545  082B               	movf	setBuz@time+1,w
 18352  1546  0022               	movlb	2	; select bank2
 18353  1547  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 18354  1548  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 18355  1549  0020               	movlb	0	; select bank0
 18356  154A  082A               	movf	setBuz@time,w
 18357  154B  0022               	movlb	2	; select bank2
 18358  154C  01AA               	clrf	(_Buz1^(0+256)+10)
 18359  154D  07AA               	addwf	(_Buz1^(0+256)+10),f
 18360  154E  0008               	return
 18361  154F                     __end_of_setBuz:	
 18362                           
 18363                           	psect	text129
 18364  07A9                     __ptext129:	
 18365 ;; *************** function ___awdiv *****************
 18366 ;; Defined at:
 18367 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18368 ;; Parameters:    Size  Location     Type
 18369 ;;  divisor         2    1[BANK0 ] int 
 18370 ;;  dividend        2    3[BANK0 ] int 
 18371 ;; Auto vars:     Size  Location     Type
 18372 ;;  quotient        2    8[BANK0 ] int 
 18373 ;;  sign            1    7[BANK0 ] unsigned char 
 18374 ;;  counter         1    6[BANK0 ] unsigned char 
 18375 ;; Return value:  Size  Location     Type
 18376 ;;                  2    1[BANK0 ] int 
 18377 ;; Registers used:
 18378 ;;		wreg, status,2, status,0
 18379 ;; Tracked objects:
 18380 ;;		On entry : 0/0
 18381 ;;		On exit  : 0/0
 18382 ;;		Unchanged: 0/0
 18383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18384 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18385 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18387 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18388 ;;Total ram usage:        9 bytes
 18389 ;; Hardware stack levels used:    1
 18390 ;; Hardware stack levels required when called:    5
 18391 ;; This function calls:
 18392 ;;		Nothing
 18393 ;; This function is called by:
 18394 ;;		_setBuz
 18395 ;; This function uses a non-reentrant model
 18396 ;;
 18397                           
 18398                           
 18399                           ;psect for function ___awdiv
 18400  07A9                     ___awdiv:	
 18401                           
 18402                           ;incstack = 0
 18403                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18404  07A9  0020               	movlb	0	; select bank0
 18405  07AA  01A7               	clrf	___awdiv@sign
 18406  07AB  1FA2               	btfss	___awdiv@divisor+1,7
 18407  07AC  2FB4               	goto	l8290
 18408  07AD  09A1               	comf	___awdiv@divisor,f
 18409  07AE  09A2               	comf	___awdiv@divisor+1,f
 18410  07AF  0AA1               	incf	___awdiv@divisor,f
 18411  07B0  1903               	skipnz
 18412  07B1  0AA2               	incf	___awdiv@divisor+1,f
 18413  07B2  01A7               	clrf	___awdiv@sign
 18414  07B3  0AA7               	incf	___awdiv@sign,f
 18415  07B4                     l8290:	
 18416  07B4  1FA4               	btfss	___awdiv@dividend+1,7
 18417  07B5  2FBF               	goto	l8296
 18418  07B6  09A3               	comf	___awdiv@dividend,f
 18419  07B7  09A4               	comf	___awdiv@dividend+1,f
 18420  07B8  0AA3               	incf	___awdiv@dividend,f
 18421  07B9  1903               	skipnz
 18422  07BA  0AA4               	incf	___awdiv@dividend+1,f
 18423  07BB  3001               	movlw	1
 18424  07BC  00A5               	movwf	??___awdiv
 18425  07BD  0825               	movf	??___awdiv,w
 18426  07BE  06A7               	xorwf	___awdiv@sign,f
 18427  07BF                     l8296:	
 18428  07BF  01A8               	clrf	___awdiv@quotient
 18429  07C0  01A9               	clrf	___awdiv@quotient+1
 18430  07C1  0822               	movf	___awdiv@divisor+1,w
 18431  07C2  0421               	iorwf	___awdiv@divisor,w
 18432  07C3  1903               	skipnz
 18433  07C4  2FEE               	goto	l8318
 18434  07C5  01A6               	clrf	___awdiv@counter
 18435  07C6  0AA6               	incf	___awdiv@counter,f
 18436  07C7                     l8306:	
 18437  07C7  1BA2               	btfsc	___awdiv@divisor+1,7
 18438  07C8  2FD3               	goto	l8308
 18439  07C9  3001               	movlw	1
 18440  07CA                     u8715:	
 18441  07CA  35A1               	lslf	___awdiv@divisor,f
 18442  07CB  0DA2               	rlf	___awdiv@divisor+1,f
 18443  07CC  0B89               	decfsz	9,f
 18444  07CD  2FCA               	goto	u8715
 18445  07CE  3001               	movlw	1
 18446  07CF  00A5               	movwf	??___awdiv
 18447  07D0  0825               	movf	??___awdiv,w
 18448  07D1  07A6               	addwf	___awdiv@counter,f
 18449  07D2  2FC7               	goto	l8306
 18450  07D3                     l8308:	
 18451  07D3  3001               	movlw	1
 18452  07D4                     u8735:	
 18453  07D4  35A8               	lslf	___awdiv@quotient,f
 18454  07D5  0DA9               	rlf	___awdiv@quotient+1,f
 18455  07D6  0B89               	decfsz	9,f
 18456  07D7  2FD4               	goto	u8735
 18457  07D8  0822               	movf	___awdiv@divisor+1,w
 18458  07D9  0224               	subwf	___awdiv@dividend+1,w
 18459  07DA  1D03               	skipz
 18460  07DB  2FDE               	goto	u8745
 18461  07DC  0821               	movf	___awdiv@divisor,w
 18462  07DD  0223               	subwf	___awdiv@dividend,w
 18463  07DE                     u8745:	
 18464  07DE  1C03               	skipc
 18465  07DF  2FE5               	goto	l8314
 18466  07E0  0821               	movf	___awdiv@divisor,w
 18467  07E1  02A3               	subwf	___awdiv@dividend,f
 18468  07E2  0822               	movf	___awdiv@divisor+1,w
 18469  07E3  3BA4               	subwfb	___awdiv@dividend+1,f
 18470  07E4  1428               	bsf	___awdiv@quotient,0
 18471  07E5                     l8314:	
 18472  07E5  3001               	movlw	1
 18473  07E6                     u8755:	
 18474  07E6  36A2               	lsrf	___awdiv@divisor+1,f
 18475  07E7  0CA1               	rrf	___awdiv@divisor,f
 18476  07E8  0B89               	decfsz	9,f
 18477  07E9  2FE6               	goto	u8755
 18478  07EA  3001               	movlw	1
 18479  07EB  02A6               	subwf	___awdiv@counter,f
 18480  07EC  1D03               	btfss	3,2
 18481  07ED  2FD3               	goto	l8308
 18482  07EE                     l8318:	
 18483  07EE  0827               	movf	___awdiv@sign,w
 18484  07EF  1903               	btfsc	3,2
 18485  07F0  2FF6               	goto	l8322
 18486  07F1  09A8               	comf	___awdiv@quotient,f
 18487  07F2  09A9               	comf	___awdiv@quotient+1,f
 18488  07F3  0AA8               	incf	___awdiv@quotient,f
 18489  07F4  1903               	skipnz
 18490  07F5  0AA9               	incf	___awdiv@quotient+1,f
 18491  07F6                     l8322:	
 18492  07F6  0829               	movf	___awdiv@quotient+1,w
 18493  07F7  01A2               	clrf	?___awdiv+1
 18494  07F8  07A2               	addwf	?___awdiv+1,f
 18495  07F9  0828               	movf	___awdiv@quotient,w
 18496  07FA  01A1               	clrf	?___awdiv
 18497  07FB  07A1               	addwf	?___awdiv,f
 18498  07FC  0008               	return
 18499  07FD                     __end_of___awdiv:	
 18500                           
 18501                           	psect	text130
 18502  1279                     __ptext130:	
 18503 ;; *************** function _setDimmerLights_SwOff *****************
 18504 ;; Defined at:
 18505 ;;		line 713 in file "../src/Dimmer_B1.c"
 18506 ;; Parameters:    Size  Location     Type
 18507 ;;  sw              1    wreg     unsigned char 
 18508 ;; Auto vars:     Size  Location     Type
 18509 ;;  sw              1    3[BANK0 ] unsigned char 
 18510 ;; Return value:  Size  Location     Type
 18511 ;;		None               void
 18512 ;; Registers used:
 18513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18514 ;; Tracked objects:
 18515 ;;		On entry : 0/0
 18516 ;;		On exit  : 0/0
 18517 ;;		Unchanged: 0/0
 18518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18522 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18523 ;;Total ram usage:        1 bytes
 18524 ;; Hardware stack levels used:    1
 18525 ;; Hardware stack levels required when called:    6
 18526 ;; This function calls:
 18527 ;;		_DimmerLights_SelectPointer
 18528 ;; This function is called by:
 18529 ;;		_DlyOff_Main
 18530 ;;		_Exception_Main
 18531 ;;		_setControl_Lights_Table
 18532 ;;		_setRFSW_Control
 18533 ;;		_setRFSW_AdjControl
 18534 ;;		_setSw_Main
 18535 ;; This function uses a non-reentrant model
 18536 ;;
 18537                           
 18538                           
 18539                           ;psect for function _setDimmerLights_SwOff
 18540  1279                     _setDimmerLights_SwOff:	
 18541                           
 18542                           ;incstack = 0
 18543                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18544                           ;setDimmerLights_SwOff@sw stored from wreg
 18545  1279  0020               	movlb	0	; select bank0
 18546  127A  00A3               	movwf	setDimmerLights_SwOff@sw
 18547                           
 18548                           ;Dimmer_B1.c: 714: DimmerLights_SelectPointer(sw);
 18549  127B  0823               	movf	setDimmerLights_SwOff@sw,w
 18550  127C  319C  2418  3192   	fcall	_DimmerLights_SelectPointer
 18551                           
 18552                           ;Dimmer_B1.c: 716: if (DimmerLights->SwFlag == 1) {
 18553  127F  0021               	movlb	1	; select bank1
 18554  1280  084F               	movf	_DimmerLights^(0+128),w
 18555  1281  0086               	movwf	6
 18556  1282  3001               	movlw	1	; select bank2/3
 18557  1283  0087               	movwf	7
 18558  1284  1C01               	btfss	1,0
 18559  1285  0008               	return
 18560                           
 18561                           ;Dimmer_B1.c: 717: DimmerLights->SwFlag = 0;
 18562  1286  084F               	movf	_DimmerLights^(0+128),w
 18563  1287  0086               	movwf	6
 18564  1288  3001               	movlw	1	; select bank2/3
 18565  1289  0087               	movwf	7
 18566  128A  1001               	bcf	1,0
 18567                           
 18568                           ;Dimmer_B1.c: 718: if (DimmerLights->Status == 1) {
 18569  128B  0A4F               	incf	_DimmerLights^(0+128),w
 18570  128C  0086               	movwf	6
 18571  128D  3001               	movlw	1	; select bank2/3
 18572  128E  0087               	movwf	7
 18573  128F  1C01               	btfss	1,0
 18574  1290  2AA7               	goto	l6072
 18575                           
 18576                           ;Dimmer_B1.c: 719: if (DimmerLights->DimmingSwFlag == 1) {
 18577  1291  084F               	movf	_DimmerLights^(0+128),w
 18578  1292  0086               	movwf	6
 18579  1293  3001               	movlw	1	; select bank2/3
 18580  1294  0087               	movwf	7
 18581  1295  1D81               	btfss	1,3
 18582  1296  0008               	return
 18583                           
 18584                           ;Dimmer_B1.c: 720: DimmerLights->DimmingSwFlag = 0;
 18585  1297  084F               	movf	_DimmerLights^(0+128),w
 18586  1298  0086               	movwf	6
 18587  1299  3001               	movlw	1	; select bank2/3
 18588  129A  0087               	movwf	7
 18589  129B  1181               	bcf	1,3
 18590                           
 18591                           ;Dimmer_B1.c: 722: DimmerLights->DimmingTrigger = 1;
 18592  129C  084F               	movf	_DimmerLights^(0+128),w
 18593  129D  0086               	movwf	6
 18594  129E  3001               	movlw	1	; select bank2/3
 18595  129F  0087               	movwf	7
 18596  12A0  1601               	bsf	1,4
 18597                           
 18598                           ;Dimmer_B1.c: 723: DimmerLights->DimmingSwitch = 0;
 18599  12A1  084F               	movf	_DimmerLights^(0+128),w
 18600  12A2  0086               	movwf	6
 18601  12A3  3001               	movlw	1	; select bank2/3
 18602  12A4  0087               	movwf	7
 18603  12A5  1281               	bcf	1,5
 18604                           
 18605                           ;Dimmer_B1.c: 724: }
 18606                           ;Dimmer_B1.c: 725: } else {
 18607  12A6  0008               	return
 18608  12A7                     l6072:	
 18609                           
 18610                           ;Dimmer_B1.c: 727: DimmerLights->Trigger = 1;
 18611  12A7  084F               	movf	_DimmerLights^(0+128),w
 18612  12A8  0086               	movwf	6
 18613  12A9  3001               	movlw	1	; select bank2/3
 18614  12AA  0087               	movwf	7
 18615  12AB  1481               	bsf	1,1
 18616                           
 18617                           ;Dimmer_B1.c: 728: DimmerLights->Switch = 0;
 18618  12AC  084F               	movf	_DimmerLights^(0+128),w
 18619  12AD  0086               	movwf	6
 18620  12AE  3001               	movlw	1	; select bank2/3
 18621  12AF  0087               	movwf	7
 18622  12B0  1101               	bcf	1,2
 18623  12B1  0008               	return
 18624  12B2                     __end_of_setDimmerLights_SwOff:	
 18625                           
 18626                           	psect	text131
 18627  1CBE                     __ptext131:	
 18628 ;; *************** function _getDimmerLights_Status *****************
 18629 ;; Defined at:
 18630 ;;		line 1043 in file "../src/Dimmer_B1.c"
 18631 ;; Parameters:    Size  Location     Type
 18632 ;;  lights          1    wreg     unsigned char 
 18633 ;; Auto vars:     Size  Location     Type
 18634 ;;  lights          1    3[BANK0 ] unsigned char 
 18635 ;;  status          1    4[BANK0 ] unsigned char 
 18636 ;; Return value:  Size  Location     Type
 18637 ;;                  1    wreg      unsigned char 
 18638 ;; Registers used:
 18639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18640 ;; Tracked objects:
 18641 ;;		On entry : 0/0
 18642 ;;		On exit  : 0/0
 18643 ;;		Unchanged: 0/0
 18644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18646 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18649 ;;Total ram usage:        2 bytes
 18650 ;; Hardware stack levels used:    1
 18651 ;; Hardware stack levels required when called:    6
 18652 ;; This function calls:
 18653 ;;		_DimmerLights_SelectPointer
 18654 ;; This function is called by:
 18655 ;;		_DlyOff_Main
 18656 ;;		_Exception_Main
 18657 ;;		_setControl_Lights_Table
 18658 ;;		_setRFSW_Control
 18659 ;;		_setRFSW_AdjControl
 18660 ;; This function uses a non-reentrant model
 18661 ;;
 18662                           
 18663                           
 18664                           ;psect for function _getDimmerLights_Status
 18665  1CBE                     _getDimmerLights_Status:	
 18666                           
 18667                           ;incstack = 0
 18668                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18669                           ;getDimmerLights_Status@lights stored from wreg
 18670  1CBE  0020               	movlb	0	; select bank0
 18671  1CBF  00A3               	movwf	getDimmerLights_Status@lights
 18672                           
 18673                           ;Dimmer_B1.c: 1044: DimmerLights_SelectPointer(lights);
 18674  1CC0  0823               	movf	getDimmerLights_Status@lights,w
 18675  1CC1  319C  2418         	fcall	_DimmerLights_SelectPointer
 18676                           
 18677                           ;Dimmer_B1.c: 1045: char status = DimmerLights->Status == 1 ? 1 : 0;
 18678  1CC3  0021               	movlb	1	; select bank1
 18679  1CC4  0A4F               	incf	_DimmerLights^(0+128),w
 18680  1CC5  0086               	movwf	6
 18681  1CC6  3001               	movlw	1	; select bank2/3
 18682  1CC7  0087               	movwf	7
 18683  1CC8  3000               	movlw	0
 18684  1CC9  1801               	btfsc	1,0
 18685  1CCA  3001               	movlw	1
 18686  1CCB  0020               	movlb	0	; select bank0
 18687  1CCC  00A4               	movwf	getDimmerLights_Status@status
 18688                           
 18689                           ;Dimmer_B1.c: 1046: return status;
 18690  1CCD  0824               	movf	getDimmerLights_Status@status,w
 18691  1CCE  0008               	return
 18692  1CCF                     __end_of_getDimmerLights_Status:	
 18693                           
 18694                           	psect	text132
 18695  1C18                     __ptext132:	
 18696 ;; *************** function _DimmerLights_SelectPointer *****************
 18697 ;; Defined at:
 18698 ;;		line 595 in file "../src/Dimmer_B1.c"
 18699 ;; Parameters:    Size  Location     Type
 18700 ;;  lights          1    wreg     unsigned char 
 18701 ;; Auto vars:     Size  Location     Type
 18702 ;;  lights          1    2[BANK0 ] unsigned char 
 18703 ;; Return value:  Size  Location     Type
 18704 ;;		None               void
 18705 ;; Registers used:
 18706 ;;		wreg
 18707 ;; Tracked objects:
 18708 ;;		On entry : 0/0
 18709 ;;		On exit  : 0/0
 18710 ;;		Unchanged: 0/0
 18711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18716 ;;Total ram usage:        2 bytes
 18717 ;; Hardware stack levels used:    1
 18718 ;; Hardware stack levels required when called:    5
 18719 ;; This function calls:
 18720 ;;		Nothing
 18721 ;; This function is called by:
 18722 ;;		_setDimmerLights_SwOn
 18723 ;;		_setDimmerLights_SwOff
 18724 ;;		_setDimmerLights_DimmingOn
 18725 ;;		_setDimmerLights_Main
 18726 ;;		_getDimmerLights_Status
 18727 ;;		_setDimmerLights_DimmingRun
 18728 ;;		_setDimmerLights_Status
 18729 ;; This function uses a non-reentrant model
 18730 ;;
 18731                           
 18732                           
 18733                           ;psect for function _DimmerLights_SelectPointer
 18734  1C18                     _DimmerLights_SelectPointer:	
 18735                           
 18736                           ;incstack = 0
 18737                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18738                           ;DimmerLights_SelectPointer@lights stored from wreg
 18739  1C18  0020               	movlb	0	; select bank0
 18740  1C19  00A2               	movwf	DimmerLights_SelectPointer@lights
 18741                           
 18742                           ;Dimmer_B1.c: 597: if (lights == 1) {
 18743  1C1A  0822               	movf	DimmerLights_SelectPointer@lights,w
 18744  1C1B  3A01               	xorlw	1
 18745  1C1C  1D03               	skipz
 18746  1C1D  0008               	return
 18747                           
 18748                           ;Dimmer_B1.c: 598: DimmerLights = &DimmerLights1;
 18749  1C1E  305C               	movlw	_DimmerLights1& (0+255)
 18750  1C1F  00A1               	movwf	??_DimmerLights_SelectPointer
 18751  1C20  0821               	movf	??_DimmerLights_SelectPointer,w
 18752  1C21  0021               	movlb	1	; select bank1
 18753  1C22  00CF               	movwf	_DimmerLights^(0+128)
 18754  1C23  0008               	return
 18755  1C24                     __end_of_DimmerLights_SelectPointer:	
 18756                           
 18757                           	psect	text133
 18758  1B44                     __ptext133:	
 18759 ;; *************** function _DelayOff_Initialization *****************
 18760 ;; Defined at:
 18761 ;;		line 26 in file "../src/DelayOff_B1.c"
 18762 ;; Parameters:    Size  Location     Type
 18763 ;;		None
 18764 ;; Auto vars:     Size  Location     Type
 18765 ;;		None
 18766 ;; Return value:  Size  Location     Type
 18767 ;;		None               void
 18768 ;; Registers used:
 18769 ;;		wreg, status,2, status,0, pclath, cstack
 18770 ;; Tracked objects:
 18771 ;;		On entry : 0/0
 18772 ;;		On exit  : 0/0
 18773 ;;		Unchanged: 0/0
 18774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18779 ;;Total ram usage:        0 bytes
 18780 ;; Hardware stack levels used:    1
 18781 ;; Hardware stack levels required when called:    7
 18782 ;; This function calls:
 18783 ;;		_DlyOff_Initialization
 18784 ;; This function is called by:
 18785 ;;		_main
 18786 ;; This function uses a non-reentrant model
 18787 ;;
 18788                           
 18789                           
 18790                           ;psect for function _DelayOff_Initialization
 18791  1B44                     _DelayOff_Initialization:	
 18792                           
 18793                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18794                           
 18795                           ;incstack = 0
 18796                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18797  1B44  3001               	movlw	1
 18798  1B45  319B  2371         	fcall	_DlyOff_Initialization
 18799  1B47  0008               	return
 18800  1B48                     __end_of_DelayOff_Initialization:	
 18801                           
 18802                           	psect	text134
 18803  1B71                     __ptext134:	
 18804 ;; *************** function _DlyOff_Initialization *****************
 18805 ;; Defined at:
 18806 ;;		line 56 in file "../src/DelayOff_B1.c"
 18807 ;; Parameters:    Size  Location     Type
 18808 ;;  sw              1    wreg     unsigned char 
 18809 ;; Auto vars:     Size  Location     Type
 18810 ;;  sw              1    3[BANK0 ] unsigned char 
 18811 ;; Return value:  Size  Location     Type
 18812 ;;		None               void
 18813 ;; Registers used:
 18814 ;;		wreg, status,2, status,0, pclath, cstack
 18815 ;; Tracked objects:
 18816 ;;		On entry : 0/0
 18817 ;;		On exit  : 0/0
 18818 ;;		Unchanged: 0/0
 18819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18823 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18824 ;;Total ram usage:        1 bytes
 18825 ;; Hardware stack levels used:    1
 18826 ;; Hardware stack levels required when called:    6
 18827 ;; This function calls:
 18828 ;;		_DelayOffPointSelect
 18829 ;; This function is called by:
 18830 ;;		_DelayOff_Initialization
 18831 ;; This function uses a non-reentrant model
 18832 ;;
 18833                           
 18834                           
 18835                           ;psect for function _DlyOff_Initialization
 18836  1B71                     _DlyOff_Initialization:	
 18837                           
 18838                           ;incstack = 0
 18839                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18840                           ;DlyOff_Initialization@sw stored from wreg
 18841  1B71  0020               	movlb	0	; select bank0
 18842  1B72  00A3               	movwf	DlyOff_Initialization@sw
 18843                           
 18844                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18845  1B73  0823               	movf	DlyOff_Initialization@sw,w
 18846  1B74  319C  240C         	fcall	_DelayOffPointSelect
 18847  1B76  0008               	return
 18848  1B77                     __end_of_DlyOff_Initialization:	
 18849                           
 18850                           	psect	text135
 18851  1C0C                     __ptext135:	
 18852 ;; *************** function _DelayOffPointSelect *****************
 18853 ;; Defined at:
 18854 ;;		line 7 in file "../src/DelayOff_B1.c"
 18855 ;; Parameters:    Size  Location     Type
 18856 ;;  sw              1    wreg     unsigned char 
 18857 ;; Auto vars:     Size  Location     Type
 18858 ;;  sw              1    2[BANK0 ] unsigned char 
 18859 ;; Return value:  Size  Location     Type
 18860 ;;		None               void
 18861 ;; Registers used:
 18862 ;;		wreg
 18863 ;; Tracked objects:
 18864 ;;		On entry : 0/0
 18865 ;;		On exit  : 0/0
 18866 ;;		Unchanged: 0/0
 18867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18872 ;;Total ram usage:        2 bytes
 18873 ;; Hardware stack levels used:    1
 18874 ;; Hardware stack levels required when called:    5
 18875 ;; This function calls:
 18876 ;;		Nothing
 18877 ;; This function is called by:
 18878 ;;		_DlyOff_Initialization
 18879 ;;		_DlyOff_Main
 18880 ;;		_setDelayOff_GO
 18881 ;;		_getDelayOff_GO
 18882 ;; This function uses a non-reentrant model
 18883 ;;
 18884                           
 18885                           
 18886                           ;psect for function _DelayOffPointSelect
 18887  1C0C                     _DelayOffPointSelect:	
 18888                           
 18889                           ;incstack = 0
 18890                           ; Regs used in _DelayOffPointSelect: [wreg]
 18891                           ;DelayOffPointSelect@sw stored from wreg
 18892  1C0C  0020               	movlb	0	; select bank0
 18893  1C0D  00A2               	movwf	DelayOffPointSelect@sw
 18894                           
 18895                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18896  1C0E  0822               	movf	DelayOffPointSelect@sw,w
 18897  1C0F  3A01               	xorlw	1
 18898  1C10  1D03               	skipz
 18899  1C11  0008               	return
 18900                           
 18901                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18902  1C12  3064               	movlw	_DlySw1& (0+255)
 18903  1C13  00A1               	movwf	??_DelayOffPointSelect
 18904  1C14  0821               	movf	??_DelayOffPointSelect,w
 18905  1C15  0021               	movlb	1	; select bank1
 18906  1C16  00CD               	movwf	_DelayOff^(0+128)
 18907  1C17  0008               	return
 18908  1C18                     __end_of_DelayOffPointSelect:	
 18909                           
 18910                           	psect	text136
 18911  14AC                     __ptext136:	
 18912 ;; *************** function _Buzzer_Main *****************
 18913 ;; Defined at:
 18914 ;;		line 46 in file "../src/Buzzer_B1.c"
 18915 ;; Parameters:    Size  Location     Type
 18916 ;;		None
 18917 ;; Auto vars:     Size  Location     Type
 18918 ;;		None
 18919 ;; Return value:  Size  Location     Type
 18920 ;;		None               void
 18921 ;; Registers used:
 18922 ;;		wreg, status,2, status,0
 18923 ;; Tracked objects:
 18924 ;;		On entry : 0/0
 18925 ;;		On exit  : 0/0
 18926 ;;		Unchanged: 0/0
 18927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18931 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18932 ;;Total ram usage:        1 bytes
 18933 ;; Hardware stack levels used:    1
 18934 ;; Hardware stack levels required when called:    5
 18935 ;; This function calls:
 18936 ;;		Nothing
 18937 ;; This function is called by:
 18938 ;;		_main
 18939 ;; This function uses a non-reentrant model
 18940 ;;
 18941                           
 18942                           
 18943                           ;psect for function _Buzzer_Main
 18944  14AC                     _Buzzer_Main:	
 18945                           
 18946                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18947                           
 18948                           ;incstack = 0
 18949                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18950  14AC  0022               	movlb	2	; select bank2
 18951  14AD  1CA0               	btfss	_Buz1^(0+256),1
 18952  14AE  0008               	return
 18953                           
 18954                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18955  14AF  3001               	movlw	1
 18956  14B0  07A1               	addwf	(_Buz1^(0+256)+1),f
 18957  14B1  3000               	movlw	0
 18958  14B2  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 18959                           
 18960                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18961  14B3  0827               	movf	((_Buz1+1)^(0+256)+6),w
 18962  14B4  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 18963  14B5  1D03               	skipz
 18964  14B6  2CB9               	goto	u7595
 18965  14B7  0826               	movf	(_Buz1^(0+256)+6),w
 18966  14B8  0221               	subwf	(_Buz1^(0+256)+1),w
 18967  14B9                     u7595:	
 18968  14B9  1C03               	skipc
 18969  14BA  0008               	return
 18970                           
 18971                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18972  14BB  01A1               	clrf	(_Buz1^(0+256)+1)
 18973  14BC  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18974                           
 18975                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18976  14BD  12A0               	bcf	_Buz1^(0+256),5
 18977  14BE  0020               	movlb	0	; select bank0
 18978  14BF  1D8D               	btfss	13,3	;volatile
 18979  14C0  2CC3               	goto	l7638
 18980  14C1  0022               	movlb	2	; select bank2
 18981  14C2  16A0               	bsf	_Buz1^(0+256),5
 18982  14C3                     l7638:	
 18983                           
 18984                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18985  14C3  0022               	movlb	2	; select bank2
 18986  14C4  1AA0               	btfsc	_Buz1^(0+256),5
 18987  14C5  2CEF               	goto	l96
 18988                           
 18989                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18990  14C6  08A3               	movf	(_Buz1^(0+256)+3),f
 18991  14C7  1D03               	skipz
 18992  14C8  2CEB               	goto	l97
 18993                           
 18994                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18995  14C9  1DA0               	btfss	_Buz1^(0+256),3
 18996  14CA  2CD9               	goto	l98
 18997                           
 18998                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18999  14CB  11A0               	bcf	_Buz1^(0+256),3
 19000                           
 19001                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19002  14CC  0824               	movf	(_Buz1^(0+256)+4),w
 19003  14CD  0020               	movlb	0	; select bank0
 19004  14CE  00A1               	movwf	??_Buzzer_Main
 19005  14CF  0821               	movf	??_Buzzer_Main,w
 19006  14D0  0022               	movlb	2	; select bank2
 19007  14D1  00A3               	movwf	(_Buz1^(0+256)+3)
 19008                           
 19009                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19010  14D2  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19011  14D3  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19012  14D4  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19013  14D5  0828               	movf	(_Buz1^(0+256)+8),w
 19014  14D6  01A6               	clrf	(_Buz1^(0+256)+6)
 19015  14D7  07A6               	addwf	(_Buz1^(0+256)+6),f
 19016                           
 19017                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19018  14D8  0008               	return
 19019  14D9                     l98:	
 19020  14D9  1E20               	btfss	_Buz1^(0+256),4
 19021  14DA  2CE9               	goto	l100
 19022                           
 19023                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19024  14DB  1220               	bcf	_Buz1^(0+256),4
 19025                           
 19026                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19027  14DC  0825               	movf	(_Buz1^(0+256)+5),w
 19028  14DD  0020               	movlb	0	; select bank0
 19029  14DE  00A1               	movwf	??_Buzzer_Main
 19030  14DF  0821               	movf	??_Buzzer_Main,w
 19031  14E0  0022               	movlb	2	; select bank2
 19032  14E1  00A3               	movwf	(_Buz1^(0+256)+3)
 19033                           
 19034                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19035  14E2  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19036  14E3  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19037  14E4  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19038  14E5  082A               	movf	(_Buz1^(0+256)+10),w
 19039  14E6  01A6               	clrf	(_Buz1^(0+256)+6)
 19040  14E7  07A6               	addwf	(_Buz1^(0+256)+6),f
 19041                           
 19042                           ;Buzzer_B1.c: 62: } else {
 19043  14E8  0008               	return
 19044  14E9                     l100:	
 19045                           
 19046                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19047  14E9  10A0               	bcf	_Buz1^(0+256),1
 19048                           
 19049                           ;Buzzer_B1.c: 64: }
 19050                           ;Buzzer_B1.c: 65: } else {
 19051  14EA  0008               	return
 19052  14EB                     l97:	
 19053                           
 19054                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19055  14EB  16A0               	bsf	_Buz1^(0+256),5
 19056                           
 19057                           ;Buzzer_B1.c: 68: RB3 = 1;
 19058  14EC  0020               	movlb	0	; select bank0
 19059  14ED  158D               	bsf	13,3	;volatile
 19060                           
 19061                           ;Buzzer_B1.c: 69: }
 19062                           ;Buzzer_B1.c: 70: } else {
 19063  14EE  0008               	return
 19064  14EF                     l96:	
 19065                           
 19066                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19067  14EF  12A0               	bcf	_Buz1^(0+256),5
 19068                           
 19069                           ;Buzzer_B1.c: 73: RB3 = 0;
 19070  14F0  0020               	movlb	0	; select bank0
 19071  14F1  118D               	bcf	13,3	;volatile
 19072                           
 19073                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19074  14F2  3001               	movlw	1
 19075  14F3  0022               	movlb	2	; select bank2
 19076  14F4  02A3               	subwf	(_Buz1^(0+256)+3),f
 19077  14F5  0008               	return
 19078  14F6                     __end_of_Buzzer_Main:	
 19079                           
 19080                           	psect	text137
 19081  1B35                     __ptext137:	
 19082 ;; *************** function _Buzzer_Initialization *****************
 19083 ;; Defined at:
 19084 ;;		line 11 in file "../src/Buzzer_B1.c"
 19085 ;; Parameters:    Size  Location     Type
 19086 ;;		None
 19087 ;; Auto vars:     Size  Location     Type
 19088 ;;		None
 19089 ;; Return value:  Size  Location     Type
 19090 ;;		None               void
 19091 ;; Registers used:
 19092 ;;		None
 19093 ;; Tracked objects:
 19094 ;;		On entry : 0/0
 19095 ;;		On exit  : 0/0
 19096 ;;		Unchanged: 0/0
 19097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19102 ;;Total ram usage:        0 bytes
 19103 ;; Hardware stack levels used:    1
 19104 ;; Hardware stack levels required when called:    5
 19105 ;; This function calls:
 19106 ;;		Nothing
 19107 ;; This function is called by:
 19108 ;;		_main
 19109 ;; This function uses a non-reentrant model
 19110 ;;
 19111                           
 19112                           
 19113                           ;psect for function _Buzzer_Initialization
 19114  1B35                     _Buzzer_Initialization:	
 19115                           
 19116                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19117                           
 19118                           ;incstack = 0
 19119                           ; Regs used in _Buzzer_Initialization: []
 19120  1B35  0022               	movlb	2	; select bank2
 19121  1B36  1420               	bsf	_Buz1^(0+256),0
 19122  1B37  0008               	return
 19123  1B38                     __end_of_Buzzer_Initialization:	
 19124                           
 19125                           	psect	intentry
 19126  0004                     __pintentry:	
 19127 ;; *************** function _ISR *****************
 19128 ;; Defined at:
 19129 ;;		line 116 in file "../src/MCU_B1.c"
 19130 ;; Parameters:    Size  Location     Type
 19131 ;;		None
 19132 ;; Auto vars:     Size  Location     Type
 19133 ;;		None
 19134 ;; Return value:  Size  Location     Type
 19135 ;;		None               void
 19136 ;; Registers used:
 19137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19138 ;; Tracked objects:
 19139 ;;		On entry : 0/0
 19140 ;;		On exit  : 0/0
 19141 ;;		Unchanged: 0/0
 19142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19146 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19147 ;;Total ram usage:        1 bytes
 19148 ;; Hardware stack levels used:    1
 19149 ;; Hardware stack levels required when called:    4
 19150 ;; This function calls:
 19151 ;;		_IOC_ISR
 19152 ;;		_TMR1_ISR
 19153 ;; This function is called by:
 19154 ;;		Interrupt level 1
 19155 ;; This function uses a non-reentrant model
 19156 ;;
 19157                           
 19158  0004                     _ISR:	
 19159                           
 19160                           ;incstack = 0
 19161                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19162  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19163  0005  3180               	pagesel	$
 19164  0006  0020               	movlb	0	; select bank0
 19165  0007  087F               	movf	127,w
 19166  0008  00A0               	movwf	??_ISR
 19167                           
 19168                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19169  0009  0021               	movlb	1	; select bank1
 19170  000A  1C11               	btfss	17,0	;volatile
 19171  000B  2813               	goto	i1l1201
 19172  000C  0020               	movlb	0	; select bank0
 19173  000D  1C11               	btfss	17,0	;volatile
 19174  000E  2813               	goto	i1l1201
 19175                           
 19176                           ;MCU_B1.c: 126: TMR1_ISR();
 19177  000F  319F  27A2  3180   	fcall	_TMR1_ISR
 19178                           
 19179                           ;MCU_B1.c: 127: }
 19180  0012  281B               	goto	i1l1204
 19181  0013                     i1l1201:	
 19182                           
 19183                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19184  0013  198B               	btfsc	11,3	;volatile
 19185  0014  1C0B               	btfss	11,0	;volatile
 19186  0015  281B               	goto	i1l1204
 19187  0016  0027               	movlb	7	; select bank7
 19188  0017  1D16               	btfss	22,2	;volatile
 19189  0018  281B               	goto	i1l1204
 19190                           
 19191                           ;MCU_B1.c: 139: IOC_ISR();
 19192  0019  319B  23B0         	fcall	_IOC_ISR
 19193  001B                     i1l1204:	
 19194                           ;MCU_B1.c: 140: }
 19195                           ;MCU_B1.c: 148: return;
 19196                           
 19197  001B  0020               	movlb	0	; select bank0
 19198  001C  0820               	movf	??_ISR,w
 19199  001D  00FF               	movwf	127
 19200  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19201  001F  0009               	retfie
 19202  0020                     __end_of_ISR:	
 19203                           
 19204                           	psect	text139
 19205  1FA2                     __ptext139:	
 19206 ;; *************** function _TMR1_ISR *****************
 19207 ;; Defined at:
 19208 ;;		line 236 in file "../src/MCU_B1.c"
 19209 ;; Parameters:    Size  Location     Type
 19210 ;;		None
 19211 ;; Auto vars:     Size  Location     Type
 19212 ;;		None
 19213 ;; Return value:  Size  Location     Type
 19214 ;;		None               void
 19215 ;; Registers used:
 19216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19217 ;; Tracked objects:
 19218 ;;		On entry : 0/0
 19219 ;;		On exit  : 0/0
 19220 ;;		Unchanged: 0/0
 19221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19226 ;;Total ram usage:        0 bytes
 19227 ;; Hardware stack levels used:    1
 19228 ;; Hardware stack levels required when called:    1
 19229 ;; This function calls:
 19230 ;;		_DimmerLights_TMR_1
 19231 ;; This function is called by:
 19232 ;;		_ISR
 19233 ;; This function uses a non-reentrant model
 19234 ;;
 19235                           
 19236                           
 19237                           ;psect for function _TMR1_ISR
 19238  1FA2                     _TMR1_ISR:	
 19239                           
 19240                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19241                           
 19242                           ;incstack = 0
 19243                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19244  1FA2  30FA               	movlw	250
 19245  1FA3  0020               	movlb	0	; select bank0
 19246  1FA4  0097               	movwf	23	;volatile
 19247                           
 19248                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19249  1FA5  3038               	movlw	56
 19250  1FA6  0096               	movwf	22	;volatile
 19251                           
 19252                           ;MCU_B1.c: 240: TMR1IF = 0;
 19253  1FA7  1011               	bcf	17,0	;volatile
 19254                           
 19255                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19256  1FA8  318A  22AE  319F   	fcall	_DimmerLights_TMR_1
 19257                           
 19258                           ;MCU_B1.c: 271: Timer1.Count++;
 19259  1FAB  3001               	movlw	1
 19260  1FAC  0022               	movlb	2	; select bank2
 19261  1FAD  07B2               	addwf	(_Timer1^(0+256)+1),f
 19262  1FAE  3000               	movlw	0
 19263  1FAF  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19264                           
 19265                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19266  1FB0  3001               	movlw	1
 19267  1FB1  3E31               	addlw	_Timer1& (0+255)
 19268  1FB2  0086               	movwf	6
 19269  1FB3  3001               	movlw	1	; select bank2/3
 19270  1FB4  0087               	movwf	7
 19271  1FB5  3F40               	moviw [0]fsr1
 19272  1FB6  3AC8               	xorlw	200
 19273  1FB7  1D03               	skipz
 19274  1FB8  2FBB               	goto	u769_25
 19275  1FB9  3F41               	moviw [1]fsr1
 19276  1FBA  3A00               	xorlw	0
 19277  1FBB                     u769_25:	
 19278  1FBB  1D03               	skipz
 19279  1FBC  0008               	return
 19280                           
 19281                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19282  1FBD  01B2               	clrf	(_Timer1^(0+256)+1)
 19283  1FBE  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 19284                           
 19285                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19286  1FBF  1431               	bsf	_Timer1^(0+256),0
 19287  1FC0  0008               	return
 19288  1FC1                     __end_of_TMR1_ISR:	
 19289                           
 19290                           	psect	text140
 19291  0AAE                     __ptext140:	
 19292 ;; *************** function _DimmerLights_TMR_1 *****************
 19293 ;; Defined at:
 19294 ;;		line 1350 in file "../src/Dimmer_B1.c"
 19295 ;; Parameters:    Size  Location     Type
 19296 ;;		None
 19297 ;; Auto vars:     Size  Location     Type
 19298 ;;		None
 19299 ;; Return value:  Size  Location     Type
 19300 ;;		None               void
 19301 ;; Registers used:
 19302 ;;		wreg, status,2, status,0
 19303 ;; Tracked objects:
 19304 ;;		On entry : 0/0
 19305 ;;		On exit  : 0/0
 19306 ;;		Unchanged: 0/0
 19307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19311 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19312 ;;Total ram usage:        1 bytes
 19313 ;; Hardware stack levels used:    1
 19314 ;; This function calls:
 19315 ;;		Nothing
 19316 ;; This function is called by:
 19317 ;;		_TMR1_ISR
 19318 ;; This function uses a non-reentrant model
 19319 ;;
 19320                           
 19321                           
 19322                           ;psect for function _DimmerLights_TMR_1
 19323  0AAE                     _DimmerLights_TMR_1:	
 19324                           
 19325                           ;Dimmer_B1.c: 1352: if (DimmerIntr1.Start == 1) {
 19326                           
 19327                           ;incstack = 0
 19328                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19329  0AAE  0021               	movlb	1	; select bank1
 19330  0AAF  1D3B               	btfss	_DimmerIntr1^(0+128),2
 19331  0AB0  2ADB               	goto	i1l838
 19332                           
 19333                           ;Dimmer_B1.c: 1353: DimmerIntr1.Count++;
 19334  0AB1  3001               	movlw	1
 19335  0AB2  00F0               	movwf	??_DimmerLights_TMR_1
 19336  0AB3  0870               	movf	??_DimmerLights_TMR_1,w
 19337  0AB4  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 19338                           
 19339                           ;Dimmer_B1.c: 1354: if (DimmerIntr1.Count >= 78) {
 19340  0AB5  304E               	movlw	78
 19341  0AB6  023D               	subwf	(_DimmerIntr1^(0+128)+2),w
 19342  0AB7  1C03               	skipc
 19343  0AB8  2ABB               	goto	i1l7120
 19344                           
 19345                           ;Dimmer_B1.c: 1355: DimmerIntr1.Count = 0;
 19346  0AB9  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19347                           
 19348                           ;Dimmer_B1.c: 1356: DimmerIntr1.Start = 0;
 19349  0ABA  113B               	bcf	_DimmerIntr1^(0+128),2
 19350  0ABB                     i1l7120:	
 19351                           
 19352                           ;Dimmer_B1.c: 1357: }
 19353                           ;Dimmer_B1.c: 1361: if (DimmerIntr1.Count == DimmerIntr1.TuneValue) {
 19354  0ABB  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19355  0ABC  0643               	xorwf	(_DimmerIntr1^(0+128)+8),w
 19356  0ABD  1903               	btfsc	3,2
 19357                           
 19358                           ;Dimmer_B1.c: 1364: if (DimmerIntr1.ControlStatus == 1) {
 19359  0ABE  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19360  0ABF  2AC2               	goto	i1l7126
 19361                           
 19362                           ;Dimmer_B1.c: 1365: RB1 = 1;
 19363  0AC0  0020               	movlb	0	; select bank0
 19364  0AC1  148D               	bsf	13,1	;volatile
 19365  0AC2                     i1l7126:	
 19366                           
 19367                           ;Dimmer_B1.c: 1367: }
 19368                           ;Dimmer_B1.c: 1368: }
 19369                           ;Dimmer_B1.c: 1372: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19370  0AC2  0021               	movlb	1	; select bank1
 19371  0AC3  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19372  0AC4  0644               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19373  0AC5  1903               	btfsc	3,2
 19374                           
 19375                           ;Dimmer_B1.c: 1375: if (DimmerIntr1.ControlStatus == 1) {
 19376  0AC6  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19377  0AC7  2ACA               	goto	i1l7132
 19378                           
 19379                           ;Dimmer_B1.c: 1376: RB1 = 0;
 19380  0AC8  0020               	movlb	0	; select bank0
 19381  0AC9  108D               	bcf	13,1	;volatile
 19382  0ACA                     i1l7132:	
 19383                           
 19384                           ;Dimmer_B1.c: 1378: }
 19385                           ;Dimmer_B1.c: 1379: }
 19386                           ;Dimmer_B1.c: 1383: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19387  0ACA  0021               	movlb	1	; select bank1
 19388  0ACB  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19389  0ACC  0645               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19390  0ACD  1903               	btfsc	3,2
 19391                           
 19392                           ;Dimmer_B1.c: 1386: if (DimmerIntr1.ControlStatus == 1) {
 19393  0ACE  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19394  0ACF  2AD2               	goto	i1l7138
 19395                           
 19396                           ;Dimmer_B1.c: 1387: RB1 = 1;
 19397  0AD0  0020               	movlb	0	; select bank0
 19398  0AD1  148D               	bsf	13,1	;volatile
 19399  0AD2                     i1l7138:	
 19400                           
 19401                           ;Dimmer_B1.c: 1389: }
 19402                           ;Dimmer_B1.c: 1390: }
 19403                           ;Dimmer_B1.c: 1407: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19404  0AD2  0021               	movlb	1	; select bank1
 19405  0AD3  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19406  0AD4  0646               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19407  0AD5  1903               	btfsc	3,2
 19408                           
 19409                           ;Dimmer_B1.c: 1409: if (DimmerIntr1.ControlStatus == 1) {
 19410  0AD6  1DBB               	btfss	_DimmerIntr1^(0+128),3
 19411  0AD7  2AE8               	goto	i1l7154
 19412                           
 19413                           ;Dimmer_B1.c: 1410: RB1 = 0;
 19414  0AD8  0020               	movlb	0	; select bank0
 19415  0AD9  108D               	bcf	13,1	;volatile
 19416                           
 19417                           ;Dimmer_B1.c: 1412: }
 19418                           ;Dimmer_B1.c: 1413: }
 19419                           ;Dimmer_B1.c: 1416: } else {
 19420  0ADA  2AE8               	goto	i1l7154
 19421  0ADB                     i1l838:	
 19422                           
 19423                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.GO == 1) {
 19424  0ADB  1C3B               	btfss	_DimmerIntr1^(0+128),0
 19425  0ADC  2AE8               	goto	i1l7154
 19426                           
 19427                           ;Dimmer_B1.c: 1418: DimmerIntr1.Count++;
 19428  0ADD  3001               	movlw	1
 19429  0ADE  00F0               	movwf	??_DimmerLights_TMR_1
 19430  0ADF  0870               	movf	??_DimmerLights_TMR_1,w
 19431  0AE0  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 19432                           
 19433                           ;Dimmer_B1.c: 1419: if (DimmerIntr1.Count == 1) {
 19434  0AE1  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 19435  0AE2  3A01               	xorlw	1
 19436  0AE3  1D03               	skipz
 19437  0AE4  2AE8               	goto	i1l7154
 19438                           
 19439                           ;Dimmer_B1.c: 1420: DimmerIntr1.Count = 0;
 19440  0AE5  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19441                           
 19442                           ;Dimmer_B1.c: 1421: DimmerIntr1.Start = 1;
 19443  0AE6  153B               	bsf	_DimmerIntr1^(0+128),2
 19444                           
 19445                           ;Dimmer_B1.c: 1422: DimmerIntr1.GO = 0;
 19446  0AE7  103B               	bcf	_DimmerIntr1^(0+128),0
 19447  0AE8                     i1l7154:	
 19448                           
 19449                           ;Dimmer_B1.c: 1423: }
 19450                           ;Dimmer_B1.c: 1424: }
 19451                           ;Dimmer_B1.c: 1425: }
 19452                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.Tune == 1) {
 19453  0AE8  0021               	movlb	1	; select bank1
 19454  0AE9  1CBB               	btfss	_DimmerIntr1^(0+128),1
 19455  0AEA  0008               	return
 19456                           
 19457                           ;Dimmer_B1.c: 1428: DimmerIntr1.Tune = 0;
 19458  0AEB  10BB               	bcf	_DimmerIntr1^(0+128),1
 19459                           
 19460                           ;Dimmer_B1.c: 1429: DimmerIntr1.TuneTime++;
 19461  0AEC  3001               	movlw	1
 19462  0AED  00F0               	movwf	??_DimmerLights_TMR_1
 19463  0AEE  0870               	movf	??_DimmerLights_TMR_1,w
 19464  0AEF  07BE               	addwf	(_DimmerIntr1^(0+128)+3),f
 19465                           
 19466                           ;Dimmer_B1.c: 1430: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19467  0AF0  083F               	movf	(_DimmerIntr1^(0+128)+4),w
 19468  0AF1  023E               	subwf	(_DimmerIntr1^(0+128)+3),w
 19469  0AF2  1C03               	skipc
 19470  0AF3  0008               	return
 19471                           
 19472                           ;Dimmer_B1.c: 1431: DimmerIntr1.TuneTime = 0;
 19473  0AF4  01BE               	clrf	(_DimmerIntr1^(0+128)+3)
 19474                           
 19475                           ;Dimmer_B1.c: 1432: if (DimmerIntr1.Dimming_Sw == 1) {
 19476  0AF5  1E3B               	btfss	_DimmerIntr1^(0+128),4
 19477  0AF6  2B0D               	goto	i1l853
 19478                           
 19479                           ;Dimmer_B1.c: 1433: if (DimmerIntr1.Dimming_Status == 0) {
 19480  0AF7  1ABB               	btfsc	_DimmerIntr1^(0+128),5
 19481  0AF8  2B04               	goto	i1l7172
 19482                           
 19483                           ;Dimmer_B1.c: 1434: if (DimmerIntr1.DimmingValue < ((char)(65*0.78))) {
 19484  0AF9  3032               	movlw	50
 19485  0AFA  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19486  0AFB  1803               	skipnc
 19487  0AFC  2B02               	goto	i1l855
 19488                           
 19489                           ;Dimmer_B1.c: 1435: DimmerIntr1.DimmingValue++;
 19490  0AFD  3001               	movlw	1
 19491  0AFE  00F0               	movwf	??_DimmerLights_TMR_1
 19492  0AFF  0870               	movf	??_DimmerLights_TMR_1,w
 19493  0B00  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 19494                           
 19495                           ;Dimmer_B1.c: 1436: } else {
 19496  0B01  0008               	return
 19497  0B02                     i1l855:	
 19498                           
 19499                           ;Dimmer_B1.c: 1437: DimmerIntr1.Dimming_Status = 1;
 19500  0B02  16BB               	bsf	_DimmerIntr1^(0+128),5
 19501                           
 19502                           ;Dimmer_B1.c: 1438: }
 19503                           ;Dimmer_B1.c: 1439: } else {
 19504  0B03  0008               	return
 19505  0B04                     i1l7172:	
 19506                           
 19507                           ;Dimmer_B1.c: 1440: if (DimmerIntr1.DimmingValue > ((char)(5*0.78))) {
 19508  0B04  3004               	movlw	4
 19509  0B05  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19510  0B06  1C03               	skipc
 19511  0B07  2B0B               	goto	i1l858
 19512                           
 19513                           ;Dimmer_B1.c: 1441: DimmerIntr1.DimmingValue--;
 19514  0B08  3001               	movlw	1
 19515  0B09  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 19516                           
 19517                           ;Dimmer_B1.c: 1442: } else {
 19518  0B0A  0008               	return
 19519  0B0B                     i1l858:	
 19520                           
 19521                           ;Dimmer_B1.c: 1443: DimmerIntr1.Dimming_Status = 0;
 19522  0B0B  12BB               	bcf	_DimmerIntr1^(0+128),5
 19523                           
 19524                           ;Dimmer_B1.c: 1444: }
 19525                           ;Dimmer_B1.c: 1445: }
 19526                           ;Dimmer_B1.c: 1446: } else if (DimmerIntr1.Dimming_RF == 1) {
 19527  0B0C  0008               	return
 19528  0B0D                     i1l853:	
 19529  0B0D  1F3B               	btfss	_DimmerIntr1^(0+128),6
 19530  0B0E  0008               	return
 19531                           
 19532                           ;Dimmer_B1.c: 1447: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19533  0B0F  0841               	movf	(_DimmerIntr1^(0+128)+6),w
 19534  0B10  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 19535  0B11  1803               	skipnc
 19536  0B12  2B18               	goto	i1l7180
 19537                           
 19538                           ;Dimmer_B1.c: 1448: DimmerIntr1.DimmingValue++;
 19539  0B13  3001               	movlw	1
 19540  0B14  00F0               	movwf	??_DimmerLights_TMR_1
 19541  0B15  0870               	movf	??_DimmerLights_TMR_1,w
 19542  0B16  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 19543                           
 19544                           ;Dimmer_B1.c: 1449: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19545  0B17  0008               	return
 19546  0B18                     i1l7180:	
 19547  0B18  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 19548  0B19  0241               	subwf	(_DimmerIntr1^(0+128)+6),w
 19549  0B1A  1803               	skipnc
 19550  0B1B  2B1F               	goto	i1l864
 19551                           
 19552                           ;Dimmer_B1.c: 1450: DimmerIntr1.DimmingValue--;
 19553  0B1C  3001               	movlw	1
 19554  0B1D  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 19555                           
 19556                           ;Dimmer_B1.c: 1451: } else {
 19557  0B1E  0008               	return
 19558  0B1F                     i1l864:	
 19559                           
 19560                           ;Dimmer_B1.c: 1452: DimmerIntr1.Dimming_RF = 0;
 19561  0B1F  133B               	bcf	_DimmerIntr1^(0+128),6
 19562  0B20  0008               	return
 19563  0B21                     __end_of_DimmerLights_TMR_1:	
 19564                           
 19565                           	psect	text141
 19566  1BB0                     __ptext141:	
 19567 ;; *************** function _IOC_ISR *****************
 19568 ;; Defined at:
 19569 ;;		line 394 in file "../src/MCU_B1.c"
 19570 ;; Parameters:    Size  Location     Type
 19571 ;;		None
 19572 ;; Auto vars:     Size  Location     Type
 19573 ;;		None
 19574 ;; Return value:  Size  Location     Type
 19575 ;;		None               void
 19576 ;; Registers used:
 19577 ;;		wreg, status,2, status,0, pclath, cstack
 19578 ;; Tracked objects:
 19579 ;;		On entry : 0/0
 19580 ;;		On exit  : 0/0
 19581 ;;		Unchanged: 0/0
 19582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19587 ;;Total ram usage:        0 bytes
 19588 ;; Hardware stack levels used:    1
 19589 ;; Hardware stack levels required when called:    3
 19590 ;; This function calls:
 19591 ;;		_DimmerLights_IOC_1
 19592 ;; This function is called by:
 19593 ;;		_ISR
 19594 ;; This function uses a non-reentrant model
 19595 ;;
 19596                           
 19597                           
 19598                           ;psect for function _IOC_ISR
 19599  1BB0                     _IOC_ISR:	
 19600                           
 19601                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19602                           
 19603                           ;incstack = 0
 19604                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19605  1BB0  0027               	movlb	7	; select bank7
 19606  1BB1  1116               	bcf	22,2	;volatile
 19607                           
 19608                           ;MCU_B1.c: 396: IOCIF = 0;
 19609  1BB2  100B               	bcf	11,0	;volatile
 19610                           
 19611                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19612  1BB3  0021               	movlb	1	; select bank1
 19613  1BB4  1C2E               	btfss	_myMain^(0+128),0
 19614  1BB5  0008               	return
 19615                           
 19616                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19617  1BB6  3193  23A3         	fcall	_DimmerLights_IOC_1
 19618  1BB8  0008               	return
 19619  1BB9                     __end_of_IOC_ISR:	
 19620                           
 19621                           	psect	text142
 19622  13A3                     __ptext142:	
 19623 ;; *************** function _DimmerLights_IOC_1 *****************
 19624 ;; Defined at:
 19625 ;;		line 1459 in file "../src/Dimmer_B1.c"
 19626 ;; Parameters:    Size  Location     Type
 19627 ;;		None
 19628 ;; Auto vars:     Size  Location     Type
 19629 ;;  dimming         1   13[COMMON] unsigned char 
 19630 ;;  count           1   12[COMMON] unsigned char 
 19631 ;; Return value:  Size  Location     Type
 19632 ;;		None               void
 19633 ;; Registers used:
 19634 ;;		wreg, status,2, status,0, pclath, cstack
 19635 ;; Tracked objects:
 19636 ;;		On entry : 0/0
 19637 ;;		On exit  : 0/0
 19638 ;;		Unchanged: 0/0
 19639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19642 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19643 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19644 ;;Total ram usage:        4 bytes
 19645 ;; Hardware stack levels used:    1
 19646 ;; Hardware stack levels required when called:    2
 19647 ;; This function calls:
 19648 ;;		_Division
 19649 ;; This function is called by:
 19650 ;;		_IOC_ISR
 19651 ;; This function uses a non-reentrant model
 19652 ;;
 19653                           
 19654                           
 19655                           ;psect for function _DimmerLights_IOC_1
 19656  13A3                     _DimmerLights_IOC_1:	
 19657                           
 19658                           ;Dimmer_B1.c: 1473: if (DimmerIntr1.Start == 0) {
 19659                           
 19660                           ;incstack = 0
 19661                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19662  13A3  0021               	movlb	1	; select bank1
 19663  13A4  193B               	btfsc	_DimmerIntr1^(0+128),2
 19664  13A5  0008               	return
 19665                           
 19666                           ;Dimmer_B1.c: 1474: if (RB2 != DimmerIntr1.Status) {
 19667  13A6  0E3C               	swapf	(_DimmerIntr1^(0+128)+1),w
 19668  13A7  0C89               	rrf	9,f
 19669  13A8  3901               	andlw	1
 19670  13A9  00FA               	movwf	??_DimmerLights_IOC_1
 19671  13AA  3000               	movlw	0
 19672  13AB  0020               	movlb	0	; select bank0
 19673  13AC  190D               	btfsc	13,2	;volatile
 19674  13AD  3001               	movlw	1
 19675  13AE  067A               	xorwf	??_DimmerLights_IOC_1,w
 19676  13AF  1903               	skipnz
 19677  13B0  0008               	return
 19678                           
 19679                           ;Dimmer_B1.c: 1476: DimmerIntr1.Count = 0;
 19680  13B1  0021               	movlb	1	; select bank1
 19681  13B2  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 19682                           
 19683                           ;Dimmer_B1.c: 1477: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 19684  13B3  1E3B               	btfss	_DimmerIntr1^(0+128),4
 19685  13B4  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 19686                           
 19687                           ;Dimmer_B1.c: 1478: DimmerIntr1.Tune = 1;
 19688  13B5  14BB               	bsf	_DimmerIntr1^(0+128),1
 19689                           
 19690                           ;Dimmer_B1.c: 1479: }
 19691                           ;Dimmer_B1.c: 1480: DimmerIntr1.GO = 1;
 19692  13B6  143B               	bsf	_DimmerIntr1^(0+128),0
 19693                           
 19694                           ;Dimmer_B1.c: 1481: char count = 78;
 19695  13B7  304E               	movlw	78
 19696  13B8  00FA               	movwf	??_DimmerLights_IOC_1
 19697  13B9  087A               	movf	??_DimmerLights_IOC_1,w
 19698  13BA  00FC               	movwf	DimmerLights_IOC_1@count
 19699                           
 19700                           ;Dimmer_B1.c: 1482: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 19701  13BB  3002               	movlw	2
 19702  13BC  00FA               	movwf	??_DimmerLights_IOC_1
 19703  13BD  087A               	movf	??_DimmerLights_IOC_1,w
 19704  13BE  00F5               	movwf	Division@num
 19705  13BF  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 19706  13C0  3188  2001  3193   	fcall	_Division
 19707  13C3  00FB               	movwf	??_DimmerLights_IOC_1+1
 19708  13C4  087B               	movf	??_DimmerLights_IOC_1+1,w
 19709  13C5  00FD               	movwf	DimmerLights_IOC_1@dimming
 19710                           
 19711                           ;Dimmer_B1.c: 1483: DimmerIntr1.TuneValue = 5;
 19712  13C6  3005               	movlw	5
 19713  13C7  00FA               	movwf	??_DimmerLights_IOC_1
 19714  13C8  087A               	movf	??_DimmerLights_IOC_1,w
 19715  13C9  0021               	movlb	1	; select bank1
 19716  13CA  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 19717                           
 19718                           ;Dimmer_B1.c: 1484: DimmerIntr1.TuneValue2 = 5 + dimming;
 19719  13CB  087D               	movf	DimmerLights_IOC_1@dimming,w
 19720  13CC  3E05               	addlw	5
 19721  13CD  00FA               	movwf	??_DimmerLights_IOC_1
 19722  13CE  087A               	movf	??_DimmerLights_IOC_1,w
 19723  13CF  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 19724                           
 19725                           ;Dimmer_B1.c: 1485: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((count - (5 + 5))
      +                           - DimmerIntr1.DimmingValue);
 19726  13D0  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 19727  13D1  3AFF               	xorlw	255
 19728  13D2  0744               	addwf	(_DimmerIntr1^(0+128)+9),w
 19729  13D3  077C               	addwf	DimmerLights_IOC_1@count,w
 19730  13D4  3EF6               	addlw	246
 19731  13D5  00FA               	movwf	??_DimmerLights_IOC_1
 19732  13D6  087A               	movf	??_DimmerLights_IOC_1,w
 19733  13D7  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 19734                           
 19735                           ;Dimmer_B1.c: 1486: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 19736  13D8  0845               	movf	(_DimmerIntr1^(0+128)+10),w
 19737  13D9  077D               	addwf	DimmerLights_IOC_1@dimming,w
 19738  13DA  00FA               	movwf	??_DimmerLights_IOC_1
 19739  13DB  087A               	movf	??_DimmerLights_IOC_1,w
 19740  13DC  00C6               	movwf	(_DimmerIntr1^(0+128)+11)
 19741                           
 19742                           ;Dimmer_B1.c: 1492: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 19743  13DD  12BC               	bcf	(_DimmerIntr1^(0+128)+1),5
 19744  13DE  0020               	movlb	0	; select bank0
 19745  13DF  1D0D               	btfss	13,2	;volatile
 19746  13E0  0008               	return
 19747  13E1  0021               	movlb	1	; select bank1
 19748  13E2  16BC               	bsf	(_DimmerIntr1^(0+128)+1),5
 19749  13E3  0008               	return
 19750  13E4                     __end_of_DimmerLights_IOC_1:	
 19751                           
 19752                           	psect	text143
 19753  0801                     __ptext143:	
 19754 ;; *************** function _Division *****************
 19755 ;; Defined at:
 19756 ;;		line 1345 in file "../src/Dimmer_B1.c"
 19757 ;; Parameters:    Size  Location     Type
 19758 ;;  value           1    wreg     unsigned char 
 19759 ;;  num             1    5[COMMON] unsigned char 
 19760 ;; Auto vars:     Size  Location     Type
 19761 ;;  value           1    8[COMMON] unsigned char 
 19762 ;;  result          1    9[COMMON] unsigned char 
 19763 ;; Return value:  Size  Location     Type
 19764 ;;                  1    wreg      unsigned char 
 19765 ;; Registers used:
 19766 ;;		wreg, status,2, status,0, pclath, cstack
 19767 ;; Tracked objects:
 19768 ;;		On entry : 0/0
 19769 ;;		On exit  : 0/0
 19770 ;;		Unchanged: 0/0
 19771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19772 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19775 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19776 ;;Total ram usage:        5 bytes
 19777 ;; Hardware stack levels used:    1
 19778 ;; Hardware stack levels required when called:    1
 19779 ;; This function calls:
 19780 ;;		___lbdiv
 19781 ;; This function is called by:
 19782 ;;		_DimmerLights_IOC_1
 19783 ;; This function uses a non-reentrant model
 19784 ;;
 19785                           
 19786                           
 19787                           ;psect for function _Division
 19788  0801                     _Division:	
 19789                           
 19790                           ;incstack = 0
 19791                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19792                           ;Division@value stored from wreg
 19793  0801  00F8               	movwf	Division@value
 19794                           
 19795                           ;Dimmer_B1.c: 1346: char result = (char) (value / num);
 19796  0802  0875               	movf	Division@num,w
 19797  0803  00F6               	movwf	??_Division
 19798  0804  0876               	movf	??_Division,w
 19799  0805  00F0               	movwf	___lbdiv@divisor
 19800  0806  0878               	movf	Division@value,w
 19801  0807  3190  203E         	fcall	___lbdiv
 19802  0809  00F7               	movwf	??_Division+1
 19803  080A  0877               	movf	??_Division+1,w
 19804  080B  00F9               	movwf	Division@result
 19805                           
 19806                           ;Dimmer_B1.c: 1347: return result;
 19807  080C  0879               	movf	Division@result,w
 19808  080D  0008               	return
 19809  080E                     __end_of_Division:	
 19810                           
 19811                           	psect	text144
 19812  103E                     __ptext144:	
 19813 ;; *************** function ___lbdiv *****************
 19814 ;; Defined at:
 19815 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19816 ;; Parameters:    Size  Location     Type
 19817 ;;  dividend        1    wreg     unsigned char 
 19818 ;;  divisor         1    0[COMMON] unsigned char 
 19819 ;; Auto vars:     Size  Location     Type
 19820 ;;  dividend        1    2[COMMON] unsigned char 
 19821 ;;  quotient        1    4[COMMON] unsigned char 
 19822 ;;  counter         1    3[COMMON] unsigned char 
 19823 ;; Return value:  Size  Location     Type
 19824 ;;                  1    wreg      unsigned char 
 19825 ;; Registers used:
 19826 ;;		wreg, status,2, status,0
 19827 ;; Tracked objects:
 19828 ;;		On entry : 0/0
 19829 ;;		On exit  : 0/0
 19830 ;;		Unchanged: 0/0
 19831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19832 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19833 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19835 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19836 ;;Total ram usage:        5 bytes
 19837 ;; Hardware stack levels used:    1
 19838 ;; This function calls:
 19839 ;;		Nothing
 19840 ;; This function is called by:
 19841 ;;		_Division
 19842 ;; This function uses a non-reentrant model
 19843 ;;
 19844                           
 19845                           
 19846                           ;psect for function ___lbdiv
 19847  103E                     ___lbdiv:	
 19848                           
 19849                           ;incstack = 0
 19850                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19851                           ;___lbdiv@dividend stored from wreg
 19852  103E  00F2               	movwf	___lbdiv@dividend
 19853  103F  01F4               	clrf	___lbdiv@quotient
 19854  1040  0870               	movf	___lbdiv@divisor,w
 19855  1041  1903               	btfsc	3,2
 19856  1042  285D               	goto	i1l6594
 19857  1043  01F3               	clrf	___lbdiv@counter
 19858  1044  0AF3               	incf	___lbdiv@counter,f
 19859  1045                     i1l6582:	
 19860  1045  1BF0               	btfsc	___lbdiv@divisor,7
 19861  1046  284E               	goto	i1l6584
 19862  1047  1003               	clrc
 19863  1048  0DF0               	rlf	___lbdiv@divisor,f
 19864  1049  3001               	movlw	1
 19865  104A  00F1               	movwf	??___lbdiv
 19866  104B  0871               	movf	??___lbdiv,w
 19867  104C  07F3               	addwf	___lbdiv@counter,f
 19868  104D  2845               	goto	i1l6582
 19869  104E                     i1l6584:	
 19870  104E  1003               	clrc
 19871  104F  0DF4               	rlf	___lbdiv@quotient,f
 19872  1050  0870               	movf	___lbdiv@divisor,w
 19873  1051  0272               	subwf	___lbdiv@dividend,w
 19874  1052  1C03               	skipc
 19875  1053  2858               	goto	L9
 19876  1054  0870               	movf	___lbdiv@divisor,w
 19877  1055  02F2               	subwf	___lbdiv@dividend,f
 19878  1056  1474               	bsf	___lbdiv@quotient,0
 19879  1057  1003               	clrc
 19880  1058                     L9:	
 19881  1058  0CF0               	rrf	___lbdiv@divisor,f
 19882  1059  3001               	movlw	1
 19883  105A  02F3               	subwf	___lbdiv@counter,f
 19884  105B  1D03               	btfss	3,2
 19885  105C  284E               	goto	i1l6584
 19886  105D                     i1l6594:	
 19887  105D  0874               	movf	___lbdiv@quotient,w
 19888  105E  0008               	return
 19889  105F                     __end_of___lbdiv:	
 19890  007E                     btemp	set	126	;btemp
 19891  007E                     pic14e$flags	set	126
 19892  007E                     wtemp	set	126
 19893  007E                     wtemp0	set	126
 19894  0080                     wtemp1	set	128
 19895  0082                     wtemp2	set	130
 19896  0084                     wtemp3	set	132
 19897  0086                     wtemp4	set	134
 19898  0088                     wtemp5	set	136
 19899  007F                     wtemp6	set	127
 19900  007E                     ttemp	set	126
 19901  007E                     ttemp0	set	126
 19902  0081                     ttemp1	set	129
 19903  0084                     ttemp2	set	132
 19904  0087                     ttemp3	set	135
 19905  007F                     ttemp4	set	127
 19906  007E                     ltemp	set	126
 19907  007E                     ltemp0	set	126
 19908  0082                     ltemp1	set	130
 19909  0086                     ltemp2	set	134
 19910  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         222
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      8      78
    BANK2            80      0      77
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  171327
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             14 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              5 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              5 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              1 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              1 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5504
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5504
                                             70 BANK0      1     1      0
                                              0 BANK1      8     8      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4278
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4278
                                             16 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              5 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   51033
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   51033
                                              5 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   47314
                                              3 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5044
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   41998
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12095
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   24455
                                             70 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              3 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              7 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              6 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              6 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              3 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2210
                                              9 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              3 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              5 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1679
                                              7 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              5 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              5 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3501
                                             14 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   57205
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   56907
                                              4 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   32347
                                              0 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              3 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             67 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4370
                                             70 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              3 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   24213
                                             75 BANK0      2     1      1
                                              0 BANK1      2     2      0
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3717
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     374
                                             67 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     270
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      68
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              2 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              1 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   32285
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   32285
                                             67 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   14117
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   18137
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     579
                                             47 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     273
                                             31 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4020
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4368
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    5133
                                             34 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3665
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3324
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5366
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5366
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3182
                                             67 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1896
                                             14 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                             10 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              3 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              3 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     475
                                              0 BANK0      1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     475
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  4     4      0     475
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     168      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     168      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Feb 05 16:30:40 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1ECB  
                          ___bmul@product 0023                 getMain_Lights_Count@count 0021  
                                      l86 1527                                        l96 14EF  
                                      l88 153B                                        l97 14EB  
                                      l98 14D9                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10A4                                        _WR 0CA9  
                            ___awdiv@sign 0027                                        _Sw 00D5  
                          setTemp_Main@AD 00EB                       ___wmul@multiplicand 0023  
                    _getDimmerLights_Line 1BD5                    __end_of_setDelayOff_GO 0D3A  
                            ___ftadd@exp1 004E                              ___ftadd@exp2 004D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1798  
                    _setDimmerLights_Line 1CCF                              ___ftadd@sign 004C  
                                     l100 14E9                                       l303 1ED7  
                                     l304 1ED9                                       l235 0852  
                    _setDimmerLights_SwOn 11D7                                       l531 0951  
                                     l347 10CE                                       l259 08DD  
                                     l781 076A                                       l757 1F63  
                                     l688 1C9D                                       _GIE 005F  
                                     _CRC 00CB                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00D0                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00C9  
                                     _Cmd 00CC              getDimmerLights_Status@lights 0023  
                                     _Sw1 01E3                ??_setDimmerIntr_Dimming_RF 0022  
              ??_setDimmerIntr_Dimming_Sw 0022           setDimmerIntr_Dimming_RF@command 0021  
                __end_of_CC2500_WriteByte 1EE4                     _Buzzer_Initialization 1B35  
                         __end_of_ADC_Set 1B91                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0024  
     __end_of_setDimmerIntr_ControlStatus 1E9A               _setDimmerIntr_ControlStatus 1E82  
                       ??_getSw_KeyStatus 0021                                      ?_ISR 0070  
                            ___ftdiv@cntr 0039                           __end_of_IOC_ISR 1BB9  
                   _setDimmerLights_OnOff 06EA          setDimmerLights_DimmingRun@lights 0025  
                              Load_Main@i 0031                              ___ftdiv@sign 003E  
                                    l1241 141F                                      l2113 0547  
                                    l2117 0496                                      l2118 04E7  
                                    l1255 1169                                      l2143 1CA4  
                                    l1265 0C1F                                      l1506 1ECA  
                                    l1442 1361                                      l1621 0082  
                                    l2173 11D3                                      l1470 119D  
                                    l1630 01D0                                      l1622 007E  
                                    l2158 0A3A                                      l1623 0079  
                                    l1465 1186                                      l1466 11A1  
                                    l2186 09C9                                      l1619 01F6  
                                    l1629 01D2                           __end_of_IOC_Set 1BF6  
                                    l2471 1E48                                      l1497 061F  
                                    l2491 0378                                      l2493 0244  
                                    l1781 0E8D                                      l1792 0E85  
                                    l2842 1652                                      l7002 1269  
                                    l6202 1F21                                      l2675 1009  
                                    l1787 0E02                                      l2836 163B  
                                    l6204 1F24                                      l7006 1272  
                                    l6072 12A7                                      l6208 1F2A  
                                    l6240 10DF                                      l2865 041F  
                          _Load_Main$3939 002C                                      l6242 10EA  
                                    l6250 108D                                      l6226 1F95  
                                    l6330 10AE                                      l6500 12C1  
                                    l6228 1F9B                                      l6332 10B1  
                                    l6270 1EB5                                      l6254 1093  
                                    l6520 1D39                                      l7304 1CFC  
                                    l7056 1DC6                                      l6248 108A  
                                    l6360 1490                                      l6336 10B7  
                                    l6274 1EC4                                      l6514 12E0  
                                    l6506 12CA                                      l9010 17BE  
                                    l7330 0C18                                      l7322 0BBD  
                                    l6370 14A0                                      l6610 0821  
                                    l6524 1D40                                      l9012 17C4  
                                    l7316 0BA8                                      l6364 1496  
                   _setDimmerLights_SwOff 1279                                      l6526 1D45  
                                    l9022 17EC                                      l7094 1BDD  
                                    l6374 14A6                                      l6358 148D  
                                    l6614 0827                                      l9024 17F3  
                                    l6368 149D                                      l6640 0865  
                                    l6632 0858                                      l6608 081E  
                                    l7520 1E4D                                      l7280 1FEE  
                                    l8322 07F6                                      l8314 07E5  
                                    l8306 07C7                                      l8410 03FE  
                                    l6642 0868                                      l6634 085B  
                                    l9050 0E13                                      l8308 07D3  
                                    l8260 1618                                      l8404 03EB  
                                    l5772 1D4A                                      l6628 0839  
                                    l7524 1E53                                      l9204 0277  
                                    l9044 0E04                                      l9052 0E16  
                                    l7284 1FF3                                      l8318 07EE  
                                    l8270 1640                                      l8262 1622  
                                    l8422 0431                                      l8406 03F5  
                                    l8510 0F01                                      l6726 1E65  
                                    l6670 0897                                      l6646 086E  
                                    l6638 0861                                      l9142 04F6  
                                    l9214 02AC                                      l7278 1FEB  
                                    l8272 1648                                      l8264 1627  
                                    l8256 1611                                      l8416 0411  
                                    l8408 03FA                                      l5776 1D50  
                                    l6664 088E                                      l6904 1D1E  
                                    l9128 04E2                                      l9080 0E5A  
                                    l8290 07B4                                      l8426 0443  
                                    l8418 041B                                      l8522 0F1D  
                                    l8506 0EF9                                      l7714 06A2  
                                    l7618 1003                                      l6666 0891  
                                    l9170 0540                                      l9082 0E5C  
                                    l7802 0A7A                                      l8364 106A  
                                    l8436 045E                                      l8380 03AF  
                                    l8452 0D67                                      l6860 1151  
                                    l9404 00D7                                      l9156 0528  
                                    l9228 02EC                                      l9092 0E71  
                                    l9332 1341                                      l7638 14C3  
                                    l8446 0D51                                      l8518 0F15  
                                    l9430 015A                                      l6686 08A9  
                                    l9238 0320                                      l9094 0E72  
                                    l7822 0AA9                                      l7806 0A82  
                                    l8296 07BF                                      l8376 03A8  
                                    l8632 0D30                                      l9280 1F65  
                                    l9440 0186                                      l6688 08C2  
                                    l9600 157E                                      l8386 03BE  
                                    l8474 0DC1                                      l8466 0DA8  
                                    l8546 0C40                                      l8618 0CEC  
                                    l9450 01A2                                      l8580 0CA5  
                                    l8572 0C8B                                      l8564 0C70  
                                    l8804 1198                                      l8628 0D1C  
                                    l9532 0579                                      l9460 01B8  
                                    l9436 0169                                      l9444 0192  
                                    l9364 0060                                      l9188 022E  
                   _myMain_Initialization 1DDB                                      l8398 03D8  
                                    l8494 0EBE                                      l8574 0C94  
                                    l8566 0C7E                                      l8902 15C5  
                                    l9526 0569                                      l9382 0081  
                                    l8750 0B3D                                      l8734 145B  
                                    l8830 0959                                      l7838 1393  
                                    l8488 0EA8                                      l8576 0C97  
                                    l8664 1782                                      l9544 05B0  
                                    l9536 0588                                      l9296 13FE  
                                    l8760 0B8D                                      l8840 0990  
                                    l8594 11FE                                      l9562 05F2  
                                    l9546 058B                                      l6994 124B  
                                    l8746 0B38                                      l8842 09B2  
                                    l6978 1D2F                                      l7794 0A5B  
                                    l8596 1203                                      l9564 05CD  
                                    l9548 05B8                                      l6996 1257  
                                    l8844 09B6                                      l8836 096E  
                                    l8940 09F8                                      l9566 05FA  
                                    l9574 0615                                      l9398 00A5  
                                    l8838 0975                                      l9568 0604  
                                    l9496 01E5                                      l8848 09BA  
                                    l8944 0A01                                      l8928 09E0  
                                    _CFGS 0CAE                                      l8794 1181  
                                    l8882 0779                                      l8866 0731  
                                    l8796 118A                                      l8868 0749  
                                    l8956 0A16                                      l9596 1573  
                                    l8992 130F                                      l8896 07A6  
                            __CFG_WDTE$ON 0000                                      l8994 131E  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5135 1E11                                      _PEIE 005E  
                                    u5405 10D4                                      u6135 1E3B  
                                    u6445 124E                                      u9015 0412  
                                    u9105 0DA9                                      u6465 1258  
                                    u9115 0DB8                                      u6475 1262  
                                    u9125 0DC2                                      u9205 0F08  
                                    u6485 126A                                      u9235 0F1E  
                                    u9315 0C71                                      u7555 100A  
                                    u9085 0D79                                      u9245 0F24  
                                    u9165 0ECA                                      u7565 100F  
                                    u8615 1636                                      u9095 0D89  
                                    u9175 0EDA                                      u9345 0C8C  
                                    u7905 0A99                                      u7595 14B9  
                                    u8715 07CA                                      u8635 1643  
                                    u9195 0F02                                      u9435 0CF8  
                                    u9460 173D                                      u9285 0C47  
                                    u8735 07D4                                      u7855 0A6A  
                                    u8745 07DE                                      u8665 1659  
                                    u9465 173B                                      u8755 07E6  
                                    u8595 161D                                      u7955 1387  
                                    u8925 03D9                                      u8955 03EC  
                                    _LWLO 0CAD                                      u8985 03FF  
                                    _RSSI 00D2                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1F4D  
              _setDimmerLights_DimmingRun 1F32                                      _Buz1 0120  
                                    _Load 0134                                      _Temp 00DB  
                                    _main 154F                              ___ftpack@arg 0021  
                     __end_of_DlyOff_Main 0958                           __end_of_RF_Main 1B41  
                            ___ftpack@exp 0024                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1C01                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0BA1                         ___bmul@multiplier 0024  
                            ___ftmul@cntr 003D                              ___ftmul@sign 003E  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2241 0024  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0020  
                            ___fttol@exp1 005C                              ___fttol@lval 0058  
       setDimmerLights_DimmingRun@command 0023   __end_of_getDimmerLights_Allow_Condition 1E6C  
__size_of_getDimmerLights_Allow_Condition 0016         ??_getDimmerLights_Allow_Condition 0022  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1E56  
                  _getDimmerLights_Status 1CBE                        ??_getDimmer_LoadGO 0021  
                        __end_of_LED_Main 1B54                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CE                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01EC  
                         __end_of___awdiv 07FD                           __end_of___lbdiv 105F  
                         __end_of___ftadd 0476                           __end_of___ftdiv 0DE3  
                         __end_of___ftneg 1BC2                                     u11020 05B6  
                                   u11025 0594                                     u11050 05F8  
                                   u10315 0517                           __end_of___ftmul 0F45  
                                   u11055 05D6                                     u10175 0E42  
                                   u10195 0E62                           ___awdiv@divisor 0021  
                                   u10285 04BA                                     _T1CON 0018  
                         __end_of___fttol 0CAE                                     u10805 0119  
                                   u10645 1359                                     u10595 1416  
                                   u10785 00A3                                     u10795 00D5  
                                   u10885 0199                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1279                                     i1l853 0B0D  
                                   i1l838 0ADB                                     i1l855 0B02  
                                   i1l864 0B1F                                     i1l858 0B0B  
                         ___awdiv@counter 0026             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0022                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1E41                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 1733   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 16CE                                     _Light 00D1  
                        __end_of_TMR1_ISR 1FC1                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1C78  
                                   _getAD 1FE0                             ___awtoft@sign 002E  
                           ___ftpack@sign 0025               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0021                          __end_of_WDT_Main 1D8F  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0026  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1BEB  
                      Flash_Memory_Read@i 0022                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1D6B  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 1CF1                        _setRF_DimmerLights 1733  
                         ___lbdiv@divisor 0070               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0073  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 00E5  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0021  
             ??_setDimmerLights_DimmingOn 0023                        ??_CC2500_SIDLEMode 0025  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 080E  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 15AA  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 1B58  
          getMain_All_LightsStatus@status 0021                        ??_setMemory_Modify 0021  
            setDimmerLights_OnOff@command 00E5                            _Exception_Main 054B  
                        ?_CC2500_WriteREG 0023                                 ??_ADC_Set 0021  
                    _setSw_Initialization 1CAE                                    ??_main 006E  
                           ___fttol@sign1 0057                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0063  
            ??_DimmerLights_SelectPointer 0021                   _setControl_Lights_Table 0958  
                          _setMemory_Data 1C54                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0023                                _Receive_OK 0370  
      setDimmerIntr_ControlStatus@command 0021                   _setDimmerLights_Dimming 15AA  
                               ??_IOC_ISR 007E                                 ??_IOC_Set 0021  
                             _DimmerIntr1 00BB                  _getMain_All_LightsStatus 1BCB  
                __size_of_setRFSW_Control 0043                        _RF_Timeout_Counter 1E02  
                 ??_Switch_Initialization 0026                    ?_setDimmerLights_OnOff 00E5  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0021  
                       ??_getRF_KeyStatus 0021                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08E9                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006E                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0023  
                   _getDimmer_Load_Status 1BA8                                 ??_WDT_Set 0021  
                        __end_of___awtoft 1081                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1669                  _getMain_All_Error_Status 1170  
                                  _IOCBF2 1CB2                                    i1l1201 0013  
                                  i1l1204 001B                                    i1l7120 0ABB  
                                  i1l7132 0ACA                                    i1l7126 0AC2  
                                  i1l7154 0AE8                                    i1l7138 0AD2  
                                  i1l7180 0B18                                    i1l7172 0B04  
                                  i1l6582 1045                                    i1l6584 104E  
                                  i1l6594 105D                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0023                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1EFE  
                                  u769_25 1FBB                                    _WDTCON 0097  
                    Exception_Main@i_3580 0034                        DelayTime_1us@count 0021  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0064  
           __end_of_CC2500_PowerOnInitial 1E2C                                    _Dimmer 012C  
                                  _DlySw1 0164             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1D47                __end_of_Mcu_Initialization 1D7D  
                     __end_of_Buzzer_Main 14F6                                    _Memory 01BE  
                                  _Timer1 0131                                    ___bmul 1D47  
                  __end_of_Exception_Main 0620                      Exception_Main@lights 0036  
                                  ___wmul 1000                                 ??___awdiv 0025  
                               ??___lbdiv 0071                                 ??___ftadd 0048  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0035  
                               ??___ftneg 0042                                 ??___ftmul 0035  
                               ??___fttol 0053              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0021                                 ??___lwdiv 0025  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0021  
                                  _r_data 00D9                      Exception_Main@status 002F  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1DC8  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0021          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1DB5                                    _s_data 00DA  
                  ??_setDimmerLights_SwOn 002E                                    _setLED 12B2  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0021  
                  __end_of_setMemory_Data 1C60                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0028                                    _setBuz 14F6  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 0030  
             __end_of_Load_Initialization 1B3B          ??_setDimmerLights_Initialization 0021  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0021  
        __end_of_setDimmerIntr_Dimming_RF 1EB2          __end_of_setDimmerIntr_Dimming_Sw 1E82  
                   ___ftmul@f3_as_product 003A                 _setDimmerLights_DimmingOn 10EF  
                Flash_Memory_Read@address 0023                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1DDB               getMain_Lights_Count@status1 0022  
             __size_of_DimmerLights_IOC_1 0041                     __end_of_SwPointSelect 1C90  
             __size_of_DimmerLights_TMR_1 0073              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0021  
                      setTemp_Main@TempGO 00E6                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0022              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E41               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0026          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 0046           setDimmerIntr_DimmingValue@value 0063  
         getDimmerIntr_DimmingValue@value 0023                                 ?_LED_Main 0070  
                              ___ftadd@f1 0042                                ___ftadd@f2 0045  
                    _getRF_KeyStatus$5333 0023                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0032                                ___ftdiv@f2 002F  
                              ___ftdiv@f3 003A                                ___ftneg@f1 003F  
                              ___awtoft@c 0029                       ___bmul@multiplicand 0021  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002F  
                              ___ftmul@f2 0032                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004F                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 101E  
                           __end_of_getAD 2000                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0022  
               setMemory_LoopSave@command 0022                        _LED_Initialization 1B4C  
                         _getSw_KeyStatus 1D24                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0022                           ?_setMemory_Data 0021  
        ??_getDimmerLights_PercentToValue 005D           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006C             ??_Flash_Memory_Initialization 0025  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1BE0  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01FC  
       setDimmerIntr_ControlStatus@lights 0023                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1C30                __end_of_set_TimeoutCleared 1B71  
         setDimmerIntr_MaxmumValue@lights 0065                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1C24                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0024  
                     _Temp_Initialization 1B41                        ??_CC2500_WriteByte 0021  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 14AC  
                       ??_setRFSW_Control 00E5               ?_setDimmerLights_DimmingRun 0023  
                       __end_of_Temp_Main 0800                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002E                                ??_LED_Main 0026  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B44  
                           ??_Switch_Main 0033                            DelayTime_1us@i 0023  
                          DelayTime_1us@j 0025                      ??_LED_Initialization 0026  
                            _DimmerLights 00CF                         LedPointSelect@led 0022  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0021                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002D  
                 ?_getDimmerLights_Status 0070                                __pmaintext 154F  
                          _getDelayOff_GO 1CE0                       _CC2500_WriteCommand 1F18  
                    ?_Temp_Initialization 0070                                   ?___bmul 0021  
                        ??_setDelayOff_GO 0068         __end_of_DimmerIntr_Initialization 1327  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0021  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0A3C                                ??_TMR1_Set 0021  
                              __pintentry 0004                    ??_setSw_Initialization 0025  
                              _getLoad_OK 1B98                        __size_of_setTxData 00BB  
                                 ?_setLED 0023                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B8A  
                                 ?_setBuz 002A                                 ?___awtoft 0029  
                               ?___ftpack 0021                                _getTemp_AD 1363  
      __end_of_DimmerLights_SelectPointer 1C24                _DimmerLights_SelectPointer 1C18  
                              ??_WDT_Main 0021              __end_of_setRF_Initialization 1C0C  
                      _setRFSW_AdjControl 0B21                    __end_of_setProductData 1C30  
           setDimmerLights_Dimming@lights 00E6                                   _IOC_ISR 1BB0  
                                 _IOC_Set 1BEB                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006B     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 13E4  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1EE4  
                  __size_of_CC2500_RxData 006E                    __size_of_CC2500_TxData 006D  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1B3E                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 1BF6           __end_of_setControl_Lights_Table 09CA  
                         setRF_Main@error 00EB                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0021                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 1608                   ??_setLoad_AH_AL_Restore 0021  
                     getCmd_Status@number 0021              __end_of_CC2500_FrequencyCabr 1C84  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0023  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1D13                 ?_setDimmerIntr_Dimming_RF 0021  
                     ??_Flash_Memory_Main 0027                 ?_setDimmerIntr_Dimming_Sw 0021  
                     ??_Flash_Memory_Read 0021                    __end_of_getDelayOff_GO 1CF1  
          __end_of_getDimmerLights_Status 1CCF                         __end_of_getRxData 0A3C  
                 __end_of_getSw_KeyStatus 1D35                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0021                      ??_setRFSW_AdjControl 0066  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0063                                   ___awdiv 07A9  
                                 ___lbdiv 103E                                   ___ftadd 0380  
                                 ___ftdiv 0D3A                                   ___ftneg 1BB9  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0C27                       __end_of_Switch_Main 1B98  
                                 ___lwdiv 1242                ??_getMain_All_LightsStatus 0021  
                 ??_Buzzer_Initialization 0021                           _getRF_KeyStatus 1D13  
                              ??___awtoft 002C                                ??___ftpack 0026  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0069  
                         __size_of_setBuz 0059                                   __ptext1 1327  
                                 __ptext2 1DDB                                   __ptext3 1363  
                                 __ptext4 0A3C                                   __ptext5 1FE0  
                                 __ptext6 1D7D                                   __ptext7 0002  
                                 __ptext8 07FD                                   __ptext9 0DE3  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0021                   ??_setDimmerLights_OnOff 00E6  
                         ?_setProductData 0063                 __end_of_Flash_Memory_Main 1425  
               __end_of_Flash_Memory_Read 1EFE                   ??_setDimmerLights_SwOff 0023  
                              _setRF_Main 0476                   ??_myMain_Initialization 0021  
                           _DelayOff_Main 1B48                         _DimmerLights_Main 1F4D  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0023  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1B77  
              __end_of_CC2500_ClearRXFIFO 1B60                  ??_setTemp_Initialization 0021  
              __end_of_CC2500_ClearTXFIFO 1B64                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00ED  
                          _LedPointSelect 1C48                 getAll_Sw_KeyStatus@status 0022  
                         getTemp_AD@ADRES 0027                       _DelayOffPointSelect 1C0C  
                                 clrloop0 1B7E            __size_of_Switch_Initialization 0004  
           __end_of_Switch_Initialization 1B6C                      end_of_initialization 0046  
               ??_DelayOff_Initialization 0024                         _CC2500_InitSetREG 1117  
                           _DelayTime_1us 10C9                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 1170        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1B77                __end_of_setRF_TransceiveGO 1DB5  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006E  
                    Flash_Memory_Read@ret 0024                                   initloop 1B78  
                              _setSw_Main 01FC                     CC2500_ReadByte@loop_b 0022  
                  setDimmerLights_SwOn@sw 002E                         _CC2500_ReadStatus 10A4  
                    Flash_Memory_Modify@i 0026                     _setLED_Initialization 1D59  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0025  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 087B                             _CC2500_TxData 080E  
                     ??_CC2500_InitSetREG 0026             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0BA1  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0021                              __pstringtext 1800  
                           _setCmd_Status 1EB2                       _Flash_Memory_Unlock 1BC2  
                     ??_CC2500_ReadStatus 0023                   CC2500_InitSetREG@loop_c 0029  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0025                   setTemp_Main@DangerValue 00E9  
                  setSw_Initialization@sw 0025                 __end_of_DimmerLights_Main 1F69  
                      _Mcu_Initialization 1D6B                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1B5C                      __end_of_my_MainTimer 1363  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C54                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002E          setDimmerIntr_DimmingValue@lights 0065  
        getDimmerIntr_DimmingValue@lights 0022                 __end_of_CC2500_InitSetREG 1141  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0021  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 10C9                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0023           getMain_All_Error_Status@command 0026  
                             ___ftdiv@exp 003D         __end_of_setDimmerLights_DimmingOn 1117  
                        ??_Exception_Main 002E                            __end_of_IO_Set 1F18  
                    _setRF_Initialization 1C01                        _setMemory_LoopSave 1DC8  
                             _Switch_Main 1B91                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1D24  
                        ??_setMemory_Data 0022                               ___ftmul@exp 0039  
                   _CC2500_PowerOnInitial 1E17               ??_DimmerIntr_Initialization 0063  
                    ??_Mcu_Initialization 0022               __end_of_getAll_Sw_KeyStatus 1D02  
                   ??_DelayOffPointSelect 0021                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0021                 DimmerLights_IOC_1@dimming 007D  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1D59  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0066  
                          __end_of___wmul 101E                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0022  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0068  
                          __end_of_setLED 12EB                             __pbitbssBANK0 0370  
           __size_of_setDimmerLights_Line 0011             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 154F                __end_of_DimmerLights_IOC_1 13E4  
                    _CC2500_FrequencyCabr 1C78                   ??_getDimmer_Load_Status 0021  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1425  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 0B21  
                     start_initialization 0022                           ?_LedPointSelect 0070  
                               _Load_Main 004A                               __end_of_ISR 0020  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1BA0  
                   ??_Flash_Memory_Modify 0025              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0021                __end_of_CC2500_InitPATable 1FE0  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0021  
                   ??_Flash_Memory_Unlock 0021                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0025    __end_of_getDimmerLights_PercentToValue 16CE  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1669  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005F                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1B6C         __end_of_setDimmerIntr_MaxmumValue 1C3C  
                                ??_IO_Set 0021                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0169                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0040  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 07FD                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0021                                 _Rx_Length 00D3  
                   setProductData@address 0065                       Exception_Main@count 0030  
                     Exception_Main@error 0031                                  ??___bmul 0022  
                                ??___wmul 0025                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1BD5                                 _Tx_Length 00D7  
                             __pdataBANK4 0220                                  ??_setLED 0024  
                                ?_ADC_Set 0070                                  ??_setBuz 002C  
                         ??_DelayOff_Main 0069                         ??_CC2500_ReadByte 0021  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11A3  
                        _CC2500_SIDLEMode 1B64                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0021                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0023                             ??_setLED_Main 0023  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002F                                 ___latbits 0003  
                        _setMemory_Modify 1D8F                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E5  
               setRF_TransceiveGO@command 0022                             __pcstackBANK3 01EC  
                    ??_set_TimeoutCleared 0021                 _DimmerIntr_Initialization 12EB  
                         ??_DelayTime_1us 0023                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0068                         ??_CC2500_PowerRST 0027  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0022                              ??_TouchPower 0021  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0063               setDimmerLights_DimmingOn@sw 0023  
                       ??_CC2500_WriteREG 0024                             ??_setRF_Learn 0021  
                           _DimmerLights1 015C                     CC2500_WriteREG@w_addr 0025  
                   setDelayOff_GO@command 0066            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0025             __end_of_setLoad_AH_AL_Restore 1F85  
                setRFSW_AdjControl@status 0068                           ??_CC2500_TxData 0025  
                               __pnvBANK1 00ED                            getRxData@error 00E9  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 1B58  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0032  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0023                     DelayOffPointSelect@sw 0022  
                           _getCmd_Status 1D35                                setBuz@time 002A  
                         ??_setCmd_Status 0022                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002B                    _setTemp_Initialization 0800  
                               _getBuz_GO 1D02                  ?_setDimmerLights_Dimming 006B  
     __end_of_Flash_Memory_Initialization 06EA               _Flash_Memory_Initialization 0620  
                                ?___awdiv 0021                                 __ptext100 15AA  
                               __ptext101 0F45                                  ?___lbdiv 0070  
                               __ptext110 1170                                 __ptext102 1DA2  
                               __ptext111 1B83                                 __ptext103 1733  
                               __ptext120 0D3A                                 __ptext112 1B34  
                               __ptext104 1CCF                                 __ptext121 0380  
                               __ptext113 12EB                                 __ptext105 1C30  
                               __ptext130 1279                                 __ptext122 105F  
                               __ptext114 1D8F                                 __ptext106 1E6C  
                               __ptext131 1CBE                                 __ptext123 1608  
                               __ptext115 16CE                                 __ptext107 1C90  
                               __ptext140 0AAE                                 __ptext132 1C18  
                               __ptext124 1B48                                 __ptext116 1669  
                               __ptext108 1E56                                 __ptext141 1BB0  
                               __ptext133 1B44                                 __ptext125 08E9  
                               __ptext117 0C27                                 __ptext109 1B98  
                                ?___ftadd 0042                                 __ptext142 13A3  
                               __ptext134 1B71                                 __ptext126 1C24  
                               __ptext118 1BB9                                 __ptext143 0801  
                               __ptext135 1C0C                                 __ptext127 11D7  
                               __ptext119 0E91                                 __ptext144 103E  
                               __ptext136 14AC                                 __ptext128 14F6  
                               __ptext137 1B35                                 __ptext129 07A9  
                               __ptext139 1FA2                                 _getRxData 09CA  
                                ?___ftdiv 002F                                  ?___ftneg 003F  
                                ?___ftmul 002F                                  ?___fttol 004F  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0021  
                 __end_of_setRFSW_Control 1468                          ??_setProductData 0064  
           __size_of_setSw_Initialization 0010            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1B38                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1E56  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0024  
      __end_of_getDimmerIntr_DimmingValue 1C9F              ??_setDimmerIntr_DimmingValue 0064  
              _getDimmerIntr_DimmingValue 1C90                    CC2500_WriteByte@loop_a 0022  
          __size_of_setDimmerLights_OnOff 00BF                                 _r_address 00D8  
           __end_of_setDimmerLights_OnOff 07A9            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 12B2  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1DEE  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                           _SwPointSelect 1C84                       __end_of_setLED_Main 1242  
                        ??_getDelayOff_GO 0023                    ??_setRF_Initialization 0021  
             __end_of_Temp_Initialization 1B44                         _CC2500_rfSettings 182F  
                          ___wmul@product 0025                                  _LED_Main 1B50  
                         SwPointSelect@sw 0022                                 clear_ram0 1B7D  
                CC2500_InitPATable@loop_d 0028                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1327                                 _setTxData 0F45  
                  _Flash_Memory_Main$3112 0029       __end_of_DimmerLights_Initialization 1B8A  
             _DimmerLights_Initialization 1B83                        _CC2500_ClearRXFIFO 1B5C  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1B60  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1E02                         ??_Timeout_Counter 0021  
                              ?_getBuz_GO 0021                  setRF_DimmerLights@status 0069  
    __size_of_setDimmerIntr_ControlStatus 0018               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 1141  
                              ?_getRxData 0070                              ??_getLoad_AD 0025  
                                _TMR1_ISR 1FA2                    CC2500_InitSetREG@temp1 0027  
                  CC2500_InitSetREG@temp2 0028                              ??_getLoad_OK 0021  
                                _TMR1_Set 1C6C                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1DA2  
                                _RF_Count 00C7                      __end_of_RF_RxDisable 1CAE  
                            ??_getTemp_AD 0025               __end_of_CC2500_WriteCommand 1F32  
                  ??_CC2500_FrequencyCabr 0027                                  _WDT_Main 1D7D  
                 DlyOff_Initialization@sw 0023                     getSw_KeyStatus@status 0022  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0021  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00AE  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CD                              setSw_Main@sw 0032  
                             ??_Load_Main 0029                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0027                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1C6C                            ?_SwPointSelect 0070  
                             getAD@adcon0 0024                               getAD@adcon1 0021  
                          setLED_Main@led 0025                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 11D7                     _DlyOff_Initialization 1B71  
       __size_of_getMain_All_LightsStatus 000A                      ??_CC2500_ClearRXFIFO 0025  
                                _Division 0801                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0025                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1E9A  
             setDimmerLights_OnOff@lights 00E8                  _setDimmerIntr_Dimming_Sw 1E6C  
                                _Fosc_Set 1B54                          __size_of_WDT_Set 000B  
                   setRFSW_Control@status 00E6                        __end_of_getLoad_AD 0AAE  
                      __end_of_getLoad_OK 1BA0                     _Switch_Initialization 1B68  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0021  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 13A3                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1ECB  
                       getLoad_AD@channel 0027       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0021                                  _SwDetect 00D6  
                             ??_Temp_Main 0067                          getCmd_Status@cmd 0022  
                        setCmd_Status@cmd 0021                         setRFSW_Control@sw 00E7  
           _getMain_All_Error_Status$3568 0022             _getMain_All_Error_Status$3569 0024  
                __end_of_getDimmer_LoadGO 1BA8                       _Load_Initialization 1B38  
        ??_getDimmerLights_ValueToPercent 005D           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0024                              _setTemp_Main 0DE3  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002F  
                                ___awtoft 105F                          ??_LedPointSelect 0021  
                                ___ftpack 1608             __size_of_getMain_Lights_Count 000B  
                  getDimmer_LoadGO@loadgo 0021                         getTemp_AD@channel 0026  
                            ??_setRF_Main 00EA                      CC2500_WriteREG@value 0023  
                             _setLED_Main 120C                __end_of_setRF_DimmerLights 1798  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0024                          getDelayOff_GO@sw 0023  
           __end_of_getDimmer_Load_Status 1BB0                          setDelayOff_GO@sw 006D  
                         ___lwdiv@divisor 0021                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0028                                  __ptext10 1B41  
                                __ptext11 0800                                  __ptext20 1E2C  
                                __ptext12 1B91                                  __ptext21 1B68  
                                __ptext13 01FC                                  __ptext30 0B21  
                                __ptext22 1CAE                                  __ptext14 1DEE  
                                __ptext31 1F32                                  __ptext23 1B3E  
                                __ptext15 10EF                                  __ptext40 1B64  
                                __ptext32 1D13                                  __ptext24 0476  
                                __ptext16 1D24                                  __ptext41 1468  
                                __ptext33 1D02                                  __ptext25 09CA  
                                __ptext17 1C84                                  __ptext50 1B58  
                                __ptext42 1117                                  __ptext34 1C9F  
                                __ptext26 11A3                                  __ptext18 1E41  
                                __ptext51 1E02                                  __ptext43 1FC1  
                                __ptext35 080E                                  __ptext27 1DC8  
                                __ptext19 1B6C                                  __ptext60 1B54  
                                __ptext52 1ECB                                  __ptext44 1081  
                                __ptext36 087B                                  __ptext28 0958  
                                __ptext61 1B8A                                  __ptext53 1B3B  
                                __ptext45 1C78                                  __ptext37 10A4  
                                __ptext29 1425                                  __ptext70 1F69  
                                __ptext62 004A                                  __ptext54 1C01  
                                __ptext46 10C9                                  __ptext38 1F85  
                                __ptext71 1B50                                  __ptext63 1BE0  
                                __ptext55 1D6B                                  __ptext47 1B60  
                                __ptext39 1E17                                  __ptext80 1C54  
                                __ptext72 120C                                  __ptext64 1BA8  
                                __ptext56 1BF6                                  __ptext48 1B5C  
                                __ptext81 1141                                  __ptext73 1B4C  
                                __ptext65 1BA0                                  __ptext57 1C6C  
                                __ptext49 1F18                                  __ptext90 1C48  
                                __ptext82 1BC2                                  __ptext74 1D59  
                                __ptext66 1DB5                                  __ptext58 1EFE  
                                __ptext91 1E9A                                  __ptext83 1EE4  
                                __ptext75 13E4                                  __ptext67 1000  
                                __ptext59 1BEB                                  __ptext92 1C3C  
                                __ptext84 054B                                  __ptext76 1CF1  
                                __ptext68 1242                                  __ptext93 1E82  
                                __ptext85 1BD5                                  __ptext77 0BA1  
                                __ptext69 1B38                                  __ptext94 0CAE  
                                __ptext86 1F4D                                  __ptext78 1C60  
                                __ptext95 1D47                                  __ptext87 1798  
                                __ptext79 0620                                  __ptext96 1EB2  
                                __ptext88 06EA                                  __ptext97 1BCB  
                                __ptext89 12B2                                  __ptext98 1CE0  
                                __ptext99 1D35                                  __product 0220  
                 ??_setLED_Initialization 0025                  ??_getDimmerLights_Status 0023  
            __end_of_getDimmerLights_Line 1BE0              __end_of_setDimmerLights_Main 1800  
            __end_of_setDimmerLights_Line 1CE0                        _DimmerLights_IOC_1 13A3  
            __end_of_setDimmerLights_SwOn 120C                              ??_setSw_Main 0030  
                  ??_setRF_TimeoutCleared 0021              ??_setDimmerLights_DimmingRun 0024  
                           setLED@command 0023                             __size_of_main 005B  
                             _setRF_Learn 1DEE        __size_of_DimmerIntr_Initialization 003C  
                         ??_getCmd_Status 0021                        _DimmerLights_TMR_1 0AAE  
                __end_of_CC2500_SIDLEMode 1B68                setDimmerLights_Main@lights 00E9  
             __end_of_DelayOffPointSelect 1C18                CC2500_WriteCommand@command 0024  
                         _CC2500_ReadByte 1F85                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1FC1                  __end_of_setMemory_Modify 1DA2  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 054B  
                             ??_getBuz_GO 0023                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E8                              getLoad_OK@ok 0021  
              __end_of_RF_Timeout_Counter 1E17               Flash_Memory_Main@key_Status 0028  
                _getAll_Sw_KeyStatus$6371 0023                                  main@argc 01EC  
                                main@argv 01EE                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6368 0023       getDimmerLights_ValueToPercent@value 005F  
                         _CC2500_PowerRST 1468                  __size_of_getSw_KeyStatus 0011  
            setDimmerLights_Dimming@value 00E5        __end_of_setDimmerIntr_DimmingValue 1C48  
              _setDimmerIntr_DimmingValue 1C3C               __end_of_Flash_Memory_Modify 0C27  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 11A3  
             __end_of_Flash_Memory_Unlock 1BCB                           ??_SwPointSelect 0021  
                         _CC2500_WriteREG 1081                        __end_of_setSw_Main 0380  
                   ??_Load_Initialization 0023                      ??_DimmerLights_IOC_1 007A  
         getDimmerLights_PercentToValue@i 0060       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 0371                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                            Division@result 0079  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0021  
              setDimmerLights_Line@lights 0021                   setDimmerLights_SwOff@sw 0023  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0026                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 006A                           setDelayOff_GO@j 006B  
                         setDelayOff_GO@k 006C                   ??_CC2500_PowerOnInitial 002A  
                   setTemp_Main@SafeValue 00E7    __end_of_setDimmerLights_Initialization 1B35  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1B34  
              ?_setDimmerIntr_MaxmumValue 0063                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0021                    CC2500_InitPATable@temp 0027  
                         getLoad_AD@ADRES 002A                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1B3B                               getLoad_AD@i 002C  
                             getLoad_AD@j 0029                               getLoad_AD@k 0028  
                    _Flash_Memory_Erasing 1C60                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D4                   __size_of_Exception_Main 00D5  
                           Division@value 0078           __end_of_DelayOff_Initialization 1B48  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1B4C  
                     ??_RF_Initialization 0022                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0CAE               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0072          __size_of_setDimmerLights_Dimming 005E  
             getDimmer_Load_Status@status 0021      __size_of_Flash_Memory_Initialization 00CA  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0066  
                   setMemory_Data@address 0023                     __end_of_DelayTime_1us 10EF  
                 __end_of_CC2500_ReadByte 1FA2              __end_of_setSw_Initialization 1CBE  
                         _Timeout_Counter 1E2C           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 0060                              _RF_RxDisable 1C9F  
        Flash_Memory_Initialization@value 0026                __end_of_LED_Initialization 1B50  
          __end_of_setTemp_Initialization 0801                               Division@num 0075  
                 setMemory_Modify@command 0022                   DimmerLights_IOC_1@count 007C  
               __end_of_RF_Initialization 1B3E                     __end_of_CC2500_RxData 08E9  
                   __end_of_CC2500_TxData 087B                     _setLoad_AH_AL_Restore 1F69  
                 __end_of_CC2500_PowerRST 14AC  
