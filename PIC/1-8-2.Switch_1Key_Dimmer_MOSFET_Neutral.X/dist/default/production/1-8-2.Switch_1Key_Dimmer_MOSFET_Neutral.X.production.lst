

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Jan 05 17:05:02 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	intentry,global,class=CODE,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	dabs	1,0x7E,2
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  0116                     	;# 
   209  0117                     	;# 
   210  011D                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  018E                     	;# 
   214  0191                     	;# 
   215  0191                     	;# 
   216  0192                     	;# 
   217  0193                     	;# 
   218  0193                     	;# 
   219  0194                     	;# 
   220  0195                     	;# 
   221  0196                     	;# 
   222  0197                     	;# 
   223  0199                     	;# 
   224  019A                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019C                     	;# 
   230  019C                     	;# 
   231  019D                     	;# 
   232  019E                     	;# 
   233  019F                     	;# 
   234  020D                     	;# 
   235  0210                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  0291                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0293                     	;# 
   255  0298                     	;# 
   256  0298                     	;# 
   257  0299                     	;# 
   258  029A                     	;# 
   259  0394                     	;# 
   260  0395                     	;# 
   261  0396                     	;# 
   262  0FE4                     	;# 
   263  0FE5                     	;# 
   264  0FE6                     	;# 
   265  0FE7                     	;# 
   266  0FE8                     	;# 
   267  0FE9                     	;# 
   268  0FEA                     	;# 
   269  0FEB                     	;# 
   270  0FED                     	;# 
   271  0FEE                     	;# 
   272  0FEF                     	;# 
   273  0000                     	;# 
   274  0001                     	;# 
   275  0002                     	;# 
   276  0003                     	;# 
   277  0004                     	;# 
   278  0005                     	;# 
   279  0006                     	;# 
   280  0007                     	;# 
   281  0008                     	;# 
   282  0009                     	;# 
   283  000A                     	;# 
   284  000B                     	;# 
   285  000C                     	;# 
   286  000D                     	;# 
   287  000E                     	;# 
   288  0010                     	;# 
   289  0011                     	;# 
   290  0012                     	;# 
   291  0015                     	;# 
   292  0016                     	;# 
   293  0016                     	;# 
   294  0017                     	;# 
   295  0018                     	;# 
   296  0019                     	;# 
   297  001A                     	;# 
   298  001B                     	;# 
   299  001C                     	;# 
   300  008C                     	;# 
   301  008D                     	;# 
   302  008E                     	;# 
   303  0090                     	;# 
   304  0091                     	;# 
   305  0092                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0099                     	;# 
   310  009A                     	;# 
   311  009B                     	;# 
   312  009B                     	;# 
   313  009C                     	;# 
   314  009D                     	;# 
   315  009E                     	;# 
   316  010C                     	;# 
   317  010D                     	;# 
   318  010E                     	;# 
   319  0116                     	;# 
   320  0117                     	;# 
   321  011D                     	;# 
   322  018C                     	;# 
   323  018D                     	;# 
   324  018E                     	;# 
   325  0191                     	;# 
   326  0191                     	;# 
   327  0192                     	;# 
   328  0193                     	;# 
   329  0193                     	;# 
   330  0194                     	;# 
   331  0195                     	;# 
   332  0196                     	;# 
   333  0197                     	;# 
   334  0199                     	;# 
   335  019A                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019D                     	;# 
   343  019E                     	;# 
   344  019F                     	;# 
   345  020D                     	;# 
   346  0210                     	;# 
   347  0211                     	;# 
   348  0211                     	;# 
   349  0212                     	;# 
   350  0212                     	;# 
   351  0213                     	;# 
   352  0213                     	;# 
   353  0214                     	;# 
   354  0214                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0216                     	;# 
   359  0216                     	;# 
   360  0217                     	;# 
   361  0217                     	;# 
   362  0291                     	;# 
   363  0291                     	;# 
   364  0292                     	;# 
   365  0293                     	;# 
   366  0298                     	;# 
   367  0298                     	;# 
   368  0299                     	;# 
   369  029A                     	;# 
   370  0394                     	;# 
   371  0395                     	;# 
   372  0396                     	;# 
   373  0FE4                     	;# 
   374  0FE5                     	;# 
   375  0FE6                     	;# 
   376  0FE7                     	;# 
   377  0FE8                     	;# 
   378  0FE9                     	;# 
   379  0FEA                     	;# 
   380  0FEB                     	;# 
   381  0FED                     	;# 
   382  0FEE                     	;# 
   383  0FEF                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000D                     	;# 
   398  000E                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  0090                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  010C                     	;# 
   428  010D                     	;# 
   429  010E                     	;# 
   430  0116                     	;# 
   431  0117                     	;# 
   432  011D                     	;# 
   433  018C                     	;# 
   434  018D                     	;# 
   435  018E                     	;# 
   436  0191                     	;# 
   437  0191                     	;# 
   438  0192                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0197                     	;# 
   445  0199                     	;# 
   446  019A                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019C                     	;# 
   452  019C                     	;# 
   453  019D                     	;# 
   454  019E                     	;# 
   455  019F                     	;# 
   456  020D                     	;# 
   457  0210                     	;# 
   458  0211                     	;# 
   459  0211                     	;# 
   460  0212                     	;# 
   461  0212                     	;# 
   462  0213                     	;# 
   463  0213                     	;# 
   464  0214                     	;# 
   465  0214                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0216                     	;# 
   470  0216                     	;# 
   471  0217                     	;# 
   472  0217                     	;# 
   473  0291                     	;# 
   474  0291                     	;# 
   475  0292                     	;# 
   476  0293                     	;# 
   477  0298                     	;# 
   478  0298                     	;# 
   479  0299                     	;# 
   480  029A                     	;# 
   481  0394                     	;# 
   482  0395                     	;# 
   483  0396                     	;# 
   484  0FE4                     	;# 
   485  0FE5                     	;# 
   486  0FE6                     	;# 
   487  0FE7                     	;# 
   488  0FE8                     	;# 
   489  0FE9                     	;# 
   490  0FEA                     	;# 
   491  0FEB                     	;# 
   492  0FED                     	;# 
   493  0FEE                     	;# 
   494  0FEF                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0008                     	;# 
   504  0009                     	;# 
   505  000A                     	;# 
   506  000B                     	;# 
   507  000C                     	;# 
   508  000D                     	;# 
   509  000E                     	;# 
   510  0010                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0015                     	;# 
   514  0016                     	;# 
   515  0016                     	;# 
   516  0017                     	;# 
   517  0018                     	;# 
   518  0019                     	;# 
   519  001A                     	;# 
   520  001B                     	;# 
   521  001C                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  0090                     	;# 
   526  0091                     	;# 
   527  0092                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0099                     	;# 
   532  009A                     	;# 
   533  009B                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  010C                     	;# 
   539  010D                     	;# 
   540  010E                     	;# 
   541  0116                     	;# 
   542  0117                     	;# 
   543  011D                     	;# 
   544  018C                     	;# 
   545  018D                     	;# 
   546  018E                     	;# 
   547  0191                     	;# 
   548  0191                     	;# 
   549  0192                     	;# 
   550  0193                     	;# 
   551  0193                     	;# 
   552  0194                     	;# 
   553  0195                     	;# 
   554  0196                     	;# 
   555  0197                     	;# 
   556  0199                     	;# 
   557  019A                     	;# 
   558  019B                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019C                     	;# 
   563  019C                     	;# 
   564  019D                     	;# 
   565  019E                     	;# 
   566  019F                     	;# 
   567  020D                     	;# 
   568  0210                     	;# 
   569  0211                     	;# 
   570  0211                     	;# 
   571  0212                     	;# 
   572  0212                     	;# 
   573  0213                     	;# 
   574  0213                     	;# 
   575  0214                     	;# 
   576  0214                     	;# 
   577  0215                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0216                     	;# 
   581  0216                     	;# 
   582  0217                     	;# 
   583  0217                     	;# 
   584  0291                     	;# 
   585  0291                     	;# 
   586  0292                     	;# 
   587  0293                     	;# 
   588  0298                     	;# 
   589  0298                     	;# 
   590  0299                     	;# 
   591  029A                     	;# 
   592  0394                     	;# 
   593  0395                     	;# 
   594  0396                     	;# 
   595  0FE4                     	;# 
   596  0FE5                     	;# 
   597  0FE6                     	;# 
   598  0FE7                     	;# 
   599  0FE8                     	;# 
   600  0FE9                     	;# 
   601  0FEA                     	;# 
   602  0FEB                     	;# 
   603  0FED                     	;# 
   604  0FEE                     	;# 
   605  0FEF                     	;# 
   606  0000                     	;# 
   607  0001                     	;# 
   608  0002                     	;# 
   609  0003                     	;# 
   610  0004                     	;# 
   611  0005                     	;# 
   612  0006                     	;# 
   613  0007                     	;# 
   614  0008                     	;# 
   615  0009                     	;# 
   616  000A                     	;# 
   617  000B                     	;# 
   618  000C                     	;# 
   619  000D                     	;# 
   620  000E                     	;# 
   621  0010                     	;# 
   622  0011                     	;# 
   623  0012                     	;# 
   624  0015                     	;# 
   625  0016                     	;# 
   626  0016                     	;# 
   627  0017                     	;# 
   628  0018                     	;# 
   629  0019                     	;# 
   630  001A                     	;# 
   631  001B                     	;# 
   632  001C                     	;# 
   633  008C                     	;# 
   634  008D                     	;# 
   635  008E                     	;# 
   636  0090                     	;# 
   637  0091                     	;# 
   638  0092                     	;# 
   639  0095                     	;# 
   640  0096                     	;# 
   641  0097                     	;# 
   642  0099                     	;# 
   643  009A                     	;# 
   644  009B                     	;# 
   645  009B                     	;# 
   646  009C                     	;# 
   647  009D                     	;# 
   648  009E                     	;# 
   649  010C                     	;# 
   650  010D                     	;# 
   651  010E                     	;# 
   652  0116                     	;# 
   653  0117                     	;# 
   654  011D                     	;# 
   655  018C                     	;# 
   656  018D                     	;# 
   657  018E                     	;# 
   658  0191                     	;# 
   659  0191                     	;# 
   660  0192                     	;# 
   661  0193                     	;# 
   662  0193                     	;# 
   663  0194                     	;# 
   664  0195                     	;# 
   665  0196                     	;# 
   666  0197                     	;# 
   667  0199                     	;# 
   668  019A                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019C                     	;# 
   674  019C                     	;# 
   675  019D                     	;# 
   676  019E                     	;# 
   677  019F                     	;# 
   678  020D                     	;# 
   679  0210                     	;# 
   680  0211                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0212                     	;# 
   684  0213                     	;# 
   685  0213                     	;# 
   686  0214                     	;# 
   687  0214                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0216                     	;# 
   692  0216                     	;# 
   693  0217                     	;# 
   694  0217                     	;# 
   695  0291                     	;# 
   696  0291                     	;# 
   697  0292                     	;# 
   698  0293                     	;# 
   699  0298                     	;# 
   700  0298                     	;# 
   701  0299                     	;# 
   702  029A                     	;# 
   703  0394                     	;# 
   704  0395                     	;# 
   705  0396                     	;# 
   706  0FE4                     	;# 
   707  0FE5                     	;# 
   708  0FE6                     	;# 
   709  0FE7                     	;# 
   710  0FE8                     	;# 
   711  0FE9                     	;# 
   712  0FEA                     	;# 
   713  0FEB                     	;# 
   714  0FED                     	;# 
   715  0FEE                     	;# 
   716  0FEF                     	;# 
   717  0000                     	;# 
   718  0001                     	;# 
   719  0002                     	;# 
   720  0003                     	;# 
   721  0004                     	;# 
   722  0005                     	;# 
   723  0006                     	;# 
   724  0007                     	;# 
   725  0008                     	;# 
   726  0009                     	;# 
   727  000A                     	;# 
   728  000B                     	;# 
   729  000C                     	;# 
   730  000D                     	;# 
   731  000E                     	;# 
   732  0010                     	;# 
   733  0011                     	;# 
   734  0012                     	;# 
   735  0015                     	;# 
   736  0016                     	;# 
   737  0016                     	;# 
   738  0017                     	;# 
   739  0018                     	;# 
   740  0019                     	;# 
   741  001A                     	;# 
   742  001B                     	;# 
   743  001C                     	;# 
   744  008C                     	;# 
   745  008D                     	;# 
   746  008E                     	;# 
   747  0090                     	;# 
   748  0091                     	;# 
   749  0092                     	;# 
   750  0095                     	;# 
   751  0096                     	;# 
   752  0097                     	;# 
   753  0099                     	;# 
   754  009A                     	;# 
   755  009B                     	;# 
   756  009B                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009E                     	;# 
   760  010C                     	;# 
   761  010D                     	;# 
   762  010E                     	;# 
   763  0116                     	;# 
   764  0117                     	;# 
   765  011D                     	;# 
   766  018C                     	;# 
   767  018D                     	;# 
   768  018E                     	;# 
   769  0191                     	;# 
   770  0191                     	;# 
   771  0192                     	;# 
   772  0193                     	;# 
   773  0193                     	;# 
   774  0194                     	;# 
   775  0195                     	;# 
   776  0196                     	;# 
   777  0197                     	;# 
   778  0199                     	;# 
   779  019A                     	;# 
   780  019B                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019C                     	;# 
   785  019C                     	;# 
   786  019D                     	;# 
   787  019E                     	;# 
   788  019F                     	;# 
   789  020D                     	;# 
   790  0210                     	;# 
   791  0211                     	;# 
   792  0211                     	;# 
   793  0212                     	;# 
   794  0212                     	;# 
   795  0213                     	;# 
   796  0213                     	;# 
   797  0214                     	;# 
   798  0214                     	;# 
   799  0215                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0216                     	;# 
   803  0216                     	;# 
   804  0217                     	;# 
   805  0217                     	;# 
   806  0291                     	;# 
   807  0291                     	;# 
   808  0292                     	;# 
   809  0293                     	;# 
   810  0298                     	;# 
   811  0298                     	;# 
   812  0299                     	;# 
   813  029A                     	;# 
   814  0394                     	;# 
   815  0395                     	;# 
   816  0396                     	;# 
   817  0FE4                     	;# 
   818  0FE5                     	;# 
   819  0FE6                     	;# 
   820  0FE7                     	;# 
   821  0FE8                     	;# 
   822  0FE9                     	;# 
   823  0FEA                     	;# 
   824  0FEB                     	;# 
   825  0FED                     	;# 
   826  0FEE                     	;# 
   827  0FEF                     	;# 
   828  0000                     	;# 
   829  0001                     	;# 
   830  0002                     	;# 
   831  0003                     	;# 
   832  0004                     	;# 
   833  0005                     	;# 
   834  0006                     	;# 
   835  0007                     	;# 
   836  0008                     	;# 
   837  0009                     	;# 
   838  000A                     	;# 
   839  000B                     	;# 
   840  000C                     	;# 
   841  000D                     	;# 
   842  000E                     	;# 
   843  0010                     	;# 
   844  0011                     	;# 
   845  0012                     	;# 
   846  0015                     	;# 
   847  0016                     	;# 
   848  0016                     	;# 
   849  0017                     	;# 
   850  0018                     	;# 
   851  0019                     	;# 
   852  001A                     	;# 
   853  001B                     	;# 
   854  001C                     	;# 
   855  008C                     	;# 
   856  008D                     	;# 
   857  008E                     	;# 
   858  0090                     	;# 
   859  0091                     	;# 
   860  0092                     	;# 
   861  0095                     	;# 
   862  0096                     	;# 
   863  0097                     	;# 
   864  0099                     	;# 
   865  009A                     	;# 
   866  009B                     	;# 
   867  009B                     	;# 
   868  009C                     	;# 
   869  009D                     	;# 
   870  009E                     	;# 
   871  010C                     	;# 
   872  010D                     	;# 
   873  010E                     	;# 
   874  0116                     	;# 
   875  0117                     	;# 
   876  011D                     	;# 
   877  018C                     	;# 
   878  018D                     	;# 
   879  018E                     	;# 
   880  0191                     	;# 
   881  0191                     	;# 
   882  0192                     	;# 
   883  0193                     	;# 
   884  0193                     	;# 
   885  0194                     	;# 
   886  0195                     	;# 
   887  0196                     	;# 
   888  0197                     	;# 
   889  0199                     	;# 
   890  019A                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019C                     	;# 
   896  019C                     	;# 
   897  019D                     	;# 
   898  019E                     	;# 
   899  019F                     	;# 
   900  020D                     	;# 
   901  0210                     	;# 
   902  0211                     	;# 
   903  0211                     	;# 
   904  0212                     	;# 
   905  0212                     	;# 
   906  0213                     	;# 
   907  0213                     	;# 
   908  0214                     	;# 
   909  0214                     	;# 
   910  0215                     	;# 
   911  0215                     	;# 
   912  0215                     	;# 
   913  0216                     	;# 
   914  0216                     	;# 
   915  0217                     	;# 
   916  0217                     	;# 
   917  0291                     	;# 
   918  0291                     	;# 
   919  0292                     	;# 
   920  0293                     	;# 
   921  0298                     	;# 
   922  0298                     	;# 
   923  0299                     	;# 
   924  029A                     	;# 
   925  0394                     	;# 
   926  0395                     	;# 
   927  0396                     	;# 
   928  0FE4                     	;# 
   929  0FE5                     	;# 
   930  0FE6                     	;# 
   931  0FE7                     	;# 
   932  0FE8                     	;# 
   933  0FE9                     	;# 
   934  0FEA                     	;# 
   935  0FEB                     	;# 
   936  0FED                     	;# 
   937  0FEE                     	;# 
   938  0FEF                     	;# 
   939  0000                     	;# 
   940  0001                     	;# 
   941  0002                     	;# 
   942  0003                     	;# 
   943  0004                     	;# 
   944  0005                     	;# 
   945  0006                     	;# 
   946  0007                     	;# 
   947  0008                     	;# 
   948  0009                     	;# 
   949  000A                     	;# 
   950  000B                     	;# 
   951  000C                     	;# 
   952  000D                     	;# 
   953  000E                     	;# 
   954  0010                     	;# 
   955  0011                     	;# 
   956  0012                     	;# 
   957  0015                     	;# 
   958  0016                     	;# 
   959  0016                     	;# 
   960  0017                     	;# 
   961  0018                     	;# 
   962  0019                     	;# 
   963  001A                     	;# 
   964  001B                     	;# 
   965  001C                     	;# 
   966  008C                     	;# 
   967  008D                     	;# 
   968  008E                     	;# 
   969  0090                     	;# 
   970  0091                     	;# 
   971  0092                     	;# 
   972  0095                     	;# 
   973  0096                     	;# 
   974  0097                     	;# 
   975  0099                     	;# 
   976  009A                     	;# 
   977  009B                     	;# 
   978  009B                     	;# 
   979  009C                     	;# 
   980  009D                     	;# 
   981  009E                     	;# 
   982  010C                     	;# 
   983  010D                     	;# 
   984  010E                     	;# 
   985  0116                     	;# 
   986  0117                     	;# 
   987  011D                     	;# 
   988  018C                     	;# 
   989  018D                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0194                     	;# 
   997  0195                     	;# 
   998  0196                     	;# 
   999  0197                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020D                     	;# 
  1012  0210                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0291                     	;# 
  1029  0291                     	;# 
  1030  0292                     	;# 
  1031  0293                     	;# 
  1032  0298                     	;# 
  1033  0298                     	;# 
  1034  0299                     	;# 
  1035  029A                     	;# 
  1036  0394                     	;# 
  1037  0395                     	;# 
  1038  0396                     	;# 
  1039  0FE4                     	;# 
  1040  0FE5                     	;# 
  1041  0FE6                     	;# 
  1042  0FE7                     	;# 
  1043  0FE8                     	;# 
  1044  0FE9                     	;# 
  1045  0FEA                     	;# 
  1046  0FEB                     	;# 
  1047  0FED                     	;# 
  1048  0FEE                     	;# 
  1049  0FEF                     	;# 
  1050  0000                     	;# 
  1051  0001                     	;# 
  1052  0002                     	;# 
  1053  0003                     	;# 
  1054  0004                     	;# 
  1055  0005                     	;# 
  1056  0006                     	;# 
  1057  0007                     	;# 
  1058  0008                     	;# 
  1059  0009                     	;# 
  1060  000A                     	;# 
  1061  000B                     	;# 
  1062  000C                     	;# 
  1063  000D                     	;# 
  1064  000E                     	;# 
  1065  0010                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0015                     	;# 
  1069  0016                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001C                     	;# 
  1077  008C                     	;# 
  1078  008D                     	;# 
  1079  008E                     	;# 
  1080  0090                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0095                     	;# 
  1084  0096                     	;# 
  1085  0097                     	;# 
  1086  0099                     	;# 
  1087  009A                     	;# 
  1088  009B                     	;# 
  1089  009B                     	;# 
  1090  009C                     	;# 
  1091  009D                     	;# 
  1092  009E                     	;# 
  1093  010C                     	;# 
  1094  010D                     	;# 
  1095  010E                     	;# 
  1096  0116                     	;# 
  1097  0117                     	;# 
  1098  011D                     	;# 
  1099  018C                     	;# 
  1100  018D                     	;# 
  1101  018E                     	;# 
  1102  0191                     	;# 
  1103  0191                     	;# 
  1104  0192                     	;# 
  1105  0193                     	;# 
  1106  0193                     	;# 
  1107  0194                     	;# 
  1108  0195                     	;# 
  1109  0196                     	;# 
  1110  0197                     	;# 
  1111  0199                     	;# 
  1112  019A                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019C                     	;# 
  1118  019C                     	;# 
  1119  019D                     	;# 
  1120  019E                     	;# 
  1121  019F                     	;# 
  1122  020D                     	;# 
  1123  0210                     	;# 
  1124  0211                     	;# 
  1125  0211                     	;# 
  1126  0212                     	;# 
  1127  0212                     	;# 
  1128  0213                     	;# 
  1129  0213                     	;# 
  1130  0214                     	;# 
  1131  0214                     	;# 
  1132  0215                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0216                     	;# 
  1136  0216                     	;# 
  1137  0217                     	;# 
  1138  0217                     	;# 
  1139  0291                     	;# 
  1140  0291                     	;# 
  1141  0292                     	;# 
  1142  0293                     	;# 
  1143  0298                     	;# 
  1144  0298                     	;# 
  1145  0299                     	;# 
  1146  029A                     	;# 
  1147  0394                     	;# 
  1148  0395                     	;# 
  1149  0396                     	;# 
  1150  0FE4                     	;# 
  1151  0FE5                     	;# 
  1152  0FE6                     	;# 
  1153  0FE7                     	;# 
  1154  0FE8                     	;# 
  1155  0FE9                     	;# 
  1156  0FEA                     	;# 
  1157  0FEB                     	;# 
  1158  0FED                     	;# 
  1159  0FEE                     	;# 
  1160  0FEF                     	;# 
  1161  0000                     	;# 
  1162  0001                     	;# 
  1163  0002                     	;# 
  1164  0003                     	;# 
  1165  0004                     	;# 
  1166  0005                     	;# 
  1167  0006                     	;# 
  1168  0007                     	;# 
  1169  0008                     	;# 
  1170  0009                     	;# 
  1171  000A                     	;# 
  1172  000B                     	;# 
  1173  000C                     	;# 
  1174  000D                     	;# 
  1175  000E                     	;# 
  1176  0010                     	;# 
  1177  0011                     	;# 
  1178  0012                     	;# 
  1179  0015                     	;# 
  1180  0016                     	;# 
  1181  0016                     	;# 
  1182  0017                     	;# 
  1183  0018                     	;# 
  1184  0019                     	;# 
  1185  001A                     	;# 
  1186  001B                     	;# 
  1187  001C                     	;# 
  1188  008C                     	;# 
  1189  008D                     	;# 
  1190  008E                     	;# 
  1191  0090                     	;# 
  1192  0091                     	;# 
  1193  0092                     	;# 
  1194  0095                     	;# 
  1195  0096                     	;# 
  1196  0097                     	;# 
  1197  0099                     	;# 
  1198  009A                     	;# 
  1199  009B                     	;# 
  1200  009B                     	;# 
  1201  009C                     	;# 
  1202  009D                     	;# 
  1203  009E                     	;# 
  1204  010C                     	;# 
  1205  010D                     	;# 
  1206  010E                     	;# 
  1207  0116                     	;# 
  1208  0117                     	;# 
  1209  011D                     	;# 
  1210  018C                     	;# 
  1211  018D                     	;# 
  1212  018E                     	;# 
  1213  0191                     	;# 
  1214  0191                     	;# 
  1215  0192                     	;# 
  1216  0193                     	;# 
  1217  0193                     	;# 
  1218  0194                     	;# 
  1219  0195                     	;# 
  1220  0196                     	;# 
  1221  0197                     	;# 
  1222  0199                     	;# 
  1223  019A                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019C                     	;# 
  1229  019C                     	;# 
  1230  019D                     	;# 
  1231  019E                     	;# 
  1232  019F                     	;# 
  1233  020D                     	;# 
  1234  0210                     	;# 
  1235  0211                     	;# 
  1236  0211                     	;# 
  1237  0212                     	;# 
  1238  0212                     	;# 
  1239  0213                     	;# 
  1240  0213                     	;# 
  1241  0214                     	;# 
  1242  0214                     	;# 
  1243  0215                     	;# 
  1244  0215                     	;# 
  1245  0215                     	;# 
  1246  0216                     	;# 
  1247  0216                     	;# 
  1248  0217                     	;# 
  1249  0217                     	;# 
  1250  0291                     	;# 
  1251  0291                     	;# 
  1252  0292                     	;# 
  1253  0293                     	;# 
  1254  0298                     	;# 
  1255  0298                     	;# 
  1256  0299                     	;# 
  1257  029A                     	;# 
  1258  0394                     	;# 
  1259  0395                     	;# 
  1260  0396                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  0010                     	;# 
  1288  0011                     	;# 
  1289  0012                     	;# 
  1290  0015                     	;# 
  1291  0016                     	;# 
  1292  0016                     	;# 
  1293  0017                     	;# 
  1294  0018                     	;# 
  1295  0019                     	;# 
  1296  001A                     	;# 
  1297  001B                     	;# 
  1298  001C                     	;# 
  1299  008C                     	;# 
  1300  008D                     	;# 
  1301  008E                     	;# 
  1302  0090                     	;# 
  1303  0091                     	;# 
  1304  0092                     	;# 
  1305  0095                     	;# 
  1306  0096                     	;# 
  1307  0097                     	;# 
  1308  0099                     	;# 
  1309  009A                     	;# 
  1310  009B                     	;# 
  1311  009B                     	;# 
  1312  009C                     	;# 
  1313  009D                     	;# 
  1314  009E                     	;# 
  1315  010C                     	;# 
  1316  010D                     	;# 
  1317  010E                     	;# 
  1318  0116                     	;# 
  1319  0117                     	;# 
  1320  011D                     	;# 
  1321  018C                     	;# 
  1322  018D                     	;# 
  1323  018E                     	;# 
  1324  0191                     	;# 
  1325  0191                     	;# 
  1326  0192                     	;# 
  1327  0193                     	;# 
  1328  0193                     	;# 
  1329  0194                     	;# 
  1330  0195                     	;# 
  1331  0196                     	;# 
  1332  0197                     	;# 
  1333  0199                     	;# 
  1334  019A                     	;# 
  1335  019B                     	;# 
  1336  019B                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019C                     	;# 
  1340  019C                     	;# 
  1341  019D                     	;# 
  1342  019E                     	;# 
  1343  019F                     	;# 
  1344  020D                     	;# 
  1345  0210                     	;# 
  1346  0211                     	;# 
  1347  0211                     	;# 
  1348  0212                     	;# 
  1349  0212                     	;# 
  1350  0213                     	;# 
  1351  0213                     	;# 
  1352  0214                     	;# 
  1353  0214                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0216                     	;# 
  1358  0216                     	;# 
  1359  0217                     	;# 
  1360  0217                     	;# 
  1361  0291                     	;# 
  1362  0291                     	;# 
  1363  0292                     	;# 
  1364  0293                     	;# 
  1365  0298                     	;# 
  1366  0298                     	;# 
  1367  0299                     	;# 
  1368  029A                     	;# 
  1369  0394                     	;# 
  1370  0395                     	;# 
  1371  0396                     	;# 
  1372  0FE4                     	;# 
  1373  0FE5                     	;# 
  1374  0FE6                     	;# 
  1375  0FE7                     	;# 
  1376  0FE8                     	;# 
  1377  0FE9                     	;# 
  1378  0FEA                     	;# 
  1379  0FEB                     	;# 
  1380  0FED                     	;# 
  1381  0FEE                     	;# 
  1382  0FEF                     	;# 
  1383  0000                     	;# 
  1384  0001                     	;# 
  1385  0002                     	;# 
  1386  0003                     	;# 
  1387  0004                     	;# 
  1388  0005                     	;# 
  1389  0006                     	;# 
  1390  0007                     	;# 
  1391  0008                     	;# 
  1392  0009                     	;# 
  1393  000A                     	;# 
  1394  000B                     	;# 
  1395  000C                     	;# 
  1396  000D                     	;# 
  1397  000E                     	;# 
  1398  0010                     	;# 
  1399  0011                     	;# 
  1400  0012                     	;# 
  1401  0015                     	;# 
  1402  0016                     	;# 
  1403  0016                     	;# 
  1404  0017                     	;# 
  1405  0018                     	;# 
  1406  0019                     	;# 
  1407  001A                     	;# 
  1408  001B                     	;# 
  1409  001C                     	;# 
  1410  008C                     	;# 
  1411  008D                     	;# 
  1412  008E                     	;# 
  1413  0090                     	;# 
  1414  0091                     	;# 
  1415  0092                     	;# 
  1416  0095                     	;# 
  1417  0096                     	;# 
  1418  0097                     	;# 
  1419  0099                     	;# 
  1420  009A                     	;# 
  1421  009B                     	;# 
  1422  009B                     	;# 
  1423  009C                     	;# 
  1424  009D                     	;# 
  1425  009E                     	;# 
  1426  010C                     	;# 
  1427  010D                     	;# 
  1428  010E                     	;# 
  1429  0116                     	;# 
  1430  0117                     	;# 
  1431  011D                     	;# 
  1432  018C                     	;# 
  1433  018D                     	;# 
  1434  018E                     	;# 
  1435  0191                     	;# 
  1436  0191                     	;# 
  1437  0192                     	;# 
  1438  0193                     	;# 
  1439  0193                     	;# 
  1440  0194                     	;# 
  1441  0195                     	;# 
  1442  0196                     	;# 
  1443  0197                     	;# 
  1444  0199                     	;# 
  1445  019A                     	;# 
  1446  019B                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019C                     	;# 
  1451  019C                     	;# 
  1452  019D                     	;# 
  1453  019E                     	;# 
  1454  019F                     	;# 
  1455  020D                     	;# 
  1456  0210                     	;# 
  1457  0211                     	;# 
  1458  0211                     	;# 
  1459  0212                     	;# 
  1460  0212                     	;# 
  1461  0213                     	;# 
  1462  0213                     	;# 
  1463  0214                     	;# 
  1464  0214                     	;# 
  1465  0215                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0216                     	;# 
  1469  0216                     	;# 
  1470  0217                     	;# 
  1471  0217                     	;# 
  1472  0291                     	;# 
  1473  0291                     	;# 
  1474  0292                     	;# 
  1475  0293                     	;# 
  1476  0298                     	;# 
  1477  0298                     	;# 
  1478  0299                     	;# 
  1479  029A                     	;# 
  1480  0394                     	;# 
  1481  0395                     	;# 
  1482  0396                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000D                     	;# 
  1508  000E                     	;# 
  1509  0010                     	;# 
  1510  0011                     	;# 
  1511  0012                     	;# 
  1512  0015                     	;# 
  1513  0016                     	;# 
  1514  0016                     	;# 
  1515  0017                     	;# 
  1516  0018                     	;# 
  1517  0019                     	;# 
  1518  001A                     	;# 
  1519  001B                     	;# 
  1520  001C                     	;# 
  1521  008C                     	;# 
  1522  008D                     	;# 
  1523  008E                     	;# 
  1524  0090                     	;# 
  1525  0091                     	;# 
  1526  0092                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0099                     	;# 
  1531  009A                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  010C                     	;# 
  1538  010D                     	;# 
  1539  010E                     	;# 
  1540  0116                     	;# 
  1541  0117                     	;# 
  1542  011D                     	;# 
  1543  018C                     	;# 
  1544  018D                     	;# 
  1545  018E                     	;# 
  1546  0191                     	;# 
  1547  0191                     	;# 
  1548  0192                     	;# 
  1549  0193                     	;# 
  1550  0193                     	;# 
  1551  0194                     	;# 
  1552  0195                     	;# 
  1553  0196                     	;# 
  1554  0197                     	;# 
  1555  0199                     	;# 
  1556  019A                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019C                     	;# 
  1562  019C                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019F                     	;# 
  1566  020D                     	;# 
  1567  0210                     	;# 
  1568  0211                     	;# 
  1569  0211                     	;# 
  1570  0212                     	;# 
  1571  0212                     	;# 
  1572  0213                     	;# 
  1573  0213                     	;# 
  1574  0214                     	;# 
  1575  0214                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0216                     	;# 
  1580  0216                     	;# 
  1581  0217                     	;# 
  1582  0217                     	;# 
  1583  0291                     	;# 
  1584  0291                     	;# 
  1585  0292                     	;# 
  1586  0293                     	;# 
  1587  0298                     	;# 
  1588  0298                     	;# 
  1589  0299                     	;# 
  1590  029A                     	;# 
  1591  0394                     	;# 
  1592  0395                     	;# 
  1593  0396                     	;# 
  1594  0FE4                     	;# 
  1595  0FE5                     	;# 
  1596  0FE6                     	;# 
  1597  0FE7                     	;# 
  1598  0FE8                     	;# 
  1599  0FE9                     	;# 
  1600  0FEA                     	;# 
  1601  0FEB                     	;# 
  1602  0FED                     	;# 
  1603  0FEE                     	;# 
  1604  0FEF                     	;# 
  1605  0000                     	;# 
  1606  0001                     	;# 
  1607  0002                     	;# 
  1608  0003                     	;# 
  1609  0004                     	;# 
  1610  0005                     	;# 
  1611  0006                     	;# 
  1612  0007                     	;# 
  1613  0008                     	;# 
  1614  0009                     	;# 
  1615  000A                     	;# 
  1616  000B                     	;# 
  1617  000C                     	;# 
  1618  000D                     	;# 
  1619  000E                     	;# 
  1620  0010                     	;# 
  1621  0011                     	;# 
  1622  0012                     	;# 
  1623  0015                     	;# 
  1624  0016                     	;# 
  1625  0016                     	;# 
  1626  0017                     	;# 
  1627  0018                     	;# 
  1628  0019                     	;# 
  1629  001A                     	;# 
  1630  001B                     	;# 
  1631  001C                     	;# 
  1632  008C                     	;# 
  1633  008D                     	;# 
  1634  008E                     	;# 
  1635  0090                     	;# 
  1636  0091                     	;# 
  1637  0092                     	;# 
  1638  0095                     	;# 
  1639  0096                     	;# 
  1640  0097                     	;# 
  1641  0099                     	;# 
  1642  009A                     	;# 
  1643  009B                     	;# 
  1644  009B                     	;# 
  1645  009C                     	;# 
  1646  009D                     	;# 
  1647  009E                     	;# 
  1648  010C                     	;# 
  1649  010D                     	;# 
  1650  010E                     	;# 
  1651  0116                     	;# 
  1652  0117                     	;# 
  1653  011D                     	;# 
  1654  018C                     	;# 
  1655  018D                     	;# 
  1656  018E                     	;# 
  1657  0191                     	;# 
  1658  0191                     	;# 
  1659  0192                     	;# 
  1660  0193                     	;# 
  1661  0193                     	;# 
  1662  0194                     	;# 
  1663  0195                     	;# 
  1664  0196                     	;# 
  1665  0197                     	;# 
  1666  0199                     	;# 
  1667  019A                     	;# 
  1668  019B                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019C                     	;# 
  1673  019C                     	;# 
  1674  019D                     	;# 
  1675  019E                     	;# 
  1676  019F                     	;# 
  1677  020D                     	;# 
  1678  0210                     	;# 
  1679  0211                     	;# 
  1680  0211                     	;# 
  1681  0212                     	;# 
  1682  0212                     	;# 
  1683  0213                     	;# 
  1684  0213                     	;# 
  1685  0214                     	;# 
  1686  0214                     	;# 
  1687  0215                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0216                     	;# 
  1691  0216                     	;# 
  1692  0217                     	;# 
  1693  0217                     	;# 
  1694  0291                     	;# 
  1695  0291                     	;# 
  1696  0292                     	;# 
  1697  0293                     	;# 
  1698  0298                     	;# 
  1699  0298                     	;# 
  1700  0299                     	;# 
  1701  029A                     	;# 
  1702  0394                     	;# 
  1703  0395                     	;# 
  1704  0396                     	;# 
  1705  0FE4                     	;# 
  1706  0FE5                     	;# 
  1707  0FE6                     	;# 
  1708  0FE7                     	;# 
  1709  0FE8                     	;# 
  1710  0FE9                     	;# 
  1711  0FEA                     	;# 
  1712  0FEB                     	;# 
  1713  0FED                     	;# 
  1714  0FEE                     	;# 
  1715  0FEF                     	;# 
  1716  0000                     	;# 
  1717  0001                     	;# 
  1718  0002                     	;# 
  1719  0003                     	;# 
  1720  0004                     	;# 
  1721  0005                     	;# 
  1722  0006                     	;# 
  1723  0007                     	;# 
  1724  0008                     	;# 
  1725  0009                     	;# 
  1726  000A                     	;# 
  1727  000B                     	;# 
  1728  000C                     	;# 
  1729  000D                     	;# 
  1730  000E                     	;# 
  1731  0010                     	;# 
  1732  0011                     	;# 
  1733  0012                     	;# 
  1734  0015                     	;# 
  1735  0016                     	;# 
  1736  0016                     	;# 
  1737  0017                     	;# 
  1738  0018                     	;# 
  1739  0019                     	;# 
  1740  001A                     	;# 
  1741  001B                     	;# 
  1742  001C                     	;# 
  1743  008C                     	;# 
  1744  008D                     	;# 
  1745  008E                     	;# 
  1746  0090                     	;# 
  1747  0091                     	;# 
  1748  0092                     	;# 
  1749  0095                     	;# 
  1750  0096                     	;# 
  1751  0097                     	;# 
  1752  0099                     	;# 
  1753  009A                     	;# 
  1754  009B                     	;# 
  1755  009B                     	;# 
  1756  009C                     	;# 
  1757  009D                     	;# 
  1758  009E                     	;# 
  1759  010C                     	;# 
  1760  010D                     	;# 
  1761  010E                     	;# 
  1762  0116                     	;# 
  1763  0117                     	;# 
  1764  011D                     	;# 
  1765  018C                     	;# 
  1766  018D                     	;# 
  1767  018E                     	;# 
  1768  0191                     	;# 
  1769  0191                     	;# 
  1770  0192                     	;# 
  1771  0193                     	;# 
  1772  0193                     	;# 
  1773  0194                     	;# 
  1774  0195                     	;# 
  1775  0196                     	;# 
  1776  0197                     	;# 
  1777  0199                     	;# 
  1778  019A                     	;# 
  1779  019B                     	;# 
  1780  019B                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019C                     	;# 
  1784  019C                     	;# 
  1785  019D                     	;# 
  1786  019E                     	;# 
  1787  019F                     	;# 
  1788  020D                     	;# 
  1789  0210                     	;# 
  1790  0211                     	;# 
  1791  0211                     	;# 
  1792  0212                     	;# 
  1793  0212                     	;# 
  1794  0213                     	;# 
  1795  0213                     	;# 
  1796  0214                     	;# 
  1797  0214                     	;# 
  1798  0215                     	;# 
  1799  0215                     	;# 
  1800  0215                     	;# 
  1801  0216                     	;# 
  1802  0216                     	;# 
  1803  0217                     	;# 
  1804  0217                     	;# 
  1805  0291                     	;# 
  1806  0291                     	;# 
  1807  0292                     	;# 
  1808  0293                     	;# 
  1809  0298                     	;# 
  1810  0298                     	;# 
  1811  0299                     	;# 
  1812  029A                     	;# 
  1813  0394                     	;# 
  1814  0395                     	;# 
  1815  0396                     	;# 
  1816  0FE4                     	;# 
  1817  0FE5                     	;# 
  1818  0FE6                     	;# 
  1819  0FE7                     	;# 
  1820  0FE8                     	;# 
  1821  0FE9                     	;# 
  1822  0FEA                     	;# 
  1823  0FEB                     	;# 
  1824  0FED                     	;# 
  1825  0FEE                     	;# 
  1826  0FEF                     	;# 
  1827  0000                     	;# 
  1828  0001                     	;# 
  1829  0002                     	;# 
  1830  0003                     	;# 
  1831  0004                     	;# 
  1832  0005                     	;# 
  1833  0006                     	;# 
  1834  0007                     	;# 
  1835  0008                     	;# 
  1836  0009                     	;# 
  1837  000A                     	;# 
  1838  000B                     	;# 
  1839  000C                     	;# 
  1840  000D                     	;# 
  1841  000E                     	;# 
  1842  0010                     	;# 
  1843  0011                     	;# 
  1844  0012                     	;# 
  1845  0015                     	;# 
  1846  0016                     	;# 
  1847  0016                     	;# 
  1848  0017                     	;# 
  1849  0018                     	;# 
  1850  0019                     	;# 
  1851  001A                     	;# 
  1852  001B                     	;# 
  1853  001C                     	;# 
  1854  008C                     	;# 
  1855  008D                     	;# 
  1856  008E                     	;# 
  1857  0090                     	;# 
  1858  0091                     	;# 
  1859  0092                     	;# 
  1860  0095                     	;# 
  1861  0096                     	;# 
  1862  0097                     	;# 
  1863  0099                     	;# 
  1864  009A                     	;# 
  1865  009B                     	;# 
  1866  009B                     	;# 
  1867  009C                     	;# 
  1868  009D                     	;# 
  1869  009E                     	;# 
  1870  010C                     	;# 
  1871  010D                     	;# 
  1872  010E                     	;# 
  1873  0116                     	;# 
  1874  0117                     	;# 
  1875  011D                     	;# 
  1876  018C                     	;# 
  1877  018D                     	;# 
  1878  018E                     	;# 
  1879  0191                     	;# 
  1880  0191                     	;# 
  1881  0192                     	;# 
  1882  0193                     	;# 
  1883  0193                     	;# 
  1884  0194                     	;# 
  1885  0195                     	;# 
  1886  0196                     	;# 
  1887  0197                     	;# 
  1888  0199                     	;# 
  1889  019A                     	;# 
  1890  019B                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019C                     	;# 
  1895  019C                     	;# 
  1896  019D                     	;# 
  1897  019E                     	;# 
  1898  019F                     	;# 
  1899  020D                     	;# 
  1900  0210                     	;# 
  1901  0211                     	;# 
  1902  0211                     	;# 
  1903  0212                     	;# 
  1904  0212                     	;# 
  1905  0213                     	;# 
  1906  0213                     	;# 
  1907  0214                     	;# 
  1908  0214                     	;# 
  1909  0215                     	;# 
  1910  0215                     	;# 
  1911  0215                     	;# 
  1912  0216                     	;# 
  1913  0216                     	;# 
  1914  0217                     	;# 
  1915  0217                     	;# 
  1916  0291                     	;# 
  1917  0291                     	;# 
  1918  0292                     	;# 
  1919  0293                     	;# 
  1920  0298                     	;# 
  1921  0298                     	;# 
  1922  0299                     	;# 
  1923  029A                     	;# 
  1924  0394                     	;# 
  1925  0395                     	;# 
  1926  0396                     	;# 
  1927  0FE4                     	;# 
  1928  0FE5                     	;# 
  1929  0FE6                     	;# 
  1930  0FE7                     	;# 
  1931  0FE8                     	;# 
  1932  0FE9                     	;# 
  1933  0FEA                     	;# 
  1934  0FEB                     	;# 
  1935  0FED                     	;# 
  1936  0FEE                     	;# 
  1937  0FEF                     	;# 
  1938  0000                     	;# 
  1939  0001                     	;# 
  1940  0002                     	;# 
  1941  0003                     	;# 
  1942  0004                     	;# 
  1943  0005                     	;# 
  1944  0006                     	;# 
  1945  0007                     	;# 
  1946  0008                     	;# 
  1947  0009                     	;# 
  1948  000A                     	;# 
  1949  000B                     	;# 
  1950  000C                     	;# 
  1951  000D                     	;# 
  1952  000E                     	;# 
  1953  0010                     	;# 
  1954  0011                     	;# 
  1955  0012                     	;# 
  1956  0015                     	;# 
  1957  0016                     	;# 
  1958  0016                     	;# 
  1959  0017                     	;# 
  1960  0018                     	;# 
  1961  0019                     	;# 
  1962  001A                     	;# 
  1963  001B                     	;# 
  1964  001C                     	;# 
  1965  008C                     	;# 
  1966  008D                     	;# 
  1967  008E                     	;# 
  1968  0090                     	;# 
  1969  0091                     	;# 
  1970  0092                     	;# 
  1971  0095                     	;# 
  1972  0096                     	;# 
  1973  0097                     	;# 
  1974  0099                     	;# 
  1975  009A                     	;# 
  1976  009B                     	;# 
  1977  009B                     	;# 
  1978  009C                     	;# 
  1979  009D                     	;# 
  1980  009E                     	;# 
  1981  010C                     	;# 
  1982  010D                     	;# 
  1983  010E                     	;# 
  1984  0116                     	;# 
  1985  0117                     	;# 
  1986  011D                     	;# 
  1987  018C                     	;# 
  1988  018D                     	;# 
  1989  018E                     	;# 
  1990  0191                     	;# 
  1991  0191                     	;# 
  1992  0192                     	;# 
  1993  0193                     	;# 
  1994  0193                     	;# 
  1995  0194                     	;# 
  1996  0195                     	;# 
  1997  0196                     	;# 
  1998  0197                     	;# 
  1999  0199                     	;# 
  2000  019A                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019C                     	;# 
  2006  019C                     	;# 
  2007  019D                     	;# 
  2008  019E                     	;# 
  2009  019F                     	;# 
  2010  020D                     	;# 
  2011  0210                     	;# 
  2012  0211                     	;# 
  2013  0211                     	;# 
  2014  0212                     	;# 
  2015  0212                     	;# 
  2016  0213                     	;# 
  2017  0213                     	;# 
  2018  0214                     	;# 
  2019  0214                     	;# 
  2020  0215                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0216                     	;# 
  2024  0216                     	;# 
  2025  0217                     	;# 
  2026  0217                     	;# 
  2027  0291                     	;# 
  2028  0291                     	;# 
  2029  0292                     	;# 
  2030  0293                     	;# 
  2031  0298                     	;# 
  2032  0298                     	;# 
  2033  0299                     	;# 
  2034  029A                     	;# 
  2035  0394                     	;# 
  2036  0395                     	;# 
  2037  0396                     	;# 
  2038  0FE4                     	;# 
  2039  0FE5                     	;# 
  2040  0FE6                     	;# 
  2041  0FE7                     	;# 
  2042  0FE8                     	;# 
  2043  0FE9                     	;# 
  2044  0FEA                     	;# 
  2045  0FEB                     	;# 
  2046  0FED                     	;# 
  2047  0FEE                     	;# 
  2048  0FEF                     	;# 
  2049  0000                     	;# 
  2050  0001                     	;# 
  2051  0002                     	;# 
  2052  0003                     	;# 
  2053  0004                     	;# 
  2054  0005                     	;# 
  2055  0006                     	;# 
  2056  0007                     	;# 
  2057  0008                     	;# 
  2058  0009                     	;# 
  2059  000A                     	;# 
  2060  000B                     	;# 
  2061  000C                     	;# 
  2062  000D                     	;# 
  2063  000E                     	;# 
  2064  0010                     	;# 
  2065  0011                     	;# 
  2066  0012                     	;# 
  2067  0015                     	;# 
  2068  0016                     	;# 
  2069  0016                     	;# 
  2070  0017                     	;# 
  2071  0018                     	;# 
  2072  0019                     	;# 
  2073  001A                     	;# 
  2074  001B                     	;# 
  2075  001C                     	;# 
  2076  008C                     	;# 
  2077  008D                     	;# 
  2078  008E                     	;# 
  2079  0090                     	;# 
  2080  0091                     	;# 
  2081  0092                     	;# 
  2082  0095                     	;# 
  2083  0096                     	;# 
  2084  0097                     	;# 
  2085  0099                     	;# 
  2086  009A                     	;# 
  2087  009B                     	;# 
  2088  009B                     	;# 
  2089  009C                     	;# 
  2090  009D                     	;# 
  2091  009E                     	;# 
  2092  010C                     	;# 
  2093  010D                     	;# 
  2094  010E                     	;# 
  2095  0116                     	;# 
  2096  0117                     	;# 
  2097  011D                     	;# 
  2098  018C                     	;# 
  2099  018D                     	;# 
  2100  018E                     	;# 
  2101  0191                     	;# 
  2102  0191                     	;# 
  2103  0192                     	;# 
  2104  0193                     	;# 
  2105  0193                     	;# 
  2106  0194                     	;# 
  2107  0195                     	;# 
  2108  0196                     	;# 
  2109  0197                     	;# 
  2110  0199                     	;# 
  2111  019A                     	;# 
  2112  019B                     	;# 
  2113  019B                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019C                     	;# 
  2117  019C                     	;# 
  2118  019D                     	;# 
  2119  019E                     	;# 
  2120  019F                     	;# 
  2121  020D                     	;# 
  2122  0210                     	;# 
  2123  0211                     	;# 
  2124  0211                     	;# 
  2125  0212                     	;# 
  2126  0212                     	;# 
  2127  0213                     	;# 
  2128  0213                     	;# 
  2129  0214                     	;# 
  2130  0214                     	;# 
  2131  0215                     	;# 
  2132  0215                     	;# 
  2133  0215                     	;# 
  2134  0216                     	;# 
  2135  0216                     	;# 
  2136  0217                     	;# 
  2137  0217                     	;# 
  2138  0291                     	;# 
  2139  0291                     	;# 
  2140  0292                     	;# 
  2141  0293                     	;# 
  2142  0298                     	;# 
  2143  0298                     	;# 
  2144  0299                     	;# 
  2145  029A                     	;# 
  2146  0394                     	;# 
  2147  0395                     	;# 
  2148  0396                     	;# 
  2149  0FE4                     	;# 
  2150  0FE5                     	;# 
  2151  0FE6                     	;# 
  2152  0FE7                     	;# 
  2153  0FE8                     	;# 
  2154  0FE9                     	;# 
  2155  0FEA                     	;# 
  2156  0FEB                     	;# 
  2157  0FED                     	;# 
  2158  0FEE                     	;# 
  2159  0FEF                     	;# 
  2160                           
  2161                           	psect	idataBANK4
  2162  11A8                     __pidataBANK4:	
  2163                           
  2164                           ;initializer for __product
  2165  11A8  3463               	retlw	99
  2166  11A9  3402               	retlw	2
  2167  11AA  3400               	retlw	0
  2168  11AB  3400               	retlw	0
  2169  11AC  3400               	retlw	0
  2170  11AD  3400               	retlw	0
  2171  11AE  3400               	retlw	0
  2172  11AF  3400               	retlw	0
  2173  11B0  3400               	retlw	0
  2174  11B1  3400               	retlw	0
  2175  11B2  3400               	retlw	0
  2176  11B3  3400               	retlw	0
  2177  11B4  34FF               	retlw	255
  2178  11B5  34FF               	retlw	255
  2179  11B6  34FF               	retlw	255
  2180  11B7  3400               	retlw	0
  2181  11B8  3400               	retlw	0
  2182  11B9  3400               	retlw	0
  2183  11BA  3400               	retlw	0
  2184  11BB  3400               	retlw	0
  2185  11BC  3400               	retlw	0
  2186  11BD  3400               	retlw	0
  2187  11BE  3400               	retlw	0
  2188  11BF  3400               	retlw	0
  2189  11C0  3400               	retlw	0
  2190  11C1  3400               	retlw	0
  2191  11C2  3400               	retlw	0
  2192  11C3  3400               	retlw	0
  2193  11C4  3400               	retlw	0
  2194  11C5  3400               	retlw	0
  2195  11C6  3400               	retlw	0
  2196  11C7  3400               	retlw	0
  2197                           
  2198                           	psect	stringtext
  2199  1000                     __pstringtext:	
  2200  1000                     _CC2500_registers_address:	
  2201  1000  3403               	retlw	3
  2202  1001  3416               	retlw	22
  2203  1002  3417               	retlw	23
  2204  1003  341E               	retlw	30
  2205  1004  341F               	retlw	31
  2206  1005  3420               	retlw	32
  2207  1006  342A               	retlw	42
  2208  1007  342B               	retlw	43
  2209  1008  340B               	retlw	11
  2210  1009  340C               	retlw	12
  2211  100A  340D               	retlw	13
  2212  100B  340E               	retlw	14
  2213  100C  340F               	retlw	15
  2214  100D  3410               	retlw	16
  2215  100E  3411               	retlw	17
  2216  100F  3412               	retlw	18
  2217  1010  3413               	retlw	19
  2218  1011  3414               	retlw	20
  2219  1012  340A               	retlw	10
  2220  1013  3415               	retlw	21
  2221  1014  3421               	retlw	33
  2222  1015  3422               	retlw	34
  2223  1016  3418               	retlw	24
  2224  1017  3419               	retlw	25
  2225  1018  341A               	retlw	26
  2226  1019  341B               	retlw	27
  2227  101A  341C               	retlw	28
  2228  101B  341D               	retlw	29
  2229  101C  3423               	retlw	35
  2230  101D  3424               	retlw	36
  2231  101E  3425               	retlw	37
  2232  101F  3426               	retlw	38
  2233  1020  3429               	retlw	41
  2234  1021  342C               	retlw	44
  2235  1022  342D               	retlw	45
  2236  1023  342E               	retlw	46
  2237  1024  3400               	retlw	0
  2238  1025  3401               	retlw	1
  2239  1026  3402               	retlw	2
  2240  1027  3407               	retlw	7
  2241  1028  3408               	retlw	8
  2242  1029  3409               	retlw	9
  2243  102A  3406               	retlw	6
  2244  102B  3404               	retlw	4
  2245  102C  3405               	retlw	5
  2246  102D  3427               	retlw	39
  2247  102E  3428               	retlw	40
  2248  102F                     __end_of_CC2500_registers_address:	
  2249  102F                     _CC2500_rfSettings:	
  2250  102F  3407               	retlw	7
  2251  1030  3407               	retlw	7
  2252  1031  3430               	retlw	48
  2253  1032  3487               	retlw	135
  2254  1033  346B               	retlw	107
  2255  1034  34F8               	retlw	248
  2256  1035  347F               	retlw	127
  2257  1036  343F               	retlw	63
  2258  1037  3409               	retlw	9
  2259  1038  3400               	retlw	0
  2260  1039  345C               	retlw	92
  2261  103A  34A7               	retlw	167
  2262  103B  3462               	retlw	98
  2263  103C  3486               	retlw	134
  2264  103D  3483               	retlw	131
  2265  103E  3403               	retlw	3
  2266  103F  3422               	retlw	34
  2267  1040  34F8               	retlw	248
  2268  1041  3400               	retlw	0
  2269  1042  3444               	retlw	68
  2270  1043  34B6               	retlw	182
  2271  1044  3410               	retlw	16
  2272  1045  3418               	retlw	24
  2273  1046  341D               	retlw	29
  2274  1047  341C               	retlw	28
  2275  1048  34C7               	retlw	199
  2276  1049  3400               	retlw	0
  2277  104A  34B2               	retlw	178
  2278  104B  34EA               	retlw	234
  2279  104C  340A               	retlw	10
  2280  104D  3400               	retlw	0
  2281  104E  3411               	retlw	17
  2282  104F  3459               	retlw	89
  2283  1050  3488               	retlw	136
  2284  1051  3431               	retlw	49
  2285  1052  340B               	retlw	11
  2286  1053  342F               	retlw	47
  2287  1054  342E               	retlw	46
  2288  1055  3406               	retlw	6
  2289  1056  3404               	retlw	4
  2290  1057  3405               	retlw	5
  2291  1058  3400               	retlw	0
  2292  1059  3430               	retlw	48
  2293  105A  34D3               	retlw	211
  2294  105B  3491               	retlw	145
  2295  105C  3441               	retlw	65
  2296  105D  3400               	retlw	0
  2297  105E                     __end_of_CC2500_rfSettings:	
  2298  105E                     _CC2500_patable_vaule:	
  2299  105E  34FE               	retlw	254
  2300  105F  34FE               	retlw	254
  2301  1060  34FE               	retlw	254
  2302  1061  34FE               	retlw	254
  2303  1062  34FE               	retlw	254
  2304  1063  34FE               	retlw	254
  2305  1064  34FE               	retlw	254
  2306  1065  34FE               	retlw	254
  2307  1066                     __end_of_CC2500_patable_vaule:	
  2308                           
  2309                           	psect	nvBANK0
  2310  006D                     __pnvBANK0:	
  2311  006D                     _product:	
  2312  006D                     	ds	1
  2313  000C                     _PORTA	set	12
  2314  000D                     _PORTB	set	13
  2315  000E                     _PORTC	set	14
  2316  0018                     _T1CON	set	24
  2317  0017                     _TMR1H	set	23
  2318  0016                     _TMR1L	set	22
  2319  005F                     _GIE	set	95
  2320  005B                     _IOCIE	set	91
  2321  0058                     _IOCIF	set	88
  2322  005E                     _PEIE	set	94
  2323  0060                     _RA0	set	96
  2324  0064                     _RA4	set	100
  2325  0066                     _RA6	set	102
  2326  0067                     _RA7	set	103
  2327  0068                     _RB0	set	104
  2328  0069                     _RB1	set	105
  2329  006A                     _RB2	set	106
  2330  006B                     _RB3	set	107
  2331  006D                     _RB5	set	109
  2332  0070                     _RC0	set	112
  2333  0071                     _RC1	set	113
  2334  0073                     _RC3	set	115
  2335  0074                     _RC4	set	116
  2336  0075                     _RC5	set	117
  2337  0088                     _TMR1IF	set	136
  2338  009D                     _ADCON0	set	157
  2339  009E                     _ADCON1	set	158
  2340  009C                     _ADRESH	set	156
  2341  009B                     _ADRESL	set	155
  2342  0099                     _OSCCON	set	153
  2343  008C                     _TRISA	set	140
  2344  008D                     _TRISB	set	141
  2345  008E                     _TRISC	set	142
  2346  0097                     _WDTCON	set	151
  2347  04E9                     _GO_nDONE	set	1257
  2348  0488                     _TMR1IE	set	1160
  2349  0117                     _FVRCON	set	279
  2350  010C                     _LATA	set	268
  2351  010D                     _LATB	set	269
  2352  010E                     _LATC	set	270
  2353  018C                     _ANSELA	set	396
  2354  018D                     _ANSELB	set	397
  2355  018E                     _ANSELC	set	398
  2356  0192                     _PMADRH	set	402
  2357  0191                     _PMADRL	set	401
  2358  0196                     _PMCON2	set	406
  2359  0194                     _PMDATH	set	404
  2360  0193                     _PMDATL	set	403
  2361  0CAE                     _CFGS	set	3246
  2362  0CAC                     _FREE	set	3244
  2363  0CAD                     _LWLO	set	3245
  2364  0CA8                     _RD	set	3240
  2365  0CA9                     _WR	set	3241
  2366  0CAA                     _WREN	set	3242
  2367  020D                     _WPUB	set	525
  2368  1069                     _WPUB1	set	4201
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0022                     start_initialization:	
  2378  0022                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to COMMON
  2384  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2385                           
  2386                           ; Clear objects allocated to BANK1
  2387  0024  30A0               	movlw	low __pbssBANK1
  2388  0025  0084               	movwf	4
  2389  0026  3000               	movlw	high __pbssBANK1
  2390  0027  0085               	movwf	5
  2391  0028  304F               	movlw	79
  2392  0029  319C  24F7  3180   	fcall	clear_ram0
  2393                           
  2394                           ; Clear objects allocated to BANK2
  2395  002C  3020               	movlw	low __pbssBANK2
  2396  002D  0084               	movwf	4
  2397  002E  3001               	movlw	high __pbssBANK2
  2398  002F  0085               	movwf	5
  2399  0030  3049               	movlw	73
  2400  0031  319C  24F7  3180   	fcall	clear_ram0
  2401                           
  2402                           ; Clear objects allocated to BANK3
  2403  0034  30A0               	movlw	low __pbssBANK3
  2404  0035  0084               	movwf	4
  2405  0036  3001               	movlw	high __pbssBANK3
  2406  0037  0085               	movwf	5
  2407  0038  304C               	movlw	76
  2408  0039  319C  24F7  3180   	fcall	clear_ram0
  2409                           
  2410                           ; Initialize objects allocated to BANK4
  2411  003C  30A8               	movlw	low __pidataBANK4
  2412  003D  0084               	movwf	4
  2413  003E  3091               	movlw	(high __pidataBANK4)| (0+128)
  2414  003F  0085               	movwf	5
  2415  0040  3020               	movlw	low __pdataBANK4
  2416  0041  0086               	movwf	6
  2417  0042  3002               	movlw	high __pdataBANK4
  2418  0043  0087               	movwf	7
  2419  0044  3020               	movlw	32
  2420  0045  319C  24F1         	fcall	init_ram
  2421  0047                     end_of_initialization:	
  2422                           ;End of C runtime variable initialization code
  2423                           
  2424  0047                     __end_of__initialization:	
  2425  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2426  0048  0020               	movlb	0
  2427  0049  3197  2F46         	ljmp	_main	;jump to C main() function
  2428                           
  2429                           	psect	bitbssCOMMON
  2430  03D0                     __pbitbssCOMMON:	
  2431  03D0                     _Receive_OK:	
  2432  03D0                     	ds	1
  2433  03D1                     _Transceive_OK:	
  2434  03D1                     	ds	1
  2435                           
  2436                           	psect	bssCOMMON
  2437  007B                     __pbssCOMMON:	
  2438  007B                     _Sw:	
  2439  007B                     	ds	1
  2440                           
  2441                           	psect	bssBANK1
  2442  00A0                     __pbssBANK1:	
  2443  00A0                     _RF1:	
  2444  00A0                     	ds	14
  2445  00AE                     _myMain:	
  2446  00AE                     	ds	14
  2447  00BC                     _Buz1:	
  2448  00BC                     	ds	12
  2449  00C8                     _CRC:	
  2450  00C8                     	ds	1
  2451  00C9                     _Cmd:	
  2452  00C9                     	ds	1
  2453  00CA                     _DelayOff:	
  2454  00CA                     	ds	1
  2455  00CB                     _DimmerIntr:	
  2456  00CB                     	ds	1
  2457  00CC                     _DimmerLights:	
  2458  00CC                     	ds	1
  2459  00CD                     _LED:	
  2460  00CD                     	ds	1
  2461  00CE                     _RSSI:	
  2462  00CE                     	ds	1
  2463  00CF                     _Rx_Length:	
  2464  00CF                     	ds	1
  2465  00D0                     _SPI0Buffer:	
  2466  00D0                     	ds	1
  2467  00D1                     _SwDetect:	
  2468  00D1                     	ds	1
  2469  00D2                     _Tx_Length:	
  2470  00D2                     	ds	1
  2471  00D3                     _r_address:	
  2472  00D3                     	ds	1
  2473  00D4                     _r_data:	
  2474  00D4                     	ds	1
  2475  00D5                     _s_data:	
  2476  00D5                     	ds	1
  2477  00D6                     _Temp:	
  2478  00D6                     	ds	18
  2479  00E8                     _DimmerIntr1:	
  2480  00E8                     	ds	7
  2481                           
  2482                           	psect	bssBANK2
  2483  0120                     __pbssBANK2:	
  2484  0120                     _Dimmer:	
  2485  0120                     	ds	3
  2486  0123                     _Timer1:	
  2487  0123                     	ds	3
  2488  0126                     _RF_Count:	
  2489  0126                     	ds	2
  2490  0128                     _WDT:	
  2491  0128                     	ds	2
  2492  012A                     _Load:	
  2493  012A                     	ds	46
  2494  0158                     _DimmerLights1:	
  2495  0158                     	ds	8
  2496  0160                     _DlySw1:	
  2497  0160                     	ds	5
  2498  0165                     _VarErrLED:	
  2499  0165                     	ds	4
  2500                           
  2501                           	psect	bssBANK3
  2502  01A0                     __pbssBANK3:	
  2503  01A0                     _RF_Data:	
  2504  01A0                     	ds	30
  2505  01BE                     _Memory:	
  2506  01BE                     	ds	37
  2507  01E3                     _Sw1:	
  2508  01E3                     	ds	9
  2509                           
  2510                           	psect	dataBANK4
  2511  0220                     __pdataBANK4:	
  2512  0220                     __product:	
  2513  0220                     	ds	32
  2514                           
  2515                           	psect	clrtext
  2516  1CF7                     clear_ram0:	
  2517                           ;	Called with FSR0 containing the base address, and
  2518                           ;	WREG with the size to clear
  2519                           
  2520  1CF7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2521  1CF8                     clrloop0:	
  2522  1CF8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2523  1CF9  3101               	addfsr 0,1
  2524  1CFA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2525  1CFB  2CF8               	goto	clrloop0	;have we reached the end yet?
  2526  1CFC  3400               	retlw	0	;all done for this memory range, return
  2527                           
  2528                           	psect	inittext
  2529  1CF1                     init_ram:	
  2530  1CF1  00FE               	movwf	126
  2531  1CF2                     initloop:	
  2532  1CF2  0012               	moviw fsr0++
  2533  1CF3  001E               	movwi fsr1++
  2534  1CF4  0BFE               	decfsz	126,f
  2535  1CF5  2CF2               	goto	initloop
  2536  1CF6  3400               	retlw	0
  2537                           
  2538                           	psect	cstackBANK2
  2539  0169                     __pcstackBANK2:	
  2540  0169                     ?_main:	
  2541  0169                     main@argc:	
  2542                           ; 2 bytes @ 0x0
  2543                           
  2544                           
  2545                           ; 2 bytes @ 0x0
  2546  0169                     	ds	2
  2547  016B                     main@argv:	
  2548                           
  2549                           ; 2 bytes @ 0x2
  2550  016B                     	ds	2
  2551                           
  2552                           	psect	cstackCOMMON
  2553  0070                     __pcstackCOMMON:	
  2554  0070                     ?_CC2500_WriteCommand:	
  2555  0070                     ?_RF_Timeout_Counter:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setRF_TimeoutCleared:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_CC2500_WriteByte:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_CC2500_ReadStatus:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_CC2500_ReadByte:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_CC2500_PowerRST:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_CC2500_InitSetREG:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_CC2500_InitPATable:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_CC2500_ClearTXFIFO:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_CC2500_ClearRXFIFO:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_CC2500_FrequencyCabr:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_CC2500_SIDLEMode:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_DlyOff_Initialization:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_DlyOff_Main:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setDimmerLights_SwOn:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_setDimmerLights_SwOff:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_setDimmerLights_Initialization:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_setDimmerLights_Main:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_setDimmerLights_Line:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_setTxData:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_setRF_TransceiveGO:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_setLED_Initialization:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_setLED_Main:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_Fosc_Set:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_IO_Set:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_TMR1_Set:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_ADC_Set:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_IOC_Set:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_WDT_Set:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_IOC_ISR:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ??_IOC_ISR:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_TMR1_ISR:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_Timeout_Counter:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_set_TimeoutCleared:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_Flash_Memory_Write:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_Flash_Memory_Modify:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_WDT_Clearing:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_myMain_Initialization:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_Temp_Initialization:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_Load_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_Switch_Initialization:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_RF_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_getLoad_AD:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_getTemp_AD:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_my_MainTimer:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Temp_Main:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Load_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Switch_Main:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_RF_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Exception_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setLoad_AH_AL_Restore:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setTemp_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_setTemp_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_setRF_Initialization:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_setRF_Main:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_RF_RxDisable:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_getRxData:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setLog_Code:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_setControl_Lights_Table:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_setRFSW_Control:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setRFSW_AdjControl:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setSw_Initialization:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setSw_Main:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Buzzer_Initialization:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_Buzzer_Main:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_CC2500_TxData:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_CC2500_RxData:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_CC2500_PowerOnInitial:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_DelayOffPointSelect:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_DelayOff_Initialization:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_DelayOff_Main:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_DimmerIntr_Initialization:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_DimmerLights_SelectPointer:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_DimmerLights_Initialization:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setDimmerLights_DimmingOn:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_DimmerLights_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_LedPointSelect:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_LED_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_LED_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_Mcu_Initialization:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_ISR:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_Flash_Memory_Initialization:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_Flash_Memory_Main:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_Flash_Memory_Unlock:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_Flash_Memory_Erasing:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_setMemory_Modify:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_setMemory_LoopSave:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_WDT_Main:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_setRF_Learn:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_TouchPower:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_SwPointSelect:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_getDimmerLights_Status:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_getLoad_OK:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     ?_getMain_All_Error_Status:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     ?_getMain_All_LightsStatus:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0070                     ?_getDimmerLights_Allow_Condition:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0070                     ?_getDimmerLights_PercentToValue:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0070                     ?_getDimmerLights_ValueToPercent:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0070                     ?_getCmd_Status:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0070                     ?_Flash_Memory_Read:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0070                     ?_getRF_KeyStatus:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     ?_getSw_KeyStatus:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_getDelayOff_GO:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getDimmerIntr_DimmingValue:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_getDimmerLights_Line:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_getDimmer_LoadGO:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getDimmer_Load_Status:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_getMain_Lights_Count:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     setDimmerLights_Initialization@lights:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     getDimmerLights_Allow_Condition@lights:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     getSw_KeyStatus@sw:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903                           
  2904                           ; 1 bytes @ 0x0
  2905  0070                     	ds	1
  2906  0071                     ??_TMR1_ISR:	
  2907  0071                     ??_ISR:	
  2908                           ; 0 bytes @ 0x1
  2909                           
  2910                           
  2911                           ; 0 bytes @ 0x1
  2912  0071                     	ds	1
  2913  0072                     ??_RF_Timeout_Counter:	
  2914  0072                     ??_setRF_TimeoutCleared:	
  2915                           ; 0 bytes @ 0x2
  2916                           
  2917  0072                     ??_CC2500_WriteByte:	
  2918                           ; 0 bytes @ 0x2
  2919                           
  2920  0072                     ??_CC2500_ReadByte:	
  2921                           ; 0 bytes @ 0x2
  2922                           
  2923  0072                     ?_DelayTime_1us:	
  2924                           ; 0 bytes @ 0x2
  2925                           
  2926  0072                     ??_setDimmerLights_Initialization:	
  2927                           ; 0 bytes @ 0x2
  2928                           
  2929  0072                     ??_getLoad_OK:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0072                     ??_getMain_All_Error_Status:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935  0072                     ??_getMain_All_LightsStatus:	
  2936                           ; 0 bytes @ 0x2
  2937                           
  2938  0072                     ??_setDimmerLights_Line:	
  2939                           ; 0 bytes @ 0x2
  2940                           
  2941  0072                     ??_getCmd_Status:	
  2942                           ; 0 bytes @ 0x2
  2943                           
  2944  0072                     ?_setCmd_Status:	
  2945                           ; 0 bytes @ 0x2
  2946                           
  2947  0072                     ??_setTxData:	
  2948                           ; 0 bytes @ 0x2
  2949                           
  2950  0072                     ??_setRF_TransceiveGO:	
  2951                           ; 0 bytes @ 0x2
  2952                           
  2953  0072                     ??_Fosc_Set:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0072                     ??_IO_Set:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0072                     ??_TMR1_Set:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0072                     ??_ADC_Set:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0072                     ??_IOC_Set:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0072                     ??_WDT_Set:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0072                     ??_Timeout_Counter:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0072                     ??_set_TimeoutCleared:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0072                     ??_Flash_Memory_Read:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0072                     ?_setMemory_Data:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0072                     ??_Flash_Memory_Write:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0072                     ??_WDT_Clearing:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0072                     ??_myMain_Initialization:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0072                     ??_Temp_Initialization:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0072                     ??_setLoad_AH_AL_Restore:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0072                     ??_setTemp_Initialization:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0072                     ??_setRF_Initialization:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0072                     ??_getRF_KeyStatus:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0072                     ??_getSw_KeyStatus:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010  0072                     ??_Buzzer_Initialization:	
  3011                           ; 0 bytes @ 0x2
  3012                           
  3013  0072                     ??_Buzzer_Main:	
  3014                           ; 0 bytes @ 0x2
  3015                           
  3016  0072                     ??_DelayOffPointSelect:	
  3017                           ; 0 bytes @ 0x2
  3018                           
  3019  0072                     ??_DimmerIntr_Initialization:	
  3020                           ; 0 bytes @ 0x2
  3021                           
  3022  0072                     ?_setDimmerIntr_ControlStatus:	
  3023                           ; 0 bytes @ 0x2
  3024                           
  3025  0072                     ?_setDimmerIntr_DimmingValue:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0072                     ??_getDimmerIntr_DimmingValue:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0072                     ?_setDimmerIntr_Dimming_RF:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0072                     ??_DimmerLights_SelectPointer:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0072                     ??_getDimmerLights_Line:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0072                     ??_getDimmer_LoadGO:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0072                     ??_getDimmer_Load_Status:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0072                     ??_LedPointSelect:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0072                     ??_Flash_Memory_Unlock:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0072                     ??_Flash_Memory_Erasing:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0072                     ??_setMemory_Modify:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0072                     ??_setMemory_LoopSave:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0072                     ??_WDT_Main:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0072                     ??_getMain_Lights_Count:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0072                     ??_setRF_Learn:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0072                     ??_TouchPower:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0072                     ??_SwPointSelect:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0072                     ?___bmul:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0072                     ?_getBuz_GO:	
  3086                           ; 1 bytes @ 0x2
  3087                           
  3088  0072                     ?_getAD:	
  3089                           ; 2 bytes @ 0x2
  3090                           
  3091  0072                     ?___wmul:	
  3092                           ; 2 bytes @ 0x2
  3093                           
  3094  0072                     ?___awdiv:	
  3095                           ; 2 bytes @ 0x2
  3096                           
  3097  0072                     ?___lwdiv:	
  3098                           ; 2 bytes @ 0x2
  3099                           
  3100  0072                     ?___ftpack:	
  3101                           ; 2 bytes @ 0x2
  3102                           
  3103  0072                     setDimmerIntr_ControlStatus@command:	
  3104                           ; 3 bytes @ 0x2
  3105                           
  3106  0072                     setDimmerIntr_DimmingValue@value:	
  3107                           ; 1 bytes @ 0x2
  3108                           
  3109  0072                     setDimmerIntr_Dimming_Sw@command:	
  3110                           ; 1 bytes @ 0x2
  3111                           
  3112  0072                     setDimmerIntr_Dimming_RF@command:	
  3113                           ; 1 bytes @ 0x2
  3114                           
  3115  0072                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3116                           ; 1 bytes @ 0x2
  3117                           
  3118  0072                     setDimmerLights_Line@lights:	
  3119                           ; 1 bytes @ 0x2
  3120                           
  3121  0072                     getDimmerLights_Line@line:	
  3122                           ; 1 bytes @ 0x2
  3123                           
  3124  0072                     getDimmer_LoadGO@loadgo:	
  3125                           ; 1 bytes @ 0x2
  3126                           
  3127  0072                     getDimmer_Load_Status@status:	
  3128                           ; 1 bytes @ 0x2
  3129                           
  3130  0072                     getAD@adcon1:	
  3131                           ; 1 bytes @ 0x2
  3132                           
  3133  0072                     setMemory_Data@data:	
  3134                           ; 1 bytes @ 0x2
  3135                           
  3136  0072                     getMain_All_LightsStatus@status:	
  3137                           ; 1 bytes @ 0x2
  3138                           
  3139  0072                     getMain_Lights_Count@count:	
  3140                           ; 1 bytes @ 0x2
  3141                           
  3142  0072                     setCmd_Status@cmd:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0072                     getCmd_Status@number:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0072                     getLoad_OK@ok:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0072                     ___bmul@multiplicand:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0072                     DelayTime_1us@count:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0072                     ___wmul@multiplier:	
  3158                           ; 2 bytes @ 0x2
  3159                           
  3160  0072                     ___awdiv@divisor:	
  3161                           ; 2 bytes @ 0x2
  3162                           
  3163  0072                     ___lwdiv@divisor:	
  3164                           ; 2 bytes @ 0x2
  3165                           
  3166  0072                     ___ftpack@arg:	
  3167                           ; 2 bytes @ 0x2
  3168                           
  3169                           
  3170                           ; 3 bytes @ 0x2
  3171  0072                     	ds	1
  3172  0073                     ??_getDimmerLights_Allow_Condition:	
  3173  0073                     ??_setCmd_Status:	
  3174                           ; 0 bytes @ 0x3
  3175                           
  3176  0073                     ??_setMemory_Data:	
  3177                           ; 0 bytes @ 0x3
  3178                           
  3179  0073                     ??_RF_Initialization:	
  3180                           ; 0 bytes @ 0x3
  3181                           
  3182  0073                     ??_setDimmerIntr_ControlStatus:	
  3183                           ; 0 bytes @ 0x3
  3184                           
  3185  0073                     ??_setDimmerIntr_DimmingValue:	
  3186                           ; 0 bytes @ 0x3
  3187                           
  3188  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3189                           ; 0 bytes @ 0x3
  3190                           
  3191  0073                     ??_setDimmerIntr_Dimming_RF:	
  3192                           ; 0 bytes @ 0x3
  3193                           
  3194  0073                     ??_DimmerLights_Initialization:	
  3195                           ; 0 bytes @ 0x3
  3196                           
  3197  0073                     ??_Mcu_Initialization:	
  3198                           ; 0 bytes @ 0x3
  3199                           
  3200  0073                     ??___bmul:	
  3201                           ; 0 bytes @ 0x3
  3202                           
  3203  0073                     CC2500_WriteByte@loop_a:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0073                     CC2500_ReadByte@loop_b:	
  3207                           ; 1 bytes @ 0x3
  3208                           
  3209  0073                     DelayOffPointSelect@sw:	
  3210                           ; 1 bytes @ 0x3
  3211                           
  3212  0073                     getDimmerIntr_DimmingValue@lights:	
  3213                           ; 1 bytes @ 0x3
  3214                           
  3215  0073                     DimmerLights_SelectPointer@lights:	
  3216                           ; 1 bytes @ 0x3
  3217                           
  3218  0073                     LedPointSelect@led:	
  3219                           ; 1 bytes @ 0x3
  3220                           
  3221  0073                     Flash_Memory_Read@i:	
  3222                           ; 1 bytes @ 0x3
  3223                           
  3224  0073                     Flash_Memory_Write@i:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0073                     setMemory_Modify@command:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0073                     setMemory_LoopSave@command:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0073                     getMain_Lights_Count@status1:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0073                     getCmd_Status@cmd:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0073                     setLoad_AH_AL_Restore@i:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242  0073                     setRF_Learn@command:	
  3243                           ; 1 bytes @ 0x3
  3244                           
  3245  0073                     getRF_KeyStatus@key:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0073                     setRF_TransceiveGO@command:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0073                     SwPointSelect@sw:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0073                     getSw_KeyStatus@status:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257  0073                     _getMain_All_Error_Status$3416:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260                           
  3261                           ; 2 bytes @ 0x3
  3262  0073                     	ds	1
  3263  0074                     ??_CC2500_WriteCommand:	
  3264  0074                     ??_CC2500_ReadStatus:	
  3265                           ; 0 bytes @ 0x4
  3266                           
  3267  0074                     ??_DelayTime_1us:	
  3268                           ; 0 bytes @ 0x4
  3269                           
  3270  0074                     ?_CC2500_WriteREG:	
  3271                           ; 0 bytes @ 0x4
  3272                           
  3273  0074                     ??_DlyOff_Initialization:	
  3274                           ; 0 bytes @ 0x4
  3275                           
  3276  0074                     ??_getDimmerLights_Status:	
  3277                           ; 0 bytes @ 0x4
  3278                           
  3279  0074                     ??_setDimmerLights_SwOff:	
  3280                           ; 0 bytes @ 0x4
  3281                           
  3282  0074                     ?_setLED:	
  3283                           ; 0 bytes @ 0x4
  3284                           
  3285  0074                     ??_setLED_Main:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0074                     ??_Load_Initialization:	
  3289                           ; 0 bytes @ 0x4
  3290                           
  3291  0074                     ??_getBuz_GO:	
  3292                           ; 0 bytes @ 0x4
  3293                           
  3294  0074                     ??_getDelayOff_GO:	
  3295                           ; 0 bytes @ 0x4
  3296                           
  3297  0074                     ??_setDimmerLights_DimmingOn:	
  3298                           ; 0 bytes @ 0x4
  3299                           
  3300  0074                     ?_setDimmerLights_DimmingRun:	
  3301                           ; 0 bytes @ 0x4
  3302                           
  3303  0074                     CC2500_WriteREG@value:	
  3304                           ; 0 bytes @ 0x4
  3305                           
  3306  0074                     DlyOff_Initialization@sw:	
  3307                           ; 1 bytes @ 0x4
  3308                           
  3309  0074                     getDelayOff_GO@sw:	
  3310                           ; 1 bytes @ 0x4
  3311                           
  3312  0074                     setDimmerIntr_ControlStatus@lights:	
  3313                           ; 1 bytes @ 0x4
  3314                           
  3315  0074                     setDimmerIntr_DimmingValue@lights:	
  3316                           ; 1 bytes @ 0x4
  3317                           
  3318  0074                     getDimmerIntr_DimmingValue@value:	
  3319                           ; 1 bytes @ 0x4
  3320                           
  3321  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3322                           ; 1 bytes @ 0x4
  3323                           
  3324  0074                     setDimmerIntr_Dimming_RF@lights:	
  3325                           ; 1 bytes @ 0x4
  3326                           
  3327  0074                     setDimmerLights_SwOff@sw:	
  3328                           ; 1 bytes @ 0x4
  3329                           
  3330  0074                     setDimmerLights_DimmingOn@sw:	
  3331                           ; 1 bytes @ 0x4
  3332                           
  3333  0074                     getDimmerLights_Allow_Condition@allow:	
  3334                           ; 1 bytes @ 0x4
  3335                           
  3336  0074                     getDimmerLights_Status@lights:	
  3337                           ; 1 bytes @ 0x4
  3338                           
  3339  0074                     setDimmerLights_DimmingRun@command:	
  3340                           ; 1 bytes @ 0x4
  3341                           
  3342  0074                     setLED@command:	
  3343                           ; 1 bytes @ 0x4
  3344                           
  3345  0074                     Flash_Memory_Read@address:	
  3346                           ; 1 bytes @ 0x4
  3347                           
  3348  0074                     setMemory_Data@address:	
  3349                           ; 1 bytes @ 0x4
  3350                           
  3351  0074                     setCmd_Status@number:	
  3352                           ; 1 bytes @ 0x4
  3353                           
  3354  0074                     _getRF_KeyStatus$5080:	
  3355                           ; 1 bytes @ 0x4
  3356                           
  3357  0074                     _getSw_KeyStatus$6063:	
  3358                           ; 1 bytes @ 0x4
  3359                           
  3360  0074                     ___bmul@product:	
  3361                           ; 1 bytes @ 0x4
  3362                           
  3363  0074                     DelayTime_1us@i:	
  3364                           ; 1 bytes @ 0x4
  3365                           
  3366  0074                     ___wmul@multiplicand:	
  3367                           ; 2 bytes @ 0x4
  3368                           
  3369  0074                     ___awdiv@dividend:	
  3370                           ; 2 bytes @ 0x4
  3371                           
  3372  0074                     ___lwdiv@dividend:	
  3373                           ; 2 bytes @ 0x4
  3374                           
  3375                           
  3376                           ; 2 bytes @ 0x4
  3377  0074                     	ds	1
  3378  0075                     ??_CC2500_WriteREG:	
  3379  0075                     ??_setLED:	
  3380                           ; 0 bytes @ 0x5
  3381                           
  3382  0075                     ??_DelayOff_Initialization:	
  3383                           ; 0 bytes @ 0x5
  3384                           
  3385  0075                     ??_setDimmerLights_DimmingRun:	
  3386                           ; 0 bytes @ 0x5
  3387                           
  3388  0075                     ??_getAD:	
  3389                           ; 0 bytes @ 0x5
  3390                           
  3391  0075                     CC2500_WriteCommand@command:	
  3392                           ; 0 bytes @ 0x5
  3393                           
  3394  0075                     CC2500_ReadStatus@status_addr:	
  3395                           ; 1 bytes @ 0x5
  3396                           
  3397  0075                     getDelayOff_GO@go:	
  3398                           ; 1 bytes @ 0x5
  3399                           
  3400  0075                     _getDimmerLights_Allow_Condition$2159:	
  3401                           ; 1 bytes @ 0x5
  3402                           
  3403  0075                     getDimmerLights_Status@status:	
  3404                           ; 1 bytes @ 0x5
  3405                           
  3406  0075                     setLED@led:	
  3407                           ; 1 bytes @ 0x5
  3408                           
  3409  0075                     getAD@adcon0:	
  3410                           ; 1 bytes @ 0x5
  3411                           
  3412  0075                     Flash_Memory_Read@ret:	
  3413                           ; 1 bytes @ 0x5
  3414                           
  3415  0075                     ___bmul@multiplier:	
  3416                           ; 1 bytes @ 0x5
  3417                           
  3418  0075                     ___ftpack@exp:	
  3419                           ; 1 bytes @ 0x5
  3420                           
  3421  0075                     _getMain_All_Error_Status$3417:	
  3422                           ; 1 bytes @ 0x5
  3423                           
  3424                           
  3425                           ; 2 bytes @ 0x5
  3426  0075                     	ds	1
  3427  0076                     ??_CC2500_ClearTXFIFO:	
  3428  0076                     ??_CC2500_ClearRXFIFO:	
  3429                           ; 0 bytes @ 0x6
  3430                           
  3431  0076                     ??_CC2500_SIDLEMode:	
  3432                           ; 0 bytes @ 0x6
  3433                           
  3434  0076                     ??_setLED_Initialization:	
  3435                           ; 0 bytes @ 0x6
  3436                           
  3437  0076                     ??_Flash_Memory_Modify:	
  3438                           ; 0 bytes @ 0x6
  3439                           
  3440  0076                     ??_getLoad_AD:	
  3441                           ; 0 bytes @ 0x6
  3442                           
  3443  0076                     ??_getTemp_AD:	
  3444                           ; 0 bytes @ 0x6
  3445                           
  3446  0076                     ??_RF_RxDisable:	
  3447                           ; 0 bytes @ 0x6
  3448                           
  3449  0076                     ??_setSw_Initialization:	
  3450                           ; 0 bytes @ 0x6
  3451                           
  3452  0076                     ??_CC2500_TxData:	
  3453                           ; 0 bytes @ 0x6
  3454                           
  3455  0076                     ??_CC2500_RxData:	
  3456                           ; 0 bytes @ 0x6
  3457                           
  3458  0076                     ??___wmul:	
  3459                           ; 0 bytes @ 0x6
  3460                           
  3461  0076                     ??___awdiv:	
  3462                           ; 0 bytes @ 0x6
  3463                           
  3464  0076                     ??___lwdiv:	
  3465                           ; 0 bytes @ 0x6
  3466                           
  3467  0076                     CC2500_WriteREG@w_addr:	
  3468                           ; 0 bytes @ 0x6
  3469                           
  3470  0076                     setDimmerLights_DimmingRun@lights:	
  3471                           ; 1 bytes @ 0x6
  3472                           
  3473  0076                     setLED_Initialization@led:	
  3474                           ; 1 bytes @ 0x6
  3475                           
  3476  0076                     setLED_Main@led:	
  3477                           ; 1 bytes @ 0x6
  3478                           
  3479  0076                     setSw_Initialization@sw:	
  3480                           ; 1 bytes @ 0x6
  3481                           
  3482  0076                     ___ftpack@sign:	
  3483                           ; 1 bytes @ 0x6
  3484                           
  3485  0076                     getBuz_GO@i:	
  3486                           ; 1 bytes @ 0x6
  3487                           
  3488  0076                     DelayTime_1us@j:	
  3489                           ; 2 bytes @ 0x6
  3490                           
  3491  0076                     ___wmul@product:	
  3492                           ; 2 bytes @ 0x6
  3493                           
  3494                           
  3495                           ; 2 bytes @ 0x6
  3496  0076                     	ds	1
  3497  0077                     ??_CC2500_InitSetREG:	
  3498  0077                     ??_CC2500_InitPATable:	
  3499                           ; 0 bytes @ 0x7
  3500                           
  3501  0077                     ??_Switch_Initialization:	
  3502                           ; 0 bytes @ 0x7
  3503                           
  3504  0077                     ??___ftpack:	
  3505                           ; 0 bytes @ 0x7
  3506                           
  3507  0077                     ??_setBuz:	
  3508                           ; 0 bytes @ 0x7
  3509                           
  3510  0077                     ??_LED_Initialization:	
  3511                           ; 0 bytes @ 0x7
  3512                           
  3513  0077                     ??_LED_Main:	
  3514                           ; 0 bytes @ 0x7
  3515                           
  3516  0077                     CC2500_TxData@loop_e:	
  3517                           ; 0 bytes @ 0x7
  3518                           
  3519  0077                     CC2500_RxData@loop_f:	
  3520                           ; 1 bytes @ 0x7
  3521                           
  3522  0077                     Flash_Memory_Modify@i:	
  3523                           ; 1 bytes @ 0x7
  3524                           
  3525  0077                     getMain_All_Error_Status@command:	
  3526                           ; 1 bytes @ 0x7
  3527                           
  3528  0077                     getTemp_AD@channel:	
  3529                           ; 1 bytes @ 0x7
  3530                           
  3531  0077                     ___lwdiv@quotient:	
  3532                           ; 1 bytes @ 0x7
  3533                           
  3534                           
  3535                           ; 2 bytes @ 0x7
  3536  0077                     	ds	1
  3537  0078                     ??_CC2500_PowerRST:	
  3538  0078                     ??_CC2500_FrequencyCabr:	
  3539                           ; 0 bytes @ 0x8
  3540                           
  3541  0078                     ??_Flash_Memory_Main:	
  3542                           ; 0 bytes @ 0x8
  3543                           
  3544  0078                     setBuz@count:	
  3545                           ; 0 bytes @ 0x8
  3546                           
  3547  0078                     CC2500_InitPATable@temp:	
  3548                           ; 1 bytes @ 0x8
  3549                           
  3550  0078                     getMain_All_Error_Status@status:	
  3551                           ; 1 bytes @ 0x8
  3552                           
  3553                           
  3554                           ; 1 bytes @ 0x8
  3555  0078                     	ds	1
  3556  0079                     ??_setDimmerLights_SwOn:	
  3557  0079                     ??_my_MainTimer:	
  3558                           ; 0 bytes @ 0x9
  3559                           
  3560  0079                     ??_Exception_Main:	
  3561                           ; 0 bytes @ 0x9
  3562                           
  3563  0079                     CC2500_InitPATable@loop_d:	
  3564                           ; 0 bytes @ 0x9
  3565                           
  3566  0079                     setSw_Main@sw:	
  3567                           ; 1 bytes @ 0x9
  3568                           
  3569  0079                     ___lwdiv@counter:	
  3570                           ; 1 bytes @ 0x9
  3571                           
  3572                           
  3573                           ; 1 bytes @ 0x9
  3574  0079                     	ds	1
  3575  007A                     ??_setDimmerLights_Main:	
  3576  007A                     ??_Temp_Main:	
  3577                           ; 0 bytes @ 0xA
  3578                           
  3579  007A                     ??_Switch_Main:	
  3580                           ; 0 bytes @ 0xA
  3581                           
  3582  007A                     ??_RF_Main:	
  3583                           ; 0 bytes @ 0xA
  3584                           
  3585  007A                     ??_setControl_Lights_Table:	
  3586                           ; 0 bytes @ 0xA
  3587                           
  3588  007A                     ??_CC2500_PowerOnInitial:	
  3589                           ; 0 bytes @ 0xA
  3590                           
  3591  007A                     ??_DelayOff_Main:	
  3592                           ; 0 bytes @ 0xA
  3593                           
  3594  007A                     ??_DimmerLights_Main:	
  3595                           ; 0 bytes @ 0xA
  3596                           
  3597  007A                     ??_main:	
  3598                           ; 0 bytes @ 0xA
  3599                           
  3600  007A                     ??___ftneg:	
  3601                           ; 0 bytes @ 0xA
  3602                           
  3603                           
  3604                           	psect	cstackBANK0
  3605  0020                     __pcstackBANK0:	
  3606                           ; 0 bytes @ 0xA
  3607                           
  3608  0020                     ??_Load_Main:	
  3609  0020                     ?___awtoft:	
  3610                           ; 0 bytes @ 0x0
  3611                           
  3612  0020                     CC2500_InitSetREG@temp1:	
  3613                           ; 3 bytes @ 0x0
  3614                           
  3615  0020                     getLoad_AD@channel:	
  3616                           ; 1 bytes @ 0x0
  3617                           
  3618  0020                     ___awdiv@counter:	
  3619                           ; 1 bytes @ 0x0
  3620                           
  3621  0020                     ___awtoft@c:	
  3622                           ; 1 bytes @ 0x0
  3623                           
  3624                           
  3625                           ; 2 bytes @ 0x0
  3626  0020                     	ds	1
  3627  0021                     CC2500_InitSetREG@temp2:	
  3628  0021                     getLoad_AD@k:	
  3629                           ; 1 bytes @ 0x1
  3630                           
  3631  0021                     ___awdiv@sign:	
  3632                           ; 1 bytes @ 0x1
  3633                           
  3634                           
  3635                           ; 1 bytes @ 0x1
  3636  0021                     	ds	1
  3637  0022                     CC2500_InitSetREG@loop_c:	
  3638  0022                     getLoad_AD@j:	
  3639                           ; 1 bytes @ 0x2
  3640                           
  3641  0022                     Load_Main@error:	
  3642                           ; 1 bytes @ 0x2
  3643                           
  3644  0022                     ___awdiv@quotient:	
  3645                           ; 1 bytes @ 0x2
  3646                           
  3647                           
  3648                           ; 2 bytes @ 0x2
  3649  0022                     	ds	1
  3650  0023                     ??___awtoft:	
  3651  0023                     getLoad_AD@i:	
  3652                           ; 0 bytes @ 0x3
  3653                           
  3654  0023                     Load_Main@Load_Status:	
  3655                           ; 1 bytes @ 0x3
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0x3
  3659  0023                     	ds	1
  3660  0024                     ?_setBuz:	
  3661  0024                     setBuz@time:	
  3662                           ; 0 bytes @ 0x4
  3663                           
  3664  0024                     Load_Main@i:	
  3665                           ; 2 bytes @ 0x4
  3666                           
  3667                           
  3668                           ; 2 bytes @ 0x4
  3669  0024                     	ds	1
  3670  0025                     ___awtoft@sign:	
  3671                           
  3672                           ; 1 bytes @ 0x5
  3673  0025                     	ds	1
  3674  0026                     ?___ftdiv:	
  3675  0026                     ?___ftmul:	
  3676                           ; 3 bytes @ 0x6
  3677                           
  3678  0026                     setDimmerLights_SwOn@sw:	
  3679                           ; 3 bytes @ 0x6
  3680                           
  3681  0026                     Exception_Main@count:	
  3682                           ; 1 bytes @ 0x6
  3683                           
  3684  0026                     ___ftdiv@f2:	
  3685                           ; 1 bytes @ 0x6
  3686                           
  3687  0026                     ___ftmul@f1:	
  3688                           ; 3 bytes @ 0x6
  3689                           
  3690                           
  3691                           ; 3 bytes @ 0x6
  3692  0026                     	ds	1
  3693  0027                     setDimmerLights_SwOn@idle:	
  3694  0027                     Exception_Main@error:	
  3695                           ; 1 bytes @ 0x7
  3696                           
  3697                           
  3698                           ; 1 bytes @ 0x7
  3699  0027                     	ds	1
  3700  0028                     ??_setSw_Main:	
  3701  0028                     Exception_Main@i:	
  3702                           ; 0 bytes @ 0x8
  3703                           
  3704                           
  3705                           ; 2 bytes @ 0x8
  3706  0028                     	ds	1
  3707  0029                     ___ftdiv@f1:	
  3708  0029                     ___ftmul@f2:	
  3709                           ; 3 bytes @ 0x9
  3710                           
  3711                           
  3712                           ; 3 bytes @ 0x9
  3713  0029                     	ds	1
  3714  002A                     Exception_Main@i_3427:	
  3715                           
  3716                           ; 2 bytes @ 0xA
  3717  002A                     	ds	2
  3718  002C                     ??___ftdiv:	
  3719  002C                     ??___ftmul:	
  3720                           ; 0 bytes @ 0xC
  3721                           
  3722  002C                     Exception_Main@lights:	
  3723                           ; 0 bytes @ 0xC
  3724                           
  3725                           
  3726                           ; 1 bytes @ 0xC
  3727  002C                     	ds	4
  3728  0030                     ___ftdiv@cntr:	
  3729  0030                     ___ftmul@exp:	
  3730                           ; 1 bytes @ 0x10
  3731                           
  3732                           
  3733                           ; 1 bytes @ 0x10
  3734  0030                     	ds	1
  3735  0031                     ___ftdiv@f3:	
  3736  0031                     ___ftmul@f3_as_product:	
  3737                           ; 3 bytes @ 0x11
  3738                           
  3739                           
  3740                           ; 3 bytes @ 0x11
  3741  0031                     	ds	3
  3742  0034                     ___ftdiv@exp:	
  3743  0034                     ___ftmul@cntr:	
  3744                           ; 1 bytes @ 0x14
  3745                           
  3746                           
  3747                           ; 1 bytes @ 0x14
  3748  0034                     	ds	1
  3749  0035                     ___ftdiv@sign:	
  3750  0035                     ___ftmul@sign:	
  3751                           ; 1 bytes @ 0x15
  3752                           
  3753                           
  3754                           ; 1 bytes @ 0x15
  3755  0035                     	ds	1
  3756  0036                     ?___ftneg:	
  3757  0036                     ___ftneg@f1:	
  3758                           ; 3 bytes @ 0x16
  3759                           
  3760                           
  3761                           ; 3 bytes @ 0x16
  3762  0036                     	ds	3
  3763  0039                     ?___ftadd:	
  3764  0039                     ___ftadd@f1:	
  3765                           ; 3 bytes @ 0x19
  3766                           
  3767                           
  3768                           ; 3 bytes @ 0x19
  3769  0039                     	ds	3
  3770  003C                     ___ftadd@f2:	
  3771                           
  3772                           ; 3 bytes @ 0x1C
  3773  003C                     	ds	3
  3774  003F                     ??___ftadd:	
  3775                           
  3776                           ; 0 bytes @ 0x1F
  3777  003F                     	ds	4
  3778  0043                     ___ftadd@sign:	
  3779                           
  3780                           ; 1 bytes @ 0x23
  3781  0043                     	ds	1
  3782  0044                     ___ftadd@exp2:	
  3783                           
  3784                           ; 1 bytes @ 0x24
  3785  0044                     	ds	1
  3786  0045                     ___ftadd@exp1:	
  3787                           
  3788                           ; 1 bytes @ 0x25
  3789  0045                     	ds	1
  3790  0046                     ?___fttol:	
  3791  0046                     ___fttol@f1:	
  3792                           ; 4 bytes @ 0x26
  3793                           
  3794                           
  3795                           ; 3 bytes @ 0x26
  3796  0046                     	ds	4
  3797  004A                     ??___fttol:	
  3798                           
  3799                           ; 0 bytes @ 0x2A
  3800  004A                     	ds	4
  3801  004E                     ___fttol@sign1:	
  3802                           
  3803                           ; 1 bytes @ 0x2E
  3804  004E                     	ds	1
  3805  004F                     ___fttol@lval:	
  3806                           
  3807                           ; 4 bytes @ 0x2F
  3808  004F                     	ds	4
  3809  0053                     ___fttol@exp1:	
  3810                           
  3811                           ; 1 bytes @ 0x33
  3812  0053                     	ds	1
  3813  0054                     ??_getDimmerLights_PercentToValue:	
  3814  0054                     ??_getDimmerLights_ValueToPercent:	
  3815                           ; 0 bytes @ 0x34
  3816                           
  3817                           
  3818                           ; 0 bytes @ 0x34
  3819  0054                     	ds	2
  3820  0056                     getDimmerLights_PercentToValue@value:	
  3821  0056                     getDimmerLights_ValueToPercent@value:	
  3822                           ; 1 bytes @ 0x36
  3823                           
  3824                           
  3825                           ; 1 bytes @ 0x36
  3826  0056                     	ds	1
  3827  0057                     getDimmerLights_PercentToValue@i:	
  3828  0057                     getDimmerLights_ValueToPercent@i:	
  3829                           ; 3 bytes @ 0x37
  3830                           
  3831                           
  3832                           ; 3 bytes @ 0x37
  3833  0057                     	ds	3
  3834  005A                     ?_setProductData:	
  3835  005A                     ?_setDimmerIntr_MaxmumValue:	
  3836                           ; 0 bytes @ 0x3A
  3837                           
  3838  005A                     ??_Flash_Memory_Initialization:	
  3839                           ; 0 bytes @ 0x3A
  3840                           
  3841  005A                     setDimmerIntr_MaxmumValue@value:	
  3842                           ; 0 bytes @ 0x3A
  3843                           
  3844  005A                     setProductData@value:	
  3845                           ; 1 bytes @ 0x3A
  3846                           
  3847                           
  3848                           ; 1 bytes @ 0x3A
  3849  005A                     	ds	1
  3850  005B                     ??_setProductData:	
  3851  005B                     ??_setDimmerIntr_MaxmumValue:	
  3852                           ; 0 bytes @ 0x3B
  3853                           
  3854  005B                     Flash_Memory_Initialization@i:	
  3855                           ; 0 bytes @ 0x3B
  3856                           
  3857                           
  3858                           ; 1 bytes @ 0x3B
  3859  005B                     	ds	1
  3860  005C                     setDimmerIntr_MaxmumValue@lights:	
  3861                           
  3862                           ; 1 bytes @ 0x3C
  3863  005C                     	ds	1
  3864  005D                     setProductData@address:	
  3865                           
  3866                           ; 1 bytes @ 0x3D
  3867  005D                     	ds	1
  3868  005E                     ??_DlyOff_Main:	
  3869  005E                     ?_setRF_DimmerLights:	
  3870                           ; 0 bytes @ 0x3E
  3871                           
  3872  005E                     ??_setTemp_Main:	
  3873                           ; 0 bytes @ 0x3E
  3874                           
  3875  005E                     ??_setLog_Code:	
  3876                           ; 0 bytes @ 0x3E
  3877                           
  3878  005E                     ??_setRFSW_AdjControl:	
  3879                           ; 0 bytes @ 0x3E
  3880                           
  3881  005E                     ?_setDelayOff_GO:	
  3882                           ; 0 bytes @ 0x3E
  3883                           
  3884  005E                     setDelayOff_GO@command:	
  3885                           ; 0 bytes @ 0x3E
  3886                           
  3887  005E                     setRF_DimmerLights@on:	
  3888                           ; 1 bytes @ 0x3E
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x3E
  3892  005E                     	ds	1
  3893  005F                     ??_setRF_DimmerLights:	
  3894  005F                     setDelayOff_GO@value:	
  3895                           ; 0 bytes @ 0x3F
  3896                           
  3897                           
  3898                           ; 1 bytes @ 0x3F
  3899  005F                     	ds	1
  3900  0060                     ??_setDelayOff_GO:	
  3901  0060                     DlyOff_Main@sw:	
  3902                           ; 0 bytes @ 0x40
  3903                           
  3904  0060                     setTemp_Main@error:	
  3905                           ; 1 bytes @ 0x40
  3906                           
  3907  0060                     setRFSW_AdjControl@status:	
  3908                           ; 1 bytes @ 0x40
  3909                           
  3910                           
  3911                           ; 1 bytes @ 0x40
  3912  0060                     	ds	1
  3913  0061                     setRFSW_AdjControl@sw:	
  3914  0061                     setRF_DimmerLights@status:	
  3915                           ; 1 bytes @ 0x41
  3916                           
  3917                           
  3918                           ; 1 bytes @ 0x41
  3919  0061                     	ds	1
  3920  0062                     setDelayOff_GO@i:	
  3921  0062                     setRF_DimmerLights@lights:	
  3922                           ; 1 bytes @ 0x42
  3923                           
  3924                           
  3925                           ; 1 bytes @ 0x42
  3926  0062                     	ds	1
  3927  0063                     ?_setDimmerLights_Dimming:	
  3928  0063                     setDelayOff_GO@j:	
  3929                           ; 0 bytes @ 0x43
  3930                           
  3931  0063                     setDimmerLights_Dimming@status:	
  3932                           ; 1 bytes @ 0x43
  3933                           
  3934                           
  3935                           ; 1 bytes @ 0x43
  3936  0063                     	ds	1
  3937  0064                     ??_setDimmerLights_Dimming:	
  3938  0064                     setDelayOff_GO@k:	
  3939                           ; 0 bytes @ 0x44
  3940                           
  3941                           
  3942                           ; 1 bytes @ 0x44
  3943  0064                     	ds	1
  3944  0065                     setDelayOff_GO@sw:	
  3945  0065                     setDimmerLights_Dimming@lights:	
  3946                           ; 1 bytes @ 0x45
  3947                           
  3948                           
  3949                           ; 1 bytes @ 0x45
  3950  0065                     	ds	1
  3951  0066                     ?_setDimmerLights_OnOff:	
  3952  0066                     ??_setRFSW_Control:	
  3953                           ; 0 bytes @ 0x46
  3954                           
  3955  0066                     setDimmerLights_OnOff@command:	
  3956                           ; 0 bytes @ 0x46
  3957                           
  3958                           
  3959                           ; 1 bytes @ 0x46
  3960  0066                     	ds	1
  3961  0067                     ??_setDimmerLights_OnOff:	
  3962  0067                     setRFSW_Control@status:	
  3963                           ; 0 bytes @ 0x47
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x47
  3967  0067                     	ds	1
  3968  0068                     setRFSW_Control@sw:	
  3969                           
  3970                           ; 1 bytes @ 0x48
  3971  0068                     	ds	1
  3972  0069                     ??_getRxData:	
  3973  0069                     setDimmerLights_OnOff@lights:	
  3974                           ; 0 bytes @ 0x49
  3975                           
  3976                           
  3977                           ; 1 bytes @ 0x49
  3978  0069                     	ds	1
  3979  006A                     setDimmerLights_Main@lights:	
  3980  006A                     getRxData@error:	
  3981                           ; 1 bytes @ 0x4A
  3982                           
  3983                           
  3984                           ; 1 bytes @ 0x4A
  3985  006A                     	ds	1
  3986  006B                     ??_setRF_Main:	
  3987                           
  3988                           ; 0 bytes @ 0x4B
  3989  006B                     	ds	1
  3990  006C                     setRF_Main@error:	
  3991                           
  3992                           ; 1 bytes @ 0x4C
  3993  006C                     	ds	1
  3994                           
  3995                           	psect	maintext
  3996  1746                     __pmaintext:	
  3997 ;;
  3998 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3999 ;;
  4000 ;; *************** function _main *****************
  4001 ;; Defined at:
  4002 ;;		line 7 in file "../src/Main_B1.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  argc            2    0[BANK2 ] int 
  4005 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;		None
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  2    0[BANK2 ] int 
  4010 ;; Registers used:
  4011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 17F/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4017 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4020 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  4021 ;;Total ram usage:        4 bytes
  4022 ;; Hardware stack levels required when called:   11
  4023 ;; This function calls:
  4024 ;;		_Buzzer_Initialization
  4025 ;;		_Buzzer_Main
  4026 ;;		_CC2500_PowerOnInitial
  4027 ;;		_DelayOff_Initialization
  4028 ;;		_DelayOff_Main
  4029 ;;		_DimmerLights_Initialization
  4030 ;;		_DimmerLights_Main
  4031 ;;		_Exception_Main
  4032 ;;		_Flash_Memory_Initialization
  4033 ;;		_Flash_Memory_Main
  4034 ;;		_LED_Initialization
  4035 ;;		_LED_Main
  4036 ;;		_Load_Initialization
  4037 ;;		_Load_Main
  4038 ;;		_Mcu_Initialization
  4039 ;;		_RF_Initialization
  4040 ;;		_RF_Main
  4041 ;;		_Switch_Initialization
  4042 ;;		_Switch_Main
  4043 ;;		_Temp_Initialization
  4044 ;;		_Temp_Main
  4045 ;;		_WDT_Main
  4046 ;;		_getLoad_AD
  4047 ;;		_getTemp_AD
  4048 ;;		_myMain_Initialization
  4049 ;;		_my_MainTimer
  4050 ;; This function is called by:
  4051 ;;		Startup code after reset
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _main
  4057  1746                     _main:	
  4058                           
  4059                           ;Main_B1.c: 8: myMain_Initialization();
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4063  1746  3188  2000  3197   	fcall	_myMain_Initialization
  4064                           
  4065                           ;Main_B1.c: 9: Mcu_Initialization();
  4066  1749  319F  2736  3197   	fcall	_Mcu_Initialization
  4067                           
  4068                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4069  174C  3184  2448  3197   	fcall	_Flash_Memory_Initialization
  4070                           
  4071                           ;Main_B1.c: 11: LED_Initialization();
  4072  174F  319C  24D0  3197   	fcall	_LED_Initialization
  4073                           
  4074                           ;Main_B1.c: 12: Buzzer_Initialization();
  4075  1752  319C  24B9  3197   	fcall	_Buzzer_Initialization
  4076                           
  4077                           ;Main_B1.c: 14: ;;
  4078                           ;Main_B1.c: 15: Temp_Initialization();
  4079  1755  319C  24C5  3197   	fcall	_Temp_Initialization
  4080                           
  4081                           ;Main_B1.c: 16: Load_Initialization();
  4082  1758  319C  24BC  3197   	fcall	_Load_Initialization
  4083                           
  4084                           ;Main_B1.c: 17: ;;
  4085                           ;Main_B1.c: 18: DelayOff_Initialization();
  4086  175B  319C  24C8  3197   	fcall	_DelayOff_Initialization
  4087                           
  4088                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4089  175E  319C  24FD  3197   	fcall	_DimmerLights_Initialization
  4090                           
  4091                           ;Main_B1.c: 21: ;;
  4092                           ;Main_B1.c: 22: ;;
  4093                           ;Main_B1.c: 23: ;;
  4094                           ;Main_B1.c: 24: Switch_Initialization();
  4095  1761  319D  2552  3197   	fcall	_Switch_Initialization
  4096                           
  4097                           ;Main_B1.c: 25: RF_Initialization();
  4098  1764  319C  24BF  3197   	fcall	_RF_Initialization
  4099                           
  4100                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4101  1767  319F  27D6  3197   	fcall	_CC2500_PowerOnInitial
  4102  176A                     l9541:	
  4103                           ;Main_B1.c: 27: ;;
  4104                           ;Main_B1.c: 28: ;;
  4105                           ;Main_B1.c: 30: while (1) {
  4106                           
  4107                           
  4108                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4109  176A  0021               	movlb	1	; select bank1
  4110  176B  1C2E               	btfss	_myMain^(0+128),0
  4111  176C  2F75               	goto	l9545
  4112                           
  4113                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4114  176D  3005               	movlw	5
  4115  176E  318B  23BD  3197   	fcall	_getLoad_AD
  4116                           
  4117                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4118  1771  3009               	movlw	9
  4119  1772  3194  2472  3197   	fcall	_getTemp_AD
  4120  1775                     l9545:	
  4121                           
  4122                           ;Main_B1.c: 57: }
  4123                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4124  1775  0022               	movlb	2	; select bank2
  4125  1776  1C23               	btfss	_Timer1^(0+256),0
  4126  1777  2F6A               	goto	l9541
  4127                           
  4128                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4129  1778  1023               	bcf	_Timer1^(0+256),0
  4130                           
  4131                           ;Main_B1.c: 96: my_MainTimer();
  4132  1779  3194  243A  3197   	fcall	_my_MainTimer
  4133                           
  4134                           ;Main_B1.c: 97: WDT_Main();
  4135  177C  319E  26D0  3197   	fcall	_WDT_Main
  4136                           
  4137                           ;Main_B1.c: 98: ;;
  4138                           ;Main_B1.c: 99: ;;
  4139                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4140  177F  0021               	movlb	1	; select bank1
  4141  1780  1C2E               	btfss	_myMain^(0+128),0
  4142  1781  2F6A               	goto	l9541
  4143                           
  4144                           ;Main_B1.c: 101: Flash_Memory_Main();
  4145  1782  3192  22FD  3197   	fcall	_Flash_Memory_Main
  4146                           
  4147                           ;Main_B1.c: 103: LED_Main();
  4148  1785  319C  24D4  3197   	fcall	_LED_Main
  4149                           
  4150                           ;Main_B1.c: 104: Buzzer_Main();
  4151  1788  3195  2569  3197   	fcall	_Buzzer_Main
  4152                           
  4153                           ;Main_B1.c: 106: ;;
  4154                           ;Main_B1.c: 107: Temp_Main();
  4155  178B  3190  2066  3197   	fcall	_Temp_Main
  4156                           
  4157                           ;Main_B1.c: 108: Load_Main();
  4158  178E  3180  204B  3197   	fcall	_Load_Main
  4159                           
  4160                           ;Main_B1.c: 109: ;;
  4161                           ;Main_B1.c: 111: ;;
  4162                           ;Main_B1.c: 112: DimmerLights_Main();
  4163  1791  3191  2117  3197   	fcall	_DimmerLights_Main
  4164                           
  4165                           ;Main_B1.c: 113: Switch_Main();
  4166  1794  319D  2520  3197   	fcall	_Switch_Main
  4167                           
  4168                           ;Main_B1.c: 114: ;;
  4169                           ;Main_B1.c: 115: ;;
  4170                           ;Main_B1.c: 117: RF_Main();
  4171  1797  319C  24C2  3197   	fcall	_RF_Main
  4172                           
  4173                           ;Main_B1.c: 118: DelayOff_Main();
  4174  179A  319C  24CC  3197   	fcall	_DelayOff_Main
  4175                           
  4176                           ;Main_B1.c: 119: ;;
  4177                           ;Main_B1.c: 120: ;;
  4178                           ;Main_B1.c: 121: Exception_Main();
  4179  179D  3185  2524  3197   	fcall	_Exception_Main
  4180  17A0  2F6A               	goto	l9541
  4181  17A1                     __end_of_main:	
  4182                           ;Main_B1.c: 128: }
  4183                           ;Main_B1.c: 129: }
  4184                           ;Main_B1.c: 163: }
  4185                           ;Main_B1.c: 164: return (0);
  4186                           ;	Return value of _main is never used
  4187                           
  4188                           
  4189                           	psect	text1
  4190  143A                     __ptext1:	
  4191 ;; *************** function _my_MainTimer *****************
  4192 ;; Defined at:
  4193 ;;		line 185 in file "../src/Main_B1.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;		None               void
  4200 ;; Registers used:
  4201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;Total ram usage:        1 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    5
  4214 ;; This function calls:
  4215 ;;		_setBuz
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _my_MainTimer
  4223  143A                     _my_MainTimer:	
  4224                           
  4225                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4229  143A  0021               	movlb	1	; select bank1
  4230  143B  182E               	btfsc	_myMain^(0+128),0
  4231  143C  2C52               	goto	l9263
  4232                           
  4233                           ;Main_B1.c: 189: myMain.PowerCount++;
  4234  143D  3001               	movlw	1
  4235  143E  00F9               	movwf	??_my_MainTimer
  4236  143F  0879               	movf	??_my_MainTimer,w
  4237  1440  07AF               	addwf	(_myMain^(0+128)+1),f
  4238                           
  4239                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4240  1441  082F               	movf	(_myMain^(0+128)+1),w
  4241  1442  3A4B               	xorlw	75
  4242  1443  1D03               	skipz
  4243  1444  0008               	return
  4244                           
  4245                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4246  1445  01AF               	clrf	(_myMain^(0+128)+1)
  4247                           
  4248                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4249  1446  142E               	bsf	_myMain^(0+128),0
  4250                           
  4251                           ;Main_B1.c: 197: setBuz(3, 50);
  4252  1447  3032               	movlw	50
  4253  1448  0020               	movlb	0	; select bank0
  4254  1449  00A4               	movwf	setBuz@time
  4255  144A  3000               	movlw	0
  4256  144B  00A5               	movwf	setBuz@time+1
  4257  144C  3003               	movlw	3
  4258  144D  3196  269F         	fcall	_setBuz
  4259                           
  4260                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4261  144F  0021               	movlb	1	; select bank1
  4262  1450  162E               	bsf	_myMain^(0+128),4
  4263                           
  4264                           ;Main_B1.c: 207: }
  4265                           ;Main_B1.c: 208: } else {
  4266  1451  0008               	return
  4267  1452                     l9263:	
  4268                           
  4269                           ;Main_B1.c: 209: myMain.PowerCount++;
  4270  1452  3001               	movlw	1
  4271  1453  00F9               	movwf	??_my_MainTimer
  4272  1454  0879               	movf	??_my_MainTimer,w
  4273  1455  07AF               	addwf	(_myMain^(0+128)+1),f
  4274                           
  4275                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4276  1456  082F               	movf	(_myMain^(0+128)+1),w
  4277  1457  3A32               	xorlw	50
  4278  1458  1903               	btfsc	3,2
  4279                           
  4280                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4281  1459  01AF               	clrf	(_myMain^(0+128)+1)
  4282                           
  4283                           ;Main_B1.c: 226: }
  4284                           ;Main_B1.c: 228: myMain.Count1++;
  4285  145A  3001               	movlw	1
  4286  145B  07B2               	addwf	(_myMain^(0+128)+4),f
  4287  145C  3000               	movlw	0
  4288  145D  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4289                           
  4290                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4291  145E  3004               	movlw	4
  4292  145F  3EAE               	addlw	_myMain& (0+255)
  4293  1460  0086               	movwf	6
  4294  1461  0187               	clrf	7
  4295  1462  3F40               	moviw [0]fsr1
  4296  1463  3A32               	xorlw	50
  4297  1464  1D03               	skipz
  4298  1465  2C68               	goto	u10385
  4299  1466  3F41               	moviw [1]fsr1
  4300  1467  3A00               	xorlw	0
  4301  1468                     u10385:	
  4302  1468  1D03               	skipz
  4303  1469  0008               	return
  4304                           
  4305                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4306  146A  01B2               	clrf	(_myMain^(0+128)+4)
  4307  146B  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4308                           
  4309                           ;Main_B1.c: 242: if (myMain.Flag) {
  4310  146C  1CAE               	btfss	_myMain^(0+128),1
  4311  146D  2C70               	goto	l1439
  4312                           
  4313                           ;Main_B1.c: 243: myMain.Flag = 0;
  4314  146E  10AE               	bcf	_myMain^(0+128),1
  4315                           
  4316                           ;Main_B1.c: 252: } else {
  4317  146F  0008               	return
  4318  1470                     l1439:	
  4319                           
  4320                           ;Main_B1.c: 253: myMain.Flag = 1;
  4321  1470  14AE               	bsf	_myMain^(0+128),1
  4322  1471  0008               	return
  4323  1472                     __end_of_my_MainTimer:	
  4324                           
  4325                           	psect	text2
  4326  0800                     __ptext2:	
  4327 ;; *************** function _myMain_Initialization *****************
  4328 ;; Defined at:
  4329 ;;		line 170 in file "../src/Main_B1.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;		None
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;		None
  4334 ;; Return value:  Size  Location     Type
  4335 ;;		None               void
  4336 ;; Registers used:
  4337 ;;		wreg, fsr1l, fsr1h
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4347 ;;Total ram usage:        1 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    3
  4350 ;; This function calls:
  4351 ;;		Nothing
  4352 ;; This function is called by:
  4353 ;;		_main
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           
  4358                           ;psect for function _myMain_Initialization
  4359  0800                     _myMain_Initialization:	
  4360                           
  4361                           ;Main_B1.c: 173: product = &_product;
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4365  0800  3020               	movlw	__product& (0+255)
  4366  0801  00F2               	movwf	??_myMain_Initialization
  4367  0802  0872               	movf	??_myMain_Initialization,w
  4368  0803  0020               	movlb	0	; select bank0
  4369  0804  00ED               	movwf	_product
  4370                           
  4371                           ;Main_B1.c: 174: product->Data[20] = 209;
  4372  0805  30D1               	movlw	209
  4373  0806  00F2               	movwf	??_myMain_Initialization
  4374  0807  086D               	movf	_product,w
  4375  0808  3E14               	addlw	20
  4376  0809  0086               	movwf	6
  4377  080A  3002               	movlw	2	; select bank4/5
  4378  080B  0087               	movwf	7
  4379  080C  0872               	movf	??_myMain_Initialization,w
  4380  080D  0081               	movwf	1
  4381  080E  0008               	return
  4382  080F                     __end_of_myMain_Initialization:	
  4383                           
  4384                           	psect	text3
  4385  1472                     __ptext3:	
  4386 ;; *************** function _getTemp_AD *****************
  4387 ;; Defined at:
  4388 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  channel         1    wreg     unsigned char 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;  channel         1    7[COMMON] unsigned char 
  4393 ;; Return value:  Size  Location     Type
  4394 ;;		None               void
  4395 ;; Registers used:
  4396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4404 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4405 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;Total ram usage:        2 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; Hardware stack levels required when called:    5
  4409 ;; This function calls:
  4410 ;;		_getAD
  4411 ;; This function is called by:
  4412 ;;		_main
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           
  4417                           ;psect for function _getTemp_AD
  4418  1472                     _getTemp_AD:	
  4419                           
  4420                           ;incstack = 0
  4421                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4422                           ;getTemp_AD@channel stored from wreg
  4423  1472  00F7               	movwf	getTemp_AD@channel
  4424                           
  4425                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4426  1473  0021               	movlb	1	; select bank1
  4427  1474  1D56               	btfss	_Temp^(0+128),2
  4428  1475  0008               	return
  4429                           
  4430                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4431  1476  30F0               	movlw	240
  4432  1477  00F6               	movwf	??_getTemp_AD
  4433  1478  0876               	movf	??_getTemp_AD,w
  4434  1479  00F2               	movwf	getAD@adcon1
  4435  147A  0877               	movf	getTemp_AD@channel,w
  4436  147B  3190  20E2  3194   	fcall	_getAD
  4437  147E  0873               	movf	?_getAD+1,w
  4438  147F  0021               	movlb	1	; select bank1
  4439  1480  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4440  1481  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4441  1482  0872               	movf	?_getAD,w
  4442  1483  01E2               	clrf	(_Temp^(0+128)+12)
  4443  1484  07E2               	addwf	(_Temp^(0+128)+12),f
  4444                           
  4445                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4446  1485  300C               	movlw	12
  4447  1486  3ED6               	addlw	_Temp& (0+255)
  4448  1487  0086               	movwf	6
  4449  1488  0187               	clrf	7
  4450  1489  0016               	moviw fsr1++
  4451  148A  0401               	iorwf	1,w
  4452  148B  1903               	skipnz
  4453  148C  0008               	return
  4454                           
  4455                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4456  148D  0863               	movf	((_Temp+1)^(0+128)+12),w
  4457  148E  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4458  148F  1D03               	skipz
  4459  1490  2C93               	goto	u10335
  4460  1491  0862               	movf	(_Temp^(0+128)+12),w
  4461  1492  025E               	subwf	(_Temp^(0+128)+8),w
  4462  1493                     u10335:	
  4463  1493  1803               	skipnc
  4464  1494  2C9C               	goto	l9245
  4465                           
  4466                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4467  1495  0863               	movf	((_Temp+1)^(0+128)+12),w
  4468  1496  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4469  1497  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4470  1498  0862               	movf	(_Temp^(0+128)+12),w
  4471  1499  01DE               	clrf	(_Temp^(0+128)+8)
  4472  149A  07DE               	addwf	(_Temp^(0+128)+8),f
  4473                           
  4474                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4475  149B  0008               	return
  4476  149C                     l9245:	
  4477  149C  0863               	movf	((_Temp+1)^(0+128)+12),w
  4478  149D  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4479  149E  1D03               	skipz
  4480  149F  2CA2               	goto	u10345
  4481  14A0  0862               	movf	(_Temp^(0+128)+12),w
  4482  14A1  0260               	subwf	(_Temp^(0+128)+10),w
  4483  14A2                     u10345:	
  4484  14A2  1803               	skipnc
  4485  14A3  0008               	return
  4486                           
  4487                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4488  14A4  0863               	movf	((_Temp+1)^(0+128)+12),w
  4489  14A5  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4490  14A6  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4491  14A7  0862               	movf	(_Temp^(0+128)+12),w
  4492  14A8  01E0               	clrf	(_Temp^(0+128)+10)
  4493  14A9  07E0               	addwf	(_Temp^(0+128)+10),f
  4494  14AA  0008               	return
  4495  14AB                     __end_of_getTemp_AD:	
  4496                           
  4497                           	psect	text4
  4498  0BBD                     __ptext4:	
  4499 ;; *************** function _getLoad_AD *****************
  4500 ;; Defined at:
  4501 ;;		line 15 in file "../src/OverLoad_B1.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  channel         1    wreg     unsigned char 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  channel         1    0[BANK0 ] unsigned char 
  4506 ;;  i               1    3[BANK0 ] unsigned char 
  4507 ;;  j               1    2[BANK0 ] unsigned char 
  4508 ;;  k               1    1[BANK0 ] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;		None               void
  4511 ;; Registers used:
  4512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;Total ram usage:        6 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    5
  4525 ;; This function calls:
  4526 ;;		_getAD
  4527 ;; This function is called by:
  4528 ;;		_main
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           
  4533                           ;psect for function _getLoad_AD
  4534  0BBD                     _getLoad_AD:	
  4535                           
  4536                           ;incstack = 0
  4537                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4538                           ;getLoad_AD@channel stored from wreg
  4539  0BBD  0020               	movlb	0	; select bank0
  4540  0BBE  00A0               	movwf	getLoad_AD@channel
  4541                           
  4542                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4543  0BBF  01A3               	clrf	getLoad_AD@i
  4544  0BC0  01A2               	clrf	getLoad_AD@j
  4545  0BC1  01A1               	clrf	getLoad_AD@k
  4546                           
  4547                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4548  0BC2  0022               	movlb	2	; select bank2
  4549  0BC3  1E2A               	btfss	_Load^(0+256),4
  4550  0BC4  0008               	return
  4551                           
  4552                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4553  0BC5  30F3               	movlw	243
  4554  0BC6  00F6               	movwf	??_getLoad_AD
  4555  0BC7  0876               	movf	??_getLoad_AD,w
  4556  0BC8  00F2               	movwf	getAD@adcon1
  4557  0BC9  0020               	movlb	0	; select bank0
  4558  0BCA  0820               	movf	getLoad_AD@channel,w
  4559  0BCB  3190  20E2  318B   	fcall	_getAD
  4560  0BCE  0873               	movf	?_getAD+1,w
  4561  0BCF  0022               	movlb	2	; select bank2
  4562  0BD0  01CC               	clrf	((_Load+1)^(0+256)+33)
  4563  0BD1  07CC               	addwf	((_Load+1)^(0+256)+33),f
  4564  0BD2  0872               	movf	?_getAD,w
  4565  0BD3  01CB               	clrf	(_Load^(0+256)+33)
  4566  0BD4  07CB               	addwf	(_Load^(0+256)+33),f
  4567                           
  4568                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4569  0BD5  0020               	movlb	0	; select bank0
  4570  0BD6  01A3               	clrf	getLoad_AD@i
  4571  0BD7  3004               	movlw	4
  4572  0BD8  0223               	subwf	getLoad_AD@i,w
  4573  0BD9  1803               	btfsc	3,0
  4574  0BDA  2C07               	goto	l9215
  4575  0BDB                     l9203:	
  4576                           
  4577                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4578  0BDB  3523               	lslf	getLoad_AD@i,w
  4579  0BDC  3E35               	addlw	(_Load+11)& (0+255)
  4580  0BDD  0086               	movwf	6
  4581  0BDE  3001               	movlw	1	; select bank2/3
  4582  0BDF  0087               	movwf	7
  4583  0BE0  3F40               	moviw [0]fsr1
  4584  0BE1  00F6               	movwf	??_getLoad_AD
  4585  0BE2  3F41               	moviw [1]fsr1
  4586  0BE3  00F7               	movwf	??_getLoad_AD+1
  4587  0BE4  0022               	movlb	2	; select bank2
  4588  0BE5  084C               	movf	((_Load+1)^(0+256)+33),w
  4589  0BE6  0277               	subwf	??_getLoad_AD+1,w
  4590  0BE7  1D03               	skipz
  4591  0BE8  2BEB               	goto	u10235
  4592  0BE9  084B               	movf	(_Load^(0+256)+33),w
  4593  0BEA  0276               	subwf	??_getLoad_AD,w
  4594  0BEB                     u10235:	
  4595  0BEB  1803               	skipnc
  4596  0BEC  2BFE               	goto	l9211
  4597  0BED  0020               	movlb	0	; select bank0
  4598  0BEE  08A2               	movf	getLoad_AD@j,f
  4599  0BEF  1D03               	skipz
  4600  0BF0  2BFE               	goto	l9211
  4601                           
  4602                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4603  0BF1  3523               	lslf	getLoad_AD@i,w
  4604  0BF2  3E35               	addlw	(_Load+11)& (0+255)
  4605  0BF3  0086               	movwf	6
  4606  0BF4  3001               	movlw	1	; select bank2/3
  4607  0BF5  0087               	movwf	7
  4608  0BF6  0022               	movlb	2	; select bank2
  4609  0BF7  084B               	movf	(_Load^(0+256)+33),w
  4610  0BF8  3FC0               	movwi [0]fsr1
  4611  0BF9  084C               	movf	((_Load+1)^(0+256)+33),w
  4612  0BFA  3FC1               	movwi [1]fsr1
  4613                           
  4614                           ;OverLoad_B1.c: 24: j = 1;
  4615  0BFB  0020               	movlb	0	; select bank0
  4616  0BFC  01A2               	clrf	getLoad_AD@j
  4617  0BFD  0AA2               	incf	getLoad_AD@j,f
  4618  0BFE                     l9211:	
  4619  0BFE  3001               	movlw	1
  4620  0BFF  00F6               	movwf	??_getLoad_AD
  4621  0C00  0876               	movf	??_getLoad_AD,w
  4622  0C01  0020               	movlb	0	; select bank0
  4623  0C02  07A3               	addwf	getLoad_AD@i,f
  4624  0C03  3004               	movlw	4
  4625  0C04  0223               	subwf	getLoad_AD@i,w
  4626  0C05  1C03               	skipc
  4627  0C06  2BDB               	goto	l9203
  4628  0C07                     l9215:	
  4629                           
  4630                           ;OverLoad_B1.c: 25: }
  4631                           ;OverLoad_B1.c: 26: }
  4632                           ;OverLoad_B1.c: 27: if (j == 0) {
  4633  0C07  08A2               	movf	getLoad_AD@j,f
  4634  0C08  1D03               	skipz
  4635  0C09  0008               	return
  4636                           
  4637                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4638  0C0A  01A3               	clrf	getLoad_AD@i
  4639  0C0B                     L1:	
  4640  0C0B  3004               	movlw	4
  4641  0C0C  0223               	subwf	getLoad_AD@i,w
  4642  0C0D  1803               	btfsc	3,0
  4643  0C0E  0008               	return
  4644                           
  4645                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4646  0C0F  3523               	lslf	getLoad_AD@i,w
  4647  0C10  3E3F               	addlw	(_Load+21)& (0+255)
  4648  0C11  0086               	movwf	6
  4649  0C12  3001               	movlw	1	; select bank2/3
  4650  0C13  0087               	movwf	7
  4651  0C14  3F40               	moviw [0]fsr1
  4652  0C15  00F6               	movwf	??_getLoad_AD
  4653  0C16  3F41               	moviw [1]fsr1
  4654  0C17  00F7               	movwf	??_getLoad_AD+1
  4655  0C18  0877               	movf	??_getLoad_AD+1,w
  4656  0C19  0022               	movlb	2	; select bank2
  4657  0C1A  024C               	subwf	((_Load+1)^(0+256)+33),w
  4658  0C1B  1D03               	skipz
  4659  0C1C  2C1F               	goto	u10285
  4660  0C1D  0876               	movf	??_getLoad_AD,w
  4661  0C1E  024B               	subwf	(_Load^(0+256)+33),w
  4662  0C1F                     u10285:	
  4663  0C1F  1803               	skipnc
  4664  0C20  2C32               	goto	l9231
  4665  0C21  0020               	movlb	0	; select bank0
  4666  0C22  08A1               	movf	getLoad_AD@k,f
  4667  0C23  1D03               	skipz
  4668  0C24  2C32               	goto	l9231
  4669                           
  4670                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4671  0C25  3523               	lslf	getLoad_AD@i,w
  4672  0C26  3E3F               	addlw	(_Load+21)& (0+255)
  4673  0C27  0086               	movwf	6
  4674  0C28  3001               	movlw	1	; select bank2/3
  4675  0C29  0087               	movwf	7
  4676  0C2A  0022               	movlb	2	; select bank2
  4677  0C2B  084B               	movf	(_Load^(0+256)+33),w
  4678  0C2C  3FC0               	movwi [0]fsr1
  4679  0C2D  084C               	movf	((_Load+1)^(0+256)+33),w
  4680  0C2E  3FC1               	movwi [1]fsr1
  4681                           
  4682                           ;OverLoad_B1.c: 31: k = 1;
  4683  0C2F  0020               	movlb	0	; select bank0
  4684  0C30  01A1               	clrf	getLoad_AD@k
  4685  0C31  0AA1               	incf	getLoad_AD@k,f
  4686  0C32                     l9231:	
  4687  0C32  3001               	movlw	1
  4688  0C33  00F6               	movwf	??_getLoad_AD
  4689  0C34  0876               	movf	??_getLoad_AD,w
  4690  0C35  0020               	movlb	0	; select bank0
  4691  0C36  07A3               	addwf	getLoad_AD@i,f
  4692  0C37  2C0B               	goto	L1
  4693  0C38                     __end_of_getLoad_AD:	
  4694                           
  4695                           	psect	text5
  4696  10E2                     __ptext5:	
  4697 ;; *************** function _getAD *****************
  4698 ;; Defined at:
  4699 ;;		line 442 in file "../src/MCU_B1.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  adcon0          1    wreg     unsigned char 
  4702 ;;  adcon1          1    2[COMMON] unsigned char 
  4703 ;; Auto vars:     Size  Location     Type
  4704 ;;  adcon0          1    5[COMMON] unsigned char 
  4705 ;; Return value:  Size  Location     Type
  4706 ;;                  2    2[COMMON] int 
  4707 ;; Registers used:
  4708 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4709 ;; Tracked objects:
  4710 ;;		On entry : 0/0
  4711 ;;		On exit  : 0/0
  4712 ;;		Unchanged: 0/0
  4713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4714 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4715 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4717 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;Total ram usage:        4 bytes
  4719 ;; Hardware stack levels used:    1
  4720 ;; Hardware stack levels required when called:    4
  4721 ;; This function calls:
  4722 ;;		_Timeout_Counter
  4723 ;;		_set_TimeoutCleared
  4724 ;; This function is called by:
  4725 ;;		_getLoad_AD
  4726 ;;		_getTemp_AD
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           
  4731                           ;psect for function _getAD
  4732  10E2                     _getAD:	
  4733                           
  4734                           ;incstack = 0
  4735                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4736                           ;getAD@adcon0 stored from wreg
  4737  10E2  00F5               	movwf	getAD@adcon0
  4738                           
  4739                           ;MCU_B1.c: 443: ADCON0 = adcon0;
  4740  10E3  0875               	movf	getAD@adcon0,w
  4741  10E4  0021               	movlb	1	; select bank1
  4742  10E5  009D               	movwf	29	;volatile
  4743                           
  4744                           ;MCU_B1.c: 444: ADCON1 = adcon1;
  4745  10E6  0872               	movf	getAD@adcon1,w
  4746  10E7  009E               	movwf	30	;volatile
  4747                           
  4748                           ;MCU_B1.c: 445: GO_nDONE = 1;
  4749  10E8  149D               	bsf	29,1	;volatile
  4750                           
  4751                           ;MCU_B1.c: 446: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4752  10E9  28ED               	goto	l8869
  4753  10EA                     l8867:	
  4754                           
  4755                           ;MCU_B1.c: 447: Timeout_Counter();
  4756  10EA  319F  27EB  3190   	fcall	_Timeout_Counter
  4757  10ED                     l8869:	
  4758  10ED  0021               	movlb	1	; select bank1
  4759  10EE  1C9D               	btfss	29,1	;volatile
  4760  10EF  28F2               	goto	l8873
  4761  10F0  1D39               	btfss	(_myMain^(0+128)+11),2
  4762  10F1  28EA               	goto	l8867
  4763  10F2                     l8873:	
  4764                           
  4765                           ;MCU_B1.c: 448: };
  4766                           ;MCU_B1.c: 449: set_TimeoutCleared();
  4767  10F2  3187  27FB         	fcall	_set_TimeoutCleared
  4768                           
  4769                           ;MCU_B1.c: 450: return ((ADRESH*256)+ADRESL);
  4770  10F4  0021               	movlb	1	; select bank1
  4771  10F5  081C               	movf	28,w	;volatile
  4772  10F6  01F3               	clrf	?_getAD+1
  4773  10F7  07F3               	addwf	?_getAD+1,f
  4774  10F8  081B               	movf	27,w	;volatile
  4775  10F9  01F2               	clrf	?_getAD
  4776  10FA  07F2               	addwf	?_getAD,f
  4777  10FB  0008               	return
  4778  10FC                     __end_of_getAD:	
  4779                           
  4780                           	psect	text6
  4781  1ED0                     __ptext6:	
  4782 ;; *************** function _WDT_Main *****************
  4783 ;; Defined at:
  4784 ;;		line 1086 in file "../src/MCU_B1.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;		None               void
  4791 ;; Registers used:
  4792 ;;		wreg, status,2, status,0, pclath, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4800 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;Total ram usage:        1 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:    4
  4805 ;; This function calls:
  4806 ;;		_WDT_Clearing
  4807 ;; This function is called by:
  4808 ;;		_main
  4809 ;; This function uses a non-reentrant model
  4810 ;;
  4811                           
  4812                           
  4813                           ;psect for function _WDT_Main
  4814  1ED0                     _WDT_Main:	
  4815                           
  4816                           ;MCU_B1.c: 1087: if (WDT.Enable == 1) {
  4817                           
  4818                           ;incstack = 0
  4819                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4820  1ED0  0022               	movlb	2	; select bank2
  4821  1ED1  1C28               	btfss	_WDT^(0+256),0
  4822  1ED2  0008               	return
  4823                           
  4824                           ;MCU_B1.c: 1088: if (WDT.Timer-- > 0) {
  4825  1ED3  3001               	movlw	1
  4826  1ED4  02A9               	subwf	(_WDT^(0+256)+1),f
  4827  1ED5  0829               	movf	(_WDT^(0+256)+1),w
  4828  1ED6  3AFF               	xorlw	255
  4829  1ED7  1903               	skipnz
  4830  1ED8  0008               	return
  4831                           
  4832                           ;MCU_B1.c: 1089: WDT.Timer = 100;
  4833  1ED9  3064               	movlw	100
  4834  1EDA  00F2               	movwf	??_WDT_Main
  4835  1EDB  0872               	movf	??_WDT_Main,w
  4836  1EDC  00A9               	movwf	(_WDT^(0+256)+1)
  4837                           
  4838                           ;MCU_B1.c: 1090: WDT_Clearing();
  4839  1EDD  3180  2002         	fcall	_WDT_Clearing
  4840  1EDF  0008               	return
  4841  1EE0                     __end_of_WDT_Main:	
  4842                           
  4843                           	psect	text7
  4844  0002                     __ptext7:	
  4845 ;; *************** function _WDT_Clearing *****************
  4846 ;; Defined at:
  4847 ;;		line 1096 in file "../src/MCU_B1.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;		None
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;		None
  4852 ;; Return value:  Size  Location     Type
  4853 ;;		None               void
  4854 ;; Registers used:
  4855 ;;		None
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4865 ;;Total ram usage:        0 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    3
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_WDT_Main
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           
  4876                           ;psect for function _WDT_Clearing
  4877  0002                     _WDT_Clearing:	
  4878                           
  4879                           ;incstack = 0
  4880                           ; Regs used in _WDT_Clearing: []
  4881  0002  0064               	clrwdt	;# 
  4882  0003  0008               	return
  4883  0004                     __end_of_WDT_Clearing:	
  4884                           
  4885                           	psect	text8
  4886  1066                     __ptext8:	
  4887 ;; *************** function _Temp_Main *****************
  4888 ;; Defined at:
  4889 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;		None
  4894 ;; Return value:  Size  Location     Type
  4895 ;;		None               void
  4896 ;; Registers used:
  4897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;Total ram usage:        0 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    6
  4910 ;; This function calls:
  4911 ;;		_setTemp_Main
  4912 ;; This function is called by:
  4913 ;;		_main
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           
  4918                           ;psect for function _Temp_Main
  4919  1066                     _Temp_Main:	
  4920                           
  4921                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4925  1066  318D  25E6         	fcall	_setTemp_Main
  4926  1068  0008               	return
  4927  1069                     __end_of_Temp_Main:	
  4928                           
  4929                           	psect	text9
  4930  0DE6                     __ptext9:	
  4931 ;; *************** function _setTemp_Main *****************
  4932 ;; Defined at:
  4933 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;		None
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;  error           1   64[BANK0 ] unsigned char 
  4938 ;; Return value:  Size  Location     Type
  4939 ;;		None               void
  4940 ;; Registers used:
  4941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;Total ram usage:        3 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    5
  4954 ;; This function calls:
  4955 ;;		_getMain_All_Error_Status
  4956 ;;		_setBuz
  4957 ;;		_setProductData
  4958 ;; This function is called by:
  4959 ;;		_Temp_Main
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _setTemp_Main
  4965  0DE6                     _setTemp_Main:	
  4966                           
  4967                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4971  0DE6  3000               	movlw	0
  4972  0DE7  3192  22CF  318D   	fcall	_getMain_All_Error_Status
  4973  0DEA  0020               	movlb	0	; select bank0
  4974  0DEB  00DE               	movwf	??_setTemp_Main
  4975  0DEC  085E               	movf	??_setTemp_Main,w
  4976  0DED  00E0               	movwf	setTemp_Main@error
  4977                           
  4978                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4979  0DEE  0021               	movlb	1	; select bank1
  4980  0DEF  1C56               	btfss	_Temp^(0+128),0
  4981  0DF0  2E92               	goto	l1773
  4982                           
  4983                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4984  0DF1  1956               	btfsc	_Temp^(0+128),2
  4985  0DF2  2E02               	goto	l8891
  4986                           
  4987                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4988  0DF3  3001               	movlw	1
  4989  0DF4  07D7               	addwf	(_Temp^(0+128)+1),f
  4990  0DF5  3000               	movlw	0
  4991  0DF6  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4992                           
  4993                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  4994  0DF7  3000               	movlw	0
  4995  0DF8  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4996  0DF9  30FA               	movlw	250
  4997  0DFA  1903               	skipnz
  4998  0DFB  0257               	subwf	(_Temp^(0+128)+1),w
  4999  0DFC  1C03               	skipc
  5000  0DFD  0008               	return
  5001                           
  5002                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5003  0DFE  01D7               	clrf	(_Temp^(0+128)+1)
  5004  0DFF  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5005                           
  5006                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5007  0E00  1556               	bsf	_Temp^(0+128),2
  5008                           
  5009                           ;OverTemperature_B1.c: 70: }
  5010                           ;OverTemperature_B1.c: 71: } else {
  5011  0E01  0008               	return
  5012  0E02                     l8891:	
  5013                           
  5014                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5015  0E02  3001               	movlw	1
  5016  0E03  07D7               	addwf	(_Temp^(0+128)+1),f
  5017  0E04  3000               	movlw	0
  5018  0E05  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5019                           
  5020                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5021  0E06  3000               	movlw	0
  5022  0E07  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5023  0E08  3002               	movlw	2
  5024  0E09  1903               	skipnz
  5025  0E0A  0257               	subwf	(_Temp^(0+128)+1),w
  5026  0E0B  1C03               	skipc
  5027  0E0C  0008               	return
  5028                           
  5029                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5030  0E0D  01D7               	clrf	(_Temp^(0+128)+1)
  5031  0E0E  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5032                           
  5033                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5034  0E0F  3008               	movlw	8
  5035  0E10  3ED6               	addlw	_Temp& (0+255)
  5036  0E11  0086               	movwf	6
  5037  0E12  0187               	clrf	7
  5038  0E13  0016               	moviw fsr1++
  5039  0E14  0401               	iorwf	1,w
  5040  0E15  1903               	skipnz
  5041  0E16  2E8C               	goto	l1778
  5042  0E17  300A               	movlw	10
  5043  0E18  3ED6               	addlw	_Temp& (0+255)
  5044  0E19  0086               	movwf	6
  5045  0E1A  0187               	clrf	7
  5046  0E1B  0016               	moviw fsr1++
  5047  0E1C  0401               	iorwf	1,w
  5048  0E1D  1903               	skipnz
  5049  0E1E  2E8C               	goto	l1778
  5050                           
  5051                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5052  0E1F  1156               	bcf	_Temp^(0+128),2
  5053                           
  5054                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5055  0E20  300A               	movlw	10
  5056  0E21  3ED6               	addlw	_Temp& (0+255)
  5057  0E22  0086               	movwf	6
  5058  0E23  0187               	clrf	7
  5059  0E24  3008               	movlw	8
  5060  0E25  3ED6               	addlw	_Temp& (0+255)
  5061  0E26  0084               	movwf	4
  5062  0E27  0185               	clrf	5
  5063  0E28  3F40               	moviw [0]fsr1
  5064  0E29  0700               	addwf	0,w
  5065  0E2A  0020               	movlb	0	; select bank0
  5066  0E2B  00DE               	movwf	??_setTemp_Main
  5067  0E2C  3101               	addfsr 0,1
  5068  0E2D  3F41               	moviw [1]fsr1
  5069  0E2E  3D00               	addwfc	0,w
  5070  0E2F  00DF               	movwf	??_setTemp_Main+1
  5071  0E30  36DF               	lsrf	??_setTemp_Main+1,f
  5072  0E31  0CDE               	rrf	??_setTemp_Main,f
  5073  0E32  085E               	movf	??_setTemp_Main,w
  5074  0E33  0021               	movlb	1	; select bank1
  5075  0E34  00DC               	movwf	(_Temp^(0+128)+6)
  5076  0E35  0020               	movlb	0	; select bank0
  5077  0E36  085F               	movf	??_setTemp_Main+1,w
  5078  0E37  0021               	movlb	1	; select bank1
  5079  0E38  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5080                           
  5081                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 400;
  5082  0E39  3090               	movlw	144
  5083  0E3A  00E4               	movwf	(_Temp^(0+128)+14)
  5084  0E3B  3001               	movlw	1
  5085  0E3C  00E5               	movwf	(_Temp^(0+128)+15)
  5086                           
  5087                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 345;
  5088  0E3D  3059               	movlw	89
  5089  0E3E  00E6               	movwf	(_Temp^(0+128)+16)
  5090  0E3F  3001               	movlw	1
  5091  0E40  00E7               	movwf	(_Temp^(0+128)+17)
  5092                           
  5093                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5094  0E41  1CD6               	btfss	_Temp^(0+128),1
  5095  0E42  2E63               	goto	l8923
  5096                           
  5097                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5098  0E43  0865               	movf	((_Temp+1)^(0+128)+14),w
  5099  0E44  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5100  0E45  1D03               	skipz
  5101  0E46  2E49               	goto	u9755
  5102  0E47  0864               	movf	(_Temp^(0+128)+14),w
  5103  0E48  025C               	subwf	(_Temp^(0+128)+6),w
  5104  0E49                     u9755:	
  5105  0E49  1C03               	skipc
  5106  0E4A  2E61               	goto	l8921
  5107                           
  5108                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5109  0E4B  3001               	movlw	1
  5110  0E4C  0020               	movlb	0	; select bank0
  5111  0E4D  00DE               	movwf	??_setTemp_Main
  5112  0E4E  085E               	movf	??_setTemp_Main,w
  5113  0E4F  0021               	movlb	1	; select bank1
  5114  0E50  07D9               	addwf	(_Temp^(0+128)+3),f
  5115                           
  5116                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5117  0E51  3003               	movlw	3
  5118  0E52  0259               	subwf	(_Temp^(0+128)+3),w
  5119  0E53  1C03               	skipc
  5120  0E54  2E79               	goto	l8935
  5121                           
  5122                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5123  0E55  01D9               	clrf	(_Temp^(0+128)+3)
  5124                           
  5125                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5126  0E56  10D6               	bcf	_Temp^(0+128),1
  5127                           
  5128                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5129  0E57  3064               	movlw	100
  5130  0E58  0020               	movlb	0	; select bank0
  5131  0E59  00A4               	movwf	setBuz@time
  5132  0E5A  3000               	movlw	0
  5133  0E5B  00A5               	movwf	setBuz@time+1
  5134  0E5C  3002               	movlw	2
  5135  0E5D  3196  269F  318D   	fcall	_setBuz
  5136                           
  5137                           ;OverTemperature_B1.c: 103: }
  5138                           ;OverTemperature_B1.c: 104: } else {
  5139  0E60  2E79               	goto	l8935
  5140  0E61                     l8921:	
  5141                           
  5142                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5143  0E61  0021               	movlb	1	; select bank1
  5144  0E62  2E78               	goto	l8933
  5145  0E63                     l8923:	
  5146                           ;OverTemperature_B1.c: 106: }
  5147                           ;OverTemperature_B1.c: 107: } else {
  5148                           
  5149                           
  5150                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5151  0E63  085D               	movf	((_Temp+1)^(0+128)+6),w
  5152  0E64  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5153  0E65  1D03               	skipz
  5154  0E66  2E69               	goto	u9775
  5155  0E67  085C               	movf	(_Temp^(0+128)+6),w
  5156  0E68  0266               	subwf	(_Temp^(0+128)+16),w
  5157  0E69                     u9775:	
  5158  0E69  1C03               	skipc
  5159  0E6A  2E78               	goto	l8933
  5160                           
  5161                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5162  0E6B  3001               	movlw	1
  5163  0E6C  0020               	movlb	0	; select bank0
  5164  0E6D  00DE               	movwf	??_setTemp_Main
  5165  0E6E  085E               	movf	??_setTemp_Main,w
  5166  0E6F  0021               	movlb	1	; select bank1
  5167  0E70  07D9               	addwf	(_Temp^(0+128)+3),f
  5168                           
  5169                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5170  0E71  3003               	movlw	3
  5171  0E72  0259               	subwf	(_Temp^(0+128)+3),w
  5172  0E73  1C03               	skipc
  5173  0E74  2E79               	goto	l8935
  5174                           
  5175                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5176  0E75  01D9               	clrf	(_Temp^(0+128)+3)
  5177                           
  5178                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5179  0E76  14D6               	bsf	_Temp^(0+128),1
  5180                           
  5181                           ;OverTemperature_B1.c: 113: }
  5182                           ;OverTemperature_B1.c: 114: } else {
  5183  0E77  2E79               	goto	l8935
  5184  0E78                     l8933:	
  5185                           
  5186                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5187  0E78  01D9               	clrf	(_Temp^(0+128)+3)
  5188  0E79                     l8935:	
  5189                           
  5190                           ;OverTemperature_B1.c: 116: }
  5191                           ;OverTemperature_B1.c: 117: }
  5192                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5193  0E79  0021               	movlb	1	; select bank1
  5194  0E7A  085D               	movf	((_Temp+1)^(0+128)+6),w
  5195  0E7B  0020               	movlb	0	; select bank0
  5196  0E7C  00DE               	movwf	??_setTemp_Main
  5197  0E7D  085E               	movf	??_setTemp_Main,w
  5198  0E7E  00DA               	movwf	setProductData@value
  5199  0E7F  3018               	movlw	24
  5200  0E80  319E  2618  318D   	fcall	_setProductData
  5201                           
  5202                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5203  0E83  0021               	movlb	1	; select bank1
  5204  0E84  085C               	movf	(_Temp^(0+128)+6),w
  5205  0E85  0020               	movlb	0	; select bank0
  5206  0E86  00DE               	movwf	??_setTemp_Main
  5207  0E87  085E               	movf	??_setTemp_Main,w
  5208  0E88  00DA               	movwf	setProductData@value
  5209  0E89  3019               	movlw	25
  5210  0E8A  319E  2618         	fcall	_setProductData
  5211  0E8C                     l1778:	
  5212                           
  5213                           ;OverTemperature_B1.c: 135: }
  5214                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5215  0E8C  0021               	movlb	1	; select bank1
  5216  0E8D  01DE               	clrf	(_Temp^(0+128)+8)
  5217  0E8E  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5218                           
  5219                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5220  0E8F  01E0               	clrf	(_Temp^(0+128)+10)
  5221  0E90  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5222                           
  5223                           ;OverTemperature_B1.c: 138: }
  5224                           ;OverTemperature_B1.c: 139: }
  5225                           ;OverTemperature_B1.c: 141: } else {
  5226  0E91  0008               	return
  5227  0E92                     l1773:	
  5228                           
  5229                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5230  0E92  1C2E               	btfss	_myMain^(0+128),0
  5231  0E93  0008               	return
  5232                           
  5233                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5234  0E94  1456               	bsf	_Temp^(0+128),0
  5235  0E95  0008               	return
  5236  0E96                     __end_of_setTemp_Main:	
  5237                           
  5238                           	psect	text10
  5239  1CC5                     __ptext10:	
  5240 ;; *************** function _Temp_Initialization *****************
  5241 ;; Defined at:
  5242 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;		None
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;		None               void
  5249 ;; Registers used:
  5250 ;;		status,2, status,0, pclath, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5260 ;;Total ram usage:        0 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    4
  5263 ;; This function calls:
  5264 ;;		_setTemp_Initialization
  5265 ;; This function is called by:
  5266 ;;		_main
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           
  5271                           ;psect for function _Temp_Initialization
  5272  1CC5                     _Temp_Initialization:	
  5273                           
  5274                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5275                           
  5276                           ;incstack = 0
  5277                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5278  1CC5  319C  24B8         	fcall	_setTemp_Initialization
  5279  1CC7  0008               	return
  5280  1CC8                     __end_of_Temp_Initialization:	
  5281                           
  5282                           	psect	text11
  5283  1CB8                     __ptext11:	
  5284 ;; *************** function _setTemp_Initialization *****************
  5285 ;; Defined at:
  5286 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;		None
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;		None
  5291 ;; Return value:  Size  Location     Type
  5292 ;;		None               void
  5293 ;; Registers used:
  5294 ;;		None
  5295 ;; Tracked objects:
  5296 ;;		On entry : 0/0
  5297 ;;		On exit  : 0/0
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;Total ram usage:        0 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    3
  5307 ;; This function calls:
  5308 ;;		Nothing
  5309 ;; This function is called by:
  5310 ;;		_Temp_Initialization
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           
  5315                           ;psect for function _setTemp_Initialization
  5316  1CB8                     _setTemp_Initialization:	
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _setTemp_Initialization: []
  5320  1CB8  0008               	return
  5321  1CB9                     __end_of_setTemp_Initialization:	
  5322                           
  5323                           	psect	text12
  5324  1D20                     __ptext12:	
  5325 ;; *************** function _Switch_Main *****************
  5326 ;; Defined at:
  5327 ;;		line 72 in file "../src/Switch_B1.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;		None
  5332 ;; Return value:  Size  Location     Type
  5333 ;;		None               void
  5334 ;; Registers used:
  5335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5345 ;;Total ram usage:        0 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    7
  5348 ;; This function calls:
  5349 ;;		_TouchPower
  5350 ;;		_setSw_Main
  5351 ;; This function is called by:
  5352 ;;		_main
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           
  5357                           ;psect for function _Switch_Main
  5358  1D20                     _Switch_Main:	
  5359                           
  5360                           ;Switch_B1.c: 75: setSw_Main(1);
  5361                           
  5362                           ;incstack = 0
  5363                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5364  1D20  3001               	movlw	1
  5365  1D21  3181  21E5  319D   	fcall	_setSw_Main
  5366                           
  5367                           ;Switch_B1.c: 87: TouchPower();
  5368  1D24  3190  2069         	fcall	_TouchPower
  5369  1D26  0008               	return
  5370  1D27                     __end_of_Switch_Main:	
  5371                           
  5372                           	psect	text13
  5373  01E5                     __ptext13:	
  5374 ;; *************** function _setSw_Main *****************
  5375 ;; Defined at:
  5376 ;;		line 121 in file "../src/Switch_B1.c"
  5377 ;; Parameters:    Size  Location     Type
  5378 ;;  sw              1    wreg     unsigned char 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  sw              1    9[COMMON] unsigned char 
  5381 ;; Return value:  Size  Location     Type
  5382 ;;		None               void
  5383 ;; Registers used:
  5384 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;Total ram usage:        3 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:    6
  5397 ;; This function calls:
  5398 ;;		_SwPointSelect
  5399 ;;		_getMain_All_Error_Status
  5400 ;;		_getSw_KeyStatus
  5401 ;;		_setBuz
  5402 ;;		_setDimmerLights_DimmingOn
  5403 ;;		_setDimmerLights_SwOff
  5404 ;;		_setDimmerLights_SwOn
  5405 ;;		_setRF_Learn
  5406 ;; This function is called by:
  5407 ;;		_Switch_Main
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           
  5412                           ;psect for function _setSw_Main
  5413  01E5                     _setSw_Main:	
  5414                           
  5415                           ;incstack = 0
  5416                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5417                           ;setSw_Main@sw stored from wreg
  5418  01E5  00F9               	movwf	setSw_Main@sw
  5419                           
  5420                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5421  01E6  0879               	movf	setSw_Main@sw,w
  5422  01E7  319D  258D  3181   	fcall	_SwPointSelect
  5423                           
  5424                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5425  01EA  087B               	movf	_Sw,w
  5426  01EB  0086               	movwf	6
  5427  01EC  3001               	movlw	1	; select bank2/3
  5428  01ED  0087               	movwf	7
  5429  01EE  1C01               	btfss	1,0
  5430  01EF  2B49               	goto	l2467
  5431                           
  5432                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5433  01F0  3000               	movlw	0
  5434  01F1  3192  22CF  3181   	fcall	_getMain_All_Error_Status
  5435  01F4  3800               	iorlw	0
  5436  01F5  1D03               	skipz
  5437  01F6  2A11               	goto	l9043
  5438                           
  5439                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5440  01F7  0A7B               	incf	_Sw,w
  5441  01F8  0086               	movwf	6
  5442  01F9  3001               	movlw	1	; select bank2/3
  5443  01FA  0087               	movwf	7
  5444  01FB  1081               	bcf	1,1
  5445                           
  5446                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5447  01FC  0879               	movf	setSw_Main@sw,w
  5448  01FD  319F  2702  3181   	fcall	_getSw_KeyStatus
  5449  0200  3A01               	xorlw	1
  5450  0201  3000               	movlw	0
  5451  0202  1903               	skipnz
  5452  0203  3001               	movlw	1
  5453  0204  0020               	movlb	0	; select bank0
  5454  0205  00A8               	movwf	??_setSw_Main
  5455  0206  087B               	movf	_Sw,w
  5456  0207  0086               	movwf	6
  5457  0208  3001               	movlw	1	; select bank2/3
  5458  0209  0087               	movwf	7
  5459  020A  0DA8               	rlf	??_setSw_Main,f
  5460  020B  0801               	movf	1,w
  5461  020C  0628               	xorwf	??_setSw_Main,w
  5462  020D  39FD               	andlw	-3
  5463  020E  0628               	xorwf	??_setSw_Main,w
  5464  020F  0081               	movwf	1
  5465                           
  5466                           ;Switch_B1.c: 128: } else {
  5467  0210  2A26               	goto	l2469
  5468  0211                     l9043:	
  5469                           
  5470                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5471  0211  0A7B               	incf	_Sw,w
  5472  0212  0086               	movwf	6
  5473  0213  3001               	movlw	1	; select bank2/3
  5474  0214  0087               	movwf	7
  5475  0215  1881               	btfsc	1,1
  5476  0216  2A26               	goto	l2469
  5477                           
  5478                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5479  0217  0A7B               	incf	_Sw,w
  5480  0218  0086               	movwf	6
  5481  0219  3001               	movlw	1	; select bank2/3
  5482  021A  0087               	movwf	7
  5483  021B  1481               	bsf	1,1
  5484                           
  5485                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5486  021C  087B               	movf	_Sw,w
  5487  021D  0086               	movwf	6
  5488  021E  3001               	movlw	1	; select bank2/3
  5489  021F  0087               	movwf	7
  5490  0220  1081               	bcf	1,1
  5491                           
  5492                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5493  0221  087B               	movf	_Sw,w
  5494  0222  0086               	movwf	6
  5495  0223  3001               	movlw	1	; select bank2/3
  5496  0224  0087               	movwf	7
  5497  0225  1501               	bsf	1,2
  5498  0226                     l2469:	
  5499                           
  5500                           ;Switch_B1.c: 134: }
  5501                           ;Switch_B1.c: 135: }
  5502                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5503  0226  087B               	movf	_Sw,w
  5504  0227  0086               	movwf	6
  5505  0228  3001               	movlw	1	; select bank2/3
  5506  0229  0087               	movwf	7
  5507  022A  1C81               	btfss	1,1
  5508  022B  2AF6               	goto	l9093
  5509                           
  5510                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5511  022C  087B               	movf	_Sw,w
  5512  022D  0086               	movwf	6
  5513  022E  3001               	movlw	1	; select bank2/3
  5514  022F  0087               	movwf	7
  5515  0230  1901               	btfsc	1,2
  5516  0231  2A54               	goto	l9059
  5517                           
  5518                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5519  0232  3001               	movlw	1
  5520  0233  0020               	movlb	0	; select bank0
  5521  0234  00A8               	movwf	??_setSw_Main
  5522  0235  087B               	movf	_Sw,w
  5523  0236  3E02               	addlw	2
  5524  0237  0086               	movwf	6
  5525  0238  3001               	movlw	1	; select bank2/3
  5526  0239  0087               	movwf	7
  5527  023A  0828               	movf	??_setSw_Main,w
  5528  023B  0781               	addwf	1,f
  5529                           
  5530                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5531  023C  087B               	movf	_Sw,w
  5532  023D  3E02               	addlw	2
  5533  023E  0086               	movwf	6
  5534  023F  3001               	movlw	1	; select bank2/3
  5535  0240  0087               	movwf	7
  5536  0241  3003               	movlw	3
  5537  0242  0201               	subwf	1,w
  5538  0243  1C03               	skipc
  5539  0244  0008               	return
  5540                           
  5541                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5542  0245  087B               	movf	_Sw,w
  5543  0246  3E02               	addlw	2
  5544  0247  0086               	movwf	6
  5545  0248  3001               	movlw	1	; select bank2/3
  5546  0249  0087               	movwf	7
  5547  024A  0181               	clrf	1
  5548                           
  5549                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5550  024B  087B               	movf	_Sw,w
  5551  024C  0086               	movwf	6
  5552  024D  3001               	movlw	1	; select bank2/3
  5553  024E  0087               	movwf	7
  5554  024F  1501               	bsf	1,2
  5555                           
  5556                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5557  0250  0879               	movf	setSw_Main@sw,w
  5558  0251  3193  2397         	fcall	_setDimmerLights_SwOn
  5559                           
  5560                           ;Switch_B1.c: 148: }
  5561                           ;Switch_B1.c: 149: } else {
  5562  0253  0008               	return
  5563  0254                     l9059:	
  5564                           
  5565                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5566  0254  087B               	movf	_Sw,w
  5567  0255  0086               	movwf	6
  5568  0256  3001               	movlw	1	; select bank2/3
  5569  0257  0087               	movwf	7
  5570  0258  1981               	btfsc	1,3
  5571  0259  2A86               	goto	l9069
  5572                           
  5573                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5574  025A  087B               	movf	_Sw,w
  5575  025B  3E03               	addlw	3
  5576  025C  0086               	movwf	6
  5577  025D  3001               	movlw	1	; select bank2/3
  5578  025E  0087               	movwf	7
  5579  025F  3001               	movlw	1
  5580  0260  0781               	addwf	1,f
  5581  0261  3141               	addfsr 1,1
  5582  0262  1803               	skipnc
  5583  0263  0A81               	incf	1,f
  5584                           
  5585                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5586  0264  087B               	movf	_Sw,w
  5587  0265  3E03               	addlw	3
  5588  0266  0086               	movwf	6
  5589  0267  3001               	movlw	1	; select bank2/3
  5590  0268  0087               	movwf	7
  5591  0269  3F40               	moviw [0]fsr1
  5592  026A  0020               	movlb	0	; select bank0
  5593  026B  00A8               	movwf	??_setSw_Main
  5594  026C  3F41               	moviw [1]fsr1
  5595  026D  00A9               	movwf	??_setSw_Main+1
  5596  026E  3000               	movlw	0
  5597  026F  0229               	subwf	??_setSw_Main+1,w
  5598  0270  304B               	movlw	75
  5599  0271  1903               	skipnz
  5600  0272  0228               	subwf	??_setSw_Main,w
  5601  0273  1C03               	skipc
  5602  0274  0008               	return
  5603                           
  5604                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5605  0275  087B               	movf	_Sw,w
  5606  0276  3E03               	addlw	3
  5607  0277  0086               	movwf	6
  5608  0278  3001               	movlw	1	; select bank2/3
  5609  0279  0087               	movwf	7
  5610  027A  3000               	movlw	0
  5611  027B  3FC0               	movwi [0]fsr1
  5612  027C  3FC1               	movwi [1]fsr1
  5613                           
  5614                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5615  027D  087B               	movf	_Sw,w
  5616  027E  0086               	movwf	6
  5617  027F  3001               	movlw	1	; select bank2/3
  5618  0280  0087               	movwf	7
  5619  0281  1581               	bsf	1,3
  5620                           
  5621                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5622  0282  0879               	movf	setSw_Main@sw,w
  5623  0283  3192  2254         	fcall	_setDimmerLights_DimmingOn
  5624                           
  5625                           ;Switch_B1.c: 160: }
  5626                           ;Switch_B1.c: 161: } else {
  5627  0285  0008               	return
  5628  0286                     l9069:	
  5629                           
  5630                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5631  0286  087B               	movf	_Sw,w
  5632  0287  0086               	movwf	6
  5633  0288  3001               	movlw	1	; select bank2/3
  5634  0289  0087               	movwf	7
  5635  028A  1A01               	btfsc	1,4
  5636  028B  2AC4               	goto	l9083
  5637                           
  5638                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5639  028C  087B               	movf	_Sw,w
  5640  028D  3E05               	addlw	5
  5641  028E  0086               	movwf	6
  5642  028F  3001               	movlw	1	; select bank2/3
  5643  0290  0087               	movwf	7
  5644  0291  3001               	movlw	1
  5645  0292  0781               	addwf	1,f
  5646  0293  3141               	addfsr 1,1
  5647  0294  1803               	skipnc
  5648  0295  0A81               	incf	1,f
  5649                           
  5650                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5651  0296  087B               	movf	_Sw,w
  5652  0297  3E05               	addlw	5
  5653  0298  0086               	movwf	6
  5654  0299  3001               	movlw	1	; select bank2/3
  5655  029A  0087               	movwf	7
  5656  029B  3F40               	moviw [0]fsr1
  5657  029C  0020               	movlb	0	; select bank0
  5658  029D  00A8               	movwf	??_setSw_Main
  5659  029E  3F41               	moviw [1]fsr1
  5660  029F  00A9               	movwf	??_setSw_Main+1
  5661  02A0  3000               	movlw	0
  5662  02A1  0229               	subwf	??_setSw_Main+1,w
  5663  02A2  304B               	movlw	75
  5664  02A3  1903               	skipnz
  5665  02A4  0228               	subwf	??_setSw_Main,w
  5666  02A5  1C03               	skipc
  5667  02A6  0008               	return
  5668                           
  5669                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5670  02A7  087B               	movf	_Sw,w
  5671  02A8  3E05               	addlw	5
  5672  02A9  0086               	movwf	6
  5673  02AA  3001               	movlw	1	; select bank2/3
  5674  02AB  0087               	movwf	7
  5675  02AC  3000               	movlw	0
  5676  02AD  3FC0               	movwi [0]fsr1
  5677  02AE  3FC1               	movwi [1]fsr1
  5678                           
  5679                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5680  02AF  087B               	movf	_Sw,w
  5681  02B0  0086               	movwf	6
  5682  02B1  3001               	movlw	1	; select bank2/3
  5683  02B2  0087               	movwf	7
  5684  02B3  1601               	bsf	1,4
  5685                           
  5686                           ;Switch_B1.c: 169: setRF_Learn(1);
  5687  02B4  3001               	movlw	1
  5688  02B5  319F  2713  3181   	fcall	_setRF_Learn
  5689                           
  5690                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5691  02B8  0021               	movlb	1	; select bank1
  5692  02B9  1EAE               	btfss	_myMain^(0+128),5
  5693  02BA  0008               	return
  5694                           
  5695                           ;Switch_B1.c: 171: setBuz(2, 100);
  5696  02BB  3064               	movlw	100
  5697  02BC  0020               	movlb	0	; select bank0
  5698  02BD  00A4               	movwf	setBuz@time
  5699  02BE  3000               	movlw	0
  5700  02BF  00A5               	movwf	setBuz@time+1
  5701  02C0  3002               	movlw	2
  5702  02C1  3196  269F         	fcall	_setBuz
  5703                           
  5704                           ;Switch_B1.c: 172: }
  5705                           ;Switch_B1.c: 176: }
  5706                           ;Switch_B1.c: 177: } else {
  5707  02C3  0008               	return
  5708  02C4                     l9083:	
  5709                           
  5710                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5711  02C4  087B               	movf	_Sw,w
  5712  02C5  0086               	movwf	6
  5713  02C6  3001               	movlw	1	; select bank2/3
  5714  02C7  0087               	movwf	7
  5715  02C8  1A81               	btfsc	1,5
  5716  02C9  0008               	return
  5717                           
  5718                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5719  02CA  087B               	movf	_Sw,w
  5720  02CB  3E07               	addlw	7
  5721  02CC  0086               	movwf	6
  5722  02CD  3001               	movlw	1	; select bank2/3
  5723  02CE  0087               	movwf	7
  5724  02CF  3001               	movlw	1
  5725  02D0  0781               	addwf	1,f
  5726  02D1  3141               	addfsr 1,1
  5727  02D2  1803               	skipnc
  5728  02D3  0A81               	incf	1,f
  5729                           
  5730                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5731  02D4  087B               	movf	_Sw,w
  5732  02D5  3E07               	addlw	7
  5733  02D6  0086               	movwf	6
  5734  02D7  3001               	movlw	1	; select bank2/3
  5735  02D8  0087               	movwf	7
  5736  02D9  3F40               	moviw [0]fsr1
  5737  02DA  0020               	movlb	0	; select bank0
  5738  02DB  00A8               	movwf	??_setSw_Main
  5739  02DC  3F41               	moviw [1]fsr1
  5740  02DD  00A9               	movwf	??_setSw_Main+1
  5741  02DE  3000               	movlw	0
  5742  02DF  0229               	subwf	??_setSw_Main+1,w
  5743  02E0  3096               	movlw	150
  5744  02E1  1903               	skipnz
  5745  02E2  0228               	subwf	??_setSw_Main,w
  5746  02E3  1C03               	skipc
  5747  02E4  0008               	return
  5748                           
  5749                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5750  02E5  087B               	movf	_Sw,w
  5751  02E6  3E07               	addlw	7
  5752  02E7  0086               	movwf	6
  5753  02E8  3001               	movlw	1	; select bank2/3
  5754  02E9  0087               	movwf	7
  5755  02EA  3000               	movlw	0
  5756  02EB  3FC0               	movwi [0]fsr1
  5757  02EC  3FC1               	movwi [1]fsr1
  5758                           
  5759                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5760  02ED  087B               	movf	_Sw,w
  5761  02EE  0086               	movwf	6
  5762  02EF  3001               	movlw	1	; select bank2/3
  5763  02F0  0087               	movwf	7
  5764  02F1  1681               	bsf	1,5
  5765                           
  5766                           ;Switch_B1.c: 185: setRF_Learn(0);
  5767  02F2  3000               	movlw	0
  5768  02F3  319F  2713         	fcall	_setRF_Learn
  5769                           
  5770                           ;Switch_B1.c: 188: }
  5771                           ;Switch_B1.c: 189: }
  5772                           ;Switch_B1.c: 190: }
  5773                           ;Switch_B1.c: 191: }
  5774                           ;Switch_B1.c: 192: }
  5775                           ;Switch_B1.c: 193: } else {
  5776  02F5  0008               	return
  5777  02F6                     l9093:	
  5778                           
  5779                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5780  02F6  087B               	movf	_Sw,w
  5781  02F7  0086               	movwf	6
  5782  02F8  3001               	movlw	1	; select bank2/3
  5783  02F9  0087               	movwf	7
  5784  02FA  1D01               	btfss	1,2
  5785  02FB  0008               	return
  5786                           
  5787                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5788  02FC  3001               	movlw	1
  5789  02FD  0020               	movlb	0	; select bank0
  5790  02FE  00A8               	movwf	??_setSw_Main
  5791  02FF  087B               	movf	_Sw,w
  5792  0300  3E02               	addlw	2
  5793  0301  0086               	movwf	6
  5794  0302  3001               	movlw	1	; select bank2/3
  5795  0303  0087               	movwf	7
  5796  0304  0828               	movf	??_setSw_Main,w
  5797  0305  0781               	addwf	1,f
  5798                           
  5799                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5800  0306  087B               	movf	_Sw,w
  5801  0307  3E02               	addlw	2
  5802  0308  0086               	movwf	6
  5803  0309  3001               	movlw	1	; select bank2/3
  5804  030A  0087               	movwf	7
  5805  030B  3003               	movlw	3
  5806  030C  0201               	subwf	1,w
  5807  030D  1C03               	skipc
  5808  030E  0008               	return
  5809                           
  5810                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5811  030F  087B               	movf	_Sw,w
  5812  0310  3E02               	addlw	2
  5813  0311  0086               	movwf	6
  5814  0312  3001               	movlw	1	; select bank2/3
  5815  0313  0087               	movwf	7
  5816  0314  0181               	clrf	1
  5817                           
  5818                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5819  0315  087B               	movf	_Sw,w
  5820  0316  0086               	movwf	6
  5821  0317  3001               	movlw	1	; select bank2/3
  5822  0318  0087               	movwf	7
  5823  0319  1101               	bcf	1,2
  5824                           
  5825                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5826  031A  087B               	movf	_Sw,w
  5827  031B  3E03               	addlw	3
  5828  031C  0086               	movwf	6
  5829  031D  3001               	movlw	1	; select bank2/3
  5830  031E  0087               	movwf	7
  5831  031F  3000               	movlw	0
  5832  0320  3FC0               	movwi [0]fsr1
  5833  0321  3FC1               	movwi [1]fsr1
  5834                           
  5835                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5836  0322  087B               	movf	_Sw,w
  5837  0323  0086               	movwf	6
  5838  0324  3001               	movlw	1	; select bank2/3
  5839  0325  0087               	movwf	7
  5840  0326  1181               	bcf	1,3
  5841                           
  5842                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5843  0327  087B               	movf	_Sw,w
  5844  0328  3E05               	addlw	5
  5845  0329  0086               	movwf	6
  5846  032A  3001               	movlw	1	; select bank2/3
  5847  032B  0087               	movwf	7
  5848  032C  3000               	movlw	0
  5849  032D  3FC0               	movwi [0]fsr1
  5850  032E  3FC1               	movwi [1]fsr1
  5851                           
  5852                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5853  032F  087B               	movf	_Sw,w
  5854  0330  0086               	movwf	6
  5855  0331  3001               	movlw	1	; select bank2/3
  5856  0332  0087               	movwf	7
  5857  0333  1201               	bcf	1,4
  5858                           
  5859                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5860  0334  087B               	movf	_Sw,w
  5861  0335  3E07               	addlw	7
  5862  0336  0086               	movwf	6
  5863  0337  3001               	movlw	1	; select bank2/3
  5864  0338  0087               	movwf	7
  5865  0339  3000               	movlw	0
  5866  033A  3FC0               	movwi [0]fsr1
  5867  033B  3FC1               	movwi [1]fsr1
  5868                           
  5869                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5870  033C  087B               	movf	_Sw,w
  5871  033D  0086               	movwf	6
  5872  033E  3001               	movlw	1	; select bank2/3
  5873  033F  0087               	movwf	7
  5874  0340  1281               	bcf	1,5
  5875                           
  5876                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5877  0341  0879               	movf	setSw_Main@sw,w
  5878  0342  3194  2402  3181   	fcall	_setDimmerLights_SwOff
  5879                           
  5880                           ;Switch_B1.c: 210: setRF_Learn(0);
  5881  0345  3000               	movlw	0
  5882  0346  319F  2713         	fcall	_setRF_Learn
  5883                           
  5884                           ;Switch_B1.c: 212: }
  5885                           ;Switch_B1.c: 213: }
  5886                           ;Switch_B1.c: 214: }
  5887                           ;Switch_B1.c: 215: } else {
  5888  0348  0008               	return
  5889  0349                     l2467:	
  5890                           
  5891                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5892  0349  0021               	movlb	1	; select bank1
  5893  034A  1C2E               	btfss	_myMain^(0+128),0
  5894  034B  0008               	return
  5895                           
  5896                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5897  034C  087B               	movf	_Sw,w
  5898  034D  0086               	movwf	6
  5899  034E  3001               	movlw	1	; select bank2/3
  5900  034F  0087               	movwf	7
  5901  0350  1401               	bsf	1,0
  5902  0351  0008               	return
  5903  0352                     __end_of_setSw_Main:	
  5904                           
  5905                           	psect	text14
  5906  1F13                     __ptext14:	
  5907 ;; *************** function _setRF_Learn *****************
  5908 ;; Defined at:
  5909 ;;		line 33 in file "../src/RF_Control_B1.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  command         1    wreg     unsigned char 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  command         1    3[COMMON] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;		None               void
  5916 ;; Registers used:
  5917 ;;		wreg, status,2, status,0
  5918 ;; Tracked objects:
  5919 ;;		On entry : 0/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5927 ;;Total ram usage:        2 bytes
  5928 ;; Hardware stack levels used:    1
  5929 ;; Hardware stack levels required when called:    3
  5930 ;; This function calls:
  5931 ;;		Nothing
  5932 ;; This function is called by:
  5933 ;;		_setSw_Main
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           
  5938                           ;psect for function _setRF_Learn
  5939  1F13                     _setRF_Learn:	
  5940                           
  5941                           ;incstack = 0
  5942                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5943                           ;setRF_Learn@command stored from wreg
  5944  1F13  00F3               	movwf	setRF_Learn@command
  5945                           
  5946                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  5947  1F14  0873               	movf	setRF_Learn@command,w
  5948  1F15  3A01               	xorlw	1
  5949  1F16  3000               	movlw	0
  5950  1F17  1903               	skipnz
  5951  1F18  3001               	movlw	1
  5952  1F19  00F2               	movwf	??_setRF_Learn
  5953  1F1A  0EF2               	swapf	??_setRF_Learn,f
  5954  1F1B  0DF2               	rlf	??_setRF_Learn,f
  5955  1F1C  0DF2               	rlf	??_setRF_Learn,f
  5956  1F1D  0021               	movlb	1	; select bank1
  5957  1F1E  0820               	movf	_RF1^(0+128),w
  5958  1F1F  0672               	xorwf	??_setRF_Learn,w
  5959  1F20  39BF               	andlw	-65
  5960  1F21  0672               	xorwf	??_setRF_Learn,w
  5961  1F22  00A0               	movwf	_RF1^(0+128)
  5962  1F23  0008               	return
  5963  1F24                     __end_of_setRF_Learn:	
  5964                           
  5965                           	psect	text15
  5966  1254                     __ptext15:	
  5967 ;; *************** function _setDimmerLights_DimmingOn *****************
  5968 ;; Defined at:
  5969 ;;		line 711 in file "../src/Dimmer_B1.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  sw              1    wreg     unsigned char 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  sw              1    4[COMMON] unsigned char 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;		None               void
  5976 ;; Registers used:
  5977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;Total ram usage:        1 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    4
  5990 ;; This function calls:
  5991 ;;		_DimmerLights_SelectPointer
  5992 ;; This function is called by:
  5993 ;;		_setSw_Main
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           
  5998                           ;psect for function _setDimmerLights_DimmingOn
  5999  1254                     _setDimmerLights_DimmingOn:	
  6000                           
  6001                           ;incstack = 0
  6002                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6003                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6004  1254  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6005                           
  6006                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
  6007  1255  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6008  1256  319D  25A2  3192   	fcall	_DimmerLights_SelectPointer
  6009                           
  6010                           ;Dimmer_B1.c: 718: if (DimmerLights->Trigger == 0) {
  6011  1259  0021               	movlb	1	; select bank1
  6012  125A  084C               	movf	_DimmerLights^(0+128),w
  6013  125B  0086               	movwf	6
  6014  125C  3001               	movlw	1	; select bank2/3
  6015  125D  0087               	movwf	7
  6016  125E  1881               	btfsc	1,1
  6017  125F  0008               	return
  6018                           
  6019                           ;Dimmer_B1.c: 719: if (DimmerLights->SwFlag == 1) {
  6020  1260  084C               	movf	_DimmerLights^(0+128),w
  6021  1261  0086               	movwf	6
  6022  1262  3001               	movlw	1	; select bank2/3
  6023  1263  0087               	movwf	7
  6024  1264  1C01               	btfss	1,0
  6025  1265  0008               	return
  6026                           
  6027                           ;Dimmer_B1.c: 720: DimmerLights->Status = 1;
  6028  1266  0A4C               	incf	_DimmerLights^(0+128),w
  6029  1267  0086               	movwf	6
  6030  1268  3001               	movlw	1	; select bank2/3
  6031  1269  0087               	movwf	7
  6032  126A  1401               	bsf	1,0
  6033                           
  6034                           ;Dimmer_B1.c: 722: DimmerLights->DimmingSwFlag = 1;
  6035  126B  084C               	movf	_DimmerLights^(0+128),w
  6036  126C  0086               	movwf	6
  6037  126D  3001               	movlw	1	; select bank2/3
  6038  126E  0087               	movwf	7
  6039  126F  1581               	bsf	1,3
  6040                           
  6041                           ;Dimmer_B1.c: 723: DimmerLights->DimmingTrigger = 1;
  6042  1270  084C               	movf	_DimmerLights^(0+128),w
  6043  1271  0086               	movwf	6
  6044  1272  3001               	movlw	1	; select bank2/3
  6045  1273  0087               	movwf	7
  6046  1274  1601               	bsf	1,4
  6047                           
  6048                           ;Dimmer_B1.c: 724: DimmerLights->DimmingSwitch = 1;
  6049  1275  084C               	movf	_DimmerLights^(0+128),w
  6050  1276  0086               	movwf	6
  6051  1277  3001               	movlw	1	; select bank2/3
  6052  1278  0087               	movwf	7
  6053  1279  1681               	bsf	1,5
  6054  127A  0008               	return
  6055  127B                     __end_of_setDimmerLights_DimmingOn:	
  6056                           
  6057                           	psect	text16
  6058  1F02                     __ptext16:	
  6059 ;; *************** function _getSw_KeyStatus *****************
  6060 ;; Defined at:
  6061 ;;		line 223 in file "../src/Switch_B1.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;  sw              1    wreg     unsigned char 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  sw              1    0[COMMON] unsigned char 
  6066 ;;  status          1    3[COMMON] unsigned char 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      unsigned char 
  6069 ;; Registers used:
  6070 ;;		wreg, status,2
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;Total ram usage:        3 bytes
  6081 ;; Hardware stack levels used:    1
  6082 ;; Hardware stack levels required when called:    3
  6083 ;; This function calls:
  6084 ;;		Nothing
  6085 ;; This function is called by:
  6086 ;;		_setSw_Main
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           
  6091                           ;psect for function _getSw_KeyStatus
  6092  1F02                     _getSw_KeyStatus:	
  6093                           
  6094                           ;Switch_B1.c: 224: char status = 0;
  6095                           
  6096                           ;incstack = 0
  6097                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6098  1F02  01F3               	clrf	getSw_KeyStatus@status
  6099                           
  6100                           ;Switch_B1.c: 244: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6101  1F03  01F4               	clrf	_getSw_KeyStatus$6063
  6102  1F04  0AF4               	incf	_getSw_KeyStatus$6063,f
  6103  1F05  0020               	movlb	0	; select bank0
  6104  1F06  1F0C               	btfss	12,6	;volatile
  6105  1F07  1A0C               	btfsc	12,4	;volatile
  6106  1F08  2F0D               	goto	l8807
  6107  1F09  1C0C               	btfss	12,0	;volatile
  6108  1F0A  1B8C               	btfsc	12,7	;volatile
  6109  1F0B  2F0D               	goto	l8807
  6110  1F0C  01F4               	clrf	_getSw_KeyStatus$6063
  6111  1F0D                     l8807:	
  6112  1F0D  0874               	movf	_getSw_KeyStatus$6063,w
  6113  1F0E  00F2               	movwf	??_getSw_KeyStatus
  6114  1F0F  0872               	movf	??_getSw_KeyStatus,w
  6115  1F10  00F3               	movwf	getSw_KeyStatus@status
  6116                           
  6117                           ;Switch_B1.c: 247: return status;
  6118  1F11  0873               	movf	getSw_KeyStatus@status,w
  6119  1F12  0008               	return
  6120  1F13                     __end_of_getSw_KeyStatus:	
  6121                           
  6122                           	psect	text17
  6123  1D8D                     __ptext17:	
  6124 ;; *************** function _SwPointSelect *****************
  6125 ;; Defined at:
  6126 ;;		line 25 in file "../src/Switch_B1.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  sw              1    wreg     unsigned char 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  sw              1    3[COMMON] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;		None               void
  6133 ;; Registers used:
  6134 ;;		wreg
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;Total ram usage:        2 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    3
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_setSw_Main
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           
  6155                           ;psect for function _SwPointSelect
  6156  1D8D                     _SwPointSelect:	
  6157                           
  6158                           ;incstack = 0
  6159                           ; Regs used in _SwPointSelect: [wreg]
  6160                           ;SwPointSelect@sw stored from wreg
  6161  1D8D  00F3               	movwf	SwPointSelect@sw
  6162                           
  6163                           ;Switch_B1.c: 28: if (sw == 1) {
  6164  1D8E  0873               	movf	SwPointSelect@sw,w
  6165  1D8F  3A01               	xorlw	1
  6166  1D90  1D03               	skipz
  6167  1D91  0008               	return
  6168                           
  6169                           ;Switch_B1.c: 29: Sw = &Sw1;
  6170  1D92  30E3               	movlw	_Sw1& (0+255)
  6171  1D93  00F2               	movwf	??_SwPointSelect
  6172  1D94  0872               	movf	??_SwPointSelect,w
  6173  1D95  00FB               	movwf	_Sw
  6174  1D96  0008               	return
  6175  1D97                     __end_of_SwPointSelect:	
  6176                           
  6177                           	psect	text18
  6178  1D52                     __ptext18:	
  6179 ;; *************** function _Switch_Initialization *****************
  6180 ;; Defined at:
  6181 ;;		line 46 in file "../src/Switch_B1.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;		None
  6186 ;; Return value:  Size  Location     Type
  6187 ;;		None               void
  6188 ;; Registers used:
  6189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;Total ram usage:        0 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    6
  6202 ;; This function calls:
  6203 ;;		_TouchPower
  6204 ;;		_setSw_Initialization
  6205 ;; This function is called by:
  6206 ;;		_main
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           
  6211                           ;psect for function _Switch_Initialization
  6212  1D52                     _Switch_Initialization:	
  6213                           
  6214                           ;Switch_B1.c: 47: TouchPower();
  6215                           
  6216                           ;incstack = 0
  6217                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6218  1D52  3190  2069  319D   	fcall	_TouchPower
  6219                           
  6220                           ;Switch_B1.c: 49: WPUB1 = 0;
  6221  1D55  0024               	movlb	4	; select bank4
  6222  1D56  108D               	bcf	13,1	;volatile
  6223                           
  6224                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6225  1D57  3001               	movlw	1
  6226  1D58  319E  2626         	fcall	_setSw_Initialization
  6227  1D5A  0008               	return
  6228  1D5B                     __end_of_Switch_Initialization:	
  6229                           
  6230                           	psect	text19
  6231  1E26                     __ptext19:	
  6232 ;; *************** function _setSw_Initialization *****************
  6233 ;; Defined at:
  6234 ;;		line 93 in file "../src/Switch_B1.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;  sw              1    wreg     unsigned char 
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;  sw              1    6[COMMON] unsigned char 
  6239 ;; Return value:  Size  Location     Type
  6240 ;;		None               void
  6241 ;; Registers used:
  6242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6252 ;;Total ram usage:        1 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    5
  6255 ;; This function calls:
  6256 ;;		_setLED
  6257 ;; This function is called by:
  6258 ;;		_Switch_Initialization
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           
  6263                           ;psect for function _setSw_Initialization
  6264  1E26                     _setSw_Initialization:	
  6265                           
  6266                           ;incstack = 0
  6267                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6268                           ;setSw_Initialization@sw stored from wreg
  6269  1E26  00F6               	movwf	setSw_Initialization@sw
  6270                           
  6271                           ;Switch_B1.c: 94: setLED(sw, 1);
  6272  1E27  01F4               	clrf	setLED@command
  6273  1E28  0AF4               	incf	setLED@command,f
  6274  1E29  0876               	movf	setSw_Initialization@sw,w
  6275  1E2A  3194  24AB  319E   	fcall	_setLED
  6276                           
  6277                           ;Switch_B1.c: 96: setLED(sw + 1, 1);
  6278  1E2D  01F4               	clrf	setLED@command
  6279  1E2E  0AF4               	incf	setLED@command,f
  6280  1E2F  0876               	movf	setSw_Initialization@sw,w
  6281  1E30  3E01               	addlw	1
  6282  1E31  3194  24AB         	fcall	_setLED
  6283  1E33  0008               	return
  6284  1E34                     __end_of_setSw_Initialization:	
  6285                           
  6286                           	psect	text20
  6287  1069                     __ptext20:	
  6288 ;; *************** function _TouchPower *****************
  6289 ;; Defined at:
  6290 ;;		line 10 in file "../src/Switch_B1.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;		None
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;		None
  6295 ;; Return value:  Size  Location     Type
  6296 ;;		None               void
  6297 ;; Registers used:
  6298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;Total ram usage:        0 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    4
  6311 ;; This function calls:
  6312 ;;		_Timeout_Counter
  6313 ;;		_set_TimeoutCleared
  6314 ;; This function is called by:
  6315 ;;		_Switch_Initialization
  6316 ;;		_Switch_Main
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           
  6321                           ;psect for function _TouchPower
  6322  1069                     _TouchPower:	
  6323                           
  6324                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6325                           
  6326                           ;incstack = 0
  6327                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6328  1069  0021               	movlb	1	; select bank1
  6329  106A  1C2E               	btfss	_myMain^(0+128),0
  6330  106B  0008               	return
  6331                           
  6332                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6333  106C  0020               	movlb	0	; select bank0
  6334  106D  180D               	btfsc	13,0	;volatile
  6335  106E  0008               	return
  6336  106F  2875               	goto	l9027
  6337  1070                     l2447:	
  6338                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6339                           
  6340                           
  6341                           ;Switch_B1.c: 14: RB0 = 1;
  6342  1070  0020               	movlb	0	; select bank0
  6343  1071  140D               	bsf	13,0	;volatile
  6344                           
  6345                           ;Switch_B1.c: 15: Timeout_Counter();
  6346  1072  319F  27EB  3190   	fcall	_Timeout_Counter
  6347  1075                     l9027:	
  6348  1075  0020               	movlb	0	; select bank0
  6349  1076  180D               	btfsc	13,0	;volatile
  6350  1077  287B               	goto	l9031
  6351  1078  0021               	movlb	1	; select bank1
  6352  1079  1D39               	btfss	(_myMain^(0+128)+11),2
  6353  107A  2870               	goto	l2447
  6354  107B                     l9031:	
  6355                           
  6356                           ;Switch_B1.c: 16: }
  6357                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6358  107B  3187  27FB         	fcall	_set_TimeoutCleared
  6359  107D  0008               	return
  6360  107E                     __end_of_TouchPower:	
  6361                           
  6362                           	psect	text21
  6363  07FB                     __ptext21:	
  6364 ;; *************** function _set_TimeoutCleared *****************
  6365 ;; Defined at:
  6366 ;;		line 282 in file "../src/Main_B1.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;		None               void
  6373 ;; Registers used:
  6374 ;;		status,2
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;Total ram usage:        0 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    3
  6387 ;; This function calls:
  6388 ;;		Nothing
  6389 ;; This function is called by:
  6390 ;;		_getAD
  6391 ;;		_TouchPower
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           
  6396                           ;psect for function _set_TimeoutCleared
  6397  07FB                     _set_TimeoutCleared:	
  6398                           
  6399                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6400                           
  6401                           ;incstack = 0
  6402                           ; Regs used in _set_TimeoutCleared: [status,2]
  6403  07FB  0021               	movlb	1	; select bank1
  6404  07FC  1139               	bcf	(_myMain^(0+128)+11),2
  6405                           
  6406                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6407  07FD  01BA               	clrf	(_myMain^(0+128)+12)
  6408  07FE  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6409  07FF  0008               	return
  6410  0800                     __end_of_set_TimeoutCleared:	
  6411                           
  6412                           	psect	text22
  6413  1FEB                     __ptext22:	
  6414 ;; *************** function _Timeout_Counter *****************
  6415 ;; Defined at:
  6416 ;;		line 273 in file "../src/Main_B1.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;		None
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;		None               void
  6423 ;; Registers used:
  6424 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6434 ;;Total ram usage:        0 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    3
  6437 ;; This function calls:
  6438 ;;		Nothing
  6439 ;; This function is called by:
  6440 ;;		_getAD
  6441 ;;		_TouchPower
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           
  6446                           ;psect for function _Timeout_Counter
  6447  1FEB                     _Timeout_Counter:	
  6448                           
  6449                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6453  1FEB  3001               	movlw	1
  6454  1FEC  0021               	movlb	1	; select bank1
  6455  1FED  07BA               	addwf	(_myMain^(0+128)+12),f
  6456  1FEE  3000               	movlw	0
  6457  1FEF  3DBB               	addwfc	((_myMain+1)^(0+128)+12),f
  6458                           
  6459                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6460  1FF0  300C               	movlw	12
  6461  1FF1  3EAE               	addlw	_myMain& (0+255)
  6462  1FF2  0086               	movwf	6
  6463  1FF3  0187               	clrf	7
  6464  1FF4  3F40               	moviw [0]fsr1
  6465  1FF5  3AA8               	xorlw	168
  6466  1FF6  1D03               	skipz
  6467  1FF7  2FFA               	goto	u9305
  6468  1FF8  3F41               	moviw [1]fsr1
  6469  1FF9  3A61               	xorlw	97
  6470  1FFA                     u9305:	
  6471  1FFA  1D03               	skipz
  6472  1FFB  0008               	return
  6473                           
  6474                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6475  1FFC  01BA               	clrf	(_myMain^(0+128)+12)
  6476  1FFD  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6477                           
  6478                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6479  1FFE  1539               	bsf	(_myMain^(0+128)+11),2
  6480  1FFF  0008               	return
  6481  2000                     __end_of_Timeout_Counter:	
  6482                           
  6483                           	psect	text23
  6484  1CC2                     __ptext23:	
  6485 ;; *************** function _RF_Main *****************
  6486 ;; Defined at:
  6487 ;;		line 26 in file "../src/RF_Control_B1.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;		None               void
  6494 ;; Registers used:
  6495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:   10
  6508 ;; This function calls:
  6509 ;;		_setRF_Main
  6510 ;; This function is called by:
  6511 ;;		_main
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           
  6516                           ;psect for function _RF_Main
  6517  1CC2                     _RF_Main:	
  6518                           
  6519                           ;RF_Control_B1.c: 28: setRF_Main();
  6520                           
  6521                           ;incstack = 0
  6522                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6523  1CC2  3185  25F6         	fcall	_setRF_Main
  6524  1CC4  0008               	return
  6525  1CC5                     __end_of_RF_Main:	
  6526                           
  6527                           	psect	text24
  6528  05F6                     __ptext24:	
  6529 ;; *************** function _setRF_Main *****************
  6530 ;; Defined at:
  6531 ;;		line 53 in file "../src/RF_Control_B1.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  error           1   76[BANK0 ] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;Total ram usage:        2 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    9
  6552 ;; This function calls:
  6553 ;;		_CC2500_PowerOnInitial
  6554 ;;		_CC2500_RxData
  6555 ;;		_CC2500_TxData
  6556 ;;		_CC2500_WriteCommand
  6557 ;;		_RF_RxDisable
  6558 ;;		___lwdiv
  6559 ;;		_getBuz_GO
  6560 ;;		_getRF_KeyStatus
  6561 ;;		_getRxData
  6562 ;; This function is called by:
  6563 ;;		_RF_Main
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567                           
  6568                           ;psect for function _setRF_Main
  6569  05F6                     _setRF_Main:	
  6570                           
  6571                           ;RF_Control_B1.c: 54: char error = 0;
  6572                           
  6573                           ;incstack = 0
  6574                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6575  05F6  0020               	movlb	0	; select bank0
  6576  05F7  01EC               	clrf	setRF_Main@error
  6577                           
  6578                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6579  05F8  0021               	movlb	1	; select bank1
  6580  05F9  1C20               	btfss	_RF1^(0+128),0
  6581  05FA  2EB2               	goto	l2093
  6582                           
  6583                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6584  05FB  319E  26A0  3185   	fcall	_getBuz_GO
  6585  05FE  0873               	movf	?_getBuz_GO+1,w
  6586  05FF  0472               	iorwf	?_getBuz_GO,w
  6587  0600  1D03               	skipz
  6588  0601  2E93               	goto	l8997
  6589                           
  6590                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6591  0602  319E  26F1  3185   	fcall	_getRF_KeyStatus
  6592  0605  3A01               	xorlw	1
  6593  0606  3000               	movlw	0
  6594  0607  1903               	skipnz
  6595  0608  3001               	movlw	1
  6596  0609  0020               	movlb	0	; select bank0
  6597  060A  00EB               	movwf	??_setRF_Main
  6598  060B  0CEB               	rrf	??_setRF_Main,f
  6599  060C  0CEB               	rrf	??_setRF_Main,f
  6600  060D  0021               	movlb	1	; select bank1
  6601  060E  0820               	movf	_RF1^(0+128),w
  6602  060F  0020               	movlb	0	; select bank0
  6603  0610  066B               	xorwf	??_setRF_Main,w
  6604  0611  397F               	andlw	-129
  6605  0612  066B               	xorwf	??_setRF_Main,w
  6606  0613  0021               	movlb	1	; select bank1
  6607  0614  00A0               	movwf	_RF1^(0+128)
  6608                           
  6609                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6610  0615  1FA0               	btfss	_RF1^(0+128),7
  6611  0616  2E19               	goto	l2097
  6612  0617  1F20               	btfss	_RF1^(0+128),6
  6613  0618  2E93               	goto	l8997
  6614  0619                     l2097:	
  6615                           
  6616                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6617  0619  1D20               	btfss	_RF1^(0+128),2
  6618  061A  2E5A               	goto	l2098
  6619                           
  6620                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6621  061B  1B20               	btfsc	_RF1^(0+128),6
  6622  061C  2E55               	goto	l8969
  6623                           
  6624                           ;RF_Control_B1.c: 68: RF1.Count++;
  6625  061D  3001               	movlw	1
  6626  061E  07A2               	addwf	(_RF1^(0+128)+2),f
  6627  061F  3000               	movlw	0
  6628  0620  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6629                           
  6630                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6631  0621  3014               	movlw	20
  6632  0622  00F2               	movwf	___lwdiv@divisor
  6633  0623  3000               	movlw	0
  6634  0624  00F3               	movwf	___lwdiv@divisor+1
  6635  0625  0828               	movf	((_RF1+1)^(0+128)+7),w
  6636  0626  01F5               	clrf	___lwdiv@dividend+1
  6637  0627  07F5               	addwf	___lwdiv@dividend+1,f
  6638  0628  0827               	movf	(_RF1^(0+128)+7),w
  6639  0629  01F4               	clrf	___lwdiv@dividend
  6640  062A  07F4               	addwf	___lwdiv@dividend,f
  6641  062B  3193  23CC  3185   	fcall	___lwdiv
  6642  062E  0873               	movf	?___lwdiv+1,w
  6643  062F  0021               	movlb	1	; select bank1
  6644  0630  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6645  0631  1D03               	skipz
  6646  0632  2E35               	goto	u9865
  6647  0633  0872               	movf	?___lwdiv,w
  6648  0634  0222               	subwf	(_RF1^(0+128)+2),w
  6649  0635                     u9865:	
  6650  0635  1C03               	skipc
  6651  0636  2E93               	goto	l8997
  6652                           
  6653                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6654  0637  3014               	movlw	20
  6655  0638  00F2               	movwf	___lwdiv@divisor
  6656  0639  3000               	movlw	0
  6657  063A  00F3               	movwf	___lwdiv@divisor+1
  6658  063B  0828               	movf	((_RF1+1)^(0+128)+7),w
  6659  063C  01F5               	clrf	___lwdiv@dividend+1
  6660  063D  07F5               	addwf	___lwdiv@dividend+1,f
  6661  063E  0827               	movf	(_RF1^(0+128)+7),w
  6662  063F  01F4               	clrf	___lwdiv@dividend
  6663  0640  07F4               	addwf	___lwdiv@dividend,f
  6664  0641  3193  23CC  3185   	fcall	___lwdiv
  6665  0644  0873               	movf	?___lwdiv+1,w
  6666  0645  0021               	movlb	1	; select bank1
  6667  0646  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6668  0647  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6669  0648  0872               	movf	?___lwdiv,w
  6670  0649  01A2               	clrf	(_RF1^(0+128)+2)
  6671  064A  07A2               	addwf	(_RF1^(0+128)+2),f
  6672                           
  6673                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6674  064B  1120               	bcf	_RF1^(0+128),2
  6675                           
  6676                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6677  064C  01AA               	clrf	(_RF1^(0+128)+10)
  6678  064D  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6679                           
  6680                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6681  064E  319E  2661  3185   	fcall	_RF_RxDisable
  6682                           
  6683                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6684  0651  3189  219A  3185   	fcall	_CC2500_TxData
  6685                           
  6686                           ;RF_Control_B1.c: 77: }
  6687                           ;RF_Control_B1.c: 78: } else {
  6688  0654  2E93               	goto	l8997
  6689  0655                     l8969:	
  6690                           
  6691                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6692  0655  0021               	movlb	1	; select bank1
  6693  0656  01A2               	clrf	(_RF1^(0+128)+2)
  6694  0657  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6695                           
  6696                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6697  0658  1120               	bcf	_RF1^(0+128),2
  6698                           
  6699                           ;RF_Control_B1.c: 81: }
  6700                           ;RF_Control_B1.c: 82: } else {
  6701  0659  2E93               	goto	l8997
  6702  065A                     l2098:	
  6703                           
  6704                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6705  065A  1DA0               	btfss	_RF1^(0+128),3
  6706  065B  2E69               	goto	l8983
  6707                           
  6708                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6709  065C  3188  206F  3185   	fcall	_CC2500_RxData
  6710                           
  6711                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6712  065F  0021               	movlb	1	; select bank1
  6713  0660  1CA0               	btfss	_RF1^(0+128),1
  6714  0661  2E93               	goto	l8997
  6715                           
  6716                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6717  0662  10A0               	bcf	_RF1^(0+128),1
  6718                           
  6719                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6720  0663  01AA               	clrf	(_RF1^(0+128)+10)
  6721  0664  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6722                           
  6723                           ;RF_Control_B1.c: 97: getRxData();
  6724  0665  318B  234A  3185   	fcall	_getRxData
  6725                           
  6726                           ;RF_Control_B1.c: 100: }
  6727                           ;RF_Control_B1.c: 101: } else {
  6728  0668  2E93               	goto	l8997
  6729  0669                     l8983:	
  6730                           
  6731                           ;RF_Control_B1.c: 102: RF1.Count++;
  6732  0669  3001               	movlw	1
  6733  066A  0021               	movlb	1	; select bank1
  6734  066B  07A2               	addwf	(_RF1^(0+128)+2),f
  6735  066C  3000               	movlw	0
  6736  066D  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6737                           
  6738                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6739  066E  3014               	movlw	20
  6740  066F  00F2               	movwf	___lwdiv@divisor
  6741  0670  3000               	movlw	0
  6742  0671  00F3               	movwf	___lwdiv@divisor+1
  6743  0672  0828               	movf	((_RF1+1)^(0+128)+7),w
  6744  0673  01F5               	clrf	___lwdiv@dividend+1
  6745  0674  07F5               	addwf	___lwdiv@dividend+1,f
  6746  0675  0827               	movf	(_RF1^(0+128)+7),w
  6747  0676  01F4               	clrf	___lwdiv@dividend
  6748  0677  07F4               	addwf	___lwdiv@dividend,f
  6749  0678  3193  23CC  3185   	fcall	___lwdiv
  6750  067B  0873               	movf	?___lwdiv+1,w
  6751  067C  0021               	movlb	1	; select bank1
  6752  067D  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6753  067E  1D03               	skipz
  6754  067F  2E82               	goto	u9895
  6755  0680  0872               	movf	?___lwdiv,w
  6756  0681  0222               	subwf	(_RF1^(0+128)+2),w
  6757  0682                     u9895:	
  6758  0682  1C03               	skipc
  6759  0683  2E93               	goto	l8997
  6760                           
  6761                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6762  0684  01A2               	clrf	(_RF1^(0+128)+2)
  6763  0685  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6764                           
  6765                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6766  0686  15A0               	bsf	_RF1^(0+128),3
  6767                           
  6768                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6769  0687  3036               	movlw	54
  6770  0688  3190  20C8  3185   	fcall	_CC2500_WriteCommand
  6771                           
  6772                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6773  068B  303A               	movlw	58
  6774  068C  3190  20C8  3185   	fcall	_CC2500_WriteCommand
  6775                           
  6776                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6777  068F  3034               	movlw	52
  6778  0690  3190  20C8  3185   	fcall	_CC2500_WriteCommand
  6779  0693                     l8997:	
  6780                           
  6781                           ;RF_Control_B1.c: 111: }
  6782                           ;RF_Control_B1.c: 112: }
  6783                           ;RF_Control_B1.c: 113: }
  6784                           ;RF_Control_B1.c: 114: }
  6785                           ;RF_Control_B1.c: 115: }
  6786                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6787  0693  3001               	movlw	1
  6788  0694  0021               	movlb	1	; select bank1
  6789  0695  07AA               	addwf	(_RF1^(0+128)+10),f
  6790  0696  3000               	movlw	0
  6791  0697  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6792                           
  6793                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6794  0698  300B               	movlw	11
  6795  0699  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6796  069A  30B9               	movlw	185
  6797  069B  1903               	skipnz
  6798  069C  022A               	subwf	(_RF1^(0+128)+10),w
  6799  069D  1C03               	skipc
  6800  069E  2EAB               	goto	l9011
  6801                           
  6802                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6803  069F  01AA               	clrf	(_RF1^(0+128)+10)
  6804  06A0  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6805                           
  6806                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6807  06A1  11A0               	bcf	_RF1^(0+128),3
  6808                           
  6809                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6810  06A2  10A0               	bcf	_RF1^(0+128),1
  6811                           
  6812                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6813  06A3  3036               	movlw	54
  6814  06A4  3190  20C8  3185   	fcall	_CC2500_WriteCommand
  6815                           
  6816                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6817  06A7  303A               	movlw	58
  6818  06A8  3190  20C8  3185   	fcall	_CC2500_WriteCommand
  6819  06AB                     l9011:	
  6820                           
  6821                           ;RF_Control_B1.c: 125: }
  6822                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6823  06AB  0021               	movlb	1	; select bank1
  6824  06AC  1F21               	btfss	(_RF1^(0+128)+1),6
  6825  06AD  0008               	return
  6826                           
  6827                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6828  06AE  1321               	bcf	(_RF1^(0+128)+1),6
  6829                           
  6830                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6831  06AF  319F  27D6         	fcall	_CC2500_PowerOnInitial
  6832                           
  6833                           ;RF_Control_B1.c: 130: }
  6834                           ;RF_Control_B1.c: 132: } else {
  6835  06B1  0008               	return
  6836  06B2                     l2093:	
  6837                           
  6838                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6839  06B2  1C2E               	btfss	_myMain^(0+128),0
  6840  06B3  0008               	return
  6841                           
  6842                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6843  06B4  1420               	bsf	_RF1^(0+128),0
  6844  06B5  0008               	return
  6845  06B6                     __end_of_setRF_Main:	
  6846                           
  6847                           	psect	text25
  6848  0B4A                     __ptext25:	
  6849 ;; *************** function _getRxData *****************
  6850 ;; Defined at:
  6851 ;;		line 227 in file "../src/RF_Control_B1.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  error           1   74[BANK0 ] unsigned char 
  6856 ;; Return value:  Size  Location     Type
  6857 ;;		None               void
  6858 ;; Registers used:
  6859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;Total ram usage:        2 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    8
  6872 ;; This function calls:
  6873 ;;		_getMain_All_Error_Status
  6874 ;;		_setControl_Lights_Table
  6875 ;;		_setLog_Code
  6876 ;;		_setTxData
  6877 ;; This function is called by:
  6878 ;;		_setRF_Main
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _getRxData
  6884  0B4A                     _getRxData:	
  6885                           
  6886                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6887                           
  6888                           ;incstack = 0
  6889                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6890  0B4A  0023               	movlb	3	; select bank3
  6891  0B4B  0820               	movf	_RF_Data^(0+384),w
  6892  0B4C  3AAA               	xorlw	170
  6893  0B4D  1D03               	skipz
  6894  0B4E  2B60               	goto	l8753
  6895  0B4F  0821               	movf	(_RF_Data^(0+384)+1),w
  6896  0B50  3A01               	xorlw	1
  6897  0B51  1D03               	skipz
  6898  0B52  2B60               	goto	l8753
  6899                           
  6900                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  6901  0B53  3055               	movlw	85
  6902  0B54  0020               	movlb	0	; select bank0
  6903  0B55  00E9               	movwf	??_getRxData
  6904  0B56  086D               	movf	_product,w
  6905  0B57  3E02               	addlw	2
  6906  0B58  0086               	movwf	6
  6907  0B59  3002               	movlw	2	; select bank4/5
  6908  0B5A  0087               	movwf	7
  6909  0B5B  0869               	movf	??_getRxData,w
  6910  0B5C  0081               	movwf	1
  6911                           
  6912                           ;RF_Control_B1.c: 231: setTxData();
  6913  0B5D  318F  274A         	fcall	_setTxData
  6914                           
  6915                           ;RF_Control_B1.c: 235: } else {
  6916  0B5F  0008               	return
  6917  0B60                     l8753:	
  6918                           
  6919                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  6920  0B60  3000               	movlw	0
  6921  0B61  3192  22CF  318B   	fcall	_getMain_All_Error_Status
  6922  0B64  0020               	movlb	0	; select bank0
  6923  0B65  00E9               	movwf	??_getRxData
  6924  0B66  0869               	movf	??_getRxData,w
  6925  0B67  00EA               	movwf	getRxData@error
  6926                           
  6927                           ;RF_Control_B1.c: 237: if (error == 0) {
  6928  0B68  08EA               	movf	getRxData@error,f
  6929  0B69  1D03               	skipz
  6930  0B6A  2BBB               	goto	l2138
  6931                           
  6932                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  6933  0B6B  0021               	movlb	1	; select bank1
  6934  0B6C  1F20               	btfss	_RF1^(0+128),6
  6935  0B6D  2B79               	goto	l8765
  6936                           
  6937                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  6938  0B6E  0023               	movlb	3	; select bank3
  6939  0B6F  08A0               	movf	_RF_Data^(0+384),f
  6940  0B70  1D03               	skipz
  6941  0B71  0008               	return
  6942  0B72  0821               	movf	(_RF_Data^(0+384)+1),w
  6943  0B73  3A64               	xorlw	100
  6944  0B74  1D03               	skipz
  6945  0B75  0008               	return
  6946                           
  6947                           ;RF_Control_B1.c: 241: setLog_Code();
  6948  0B76  3193  2363         	fcall	_setLog_Code
  6949                           
  6950                           ;RF_Control_B1.c: 242: }
  6951                           ;RF_Control_B1.c: 243: } else {
  6952  0B78  0008               	return
  6953  0B79                     l8765:	
  6954                           
  6955                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  6956  0B79  0023               	movlb	3	; select bank3
  6957  0B7A  0834               	movf	(_RF_Data^(0+384)+20),w
  6958  0B7B  3AD1               	xorlw	209
  6959  0B7C  1903               	skipnz
  6960  0B7D  2B82               	goto	l8769
  6961  0B7E  0834               	movf	(_RF_Data^(0+384)+20),w
  6962  0B7F  3A0A               	xorlw	10
  6963  0B80  1D03               	skipz
  6964  0B81  0008               	return
  6965  0B82                     l8769:	
  6966                           
  6967                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6968  0B82  08A0               	movf	_RF_Data^(0+384),f
  6969  0B83  1D03               	skipz
  6970  0B84  0008               	return
  6971  0B85  0821               	movf	(_RF_Data^(0+384)+1),w
  6972  0B86  3A02               	xorlw	2
  6973  0B87  1D03               	skipz
  6974  0B88  0008               	return
  6975                           
  6976                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6977  0B89  082C               	movf	(_RF_Data^(0+384)+12),w
  6978  0B8A  3AFF               	xorlw	255
  6979  0B8B  1D03               	skipz
  6980  0B8C  2B97               	goto	l8781
  6981  0B8D  082D               	movf	(_RF_Data^(0+384)+13),w
  6982  0B8E  3AFF               	xorlw	255
  6983  0B8F  1D03               	skipz
  6984  0B90  2B97               	goto	l8781
  6985  0B91  082E               	movf	(_RF_Data^(0+384)+14),w
  6986  0B92  3AFF               	xorlw	255
  6987  0B93  1D03               	skipz
  6988  0B94  2B97               	goto	l8781
  6989                           
  6990                           ;RF_Control_B1.c: 249: __nop();
  6991  0B95  0000               	nop
  6992                           
  6993                           ;RF_Control_B1.c: 250: } else {
  6994  0B96  0008               	return
  6995  0B97                     l8781:	
  6996                           
  6997                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6998  0B97  0020               	movlb	0	; select bank0
  6999  0B98  086D               	movf	_product,w
  7000  0B99  3E0C               	addlw	12
  7001  0B9A  0086               	movwf	6
  7002  0B9B  3002               	movlw	2	; select bank4/5
  7003  0B9C  0087               	movwf	7
  7004  0B9D  0023               	movlb	3	; select bank3
  7005  0B9E  082C               	movf	(_RF_Data^(0+384)+12),w
  7006  0B9F  0601               	xorwf	1,w
  7007  0BA0  1D03               	skipz
  7008  0BA1  0008               	return
  7009  0BA2  0020               	movlb	0	; select bank0
  7010  0BA3  086D               	movf	_product,w
  7011  0BA4  3E0D               	addlw	13
  7012  0BA5  0086               	movwf	6
  7013  0BA6  3002               	movlw	2	; select bank4/5
  7014  0BA7  0087               	movwf	7
  7015  0BA8  0023               	movlb	3	; select bank3
  7016  0BA9  082D               	movf	(_RF_Data^(0+384)+13),w
  7017  0BAA  0601               	xorwf	1,w
  7018  0BAB  1D03               	skipz
  7019  0BAC  0008               	return
  7020  0BAD  0020               	movlb	0	; select bank0
  7021  0BAE  086D               	movf	_product,w
  7022  0BAF  3E0E               	addlw	14
  7023  0BB0  0086               	movwf	6
  7024  0BB1  3002               	movlw	2	; select bank4/5
  7025  0BB2  0087               	movwf	7
  7026  0BB3  0023               	movlb	3	; select bank3
  7027  0BB4  082E               	movf	(_RF_Data^(0+384)+14),w
  7028  0BB5  0601               	xorwf	1,w
  7029  0BB6  1D03               	skipz
  7030  0BB7  0008               	return
  7031                           
  7032                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7033  0BB8  318A  22DA         	fcall	_setControl_Lights_Table
  7034                           
  7035                           ;RF_Control_B1.c: 253: }
  7036                           ;RF_Control_B1.c: 254: }
  7037                           ;RF_Control_B1.c: 256: }
  7038                           ;RF_Control_B1.c: 267: }
  7039                           ;RF_Control_B1.c: 268: }
  7040                           ;RF_Control_B1.c: 269: } else {
  7041  0BBA  0008               	return
  7042  0BBB                     l2138:	
  7043                           
  7044                           ;RF_Control_B1.c: 270: __nop();
  7045  0BBB  0000               	nop
  7046  0BBC  0008               	return
  7047  0BBD                     __end_of_getRxData:	
  7048                           
  7049                           	psect	text26
  7050  1363                     __ptext26:	
  7051 ;; *************** function _setLog_Code *****************
  7052 ;; Defined at:
  7053 ;;		line 276 in file "../src/RF_Control_B1.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;		None               void
  7060 ;; Registers used:
  7061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;Total ram usage:        1 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    5
  7074 ;; This function calls:
  7075 ;;		_setBuz
  7076 ;;		_setMemory_LoopSave
  7077 ;;		_setMemory_Modify
  7078 ;;		_setProductData
  7079 ;; This function is called by:
  7080 ;;		_getRxData
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           
  7085                           ;psect for function _setLog_Code
  7086  1363                     _setLog_Code:	
  7087                           
  7088                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7089                           
  7090                           ;incstack = 0
  7091                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7092  1363  0021               	movlb	1	; select bank1
  7093  1364  1320               	bcf	_RF1^(0+128),6
  7094                           
  7095                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7096  1365  0023               	movlb	3	; select bank3
  7097  1366  082C               	movf	(_RF_Data^(0+384)+12),w
  7098  1367  0020               	movlb	0	; select bank0
  7099  1368  00DE               	movwf	??_setLog_Code
  7100  1369  085E               	movf	??_setLog_Code,w
  7101  136A  00DA               	movwf	setProductData@value
  7102  136B  300C               	movlw	12
  7103  136C  319E  2618  3193   	fcall	_setProductData
  7104                           
  7105                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7106  136F  0023               	movlb	3	; select bank3
  7107  1370  082D               	movf	(_RF_Data^(0+384)+13),w
  7108  1371  0020               	movlb	0	; select bank0
  7109  1372  00DE               	movwf	??_setLog_Code
  7110  1373  085E               	movf	??_setLog_Code,w
  7111  1374  00DA               	movwf	setProductData@value
  7112  1375  300D               	movlw	13
  7113  1376  319E  2618  3193   	fcall	_setProductData
  7114                           
  7115                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7116  1379  0023               	movlb	3	; select bank3
  7117  137A  082E               	movf	(_RF_Data^(0+384)+14),w
  7118  137B  0020               	movlb	0	; select bank0
  7119  137C  00DE               	movwf	??_setLog_Code
  7120  137D  085E               	movf	??_setLog_Code,w
  7121  137E  00DA               	movwf	setProductData@value
  7122  137F  300E               	movlw	14
  7123  1380  319E  2618  3193   	fcall	_setProductData
  7124                           
  7125                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7126  1383  3064               	movlw	100
  7127  1384  0020               	movlb	0	; select bank0
  7128  1385  00A4               	movwf	setBuz@time
  7129  1386  3000               	movlw	0
  7130  1387  00A5               	movwf	setBuz@time+1
  7131  1388  3001               	movlw	1
  7132  1389  3196  269F  3193   	fcall	_setBuz
  7133                           
  7134                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7135  138C  0021               	movlb	1	; select bank1
  7136  138D  1EAE               	btfss	_myMain^(0+128),5
  7137  138E  2B93               	goto	l2153
  7138                           
  7139                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7140  138F  3001               	movlw	1
  7141  1390  319E  26C0  3193   	fcall	_setMemory_LoopSave
  7142  1393                     l2153:	
  7143                           
  7144                           ;RF_Control_B1.c: 284: }
  7145                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7146  1393  3001               	movlw	1
  7147  1394  319E  26B0         	fcall	_setMemory_Modify
  7148  1396  0008               	return
  7149  1397                     __end_of_setLog_Code:	
  7150                           
  7151                           	psect	text27
  7152  1EC0                     __ptext27:	
  7153 ;; *************** function _setMemory_LoopSave *****************
  7154 ;; Defined at:
  7155 ;;		line 1059 in file "../src/MCU_B1.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;  command         1    wreg     unsigned char 
  7158 ;; Auto vars:     Size  Location     Type
  7159 ;;  command         1    3[COMMON] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;		None               void
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;Total ram usage:        2 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    3
  7176 ;; This function calls:
  7177 ;;		Nothing
  7178 ;; This function is called by:
  7179 ;;		_setLog_Code
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           
  7184                           ;psect for function _setMemory_LoopSave
  7185  1EC0                     _setMemory_LoopSave:	
  7186                           
  7187                           ;incstack = 0
  7188                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7189                           ;setMemory_LoopSave@command stored from wreg
  7190  1EC0  00F3               	movwf	setMemory_LoopSave@command
  7191                           
  7192                           ;MCU_B1.c: 1060: Memory.LoopSave = command == 1 ? 1 : 0;
  7193  1EC1  0873               	movf	setMemory_LoopSave@command,w
  7194  1EC2  3A01               	xorlw	1
  7195  1EC3  3000               	movlw	0
  7196  1EC4  1903               	skipnz
  7197  1EC5  3001               	movlw	1
  7198  1EC6  00F2               	movwf	??_setMemory_LoopSave
  7199  1EC7  0DF2               	rlf	??_setMemory_LoopSave,f
  7200  1EC8  0DF2               	rlf	??_setMemory_LoopSave,f
  7201  1EC9  0023               	movlb	3	; select bank3
  7202  1ECA  0862               	movf	(_Memory^(0+384)+36),w
  7203  1ECB  0672               	xorwf	??_setMemory_LoopSave,w
  7204  1ECC  39FB               	andlw	-5
  7205  1ECD  0672               	xorwf	??_setMemory_LoopSave,w
  7206  1ECE  00E2               	movwf	(_Memory^(0+384)+36)
  7207  1ECF  0008               	return
  7208  1ED0                     __end_of_setMemory_LoopSave:	
  7209                           
  7210                           	psect	text28
  7211  0ADA                     __ptext28:	
  7212 ;; *************** function _setControl_Lights_Table *****************
  7213 ;; Defined at:
  7214 ;;		line 289 in file "../src/RF_Control_B1.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;		None
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;		None
  7219 ;; Return value:  Size  Location     Type
  7220 ;;		None               void
  7221 ;; Registers used:
  7222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;Total ram usage:        0 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    7
  7235 ;; This function calls:
  7236 ;;		_getDimmerLights_Status
  7237 ;;		_getMain_All_LightsStatus
  7238 ;;		_setCmd_Status
  7239 ;;		_setDimmerLights_SwOff
  7240 ;;		_setDimmerLights_SwOn
  7241 ;;		_setProductData
  7242 ;;		_setRFSW_AdjControl
  7243 ;;		_setRFSW_Control
  7244 ;;		_setTxData
  7245 ;; This function is called by:
  7246 ;;		_getRxData
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           
  7251                           ;psect for function _setControl_Lights_Table
  7252  0ADA                     _setControl_Lights_Table:	
  7253                           
  7254                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7255                           
  7256                           ;incstack = 0
  7257                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7258  0ADA  2B3A               	goto	l8537
  7259  0ADB                     l8519:	
  7260                           ;RF_Control_B1.c: 292: case 0x00:
  7261                           
  7262                           
  7263                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7264  0ADB  319D  2527  318A   	fcall	_getMain_All_LightsStatus
  7265  0ADE  3A01               	xorlw	1
  7266  0ADF  1D03               	skipz
  7267  0AE0  2AF6               	goto	l8527
  7268                           
  7269                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7270  0AE1  3001               	movlw	1
  7271  0AE2  319E  2634  318A   	fcall	_getDimmerLights_Status
  7272  0AE5  3A01               	xorlw	1
  7273  0AE6  1D03               	skipz
  7274  0AE7  2AF0               	goto	l8525
  7275                           
  7276                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7277  0AE8  3001               	movlw	1
  7278  0AE9  3193  2397  318A   	fcall	_setDimmerLights_SwOn
  7279                           
  7280                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7281  0AEC  3001               	movlw	1
  7282  0AED  3194  2402  318A   	fcall	_setDimmerLights_SwOff
  7283  0AF0                     l8525:	
  7284                           
  7285                           ;RF_Control_B1.c: 299: }
  7286                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7287  0AF0  01F2               	clrf	setCmd_Status@cmd
  7288  0AF1  0AF2               	incf	setCmd_Status@cmd,f
  7289  0AF2  3001               	movlw	1
  7290  0AF3  319F  2782         	fcall	_setCmd_Status
  7291                           
  7292                           ;RF_Control_B1.c: 315: } else {
  7293  0AF5  0008               	return
  7294  0AF6                     l8527:	
  7295                           
  7296                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7297  0AF6  0020               	movlb	0	; select bank0
  7298  0AF7  01DA               	clrf	setProductData@value
  7299  0AF8  3009               	movlw	9
  7300  0AF9  319E  2618  318A   	fcall	_setProductData
  7301                           
  7302                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7303  0AFC  0020               	movlb	0	; select bank0
  7304  0AFD  01DA               	clrf	setProductData@value
  7305  0AFE  300B               	movlw	11
  7306  0AFF  319E  2618  318A   	fcall	_setProductData
  7307                           
  7308                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7309  0B02  0020               	movlb	0	; select bank0
  7310  0B03  01DA               	clrf	setProductData@value
  7311  0B04  300F               	movlw	15
  7312  0B05  319E  2618  318A   	fcall	_setProductData
  7313                           
  7314                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7315  0B08  0020               	movlb	0	; select bank0
  7316  0B09  01DA               	clrf	setProductData@value
  7317  0B0A  3011               	movlw	17
  7318  0B0B  319E  2618  318A   	fcall	_setProductData
  7319                           
  7320                           ;RF_Control_B1.c: 320: setTxData();
  7321  0B0E  318F  274A         	fcall	_setTxData
  7322                           
  7323                           ;RF_Control_B1.c: 321: }
  7324                           ;RF_Control_B1.c: 322: break;
  7325  0B10  0008               	return
  7326  0B11                     l8529:	
  7327                           ;RF_Control_B1.c: 324: case 0x20:
  7328                           
  7329                           
  7330                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7331  0B11  0020               	movlb	0	; select bank0
  7332  0B12  01DA               	clrf	setProductData@value
  7333  0B13  3009               	movlw	9
  7334  0B14  319E  2618  318A   	fcall	_setProductData
  7335                           
  7336                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7337  0B17  0020               	movlb	0	; select bank0
  7338  0B18  01DA               	clrf	setProductData@value
  7339  0B19  300B               	movlw	11
  7340  0B1A  319E  2618  318A   	fcall	_setProductData
  7341                           
  7342                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7343  0B1D  0020               	movlb	0	; select bank0
  7344  0B1E  086D               	movf	_product,w
  7345  0B1F  0086               	movwf	6
  7346  0B20  3002               	movlw	2	; select bank4/5
  7347  0B21  0087               	movwf	7
  7348  0B22  3002               	movlw	2	; select bank4/5
  7349  0B23  3F4F               	moviw [15]fsr1
  7350  0B24  00DA               	movwf	setProductData@value
  7351  0B25  300F               	movlw	15
  7352  0B26  319E  2618  318A   	fcall	_setProductData
  7353                           
  7354                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7355  0B29  0020               	movlb	0	; select bank0
  7356  0B2A  01DA               	clrf	setProductData@value
  7357  0B2B  3011               	movlw	17
  7358  0B2C  319E  2618  318A   	fcall	_setProductData
  7359                           
  7360                           ;RF_Control_B1.c: 329: setTxData();
  7361  0B2F  318F  274A         	fcall	_setTxData
  7362                           
  7363                           ;RF_Control_B1.c: 330: break;
  7364  0B31  0008               	return
  7365  0B32                     l8531:	
  7366                           ;RF_Control_B1.c: 333: case 0x01:
  7367                           
  7368                           
  7369                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7370  0B32  3001               	movlw	1
  7371  0B33  3194  24E5         	fcall	_setRFSW_Control
  7372                           
  7373                           ;RF_Control_B1.c: 335: break;
  7374  0B35  0008               	return
  7375  0B36                     l8533:	
  7376                           ;RF_Control_B1.c: 339: case 0x11:
  7377                           
  7378                           
  7379                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7380  0B36  3001               	movlw	1
  7381  0B37  318C  2438         	fcall	_setRFSW_AdjControl
  7382                           
  7383                           ;RF_Control_B1.c: 370: }
  7384                           
  7385                           ;RF_Control_B1.c: 341: break;
  7386  0B39  0008               	return
  7387  0B3A                     l8537:	
  7388  0B3A  0023               	movlb	3	; select bank3
  7389  0B3B  082F               	movf	(_RF_Data^(0+384)+15),w
  7390                           
  7391                           ; Switch size 1, requested type "space"
  7392                           ; Number of cases is 4, Range of values is 0 to 32
  7393                           ; switch strategies available:
  7394                           ; Name         Instructions Cycles
  7395                           ; simple_byte           13     7 (average)
  7396                           ; direct_byte           72     6 (fixed)
  7397                           ; jumptable            260     6 (fixed)
  7398                           ;	Chosen strategy is simple_byte
  7399  0B3C  3A00               	xorlw	0	; case 0
  7400  0B3D  1903               	skipnz
  7401  0B3E  2ADB               	goto	l8519
  7402  0B3F  3A01               	xorlw	1	; case 1
  7403  0B40  1903               	skipnz
  7404  0B41  2B32               	goto	l8531
  7405  0B42  3A10               	xorlw	16	; case 17
  7406  0B43  1903               	skipnz
  7407  0B44  2B36               	goto	l8533
  7408  0B45  3A31               	xorlw	49	; case 32
  7409  0B46  1903               	skipnz
  7410  0B47  2B11               	goto	l8529
  7411  0B48  2B49               	goto	l2166
  7412  0B49                     l2166:	
  7413  0B49  0008               	return
  7414  0B4A                     __end_of_setControl_Lights_Table:	
  7415                           
  7416                           	psect	text29
  7417  14E5                     __ptext29:	
  7418 ;; *************** function _setRFSW_Control *****************
  7419 ;; Defined at:
  7420 ;;		line 378 in file "../src/RF_Control_B1.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;  sw              1    wreg     unsigned char 
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;  sw              1   72[BANK0 ] unsigned char 
  7425 ;;  status          1   71[BANK0 ] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;		None               void
  7428 ;; Registers used:
  7429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;Total ram usage:        3 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    6
  7442 ;; This function calls:
  7443 ;;		_getDimmerLights_Status
  7444 ;;		_setBuz
  7445 ;;		_setDelayOff_GO
  7446 ;;		_setDimmerLights_SwOff
  7447 ;;		_setDimmerLights_SwOn
  7448 ;;		_setRF_DimmerLights
  7449 ;;		_setTxData
  7450 ;; This function is called by:
  7451 ;;		_setControl_Lights_Table
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           
  7456                           ;psect for function _setRFSW_Control
  7457  14E5                     _setRFSW_Control:	
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7461                           ;setRFSW_Control@sw stored from wreg
  7462  14E5  0020               	movlb	0	; select bank0
  7463  14E6  00E8               	movwf	setRFSW_Control@sw
  7464                           
  7465                           ;RF_Control_B1.c: 379: char status = 0;
  7466  14E7  01E7               	clrf	setRFSW_Control@status
  7467                           
  7468                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7469  14E8  0023               	movlb	3	; select bank3
  7470  14E9  0830               	movf	(_RF_Data^(0+384)+16),w
  7471  14EA  3A80               	xorlw	128
  7472  14EB  1D03               	skipz
  7473  14EC  2D18               	goto	l8353
  7474                           
  7475                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7476  14ED  0020               	movlb	0	; select bank0
  7477  14EE  01DE               	clrf	setDelayOff_GO@command
  7478  14EF  0ADE               	incf	setDelayOff_GO@command,f
  7479  14F0  0023               	movlb	3	; select bank3
  7480  14F1  0831               	movf	(_RF_Data^(0+384)+17),w
  7481  14F2  0020               	movlb	0	; select bank0
  7482  14F3  00E6               	movwf	??_setRFSW_Control
  7483  14F4  0866               	movf	??_setRFSW_Control,w
  7484  14F5  00DF               	movwf	setDelayOff_GO@value
  7485  14F6  0868               	movf	setRFSW_Control@sw,w
  7486  14F7  3187  276F  3194   	fcall	_setDelayOff_GO
  7487                           
  7488                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7489  14FA  0020               	movlb	0	; select bank0
  7490  14FB  0868               	movf	setRFSW_Control@sw,w
  7491  14FC  319E  2634  3194   	fcall	_getDimmerLights_Status
  7492  14FF  3A01               	xorlw	1
  7493  1500  1D03               	skipz
  7494  1501  2D18               	goto	l8353
  7495                           
  7496                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7497  1502  3064               	movlw	100
  7498  1503  0020               	movlb	0	; select bank0
  7499  1504  00A4               	movwf	setBuz@time
  7500  1505  3000               	movlw	0
  7501  1506  00A5               	movwf	setBuz@time+1
  7502  1507  3001               	movlw	1
  7503  1508  3196  269F  3194   	fcall	_setBuz
  7504                           
  7505                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7506  150B  0020               	movlb	0	; select bank0
  7507  150C  01DE               	clrf	setRF_DimmerLights@on
  7508  150D  0ADE               	incf	setRF_DimmerLights@on,f
  7509  150E  0868               	movf	setRFSW_Control@sw,w
  7510  150F  3197  27A1  3194   	fcall	_setRF_DimmerLights
  7511                           
  7512                           ;RF_Control_B1.c: 386: setTxData();
  7513  1512  318F  274A  3194   	fcall	_setTxData
  7514                           
  7515                           ;RF_Control_B1.c: 387: status = 1;
  7516  1515  0020               	movlb	0	; select bank0
  7517  1516  01E7               	clrf	setRFSW_Control@status
  7518  1517  0AE7               	incf	setRFSW_Control@status,f
  7519  1518                     l8353:	
  7520                           
  7521                           ;RF_Control_B1.c: 388: }
  7522                           ;RF_Control_B1.c: 389: }
  7523                           ;RF_Control_B1.c: 391: if (status == 0) {
  7524  1518  0020               	movlb	0	; select bank0
  7525  1519  08E7               	movf	setRFSW_Control@status,f
  7526  151A  1D03               	skipz
  7527  151B  0008               	return
  7528                           
  7529                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7530  151C  0868               	movf	setRFSW_Control@sw,w
  7531  151D  3193  2397  3194   	fcall	_setDimmerLights_SwOn
  7532                           
  7533                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7534  1520  0020               	movlb	0	; select bank0
  7535  1521  0868               	movf	setRFSW_Control@sw,w
  7536  1522  3194  2402         	fcall	_setDimmerLights_SwOff
  7537  1524  0008               	return
  7538  1525                     __end_of_setRFSW_Control:	
  7539                           
  7540                           	psect	text30
  7541  0C38                     __ptext30:	
  7542 ;; *************** function _setRFSW_AdjControl *****************
  7543 ;; Defined at:
  7544 ;;		line 400 in file "../src/RF_Control_B1.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  sw              1    wreg     unsigned char 
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;  sw              1   65[BANK0 ] unsigned char 
  7549 ;;  status          1   64[BANK0 ] unsigned char 
  7550 ;; Return value:  Size  Location     Type
  7551 ;;		None               void
  7552 ;; Registers used:
  7553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7554 ;; Tracked objects:
  7555 ;;		On entry : 0/0
  7556 ;;		On exit  : 0/0
  7557 ;;		Unchanged: 0/0
  7558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;Total ram usage:        4 bytes
  7564 ;; Hardware stack levels used:    1
  7565 ;; Hardware stack levels required when called:    6
  7566 ;; This function calls:
  7567 ;;		_getDimmerLights_PercentToValue
  7568 ;;		_getDimmerLights_Status
  7569 ;;		_setDimmerIntr_Dimming_RF
  7570 ;;		_setDimmerIntr_MaxmumValue
  7571 ;;		_setDimmerLights_DimmingRun
  7572 ;;		_setDimmerLights_SwOff
  7573 ;;		_setDimmerLights_SwOn
  7574 ;;		_setMemory_Modify
  7575 ;;		_setProductData
  7576 ;;		_setTxData
  7577 ;; This function is called by:
  7578 ;;		_setControl_Lights_Table
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _setRFSW_AdjControl
  7584  0C38                     _setRFSW_AdjControl:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7588                           ;setRFSW_AdjControl@sw stored from wreg
  7589  0C38  0020               	movlb	0	; select bank0
  7590  0C39  00E1               	movwf	setRFSW_AdjControl@sw
  7591                           
  7592                           ;RF_Control_B1.c: 401: char status = 0;
  7593  0C3A  01E0               	clrf	setRFSW_AdjControl@status
  7594                           
  7595                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7596  0C3B  0861               	movf	setRFSW_AdjControl@sw,w
  7597  0C3C  319E  2634  318C   	fcall	_getDimmerLights_Status
  7598  0C3F  0020               	movlb	0	; select bank0
  7599  0C40  00DE               	movwf	??_setRFSW_AdjControl
  7600  0C41  085E               	movf	??_setRFSW_AdjControl,w
  7601  0C42  00E0               	movwf	setRFSW_AdjControl@status
  7602                           
  7603                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7604  0C43  3065               	movlw	101
  7605  0C44  0023               	movlb	3	; select bank3
  7606  0C45  0229               	subwf	(_RF_Data^(0+384)+9),w
  7607  0C46  1C03               	skipc
  7608  0C47  2C4F               	goto	l8365
  7609                           
  7610                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7611  0C48  3064               	movlw	100
  7612  0C49  0020               	movlb	0	; select bank0
  7613  0C4A  00DE               	movwf	??_setRFSW_AdjControl
  7614  0C4B  085E               	movf	??_setRFSW_AdjControl,w
  7615  0C4C  0023               	movlb	3	; select bank3
  7616  0C4D  00A9               	movwf	(_RF_Data^(0+384)+9)
  7617                           
  7618                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7619  0C4E  2C54               	goto	l8369
  7620  0C4F                     l8365:	
  7621  0C4F  08A9               	movf	(_RF_Data^(0+384)+9),f
  7622  0C50  1D03               	skipz
  7623  0C51  2C54               	goto	l8369
  7624                           
  7625                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7626  0C52  01A9               	clrf	(_RF_Data^(0+384)+9)
  7627  0C53  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7628  0C54                     l8369:	
  7629                           
  7630                           ;RF_Control_B1.c: 409: }
  7631                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7632  0C54  0829               	movf	(_RF_Data^(0+384)+9),w
  7633  0C55  0020               	movlb	0	; select bank0
  7634  0C56  00DE               	movwf	??_setRFSW_AdjControl
  7635  0C57  085E               	movf	??_setRFSW_AdjControl,w
  7636  0C58  00DA               	movwf	setProductData@value
  7637  0C59  3009               	movlw	9
  7638  0C5A  319E  2618  318C   	fcall	_setProductData
  7639                           
  7640                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7641  0C5D  0020               	movlb	0	; select bank0
  7642  0C5E  0861               	movf	setRFSW_AdjControl@sw,w
  7643  0C5F  00DE               	movwf	??_setRFSW_AdjControl
  7644  0C60  085E               	movf	??_setRFSW_AdjControl,w
  7645  0C61  00DA               	movwf	setProductData@value
  7646  0C62  300B               	movlw	11
  7647  0C63  319E  2618  318C   	fcall	_setProductData
  7648                           
  7649                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7650  0C66  0020               	movlb	0	; select bank0
  7651  0C67  0861               	movf	setRFSW_AdjControl@sw,w
  7652  0C68  3E1A               	addlw	26
  7653  0C69  076D               	addwf	_product,w
  7654  0C6A  00DE               	movwf	??_setRFSW_AdjControl
  7655  0C6B  085E               	movf	??_setRFSW_AdjControl,w
  7656  0C6C  0086               	movwf	6
  7657  0C6D  3002               	movlw	2	; select bank4/5
  7658  0C6E  0087               	movwf	7
  7659  0C6F  0801               	movf	1,w
  7660  0C70  00DF               	movwf	??_setRFSW_AdjControl+1
  7661  0C71  085F               	movf	??_setRFSW_AdjControl+1,w
  7662  0C72  00DA               	movwf	setProductData@value
  7663  0C73  3011               	movlw	17
  7664  0C74  319E  2618  318C   	fcall	_setProductData
  7665                           
  7666                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7667  0C77  0023               	movlb	3	; select bank3
  7668  0C78  0829               	movf	(_RF_Data^(0+384)+9),w
  7669  0C79  0020               	movlb	0	; select bank0
  7670  0C7A  00DE               	movwf	??_setRFSW_AdjControl
  7671  0C7B  085E               	movf	??_setRFSW_AdjControl,w
  7672  0C7C  00DA               	movwf	setProductData@value
  7673  0C7D  0861               	movf	setRFSW_AdjControl@sw,w
  7674  0C7E  3E14               	addlw	20
  7675  0C7F  319E  2618  318C   	fcall	_setProductData
  7676                           
  7677                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7678  0C82  3001               	movlw	1
  7679  0C83  319E  26B0  318C   	fcall	_setMemory_Modify
  7680                           
  7681                           ;RF_Control_B1.c: 416: if (status == 1) {
  7682  0C86  0020               	movlb	0	; select bank0
  7683  0C87  0860               	movf	setRFSW_AdjControl@status,w
  7684  0C88  3A01               	xorlw	1
  7685  0C89  1D03               	skipz
  7686  0C8A  2CA2               	goto	l8379
  7687                           
  7688                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7689  0C8B  0023               	movlb	3	; select bank3
  7690  0C8C  0829               	movf	(_RF_Data^(0+384)+9),w
  7691  0C8D  3189  2135  318C   	fcall	_getDimmerLights_PercentToValue
  7692  0C90  0020               	movlb	0	; select bank0
  7693  0C91  00DE               	movwf	??_setRFSW_AdjControl
  7694  0C92  085E               	movf	??_setRFSW_AdjControl,w
  7695  0C93  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7696  0C94  0861               	movf	setRFSW_AdjControl@sw,w
  7697  0C95  319D  25D9  318C   	fcall	_setDimmerIntr_MaxmumValue
  7698                           
  7699                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7700  0C98  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7701  0C99  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7702  0C9A  0020               	movlb	0	; select bank0
  7703  0C9B  0861               	movf	setRFSW_AdjControl@sw,w
  7704  0C9C  319F  27AC  318C   	fcall	_setDimmerIntr_Dimming_RF
  7705                           
  7706                           ;RF_Control_B1.c: 419: setTxData();
  7707  0C9F  318F  274A         	fcall	_setTxData
  7708                           
  7709                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7710  0CA1  0008               	return
  7711  0CA2                     l8379:	
  7712  0CA2  0020               	movlb	0	; select bank0
  7713  0CA3  08E0               	movf	setRFSW_AdjControl@status,f
  7714  0CA4  1D03               	skipz
  7715  0CA5  0008               	return
  7716                           
  7717                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7718  0CA6  01F4               	clrf	setDimmerLights_DimmingRun@command
  7719  0CA7  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7720  0CA8  0861               	movf	setRFSW_AdjControl@sw,w
  7721  0CA9  3190  2096  318C   	fcall	_setDimmerLights_DimmingRun
  7722                           
  7723                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7724  0CAC  0020               	movlb	0	; select bank0
  7725  0CAD  0861               	movf	setRFSW_AdjControl@sw,w
  7726  0CAE  3193  2397  318C   	fcall	_setDimmerLights_SwOn
  7727                           
  7728                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7729  0CB1  0020               	movlb	0	; select bank0
  7730  0CB2  0861               	movf	setRFSW_AdjControl@sw,w
  7731  0CB3  3194  2402         	fcall	_setDimmerLights_SwOff
  7732  0CB5  0008               	return
  7733  0CB6                     __end_of_setRFSW_AdjControl:	
  7734                           
  7735                           	psect	text31
  7736  1EB0                     __ptext31:	
  7737 ;; *************** function _setMemory_Modify *****************
  7738 ;; Defined at:
  7739 ;;		line 1053 in file "../src/MCU_B1.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  command         1    wreg     unsigned char 
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;  command         1    3[COMMON] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;		None               void
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;Total ram usage:        2 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    3
  7760 ;; This function calls:
  7761 ;;		Nothing
  7762 ;; This function is called by:
  7763 ;;		_setLog_Code
  7764 ;;		_setRFSW_AdjControl
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           
  7769                           ;psect for function _setMemory_Modify
  7770  1EB0                     _setMemory_Modify:	
  7771                           
  7772                           ;incstack = 0
  7773                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7774                           ;setMemory_Modify@command stored from wreg
  7775  1EB0  00F3               	movwf	setMemory_Modify@command
  7776                           
  7777                           ;MCU_B1.c: 1054: Memory.Modify = command == 1 ? 1 : 0;
  7778  1EB1  0873               	movf	setMemory_Modify@command,w
  7779  1EB2  3A01               	xorlw	1
  7780  1EB3  3000               	movlw	0
  7781  1EB4  1903               	skipnz
  7782  1EB5  3001               	movlw	1
  7783  1EB6  00F2               	movwf	??_setMemory_Modify
  7784  1EB7  0023               	movlb	3	; select bank3
  7785  1EB8  0862               	movf	(_Memory^(0+384)+36),w
  7786  1EB9  0672               	xorwf	??_setMemory_Modify,w
  7787  1EBA  39FE               	andlw	-2
  7788  1EBB  0672               	xorwf	??_setMemory_Modify,w
  7789  1EBC  00E2               	movwf	(_Memory^(0+384)+36)
  7790                           
  7791                           ;MCU_B1.c: 1055: Memory.Time = 0;
  7792  1EBD  01E0               	clrf	(_Memory^(0+384)+34)
  7793  1EBE  01E1               	clrf	((_Memory+1)^(0+384)+34)
  7794  1EBF  0008               	return
  7795  1EC0                     __end_of_setMemory_Modify:	
  7796                           
  7797                           	psect	text32
  7798  1096                     __ptext32:	
  7799 ;; *************** function _setDimmerLights_DimmingRun *****************
  7800 ;; Defined at:
  7801 ;;		line 1000 in file "../src/Dimmer_B1.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  lights          1    wreg     unsigned char 
  7804 ;;  command         1    4[COMMON] unsigned char 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  lights          1    6[COMMON] unsigned char 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;		None               void
  7809 ;; Registers used:
  7810 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7816 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;Total ram usage:        3 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; Hardware stack levels required when called:    4
  7823 ;; This function calls:
  7824 ;;		_DimmerLights_SelectPointer
  7825 ;; This function is called by:
  7826 ;;		_setRFSW_AdjControl
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           
  7831                           ;psect for function _setDimmerLights_DimmingRun
  7832  1096                     _setDimmerLights_DimmingRun:	
  7833                           
  7834                           ;incstack = 0
  7835                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7836                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7837  1096  00F6               	movwf	setDimmerLights_DimmingRun@lights
  7838                           
  7839                           ;Dimmer_B1.c: 1001: DimmerLights_SelectPointer(lights);
  7840  1097  0876               	movf	setDimmerLights_DimmingRun@lights,w
  7841  1098  319D  25A2         	fcall	_DimmerLights_SelectPointer
  7842                           
  7843                           ;Dimmer_B1.c: 1002: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  7844  109A  0874               	movf	setDimmerLights_DimmingRun@command,w
  7845  109B  3A01               	xorlw	1
  7846  109C  3000               	movlw	0
  7847  109D  1903               	skipnz
  7848  109E  3001               	movlw	1
  7849  109F  00F5               	movwf	??_setDimmerLights_DimmingRun
  7850  10A0  0021               	movlb	1	; select bank1
  7851  10A1  0A4C               	incf	_DimmerLights^(0+128),w
  7852  10A2  0086               	movwf	6
  7853  10A3  3001               	movlw	1	; select bank2/3
  7854  10A4  0087               	movwf	7
  7855  10A5  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  7856  10A6  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  7857  10A7  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  7858  10A8  0801               	movf	1,w
  7859  10A9  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7860  10AA  39BF               	andlw	-65
  7861  10AB  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7862  10AC  0081               	movwf	1
  7863  10AD  0008               	return
  7864  10AE                     __end_of_setDimmerLights_DimmingRun:	
  7865                           
  7866                           	psect	text33
  7867  1EF1                     __ptext33:	
  7868 ;; *************** function _getRF_KeyStatus *****************
  7869 ;; Defined at:
  7870 ;;		line 166 in file "../src/RF_Control_B1.c"
  7871 ;; Parameters:    Size  Location     Type
  7872 ;;		None
  7873 ;; Auto vars:     Size  Location     Type
  7874 ;;  key             1    3[COMMON] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      unsigned char 
  7877 ;; Registers used:
  7878 ;;		wreg, status,2
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;Total ram usage:        3 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    3
  7891 ;; This function calls:
  7892 ;;		Nothing
  7893 ;; This function is called by:
  7894 ;;		_setRF_Main
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           
  7899                           ;psect for function _getRF_KeyStatus
  7900  1EF1                     _getRF_KeyStatus:	
  7901                           
  7902                           ;RF_Control_B1.c: 167: char key = 0;
  7903                           
  7904                           ;incstack = 0
  7905                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  7906  1EF1  01F3               	clrf	getRF_KeyStatus@key
  7907                           
  7908                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  7909  1EF2  01F4               	clrf	_getRF_KeyStatus$5080
  7910  1EF3  0AF4               	incf	_getRF_KeyStatus$5080,f
  7911  1EF4  0020               	movlb	0	; select bank0
  7912  1EF5  1F0C               	btfss	12,6	;volatile
  7913  1EF6  1A0C               	btfsc	12,4	;volatile
  7914  1EF7  2EFC               	goto	l6803
  7915  1EF8  1C0C               	btfss	12,0	;volatile
  7916  1EF9  1B8C               	btfsc	12,7	;volatile
  7917  1EFA  2EFC               	goto	l6803
  7918  1EFB  01F4               	clrf	_getRF_KeyStatus$5080
  7919  1EFC                     l6803:	
  7920  1EFC  0874               	movf	_getRF_KeyStatus$5080,w
  7921  1EFD  00F2               	movwf	??_getRF_KeyStatus
  7922  1EFE  0872               	movf	??_getRF_KeyStatus,w
  7923  1EFF  00F3               	movwf	getRF_KeyStatus@key
  7924                           
  7925                           ;RF_Control_B1.c: 179: return key;
  7926  1F00  0873               	movf	getRF_KeyStatus@key,w
  7927  1F01  0008               	return
  7928  1F02                     __end_of_getRF_KeyStatus:	
  7929                           
  7930                           	psect	text34
  7931  1EA0                     __ptext34:	
  7932 ;; *************** function _getBuz_GO *****************
  7933 ;; Defined at:
  7934 ;;		line 82 in file "../src/Buzzer_B1.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;  i               2    6[COMMON] int 
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  2    2[COMMON] int 
  7941 ;; Registers used:
  7942 ;;		wreg, status,2, status,0
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;Total ram usage:        6 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:    3
  7955 ;; This function calls:
  7956 ;;		Nothing
  7957 ;; This function is called by:
  7958 ;;		_setRF_Main
  7959 ;; This function uses a non-reentrant model
  7960 ;;
  7961                           
  7962                           
  7963                           ;psect for function _getBuz_GO
  7964  1EA0                     _getBuz_GO:	
  7965                           
  7966                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  7967                           
  7968                           ;incstack = 0
  7969                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  7970  1EA0  0021               	movlb	1	; select bank1
  7971  1EA1  0C3C               	rrf	_Buz1^(0+128),w
  7972  1EA2  3901               	andlw	1
  7973  1EA3  00F4               	movwf	??_getBuz_GO
  7974  1EA4  01F5               	clrf	??_getBuz_GO+1
  7975  1EA5  0874               	movf	??_getBuz_GO,w
  7976  1EA6  00F6               	movwf	getBuz_GO@i
  7977  1EA7  0875               	movf	??_getBuz_GO+1,w
  7978  1EA8  00F7               	movwf	getBuz_GO@i+1
  7979                           
  7980                           ;Buzzer_B1.c: 84: return i;
  7981  1EA9  0877               	movf	getBuz_GO@i+1,w
  7982  1EAA  01F3               	clrf	?_getBuz_GO+1
  7983  1EAB  07F3               	addwf	?_getBuz_GO+1,f
  7984  1EAC  0876               	movf	getBuz_GO@i,w
  7985  1EAD  01F2               	clrf	?_getBuz_GO
  7986  1EAE  07F2               	addwf	?_getBuz_GO,f
  7987  1EAF  0008               	return
  7988  1EB0                     __end_of_getBuz_GO:	
  7989                           
  7990                           	psect	text35
  7991  1E61                     __ptext35:	
  7992 ;; *************** function _RF_RxDisable *****************
  7993 ;; Defined at:
  7994 ;;		line 154 in file "../src/RF_Control_B1.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;		None
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;		None
  7999 ;; Return value:  Size  Location     Type
  8000 ;;		None               void
  8001 ;; Registers used:
  8002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;Total ram usage:        0 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    5
  8015 ;; This function calls:
  8016 ;;		_CC2500_WriteCommand
  8017 ;; This function is called by:
  8018 ;;		_setRF_Main
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           
  8023                           ;psect for function _RF_RxDisable
  8024  1E61                     _RF_RxDisable:	
  8025                           
  8026                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8027                           
  8028                           ;incstack = 0
  8029                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8030  1E61  0021               	movlb	1	; select bank1
  8031  1E62  18A0               	btfsc	_RF1^(0+128),1
  8032  1E63  2E66               	goto	l2123
  8033  1E64  1DA0               	btfss	_RF1^(0+128),3
  8034  1E65  0008               	return
  8035  1E66                     l2123:	
  8036                           
  8037                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8038  1E66  11A0               	bcf	_RF1^(0+128),3
  8039                           
  8040                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8041  1E67  10A0               	bcf	_RF1^(0+128),1
  8042                           
  8043                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8044  1E68  3036               	movlw	54
  8045  1E69  3190  20C8  319E   	fcall	_CC2500_WriteCommand
  8046                           
  8047                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8048  1E6C  303A               	movlw	58
  8049  1E6D  3190  20C8         	fcall	_CC2500_WriteCommand
  8050  1E6F  0008               	return
  8051  1E70                     __end_of_RF_RxDisable:	
  8052                           
  8053                           	psect	text36
  8054  099A                     __ptext36:	
  8055 ;; *************** function _CC2500_TxData *****************
  8056 ;; Defined at:
  8057 ;;		line 32 in file "../src/CC2500_B1.c"
  8058 ;; Parameters:    Size  Location     Type
  8059 ;;		None
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;  loop_e          1    7[COMMON] unsigned char 
  8062 ;; Return value:  Size  Location     Type
  8063 ;;		None               void
  8064 ;; Registers used:
  8065 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8066 ;; Tracked objects:
  8067 ;;		On entry : 0/0
  8068 ;;		On exit  : 0/0
  8069 ;;		Unchanged: 0/0
  8070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8075 ;;Total ram usage:        2 bytes
  8076 ;; Hardware stack levels used:    1
  8077 ;; Hardware stack levels required when called:    5
  8078 ;; This function calls:
  8079 ;;		_CC2500_WriteByte
  8080 ;;		_CC2500_WriteCommand
  8081 ;;		_RF_Timeout_Counter
  8082 ;;		_setRF_TimeoutCleared
  8083 ;; This function is called by:
  8084 ;;		_setRF_Main
  8085 ;; This function uses a non-reentrant model
  8086 ;;
  8087                           
  8088                           
  8089                           ;psect for function _CC2500_TxData
  8090  099A                     _CC2500_TxData:	
  8091                           
  8092                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8093                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8097  099A  3036               	movlw	54
  8098  099B  3190  20C8  3189   	fcall	_CC2500_WriteCommand
  8099                           
  8100                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8101  099E  303B               	movlw	59
  8102  099F  3190  20C8  3189   	fcall	_CC2500_WriteCommand
  8103                           
  8104                           ;CC2500_B1.c: 38: RC0 = 0;
  8105  09A2  0020               	movlb	0	; select bank0
  8106  09A3  100E               	bcf	14,0	;volatile
  8107                           
  8108                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8109  09A4  307F               	movlw	127
  8110  09A5  00F6               	movwf	??_CC2500_TxData
  8111  09A6  0876               	movf	??_CC2500_TxData,w
  8112  09A7  0021               	movlb	1	; select bank1
  8113  09A8  00D0               	movwf	_SPI0Buffer^(0+128)
  8114                           
  8115                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8116  09A9  29AD               	goto	l8547
  8117  09AA                     l8545:	
  8118                           
  8119                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8120  09AA  319F  27C1  3189   	fcall	_RF_Timeout_Counter
  8121  09AD                     l8547:	
  8122  09AD  0020               	movlb	0	; select bank0
  8123  09AE  1E8E               	btfss	14,5	;volatile
  8124  09AF  29B3               	goto	l8551
  8125  09B0  0021               	movlb	1	; select bank1
  8126  09B1  1F21               	btfss	(_RF1^(0+128)+1),6
  8127  09B2  29AA               	goto	l8545
  8128  09B3                     l8551:	
  8129                           
  8130                           ;CC2500_B1.c: 42: };
  8131                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8132  09B3  319C  24DC  3189   	fcall	_setRF_TimeoutCleared
  8133                           
  8134                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8135  09B6  3190  207E  3189   	fcall	_CC2500_WriteByte
  8136                           
  8137                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8138  09B9  0021               	movlb	1	; select bank1
  8139  09BA  0852               	movf	_Tx_Length^(0+128),w
  8140  09BB  00F6               	movwf	??_CC2500_TxData
  8141  09BC  0876               	movf	??_CC2500_TxData,w
  8142  09BD  00D0               	movwf	_SPI0Buffer^(0+128)
  8143                           
  8144                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8145  09BE  3190  207E  3189   	fcall	_CC2500_WriteByte
  8146                           
  8147                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8148  09C1  01F7               	clrf	CC2500_TxData@loop_e
  8149  09C2                     l8565:	
  8150  09C2  0021               	movlb	1	; select bank1
  8151  09C3  0852               	movf	_Tx_Length^(0+128),w
  8152  09C4  0277               	subwf	CC2500_TxData@loop_e,w
  8153  09C5  1803               	btfsc	3,0
  8154  09C6  29D9               	goto	l231
  8155                           
  8156                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8157  09C7  0877               	movf	CC2500_TxData@loop_e,w
  8158  09C8  3EA0               	addlw	_RF_Data& (0+255)
  8159  09C9  0086               	movwf	6
  8160  09CA  3001               	movlw	1	; select bank3/4
  8161  09CB  0087               	movwf	7
  8162  09CC  0801               	movf	1,w
  8163  09CD  00F6               	movwf	??_CC2500_TxData
  8164  09CE  0876               	movf	??_CC2500_TxData,w
  8165  09CF  0021               	movlb	1	; select bank1
  8166  09D0  00D0               	movwf	_SPI0Buffer^(0+128)
  8167                           
  8168                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8169  09D1  3190  207E  3189   	fcall	_CC2500_WriteByte
  8170  09D4  3001               	movlw	1
  8171  09D5  00F6               	movwf	??_CC2500_TxData
  8172  09D6  0876               	movf	??_CC2500_TxData,w
  8173  09D7  07F7               	addwf	CC2500_TxData@loop_e,f
  8174  09D8  29C2               	goto	l8565
  8175  09D9                     l231:	
  8176                           
  8177                           ;CC2500_B1.c: 51: }
  8178                           ;CC2500_B1.c: 52: RC0 = 1;
  8179  09D9  0020               	movlb	0	; select bank0
  8180  09DA  140E               	bsf	14,0	;volatile
  8181                           
  8182                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8183  09DB  3035               	movlw	53
  8184  09DC  3190  20C8  3189   	fcall	_CC2500_WriteCommand
  8185                           
  8186                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8187  09DF  29E3               	goto	l8571
  8188  09E0                     l8569:	
  8189                           
  8190                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8191  09E0  319F  27C1  3189   	fcall	_RF_Timeout_Counter
  8192  09E3                     l8571:	
  8193  09E3  0020               	movlb	0	; select bank0
  8194  09E4  188E               	btfsc	14,1	;volatile
  8195  09E5  29E9               	goto	l8575
  8196  09E6  0021               	movlb	1	; select bank1
  8197  09E7  1F21               	btfss	(_RF1^(0+128)+1),6
  8198  09E8  29E0               	goto	l8569
  8199  09E9                     l8575:	
  8200                           
  8201                           ;CC2500_B1.c: 56: };
  8202                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8203  09E9  319C  24DC  3189   	fcall	_setRF_TimeoutCleared
  8204                           
  8205                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8206  09EC  29F0               	goto	l8579
  8207  09ED                     l8577:	
  8208                           
  8209                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8210  09ED  319F  27C1  3189   	fcall	_RF_Timeout_Counter
  8211  09F0                     l8579:	
  8212  09F0  0020               	movlb	0	; select bank0
  8213  09F1  1C8E               	btfss	14,1	;volatile
  8214  09F2  29F6               	goto	l8583
  8215  09F3  0021               	movlb	1	; select bank1
  8216  09F4  1F21               	btfss	(_RF1^(0+128)+1),6
  8217  09F5  29ED               	goto	l8577
  8218  09F6                     l8583:	
  8219                           
  8220                           ;CC2500_B1.c: 61: };
  8221                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8222  09F6  319C  24DC  3189   	fcall	_setRF_TimeoutCleared
  8223                           
  8224                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8225  09F9  3036               	movlw	54
  8226  09FA  3190  20C8  3189   	fcall	_CC2500_WriteCommand
  8227                           
  8228                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8229  09FD  303B               	movlw	59
  8230  09FE  3190  20C8         	fcall	_CC2500_WriteCommand
  8231                           
  8232                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8233  0A00  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8234  0A01  0008               	return
  8235  0A02                     __end_of_CC2500_TxData:	
  8236                           
  8237                           	psect	text37
  8238  086F                     __ptext37:	
  8239 ;; *************** function _CC2500_RxData *****************
  8240 ;; Defined at:
  8241 ;;		line 73 in file "../src/CC2500_B1.c"
  8242 ;; Parameters:    Size  Location     Type
  8243 ;;		None
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  loop_f          1    7[COMMON] unsigned char 
  8246 ;; Return value:  Size  Location     Type
  8247 ;;		None               void
  8248 ;; Registers used:
  8249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;Total ram usage:        2 bytes
  8260 ;; Hardware stack levels used:    1
  8261 ;; Hardware stack levels required when called:    5
  8262 ;; This function calls:
  8263 ;;		_CC2500_ReadByte
  8264 ;;		_CC2500_ReadStatus
  8265 ;;		_CC2500_WriteByte
  8266 ;;		_CC2500_WriteCommand
  8267 ;;		_RF_Timeout_Counter
  8268 ;;		_setRF_TimeoutCleared
  8269 ;; This function is called by:
  8270 ;;		_setRF_Main
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           
  8275                           ;psect for function _CC2500_RxData
  8276  086F                     _CC2500_RxData:	
  8277                           
  8278                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8279                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8280                           
  8281                           ;incstack = 0
  8282                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8283  086F  0020               	movlb	0	; select bank0
  8284  0870  188E               	btfsc	14,1	;volatile
  8285  0871  0008               	return
  8286                           
  8287                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8288  0872  303B               	movlw	59
  8289  0873  3192  220C  3188   	fcall	_CC2500_ReadStatus
  8290                           
  8291                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8292  0876  0021               	movlb	1	; select bank1
  8293  0877  0855               	movf	_s_data^(0+128),w
  8294  0878  1903               	btfsc	3,2
  8295  0879  0008               	return
  8296                           
  8297                           ;CC2500_B1.c: 90: RC0 = 0;
  8298  087A  0020               	movlb	0	; select bank0
  8299  087B  100E               	bcf	14,0	;volatile
  8300                           
  8301                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8302  087C  30FF               	movlw	255
  8303  087D  00F6               	movwf	??_CC2500_RxData
  8304  087E  0876               	movf	??_CC2500_RxData,w
  8305  087F  0021               	movlb	1	; select bank1
  8306  0880  00D0               	movwf	_SPI0Buffer^(0+128)
  8307                           
  8308                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8309  0881  2885               	goto	l8603
  8310  0882                     l8601:	
  8311                           
  8312                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8313  0882  319F  27C1  3188   	fcall	_RF_Timeout_Counter
  8314  0885                     l8603:	
  8315  0885  0020               	movlb	0	; select bank0
  8316  0886  1E8E               	btfss	14,5	;volatile
  8317  0887  288B               	goto	l8607
  8318  0888  0021               	movlb	1	; select bank1
  8319  0889  1F21               	btfss	(_RF1^(0+128)+1),6
  8320  088A  2882               	goto	l8601
  8321  088B                     l8607:	
  8322                           
  8323                           ;CC2500_B1.c: 95: };
  8324                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8325  088B  319C  24DC  3188   	fcall	_setRF_TimeoutCleared
  8326                           
  8327                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8328  088E  3190  207E  3188   	fcall	_CC2500_WriteByte
  8329                           
  8330                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8331  0891  3191  2133  3188   	fcall	_CC2500_ReadByte
  8332                           
  8333                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8334  0894  0021               	movlb	1	; select bank1
  8335  0895  0850               	movf	_SPI0Buffer^(0+128),w
  8336  0896  00F6               	movwf	??_CC2500_RxData
  8337  0897  0876               	movf	??_CC2500_RxData,w
  8338  0898  00CF               	movwf	_Rx_Length^(0+128)
  8339                           
  8340                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8341  0899  01F7               	clrf	CC2500_RxData@loop_f
  8342  089A                     l8623:	
  8343  089A  084F               	movf	_Rx_Length^(0+128),w
  8344  089B  0277               	subwf	CC2500_RxData@loop_f,w
  8345  089C  1803               	btfsc	3,0
  8346  089D  28B0               	goto	l8625
  8347                           
  8348                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8349  089E  3191  2133  3188   	fcall	_CC2500_ReadByte
  8350                           
  8351                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8352  08A1  0021               	movlb	1	; select bank1
  8353  08A2  0850               	movf	_SPI0Buffer^(0+128),w
  8354  08A3  00F6               	movwf	??_CC2500_RxData
  8355  08A4  0877               	movf	CC2500_RxData@loop_f,w
  8356  08A5  3EA0               	addlw	_RF_Data& (0+255)
  8357  08A6  0086               	movwf	6
  8358  08A7  3001               	movlw	1	; select bank3/4
  8359  08A8  0087               	movwf	7
  8360  08A9  0876               	movf	??_CC2500_RxData,w
  8361  08AA  0081               	movwf	1
  8362  08AB  3001               	movlw	1
  8363  08AC  00F6               	movwf	??_CC2500_RxData
  8364  08AD  0876               	movf	??_CC2500_RxData,w
  8365  08AE  07F7               	addwf	CC2500_RxData@loop_f,f
  8366  08AF  289A               	goto	l8623
  8367  08B0                     l8625:	
  8368                           
  8369                           ;CC2500_B1.c: 104: }
  8370                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8371  08B0  3191  2133  3188   	fcall	_CC2500_ReadByte
  8372                           
  8373                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8374  08B3  0021               	movlb	1	; select bank1
  8375  08B4  0850               	movf	_SPI0Buffer^(0+128),w
  8376  08B5  00F6               	movwf	??_CC2500_RxData
  8377  08B6  0876               	movf	??_CC2500_RxData,w
  8378  08B7  00CE               	movwf	_RSSI^(0+128)
  8379                           
  8380                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8381  08B8  3191  2133  3188   	fcall	_CC2500_ReadByte
  8382                           
  8383                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8384  08BB  0021               	movlb	1	; select bank1
  8385  08BC  0850               	movf	_SPI0Buffer^(0+128),w
  8386  08BD  00F6               	movwf	??_CC2500_RxData
  8387  08BE  0876               	movf	??_CC2500_RxData,w
  8388  08BF  00C8               	movwf	_CRC^(0+128)
  8389                           
  8390                           ;CC2500_B1.c: 109: RC0 = 1;
  8391  08C0  0020               	movlb	0	; select bank0
  8392  08C1  140E               	bsf	14,0	;volatile
  8393                           
  8394                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8395  08C2  0021               	movlb	1	; select bank1
  8396  08C3  1BC8               	btfsc	_CRC^(0+128),7
  8397                           
  8398                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8399  08C4  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8400                           
  8401                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8402  08C5  11A0               	bcf	_RF1^(0+128),3
  8403                           
  8404                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8405  08C6  14A0               	bsf	_RF1^(0+128),1
  8406                           
  8407                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8408  08C7  3036               	movlw	54
  8409  08C8  3190  20C8  3188   	fcall	_CC2500_WriteCommand
  8410                           
  8411                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8412  08CB  303A               	movlw	58
  8413  08CC  3190  20C8         	fcall	_CC2500_WriteCommand
  8414  08CE  0021               	movlb	1	; select bank1
  8415  08CF  0008               	return
  8416  08D0                     __end_of_CC2500_RxData:	
  8417                           
  8418                           	psect	text38
  8419  120C                     __ptext38:	
  8420 ;; *************** function _CC2500_ReadStatus *****************
  8421 ;; Defined at:
  8422 ;;		line 308 in file "../src/CC2500_B1.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;  status_addr     1    wreg     unsigned char 
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  status_addr     1    5[COMMON] unsigned char 
  8427 ;; Return value:  Size  Location     Type
  8428 ;;		None               void
  8429 ;; Registers used:
  8430 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8431 ;; Tracked objects:
  8432 ;;		On entry : 0/0
  8433 ;;		On exit  : 0/0
  8434 ;;		Unchanged: 0/0
  8435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;Total ram usage:        2 bytes
  8441 ;; Hardware stack levels used:    1
  8442 ;; Hardware stack levels required when called:    4
  8443 ;; This function calls:
  8444 ;;		_CC2500_ReadByte
  8445 ;;		_CC2500_WriteByte
  8446 ;;		_RF_Timeout_Counter
  8447 ;;		_setRF_TimeoutCleared
  8448 ;; This function is called by:
  8449 ;;		_CC2500_RxData
  8450 ;; This function uses a non-reentrant model
  8451 ;;
  8452                           
  8453                           
  8454                           ;psect for function _CC2500_ReadStatus
  8455  120C                     _CC2500_ReadStatus:	
  8456                           
  8457                           ;incstack = 0
  8458                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8459                           ;CC2500_ReadStatus@status_addr stored from wreg
  8460  120C  00F5               	movwf	CC2500_ReadStatus@status_addr
  8461                           
  8462                           ;CC2500_B1.c: 309: RC0 = 0;
  8463  120D  0020               	movlb	0	; select bank0
  8464  120E  100E               	bcf	14,0	;volatile
  8465                           
  8466                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8467  120F  0875               	movf	CC2500_ReadStatus@status_addr,w
  8468  1210  3EC0               	addlw	192
  8469  1211  00F4               	movwf	??_CC2500_ReadStatus
  8470  1212  0874               	movf	??_CC2500_ReadStatus,w
  8471  1213  0021               	movlb	1	; select bank1
  8472  1214  00D0               	movwf	_SPI0Buffer^(0+128)
  8473                           
  8474                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8475  1215  2A19               	goto	l8389
  8476  1216                     l8387:	
  8477                           
  8478                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8479  1216  319F  27C1  3192   	fcall	_RF_Timeout_Counter
  8480  1219                     l8389:	
  8481  1219  0020               	movlb	0	; select bank0
  8482  121A  1E8E               	btfss	14,5	;volatile
  8483  121B  2A1F               	goto	l8393
  8484  121C  0021               	movlb	1	; select bank1
  8485  121D  1F21               	btfss	(_RF1^(0+128)+1),6
  8486  121E  2A16               	goto	l8387
  8487  121F                     l8393:	
  8488                           
  8489                           ;CC2500_B1.c: 314: };
  8490                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8491  121F  319C  24DC  3192   	fcall	_setRF_TimeoutCleared
  8492                           
  8493                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8494  1222  3190  207E  3192   	fcall	_CC2500_WriteByte
  8495                           
  8496                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8497  1225  3191  2133         	fcall	_CC2500_ReadByte
  8498                           
  8499                           ;CC2500_B1.c: 319: RC0 = 1;
  8500  1227  0020               	movlb	0	; select bank0
  8501  1228  140E               	bsf	14,0	;volatile
  8502                           
  8503                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8504  1229  0021               	movlb	1	; select bank1
  8505  122A  0850               	movf	_SPI0Buffer^(0+128),w
  8506  122B  00F4               	movwf	??_CC2500_ReadStatus
  8507  122C  0874               	movf	??_CC2500_ReadStatus,w
  8508  122D  00D5               	movwf	_s_data^(0+128)
  8509  122E  0008               	return
  8510  122F                     __end_of_CC2500_ReadStatus:	
  8511                           
  8512                           	psect	text39
  8513  1133                     __ptext39:	
  8514 ;; *************** function _CC2500_ReadByte *****************
  8515 ;; Defined at:
  8516 ;;		line 242 in file "../src/CC2500_B1.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;		None
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  loop_b          1    3[COMMON] unsigned char 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;		None               void
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;Total ram usage:        2 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    3
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_CC2500_RxData
  8541 ;;		_CC2500_ReadStatus
  8542 ;;		_CC2500_ReadREG
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           
  8547                           ;psect for function _CC2500_ReadByte
  8548  1133                     _CC2500_ReadByte:	
  8549                           
  8550                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8551                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8552                           
  8553                           ;incstack = 0
  8554                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8555  1133  01F3               	clrf	CC2500_ReadByte@loop_b
  8556  1134                     L2:	
  8557  1134  3008               	movlw	8
  8558  1135  0273               	subwf	CC2500_ReadByte@loop_b,w
  8559  1136  1803               	btfsc	3,0
  8560  1137  0008               	return
  8561                           
  8562                           ;CC2500_B1.c: 245: RC3 = 1;
  8563  1138  0020               	movlb	0	; select bank0
  8564  1139  158E               	bsf	14,3	;volatile
  8565                           
  8566                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8567  113A  1003               	clrc
  8568  113B  0021               	movlb	1	; select bank1
  8569  113C  0DD0               	rlf	_SPI0Buffer^(0+128),f
  8570                           
  8571                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8572  113D  0020               	movlb	0	; select bank0
  8573  113E  1E8E               	btfss	14,5	;volatile
  8574  113F  2943               	goto	l6157
  8575                           
  8576                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8577  1140  0021               	movlb	1	; select bank1
  8578  1141  1450               	bsf	_SPI0Buffer^(0+128),0
  8579  1142  2948               	goto	l6159
  8580  1143                     l6157:	
  8581                           
  8582                           ;CC2500_B1.c: 249: else
  8583                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8584  1143  30FE               	movlw	254
  8585  1144  00F2               	movwf	??_CC2500_ReadByte
  8586  1145  0872               	movf	??_CC2500_ReadByte,w
  8587  1146  0021               	movlb	1	; select bank1
  8588  1147  05D0               	andwf	_SPI0Buffer^(0+128),f
  8589  1148                     l6159:	
  8590                           
  8591                           ;CC2500_B1.c: 251: RC3 = 0;
  8592  1148  0020               	movlb	0	; select bank0
  8593  1149  118E               	bcf	14,3	;volatile
  8594  114A  3001               	movlw	1
  8595  114B  00F2               	movwf	??_CC2500_ReadByte
  8596  114C  0872               	movf	??_CC2500_ReadByte,w
  8597  114D  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8598  114E  2934               	goto	L2
  8599  114F                     __end_of_CC2500_ReadByte:	
  8600                           
  8601                           	psect	text40
  8602  1FD6                     __ptext40:	
  8603 ;; *************** function _CC2500_PowerOnInitial *****************
  8604 ;; Defined at:
  8605 ;;		line 126 in file "../src/CC2500_B1.c"
  8606 ;; Parameters:    Size  Location     Type
  8607 ;;		None
  8608 ;; Auto vars:     Size  Location     Type
  8609 ;;		None
  8610 ;; Return value:  Size  Location     Type
  8611 ;;		None               void
  8612 ;; Registers used:
  8613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : 0/0
  8616 ;;		On exit  : 0/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;Total ram usage:        0 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:    6
  8626 ;; This function calls:
  8627 ;;		_CC2500_ClearRXFIFO
  8628 ;;		_CC2500_ClearTXFIFO
  8629 ;;		_CC2500_FrequencyCabr
  8630 ;;		_CC2500_InitPATable
  8631 ;;		_CC2500_InitSetREG
  8632 ;;		_CC2500_PowerRST
  8633 ;;		_CC2500_SIDLEMode
  8634 ;; This function is called by:
  8635 ;;		_main
  8636 ;;		_setRF_Main
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           
  8641                           ;psect for function _CC2500_PowerOnInitial
  8642  1FD6                     _CC2500_PowerOnInitial:	
  8643                           
  8644                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8648  1FD6  3195  2525  319F   	fcall	_CC2500_PowerRST
  8649                           
  8650                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8651  1FD9  3192  22A5  319F   	fcall	_CC2500_InitSetREG
  8652                           
  8653                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8654  1FDC  3191  216C  319F   	fcall	_CC2500_InitPATable
  8655                           
  8656                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8657  1FDF  319C  24E4  319F   	fcall	_CC2500_ClearTXFIFO
  8658                           
  8659                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8660  1FE2  319C  24E0  319F   	fcall	_CC2500_ClearRXFIFO
  8661                           
  8662                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8663  1FE5  319D  25CE  319F   	fcall	_CC2500_FrequencyCabr
  8664                           
  8665                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8666  1FE8  319C  24E8         	fcall	_CC2500_SIDLEMode
  8667  1FEA  0008               	return
  8668  1FEB                     __end_of_CC2500_PowerOnInitial:	
  8669                           
  8670                           	psect	text41
  8671  1CE8                     __ptext41:	
  8672 ;; *************** function _CC2500_SIDLEMode *****************
  8673 ;; Defined at:
  8674 ;;		line 216 in file "../src/CC2500_B1.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;		None
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;		None
  8679 ;; Return value:  Size  Location     Type
  8680 ;;		None               void
  8681 ;; Registers used:
  8682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;Total ram usage:        0 bytes
  8693 ;; Hardware stack levels used:    1
  8694 ;; Hardware stack levels required when called:    5
  8695 ;; This function calls:
  8696 ;;		_CC2500_WriteCommand
  8697 ;; This function is called by:
  8698 ;;		_CC2500_PowerOnInitial
  8699 ;; This function uses a non-reentrant model
  8700 ;;
  8701                           
  8702                           
  8703                           ;psect for function _CC2500_SIDLEMode
  8704  1CE8                     _CC2500_SIDLEMode:	
  8705                           
  8706                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8707                           
  8708                           ;incstack = 0
  8709                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8710  1CE8  3036               	movlw	54
  8711  1CE9  3190  20C8         	fcall	_CC2500_WriteCommand
  8712  1CEB  0008               	return
  8713  1CEC                     __end_of_CC2500_SIDLEMode:	
  8714                           
  8715                           	psect	text42
  8716  1525                     __ptext42:	
  8717 ;; *************** function _CC2500_PowerRST *****************
  8718 ;; Defined at:
  8719 ;;		line 139 in file "../src/CC2500_B1.c"
  8720 ;; Parameters:    Size  Location     Type
  8721 ;;		None
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;		None
  8724 ;; Return value:  Size  Location     Type
  8725 ;;		None               void
  8726 ;; Registers used:
  8727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8728 ;; Tracked objects:
  8729 ;;		On entry : 0/0
  8730 ;;		On exit  : 0/0
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;Total ram usage:        1 bytes
  8738 ;; Hardware stack levels used:    1
  8739 ;; Hardware stack levels required when called:    4
  8740 ;; This function calls:
  8741 ;;		_CC2500_WriteByte
  8742 ;;		_DelayTime_1us
  8743 ;;		_RF_Timeout_Counter
  8744 ;;		_setRF_TimeoutCleared
  8745 ;; This function is called by:
  8746 ;;		_CC2500_PowerOnInitial
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           
  8751                           ;psect for function _CC2500_PowerRST
  8752  1525                     _CC2500_PowerRST:	
  8753                           
  8754                           ;CC2500_B1.c: 140: RC3 = 0;
  8755                           
  8756                           ;incstack = 0
  8757                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8758  1525  0020               	movlb	0	; select bank0
  8759  1526  118E               	bcf	14,3	;volatile
  8760                           
  8761                           ;CC2500_B1.c: 141: RC4 = 0;
  8762  1527  120E               	bcf	14,4	;volatile
  8763                           
  8764                           ;CC2500_B1.c: 142: RC0 = 1;
  8765  1528  140E               	bsf	14,0	;volatile
  8766                           
  8767                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8768  1529  300A               	movlw	10
  8769  152A  00F2               	movwf	DelayTime_1us@count
  8770  152B  3000               	movlw	0
  8771  152C  00F3               	movwf	DelayTime_1us@count+1
  8772  152D  3192  222F  3195   	fcall	_DelayTime_1us
  8773                           
  8774                           ;CC2500_B1.c: 144: RC0 = 0;
  8775  1530  0020               	movlb	0	; select bank0
  8776  1531  100E               	bcf	14,0	;volatile
  8777                           
  8778                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8779  1532  300A               	movlw	10
  8780  1533  00F2               	movwf	DelayTime_1us@count
  8781  1534  3000               	movlw	0
  8782  1535  00F3               	movwf	DelayTime_1us@count+1
  8783  1536  3192  222F  3195   	fcall	_DelayTime_1us
  8784                           
  8785                           ;CC2500_B1.c: 146: RC0 = 1;
  8786  1539  0020               	movlb	0	; select bank0
  8787  153A  140E               	bsf	14,0	;volatile
  8788                           
  8789                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8790  153B  3028               	movlw	40
  8791  153C  00F2               	movwf	DelayTime_1us@count
  8792  153D  3000               	movlw	0
  8793  153E  00F3               	movwf	DelayTime_1us@count+1
  8794  153F  3192  222F  3195   	fcall	_DelayTime_1us
  8795                           
  8796                           ;CC2500_B1.c: 148: RC0 = 0;
  8797  1542  0020               	movlb	0	; select bank0
  8798  1543  100E               	bcf	14,0	;volatile
  8799                           
  8800                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8801  1544  3030               	movlw	48
  8802  1545  00F8               	movwf	??_CC2500_PowerRST
  8803  1546  0878               	movf	??_CC2500_PowerRST,w
  8804  1547  0021               	movlb	1	; select bank1
  8805  1548  00D0               	movwf	_SPI0Buffer^(0+128)
  8806                           
  8807                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  8808  1549  2D4D               	goto	l8417
  8809  154A                     l8415:	
  8810                           
  8811                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8812  154A  319F  27C1  3195   	fcall	_RF_Timeout_Counter
  8813  154D                     l8417:	
  8814  154D  0020               	movlb	0	; select bank0
  8815  154E  1E8E               	btfss	14,5	;volatile
  8816  154F  2D53               	goto	l8421
  8817  1550  0021               	movlb	1	; select bank1
  8818  1551  1F21               	btfss	(_RF1^(0+128)+1),6
  8819  1552  2D4A               	goto	l8415
  8820  1553                     l8421:	
  8821                           
  8822                           ;CC2500_B1.c: 152: };
  8823                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8824  1553  319C  24DC  3195   	fcall	_setRF_TimeoutCleared
  8825                           
  8826                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8827  1556  3190  207E  3195   	fcall	_CC2500_WriteByte
  8828                           
  8829                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  8830  1559  2D5D               	goto	l8427
  8831  155A                     l8425:	
  8832                           
  8833                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8834  155A  319F  27C1  3195   	fcall	_RF_Timeout_Counter
  8835  155D                     l8427:	
  8836  155D  0020               	movlb	0	; select bank0
  8837  155E  1E8E               	btfss	14,5	;volatile
  8838  155F  2D63               	goto	l8431
  8839  1560  0021               	movlb	1	; select bank1
  8840  1561  1F21               	btfss	(_RF1^(0+128)+1),6
  8841  1562  2D5A               	goto	l8425
  8842  1563                     l8431:	
  8843                           
  8844                           ;CC2500_B1.c: 157: };
  8845                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  8846  1563  319C  24DC         	fcall	_setRF_TimeoutCleared
  8847                           
  8848                           ;CC2500_B1.c: 159: RC4 = 0;
  8849  1565  0020               	movlb	0	; select bank0
  8850  1566  120E               	bcf	14,4	;volatile
  8851                           
  8852                           ;CC2500_B1.c: 160: RC0 = 1;
  8853  1567  140E               	bsf	14,0	;volatile
  8854  1568  0008               	return
  8855  1569                     __end_of_CC2500_PowerRST:	
  8856                           
  8857                           	psect	text43
  8858  12A5                     __ptext43:	
  8859 ;; *************** function _CC2500_InitSetREG *****************
  8860 ;; Defined at:
  8861 ;;		line 166 in file "../src/CC2500_B1.c"
  8862 ;; Parameters:    Size  Location     Type
  8863 ;;		None
  8864 ;; Auto vars:     Size  Location     Type
  8865 ;;  loop_c          1    2[BANK0 ] unsigned char 
  8866 ;;  temp2           1    1[BANK0 ] unsigned char 
  8867 ;;  temp1           1    0[BANK0 ] unsigned char 
  8868 ;; Return value:  Size  Location     Type
  8869 ;;		None               void
  8870 ;; Registers used:
  8871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8879 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;Total ram usage:        4 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    5
  8884 ;; This function calls:
  8885 ;;		_CC2500_WriteREG
  8886 ;; This function is called by:
  8887 ;;		_CC2500_PowerOnInitial
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           
  8892                           ;psect for function _CC2500_InitSetREG
  8893  12A5                     _CC2500_InitSetREG:	
  8894                           
  8895                           ;CC2500_B1.c: 167: unsigned char loop_c;
  8896                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  8897                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  8898                           
  8899                           ;incstack = 0
  8900                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8901  12A5  0020               	movlb	0	; select bank0
  8902  12A6  01A2               	clrf	CC2500_InitSetREG@loop_c
  8903  12A7                     L3:	
  8904  12A7  302F               	movlw	47
  8905  12A8  0222               	subwf	CC2500_InitSetREG@loop_c,w
  8906  12A9  1803               	btfsc	3,0
  8907  12AA  0008               	return
  8908                           
  8909                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  8910  12AB  0822               	movf	CC2500_InitSetREG@loop_c,w
  8911  12AC  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  8912  12AD  0084               	movwf	4
  8913  12AE  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  8914  12AF  1803               	skipnc
  8915  12B0  3E01               	addlw	1
  8916  12B1  0085               	movwf	5
  8917  12B2  0800               	movf	0,w	;code access
  8918  12B3  00F7               	movwf	??_CC2500_InitSetREG
  8919  12B4  0877               	movf	??_CC2500_InitSetREG,w
  8920  12B5  00A0               	movwf	CC2500_InitSetREG@temp1
  8921                           
  8922                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  8923  12B6  0822               	movf	CC2500_InitSetREG@loop_c,w
  8924  12B7  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  8925  12B8  0084               	movwf	4
  8926  12B9  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  8927  12BA  1803               	skipnc
  8928  12BB  3E01               	addlw	1
  8929  12BC  0085               	movwf	5
  8930  12BD  0800               	movf	0,w	;code access
  8931  12BE  00F7               	movwf	??_CC2500_InitSetREG
  8932  12BF  0877               	movf	??_CC2500_InitSetREG,w
  8933  12C0  00A1               	movwf	CC2500_InitSetREG@temp2
  8934                           
  8935                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  8936  12C1  0821               	movf	CC2500_InitSetREG@temp2,w
  8937  12C2  00F7               	movwf	??_CC2500_InitSetREG
  8938  12C3  0877               	movf	??_CC2500_InitSetREG,w
  8939  12C4  00F4               	movwf	CC2500_WriteREG@value
  8940  12C5  0820               	movf	CC2500_InitSetREG@temp1,w
  8941  12C6  3191  21EA  3192   	fcall	_CC2500_WriteREG
  8942  12C9  3001               	movlw	1
  8943  12CA  00F7               	movwf	??_CC2500_InitSetREG
  8944  12CB  0877               	movf	??_CC2500_InitSetREG,w
  8945  12CC  0020               	movlb	0	; select bank0
  8946  12CD  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  8947  12CE  2AA7               	goto	L3
  8948  12CF                     __end_of_CC2500_InitSetREG:	
  8949                           
  8950                           	psect	text44
  8951  116C                     __ptext44:	
  8952 ;; *************** function _CC2500_InitPATable *****************
  8953 ;; Defined at:
  8954 ;;		line 181 in file "../src/CC2500_B1.c"
  8955 ;; Parameters:    Size  Location     Type
  8956 ;;		None
  8957 ;; Auto vars:     Size  Location     Type
  8958 ;;  loop_d          1    9[COMMON] unsigned char 
  8959 ;;  temp            1    8[COMMON] unsigned char 
  8960 ;; Return value:  Size  Location     Type
  8961 ;;		None               void
  8962 ;; Registers used:
  8963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8964 ;; Tracked objects:
  8965 ;;		On entry : 0/0
  8966 ;;		On exit  : 0/0
  8967 ;;		Unchanged: 0/0
  8968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8970 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8972 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;Total ram usage:        3 bytes
  8974 ;; Hardware stack levels used:    1
  8975 ;; Hardware stack levels required when called:    5
  8976 ;; This function calls:
  8977 ;;		_CC2500_WriteREG
  8978 ;; This function is called by:
  8979 ;;		_CC2500_PowerOnInitial
  8980 ;; This function uses a non-reentrant model
  8981 ;;
  8982                           
  8983                           
  8984                           ;psect for function _CC2500_InitPATable
  8985  116C                     _CC2500_InitPATable:	
  8986                           
  8987                           ;CC2500_B1.c: 182: unsigned char loop_d;
  8988                           ;CC2500_B1.c: 183: unsigned char temp;
  8989                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8993  116C  01F9               	clrf	CC2500_InitPATable@loop_d
  8994  116D                     L4:	
  8995  116D  3008               	movlw	8
  8996  116E  0279               	subwf	CC2500_InitPATable@loop_d,w
  8997  116F  1803               	btfsc	3,0
  8998  1170  0008               	return
  8999                           
  9000                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9001  1171  0879               	movf	CC2500_InitPATable@loop_d,w
  9002  1172  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9003  1173  0084               	movwf	4
  9004  1174  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9005  1175  1803               	skipnc
  9006  1176  3E01               	addlw	1
  9007  1177  0085               	movwf	5
  9008  1178  0800               	movf	0,w	;code access
  9009  1179  00F7               	movwf	??_CC2500_InitPATable
  9010  117A  0877               	movf	??_CC2500_InitPATable,w
  9011  117B  00F8               	movwf	CC2500_InitPATable@temp
  9012                           
  9013                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9014  117C  0878               	movf	CC2500_InitPATable@temp,w
  9015  117D  00F7               	movwf	??_CC2500_InitPATable
  9016  117E  0877               	movf	??_CC2500_InitPATable,w
  9017  117F  00F4               	movwf	CC2500_WriteREG@value
  9018  1180  303E               	movlw	62
  9019  1181  3191  21EA  3191   	fcall	_CC2500_WriteREG
  9020  1184  3001               	movlw	1
  9021  1185  00F7               	movwf	??_CC2500_InitPATable
  9022  1186  0877               	movf	??_CC2500_InitPATable,w
  9023  1187  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9024  1188  296D               	goto	L4
  9025  1189                     __end_of_CC2500_InitPATable:	
  9026                           
  9027                           	psect	text45
  9028  11EA                     __ptext45:	
  9029 ;; *************** function _CC2500_WriteREG *****************
  9030 ;; Defined at:
  9031 ;;		line 258 in file "../src/CC2500_B1.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;  w_addr          1    wreg     unsigned char 
  9034 ;;  value           1    4[COMMON] unsigned char 
  9035 ;; Auto vars:     Size  Location     Type
  9036 ;;  w_addr          1    6[COMMON] unsigned char 
  9037 ;; Return value:  Size  Location     Type
  9038 ;;		None               void
  9039 ;; Registers used:
  9040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9041 ;; Tracked objects:
  9042 ;;		On entry : 0/0
  9043 ;;		On exit  : 0/0
  9044 ;;		Unchanged: 0/0
  9045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9046 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9050 ;;Total ram usage:        3 bytes
  9051 ;; Hardware stack levels used:    1
  9052 ;; Hardware stack levels required when called:    4
  9053 ;; This function calls:
  9054 ;;		_CC2500_WriteByte
  9055 ;;		_RF_Timeout_Counter
  9056 ;;		_setRF_TimeoutCleared
  9057 ;; This function is called by:
  9058 ;;		_CC2500_InitSetREG
  9059 ;;		_CC2500_InitPATable
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           
  9064                           ;psect for function _CC2500_WriteREG
  9065  11EA                     _CC2500_WriteREG:	
  9066                           
  9067                           ;incstack = 0
  9068                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9069                           ;CC2500_WriteREG@w_addr stored from wreg
  9070  11EA  00F6               	movwf	CC2500_WriteREG@w_addr
  9071                           
  9072                           ;CC2500_B1.c: 259: RC0 = 0;
  9073  11EB  0020               	movlb	0	; select bank0
  9074  11EC  100E               	bcf	14,0	;volatile
  9075                           
  9076                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9077  11ED  0876               	movf	CC2500_WriteREG@w_addr,w
  9078  11EE  00F5               	movwf	??_CC2500_WriteREG
  9079  11EF  0875               	movf	??_CC2500_WriteREG,w
  9080  11F0  0021               	movlb	1	; select bank1
  9081  11F1  00D0               	movwf	_SPI0Buffer^(0+128)
  9082                           
  9083                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9084  11F2  29F6               	goto	l8327
  9085  11F3                     l8325:	
  9086                           
  9087                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9088  11F3  319F  27C1  3191   	fcall	_RF_Timeout_Counter
  9089  11F6                     l8327:	
  9090  11F6  0020               	movlb	0	; select bank0
  9091  11F7  1E8E               	btfss	14,5	;volatile
  9092  11F8  29FC               	goto	l8331
  9093  11F9  0021               	movlb	1	; select bank1
  9094  11FA  1F21               	btfss	(_RF1^(0+128)+1),6
  9095  11FB  29F3               	goto	l8325
  9096  11FC                     l8331:	
  9097                           
  9098                           ;CC2500_B1.c: 263: };
  9099                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9100  11FC  319C  24DC  3191   	fcall	_setRF_TimeoutCleared
  9101                           
  9102                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9103  11FF  3190  207E  3191   	fcall	_CC2500_WriteByte
  9104                           
  9105                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9106  1202  0874               	movf	CC2500_WriteREG@value,w
  9107  1203  00F5               	movwf	??_CC2500_WriteREG
  9108  1204  0875               	movf	??_CC2500_WriteREG,w
  9109  1205  0021               	movlb	1	; select bank1
  9110  1206  00D0               	movwf	_SPI0Buffer^(0+128)
  9111                           
  9112                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9113  1207  3190  207E         	fcall	_CC2500_WriteByte
  9114                           
  9115                           ;CC2500_B1.c: 269: RC0 = 1;
  9116  1209  0020               	movlb	0	; select bank0
  9117  120A  140E               	bsf	14,0	;volatile
  9118  120B  0008               	return
  9119  120C                     __end_of_CC2500_WriteREG:	
  9120                           
  9121                           	psect	text46
  9122  1DCE                     __ptext46:	
  9123 ;; *************** function _CC2500_FrequencyCabr *****************
  9124 ;; Defined at:
  9125 ;;		line 208 in file "../src/CC2500_B1.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;		None
  9130 ;; Return value:  Size  Location     Type
  9131 ;;		None               void
  9132 ;; Registers used:
  9133 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9134 ;; Tracked objects:
  9135 ;;		On entry : 0/0
  9136 ;;		On exit  : 0/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9143 ;;Total ram usage:        0 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    5
  9146 ;; This function calls:
  9147 ;;		_CC2500_WriteCommand
  9148 ;;		_DelayTime_1us
  9149 ;; This function is called by:
  9150 ;;		_CC2500_PowerOnInitial
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           
  9155                           ;psect for function _CC2500_FrequencyCabr
  9156  1DCE                     _CC2500_FrequencyCabr:	
  9157                           
  9158                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9159                           
  9160                           ;incstack = 0
  9161                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9162  1DCE  3033               	movlw	51
  9163  1DCF  3190  20C8  319D   	fcall	_CC2500_WriteCommand
  9164                           
  9165                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9166  1DD2  30E8               	movlw	232
  9167  1DD3  00F2               	movwf	DelayTime_1us@count
  9168  1DD4  3003               	movlw	3
  9169  1DD5  00F3               	movwf	DelayTime_1us@count+1
  9170  1DD6  3192  222F         	fcall	_DelayTime_1us
  9171  1DD8  0008               	return
  9172  1DD9                     __end_of_CC2500_FrequencyCabr:	
  9173                           
  9174                           	psect	text47
  9175  122F                     __ptext47:	
  9176 ;; *************** function _DelayTime_1us *****************
  9177 ;; Defined at:
  9178 ;;		line 327 in file "../src/CC2500_B1.c"
  9179 ;; Parameters:    Size  Location     Type
  9180 ;;  count           2    2[COMMON] int 
  9181 ;; Auto vars:     Size  Location     Type
  9182 ;;  j               2    6[COMMON] unsigned int 
  9183 ;;  i               2    4[COMMON] unsigned int 
  9184 ;; Return value:  Size  Location     Type
  9185 ;;		None               void
  9186 ;; Registers used:
  9187 ;;		wreg, status,2
  9188 ;; Tracked objects:
  9189 ;;		On entry : 0/0
  9190 ;;		On exit  : 0/0
  9191 ;;		Unchanged: 0/0
  9192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9193 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;Total ram usage:        6 bytes
  9198 ;; Hardware stack levels used:    1
  9199 ;; Hardware stack levels required when called:    3
  9200 ;; This function calls:
  9201 ;;		Nothing
  9202 ;; This function is called by:
  9203 ;;		_CC2500_PowerRST
  9204 ;;		_CC2500_FrequencyCabr
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           
  9209                           ;psect for function _DelayTime_1us
  9210  122F                     _DelayTime_1us:	
  9211                           
  9212                           ;CC2500_B1.c: 328: unsigned int i, j;
  9213                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9214                           
  9215                           ;incstack = 0
  9216                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9217  122F  3001               	movlw	1
  9218  1230  00F4               	movwf	DelayTime_1us@i
  9219  1231  3000               	movlw	0
  9220  1232  00F5               	movwf	DelayTime_1us@i+1
  9221  1233                     l343:	
  9222  1233  0873               	movf	DelayTime_1us@count+1,w
  9223  1234  0275               	subwf	DelayTime_1us@i+1,w
  9224  1235  1D03               	skipz
  9225  1236  2A39               	goto	u5375
  9226  1237  0872               	movf	DelayTime_1us@count,w
  9227  1238  0274               	subwf	DelayTime_1us@i,w
  9228  1239                     u5375:	
  9229  1239  1803               	btfsc	3,0
  9230  123A  0008               	return
  9231                           
  9232                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9233  123B  01F6               	clrf	DelayTime_1us@j
  9234  123C  01F7               	clrf	DelayTime_1us@j+1
  9235  123D  3000               	movlw	0
  9236  123E  0277               	subwf	DelayTime_1us@j+1,w
  9237  123F  3002               	movlw	2
  9238  1240  1903               	skipnz
  9239  1241  0276               	subwf	DelayTime_1us@j,w
  9240  1242  1803               	btfsc	3,0
  9241  1243  2A4F               	goto	l6173
  9242  1244                     l6171:	
  9243  1244  3001               	movlw	1
  9244  1245  07F6               	addwf	DelayTime_1us@j,f
  9245  1246  3000               	movlw	0
  9246  1247  3DF7               	addwfc	DelayTime_1us@j+1,f
  9247  1248  3000               	movlw	0
  9248  1249  0277               	subwf	DelayTime_1us@j+1,w
  9249  124A  3002               	movlw	2
  9250  124B  1903               	skipnz
  9251  124C  0276               	subwf	DelayTime_1us@j,w
  9252  124D  1C03               	skipc
  9253  124E  2A44               	goto	l6171
  9254  124F                     l6173:	
  9255  124F  3001               	movlw	1
  9256  1250  07F4               	addwf	DelayTime_1us@i,f
  9257  1251  3000               	movlw	0
  9258  1252  3DF5               	addwfc	DelayTime_1us@i+1,f
  9259  1253  2A33               	goto	l343
  9260  1254                     __end_of_DelayTime_1us:	
  9261                           
  9262                           	psect	text48
  9263  1CE4                     __ptext48:	
  9264 ;; *************** function _CC2500_ClearTXFIFO *****************
  9265 ;; Defined at:
  9266 ;;		line 194 in file "../src/CC2500_B1.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;		None
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:        0 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    5
  9287 ;; This function calls:
  9288 ;;		_CC2500_WriteCommand
  9289 ;; This function is called by:
  9290 ;;		_CC2500_PowerOnInitial
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           
  9295                           ;psect for function _CC2500_ClearTXFIFO
  9296  1CE4                     _CC2500_ClearTXFIFO:	
  9297                           
  9298                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9299                           
  9300                           ;incstack = 0
  9301                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9302  1CE4  303B               	movlw	59
  9303  1CE5  3190  20C8         	fcall	_CC2500_WriteCommand
  9304  1CE7  0008               	return
  9305  1CE8                     __end_of_CC2500_ClearTXFIFO:	
  9306                           
  9307                           	psect	text49
  9308  1CE0                     __ptext49:	
  9309 ;; *************** function _CC2500_ClearRXFIFO *****************
  9310 ;; Defined at:
  9311 ;;		line 201 in file "../src/CC2500_B1.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;		None
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;		None
  9316 ;; Return value:  Size  Location     Type
  9317 ;;		None               void
  9318 ;; Registers used:
  9319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;Total ram usage:        0 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    5
  9332 ;; This function calls:
  9333 ;;		_CC2500_WriteCommand
  9334 ;; This function is called by:
  9335 ;;		_CC2500_PowerOnInitial
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           
  9340                           ;psect for function _CC2500_ClearRXFIFO
  9341  1CE0                     _CC2500_ClearRXFIFO:	
  9342                           
  9343                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9344                           
  9345                           ;incstack = 0
  9346                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9347  1CE0  303A               	movlw	58
  9348  1CE1  3190  20C8         	fcall	_CC2500_WriteCommand
  9349  1CE3  0008               	return
  9350  1CE4                     __end_of_CC2500_ClearRXFIFO:	
  9351                           
  9352                           	psect	text50
  9353  10C8                     __ptext50:	
  9354 ;; *************** function _CC2500_WriteCommand *****************
  9355 ;; Defined at:
  9356 ;;		line 292 in file "../src/CC2500_B1.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  command         1    wreg     unsigned char 
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;  command         1    5[COMMON] unsigned char 
  9361 ;; Return value:  Size  Location     Type
  9362 ;;		None               void
  9363 ;; Registers used:
  9364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;Total ram usage:        2 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    4
  9377 ;; This function calls:
  9378 ;;		_CC2500_WriteByte
  9379 ;;		_RF_Timeout_Counter
  9380 ;;		_setRF_TimeoutCleared
  9381 ;; This function is called by:
  9382 ;;		_CC2500_TxData
  9383 ;;		_CC2500_RxData
  9384 ;;		_CC2500_ClearTXFIFO
  9385 ;;		_CC2500_ClearRXFIFO
  9386 ;;		_CC2500_FrequencyCabr
  9387 ;;		_CC2500_SIDLEMode
  9388 ;;		_setRF_Main
  9389 ;;		_RF_RxDisable
  9390 ;; This function uses a non-reentrant model
  9391 ;;
  9392                           
  9393                           
  9394                           ;psect for function _CC2500_WriteCommand
  9395  10C8                     _CC2500_WriteCommand:	
  9396                           
  9397                           ;incstack = 0
  9398                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9399                           ;CC2500_WriteCommand@command stored from wreg
  9400  10C8  00F5               	movwf	CC2500_WriteCommand@command
  9401                           
  9402                           ;CC2500_B1.c: 293: RC0 = 0;
  9403  10C9  0020               	movlb	0	; select bank0
  9404  10CA  100E               	bcf	14,0	;volatile
  9405                           
  9406                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9407  10CB  0875               	movf	CC2500_WriteCommand@command,w
  9408  10CC  00F4               	movwf	??_CC2500_WriteCommand
  9409  10CD  0874               	movf	??_CC2500_WriteCommand,w
  9410  10CE  0021               	movlb	1	; select bank1
  9411  10CF  00D0               	movwf	_SPI0Buffer^(0+128)
  9412                           
  9413                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9414  10D0  28D4               	goto	l8311
  9415  10D1                     l8309:	
  9416                           
  9417                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9418  10D1  319F  27C1  3190   	fcall	_RF_Timeout_Counter
  9419  10D4                     l8311:	
  9420  10D4  0020               	movlb	0	; select bank0
  9421  10D5  1E8E               	btfss	14,5	;volatile
  9422  10D6  28DA               	goto	l8315
  9423  10D7  0021               	movlb	1	; select bank1
  9424  10D8  1F21               	btfss	(_RF1^(0+128)+1),6
  9425  10D9  28D1               	goto	l8309
  9426  10DA                     l8315:	
  9427                           
  9428                           ;CC2500_B1.c: 298: };
  9429                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9430  10DA  319C  24DC  3190   	fcall	_setRF_TimeoutCleared
  9431                           
  9432                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9433  10DD  3190  207E         	fcall	_CC2500_WriteByte
  9434                           
  9435                           ;CC2500_B1.c: 302: RC0 = 1;
  9436  10DF  0020               	movlb	0	; select bank0
  9437  10E0  140E               	bsf	14,0	;volatile
  9438  10E1  0008               	return
  9439  10E2                     __end_of_CC2500_WriteCommand:	
  9440                           
  9441                           	psect	text51
  9442  1CDC                     __ptext51:	
  9443 ;; *************** function _setRF_TimeoutCleared *****************
  9444 ;; Defined at:
  9445 ;;		line 149 in file "../src/RF_Control_B1.c"
  9446 ;; Parameters:    Size  Location     Type
  9447 ;;		None
  9448 ;; Auto vars:     Size  Location     Type
  9449 ;;		None
  9450 ;; Return value:  Size  Location     Type
  9451 ;;		None               void
  9452 ;; Registers used:
  9453 ;;		status,2
  9454 ;; Tracked objects:
  9455 ;;		On entry : 0/0
  9456 ;;		On exit  : 0/0
  9457 ;;		Unchanged: 0/0
  9458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;Total ram usage:        0 bytes
  9464 ;; Hardware stack levels used:    1
  9465 ;; Hardware stack levels required when called:    3
  9466 ;; This function calls:
  9467 ;;		Nothing
  9468 ;; This function is called by:
  9469 ;;		_CC2500_TxData
  9470 ;;		_CC2500_RxData
  9471 ;;		_CC2500_PowerRST
  9472 ;;		_CC2500_WriteREG
  9473 ;;		_CC2500_WriteCommand
  9474 ;;		_CC2500_ReadStatus
  9475 ;;		_CC2500_ReadREG
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function _setRF_TimeoutCleared
  9481  1CDC                     _setRF_TimeoutCleared:	
  9482                           
  9483                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9484                           
  9485                           ;incstack = 0
  9486                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9487  1CDC  0021               	movlb	1	; select bank1
  9488  1CDD  01AC               	clrf	(_RF1^(0+128)+12)
  9489  1CDE  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9490  1CDF  0008               	return
  9491  1CE0                     __end_of_setRF_TimeoutCleared:	
  9492                           
  9493                           	psect	text52
  9494  1FC1                     __ptext52:	
  9495 ;; *************** function _RF_Timeout_Counter *****************
  9496 ;; Defined at:
  9497 ;;		line 141 in file "../src/RF_Control_B1.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;		None
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;		None
  9502 ;; Return value:  Size  Location     Type
  9503 ;;		None               void
  9504 ;; Registers used:
  9505 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;Total ram usage:        0 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    3
  9518 ;; This function calls:
  9519 ;;		Nothing
  9520 ;; This function is called by:
  9521 ;;		_CC2500_TxData
  9522 ;;		_CC2500_RxData
  9523 ;;		_CC2500_PowerRST
  9524 ;;		_CC2500_WriteREG
  9525 ;;		_CC2500_WriteCommand
  9526 ;;		_CC2500_ReadStatus
  9527 ;;		_CC2500_ReadREG
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           
  9532                           ;psect for function _RF_Timeout_Counter
  9533  1FC1                     _RF_Timeout_Counter:	
  9534                           
  9535                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9536                           
  9537                           ;incstack = 0
  9538                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9539  1FC1  3001               	movlw	1
  9540  1FC2  0021               	movlb	1	; select bank1
  9541  1FC3  07AC               	addwf	(_RF1^(0+128)+12),f
  9542  1FC4  3000               	movlw	0
  9543  1FC5  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9544                           
  9545                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9546  1FC6  300C               	movlw	12
  9547  1FC7  3EA0               	addlw	_RF1& (0+255)
  9548  1FC8  0086               	movwf	6
  9549  1FC9  0187               	clrf	7
  9550  1FCA  3F40               	moviw [0]fsr1
  9551  1FCB  3AA8               	xorlw	168
  9552  1FCC  1D03               	skipz
  9553  1FCD  2FD0               	goto	u8675
  9554  1FCE  3F41               	moviw [1]fsr1
  9555  1FCF  3A61               	xorlw	97
  9556  1FD0                     u8675:	
  9557  1FD0  1D03               	skipz
  9558  1FD1  0008               	return
  9559                           
  9560                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9561  1FD2  01AC               	clrf	(_RF1^(0+128)+12)
  9562  1FD3  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9563                           
  9564                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9565  1FD4  1721               	bsf	(_RF1^(0+128)+1),6
  9566  1FD5  0008               	return
  9567  1FD6                     __end_of_RF_Timeout_Counter:	
  9568                           
  9569                           	psect	text53
  9570  107E                     __ptext53:	
  9571 ;; *************** function _CC2500_WriteByte *****************
  9572 ;; Defined at:
  9573 ;;		line 226 in file "../src/CC2500_B1.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;		None
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  loop_a          1    3[COMMON] unsigned char 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;		None               void
  9580 ;; Registers used:
  9581 ;;		wreg, status,2, status,0
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;Total ram usage:        2 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    3
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		_CC2500_TxData
  9598 ;;		_CC2500_RxData
  9599 ;;		_CC2500_PowerRST
  9600 ;;		_CC2500_WriteREG
  9601 ;;		_CC2500_WriteCommand
  9602 ;;		_CC2500_ReadStatus
  9603 ;;		_CC2500_ReadREG
  9604 ;; This function uses a non-reentrant model
  9605 ;;
  9606                           
  9607                           
  9608                           ;psect for function _CC2500_WriteByte
  9609  107E                     _CC2500_WriteByte:	
  9610                           
  9611                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9612                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9613                           
  9614                           ;incstack = 0
  9615                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9616  107E  01F3               	clrf	CC2500_WriteByte@loop_a
  9617  107F                     L5:	
  9618  107F  3008               	movlw	8
  9619  1080  0273               	subwf	CC2500_WriteByte@loop_a,w
  9620  1081  1803               	btfsc	3,0
  9621  1082  0008               	return
  9622                           
  9623                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9624  1083  0021               	movlb	1	; select bank1
  9625  1084  1FD0               	btfss	_SPI0Buffer^(0+128),7
  9626  1085  2889               	goto	l299
  9627                           
  9628                           ;CC2500_B1.c: 230: RC4 = 1;
  9629  1086  0020               	movlb	0	; select bank0
  9630  1087  160E               	bsf	14,4	;volatile
  9631  1088  288B               	goto	l300
  9632  1089                     l299:	
  9633                           
  9634                           ;CC2500_B1.c: 231: else
  9635                           ;CC2500_B1.c: 232: RC4 = 0;
  9636  1089  0020               	movlb	0	; select bank0
  9637  108A  120E               	bcf	14,4	;volatile
  9638  108B                     l300:	
  9639                           
  9640                           ;CC2500_B1.c: 233: RC3 = 1;
  9641  108B  158E               	bsf	14,3	;volatile
  9642                           
  9643                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9644  108C  1003               	clrc
  9645  108D  0021               	movlb	1	; select bank1
  9646  108E  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9647                           
  9648                           ;CC2500_B1.c: 235: RC3 = 0;
  9649  108F  0020               	movlb	0	; select bank0
  9650  1090  118E               	bcf	14,3	;volatile
  9651  1091  3001               	movlw	1
  9652  1092  00F2               	movwf	??_CC2500_WriteByte
  9653  1093  0872               	movf	??_CC2500_WriteByte,w
  9654  1094  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9655  1095  287F               	goto	L5
  9656  1096                     __end_of_CC2500_WriteByte:	
  9657                           
  9658                           	psect	text54
  9659  1CBF                     __ptext54:	
  9660 ;; *************** function _RF_Initialization *****************
  9661 ;; Defined at:
  9662 ;;		line 9 in file "../src/RF_Control_B1.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;		None
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;		None
  9667 ;; Return value:  Size  Location     Type
  9668 ;;		None               void
  9669 ;; Registers used:
  9670 ;;		wreg, status,2, status,0, pclath, cstack
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9680 ;;Total ram usage:        0 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:    4
  9683 ;; This function calls:
  9684 ;;		_setRF_Initialization
  9685 ;; This function is called by:
  9686 ;;		_main
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           
  9691                           ;psect for function _RF_Initialization
  9692  1CBF                     _RF_Initialization:	
  9693                           
  9694                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9695                           
  9696                           ;incstack = 0
  9697                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9698  1CBF  319D  2583         	fcall	_setRF_Initialization
  9699  1CC1  0008               	return
  9700  1CC2                     __end_of_RF_Initialization:	
  9701                           
  9702                           	psect	text55
  9703  1D83                     __ptext55:	
  9704 ;; *************** function _setRF_Initialization *****************
  9705 ;; Defined at:
  9706 ;;		line 17 in file "../src/RF_Control_B1.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;		None
  9709 ;; Auto vars:     Size  Location     Type
  9710 ;;		None
  9711 ;; Return value:  Size  Location     Type
  9712 ;;		None               void
  9713 ;; Registers used:
  9714 ;;		wreg
  9715 ;; Tracked objects:
  9716 ;;		On entry : 0/0
  9717 ;;		On exit  : 0/0
  9718 ;;		Unchanged: 0/0
  9719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9723 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9724 ;;Total ram usage:        1 bytes
  9725 ;; Hardware stack levels used:    1
  9726 ;; Hardware stack levels required when called:    3
  9727 ;; This function calls:
  9728 ;;		Nothing
  9729 ;; This function is called by:
  9730 ;;		_RF_Initialization
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function _setRF_Initialization
  9736  1D83                     _setRF_Initialization:	
  9737                           
  9738                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9739                           
  9740                           ;incstack = 0
  9741                           ; Regs used in _setRF_Initialization: [wreg]
  9742  1D83  3015               	movlw	21
  9743  1D84  00F2               	movwf	??_setRF_Initialization
  9744  1D85  0872               	movf	??_setRF_Initialization,w
  9745  1D86  0021               	movlb	1	; select bank1
  9746  1D87  00D2               	movwf	_Tx_Length^(0+128)
  9747                           
  9748                           ;RF_Control_B1.c: 20: RF1.RunTime = 150;
  9749  1D88  3096               	movlw	150
  9750  1D89  00A7               	movwf	(_RF1^(0+128)+7)
  9751  1D8A  3000               	movlw	0
  9752  1D8B  00A8               	movwf	(_RF1^(0+128)+8)
  9753  1D8C  0008               	return
  9754  1D8D                     __end_of_setRF_Initialization:	
  9755                           
  9756                           	psect	text56
  9757  1F36                     __ptext56:	
  9758 ;; *************** function _Mcu_Initialization *****************
  9759 ;; Defined at:
  9760 ;;		line 30 in file "../src/MCU_B1.c"
  9761 ;; Parameters:    Size  Location     Type
  9762 ;;		None
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;		None
  9765 ;; Return value:  Size  Location     Type
  9766 ;;		None               void
  9767 ;; Registers used:
  9768 ;;		wreg, status,2, status,0, pclath, cstack
  9769 ;; Tracked objects:
  9770 ;;		On entry : 0/0
  9771 ;;		On exit  : 0/0
  9772 ;;		Unchanged: 0/0
  9773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;Total ram usage:        0 bytes
  9779 ;; Hardware stack levels used:    1
  9780 ;; Hardware stack levels required when called:    4
  9781 ;; This function calls:
  9782 ;;		_ADC_Set
  9783 ;;		_Fosc_Set
  9784 ;;		_IOC_Set
  9785 ;;		_IO_Set
  9786 ;;		_TMR1_Set
  9787 ;;		_WDT_Set
  9788 ;; This function is called by:
  9789 ;;		_main
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           
  9794                           ;psect for function _Mcu_Initialization
  9795  1F36                     _Mcu_Initialization:	
  9796                           
  9797                           ;MCU_B1.c: 32: Fosc_Set();
  9798                           
  9799                           ;incstack = 0
  9800                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9801  1F36  319C  24D8  319F   	fcall	_Fosc_Set
  9802                           
  9803                           ;MCU_B1.c: 34: IO_Set();
  9804  1F39  3190  20AE  319F   	fcall	_IO_Set
  9805                           
  9806                           ;MCU_B1.c: 36: ;;
  9807                           ;MCU_B1.c: 38: TMR1_Set();
  9808  1F3C  319D  25F1  319F   	fcall	_TMR1_Set
  9809                           
  9810                           ;MCU_B1.c: 40: ADC_Set();
  9811  1F3F  319D  2519  319F   	fcall	_ADC_Set
  9812                           
  9813                           ;MCU_B1.c: 42: ;;
  9814                           ;MCU_B1.c: 44: ;;
  9815                           ;MCU_B1.c: 46: IOC_Set();
  9816  1F42  319D  256F  319F   	fcall	_IOC_Set
  9817                           
  9818                           ;MCU_B1.c: 48: ;;
  9819                           ;MCU_B1.c: 50: ;;
  9820                           ;MCU_B1.c: 52: WDT_Set();
  9821  1F45  319D  2579         	fcall	_WDT_Set
  9822  1F47  0008               	return
  9823  1F48                     __end_of_Mcu_Initialization:	
  9824                           
  9825                           	psect	text57
  9826  1D79                     __ptext57:	
  9827 ;; *************** function _WDT_Set *****************
  9828 ;; Defined at:
  9829 ;;		line 1072 in file "../src/MCU_B1.c"
  9830 ;; Parameters:    Size  Location     Type
  9831 ;;		None
  9832 ;; Auto vars:     Size  Location     Type
  9833 ;;		None
  9834 ;; Return value:  Size  Location     Type
  9835 ;;		None               void
  9836 ;; Registers used:
  9837 ;;		wreg
  9838 ;; Tracked objects:
  9839 ;;		On entry : 0/0
  9840 ;;		On exit  : 0/0
  9841 ;;		Unchanged: 0/0
  9842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9845 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9846 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;Total ram usage:        1 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; Hardware stack levels required when called:    3
  9850 ;; This function calls:
  9851 ;;		Nothing
  9852 ;; This function is called by:
  9853 ;;		_Mcu_Initialization
  9854 ;; This function uses a non-reentrant model
  9855 ;;
  9856                           
  9857                           
  9858                           ;psect for function _WDT_Set
  9859  1D79                     _WDT_Set:	
  9860                           
  9861                           ;MCU_B1.c: 1079: WDTCON = 0b00010111;;
  9862                           
  9863                           ;incstack = 0
  9864                           ; Regs used in _WDT_Set: [wreg]
  9865  1D79  3017               	movlw	23
  9866  1D7A  0021               	movlb	1	; select bank1
  9867  1D7B  0097               	movwf	23	;volatile
  9868                           
  9869                           ;MCU_B1.c: 1081: WDT.Enable = 1;
  9870  1D7C  0022               	movlb	2	; select bank2
  9871  1D7D  1428               	bsf	_WDT^(0+256),0
  9872                           
  9873                           ;MCU_B1.c: 1082: WDT.Timer = 10;
  9874  1D7E  300A               	movlw	10
  9875  1D7F  00F2               	movwf	??_WDT_Set
  9876  1D80  0872               	movf	??_WDT_Set,w
  9877  1D81  00A9               	movwf	(_WDT^(0+256)+1)
  9878  1D82  0008               	return
  9879  1D83                     __end_of_WDT_Set:	
  9880                           
  9881                           	psect	text58
  9882  1DF1                     __ptext58:	
  9883 ;; *************** function _TMR1_Set *****************
  9884 ;; Defined at:
  9885 ;;		line 221 in file "../src/MCU_B1.c"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;		None
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;		None
  9890 ;; Return value:  Size  Location     Type
  9891 ;;		None               void
  9892 ;; Registers used:
  9893 ;;		wreg
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;Total ram usage:        0 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:    3
  9906 ;; This function calls:
  9907 ;;		Nothing
  9908 ;; This function is called by:
  9909 ;;		_Mcu_Initialization
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           
  9914                           ;psect for function _TMR1_Set
  9915  1DF1                     _TMR1_Set:	
  9916                           
  9917                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
  9918                           
  9919                           ;incstack = 0
  9920                           ; Regs used in _TMR1_Set: [wreg]
  9921  1DF1  3041               	movlw	65
  9922  1DF2  0020               	movlb	0	; select bank0
  9923  1DF3  0098               	movwf	24	;volatile
  9924                           
  9925                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
  9926  1DF4  30FA               	movlw	250
  9927  1DF5  0097               	movwf	23	;volatile
  9928                           
  9929                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
  9930  1DF6  3038               	movlw	56
  9931  1DF7  0096               	movwf	22	;volatile
  9932                           
  9933                           ;MCU_B1.c: 225: TMR1IE = 1;
  9934  1DF8  0021               	movlb	1	; select bank1
  9935  1DF9  1411               	bsf	17,0	;volatile
  9936                           
  9937                           ;MCU_B1.c: 226: PEIE = 1;
  9938  1DFA  170B               	bsf	11,6	;volatile
  9939                           
  9940                           ;MCU_B1.c: 227: GIE = 1;
  9941  1DFB  178B               	bsf	11,7	;volatile
  9942  1DFC  0008               	return
  9943  1DFD                     __end_of_TMR1_Set:	
  9944                           
  9945                           	psect	text59
  9946  10AE                     __ptext59:	
  9947 ;; *************** function _IO_Set *****************
  9948 ;; Defined at:
  9949 ;;		line 60 in file "../src/MCU_B1.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;		None               void
  9956 ;; Registers used:
  9957 ;;		wreg, status,2
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;Total ram usage:        0 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    3
  9970 ;; This function calls:
  9971 ;;		Nothing
  9972 ;; This function is called by:
  9973 ;;		_Mcu_Initialization
  9974 ;; This function uses a non-reentrant model
  9975 ;;
  9976                           
  9977                           
  9978                           ;psect for function _IO_Set
  9979  10AE                     _IO_Set:	
  9980                           
  9981                           ;MCU_B1.c: 88: TRISA = 0b11110111;;
  9982                           
  9983                           ;incstack = 0
  9984                           ; Regs used in _IO_Set: [wreg+status,2]
  9985  10AE  30F7               	movlw	247
  9986  10AF  0021               	movlb	1	; select bank1
  9987  10B0  008C               	movwf	12	;volatile
  9988                           
  9989                           ;MCU_B1.c: 89: TRISB = 0b00000100;;
  9990  10B1  3004               	movlw	4
  9991  10B2  008D               	movwf	13	;volatile
  9992                           
  9993                           ;MCU_B1.c: 90: TRISC = 0b00100110;;
  9994  10B3  3026               	movlw	38
  9995  10B4  008E               	movwf	14	;volatile
  9996                           
  9997                           ;MCU_B1.c: 92: LATA = 0b00000000;;
  9998  10B5  0022               	movlb	2	; select bank2
  9999  10B6  018C               	clrf	12	;volatile
 10000                           
 10001                           ;MCU_B1.c: 93: LATB = 0b00000000;;
 10002  10B7  018D               	clrf	13	;volatile
 10003                           
 10004                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10005  10B8  018E               	clrf	14	;volatile
 10006                           
 10007                           ;MCU_B1.c: 96: ANSELA = 0b00001110;;
 10008  10B9  300E               	movlw	14
 10009  10BA  0023               	movlb	3	; select bank3
 10010  10BB  008C               	movwf	12	;volatile
 10011                           
 10012                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10013  10BC  018D               	clrf	13	;volatile
 10014                           
 10015                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10016  10BD  018E               	clrf	14	;volatile
 10017                           
 10018                           ;MCU_B1.c: 100: PORTA = 0b11110111;;
 10019  10BE  30F7               	movlw	247
 10020  10BF  0020               	movlb	0	; select bank0
 10021  10C0  008C               	movwf	12	;volatile
 10022                           
 10023                           ;MCU_B1.c: 101: PORTB = 0b00000100;;
 10024  10C1  3004               	movlw	4
 10025  10C2  008D               	movwf	13	;volatile
 10026                           
 10027                           ;MCU_B1.c: 102: PORTC = 0b00100110;;
 10028  10C3  3026               	movlw	38
 10029  10C4  008E               	movwf	14	;volatile
 10030                           
 10031                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10032  10C5  0024               	movlb	4	; select bank4
 10033  10C6  018D               	clrf	13	;volatile
 10034  10C7  0008               	return
 10035  10C8                     __end_of_IO_Set:	
 10036                           
 10037                           	psect	text60
 10038  1D6F                     __ptext60:	
 10039 ;; *************** function _IOC_Set *****************
 10040 ;; Defined at:
 10041 ;;		line 362 in file "../src/MCU_B1.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;		None
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;		None
 10046 ;; Return value:  Size  Location     Type
 10047 ;;		None               void
 10048 ;; Registers used:
 10049 ;;		wreg, status,2
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;Total ram usage:        0 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:    3
 10062 ;; This function calls:
 10063 ;;		Nothing
 10064 ;; This function is called by:
 10065 ;;		_Mcu_Initialization
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           
 10070                           ;psect for function _IOC_Set
 10071  1D6F                     _IOC_Set:	
 10072                           
 10073                           ;MCU_B1.c: 364: IOCBP = 0b00000100;;
 10074                           
 10075                           ;incstack = 0
 10076                           ; Regs used in _IOC_Set: [wreg+status,2]
 10077  1D6F  3004               	movlw	4
 10078  1D70  0027               	movlb	7	; select bank7
 10079  1D71  0094               	movwf	20	;volatile
 10080                           
 10081                           ;MCU_B1.c: 365: IOCBN = 0b00000000;;
 10082  1D72  0195               	clrf	21	;volatile
 10083                           
 10084                           ;MCU_B1.c: 367: IOCBF = 0b00000000;
 10085  1D73  0196               	clrf	22	;volatile
 10086                           
 10087                           ;MCU_B1.c: 369: IOCIE = 1;
 10088  1D74  158B               	bsf	11,3	;volatile
 10089                           
 10090                           ;MCU_B1.c: 370: IOCIF = 0;
 10091  1D75  100B               	bcf	11,0	;volatile
 10092                           
 10093                           ;MCU_B1.c: 371: PEIE = 1;
 10094  1D76  170B               	bsf	11,6	;volatile
 10095                           
 10096                           ;MCU_B1.c: 372: GIE = 1;
 10097  1D77  178B               	bsf	11,7	;volatile
 10098  1D78  0008               	return
 10099  1D79                     __end_of_IOC_Set:	
 10100                           
 10101                           	psect	text61
 10102  1CD8                     __ptext61:	
 10103 ;; *************** function _Fosc_Set *****************
 10104 ;; Defined at:
 10105 ;;		line 56 in file "../src/MCU_B1.c"
 10106 ;; Parameters:    Size  Location     Type
 10107 ;;		None
 10108 ;; Auto vars:     Size  Location     Type
 10109 ;;		None
 10110 ;; Return value:  Size  Location     Type
 10111 ;;		None               void
 10112 ;; Registers used:
 10113 ;;		wreg
 10114 ;; Tracked objects:
 10115 ;;		On entry : 0/0
 10116 ;;		On exit  : 0/0
 10117 ;;		Unchanged: 0/0
 10118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10123 ;;Total ram usage:        0 bytes
 10124 ;; Hardware stack levels used:    1
 10125 ;; Hardware stack levels required when called:    3
 10126 ;; This function calls:
 10127 ;;		Nothing
 10128 ;; This function is called by:
 10129 ;;		_Mcu_Initialization
 10130 ;; This function uses a non-reentrant model
 10131 ;;
 10132                           
 10133                           
 10134                           ;psect for function _Fosc_Set
 10135  1CD8                     _Fosc_Set:	
 10136                           
 10137                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10138                           
 10139                           ;incstack = 0
 10140                           ; Regs used in _Fosc_Set: [wreg]
 10141  1CD8  3078               	movlw	120
 10142  1CD9  0021               	movlb	1	; select bank1
 10143  1CDA  0099               	movwf	25	;volatile
 10144  1CDB  0008               	return
 10145  1CDC                     __end_of_Fosc_Set:	
 10146                           
 10147                           	psect	text62
 10148  1D19                     __ptext62:	
 10149 ;; *************** function _ADC_Set *****************
 10150 ;; Defined at:
 10151 ;;		line 408 in file "../src/MCU_B1.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;		None
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;		None
 10156 ;; Return value:  Size  Location     Type
 10157 ;;		None               void
 10158 ;; Registers used:
 10159 ;;		wreg
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;Total ram usage:        0 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    3
 10172 ;; This function calls:
 10173 ;;		Nothing
 10174 ;; This function is called by:
 10175 ;;		_Mcu_Initialization
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           
 10180                           ;psect for function _ADC_Set
 10181  1D19                     _ADC_Set:	
 10182                           
 10183                           ;MCU_B1.c: 409: ADCON1 = 0xf3;
 10184                           
 10185                           ;incstack = 0
 10186                           ; Regs used in _ADC_Set: [wreg]
 10187  1D19  30F3               	movlw	243
 10188  1D1A  0021               	movlb	1	; select bank1
 10189  1D1B  009E               	movwf	30	;volatile
 10190                           
 10191                           ;MCU_B1.c: 410: FVRCON = 0xc1;
 10192  1D1C  30C1               	movlw	193
 10193  1D1D  0022               	movlb	2	; select bank2
 10194  1D1E  0097               	movwf	23	;volatile
 10195  1D1F  0008               	return
 10196  1D20                     __end_of_ADC_Set:	
 10197                           
 10198                           	psect	text63
 10199  004B                     __ptext63:	
 10200 ;; *************** function _Load_Main *****************
 10201 ;; Defined at:
 10202 ;;		line 39 in file "../src/OverLoad_B1.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;		None
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;  i               2    4[BANK0 ] int 
 10207 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10208 ;;  error           1    2[BANK0 ] unsigned char 
 10209 ;; Return value:  Size  Location     Type
 10210 ;;		None               void
 10211 ;; Registers used:
 10212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;Total ram usage:        6 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:    4
 10225 ;; This function calls:
 10226 ;;		___lwdiv
 10227 ;;		___wmul
 10228 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10229 ;;		_getDimmer_LoadGO
 10230 ;;		_getDimmer_Load_Status
 10231 ;;		_getMain_All_Error_Status
 10232 ;;		_getMain_All_LightsStatus
 10233 ;;		_getMain_Lights_Count
 10234 ;;		_setLoad_AH_AL_Restore
 10235 ;; This function is called by:
 10236 ;;		_main
 10237 ;; This function uses a non-reentrant model
 10238 ;;
 10239                           
 10240                           
 10241                           ;psect for function _Load_Main
 10242  004B                     _Load_Main:	
 10243                           
 10244                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10245                           
 10246                           ;incstack = 0
 10247                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10248  004B  3000               	movlw	0
 10249  004C  3192  22CF  3180   	fcall	_getMain_All_Error_Status
 10250  004F  0020               	movlb	0	; select bank0
 10251  0050  00A0               	movwf	??_Load_Main
 10252  0051  0820               	movf	??_Load_Main,w
 10253  0052  00A2               	movwf	Load_Main@error
 10254                           
 10255                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10256  0053  01A3               	clrf	Load_Main@Load_Status
 10257                           
 10258                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10259  0054  0022               	movlb	2	; select bank2
 10260  0055  1C2A               	btfss	_Load^(0+256),0
 10261  0056  29DF               	goto	l1617
 10262                           
 10263                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10264  0057  319D  2527  3180   	fcall	_getMain_All_LightsStatus
 10265  005A  3800               	iorlw	0
 10266  005B  1D03               	skipz
 10267  005C  285F               	goto	l9291
 10268                           
 10269                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10270  005D  0022               	movlb	2	; select bank2
 10271  005E  2880               	goto	l9309
 10272  005F                     l9291:	
 10273                           ;OverLoad_B1.c: 47: } else {
 10274                           
 10275                           
 10276                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10277  005F  0020               	movlb	0	; select bank0
 10278  0060  08A2               	movf	Load_Main@error,f
 10279  0061  1D03               	skipz
 10280  0062  287D               	goto	l1620
 10281  0063  319E  2652  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10282  0066  3800               	iorlw	0
 10283  0067  1D03               	skipz
 10284  0068  287D               	goto	l1620
 10285                           
 10286                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10287  0069  0022               	movlb	2	; select bank2
 10288  006A  14AA               	bsf	_Load^(0+256),1
 10289                           
 10290                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10291  006B  319D  250B  3180   	fcall	_getDimmer_LoadGO
 10292  006E  3A01               	xorlw	1
 10293  006F  1D03               	skipz
 10294  0070  2878               	goto	l1621
 10295                           
 10296                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10297  0071  0022               	movlb	2	; select bank2
 10298  0072  1DAA               	btfss	_Load^(0+256),3
 10299  0073  1BAA               	btfsc	_Load^(0+256),7
 10300  0074  2881               	goto	l1619
 10301                           
 10302                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10303  0075  15AA               	bsf	_Load^(0+256),3
 10304                           
 10305                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10306  0076  01D3               	clrf	(_Load^(0+256)+41)
 10307                           
 10308                           ;OverLoad_B1.c: 57: }
 10309                           ;OverLoad_B1.c: 58: } else {
 10310  0077  2881               	goto	l1619
 10311  0078                     l1621:	
 10312                           
 10313                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10314  0078  0022               	movlb	2	; select bank2
 10315  0079  1FAA               	btfss	_Load^(0+256),7
 10316  007A  2881               	goto	l1619
 10317                           
 10318                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10319  007B  13AA               	bcf	_Load^(0+256),7
 10320                           
 10321                           ;OverLoad_B1.c: 61: }
 10322                           ;OverLoad_B1.c: 62: }
 10323                           ;OverLoad_B1.c: 63: } else {
 10324  007C  2881               	goto	l1619
 10325  007D                     l1620:	
 10326                           
 10327                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10328  007D  0022               	movlb	2	; select bank2
 10329  007E  1CAA               	btfss	_Load^(0+256),1
 10330  007F  2881               	goto	l1619
 10331  0080                     l9309:	
 10332                           
 10333                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10334  0080  10AA               	bcf	_Load^(0+256),1
 10335  0081                     l1619:	
 10336                           
 10337                           ;OverLoad_B1.c: 66: }
 10338                           ;OverLoad_B1.c: 67: }
 10339                           ;OverLoad_B1.c: 69: }
 10340                           ;OverLoad_B1.c: 72: if (Load.GO == 1) {
 10341  0081  1CAA               	btfss	_Load^(0+256),1
 10342  0082  29BB               	goto	l1627
 10343                           
 10344                           ;OverLoad_B1.c: 73: Load.LightsON = 1;
 10345  0083  152A               	bsf	_Load^(0+256),2
 10346                           
 10347                           ;OverLoad_B1.c: 75: if (Load.ADtoGO == 1) {
 10348  0084  1E2A               	btfss	_Load^(0+256),4
 10349  0085  29B9               	goto	l1628
 10350                           
 10351                           ;OverLoad_B1.c: 76: Load.Time++;
 10352  0086  3001               	movlw	1
 10353  0087  07AB               	addwf	(_Load^(0+256)+1),f
 10354  0088  3000               	movlw	0
 10355  0089  3DAC               	addwfc	((_Load+1)^(0+256)+1),f
 10356                           
 10357                           ;OverLoad_B1.c: 77: if (Load.Time >= (40 / 20)) {
 10358  008A  3000               	movlw	0
 10359  008B  022C               	subwf	((_Load+1)^(0+256)+1),w
 10360  008C  3002               	movlw	2
 10361  008D  1903               	skipnz
 10362  008E  022B               	subwf	(_Load^(0+256)+1),w
 10363  008F  1C03               	skipc
 10364  0090  0008               	return
 10365                           
 10366                           ;OverLoad_B1.c: 78: Load.Time = 0;
 10367  0091  01AB               	clrf	(_Load^(0+256)+1)
 10368  0092  01AC               	clrf	((_Load+1)^(0+256)+1)
 10369                           
 10370                           ;OverLoad_B1.c: 79: Load.ADtoGO = 0;
 10371  0093  122A               	bcf	_Load^(0+256),4
 10372                           
 10373                           ;OverLoad_B1.c: 81: for (int i = 1; i < 4; i++) {
 10374  0094  3001               	movlw	1
 10375  0095  0020               	movlb	0	; select bank0
 10376  0096  00A4               	movwf	Load_Main@i
 10377  0097  3000               	movlw	0
 10378  0098  00A5               	movwf	Load_Main@i+1
 10379  0099  0825               	movf	Load_Main@i+1,w
 10380  009A  3A80               	xorlw	128
 10381  009B  00A0               	movwf	??_Load_Main
 10382  009C  3080               	movlw	128
 10383  009D  0220               	subwf	??_Load_Main,w
 10384  009E  1D03               	skipz
 10385  009F  28A2               	goto	u10525
 10386  00A0  3004               	movlw	4
 10387  00A1  0224               	subwf	Load_Main@i,w
 10388  00A2                     u10525:	
 10389  00A2  1803               	btfsc	3,0
 10390  00A3  28D6               	goto	l9331
 10391  00A4                     l9325:	
 10392                           
 10393                           ;OverLoad_B1.c: 82: Load.ADH += Load.AH[i];
 10394  00A4  0020               	movlb	0	; select bank0
 10395  00A5  3524               	lslf	Load_Main@i,w
 10396  00A6  3E35               	addlw	(_Load+11)& (0+255)
 10397  00A7  0086               	movwf	6
 10398  00A8  3001               	movlw	1	; select bank2/3
 10399  00A9  0087               	movwf	7
 10400  00AA  3F40               	moviw [0]fsr1
 10401  00AB  00A0               	movwf	??_Load_Main
 10402  00AC  3F41               	moviw [1]fsr1
 10403  00AD  00A1               	movwf	??_Load_Main+1
 10404  00AE  0820               	movf	??_Load_Main,w
 10405  00AF  0022               	movlb	2	; select bank2
 10406  00B0  07AF               	addwf	(_Load^(0+256)+5),f
 10407  00B1  0020               	movlb	0	; select bank0
 10408  00B2  0821               	movf	??_Load_Main+1,w
 10409  00B3  0022               	movlb	2	; select bank2
 10410  00B4  3DB0               	addwfc	((_Load+1)^(0+256)+5),f
 10411                           
 10412                           ;OverLoad_B1.c: 83: Load.ADL += Load.AL[i];
 10413  00B5  0020               	movlb	0	; select bank0
 10414  00B6  3524               	lslf	Load_Main@i,w
 10415  00B7  3E3F               	addlw	(_Load+21)& (0+255)
 10416  00B8  0086               	movwf	6
 10417  00B9  3001               	movlw	1	; select bank2/3
 10418  00BA  0087               	movwf	7
 10419  00BB  3F40               	moviw [0]fsr1
 10420  00BC  00A0               	movwf	??_Load_Main
 10421  00BD  3F41               	moviw [1]fsr1
 10422  00BE  00A1               	movwf	??_Load_Main+1
 10423  00BF  0820               	movf	??_Load_Main,w
 10424  00C0  0022               	movlb	2	; select bank2
 10425  00C1  07B1               	addwf	(_Load^(0+256)+7),f
 10426  00C2  0020               	movlb	0	; select bank0
 10427  00C3  0821               	movf	??_Load_Main+1,w
 10428  00C4  0022               	movlb	2	; select bank2
 10429  00C5  3DB2               	addwfc	((_Load+1)^(0+256)+7),f
 10430  00C6  3001               	movlw	1
 10431  00C7  0020               	movlb	0	; select bank0
 10432  00C8  07A4               	addwf	Load_Main@i,f
 10433  00C9  3000               	movlw	0
 10434  00CA  3DA5               	addwfc	Load_Main@i+1,f
 10435  00CB  0825               	movf	Load_Main@i+1,w
 10436  00CC  3A80               	xorlw	128
 10437  00CD  00A0               	movwf	??_Load_Main
 10438  00CE  3080               	movlw	128
 10439  00CF  0220               	subwf	??_Load_Main,w
 10440  00D0  1D03               	skipz
 10441  00D1  28D4               	goto	u10535
 10442  00D2  3004               	movlw	4
 10443  00D3  0224               	subwf	Load_Main@i,w
 10444  00D4                     u10535:	
 10445  00D4  1C03               	skipc
 10446  00D5  28A4               	goto	l9325
 10447  00D6                     l9331:	
 10448                           
 10449                           ;OverLoad_B1.c: 84: }
 10450                           ;OverLoad_B1.c: 85: Load.ADH /= 3;
 10451  00D6  3003               	movlw	3
 10452  00D7  00F2               	movwf	___lwdiv@divisor
 10453  00D8  3000               	movlw	0
 10454  00D9  00F3               	movwf	___lwdiv@divisor+1
 10455  00DA  0022               	movlb	2	; select bank2
 10456  00DB  0830               	movf	((_Load+1)^(0+256)+5),w
 10457  00DC  01F5               	clrf	___lwdiv@dividend+1
 10458  00DD  07F5               	addwf	___lwdiv@dividend+1,f
 10459  00DE  082F               	movf	(_Load^(0+256)+5),w
 10460  00DF  01F4               	clrf	___lwdiv@dividend
 10461  00E0  07F4               	addwf	___lwdiv@dividend,f
 10462  00E1  3193  23CC  3180   	fcall	___lwdiv
 10463  00E4  0873               	movf	?___lwdiv+1,w
 10464  00E5  0022               	movlb	2	; select bank2
 10465  00E6  01B0               	clrf	((_Load+1)^(0+256)+5)
 10466  00E7  07B0               	addwf	((_Load+1)^(0+256)+5),f
 10467  00E8  0872               	movf	?___lwdiv,w
 10468  00E9  01AF               	clrf	(_Load^(0+256)+5)
 10469  00EA  07AF               	addwf	(_Load^(0+256)+5),f
 10470                           
 10471                           ;OverLoad_B1.c: 86: Load.ADL /= 3;
 10472  00EB  3003               	movlw	3
 10473  00EC  00F2               	movwf	___lwdiv@divisor
 10474  00ED  3000               	movlw	0
 10475  00EE  00F3               	movwf	___lwdiv@divisor+1
 10476  00EF  0832               	movf	((_Load+1)^(0+256)+7),w
 10477  00F0  01F5               	clrf	___lwdiv@dividend+1
 10478  00F1  07F5               	addwf	___lwdiv@dividend+1,f
 10479  00F2  0831               	movf	(_Load^(0+256)+7),w
 10480  00F3  01F4               	clrf	___lwdiv@dividend
 10481  00F4  07F4               	addwf	___lwdiv@dividend,f
 10482  00F5  3193  23CC  3180   	fcall	___lwdiv
 10483  00F8  0873               	movf	?___lwdiv+1,w
 10484  00F9  0022               	movlb	2	; select bank2
 10485  00FA  01B2               	clrf	((_Load+1)^(0+256)+7)
 10486  00FB  07B2               	addwf	((_Load+1)^(0+256)+7),f
 10487  00FC  0872               	movf	?___lwdiv,w
 10488  00FD  01B1               	clrf	(_Load^(0+256)+7)
 10489  00FE  07B1               	addwf	(_Load^(0+256)+7),f
 10490                           
 10491                           ;OverLoad_B1.c: 87: setLoad_AH_AL_Restore();
 10492  00FF  3190  20FC  3180   	fcall	_setLoad_AH_AL_Restore
 10493                           
 10494                           ;OverLoad_B1.c: 89: if (Load.ADH >= Load.ADL) {
 10495  0102  0022               	movlb	2	; select bank2
 10496  0103  0832               	movf	((_Load+1)^(0+256)+7),w
 10497  0104  0230               	subwf	((_Load+1)^(0+256)+5),w
 10498  0105  1D03               	skipz
 10499  0106  2909               	goto	u10545
 10500  0107  0831               	movf	(_Load^(0+256)+7),w
 10501  0108  022F               	subwf	(_Load^(0+256)+5),w
 10502  0109                     u10545:	
 10503  0109  1C03               	skipc
 10504  010A  0008               	return
 10505                           
 10506                           ;OverLoad_B1.c: 90: Load.AD = Load.ADH - Load.ADL;
 10507  010B  3005               	movlw	5
 10508  010C  3E2A               	addlw	_Load& (0+255)
 10509  010D  0086               	movwf	6
 10510  010E  3001               	movlw	1	; select bank2/3
 10511  010F  0087               	movwf	7
 10512  0110  0931               	comf	(_Load^(0+256)+7),w
 10513  0111  0020               	movlb	0	; select bank0
 10514  0112  00A0               	movwf	??_Load_Main
 10515  0113  0022               	movlb	2	; select bank2
 10516  0114  0932               	comf	((_Load+1)^(0+256)+7),w
 10517  0115  0020               	movlb	0	; select bank0
 10518  0116  00A1               	movwf	??_Load_Main+1
 10519  0117  0AA0               	incf	??_Load_Main,f
 10520  0118  1903               	skipnz
 10521  0119  0AA1               	incf	??_Load_Main+1,f
 10522  011A  3F40               	moviw [0]fsr1
 10523  011B  0720               	addwf	??_Load_Main,w
 10524  011C  0022               	movlb	2	; select bank2
 10525  011D  00C9               	movwf	(_Load^(0+256)+31)
 10526  011E  3F41               	moviw [1]fsr1
 10527  011F  0020               	movlb	0	; select bank0
 10528  0120  3D21               	addwfc	??_Load_Main+1,w
 10529  0121  0022               	movlb	2	; select bank2
 10530  0122  00CA               	movwf	(_Load^(0+256)+32)
 10531                           
 10532                           ;OverLoad_B1.c: 91: Load.ADH = 0;
 10533  0123  01AF               	clrf	(_Load^(0+256)+5)
 10534  0124  01B0               	clrf	((_Load+1)^(0+256)+5)
 10535                           
 10536                           ;OverLoad_B1.c: 92: Load.ADL = 0;
 10537  0125  01B1               	clrf	(_Load^(0+256)+7)
 10538  0126  01B2               	clrf	((_Load+1)^(0+256)+7)
 10539                           
 10540                           ;OverLoad_B1.c: 94: if (Load.Run == 1) {
 10541  0127  1DAA               	btfss	_Load^(0+256),3
 10542  0128  2985               	goto	l9371
 10543                           
 10544                           ;OverLoad_B1.c: 95: if (Load.Count < 2) {
 10545  0129  3002               	movlw	2
 10546  012A  0253               	subwf	(_Load^(0+256)+41),w
 10547  012B  1803               	skipnc
 10548  012C  2985               	goto	l9371
 10549                           
 10550                           ;OverLoad_B1.c: 96: Load.Count++;
 10551  012D  3001               	movlw	1
 10552  012E  0020               	movlb	0	; select bank0
 10553  012F  00A0               	movwf	??_Load_Main
 10554  0130  0820               	movf	??_Load_Main,w
 10555  0131  0022               	movlb	2	; select bank2
 10556  0132  07D3               	addwf	(_Load^(0+256)+41),f
 10557                           
 10558                           ;OverLoad_B1.c: 97: Load_Status = getDimmer_Load_Status();
 10559  0133  319D  2512  3180   	fcall	_getDimmer_Load_Status
 10560  0136  0020               	movlb	0	; select bank0
 10561  0137  00A0               	movwf	??_Load_Main
 10562  0138  0820               	movf	??_Load_Main,w
 10563  0139  00A3               	movwf	Load_Main@Load_Status
 10564                           
 10565                           ;OverLoad_B1.c: 98: Load.LightsCount = getMain_Lights_Count();
 10566  013A  319D  2565  3180   	fcall	_getMain_Lights_Count
 10567  013D  0020               	movlb	0	; select bank0
 10568  013E  00A0               	movwf	??_Load_Main
 10569  013F  0820               	movf	??_Load_Main,w
 10570  0140  0022               	movlb	2	; select bank2
 10571  0141  00D6               	movwf	(_Load^(0+256)+44)
 10572                           
 10573                           ;OverLoad_B1.c: 99: if (Load.Count == 1) {
 10574  0142  0853               	movf	(_Load^(0+256)+41),w
 10575  0143  3A01               	xorlw	1
 10576  0144  1D03               	skipz
 10577  0145  2950               	goto	l9357
 10578                           
 10579                           ;OverLoad_B1.c: 100: Load.ErrorCountValue = 2;
 10580  0146  3002               	movlw	2
 10581  0147  0020               	movlb	0	; select bank0
 10582  0148  00A0               	movwf	??_Load_Main
 10583  0149  0820               	movf	??_Load_Main,w
 10584  014A  0022               	movlb	2	; select bank2
 10585  014B  00D5               	movwf	(_Load^(0+256)+43)
 10586                           
 10587                           ;OverLoad_B1.c: 101: Load.JudgeValue = (20*57);
 10588  014C  3074               	movlw	116
 10589  014D  00CF               	movwf	(_Load^(0+256)+37)
 10590  014E  3004               	movlw	4
 10591  014F  295B               	goto	L6
 10592  0150                     l9357:	
 10593                           ;OverLoad_B1.c: 102: } else if (Load.Count == 2) {
 10594                           
 10595  0150  0853               	movf	(_Load^(0+256)+41),w
 10596  0151  3A02               	xorlw	2
 10597  0152  1D03               	skipz
 10598  0153  2985               	goto	l9371
 10599                           
 10600                           ;OverLoad_B1.c: 103: if (Load.LightsCount == 1) {
 10601  0154  0856               	movf	(_Load^(0+256)+44),w
 10602  0155  3A01               	xorlw	1
 10603  0156  1D03               	skipz
 10604  0157  295D               	goto	l9363
 10605                           
 10606                           ;OverLoad_B1.c: 104: Load.JudgeValue = (int)(1.8*57);
 10607  0158  3066               	movlw	102
 10608  0159  00CF               	movwf	(_Load^(0+256)+37)
 10609  015A  3000               	movlw	0
 10610  015B                     L6:	
 10611  015B  00D0               	movwf	(_Load^(0+256)+38)
 10612                           
 10613                           ;OverLoad_B1.c: 105: } else {
 10614  015C  2985               	goto	l9371
 10615  015D                     l9363:	
 10616                           
 10617                           ;OverLoad_B1.c: 106: if (Load_Status == 0) {
 10618  015D  0020               	movlb	0	; select bank0
 10619  015E  08A3               	movf	Load_Main@Load_Status,f
 10620  015F  1D03               	skipz
 10621  0160  2979               	goto	l9367
 10622                           
 10623                           ;OverLoad_B1.c: 107: Load.JudgeValue = (int)(1.8*57) * Load.LightsCount;
 10624  0161  0022               	movlb	2	; select bank2
 10625  0162  0856               	movf	(_Load^(0+256)+44),w
 10626  0163  0020               	movlb	0	; select bank0
 10627  0164  00A0               	movwf	??_Load_Main
 10628  0165  01A1               	clrf	??_Load_Main+1
 10629  0166  0820               	movf	??_Load_Main,w
 10630  0167  00F2               	movwf	___wmul@multiplier
 10631  0168  0821               	movf	??_Load_Main+1,w
 10632  0169  00F3               	movwf	___wmul@multiplier+1
 10633  016A  3066               	movlw	102
 10634  016B  00F4               	movwf	___wmul@multiplicand
 10635  016C  3000               	movlw	0
 10636  016D  00F5               	movwf	___wmul@multiplicand+1
 10637  016E  3191  214F  3180   	fcall	___wmul
 10638  0171  0873               	movf	?___wmul+1,w
 10639  0172  0022               	movlb	2	; select bank2
 10640  0173  01D0               	clrf	((_Load+1)^(0+256)+37)
 10641  0174  07D0               	addwf	((_Load+1)^(0+256)+37),f
 10642  0175  0872               	movf	?___wmul,w
 10643  0176  01CF               	clrf	(_Load^(0+256)+37)
 10644  0177  07CF               	addwf	(_Load^(0+256)+37),f
 10645                           
 10646                           ;OverLoad_B1.c: 108: } else if (Load_Status == 1) {
 10647  0178  2985               	goto	l9371
 10648  0179                     l9367:	
 10649  0179  0020               	movlb	0	; select bank0
 10650  017A  0823               	movf	Load_Main@Load_Status,w
 10651  017B  3A01               	xorlw	1
 10652  017C  1D03               	skipz
 10653  017D  2985               	goto	l9371
 10654                           
 10655                           ;OverLoad_B1.c: 109: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10656  017E  0022               	movlb	2	; select bank2
 10657  017F  0833               	movf	(_Load^(0+256)+9),w
 10658  0180  3E66               	addlw	102
 10659  0181  00CF               	movwf	(_Load^(0+256)+37)
 10660  0182  3000               	movlw	0
 10661  0183  3D34               	addwfc	((_Load+1)^(0+256)+9),w
 10662  0184  00D0               	movwf	((_Load+1)^(0+256)+37)
 10663  0185                     l9371:	
 10664                           
 10665                           ;OverLoad_B1.c: 110: }
 10666                           ;OverLoad_B1.c: 111: }
 10667                           ;OverLoad_B1.c: 112: }
 10668                           ;OverLoad_B1.c: 113: }
 10669                           ;OverLoad_B1.c: 114: }
 10670                           ;OverLoad_B1.c: 116: if (Load.AD >= Load.JudgeValue) {
 10671  0185  0022               	movlb	2	; select bank2
 10672  0186  0850               	movf	((_Load+1)^(0+256)+37),w
 10673  0187  024A               	subwf	((_Load+1)^(0+256)+31),w
 10674  0188  1D03               	skipz
 10675  0189  298C               	goto	u10625
 10676  018A  084F               	movf	(_Load^(0+256)+37),w
 10677  018B  0249               	subwf	(_Load^(0+256)+31),w
 10678  018C                     u10625:	
 10679  018C  1C03               	skipc
 10680  018D  299B               	goto	l9381
 10681                           
 10682                           ;OverLoad_B1.c: 117: Load.ErrorCount++;
 10683  018E  3001               	movlw	1
 10684  018F  0020               	movlb	0	; select bank0
 10685  0190  00A0               	movwf	??_Load_Main
 10686  0191  0820               	movf	??_Load_Main,w
 10687  0192  0022               	movlb	2	; select bank2
 10688  0193  07D4               	addwf	(_Load^(0+256)+42),f
 10689                           
 10690                           ;OverLoad_B1.c: 118: if (Load.ErrorCount > Load.ErrorCountValue) {
 10691  0194  0854               	movf	(_Load^(0+256)+42),w
 10692  0195  0255               	subwf	(_Load^(0+256)+43),w
 10693  0196  1803               	skipnc
 10694  0197  0008               	return
 10695                           
 10696                           ;OverLoad_B1.c: 119: Load.ErrorCount = 0;
 10697  0198  01D4               	clrf	(_Load^(0+256)+42)
 10698                           
 10699                           ;OverLoad_B1.c: 120: Load.ERROR = 1;
 10700  0199  16AA               	bsf	_Load^(0+256),5
 10701                           
 10702                           ;OverLoad_B1.c: 142: }
 10703                           ;OverLoad_B1.c: 143: } else {
 10704  019A  0008               	return
 10705  019B                     l9381:	
 10706                           
 10707                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10708  019B  01D4               	clrf	(_Load^(0+256)+42)
 10709                           
 10710                           ;OverLoad_B1.c: 145: if (Load.Run == 1) {
 10711  019C  1DAA               	btfss	_Load^(0+256),3
 10712  019D  0008               	return
 10713                           
 10714                           ;OverLoad_B1.c: 146: Load.SafeCount++;
 10715  019E  3001               	movlw	1
 10716  019F  0020               	movlb	0	; select bank0
 10717  01A0  00A0               	movwf	??_Load_Main
 10718  01A1  0820               	movf	??_Load_Main,w
 10719  01A2  0022               	movlb	2	; select bank2
 10720  01A3  07D7               	addwf	(_Load^(0+256)+45),f
 10721                           
 10722                           ;OverLoad_B1.c: 147: if (Load.SafeCount >= 3) {
 10723  01A4  3003               	movlw	3
 10724  01A5  0257               	subwf	(_Load^(0+256)+45),w
 10725  01A6  1C03               	skipc
 10726  01A7  0008               	return
 10727                           
 10728                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10729  01A8  01D7               	clrf	(_Load^(0+256)+45)
 10730                           
 10731                           ;OverLoad_B1.c: 149: Load.OK = 1;
 10732  01A9  17AA               	bsf	_Load^(0+256),7
 10733                           
 10734                           ;OverLoad_B1.c: 150: Load.Run = 0;
 10735  01AA  11AA               	bcf	_Load^(0+256),3
 10736                           
 10737                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10738  01AB  01D3               	clrf	(_Load^(0+256)+41)
 10739                           
 10740                           ;OverLoad_B1.c: 152: Load.TotalLoad = Load.AD;
 10741  01AC  084A               	movf	((_Load+1)^(0+256)+31),w
 10742  01AD  01B4               	clrf	((_Load+1)^(0+256)+9)
 10743  01AE  07B4               	addwf	((_Load+1)^(0+256)+9),f
 10744  01AF  0849               	movf	(_Load^(0+256)+31),w
 10745  01B0  01B3               	clrf	(_Load^(0+256)+9)
 10746  01B1  07B3               	addwf	(_Load^(0+256)+9),f
 10747                           
 10748                           ;OverLoad_B1.c: 153: Load.ErrorCountValue = 3;
 10749  01B2  3003               	movlw	3
 10750  01B3  0020               	movlb	0	; select bank0
 10751  01B4  00A0               	movwf	??_Load_Main
 10752  01B5  0820               	movf	??_Load_Main,w
 10753  01B6  0022               	movlb	2	; select bank2
 10754  01B7  00D5               	movwf	(_Load^(0+256)+43)
 10755                           
 10756                           ;OverLoad_B1.c: 156: }
 10757                           ;OverLoad_B1.c: 157: }
 10758                           ;OverLoad_B1.c: 180: }
 10759                           ;OverLoad_B1.c: 181: }
 10760                           ;OverLoad_B1.c: 182: }
 10761                           ;OverLoad_B1.c: 183: } else {
 10762  01B8  0008               	return
 10763  01B9                     l1628:	
 10764                           
 10765                           ;OverLoad_B1.c: 184: Load.ADtoGO = 1;
 10766  01B9  162A               	bsf	_Load^(0+256),4
 10767                           
 10768                           ;OverLoad_B1.c: 185: }
 10769                           ;OverLoad_B1.c: 186: } else {
 10770  01BA  0008               	return
 10771  01BB                     l1627:	
 10772                           
 10773                           ;OverLoad_B1.c: 188: if (Load.LightsON == 1) {
 10774  01BB  1D2A               	btfss	_Load^(0+256),2
 10775  01BC  29CE               	goto	l9419
 10776                           
 10777                           ;OverLoad_B1.c: 189: Load.LightsON = 0;
 10778  01BD  112A               	bcf	_Load^(0+256),2
 10779                           
 10780                           ;OverLoad_B1.c: 191: Load.ADtoGO = 0;
 10781  01BE  122A               	bcf	_Load^(0+256),4
 10782                           
 10783                           ;OverLoad_B1.c: 192: Load.Time = 0;
 10784  01BF  01AB               	clrf	(_Load^(0+256)+1)
 10785  01C0  01AC               	clrf	((_Load+1)^(0+256)+1)
 10786                           
 10787                           ;OverLoad_B1.c: 193: setLoad_AH_AL_Restore();
 10788  01C1  3190  20FC  3180   	fcall	_setLoad_AH_AL_Restore
 10789                           
 10790                           ;OverLoad_B1.c: 195: Load.ErrorCount = 0;
 10791  01C4  0022               	movlb	2	; select bank2
 10792  01C5  01D4               	clrf	(_Load^(0+256)+42)
 10793                           
 10794                           ;OverLoad_B1.c: 196: Load.SafeCount = 0;
 10795  01C6  01D7               	clrf	(_Load^(0+256)+45)
 10796                           
 10797                           ;OverLoad_B1.c: 198: Load.ADH = 0;
 10798  01C7  01AF               	clrf	(_Load^(0+256)+5)
 10799  01C8  01B0               	clrf	((_Load+1)^(0+256)+5)
 10800                           
 10801                           ;OverLoad_B1.c: 199: Load.ADL = 0;
 10802  01C9  01B1               	clrf	(_Load^(0+256)+7)
 10803  01CA  01B2               	clrf	((_Load+1)^(0+256)+7)
 10804                           
 10805                           ;OverLoad_B1.c: 205: Load.Run = 0;
 10806  01CB  11AA               	bcf	_Load^(0+256),3
 10807                           
 10808                           ;OverLoad_B1.c: 206: Load.Count = 0;
 10809  01CC  01D3               	clrf	(_Load^(0+256)+41)
 10810                           
 10811                           ;OverLoad_B1.c: 207: Load.OK = 0;
 10812  01CD  13AA               	bcf	_Load^(0+256),7
 10813  01CE                     l9419:	
 10814                           
 10815                           ;OverLoad_B1.c: 229: }
 10816                           ;OverLoad_B1.c: 230: if (Load.ERROR == 1) {
 10817  01CE  1EAA               	btfss	_Load^(0+256),5
 10818  01CF  0008               	return
 10819                           
 10820                           ;OverLoad_B1.c: 231: Load.ErrorTime++;
 10821  01D0  3001               	movlw	1
 10822  01D1  07AD               	addwf	(_Load^(0+256)+3),f
 10823  01D2  3000               	movlw	0
 10824  01D3  3DAE               	addwfc	((_Load+1)^(0+256)+3),f
 10825                           
 10826                           ;OverLoad_B1.c: 232: if (Load.ErrorTime >= (10000 / 20)) {
 10827  01D4  3001               	movlw	1
 10828  01D5  022E               	subwf	((_Load+1)^(0+256)+3),w
 10829  01D6  30F4               	movlw	244
 10830  01D7  1903               	skipnz
 10831  01D8  022D               	subwf	(_Load^(0+256)+3),w
 10832  01D9  1C03               	skipc
 10833  01DA  0008               	return
 10834                           
 10835                           ;OverLoad_B1.c: 233: Load.ErrorTime = 0;
 10836  01DB  01AD               	clrf	(_Load^(0+256)+3)
 10837  01DC  01AE               	clrf	((_Load+1)^(0+256)+3)
 10838                           
 10839                           ;OverLoad_B1.c: 234: Load.ERROR = 0;
 10840  01DD  12AA               	bcf	_Load^(0+256),5
 10841                           
 10842                           ;OverLoad_B1.c: 235: }
 10843                           ;OverLoad_B1.c: 236: }
 10844                           ;OverLoad_B1.c: 237: }
 10845                           ;OverLoad_B1.c: 238: } else {
 10846  01DE  0008               	return
 10847  01DF                     l1617:	
 10848                           
 10849                           ;OverLoad_B1.c: 239: if (myMain.PowerON == 1) {
 10850  01DF  0021               	movlb	1	; select bank1
 10851  01E0  1C2E               	btfss	_myMain^(0+128),0
 10852  01E1  0008               	return
 10853                           
 10854                           ;OverLoad_B1.c: 240: Load.Enable = 1;
 10855  01E2  0022               	movlb	2	; select bank2
 10856  01E3  142A               	bsf	_Load^(0+256),0
 10857  01E4  0008               	return
 10858  01E5                     __end_of_Load_Main:	
 10859                           
 10860                           	psect	text64
 10861  1D65                     __ptext64:	
 10862 ;; *************** function _getMain_Lights_Count *****************
 10863 ;; Defined at:
 10864 ;;		line 466 in file "../src/Main_B1.c"
 10865 ;; Parameters:    Size  Location     Type
 10866 ;;		None
 10867 ;; Auto vars:     Size  Location     Type
 10868 ;;  status1         1    3[COMMON] unsigned char 
 10869 ;;  count           1    2[COMMON] unsigned char 
 10870 ;; Return value:  Size  Location     Type
 10871 ;;                  1    wreg      unsigned char 
 10872 ;; Registers used:
 10873 ;;		wreg, status,2
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;Total ram usage:        2 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; Hardware stack levels required when called:    3
 10886 ;; This function calls:
 10887 ;;		Nothing
 10888 ;; This function is called by:
 10889 ;;		_Load_Main
 10890 ;; This function uses a non-reentrant model
 10891 ;;
 10892                           
 10893                           
 10894                           ;psect for function _getMain_Lights_Count
 10895  1D65                     _getMain_Lights_Count:	
 10896                           
 10897                           ;Main_B1.c: 467: char count = 0;
 10898                           
 10899                           ;incstack = 0
 10900                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 10901  1D65  01F2               	clrf	getMain_Lights_Count@count
 10902                           
 10903                           ;Main_B1.c: 471: char status1 = 0;
 10904  1D66  01F3               	clrf	getMain_Lights_Count@status1
 10905                           
 10906                           ;Main_B1.c: 472: status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 10907  1D67  3000               	movlw	0
 10908  1D68  0021               	movlb	1	; select bank1
 10909  1D69  19E8               	btfsc	_DimmerIntr1^(0+128),3
 10910  1D6A  3001               	movlw	1
 10911  1D6B  00F3               	movwf	getMain_Lights_Count@status1
 10912                           
 10913                           ;Main_B1.c: 497: return count = status1;
 10914  1D6C  0873               	movf	getMain_Lights_Count@status1,w
 10915  1D6D  00F2               	movwf	getMain_Lights_Count@count
 10916  1D6E  0008               	return
 10917  1D6F                     __end_of_getMain_Lights_Count:	
 10918                           
 10919                           	psect	text65
 10920  1D12                     __ptext65:	
 10921 ;; *************** function _getDimmer_Load_Status *****************
 10922 ;; Defined at:
 10923 ;;		line 1069 in file "../src/Dimmer_B1.c"
 10924 ;; Parameters:    Size  Location     Type
 10925 ;;		None
 10926 ;; Auto vars:     Size  Location     Type
 10927 ;;  status          1    2[COMMON] unsigned char 
 10928 ;; Return value:  Size  Location     Type
 10929 ;;                  1    wreg      unsigned char 
 10930 ;; Registers used:
 10931 ;;		wreg, status,2
 10932 ;; Tracked objects:
 10933 ;;		On entry : 0/0
 10934 ;;		On exit  : 0/0
 10935 ;;		Unchanged: 0/0
 10936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;Total ram usage:        1 bytes
 10942 ;; Hardware stack levels used:    1
 10943 ;; Hardware stack levels required when called:    3
 10944 ;; This function calls:
 10945 ;;		Nothing
 10946 ;; This function is called by:
 10947 ;;		_Load_Main
 10948 ;; This function uses a non-reentrant model
 10949 ;;
 10950                           
 10951                           
 10952                           ;psect for function _getDimmer_Load_Status
 10953  1D12                     _getDimmer_Load_Status:	
 10954                           
 10955                           ;Dimmer_B1.c: 1070: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10956                           
 10957                           ;incstack = 0
 10958                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10959  1D12  3000               	movlw	0
 10960  1D13  0022               	movlb	2	; select bank2
 10961  1D14  1920               	btfsc	_Dimmer^(0+256),2
 10962  1D15  3001               	movlw	1
 10963  1D16  00F2               	movwf	getDimmer_Load_Status@status
 10964                           
 10965                           ;Dimmer_B1.c: 1071: return status;
 10966  1D17  0872               	movf	getDimmer_Load_Status@status,w
 10967  1D18  0008               	return
 10968  1D19                     __end_of_getDimmer_Load_Status:	
 10969                           
 10970                           	psect	text66
 10971  1D0B                     __ptext66:	
 10972 ;; *************** function _getDimmer_LoadGO *****************
 10973 ;; Defined at:
 10974 ;;		line 1063 in file "../src/Dimmer_B1.c"
 10975 ;; Parameters:    Size  Location     Type
 10976 ;;		None
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;  loadgo          1    2[COMMON] unsigned char 
 10979 ;; Return value:  Size  Location     Type
 10980 ;;                  1    wreg      unsigned char 
 10981 ;; Registers used:
 10982 ;;		wreg, status,2
 10983 ;; Tracked objects:
 10984 ;;		On entry : 0/0
 10985 ;;		On exit  : 0/0
 10986 ;;		Unchanged: 0/0
 10987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10991 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10992 ;;Total ram usage:        1 bytes
 10993 ;; Hardware stack levels used:    1
 10994 ;; Hardware stack levels required when called:    3
 10995 ;; This function calls:
 10996 ;;		Nothing
 10997 ;; This function is called by:
 10998 ;;		_Load_Main
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           
 11003                           ;psect for function _getDimmer_LoadGO
 11004  1D0B                     _getDimmer_LoadGO:	
 11005                           
 11006                           ;Dimmer_B1.c: 1064: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11007                           
 11008                           ;incstack = 0
 11009                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11010  1D0B  3000               	movlw	0
 11011  1D0C  0022               	movlb	2	; select bank2
 11012  1D0D  18A0               	btfsc	_Dimmer^(0+256),1
 11013  1D0E  3001               	movlw	1
 11014  1D0F  00F2               	movwf	getDimmer_LoadGO@loadgo
 11015                           
 11016                           ;Dimmer_B1.c: 1065: return loadgo;
 11017  1D10  0872               	movf	getDimmer_LoadGO@loadgo,w
 11018  1D11  0008               	return
 11019  1D12                     __end_of_getDimmer_LoadGO:	
 11020                           
 11021                           	psect	text67
 11022  1E52                     __ptext67:	
 11023 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11024 ;; Defined at:
 11025 ;;		line 238 in file "../src/Dimmer_B1.c"
 11026 ;; Parameters:    Size  Location     Type
 11027 ;;		None
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  status          1    2[COMMON] unsigned char 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      unsigned char 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;Total ram usage:        1 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    3
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		_Load_Main
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           
 11054                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11055  1E52                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11056                           
 11057                           ;Dimmer_B1.c: 239: char status = 0;
 11058                           
 11059                           ;incstack = 0
 11060                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11061  1E52  01F2               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11062                           
 11063                           ;Dimmer_B1.c: 250: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11064  1E53  3000               	movlw	0
 11065  1E54  0021               	movlb	1	; select bank1
 11066  1E55  1A68               	btfsc	_DimmerIntr1^(0+128),4
 11067  1E56  3001               	movlw	1
 11068  1E57  00F2               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11069                           
 11070                           ;Dimmer_B1.c: 254: if (status == 0) {
 11071  1E58  08F2               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11072  1E59  1D03               	skipz
 11073  1E5A  2E5F               	goto	l6943
 11074                           
 11075                           ;Dimmer_B1.c: 264: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11076  1E5B  3000               	movlw	0
 11077  1E5C  1B68               	btfsc	_DimmerIntr1^(0+128),6
 11078  1E5D  3001               	movlw	1
 11079  1E5E  00F2               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11080  1E5F                     l6943:	
 11081                           
 11082                           ;Dimmer_B1.c: 266: }
 11083                           ;Dimmer_B1.c: 268: return status;
 11084  1E5F  0872               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11085  1E60  0008               	return
 11086  1E61                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11087                           
 11088                           	psect	text68
 11089  114F                     __ptext68:	
 11090 ;; *************** function ___wmul *****************
 11091 ;; Defined at:
 11092 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;  multiplier      2    2[COMMON] unsigned int 
 11095 ;;  multiplicand    2    4[COMMON] unsigned int 
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;  product         2    6[COMMON] unsigned int 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  2    2[COMMON] unsigned int 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11107 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11108 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;Total ram usage:        6 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    3
 11114 ;; This function calls:
 11115 ;;		Nothing
 11116 ;; This function is called by:
 11117 ;;		_Load_Main
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           
 11122                           ;psect for function ___wmul
 11123  114F                     ___wmul:	
 11124                           
 11125                           ;incstack = 0
 11126                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11127  114F  01F6               	clrf	___wmul@product
 11128  1150  01F7               	clrf	___wmul@product+1
 11129  1151                     l7427:	
 11130  1151  1C72               	btfss	___wmul@multiplier,0
 11131  1152  2957               	goto	l2642
 11132  1153  0874               	movf	___wmul@multiplicand,w
 11133  1154  07F6               	addwf	___wmul@product,f
 11134  1155  0875               	movf	___wmul@multiplicand+1,w
 11135  1156  3DF7               	addwfc	___wmul@product+1,f
 11136  1157                     l2642:	
 11137  1157  3001               	movlw	1
 11138  1158                     u7295:	
 11139  1158  35F4               	lslf	___wmul@multiplicand,f
 11140  1159  0DF5               	rlf	___wmul@multiplicand+1,f
 11141  115A  0B89               	decfsz	9,f
 11142  115B  2958               	goto	u7295
 11143  115C  3001               	movlw	1
 11144  115D                     u7305:	
 11145  115D  36F3               	lsrf	___wmul@multiplier+1,f
 11146  115E  0CF2               	rrf	___wmul@multiplier,f
 11147  115F  0B89               	decfsz	9,f
 11148  1160  295D               	goto	u7305
 11149  1161  0873               	movf	___wmul@multiplier+1,w
 11150  1162  0472               	iorwf	___wmul@multiplier,w
 11151  1163  1D03               	skipz
 11152  1164  2951               	goto	l7427
 11153  1165  0877               	movf	___wmul@product+1,w
 11154  1166  01F3               	clrf	?___wmul+1
 11155  1167  07F3               	addwf	?___wmul+1,f
 11156  1168  0876               	movf	___wmul@product,w
 11157  1169  01F2               	clrf	?___wmul
 11158  116A  07F2               	addwf	?___wmul,f
 11159  116B  0008               	return
 11160  116C                     __end_of___wmul:	
 11161                           
 11162                           	psect	text69
 11163  13CC                     __ptext69:	
 11164 ;; *************** function ___lwdiv *****************
 11165 ;; Defined at:
 11166 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11167 ;; Parameters:    Size  Location     Type
 11168 ;;  divisor         2    2[COMMON] unsigned int 
 11169 ;;  dividend        2    4[COMMON] unsigned int 
 11170 ;; Auto vars:     Size  Location     Type
 11171 ;;  quotient        2    7[COMMON] unsigned int 
 11172 ;;  counter         1    9[COMMON] unsigned char 
 11173 ;; Return value:  Size  Location     Type
 11174 ;;                  2    2[COMMON] unsigned int 
 11175 ;; Registers used:
 11176 ;;		wreg, status,2, status,0
 11177 ;; Tracked objects:
 11178 ;;		On entry : 0/0
 11179 ;;		On exit  : 0/0
 11180 ;;		Unchanged: 0/0
 11181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11182 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11183 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11184 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11185 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11186 ;;Total ram usage:        8 bytes
 11187 ;; Hardware stack levels used:    1
 11188 ;; Hardware stack levels required when called:    3
 11189 ;; This function calls:
 11190 ;;		Nothing
 11191 ;; This function is called by:
 11192 ;;		_Load_Main
 11193 ;;		_setRF_Main
 11194 ;; This function uses a non-reentrant model
 11195 ;;
 11196                           
 11197                           
 11198                           ;psect for function ___lwdiv
 11199  13CC                     ___lwdiv:	
 11200                           
 11201                           ;incstack = 0
 11202                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11203  13CC  01F7               	clrf	___lwdiv@quotient
 11204  13CD  01F8               	clrf	___lwdiv@quotient+1
 11205  13CE  0873               	movf	___lwdiv@divisor+1,w
 11206  13CF  0472               	iorwf	___lwdiv@divisor,w
 11207  13D0  1903               	skipnz
 11208  13D1  2BFB               	goto	l6905
 11209  13D2  01F9               	clrf	___lwdiv@counter
 11210  13D3  0AF9               	incf	___lwdiv@counter,f
 11211  13D4                     l6893:	
 11212  13D4  1BF3               	btfsc	___lwdiv@divisor+1,7
 11213  13D5  2BE0               	goto	l6895
 11214  13D6  3001               	movlw	1
 11215  13D7                     u6365:	
 11216  13D7  35F2               	lslf	___lwdiv@divisor,f
 11217  13D8  0DF3               	rlf	___lwdiv@divisor+1,f
 11218  13D9  0B89               	decfsz	9,f
 11219  13DA  2BD7               	goto	u6365
 11220  13DB  3001               	movlw	1
 11221  13DC  00F6               	movwf	??___lwdiv
 11222  13DD  0876               	movf	??___lwdiv,w
 11223  13DE  07F9               	addwf	___lwdiv@counter,f
 11224  13DF  2BD4               	goto	l6893
 11225  13E0                     l6895:	
 11226  13E0  3001               	movlw	1
 11227  13E1                     u6385:	
 11228  13E1  35F7               	lslf	___lwdiv@quotient,f
 11229  13E2  0DF8               	rlf	___lwdiv@quotient+1,f
 11230  13E3  0B89               	decfsz	9,f
 11231  13E4  2BE1               	goto	u6385
 11232  13E5  0873               	movf	___lwdiv@divisor+1,w
 11233  13E6  0275               	subwf	___lwdiv@dividend+1,w
 11234  13E7  1D03               	skipz
 11235  13E8  2BEB               	goto	u6395
 11236  13E9  0872               	movf	___lwdiv@divisor,w
 11237  13EA  0274               	subwf	___lwdiv@dividend,w
 11238  13EB                     u6395:	
 11239  13EB  1C03               	skipc
 11240  13EC  2BF2               	goto	l6901
 11241  13ED  0872               	movf	___lwdiv@divisor,w
 11242  13EE  02F4               	subwf	___lwdiv@dividend,f
 11243  13EF  0873               	movf	___lwdiv@divisor+1,w
 11244  13F0  3BF5               	subwfb	___lwdiv@dividend+1,f
 11245  13F1  1477               	bsf	___lwdiv@quotient,0
 11246  13F2                     l6901:	
 11247  13F2  3001               	movlw	1
 11248  13F3                     u6405:	
 11249  13F3  36F3               	lsrf	___lwdiv@divisor+1,f
 11250  13F4  0CF2               	rrf	___lwdiv@divisor,f
 11251  13F5  0B89               	decfsz	9,f
 11252  13F6  2BF3               	goto	u6405
 11253  13F7  3001               	movlw	1
 11254  13F8  02F9               	subwf	___lwdiv@counter,f
 11255  13F9  1D03               	btfss	3,2
 11256  13FA  2BE0               	goto	l6895
 11257  13FB                     l6905:	
 11258  13FB  0878               	movf	___lwdiv@quotient+1,w
 11259  13FC  01F3               	clrf	?___lwdiv+1
 11260  13FD  07F3               	addwf	?___lwdiv+1,f
 11261  13FE  0877               	movf	___lwdiv@quotient,w
 11262  13FF  01F2               	clrf	?___lwdiv
 11263  1400  07F2               	addwf	?___lwdiv,f
 11264  1401  0008               	return
 11265  1402                     __end_of___lwdiv:	
 11266                           
 11267                           	psect	text70
 11268  1CBC                     __ptext70:	
 11269 ;; *************** function _Load_Initialization *****************
 11270 ;; Defined at:
 11271 ;;		line 9 in file "../src/OverLoad_B1.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;		None
 11274 ;; Auto vars:     Size  Location     Type
 11275 ;;		None
 11276 ;; Return value:  Size  Location     Type
 11277 ;;		None               void
 11278 ;; Registers used:
 11279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11280 ;; Tracked objects:
 11281 ;;		On entry : 0/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;Total ram usage:        0 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; Hardware stack levels required when called:    4
 11292 ;; This function calls:
 11293 ;;		_setLoad_AH_AL_Restore
 11294 ;; This function is called by:
 11295 ;;		_main
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299                           
 11300                           ;psect for function _Load_Initialization
 11301  1CBC                     _Load_Initialization:	
 11302                           
 11303                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11304                           
 11305                           ;incstack = 0
 11306                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11307  1CBC  3190  20FC         	fcall	_setLoad_AH_AL_Restore
 11308  1CBE  0008               	return
 11309  1CBF                     __end_of_Load_Initialization:	
 11310                           
 11311                           	psect	text71
 11312  10FC                     __ptext71:	
 11313 ;; *************** function _setLoad_AH_AL_Restore *****************
 11314 ;; Defined at:
 11315 ;;		line 266 in file "../src/OverLoad_B1.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;		None
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;  i               1    3[COMMON] unsigned char 
 11320 ;; Return value:  Size  Location     Type
 11321 ;;		None               void
 11322 ;; Registers used:
 11323 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/0
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;Total ram usage:        2 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:    3
 11336 ;; This function calls:
 11337 ;;		Nothing
 11338 ;; This function is called by:
 11339 ;;		_Load_Initialization
 11340 ;;		_Load_Main
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           
 11345                           ;psect for function _setLoad_AH_AL_Restore
 11346  10FC                     _setLoad_AH_AL_Restore:	
 11347                           
 11348                           ;OverLoad_B1.c: 267: char i;
 11349                           ;OverLoad_B1.c: 268: for (i = 0; i < 5; i++) {
 11350                           
 11351                           ;incstack = 0
 11352                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11353  10FC  01F3               	clrf	setLoad_AH_AL_Restore@i
 11354  10FD                     L7:	
 11355  10FD  3005               	movlw	5
 11356  10FE  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11357  10FF  1803               	btfsc	3,0
 11358  1100  0008               	return
 11359                           
 11360                           ;OverLoad_B1.c: 269: Load.AH[i] = 0;
 11361  1101  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11362  1102  3E35               	addlw	(_Load+11)& (0+255)
 11363  1103  0086               	movwf	6
 11364  1104  3001               	movlw	1	; select bank2/3
 11365  1105  0087               	movwf	7
 11366  1106  3000               	movlw	0
 11367  1107  3FC0               	movwi [0]fsr1
 11368  1108  3FC1               	movwi [1]fsr1
 11369                           
 11370                           ;OverLoad_B1.c: 270: Load.AL[i] = 0xffff;
 11371  1109  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11372  110A  3E3F               	addlw	(_Load+21)& (0+255)
 11373  110B  0086               	movwf	6
 11374  110C  3001               	movlw	1	; select bank2/3
 11375  110D  0087               	movwf	7
 11376  110E  30FF               	movlw	255
 11377  110F  3FC0               	movwi [0]fsr1
 11378  1110  30FF               	movlw	255
 11379  1111  3FC1               	movwi [1]fsr1
 11380  1112  3001               	movlw	1
 11381  1113  00F2               	movwf	??_setLoad_AH_AL_Restore
 11382  1114  0872               	movf	??_setLoad_AH_AL_Restore,w
 11383  1115  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11384  1116  28FD               	goto	L7
 11385  1117                     __end_of_setLoad_AH_AL_Restore:	
 11386                           
 11387                           	psect	text72
 11388  1CD4                     __ptext72:	
 11389 ;; *************** function _LED_Main *****************
 11390 ;; Defined at:
 11391 ;;		line 47 in file "../src/LED_B1.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;		None
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;		None               void
 11398 ;; Registers used:
 11399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;Total ram usage:        0 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:    5
 11412 ;; This function calls:
 11413 ;;		_setLED_Main
 11414 ;; This function is called by:
 11415 ;;		_main
 11416 ;; This function uses a non-reentrant model
 11417 ;;
 11418                           
 11419                           
 11420                           ;psect for function _LED_Main
 11421  1CD4                     _LED_Main:	
 11422                           
 11423                           ;LED_B1.c: 62: setLED_Main(99);
 11424                           
 11425                           ;incstack = 0
 11426                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11427  1CD4  3063               	movlw	99
 11428  1CD5  3193  2330         	fcall	_setLED_Main
 11429  1CD7  0008               	return
 11430  1CD8                     __end_of_LED_Main:	
 11431                           
 11432                           	psect	text73
 11433  1330                     __ptext73:	
 11434 ;; *************** function _setLED_Main *****************
 11435 ;; Defined at:
 11436 ;;		line 221 in file "../src/LED_B1.c"
 11437 ;; Parameters:    Size  Location     Type
 11438 ;;  led             1    wreg     unsigned char 
 11439 ;; Auto vars:     Size  Location     Type
 11440 ;;  led             1    6[COMMON] unsigned char 
 11441 ;; Return value:  Size  Location     Type
 11442 ;;		None               void
 11443 ;; Registers used:
 11444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11445 ;; Tracked objects:
 11446 ;;		On entry : 0/0
 11447 ;;		On exit  : 0/0
 11448 ;;		Unchanged: 0/0
 11449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;Total ram usage:        3 bytes
 11455 ;; Hardware stack levels used:    1
 11456 ;; Hardware stack levels required when called:    4
 11457 ;; This function calls:
 11458 ;;		_LedPointSelect
 11459 ;; This function is called by:
 11460 ;;		_LED_Main
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           
 11465                           ;psect for function _setLED_Main
 11466  1330                     _setLED_Main:	
 11467                           
 11468                           ;incstack = 0
 11469                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11470                           ;setLED_Main@led stored from wreg
 11471  1330  00F6               	movwf	setLED_Main@led
 11472                           
 11473                           ;LED_B1.c: 222: LedPointSelect(led);
 11474  1331  0876               	movf	setLED_Main@led,w
 11475  1332  319D  25B8  3193   	fcall	_LedPointSelect
 11476                           
 11477                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11478  1335  0021               	movlb	1	; select bank1
 11479  1336  084D               	movf	_LED^(0+128),w
 11480  1337  0086               	movwf	6
 11481  1338  3001               	movlw	1	; select bank2/3
 11482  1339  0087               	movwf	7
 11483  133A  1C81               	btfss	1,1
 11484  133B  0008               	return
 11485                           
 11486                           ;LED_B1.c: 224: LED->Time++;
 11487  133C  0A4D               	incf	_LED^(0+128),w
 11488  133D  0086               	movwf	6
 11489  133E  3001               	movlw	1	; select bank2/3
 11490  133F  0087               	movwf	7
 11491  1340  3001               	movlw	1
 11492  1341  0781               	addwf	1,f
 11493  1342  3141               	addfsr 1,1
 11494  1343  1803               	skipnc
 11495  1344  0A81               	incf	1,f
 11496                           
 11497                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11498  1345  0A4D               	incf	_LED^(0+128),w
 11499  1346  0086               	movwf	6
 11500  1347  3001               	movlw	1	; select bank2/3
 11501  1348  0087               	movwf	7
 11502  1349  3F40               	moviw [0]fsr1
 11503  134A  00F4               	movwf	??_setLED_Main
 11504  134B  3F41               	moviw [1]fsr1
 11505  134C  00F5               	movwf	??_setLED_Main+1
 11506  134D  3000               	movlw	0
 11507  134E  0275               	subwf	??_setLED_Main+1,w
 11508  134F  3019               	movlw	25
 11509  1350  1903               	skipnz
 11510  1351  0274               	subwf	??_setLED_Main,w
 11511  1352  1C03               	skipc
 11512  1353  0008               	return
 11513                           
 11514                           ;LED_B1.c: 226: LED->Time = 0;
 11515  1354  0A4D               	incf	_LED^(0+128),w
 11516  1355  0086               	movwf	6
 11517  1356  3001               	movlw	1	; select bank2/3
 11518  1357  0087               	movwf	7
 11519  1358  3000               	movlw	0
 11520  1359  3FC0               	movwi [0]fsr1
 11521  135A  3FC1               	movwi [1]fsr1
 11522                           
 11523                           ;LED_B1.c: 243: if (led == 99) {
 11524  135B  0876               	movf	setLED_Main@led,w
 11525  135C  3A63               	xorlw	99
 11526  135D  1D03               	skipz
 11527  135E  0008               	return
 11528                           
 11529                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11530  135F  3020               	movlw	32
 11531  1360  0020               	movlb	0	; select bank0
 11532  1361  068D               	xorwf	13,f
 11533  1362  0008               	return
 11534  1363                     __end_of_setLED_Main:	
 11535                           
 11536                           	psect	text74
 11537  1CD0                     __ptext74:	
 11538 ;; *************** function _LED_Initialization *****************
 11539 ;; Defined at:
 11540 ;;		line 31 in file "../src/LED_B1.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;		None
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;		None
 11545 ;; Return value:  Size  Location     Type
 11546 ;;		None               void
 11547 ;; Registers used:
 11548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11558 ;;Total ram usage:        0 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:    6
 11561 ;; This function calls:
 11562 ;;		_setLED_Initialization
 11563 ;; This function is called by:
 11564 ;;		_main
 11565 ;; This function uses a non-reentrant model
 11566 ;;
 11567                           
 11568                           
 11569                           ;psect for function _LED_Initialization
 11570  1CD0                     _LED_Initialization:	
 11571                           
 11572                           ;LED_B1.c: 42: setLED_Initialization(99);
 11573                           
 11574                           ;incstack = 0
 11575                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11576  1CD0  3063               	movlw	99
 11577  1CD1  319E  2690         	fcall	_setLED_Initialization
 11578  1CD3  0008               	return
 11579  1CD4                     __end_of_LED_Initialization:	
 11580                           
 11581                           	psect	text75
 11582  1E90                     __ptext75:	
 11583 ;; *************** function _setLED_Initialization *****************
 11584 ;; Defined at:
 11585 ;;		line 69 in file "../src/LED_B1.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;  led             1    wreg     unsigned char 
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;  led             1    6[COMMON] unsigned char 
 11590 ;; Return value:  Size  Location     Type
 11591 ;;		None               void
 11592 ;; Registers used:
 11593 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;Total ram usage:        1 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:    5
 11606 ;; This function calls:
 11607 ;;		_LedPointSelect
 11608 ;;		_setLED
 11609 ;; This function is called by:
 11610 ;;		_LED_Initialization
 11611 ;; This function uses a non-reentrant model
 11612 ;;
 11613                           
 11614                           
 11615                           ;psect for function _setLED_Initialization
 11616  1E90                     _setLED_Initialization:	
 11617                           
 11618                           ;incstack = 0
 11619                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11620                           ;setLED_Initialization@led stored from wreg
 11621  1E90  00F6               	movwf	setLED_Initialization@led
 11622                           
 11623                           ;LED_B1.c: 70: LedPointSelect(led);
 11624  1E91  0876               	movf	setLED_Initialization@led,w
 11625  1E92  319D  25B8  319E   	fcall	_LedPointSelect
 11626                           
 11627                           ;LED_B1.c: 71: LED->Enable = 1;
 11628  1E95  0021               	movlb	1	; select bank1
 11629  1E96  084D               	movf	_LED^(0+128),w
 11630  1E97  0086               	movwf	6
 11631  1E98  3001               	movlw	1	; select bank2/3
 11632  1E99  0087               	movwf	7
 11633  1E9A  1401               	bsf	1,0
 11634                           
 11635                           ;LED_B1.c: 72: setLED(led, 0);
 11636  1E9B  01F4               	clrf	setLED@command
 11637  1E9C  0876               	movf	setLED_Initialization@led,w
 11638  1E9D  3194  24AB         	fcall	_setLED
 11639  1E9F  0008               	return
 11640  1EA0                     __end_of_setLED_Initialization:	
 11641                           
 11642                           	psect	text76
 11643  12FD                     __ptext76:	
 11644 ;; *************** function _Flash_Memory_Main *****************
 11645 ;; Defined at:
 11646 ;;		line 954 in file "../src/MCU_B1.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;		None
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;		None
 11651 ;; Return value:  Size  Location     Type
 11652 ;;		None               void
 11653 ;; Registers used:
 11654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;Total ram usage:        1 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; Hardware stack levels required when called:    6
 11667 ;; This function calls:
 11668 ;;		_Flash_Memory_Modify
 11669 ;;		_getMain_All_LightsStatus
 11670 ;; This function is called by:
 11671 ;;		_main
 11672 ;; This function uses a non-reentrant model
 11673 ;;
 11674                           
 11675                           
 11676                           ;psect for function _Flash_Memory_Main
 11677  12FD                     _Flash_Memory_Main:	
 11678                           
 11679                           ;MCU_B1.c: 955: if (Memory.Modify == 1) {
 11680                           
 11681                           ;incstack = 0
 11682                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11683  12FD  0023               	movlb	3	; select bank3
 11684  12FE  1C62               	btfss	(_Memory^(0+384)+36),0
 11685  12FF  0008               	return
 11686                           
 11687                           ;MCU_B1.c: 956: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11688  1300  319D  2527  3192   	fcall	_getMain_All_LightsStatus
 11689  1303  3A00               	xorlw	0
 11690  1304  3000               	movlw	0
 11691  1305  1903               	skipnz
 11692  1306  3001               	movlw	1
 11693  1307  00F8               	movwf	??_Flash_Memory_Main
 11694  1308  0DF8               	rlf	??_Flash_Memory_Main,f
 11695  1309  0023               	movlb	3	; select bank3
 11696  130A  0862               	movf	(_Memory^(0+384)+36),w
 11697  130B  0678               	xorwf	??_Flash_Memory_Main,w
 11698  130C  39FD               	andlw	-3
 11699  130D  0678               	xorwf	??_Flash_Memory_Main,w
 11700  130E  00E2               	movwf	(_Memory^(0+384)+36)
 11701                           
 11702                           ;MCU_B1.c: 957: if (Memory.GO == 1) {
 11703  130F  1CE2               	btfss	(_Memory^(0+384)+36),1
 11704  1310  2B2A               	goto	l1241
 11705                           
 11706                           ;MCU_B1.c: 958: Memory.Runtime = 1;
 11707  1311  15E2               	bsf	(_Memory^(0+384)+36),3
 11708                           
 11709                           ;MCU_B1.c: 959: Memory.Time++;
 11710  1312  3001               	movlw	1
 11711  1313  07E0               	addwf	(_Memory^(0+384)+34),f
 11712  1314  3000               	movlw	0
 11713  1315  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11714                           
 11715                           ;MCU_B1.c: 960: if (Memory.Time == (200 / 20)) {
 11716  1316  3022               	movlw	34
 11717  1317  3EBE               	addlw	_Memory& (0+255)
 11718  1318  0086               	movwf	6
 11719  1319  3001               	movlw	1	; select bank3/4
 11720  131A  0087               	movwf	7
 11721  131B  3F40               	moviw [0]fsr1
 11722  131C  3A0A               	xorlw	10
 11723  131D  1D03               	skipz
 11724  131E  2B21               	goto	u7515
 11725  131F  3F41               	moviw [1]fsr1
 11726  1320  3A00               	xorlw	0
 11727  1321                     u7515:	
 11728  1321  1D03               	skipz
 11729  1322  0008               	return
 11730                           
 11731                           ;MCU_B1.c: 961: Memory.Time = 0;
 11732  1323  01E0               	clrf	(_Memory^(0+384)+34)
 11733  1324  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11734                           
 11735                           ;MCU_B1.c: 962: Memory.Modify = 0;
 11736  1325  1062               	bcf	(_Memory^(0+384)+36),0
 11737                           
 11738                           ;MCU_B1.c: 963: Memory.GO = 0;
 11739  1326  10E2               	bcf	(_Memory^(0+384)+36),1
 11740                           
 11741                           ;MCU_B1.c: 964: Flash_Memory_Modify();
 11742  1327  3195  25AF         	fcall	_Flash_Memory_Modify
 11743                           
 11744                           ;MCU_B1.c: 965: }
 11745                           ;MCU_B1.c: 966: } else {
 11746  1329  0008               	return
 11747  132A                     l1241:	
 11748                           
 11749                           ;MCU_B1.c: 967: if (Memory.Runtime == 1) {
 11750  132A  1DE2               	btfss	(_Memory^(0+384)+36),3
 11751  132B  0008               	return
 11752                           
 11753                           ;MCU_B1.c: 968: Memory.Runtime = 0;
 11754  132C  11E2               	bcf	(_Memory^(0+384)+36),3
 11755                           
 11756                           ;MCU_B1.c: 969: Memory.Time = 0;
 11757  132D  01E0               	clrf	(_Memory^(0+384)+34)
 11758  132E  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11759  132F  0008               	return
 11760  1330                     __end_of_Flash_Memory_Main:	
 11761                           
 11762                           	psect	text77
 11763  15AF                     __ptext77:	
 11764 ;; *************** function _Flash_Memory_Modify *****************
 11765 ;; Defined at:
 11766 ;;		line 1027 in file "../src/MCU_B1.c"
 11767 ;; Parameters:    Size  Location     Type
 11768 ;;		None
 11769 ;; Auto vars:     Size  Location     Type
 11770 ;;  i               1    7[COMMON] unsigned char 
 11771 ;; Return value:  Size  Location     Type
 11772 ;;		None               void
 11773 ;; Registers used:
 11774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11775 ;; Tracked objects:
 11776 ;;		On entry : 0/0
 11777 ;;		On exit  : 0/0
 11778 ;;		Unchanged: 0/0
 11779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;Total ram usage:        2 bytes
 11785 ;; Hardware stack levels used:    1
 11786 ;; Hardware stack levels required when called:    5
 11787 ;; This function calls:
 11788 ;;		_Flash_Memory_Erasing
 11789 ;;		_Flash_Memory_Read
 11790 ;;		_Flash_Memory_Write
 11791 ;;		_setMemory_Data
 11792 ;; This function is called by:
 11793 ;;		_Flash_Memory_Main
 11794 ;; This function uses a non-reentrant model
 11795 ;;
 11796                           
 11797                           
 11798                           ;psect for function _Flash_Memory_Modify
 11799  15AF                     _Flash_Memory_Modify:	
 11800                           
 11801                           ;MCU_B1.c: 1028: char i = 0;
 11802                           
 11803                           ;incstack = 0
 11804                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11805  15AF  01F7               	clrf	Flash_Memory_Modify@i
 11806                           
 11807                           ;MCU_B1.c: 1029: for (i = 0; i < 32; i++) {
 11808  15B0  01F7               	clrf	Flash_Memory_Modify@i
 11809  15B1  3020               	movlw	32
 11810  15B2  0277               	subwf	Flash_Memory_Modify@i,w
 11811  15B3  1803               	btfsc	3,0
 11812  15B4  2DC9               	goto	l7147
 11813  15B5                     l7141:	
 11814                           
 11815                           ;MCU_B1.c: 1030: Memory.Data[i] = Flash_Memory_Read(i);
 11816  15B5  0877               	movf	Flash_Memory_Modify@i,w
 11817  15B6  319F  276E  3195   	fcall	_Flash_Memory_Read
 11818  15B9  00F6               	movwf	??_Flash_Memory_Modify
 11819  15BA  0877               	movf	Flash_Memory_Modify@i,w
 11820  15BB  3EBE               	addlw	_Memory& (0+255)
 11821  15BC  0086               	movwf	6
 11822  15BD  3001               	movlw	1	; select bank3/4
 11823  15BE  0087               	movwf	7
 11824  15BF  0876               	movf	??_Flash_Memory_Modify,w
 11825  15C0  0081               	movwf	1
 11826  15C1  3001               	movlw	1
 11827  15C2  00F6               	movwf	??_Flash_Memory_Modify
 11828  15C3  0876               	movf	??_Flash_Memory_Modify,w
 11829  15C4  07F7               	addwf	Flash_Memory_Modify@i,f
 11830  15C5  3020               	movlw	32
 11831  15C6  0277               	subwf	Flash_Memory_Modify@i,w
 11832  15C7  1C03               	skipc
 11833  15C8  2DB5               	goto	l7141
 11834  15C9                     l7147:	
 11835                           
 11836                           ;MCU_B1.c: 1031: }
 11837                           ;MCU_B1.c: 1032: setMemory_Data(0, product->Data[12]);
 11838  15C9  0020               	movlb	0	; select bank0
 11839  15CA  086D               	movf	_product,w
 11840  15CB  0086               	movwf	6
 11841  15CC  3002               	movlw	2	; select bank4/5
 11842  15CD  0087               	movwf	7
 11843  15CE  3002               	movlw	2	; select bank4/5
 11844  15CF  3F4C               	moviw [12]fsr1
 11845  15D0  00F2               	movwf	setMemory_Data@data
 11846  15D1  3000               	movlw	0
 11847  15D2  319D  25C3  3195   	fcall	_setMemory_Data
 11848                           
 11849                           ;MCU_B1.c: 1033: setMemory_Data(1, product->Data[13]);
 11850  15D5  0020               	movlb	0	; select bank0
 11851  15D6  086D               	movf	_product,w
 11852  15D7  0086               	movwf	6
 11853  15D8  3002               	movlw	2	; select bank4/5
 11854  15D9  0087               	movwf	7
 11855  15DA  3002               	movlw	2	; select bank4/5
 11856  15DB  3F4D               	moviw [13]fsr1
 11857  15DC  00F2               	movwf	setMemory_Data@data
 11858  15DD  3001               	movlw	1
 11859  15DE  319D  25C3  3195   	fcall	_setMemory_Data
 11860                           
 11861                           ;MCU_B1.c: 1034: setMemory_Data(2, product->Data[14]);
 11862  15E1  0020               	movlb	0	; select bank0
 11863  15E2  086D               	movf	_product,w
 11864  15E3  0086               	movwf	6
 11865  15E4  3002               	movlw	2	; select bank4/5
 11866  15E5  0087               	movwf	7
 11867  15E6  3002               	movlw	2	; select bank4/5
 11868  15E7  3F4E               	moviw [14]fsr1
 11869  15E8  00F2               	movwf	setMemory_Data@data
 11870  15E9  3002               	movlw	2
 11871  15EA  319D  25C3  3195   	fcall	_setMemory_Data
 11872                           
 11873                           ;MCU_B1.c: 1040: if (Memory.LoopSave == 1) {
 11874  15ED  0023               	movlb	3	; select bank3
 11875  15EE  1D62               	btfss	(_Memory^(0+384)+36),2
 11876  15EF  2DF4               	goto	l1264
 11877                           
 11878                           ;MCU_B1.c: 1041: Memory.LoopSave = 0;
 11879  15F0  1162               	bcf	(_Memory^(0+384)+36),2
 11880                           
 11881                           ;MCU_B1.c: 1042: myMain.FirstOpen = 0;
 11882  15F1  0021               	movlb	1	; select bank1
 11883  15F2  11AE               	bcf	_myMain^(0+128),3
 11884                           
 11885                           ;MCU_B1.c: 1043: myMain.First = 0;
 11886  15F3  12AE               	bcf	_myMain^(0+128),5
 11887  15F4                     l1264:	
 11888                           
 11889                           ;MCU_B1.c: 1045: }
 11890                           ;MCU_B1.c: 1046: GIE = 0;
 11891  15F4  138B               	bcf	11,7	;volatile
 11892                           
 11893                           ;MCU_B1.c: 1047: Flash_Memory_Erasing();
 11894  15F5  319D  25E5  3195   	fcall	_Flash_Memory_Erasing
 11895                           
 11896                           ;MCU_B1.c: 1048: Flash_Memory_Write();
 11897  15F8  3192  227B         	fcall	_Flash_Memory_Write
 11898                           
 11899                           ;MCU_B1.c: 1049: GIE = 1;
 11900  15FA  178B               	bsf	11,7	;volatile
 11901  15FB  0008               	return
 11902  15FC                     __end_of_Flash_Memory_Modify:	
 11903                           
 11904                           	psect	text78
 11905  1DE5                     __ptext78:	
 11906 ;; *************** function _Flash_Memory_Erasing *****************
 11907 ;; Defined at:
 11908 ;;		line 1016 in file "../src/MCU_B1.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;		None
 11911 ;; Auto vars:     Size  Location     Type
 11912 ;;		None
 11913 ;; Return value:  Size  Location     Type
 11914 ;;		None               void
 11915 ;; Registers used:
 11916 ;;		wreg, status,2, status,0, pclath, cstack
 11917 ;; Tracked objects:
 11918 ;;		On entry : 0/0
 11919 ;;		On exit  : 0/0
 11920 ;;		Unchanged: 0/0
 11921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11926 ;;Total ram usage:        0 bytes
 11927 ;; Hardware stack levels used:    1
 11928 ;; Hardware stack levels required when called:    4
 11929 ;; This function calls:
 11930 ;;		_Flash_Memory_Unlock
 11931 ;; This function is called by:
 11932 ;;		_Flash_Memory_Modify
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           
 11937                           ;psect for function _Flash_Memory_Erasing
 11938  1DE5                     _Flash_Memory_Erasing:	
 11939                           
 11940                           ;MCU_B1.c: 1017: CFGS = 0;
 11941                           
 11942                           ;incstack = 0
 11943                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11944  1DE5  0023               	movlb	3	; select bank3
 11945  1DE6  1315               	bcf	21,6	;volatile
 11946                           
 11947                           ;MCU_B1.c: 1018: PMADRH = 0x30;
 11948  1DE7  3030               	movlw	48
 11949  1DE8  0092               	movwf	18	;volatile
 11950                           
 11951                           ;MCU_B1.c: 1019: PMADRL = 0x00;
 11952  1DE9  0191               	clrf	17	;volatile
 11953                           
 11954                           ;MCU_B1.c: 1020: FREE = 1;
 11955  1DEA  1615               	bsf	21,4	;volatile
 11956                           
 11957                           ;MCU_B1.c: 1021: WREN = 1;
 11958  1DEB  1515               	bsf	21,2	;volatile
 11959                           
 11960                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 11961  1DEC  319D  2549         	fcall	_Flash_Memory_Unlock
 11962                           
 11963                           ;MCU_B1.c: 1023: WREN = 0;
 11964  1DEE  0023               	movlb	3	; select bank3
 11965  1DEF  1115               	bcf	21,2	;volatile
 11966  1DF0  0008               	return
 11967  1DF1                     __end_of_Flash_Memory_Erasing:	
 11968                           
 11969                           	psect	text79
 11970  0448                     __ptext79:	
 11971 ;; *************** function _Flash_Memory_Initialization *****************
 11972 ;; Defined at:
 11973 ;;		line 913 in file "../src/MCU_B1.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;		None
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;  i               1   59[BANK0 ] unsigned char 
 11978 ;; Return value:  Size  Location     Type
 11979 ;;		None               void
 11980 ;; Registers used:
 11981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;Total ram usage:        2 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    6
 11994 ;; This function calls:
 11995 ;;		_Flash_Memory_Read
 11996 ;;		_Flash_Memory_Write
 11997 ;;		_getDimmerLights_ValueToPercent
 11998 ;;		_setMemory_Data
 11999 ;; This function is called by:
 12000 ;;		_main
 12001 ;; This function uses a non-reentrant model
 12002 ;;
 12003                           
 12004                           
 12005                           ;psect for function _Flash_Memory_Initialization
 12006  0448                     _Flash_Memory_Initialization:	
 12007                           
 12008                           ;MCU_B1.c: 914: char i = 0;
 12009                           
 12010                           ;incstack = 0
 12011                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12012  0448  0020               	movlb	0	; select bank0
 12013  0449  01DB               	clrf	Flash_Memory_Initialization@i
 12014                           
 12015                           ;MCU_B1.c: 915: if (Flash_Memory_Read(31) == 0xaa) {
 12016  044A  301F               	movlw	31
 12017  044B  319F  276E  3184   	fcall	_Flash_Memory_Read
 12018  044E  3AAA               	xorlw	170
 12019  044F  1D03               	skipz
 12020  0450  2CBA               	goto	l9155
 12021                           
 12022                           ;MCU_B1.c: 916: product->Data[12] = Flash_Memory_Read(0);
 12023  0451  3000               	movlw	0
 12024  0452  319F  276E  3184   	fcall	_Flash_Memory_Read
 12025  0455  0020               	movlb	0	; select bank0
 12026  0456  00DA               	movwf	??_Flash_Memory_Initialization
 12027  0457  086D               	movf	_product,w
 12028  0458  3E0C               	addlw	12
 12029  0459  0086               	movwf	6
 12030  045A  3002               	movlw	2	; select bank4/5
 12031  045B  0087               	movwf	7
 12032  045C  085A               	movf	??_Flash_Memory_Initialization,w
 12033  045D  0081               	movwf	1
 12034                           
 12035                           ;MCU_B1.c: 917: product->Data[13] = Flash_Memory_Read(1);
 12036  045E  3001               	movlw	1
 12037  045F  319F  276E  3184   	fcall	_Flash_Memory_Read
 12038  0462  0020               	movlb	0	; select bank0
 12039  0463  00DA               	movwf	??_Flash_Memory_Initialization
 12040  0464  086D               	movf	_product,w
 12041  0465  3E0D               	addlw	13
 12042  0466  0086               	movwf	6
 12043  0467  3002               	movlw	2	; select bank4/5
 12044  0468  0087               	movwf	7
 12045  0469  085A               	movf	??_Flash_Memory_Initialization,w
 12046  046A  0081               	movwf	1
 12047                           
 12048                           ;MCU_B1.c: 918: product->Data[14] = Flash_Memory_Read(2);
 12049  046B  3002               	movlw	2
 12050  046C  319F  276E  3184   	fcall	_Flash_Memory_Read
 12051  046F  0020               	movlb	0	; select bank0
 12052  0470  00DA               	movwf	??_Flash_Memory_Initialization
 12053  0471  086D               	movf	_product,w
 12054  0472  3E0E               	addlw	14
 12055  0473  0086               	movwf	6
 12056  0474  3002               	movlw	2	; select bank4/5
 12057  0475  0087               	movwf	7
 12058  0476  085A               	movf	??_Flash_Memory_Initialization,w
 12059  0477  0081               	movwf	1
 12060                           
 12061                           ;MCU_B1.c: 924: i = getDimmerLights_ValueToPercent(((char)(70*0.8)));
 12062  0478  3038               	movlw	56
 12063  0479  3188  20D0  3184   	fcall	_getDimmerLights_ValueToPercent
 12064  047C  0020               	movlb	0	; select bank0
 12065  047D  00DA               	movwf	??_Flash_Memory_Initialization
 12066  047E  085A               	movf	??_Flash_Memory_Initialization,w
 12067  047F  00DB               	movwf	Flash_Memory_Initialization@i
 12068                           
 12069                           ;MCU_B1.c: 925: product->Data[21] = i;
 12070  0480  085B               	movf	Flash_Memory_Initialization@i,w
 12071  0481  00DA               	movwf	??_Flash_Memory_Initialization
 12072  0482  086D               	movf	_product,w
 12073  0483  3E15               	addlw	21
 12074  0484  0086               	movwf	6
 12075  0485  3002               	movlw	2	; select bank4/5
 12076  0486  0087               	movwf	7
 12077  0487  085A               	movf	??_Flash_Memory_Initialization,w
 12078  0488  0081               	movwf	1
 12079                           
 12080                           ;MCU_B1.c: 926: product->Data[22] = i;
 12081  0489  085B               	movf	Flash_Memory_Initialization@i,w
 12082  048A  00DA               	movwf	??_Flash_Memory_Initialization
 12083  048B  086D               	movf	_product,w
 12084  048C  3E16               	addlw	22
 12085  048D  0086               	movwf	6
 12086  048E  3002               	movlw	2	; select bank4/5
 12087  048F  0087               	movwf	7
 12088  0490  085A               	movf	??_Flash_Memory_Initialization,w
 12089  0491  0081               	movwf	1
 12090                           
 12091                           ;MCU_B1.c: 927: product->Data[23] = i;
 12092  0492  085B               	movf	Flash_Memory_Initialization@i,w
 12093  0493  00DA               	movwf	??_Flash_Memory_Initialization
 12094  0494  086D               	movf	_product,w
 12095  0495  3E17               	addlw	23
 12096  0496  0086               	movwf	6
 12097  0497  3002               	movlw	2	; select bank4/5
 12098  0498  0087               	movwf	7
 12099  0499  085A               	movf	??_Flash_Memory_Initialization,w
 12100  049A  0081               	movwf	1
 12101                           
 12102                           ;MCU_B1.c: 929: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12103  049B  086D               	movf	_product,w
 12104  049C  3E0C               	addlw	12
 12105  049D  0086               	movwf	6
 12106  049E  3002               	movlw	2	; select bank4/5
 12107  049F  0087               	movwf	7
 12108  04A0  0801               	movf	1,w
 12109  04A1  3AFF               	xorlw	255
 12110  04A2  1D03               	skipz
 12111  04A3  0008               	return
 12112  04A4  086D               	movf	_product,w
 12113  04A5  3E0D               	addlw	13
 12114  04A6  0086               	movwf	6
 12115  04A7  3002               	movlw	2	; select bank4/5
 12116  04A8  0087               	movwf	7
 12117  04A9  0801               	movf	1,w
 12118  04AA  3AFF               	xorlw	255
 12119  04AB  1D03               	skipz
 12120  04AC  0008               	return
 12121  04AD  086D               	movf	_product,w
 12122  04AE  3E0E               	addlw	14
 12123  04AF  0086               	movwf	6
 12124  04B0  3002               	movlw	2	; select bank4/5
 12125  04B1  0087               	movwf	7
 12126  04B2  0801               	movf	1,w
 12127  04B3  3AFF               	xorlw	255
 12128  04B4  1D03               	skipz
 12129  04B5  0008               	return
 12130                           
 12131                           ;MCU_B1.c: 930: myMain.FirstOpen = 1;
 12132  04B6  0021               	movlb	1	; select bank1
 12133  04B7  15AE               	bsf	_myMain^(0+128),3
 12134                           
 12135                           ;MCU_B1.c: 931: myMain.First = 1;
 12136  04B8  16AE               	bsf	_myMain^(0+128),5
 12137                           
 12138                           ;MCU_B1.c: 932: }
 12139                           ;MCU_B1.c: 933: } else {
 12140  04B9  0008               	return
 12141  04BA                     l9155:	
 12142                           
 12143                           ;MCU_B1.c: 934: i = getDimmerLights_ValueToPercent(((char)(70*0.8)));
 12144  04BA  3038               	movlw	56
 12145  04BB  3188  20D0  3184   	fcall	_getDimmerLights_ValueToPercent
 12146  04BE  0020               	movlb	0	; select bank0
 12147  04BF  00DA               	movwf	??_Flash_Memory_Initialization
 12148  04C0  085A               	movf	??_Flash_Memory_Initialization,w
 12149  04C1  00DB               	movwf	Flash_Memory_Initialization@i
 12150                           
 12151                           ;MCU_B1.c: 935: setMemory_Data(0, 0xff);
 12152  04C2  30FF               	movlw	255
 12153  04C3  00DA               	movwf	??_Flash_Memory_Initialization
 12154  04C4  085A               	movf	??_Flash_Memory_Initialization,w
 12155  04C5  00F2               	movwf	setMemory_Data@data
 12156  04C6  3000               	movlw	0
 12157  04C7  319D  25C3  3184   	fcall	_setMemory_Data
 12158                           
 12159                           ;MCU_B1.c: 936: setMemory_Data(1, 0xff);
 12160  04CA  30FF               	movlw	255
 12161  04CB  0020               	movlb	0	; select bank0
 12162  04CC  00DA               	movwf	??_Flash_Memory_Initialization
 12163  04CD  085A               	movf	??_Flash_Memory_Initialization,w
 12164  04CE  00F2               	movwf	setMemory_Data@data
 12165  04CF  3001               	movlw	1
 12166  04D0  319D  25C3  3184   	fcall	_setMemory_Data
 12167                           
 12168                           ;MCU_B1.c: 937: setMemory_Data(2, 0xff);
 12169  04D3  30FF               	movlw	255
 12170  04D4  0020               	movlb	0	; select bank0
 12171  04D5  00DA               	movwf	??_Flash_Memory_Initialization
 12172  04D6  085A               	movf	??_Flash_Memory_Initialization,w
 12173  04D7  00F2               	movwf	setMemory_Data@data
 12174  04D8  3002               	movlw	2
 12175  04D9  319D  25C3  3184   	fcall	_setMemory_Data
 12176                           
 12177                           ;MCU_B1.c: 938: setMemory_Data(3, 0xff);
 12178  04DC  30FF               	movlw	255
 12179  04DD  0020               	movlb	0	; select bank0
 12180  04DE  00DA               	movwf	??_Flash_Memory_Initialization
 12181  04DF  085A               	movf	??_Flash_Memory_Initialization,w
 12182  04E0  00F2               	movwf	setMemory_Data@data
 12183  04E1  3003               	movlw	3
 12184  04E2  319D  25C3  3184   	fcall	_setMemory_Data
 12185                           
 12186                           ;MCU_B1.c: 939: setMemory_Data(4, 0xff);
 12187  04E5  30FF               	movlw	255
 12188  04E6  0020               	movlb	0	; select bank0
 12189  04E7  00DA               	movwf	??_Flash_Memory_Initialization
 12190  04E8  085A               	movf	??_Flash_Memory_Initialization,w
 12191  04E9  00F2               	movwf	setMemory_Data@data
 12192  04EA  3004               	movlw	4
 12193  04EB  319D  25C3  3184   	fcall	_setMemory_Data
 12194                           
 12195                           ;MCU_B1.c: 940: setMemory_Data(5, 0xff);
 12196  04EE  30FF               	movlw	255
 12197  04EF  0020               	movlb	0	; select bank0
 12198  04F0  00DA               	movwf	??_Flash_Memory_Initialization
 12199  04F1  085A               	movf	??_Flash_Memory_Initialization,w
 12200  04F2  00F2               	movwf	setMemory_Data@data
 12201  04F3  3005               	movlw	5
 12202  04F4  319D  25C3  3184   	fcall	_setMemory_Data
 12203                           
 12204                           ;MCU_B1.c: 941: setMemory_Data(31, 0xaa);
 12205  04F7  30AA               	movlw	170
 12206  04F8  0020               	movlb	0	; select bank0
 12207  04F9  00DA               	movwf	??_Flash_Memory_Initialization
 12208  04FA  085A               	movf	??_Flash_Memory_Initialization,w
 12209  04FB  00F2               	movwf	setMemory_Data@data
 12210  04FC  301F               	movlw	31
 12211  04FD  319D  25C3  3184   	fcall	_setMemory_Data
 12212                           
 12213                           ;MCU_B1.c: 942: product->Data[21] = i;
 12214  0500  0020               	movlb	0	; select bank0
 12215  0501  085B               	movf	Flash_Memory_Initialization@i,w
 12216  0502  00DA               	movwf	??_Flash_Memory_Initialization
 12217  0503  086D               	movf	_product,w
 12218  0504  3E15               	addlw	21
 12219  0505  0086               	movwf	6
 12220  0506  3002               	movlw	2	; select bank4/5
 12221  0507  0087               	movwf	7
 12222  0508  085A               	movf	??_Flash_Memory_Initialization,w
 12223  0509  0081               	movwf	1
 12224                           
 12225                           ;MCU_B1.c: 943: product->Data[22] = i;
 12226  050A  085B               	movf	Flash_Memory_Initialization@i,w
 12227  050B  00DA               	movwf	??_Flash_Memory_Initialization
 12228  050C  086D               	movf	_product,w
 12229  050D  3E16               	addlw	22
 12230  050E  0086               	movwf	6
 12231  050F  3002               	movlw	2	; select bank4/5
 12232  0510  0087               	movwf	7
 12233  0511  085A               	movf	??_Flash_Memory_Initialization,w
 12234  0512  0081               	movwf	1
 12235                           
 12236                           ;MCU_B1.c: 944: product->Data[23] = i;
 12237  0513  085B               	movf	Flash_Memory_Initialization@i,w
 12238  0514  00DA               	movwf	??_Flash_Memory_Initialization
 12239  0515  086D               	movf	_product,w
 12240  0516  3E17               	addlw	23
 12241  0517  0086               	movwf	6
 12242  0518  3002               	movlw	2	; select bank4/5
 12243  0519  0087               	movwf	7
 12244  051A  085A               	movf	??_Flash_Memory_Initialization,w
 12245  051B  0081               	movwf	1
 12246                           
 12247                           ;MCU_B1.c: 945: GIE = 0;
 12248  051C  138B               	bcf	11,7	;volatile
 12249                           
 12250                           ;MCU_B1.c: 946: Flash_Memory_Write();
 12251  051D  3192  227B         	fcall	_Flash_Memory_Write
 12252                           
 12253                           ;MCU_B1.c: 947: GIE = 1;
 12254  051F  178B               	bsf	11,7	;volatile
 12255                           
 12256                           ;MCU_B1.c: 948: myMain.FirstOpen = 1;
 12257  0520  0021               	movlb	1	; select bank1
 12258  0521  15AE               	bsf	_myMain^(0+128),3
 12259                           
 12260                           ;MCU_B1.c: 949: myMain.First = 1;
 12261  0522  16AE               	bsf	_myMain^(0+128),5
 12262  0523  0008               	return
 12263  0524                     __end_of_Flash_Memory_Initialization:	
 12264                           
 12265                           	psect	text80
 12266  1DC3                     __ptext80:	
 12267 ;; *************** function _setMemory_Data *****************
 12268 ;; Defined at:
 12269 ;;		line 1064 in file "../src/MCU_B1.c"
 12270 ;; Parameters:    Size  Location     Type
 12271 ;;  address         1    wreg     unsigned char 
 12272 ;;  data            1    2[COMMON] unsigned char 
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;  address         1    4[COMMON] unsigned char 
 12275 ;; Return value:  Size  Location     Type
 12276 ;;		None               void
 12277 ;; Registers used:
 12278 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12284 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;Total ram usage:        3 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:    3
 12291 ;; This function calls:
 12292 ;;		Nothing
 12293 ;; This function is called by:
 12294 ;;		_Flash_Memory_Initialization
 12295 ;;		_Flash_Memory_Modify
 12296 ;; This function uses a non-reentrant model
 12297 ;;
 12298                           
 12299                           
 12300                           ;psect for function _setMemory_Data
 12301  1DC3                     _setMemory_Data:	
 12302                           
 12303                           ;incstack = 0
 12304                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12305                           ;setMemory_Data@address stored from wreg
 12306  1DC3  00F4               	movwf	setMemory_Data@address
 12307                           
 12308                           ;MCU_B1.c: 1065: Memory.Data[address] = data;
 12309  1DC4  0872               	movf	setMemory_Data@data,w
 12310  1DC5  00F3               	movwf	??_setMemory_Data
 12311  1DC6  0874               	movf	setMemory_Data@address,w
 12312  1DC7  3EBE               	addlw	_Memory& (0+255)
 12313  1DC8  0086               	movwf	6
 12314  1DC9  3001               	movlw	1	; select bank3/4
 12315  1DCA  0087               	movwf	7
 12316  1DCB  0873               	movf	??_setMemory_Data,w
 12317  1DCC  0081               	movwf	1
 12318  1DCD  0008               	return
 12319  1DCE                     __end_of_setMemory_Data:	
 12320                           
 12321                           	psect	text81
 12322  127B                     __ptext81:	
 12323 ;; *************** function _Flash_Memory_Write *****************
 12324 ;; Defined at:
 12325 ;;		line 997 in file "../src/MCU_B1.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;		None
 12328 ;; Auto vars:     Size  Location     Type
 12329 ;;  i               1    3[COMMON] unsigned char 
 12330 ;; Return value:  Size  Location     Type
 12331 ;;		None               void
 12332 ;; Registers used:
 12333 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12334 ;; Tracked objects:
 12335 ;;		On entry : 0/0
 12336 ;;		On exit  : 0/0
 12337 ;;		Unchanged: 0/0
 12338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;Total ram usage:        2 bytes
 12344 ;; Hardware stack levels used:    1
 12345 ;; Hardware stack levels required when called:    4
 12346 ;; This function calls:
 12347 ;;		_Flash_Memory_Unlock
 12348 ;; This function is called by:
 12349 ;;		_Flash_Memory_Initialization
 12350 ;;		_Flash_Memory_Modify
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           
 12355                           ;psect for function _Flash_Memory_Write
 12356  127B                     _Flash_Memory_Write:	
 12357                           
 12358                           ;MCU_B1.c: 998: char i = 0;
 12359                           
 12360                           ;incstack = 0
 12361                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12362  127B  01F3               	clrf	Flash_Memory_Write@i
 12363                           
 12364                           ;MCU_B1.c: 999: CFGS = 0;
 12365  127C  0023               	movlb	3	; select bank3
 12366  127D  1315               	bcf	21,6	;volatile
 12367                           
 12368                           ;MCU_B1.c: 1000: PMADRH = 0x30;
 12369  127E  3030               	movlw	48
 12370  127F  0092               	movwf	18	;volatile
 12371                           
 12372                           ;MCU_B1.c: 1001: PMDATH = 0;
 12373  1280  0194               	clrf	20	;volatile
 12374                           
 12375                           ;MCU_B1.c: 1002: FREE = 0;
 12376  1281  1215               	bcf	21,4	;volatile
 12377                           
 12378                           ;MCU_B1.c: 1003: LWLO = 1;
 12379  1282  1695               	bsf	21,5	;volatile
 12380                           
 12381                           ;MCU_B1.c: 1004: WREN = 1;
 12382  1283  1515               	bsf	21,2	;volatile
 12383                           
 12384                           ;MCU_B1.c: 1005: for (i = 0; i < 32; i++) {
 12385  1284  01F3               	clrf	Flash_Memory_Write@i
 12386  1285  3020               	movlw	32
 12387  1286  0273               	subwf	Flash_Memory_Write@i,w
 12388  1287  1803               	btfsc	3,0
 12389  1288  2A9E               	goto	l1255
 12390  1289                     l6759:	
 12391                           
 12392                           ;MCU_B1.c: 1006: PMADRL = i;
 12393  1289  0873               	movf	Flash_Memory_Write@i,w
 12394  128A  0023               	movlb	3	; select bank3
 12395  128B  0091               	movwf	17	;volatile
 12396                           
 12397                           ;MCU_B1.c: 1007: PMDATL = Memory.Data[i];
 12398  128C  0873               	movf	Flash_Memory_Write@i,w
 12399  128D  3EBE               	addlw	_Memory& (0+255)
 12400  128E  0086               	movwf	6
 12401  128F  3001               	movlw	1	; select bank3/4
 12402  1290  0087               	movwf	7
 12403  1291  0801               	movf	1,w
 12404  1292  0093               	movwf	19	;volatile
 12405                           
 12406                           ;MCU_B1.c: 1008: Flash_Memory_Unlock();
 12407  1293  319D  2549  3192   	fcall	_Flash_Memory_Unlock
 12408  1296  3001               	movlw	1
 12409  1297  00F2               	movwf	??_Flash_Memory_Write
 12410  1298  0872               	movf	??_Flash_Memory_Write,w
 12411  1299  07F3               	addwf	Flash_Memory_Write@i,f
 12412  129A  3020               	movlw	32
 12413  129B  0273               	subwf	Flash_Memory_Write@i,w
 12414  129C  1C03               	skipc
 12415  129D  2A89               	goto	l6759
 12416  129E                     l1255:	
 12417                           
 12418                           ;MCU_B1.c: 1009: }
 12419                           ;MCU_B1.c: 1010: LWLO = 0;
 12420  129E  0023               	movlb	3	; select bank3
 12421  129F  1295               	bcf	21,5	;volatile
 12422                           
 12423                           ;MCU_B1.c: 1011: Flash_Memory_Unlock();
 12424  12A0  319D  2549         	fcall	_Flash_Memory_Unlock
 12425                           
 12426                           ;MCU_B1.c: 1012: WREN = 0;
 12427  12A2  0023               	movlb	3	; select bank3
 12428  12A3  1115               	bcf	21,2	;volatile
 12429  12A4  0008               	return
 12430  12A5                     __end_of_Flash_Memory_Write:	
 12431                           
 12432                           	psect	text82
 12433  1D49                     __ptext82:	
 12434 ;; *************** function _Flash_Memory_Unlock *****************
 12435 ;; Defined at:
 12436 ;;		line 976 in file "../src/MCU_B1.c"
 12437 ;; Parameters:    Size  Location     Type
 12438 ;;		None
 12439 ;; Auto vars:     Size  Location     Type
 12440 ;;		None
 12441 ;; Return value:  Size  Location     Type
 12442 ;;		None               void
 12443 ;; Registers used:
 12444 ;;		wreg
 12445 ;; Tracked objects:
 12446 ;;		On entry : 0/0
 12447 ;;		On exit  : 0/0
 12448 ;;		Unchanged: 0/0
 12449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;Total ram usage:        0 bytes
 12455 ;; Hardware stack levels used:    1
 12456 ;; Hardware stack levels required when called:    3
 12457 ;; This function calls:
 12458 ;;		Nothing
 12459 ;; This function is called by:
 12460 ;;		_Flash_Memory_Write
 12461 ;;		_Flash_Memory_Erasing
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465                           
 12466                           ;psect for function _Flash_Memory_Unlock
 12467  1D49                     _Flash_Memory_Unlock:	
 12468                           
 12469                           ;MCU_B1.c: 977: PMCON2 = 0x55;
 12470                           
 12471                           ;incstack = 0
 12472                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12473  1D49  3055               	movlw	85
 12474  1D4A  0023               	movlb	3	; select bank3
 12475  1D4B  0096               	movwf	22	;volatile
 12476                           
 12477                           ;MCU_B1.c: 978: PMCON2 = 0xaa;
 12478  1D4C  30AA               	movlw	170
 12479  1D4D  0096               	movwf	22	;volatile
 12480                           
 12481                           ;MCU_B1.c: 979: WR = 1;
 12482  1D4E  1495               	bsf	21,1	;volatile
 12483                           
 12484                           ;MCU_B1.c: 980: __nop();
 12485  1D4F  0000               	nop
 12486                           
 12487                           ;MCU_B1.c: 981: __nop();
 12488  1D50  0000               	nop
 12489  1D51  0008               	return
 12490  1D52                     __end_of_Flash_Memory_Unlock:	
 12491                           
 12492                           	psect	text83
 12493  1F6E                     __ptext83:	
 12494 ;; *************** function _Flash_Memory_Read *****************
 12495 ;; Defined at:
 12496 ;;		line 985 in file "../src/MCU_B1.c"
 12497 ;; Parameters:    Size  Location     Type
 12498 ;;  address         1    wreg     unsigned char 
 12499 ;; Auto vars:     Size  Location     Type
 12500 ;;  address         1    4[COMMON] unsigned char 
 12501 ;;  ret             1    5[COMMON] unsigned char 
 12502 ;;  i               1    3[COMMON] unsigned char 
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  1    wreg      unsigned char 
 12505 ;; Registers used:
 12506 ;;		wreg, status,2
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;Total ram usage:        4 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    3
 12519 ;; This function calls:
 12520 ;;		Nothing
 12521 ;; This function is called by:
 12522 ;;		_Flash_Memory_Initialization
 12523 ;;		_Flash_Memory_Modify
 12524 ;; This function uses a non-reentrant model
 12525 ;;
 12526                           
 12527                           
 12528                           ;psect for function _Flash_Memory_Read
 12529  1F6E                     _Flash_Memory_Read:	
 12530                           
 12531                           ;incstack = 0
 12532                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12533                           ;Flash_Memory_Read@address stored from wreg
 12534  1F6E  00F4               	movwf	Flash_Memory_Read@address
 12535                           
 12536                           ;MCU_B1.c: 986: char i = 0, ret = 0;
 12537  1F6F  01F3               	clrf	Flash_Memory_Read@i
 12538  1F70  01F5               	clrf	Flash_Memory_Read@ret
 12539                           
 12540                           ;MCU_B1.c: 987: PMADRH = 0x30;
 12541  1F71  3030               	movlw	48
 12542  1F72  0023               	movlb	3	; select bank3
 12543  1F73  0092               	movwf	18	;volatile
 12544                           
 12545                           ;MCU_B1.c: 988: PMADRL = address;
 12546  1F74  0874               	movf	Flash_Memory_Read@address,w
 12547  1F75  0091               	movwf	17	;volatile
 12548                           
 12549                           ;MCU_B1.c: 989: CFGS = 0;
 12550  1F76  1315               	bcf	21,6	;volatile
 12551                           
 12552                           ;MCU_B1.c: 990: RD = 1;
 12553  1F77  1415               	bsf	21,0	;volatile
 12554                           
 12555                           ;MCU_B1.c: 991: i = PMDATH;
 12556  1F78  0814               	movf	20,w	;volatile
 12557  1F79  00F2               	movwf	??_Flash_Memory_Read
 12558  1F7A  0872               	movf	??_Flash_Memory_Read,w
 12559  1F7B  00F3               	movwf	Flash_Memory_Read@i
 12560                           
 12561                           ;MCU_B1.c: 992: ret = PMDATL;
 12562  1F7C  0813               	movf	19,w	;volatile
 12563  1F7D  00F2               	movwf	??_Flash_Memory_Read
 12564  1F7E  0872               	movf	??_Flash_Memory_Read,w
 12565  1F7F  00F5               	movwf	Flash_Memory_Read@ret
 12566                           
 12567                           ;MCU_B1.c: 993: return ret;
 12568  1F80  0875               	movf	Flash_Memory_Read@ret,w
 12569  1F81  0008               	return
 12570  1F82                     __end_of_Flash_Memory_Read:	
 12571                           
 12572                           	psect	text84
 12573  0524                     __ptext84:	
 12574 ;; *************** function _Exception_Main *****************
 12575 ;; Defined at:
 12576 ;;		line 509 in file "../src/Main_B1.c"
 12577 ;; Parameters:    Size  Location     Type
 12578 ;;		None
 12579 ;; Auto vars:     Size  Location     Type
 12580 ;;  i               2   10[BANK0 ] int 
 12581 ;;  i               2    8[BANK0 ] int 
 12582 ;;  lights          1   12[BANK0 ] unsigned char 
 12583 ;;  error           1    7[BANK0 ] unsigned char 
 12584 ;;  count           1    6[BANK0 ] unsigned char 
 12585 ;; Return value:  Size  Location     Type
 12586 ;;		None               void
 12587 ;; Registers used:
 12588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12589 ;; Tracked objects:
 12590 ;;		On entry : 0/0
 12591 ;;		On exit  : 0/0
 12592 ;;		Unchanged: 0/0
 12593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12597 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;Total ram usage:        8 bytes
 12599 ;; Hardware stack levels used:    1
 12600 ;; Hardware stack levels required when called:    5
 12601 ;; This function calls:
 12602 ;;		_getDimmerLights_Line
 12603 ;;		_getDimmerLights_Status
 12604 ;;		_getMain_All_Error_Status
 12605 ;;		_getMain_All_LightsStatus
 12606 ;;		_setBuz
 12607 ;;		_setDimmerLights_SwOff
 12608 ;;		_setLED
 12609 ;; This function is called by:
 12610 ;;		_main
 12611 ;; This function uses a non-reentrant model
 12612 ;;
 12613                           
 12614                           
 12615                           ;psect for function _Exception_Main
 12616  0524                     _Exception_Main:	
 12617                           
 12618                           ;Main_B1.c: 510: char error = getMain_All_Error_Status(0);
 12619                           
 12620                           ;incstack = 0
 12621                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12622  0524  3000               	movlw	0
 12623  0525  3192  22CF  3185   	fcall	_getMain_All_Error_Status
 12624  0528  00F9               	movwf	??_Exception_Main
 12625  0529  0879               	movf	??_Exception_Main,w
 12626  052A  0020               	movlb	0	; select bank0
 12627  052B  00A7               	movwf	Exception_Main@error
 12628                           
 12629                           ;Main_B1.c: 511: char lights = 0, count = 1;
 12630  052C  01AC               	clrf	Exception_Main@lights
 12631  052D  01A6               	clrf	Exception_Main@count
 12632  052E  0AA6               	incf	Exception_Main@count,f
 12633                           
 12634                           ;Main_B1.c: 512: if (myMain.Error_Run == 1) {
 12635  052F  0021               	movlb	1	; select bank1
 12636  0530  1DB9               	btfss	(_myMain^(0+128)+11),3
 12637  0531  2D40               	goto	l9447
 12638                           
 12639                           ;Main_B1.c: 513: if (error == 0) {
 12640  0532  0020               	movlb	0	; select bank0
 12641  0533  08A7               	movf	Exception_Main@error,f
 12642  0534  1D03               	skipz
 12643  0535  0008               	return
 12644                           
 12645                           ;Main_B1.c: 514: myMain.Error_Run = 0;
 12646  0536  0021               	movlb	1	; select bank1
 12647  0537  11B9               	bcf	(_myMain^(0+128)+11),3
 12648                           
 12649                           ;Main_B1.c: 519: setLED(99, 10);
 12650  0538  300A               	movlw	10
 12651  0539  00F9               	movwf	??_Exception_Main
 12652  053A  0879               	movf	??_Exception_Main,w
 12653  053B  00F4               	movwf	setLED@command
 12654  053C  3063               	movlw	99
 12655  053D  3194  24AB         	fcall	_setLED
 12656                           
 12657                           ;Main_B1.c: 521: }
 12658                           ;Main_B1.c: 522: } else {
 12659  053F  0008               	return
 12660  0540                     l9447:	
 12661                           
 12662                           ;Main_B1.c: 523: if (error != 0) {
 12663  0540  0020               	movlb	0	; select bank0
 12664  0541  0827               	movf	Exception_Main@error,w
 12665  0542  1903               	btfsc	3,2
 12666  0543  0008               	return
 12667                           
 12668                           ;Main_B1.c: 524: myMain.Error_Run = 1;
 12669  0544  0021               	movlb	1	; select bank1
 12670  0545  15B9               	bsf	(_myMain^(0+128)+11),3
 12671                           
 12672                           ;Main_B1.c: 527: setLED(99, 11);
 12673  0546  300B               	movlw	11
 12674  0547  00F9               	movwf	??_Exception_Main
 12675  0548  0879               	movf	??_Exception_Main,w
 12676  0549  00F4               	movwf	setLED@command
 12677  054A  3063               	movlw	99
 12678  054B  3194  24AB  3185   	fcall	_setLED
 12679                           
 12680                           ;Main_B1.c: 529: switch (error) {
 12681  054E  2DEB               	goto	l9495
 12682  054F                     l9453:	
 12683                           ;Main_B1.c: 530: case 2:
 12684                           
 12685                           
 12686                           ;Main_B1.c: 531: if (getMain_All_LightsStatus() == 1) {
 12687  054F  319D  2527  3185   	fcall	_getMain_All_LightsStatus
 12688  0552  3A01               	xorlw	1
 12689  0553  1D03               	skipz
 12690  0554  2D5E               	goto	l9457
 12691                           
 12692                           ;Main_B1.c: 532: setBuz(10, 300);
 12693  0555  302C               	movlw	44
 12694  0556  0020               	movlb	0	; select bank0
 12695  0557  00A4               	movwf	setBuz@time
 12696  0558  3001               	movlw	1
 12697  0559  00A5               	movwf	setBuz@time+1
 12698  055A  300A               	movlw	10
 12699  055B  3196  269F  3185   	fcall	_setBuz
 12700  055E                     l9457:	
 12701                           
 12702                           ;Main_B1.c: 533: }
 12703                           ;Main_B1.c: 535: for (int i = 0; i < count; i++) {
 12704  055E  0020               	movlb	0	; select bank0
 12705  055F  01A8               	clrf	Exception_Main@i
 12706  0560  01A9               	clrf	Exception_Main@i+1
 12707  0561                     l9467:	
 12708  0561  0829               	movf	Exception_Main@i+1,w
 12709  0562  3A80               	xorlw	128
 12710  0563  00F9               	movwf	??_Exception_Main
 12711  0564  3080               	movlw	128
 12712  0565  0279               	subwf	??_Exception_Main,w
 12713  0566  1D03               	skipz
 12714  0567  2D6A               	goto	u10755
 12715  0568  0826               	movf	Exception_Main@count,w
 12716  0569  0228               	subwf	Exception_Main@i,w
 12717  056A                     u10755:	
 12718  056A  1803               	btfsc	3,0
 12719  056B  2D8C               	goto	u10750
 12720                           
 12721                           ;Main_B1.c: 537: if (getDimmerLights_Status(i + 1) == 1) {
 12722  056C  0020               	movlb	0	; select bank0
 12723  056D  0828               	movf	Exception_Main@i,w
 12724  056E  3E01               	addlw	1
 12725  056F  319E  2634  3185   	fcall	_getDimmerLights_Status
 12726  0572  3A01               	xorlw	1
 12727  0573  1D03               	skipz
 12728  0574  2D86               	goto	l9465
 12729                           
 12730                           ;Main_B1.c: 538: DimmerLights->SwFlag = 1;
 12731  0575  0021               	movlb	1	; select bank1
 12732  0576  084C               	movf	_DimmerLights^(0+128),w
 12733  0577  0086               	movwf	6
 12734  0578  3001               	movlw	1	; select bank2/3
 12735  0579  0087               	movwf	7
 12736  057A  1401               	bsf	1,0
 12737                           
 12738                           ;Main_B1.c: 539: DimmerLights->Status = 0;
 12739  057B  0A4C               	incf	_DimmerLights^(0+128),w
 12740  057C  0086               	movwf	6
 12741  057D  3001               	movlw	1	; select bank2/3
 12742  057E  0087               	movwf	7
 12743  057F  1001               	bcf	1,0
 12744                           
 12745                           ;Main_B1.c: 540: setDimmerLights_SwOff(i + 1);
 12746  0580  0020               	movlb	0	; select bank0
 12747  0581  0828               	movf	Exception_Main@i,w
 12748  0582  3E01               	addlw	1
 12749  0583  3194  2402  3185   	fcall	_setDimmerLights_SwOff
 12750  0586                     l9465:	
 12751  0586  3001               	movlw	1
 12752  0587  0020               	movlb	0	; select bank0
 12753  0588  07A8               	addwf	Exception_Main@i,f
 12754  0589  3000               	movlw	0
 12755  058A  3DA9               	addwfc	Exception_Main@i+1,f
 12756  058B  2D61               	goto	l9467
 12757  058C                     u10750:	
 12758  058C  0020               	movlb	0	; select bank0
 12759  058D  0008               	return
 12760  058E                     l9469:	
 12761                           ;Main_B1.c: 544: case 3:
 12762                           
 12763                           ;Main_B1.c: 541: }
 12764                           ;Main_B1.c: 542: }
 12765                           ;Main_B1.c: 543: break;
 12766                           
 12767                           
 12768                           ;Main_B1.c: 546: setBuz(5, 300);
 12769  058E  302C               	movlw	44
 12770  058F  0020               	movlb	0	; select bank0
 12771  0590  00A4               	movwf	setBuz@time
 12772  0591  3001               	movlw	1
 12773  0592  00A5               	movwf	setBuz@time+1
 12774  0593  3005               	movlw	5
 12775  0594  3196  269F  3185   	fcall	_setBuz
 12776                           
 12777                           ;Main_B1.c: 547: lights = getDimmerLights_Line();
 12778  0597  319D  252F  3185   	fcall	_getDimmerLights_Line
 12779  059A  00F9               	movwf	??_Exception_Main
 12780  059B  0879               	movf	??_Exception_Main,w
 12781  059C  0020               	movlb	0	; select bank0
 12782  059D  00AC               	movwf	Exception_Main@lights
 12783                           
 12784                           ;Main_B1.c: 548: if (lights == 0) {
 12785  059E  08AC               	movf	Exception_Main@lights,f
 12786  059F  1D03               	skipz
 12787  05A0  2DD0               	goto	l9487
 12788                           
 12789                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 12790  05A1  01AA               	clrf	Exception_Main@i_3427
 12791  05A2  01AB               	clrf	Exception_Main@i_3427+1
 12792  05A3                     l9485:	
 12793  05A3  082B               	movf	Exception_Main@i_3427+1,w
 12794  05A4  3A80               	xorlw	128
 12795  05A5  00F9               	movwf	??_Exception_Main
 12796  05A6  3080               	movlw	128
 12797  05A7  0279               	subwf	??_Exception_Main,w
 12798  05A8  1D03               	skipz
 12799  05A9  2DAC               	goto	u10785
 12800  05AA  0826               	movf	Exception_Main@count,w
 12801  05AB  022A               	subwf	Exception_Main@i_3427,w
 12802  05AC                     u10785:	
 12803  05AC  1803               	btfsc	3,0
 12804  05AD  2DCE               	goto	u10780
 12805                           
 12806                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 12807  05AE  0020               	movlb	0	; select bank0
 12808  05AF  082A               	movf	Exception_Main@i_3427,w
 12809  05B0  3E01               	addlw	1
 12810  05B1  319E  2634  3185   	fcall	_getDimmerLights_Status
 12811  05B4  3A01               	xorlw	1
 12812  05B5  1D03               	skipz
 12813  05B6  2DC8               	goto	l9483
 12814                           
 12815                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 12816  05B7  0021               	movlb	1	; select bank1
 12817  05B8  084C               	movf	_DimmerLights^(0+128),w
 12818  05B9  0086               	movwf	6
 12819  05BA  3001               	movlw	1	; select bank2/3
 12820  05BB  0087               	movwf	7
 12821  05BC  1401               	bsf	1,0
 12822                           
 12823                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 12824  05BD  0A4C               	incf	_DimmerLights^(0+128),w
 12825  05BE  0086               	movwf	6
 12826  05BF  3001               	movlw	1	; select bank2/3
 12827  05C0  0087               	movwf	7
 12828  05C1  1001               	bcf	1,0
 12829                           
 12830                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 12831  05C2  0020               	movlb	0	; select bank0
 12832  05C3  082A               	movf	Exception_Main@i_3427,w
 12833  05C4  3E01               	addlw	1
 12834  05C5  3194  2402  3185   	fcall	_setDimmerLights_SwOff
 12835  05C8                     l9483:	
 12836  05C8  3001               	movlw	1
 12837  05C9  0020               	movlb	0	; select bank0
 12838  05CA  07AA               	addwf	Exception_Main@i_3427,f
 12839  05CB  3000               	movlw	0
 12840  05CC  3DAB               	addwfc	Exception_Main@i_3427+1,f
 12841  05CD  2DA3               	goto	l9485
 12842  05CE                     u10780:	
 12843  05CE  0020               	movlb	0	; select bank0
 12844  05CF  0008               	return
 12845  05D0                     l9487:	
 12846                           ;Main_B1.c: 556: }
 12847                           ;Main_B1.c: 557: }
 12848                           ;Main_B1.c: 558: } else {
 12849                           
 12850                           
 12851                           ;Main_B1.c: 560: if (getDimmerLights_Status(lights) == 1) {
 12852  05D0  0020               	movlb	0	; select bank0
 12853  05D1  082C               	movf	Exception_Main@lights,w
 12854  05D2  319E  2634  3185   	fcall	_getDimmerLights_Status
 12855  05D5  3A01               	xorlw	1
 12856  05D6  1903               	btfsc	3,2
 12857  05D7  2DDA               	goto	l9489
 12858  05D8  0020               	movlb	0	; select bank0
 12859  05D9  0008               	return
 12860  05DA                     l9489:	
 12861                           
 12862                           ;Main_B1.c: 562: DimmerLights->SwFlag = 1;
 12863  05DA  0021               	movlb	1	; select bank1
 12864  05DB  084C               	movf	_DimmerLights^(0+128),w
 12865  05DC  0086               	movwf	6
 12866  05DD  3001               	movlw	1	; select bank2/3
 12867  05DE  0087               	movwf	7
 12868  05DF  1401               	bsf	1,0
 12869                           
 12870                           ;Main_B1.c: 563: DimmerLights->Status = 0;
 12871  05E0  0A4C               	incf	_DimmerLights^(0+128),w
 12872  05E1  0086               	movwf	6
 12873  05E2  3001               	movlw	1	; select bank2/3
 12874  05E3  0087               	movwf	7
 12875  05E4  1001               	bcf	1,0
 12876                           
 12877                           ;Main_B1.c: 564: setDimmerLights_SwOff(lights);
 12878  05E5  0020               	movlb	0	; select bank0
 12879  05E6  082C               	movf	Exception_Main@lights,w
 12880  05E7  3194  2402         	fcall	_setDimmerLights_SwOff
 12881  05E9  0020               	movlb	0	; select bank0
 12882  05EA  0008               	return
 12883  05EB                     l9495:	
 12884                           ;Main_B1.c: 568: }
 12885                           
 12886                           ;Main_B1.c: 565: }
 12887                           ;Main_B1.c: 566: }
 12888                           ;Main_B1.c: 567: break;
 12889                           
 12890  05EB  0020               	movlb	0	; select bank0
 12891  05EC  0827               	movf	Exception_Main@error,w
 12892                           
 12893                           ; Switch size 1, requested type "space"
 12894                           ; Number of cases is 2, Range of values is 2 to 3
 12895                           ; switch strategies available:
 12896                           ; Name         Instructions Cycles
 12897                           ; simple_byte            7     4 (average)
 12898                           ; direct_byte           13     9 (fixed)
 12899                           ; jumptable            263     9 (fixed)
 12900                           ;	Chosen strategy is simple_byte
 12901  05ED  3A02               	xorlw	2	; case 2
 12902  05EE  1903               	skipnz
 12903  05EF  2D4F               	goto	l9453
 12904  05F0  3A01               	xorlw	1	; case 3
 12905  05F1  1903               	skipnz
 12906  05F2  2D8E               	goto	l9469
 12907  05F3  2DF5               	goto	l1497
 12908  05F4  0008               	return
 12909  05F5                     l1497:	
 12910  05F5  0008               	return
 12911  05F6                     __end_of_Exception_Main:	
 12912                           
 12913                           	psect	text85
 12914  1D2F                     __ptext85:	
 12915 ;; *************** function _getDimmerLights_Line *****************
 12916 ;; Defined at:
 12917 ;;		line 966 in file "../src/Dimmer_B1.c"
 12918 ;; Parameters:    Size  Location     Type
 12919 ;;		None
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;  line            1    2[COMMON] unsigned char 
 12922 ;; Return value:  Size  Location     Type
 12923 ;;                  1    wreg      unsigned char 
 12924 ;; Registers used:
 12925 ;;		wreg, status,2
 12926 ;; Tracked objects:
 12927 ;;		On entry : 0/0
 12928 ;;		On exit  : 0/0
 12929 ;;		Unchanged: 0/0
 12930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;Total ram usage:        1 bytes
 12936 ;; Hardware stack levels used:    1
 12937 ;; Hardware stack levels required when called:    3
 12938 ;; This function calls:
 12939 ;;		Nothing
 12940 ;; This function is called by:
 12941 ;;		_Exception_Main
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           
 12946                           ;psect for function _getDimmerLights_Line
 12947  1D2F                     _getDimmerLights_Line:	
 12948                           
 12949                           ;Dimmer_B1.c: 967: char line = 0;
 12950                           
 12951                           ;incstack = 0
 12952                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12953  1D2F  01F2               	clrf	getDimmerLights_Line@line
 12954                           
 12955                           ;Dimmer_B1.c: 969: if (DimmerLights1.Line == 1) {
 12956  1D30  0022               	movlb	2	; select bank2
 12957  1D31  1CD9               	btfss	(_DimmerLights1^(0+256)+1),1
 12958  1D32  2D35               	goto	l6981
 12959                           
 12960                           ;Dimmer_B1.c: 970: line = 1;
 12961  1D33  01F2               	clrf	getDimmerLights_Line@line
 12962  1D34  0AF2               	incf	getDimmerLights_Line@line,f
 12963  1D35                     l6981:	
 12964                           
 12965                           ;Dimmer_B1.c: 971: }
 12966                           ;Dimmer_B1.c: 983: return line;
 12967  1D35  0872               	movf	getDimmerLights_Line@line,w
 12968  1D36  0008               	return
 12969  1D37                     __end_of_getDimmerLights_Line:	
 12970                           
 12971                           	psect	text86
 12972  1117                     __ptext86:	
 12973 ;; *************** function _DimmerLights_Main *****************
 12974 ;; Defined at:
 12975 ;;		line 732 in file "../src/Dimmer_B1.c"
 12976 ;; Parameters:    Size  Location     Type
 12977 ;;		None
 12978 ;; Auto vars:     Size  Location     Type
 12979 ;;		None
 12980 ;; Return value:  Size  Location     Type
 12981 ;;		None               void
 12982 ;; Registers used:
 12983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12984 ;; Tracked objects:
 12985 ;;		On entry : 0/0
 12986 ;;		On exit  : 0/0
 12987 ;;		Unchanged: 0/0
 12988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;Total ram usage:        0 bytes
 12994 ;; Hardware stack levels used:    1
 12995 ;; Hardware stack levels required when called:    8
 12996 ;; This function calls:
 12997 ;;		_getLoad_OK
 12998 ;;		_getMain_All_Error_Status
 12999 ;;		_getMain_All_LightsStatus
 13000 ;;		_setDimmerLights_Main
 13001 ;; This function is called by:
 13002 ;;		_main
 13003 ;; This function uses a non-reentrant model
 13004 ;;
 13005                           
 13006                           
 13007                           ;psect for function _DimmerLights_Main
 13008  1117                     _DimmerLights_Main:	
 13009                           
 13010                           ;Dimmer_B1.c: 735: if (Dimmer.LoadGO == 1) {
 13011                           
 13012                           ;incstack = 0
 13013                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13014  1117  0022               	movlb	2	; select bank2
 13015  1118  1CA0               	btfss	_Dimmer^(0+256),1
 13016  1119  292F               	goto	l9131
 13017                           
 13018                           ;Dimmer_B1.c: 736: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13019  111A  319D  2504  3191   	fcall	_getLoad_OK
 13020  111D  3A01               	xorlw	1
 13021  111E  1903               	skipnz
 13022  111F  292D               	goto	l776
 13023  1120  3000               	movlw	0
 13024  1121  3192  22CF  3191   	fcall	_getMain_All_Error_Status
 13025  1124  3800               	iorlw	0
 13026  1125  1D03               	skipz
 13027  1126  292D               	goto	l776
 13028  1127  319D  2527  3191   	fcall	_getMain_All_LightsStatus
 13029  112A  3800               	iorlw	0
 13030  112B  1D03               	skipz
 13031  112C  292F               	goto	l9131
 13032  112D                     l776:	
 13033                           
 13034                           ;Dimmer_B1.c: 737: Dimmer.LoadGO = 0;
 13035  112D  0022               	movlb	2	; select bank2
 13036  112E  10A0               	bcf	_Dimmer^(0+256),1
 13037  112F                     l9131:	
 13038                           
 13039                           ;Dimmer_B1.c: 738: }
 13040                           ;Dimmer_B1.c: 739: }
 13041                           ;Dimmer_B1.c: 743: setDimmerLights_Main(1);
 13042  112F  3001               	movlw	1
 13043  1130  318A  2202         	fcall	_setDimmerLights_Main
 13044  1132  0008               	return
 13045  1133                     __end_of_DimmerLights_Main:	
 13046                           
 13047                           	psect	text87
 13048  0A02                     __ptext87:	
 13049 ;; *************** function _setDimmerLights_Main *****************
 13050 ;; Defined at:
 13051 ;;		line 757 in file "../src/Dimmer_B1.c"
 13052 ;; Parameters:    Size  Location     Type
 13053 ;;  lights          1    wreg     unsigned char 
 13054 ;; Auto vars:     Size  Location     Type
 13055 ;;  lights          1   74[BANK0 ] unsigned char 
 13056 ;; Return value:  Size  Location     Type
 13057 ;;		None               void
 13058 ;; Registers used:
 13059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13060 ;; Tracked objects:
 13061 ;;		On entry : 0/0
 13062 ;;		On exit  : 0/0
 13063 ;;		Unchanged: 0/0
 13064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13069 ;;Total ram usage:        1 bytes
 13070 ;; Hardware stack levels used:    1
 13071 ;; Hardware stack levels required when called:    7
 13072 ;; This function calls:
 13073 ;;		_DimmerLights_SelectPointer
 13074 ;;		_getDimmerLights_Allow_Condition
 13075 ;;		_getMain_All_LightsStatus
 13076 ;;		_setDimmerLights_Dimming
 13077 ;;		_setDimmerLights_OnOff
 13078 ;; This function is called by:
 13079 ;;		_DimmerLights_Main
 13080 ;; This function uses a non-reentrant model
 13081 ;;
 13082                           
 13083                           
 13084                           ;psect for function _setDimmerLights_Main
 13085  0A02                     _setDimmerLights_Main:	
 13086                           
 13087                           ;incstack = 0
 13088                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13089                           ;setDimmerLights_Main@lights stored from wreg
 13090  0A02  0020               	movlb	0	; select bank0
 13091  0A03  00EA               	movwf	setDimmerLights_Main@lights
 13092                           
 13093                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(lights);
 13094  0A04  086A               	movf	setDimmerLights_Main@lights,w
 13095  0A05  319D  25A2  318A   	fcall	_DimmerLights_SelectPointer
 13096                           
 13097                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 1) {
 13098  0A08  0021               	movlb	1	; select bank1
 13099  0A09  084C               	movf	_DimmerLights^(0+128),w
 13100  0A0A  0086               	movwf	6
 13101  0A0B  3001               	movlw	1	; select bank2/3
 13102  0A0C  0087               	movwf	7
 13103  0A0D  1C81               	btfss	1,1
 13104  0A0E  2A30               	goto	l8847
 13105                           
 13106                           ;Dimmer_B1.c: 761: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13107  0A0F  0020               	movlb	0	; select bank0
 13108  0A10  086A               	movf	setDimmerLights_Main@lights,w
 13109  0A11  319F  2748  318A   	fcall	_getDimmerLights_Allow_Condition
 13110  0A14  3800               	iorlw	0
 13111  0A15  1D03               	skipz
 13112  0A16  0008               	return
 13113                           
 13114                           ;Dimmer_B1.c: 762: DimmerLights->Trigger = 0;
 13115  0A17  0021               	movlb	1	; select bank1
 13116  0A18  084C               	movf	_DimmerLights^(0+128),w
 13117  0A19  0086               	movwf	6
 13118  0A1A  3001               	movlw	1	; select bank2/3
 13119  0A1B  0087               	movwf	7
 13120  0A1C  1081               	bcf	1,1
 13121                           
 13122                           ;Dimmer_B1.c: 763: if (DimmerLights->Switch == 1) {
 13123  0A1D  084C               	movf	_DimmerLights^(0+128),w
 13124  0A1E  0086               	movwf	6
 13125  0A1F  3001               	movlw	1	; select bank2/3
 13126  0A20  0087               	movwf	7
 13127  0A21  1D01               	btfss	1,2
 13128  0A22  2A2A               	goto	l8845
 13129                           
 13130                           ;Dimmer_B1.c: 764: setDimmerLights_OnOff(lights, 1);
 13131  0A23  0020               	movlb	0	; select bank0
 13132  0A24  01E6               	clrf	setDimmerLights_OnOff@command
 13133  0A25  0AE6               	incf	setDimmerLights_OnOff@command,f
 13134  0A26  086A               	movf	setDimmerLights_Main@lights,w
 13135  0A27  3186  26B6         	fcall	_setDimmerLights_OnOff
 13136                           
 13137                           ;Dimmer_B1.c: 765: } else {
 13138  0A29  0008               	return
 13139  0A2A                     l8845:	
 13140                           
 13141                           ;Dimmer_B1.c: 766: setDimmerLights_OnOff(lights, 0);
 13142  0A2A  0020               	movlb	0	; select bank0
 13143  0A2B  01E6               	clrf	setDimmerLights_OnOff@command
 13144  0A2C  086A               	movf	setDimmerLights_Main@lights,w
 13145  0A2D  3186  26B6         	fcall	_setDimmerLights_OnOff
 13146                           
 13147                           ;Dimmer_B1.c: 767: }
 13148                           ;Dimmer_B1.c: 768: }
 13149                           ;Dimmer_B1.c: 769: } else {
 13150  0A2F  0008               	return
 13151  0A30                     l8847:	
 13152                           
 13153                           ;Dimmer_B1.c: 770: if (getMain_All_LightsStatus() == 1) {
 13154  0A30  319D  2527  318A   	fcall	_getMain_All_LightsStatus
 13155  0A33  3A01               	xorlw	1
 13156  0A34  1D03               	skipz
 13157  0A35  2A5E               	goto	l8859
 13158                           
 13159                           ;Dimmer_B1.c: 771: if (DimmerLights->DimmingTrigger == 1) {
 13160  0A36  0021               	movlb	1	; select bank1
 13161  0A37  084C               	movf	_DimmerLights^(0+128),w
 13162  0A38  0086               	movwf	6
 13163  0A39  3001               	movlw	1	; select bank2/3
 13164  0A3A  0087               	movwf	7
 13165  0A3B  1E01               	btfss	1,4
 13166  0A3C  0008               	return
 13167                           
 13168                           ;Dimmer_B1.c: 772: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13169  0A3D  0020               	movlb	0	; select bank0
 13170  0A3E  086A               	movf	setDimmerLights_Main@lights,w
 13171  0A3F  319F  2748  318A   	fcall	_getDimmerLights_Allow_Condition
 13172  0A42  3800               	iorlw	0
 13173  0A43  1D03               	skipz
 13174  0A44  0008               	return
 13175                           
 13176                           ;Dimmer_B1.c: 773: DimmerLights->DimmingTrigger = 0;
 13177  0A45  0021               	movlb	1	; select bank1
 13178  0A46  084C               	movf	_DimmerLights^(0+128),w
 13179  0A47  0086               	movwf	6
 13180  0A48  3001               	movlw	1	; select bank2/3
 13181  0A49  0087               	movwf	7
 13182  0A4A  1201               	bcf	1,4
 13183                           
 13184                           ;Dimmer_B1.c: 774: if (DimmerLights->DimmingSwitch == 1) {
 13185  0A4B  084C               	movf	_DimmerLights^(0+128),w
 13186  0A4C  0086               	movwf	6
 13187  0A4D  3001               	movlw	1	; select bank2/3
 13188  0A4E  0087               	movwf	7
 13189  0A4F  1E81               	btfss	1,5
 13190  0A50  2A58               	goto	l8857
 13191                           
 13192                           ;Dimmer_B1.c: 775: setDimmerLights_Dimming(lights, 1);
 13193  0A51  0020               	movlb	0	; select bank0
 13194  0A52  01E3               	clrf	setDimmerLights_Dimming@status
 13195  0A53  0AE3               	incf	setDimmerLights_Dimming@status,f
 13196  0A54  086A               	movf	setDimmerLights_Main@lights,w
 13197  0A55  3195  25FC         	fcall	_setDimmerLights_Dimming
 13198                           
 13199                           ;Dimmer_B1.c: 776: } else {
 13200  0A57  0008               	return
 13201  0A58                     l8857:	
 13202                           
 13203                           ;Dimmer_B1.c: 777: setDimmerLights_Dimming(lights, 0);
 13204  0A58  0020               	movlb	0	; select bank0
 13205  0A59  01E3               	clrf	setDimmerLights_Dimming@status
 13206  0A5A  086A               	movf	setDimmerLights_Main@lights,w
 13207  0A5B  3195  25FC         	fcall	_setDimmerLights_Dimming
 13208                           
 13209                           ;Dimmer_B1.c: 778: }
 13210                           ;Dimmer_B1.c: 779: }
 13211                           ;Dimmer_B1.c: 780: }
 13212                           ;Dimmer_B1.c: 781: } else {
 13213  0A5D  0008               	return
 13214  0A5E                     l8859:	
 13215                           
 13216                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingTrigger == 1) {
 13217  0A5E  0021               	movlb	1	; select bank1
 13218  0A5F  084C               	movf	_DimmerLights^(0+128),w
 13219  0A60  0086               	movwf	6
 13220  0A61  3001               	movlw	1	; select bank2/3
 13221  0A62  0087               	movwf	7
 13222  0A63  1E01               	btfss	1,4
 13223  0A64  0008               	return
 13224                           
 13225                           ;Dimmer_B1.c: 783: DimmerLights->DimmingTrigger = 0;
 13226  0A65  084C               	movf	_DimmerLights^(0+128),w
 13227  0A66  0086               	movwf	6
 13228  0A67  3001               	movlw	1	; select bank2/3
 13229  0A68  0087               	movwf	7
 13230  0A69  1201               	bcf	1,4
 13231  0A6A  0008               	return
 13232  0A6B                     __end_of_setDimmerLights_Main:	
 13233                           
 13234                           	psect	text88
 13235  06B6                     __ptext88:	
 13236 ;; *************** function _setDimmerLights_OnOff *****************
 13237 ;; Defined at:
 13238 ;;		line 791 in file "../src/Dimmer_B1.c"
 13239 ;; Parameters:    Size  Location     Type
 13240 ;;  lights          1    wreg     unsigned char 
 13241 ;;  command         1   70[BANK0 ] unsigned char 
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;  lights          1   73[BANK0 ] unsigned char 
 13244 ;; Return value:  Size  Location     Type
 13245 ;;		None               void
 13246 ;; Registers used:
 13247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13248 ;; Tracked objects:
 13249 ;;		On entry : 0/0
 13250 ;;		On exit  : 0/0
 13251 ;;		Unchanged: 0/0
 13252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13253 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;Total ram usage:        4 bytes
 13258 ;; Hardware stack levels used:    1
 13259 ;; Hardware stack levels required when called:    6
 13260 ;; This function calls:
 13261 ;;		_getCmd_Status
 13262 ;;		_getDelayOff_GO
 13263 ;;		_getDimmerLights_PercentToValue
 13264 ;;		_getDimmerLights_ValueToPercent
 13265 ;;		_getMain_All_LightsStatus
 13266 ;;		_setCmd_Status
 13267 ;;		_setDelayOff_GO
 13268 ;;		_setDimmerIntr_ControlStatus
 13269 ;;		_setDimmerIntr_DimmingValue
 13270 ;;		_setDimmerIntr_Dimming_RF
 13271 ;;		_setDimmerIntr_MaxmumValue
 13272 ;;		_setDimmerLights_Line
 13273 ;;		_setLED
 13274 ;;		_setProductData
 13275 ;;		_setRF_DimmerLights
 13276 ;;		_setTxData
 13277 ;; This function is called by:
 13278 ;;		_setDimmerLights_Main
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           
 13283                           ;psect for function _setDimmerLights_OnOff
 13284  06B6                     _setDimmerLights_OnOff:	
 13285                           
 13286                           ;incstack = 0
 13287                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13288                           ;setDimmerLights_OnOff@lights stored from wreg
 13289  06B6  0020               	movlb	0	; select bank0
 13290  06B7  00E9               	movwf	setDimmerLights_OnOff@lights
 13291                           
 13292                           ;Dimmer_B1.c: 793: if (command == 1) {
 13293  06B8  0866               	movf	setDimmerLights_OnOff@command,w
 13294  06B9  3A01               	xorlw	1
 13295  06BA  1D03               	skipz
 13296  06BB  2F18               	goto	l8677
 13297                           
 13298                           ;Dimmer_B1.c: 794: setDimmerIntr_ControlStatus(lights, 1);
 13299  06BC  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13300  06BD  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13301  06BE  0869               	movf	setDimmerLights_OnOff@lights,w
 13302  06BF  319F  2797  3186   	fcall	_setDimmerIntr_ControlStatus
 13303                           
 13304                           ;Dimmer_B1.c: 795: setLED(lights, 0);
 13305  06C2  01F4               	clrf	setLED@command
 13306  06C3  0020               	movlb	0	; select bank0
 13307  06C4  0869               	movf	setDimmerLights_OnOff@lights,w
 13308  06C5  3194  24AB  3186   	fcall	_setLED
 13309                           
 13310                           ;Dimmer_B1.c: 796: ;;
 13311                           ;Dimmer_B1.c: 799: Dimmer.Load_Status = 1;
 13312  06C8  0022               	movlb	2	; select bank2
 13313  06C9  1520               	bsf	_Dimmer^(0+256),2
 13314                           
 13315                           ;Dimmer_B1.c: 800: setDimmerLights_Line(lights);
 13316  06CA  0020               	movlb	0	; select bank0
 13317  06CB  0869               	movf	setDimmerLights_OnOff@lights,w
 13318  06CC  319D  255B  3186   	fcall	_setDimmerLights_Line
 13319                           
 13320                           ;Dimmer_B1.c: 805: setDimmerIntr_DimmingValue(lights, ((char)(70*0.8)));
 13321  06CF  3038               	movlw	56
 13322  06D0  0020               	movlb	0	; select bank0
 13323  06D1  00E7               	movwf	??_setDimmerLights_OnOff
 13324  06D2  0867               	movf	??_setDimmerLights_OnOff,w
 13325  06D3  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13326  06D4  0869               	movf	setDimmerLights_OnOff@lights,w
 13327  06D5  319D  25AD  3186   	fcall	_setDimmerIntr_DimmingValue
 13328                           
 13329                           ;Dimmer_B1.c: 806: if (DimmerLights->DimmingRun == 1) {
 13330  06D8  0021               	movlb	1	; select bank1
 13331  06D9  0A4C               	incf	_DimmerLights^(0+128),w
 13332  06DA  0086               	movwf	6
 13333  06DB  3001               	movlw	1	; select bank2/3
 13334  06DC  0087               	movwf	7
 13335  06DD  1F01               	btfss	1,6
 13336  06DE  2F01               	goto	l8673
 13337                           
 13338                           ;Dimmer_B1.c: 807: DimmerLights->DimmingRun = 0;
 13339  06DF  0A4C               	incf	_DimmerLights^(0+128),w
 13340  06E0  0086               	movwf	6
 13341  06E1  3001               	movlw	1	; select bank2/3
 13342  06E2  0087               	movwf	7
 13343  06E3  1301               	bcf	1,6
 13344                           
 13345                           ;Dimmer_B1.c: 808: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13346  06E4  0020               	movlb	0	; select bank0
 13347  06E5  0869               	movf	setDimmerLights_OnOff@lights,w
 13348  06E6  3E14               	addlw	20
 13349  06E7  076D               	addwf	_product,w
 13350  06E8  00E7               	movwf	??_setDimmerLights_OnOff
 13351  06E9  0867               	movf	??_setDimmerLights_OnOff,w
 13352  06EA  0086               	movwf	6
 13353  06EB  3002               	movlw	2	; select bank4/5
 13354  06EC  0087               	movwf	7
 13355  06ED  0801               	movf	1,w
 13356  06EE  3189  2135  3186   	fcall	_getDimmerLights_PercentToValue
 13357  06F1  0020               	movlb	0	; select bank0
 13358  06F2  00E8               	movwf	??_setDimmerLights_OnOff+1
 13359  06F3  0868               	movf	??_setDimmerLights_OnOff+1,w
 13360  06F4  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13361  06F5  0869               	movf	setDimmerLights_OnOff@lights,w
 13362  06F6  319D  25D9  3186   	fcall	_setDimmerIntr_MaxmumValue
 13363                           
 13364                           ;Dimmer_B1.c: 809: setDimmerIntr_Dimming_RF(lights, 1);
 13365  06F9  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13366  06FA  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13367  06FB  0020               	movlb	0	; select bank0
 13368  06FC  0869               	movf	setDimmerLights_OnOff@lights,w
 13369  06FD  319F  27AC  3186   	fcall	_setDimmerIntr_Dimming_RF
 13370                           
 13371                           ;Dimmer_B1.c: 810: } else {
 13372  0700  2F42               	goto	l8693
 13373  0701                     l8673:	
 13374                           
 13375                           ;Dimmer_B1.c: 811: setDimmerIntr_MaxmumValue(lights, ((char)(70*0.8)));
 13376  0701  3038               	movlw	56
 13377  0702  0020               	movlb	0	; select bank0
 13378  0703  00E7               	movwf	??_setDimmerLights_OnOff
 13379  0704  0867               	movf	??_setDimmerLights_OnOff,w
 13380  0705  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13381  0706  0869               	movf	setDimmerLights_OnOff@lights,w
 13382  0707  319D  25D9  3186   	fcall	_setDimmerIntr_MaxmumValue
 13383                           
 13384                           ;Dimmer_B1.c: 812: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          70*0.8))));
 13385  070A  3038               	movlw	56
 13386  070B  3188  20D0  3186   	fcall	_getDimmerLights_ValueToPercent
 13387  070E  0020               	movlb	0	; select bank0
 13388  070F  00E7               	movwf	??_setDimmerLights_OnOff
 13389  0710  0867               	movf	??_setDimmerLights_OnOff,w
 13390  0711  00DA               	movwf	setProductData@value
 13391  0712  0869               	movf	setDimmerLights_OnOff@lights,w
 13392  0713  3E14               	addlw	20
 13393  0714  319E  2618  3186   	fcall	_setProductData
 13394                           
 13395                           ;Dimmer_B1.c: 813: }
 13396                           ;Dimmer_B1.c: 815: } else if (command == 0) {
 13397  0717  2F42               	goto	l8693
 13398  0718                     l8677:	
 13399  0718  0020               	movlb	0	; select bank0
 13400  0719  08E6               	movf	setDimmerLights_OnOff@command,f
 13401  071A  1D03               	skipz
 13402  071B  2F42               	goto	l8693
 13403                           
 13404                           ;Dimmer_B1.c: 816: setDimmerIntr_ControlStatus(lights, 0);
 13405  071C  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13406  071D  0869               	movf	setDimmerLights_OnOff@lights,w
 13407  071E  319F  2797  3186   	fcall	_setDimmerIntr_ControlStatus
 13408                           
 13409                           ;Dimmer_B1.c: 817: setLED(lights, 1);
 13410  0721  01F4               	clrf	setLED@command
 13411  0722  0AF4               	incf	setLED@command,f
 13412  0723  0020               	movlb	0	; select bank0
 13413  0724  0869               	movf	setDimmerLights_OnOff@lights,w
 13414  0725  3194  24AB  3186   	fcall	_setLED
 13415                           
 13416                           ;Dimmer_B1.c: 818: ;;
 13417                           ;Dimmer_B1.c: 821: if (getDelayOff_GO(lights) == 1) {
 13418  0728  0020               	movlb	0	; select bank0
 13419  0729  0869               	movf	setDimmerLights_OnOff@lights,w
 13420  072A  319E  2643  3186   	fcall	_getDelayOff_GO
 13421  072D  3A01               	xorlw	1
 13422  072E  1D03               	skipz
 13423  072F  2F37               	goto	l8687
 13424                           
 13425                           ;Dimmer_B1.c: 822: setDelayOff_GO(lights, 0, 0);
 13426  0730  0020               	movlb	0	; select bank0
 13427  0731  01DE               	clrf	setDelayOff_GO@command
 13428  0732  01DF               	clrf	setDelayOff_GO@value
 13429  0733  0869               	movf	setDimmerLights_OnOff@lights,w
 13430  0734  3187  276F  3186   	fcall	_setDelayOff_GO
 13431  0737                     l8687:	
 13432                           
 13433                           ;Dimmer_B1.c: 823: }
 13434                           ;Dimmer_B1.c: 828: if (lights == 1) {
 13435  0737  0020               	movlb	0	; select bank0
 13436  0738  0869               	movf	setDimmerLights_OnOff@lights,w
 13437  0739  3A01               	xorlw	1
 13438  073A  1903               	btfsc	3,2
 13439                           
 13440                           ;Dimmer_B1.c: 829: RB1 = 0;
 13441  073B  108D               	bcf	13,1	;volatile
 13442                           
 13443                           ;Dimmer_B1.c: 831: }
 13444                           ;Dimmer_B1.c: 841: Dimmer.Load_Status = 0;
 13445  073C  0022               	movlb	2	; select bank2
 13446  073D  1120               	bcf	_Dimmer^(0+256),2
 13447                           
 13448                           ;Dimmer_B1.c: 842: setDimmerLights_Line(0);
 13449  073E  3000               	movlw	0
 13450  073F  319D  255B  3186   	fcall	_setDimmerLights_Line
 13451  0742                     l8693:	
 13452                           
 13453                           ;Dimmer_B1.c: 844: }
 13454                           ;Dimmer_B1.c: 847: setRF_DimmerLights(lights, command);
 13455  0742  0020               	movlb	0	; select bank0
 13456  0743  0866               	movf	setDimmerLights_OnOff@command,w
 13457  0744  00E7               	movwf	??_setDimmerLights_OnOff
 13458  0745  0867               	movf	??_setDimmerLights_OnOff,w
 13459  0746  00DE               	movwf	setRF_DimmerLights@on
 13460  0747  0869               	movf	setDimmerLights_OnOff@lights,w
 13461  0748  3197  27A1  3186   	fcall	_setRF_DimmerLights
 13462                           
 13463                           ;Dimmer_B1.c: 849: if (getCmd_Status(1) == 1) {
 13464  074B  3001               	movlw	1
 13465  074C  319E  2680  3186   	fcall	_getCmd_Status
 13466  074F  3A01               	xorlw	1
 13467  0750  1D03               	skipz
 13468  0751  2F6C               	goto	l8707
 13469                           
 13470                           ;Dimmer_B1.c: 850: if (getMain_All_LightsStatus() == 0) {
 13471  0752  319D  2527  3186   	fcall	_getMain_All_LightsStatus
 13472  0755  3800               	iorlw	0
 13473  0756  1D03               	skipz
 13474  0757  0008               	return
 13475                           
 13476                           ;Dimmer_B1.c: 851: setCmd_Status(1, 0);
 13477  0758  01F2               	clrf	setCmd_Status@cmd
 13478  0759  3001               	movlw	1
 13479  075A  319F  2782  3186   	fcall	_setCmd_Status
 13480                           
 13481                           ;Dimmer_B1.c: 852: setProductData(11, 0);
 13482  075D  0020               	movlb	0	; select bank0
 13483  075E  01DA               	clrf	setProductData@value
 13484  075F  300B               	movlw	11
 13485  0760  319E  2618  3186   	fcall	_setProductData
 13486                           
 13487                           ;Dimmer_B1.c: 853: setProductData(17, 0);
 13488  0763  0020               	movlb	0	; select bank0
 13489  0764  01DA               	clrf	setProductData@value
 13490  0765  3011               	movlw	17
 13491  0766  319E  2618  3186   	fcall	_setProductData
 13492                           
 13493                           ;Dimmer_B1.c: 854: setTxData();
 13494  0769  318F  274A         	fcall	_setTxData
 13495                           
 13496                           ;Dimmer_B1.c: 855: }
 13497                           ;Dimmer_B1.c: 856: } else {
 13498  076B  0008               	return
 13499  076C                     l8707:	
 13500                           
 13501                           ;Dimmer_B1.c: 857: setTxData();
 13502  076C  318F  274A         	fcall	_setTxData
 13503  076E  0008               	return
 13504  076F                     __end_of_setDimmerLights_OnOff:	
 13505                           
 13506                           	psect	text89
 13507  14AB                     __ptext89:	
 13508 ;; *************** function _setLED *****************
 13509 ;; Defined at:
 13510 ;;		line 76 in file "../src/LED_B1.c"
 13511 ;; Parameters:    Size  Location     Type
 13512 ;;  led             1    wreg     unsigned char 
 13513 ;;  command         1    4[COMMON] unsigned char 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;  led             1    5[COMMON] unsigned char 
 13516 ;; Return value:  Size  Location     Type
 13517 ;;		None               void
 13518 ;; Registers used:
 13519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13525 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;Total ram usage:        2 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    4
 13532 ;; This function calls:
 13533 ;;		_LedPointSelect
 13534 ;; This function is called by:
 13535 ;;		_setDimmerLights_OnOff
 13536 ;;		_setLED_Initialization
 13537 ;;		_Exception_Main
 13538 ;;		_setSw_Initialization
 13539 ;; This function uses a non-reentrant model
 13540 ;;
 13541                           
 13542                           
 13543                           ;psect for function _setLED
 13544  14AB                     _setLED:	
 13545                           
 13546                           ;incstack = 0
 13547                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13548                           ;setLED@led stored from wreg
 13549  14AB  00F5               	movwf	setLED@led
 13550                           
 13551                           ;LED_B1.c: 77: LedPointSelect(led);
 13552  14AC  0875               	movf	setLED@led,w
 13553  14AD  319D  25B8  3194   	fcall	_LedPointSelect
 13554                           
 13555                           ;LED_B1.c: 78: if (command == 0) {
 13556  14B0  08F4               	movf	setLED@command,f
 13557  14B1  1D03               	skipz
 13558  14B2  2CB9               	goto	l6415
 13559                           
 13560                           ;LED_B1.c: 107: if (led == 99) {
 13561  14B3  0875               	movf	setLED@led,w
 13562  14B4  3A63               	xorlw	99
 13563  14B5  1D03               	skipz
 13564  14B6  2CB9               	goto	l6415
 13565                           
 13566                           ;LED_B1.c: 111: RB5 = 1;
 13567  14B7  0020               	movlb	0	; select bank0
 13568  14B8  168D               	bsf	13,5	;volatile
 13569  14B9                     l6415:	
 13570                           
 13571                           ;LED_B1.c: 113: }
 13572                           ;LED_B1.c: 115: }
 13573                           ;LED_B1.c: 116: if (command == 1) {
 13574  14B9  0874               	movf	setLED@command,w
 13575  14BA  3A01               	xorlw	1
 13576  14BB  1D03               	skipz
 13577  14BC  2CC3               	goto	l6421
 13578                           
 13579                           ;LED_B1.c: 145: if (led == 99) {
 13580  14BD  0875               	movf	setLED@led,w
 13581  14BE  3A63               	xorlw	99
 13582  14BF  1D03               	skipz
 13583  14C0  2CC3               	goto	l6421
 13584                           
 13585                           ;LED_B1.c: 149: RB5 = 0;
 13586  14C1  0020               	movlb	0	; select bank0
 13587  14C2  128D               	bcf	13,5	;volatile
 13588  14C3                     l6421:	
 13589                           
 13590                           ;LED_B1.c: 151: }
 13591                           ;LED_B1.c: 153: }
 13592                           ;LED_B1.c: 154: if (command == 10) {
 13593  14C3  0874               	movf	setLED@command,w
 13594  14C4  3A0A               	xorlw	10
 13595  14C5  1D03               	skipz
 13596  14C6  2CDA               	goto	l6429
 13597                           
 13598                           ;LED_B1.c: 155: LED->GO = 0;
 13599  14C7  0021               	movlb	1	; select bank1
 13600  14C8  084D               	movf	_LED^(0+128),w
 13601  14C9  0086               	movwf	6
 13602  14CA  3001               	movlw	1	; select bank2/3
 13603  14CB  0087               	movwf	7
 13604  14CC  1081               	bcf	1,1
 13605                           
 13606                           ;LED_B1.c: 156: LED->Time = 0;
 13607  14CD  0A4D               	incf	_LED^(0+128),w
 13608  14CE  0086               	movwf	6
 13609  14CF  3001               	movlw	1	; select bank2/3
 13610  14D0  0087               	movwf	7
 13611  14D1  3000               	movlw	0
 13612  14D2  3FC0               	movwi [0]fsr1
 13613  14D3  3FC1               	movwi [1]fsr1
 13614                           
 13615                           ;LED_B1.c: 185: if (led == 99) {
 13616  14D4  0875               	movf	setLED@led,w
 13617  14D5  3A63               	xorlw	99
 13618  14D6  1D03               	skipz
 13619  14D7  2CDA               	goto	l6429
 13620                           
 13621                           ;LED_B1.c: 189: RB5 = 1;
 13622  14D8  0020               	movlb	0	; select bank0
 13623  14D9  168D               	bsf	13,5	;volatile
 13624  14DA                     l6429:	
 13625                           
 13626                           ;LED_B1.c: 191: }
 13627                           ;LED_B1.c: 193: }
 13628                           ;LED_B1.c: 194: if (command == 11) {
 13629  14DA  0874               	movf	setLED@command,w
 13630  14DB  3A0B               	xorlw	11
 13631  14DC  1D03               	skipz
 13632  14DD  0008               	return
 13633                           
 13634                           ;LED_B1.c: 195: LED->GO = 1;
 13635  14DE  0021               	movlb	1	; select bank1
 13636  14DF  084D               	movf	_LED^(0+128),w
 13637  14E0  0086               	movwf	6
 13638  14E1  3001               	movlw	1	; select bank2/3
 13639  14E2  0087               	movwf	7
 13640  14E3  1481               	bsf	1,1
 13641  14E4  0008               	return
 13642  14E5                     __end_of_setLED:	
 13643                           
 13644                           	psect	text90
 13645  1DB8                     __ptext90:	
 13646 ;; *************** function _LedPointSelect *****************
 13647 ;; Defined at:
 13648 ;;		line 7 in file "../src/LED_B1.c"
 13649 ;; Parameters:    Size  Location     Type
 13650 ;;  led             1    wreg     unsigned char 
 13651 ;; Auto vars:     Size  Location     Type
 13652 ;;  led             1    3[COMMON] unsigned char 
 13653 ;; Return value:  Size  Location     Type
 13654 ;;		None               void
 13655 ;; Registers used:
 13656 ;;		wreg
 13657 ;; Tracked objects:
 13658 ;;		On entry : 0/0
 13659 ;;		On exit  : 0/0
 13660 ;;		Unchanged: 0/0
 13661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13664 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;Total ram usage:        2 bytes
 13667 ;; Hardware stack levels used:    1
 13668 ;; Hardware stack levels required when called:    3
 13669 ;; This function calls:
 13670 ;;		Nothing
 13671 ;; This function is called by:
 13672 ;;		_setLED_Initialization
 13673 ;;		_setLED
 13674 ;;		_setLED_Main
 13675 ;; This function uses a non-reentrant model
 13676 ;;
 13677                           
 13678                           
 13679                           ;psect for function _LedPointSelect
 13680  1DB8                     _LedPointSelect:	
 13681                           
 13682                           ;incstack = 0
 13683                           ; Regs used in _LedPointSelect: [wreg]
 13684                           ;LedPointSelect@led stored from wreg
 13685  1DB8  00F3               	movwf	LedPointSelect@led
 13686                           
 13687                           ;LED_B1.c: 24: if (led == 99) {
 13688  1DB9  0873               	movf	LedPointSelect@led,w
 13689  1DBA  3A63               	xorlw	99
 13690  1DBB  1D03               	skipz
 13691  1DBC  0008               	return
 13692                           
 13693                           ;LED_B1.c: 25: LED = &VarErrLED;
 13694  1DBD  3065               	movlw	_VarErrLED& (0+255)
 13695  1DBE  00F2               	movwf	??_LedPointSelect
 13696  1DBF  0872               	movf	??_LedPointSelect,w
 13697  1DC0  0021               	movlb	1	; select bank1
 13698  1DC1  00CD               	movwf	_LED^(0+128)
 13699  1DC2  0008               	return
 13700  1DC3                     __end_of_LedPointSelect:	
 13701                           
 13702                           	psect	text91
 13703  1FAC                     __ptext91:	
 13704 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 13705 ;; Defined at:
 13706 ;;		line 180 in file "../src/Dimmer_B1.c"
 13707 ;; Parameters:    Size  Location     Type
 13708 ;;  lights          1    wreg     unsigned char 
 13709 ;;  command         1    2[COMMON] unsigned char 
 13710 ;; Auto vars:     Size  Location     Type
 13711 ;;  lights          1    4[COMMON] unsigned char 
 13712 ;; Return value:  Size  Location     Type
 13713 ;;		None               void
 13714 ;; Registers used:
 13715 ;;		wreg, status,2, status,0
 13716 ;; Tracked objects:
 13717 ;;		On entry : 0/0
 13718 ;;		On exit  : 0/0
 13719 ;;		Unchanged: 0/0
 13720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13721 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13724 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13725 ;;Total ram usage:        3 bytes
 13726 ;; Hardware stack levels used:    1
 13727 ;; Hardware stack levels required when called:    3
 13728 ;; This function calls:
 13729 ;;		Nothing
 13730 ;; This function is called by:
 13731 ;;		_setDimmerLights_OnOff
 13732 ;;		_setRFSW_AdjControl
 13733 ;; This function uses a non-reentrant model
 13734 ;;
 13735                           
 13736                           
 13737                           ;psect for function _setDimmerIntr_Dimming_RF
 13738  1FAC                     _setDimmerIntr_Dimming_RF:	
 13739                           
 13740                           ;incstack = 0
 13741                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 13742                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 13743  1FAC  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 13744                           
 13745                           ;Dimmer_B1.c: 182: if (lights == 1) {
 13746  1FAD  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 13747  1FAE  3A01               	xorlw	1
 13748  1FAF  1D03               	skipz
 13749  1FB0  0008               	return
 13750                           
 13751                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 13752  1FB1  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 13753  1FB2  3A01               	xorlw	1
 13754  1FB3  3000               	movlw	0
 13755  1FB4  1903               	skipnz
 13756  1FB5  3001               	movlw	1
 13757  1FB6  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 13758  1FB7  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 13759  1FB8  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 13760  1FB9  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 13761  1FBA  0021               	movlb	1	; select bank1
 13762  1FBB  0868               	movf	_DimmerIntr1^(0+128),w
 13763  1FBC  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 13764  1FBD  39BF               	andlw	-65
 13765  1FBE  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 13766  1FBF  00E8               	movwf	_DimmerIntr1^(0+128)
 13767  1FC0  0008               	return
 13768  1FC1                     __end_of_setDimmerIntr_Dimming_RF:	
 13769                           
 13770                           	psect	text92
 13771  1DAD                     __ptext92:	
 13772 ;; *************** function _setDimmerIntr_DimmingValue *****************
 13773 ;; Defined at:
 13774 ;;		line 48 in file "../src/Dimmer_B1.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  lights          1    wreg     unsigned char 
 13777 ;;  value           1    2[COMMON] unsigned char 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  lights          1    4[COMMON] unsigned char 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;		None               void
 13782 ;; Registers used:
 13783 ;;		wreg
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13789 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;Total ram usage:        3 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; Hardware stack levels required when called:    3
 13796 ;; This function calls:
 13797 ;;		Nothing
 13798 ;; This function is called by:
 13799 ;;		_setDimmerLights_OnOff
 13800 ;; This function uses a non-reentrant model
 13801 ;;
 13802                           
 13803                           
 13804                           ;psect for function _setDimmerIntr_DimmingValue
 13805  1DAD                     _setDimmerIntr_DimmingValue:	
 13806                           
 13807                           ;incstack = 0
 13808                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 13809                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 13810  1DAD  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 13811                           
 13812                           ;Dimmer_B1.c: 50: if (lights == 1) {
 13813  1DAE  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 13814  1DAF  3A01               	xorlw	1
 13815  1DB0  1D03               	skipz
 13816  1DB1  0008               	return
 13817                           
 13818                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 13819  1DB2  0872               	movf	setDimmerIntr_DimmingValue@value,w
 13820  1DB3  00F3               	movwf	??_setDimmerIntr_DimmingValue
 13821  1DB4  0873               	movf	??_setDimmerIntr_DimmingValue,w
 13822  1DB5  0021               	movlb	1	; select bank1
 13823  1DB6  00EC               	movwf	(_DimmerIntr1^(0+128)+4)
 13824  1DB7  0008               	return
 13825  1DB8                     __end_of_setDimmerIntr_DimmingValue:	
 13826                           
 13827                           	psect	text93
 13828  1F97                     __ptext93:	
 13829 ;; *************** function _setDimmerIntr_ControlStatus *****************
 13830 ;; Defined at:
 13831 ;;		line 30 in file "../src/Dimmer_B1.c"
 13832 ;; Parameters:    Size  Location     Type
 13833 ;;  lights          1    wreg     unsigned char 
 13834 ;;  command         1    2[COMMON] unsigned char 
 13835 ;; Auto vars:     Size  Location     Type
 13836 ;;  lights          1    4[COMMON] unsigned char 
 13837 ;; Return value:  Size  Location     Type
 13838 ;;		None               void
 13839 ;; Registers used:
 13840 ;;		wreg, status,2, status,0
 13841 ;; Tracked objects:
 13842 ;;		On entry : 0/0
 13843 ;;		On exit  : 0/0
 13844 ;;		Unchanged: 0/0
 13845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13846 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;Total ram usage:        3 bytes
 13851 ;; Hardware stack levels used:    1
 13852 ;; Hardware stack levels required when called:    3
 13853 ;; This function calls:
 13854 ;;		Nothing
 13855 ;; This function is called by:
 13856 ;;		_setDimmerLights_OnOff
 13857 ;; This function uses a non-reentrant model
 13858 ;;
 13859                           
 13860                           
 13861                           ;psect for function _setDimmerIntr_ControlStatus
 13862  1F97                     _setDimmerIntr_ControlStatus:	
 13863                           
 13864                           ;incstack = 0
 13865                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 13866                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 13867  1F97  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 13868                           
 13869                           ;Dimmer_B1.c: 32: if (lights == 1) {
 13870  1F98  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 13871  1F99  3A01               	xorlw	1
 13872  1F9A  1D03               	skipz
 13873  1F9B  0008               	return
 13874                           
 13875                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 13876  1F9C  0872               	movf	setDimmerIntr_ControlStatus@command,w
 13877  1F9D  3A01               	xorlw	1
 13878  1F9E  3000               	movlw	0
 13879  1F9F  1903               	skipnz
 13880  1FA0  3001               	movlw	1
 13881  1FA1  00F3               	movwf	??_setDimmerIntr_ControlStatus
 13882  1FA2  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 13883  1FA3  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 13884  1FA4  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 13885  1FA5  0021               	movlb	1	; select bank1
 13886  1FA6  0868               	movf	_DimmerIntr1^(0+128),w
 13887  1FA7  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 13888  1FA8  39F7               	andlw	-9
 13889  1FA9  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 13890  1FAA  00E8               	movwf	_DimmerIntr1^(0+128)
 13891  1FAB  0008               	return
 13892  1FAC                     __end_of_setDimmerIntr_ControlStatus:	
 13893                           
 13894                           	psect	text94
 13895  076F                     __ptext94:	
 13896 ;; *************** function _setDelayOff_GO *****************
 13897 ;; Defined at:
 13898 ;;		line 87 in file "../src/DelayOff_B1.c"
 13899 ;; Parameters:    Size  Location     Type
 13900 ;;  sw              1    wreg     unsigned char 
 13901 ;;  command         1   62[BANK0 ] unsigned char 
 13902 ;;  value           1   63[BANK0 ] unsigned char 
 13903 ;; Auto vars:     Size  Location     Type
 13904 ;;  sw              1   69[BANK0 ] unsigned char 
 13905 ;;  k               1   68[BANK0 ] unsigned char 
 13906 ;;  j               1   67[BANK0 ] unsigned char 
 13907 ;;  i               1   66[BANK0 ] unsigned char 
 13908 ;; Return value:  Size  Location     Type
 13909 ;;		None               void
 13910 ;; Registers used:
 13911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13912 ;; Tracked objects:
 13913 ;;		On entry : 0/0
 13914 ;;		On exit  : 0/0
 13915 ;;		Unchanged: 0/0
 13916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13917 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13919 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;Total ram usage:        8 bytes
 13922 ;; Hardware stack levels used:    1
 13923 ;; Hardware stack levels required when called:    4
 13924 ;; This function calls:
 13925 ;;		_DelayOffPointSelect
 13926 ;;		___bmul
 13927 ;;		_setProductData
 13928 ;; This function is called by:
 13929 ;;		_setDimmerLights_OnOff
 13930 ;;		_setRFSW_Control
 13931 ;; This function uses a non-reentrant model
 13932 ;;
 13933                           
 13934                           
 13935                           ;psect for function _setDelayOff_GO
 13936  076F                     _setDelayOff_GO:	
 13937                           
 13938                           ;incstack = 0
 13939                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13940                           ;setDelayOff_GO@sw stored from wreg
 13941  076F  0020               	movlb	0	; select bank0
 13942  0770  00E5               	movwf	setDelayOff_GO@sw
 13943                           
 13944                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 13945  0771  0865               	movf	setDelayOff_GO@sw,w
 13946  0772  319D  2597  3187   	fcall	_DelayOffPointSelect
 13947                           
 13948                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 13949  0775  0020               	movlb	0	; select bank0
 13950  0776  085E               	movf	setDelayOff_GO@command,w
 13951  0777  3A01               	xorlw	1
 13952  0778  3000               	movlw	0
 13953  0779  1903               	skipnz
 13954  077A  3001               	movlw	1
 13955  077B  00E0               	movwf	??_setDelayOff_GO
 13956  077C  0021               	movlb	1	; select bank1
 13957  077D  084A               	movf	_DelayOff^(0+128),w
 13958  077E  0086               	movwf	6
 13959  077F  3001               	movlw	1	; select bank2/3
 13960  0780  0087               	movwf	7
 13961  0781  0020               	movlb	0	; select bank0
 13962  0782  0DE0               	rlf	??_setDelayOff_GO,f
 13963  0783  0801               	movf	1,w
 13964  0784  0660               	xorwf	??_setDelayOff_GO,w
 13965  0785  39FD               	andlw	-3
 13966  0786  0660               	xorwf	??_setDelayOff_GO,w
 13967  0787  0081               	movwf	1
 13968                           
 13969                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 13970  0788  0021               	movlb	1	; select bank1
 13971  0789  084A               	movf	_DelayOff^(0+128),w
 13972  078A  3E02               	addlw	2
 13973  078B  0086               	movwf	6
 13974  078C  3001               	movlw	1	; select bank2/3
 13975  078D  0087               	movwf	7
 13976  078E  3000               	movlw	0
 13977  078F  3FC0               	movwi [0]fsr1
 13978  0790  3FC1               	movwi [1]fsr1
 13979                           
 13980                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 13981  0791  084A               	movf	_DelayOff^(0+128),w
 13982  0792  3E04               	addlw	4
 13983  0793  0086               	movwf	6
 13984  0794  3001               	movlw	1	; select bank2/3
 13985  0795  0087               	movwf	7
 13986  0796  0181               	clrf	1
 13987                           
 13988                           ;DelayOff_B1.c: 94: if (command == 1) {
 13989  0797  0020               	movlb	0	; select bank0
 13990  0798  085E               	movf	setDelayOff_GO@command,w
 13991  0799  3A01               	xorlw	1
 13992  079A  1D03               	skipz
 13993  079B  2FF1               	goto	l6039
 13994                           
 13995                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 13996  079C  3005               	movlw	5
 13997  079D  00E0               	movwf	??_setDelayOff_GO
 13998  079E  0860               	movf	??_setDelayOff_GO,w
 13999  079F  00E2               	movwf	setDelayOff_GO@i
 14000  07A0  01E3               	clrf	setDelayOff_GO@j
 14001  07A1  01E4               	clrf	setDelayOff_GO@k
 14002                           
 14003                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14004  07A2  300F               	movlw	15
 14005  07A3  055F               	andwf	setDelayOff_GO@value,w
 14006  07A4  00E0               	movwf	??_setDelayOff_GO
 14007  07A5  0860               	movf	??_setDelayOff_GO,w
 14008  07A6  3A05               	xorlw	5
 14009  07A7  1903               	skipnz
 14010  07A8  2FAD               	goto	l6025
 14011  07A9  085F               	movf	setDelayOff_GO@value,w
 14012  07AA  390F               	andlw	15
 14013  07AB  1D03               	btfss	3,2
 14014  07AC  2FDD               	goto	l6035
 14015  07AD                     l6025:	
 14016  07AD  3031               	movlw	49
 14017  07AE  025F               	subwf	setDelayOff_GO@value,w
 14018  07AF  1803               	skipnc
 14019  07B0  2FDD               	goto	l6035
 14020                           
 14021                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14022  07B1  085F               	movf	setDelayOff_GO@value,w
 14023  07B2  390F               	andlw	15
 14024  07B3  00E0               	movwf	??_setDelayOff_GO
 14025  07B4  0860               	movf	??_setDelayOff_GO,w
 14026  07B5  00E3               	movwf	setDelayOff_GO@j
 14027                           
 14028                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14029  07B6  085F               	movf	setDelayOff_GO@value,w
 14030  07B7  00E0               	movwf	??_setDelayOff_GO
 14031  07B8  3004               	movlw	4
 14032  07B9                     u5235:	
 14033  07B9  36E0               	lsrf	??_setDelayOff_GO,f
 14034  07BA  0B89               	decfsz	9,f
 14035  07BB  2FB9               	goto	u5235
 14036  07BC  0860               	movf	??_setDelayOff_GO,w
 14037  07BD  390F               	andlw	15
 14038  07BE  00E1               	movwf	??_setDelayOff_GO+1
 14039  07BF  0861               	movf	??_setDelayOff_GO+1,w
 14040  07C0  00E4               	movwf	setDelayOff_GO@k
 14041                           
 14042                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14043  07C1  300A               	movlw	10
 14044  07C2  00E0               	movwf	??_setDelayOff_GO
 14045  07C3  0860               	movf	??_setDelayOff_GO,w
 14046  07C4  00F2               	movwf	___bmul@multiplicand
 14047  07C5  0864               	movf	setDelayOff_GO@k,w
 14048  07C6  319E  26E0  3187   	fcall	___bmul
 14049  07C9  0020               	movlb	0	; select bank0
 14050  07CA  0763               	addwf	setDelayOff_GO@j,w
 14051  07CB  00E1               	movwf	??_setDelayOff_GO+1
 14052  07CC  0021               	movlb	1	; select bank1
 14053  07CD  0A4A               	incf	_DelayOff^(0+128),w
 14054  07CE  0086               	movwf	6
 14055  07CF  3001               	movlw	1	; select bank2/3
 14056  07D0  0087               	movwf	7
 14057  07D1  0020               	movlb	0	; select bank0
 14058  07D2  0861               	movf	??_setDelayOff_GO+1,w
 14059  07D3  0081               	movwf	1
 14060                           
 14061                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14062  07D4  085F               	movf	setDelayOff_GO@value,w
 14063  07D5  00E0               	movwf	??_setDelayOff_GO
 14064  07D6  0860               	movf	??_setDelayOff_GO,w
 14065  07D7  00DA               	movwf	setProductData@value
 14066  07D8  0865               	movf	setDelayOff_GO@sw,w
 14067  07D9  3E1A               	addlw	26
 14068  07DA  319E  2618         	fcall	_setProductData
 14069                           
 14070                           ;DelayOff_B1.c: 103: } else {
 14071  07DC  0008               	return
 14072  07DD                     l6035:	
 14073                           
 14074                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14075  07DD  3005               	movlw	5
 14076  07DE  0020               	movlb	0	; select bank0
 14077  07DF  00E0               	movwf	??_setDelayOff_GO
 14078  07E0  0021               	movlb	1	; select bank1
 14079  07E1  0A4A               	incf	_DelayOff^(0+128),w
 14080  07E2  0086               	movwf	6
 14081  07E3  3001               	movlw	1	; select bank2/3
 14082  07E4  0087               	movwf	7
 14083  07E5  0020               	movlb	0	; select bank0
 14084  07E6  0860               	movf	??_setDelayOff_GO,w
 14085  07E7  0081               	movwf	1
 14086                           
 14087                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14088  07E8  3005               	movlw	5
 14089  07E9  00E0               	movwf	??_setDelayOff_GO
 14090  07EA  0860               	movf	??_setDelayOff_GO,w
 14091  07EB  00DA               	movwf	setProductData@value
 14092  07EC  0865               	movf	setDelayOff_GO@sw,w
 14093  07ED  3E1A               	addlw	26
 14094  07EE  319E  2618         	fcall	_setProductData
 14095                           
 14096                           ;DelayOff_B1.c: 106: }
 14097                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14098  07F0  0008               	return
 14099  07F1                     l6039:	
 14100  07F1  0020               	movlb	0	; select bank0
 14101  07F2  08DE               	movf	setDelayOff_GO@command,f
 14102  07F3  1D03               	skipz
 14103  07F4  0008               	return
 14104                           
 14105                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14106  07F5  01DA               	clrf	setProductData@value
 14107  07F6  0865               	movf	setDelayOff_GO@sw,w
 14108  07F7  3E1A               	addlw	26
 14109  07F8  319E  2618         	fcall	_setProductData
 14110  07FA  0008               	return
 14111  07FB                     __end_of_setDelayOff_GO:	
 14112                           
 14113                           	psect	text95
 14114  1EE0                     __ptext95:	
 14115 ;; *************** function ___bmul *****************
 14116 ;; Defined at:
 14117 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14118 ;; Parameters:    Size  Location     Type
 14119 ;;  multiplier      1    wreg     unsigned char 
 14120 ;;  multiplicand    1    2[COMMON] unsigned char 
 14121 ;; Auto vars:     Size  Location     Type
 14122 ;;  multiplier      1    5[COMMON] unsigned char 
 14123 ;;  product         1    4[COMMON] unsigned char 
 14124 ;; Return value:  Size  Location     Type
 14125 ;;                  1    wreg      unsigned char 
 14126 ;; Registers used:
 14127 ;;		wreg, status,2, status,0
 14128 ;; Tracked objects:
 14129 ;;		On entry : 0/0
 14130 ;;		On exit  : 0/0
 14131 ;;		Unchanged: 0/0
 14132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14133 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;Total ram usage:        4 bytes
 14138 ;; Hardware stack levels used:    1
 14139 ;; Hardware stack levels required when called:    3
 14140 ;; This function calls:
 14141 ;;		Nothing
 14142 ;; This function is called by:
 14143 ;;		_setDelayOff_GO
 14144 ;;		_DelayTimejudge
 14145 ;; This function uses a non-reentrant model
 14146 ;;
 14147                           
 14148                           
 14149                           ;psect for function ___bmul
 14150  1EE0                     ___bmul:	
 14151                           
 14152                           ;incstack = 0
 14153                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14154                           ;___bmul@multiplier stored from wreg
 14155  1EE0  00F5               	movwf	___bmul@multiplier
 14156  1EE1  01F4               	clrf	___bmul@product
 14157  1EE2                     l5703:	
 14158  1EE2  1C75               	btfss	___bmul@multiplier,0
 14159  1EE3  2EE8               	goto	l5707
 14160  1EE4  0872               	movf	___bmul@multiplicand,w
 14161  1EE5  00F3               	movwf	??___bmul
 14162  1EE6  0873               	movf	??___bmul,w
 14163  1EE7  07F4               	addwf	___bmul@product,f
 14164  1EE8                     l5707:	
 14165  1EE8  1003               	clrc
 14166  1EE9  0DF2               	rlf	___bmul@multiplicand,f
 14167  1EEA  1003               	clrc
 14168  1EEB  0CF5               	rrf	___bmul@multiplier,f
 14169  1EEC  08F5               	movf	___bmul@multiplier,f
 14170  1EED  1D03               	skipz
 14171  1EEE  2EE2               	goto	l5703
 14172  1EEF  0874               	movf	___bmul@product,w
 14173  1EF0  0008               	return
 14174  1EF1                     __end_of___bmul:	
 14175                           
 14176                           	psect	text96
 14177  1F82                     __ptext96:	
 14178 ;; *************** function _setCmd_Status *****************
 14179 ;; Defined at:
 14180 ;;		line 597 in file "../src/Main_B1.c"
 14181 ;; Parameters:    Size  Location     Type
 14182 ;;  number          1    wreg     unsigned char 
 14183 ;;  cmd             1    2[COMMON] unsigned char 
 14184 ;; Auto vars:     Size  Location     Type
 14185 ;;  number          1    4[COMMON] unsigned char 
 14186 ;; Return value:  Size  Location     Type
 14187 ;;		None               void
 14188 ;; Registers used:
 14189 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14190 ;; Tracked objects:
 14191 ;;		On entry : 0/0
 14192 ;;		On exit  : 0/0
 14193 ;;		Unchanged: 0/0
 14194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14195 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14196 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14197 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14198 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14199 ;;Total ram usage:        3 bytes
 14200 ;; Hardware stack levels used:    1
 14201 ;; Hardware stack levels required when called:    3
 14202 ;; This function calls:
 14203 ;;		Nothing
 14204 ;; This function is called by:
 14205 ;;		_setDimmerLights_OnOff
 14206 ;;		_setControl_Lights_Table
 14207 ;; This function uses a non-reentrant model
 14208 ;;
 14209                           
 14210                           
 14211                           ;psect for function _setCmd_Status
 14212  1F82                     _setCmd_Status:	
 14213                           
 14214                           ;incstack = 0
 14215                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14216                           ;setCmd_Status@number stored from wreg
 14217  1F82  00F4               	movwf	setCmd_Status@number
 14218                           
 14219                           ;Main_B1.c: 598: switch (number) {
 14220  1F83  2F91               	goto	l6205
 14221  1F84                     l6201:	
 14222                           ;Main_B1.c: 599: case 1:
 14223                           
 14224                           
 14225                           ;Main_B1.c: 600: Cmd.all_off = cmd == 1 ? 1 : 0;
 14226  1F84  0872               	movf	setCmd_Status@cmd,w
 14227  1F85  3A01               	xorlw	1
 14228  1F86  3000               	movlw	0
 14229  1F87  1903               	skipnz
 14230  1F88  3001               	movlw	1
 14231  1F89  00F3               	movwf	??_setCmd_Status
 14232  1F8A  0021               	movlb	1	; select bank1
 14233  1F8B  0849               	movf	_Cmd^(0+128),w
 14234  1F8C  0673               	xorwf	??_setCmd_Status,w
 14235  1F8D  39FE               	andlw	-2
 14236  1F8E  0673               	xorwf	??_setCmd_Status,w
 14237  1F8F  00C9               	movwf	_Cmd^(0+128)
 14238                           
 14239                           ;Main_B1.c: 602: }
 14240                           
 14241                           ;Main_B1.c: 601: break;
 14242  1F90  0008               	return
 14243  1F91                     l6205:	
 14244  1F91  0874               	movf	setCmd_Status@number,w
 14245                           
 14246                           ; Switch size 1, requested type "space"
 14247                           ; Number of cases is 1, Range of values is 1 to 1
 14248                           ; switch strategies available:
 14249                           ; Name         Instructions Cycles
 14250                           ; simple_byte            4     3 (average)
 14251                           ; direct_byte           11     9 (fixed)
 14252                           ; jumptable            263     9 (fixed)
 14253                           ;	Chosen strategy is simple_byte
 14254  1F92  3A01               	xorlw	1	; case 1
 14255  1F93  1903               	skipnz
 14256  1F94  2F84               	goto	l6201
 14257  1F95  2F96               	goto	l1506
 14258  1F96                     l1506:	
 14259  1F96  0008               	return
 14260  1F97                     __end_of_setCmd_Status:	
 14261                           
 14262                           	psect	text97
 14263  1D27                     __ptext97:	
 14264 ;; *************** function _getMain_All_LightsStatus *****************
 14265 ;; Defined at:
 14266 ;;		line 374 in file "../src/Main_B1.c"
 14267 ;; Parameters:    Size  Location     Type
 14268 ;;		None
 14269 ;; Auto vars:     Size  Location     Type
 14270 ;;  status          1    2[COMMON] unsigned char 
 14271 ;; Return value:  Size  Location     Type
 14272 ;;                  1    wreg      unsigned char 
 14273 ;; Registers used:
 14274 ;;		wreg, status,2
 14275 ;; Tracked objects:
 14276 ;;		On entry : 0/0
 14277 ;;		On exit  : 0/0
 14278 ;;		Unchanged: 0/0
 14279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14281 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;Total ram usage:        1 bytes
 14285 ;; Hardware stack levels used:    1
 14286 ;; Hardware stack levels required when called:    3
 14287 ;; This function calls:
 14288 ;;		Nothing
 14289 ;; This function is called by:
 14290 ;;		_DimmerLights_Main
 14291 ;;		_setDimmerLights_Main
 14292 ;;		_setDimmerLights_OnOff
 14293 ;;		_Flash_Memory_Main
 14294 ;;		_Exception_Main
 14295 ;;		_Load_Main
 14296 ;;		_setControl_Lights_Table
 14297 ;; This function uses a non-reentrant model
 14298 ;;
 14299                           
 14300                           
 14301                           ;psect for function _getMain_All_LightsStatus
 14302  1D27                     _getMain_All_LightsStatus:	
 14303                           
 14304                           ;Main_B1.c: 375: char status = 0;
 14305                           
 14306                           ;incstack = 0
 14307                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14308  1D27  01F2               	clrf	getMain_All_LightsStatus@status
 14309                           
 14310                           ;Main_B1.c: 382: status = DimmerLights1.Status == 1 ? 1 : 0;
 14311  1D28  3000               	movlw	0
 14312  1D29  0022               	movlb	2	; select bank2
 14313  1D2A  1859               	btfsc	(_DimmerLights1^(0+256)+1),0
 14314  1D2B  3001               	movlw	1
 14315  1D2C  00F2               	movwf	getMain_All_LightsStatus@status
 14316                           
 14317                           ;Main_B1.c: 421: return status;
 14318  1D2D  0872               	movf	getMain_All_LightsStatus@status,w
 14319  1D2E  0008               	return
 14320  1D2F                     __end_of_getMain_All_LightsStatus:	
 14321                           
 14322                           	psect	text98
 14323  0935                     __ptext98:	
 14324 ;; *************** function _getDimmerLights_PercentToValue *****************
 14325 ;; Defined at:
 14326 ;;		line 1026 in file "../src/Dimmer_B1.c"
 14327 ;; Parameters:    Size  Location     Type
 14328 ;;  value           1    wreg     unsigned char 
 14329 ;; Auto vars:     Size  Location     Type
 14330 ;;  value           1   54[BANK0 ] unsigned char 
 14331 ;;  i               3   55[BANK0 ] float 
 14332 ;; Return value:  Size  Location     Type
 14333 ;;                  1    wreg      unsigned char 
 14334 ;; Registers used:
 14335 ;;		wreg, status,2, status,0, pclath, cstack
 14336 ;; Tracked objects:
 14337 ;;		On entry : 0/0
 14338 ;;		On exit  : 0/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;Total ram usage:        6 bytes
 14346 ;; Hardware stack levels used:    1
 14347 ;; Hardware stack levels required when called:    5
 14348 ;; This function calls:
 14349 ;;		___awtoft
 14350 ;;		___ftadd
 14351 ;;		___ftdiv
 14352 ;;		___ftmul
 14353 ;;		___ftneg
 14354 ;;		___fttol
 14355 ;; This function is called by:
 14356 ;;		_setDimmerLights_OnOff
 14357 ;;		_setRFSW_AdjControl
 14358 ;; This function uses a non-reentrant model
 14359 ;;
 14360                           
 14361                           
 14362                           ;psect for function _getDimmerLights_PercentToValue
 14363  0935                     _getDimmerLights_PercentToValue:	
 14364                           
 14365                           ;incstack = 0
 14366                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14367                           ;getDimmerLights_PercentToValue@value stored from wreg
 14368  0935  0020               	movlb	0	; select bank0
 14369  0936  00D6               	movwf	getDimmerLights_PercentToValue@value
 14370                           
 14371                           ;Dimmer_B1.c: 1034: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 14372  0937  3000               	movlw	0
 14373  0938  00D7               	movwf	getDimmerLights_PercentToValue@i
 14374  0939  3030               	movlw	48
 14375  093A  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14376  093B  3042               	movlw	66
 14377  093C  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14378                           
 14379                           ;Dimmer_B1.c: 1035: i /= 100;
 14380  093D  3000               	movlw	0
 14381  093E  00A6               	movwf	___ftdiv@f2
 14382  093F  30C8               	movlw	200
 14383  0940  00A7               	movwf	___ftdiv@f2+1
 14384  0941  3042               	movlw	66
 14385  0942  00A8               	movwf	___ftdiv@f2+2
 14386  0943  0857               	movf	getDimmerLights_PercentToValue@i,w
 14387  0944  00A9               	movwf	___ftdiv@f1
 14388  0945  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14389  0946  00AA               	movwf	___ftdiv@f1+1
 14390  0947  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14391  0948  00AB               	movwf	___ftdiv@f1+2
 14392  0949  318D  253D  3189   	fcall	___ftdiv
 14393  094C  0020               	movlb	0	; select bank0
 14394  094D  0826               	movf	?___ftdiv,w
 14395  094E  00D7               	movwf	getDimmerLights_PercentToValue@i
 14396  094F  0827               	movf	?___ftdiv+1,w
 14397  0950  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14398  0951  0828               	movf	?___ftdiv+2,w
 14399  0952  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14400                           
 14401                           ;Dimmer_B1.c: 1037: return (char) (((char)(70*0.8)) - ((100 - value) * i));
 14402  0953  0856               	movf	getDimmerLights_PercentToValue@value,w
 14403  0954  00D4               	movwf	??_getDimmerLights_PercentToValue
 14404  0955  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14405  0956  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14406  0957  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14407  0958  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14408  0959  1903               	skipnz
 14409  095A  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14410  095B  0854               	movf	??_getDimmerLights_PercentToValue,w
 14411  095C  3E64               	addlw	100
 14412  095D  00A0               	movwf	___awtoft@c
 14413  095E  3000               	movlw	0
 14414  095F  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14415  0960  00A1               	movwf	___awtoft@c+1
 14416  0961  3191  21C8  3189   	fcall	___awtoft
 14417  0964  0020               	movlb	0	; select bank0
 14418  0965  0820               	movf	?___awtoft,w
 14419  0966  00A9               	movwf	___ftmul@f2
 14420  0967  0821               	movf	?___awtoft+1,w
 14421  0968  00AA               	movwf	___ftmul@f2+1
 14422  0969  0822               	movf	?___awtoft+2,w
 14423  096A  00AB               	movwf	___ftmul@f2+2
 14424  096B  0857               	movf	getDimmerLights_PercentToValue@i,w
 14425  096C  00A6               	movwf	___ftmul@f1
 14426  096D  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14427  096E  00A7               	movwf	___ftmul@f1+1
 14428  096F  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14429  0970  00A8               	movwf	___ftmul@f1+2
 14430  0971  318E  2696  3189   	fcall	___ftmul
 14431  0974  0020               	movlb	0	; select bank0
 14432  0975  0826               	movf	?___ftmul,w
 14433  0976  00B6               	movwf	___ftneg@f1
 14434  0977  0827               	movf	?___ftmul+1,w
 14435  0978  00B7               	movwf	___ftneg@f1+1
 14436  0979  0828               	movf	?___ftmul+2,w
 14437  097A  00B8               	movwf	___ftneg@f1+2
 14438  097B  319D  2540  3189   	fcall	___ftneg
 14439  097E  0020               	movlb	0	; select bank0
 14440  097F  0836               	movf	?___ftneg,w
 14441  0980  00BC               	movwf	___ftadd@f2
 14442  0981  0837               	movf	?___ftneg+1,w
 14443  0982  00BD               	movwf	___ftadd@f2+1
 14444  0983  0838               	movf	?___ftneg+2,w
 14445  0984  00BE               	movwf	___ftadd@f2+2
 14446  0985  3000               	movlw	0
 14447  0986  00B9               	movwf	___ftadd@f1
 14448  0987  3060               	movlw	96
 14449  0988  00BA               	movwf	___ftadd@f1+1
 14450  0989  3042               	movlw	66
 14451  098A  00BB               	movwf	___ftadd@f1+2
 14452  098B  3183  2352  3189   	fcall	___ftadd
 14453  098E  0020               	movlb	0	; select bank0
 14454  098F  0839               	movf	?___ftadd,w
 14455  0990  00C6               	movwf	___fttol@f1
 14456  0991  083A               	movf	?___ftadd+1,w
 14457  0992  00C7               	movwf	___fttol@f1+1
 14458  0993  083B               	movf	?___ftadd+2,w
 14459  0994  00C8               	movwf	___fttol@f1+2
 14460  0995  318C  24B6         	fcall	___fttol
 14461  0997  0020               	movlb	0	; select bank0
 14462  0998  0846               	movf	?___fttol,w
 14463  0999  0008               	return
 14464  099A                     __end_of_getDimmerLights_PercentToValue:	
 14465                           
 14466                           	psect	text99
 14467  0E96                     __ptext99:	
 14468 ;; *************** function ___ftmul *****************
 14469 ;; Defined at:
 14470 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14471 ;; Parameters:    Size  Location     Type
 14472 ;;  f1              3    6[BANK0 ] float 
 14473 ;;  f2              3    9[BANK0 ] float 
 14474 ;; Auto vars:     Size  Location     Type
 14475 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14476 ;;  sign            1   21[BANK0 ] unsigned char 
 14477 ;;  cntr            1   20[BANK0 ] unsigned char 
 14478 ;;  exp             1   16[BANK0 ] unsigned char 
 14479 ;; Return value:  Size  Location     Type
 14480 ;;                  3    6[BANK0 ] float 
 14481 ;; Registers used:
 14482 ;;		wreg, status,2, status,0, pclath, cstack
 14483 ;; Tracked objects:
 14484 ;;		On entry : 0/0
 14485 ;;		On exit  : 0/0
 14486 ;;		Unchanged: 0/0
 14487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14488 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;Total ram usage:       16 bytes
 14493 ;; Hardware stack levels used:    1
 14494 ;; Hardware stack levels required when called:    4
 14495 ;; This function calls:
 14496 ;;		___ftpack
 14497 ;; This function is called by:
 14498 ;;		_getDimmerLights_PercentToValue
 14499 ;; This function uses a non-reentrant model
 14500 ;;
 14501                           
 14502                           
 14503                           ;psect for function ___ftmul
 14504  0E96                     ___ftmul:	
 14505                           
 14506                           ;incstack = 0
 14507                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14508  0E96  0020               	movlb	0	; select bank0
 14509  0E97  0826               	movf	___ftmul@f1,w
 14510  0E98  00AC               	movwf	??___ftmul
 14511  0E99  0827               	movf	___ftmul@f1+1,w
 14512  0E9A  00AD               	movwf	??___ftmul+1
 14513  0E9B  0828               	movf	___ftmul@f1+2,w
 14514  0E9C  00AE               	movwf	??___ftmul+2
 14515  0E9D  1003               	clrc
 14516  0E9E  0D2D               	rlf	??___ftmul+1,w
 14517  0E9F  0D2E               	rlf	??___ftmul+2,w
 14518  0EA0  00AF               	movwf	??___ftmul+3
 14519  0EA1  082F               	movf	??___ftmul+3,w
 14520  0EA2  00B0               	movwf	___ftmul@exp
 14521  0EA3  08B0               	movf	___ftmul@exp,f
 14522  0EA4  1D03               	skipz
 14523  0EA5  2EAD               	goto	l5849
 14524  0EA6  3000               	movlw	0
 14525  0EA7  00A6               	movwf	?___ftmul
 14526  0EA8  3000               	movlw	0
 14527  0EA9  00A7               	movwf	?___ftmul+1
 14528  0EAA  3000               	movlw	0
 14529  0EAB  00A8               	movwf	?___ftmul+2
 14530  0EAC  0008               	return
 14531  0EAD                     l5849:	
 14532  0EAD  0829               	movf	___ftmul@f2,w
 14533  0EAE  00AC               	movwf	??___ftmul
 14534  0EAF  082A               	movf	___ftmul@f2+1,w
 14535  0EB0  00AD               	movwf	??___ftmul+1
 14536  0EB1  082B               	movf	___ftmul@f2+2,w
 14537  0EB2  00AE               	movwf	??___ftmul+2
 14538  0EB3  1003               	clrc
 14539  0EB4  0D2D               	rlf	??___ftmul+1,w
 14540  0EB5  0D2E               	rlf	??___ftmul+2,w
 14541  0EB6  00AF               	movwf	??___ftmul+3
 14542  0EB7  082F               	movf	??___ftmul+3,w
 14543  0EB8  00B5               	movwf	___ftmul@sign
 14544  0EB9  08B5               	movf	___ftmul@sign,f
 14545  0EBA  1D03               	skipz
 14546  0EBB  2EC3               	goto	l5855
 14547  0EBC  3000               	movlw	0
 14548  0EBD  00A6               	movwf	?___ftmul
 14549  0EBE  3000               	movlw	0
 14550  0EBF  00A7               	movwf	?___ftmul+1
 14551  0EC0  3000               	movlw	0
 14552  0EC1  00A8               	movwf	?___ftmul+2
 14553  0EC2  0008               	return
 14554  0EC3                     l5855:	
 14555  0EC3  0835               	movf	___ftmul@sign,w
 14556  0EC4  3E7B               	addlw	123
 14557  0EC5  00AC               	movwf	??___ftmul
 14558  0EC6  082C               	movf	??___ftmul,w
 14559  0EC7  07B0               	addwf	___ftmul@exp,f
 14560  0EC8  0826               	movf	___ftmul@f1,w
 14561  0EC9  00AC               	movwf	??___ftmul
 14562  0ECA  0827               	movf	___ftmul@f1+1,w
 14563  0ECB  00AD               	movwf	??___ftmul+1
 14564  0ECC  0828               	movf	___ftmul@f1+2,w
 14565  0ECD  00AE               	movwf	??___ftmul+2
 14566  0ECE  3010               	movlw	16
 14567  0ECF                     u4895:	
 14568  0ECF  36AE               	lsrf	??___ftmul+2,f
 14569  0ED0  0CAD               	rrf	??___ftmul+1,f
 14570  0ED1  0CAC               	rrf	??___ftmul,f
 14571  0ED2  0B89               	decfsz	9,f
 14572  0ED3  2ECF               	goto	u4895
 14573  0ED4  082C               	movf	??___ftmul,w
 14574  0ED5  00AF               	movwf	??___ftmul+3
 14575  0ED6  082F               	movf	??___ftmul+3,w
 14576  0ED7  00B5               	movwf	___ftmul@sign
 14577  0ED8  0829               	movf	___ftmul@f2,w
 14578  0ED9  00AC               	movwf	??___ftmul
 14579  0EDA  082A               	movf	___ftmul@f2+1,w
 14580  0EDB  00AD               	movwf	??___ftmul+1
 14581  0EDC  082B               	movf	___ftmul@f2+2,w
 14582  0EDD  00AE               	movwf	??___ftmul+2
 14583  0EDE  3010               	movlw	16
 14584  0EDF                     u4905:	
 14585  0EDF  36AE               	lsrf	??___ftmul+2,f
 14586  0EE0  0CAD               	rrf	??___ftmul+1,f
 14587  0EE1  0CAC               	rrf	??___ftmul,f
 14588  0EE2  0B89               	decfsz	9,f
 14589  0EE3  2EDF               	goto	u4905
 14590  0EE4  082C               	movf	??___ftmul,w
 14591  0EE5  00AF               	movwf	??___ftmul+3
 14592  0EE6  082F               	movf	??___ftmul+3,w
 14593  0EE7  06B5               	xorwf	___ftmul@sign,f
 14594  0EE8  3080               	movlw	128
 14595  0EE9  00AC               	movwf	??___ftmul
 14596  0EEA  082C               	movf	??___ftmul,w
 14597  0EEB  05B5               	andwf	___ftmul@sign,f
 14598  0EEC  17A7               	bsf	___ftmul@f1+1,7
 14599  0EED  17AA               	bsf	___ftmul@f2+1,7
 14600  0EEE  30FF               	movlw	255
 14601  0EEF  05A9               	andwf	___ftmul@f2,f
 14602  0EF0  30FF               	movlw	255
 14603  0EF1  05AA               	andwf	___ftmul@f2+1,f
 14604  0EF2  3000               	movlw	0
 14605  0EF3  05AB               	andwf	___ftmul@f2+2,f
 14606  0EF4  3000               	movlw	0
 14607  0EF5  00B1               	movwf	___ftmul@f3_as_product
 14608  0EF6  3000               	movlw	0
 14609  0EF7  00B2               	movwf	___ftmul@f3_as_product+1
 14610  0EF8  3000               	movlw	0
 14611  0EF9  00B3               	movwf	___ftmul@f3_as_product+2
 14612  0EFA  3007               	movlw	7
 14613  0EFB  00AC               	movwf	??___ftmul
 14614  0EFC  082C               	movf	??___ftmul,w
 14615  0EFD  00B4               	movwf	___ftmul@cntr
 14616  0EFE                     l5867:	
 14617  0EFE  1C26               	btfss	___ftmul@f1,0
 14618  0EFF  2F06               	goto	l5871
 14619  0F00  0829               	movf	___ftmul@f2,w
 14620  0F01  07B1               	addwf	___ftmul@f3_as_product,f
 14621  0F02  082A               	movf	___ftmul@f2+1,w
 14622  0F03  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14623  0F04  082B               	movf	___ftmul@f2+2,w
 14624  0F05  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14625  0F06                     l5871:	
 14626  0F06  3001               	movlw	1
 14627  0F07                     u4925:	
 14628  0F07  36A8               	lsrf	___ftmul@f1+2,f
 14629  0F08  0CA7               	rrf	___ftmul@f1+1,f
 14630  0F09  0CA6               	rrf	___ftmul@f1,f
 14631  0F0A  0B89               	decfsz	9,f
 14632  0F0B  2F07               	goto	u4925
 14633  0F0C  3001               	movlw	1
 14634  0F0D                     u4935:	
 14635  0F0D  35A9               	lslf	___ftmul@f2,f
 14636  0F0E  0DAA               	rlf	___ftmul@f2+1,f
 14637  0F0F  0DAB               	rlf	___ftmul@f2+2,f
 14638  0F10  0B89               	decfsz	9,f
 14639  0F11  2F0D               	goto	u4935
 14640  0F12  3001               	movlw	1
 14641  0F13  02B4               	subwf	___ftmul@cntr,f
 14642  0F14  1D03               	btfss	3,2
 14643  0F15  2EFE               	goto	l5867
 14644  0F16  3009               	movlw	9
 14645  0F17  00AC               	movwf	??___ftmul
 14646  0F18  082C               	movf	??___ftmul,w
 14647  0F19  00B4               	movwf	___ftmul@cntr
 14648  0F1A                     l5879:	
 14649  0F1A  1C26               	btfss	___ftmul@f1,0
 14650  0F1B  2F22               	goto	l5883
 14651  0F1C  0829               	movf	___ftmul@f2,w
 14652  0F1D  07B1               	addwf	___ftmul@f3_as_product,f
 14653  0F1E  082A               	movf	___ftmul@f2+1,w
 14654  0F1F  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 14655  0F20  082B               	movf	___ftmul@f2+2,w
 14656  0F21  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 14657  0F22                     l5883:	
 14658  0F22  3001               	movlw	1
 14659  0F23                     u4965:	
 14660  0F23  36A8               	lsrf	___ftmul@f1+2,f
 14661  0F24  0CA7               	rrf	___ftmul@f1+1,f
 14662  0F25  0CA6               	rrf	___ftmul@f1,f
 14663  0F26  0B89               	decfsz	9,f
 14664  0F27  2F23               	goto	u4965
 14665  0F28  3001               	movlw	1
 14666  0F29                     u4975:	
 14667  0F29  36B3               	lsrf	___ftmul@f3_as_product+2,f
 14668  0F2A  0CB2               	rrf	___ftmul@f3_as_product+1,f
 14669  0F2B  0CB1               	rrf	___ftmul@f3_as_product,f
 14670  0F2C  0B89               	decfsz	9,f
 14671  0F2D  2F29               	goto	u4975
 14672  0F2E  3001               	movlw	1
 14673  0F2F  02B4               	subwf	___ftmul@cntr,f
 14674  0F30  1D03               	btfss	3,2
 14675  0F31  2F1A               	goto	l5879
 14676  0F32  0831               	movf	___ftmul@f3_as_product,w
 14677  0F33  00F2               	movwf	___ftpack@arg
 14678  0F34  0832               	movf	___ftmul@f3_as_product+1,w
 14679  0F35  00F3               	movwf	___ftpack@arg+1
 14680  0F36  0833               	movf	___ftmul@f3_as_product+2,w
 14681  0F37  00F4               	movwf	___ftpack@arg+2
 14682  0F38  0830               	movf	___ftmul@exp,w
 14683  0F39  00AC               	movwf	??___ftmul
 14684  0F3A  082C               	movf	??___ftmul,w
 14685  0F3B  00F5               	movwf	___ftpack@exp
 14686  0F3C  0835               	movf	___ftmul@sign,w
 14687  0F3D  00AD               	movwf	??___ftmul+1
 14688  0F3E  082D               	movf	??___ftmul+1,w
 14689  0F3F  00F6               	movwf	___ftpack@sign
 14690  0F40  3188  200F         	fcall	___ftpack
 14691  0F42  0872               	movf	?___ftpack,w
 14692  0F43  0020               	movlb	0	; select bank0
 14693  0F44  00A6               	movwf	?___ftmul
 14694  0F45  0873               	movf	?___ftpack+1,w
 14695  0F46  00A7               	movwf	?___ftmul+1
 14696  0F47  0874               	movf	?___ftpack+2,w
 14697  0F48  00A8               	movwf	?___ftmul+2
 14698  0F49  0008               	return
 14699  0F4A                     __end_of___ftmul:	
 14700                           
 14701                           	psect	text100
 14702  1E43                     __ptext100:	
 14703 ;; *************** function _getDelayOff_GO *****************
 14704 ;; Defined at:
 14705 ;;		line 114 in file "../src/DelayOff_B1.c"
 14706 ;; Parameters:    Size  Location     Type
 14707 ;;  sw              1    wreg     unsigned char 
 14708 ;; Auto vars:     Size  Location     Type
 14709 ;;  sw              1    4[COMMON] unsigned char 
 14710 ;;  go              1    5[COMMON] unsigned char 
 14711 ;; Return value:  Size  Location     Type
 14712 ;;                  1    wreg      unsigned char 
 14713 ;; Registers used:
 14714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14715 ;; Tracked objects:
 14716 ;;		On entry : 0/0
 14717 ;;		On exit  : 0/0
 14718 ;;		Unchanged: 0/0
 14719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;Total ram usage:        2 bytes
 14725 ;; Hardware stack levels used:    1
 14726 ;; Hardware stack levels required when called:    4
 14727 ;; This function calls:
 14728 ;;		_DelayOffPointSelect
 14729 ;; This function is called by:
 14730 ;;		_setDimmerLights_OnOff
 14731 ;; This function uses a non-reentrant model
 14732 ;;
 14733                           
 14734                           
 14735                           ;psect for function _getDelayOff_GO
 14736  1E43                     _getDelayOff_GO:	
 14737                           
 14738                           ;incstack = 0
 14739                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14740                           ;getDelayOff_GO@sw stored from wreg
 14741  1E43  00F4               	movwf	getDelayOff_GO@sw
 14742                           
 14743                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 14744  1E44  0874               	movf	getDelayOff_GO@sw,w
 14745  1E45  319D  2597         	fcall	_DelayOffPointSelect
 14746                           
 14747                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 14748  1E47  0021               	movlb	1	; select bank1
 14749  1E48  084A               	movf	_DelayOff^(0+128),w
 14750  1E49  0086               	movwf	6
 14751  1E4A  3001               	movlw	1	; select bank2/3
 14752  1E4B  0087               	movwf	7
 14753  1E4C  3000               	movlw	0
 14754  1E4D  1881               	btfsc	1,1
 14755  1E4E  3001               	movlw	1
 14756  1E4F  00F5               	movwf	getDelayOff_GO@go
 14757                           
 14758                           ;DelayOff_B1.c: 117: return go;
 14759  1E50  0875               	movf	getDelayOff_GO@go,w
 14760  1E51  0008               	return
 14761  1E52                     __end_of_getDelayOff_GO:	
 14762                           
 14763                           	psect	text101
 14764  1E80                     __ptext101:	
 14765 ;; *************** function _getCmd_Status *****************
 14766 ;; Defined at:
 14767 ;;		line 605 in file "../src/Main_B1.c"
 14768 ;; Parameters:    Size  Location     Type
 14769 ;;  number          1    wreg     unsigned char 
 14770 ;; Auto vars:     Size  Location     Type
 14771 ;;  number          1    2[COMMON] unsigned char 
 14772 ;;  cmd             1    3[COMMON] unsigned char 
 14773 ;; Return value:  Size  Location     Type
 14774 ;;                  1    wreg      unsigned char 
 14775 ;; Registers used:
 14776 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14777 ;; Tracked objects:
 14778 ;;		On entry : 0/0
 14779 ;;		On exit  : 0/0
 14780 ;;		Unchanged: 0/0
 14781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;Total ram usage:        2 bytes
 14787 ;; Hardware stack levels used:    1
 14788 ;; Hardware stack levels required when called:    3
 14789 ;; This function calls:
 14790 ;;		Nothing
 14791 ;; This function is called by:
 14792 ;;		_setDimmerLights_OnOff
 14793 ;; This function uses a non-reentrant model
 14794 ;;
 14795                           
 14796                           
 14797                           ;psect for function _getCmd_Status
 14798  1E80                     _getCmd_Status:	
 14799                           
 14800                           ;incstack = 0
 14801                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 14802                           ;getCmd_Status@number stored from wreg
 14803  1E80  00F2               	movwf	getCmd_Status@number
 14804                           
 14805                           ;Main_B1.c: 606: char cmd = 0;
 14806  1E81  01F3               	clrf	getCmd_Status@cmd
 14807                           
 14808                           ;Main_B1.c: 607: switch (number) {
 14809  1E82  2E89               	goto	l6453
 14810  1E83                     l6449:	
 14811                           ;Main_B1.c: 608: case 1:
 14812                           
 14813                           
 14814                           ;Main_B1.c: 609: cmd = Cmd.all_off == 1 ? 1 : 0;
 14815  1E83  3000               	movlw	0
 14816  1E84  0021               	movlb	1	; select bank1
 14817  1E85  1849               	btfsc	_Cmd^(0+128),0
 14818  1E86  3001               	movlw	1
 14819  1E87  00F3               	movwf	getCmd_Status@cmd
 14820                           
 14821                           ;Main_B1.c: 611: }
 14822                           
 14823                           ;Main_B1.c: 610: break;
 14824  1E88  2E8E               	goto	l6455
 14825  1E89                     l6453:	
 14826  1E89  0872               	movf	getCmd_Status@number,w
 14827                           
 14828                           ; Switch size 1, requested type "space"
 14829                           ; Number of cases is 1, Range of values is 1 to 1
 14830                           ; switch strategies available:
 14831                           ; Name         Instructions Cycles
 14832                           ; simple_byte            4     3 (average)
 14833                           ; direct_byte           11     9 (fixed)
 14834                           ; jumptable            263     9 (fixed)
 14835                           ;	Chosen strategy is simple_byte
 14836  1E8A  3A01               	xorlw	1	; case 1
 14837  1E8B  1903               	skipnz
 14838  1E8C  2E83               	goto	l6449
 14839  1E8D  2E8E               	goto	l6455
 14840  1E8E                     l6455:	
 14841                           
 14842                           ;Main_B1.c: 612: return cmd;
 14843  1E8E  0873               	movf	getCmd_Status@cmd,w
 14844  1E8F  0008               	return
 14845  1E90                     __end_of_getCmd_Status:	
 14846                           
 14847                           	psect	text102
 14848  15FC                     __ptext102:	
 14849 ;; *************** function _setDimmerLights_Dimming *****************
 14850 ;; Defined at:
 14851 ;;		line 864 in file "../src/Dimmer_B1.c"
 14852 ;; Parameters:    Size  Location     Type
 14853 ;;  lights          1    wreg     unsigned char 
 14854 ;;  status          1   67[BANK0 ] unsigned char 
 14855 ;; Auto vars:     Size  Location     Type
 14856 ;;  lights          1   69[BANK0 ] unsigned char 
 14857 ;; Return value:  Size  Location     Type
 14858 ;;		None               void
 14859 ;; Registers used:
 14860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14861 ;; Tracked objects:
 14862 ;;		On entry : 0/0
 14863 ;;		On exit  : 0/0
 14864 ;;		Unchanged: 0/0
 14865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14866 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;Total ram usage:        3 bytes
 14871 ;; Hardware stack levels used:    1
 14872 ;; Hardware stack levels required when called:    6
 14873 ;; This function calls:
 14874 ;;		_getDimmerIntr_DimmingValue
 14875 ;;		_getDimmerLights_ValueToPercent
 14876 ;;		_setBuz
 14877 ;;		_setDimmerIntr_Dimming_Sw
 14878 ;;		_setDimmerIntr_MaxmumValue
 14879 ;;		_setDimmerLights_Line
 14880 ;;		_setProductData
 14881 ;;		_setRF_DimmerLights
 14882 ;;		_setRF_TransceiveGO
 14883 ;;		_setTxData
 14884 ;; This function is called by:
 14885 ;;		_setDimmerLights_Main
 14886 ;; This function uses a non-reentrant model
 14887 ;;
 14888                           
 14889                           
 14890                           ;psect for function _setDimmerLights_Dimming
 14891  15FC                     _setDimmerLights_Dimming:	
 14892                           
 14893                           ;incstack = 0
 14894                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14895                           ;setDimmerLights_Dimming@lights stored from wreg
 14896  15FC  0020               	movlb	0	; select bank0
 14897  15FD  00E5               	movwf	setDimmerLights_Dimming@lights
 14898                           
 14899                           ;Dimmer_B1.c: 865: if (status == 1) {
 14900  15FE  0863               	movf	setDimmerLights_Dimming@status,w
 14901  15FF  3A01               	xorlw	1
 14902  1600  1D03               	skipz
 14903  1601  2E15               	goto	l8713
 14904                           
 14905                           ;Dimmer_B1.c: 866: setDimmerIntr_Dimming_Sw(lights, 1);
 14906  1602  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14907  1603  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 14908  1604  0865               	movf	setDimmerLights_Dimming@lights,w
 14909  1605  319F  275B  3195   	fcall	_setDimmerIntr_Dimming_Sw
 14910                           
 14911                           ;Dimmer_B1.c: 869: setRF_TransceiveGO(0);
 14912  1608  3000               	movlw	0
 14913  1609  319E  2670  3195   	fcall	_setRF_TransceiveGO
 14914                           
 14915                           ;Dimmer_B1.c: 871: setBuz(1, 100);
 14916  160C  3064               	movlw	100
 14917  160D  0020               	movlb	0	; select bank0
 14918  160E  00A4               	movwf	setBuz@time
 14919  160F  3000               	movlw	0
 14920  1610  00A5               	movwf	setBuz@time+1
 14921  1611  3001               	movlw	1
 14922  1612  3196  269F         	fcall	_setBuz
 14923                           
 14924                           ;Dimmer_B1.c: 872: } else if (status == 0) {
 14925  1614  0008               	return
 14926  1615                     l8713:	
 14927  1615  0020               	movlb	0	; select bank0
 14928  1616  08E3               	movf	setDimmerLights_Dimming@status,f
 14929  1617  1D03               	skipz
 14930  1618  0008               	return
 14931                           
 14932                           ;Dimmer_B1.c: 873: setDimmerIntr_Dimming_Sw(lights, 0);
 14933  1619  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14934  161A  0865               	movf	setDimmerLights_Dimming@lights,w
 14935  161B  319F  275B  3195   	fcall	_setDimmerIntr_Dimming_Sw
 14936                           
 14937                           ;Dimmer_B1.c: 876: Dimmer.Load_Status = 0;
 14938  161E  0022               	movlb	2	; select bank2
 14939  161F  1120               	bcf	_Dimmer^(0+256),2
 14940                           
 14941                           ;Dimmer_B1.c: 877: setDimmerLights_Line(lights);
 14942  1620  0020               	movlb	0	; select bank0
 14943  1621  0865               	movf	setDimmerLights_Dimming@lights,w
 14944  1622  319D  255B  3195   	fcall	_setDimmerLights_Line
 14945                           
 14946                           ;Dimmer_B1.c: 880: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 14947  1625  0020               	movlb	0	; select bank0
 14948  1626  0865               	movf	setDimmerLights_Dimming@lights,w
 14949  1627  319D  25FD  3195   	fcall	_getDimmerIntr_DimmingValue
 14950  162A  0020               	movlb	0	; select bank0
 14951  162B  00E4               	movwf	??_setDimmerLights_Dimming
 14952  162C  0864               	movf	??_setDimmerLights_Dimming,w
 14953  162D  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 14954  162E  0865               	movf	setDimmerLights_Dimming@lights,w
 14955  162F  319D  25D9  3195   	fcall	_setDimmerIntr_MaxmumValue
 14956                           
 14957                           ;Dimmer_B1.c: 881: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 14958  1632  0020               	movlb	0	; select bank0
 14959  1633  0865               	movf	setDimmerLights_Dimming@lights,w
 14960  1634  319D  25FD  3195   	fcall	_getDimmerIntr_DimmingValue
 14961  1637  3188  20D0  3195   	fcall	_getDimmerLights_ValueToPercent
 14962  163A  0020               	movlb	0	; select bank0
 14963  163B  00E4               	movwf	??_setDimmerLights_Dimming
 14964  163C  0864               	movf	??_setDimmerLights_Dimming,w
 14965  163D  00DA               	movwf	setProductData@value
 14966  163E  0865               	movf	setDimmerLights_Dimming@lights,w
 14967  163F  3E14               	addlw	20
 14968  1640  319E  2618  3195   	fcall	_setProductData
 14969                           
 14970                           ;Dimmer_B1.c: 891: setRF_DimmerLights(lights, 1);
 14971  1643  0020               	movlb	0	; select bank0
 14972  1644  01DE               	clrf	setRF_DimmerLights@on
 14973  1645  0ADE               	incf	setRF_DimmerLights@on,f
 14974  1646  0865               	movf	setDimmerLights_Dimming@lights,w
 14975  1647  3197  27A1  3195   	fcall	_setRF_DimmerLights
 14976                           
 14977                           ;Dimmer_B1.c: 892: setTxData();
 14978  164A  318F  274A         	fcall	_setTxData
 14979  164C  0008               	return
 14980  164D                     __end_of_setDimmerLights_Dimming:	
 14981                           
 14982                           	psect	text103
 14983  0F4A                     __ptext103:	
 14984 ;; *************** function _setTxData *****************
 14985 ;; Defined at:
 14986 ;;		line 183 in file "../src/RF_Control_B1.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;		None
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;  i               1    0        unsigned char 
 14991 ;; Return value:  Size  Location     Type
 14992 ;;		None               void
 14993 ;; Registers used:
 14994 ;;		wreg, fsr1l, fsr1h, status,2
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;Total ram usage:        1 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; Hardware stack levels required when called:    3
 15007 ;; This function calls:
 15008 ;;		Nothing
 15009 ;; This function is called by:
 15010 ;;		_setDimmerLights_OnOff
 15011 ;;		_setDimmerLights_Dimming
 15012 ;;		_getRxData
 15013 ;;		_setControl_Lights_Table
 15014 ;;		_setRFSW_Control
 15015 ;;		_setRFSW_AdjControl
 15016 ;; This function uses a non-reentrant model
 15017 ;;
 15018                           
 15019                           
 15020                           ;psect for function _setTxData
 15021  0F4A                     _setTxData:	
 15022                           
 15023                           ;RF_Control_B1.c: 184: char i;
 15024                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15025                           
 15026                           ;incstack = 0
 15027                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15028  0F4A  0021               	movlb	1	; select bank1
 15029  0F4B  1C20               	btfss	_RF1^(0+128),0
 15030  0F4C  0008               	return
 15031                           
 15032                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15033  0F4D  1520               	bsf	_RF1^(0+128),2
 15034                           
 15035                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15036  0F4E  01A2               	clrf	(_RF1^(0+128)+2)
 15037  0F4F  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15038                           
 15039                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15040  0F50  3063               	movlw	99
 15041  0F51  00F2               	movwf	??_setTxData
 15042  0F52  0872               	movf	??_setTxData,w
 15043  0F53  0023               	movlb	3	; select bank3
 15044  0F54  00A0               	movwf	_RF_Data^(0+384)
 15045                           
 15046                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15047  0F55  3002               	movlw	2
 15048  0F56  00F2               	movwf	??_setTxData
 15049  0F57  0872               	movf	??_setTxData,w
 15050  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 15051                           
 15052                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15053  0F59  0020               	movlb	0	; select bank0
 15054  0F5A  086D               	movf	_product,w
 15055  0F5B  0086               	movwf	6
 15056  0F5C  3002               	movlw	2	; select bank4/5
 15057  0F5D  0087               	movwf	7
 15058  0F5E  3002               	movlw	2	; select bank4/5
 15059  0F5F  3F42               	moviw [2]fsr1
 15060  0F60  0023               	movlb	3	; select bank3
 15061  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 15062                           
 15063                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15064  0F62  0020               	movlb	0	; select bank0
 15065  0F63  086D               	movf	_product,w
 15066  0F64  0086               	movwf	6
 15067  0F65  3002               	movlw	2	; select bank4/5
 15068  0F66  0087               	movwf	7
 15069  0F67  3002               	movlw	2	; select bank4/5
 15070  0F68  3F43               	moviw [3]fsr1
 15071  0F69  0023               	movlb	3	; select bank3
 15072  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 15073                           
 15074                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15075  0F6B  0020               	movlb	0	; select bank0
 15076  0F6C  086D               	movf	_product,w
 15077  0F6D  0086               	movwf	6
 15078  0F6E  3002               	movlw	2	; select bank4/5
 15079  0F6F  0087               	movwf	7
 15080  0F70  3002               	movlw	2	; select bank4/5
 15081  0F71  3F44               	moviw [4]fsr1
 15082  0F72  0023               	movlb	3	; select bank3
 15083  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 15084                           
 15085                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15086  0F74  0020               	movlb	0	; select bank0
 15087  0F75  086D               	movf	_product,w
 15088  0F76  0086               	movwf	6
 15089  0F77  3002               	movlw	2	; select bank4/5
 15090  0F78  0087               	movwf	7
 15091  0F79  3002               	movlw	2	; select bank4/5
 15092  0F7A  3F45               	moviw [5]fsr1
 15093  0F7B  0023               	movlb	3	; select bank3
 15094  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 15095                           
 15096                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15097  0F7D  0020               	movlb	0	; select bank0
 15098  0F7E  086D               	movf	_product,w
 15099  0F7F  0086               	movwf	6
 15100  0F80  3002               	movlw	2	; select bank4/5
 15101  0F81  0087               	movwf	7
 15102  0F82  3002               	movlw	2	; select bank4/5
 15103  0F83  3F46               	moviw [6]fsr1
 15104  0F84  0023               	movlb	3	; select bank3
 15105  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 15106                           
 15107                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15108  0F86  0020               	movlb	0	; select bank0
 15109  0F87  086D               	movf	_product,w
 15110  0F88  0086               	movwf	6
 15111  0F89  3002               	movlw	2	; select bank4/5
 15112  0F8A  0087               	movwf	7
 15113  0F8B  3002               	movlw	2	; select bank4/5
 15114  0F8C  3F47               	moviw [7]fsr1
 15115  0F8D  0023               	movlb	3	; select bank3
 15116  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 15117                           
 15118                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15119  0F8F  0020               	movlb	0	; select bank0
 15120  0F90  086D               	movf	_product,w
 15121  0F91  0086               	movwf	6
 15122  0F92  3002               	movlw	2	; select bank4/5
 15123  0F93  0087               	movwf	7
 15124  0F94  3002               	movlw	2	; select bank4/5
 15125  0F95  3F48               	moviw [8]fsr1
 15126  0F96  0023               	movlb	3	; select bank3
 15127  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 15128                           
 15129                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15130  0F98  0020               	movlb	0	; select bank0
 15131  0F99  086D               	movf	_product,w
 15132  0F9A  0086               	movwf	6
 15133  0F9B  3002               	movlw	2	; select bank4/5
 15134  0F9C  0087               	movwf	7
 15135  0F9D  3002               	movlw	2	; select bank4/5
 15136  0F9E  3F49               	moviw [9]fsr1
 15137  0F9F  0023               	movlb	3	; select bank3
 15138  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 15139                           
 15140                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15141  0FA1  0020               	movlb	0	; select bank0
 15142  0FA2  086D               	movf	_product,w
 15143  0FA3  0086               	movwf	6
 15144  0FA4  3002               	movlw	2	; select bank4/5
 15145  0FA5  0087               	movwf	7
 15146  0FA6  3002               	movlw	2	; select bank4/5
 15147  0FA7  3F4A               	moviw [10]fsr1
 15148  0FA8  0023               	movlb	3	; select bank3
 15149  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 15150                           
 15151                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15152  0FAA  0020               	movlb	0	; select bank0
 15153  0FAB  086D               	movf	_product,w
 15154  0FAC  0086               	movwf	6
 15155  0FAD  3002               	movlw	2	; select bank4/5
 15156  0FAE  0087               	movwf	7
 15157  0FAF  3002               	movlw	2	; select bank4/5
 15158  0FB0  3F4B               	moviw [11]fsr1
 15159  0FB1  0023               	movlb	3	; select bank3
 15160  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 15161                           
 15162                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15163  0FB3  0020               	movlb	0	; select bank0
 15164  0FB4  086D               	movf	_product,w
 15165  0FB5  0086               	movwf	6
 15166  0FB6  3002               	movlw	2	; select bank4/5
 15167  0FB7  0087               	movwf	7
 15168  0FB8  3002               	movlw	2	; select bank4/5
 15169  0FB9  3F4C               	moviw [12]fsr1
 15170  0FBA  0023               	movlb	3	; select bank3
 15171  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 15172                           
 15173                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15174  0FBC  0020               	movlb	0	; select bank0
 15175  0FBD  086D               	movf	_product,w
 15176  0FBE  0086               	movwf	6
 15177  0FBF  3002               	movlw	2	; select bank4/5
 15178  0FC0  0087               	movwf	7
 15179  0FC1  3002               	movlw	2	; select bank4/5
 15180  0FC2  3F4D               	moviw [13]fsr1
 15181  0FC3  0023               	movlb	3	; select bank3
 15182  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 15183                           
 15184                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15185  0FC5  0020               	movlb	0	; select bank0
 15186  0FC6  086D               	movf	_product,w
 15187  0FC7  0086               	movwf	6
 15188  0FC8  3002               	movlw	2	; select bank4/5
 15189  0FC9  0087               	movwf	7
 15190  0FCA  3002               	movlw	2	; select bank4/5
 15191  0FCB  3F4E               	moviw [14]fsr1
 15192  0FCC  0023               	movlb	3	; select bank3
 15193  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 15194                           
 15195                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15196  0FCE  0020               	movlb	0	; select bank0
 15197  0FCF  086D               	movf	_product,w
 15198  0FD0  0086               	movwf	6
 15199  0FD1  3002               	movlw	2	; select bank4/5
 15200  0FD2  0087               	movwf	7
 15201  0FD3  3002               	movlw	2	; select bank4/5
 15202  0FD4  3F4F               	moviw [15]fsr1
 15203  0FD5  0023               	movlb	3	; select bank3
 15204  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 15205                           
 15206                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15207  0FD7  0020               	movlb	0	; select bank0
 15208  0FD8  086D               	movf	_product,w
 15209  0FD9  0086               	movwf	6
 15210  0FDA  3002               	movlw	2	; select bank4/5
 15211  0FDB  0087               	movwf	7
 15212  0FDC  3002               	movlw	2	; select bank4/5
 15213  0FDD  3F50               	moviw [16]fsr1
 15214  0FDE  0023               	movlb	3	; select bank3
 15215  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 15216                           
 15217                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15218  0FE0  0020               	movlb	0	; select bank0
 15219  0FE1  086D               	movf	_product,w
 15220  0FE2  0086               	movwf	6
 15221  0FE3  3002               	movlw	2	; select bank4/5
 15222  0FE4  0087               	movwf	7
 15223  0FE5  3002               	movlw	2	; select bank4/5
 15224  0FE6  3F51               	moviw [17]fsr1
 15225  0FE7  0023               	movlb	3	; select bank3
 15226  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 15227                           
 15228                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15229  0FE9  0020               	movlb	0	; select bank0
 15230  0FEA  086D               	movf	_product,w
 15231  0FEB  0086               	movwf	6
 15232  0FEC  3002               	movlw	2	; select bank4/5
 15233  0FED  0087               	movwf	7
 15234  0FEE  3002               	movlw	2	; select bank4/5
 15235  0FEF  3F52               	moviw [18]fsr1
 15236  0FF0  0023               	movlb	3	; select bank3
 15237  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 15238                           
 15239                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15240  0FF2  0020               	movlb	0	; select bank0
 15241  0FF3  086D               	movf	_product,w
 15242  0FF4  0086               	movwf	6
 15243  0FF5  3002               	movlw	2	; select bank4/5
 15244  0FF6  0087               	movwf	7
 15245  0FF7  3002               	movlw	2	; select bank4/5
 15246  0FF8  3F53               	moviw [19]fsr1
 15247  0FF9  0023               	movlb	3	; select bank3
 15248  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15249                           
 15250                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15251  0FFB  30D1               	movlw	209
 15252  0FFC  00F2               	movwf	??_setTxData
 15253  0FFD  0872               	movf	??_setTxData,w
 15254  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15255  0FFF  0008               	return
 15256  1000                     __end_of_setTxData:	
 15257                           
 15258                           	psect	text104
 15259  1E70                     __ptext104:	
 15260 ;; *************** function _setRF_TransceiveGO *****************
 15261 ;; Defined at:
 15262 ;;		line 461 in file "../src/RF_Control_B1.c"
 15263 ;; Parameters:    Size  Location     Type
 15264 ;;  command         1    wreg     unsigned char 
 15265 ;; Auto vars:     Size  Location     Type
 15266 ;;  command         1    3[COMMON] unsigned char 
 15267 ;; Return value:  Size  Location     Type
 15268 ;;		None               void
 15269 ;; Registers used:
 15270 ;;		wreg, status,2, status,0
 15271 ;; Tracked objects:
 15272 ;;		On entry : 0/0
 15273 ;;		On exit  : 0/0
 15274 ;;		Unchanged: 0/0
 15275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;Total ram usage:        2 bytes
 15281 ;; Hardware stack levels used:    1
 15282 ;; Hardware stack levels required when called:    3
 15283 ;; This function calls:
 15284 ;;		Nothing
 15285 ;; This function is called by:
 15286 ;;		_setDimmerLights_Dimming
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           
 15291                           ;psect for function _setRF_TransceiveGO
 15292  1E70                     _setRF_TransceiveGO:	
 15293                           
 15294                           ;incstack = 0
 15295                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15296                           ;setRF_TransceiveGO@command stored from wreg
 15297  1E70  00F3               	movwf	setRF_TransceiveGO@command
 15298                           
 15299                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15300  1E71  0873               	movf	setRF_TransceiveGO@command,w
 15301  1E72  3A01               	xorlw	1
 15302  1E73  3000               	movlw	0
 15303  1E74  1903               	skipnz
 15304  1E75  3001               	movlw	1
 15305  1E76  00F2               	movwf	??_setRF_TransceiveGO
 15306  1E77  0DF2               	rlf	??_setRF_TransceiveGO,f
 15307  1E78  0DF2               	rlf	??_setRF_TransceiveGO,f
 15308  1E79  0021               	movlb	1	; select bank1
 15309  1E7A  0820               	movf	_RF1^(0+128),w
 15310  1E7B  0672               	xorwf	??_setRF_TransceiveGO,w
 15311  1E7C  39FB               	andlw	-5
 15312  1E7D  0672               	xorwf	??_setRF_TransceiveGO,w
 15313  1E7E  00A0               	movwf	_RF1^(0+128)
 15314  1E7F  0008               	return
 15315  1E80                     __end_of_setRF_TransceiveGO:	
 15316                           
 15317                           	psect	text105
 15318  17A1                     __ptext105:	
 15319 ;; *************** function _setRF_DimmerLights *****************
 15320 ;; Defined at:
 15321 ;;		line 446 in file "../src/RF_Control_B1.c"
 15322 ;; Parameters:    Size  Location     Type
 15323 ;;  lights          1    wreg     unsigned char 
 15324 ;;  on              1   62[BANK0 ] unsigned char 
 15325 ;; Auto vars:     Size  Location     Type
 15326 ;;  lights          1   66[BANK0 ] unsigned char 
 15327 ;;  status          1   65[BANK0 ] unsigned char 
 15328 ;; Return value:  Size  Location     Type
 15329 ;;		None               void
 15330 ;; Registers used:
 15331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15332 ;; Tracked objects:
 15333 ;;		On entry : 0/0
 15334 ;;		On exit  : 0/0
 15335 ;;		Unchanged: 0/0
 15336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15337 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;Total ram usage:        5 bytes
 15342 ;; Hardware stack levels used:    1
 15343 ;; Hardware stack levels required when called:    4
 15344 ;; This function calls:
 15345 ;;		_setProductData
 15346 ;; This function is called by:
 15347 ;;		_setDimmerLights_OnOff
 15348 ;;		_setDimmerLights_Dimming
 15349 ;;		_setRFSW_Control
 15350 ;; This function uses a non-reentrant model
 15351 ;;
 15352                           
 15353                           
 15354                           ;psect for function _setRF_DimmerLights
 15355  17A1                     _setRF_DimmerLights:	
 15356                           
 15357                           ;incstack = 0
 15358                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15359                           ;setRF_DimmerLights@lights stored from wreg
 15360  17A1  0020               	movlb	0	; select bank0
 15361  17A2  00E2               	movwf	setRF_DimmerLights@lights
 15362                           
 15363                           ;RF_Control_B1.c: 447: char status = 1;
 15364  17A3  01E1               	clrf	setRF_DimmerLights@status
 15365  17A4  0AE1               	incf	setRF_DimmerLights@status,f
 15366                           
 15367                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15368  17A5  0862               	movf	setRF_DimmerLights@lights,w
 15369  17A6  3EFF               	addlw	-1
 15370  17A7  0A89               	incf	9,f
 15371  17A8  2FAB               	goto	u5270
 15372  17A9                     u5275:	
 15373  17A9  1003               	clrc
 15374  17AA  0DE1               	rlf	setRF_DimmerLights@status,f
 15375  17AB                     u5270:	
 15376  17AB  3EFF               	addlw	-1
 15377  17AC  1D03               	skipz
 15378  17AD  2FA9               	goto	u5275
 15379                           
 15380                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15381  17AE  0862               	movf	setRF_DimmerLights@lights,w
 15382  17AF  00DF               	movwf	??_setRF_DimmerLights
 15383  17B0  085F               	movf	??_setRF_DimmerLights,w
 15384  17B1  00DA               	movwf	setProductData@value
 15385  17B2  300B               	movlw	11
 15386  17B3  319E  2618  3197   	fcall	_setProductData
 15387                           
 15388                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15389  17B6  0020               	movlb	0	; select bank0
 15390  17B7  0862               	movf	setRF_DimmerLights@lights,w
 15391  17B8  3E1A               	addlw	26
 15392  17B9  076D               	addwf	_product,w
 15393  17BA  00DF               	movwf	??_setRF_DimmerLights
 15394  17BB  085F               	movf	??_setRF_DimmerLights,w
 15395  17BC  0086               	movwf	6
 15396  17BD  3002               	movlw	2	; select bank4/5
 15397  17BE  0087               	movwf	7
 15398  17BF  0801               	movf	1,w
 15399  17C0  00E0               	movwf	??_setRF_DimmerLights+1
 15400  17C1  0860               	movf	??_setRF_DimmerLights+1,w
 15401  17C2  00DA               	movwf	setProductData@value
 15402  17C3  3011               	movlw	17
 15403  17C4  319E  2618  3197   	fcall	_setProductData
 15404                           
 15405                           ;RF_Control_B1.c: 451: if (on == 1) {
 15406  17C7  0020               	movlb	0	; select bank0
 15407  17C8  085E               	movf	setRF_DimmerLights@on,w
 15408  17C9  3A01               	xorlw	1
 15409  17CA  1D03               	skipz
 15410  17CB  2FEB               	goto	l6071
 15411                           
 15412                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15413  17CC  0862               	movf	setRF_DimmerLights@lights,w
 15414  17CD  3E14               	addlw	20
 15415  17CE  076D               	addwf	_product,w
 15416  17CF  00DF               	movwf	??_setRF_DimmerLights
 15417  17D0  085F               	movf	??_setRF_DimmerLights,w
 15418  17D1  0086               	movwf	6
 15419  17D2  3002               	movlw	2	; select bank4/5
 15420  17D3  0087               	movwf	7
 15421  17D4  0801               	movf	1,w
 15422  17D5  00E0               	movwf	??_setRF_DimmerLights+1
 15423  17D6  0860               	movf	??_setRF_DimmerLights+1,w
 15424  17D7  00DA               	movwf	setProductData@value
 15425  17D8  3009               	movlw	9
 15426  17D9  319E  2618  3197   	fcall	_setProductData
 15427                           
 15428                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15429  17DC  0020               	movlb	0	; select bank0
 15430  17DD  086D               	movf	_product,w
 15431  17DE  3E0F               	addlw	15
 15432  17DF  0086               	movwf	6
 15433  17E0  3002               	movlw	2	; select bank4/5
 15434  17E1  0087               	movwf	7
 15435  17E2  0801               	movf	1,w
 15436  17E3  0461               	iorwf	setRF_DimmerLights@status,w
 15437  17E4  00DF               	movwf	??_setRF_DimmerLights
 15438  17E5  085F               	movf	??_setRF_DimmerLights,w
 15439  17E6  00DA               	movwf	setProductData@value
 15440  17E7  300F               	movlw	15
 15441  17E8  319E  2618         	fcall	_setProductData
 15442                           
 15443                           ;RF_Control_B1.c: 454: } else {
 15444  17EA  0008               	return
 15445  17EB                     l6071:	
 15446                           
 15447                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15448  17EB  0020               	movlb	0	; select bank0
 15449  17EC  01DA               	clrf	setProductData@value
 15450  17ED  3009               	movlw	9
 15451  17EE  319E  2618  3197   	fcall	_setProductData
 15452                           
 15453                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15454  17F1  0020               	movlb	0	; select bank0
 15455  17F2  086D               	movf	_product,w
 15456  17F3  3E0F               	addlw	15
 15457  17F4  0086               	movwf	6
 15458  17F5  3002               	movlw	2	; select bank4/5
 15459  17F6  0087               	movwf	7
 15460  17F7  0961               	comf	setRF_DimmerLights@status,w
 15461  17F8  0501               	andwf	1,w
 15462  17F9  00DF               	movwf	??_setRF_DimmerLights
 15463  17FA  085F               	movf	??_setRF_DimmerLights,w
 15464  17FB  00DA               	movwf	setProductData@value
 15465  17FC  300F               	movlw	15
 15466  17FD  319E  2618         	fcall	_setProductData
 15467  17FF  0008               	return
 15468  1800                     __end_of_setRF_DimmerLights:	
 15469                           
 15470                           	psect	text106
 15471  1D5B                     __ptext106:	
 15472 ;; *************** function _setDimmerLights_Line *****************
 15473 ;; Defined at:
 15474 ;;		line 936 in file "../src/Dimmer_B1.c"
 15475 ;; Parameters:    Size  Location     Type
 15476 ;;  lights          1    wreg     unsigned char 
 15477 ;; Auto vars:     Size  Location     Type
 15478 ;;  lights          1    2[COMMON] unsigned char 
 15479 ;; Return value:  Size  Location     Type
 15480 ;;		None               void
 15481 ;; Registers used:
 15482 ;;		wreg
 15483 ;; Tracked objects:
 15484 ;;		On entry : 0/0
 15485 ;;		On exit  : 0/0
 15486 ;;		Unchanged: 0/0
 15487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15492 ;;Total ram usage:        1 bytes
 15493 ;; Hardware stack levels used:    1
 15494 ;; Hardware stack levels required when called:    3
 15495 ;; This function calls:
 15496 ;;		Nothing
 15497 ;; This function is called by:
 15498 ;;		_setDimmerLights_OnOff
 15499 ;;		_setDimmerLights_Dimming
 15500 ;; This function uses a non-reentrant model
 15501 ;;
 15502                           
 15503                           
 15504                           ;psect for function _setDimmerLights_Line
 15505  1D5B                     _setDimmerLights_Line:	
 15506                           
 15507                           ;incstack = 0
 15508                           ; Regs used in _setDimmerLights_Line: [wreg]
 15509                           ;setDimmerLights_Line@lights stored from wreg
 15510  1D5B  00F2               	movwf	setDimmerLights_Line@lights
 15511                           
 15512                           ;Dimmer_B1.c: 937: Dimmer.LoadGO = 1;
 15513  1D5C  0022               	movlb	2	; select bank2
 15514  1D5D  14A0               	bsf	_Dimmer^(0+256),1
 15515                           
 15516                           ;Dimmer_B1.c: 939: DimmerLights1.Line = 0;
 15517  1D5E  10D9               	bcf	(_DimmerLights1^(0+256)+1),1
 15518                           
 15519                           ;Dimmer_B1.c: 948: if (lights == 1) {
 15520  1D5F  0872               	movf	setDimmerLights_Line@lights,w
 15521  1D60  3A01               	xorlw	1
 15522  1D61  1D03               	skipz
 15523  1D62  0008               	return
 15524                           
 15525                           ;Dimmer_B1.c: 949: DimmerLights1.Line = 1;
 15526  1D63  14D9               	bsf	(_DimmerLights1^(0+256)+1),1
 15527  1D64  0008               	return
 15528  1D65                     __end_of_setDimmerLights_Line:	
 15529                           
 15530                           	psect	text107
 15531  1DD9                     __ptext107:	
 15532 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15533 ;; Defined at:
 15534 ;;		line 86 in file "../src/Dimmer_B1.c"
 15535 ;; Parameters:    Size  Location     Type
 15536 ;;  lights          1    wreg     unsigned char 
 15537 ;;  value           1   58[BANK0 ] unsigned char 
 15538 ;; Auto vars:     Size  Location     Type
 15539 ;;  lights          1   60[BANK0 ] unsigned char 
 15540 ;; Return value:  Size  Location     Type
 15541 ;;		None               void
 15542 ;; Registers used:
 15543 ;;		wreg
 15544 ;; Tracked objects:
 15545 ;;		On entry : 0/0
 15546 ;;		On exit  : 0/0
 15547 ;;		Unchanged: 0/0
 15548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15549 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;Total ram usage:        3 bytes
 15554 ;; Hardware stack levels used:    1
 15555 ;; Hardware stack levels required when called:    3
 15556 ;; This function calls:
 15557 ;;		Nothing
 15558 ;; This function is called by:
 15559 ;;		_setDimmerLights_OnOff
 15560 ;;		_setDimmerLights_Dimming
 15561 ;;		_setRFSW_AdjControl
 15562 ;; This function uses a non-reentrant model
 15563 ;;
 15564                           
 15565                           
 15566                           ;psect for function _setDimmerIntr_MaxmumValue
 15567  1DD9                     _setDimmerIntr_MaxmumValue:	
 15568                           
 15569                           ;incstack = 0
 15570                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15571                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15572  1DD9  0020               	movlb	0	; select bank0
 15573  1DDA  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 15574                           
 15575                           ;Dimmer_B1.c: 88: if (lights == 1) {
 15576  1DDB  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 15577  1DDC  3A01               	xorlw	1
 15578  1DDD  1D03               	skipz
 15579  1DDE  0008               	return
 15580                           
 15581                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 15582  1DDF  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 15583  1DE0  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 15584  1DE1  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 15585  1DE2  0021               	movlb	1	; select bank1
 15586  1DE3  00ED               	movwf	(_DimmerIntr1^(0+128)+5)
 15587  1DE4  0008               	return
 15588  1DE5                     __end_of_setDimmerIntr_MaxmumValue:	
 15589                           
 15590                           	psect	text108
 15591  1F5B                     __ptext108:	
 15592 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15593 ;; Defined at:
 15594 ;;		line 162 in file "../src/Dimmer_B1.c"
 15595 ;; Parameters:    Size  Location     Type
 15596 ;;  lights          1    wreg     unsigned char 
 15597 ;;  command         1    2[COMMON] unsigned char 
 15598 ;; Auto vars:     Size  Location     Type
 15599 ;;  lights          1    4[COMMON] unsigned char 
 15600 ;; Return value:  Size  Location     Type
 15601 ;;		None               void
 15602 ;; Registers used:
 15603 ;;		wreg, status,2, status,0
 15604 ;; Tracked objects:
 15605 ;;		On entry : 0/0
 15606 ;;		On exit  : 0/0
 15607 ;;		Unchanged: 0/0
 15608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15609 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15611 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15612 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15613 ;;Total ram usage:        3 bytes
 15614 ;; Hardware stack levels used:    1
 15615 ;; Hardware stack levels required when called:    3
 15616 ;; This function calls:
 15617 ;;		Nothing
 15618 ;; This function is called by:
 15619 ;;		_setDimmerLights_Dimming
 15620 ;; This function uses a non-reentrant model
 15621 ;;
 15622                           
 15623                           
 15624                           ;psect for function _setDimmerIntr_Dimming_Sw
 15625  1F5B                     _setDimmerIntr_Dimming_Sw:	
 15626                           
 15627                           ;incstack = 0
 15628                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15629                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15630  1F5B  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 15631                           
 15632                           ;Dimmer_B1.c: 164: if (lights == 1) {
 15633  1F5C  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15634  1F5D  3A01               	xorlw	1
 15635  1F5E  1D03               	skipz
 15636  1F5F  0008               	return
 15637                           
 15638                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15639  1F60  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 15640  1F61  3A01               	xorlw	1
 15641  1F62  3000               	movlw	0
 15642  1F63  1903               	skipnz
 15643  1F64  3001               	movlw	1
 15644  1F65  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 15645  1F66  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 15646  1F67  0021               	movlb	1	; select bank1
 15647  1F68  0868               	movf	_DimmerIntr1^(0+128),w
 15648  1F69  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15649  1F6A  39EF               	andlw	-17
 15650  1F6B  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 15651  1F6C  00E8               	movwf	_DimmerIntr1^(0+128)
 15652  1F6D  0008               	return
 15653  1F6E                     __end_of_setDimmerIntr_Dimming_Sw:	
 15654                           
 15655                           	psect	text109
 15656  08D0                     __ptext109:	
 15657 ;; *************** function _getDimmerLights_ValueToPercent *****************
 15658 ;; Defined at:
 15659 ;;		line 1042 in file "../src/Dimmer_B1.c"
 15660 ;; Parameters:    Size  Location     Type
 15661 ;;  value           1    wreg     unsigned char 
 15662 ;; Auto vars:     Size  Location     Type
 15663 ;;  value           1   54[BANK0 ] unsigned char 
 15664 ;;  i               3   55[BANK0 ] float 
 15665 ;; Return value:  Size  Location     Type
 15666 ;;                  1    wreg      unsigned char 
 15667 ;; Registers used:
 15668 ;;		wreg, status,2, status,0, pclath, cstack
 15669 ;; Tracked objects:
 15670 ;;		On entry : 0/0
 15671 ;;		On exit  : 0/0
 15672 ;;		Unchanged: 0/0
 15673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15675 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15676 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15677 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;Total ram usage:        6 bytes
 15679 ;; Hardware stack levels used:    1
 15680 ;; Hardware stack levels required when called:    5
 15681 ;; This function calls:
 15682 ;;		___awtoft
 15683 ;;		___ftadd
 15684 ;;		___ftdiv
 15685 ;;		___ftneg
 15686 ;;		___fttol
 15687 ;; This function is called by:
 15688 ;;		_setDimmerLights_OnOff
 15689 ;;		_setDimmerLights_Dimming
 15690 ;;		_Flash_Memory_Initialization
 15691 ;; This function uses a non-reentrant model
 15692 ;;
 15693                           
 15694                           
 15695                           ;psect for function _getDimmerLights_ValueToPercent
 15696  08D0                     _getDimmerLights_ValueToPercent:	
 15697                           
 15698                           ;incstack = 0
 15699                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 15700                           ;getDimmerLights_ValueToPercent@value stored from wreg
 15701  08D0  0020               	movlb	0	; select bank0
 15702  08D1  00D6               	movwf	getDimmerLights_ValueToPercent@value
 15703                           
 15704                           ;Dimmer_B1.c: 1050: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 15705  08D2  3000               	movlw	0
 15706  08D3  00D7               	movwf	getDimmerLights_ValueToPercent@i
 15707  08D4  3030               	movlw	48
 15708  08D5  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 15709  08D6  3042               	movlw	66
 15710  08D7  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 15711                           
 15712                           ;Dimmer_B1.c: 1051: i /= 100;
 15713  08D8  3000               	movlw	0
 15714  08D9  00A6               	movwf	___ftdiv@f2
 15715  08DA  30C8               	movlw	200
 15716  08DB  00A7               	movwf	___ftdiv@f2+1
 15717  08DC  3042               	movlw	66
 15718  08DD  00A8               	movwf	___ftdiv@f2+2
 15719  08DE  0857               	movf	getDimmerLights_ValueToPercent@i,w
 15720  08DF  00A9               	movwf	___ftdiv@f1
 15721  08E0  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 15722  08E1  00AA               	movwf	___ftdiv@f1+1
 15723  08E2  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 15724  08E3  00AB               	movwf	___ftdiv@f1+2
 15725  08E4  318D  253D  3188   	fcall	___ftdiv
 15726  08E7  0020               	movlb	0	; select bank0
 15727  08E8  0826               	movf	?___ftdiv,w
 15728  08E9  00D7               	movwf	getDimmerLights_ValueToPercent@i
 15729  08EA  0827               	movf	?___ftdiv+1,w
 15730  08EB  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 15731  08EC  0828               	movf	?___ftdiv+2,w
 15732  08ED  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 15733                           
 15734                           ;Dimmer_B1.c: 1053: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 15735  08EE  0856               	movf	getDimmerLights_ValueToPercent@value,w
 15736  08EF  00D4               	movwf	??_getDimmerLights_ValueToPercent
 15737  08F0  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 15738  08F1  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 15739  08F2  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 15740  08F3  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 15741  08F4  1903               	skipnz
 15742  08F5  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 15743  08F6  0854               	movf	??_getDimmerLights_ValueToPercent,w
 15744  08F7  3E38               	addlw	56
 15745  08F8  00A0               	movwf	___awtoft@c
 15746  08F9  3000               	movlw	0
 15747  08FA  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 15748  08FB  00A1               	movwf	___awtoft@c+1
 15749  08FC  3191  21C8  3188   	fcall	___awtoft
 15750  08FF  0020               	movlb	0	; select bank0
 15751  0900  0820               	movf	?___awtoft,w
 15752  0901  00A9               	movwf	___ftdiv@f1
 15753  0902  0821               	movf	?___awtoft+1,w
 15754  0903  00AA               	movwf	___ftdiv@f1+1
 15755  0904  0822               	movf	?___awtoft+2,w
 15756  0905  00AB               	movwf	___ftdiv@f1+2
 15757  0906  0857               	movf	getDimmerLights_ValueToPercent@i,w
 15758  0907  00A6               	movwf	___ftdiv@f2
 15759  0908  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 15760  0909  00A7               	movwf	___ftdiv@f2+1
 15761  090A  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 15762  090B  00A8               	movwf	___ftdiv@f2+2
 15763  090C  318D  253D  3188   	fcall	___ftdiv
 15764  090F  0020               	movlb	0	; select bank0
 15765  0910  0826               	movf	?___ftdiv,w
 15766  0911  00B6               	movwf	___ftneg@f1
 15767  0912  0827               	movf	?___ftdiv+1,w
 15768  0913  00B7               	movwf	___ftneg@f1+1
 15769  0914  0828               	movf	?___ftdiv+2,w
 15770  0915  00B8               	movwf	___ftneg@f1+2
 15771  0916  319D  2540  3188   	fcall	___ftneg
 15772  0919  0020               	movlb	0	; select bank0
 15773  091A  0836               	movf	?___ftneg,w
 15774  091B  00BC               	movwf	___ftadd@f2
 15775  091C  0837               	movf	?___ftneg+1,w
 15776  091D  00BD               	movwf	___ftadd@f2+1
 15777  091E  0838               	movf	?___ftneg+2,w
 15778  091F  00BE               	movwf	___ftadd@f2+2
 15779  0920  3000               	movlw	0
 15780  0921  00B9               	movwf	___ftadd@f1
 15781  0922  30C8               	movlw	200
 15782  0923  00BA               	movwf	___ftadd@f1+1
 15783  0924  3042               	movlw	66
 15784  0925  00BB               	movwf	___ftadd@f1+2
 15785  0926  3183  2352  3188   	fcall	___ftadd
 15786  0929  0020               	movlb	0	; select bank0
 15787  092A  0839               	movf	?___ftadd,w
 15788  092B  00C6               	movwf	___fttol@f1
 15789  092C  083A               	movf	?___ftadd+1,w
 15790  092D  00C7               	movwf	___fttol@f1+1
 15791  092E  083B               	movf	?___ftadd+2,w
 15792  092F  00C8               	movwf	___fttol@f1+2
 15793  0930  318C  24B6         	fcall	___fttol
 15794  0932  0020               	movlb	0	; select bank0
 15795  0933  0846               	movf	?___fttol,w
 15796  0934  0008               	return
 15797  0935                     __end_of_getDimmerLights_ValueToPercent:	
 15798                           
 15799                           	psect	text110
 15800  0CB6                     __ptext110:	
 15801 ;; *************** function ___fttol *****************
 15802 ;; Defined at:
 15803 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 15804 ;; Parameters:    Size  Location     Type
 15805 ;;  f1              3   38[BANK0 ] float 
 15806 ;; Auto vars:     Size  Location     Type
 15807 ;;  lval            4   47[BANK0 ] unsigned long 
 15808 ;;  exp1            1   51[BANK0 ] unsigned char 
 15809 ;;  sign1           1   46[BANK0 ] unsigned char 
 15810 ;; Return value:  Size  Location     Type
 15811 ;;                  4   38[BANK0 ] long 
 15812 ;; Registers used:
 15813 ;;		wreg, status,2, status,0
 15814 ;; Tracked objects:
 15815 ;;		On entry : 0/0
 15816 ;;		On exit  : 0/0
 15817 ;;		Unchanged: 0/0
 15818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15819 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15820 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15822 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15823 ;;Total ram usage:       14 bytes
 15824 ;; Hardware stack levels used:    1
 15825 ;; Hardware stack levels required when called:    3
 15826 ;; This function calls:
 15827 ;;		Nothing
 15828 ;; This function is called by:
 15829 ;;		_getDimmerLights_PercentToValue
 15830 ;;		_getDimmerLights_ValueToPercent
 15831 ;; This function uses a non-reentrant model
 15832 ;;
 15833                           
 15834                           
 15835                           ;psect for function ___fttol
 15836  0CB6                     ___fttol:	
 15837                           
 15838                           ;incstack = 0
 15839                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 15840  0CB6  0020               	movlb	0	; select bank0
 15841  0CB7  0846               	movf	___fttol@f1,w
 15842  0CB8  00CA               	movwf	??___fttol
 15843  0CB9  0847               	movf	___fttol@f1+1,w
 15844  0CBA  00CB               	movwf	??___fttol+1
 15845  0CBB  0848               	movf	___fttol@f1+2,w
 15846  0CBC  00CC               	movwf	??___fttol+2
 15847  0CBD  1003               	clrc
 15848  0CBE  0D4B               	rlf	??___fttol+1,w
 15849  0CBF  0D4C               	rlf	??___fttol+2,w
 15850  0CC0  00CD               	movwf	??___fttol+3
 15851  0CC1  084D               	movf	??___fttol+3,w
 15852  0CC2  00D3               	movwf	___fttol@exp1
 15853  0CC3  08D3               	movf	___fttol@exp1,f
 15854  0CC4  1D03               	skipz
 15855  0CC5  2CCF               	goto	l5907
 15856  0CC6  3000               	movlw	0
 15857  0CC7  00C9               	movwf	?___fttol+3
 15858  0CC8  3000               	movlw	0
 15859  0CC9  00C8               	movwf	?___fttol+2
 15860  0CCA  3000               	movlw	0
 15861  0CCB  00C7               	movwf	?___fttol+1
 15862  0CCC  3000               	movlw	0
 15863  0CCD  00C6               	movwf	?___fttol
 15864  0CCE  0008               	return
 15865  0CCF                     l5907:	
 15866  0CCF  0846               	movf	___fttol@f1,w
 15867  0CD0  00CA               	movwf	??___fttol
 15868  0CD1  0847               	movf	___fttol@f1+1,w
 15869  0CD2  00CB               	movwf	??___fttol+1
 15870  0CD3  0848               	movf	___fttol@f1+2,w
 15871  0CD4  00CC               	movwf	??___fttol+2
 15872  0CD5  3017               	movlw	23
 15873  0CD6                     u5015:	
 15874  0CD6  36CC               	lsrf	??___fttol+2,f
 15875  0CD7  0CCB               	rrf	??___fttol+1,f
 15876  0CD8  0CCA               	rrf	??___fttol,f
 15877  0CD9  0B89               	decfsz	9,f
 15878  0CDA  2CD6               	goto	u5015
 15879  0CDB  084A               	movf	??___fttol,w
 15880  0CDC  00CD               	movwf	??___fttol+3
 15881  0CDD  084D               	movf	??___fttol+3,w
 15882  0CDE  00CE               	movwf	___fttol@sign1
 15883  0CDF  17C7               	bsf	___fttol@f1+1,7
 15884  0CE0  30FF               	movlw	255
 15885  0CE1  05C6               	andwf	___fttol@f1,f
 15886  0CE2  30FF               	movlw	255
 15887  0CE3  05C7               	andwf	___fttol@f1+1,f
 15888  0CE4  3000               	movlw	0
 15889  0CE5  05C8               	andwf	___fttol@f1+2,f
 15890  0CE6  0846               	movf	___fttol@f1,w
 15891  0CE7  00CF               	movwf	___fttol@lval
 15892  0CE8  0847               	movf	___fttol@f1+1,w
 15893  0CE9  00D0               	movwf	___fttol@lval+1
 15894  0CEA  0848               	movf	___fttol@f1+2,w
 15895  0CEB  00D1               	movwf	___fttol@lval+2
 15896  0CEC  01D2               	clrf	___fttol@lval+3
 15897  0CED  308E               	movlw	142
 15898  0CEE  02D3               	subwf	___fttol@exp1,f
 15899  0CEF  1FD3               	btfss	___fttol@exp1,7
 15900  0CF0  2D0D               	goto	l5927
 15901  0CF1  0853               	movf	___fttol@exp1,w
 15902  0CF2  3A80               	xorlw	128
 15903  0CF3  3E8F               	addlw	143
 15904  0CF4  1803               	skipnc
 15905  0CF5  2CFF               	goto	l5925
 15906  0CF6  3000               	movlw	0
 15907  0CF7  00C9               	movwf	?___fttol+3
 15908  0CF8  3000               	movlw	0
 15909  0CF9  00C8               	movwf	?___fttol+2
 15910  0CFA  3000               	movlw	0
 15911  0CFB  00C7               	movwf	?___fttol+1
 15912  0CFC  3000               	movlw	0
 15913  0CFD  00C6               	movwf	?___fttol
 15914  0CFE  0008               	return
 15915  0CFF                     l5925:	
 15916  0CFF  3001               	movlw	1
 15917  0D00                     u5045:	
 15918  0D00  36D2               	lsrf	___fttol@lval+3,f
 15919  0D01  0CD1               	rrf	___fttol@lval+2,f
 15920  0D02  0CD0               	rrf	___fttol@lval+1,f
 15921  0D03  0CCF               	rrf	___fttol@lval,f
 15922  0D04  0B89               	decfsz	9,f
 15923  0D05  2D00               	goto	u5045
 15924  0D06  3001               	movlw	1
 15925  0D07  00CA               	movwf	??___fttol
 15926  0D08  084A               	movf	??___fttol,w
 15927  0D09  07D3               	addwf	___fttol@exp1,f
 15928  0D0A  1903               	btfsc	3,2
 15929  0D0B  2D26               	goto	l5937
 15930  0D0C  2CFF               	goto	l5925
 15931  0D0D                     l5927:	
 15932  0D0D  3018               	movlw	24
 15933  0D0E  0253               	subwf	___fttol@exp1,w
 15934  0D0F  1C03               	skipc
 15935  0D10  2D23               	goto	l5935
 15936  0D11  3000               	movlw	0
 15937  0D12  00C9               	movwf	?___fttol+3
 15938  0D13  3000               	movlw	0
 15939  0D14  00C8               	movwf	?___fttol+2
 15940  0D15  3000               	movlw	0
 15941  0D16  00C7               	movwf	?___fttol+1
 15942  0D17  3000               	movlw	0
 15943  0D18  00C6               	movwf	?___fttol
 15944  0D19  0008               	return
 15945  0D1A                     l5933:	
 15946  0D1A  3001               	movlw	1
 15947  0D1B                     u5075:	
 15948  0D1B  35CF               	lslf	___fttol@lval,f
 15949  0D1C  0DD0               	rlf	___fttol@lval+1,f
 15950  0D1D  0DD1               	rlf	___fttol@lval+2,f
 15951  0D1E  0DD2               	rlf	___fttol@lval+3,f
 15952  0D1F  0B89               	decfsz	9,f
 15953  0D20  2D1B               	goto	u5075
 15954  0D21  3001               	movlw	1
 15955  0D22  02D3               	subwf	___fttol@exp1,f
 15956  0D23                     l5935:	
 15957  0D23  08D3               	movf	___fttol@exp1,f
 15958  0D24  1D03               	skipz
 15959  0D25  2D1A               	goto	l5933
 15960  0D26                     l5937:	
 15961  0D26  084E               	movf	___fttol@sign1,w
 15962  0D27  1903               	btfsc	3,2
 15963  0D28  2D34               	goto	l5941
 15964  0D29  09CF               	comf	___fttol@lval,f
 15965  0D2A  09D0               	comf	___fttol@lval+1,f
 15966  0D2B  09D1               	comf	___fttol@lval+2,f
 15967  0D2C  09D2               	comf	___fttol@lval+3,f
 15968  0D2D  0ACF               	incf	___fttol@lval,f
 15969  0D2E  1903               	skipnz
 15970  0D2F  0AD0               	incf	___fttol@lval+1,f
 15971  0D30  1903               	skipnz
 15972  0D31  0AD1               	incf	___fttol@lval+2,f
 15973  0D32  1903               	skipnz
 15974  0D33  0AD2               	incf	___fttol@lval+3,f
 15975  0D34                     l5941:	
 15976  0D34  0852               	movf	___fttol@lval+3,w
 15977  0D35  00C9               	movwf	?___fttol+3
 15978  0D36  0851               	movf	___fttol@lval+2,w
 15979  0D37  00C8               	movwf	?___fttol+2
 15980  0D38  0850               	movf	___fttol@lval+1,w
 15981  0D39  00C7               	movwf	?___fttol+1
 15982  0D3A  084F               	movf	___fttol@lval,w
 15983  0D3B  00C6               	movwf	?___fttol
 15984  0D3C  0008               	return
 15985  0D3D                     __end_of___fttol:	
 15986                           
 15987                           	psect	text111
 15988  1D40                     __ptext111:	
 15989 ;; *************** function ___ftneg *****************
 15990 ;; Defined at:
 15991 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 15992 ;; Parameters:    Size  Location     Type
 15993 ;;  f1              3   22[BANK0 ] float 
 15994 ;; Auto vars:     Size  Location     Type
 15995 ;;		None
 15996 ;; Return value:  Size  Location     Type
 15997 ;;                  3   22[BANK0 ] float 
 15998 ;; Registers used:
 15999 ;;		wreg
 16000 ;; Tracked objects:
 16001 ;;		On entry : 0/0
 16002 ;;		On exit  : 0/0
 16003 ;;		Unchanged: 0/0
 16004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16005 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16008 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16009 ;;Total ram usage:        3 bytes
 16010 ;; Hardware stack levels used:    1
 16011 ;; Hardware stack levels required when called:    3
 16012 ;; This function calls:
 16013 ;;		Nothing
 16014 ;; This function is called by:
 16015 ;;		_getDimmerLights_PercentToValue
 16016 ;;		_getDimmerLights_ValueToPercent
 16017 ;; This function uses a non-reentrant model
 16018 ;;
 16019                           
 16020                           
 16021                           ;psect for function ___ftneg
 16022  1D40                     ___ftneg:	
 16023                           
 16024                           ;incstack = 0
 16025                           ; Regs used in ___ftneg: [wreg]
 16026  1D40  0020               	movlb	0	; select bank0
 16027  1D41  0838               	movf	___ftneg@f1+2,w
 16028  1D42  0437               	iorwf	___ftneg@f1+1,w
 16029  1D43  0436               	iorwf	___ftneg@f1,w
 16030  1D44  1903               	skipnz
 16031  1D45  0008               	return
 16032  1D46  3080               	movlw	128
 16033  1D47  06B8               	xorwf	___ftneg@f1+2,f
 16034  1D48  0008               	return
 16035  1D49                     __end_of___ftneg:	
 16036                           
 16037                           	psect	text112
 16038  0D3D                     __ptext112:	
 16039 ;; *************** function ___ftdiv *****************
 16040 ;; Defined at:
 16041 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16042 ;; Parameters:    Size  Location     Type
 16043 ;;  f2              3    6[BANK0 ] float 
 16044 ;;  f1              3    9[BANK0 ] float 
 16045 ;; Auto vars:     Size  Location     Type
 16046 ;;  f3              3   17[BANK0 ] float 
 16047 ;;  sign            1   21[BANK0 ] unsigned char 
 16048 ;;  exp             1   20[BANK0 ] unsigned char 
 16049 ;;  cntr            1   16[BANK0 ] unsigned char 
 16050 ;; Return value:  Size  Location     Type
 16051 ;;                  3    6[BANK0 ] float 
 16052 ;; Registers used:
 16053 ;;		wreg, status,2, status,0, pclath, cstack
 16054 ;; Tracked objects:
 16055 ;;		On entry : 0/0
 16056 ;;		On exit  : 0/0
 16057 ;;		Unchanged: 0/0
 16058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16059 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16060 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16061 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;Total ram usage:       16 bytes
 16064 ;; Hardware stack levels used:    1
 16065 ;; Hardware stack levels required when called:    4
 16066 ;; This function calls:
 16067 ;;		___ftpack
 16068 ;; This function is called by:
 16069 ;;		_getDimmerLights_PercentToValue
 16070 ;;		_getDimmerLights_ValueToPercent
 16071 ;; This function uses a non-reentrant model
 16072 ;;
 16073                           
 16074                           
 16075                           ;psect for function ___ftdiv
 16076  0D3D                     ___ftdiv:	
 16077                           
 16078                           ;incstack = 0
 16079                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16080  0D3D  0020               	movlb	0	; select bank0
 16081  0D3E  0829               	movf	___ftdiv@f1,w
 16082  0D3F  00AC               	movwf	??___ftdiv
 16083  0D40  082A               	movf	___ftdiv@f1+1,w
 16084  0D41  00AD               	movwf	??___ftdiv+1
 16085  0D42  082B               	movf	___ftdiv@f1+2,w
 16086  0D43  00AE               	movwf	??___ftdiv+2
 16087  0D44  1003               	clrc
 16088  0D45  0D2D               	rlf	??___ftdiv+1,w
 16089  0D46  0D2E               	rlf	??___ftdiv+2,w
 16090  0D47  00AF               	movwf	??___ftdiv+3
 16091  0D48  082F               	movf	??___ftdiv+3,w
 16092  0D49  00B4               	movwf	___ftdiv@exp
 16093  0D4A  08B4               	movf	___ftdiv@exp,f
 16094  0D4B  1D03               	skipz
 16095  0D4C  2D54               	goto	l5807
 16096  0D4D  3000               	movlw	0
 16097  0D4E  00A6               	movwf	?___ftdiv
 16098  0D4F  3000               	movlw	0
 16099  0D50  00A7               	movwf	?___ftdiv+1
 16100  0D51  3000               	movlw	0
 16101  0D52  00A8               	movwf	?___ftdiv+2
 16102  0D53  0008               	return
 16103  0D54                     l5807:	
 16104  0D54  0826               	movf	___ftdiv@f2,w
 16105  0D55  00AC               	movwf	??___ftdiv
 16106  0D56  0827               	movf	___ftdiv@f2+1,w
 16107  0D57  00AD               	movwf	??___ftdiv+1
 16108  0D58  0828               	movf	___ftdiv@f2+2,w
 16109  0D59  00AE               	movwf	??___ftdiv+2
 16110  0D5A  1003               	clrc
 16111  0D5B  0D2D               	rlf	??___ftdiv+1,w
 16112  0D5C  0D2E               	rlf	??___ftdiv+2,w
 16113  0D5D  00AF               	movwf	??___ftdiv+3
 16114  0D5E  082F               	movf	??___ftdiv+3,w
 16115  0D5F  00B5               	movwf	___ftdiv@sign
 16116  0D60  08B5               	movf	___ftdiv@sign,f
 16117  0D61  1D03               	skipz
 16118  0D62  2D6A               	goto	l5813
 16119  0D63  3000               	movlw	0
 16120  0D64  00A6               	movwf	?___ftdiv
 16121  0D65  3000               	movlw	0
 16122  0D66  00A7               	movwf	?___ftdiv+1
 16123  0D67  3000               	movlw	0
 16124  0D68  00A8               	movwf	?___ftdiv+2
 16125  0D69  0008               	return
 16126  0D6A                     l5813:	
 16127  0D6A  3000               	movlw	0
 16128  0D6B  00B1               	movwf	___ftdiv@f3
 16129  0D6C  3000               	movlw	0
 16130  0D6D  00B2               	movwf	___ftdiv@f3+1
 16131  0D6E  3000               	movlw	0
 16132  0D6F  00B3               	movwf	___ftdiv@f3+2
 16133  0D70  3089               	movlw	137
 16134  0D71  0735               	addwf	___ftdiv@sign,w
 16135  0D72  00AC               	movwf	??___ftdiv
 16136  0D73  082C               	movf	??___ftdiv,w
 16137  0D74  02B4               	subwf	___ftdiv@exp,f
 16138  0D75  0829               	movf	___ftdiv@f1,w
 16139  0D76  00AC               	movwf	??___ftdiv
 16140  0D77  082A               	movf	___ftdiv@f1+1,w
 16141  0D78  00AD               	movwf	??___ftdiv+1
 16142  0D79  082B               	movf	___ftdiv@f1+2,w
 16143  0D7A  00AE               	movwf	??___ftdiv+2
 16144  0D7B  3010               	movlw	16
 16145  0D7C                     u4815:	
 16146  0D7C  36AE               	lsrf	??___ftdiv+2,f
 16147  0D7D  0CAD               	rrf	??___ftdiv+1,f
 16148  0D7E  0CAC               	rrf	??___ftdiv,f
 16149  0D7F  0B89               	decfsz	9,f
 16150  0D80  2D7C               	goto	u4815
 16151  0D81  082C               	movf	??___ftdiv,w
 16152  0D82  00AF               	movwf	??___ftdiv+3
 16153  0D83  082F               	movf	??___ftdiv+3,w
 16154  0D84  00B5               	movwf	___ftdiv@sign
 16155  0D85  0826               	movf	___ftdiv@f2,w
 16156  0D86  00AC               	movwf	??___ftdiv
 16157  0D87  0827               	movf	___ftdiv@f2+1,w
 16158  0D88  00AD               	movwf	??___ftdiv+1
 16159  0D89  0828               	movf	___ftdiv@f2+2,w
 16160  0D8A  00AE               	movwf	??___ftdiv+2
 16161  0D8B  3010               	movlw	16
 16162  0D8C                     u4825:	
 16163  0D8C  36AE               	lsrf	??___ftdiv+2,f
 16164  0D8D  0CAD               	rrf	??___ftdiv+1,f
 16165  0D8E  0CAC               	rrf	??___ftdiv,f
 16166  0D8F  0B89               	decfsz	9,f
 16167  0D90  2D8C               	goto	u4825
 16168  0D91  082C               	movf	??___ftdiv,w
 16169  0D92  00AF               	movwf	??___ftdiv+3
 16170  0D93  082F               	movf	??___ftdiv+3,w
 16171  0D94  06B5               	xorwf	___ftdiv@sign,f
 16172  0D95  3080               	movlw	128
 16173  0D96  00AC               	movwf	??___ftdiv
 16174  0D97  082C               	movf	??___ftdiv,w
 16175  0D98  05B5               	andwf	___ftdiv@sign,f
 16176  0D99  17AA               	bsf	___ftdiv@f1+1,7
 16177  0D9A  30FF               	movlw	255
 16178  0D9B  05A9               	andwf	___ftdiv@f1,f
 16179  0D9C  30FF               	movlw	255
 16180  0D9D  05AA               	andwf	___ftdiv@f1+1,f
 16181  0D9E  3000               	movlw	0
 16182  0D9F  05AB               	andwf	___ftdiv@f1+2,f
 16183  0DA0  17A7               	bsf	___ftdiv@f2+1,7
 16184  0DA1  30FF               	movlw	255
 16185  0DA2  05A6               	andwf	___ftdiv@f2,f
 16186  0DA3  30FF               	movlw	255
 16187  0DA4  05A7               	andwf	___ftdiv@f2+1,f
 16188  0DA5  3000               	movlw	0
 16189  0DA6  05A8               	andwf	___ftdiv@f2+2,f
 16190  0DA7  3018               	movlw	24
 16191  0DA8  00AC               	movwf	??___ftdiv
 16192  0DA9  082C               	movf	??___ftdiv,w
 16193  0DAA  00B0               	movwf	___ftdiv@cntr
 16194  0DAB                     l5827:	
 16195  0DAB  3001               	movlw	1
 16196  0DAC                     u4835:	
 16197  0DAC  35B1               	lslf	___ftdiv@f3,f
 16198  0DAD  0DB2               	rlf	___ftdiv@f3+1,f
 16199  0DAE  0DB3               	rlf	___ftdiv@f3+2,f
 16200  0DAF  0B89               	decfsz	9,f
 16201  0DB0  2DAC               	goto	u4835
 16202  0DB1  0828               	movf	___ftdiv@f2+2,w
 16203  0DB2  022B               	subwf	___ftdiv@f1+2,w
 16204  0DB3  1D03               	skipz
 16205  0DB4  2DBB               	goto	u4845
 16206  0DB5  0827               	movf	___ftdiv@f2+1,w
 16207  0DB6  022A               	subwf	___ftdiv@f1+1,w
 16208  0DB7  1D03               	skipz
 16209  0DB8  2DBB               	goto	u4845
 16210  0DB9  0826               	movf	___ftdiv@f2,w
 16211  0DBA  0229               	subwf	___ftdiv@f1,w
 16212  0DBB                     u4845:	
 16213  0DBB  1C03               	skipc
 16214  0DBC  2DC4               	goto	l5835
 16215  0DBD  0826               	movf	___ftdiv@f2,w
 16216  0DBE  02A9               	subwf	___ftdiv@f1,f
 16217  0DBF  0827               	movf	___ftdiv@f2+1,w
 16218  0DC0  3BAA               	subwfb	___ftdiv@f1+1,f
 16219  0DC1  0828               	movf	___ftdiv@f2+2,w
 16220  0DC2  3BAB               	subwfb	___ftdiv@f1+2,f
 16221  0DC3  1431               	bsf	___ftdiv@f3,0
 16222  0DC4                     l5835:	
 16223  0DC4  3001               	movlw	1
 16224  0DC5                     u4855:	
 16225  0DC5  35A9               	lslf	___ftdiv@f1,f
 16226  0DC6  0DAA               	rlf	___ftdiv@f1+1,f
 16227  0DC7  0DAB               	rlf	___ftdiv@f1+2,f
 16228  0DC8  0B89               	decfsz	9,f
 16229  0DC9  2DC5               	goto	u4855
 16230  0DCA  3001               	movlw	1
 16231  0DCB  02B0               	subwf	___ftdiv@cntr,f
 16232  0DCC  1D03               	btfss	3,2
 16233  0DCD  2DAB               	goto	l5827
 16234  0DCE  0831               	movf	___ftdiv@f3,w
 16235  0DCF  00F2               	movwf	___ftpack@arg
 16236  0DD0  0832               	movf	___ftdiv@f3+1,w
 16237  0DD1  00F3               	movwf	___ftpack@arg+1
 16238  0DD2  0833               	movf	___ftdiv@f3+2,w
 16239  0DD3  00F4               	movwf	___ftpack@arg+2
 16240  0DD4  0834               	movf	___ftdiv@exp,w
 16241  0DD5  00AC               	movwf	??___ftdiv
 16242  0DD6  082C               	movf	??___ftdiv,w
 16243  0DD7  00F5               	movwf	___ftpack@exp
 16244  0DD8  0835               	movf	___ftdiv@sign,w
 16245  0DD9  00AD               	movwf	??___ftdiv+1
 16246  0DDA  082D               	movf	??___ftdiv+1,w
 16247  0DDB  00F6               	movwf	___ftpack@sign
 16248  0DDC  3188  200F         	fcall	___ftpack
 16249  0DDE  0872               	movf	?___ftpack,w
 16250  0DDF  0020               	movlb	0	; select bank0
 16251  0DE0  00A6               	movwf	?___ftdiv
 16252  0DE1  0873               	movf	?___ftpack+1,w
 16253  0DE2  00A7               	movwf	?___ftdiv+1
 16254  0DE3  0874               	movf	?___ftpack+2,w
 16255  0DE4  00A8               	movwf	?___ftdiv+2
 16256  0DE5  0008               	return
 16257  0DE6                     __end_of___ftdiv:	
 16258                           
 16259                           	psect	text113
 16260  0352                     __ptext113:	
 16261 ;; *************** function ___ftadd *****************
 16262 ;; Defined at:
 16263 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16264 ;; Parameters:    Size  Location     Type
 16265 ;;  f1              3   25[BANK0 ] float 
 16266 ;;  f2              3   28[BANK0 ] float 
 16267 ;; Auto vars:     Size  Location     Type
 16268 ;;  exp1            1   37[BANK0 ] unsigned char 
 16269 ;;  exp2            1   36[BANK0 ] unsigned char 
 16270 ;;  sign            1   35[BANK0 ] unsigned char 
 16271 ;; Return value:  Size  Location     Type
 16272 ;;                  3   25[BANK0 ] float 
 16273 ;; Registers used:
 16274 ;;		wreg, status,2, status,0, pclath, cstack
 16275 ;; Tracked objects:
 16276 ;;		On entry : 0/0
 16277 ;;		On exit  : 0/0
 16278 ;;		Unchanged: 0/0
 16279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16280 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16281 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16282 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;Total ram usage:       13 bytes
 16285 ;; Hardware stack levels used:    1
 16286 ;; Hardware stack levels required when called:    4
 16287 ;; This function calls:
 16288 ;;		___ftpack
 16289 ;; This function is called by:
 16290 ;;		_getDimmerLights_PercentToValue
 16291 ;;		_getDimmerLights_ValueToPercent
 16292 ;; This function uses a non-reentrant model
 16293 ;;
 16294                           
 16295                           
 16296                           ;psect for function ___ftadd
 16297  0352                     ___ftadd:	
 16298                           
 16299                           ;incstack = 0
 16300                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16301  0352  0020               	movlb	0	; select bank0
 16302  0353  0839               	movf	___ftadd@f1,w
 16303  0354  00BF               	movwf	??___ftadd
 16304  0355  083A               	movf	___ftadd@f1+1,w
 16305  0356  00C0               	movwf	??___ftadd+1
 16306  0357  083B               	movf	___ftadd@f1+2,w
 16307  0358  00C1               	movwf	??___ftadd+2
 16308  0359  1003               	clrc
 16309  035A  0D40               	rlf	??___ftadd+1,w
 16310  035B  0D41               	rlf	??___ftadd+2,w
 16311  035C  00C2               	movwf	??___ftadd+3
 16312  035D  0842               	movf	??___ftadd+3,w
 16313  035E  00C5               	movwf	___ftadd@exp1
 16314  035F  083C               	movf	___ftadd@f2,w
 16315  0360  00BF               	movwf	??___ftadd
 16316  0361  083D               	movf	___ftadd@f2+1,w
 16317  0362  00C0               	movwf	??___ftadd+1
 16318  0363  083E               	movf	___ftadd@f2+2,w
 16319  0364  00C1               	movwf	??___ftadd+2
 16320  0365  1003               	clrc
 16321  0366  0D40               	rlf	??___ftadd+1,w
 16322  0367  0D41               	rlf	??___ftadd+2,w
 16323  0368  00C2               	movwf	??___ftadd+3
 16324  0369  0842               	movf	??___ftadd+3,w
 16325  036A  00C4               	movwf	___ftadd@exp2
 16326  036B  0845               	movf	___ftadd@exp1,w
 16327  036C  1903               	btfsc	3,2
 16328  036D  2B7A               	goto	l5737
 16329  036E  0844               	movf	___ftadd@exp2,w
 16330  036F  0245               	subwf	___ftadd@exp1,w
 16331  0370  1803               	skipnc
 16332  0371  2B81               	goto	l5741
 16333  0372  0345               	decf	___ftadd@exp1,w
 16334  0373  3AFF               	xorlw	255
 16335  0374  0744               	addwf	___ftadd@exp2,w
 16336  0375  00BF               	movwf	??___ftadd
 16337  0376  3019               	movlw	25
 16338  0377  023F               	subwf	??___ftadd,w
 16339  0378  1C03               	skipc
 16340  0379  2B81               	goto	l5741
 16341  037A                     l5737:	
 16342  037A  083C               	movf	___ftadd@f2,w
 16343  037B  00B9               	movwf	?___ftadd
 16344  037C  083D               	movf	___ftadd@f2+1,w
 16345  037D  00BA               	movwf	?___ftadd+1
 16346  037E  083E               	movf	___ftadd@f2+2,w
 16347  037F  00BB               	movwf	?___ftadd+2
 16348  0380  0008               	return
 16349  0381                     l5741:	
 16350  0381  0844               	movf	___ftadd@exp2,w
 16351  0382  1903               	btfsc	3,2
 16352  0383  0008               	return
 16353  0384  0845               	movf	___ftadd@exp1,w
 16354  0385  0244               	subwf	___ftadd@exp2,w
 16355  0386  1803               	skipnc
 16356  0387  2B90               	goto	l5747
 16357  0388  0344               	decf	___ftadd@exp2,w
 16358  0389  3AFF               	xorlw	255
 16359  038A  0745               	addwf	___ftadd@exp1,w
 16360  038B  00BF               	movwf	??___ftadd
 16361  038C  3019               	movlw	25
 16362  038D  023F               	subwf	??___ftadd,w
 16363  038E  1803               	btfsc	3,0
 16364  038F  0008               	return
 16365  0390                     l5747:	
 16366  0390  3006               	movlw	6
 16367  0391  00BF               	movwf	??___ftadd
 16368  0392  083F               	movf	??___ftadd,w
 16369  0393  00C3               	movwf	___ftadd@sign
 16370  0394  1BBB               	btfsc	___ftadd@f1+2,7
 16371  0395  17C3               	bsf	___ftadd@sign,7
 16372  0396  1BBE               	btfsc	___ftadd@f2+2,7
 16373  0397  1743               	bsf	___ftadd@sign,6
 16374  0398  17BA               	bsf	___ftadd@f1+1,7
 16375  0399  30FF               	movlw	255
 16376  039A  05B9               	andwf	___ftadd@f1,f
 16377  039B  30FF               	movlw	255
 16378  039C  05BA               	andwf	___ftadd@f1+1,f
 16379  039D  3000               	movlw	0
 16380  039E  05BB               	andwf	___ftadd@f1+2,f
 16381  039F  17BD               	bsf	___ftadd@f2+1,7
 16382  03A0  30FF               	movlw	255
 16383  03A1  05BC               	andwf	___ftadd@f2,f
 16384  03A2  30FF               	movlw	255
 16385  03A3  05BD               	andwf	___ftadd@f2+1,f
 16386  03A4  3000               	movlw	0
 16387  03A5  05BE               	andwf	___ftadd@f2+2,f
 16388  03A6  0844               	movf	___ftadd@exp2,w
 16389  03A7  0245               	subwf	___ftadd@exp1,w
 16390  03A8  1803               	skipnc
 16391  03A9  2BCC               	goto	l5769
 16392  03AA                     l5759:	
 16393  03AA  3001               	movlw	1
 16394  03AB                     u4655:	
 16395  03AB  35BC               	lslf	___ftadd@f2,f
 16396  03AC  0DBD               	rlf	___ftadd@f2+1,f
 16397  03AD  0DBE               	rlf	___ftadd@f2+2,f
 16398  03AE  0B89               	decfsz	9,f
 16399  03AF  2BAB               	goto	u4655
 16400  03B0  3001               	movlw	1
 16401  03B1  02C4               	subwf	___ftadd@exp2,f
 16402  03B2  0844               	movf	___ftadd@exp2,w
 16403  03B3  0645               	xorwf	___ftadd@exp1,w
 16404  03B4  1903               	skipnz
 16405  03B5  2BC7               	goto	l5767
 16406  03B6  3001               	movlw	1
 16407  03B7  02C3               	subwf	___ftadd@sign,f
 16408  03B8  0843               	movf	___ftadd@sign,w
 16409  03B9  3907               	andlw	7
 16410  03BA  1903               	btfsc	3,2
 16411  03BB  2BC7               	goto	l5767
 16412  03BC  2BAA               	goto	l5759
 16413  03BD                     l5765:	
 16414  03BD  3001               	movlw	1
 16415  03BE                     u4685:	
 16416  03BE  36BB               	lsrf	___ftadd@f1+2,f
 16417  03BF  0CBA               	rrf	___ftadd@f1+1,f
 16418  03C0  0CB9               	rrf	___ftadd@f1,f
 16419  03C1  0B89               	decfsz	9,f
 16420  03C2  2BBE               	goto	u4685
 16421  03C3  3001               	movlw	1
 16422  03C4  00BF               	movwf	??___ftadd
 16423  03C5  083F               	movf	??___ftadd,w
 16424  03C6  07C5               	addwf	___ftadd@exp1,f
 16425  03C7                     l5767:	
 16426  03C7  0845               	movf	___ftadd@exp1,w
 16427  03C8  0644               	xorwf	___ftadd@exp2,w
 16428  03C9  1903               	btfsc	3,2
 16429  03CA  2BF1               	goto	l2832
 16430  03CB  2BBD               	goto	l5765
 16431  03CC                     l5769:	
 16432  03CC  0845               	movf	___ftadd@exp1,w
 16433  03CD  0244               	subwf	___ftadd@exp2,w
 16434  03CE  1803               	skipnc
 16435  03CF  2BF1               	goto	l2832
 16436  03D0                     l5771:	
 16437  03D0  3001               	movlw	1
 16438  03D1                     u4715:	
 16439  03D1  35B9               	lslf	___ftadd@f1,f
 16440  03D2  0DBA               	rlf	___ftadd@f1+1,f
 16441  03D3  0DBB               	rlf	___ftadd@f1+2,f
 16442  03D4  0B89               	decfsz	9,f
 16443  03D5  2BD1               	goto	u4715
 16444  03D6  3001               	movlw	1
 16445  03D7  02C5               	subwf	___ftadd@exp1,f
 16446  03D8  0844               	movf	___ftadd@exp2,w
 16447  03D9  0645               	xorwf	___ftadd@exp1,w
 16448  03DA  1903               	skipnz
 16449  03DB  2BED               	goto	l5779
 16450  03DC  3001               	movlw	1
 16451  03DD  02C3               	subwf	___ftadd@sign,f
 16452  03DE  0843               	movf	___ftadd@sign,w
 16453  03DF  3907               	andlw	7
 16454  03E0  1903               	btfsc	3,2
 16455  03E1  2BED               	goto	l5779
 16456  03E2  2BD0               	goto	l5771
 16457  03E3                     l5777:	
 16458  03E3  3001               	movlw	1
 16459  03E4                     u4745:	
 16460  03E4  36BE               	lsrf	___ftadd@f2+2,f
 16461  03E5  0CBD               	rrf	___ftadd@f2+1,f
 16462  03E6  0CBC               	rrf	___ftadd@f2,f
 16463  03E7  0B89               	decfsz	9,f
 16464  03E8  2BE4               	goto	u4745
 16465  03E9  3001               	movlw	1
 16466  03EA  00BF               	movwf	??___ftadd
 16467  03EB  083F               	movf	??___ftadd,w
 16468  03EC  07C4               	addwf	___ftadd@exp2,f
 16469  03ED                     l5779:	
 16470  03ED  0845               	movf	___ftadd@exp1,w
 16471  03EE  0644               	xorwf	___ftadd@exp2,w
 16472  03EF  1D03               	skipz
 16473  03F0  2BE3               	goto	l5777
 16474  03F1                     l2832:	
 16475  03F1  1FC3               	btfss	___ftadd@sign,7
 16476  03F2  2C03               	goto	l5783
 16477  03F3  30FF               	movlw	255
 16478  03F4  06B9               	xorwf	___ftadd@f1,f
 16479  03F5  30FF               	movlw	255
 16480  03F6  06BA               	xorwf	___ftadd@f1+1,f
 16481  03F7  30FF               	movlw	255
 16482  03F8  06BB               	xorwf	___ftadd@f1+2,f
 16483  03F9  3001               	movlw	1
 16484  03FA  07B9               	addwf	___ftadd@f1,f
 16485  03FB  3000               	movlw	0
 16486  03FC  1803               	skipnc
 16487  03FD  3001               	movlw	1
 16488  03FE  07BA               	addwf	___ftadd@f1+1,f
 16489  03FF  3000               	movlw	0
 16490  0400  1803               	skipnc
 16491  0401  3001               	movlw	1
 16492  0402  07BB               	addwf	___ftadd@f1+2,f
 16493  0403                     l5783:	
 16494  0403  1F43               	btfss	___ftadd@sign,6
 16495  0404  2C15               	goto	l5787
 16496  0405  30FF               	movlw	255
 16497  0406  06BC               	xorwf	___ftadd@f2,f
 16498  0407  30FF               	movlw	255
 16499  0408  06BD               	xorwf	___ftadd@f2+1,f
 16500  0409  30FF               	movlw	255
 16501  040A  06BE               	xorwf	___ftadd@f2+2,f
 16502  040B  3001               	movlw	1
 16503  040C  07BC               	addwf	___ftadd@f2,f
 16504  040D  3000               	movlw	0
 16505  040E  1803               	skipnc
 16506  040F  3001               	movlw	1
 16507  0410  07BD               	addwf	___ftadd@f2+1,f
 16508  0411  3000               	movlw	0
 16509  0412  1803               	skipnc
 16510  0413  3001               	movlw	1
 16511  0414  07BE               	addwf	___ftadd@f2+2,f
 16512  0415                     l5787:	
 16513  0415  01C3               	clrf	___ftadd@sign
 16514  0416  0839               	movf	___ftadd@f1,w
 16515  0417  07BC               	addwf	___ftadd@f2,f
 16516  0418  083A               	movf	___ftadd@f1+1,w
 16517  0419  3DBD               	addwfc	___ftadd@f2+1,f
 16518  041A  083B               	movf	___ftadd@f1+2,w
 16519  041B  3DBE               	addwfc	___ftadd@f2+2,f
 16520  041C  1FBE               	btfss	___ftadd@f2+2,7
 16521  041D  2C30               	goto	l5797
 16522  041E  30FF               	movlw	255
 16523  041F  06BC               	xorwf	___ftadd@f2,f
 16524  0420  30FF               	movlw	255
 16525  0421  06BD               	xorwf	___ftadd@f2+1,f
 16526  0422  30FF               	movlw	255
 16527  0423  06BE               	xorwf	___ftadd@f2+2,f
 16528  0424  3001               	movlw	1
 16529  0425  07BC               	addwf	___ftadd@f2,f
 16530  0426  3000               	movlw	0
 16531  0427  1803               	skipnc
 16532  0428  3001               	movlw	1
 16533  0429  07BD               	addwf	___ftadd@f2+1,f
 16534  042A  3000               	movlw	0
 16535  042B  1803               	skipnc
 16536  042C  3001               	movlw	1
 16537  042D  07BE               	addwf	___ftadd@f2+2,f
 16538  042E  01C3               	clrf	___ftadd@sign
 16539  042F  0AC3               	incf	___ftadd@sign,f
 16540  0430                     l5797:	
 16541  0430  083C               	movf	___ftadd@f2,w
 16542  0431  00F2               	movwf	___ftpack@arg
 16543  0432  083D               	movf	___ftadd@f2+1,w
 16544  0433  00F3               	movwf	___ftpack@arg+1
 16545  0434  083E               	movf	___ftadd@f2+2,w
 16546  0435  00F4               	movwf	___ftpack@arg+2
 16547  0436  0845               	movf	___ftadd@exp1,w
 16548  0437  00BF               	movwf	??___ftadd
 16549  0438  083F               	movf	??___ftadd,w
 16550  0439  00F5               	movwf	___ftpack@exp
 16551  043A  0843               	movf	___ftadd@sign,w
 16552  043B  00C0               	movwf	??___ftadd+1
 16553  043C  0840               	movf	??___ftadd+1,w
 16554  043D  00F6               	movwf	___ftpack@sign
 16555  043E  3188  200F         	fcall	___ftpack
 16556  0440  0872               	movf	?___ftpack,w
 16557  0441  0020               	movlb	0	; select bank0
 16558  0442  00B9               	movwf	?___ftadd
 16559  0443  0873               	movf	?___ftpack+1,w
 16560  0444  00BA               	movwf	?___ftadd+1
 16561  0445  0874               	movf	?___ftpack+2,w
 16562  0446  00BB               	movwf	?___ftadd+2
 16563  0447  0008               	return
 16564  0448                     __end_of___ftadd:	
 16565                           
 16566                           	psect	text114
 16567  11C8                     __ptext114:	
 16568 ;; *************** function ___awtoft *****************
 16569 ;; Defined at:
 16570 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16571 ;; Parameters:    Size  Location     Type
 16572 ;;  c               2    0[BANK0 ] int 
 16573 ;; Auto vars:     Size  Location     Type
 16574 ;;  sign            1    5[BANK0 ] unsigned char 
 16575 ;; Return value:  Size  Location     Type
 16576 ;;                  3    0[BANK0 ] float 
 16577 ;; Registers used:
 16578 ;;		wreg, status,2, status,0, pclath, cstack
 16579 ;; Tracked objects:
 16580 ;;		On entry : 0/0
 16581 ;;		On exit  : 0/0
 16582 ;;		Unchanged: 0/0
 16583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16584 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;Total ram usage:        6 bytes
 16589 ;; Hardware stack levels used:    1
 16590 ;; Hardware stack levels required when called:    4
 16591 ;; This function calls:
 16592 ;;		___ftpack
 16593 ;; This function is called by:
 16594 ;;		_getDimmerLights_PercentToValue
 16595 ;;		_getDimmerLights_ValueToPercent
 16596 ;; This function uses a non-reentrant model
 16597 ;;
 16598                           
 16599                           
 16600                           ;psect for function ___awtoft
 16601  11C8                     ___awtoft:	
 16602                           
 16603                           ;incstack = 0
 16604                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16605  11C8  0020               	movlb	0	; select bank0
 16606  11C9  01A5               	clrf	___awtoft@sign
 16607  11CA  1FA1               	btfss	___awtoft@c+1,7
 16608  11CB  29D3               	goto	l8229
 16609  11CC  09A0               	comf	___awtoft@c,f
 16610  11CD  09A1               	comf	___awtoft@c+1,f
 16611  11CE  0AA0               	incf	___awtoft@c,f
 16612  11CF  1903               	skipnz
 16613  11D0  0AA1               	incf	___awtoft@c+1,f
 16614  11D1  01A5               	clrf	___awtoft@sign
 16615  11D2  0AA5               	incf	___awtoft@sign,f
 16616  11D3                     l8229:	
 16617  11D3  0820               	movf	___awtoft@c,w
 16618  11D4  00F2               	movwf	___ftpack@arg
 16619  11D5  0821               	movf	___awtoft@c+1,w
 16620  11D6  00F3               	movwf	___ftpack@arg+1
 16621  11D7  01F4               	clrf	___ftpack@arg+2
 16622  11D8  308E               	movlw	142
 16623  11D9  00A3               	movwf	??___awtoft
 16624  11DA  0823               	movf	??___awtoft,w
 16625  11DB  00F5               	movwf	___ftpack@exp
 16626  11DC  0825               	movf	___awtoft@sign,w
 16627  11DD  00A4               	movwf	??___awtoft+1
 16628  11DE  0824               	movf	??___awtoft+1,w
 16629  11DF  00F6               	movwf	___ftpack@sign
 16630  11E0  3188  200F         	fcall	___ftpack
 16631  11E2  0872               	movf	?___ftpack,w
 16632  11E3  0020               	movlb	0	; select bank0
 16633  11E4  00A0               	movwf	?___awtoft
 16634  11E5  0873               	movf	?___ftpack+1,w
 16635  11E6  00A1               	movwf	?___awtoft+1
 16636  11E7  0874               	movf	?___ftpack+2,w
 16637  11E8  00A2               	movwf	?___awtoft+2
 16638  11E9  0008               	return
 16639  11EA                     __end_of___awtoft:	
 16640                           
 16641                           	psect	text115
 16642  080F                     __ptext115:	
 16643 ;; *************** function ___ftpack *****************
 16644 ;; Defined at:
 16645 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 16646 ;; Parameters:    Size  Location     Type
 16647 ;;  arg             3    2[COMMON] unsigned um
 16648 ;;  exp             1    5[COMMON] unsigned char 
 16649 ;;  sign            1    6[COMMON] unsigned char 
 16650 ;; Auto vars:     Size  Location     Type
 16651 ;;		None
 16652 ;; Return value:  Size  Location     Type
 16653 ;;                  3    2[COMMON] float 
 16654 ;; Registers used:
 16655 ;;		wreg, status,2, status,0
 16656 ;; Tracked objects:
 16657 ;;		On entry : 0/0
 16658 ;;		On exit  : 0/0
 16659 ;;		Unchanged: 0/0
 16660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16661 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16665 ;;Total ram usage:        8 bytes
 16666 ;; Hardware stack levels used:    1
 16667 ;; Hardware stack levels required when called:    3
 16668 ;; This function calls:
 16669 ;;		Nothing
 16670 ;; This function is called by:
 16671 ;;		___awtoft
 16672 ;;		___ftadd
 16673 ;;		___ftdiv
 16674 ;;		___ftmul
 16675 ;; This function uses a non-reentrant model
 16676 ;;
 16677                           
 16678                           
 16679                           ;psect for function ___ftpack
 16680  080F                     ___ftpack:	
 16681                           
 16682                           ;incstack = 0
 16683                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 16684  080F  0875               	movf	___ftpack@exp,w
 16685  0810  1903               	btfsc	3,2
 16686  0811  2817               	goto	l5593
 16687  0812  0874               	movf	___ftpack@arg+2,w
 16688  0813  0473               	iorwf	___ftpack@arg+1,w
 16689  0814  0472               	iorwf	___ftpack@arg,w
 16690  0815  1D03               	skipz
 16691  0816  2828               	goto	l5599
 16692  0817                     l5593:	
 16693  0817  3000               	movlw	0
 16694  0818  00F2               	movwf	?___ftpack
 16695  0819  3000               	movlw	0
 16696  081A  00F3               	movwf	?___ftpack+1
 16697  081B  3000               	movlw	0
 16698  081C  00F4               	movwf	?___ftpack+2
 16699  081D  0008               	return
 16700  081E                     l5597:	
 16701  081E  3001               	movlw	1
 16702  081F  00F7               	movwf	??___ftpack
 16703  0820  0877               	movf	??___ftpack,w
 16704  0821  07F5               	addwf	___ftpack@exp,f
 16705  0822  3001               	movlw	1
 16706  0823                     u4285:	
 16707  0823  36F4               	lsrf	___ftpack@arg+2,f
 16708  0824  0CF3               	rrf	___ftpack@arg+1,f
 16709  0825  0CF2               	rrf	___ftpack@arg,f
 16710  0826  0B89               	decfsz	9,f
 16711  0827  2823               	goto	u4285
 16712  0828                     l5599:	
 16713  0828  30FE               	movlw	254
 16714  0829  0574               	andwf	___ftpack@arg+2,w
 16715  082A  1903               	btfsc	3,2
 16716  082B  2841               	goto	l2803
 16717  082C  281E               	goto	l5597
 16718  082D                     l5601:	
 16719  082D  3001               	movlw	1
 16720  082E  00F7               	movwf	??___ftpack
 16721  082F  0877               	movf	??___ftpack,w
 16722  0830  07F5               	addwf	___ftpack@exp,f
 16723  0831  3001               	movlw	1
 16724  0832  07F2               	addwf	___ftpack@arg,f
 16725  0833  3000               	movlw	0
 16726  0834  1803               	skipnc
 16727  0835  3001               	movlw	1
 16728  0836  07F3               	addwf	___ftpack@arg+1,f
 16729  0837  3000               	movlw	0
 16730  0838  1803               	skipnc
 16731  0839  3001               	movlw	1
 16732  083A  07F4               	addwf	___ftpack@arg+2,f
 16733  083B  3001               	movlw	1
 16734  083C                     u4305:	
 16735  083C  36F4               	lsrf	___ftpack@arg+2,f
 16736  083D  0CF3               	rrf	___ftpack@arg+1,f
 16737  083E  0CF2               	rrf	___ftpack@arg,f
 16738  083F  0B89               	decfsz	9,f
 16739  0840  283C               	goto	u4305
 16740  0841                     l2803:	
 16741  0841  30FF               	movlw	255
 16742  0842  0574               	andwf	___ftpack@arg+2,w
 16743  0843  1903               	btfsc	3,2
 16744  0844  284E               	goto	l5609
 16745  0845  282D               	goto	l5601
 16746  0846                     l5607:	
 16747  0846  3001               	movlw	1
 16748  0847  02F5               	subwf	___ftpack@exp,f
 16749  0848  3001               	movlw	1
 16750  0849                     u4325:	
 16751  0849  35F2               	lslf	___ftpack@arg,f
 16752  084A  0DF3               	rlf	___ftpack@arg+1,f
 16753  084B  0DF4               	rlf	___ftpack@arg+2,f
 16754  084C  0B89               	decfsz	9,f
 16755  084D  2849               	goto	u4325
 16756  084E                     l5609:	
 16757  084E  1FF3               	btfss	___ftpack@arg+1,7
 16758  084F  2846               	goto	l5607
 16759  0850  1875               	btfsc	___ftpack@exp,0
 16760  0851  2858               	goto	l2809
 16761  0852  30FF               	movlw	255
 16762  0853  05F2               	andwf	___ftpack@arg,f
 16763  0854  307F               	movlw	127
 16764  0855  05F3               	andwf	___ftpack@arg+1,f
 16765  0856  30FF               	movlw	255
 16766  0857  05F4               	andwf	___ftpack@arg+2,f
 16767  0858                     l2809:	
 16768  0858  1003               	clrc
 16769  0859  0CF5               	rrf	___ftpack@exp,f
 16770  085A  0875               	movf	___ftpack@exp,w
 16771  085B  00F7               	movwf	??___ftpack
 16772  085C  01F8               	clrf	??___ftpack+1
 16773  085D  01F9               	clrf	??___ftpack+2
 16774  085E  3010               	movlw	16
 16775  085F                     u4355:	
 16776  085F  35F7               	lslf	??___ftpack,f
 16777  0860  0DF8               	rlf	??___ftpack+1,f
 16778  0861  0DF9               	rlf	??___ftpack+2,f
 16779  0862  0B89               	decfsz	9,f
 16780  0863  285F               	goto	u4355
 16781  0864  0877               	movf	??___ftpack,w
 16782  0865  04F2               	iorwf	___ftpack@arg,f
 16783  0866  0878               	movf	??___ftpack+1,w
 16784  0867  04F3               	iorwf	___ftpack@arg+1,f
 16785  0868  0879               	movf	??___ftpack+2,w
 16786  0869  04F4               	iorwf	___ftpack@arg+2,f
 16787  086A  0876               	movf	___ftpack@sign,w
 16788  086B  1903               	btfsc	3,2
 16789  086C  0008               	return
 16790  086D  17F4               	bsf	___ftpack@arg+2,7
 16791  086E  0008               	return
 16792  086F                     __end_of___ftpack:	
 16793                           
 16794                           	psect	text116
 16795  1DFD                     __ptext116:	
 16796 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16797 ;; Defined at:
 16798 ;;		line 66 in file "../src/Dimmer_B1.c"
 16799 ;; Parameters:    Size  Location     Type
 16800 ;;  lights          1    wreg     unsigned char 
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;  lights          1    3[COMMON] unsigned char 
 16803 ;;  value           1    4[COMMON] unsigned char 
 16804 ;; Return value:  Size  Location     Type
 16805 ;;                  1    wreg      unsigned char 
 16806 ;; Registers used:
 16807 ;;		wreg, status,2
 16808 ;; Tracked objects:
 16809 ;;		On entry : 0/0
 16810 ;;		On exit  : 0/0
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16814 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16817 ;;Total ram usage:        3 bytes
 16818 ;; Hardware stack levels used:    1
 16819 ;; Hardware stack levels required when called:    3
 16820 ;; This function calls:
 16821 ;;		Nothing
 16822 ;; This function is called by:
 16823 ;;		_setDimmerLights_Dimming
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           
 16828                           ;psect for function _getDimmerIntr_DimmingValue
 16829  1DFD                     _getDimmerIntr_DimmingValue:	
 16830                           
 16831                           ;incstack = 0
 16832                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16833                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16834  1DFD  00F3               	movwf	getDimmerIntr_DimmingValue@lights
 16835                           
 16836                           ;Dimmer_B1.c: 67: char value = 0;
 16837  1DFE  01F4               	clrf	getDimmerIntr_DimmingValue@value
 16838                           
 16839                           ;Dimmer_B1.c: 69: if (lights == 1) {
 16840  1DFF  0873               	movf	getDimmerIntr_DimmingValue@lights,w
 16841  1E00  3A01               	xorlw	1
 16842  1E01  1D03               	skipz
 16843  1E02  2E08               	goto	l673
 16844                           
 16845                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 16846  1E03  0021               	movlb	1	; select bank1
 16847  1E04  086C               	movf	(_DimmerIntr1^(0+128)+4),w
 16848  1E05  00F2               	movwf	??_getDimmerIntr_DimmingValue
 16849  1E06  0872               	movf	??_getDimmerIntr_DimmingValue,w
 16850  1E07  00F4               	movwf	getDimmerIntr_DimmingValue@value
 16851  1E08                     l673:	
 16852                           
 16853                           ;Dimmer_B1.c: 71: }
 16854                           ;Dimmer_B1.c: 83: return value;
 16855  1E08  0874               	movf	getDimmerIntr_DimmingValue@value,w
 16856  1E09  0008               	return
 16857  1E0A                     __end_of_getDimmerIntr_DimmingValue:	
 16858                           
 16859                           	psect	text117
 16860  1F48                     __ptext117:	
 16861 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16862 ;; Defined at:
 16863 ;;		line 897 in file "../src/Dimmer_B1.c"
 16864 ;; Parameters:    Size  Location     Type
 16865 ;;  lights          1    wreg     unsigned char 
 16866 ;; Auto vars:     Size  Location     Type
 16867 ;;  lights          1    0[COMMON] unsigned char 
 16868 ;;  allow           1    4[COMMON] unsigned char 
 16869 ;; Return value:  Size  Location     Type
 16870 ;;                  1    wreg      unsigned char 
 16871 ;; Registers used:
 16872 ;;		wreg, status,2, pclath, cstack
 16873 ;; Tracked objects:
 16874 ;;		On entry : 0/0
 16875 ;;		On exit  : 0/0
 16876 ;;		Unchanged: 0/0
 16877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16879 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16880 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;Total ram usage:        3 bytes
 16883 ;; Hardware stack levels used:    1
 16884 ;; Hardware stack levels required when called:    4
 16885 ;; This function calls:
 16886 ;;		_getLoad_OK
 16887 ;; This function is called by:
 16888 ;;		_setDimmerLights_Main
 16889 ;; This function uses a non-reentrant model
 16890 ;;
 16891                           
 16892                           
 16893                           ;psect for function _getDimmerLights_Allow_Condition
 16894  1F48                     _getDimmerLights_Allow_Condition:	
 16895                           
 16896                           ;Dimmer_B1.c: 898: char allow = 0;
 16897                           
 16898                           ;incstack = 0
 16899                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16900  1F48  01F4               	clrf	getDimmerLights_Allow_Condition@allow
 16901                           
 16902                           ;Dimmer_B1.c: 904: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16903  1F49  01F5               	clrf	_getDimmerLights_Allow_Condition$2159
 16904  1F4A  0AF5               	incf	_getDimmerLights_Allow_Condition$2159,f
 16905  1F4B  319D  2504  319F   	fcall	_getLoad_OK
 16906  1F4E  3800               	iorlw	0
 16907  1F4F  1D03               	skipz
 16908  1F50  2F55               	goto	l6629
 16909  1F51  0022               	movlb	2	; select bank2
 16910  1F52  18A0               	btfsc	_Dimmer^(0+256),1
 16911  1F53  2F55               	goto	l6629
 16912  1F54  01F5               	clrf	_getDimmerLights_Allow_Condition$2159
 16913  1F55                     l6629:	
 16914  1F55  0875               	movf	_getDimmerLights_Allow_Condition$2159,w
 16915  1F56  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16916  1F57  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16917  1F58  00F4               	movwf	getDimmerLights_Allow_Condition@allow
 16918                           
 16919                           ;Dimmer_B1.c: 931: return allow;
 16920  1F59  0874               	movf	getDimmerLights_Allow_Condition@allow,w
 16921  1F5A  0008               	return
 16922  1F5B                     __end_of_getDimmerLights_Allow_Condition:	
 16923                           
 16924                           	psect	text118
 16925  1D04                     __ptext118:	
 16926 ;; *************** function _getLoad_OK *****************
 16927 ;; Defined at:
 16928 ;;		line 246 in file "../src/OverLoad_B1.c"
 16929 ;; Parameters:    Size  Location     Type
 16930 ;;		None
 16931 ;; Auto vars:     Size  Location     Type
 16932 ;;  ok              1    2[COMMON] unsigned char 
 16933 ;; Return value:  Size  Location     Type
 16934 ;;                  1    wreg      unsigned char 
 16935 ;; Registers used:
 16936 ;;		wreg, status,2
 16937 ;; Tracked objects:
 16938 ;;		On entry : 0/0
 16939 ;;		On exit  : 0/0
 16940 ;;		Unchanged: 0/0
 16941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;Total ram usage:        1 bytes
 16947 ;; Hardware stack levels used:    1
 16948 ;; Hardware stack levels required when called:    3
 16949 ;; This function calls:
 16950 ;;		Nothing
 16951 ;; This function is called by:
 16952 ;;		_DimmerLights_Main
 16953 ;;		_getDimmerLights_Allow_Condition
 16954 ;; This function uses a non-reentrant model
 16955 ;;
 16956                           
 16957                           
 16958                           ;psect for function _getLoad_OK
 16959  1D04                     _getLoad_OK:	
 16960                           
 16961                           ;OverLoad_B1.c: 247: char ok = Load.OK == 1 ? 1 : 0;
 16962                           
 16963                           ;incstack = 0
 16964                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16965  1D04  3000               	movlw	0
 16966  1D05  0022               	movlb	2	; select bank2
 16967  1D06  1BAA               	btfsc	_Load^(0+256),7
 16968  1D07  3001               	movlw	1
 16969  1D08  00F2               	movwf	getLoad_OK@ok
 16970                           
 16971                           ;OverLoad_B1.c: 248: return ok;
 16972  1D09  0872               	movf	getLoad_OK@ok,w
 16973  1D0A  0008               	return
 16974  1D0B                     __end_of_getLoad_OK:	
 16975                           
 16976                           	psect	text119
 16977  12CF                     __ptext119:	
 16978 ;; *************** function _getMain_All_Error_Status *****************
 16979 ;; Defined at:
 16980 ;;		line 425 in file "../src/Main_B1.c"
 16981 ;; Parameters:    Size  Location     Type
 16982 ;;  command         1    wreg     unsigned char 
 16983 ;; Auto vars:     Size  Location     Type
 16984 ;;  command         1    7[COMMON] unsigned char 
 16985 ;;  status          1    8[COMMON] unsigned char 
 16986 ;; Return value:  Size  Location     Type
 16987 ;;                  1    wreg      unsigned char 
 16988 ;; Registers used:
 16989 ;;		wreg, status,2, status,0
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16996 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16998 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16999 ;;Total ram usage:        7 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    3
 17002 ;; This function calls:
 17003 ;;		Nothing
 17004 ;; This function is called by:
 17005 ;;		_DimmerLights_Main
 17006 ;;		_Exception_Main
 17007 ;;		_Load_Main
 17008 ;;		_setTemp_Main
 17009 ;;		_getRxData
 17010 ;;		_setSw_Main
 17011 ;; This function uses a non-reentrant model
 17012 ;;
 17013                           
 17014                           
 17015                           ;psect for function _getMain_All_Error_Status
 17016  12CF                     _getMain_All_Error_Status:	
 17017                           
 17018                           ;incstack = 0
 17019                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17020                           ;getMain_All_Error_Status@command stored from wreg
 17021  12CF  00F7               	movwf	getMain_All_Error_Status@command
 17022                           
 17023                           ;Main_B1.c: 426: char status = 0;
 17024  12D0  01F8               	clrf	getMain_All_Error_Status@status
 17025                           
 17026                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 17027  12D1  08F8               	movf	getMain_All_Error_Status@status,f
 17028  12D2  1D03               	skipz
 17029  12D3  2AE6               	goto	l8487
 17030  12D4  0877               	movf	getMain_All_Error_Status@command,w
 17031  12D5  3A02               	xorlw	2
 17032  12D6  1903               	skipnz
 17033  12D7  2AE6               	goto	l8487
 17034                           
 17035                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 17036  12D8  0021               	movlb	1	; select bank1
 17037  12D9  18D6               	btfsc	_Temp^(0+128),1
 17038  12DA  2ADE               	goto	l8485
 17039  12DB  01F3               	clrf	_getMain_All_Error_Status$3416
 17040  12DC  01F4               	clrf	_getMain_All_Error_Status$3416+1
 17041  12DD  2AE2               	goto	l1465
 17042  12DE                     l8485:	
 17043  12DE  3002               	movlw	2
 17044  12DF  00F3               	movwf	_getMain_All_Error_Status$3416
 17045  12E0  3000               	movlw	0
 17046  12E1  00F4               	movwf	_getMain_All_Error_Status$3416+1
 17047  12E2                     l1465:	
 17048  12E2  0873               	movf	_getMain_All_Error_Status$3416,w
 17049  12E3  00F2               	movwf	??_getMain_All_Error_Status
 17050  12E4  0872               	movf	??_getMain_All_Error_Status,w
 17051  12E5  00F8               	movwf	getMain_All_Error_Status@status
 17052  12E6                     l8487:	
 17053                           
 17054                           ;Main_B1.c: 439: }
 17055                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 17056  12E6  08F8               	movf	getMain_All_Error_Status@status,f
 17057  12E7  1D03               	skipz
 17058  12E8  2AFB               	goto	l1466
 17059  12E9  0877               	movf	getMain_All_Error_Status@command,w
 17060  12EA  3A03               	xorlw	3
 17061  12EB  1903               	skipnz
 17062  12EC  2AFB               	goto	l1466
 17063                           
 17064                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 17065  12ED  0022               	movlb	2	; select bank2
 17066  12EE  1AAA               	btfsc	_Load^(0+256),5
 17067  12EF  2AF3               	goto	l8495
 17068  12F0  01F5               	clrf	_getMain_All_Error_Status$3417
 17069  12F1  01F6               	clrf	_getMain_All_Error_Status$3417+1
 17070  12F2  2AF7               	goto	l1470
 17071  12F3                     l8495:	
 17072  12F3  3003               	movlw	3
 17073  12F4  00F5               	movwf	_getMain_All_Error_Status$3417
 17074  12F5  3000               	movlw	0
 17075  12F6  00F6               	movwf	_getMain_All_Error_Status$3417+1
 17076  12F7                     l1470:	
 17077  12F7  0875               	movf	_getMain_All_Error_Status$3417,w
 17078  12F8  00F2               	movwf	??_getMain_All_Error_Status
 17079  12F9  0872               	movf	??_getMain_All_Error_Status,w
 17080  12FA  00F8               	movwf	getMain_All_Error_Status@status
 17081  12FB                     l1466:	
 17082                           
 17083                           ;Main_B1.c: 446: }
 17084                           ;Main_B1.c: 462: return status;
 17085  12FB  0878               	movf	getMain_All_Error_Status@status,w
 17086  12FC  0008               	return
 17087  12FD                     __end_of_getMain_All_Error_Status:	
 17088                           
 17089                           	psect	text120
 17090  1CFD                     __ptext120:	
 17091 ;; *************** function _DimmerLights_Initialization *****************
 17092 ;; Defined at:
 17093 ;;		line 593 in file "../src/Dimmer_B1.c"
 17094 ;; Parameters:    Size  Location     Type
 17095 ;;		None
 17096 ;; Auto vars:     Size  Location     Type
 17097 ;;		None
 17098 ;; Return value:  Size  Location     Type
 17099 ;;		None               void
 17100 ;; Registers used:
 17101 ;;		wreg, status,2, status,0, pclath, cstack
 17102 ;; Tracked objects:
 17103 ;;		On entry : 0/0
 17104 ;;		On exit  : 0/0
 17105 ;;		Unchanged: 0/0
 17106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17111 ;;Total ram usage:        0 bytes
 17112 ;; Hardware stack levels used:    1
 17113 ;; Hardware stack levels required when called:    4
 17114 ;; This function calls:
 17115 ;;		_DimmerIntr_Initialization
 17116 ;;		_setDimmerLights_Initialization
 17117 ;; This function is called by:
 17118 ;;		_main
 17119 ;; This function uses a non-reentrant model
 17120 ;;
 17121                           
 17122                           
 17123                           ;psect for function _DimmerLights_Initialization
 17124  1CFD                     _DimmerLights_Initialization:	
 17125                           
 17126                           ;Dimmer_B1.c: 595: setDimmerLights_Initialization(1);
 17127                           
 17128                           ;incstack = 0
 17129                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17130  1CFD  3001               	movlw	1
 17131  1CFE  319C  24B7  319C   	fcall	_setDimmerLights_Initialization
 17132                           
 17133                           ;Dimmer_B1.c: 605: DimmerIntr_Initialization();
 17134  1D01  319F  2724         	fcall	_DimmerIntr_Initialization
 17135  1D03  0008               	return
 17136  1D04                     __end_of_DimmerLights_Initialization:	
 17137                           
 17138                           	psect	text121
 17139  1CB7                     __ptext121:	
 17140 ;; *************** function _setDimmerLights_Initialization *****************
 17141 ;; Defined at:
 17142 ;;		line 609 in file "../src/Dimmer_B1.c"
 17143 ;; Parameters:    Size  Location     Type
 17144 ;;  lights          1    wreg     unsigned char 
 17145 ;; Auto vars:     Size  Location     Type
 17146 ;;  lights          1    0[COMMON] unsigned char 
 17147 ;; Return value:  Size  Location     Type
 17148 ;;		None               void
 17149 ;; Registers used:
 17150 ;;		wreg
 17151 ;; Tracked objects:
 17152 ;;		On entry : 0/0
 17153 ;;		On exit  : 0/0
 17154 ;;		Unchanged: 0/0
 17155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17160 ;;Total ram usage:        0 bytes
 17161 ;; Hardware stack levels used:    1
 17162 ;; Hardware stack levels required when called:    3
 17163 ;; This function calls:
 17164 ;;		Nothing
 17165 ;; This function is called by:
 17166 ;;		_DimmerLights_Initialization
 17167 ;; This function uses a non-reentrant model
 17168 ;;
 17169                           
 17170                           
 17171                           ;psect for function _setDimmerLights_Initialization
 17172  1CB7                     _setDimmerLights_Initialization:	
 17173                           
 17174                           ;incstack = 0
 17175                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17176  1CB7  0008               	return
 17177  1CB8                     __end_of_setDimmerLights_Initialization:	
 17178                           
 17179                           	psect	text122
 17180  1F24                     __ptext122:	
 17181 ;; *************** function _DimmerIntr_Initialization *****************
 17182 ;; Defined at:
 17183 ;;		line 7 in file "../src/Dimmer_B1.c"
 17184 ;; Parameters:    Size  Location     Type
 17185 ;;		None
 17186 ;; Auto vars:     Size  Location     Type
 17187 ;;		None
 17188 ;; Return value:  Size  Location     Type
 17189 ;;		None               void
 17190 ;; Registers used:
 17191 ;;		wreg
 17192 ;; Tracked objects:
 17193 ;;		On entry : 0/0
 17194 ;;		On exit  : 0/0
 17195 ;;		Unchanged: 0/0
 17196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;Total ram usage:        1 bytes
 17202 ;; Hardware stack levels used:    1
 17203 ;; Hardware stack levels required when called:    3
 17204 ;; This function calls:
 17205 ;;		Nothing
 17206 ;; This function is called by:
 17207 ;;		_DimmerLights_Initialization
 17208 ;; This function uses a non-reentrant model
 17209 ;;
 17210                           
 17211                           
 17212                           ;psect for function _DimmerIntr_Initialization
 17213  1F24                     _DimmerIntr_Initialization:	
 17214                           
 17215                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 17216                           
 17217                           ;incstack = 0
 17218                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17219  1F24  3007               	movlw	7
 17220  1F25  00F2               	movwf	??_DimmerIntr_Initialization
 17221  1F26  0872               	movf	??_DimmerIntr_Initialization,w
 17222  1F27  0021               	movlb	1	; select bank1
 17223  1F28  00EB               	movwf	(_DimmerIntr1^(0+128)+3)
 17224                           
 17225                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(70*0.8));
 17226  1F29  3038               	movlw	56
 17227  1F2A  00F2               	movwf	??_DimmerIntr_Initialization
 17228  1F2B  0872               	movf	??_DimmerIntr_Initialization,w
 17229  1F2C  00ED               	movwf	(_DimmerIntr1^(0+128)+5)
 17230                           
 17231                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(15*0.8));
 17232  1F2D  300C               	movlw	12
 17233  1F2E  00F2               	movwf	??_DimmerIntr_Initialization
 17234  1F2F  0872               	movf	??_DimmerIntr_Initialization,w
 17235  1F30  00EE               	movwf	(_DimmerIntr1^(0+128)+6)
 17236                           
 17237                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(70*0.8));
 17238  1F31  3038               	movlw	56
 17239  1F32  00F2               	movwf	??_DimmerIntr_Initialization
 17240  1F33  0872               	movf	??_DimmerIntr_Initialization,w
 17241  1F34  00EC               	movwf	(_DimmerIntr1^(0+128)+4)
 17242  1F35  0008               	return
 17243  1F36                     __end_of_DimmerIntr_Initialization:	
 17244                           
 17245                           	psect	text123
 17246  1CCC                     __ptext123:	
 17247 ;; *************** function _DelayOff_Main *****************
 17248 ;; Defined at:
 17249 ;;		line 41 in file "../src/DelayOff_B1.c"
 17250 ;; Parameters:    Size  Location     Type
 17251 ;;		None
 17252 ;; Auto vars:     Size  Location     Type
 17253 ;;		None
 17254 ;; Return value:  Size  Location     Type
 17255 ;;		None               void
 17256 ;; Registers used:
 17257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17258 ;; Tracked objects:
 17259 ;;		On entry : 0/0
 17260 ;;		On exit  : 0/0
 17261 ;;		Unchanged: 0/0
 17262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17267 ;;Total ram usage:        0 bytes
 17268 ;; Hardware stack levels used:    1
 17269 ;; Hardware stack levels required when called:    7
 17270 ;; This function calls:
 17271 ;;		_DlyOff_Main
 17272 ;; This function is called by:
 17273 ;;		_main
 17274 ;; This function uses a non-reentrant model
 17275 ;;
 17276                           
 17277                           
 17278                           ;psect for function _DelayOff_Main
 17279  1CCC                     _DelayOff_Main:	
 17280                           
 17281                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17282                           
 17283                           ;incstack = 0
 17284                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17285  1CCC  3001               	movlw	1
 17286  1CCD  318A  226B         	fcall	_DlyOff_Main
 17287  1CCF  0008               	return
 17288  1CD0                     __end_of_DelayOff_Main:	
 17289                           
 17290                           	psect	text124
 17291  0A6B                     __ptext124:	
 17292 ;; *************** function _DlyOff_Main *****************
 17293 ;; Defined at:
 17294 ;;		line 61 in file "../src/DelayOff_B1.c"
 17295 ;; Parameters:    Size  Location     Type
 17296 ;;  sw              1    wreg     unsigned char 
 17297 ;; Auto vars:     Size  Location     Type
 17298 ;;  sw              1   64[BANK0 ] unsigned char 
 17299 ;; Return value:  Size  Location     Type
 17300 ;;		None               void
 17301 ;; Registers used:
 17302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17303 ;; Tracked objects:
 17304 ;;		On entry : 0/0
 17305 ;;		On exit  : 0/0
 17306 ;;		Unchanged: 0/0
 17307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17311 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17312 ;;Total ram usage:        3 bytes
 17313 ;; Hardware stack levels used:    1
 17314 ;; Hardware stack levels required when called:    6
 17315 ;; This function calls:
 17316 ;;		_DelayOffPointSelect
 17317 ;;		_getDimmerLights_Status
 17318 ;;		_setDimmerLights_SwOff
 17319 ;;		_setDimmerLights_SwOn
 17320 ;;		_setProductData
 17321 ;; This function is called by:
 17322 ;;		_DelayOff_Main
 17323 ;; This function uses a non-reentrant model
 17324 ;;
 17325                           
 17326                           
 17327                           ;psect for function _DlyOff_Main
 17328  0A6B                     _DlyOff_Main:	
 17329                           
 17330                           ;incstack = 0
 17331                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17332                           ;DlyOff_Main@sw stored from wreg
 17333  0A6B  0020               	movlb	0	; select bank0
 17334  0A6C  00E0               	movwf	DlyOff_Main@sw
 17335                           
 17336                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17337  0A6D  0860               	movf	DlyOff_Main@sw,w
 17338  0A6E  319D  2597  318A   	fcall	_DelayOffPointSelect
 17339                           
 17340                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17341  0A71  0021               	movlb	1	; select bank1
 17342  0A72  084A               	movf	_DelayOff^(0+128),w
 17343  0A73  0086               	movwf	6
 17344  0A74  3001               	movlw	1	; select bank2/3
 17345  0A75  0087               	movwf	7
 17346  0A76  1C81               	btfss	1,1
 17347  0A77  0008               	return
 17348                           
 17349                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17350  0A78  084A               	movf	_DelayOff^(0+128),w
 17351  0A79  3E02               	addlw	2
 17352  0A7A  0086               	movwf	6
 17353  0A7B  3001               	movlw	1	; select bank2/3
 17354  0A7C  0087               	movwf	7
 17355  0A7D  3001               	movlw	1
 17356  0A7E  0781               	addwf	1,f
 17357  0A7F  3141               	addfsr 1,1
 17358  0A80  1803               	skipnc
 17359  0A81  0A81               	incf	1,f
 17360                           
 17361                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17362  0A82  084A               	movf	_DelayOff^(0+128),w
 17363  0A83  3E02               	addlw	2
 17364  0A84  0086               	movwf	6
 17365  0A85  3001               	movlw	1	; select bank2/3
 17366  0A86  0087               	movwf	7
 17367  0A87  3F40               	moviw [0]fsr1
 17368  0A88  0020               	movlb	0	; select bank0
 17369  0A89  00DE               	movwf	??_DlyOff_Main
 17370  0A8A  3F41               	moviw [1]fsr1
 17371  0A8B  00DF               	movwf	??_DlyOff_Main+1
 17372  0A8C  300B               	movlw	11
 17373  0A8D  025F               	subwf	??_DlyOff_Main+1,w
 17374  0A8E  30B8               	movlw	184
 17375  0A8F  1903               	skipnz
 17376  0A90  025E               	subwf	??_DlyOff_Main,w
 17377  0A91  1C03               	skipc
 17378  0A92  0008               	return
 17379                           
 17380                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17381  0A93  0021               	movlb	1	; select bank1
 17382  0A94  084A               	movf	_DelayOff^(0+128),w
 17383  0A95  3E02               	addlw	2
 17384  0A96  0086               	movwf	6
 17385  0A97  3001               	movlw	1	; select bank2/3
 17386  0A98  0087               	movwf	7
 17387  0A99  3000               	movlw	0
 17388  0A9A  3FC0               	movwi [0]fsr1
 17389  0A9B  3FC1               	movwi [1]fsr1
 17390                           
 17391                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17392  0A9C  3001               	movlw	1
 17393  0A9D  0020               	movlb	0	; select bank0
 17394  0A9E  00DE               	movwf	??_DlyOff_Main
 17395  0A9F  0021               	movlb	1	; select bank1
 17396  0AA0  084A               	movf	_DelayOff^(0+128),w
 17397  0AA1  3E04               	addlw	4
 17398  0AA2  0086               	movwf	6
 17399  0AA3  3001               	movlw	1	; select bank2/3
 17400  0AA4  0087               	movwf	7
 17401  0AA5  0020               	movlb	0	; select bank0
 17402  0AA6  085E               	movf	??_DlyOff_Main,w
 17403  0AA7  0781               	addwf	1,f
 17404                           
 17405                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17406  0AA8  0021               	movlb	1	; select bank1
 17407  0AA9  084A               	movf	_DelayOff^(0+128),w
 17408  0AAA  3E04               	addlw	4
 17409  0AAB  0086               	movwf	6
 17410  0AAC  3001               	movlw	1	; select bank2/3
 17411  0AAD  0087               	movwf	7
 17412  0AAE  0A4A               	incf	_DelayOff^(0+128),w
 17413  0AAF  0084               	movwf	4
 17414  0AB0  3001               	movlw	1	; select bank2/3
 17415  0AB1  0085               	movwf	5
 17416  0AB2  0800               	movf	0,w
 17417  0AB3  0201               	subwf	1,w
 17418  0AB4  1C03               	skipc
 17419  0AB5  0008               	return
 17420                           
 17421                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17422  0AB6  084A               	movf	_DelayOff^(0+128),w
 17423  0AB7  3E04               	addlw	4
 17424  0AB8  0086               	movwf	6
 17425  0AB9  3001               	movlw	1	; select bank2/3
 17426  0ABA  0087               	movwf	7
 17427  0ABB  0181               	clrf	1
 17428                           
 17429                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17430  0ABC  084A               	movf	_DelayOff^(0+128),w
 17431  0ABD  0086               	movwf	6
 17432  0ABE  3001               	movlw	1	; select bank2/3
 17433  0ABF  0087               	movwf	7
 17434  0AC0  1081               	bcf	1,1
 17435                           
 17436                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17437  0AC1  0020               	movlb	0	; select bank0
 17438  0AC2  0860               	movf	DlyOff_Main@sw,w
 17439  0AC3  319E  2634  318A   	fcall	_getDimmerLights_Status
 17440  0AC6  3A01               	xorlw	1
 17441  0AC7  1D03               	skipz
 17442  0AC8  2AD3               	goto	l523
 17443                           
 17444                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17445  0AC9  0020               	movlb	0	; select bank0
 17446  0ACA  0860               	movf	DlyOff_Main@sw,w
 17447  0ACB  3193  2397  318A   	fcall	_setDimmerLights_SwOn
 17448                           
 17449                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17450  0ACE  0020               	movlb	0	; select bank0
 17451  0ACF  0860               	movf	DlyOff_Main@sw,w
 17452  0AD0  3194  2402  318A   	fcall	_setDimmerLights_SwOff
 17453  0AD3                     l523:	
 17454                           
 17455                           ;DelayOff_B1.c: 78: }
 17456                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17457  0AD3  0020               	movlb	0	; select bank0
 17458  0AD4  01DA               	clrf	setProductData@value
 17459  0AD5  0860               	movf	DlyOff_Main@sw,w
 17460  0AD6  3E1A               	addlw	26
 17461  0AD7  319E  2618         	fcall	_setProductData
 17462  0AD9  0008               	return
 17463  0ADA                     __end_of_DlyOff_Main:	
 17464                           
 17465                           	psect	text125
 17466  1E18                     __ptext125:	
 17467 ;; *************** function _setProductData *****************
 17468 ;; Defined at:
 17469 ;;		line 592 in file "../src/Main_B1.c"
 17470 ;; Parameters:    Size  Location     Type
 17471 ;;  address         1    wreg     unsigned char 
 17472 ;;  value           1   58[BANK0 ] unsigned char 
 17473 ;; Auto vars:     Size  Location     Type
 17474 ;;  address         1   61[BANK0 ] unsigned char 
 17475 ;; Return value:  Size  Location     Type
 17476 ;;		None               void
 17477 ;; Registers used:
 17478 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17479 ;; Tracked objects:
 17480 ;;		On entry : 0/0
 17481 ;;		On exit  : 0/0
 17482 ;;		Unchanged: 0/0
 17483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17484 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17488 ;;Total ram usage:        4 bytes
 17489 ;; Hardware stack levels used:    1
 17490 ;; Hardware stack levels required when called:    3
 17491 ;; This function calls:
 17492 ;;		Nothing
 17493 ;; This function is called by:
 17494 ;;		_DlyOff_Main
 17495 ;;		_setDelayOff_GO
 17496 ;;		_setDimmerLights_OnOff
 17497 ;;		_setDimmerLights_Dimming
 17498 ;;		_setTemp_Main
 17499 ;;		_setLog_Code
 17500 ;;		_setControl_Lights_Table
 17501 ;;		_setRFSW_AdjControl
 17502 ;;		_setRF_DimmerLights
 17503 ;; This function uses a non-reentrant model
 17504 ;;
 17505                           
 17506                           
 17507                           ;psect for function _setProductData
 17508  1E18                     _setProductData:	
 17509                           
 17510                           ;incstack = 0
 17511                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17512                           ;setProductData@address stored from wreg
 17513  1E18  0020               	movlb	0	; select bank0
 17514  1E19  00DD               	movwf	setProductData@address
 17515                           
 17516                           ;Main_B1.c: 593: product->Data[address] = value;
 17517  1E1A  085A               	movf	setProductData@value,w
 17518  1E1B  00DB               	movwf	??_setProductData
 17519  1E1C  085D               	movf	setProductData@address,w
 17520  1E1D  076D               	addwf	_product,w
 17521  1E1E  00DC               	movwf	??_setProductData+1
 17522  1E1F  085C               	movf	??_setProductData+1,w
 17523  1E20  0086               	movwf	6
 17524  1E21  3002               	movlw	2	; select bank4/5
 17525  1E22  0087               	movwf	7
 17526  1E23  085B               	movf	??_setProductData,w
 17527  1E24  0081               	movwf	1
 17528  1E25  0008               	return
 17529  1E26                     __end_of_setProductData:	
 17530                           
 17531                           	psect	text126
 17532  1397                     __ptext126:	
 17533 ;; *************** function _setDimmerLights_SwOn *****************
 17534 ;; Defined at:
 17535 ;;		line 649 in file "../src/Dimmer_B1.c"
 17536 ;; Parameters:    Size  Location     Type
 17537 ;;  sw              1    wreg     unsigned char 
 17538 ;; Auto vars:     Size  Location     Type
 17539 ;;  sw              1    6[BANK0 ] unsigned char 
 17540 ;;  idle            1    7[BANK0 ] unsigned char 
 17541 ;; Return value:  Size  Location     Type
 17542 ;;		None               void
 17543 ;; Registers used:
 17544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17545 ;; Tracked objects:
 17546 ;;		On entry : 0/0
 17547 ;;		On exit  : 0/0
 17548 ;;		Unchanged: 0/0
 17549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17554 ;;Total ram usage:        2 bytes
 17555 ;; Hardware stack levels used:    1
 17556 ;; Hardware stack levels required when called:    5
 17557 ;; This function calls:
 17558 ;;		_DimmerLights_SelectPointer
 17559 ;;		_setBuz
 17560 ;; This function is called by:
 17561 ;;		_DlyOff_Main
 17562 ;;		_setControl_Lights_Table
 17563 ;;		_setRFSW_Control
 17564 ;;		_setRFSW_AdjControl
 17565 ;;		_setSw_Main
 17566 ;; This function uses a non-reentrant model
 17567 ;;
 17568                           
 17569                           
 17570                           ;psect for function _setDimmerLights_SwOn
 17571  1397                     _setDimmerLights_SwOn:	
 17572                           
 17573                           ;incstack = 0
 17574                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17575                           ;setDimmerLights_SwOn@sw stored from wreg
 17576  1397  0020               	movlb	0	; select bank0
 17577  1398  00A6               	movwf	setDimmerLights_SwOn@sw
 17578                           
 17579                           ;Dimmer_B1.c: 650: char idle = 0;
 17580  1399  01A7               	clrf	setDimmerLights_SwOn@idle
 17581                           
 17582                           ;Dimmer_B1.c: 675: DimmerLights_SelectPointer(sw);
 17583  139A  0826               	movf	setDimmerLights_SwOn@sw,w
 17584  139B  319D  25A2  3193   	fcall	_DimmerLights_SelectPointer
 17585                           
 17586                           ;Dimmer_B1.c: 676: if (idle == 0) {
 17587  139E  0020               	movlb	0	; select bank0
 17588  139F  08A7               	movf	setDimmerLights_SwOn@idle,f
 17589  13A0  1D03               	skipz
 17590  13A1  0008               	return
 17591                           
 17592                           ;Dimmer_B1.c: 677: DimmerLights->SwFlag = 1;
 17593  13A2  0021               	movlb	1	; select bank1
 17594  13A3  084C               	movf	_DimmerLights^(0+128),w
 17595  13A4  0086               	movwf	6
 17596  13A5  3001               	movlw	1	; select bank2/3
 17597  13A6  0087               	movwf	7
 17598  13A7  1401               	bsf	1,0
 17599                           
 17600                           ;Dimmer_B1.c: 678: if (DimmerLights->Status == 0) {
 17601  13A8  0A4C               	incf	_DimmerLights^(0+128),w
 17602  13A9  0086               	movwf	6
 17603  13AA  3001               	movlw	1	; select bank2/3
 17604  13AB  0087               	movwf	7
 17605  13AC  1801               	btfsc	1,0
 17606  13AD  2BBE               	goto	l8277
 17607                           
 17608                           ;Dimmer_B1.c: 679: DimmerLights->Status = 1;
 17609  13AE  0A4C               	incf	_DimmerLights^(0+128),w
 17610  13AF  0086               	movwf	6
 17611  13B0  3001               	movlw	1	; select bank2/3
 17612  13B1  0087               	movwf	7
 17613  13B2  1401               	bsf	1,0
 17614                           
 17615                           ;Dimmer_B1.c: 680: DimmerLights->Trigger = 1;
 17616  13B3  084C               	movf	_DimmerLights^(0+128),w
 17617  13B4  0086               	movwf	6
 17618  13B5  3001               	movlw	1	; select bank2/3
 17619  13B6  0087               	movwf	7
 17620  13B7  1481               	bsf	1,1
 17621                           
 17622                           ;Dimmer_B1.c: 681: DimmerLights->Switch = 1;
 17623  13B8  084C               	movf	_DimmerLights^(0+128),w
 17624  13B9  0086               	movwf	6
 17625  13BA  3001               	movlw	1	; select bank2/3
 17626  13BB  0087               	movwf	7
 17627  13BC  1501               	bsf	1,2
 17628                           
 17629                           ;Dimmer_B1.c: 682: } else {
 17630  13BD  2BC3               	goto	l8279
 17631  13BE                     l8277:	
 17632                           
 17633                           ;Dimmer_B1.c: 683: DimmerLights->Status = 0;
 17634  13BE  0A4C               	incf	_DimmerLights^(0+128),w
 17635  13BF  0086               	movwf	6
 17636  13C0  3001               	movlw	1	; select bank2/3
 17637  13C1  0087               	movwf	7
 17638  13C2  1001               	bcf	1,0
 17639  13C3                     l8279:	
 17640                           
 17641                           ;Dimmer_B1.c: 684: }
 17642                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 17643  13C3  3064               	movlw	100
 17644  13C4  0020               	movlb	0	; select bank0
 17645  13C5  00A4               	movwf	setBuz@time
 17646  13C6  3000               	movlw	0
 17647  13C7  00A5               	movwf	setBuz@time+1
 17648  13C8  3001               	movlw	1
 17649  13C9  3196  269F         	fcall	_setBuz
 17650  13CB  0008               	return
 17651  13CC                     __end_of_setDimmerLights_SwOn:	
 17652                           
 17653                           	psect	text127
 17654  169F                     __ptext127:	
 17655 ;; *************** function _setBuz *****************
 17656 ;; Defined at:
 17657 ;;		line 22 in file "../src/Buzzer_B1.c"
 17658 ;; Parameters:    Size  Location     Type
 17659 ;;  count           1    wreg     unsigned char 
 17660 ;;  time            2    4[BANK0 ] int 
 17661 ;; Auto vars:     Size  Location     Type
 17662 ;;  count           1    8[COMMON] unsigned char 
 17663 ;; Return value:  Size  Location     Type
 17664 ;;		None               void
 17665 ;; Registers used:
 17666 ;;		wreg, status,2, status,0, pclath, cstack
 17667 ;; Tracked objects:
 17668 ;;		On entry : 0/0
 17669 ;;		On exit  : 0/0
 17670 ;;		Unchanged: 0/0
 17671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17674 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17675 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17676 ;;Total ram usage:        4 bytes
 17677 ;; Hardware stack levels used:    1
 17678 ;; Hardware stack levels required when called:    4
 17679 ;; This function calls:
 17680 ;;		___awdiv
 17681 ;; This function is called by:
 17682 ;;		_setDimmerLights_SwOn
 17683 ;;		_setDimmerLights_Dimming
 17684 ;;		_my_MainTimer
 17685 ;;		_Exception_Main
 17686 ;;		_setTemp_Main
 17687 ;;		_setLog_Code
 17688 ;;		_setRFSW_Control
 17689 ;;		_setSw_Main
 17690 ;; This function uses a non-reentrant model
 17691 ;;
 17692                           
 17693                           
 17694                           ;psect for function _setBuz
 17695  169F                     _setBuz:	
 17696                           
 17697                           ;incstack = 0
 17698                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 17699                           ;setBuz@count stored from wreg
 17700  169F  00F8               	movwf	setBuz@count
 17701                           
 17702                           ;Buzzer_B1.c: 23: time /= 20;
 17703  16A0  3014               	movlw	20
 17704  16A1  00F2               	movwf	___awdiv@divisor
 17705  16A2  3000               	movlw	0
 17706  16A3  00F3               	movwf	___awdiv@divisor+1
 17707  16A4  0020               	movlb	0	; select bank0
 17708  16A5  0825               	movf	setBuz@time+1,w
 17709  16A6  01F5               	clrf	___awdiv@dividend+1
 17710  16A7  07F5               	addwf	___awdiv@dividend+1,f
 17711  16A8  0824               	movf	setBuz@time,w
 17712  16A9  01F4               	clrf	___awdiv@dividend
 17713  16AA  07F4               	addwf	___awdiv@dividend,f
 17714  16AB  3196  26F2  3196   	fcall	___awdiv
 17715  16AE  0873               	movf	?___awdiv+1,w
 17716  16AF  0020               	movlb	0	; select bank0
 17717  16B0  01A5               	clrf	setBuz@time+1
 17718  16B1  07A5               	addwf	setBuz@time+1,f
 17719  16B2  0872               	movf	?___awdiv,w
 17720  16B3  01A4               	clrf	setBuz@time
 17721  16B4  07A4               	addwf	setBuz@time,f
 17722                           
 17723                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17724  16B5  0021               	movlb	1	; select bank1
 17725  16B6  1C3C               	btfss	_Buz1^(0+128),0
 17726  16B7  0008               	return
 17727                           
 17728                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17729  16B8  18BC               	btfsc	_Buz1^(0+128),1
 17730  16B9  2ECE               	goto	l84
 17731                           
 17732                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17733  16BA  14BC               	bsf	_Buz1^(0+128),1
 17734                           
 17735                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17736  16BB  01BD               	clrf	(_Buz1^(0+128)+1)
 17737  16BC  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 17738                           
 17739                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17740  16BD  0878               	movf	setBuz@count,w
 17741  16BE  00F7               	movwf	??_setBuz
 17742  16BF  0877               	movf	??_setBuz,w
 17743  16C0  00BF               	movwf	(_Buz1^(0+128)+3)
 17744                           
 17745                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17746  16C1  0020               	movlb	0	; select bank0
 17747  16C2  0825               	movf	setBuz@time+1,w
 17748  16C3  0021               	movlb	1	; select bank1
 17749  16C4  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 17750  16C5  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 17751  16C6  0020               	movlb	0	; select bank0
 17752  16C7  0824               	movf	setBuz@time,w
 17753  16C8  0021               	movlb	1	; select bank1
 17754  16C9  01C2               	clrf	(_Buz1^(0+128)+6)
 17755  16CA  07C2               	addwf	(_Buz1^(0+128)+6),f
 17756                           
 17757                           ;Buzzer_B1.c: 30: RB3 = 1;
 17758  16CB  0020               	movlb	0	; select bank0
 17759  16CC  158D               	bsf	13,3	;volatile
 17760                           
 17761                           ;Buzzer_B1.c: 31: } else {
 17762  16CD  0008               	return
 17763  16CE                     l84:	
 17764                           
 17765                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17766  16CE  19BC               	btfsc	_Buz1^(0+128),3
 17767  16CF  2EE0               	goto	l86
 17768                           
 17769                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17770  16D0  15BC               	bsf	_Buz1^(0+128),3
 17771                           
 17772                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17773  16D1  0878               	movf	setBuz@count,w
 17774  16D2  00F7               	movwf	??_setBuz
 17775  16D3  0877               	movf	??_setBuz,w
 17776  16D4  00C0               	movwf	(_Buz1^(0+128)+4)
 17777                           
 17778                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17779  16D5  0020               	movlb	0	; select bank0
 17780  16D6  0825               	movf	setBuz@time+1,w
 17781  16D7  0021               	movlb	1	; select bank1
 17782  16D8  01C5               	clrf	((_Buz1+1)^(0+128)+8)
 17783  16D9  07C5               	addwf	((_Buz1+1)^(0+128)+8),f
 17784  16DA  0020               	movlb	0	; select bank0
 17785  16DB  0824               	movf	setBuz@time,w
 17786  16DC  0021               	movlb	1	; select bank1
 17787  16DD  01C4               	clrf	(_Buz1^(0+128)+8)
 17788  16DE  07C4               	addwf	(_Buz1^(0+128)+8),f
 17789                           
 17790                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17791  16DF  0008               	return
 17792  16E0                     l86:	
 17793  16E0  1A3C               	btfsc	_Buz1^(0+128),4
 17794  16E1  0008               	return
 17795                           
 17796                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17797  16E2  163C               	bsf	_Buz1^(0+128),4
 17798                           
 17799                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17800  16E3  0878               	movf	setBuz@count,w
 17801  16E4  00F7               	movwf	??_setBuz
 17802  16E5  0877               	movf	??_setBuz,w
 17803  16E6  00C1               	movwf	(_Buz1^(0+128)+5)
 17804                           
 17805                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17806  16E7  0020               	movlb	0	; select bank0
 17807  16E8  0825               	movf	setBuz@time+1,w
 17808  16E9  0021               	movlb	1	; select bank1
 17809  16EA  01C7               	clrf	((_Buz1+1)^(0+128)+10)
 17810  16EB  07C7               	addwf	((_Buz1+1)^(0+128)+10),f
 17811  16EC  0020               	movlb	0	; select bank0
 17812  16ED  0824               	movf	setBuz@time,w
 17813  16EE  0021               	movlb	1	; select bank1
 17814  16EF  01C6               	clrf	(_Buz1^(0+128)+10)
 17815  16F0  07C6               	addwf	(_Buz1^(0+128)+10),f
 17816  16F1  0008               	return
 17817  16F2                     __end_of_setBuz:	
 17818                           
 17819                           	psect	text128
 17820  16F2                     __ptext128:	
 17821 ;; *************** function ___awdiv *****************
 17822 ;; Defined at:
 17823 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17824 ;; Parameters:    Size  Location     Type
 17825 ;;  divisor         2    2[COMMON] int 
 17826 ;;  dividend        2    4[COMMON] int 
 17827 ;; Auto vars:     Size  Location     Type
 17828 ;;  quotient        2    2[BANK0 ] int 
 17829 ;;  sign            1    1[BANK0 ] unsigned char 
 17830 ;;  counter         1    0[BANK0 ] unsigned char 
 17831 ;; Return value:  Size  Location     Type
 17832 ;;                  2    2[COMMON] int 
 17833 ;; Registers used:
 17834 ;;		wreg, status,2, status,0
 17835 ;; Tracked objects:
 17836 ;;		On entry : 0/0
 17837 ;;		On exit  : 0/0
 17838 ;;		Unchanged: 0/0
 17839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17840 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17841 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17843 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17844 ;;Total ram usage:        9 bytes
 17845 ;; Hardware stack levels used:    1
 17846 ;; Hardware stack levels required when called:    3
 17847 ;; This function calls:
 17848 ;;		Nothing
 17849 ;; This function is called by:
 17850 ;;		_setBuz
 17851 ;; This function uses a non-reentrant model
 17852 ;;
 17853                           
 17854                           
 17855                           ;psect for function ___awdiv
 17856  16F2                     ___awdiv:	
 17857                           
 17858                           ;incstack = 0
 17859                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17860  16F2  0020               	movlb	0	; select bank0
 17861  16F3  01A1               	clrf	___awdiv@sign
 17862  16F4  1FF3               	btfss	___awdiv@divisor+1,7
 17863  16F5  2EFD               	goto	l8153
 17864  16F6  09F2               	comf	___awdiv@divisor,f
 17865  16F7  09F3               	comf	___awdiv@divisor+1,f
 17866  16F8  0AF2               	incf	___awdiv@divisor,f
 17867  16F9  1903               	skipnz
 17868  16FA  0AF3               	incf	___awdiv@divisor+1,f
 17869  16FB  01A1               	clrf	___awdiv@sign
 17870  16FC  0AA1               	incf	___awdiv@sign,f
 17871  16FD                     l8153:	
 17872  16FD  1FF5               	btfss	___awdiv@dividend+1,7
 17873  16FE  2F08               	goto	l8159
 17874  16FF  09F4               	comf	___awdiv@dividend,f
 17875  1700  09F5               	comf	___awdiv@dividend+1,f
 17876  1701  0AF4               	incf	___awdiv@dividend,f
 17877  1702  1903               	skipnz
 17878  1703  0AF5               	incf	___awdiv@dividend+1,f
 17879  1704  3001               	movlw	1
 17880  1705  00F6               	movwf	??___awdiv
 17881  1706  0876               	movf	??___awdiv,w
 17882  1707  06A1               	xorwf	___awdiv@sign,f
 17883  1708                     l8159:	
 17884  1708  01A2               	clrf	___awdiv@quotient
 17885  1709  01A3               	clrf	___awdiv@quotient+1
 17886  170A  0873               	movf	___awdiv@divisor+1,w
 17887  170B  0472               	iorwf	___awdiv@divisor,w
 17888  170C  1903               	skipnz
 17889  170D  2F37               	goto	l8181
 17890  170E  01A0               	clrf	___awdiv@counter
 17891  170F  0AA0               	incf	___awdiv@counter,f
 17892  1710                     l8169:	
 17893  1710  1BF3               	btfsc	___awdiv@divisor+1,7
 17894  1711  2F1C               	goto	l8171
 17895  1712  3001               	movlw	1
 17896  1713                     u8545:	
 17897  1713  35F2               	lslf	___awdiv@divisor,f
 17898  1714  0DF3               	rlf	___awdiv@divisor+1,f
 17899  1715  0B89               	decfsz	9,f
 17900  1716  2F13               	goto	u8545
 17901  1717  3001               	movlw	1
 17902  1718  00F6               	movwf	??___awdiv
 17903  1719  0876               	movf	??___awdiv,w
 17904  171A  07A0               	addwf	___awdiv@counter,f
 17905  171B  2F10               	goto	l8169
 17906  171C                     l8171:	
 17907  171C  3001               	movlw	1
 17908  171D                     u8565:	
 17909  171D  35A2               	lslf	___awdiv@quotient,f
 17910  171E  0DA3               	rlf	___awdiv@quotient+1,f
 17911  171F  0B89               	decfsz	9,f
 17912  1720  2F1D               	goto	u8565
 17913  1721  0873               	movf	___awdiv@divisor+1,w
 17914  1722  0275               	subwf	___awdiv@dividend+1,w
 17915  1723  1D03               	skipz
 17916  1724  2F27               	goto	u8575
 17917  1725  0872               	movf	___awdiv@divisor,w
 17918  1726  0274               	subwf	___awdiv@dividend,w
 17919  1727                     u8575:	
 17920  1727  1C03               	skipc
 17921  1728  2F2E               	goto	l8177
 17922  1729  0872               	movf	___awdiv@divisor,w
 17923  172A  02F4               	subwf	___awdiv@dividend,f
 17924  172B  0873               	movf	___awdiv@divisor+1,w
 17925  172C  3BF5               	subwfb	___awdiv@dividend+1,f
 17926  172D  1422               	bsf	___awdiv@quotient,0
 17927  172E                     l8177:	
 17928  172E  3001               	movlw	1
 17929  172F                     u8585:	
 17930  172F  36F3               	lsrf	___awdiv@divisor+1,f
 17931  1730  0CF2               	rrf	___awdiv@divisor,f
 17932  1731  0B89               	decfsz	9,f
 17933  1732  2F2F               	goto	u8585
 17934  1733  3001               	movlw	1
 17935  1734  02A0               	subwf	___awdiv@counter,f
 17936  1735  1D03               	btfss	3,2
 17937  1736  2F1C               	goto	l8171
 17938  1737                     l8181:	
 17939  1737  0821               	movf	___awdiv@sign,w
 17940  1738  1903               	btfsc	3,2
 17941  1739  2F3F               	goto	l8185
 17942  173A  09A2               	comf	___awdiv@quotient,f
 17943  173B  09A3               	comf	___awdiv@quotient+1,f
 17944  173C  0AA2               	incf	___awdiv@quotient,f
 17945  173D  1903               	skipnz
 17946  173E  0AA3               	incf	___awdiv@quotient+1,f
 17947  173F                     l8185:	
 17948  173F  0823               	movf	___awdiv@quotient+1,w
 17949  1740  01F3               	clrf	?___awdiv+1
 17950  1741  07F3               	addwf	?___awdiv+1,f
 17951  1742  0822               	movf	___awdiv@quotient,w
 17952  1743  01F2               	clrf	?___awdiv
 17953  1744  07F2               	addwf	?___awdiv,f
 17954  1745  0008               	return
 17955  1746                     __end_of___awdiv:	
 17956                           
 17957                           	psect	text129
 17958  1402                     __ptext129:	
 17959 ;; *************** function _setDimmerLights_SwOff *****************
 17960 ;; Defined at:
 17961 ;;		line 690 in file "../src/Dimmer_B1.c"
 17962 ;; Parameters:    Size  Location     Type
 17963 ;;  sw              1    wreg     unsigned char 
 17964 ;; Auto vars:     Size  Location     Type
 17965 ;;  sw              1    4[COMMON] unsigned char 
 17966 ;; Return value:  Size  Location     Type
 17967 ;;		None               void
 17968 ;; Registers used:
 17969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17970 ;; Tracked objects:
 17971 ;;		On entry : 0/0
 17972 ;;		On exit  : 0/0
 17973 ;;		Unchanged: 0/0
 17974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17976 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17979 ;;Total ram usage:        1 bytes
 17980 ;; Hardware stack levels used:    1
 17981 ;; Hardware stack levels required when called:    4
 17982 ;; This function calls:
 17983 ;;		_DimmerLights_SelectPointer
 17984 ;; This function is called by:
 17985 ;;		_DlyOff_Main
 17986 ;;		_Exception_Main
 17987 ;;		_setControl_Lights_Table
 17988 ;;		_setRFSW_Control
 17989 ;;		_setRFSW_AdjControl
 17990 ;;		_setSw_Main
 17991 ;; This function uses a non-reentrant model
 17992 ;;
 17993                           
 17994                           
 17995                           ;psect for function _setDimmerLights_SwOff
 17996  1402                     _setDimmerLights_SwOff:	
 17997                           
 17998                           ;incstack = 0
 17999                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18000                           ;setDimmerLights_SwOff@sw stored from wreg
 18001  1402  00F4               	movwf	setDimmerLights_SwOff@sw
 18002                           
 18003                           ;Dimmer_B1.c: 691: DimmerLights_SelectPointer(sw);
 18004  1403  0874               	movf	setDimmerLights_SwOff@sw,w
 18005  1404  319D  25A2  3194   	fcall	_DimmerLights_SelectPointer
 18006                           
 18007                           ;Dimmer_B1.c: 693: if (DimmerLights->SwFlag == 1) {
 18008  1407  0021               	movlb	1	; select bank1
 18009  1408  084C               	movf	_DimmerLights^(0+128),w
 18010  1409  0086               	movwf	6
 18011  140A  3001               	movlw	1	; select bank2/3
 18012  140B  0087               	movwf	7
 18013  140C  1C01               	btfss	1,0
 18014  140D  0008               	return
 18015                           
 18016                           ;Dimmer_B1.c: 694: DimmerLights->SwFlag = 0;
 18017  140E  084C               	movf	_DimmerLights^(0+128),w
 18018  140F  0086               	movwf	6
 18019  1410  3001               	movlw	1	; select bank2/3
 18020  1411  0087               	movwf	7
 18021  1412  1001               	bcf	1,0
 18022                           
 18023                           ;Dimmer_B1.c: 695: if (DimmerLights->Status == 1) {
 18024  1413  0A4C               	incf	_DimmerLights^(0+128),w
 18025  1414  0086               	movwf	6
 18026  1415  3001               	movlw	1	; select bank2/3
 18027  1416  0087               	movwf	7
 18028  1417  1C01               	btfss	1,0
 18029  1418  2C2F               	goto	l8291
 18030                           
 18031                           ;Dimmer_B1.c: 696: if (DimmerLights->DimmingSwFlag == 1) {
 18032  1419  084C               	movf	_DimmerLights^(0+128),w
 18033  141A  0086               	movwf	6
 18034  141B  3001               	movlw	1	; select bank2/3
 18035  141C  0087               	movwf	7
 18036  141D  1D81               	btfss	1,3
 18037  141E  0008               	return
 18038                           
 18039                           ;Dimmer_B1.c: 697: DimmerLights->DimmingSwFlag = 0;
 18040  141F  084C               	movf	_DimmerLights^(0+128),w
 18041  1420  0086               	movwf	6
 18042  1421  3001               	movlw	1	; select bank2/3
 18043  1422  0087               	movwf	7
 18044  1423  1181               	bcf	1,3
 18045                           
 18046                           ;Dimmer_B1.c: 699: DimmerLights->DimmingTrigger = 1;
 18047  1424  084C               	movf	_DimmerLights^(0+128),w
 18048  1425  0086               	movwf	6
 18049  1426  3001               	movlw	1	; select bank2/3
 18050  1427  0087               	movwf	7
 18051  1428  1601               	bsf	1,4
 18052                           
 18053                           ;Dimmer_B1.c: 700: DimmerLights->DimmingSwitch = 0;
 18054  1429  084C               	movf	_DimmerLights^(0+128),w
 18055  142A  0086               	movwf	6
 18056  142B  3001               	movlw	1	; select bank2/3
 18057  142C  0087               	movwf	7
 18058  142D  1281               	bcf	1,5
 18059                           
 18060                           ;Dimmer_B1.c: 701: }
 18061                           ;Dimmer_B1.c: 702: } else {
 18062  142E  0008               	return
 18063  142F                     l8291:	
 18064                           
 18065                           ;Dimmer_B1.c: 704: DimmerLights->Trigger = 1;
 18066  142F  084C               	movf	_DimmerLights^(0+128),w
 18067  1430  0086               	movwf	6
 18068  1431  3001               	movlw	1	; select bank2/3
 18069  1432  0087               	movwf	7
 18070  1433  1481               	bsf	1,1
 18071                           
 18072                           ;Dimmer_B1.c: 705: DimmerLights->Switch = 0;
 18073  1434  084C               	movf	_DimmerLights^(0+128),w
 18074  1435  0086               	movwf	6
 18075  1436  3001               	movlw	1	; select bank2/3
 18076  1437  0087               	movwf	7
 18077  1438  1101               	bcf	1,2
 18078  1439  0008               	return
 18079  143A                     __end_of_setDimmerLights_SwOff:	
 18080                           
 18081                           	psect	text130
 18082  1E34                     __ptext130:	
 18083 ;; *************** function _getDimmerLights_Status *****************
 18084 ;; Defined at:
 18085 ;;		line 994 in file "../src/Dimmer_B1.c"
 18086 ;; Parameters:    Size  Location     Type
 18087 ;;  lights          1    wreg     unsigned char 
 18088 ;; Auto vars:     Size  Location     Type
 18089 ;;  lights          1    4[COMMON] unsigned char 
 18090 ;;  status          1    5[COMMON] unsigned char 
 18091 ;; Return value:  Size  Location     Type
 18092 ;;                  1    wreg      unsigned char 
 18093 ;; Registers used:
 18094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18095 ;; Tracked objects:
 18096 ;;		On entry : 0/0
 18097 ;;		On exit  : 0/0
 18098 ;;		Unchanged: 0/0
 18099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18103 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18104 ;;Total ram usage:        2 bytes
 18105 ;; Hardware stack levels used:    1
 18106 ;; Hardware stack levels required when called:    4
 18107 ;; This function calls:
 18108 ;;		_DimmerLights_SelectPointer
 18109 ;; This function is called by:
 18110 ;;		_DlyOff_Main
 18111 ;;		_Exception_Main
 18112 ;;		_setControl_Lights_Table
 18113 ;;		_setRFSW_Control
 18114 ;;		_setRFSW_AdjControl
 18115 ;; This function uses a non-reentrant model
 18116 ;;
 18117                           
 18118                           
 18119                           ;psect for function _getDimmerLights_Status
 18120  1E34                     _getDimmerLights_Status:	
 18121                           
 18122                           ;incstack = 0
 18123                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18124                           ;getDimmerLights_Status@lights stored from wreg
 18125  1E34  00F4               	movwf	getDimmerLights_Status@lights
 18126                           
 18127                           ;Dimmer_B1.c: 995: DimmerLights_SelectPointer(lights);
 18128  1E35  0874               	movf	getDimmerLights_Status@lights,w
 18129  1E36  319D  25A2         	fcall	_DimmerLights_SelectPointer
 18130                           
 18131                           ;Dimmer_B1.c: 996: char status = DimmerLights->Status == 1 ? 1 : 0;
 18132  1E38  0021               	movlb	1	; select bank1
 18133  1E39  0A4C               	incf	_DimmerLights^(0+128),w
 18134  1E3A  0086               	movwf	6
 18135  1E3B  3001               	movlw	1	; select bank2/3
 18136  1E3C  0087               	movwf	7
 18137  1E3D  3000               	movlw	0
 18138  1E3E  1801               	btfsc	1,0
 18139  1E3F  3001               	movlw	1
 18140  1E40  00F5               	movwf	getDimmerLights_Status@status
 18141                           
 18142                           ;Dimmer_B1.c: 997: return status;
 18143  1E41  0875               	movf	getDimmerLights_Status@status,w
 18144  1E42  0008               	return
 18145  1E43                     __end_of_getDimmerLights_Status:	
 18146                           
 18147                           	psect	text131
 18148  1DA2                     __ptext131:	
 18149 ;; *************** function _DimmerLights_SelectPointer *****************
 18150 ;; Defined at:
 18151 ;;		line 572 in file "../src/Dimmer_B1.c"
 18152 ;; Parameters:    Size  Location     Type
 18153 ;;  lights          1    wreg     unsigned char 
 18154 ;; Auto vars:     Size  Location     Type
 18155 ;;  lights          1    3[COMMON] unsigned char 
 18156 ;; Return value:  Size  Location     Type
 18157 ;;		None               void
 18158 ;; Registers used:
 18159 ;;		wreg
 18160 ;; Tracked objects:
 18161 ;;		On entry : 0/0
 18162 ;;		On exit  : 0/0
 18163 ;;		Unchanged: 0/0
 18164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18169 ;;Total ram usage:        2 bytes
 18170 ;; Hardware stack levels used:    1
 18171 ;; Hardware stack levels required when called:    3
 18172 ;; This function calls:
 18173 ;;		Nothing
 18174 ;; This function is called by:
 18175 ;;		_setDimmerLights_SwOn
 18176 ;;		_setDimmerLights_SwOff
 18177 ;;		_setDimmerLights_DimmingOn
 18178 ;;		_setDimmerLights_Main
 18179 ;;		_getDimmerLights_Status
 18180 ;;		_setDimmerLights_DimmingRun
 18181 ;;		_setDimmerLights_Status
 18182 ;; This function uses a non-reentrant model
 18183 ;;
 18184                           
 18185                           
 18186                           ;psect for function _DimmerLights_SelectPointer
 18187  1DA2                     _DimmerLights_SelectPointer:	
 18188                           
 18189                           ;incstack = 0
 18190                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18191                           ;DimmerLights_SelectPointer@lights stored from wreg
 18192  1DA2  00F3               	movwf	DimmerLights_SelectPointer@lights
 18193                           
 18194                           ;Dimmer_B1.c: 574: if (lights == 1) {
 18195  1DA3  0873               	movf	DimmerLights_SelectPointer@lights,w
 18196  1DA4  3A01               	xorlw	1
 18197  1DA5  1D03               	skipz
 18198  1DA6  0008               	return
 18199                           
 18200                           ;Dimmer_B1.c: 575: DimmerLights = &DimmerLights1;
 18201  1DA7  3058               	movlw	_DimmerLights1& (0+255)
 18202  1DA8  00F2               	movwf	??_DimmerLights_SelectPointer
 18203  1DA9  0872               	movf	??_DimmerLights_SelectPointer,w
 18204  1DAA  0021               	movlb	1	; select bank1
 18205  1DAB  00CC               	movwf	_DimmerLights^(0+128)
 18206  1DAC  0008               	return
 18207  1DAD                     __end_of_DimmerLights_SelectPointer:	
 18208                           
 18209                           	psect	text132
 18210  1CC8                     __ptext132:	
 18211 ;; *************** function _DelayOff_Initialization *****************
 18212 ;; Defined at:
 18213 ;;		line 26 in file "../src/DelayOff_B1.c"
 18214 ;; Parameters:    Size  Location     Type
 18215 ;;		None
 18216 ;; Auto vars:     Size  Location     Type
 18217 ;;		None
 18218 ;; Return value:  Size  Location     Type
 18219 ;;		None               void
 18220 ;; Registers used:
 18221 ;;		wreg, status,2, status,0, pclath, cstack
 18222 ;; Tracked objects:
 18223 ;;		On entry : 0/0
 18224 ;;		On exit  : 0/0
 18225 ;;		Unchanged: 0/0
 18226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18231 ;;Total ram usage:        0 bytes
 18232 ;; Hardware stack levels used:    1
 18233 ;; Hardware stack levels required when called:    5
 18234 ;; This function calls:
 18235 ;;		_DlyOff_Initialization
 18236 ;; This function is called by:
 18237 ;;		_main
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           
 18242                           ;psect for function _DelayOff_Initialization
 18243  1CC8                     _DelayOff_Initialization:	
 18244                           
 18245                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18246                           
 18247                           ;incstack = 0
 18248                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18249  1CC8  3001               	movlw	1
 18250  1CC9  319C  24EC         	fcall	_DlyOff_Initialization
 18251  1CCB  0008               	return
 18252  1CCC                     __end_of_DelayOff_Initialization:	
 18253                           
 18254                           	psect	text133
 18255  1CEC                     __ptext133:	
 18256 ;; *************** function _DlyOff_Initialization *****************
 18257 ;; Defined at:
 18258 ;;		line 56 in file "../src/DelayOff_B1.c"
 18259 ;; Parameters:    Size  Location     Type
 18260 ;;  sw              1    wreg     unsigned char 
 18261 ;; Auto vars:     Size  Location     Type
 18262 ;;  sw              1    4[COMMON] unsigned char 
 18263 ;; Return value:  Size  Location     Type
 18264 ;;		None               void
 18265 ;; Registers used:
 18266 ;;		wreg, status,2, status,0, pclath, cstack
 18267 ;; Tracked objects:
 18268 ;;		On entry : 0/0
 18269 ;;		On exit  : 0/0
 18270 ;;		Unchanged: 0/0
 18271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18273 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18276 ;;Total ram usage:        1 bytes
 18277 ;; Hardware stack levels used:    1
 18278 ;; Hardware stack levels required when called:    4
 18279 ;; This function calls:
 18280 ;;		_DelayOffPointSelect
 18281 ;; This function is called by:
 18282 ;;		_DelayOff_Initialization
 18283 ;; This function uses a non-reentrant model
 18284 ;;
 18285                           
 18286                           
 18287                           ;psect for function _DlyOff_Initialization
 18288  1CEC                     _DlyOff_Initialization:	
 18289                           
 18290                           ;incstack = 0
 18291                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18292                           ;DlyOff_Initialization@sw stored from wreg
 18293  1CEC  00F4               	movwf	DlyOff_Initialization@sw
 18294                           
 18295                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18296  1CED  0874               	movf	DlyOff_Initialization@sw,w
 18297  1CEE  319D  2597         	fcall	_DelayOffPointSelect
 18298  1CF0  0008               	return
 18299  1CF1                     __end_of_DlyOff_Initialization:	
 18300                           
 18301                           	psect	text134
 18302  1D97                     __ptext134:	
 18303 ;; *************** function _DelayOffPointSelect *****************
 18304 ;; Defined at:
 18305 ;;		line 7 in file "../src/DelayOff_B1.c"
 18306 ;; Parameters:    Size  Location     Type
 18307 ;;  sw              1    wreg     unsigned char 
 18308 ;; Auto vars:     Size  Location     Type
 18309 ;;  sw              1    3[COMMON] unsigned char 
 18310 ;; Return value:  Size  Location     Type
 18311 ;;		None               void
 18312 ;; Registers used:
 18313 ;;		wreg
 18314 ;; Tracked objects:
 18315 ;;		On entry : 0/0
 18316 ;;		On exit  : 0/0
 18317 ;;		Unchanged: 0/0
 18318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18323 ;;Total ram usage:        2 bytes
 18324 ;; Hardware stack levels used:    1
 18325 ;; Hardware stack levels required when called:    3
 18326 ;; This function calls:
 18327 ;;		Nothing
 18328 ;; This function is called by:
 18329 ;;		_DlyOff_Initialization
 18330 ;;		_DlyOff_Main
 18331 ;;		_setDelayOff_GO
 18332 ;;		_getDelayOff_GO
 18333 ;; This function uses a non-reentrant model
 18334 ;;
 18335                           
 18336                           
 18337                           ;psect for function _DelayOffPointSelect
 18338  1D97                     _DelayOffPointSelect:	
 18339                           
 18340                           ;incstack = 0
 18341                           ; Regs used in _DelayOffPointSelect: [wreg]
 18342                           ;DelayOffPointSelect@sw stored from wreg
 18343  1D97  00F3               	movwf	DelayOffPointSelect@sw
 18344                           
 18345                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18346  1D98  0873               	movf	DelayOffPointSelect@sw,w
 18347  1D99  3A01               	xorlw	1
 18348  1D9A  1D03               	skipz
 18349  1D9B  0008               	return
 18350                           
 18351                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18352  1D9C  3060               	movlw	_DlySw1& (0+255)
 18353  1D9D  00F2               	movwf	??_DelayOffPointSelect
 18354  1D9E  0872               	movf	??_DelayOffPointSelect,w
 18355  1D9F  0021               	movlb	1	; select bank1
 18356  1DA0  00CA               	movwf	_DelayOff^(0+128)
 18357  1DA1  0008               	return
 18358  1DA2                     __end_of_DelayOffPointSelect:	
 18359                           
 18360                           	psect	text135
 18361  1569                     __ptext135:	
 18362 ;; *************** function _Buzzer_Main *****************
 18363 ;; Defined at:
 18364 ;;		line 46 in file "../src/Buzzer_B1.c"
 18365 ;; Parameters:    Size  Location     Type
 18366 ;;		None
 18367 ;; Auto vars:     Size  Location     Type
 18368 ;;		None
 18369 ;; Return value:  Size  Location     Type
 18370 ;;		None               void
 18371 ;; Registers used:
 18372 ;;		wreg, status,2, status,0
 18373 ;; Tracked objects:
 18374 ;;		On entry : 0/0
 18375 ;;		On exit  : 0/0
 18376 ;;		Unchanged: 0/0
 18377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18380 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18382 ;;Total ram usage:        1 bytes
 18383 ;; Hardware stack levels used:    1
 18384 ;; Hardware stack levels required when called:    3
 18385 ;; This function calls:
 18386 ;;		Nothing
 18387 ;; This function is called by:
 18388 ;;		_main
 18389 ;; This function uses a non-reentrant model
 18390 ;;
 18391                           
 18392                           
 18393                           ;psect for function _Buzzer_Main
 18394  1569                     _Buzzer_Main:	
 18395                           
 18396                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18397                           
 18398                           ;incstack = 0
 18399                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18400  1569  0021               	movlb	1	; select bank1
 18401  156A  1CBC               	btfss	_Buz1^(0+128),1
 18402  156B  0008               	return
 18403                           
 18404                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18405  156C  3001               	movlw	1
 18406  156D  07BD               	addwf	(_Buz1^(0+128)+1),f
 18407  156E  3000               	movlw	0
 18408  156F  3DBE               	addwfc	((_Buz1+1)^(0+128)+1),f
 18409                           
 18410                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18411  1570  0843               	movf	((_Buz1+1)^(0+128)+6),w
 18412  1571  023E               	subwf	((_Buz1+1)^(0+128)+1),w
 18413  1572  1D03               	skipz
 18414  1573  2D76               	goto	u7335
 18415  1574  0842               	movf	(_Buz1^(0+128)+6),w
 18416  1575  023D               	subwf	(_Buz1^(0+128)+1),w
 18417  1576                     u7335:	
 18418  1576  1C03               	skipc
 18419  1577  0008               	return
 18420                           
 18421                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18422  1578  01BD               	clrf	(_Buz1^(0+128)+1)
 18423  1579  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 18424                           
 18425                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18426  157A  12BC               	bcf	_Buz1^(0+128),5
 18427  157B  0020               	movlb	0	; select bank0
 18428  157C  1D8D               	btfss	13,3	;volatile
 18429  157D  2D80               	goto	l7447
 18430  157E  0021               	movlb	1	; select bank1
 18431  157F  16BC               	bsf	_Buz1^(0+128),5
 18432  1580                     l7447:	
 18433                           
 18434                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18435  1580  0021               	movlb	1	; select bank1
 18436  1581  1ABC               	btfsc	_Buz1^(0+128),5
 18437  1582  2DA8               	goto	l94
 18438                           
 18439                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18440  1583  08BF               	movf	(_Buz1^(0+128)+3),f
 18441  1584  1D03               	skipz
 18442  1585  2DA4               	goto	l95
 18443                           
 18444                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18445  1586  1DBC               	btfss	_Buz1^(0+128),3
 18446  1587  2D94               	goto	l96
 18447                           
 18448                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18449  1588  11BC               	bcf	_Buz1^(0+128),3
 18450                           
 18451                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18452  1589  0840               	movf	(_Buz1^(0+128)+4),w
 18453  158A  00F2               	movwf	??_Buzzer_Main
 18454  158B  0872               	movf	??_Buzzer_Main,w
 18455  158C  00BF               	movwf	(_Buz1^(0+128)+3)
 18456                           
 18457                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18458  158D  0845               	movf	((_Buz1+1)^(0+128)+8),w
 18459  158E  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18460  158F  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18461  1590  0844               	movf	(_Buz1^(0+128)+8),w
 18462  1591  01C2               	clrf	(_Buz1^(0+128)+6)
 18463  1592  07C2               	addwf	(_Buz1^(0+128)+6),f
 18464                           
 18465                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18466  1593  0008               	return
 18467  1594                     l96:	
 18468  1594  1E3C               	btfss	_Buz1^(0+128),4
 18469  1595  2DA2               	goto	l98
 18470                           
 18471                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18472  1596  123C               	bcf	_Buz1^(0+128),4
 18473                           
 18474                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18475  1597  0841               	movf	(_Buz1^(0+128)+5),w
 18476  1598  00F2               	movwf	??_Buzzer_Main
 18477  1599  0872               	movf	??_Buzzer_Main,w
 18478  159A  00BF               	movwf	(_Buz1^(0+128)+3)
 18479                           
 18480                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18481  159B  0847               	movf	((_Buz1+1)^(0+128)+10),w
 18482  159C  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18483  159D  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18484  159E  0846               	movf	(_Buz1^(0+128)+10),w
 18485  159F  01C2               	clrf	(_Buz1^(0+128)+6)
 18486  15A0  07C2               	addwf	(_Buz1^(0+128)+6),f
 18487                           
 18488                           ;Buzzer_B1.c: 62: } else {
 18489  15A1  0008               	return
 18490  15A2                     l98:	
 18491                           
 18492                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18493  15A2  10BC               	bcf	_Buz1^(0+128),1
 18494                           
 18495                           ;Buzzer_B1.c: 64: }
 18496                           ;Buzzer_B1.c: 65: } else {
 18497  15A3  0008               	return
 18498  15A4                     l95:	
 18499                           
 18500                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18501  15A4  16BC               	bsf	_Buz1^(0+128),5
 18502                           
 18503                           ;Buzzer_B1.c: 68: RB3 = 1;
 18504  15A5  0020               	movlb	0	; select bank0
 18505  15A6  158D               	bsf	13,3	;volatile
 18506                           
 18507                           ;Buzzer_B1.c: 69: }
 18508                           ;Buzzer_B1.c: 70: } else {
 18509  15A7  0008               	return
 18510  15A8                     l94:	
 18511                           
 18512                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18513  15A8  12BC               	bcf	_Buz1^(0+128),5
 18514                           
 18515                           ;Buzzer_B1.c: 73: RB3 = 0;
 18516  15A9  0020               	movlb	0	; select bank0
 18517  15AA  118D               	bcf	13,3	;volatile
 18518                           
 18519                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18520  15AB  3001               	movlw	1
 18521  15AC  0021               	movlb	1	; select bank1
 18522  15AD  02BF               	subwf	(_Buz1^(0+128)+3),f
 18523  15AE  0008               	return
 18524  15AF                     __end_of_Buzzer_Main:	
 18525                           
 18526                           	psect	text136
 18527  1CB9                     __ptext136:	
 18528 ;; *************** function _Buzzer_Initialization *****************
 18529 ;; Defined at:
 18530 ;;		line 11 in file "../src/Buzzer_B1.c"
 18531 ;; Parameters:    Size  Location     Type
 18532 ;;		None
 18533 ;; Auto vars:     Size  Location     Type
 18534 ;;		None
 18535 ;; Return value:  Size  Location     Type
 18536 ;;		None               void
 18537 ;; Registers used:
 18538 ;;		None
 18539 ;; Tracked objects:
 18540 ;;		On entry : 0/0
 18541 ;;		On exit  : 0/0
 18542 ;;		Unchanged: 0/0
 18543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18548 ;;Total ram usage:        0 bytes
 18549 ;; Hardware stack levels used:    1
 18550 ;; Hardware stack levels required when called:    3
 18551 ;; This function calls:
 18552 ;;		Nothing
 18553 ;; This function is called by:
 18554 ;;		_main
 18555 ;; This function uses a non-reentrant model
 18556 ;;
 18557                           
 18558                           
 18559                           ;psect for function _Buzzer_Initialization
 18560  1CB9                     _Buzzer_Initialization:	
 18561                           
 18562                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18563                           
 18564                           ;incstack = 0
 18565                           ; Regs used in _Buzzer_Initialization: []
 18566  1CB9  0021               	movlb	1	; select bank1
 18567  1CBA  143C               	bsf	_Buz1^(0+128),0
 18568  1CBB  0008               	return
 18569  1CBC                     __end_of_Buzzer_Initialization:	
 18570                           
 18571                           	psect	intentry
 18572  0004                     __pintentry:	
 18573 ;; *************** function _ISR *****************
 18574 ;; Defined at:
 18575 ;;		line 112 in file "../src/MCU_B1.c"
 18576 ;; Parameters:    Size  Location     Type
 18577 ;;		None
 18578 ;; Auto vars:     Size  Location     Type
 18579 ;;		None
 18580 ;; Return value:  Size  Location     Type
 18581 ;;		None               void
 18582 ;; Registers used:
 18583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18584 ;; Tracked objects:
 18585 ;;		On entry : 0/0
 18586 ;;		On exit  : 0/0
 18587 ;;		Unchanged: 0/0
 18588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18592 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18593 ;;Total ram usage:        1 bytes
 18594 ;; Hardware stack levels used:    1
 18595 ;; Hardware stack levels required when called:    2
 18596 ;; This function calls:
 18597 ;;		_IOC_ISR
 18598 ;;		_TMR1_ISR
 18599 ;; This function is called by:
 18600 ;;		Interrupt level 1
 18601 ;; This function uses a non-reentrant model
 18602 ;;
 18603                           
 18604  0004                     _ISR:	
 18605                           
 18606                           ;incstack = 0
 18607                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18608  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18609  0005  3180               	pagesel	$
 18610  0006  0020               	movlb	0	; select bank0
 18611  0007  087F               	movf	127,w
 18612  0008  00F1               	movwf	??_ISR
 18613                           
 18614                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18615  0009  198B               	btfsc	11,3	;volatile
 18616  000A  1C0B               	btfss	11,0	;volatile
 18617  000B  2813               	goto	i1l1203
 18618  000C  0027               	movlb	7	; select bank7
 18619  000D  1D16               	btfss	22,2	;volatile
 18620  000E  2813               	goto	i1l1203
 18621                           
 18622                           ;MCU_B1.c: 116: IOC_ISR();
 18623  000F  319D  2537  3180   	fcall	_IOC_ISR
 18624                           
 18625                           ;MCU_B1.c: 117: }
 18626  0012  281B               	goto	i1l1206
 18627  0013                     i1l1203:	
 18628                           
 18629                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 18630  0013  0021               	movlb	1	; select bank1
 18631  0014  1C11               	btfss	17,0	;volatile
 18632  0015  281B               	goto	i1l1206
 18633  0016  0020               	movlb	0	; select bank0
 18634  0017  1C11               	btfss	17,0	;volatile
 18635  0018  281B               	goto	i1l1206
 18636                           
 18637                           ;MCU_B1.c: 126: TMR1_ISR();
 18638  0019  3191  2189         	fcall	_TMR1_ISR
 18639  001B                     i1l1206:	
 18640                           ;MCU_B1.c: 127: }
 18641                           ;MCU_B1.c: 143: return;
 18642                           
 18643  001B  0871               	movf	??_ISR,w
 18644  001C  0020               	movlb	0	; select bank0
 18645  001D  00FF               	movwf	127
 18646  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 18647  001F  0009               	retfie
 18648  0020                     __end_of_ISR:	
 18649                           
 18650                           	psect	text138
 18651  1189                     __ptext138:	
 18652 ;; *************** function _TMR1_ISR *****************
 18653 ;; Defined at:
 18654 ;;		line 231 in file "../src/MCU_B1.c"
 18655 ;; Parameters:    Size  Location     Type
 18656 ;;		None
 18657 ;; Auto vars:     Size  Location     Type
 18658 ;;		None
 18659 ;; Return value:  Size  Location     Type
 18660 ;;		None               void
 18661 ;; Registers used:
 18662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18663 ;; Tracked objects:
 18664 ;;		On entry : 0/0
 18665 ;;		On exit  : 0/0
 18666 ;;		Unchanged: 0/0
 18667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18672 ;;Total ram usage:        0 bytes
 18673 ;; Hardware stack levels used:    1
 18674 ;; Hardware stack levels required when called:    1
 18675 ;; This function calls:
 18676 ;;		_DimmerLights_MOSFET_TMR_1
 18677 ;; This function is called by:
 18678 ;;		_ISR
 18679 ;; This function uses a non-reentrant model
 18680 ;;
 18681                           
 18682                           
 18683                           ;psect for function _TMR1_ISR
 18684  1189                     _TMR1_ISR:	
 18685                           
 18686                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 18687                           
 18688                           ;incstack = 0
 18689                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18690  1189  30FA               	movlw	250
 18691  118A  0020               	movlb	0	; select bank0
 18692  118B  0097               	movwf	23	;volatile
 18693                           
 18694                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 18695  118C  3038               	movlw	56
 18696  118D  0096               	movwf	22	;volatile
 18697                           
 18698                           ;MCU_B1.c: 235: TMR1IF = 0;
 18699  118E  1011               	bcf	17,0	;volatile
 18700                           
 18701                           ;MCU_B1.c: 240: DimmerLights_MOSFET_TMR_1();
 18702  118F  3196  264D  3191   	fcall	_DimmerLights_MOSFET_TMR_1
 18703                           
 18704                           ;MCU_B1.c: 254: Timer1.Count++;
 18705  1192  3001               	movlw	1
 18706  1193  0022               	movlb	2	; select bank2
 18707  1194  07A4               	addwf	(_Timer1^(0+256)+1),f
 18708  1195  3000               	movlw	0
 18709  1196  3DA5               	addwfc	((_Timer1+1)^(0+256)+1),f
 18710                           
 18711                           ;MCU_B1.c: 255: if (Timer1.Count == (int)(20*10)) {
 18712  1197  3001               	movlw	1
 18713  1198  3E23               	addlw	_Timer1& (0+255)
 18714  1199  0086               	movwf	6
 18715  119A  3001               	movlw	1	; select bank2/3
 18716  119B  0087               	movwf	7
 18717  119C  3F40               	moviw [0]fsr1
 18718  119D  3AC8               	xorlw	200
 18719  119E  1D03               	skipz
 18720  119F  29A2               	goto	u744_25
 18721  11A0  3F41               	moviw [1]fsr1
 18722  11A1  3A00               	xorlw	0
 18723  11A2                     u744_25:	
 18724  11A2  1D03               	skipz
 18725  11A3  0008               	return
 18726                           
 18727                           ;MCU_B1.c: 256: Timer1.Count = 0;
 18728  11A4  01A4               	clrf	(_Timer1^(0+256)+1)
 18729  11A5  01A5               	clrf	((_Timer1+1)^(0+256)+1)
 18730                           
 18731                           ;MCU_B1.c: 257: Timer1.Timeout = 1;
 18732  11A6  1423               	bsf	_Timer1^(0+256),0
 18733  11A7  0008               	return
 18734  11A8                     __end_of_TMR1_ISR:	
 18735                           
 18736                           	psect	text139
 18737  164D                     __ptext139:	
 18738 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 18739 ;; Defined at:
 18740 ;;		line 1192 in file "../src/Dimmer_B1.c"
 18741 ;; Parameters:    Size  Location     Type
 18742 ;;		None
 18743 ;; Auto vars:     Size  Location     Type
 18744 ;;		None
 18745 ;; Return value:  Size  Location     Type
 18746 ;;		None               void
 18747 ;; Registers used:
 18748 ;;		wreg, status,2, status,0
 18749 ;; Tracked objects:
 18750 ;;		On entry : 0/0
 18751 ;;		On exit  : 0/0
 18752 ;;		Unchanged: 0/0
 18753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18758 ;;Total ram usage:        1 bytes
 18759 ;; Hardware stack levels used:    1
 18760 ;; This function calls:
 18761 ;;		Nothing
 18762 ;; This function is called by:
 18763 ;;		_TMR1_ISR
 18764 ;; This function uses a non-reentrant model
 18765 ;;
 18766                           
 18767                           
 18768                           ;psect for function _DimmerLights_MOSFET_TMR_1
 18769  164D                     _DimmerLights_MOSFET_TMR_1:	
 18770                           
 18771                           ;Dimmer_B1.c: 1193: if (DimmerIntr1.Start == 1) {
 18772                           
 18773                           ;incstack = 0
 18774                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 18775  164D  0021               	movlb	1	; select bank1
 18776  164E  1D68               	btfss	_DimmerIntr1^(0+128),2
 18777  164F  2E5A               	goto	i1l7007
 18778                           
 18779                           ;Dimmer_B1.c: 1194: DimmerIntr1.Count++;
 18780  1650  3001               	movlw	1
 18781  1651  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18782  1652  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18783  1653  07E9               	addwf	(_DimmerIntr1^(0+128)+1),f
 18784                           
 18785                           ;Dimmer_B1.c: 1195: if (DimmerIntr1.Count >= ((char)(70*0.8)) + 1) {
 18786  1654  3039               	movlw	57
 18787  1655  0269               	subwf	(_DimmerIntr1^(0+128)+1),w
 18788  1656  1C03               	skipc
 18789  1657  2E5A               	goto	i1l7007
 18790                           
 18791                           ;Dimmer_B1.c: 1196: DimmerIntr1.Count = 0;
 18792  1658  01E9               	clrf	(_DimmerIntr1^(0+128)+1)
 18793                           
 18794                           ;Dimmer_B1.c: 1197: DimmerIntr1.Start = 0;
 18795  1659  1168               	bcf	_DimmerIntr1^(0+128),2
 18796  165A                     i1l7007:	
 18797                           
 18798                           ;Dimmer_B1.c: 1198: }
 18799                           ;Dimmer_B1.c: 1199: }
 18800                           ;Dimmer_B1.c: 1201: if (DimmerIntr1.GO == 1) {
 18801  165A  1C68               	btfss	_DimmerIntr1^(0+128),0
 18802  165B  2E67               	goto	i1l856
 18803                           
 18804                           ;Dimmer_B1.c: 1202: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 18805  165C  086C               	movf	(_DimmerIntr1^(0+128)+4),w
 18806  165D  0269               	subwf	(_DimmerIntr1^(0+128)+1),w
 18807  165E  1C03               	skipc
 18808  165F  0008               	return
 18809                           
 18810                           ;Dimmer_B1.c: 1203: DimmerIntr1.GO = 0;
 18811  1660  1068               	bcf	_DimmerIntr1^(0+128),0
 18812                           
 18813                           ;Dimmer_B1.c: 1204: DimmerIntr1.Tune = 1;
 18814  1661  14E8               	bsf	_DimmerIntr1^(0+128),1
 18815                           
 18816                           ;Dimmer_B1.c: 1206: if (DimmerIntr1.ControlStatus == 1) {
 18817  1662  1DE8               	btfss	_DimmerIntr1^(0+128),3
 18818  1663  0008               	return
 18819                           
 18820                           ;Dimmer_B1.c: 1207: RB1 = 0;
 18821  1664  0020               	movlb	0	; select bank0
 18822  1665  108D               	bcf	13,1	;volatile
 18823                           
 18824                           ;Dimmer_B1.c: 1209: }
 18825                           ;Dimmer_B1.c: 1210: }
 18826                           ;Dimmer_B1.c: 1211: } else {
 18827  1666  0008               	return
 18828  1667                     i1l856:	
 18829                           
 18830                           ;Dimmer_B1.c: 1212: if (DimmerIntr1.Tune == 1) {
 18831  1667  1CE8               	btfss	_DimmerIntr1^(0+128),1
 18832  1668  0008               	return
 18833                           
 18834                           ;Dimmer_B1.c: 1213: DimmerIntr1.Tune = 0;
 18835  1669  10E8               	bcf	_DimmerIntr1^(0+128),1
 18836                           
 18837                           ;Dimmer_B1.c: 1214: DimmerIntr1.TuneTime++;
 18838  166A  3001               	movlw	1
 18839  166B  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18840  166C  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18841  166D  07EA               	addwf	(_DimmerIntr1^(0+128)+2),f
 18842                           
 18843                           ;Dimmer_B1.c: 1215: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 18844  166E  086B               	movf	(_DimmerIntr1^(0+128)+3),w
 18845  166F  026A               	subwf	(_DimmerIntr1^(0+128)+2),w
 18846  1670  1C03               	skipc
 18847  1671  0008               	return
 18848                           
 18849                           ;Dimmer_B1.c: 1216: DimmerIntr1.TuneTime = 0;
 18850  1672  01EA               	clrf	(_DimmerIntr1^(0+128)+2)
 18851                           
 18852                           ;Dimmer_B1.c: 1217: if (DimmerIntr1.Dimming_Sw == 1) {
 18853  1673  1E68               	btfss	_DimmerIntr1^(0+128),4
 18854  1674  2E8B               	goto	i1l862
 18855                           
 18856                           ;Dimmer_B1.c: 1218: if (DimmerIntr1.Dimming_Status == 0) {
 18857  1675  1AE8               	btfsc	_DimmerIntr1^(0+128),5
 18858  1676  2E82               	goto	i1l7031
 18859                           
 18860                           ;Dimmer_B1.c: 1219: if (DimmerIntr1.DimmingValue < ((char)(70*0.8))) {
 18861  1677  3038               	movlw	56
 18862  1678  026C               	subwf	(_DimmerIntr1^(0+128)+4),w
 18863  1679  1803               	skipnc
 18864  167A  2E80               	goto	i1l864
 18865                           
 18866                           ;Dimmer_B1.c: 1220: DimmerIntr1.DimmingValue++;
 18867  167B  3001               	movlw	1
 18868  167C  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18869  167D  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18870  167E  07EC               	addwf	(_DimmerIntr1^(0+128)+4),f
 18871                           
 18872                           ;Dimmer_B1.c: 1221: } else {
 18873  167F  0008               	return
 18874  1680                     i1l864:	
 18875                           
 18876                           ;Dimmer_B1.c: 1222: DimmerIntr1.Dimming_Status = 1;
 18877  1680  16E8               	bsf	_DimmerIntr1^(0+128),5
 18878                           
 18879                           ;Dimmer_B1.c: 1223: }
 18880                           ;Dimmer_B1.c: 1224: } else {
 18881  1681  0008               	return
 18882  1682                     i1l7031:	
 18883                           
 18884                           ;Dimmer_B1.c: 1225: if (DimmerIntr1.DimmingValue > ((char)(15*0.8))) {
 18885  1682  300D               	movlw	13
 18886  1683  026C               	subwf	(_DimmerIntr1^(0+128)+4),w
 18887  1684  1C03               	skipc
 18888  1685  2E89               	goto	i1l867
 18889                           
 18890                           ;Dimmer_B1.c: 1226: DimmerIntr1.DimmingValue--;
 18891  1686  3001               	movlw	1
 18892  1687  02EC               	subwf	(_DimmerIntr1^(0+128)+4),f
 18893                           
 18894                           ;Dimmer_B1.c: 1227: } else {
 18895  1688  0008               	return
 18896  1689                     i1l867:	
 18897                           
 18898                           ;Dimmer_B1.c: 1228: DimmerIntr1.Dimming_Status = 0;
 18899  1689  12E8               	bcf	_DimmerIntr1^(0+128),5
 18900                           
 18901                           ;Dimmer_B1.c: 1229: }
 18902                           ;Dimmer_B1.c: 1230: }
 18903                           ;Dimmer_B1.c: 1231: } else if (DimmerIntr1.Dimming_RF == 1) {
 18904  168A  0008               	return
 18905  168B                     i1l862:	
 18906  168B  1F68               	btfss	_DimmerIntr1^(0+128),6
 18907  168C  0008               	return
 18908                           
 18909                           ;Dimmer_B1.c: 1232: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 18910  168D  086D               	movf	(_DimmerIntr1^(0+128)+5),w
 18911  168E  026C               	subwf	(_DimmerIntr1^(0+128)+4),w
 18912  168F  1803               	skipnc
 18913  1690  2E96               	goto	i1l7039
 18914                           
 18915                           ;Dimmer_B1.c: 1233: DimmerIntr1.DimmingValue++;
 18916  1691  3001               	movlw	1
 18917  1692  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18918  1693  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18919  1694  07EC               	addwf	(_DimmerIntr1^(0+128)+4),f
 18920                           
 18921                           ;Dimmer_B1.c: 1234: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 18922  1695  0008               	return
 18923  1696                     i1l7039:	
 18924  1696  086C               	movf	(_DimmerIntr1^(0+128)+4),w
 18925  1697  026D               	subwf	(_DimmerIntr1^(0+128)+5),w
 18926  1698  1803               	skipnc
 18927  1699  2E9D               	goto	i1l873
 18928                           
 18929                           ;Dimmer_B1.c: 1235: DimmerIntr1.DimmingValue--;
 18930  169A  3001               	movlw	1
 18931  169B  02EC               	subwf	(_DimmerIntr1^(0+128)+4),f
 18932                           
 18933                           ;Dimmer_B1.c: 1236: } else {
 18934  169C  0008               	return
 18935  169D                     i1l873:	
 18936                           
 18937                           ;Dimmer_B1.c: 1237: DimmerIntr1.Dimming_RF = 0;
 18938  169D  1368               	bcf	_DimmerIntr1^(0+128),6
 18939  169E  0008               	return
 18940  169F                     __end_of_DimmerLights_MOSFET_TMR_1:	
 18941                           
 18942                           	psect	text140
 18943  1D37                     __ptext140:	
 18944 ;; *************** function _IOC_ISR *****************
 18945 ;; Defined at:
 18946 ;;		line 377 in file "../src/MCU_B1.c"
 18947 ;; Parameters:    Size  Location     Type
 18948 ;;		None
 18949 ;; Auto vars:     Size  Location     Type
 18950 ;;		None
 18951 ;; Return value:  Size  Location     Type
 18952 ;;		None               void
 18953 ;; Registers used:
 18954 ;;		status,2, status,0, pclath, cstack
 18955 ;; Tracked objects:
 18956 ;;		On entry : 0/0
 18957 ;;		On exit  : 0/0
 18958 ;;		Unchanged: 0/0
 18959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18964 ;;Total ram usage:        0 bytes
 18965 ;; Hardware stack levels used:    1
 18966 ;; Hardware stack levels required when called:    1
 18967 ;; This function calls:
 18968 ;;		_DimmerLights_MOSFET_IOC_1
 18969 ;; This function is called by:
 18970 ;;		_ISR
 18971 ;; This function uses a non-reentrant model
 18972 ;;
 18973                           
 18974                           
 18975                           ;psect for function _IOC_ISR
 18976  1D37                     _IOC_ISR:	
 18977                           
 18978                           ;MCU_B1.c: 378: IOCBF2 = 0;
 18979                           
 18980                           ;incstack = 0
 18981                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 18982  1D37  0027               	movlb	7	; select bank7
 18983  1D38  1116               	bcf	22,2	;volatile
 18984                           
 18985                           ;MCU_B1.c: 379: IOCIF = 0;
 18986  1D39  100B               	bcf	11,0	;volatile
 18987                           
 18988                           ;MCU_B1.c: 381: if (myMain.PowerON == 1) {
 18989  1D3A  0021               	movlb	1	; select bank1
 18990  1D3B  1C2E               	btfss	_myMain^(0+128),0
 18991  1D3C  0008               	return
 18992                           
 18993                           ;MCU_B1.c: 387: DimmerLights_MOSFET_IOC_1();
 18994  1D3D  319E  260A         	fcall	_DimmerLights_MOSFET_IOC_1
 18995  1D3F  0008               	return
 18996  1D40                     __end_of_IOC_ISR:	
 18997                           
 18998                           	psect	text141
 18999  1E0A                     __ptext141:	
 19000 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 19001 ;; Defined at:
 19002 ;;		line 1245 in file "../src/Dimmer_B1.c"
 19003 ;; Parameters:    Size  Location     Type
 19004 ;;		None
 19005 ;; Auto vars:     Size  Location     Type
 19006 ;;		None
 19007 ;; Return value:  Size  Location     Type
 19008 ;;		None               void
 19009 ;; Registers used:
 19010 ;;		None
 19011 ;; Tracked objects:
 19012 ;;		On entry : 0/0
 19013 ;;		On exit  : 0/0
 19014 ;;		Unchanged: 0/0
 19015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19020 ;;Total ram usage:        0 bytes
 19021 ;; Hardware stack levels used:    1
 19022 ;; This function calls:
 19023 ;;		Nothing
 19024 ;; This function is called by:
 19025 ;;		_IOC_ISR
 19026 ;; This function uses a non-reentrant model
 19027 ;;
 19028                           
 19029                           
 19030                           ;psect for function _DimmerLights_MOSFET_IOC_1
 19031  1E0A                     _DimmerLights_MOSFET_IOC_1:	
 19032                           
 19033                           ;Dimmer_B1.c: 1246: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 19034                           
 19035                           ;incstack = 0
 19036                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 19037  1E0A  0021               	movlb	1	; select bank1
 19038  1E0B  1968               	btfsc	_DimmerIntr1^(0+128),2
 19039  1E0C  0008               	return
 19040  1E0D  0020               	movlb	0	; select bank0
 19041  1E0E  1D0D               	btfss	13,2	;volatile
 19042  1E0F  0008               	return
 19043                           
 19044                           ;Dimmer_B1.c: 1247: DimmerIntr1.Start = 1;
 19045  1E10  0021               	movlb	1	; select bank1
 19046  1E11  1568               	bsf	_DimmerIntr1^(0+128),2
 19047                           
 19048                           ;Dimmer_B1.c: 1248: DimmerIntr1.GO = 1;
 19049  1E12  1468               	bsf	_DimmerIntr1^(0+128),0
 19050                           
 19051                           ;Dimmer_B1.c: 1250: if (DimmerIntr1.ControlStatus == 1) {
 19052  1E13  1DE8               	btfss	_DimmerIntr1^(0+128),3
 19053  1E14  0008               	return
 19054                           
 19055                           ;Dimmer_B1.c: 1251: RB1 = 1;
 19056  1E15  0020               	movlb	0	; select bank0
 19057  1E16  148D               	bsf	13,1	;volatile
 19058  1E17  0008               	return
 19059  1E18                     __end_of_DimmerLights_MOSFET_IOC_1:	
 19060  007E                     btemp	set	126	;btemp
 19061  007E                     pic14e$flags	set	126
 19062  007E                     wtemp	set	126
 19063  007E                     wtemp0	set	126
 19064  0080                     wtemp1	set	128
 19065  0082                     wtemp2	set	130
 19066  0084                     wtemp3	set	132
 19067  0086                     wtemp4	set	134
 19068  0088                     wtemp5	set	136
 19069  007F                     wtemp6	set	127
 19070  007E                     ttemp	set	126
 19071  007E                     ttemp0	set	126
 19072  0081                     ttemp1	set	129
 19073  0084                     ttemp2	set	132
 19074  0087                     ttemp3	set	135
 19075  007F                     ttemp4	set	127
 19076  007E                     ltemp	set	126
 19077  007E                     ltemp0	set	126
 19078  0082                     ltemp1	set	130
 19079  0086                     ltemp2	set	134
 19080  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         229
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     77      78
    BANK1            80      0      79
    BANK2            80      4      77
    BANK3            80      0      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSw_Main->_setBuz
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    ___ftmul->___ftpack
    _getDelayOff_GO->_DelayOffPointSelect
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  149476
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4853
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4853
                                             62 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4367
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4367
                                              9 COMMON     1     1      0
                                              8 BANK0      2     2      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   46773
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   46773
                                             75 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   42421
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4656
                                             62 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   37493
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11076
                                             70 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21305
                                             62 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     197
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    2025
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      26
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1188
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   13142
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    3532
                                              9 COMMON     1     1      0
                                              6 BANK0      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   61455
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   61170
                                             74 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   39885
                                             70 BANK0      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3786
                                             62 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      24
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   20942
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3226
                                             62 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              3 COMMON     3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5043
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5043
                                             62 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2803
                                             58 BANK0      4     3      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1905
                                              6 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     162      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     162      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Jan 05 17:05:02 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1F97  
                          ___bmul@product 0074                 getMain_Lights_Count@count 0072  
                                      l84 16CE                                        l94 15A8  
                                      l86 16E0                                        l95 15A4  
                                      l96 1594                                        l98 15A2  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 120C  
                                      _WR 0CA9                              ___awdiv@sign 0021  
                                      _Sw 007B                       ___wmul@multiplicand 0074  
                    _getDimmerLights_Line 1D2F                    __end_of_setDelayOff_GO 07FB  
                            ___ftadd@exp1 0045                              ___ftadd@exp2 0044  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0A02  
                    _setDimmerLights_Line 1D5B                              ___ftadd@sign 0043  
                                     l300 108B                                       l231 09D9  
                    _setDimmerLights_SwOn 1397                                       l343 1233  
                                     l523 0AD3                                       l299 1089  
                                     l673 1E08                                       l776 112D  
                                     _GIE 005F                                       _CRC 00C8  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0007                                       _RB1 0069  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CD  
                                     _RC1 0071                                       _RB3 006B  
                                     _RA6 0066                                       _RC3 0073  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0128                                       _Cmd 00C9  
            getDimmerLights_Status@lights 0074                                       _Sw1 01E3  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1096  
                   _Buzzer_Initialization 1CB9                           __end_of_ADC_Set 1D20  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0075       __end_of_setDimmerIntr_ControlStatus 1FAC  
             _setDimmerIntr_ControlStatus 1F97                         ??_getSw_KeyStatus 0072  
                                    ?_ISR 0070                              ___ftdiv@cntr 0030  
                         __end_of_IOC_ISR 1D40                     _setDimmerLights_OnOff 06B6  
        setDimmerLights_DimmingRun@lights 0076                                Load_Main@i 0024  
                            ___ftdiv@sign 0035                                      l1241 132A  
                                    l2123 1E66                                      l1255 129E  
                                    l1264 15F4                                      l2153 1393  
                                    l1506 1F96                                      l2138 0BBB  
                                    l1620 007D                                      l1621 0078  
                                    l2093 06B2                                      l1470 12F7  
                                    l2166 0B49                                      l1439 1470  
                                    l1465 12E2                                      l1617 01DF  
                                    l2097 0619                                      l1466 12FB  
                                    l2098 065A                                      l1627 01BB  
                                    l1619 0081                                      l1628 01B9  
                         __end_of_IOC_Set 1D79                                      l2447 1070  
                                    l1497 05F5                                      l2642 1157  
                                    l2803 0841                                      l2467 0349  
                                    l2469 0226                                      l1773 0E92  
                                    l2832 03F1                                      l2809 0858  
                                    l6201 1F84                                      l6025 07AD  
                                    l1778 0E8C                                      l6035 07DD  
                                    l6205 1F91                                      l6071 17EB  
                                    l6039 07F1                                      l5601 082D  
                                    l6171 1244                                      l6421 14C3  
                                    l7141 15B5                                      l6173 124F  
                                    l6157 1143                                      l5607 0846  
                                    l5703 1EE2                                      l6415 14B9  
                                    l6159 1148                                      l5609 084E  
                                    l5707 1EE8                                      l7147 15C9  
                                    l9011 06AB                     _setDimmerLights_SwOff 1402  
                                    l5741 0381                                      l5813 0D6A  
                                    l6453 1E89                                      l6429 14DA  
                                    l5807 0D54                                      l6455 1E8E  
                                    l8311 10D4                                      l9031 107B  
                                    l8153 16FD                                      l5593 0817  
                                    l5737 037A                                      l6449 1E83  
                                    l8171 171C                                      l5771 03D0  
                                    l5747 0390                                      l5835 0DC4  
                                    l5827 0DAB                                      l5907 0CCF  
                                    l9131 112F                                      l7427 1151  
                                    l8315 10DA                                      l8331 11FC  
                                    l6803 1EFC                                      l9027 1075  
                                    l9043 0211                                      l9211 0BFE  
                                    l9203 0BDB                                      l8181 1737  
                                    l6629 1F55                                      l5597 081E  
                                    l8229 11D3                                      l5765 03BD  
                                    l5941 0D34                                      l5933 0D1A  
                                    l5925 0CFF                                      l6901 13F2  
                                    l8309 10D1                                      l8325 11F3  
                                    l8421 1553                                      l7447 1580  
                                    l8159 1708                                      l5599 0828  
                                    l5783 0403                                      l5767 03C7  
                                    l5759 03AA                                      l5935 0D23  
                                    l5927 0D0D                                      l5871 0F06  
                                    l5855 0EC3                                      l8327 11F6  
                                    l8431 1563                                      l8415 154A  
                                    l9231 0C32                                      l9215 0C07  
                                    l8185 173F                                      l8177 172E  
                                    l8169 1710                                      l5777 03E3  
                                    l5769 03CC                                      l5937 0D26  
                                    l5849 0EAD                                      l6905 13FB  
                                    l8425 155A                                      l8417 154D  
                                    l8601 0882                                      l8353 1518  
                                    l8291 142F                                      l5787 0415  
                                    l5779 03ED                                      l5883 0F22  
                                    l5867 0EFE                                      l9155 04BA  
                                    l9331 00D6                                      l8427 155D  
                                    l8603 0885                                      l8531 0B32  
                                    l9083 02C4                                      l9059 0254  
                                    l8277 13BE                                      l5797 0430  
                                    l9325 00A4                                      l9309 0080  
                                    l8365 0C4F                                      l8533 0B36  
                                    l8525 0AF0                                      l9069 0286  
                                    l9093 02F6                                      l9245 149C  
                                    l8279 13C3                                      l5879 0F1A  
                                    l6759 1289                                      l6943 1E5F  
                                    l8623 089A                                      l8607 088B  
                                    l8551 09B3                                      l8527 0AF6  
                                    l8519 0ADB                                      l9263 1452  
                                    l8713 1615                                      l8393 121F  
                                    l8625 08B0                                      l8545 09AA  
                                    l8369 0C54                                      l8529 0B11  
                                    l8537 0B3A                                      l8707 076C  
                                    l9419 01CE                                      l9363 015D  
                                    l9371 0185                                      l9291 005F  
                                    l8387 1216                                      l8571 09E3  
                                    l8547 09AD                                      l8379 0CA2  
                                    l8485 12DE                                      l6981 1D35  
                                    l9453 054F                                      l6893 13D4  
                                    l9381 019B                                      l9357 0150  
                                    l8389 1219                                      l8565 09C2  
                                    l9541 176A                     _myMain_Initialization 0800  
                                    l8495 12F3                                      l8487 12E6  
                                    l9447 0540                                      l6895 13E0  
                                    l9367 0179                                      l8583 09F6  
                                    l8575 09E9                                      l8807 1F0D  
                                    l8673 0701                                      l9465 0586  
                                    l9457 055E                                      l8577 09ED  
                                    l8569 09E0                                      l8753 0B60  
                                    l8921 0E61                                      l9545 1775  
                                    l9483 05C8                                      l9467 0561  
                                    l8579 09F0                                      l8923 0E63  
                                    l8693 0742                                      l8677 0718  
                                    l8845 0A2A                                      l9485 05A3  
                                    l9469 058E                                      l8781 0B97  
                                    l8765 0B79                                      l8933 0E78  
                                    l8687 0737                                      l8847 0A30  
                                    l9487 05D0                                      l9495 05EB  
                                    l8935 0E79                                      l8857 0A58  
                                    l9489 05DA                                      l8769 0B82  
                                    l8873 10F2                                      _CFGS 0CAE  
                                    l8859 0A5E                                      l8891 0E02  
                                    l8867 10EA                                      l8869 10ED  
                                    l8983 0669                              __CFG_WDTE$ON 0000  
                                    l8969 0655                                      l8997 0693  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5015 0CD6                                      u4305 083C  
                                    u4325 0849                                      u5045 0D00  
                                    u4355 085F                                      u5075 0D1B  
                                    u5235 07B9                                      _PEIE 005E  
                                    u4285 0823                                      u5270 17AB  
                                    u4715 03D1                                      u5275 17A9  
                                    u6405 13F3                                      u4655 03AB  
                                    u4815 0D7C                                      u5375 1239  
                                    u4745 03E4                                      u4825 0D8C  
                                    u4905 0EDF                                      u7305 115D  
                                    u4835 0DAC                                      u4685 03BE  
                                    u4845 0DBB                                      u4925 0F07  
                                    u6365 13D7                                      u7335 1576  
                                    u4855 0DC5                                      u4935 0F0D  
                                    u6385 13E1                                      u7515 1321  
                                    u6395 13EB                                      u4965 0F23  
                                    u4975 0F29                                      u4895 0ECF  
                                    u7295 1158                                      u9305 1FFA  
                                    u8545 1713                                      u8565 171D  
                                    u8575 1727                                      u8585 172F  
                                    u8675 1FD0                                      u9755 0E49  
                                    _LWLO 0CAD                                      u9775 0E69  
                                    u9865 0635                                      u9895 0682  
                                    _RSSI 00CE                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 10AE  
              _setDimmerLights_DimmingRun 1096                                      _Buz1 00BC  
                                    _Load 012A                                      _Temp 00D6  
                                    _main 1746                              ___ftpack@arg 0072  
                     __end_of_DlyOff_Main 0ADA                           __end_of_RF_Main 1CC5  
                            ___ftpack@exp 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1D83                                      ltemp 007E  
           __size_of_setRF_Initialization 000A                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0CB6                         ___bmul@multiplier 0075  
                            ___ftmul@cntr 0034                              ___ftmul@sign 0035  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2159 0075  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0071  
                            ___fttol@exp1 0053                              ___fttol@lval 004F  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 1F5B  
__size_of_getDimmerLights_Allow_Condition 0013         ??_getDimmerLights_Allow_Condition 0073  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1F48  
                  _getDimmerLights_Status 1E34                        ??_getDimmer_LoadGO 0072  
                        __end_of_LED_Main 1CD8                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CB                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005E  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0169  
                         __end_of___awdiv 1746                           __end_of___ftadd 0448  
                         __end_of___ftdiv 0DE6                           __end_of___ftneg 1D49  
                                   u10235 0BEB                           __end_of___ftmul 0F4A  
                                   u10335 1493                                     u10345 14A2  
                         ___awdiv@divisor 0072                                     u10525 00A2  
                                   u10285 0C1F                                     u10535 00D4  
                                   _T1CON 0018                                     u10625 018C  
                                   u10545 0109                                     u10385 1468  
                         __end_of___fttol 0D3D                                     u10750 058C  
                                   u10755 056A                                     u10780 05CE  
                                   u10785 05AC                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1402                                     i1l862 168B  
                                   i1l864 1680                                     i1l856 1667  
                                   i1l873 169D                                     i1l867 1689  
                         ___awdiv@counter 0020             __size_of_CC2500_FrequencyCabr 000B  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0073                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                   __end_of_Timeout_Counter 2000  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 0935  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 08D0  
                        __end_of_TMR1_ISR 11A8                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1DFD  
                                   _getAD 10E2                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 1EE0  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03D0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1D6F                        Flash_Memory_Read@i 0073  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0010  
           __end_of_setLED_Initialization 1EA0                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 17A1  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0060  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 17A1                       ?_setRF_DimmerLights 005E  
                        __end_of_Fosc_Set 1CDC            getMain_All_LightsStatus@status 0072  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0066  
                          _Exception_Main 0524                          ?_CC2500_WriteREG 0074  
                               ??_ADC_Set 0072                      _setSw_Initialization 1E26  
                                  ??_main 007A                             ___fttol@sign1 004E  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0072  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0ADA  
                          _setMemory_Data 1DC3                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 15FC  
                               ??_IOC_ISR 0070                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00E8                  _getMain_All_LightsStatus 1D27  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1FC1  
                 ??_Switch_Initialization 0077                    ?_setDimmerLights_OnOff 0066  
                    ??_setRF_DimmerLights 005F                                    ?_getAD 0072  
                       ??_getRF_KeyStatus 0072                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0A6B                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 007A                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0074  
                   _getDimmer_Load_Status 1D12                                 ??_WDT_Set 0072  
                        __end_of___awtoft 11EA                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 086F                  _getMain_All_Error_Status 12CF  
                                  _IOCBF2 1CB2                                    i1l1203 0013  
                                  i1l1206 001B                                    i1l7031 1682  
                                  i1l7007 165A                                    i1l7039 1696  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0074  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 019A  
                                  u744_25 11A2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 10AE  
                                  _WDTCON 0097                      Exception_Main@i_3427 002A  
                      DelayTime_1us@count 0072            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 005B             __end_of_CC2500_PowerOnInitial 1FEB  
                                  _Dimmer 0120                                    _DlySw1 0160  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1E90  
              __end_of_Mcu_Initialization 1F48                       __end_of_Buzzer_Main 15AF  
                                  _Memory 01BE                                    _Timer1 0123  
                                  ___bmul 1EE0                    __end_of_Exception_Main 05F6  
                    Load_Main@Load_Status 0023                      Exception_Main@lights 002C  
                                  ___wmul 114F                                 ??___awdiv 0076  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 000B  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 00D4  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E61  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 000F  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0072          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1E52                                    _s_data 00D5  
                  ??_setDimmerLights_SwOn 0079                                    _setLED 14AB  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0072  
                  __end_of_setMemory_Data 1DCE                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0022                                    _setBuz 169F  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1CBF  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1FC1          __end_of_setDimmerIntr_Dimming_Sw 1F6E  
                   ___ftmul@f3_as_product 0031                 _setDimmerLights_DimmingOn 1254  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1ED0               getMain_Lights_Count@status1 0073  
                   __end_of_SwPointSelect 1D97              __size_of_Flash_Memory_Modify 004D  
                 __size_of_LedPointSelect 000B           setDimmerIntr_Dimming_Sw@command 0072  
                     Flash_Memory_Write@i 0073              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1069               __size_of_CC2500_InitPATable 001D  
                     CC2500_TxData@loop_e 0077          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0047           getDimmerIntr_DimmingValue@value 0074  
         setDimmerIntr_DimmingValue@value 0072                                 ?_LED_Main 0070  
                              ___ftadd@f1 0039                                ___ftadd@f2 003C  
                    _getRF_KeyStatus$5080 0074                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 0026  
                              ___ftdiv@f3 0031                                ___ftneg@f1 0036  
                              ___awtoft@c 0020                       ___bmul@multiplicand 0072  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0026  
                              ___ftmul@f2 0029                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0046                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 11A8  
                           __end_of_getAD 10FC                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0073  
               setMemory_LoopSave@command 0073                        _LED_Initialization 1CD0  
                         _getSw_KeyStatus 1F02                 ??_setControl_Lights_Table 007A  
                      getRF_KeyStatus@key 0073                           ?_setMemory_Data 0072  
        ??_getDimmerLights_PercentToValue 0054           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 0064             ??_Flash_Memory_Initialization 005A  
              ?_DimmerLights_MOSFET_IOC_1 0070                      _getMain_Lights_Count 1D65  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01E5  
       setDimmerIntr_ControlStatus@lights 0074                ?_DimmerLights_MOSFET_TMR_1 0070  
                      __size_of_getBuz_GO 0010                 _setDimmerIntr_MaxmumValue 1DD9  
              __end_of_set_TimeoutCleared 0800           setDimmerIntr_MaxmumValue@lights 005C  
                      __size_of_getRxData 0073                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1E18  
                    __size_of_setLED_Main 0033                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0075                       _Temp_Initialization 1CC5  
                      ??_CC2500_WriteByte 0072                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1569  
                       ??_setRFSW_Control 0066               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1069                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1CC8  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 00CC                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0072                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1746  
                          _getDelayOff_GO 1E43                       _CC2500_WriteCommand 10C8  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 0060         __end_of_DimmerIntr_Initialization 1F36  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0BBD                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1D04                        __size_of_setTxData 00B6  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1D19  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 1472  
      __end_of_DimmerLights_SelectPointer 1DAD                _DimmerLights_SelectPointer 1DA2  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 1D8D  
       __end_of_DimmerLights_MOSFET_IOC_1 1E18                        _setRFSW_AdjControl 0C38  
                  __end_of_setProductData 1E26         __end_of_DimmerLights_MOSFET_TMR_1 169F  
           setDimmerLights_Dimming@lights 0065                                   _IOC_ISR 1D37  
                                 _IOC_Set 1D6F                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0063     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 12FD  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1F6E  
                  __size_of_CC2500_RxData 0061                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1CC2                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1D79  
         __end_of_setControl_Lights_Table 0B4A                           setRF_Main@error 006C  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 164D  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 1DD9                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0015  
       __size_of_setDimmerIntr_Dimming_Sw 0013                         __end_of_getBuz_GO 1EB0  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1E52            __end_of_getDimmerLights_Status 1E43  
                       __end_of_getRxData 0BBD                   __end_of_getSw_KeyStatus 1F13  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005E                            ??_setTemp_Main 005E  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 16F2                                   ___ftadd 0352  
                                 ___ftdiv 0D3D                                   ___ftneg 1D40  
                         __size_of___wmul 001D                                   ___ftmul 0E96  
                                 ___fttol 0CB6                       __end_of_Switch_Main 1D27  
                                 ___lwdiv 13CC                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1EF1  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 003A                      setRFSW_AdjControl@sw 0061  
                         __size_of_setBuz 0053                                   __ptext1 143A  
                                 __ptext2 0800                                   __ptext3 1472  
                                 __ptext4 0BBD                                   __ptext5 10E2  
                                 __ptext6 1ED0                                   __ptext7 0002  
                                 __ptext8 1066                                   __ptext9 0DE6  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0067  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 1330  
               __end_of_Flash_Memory_Read 1F82                   ??_setDimmerLights_SwOff 0074  
                              _setRF_Main 05F6                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1CCC                         _DimmerLights_Main 1117  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1CF1  
              __end_of_CC2500_ClearRXFIFO 1CE4                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1CE8                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006D  
                          _LedPointSelect 1DB8                       _DelayOffPointSelect 1D97  
                                 clrloop0 1CF8            __size_of_Switch_Initialization 0009  
           __end_of_Switch_Initialization 1D5B                      end_of_initialization 0047  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 12A5  
                           _DelayTime_1us 122F                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 12A5        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 1CF1                __end_of_setRF_TransceiveGO 1E80  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 1CF2  
                              _setSw_Main 01E5                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0026                         _CC2500_ReadStatus 120C  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1E90  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 086F                             _CC2500_TxData 099A  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 15AF  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1F82                       _Flash_Memory_Unlock 1D49  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1133                        _Mcu_Initialization 1F36  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1CE0  
                    __end_of_my_MainTimer 1472                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1DC3  
                __size_of_CC2500_WriteREG 0022          setDimmerIntr_DimmingValue@lights 0074  
        getDimmerIntr_DimmingValue@lights 0073                 __end_of_CC2500_InitSetREG 12CF  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 005F                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 122F                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 127B  
                        ??_Exception_Main 0079                            __end_of_IO_Set 10C8  
                    _setRF_Initialization 1D83                        _setMemory_LoopSave 1EC0  
                             _Switch_Main 1D20                         __size_of_LED_Main 0004  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1F02  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1FD6               ??_DimmerIntr_Initialization 0072  
                    ??_Mcu_Initialization 0073                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1EF1  
     __size_of_getDimmerIntr_DimmingValue 000D                      setRF_DimmerLights@on 005E  
                          __end_of___wmul 116C                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 0008          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C               ??_DimmerLights_MOSFET_IOC_1 0070  
           __size_of_setDimmerLights_Main 0069                            __end_of_setLED 14E5  
           __size_of_setDimmerLights_Line 000A             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 16F2               ??_DimmerLights_MOSFET_TMR_1 0070  
                    _CC2500_FrequencyCabr 1DCE                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0033                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 14E5  
                       __size_of_WDT_Main 0010                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 004B  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1D0B                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1189           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0E96                            ??_RF_RxDisable 0076  
  __end_of_getDimmerLights_PercentToValue 099A   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 0935                       __size_of_getLoad_AD 007B  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 07FB  
       __end_of_setDimmerIntr_MaxmumValue 1DE5                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0165  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0039  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 1066                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00CF  
                   setProductData@address 005D                       Exception_Main@count 0026  
                     Exception_Main@error 0027                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 000A  
        __end_of_getMain_All_LightsStatus 1D2F                                 _Tx_Length 00D2  
                             __pdataBANK4 0220                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 12FD  
                        _CC2500_SIDLEMode 1CE8                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1EB0                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK2 0169  
               setRF_TransceiveGO@command 0073                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 1F24                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0060  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1E0A  
                       ??_CC2500_WriteREG 0075                             ??_setRF_Learn 0072  
                           _DimmerLights1 0158                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 164D                     setDelayOff_GO@command 005E  
          __size_of_setLoad_AH_AL_Restore 001B                           ??_CC2500_RxData 0076  
           __end_of_setLoad_AH_AL_Restore 1117                  setRFSW_AdjControl@status 0060  
                         ??_CC2500_TxData 0076                                 __pnvBANK0 006D  
                          getRxData@error 006A               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 1CDC                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0028                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00C0                          ___lwdiv@dividend 0074  
                   DelayOffPointSelect@sw 0073                             _getCmd_Status 1E80  
                              setBuz@time 0024                           ??_setCmd_Status 0073  
                     setDelayOff_GO@value 005F                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 0022  
                  _setTemp_Initialization 1CB8                                 _getBuz_GO 1EA0  
                ?_setDimmerLights_Dimming 0063       __end_of_Flash_Memory_Initialization 0524  
             _Flash_Memory_Initialization 0448                                  ?___awdiv 0072  
                               __ptext100 1E43                                 __ptext101 1E80  
                               __ptext110 0CB6                                 __ptext102 15FC  
                               __ptext111 1D40                                 __ptext103 0F4A  
                               __ptext120 1CFD                                 __ptext112 0D3D  
                               __ptext104 1E70                                 __ptext121 1CB7  
                               __ptext113 0352                                 __ptext105 17A1  
                               __ptext130 1E34                                 __ptext122 1F24  
                               __ptext114 11C8                                 __ptext106 1D5B  
                               __ptext131 1DA2                                 __ptext123 1CCC  
                               __ptext115 080F                                 __ptext107 1DD9  
                               __ptext140 1D37                                 __ptext132 1CC8  
                               __ptext124 0A6B                                 __ptext116 1DFD  
                               __ptext108 1F5B                                 __ptext141 1E0A  
                               __ptext133 1CEC                                 __ptext125 1E18  
                               __ptext117 1F48                                 __ptext109 08D0  
                                ?___ftadd 0039                                 __ptext134 1D97  
                               __ptext126 1397                                 __ptext118 1D04  
                               __ptext135 1569                                 __ptext127 169F  
                               __ptext119 12CF                                 __ptext136 1CB9  
                               __ptext128 16F2                                 __ptext129 1402  
                               __ptext138 1189                                 __ptext139 164D  
                               _getRxData 0B4A                                  ?___ftdiv 0026  
                                ?___ftneg 0036                                  ?___ftmul 0026  
                                ?___fttol 0046                     __size_of_my_MainTimer 0038  
                                ?___lwdiv 0072                   __end_of_setRFSW_Control 1525  
                        ??_setProductData 005B             __size_of_setSw_Initialization 000E  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1CBC  
                           ??_setLog_Code 005E                  getDimmerLights_Line@line 0072  
                      __end_of_TouchPower 107E                       __size_of_setSw_Main 016D  
            CC2500_ReadStatus@status_addr 0075        __end_of_getDimmerIntr_DimmingValue 1E0A  
            ??_setDimmerIntr_DimmingValue 0073                _getDimmerIntr_DimmingValue 1DFD  
                  CC2500_WriteByte@loop_a 0073            __size_of_setDimmerLights_OnOff 00B9  
                               _r_address 00D3             __end_of_setDimmerLights_OnOff 076F  
          __size_of_setDimmerLights_SwOff 0038            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 143A              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 080F                            __size_of_getAD 001A  
                        ___lwdiv@quotient 0077                             _SwPointSelect 1D8D  
                     __end_of_setLED_Main 1363                          ??_getDelayOff_GO 0074  
                  ??_setRF_Initialization 0072               __end_of_Temp_Initialization 1CC8  
                       _CC2500_rfSettings 102F                            ___wmul@product 0076  
                                _LED_Main 1CD4                           SwPointSelect@sw 0073  
                               clear_ram0 1CF7                  CC2500_InitPATable@loop_d 0079  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 143A  
                               _setTxData 0F4A       __end_of_DimmerLights_Initialization 1D04  
             _DimmerLights_Initialization 1CFD                        _CC2500_ClearRXFIFO 1CE0  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1CE4  
                setRF_DimmerLights@lights 0062                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1F24                         ??_Timeout_Counter 0072  
                              ?_getBuz_GO 0072                  setRF_DimmerLights@status 0061  
    __size_of_setDimmerIntr_ControlStatus 0015               __size_of_setRFSW_AdjControl 007E  
     __size_of_setDimmerIntr_DimmingValue 000B                        _Flash_Memory_Write 127B  
                              ?_getRxData 0070                              ??_getLoad_AD 0076  
                                _TMR1_ISR 1189                    CC2500_InitSetREG@temp1 0020  
                  CC2500_InitSetREG@temp2 0021                              ??_getLoad_OK 0072  
                                _TMR1_Set 1DF1                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1E70  
                                _RF_Count 0126                      __end_of_RF_RxDisable 1E70  
                            ??_getTemp_AD 0076               __end_of_CC2500_WriteCommand 10E2  
                  ??_CC2500_FrequencyCabr 0078                                  _WDT_Main 1ED0  
                 DlyOff_Initialization@sw 0074                     getSw_KeyStatus@status 0073  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0072  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B0  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CA                              setSw_Main@sw 0079  
                             ??_Load_Main 0020                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0078                          __size_of_IOC_Set 000A  
            __end_of_Flash_Memory_Erasing 1DF1                            ?_SwPointSelect 0070  
                             getAD@adcon0 0075                               getAD@adcon1 0072  
                          setLED_Main@led 0076                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 1397                     _DlyOff_Initialization 1CEC  
       __size_of_getMain_All_LightsStatus 0008                      ??_CC2500_ClearRXFIFO 0076  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1FAC               setDimmerLights_OnOff@lights 0069  
                _setDimmerIntr_Dimming_Sw 1F5B                                  _Fosc_Set 1CD8  
                        __size_of_WDT_Set 000A                     setRFSW_Control@status 0067  
                      __end_of_getLoad_AD 0C38                        __end_of_getLoad_OK 1D0B  
                   _Switch_Initialization 1D52         __size_of_getMain_All_Error_Status 002E  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 14AB  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 107E                         getLoad_AD@channel 0020  
     __size_of_DimmerLights_SelectPointer 000B                      ??_setRF_TransceiveGO 0072  
            Flash_Memory_Initialization@i 005B                                  _SwDetect 00D1  
                             ??_Temp_Main 007A                          getCmd_Status@cmd 0073  
                        setCmd_Status@cmd 0072                         setRFSW_Control@sw 0068  
           _getMain_All_Error_Status$3416 0073             _getMain_All_Error_Status$3417 0075  
                __end_of_getDimmer_LoadGO 1D12                       _Load_Initialization 1CBC  
        ??_getDimmerLights_ValueToPercent 0054           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0075                              _setTemp_Main 0DE6  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0036  
                setDimmerLights_SwOn@idle 0027                                  ___awtoft 11C8  
                        ??_LedPointSelect 0072                                  ___ftpack 080F  
           __size_of_getMain_Lights_Count 000A                    getDimmer_LoadGO@loadgo 0072  
                       getTemp_AD@channel 0077                              ??_setRF_Main 006B  
                    CC2500_WriteREG@value 0074                               _setLED_Main 1330  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0007  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0075  
                        getDelayOff_GO@sw 0074             __end_of_getDimmer_Load_Status 1D19  
                        setDelayOff_GO@sw 0065                           ___lwdiv@divisor 0072  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0079  
                                __ptext10 1CC5                                  __ptext11 1CB8  
                                __ptext20 1069                                  __ptext12 1D20  
                                __ptext21 07FB                                  __ptext13 01E5  
                                __ptext30 0C38                                  __ptext22 1FEB  
                                __ptext14 1F13                                  __ptext31 1EB0  
                                __ptext23 1CC2                                  __ptext15 1254  
                                __ptext40 1FD6                                  __ptext32 1096  
                                __ptext24 05F6                                  __ptext16 1F02  
                                __ptext41 1CE8                                  __ptext33 1EF1  
                                __ptext25 0B4A                                  __ptext17 1D8D  
                                __ptext50 10C8                                  __ptext42 1525  
                                __ptext34 1EA0                                  __ptext26 1363  
                                __ptext18 1D52                                  __ptext51 1CDC  
                                __ptext43 12A5                                  __ptext35 1E61  
                                __ptext27 1EC0                                  __ptext19 1E26  
                                __ptext60 1D6F                                  __ptext52 1FC1  
                                __ptext44 116C                                  __ptext36 099A  
                                __ptext28 0ADA                                  __ptext61 1CD8  
                                __ptext53 107E                                  __ptext45 11EA  
                                __ptext37 086F                                  __ptext29 14E5  
                                __ptext70 1CBC                                  __ptext62 1D19  
                                __ptext54 1CBF                                  __ptext46 1DCE  
                                __ptext38 120C                                  __ptext71 10FC  
                                __ptext63 004B                                  __ptext55 1D83  
                                __ptext47 122F                                  __ptext39 1133  
                                __ptext80 1DC3                                  __ptext72 1CD4  
                                __ptext64 1D65                                  __ptext56 1F36  
                                __ptext48 1CE4                                  __ptext81 127B  
                                __ptext73 1330                                  __ptext65 1D12  
                                __ptext57 1D79                                  __ptext49 1CE0  
                                __ptext90 1DB8                                  __ptext82 1D49  
                                __ptext74 1CD0                                  __ptext66 1D0B  
                                __ptext58 1DF1                                  __ptext91 1FAC  
                                __ptext83 1F6E                                  __ptext75 1E90  
                                __ptext67 1E52                                  __ptext59 10AE  
                                __ptext92 1DAD                                  __ptext84 0524  
                                __ptext76 12FD                                  __ptext68 114F  
                                __ptext93 1F97                                  __ptext85 1D2F  
                                __ptext77 15AF                                  __ptext69 13CC  
                                __ptext94 076F                                  __ptext86 1117  
                                __ptext78 1DE5                                  __ptext95 1EE0  
                                __ptext87 0A02                                  __ptext79 0448  
                                __ptext96 1F82                                  __ptext88 06B6  
                                __ptext97 1D27                                  __ptext89 14AB  
                                __ptext98 0935                                  __ptext99 0E96  
                                __product 0220                   ??_setLED_Initialization 0076  
                ??_getDimmerLights_Status 0074              __end_of_getDimmerLights_Line 1D37  
            __end_of_setDimmerLights_Main 0A6B              __end_of_setDimmerLights_Line 1D65  
            __end_of_setDimmerLights_SwOn 13CC                              ??_setSw_Main 0028  
                  ??_setRF_TimeoutCleared 0072              ??_setDimmerLights_DimmingRun 0075  
                           setLED@command 0074                             __size_of_main 005B  
                             _setRF_Learn 1F13        __size_of_DimmerIntr_Initialization 0012  
                         ??_getCmd_Status 0072                  __end_of_CC2500_SIDLEMode 1CEC  
              setDimmerLights_Main@lights 006A               __end_of_DelayOffPointSelect 1DA2  
              CC2500_WriteCommand@command 0075                           _CC2500_ReadByte 1133  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 116C  
                __end_of_setMemory_Modify 1EC0                        __end_of_setRF_Main 06B6  
                             ??_getBuz_GO 0074               __size_of_Mcu_Initialization 0012  
      __size_of_DimmerLights_MOSFET_IOC_1 000E                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0069                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1FD6        __size_of_DimmerLights_MOSFET_TMR_1 0052  
                                main@argc 0169                                  main@argv 016B  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6063 0074  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 1525  
                __size_of_getSw_KeyStatus 0011        __end_of_setDimmerIntr_DimmingValue 1DB8  
              _setDimmerIntr_DimmingValue 1DAD               __end_of_Flash_Memory_Modify 15FC  
                             _setLog_Code 1363               __end_of_Flash_Memory_Unlock 1D52  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 11EA  
                      __end_of_setSw_Main 0352                     ??_Load_Initialization 0074  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0062                           setDelayOff_GO@j 0063  
                         setDelayOff_GO@k 0064                   ??_CC2500_PowerOnInitial 007A  
  __end_of_setDimmerLights_Initialization 1CB8   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1CB7                ?_setDimmerIntr_MaxmumValue 005A  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0072  
                  CC2500_InitPATable@temp 0078                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1CBF                               getLoad_AD@i 0023  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1DE5                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00D2  
         __end_of_DelayOff_Initialization 1CCC                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1CD0                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 076F  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0070  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005E                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 1254                   __end_of_CC2500_ReadByte 114F  
            __end_of_setSw_Initialization 1E34                           _Timeout_Counter 1FEB  
         __size_of_getDimmerLights_Status 000F           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1E61                __end_of_LED_Initialization 1CD4  
          __end_of_setTemp_Initialization 1CB9                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1CC2                     __end_of_CC2500_RxData 08D0  
                   __end_of_CC2500_TxData 0A02                     _setLoad_AH_AL_Restore 10FC  
                 __end_of_CC2500_PowerRST 1569  
