

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Mar 17 10:54:17 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	intentry,global,class=CODE,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,delta=2
   172                           	dabs	1,0x7E,2
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  0010                     	;# 
   189  0011                     	;# 
   190  0012                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0016                     	;# 
   194  0017                     	;# 
   195  0018                     	;# 
   196  0019                     	;# 
   197  001A                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  008C                     	;# 
   201  008D                     	;# 
   202  008E                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  0116                     	;# 
   220  0117                     	;# 
   221  011D                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0191                     	;# 
   226  0191                     	;# 
   227  0192                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0197                     	;# 
   234  0199                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019F                     	;# 
   245  020D                     	;# 
   246  0210                     	;# 
   247  0211                     	;# 
   248  0211                     	;# 
   249  0212                     	;# 
   250  0212                     	;# 
   251  0213                     	;# 
   252  0213                     	;# 
   253  0214                     	;# 
   254  0214                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0291                     	;# 
   263  0291                     	;# 
   264  0292                     	;# 
   265  0293                     	;# 
   266  0298                     	;# 
   267  0298                     	;# 
   268  0299                     	;# 
   269  029A                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  0010                     	;# 
   300  0011                     	;# 
   301  0012                     	;# 
   302  0015                     	;# 
   303  0016                     	;# 
   304  0016                     	;# 
   305  0017                     	;# 
   306  0018                     	;# 
   307  0019                     	;# 
   308  001A                     	;# 
   309  001B                     	;# 
   310  001C                     	;# 
   311  008C                     	;# 
   312  008D                     	;# 
   313  008E                     	;# 
   314  0090                     	;# 
   315  0091                     	;# 
   316  0092                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0099                     	;# 
   321  009A                     	;# 
   322  009B                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  0116                     	;# 
   331  0117                     	;# 
   332  011D                     	;# 
   333  018C                     	;# 
   334  018D                     	;# 
   335  018E                     	;# 
   336  0191                     	;# 
   337  0191                     	;# 
   338  0192                     	;# 
   339  0193                     	;# 
   340  0193                     	;# 
   341  0194                     	;# 
   342  0195                     	;# 
   343  0196                     	;# 
   344  0197                     	;# 
   345  0199                     	;# 
   346  019A                     	;# 
   347  019B                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019C                     	;# 
   352  019C                     	;# 
   353  019D                     	;# 
   354  019E                     	;# 
   355  019F                     	;# 
   356  020D                     	;# 
   357  0210                     	;# 
   358  0211                     	;# 
   359  0211                     	;# 
   360  0212                     	;# 
   361  0212                     	;# 
   362  0213                     	;# 
   363  0213                     	;# 
   364  0214                     	;# 
   365  0214                     	;# 
   366  0215                     	;# 
   367  0215                     	;# 
   368  0215                     	;# 
   369  0216                     	;# 
   370  0216                     	;# 
   371  0217                     	;# 
   372  0217                     	;# 
   373  0291                     	;# 
   374  0291                     	;# 
   375  0292                     	;# 
   376  0293                     	;# 
   377  0298                     	;# 
   378  0298                     	;# 
   379  0299                     	;# 
   380  029A                     	;# 
   381  0394                     	;# 
   382  0395                     	;# 
   383  0396                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395  0000                     	;# 
   396  0001                     	;# 
   397  0002                     	;# 
   398  0003                     	;# 
   399  0004                     	;# 
   400  0005                     	;# 
   401  0006                     	;# 
   402  0007                     	;# 
   403  0008                     	;# 
   404  0009                     	;# 
   405  000A                     	;# 
   406  000B                     	;# 
   407  000C                     	;# 
   408  000D                     	;# 
   409  000E                     	;# 
   410  0010                     	;# 
   411  0011                     	;# 
   412  0012                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0016                     	;# 
   416  0017                     	;# 
   417  0018                     	;# 
   418  0019                     	;# 
   419  001A                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  0090                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0095                     	;# 
   429  0096                     	;# 
   430  0097                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  010C                     	;# 
   439  010D                     	;# 
   440  010E                     	;# 
   441  0116                     	;# 
   442  0117                     	;# 
   443  011D                     	;# 
   444  018C                     	;# 
   445  018D                     	;# 
   446  018E                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0194                     	;# 
   453  0195                     	;# 
   454  0196                     	;# 
   455  0197                     	;# 
   456  0199                     	;# 
   457  019A                     	;# 
   458  019B                     	;# 
   459  019B                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019C                     	;# 
   463  019C                     	;# 
   464  019D                     	;# 
   465  019E                     	;# 
   466  019F                     	;# 
   467  020D                     	;# 
   468  0210                     	;# 
   469  0211                     	;# 
   470  0211                     	;# 
   471  0212                     	;# 
   472  0212                     	;# 
   473  0213                     	;# 
   474  0213                     	;# 
   475  0214                     	;# 
   476  0214                     	;# 
   477  0215                     	;# 
   478  0215                     	;# 
   479  0215                     	;# 
   480  0216                     	;# 
   481  0216                     	;# 
   482  0217                     	;# 
   483  0217                     	;# 
   484  0291                     	;# 
   485  0291                     	;# 
   486  0292                     	;# 
   487  0293                     	;# 
   488  0298                     	;# 
   489  0298                     	;# 
   490  0299                     	;# 
   491  029A                     	;# 
   492  0394                     	;# 
   493  0395                     	;# 
   494  0396                     	;# 
   495  0FE4                     	;# 
   496  0FE5                     	;# 
   497  0FE6                     	;# 
   498  0FE7                     	;# 
   499  0FE8                     	;# 
   500  0FE9                     	;# 
   501  0FEA                     	;# 
   502  0FEB                     	;# 
   503  0FED                     	;# 
   504  0FEE                     	;# 
   505  0FEF                     	;# 
   506  0000                     	;# 
   507  0001                     	;# 
   508  0002                     	;# 
   509  0003                     	;# 
   510  0004                     	;# 
   511  0005                     	;# 
   512  0006                     	;# 
   513  0007                     	;# 
   514  0008                     	;# 
   515  0009                     	;# 
   516  000A                     	;# 
   517  000B                     	;# 
   518  000C                     	;# 
   519  000D                     	;# 
   520  000E                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0015                     	;# 
   525  0016                     	;# 
   526  0016                     	;# 
   527  0017                     	;# 
   528  0018                     	;# 
   529  0019                     	;# 
   530  001A                     	;# 
   531  001B                     	;# 
   532  001C                     	;# 
   533  008C                     	;# 
   534  008D                     	;# 
   535  008E                     	;# 
   536  0090                     	;# 
   537  0091                     	;# 
   538  0092                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0099                     	;# 
   543  009A                     	;# 
   544  009B                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  010C                     	;# 
   550  010D                     	;# 
   551  010E                     	;# 
   552  0116                     	;# 
   553  0117                     	;# 
   554  011D                     	;# 
   555  018C                     	;# 
   556  018D                     	;# 
   557  018E                     	;# 
   558  0191                     	;# 
   559  0191                     	;# 
   560  0192                     	;# 
   561  0193                     	;# 
   562  0193                     	;# 
   563  0194                     	;# 
   564  0195                     	;# 
   565  0196                     	;# 
   566  0197                     	;# 
   567  0199                     	;# 
   568  019A                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019C                     	;# 
   574  019C                     	;# 
   575  019D                     	;# 
   576  019E                     	;# 
   577  019F                     	;# 
   578  020D                     	;# 
   579  0210                     	;# 
   580  0211                     	;# 
   581  0211                     	;# 
   582  0212                     	;# 
   583  0212                     	;# 
   584  0213                     	;# 
   585  0213                     	;# 
   586  0214                     	;# 
   587  0214                     	;# 
   588  0215                     	;# 
   589  0215                     	;# 
   590  0215                     	;# 
   591  0216                     	;# 
   592  0216                     	;# 
   593  0217                     	;# 
   594  0217                     	;# 
   595  0291                     	;# 
   596  0291                     	;# 
   597  0292                     	;# 
   598  0293                     	;# 
   599  0298                     	;# 
   600  0298                     	;# 
   601  0299                     	;# 
   602  029A                     	;# 
   603  0394                     	;# 
   604  0395                     	;# 
   605  0396                     	;# 
   606  0FE4                     	;# 
   607  0FE5                     	;# 
   608  0FE6                     	;# 
   609  0FE7                     	;# 
   610  0FE8                     	;# 
   611  0FE9                     	;# 
   612  0FEA                     	;# 
   613  0FEB                     	;# 
   614  0FED                     	;# 
   615  0FEE                     	;# 
   616  0FEF                     	;# 
   617  0000                     	;# 
   618  0001                     	;# 
   619  0002                     	;# 
   620  0003                     	;# 
   621  0004                     	;# 
   622  0005                     	;# 
   623  0006                     	;# 
   624  0007                     	;# 
   625  0008                     	;# 
   626  0009                     	;# 
   627  000A                     	;# 
   628  000B                     	;# 
   629  000C                     	;# 
   630  000D                     	;# 
   631  000E                     	;# 
   632  0010                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  008C                     	;# 
   645  008D                     	;# 
   646  008E                     	;# 
   647  0090                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0095                     	;# 
   651  0096                     	;# 
   652  0097                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  0116                     	;# 
   664  0117                     	;# 
   665  011D                     	;# 
   666  018C                     	;# 
   667  018D                     	;# 
   668  018E                     	;# 
   669  0191                     	;# 
   670  0191                     	;# 
   671  0192                     	;# 
   672  0193                     	;# 
   673  0193                     	;# 
   674  0194                     	;# 
   675  0195                     	;# 
   676  0196                     	;# 
   677  0197                     	;# 
   678  0199                     	;# 
   679  019A                     	;# 
   680  019B                     	;# 
   681  019B                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019C                     	;# 
   685  019C                     	;# 
   686  019D                     	;# 
   687  019E                     	;# 
   688  019F                     	;# 
   689  020D                     	;# 
   690  0210                     	;# 
   691  0211                     	;# 
   692  0211                     	;# 
   693  0212                     	;# 
   694  0212                     	;# 
   695  0213                     	;# 
   696  0213                     	;# 
   697  0214                     	;# 
   698  0214                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0216                     	;# 
   703  0216                     	;# 
   704  0217                     	;# 
   705  0217                     	;# 
   706  0291                     	;# 
   707  0291                     	;# 
   708  0292                     	;# 
   709  0293                     	;# 
   710  0298                     	;# 
   711  0298                     	;# 
   712  0299                     	;# 
   713  029A                     	;# 
   714  0394                     	;# 
   715  0395                     	;# 
   716  0396                     	;# 
   717  0FE4                     	;# 
   718  0FE5                     	;# 
   719  0FE6                     	;# 
   720  0FE7                     	;# 
   721  0FE8                     	;# 
   722  0FE9                     	;# 
   723  0FEA                     	;# 
   724  0FEB                     	;# 
   725  0FED                     	;# 
   726  0FEE                     	;# 
   727  0FEF                     	;# 
   728  0000                     	;# 
   729  0001                     	;# 
   730  0002                     	;# 
   731  0003                     	;# 
   732  0004                     	;# 
   733  0005                     	;# 
   734  0006                     	;# 
   735  0007                     	;# 
   736  0008                     	;# 
   737  0009                     	;# 
   738  000A                     	;# 
   739  000B                     	;# 
   740  000C                     	;# 
   741  000D                     	;# 
   742  000E                     	;# 
   743  0010                     	;# 
   744  0011                     	;# 
   745  0012                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  008C                     	;# 
   756  008D                     	;# 
   757  008E                     	;# 
   758  0090                     	;# 
   759  0091                     	;# 
   760  0092                     	;# 
   761  0095                     	;# 
   762  0096                     	;# 
   763  0097                     	;# 
   764  0099                     	;# 
   765  009A                     	;# 
   766  009B                     	;# 
   767  009B                     	;# 
   768  009C                     	;# 
   769  009D                     	;# 
   770  009E                     	;# 
   771  010C                     	;# 
   772  010D                     	;# 
   773  010E                     	;# 
   774  0116                     	;# 
   775  0117                     	;# 
   776  011D                     	;# 
   777  018C                     	;# 
   778  018D                     	;# 
   779  018E                     	;# 
   780  0191                     	;# 
   781  0191                     	;# 
   782  0192                     	;# 
   783  0193                     	;# 
   784  0193                     	;# 
   785  0194                     	;# 
   786  0195                     	;# 
   787  0196                     	;# 
   788  0197                     	;# 
   789  0199                     	;# 
   790  019A                     	;# 
   791  019B                     	;# 
   792  019B                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019C                     	;# 
   797  019D                     	;# 
   798  019E                     	;# 
   799  019F                     	;# 
   800  020D                     	;# 
   801  0210                     	;# 
   802  0211                     	;# 
   803  0211                     	;# 
   804  0212                     	;# 
   805  0212                     	;# 
   806  0213                     	;# 
   807  0213                     	;# 
   808  0214                     	;# 
   809  0214                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0215                     	;# 
   813  0216                     	;# 
   814  0216                     	;# 
   815  0217                     	;# 
   816  0217                     	;# 
   817  0291                     	;# 
   818  0291                     	;# 
   819  0292                     	;# 
   820  0293                     	;# 
   821  0298                     	;# 
   822  0298                     	;# 
   823  0299                     	;# 
   824  029A                     	;# 
   825  0394                     	;# 
   826  0395                     	;# 
   827  0396                     	;# 
   828  0FE4                     	;# 
   829  0FE5                     	;# 
   830  0FE6                     	;# 
   831  0FE7                     	;# 
   832  0FE8                     	;# 
   833  0FE9                     	;# 
   834  0FEA                     	;# 
   835  0FEB                     	;# 
   836  0FED                     	;# 
   837  0FEE                     	;# 
   838  0FEF                     	;# 
   839  0000                     	;# 
   840  0001                     	;# 
   841  0002                     	;# 
   842  0003                     	;# 
   843  0004                     	;# 
   844  0005                     	;# 
   845  0006                     	;# 
   846  0007                     	;# 
   847  0008                     	;# 
   848  0009                     	;# 
   849  000A                     	;# 
   850  000B                     	;# 
   851  000C                     	;# 
   852  000D                     	;# 
   853  000E                     	;# 
   854  0010                     	;# 
   855  0011                     	;# 
   856  0012                     	;# 
   857  0015                     	;# 
   858  0016                     	;# 
   859  0016                     	;# 
   860  0017                     	;# 
   861  0018                     	;# 
   862  0019                     	;# 
   863  001A                     	;# 
   864  001B                     	;# 
   865  001C                     	;# 
   866  008C                     	;# 
   867  008D                     	;# 
   868  008E                     	;# 
   869  0090                     	;# 
   870  0091                     	;# 
   871  0092                     	;# 
   872  0095                     	;# 
   873  0096                     	;# 
   874  0097                     	;# 
   875  0099                     	;# 
   876  009A                     	;# 
   877  009B                     	;# 
   878  009B                     	;# 
   879  009C                     	;# 
   880  009D                     	;# 
   881  009E                     	;# 
   882  010C                     	;# 
   883  010D                     	;# 
   884  010E                     	;# 
   885  0116                     	;# 
   886  0117                     	;# 
   887  011D                     	;# 
   888  018C                     	;# 
   889  018D                     	;# 
   890  018E                     	;# 
   891  0191                     	;# 
   892  0191                     	;# 
   893  0192                     	;# 
   894  0193                     	;# 
   895  0193                     	;# 
   896  0194                     	;# 
   897  0195                     	;# 
   898  0196                     	;# 
   899  0197                     	;# 
   900  0199                     	;# 
   901  019A                     	;# 
   902  019B                     	;# 
   903  019B                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019C                     	;# 
   907  019C                     	;# 
   908  019D                     	;# 
   909  019E                     	;# 
   910  019F                     	;# 
   911  020D                     	;# 
   912  0210                     	;# 
   913  0211                     	;# 
   914  0211                     	;# 
   915  0212                     	;# 
   916  0212                     	;# 
   917  0213                     	;# 
   918  0213                     	;# 
   919  0214                     	;# 
   920  0214                     	;# 
   921  0215                     	;# 
   922  0215                     	;# 
   923  0215                     	;# 
   924  0216                     	;# 
   925  0216                     	;# 
   926  0217                     	;# 
   927  0217                     	;# 
   928  0291                     	;# 
   929  0291                     	;# 
   930  0292                     	;# 
   931  0293                     	;# 
   932  0298                     	;# 
   933  0298                     	;# 
   934  0299                     	;# 
   935  029A                     	;# 
   936  0394                     	;# 
   937  0395                     	;# 
   938  0396                     	;# 
   939  0FE4                     	;# 
   940  0FE5                     	;# 
   941  0FE6                     	;# 
   942  0FE7                     	;# 
   943  0FE8                     	;# 
   944  0FE9                     	;# 
   945  0FEA                     	;# 
   946  0FEB                     	;# 
   947  0FED                     	;# 
   948  0FEE                     	;# 
   949  0FEF                     	;# 
   950  0000                     	;# 
   951  0001                     	;# 
   952  0002                     	;# 
   953  0003                     	;# 
   954  0004                     	;# 
   955  0005                     	;# 
   956  0006                     	;# 
   957  0007                     	;# 
   958  0008                     	;# 
   959  0009                     	;# 
   960  000A                     	;# 
   961  000B                     	;# 
   962  000C                     	;# 
   963  000D                     	;# 
   964  000E                     	;# 
   965  0010                     	;# 
   966  0011                     	;# 
   967  0012                     	;# 
   968  0015                     	;# 
   969  0016                     	;# 
   970  0016                     	;# 
   971  0017                     	;# 
   972  0018                     	;# 
   973  0019                     	;# 
   974  001A                     	;# 
   975  001B                     	;# 
   976  001C                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  0090                     	;# 
   981  0091                     	;# 
   982  0092                     	;# 
   983  0095                     	;# 
   984  0096                     	;# 
   985  0097                     	;# 
   986  0099                     	;# 
   987  009A                     	;# 
   988  009B                     	;# 
   989  009B                     	;# 
   990  009C                     	;# 
   991  009D                     	;# 
   992  009E                     	;# 
   993  010C                     	;# 
   994  010D                     	;# 
   995  010E                     	;# 
   996  0116                     	;# 
   997  0117                     	;# 
   998  011D                     	;# 
   999  018C                     	;# 
  1000  018D                     	;# 
  1001  018E                     	;# 
  1002  0191                     	;# 
  1003  0191                     	;# 
  1004  0192                     	;# 
  1005  0193                     	;# 
  1006  0193                     	;# 
  1007  0194                     	;# 
  1008  0195                     	;# 
  1009  0196                     	;# 
  1010  0197                     	;# 
  1011  0199                     	;# 
  1012  019A                     	;# 
  1013  019B                     	;# 
  1014  019B                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019C                     	;# 
  1018  019C                     	;# 
  1019  019D                     	;# 
  1020  019E                     	;# 
  1021  019F                     	;# 
  1022  020D                     	;# 
  1023  0210                     	;# 
  1024  0211                     	;# 
  1025  0211                     	;# 
  1026  0212                     	;# 
  1027  0212                     	;# 
  1028  0213                     	;# 
  1029  0213                     	;# 
  1030  0214                     	;# 
  1031  0214                     	;# 
  1032  0215                     	;# 
  1033  0215                     	;# 
  1034  0215                     	;# 
  1035  0216                     	;# 
  1036  0216                     	;# 
  1037  0217                     	;# 
  1038  0217                     	;# 
  1039  0291                     	;# 
  1040  0291                     	;# 
  1041  0292                     	;# 
  1042  0293                     	;# 
  1043  0298                     	;# 
  1044  0298                     	;# 
  1045  0299                     	;# 
  1046  029A                     	;# 
  1047  0394                     	;# 
  1048  0395                     	;# 
  1049  0396                     	;# 
  1050  0FE4                     	;# 
  1051  0FE5                     	;# 
  1052  0FE6                     	;# 
  1053  0FE7                     	;# 
  1054  0FE8                     	;# 
  1055  0FE9                     	;# 
  1056  0FEA                     	;# 
  1057  0FEB                     	;# 
  1058  0FED                     	;# 
  1059  0FEE                     	;# 
  1060  0FEF                     	;# 
  1061  0000                     	;# 
  1062  0001                     	;# 
  1063  0002                     	;# 
  1064  0003                     	;# 
  1065  0004                     	;# 
  1066  0005                     	;# 
  1067  0006                     	;# 
  1068  0007                     	;# 
  1069  0008                     	;# 
  1070  0009                     	;# 
  1071  000A                     	;# 
  1072  000B                     	;# 
  1073  000C                     	;# 
  1074  000D                     	;# 
  1075  000E                     	;# 
  1076  0010                     	;# 
  1077  0011                     	;# 
  1078  0012                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0016                     	;# 
  1082  0017                     	;# 
  1083  0018                     	;# 
  1084  0019                     	;# 
  1085  001A                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  008C                     	;# 
  1089  008D                     	;# 
  1090  008E                     	;# 
  1091  0090                     	;# 
  1092  0091                     	;# 
  1093  0092                     	;# 
  1094  0095                     	;# 
  1095  0096                     	;# 
  1096  0097                     	;# 
  1097  0099                     	;# 
  1098  009A                     	;# 
  1099  009B                     	;# 
  1100  009B                     	;# 
  1101  009C                     	;# 
  1102  009D                     	;# 
  1103  009E                     	;# 
  1104  010C                     	;# 
  1105  010D                     	;# 
  1106  010E                     	;# 
  1107  0116                     	;# 
  1108  0117                     	;# 
  1109  011D                     	;# 
  1110  018C                     	;# 
  1111  018D                     	;# 
  1112  018E                     	;# 
  1113  0191                     	;# 
  1114  0191                     	;# 
  1115  0192                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0194                     	;# 
  1119  0195                     	;# 
  1120  0196                     	;# 
  1121  0197                     	;# 
  1122  0199                     	;# 
  1123  019A                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019C                     	;# 
  1129  019C                     	;# 
  1130  019D                     	;# 
  1131  019E                     	;# 
  1132  019F                     	;# 
  1133  020D                     	;# 
  1134  0210                     	;# 
  1135  0211                     	;# 
  1136  0211                     	;# 
  1137  0212                     	;# 
  1138  0212                     	;# 
  1139  0213                     	;# 
  1140  0213                     	;# 
  1141  0214                     	;# 
  1142  0214                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0215                     	;# 
  1146  0216                     	;# 
  1147  0216                     	;# 
  1148  0217                     	;# 
  1149  0217                     	;# 
  1150  0291                     	;# 
  1151  0291                     	;# 
  1152  0292                     	;# 
  1153  0293                     	;# 
  1154  0298                     	;# 
  1155  0298                     	;# 
  1156  0299                     	;# 
  1157  029A                     	;# 
  1158  0394                     	;# 
  1159  0395                     	;# 
  1160  0396                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEB                     	;# 
  1169  0FED                     	;# 
  1170  0FEE                     	;# 
  1171  0FEF                     	;# 
  1172  0000                     	;# 
  1173  0001                     	;# 
  1174  0002                     	;# 
  1175  0003                     	;# 
  1176  0004                     	;# 
  1177  0005                     	;# 
  1178  0006                     	;# 
  1179  0007                     	;# 
  1180  0008                     	;# 
  1181  0009                     	;# 
  1182  000A                     	;# 
  1183  000B                     	;# 
  1184  000C                     	;# 
  1185  000D                     	;# 
  1186  000E                     	;# 
  1187  0010                     	;# 
  1188  0011                     	;# 
  1189  0012                     	;# 
  1190  0015                     	;# 
  1191  0016                     	;# 
  1192  0016                     	;# 
  1193  0017                     	;# 
  1194  0018                     	;# 
  1195  0019                     	;# 
  1196  001A                     	;# 
  1197  001B                     	;# 
  1198  001C                     	;# 
  1199  008C                     	;# 
  1200  008D                     	;# 
  1201  008E                     	;# 
  1202  0090                     	;# 
  1203  0091                     	;# 
  1204  0092                     	;# 
  1205  0095                     	;# 
  1206  0096                     	;# 
  1207  0097                     	;# 
  1208  0099                     	;# 
  1209  009A                     	;# 
  1210  009B                     	;# 
  1211  009B                     	;# 
  1212  009C                     	;# 
  1213  009D                     	;# 
  1214  009E                     	;# 
  1215  010C                     	;# 
  1216  010D                     	;# 
  1217  010E                     	;# 
  1218  0116                     	;# 
  1219  0117                     	;# 
  1220  011D                     	;# 
  1221  018C                     	;# 
  1222  018D                     	;# 
  1223  018E                     	;# 
  1224  0191                     	;# 
  1225  0191                     	;# 
  1226  0192                     	;# 
  1227  0193                     	;# 
  1228  0193                     	;# 
  1229  0194                     	;# 
  1230  0195                     	;# 
  1231  0196                     	;# 
  1232  0197                     	;# 
  1233  0199                     	;# 
  1234  019A                     	;# 
  1235  019B                     	;# 
  1236  019B                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019C                     	;# 
  1240  019C                     	;# 
  1241  019D                     	;# 
  1242  019E                     	;# 
  1243  019F                     	;# 
  1244  020D                     	;# 
  1245  0210                     	;# 
  1246  0211                     	;# 
  1247  0211                     	;# 
  1248  0212                     	;# 
  1249  0212                     	;# 
  1250  0213                     	;# 
  1251  0213                     	;# 
  1252  0214                     	;# 
  1253  0214                     	;# 
  1254  0215                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0216                     	;# 
  1258  0216                     	;# 
  1259  0217                     	;# 
  1260  0217                     	;# 
  1261  0291                     	;# 
  1262  0291                     	;# 
  1263  0292                     	;# 
  1264  0293                     	;# 
  1265  0298                     	;# 
  1266  0298                     	;# 
  1267  0299                     	;# 
  1268  029A                     	;# 
  1269  0394                     	;# 
  1270  0395                     	;# 
  1271  0396                     	;# 
  1272  0FE4                     	;# 
  1273  0FE5                     	;# 
  1274  0FE6                     	;# 
  1275  0FE7                     	;# 
  1276  0FE8                     	;# 
  1277  0FE9                     	;# 
  1278  0FEA                     	;# 
  1279  0FEB                     	;# 
  1280  0FED                     	;# 
  1281  0FEE                     	;# 
  1282  0FEF                     	;# 
  1283  0000                     	;# 
  1284  0001                     	;# 
  1285  0002                     	;# 
  1286  0003                     	;# 
  1287  0004                     	;# 
  1288  0005                     	;# 
  1289  0006                     	;# 
  1290  0007                     	;# 
  1291  0008                     	;# 
  1292  0009                     	;# 
  1293  000A                     	;# 
  1294  000B                     	;# 
  1295  000C                     	;# 
  1296  000D                     	;# 
  1297  000E                     	;# 
  1298  0010                     	;# 
  1299  0011                     	;# 
  1300  0012                     	;# 
  1301  0015                     	;# 
  1302  0016                     	;# 
  1303  0016                     	;# 
  1304  0017                     	;# 
  1305  0018                     	;# 
  1306  0019                     	;# 
  1307  001A                     	;# 
  1308  001B                     	;# 
  1309  001C                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0090                     	;# 
  1314  0091                     	;# 
  1315  0092                     	;# 
  1316  0095                     	;# 
  1317  0096                     	;# 
  1318  0097                     	;# 
  1319  0099                     	;# 
  1320  009A                     	;# 
  1321  009B                     	;# 
  1322  009B                     	;# 
  1323  009C                     	;# 
  1324  009D                     	;# 
  1325  009E                     	;# 
  1326  010C                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  0116                     	;# 
  1330  0117                     	;# 
  1331  011D                     	;# 
  1332  018C                     	;# 
  1333  018D                     	;# 
  1334  018E                     	;# 
  1335  0191                     	;# 
  1336  0191                     	;# 
  1337  0192                     	;# 
  1338  0193                     	;# 
  1339  0193                     	;# 
  1340  0194                     	;# 
  1341  0195                     	;# 
  1342  0196                     	;# 
  1343  0197                     	;# 
  1344  0199                     	;# 
  1345  019A                     	;# 
  1346  019B                     	;# 
  1347  019B                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019C                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019E                     	;# 
  1354  019F                     	;# 
  1355  020D                     	;# 
  1356  0210                     	;# 
  1357  0211                     	;# 
  1358  0211                     	;# 
  1359  0212                     	;# 
  1360  0212                     	;# 
  1361  0213                     	;# 
  1362  0213                     	;# 
  1363  0214                     	;# 
  1364  0214                     	;# 
  1365  0215                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0216                     	;# 
  1369  0216                     	;# 
  1370  0217                     	;# 
  1371  0217                     	;# 
  1372  0291                     	;# 
  1373  0291                     	;# 
  1374  0292                     	;# 
  1375  0293                     	;# 
  1376  0298                     	;# 
  1377  0298                     	;# 
  1378  0299                     	;# 
  1379  029A                     	;# 
  1380  0394                     	;# 
  1381  0395                     	;# 
  1382  0396                     	;# 
  1383  0FE4                     	;# 
  1384  0FE5                     	;# 
  1385  0FE6                     	;# 
  1386  0FE7                     	;# 
  1387  0FE8                     	;# 
  1388  0FE9                     	;# 
  1389  0FEA                     	;# 
  1390  0FEB                     	;# 
  1391  0FED                     	;# 
  1392  0FEE                     	;# 
  1393  0FEF                     	;# 
  1394  0000                     	;# 
  1395  0001                     	;# 
  1396  0002                     	;# 
  1397  0003                     	;# 
  1398  0004                     	;# 
  1399  0005                     	;# 
  1400  0006                     	;# 
  1401  0007                     	;# 
  1402  0008                     	;# 
  1403  0009                     	;# 
  1404  000A                     	;# 
  1405  000B                     	;# 
  1406  000C                     	;# 
  1407  000D                     	;# 
  1408  000E                     	;# 
  1409  0010                     	;# 
  1410  0011                     	;# 
  1411  0012                     	;# 
  1412  0015                     	;# 
  1413  0016                     	;# 
  1414  0016                     	;# 
  1415  0017                     	;# 
  1416  0018                     	;# 
  1417  0019                     	;# 
  1418  001A                     	;# 
  1419  001B                     	;# 
  1420  001C                     	;# 
  1421  008C                     	;# 
  1422  008D                     	;# 
  1423  008E                     	;# 
  1424  0090                     	;# 
  1425  0091                     	;# 
  1426  0092                     	;# 
  1427  0095                     	;# 
  1428  0096                     	;# 
  1429  0097                     	;# 
  1430  0099                     	;# 
  1431  009A                     	;# 
  1432  009B                     	;# 
  1433  009B                     	;# 
  1434  009C                     	;# 
  1435  009D                     	;# 
  1436  009E                     	;# 
  1437  010C                     	;# 
  1438  010D                     	;# 
  1439  010E                     	;# 
  1440  0116                     	;# 
  1441  0117                     	;# 
  1442  011D                     	;# 
  1443  018C                     	;# 
  1444  018D                     	;# 
  1445  018E                     	;# 
  1446  0191                     	;# 
  1447  0191                     	;# 
  1448  0192                     	;# 
  1449  0193                     	;# 
  1450  0193                     	;# 
  1451  0194                     	;# 
  1452  0195                     	;# 
  1453  0196                     	;# 
  1454  0197                     	;# 
  1455  0199                     	;# 
  1456  019A                     	;# 
  1457  019B                     	;# 
  1458  019B                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019C                     	;# 
  1462  019C                     	;# 
  1463  019D                     	;# 
  1464  019E                     	;# 
  1465  019F                     	;# 
  1466  020D                     	;# 
  1467  0210                     	;# 
  1468  0211                     	;# 
  1469  0211                     	;# 
  1470  0212                     	;# 
  1471  0212                     	;# 
  1472  0213                     	;# 
  1473  0213                     	;# 
  1474  0214                     	;# 
  1475  0214                     	;# 
  1476  0215                     	;# 
  1477  0215                     	;# 
  1478  0215                     	;# 
  1479  0216                     	;# 
  1480  0216                     	;# 
  1481  0217                     	;# 
  1482  0217                     	;# 
  1483  0291                     	;# 
  1484  0291                     	;# 
  1485  0292                     	;# 
  1486  0293                     	;# 
  1487  0298                     	;# 
  1488  0298                     	;# 
  1489  0299                     	;# 
  1490  029A                     	;# 
  1491  0394                     	;# 
  1492  0395                     	;# 
  1493  0396                     	;# 
  1494  0FE4                     	;# 
  1495  0FE5                     	;# 
  1496  0FE6                     	;# 
  1497  0FE7                     	;# 
  1498  0FE8                     	;# 
  1499  0FE9                     	;# 
  1500  0FEA                     	;# 
  1501  0FEB                     	;# 
  1502  0FED                     	;# 
  1503  0FEE                     	;# 
  1504  0FEF                     	;# 
  1505  0000                     	;# 
  1506  0001                     	;# 
  1507  0002                     	;# 
  1508  0003                     	;# 
  1509  0004                     	;# 
  1510  0005                     	;# 
  1511  0006                     	;# 
  1512  0007                     	;# 
  1513  0008                     	;# 
  1514  0009                     	;# 
  1515  000A                     	;# 
  1516  000B                     	;# 
  1517  000C                     	;# 
  1518  000D                     	;# 
  1519  000E                     	;# 
  1520  0010                     	;# 
  1521  0011                     	;# 
  1522  0012                     	;# 
  1523  0015                     	;# 
  1524  0016                     	;# 
  1525  0016                     	;# 
  1526  0017                     	;# 
  1527  0018                     	;# 
  1528  0019                     	;# 
  1529  001A                     	;# 
  1530  001B                     	;# 
  1531  001C                     	;# 
  1532  008C                     	;# 
  1533  008D                     	;# 
  1534  008E                     	;# 
  1535  0090                     	;# 
  1536  0091                     	;# 
  1537  0092                     	;# 
  1538  0095                     	;# 
  1539  0096                     	;# 
  1540  0097                     	;# 
  1541  0099                     	;# 
  1542  009A                     	;# 
  1543  009B                     	;# 
  1544  009B                     	;# 
  1545  009C                     	;# 
  1546  009D                     	;# 
  1547  009E                     	;# 
  1548  010C                     	;# 
  1549  010D                     	;# 
  1550  010E                     	;# 
  1551  0116                     	;# 
  1552  0117                     	;# 
  1553  011D                     	;# 
  1554  018C                     	;# 
  1555  018D                     	;# 
  1556  018E                     	;# 
  1557  0191                     	;# 
  1558  0191                     	;# 
  1559  0192                     	;# 
  1560  0193                     	;# 
  1561  0193                     	;# 
  1562  0194                     	;# 
  1563  0195                     	;# 
  1564  0196                     	;# 
  1565  0197                     	;# 
  1566  0199                     	;# 
  1567  019A                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019D                     	;# 
  1575  019E                     	;# 
  1576  019F                     	;# 
  1577  020D                     	;# 
  1578  0210                     	;# 
  1579  0211                     	;# 
  1580  0211                     	;# 
  1581  0212                     	;# 
  1582  0212                     	;# 
  1583  0213                     	;# 
  1584  0213                     	;# 
  1585  0214                     	;# 
  1586  0214                     	;# 
  1587  0215                     	;# 
  1588  0215                     	;# 
  1589  0215                     	;# 
  1590  0216                     	;# 
  1591  0216                     	;# 
  1592  0217                     	;# 
  1593  0217                     	;# 
  1594  0291                     	;# 
  1595  0291                     	;# 
  1596  0292                     	;# 
  1597  0293                     	;# 
  1598  0298                     	;# 
  1599  0298                     	;# 
  1600  0299                     	;# 
  1601  029A                     	;# 
  1602  0394                     	;# 
  1603  0395                     	;# 
  1604  0396                     	;# 
  1605  0FE4                     	;# 
  1606  0FE5                     	;# 
  1607  0FE6                     	;# 
  1608  0FE7                     	;# 
  1609  0FE8                     	;# 
  1610  0FE9                     	;# 
  1611  0FEA                     	;# 
  1612  0FEB                     	;# 
  1613  0FED                     	;# 
  1614  0FEE                     	;# 
  1615  0FEF                     	;# 
  1616  0000                     	;# 
  1617  0001                     	;# 
  1618  0002                     	;# 
  1619  0003                     	;# 
  1620  0004                     	;# 
  1621  0005                     	;# 
  1622  0006                     	;# 
  1623  0007                     	;# 
  1624  0008                     	;# 
  1625  0009                     	;# 
  1626  000A                     	;# 
  1627  000B                     	;# 
  1628  000C                     	;# 
  1629  000D                     	;# 
  1630  000E                     	;# 
  1631  0010                     	;# 
  1632  0011                     	;# 
  1633  0012                     	;# 
  1634  0015                     	;# 
  1635  0016                     	;# 
  1636  0016                     	;# 
  1637  0017                     	;# 
  1638  0018                     	;# 
  1639  0019                     	;# 
  1640  001A                     	;# 
  1641  001B                     	;# 
  1642  001C                     	;# 
  1643  008C                     	;# 
  1644  008D                     	;# 
  1645  008E                     	;# 
  1646  0090                     	;# 
  1647  0091                     	;# 
  1648  0092                     	;# 
  1649  0095                     	;# 
  1650  0096                     	;# 
  1651  0097                     	;# 
  1652  0099                     	;# 
  1653  009A                     	;# 
  1654  009B                     	;# 
  1655  009B                     	;# 
  1656  009C                     	;# 
  1657  009D                     	;# 
  1658  009E                     	;# 
  1659  010C                     	;# 
  1660  010D                     	;# 
  1661  010E                     	;# 
  1662  0116                     	;# 
  1663  0117                     	;# 
  1664  011D                     	;# 
  1665  018C                     	;# 
  1666  018D                     	;# 
  1667  018E                     	;# 
  1668  0191                     	;# 
  1669  0191                     	;# 
  1670  0192                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0194                     	;# 
  1674  0195                     	;# 
  1675  0196                     	;# 
  1676  0197                     	;# 
  1677  0199                     	;# 
  1678  019A                     	;# 
  1679  019B                     	;# 
  1680  019B                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019C                     	;# 
  1685  019D                     	;# 
  1686  019E                     	;# 
  1687  019F                     	;# 
  1688  020D                     	;# 
  1689  0210                     	;# 
  1690  0211                     	;# 
  1691  0211                     	;# 
  1692  0212                     	;# 
  1693  0212                     	;# 
  1694  0213                     	;# 
  1695  0213                     	;# 
  1696  0214                     	;# 
  1697  0214                     	;# 
  1698  0215                     	;# 
  1699  0215                     	;# 
  1700  0215                     	;# 
  1701  0216                     	;# 
  1702  0216                     	;# 
  1703  0217                     	;# 
  1704  0217                     	;# 
  1705  0291                     	;# 
  1706  0291                     	;# 
  1707  0292                     	;# 
  1708  0293                     	;# 
  1709  0298                     	;# 
  1710  0298                     	;# 
  1711  0299                     	;# 
  1712  029A                     	;# 
  1713  0394                     	;# 
  1714  0395                     	;# 
  1715  0396                     	;# 
  1716  0FE4                     	;# 
  1717  0FE5                     	;# 
  1718  0FE6                     	;# 
  1719  0FE7                     	;# 
  1720  0FE8                     	;# 
  1721  0FE9                     	;# 
  1722  0FEA                     	;# 
  1723  0FEB                     	;# 
  1724  0FED                     	;# 
  1725  0FEE                     	;# 
  1726  0FEF                     	;# 
  1727  0000                     	;# 
  1728  0001                     	;# 
  1729  0002                     	;# 
  1730  0003                     	;# 
  1731  0004                     	;# 
  1732  0005                     	;# 
  1733  0006                     	;# 
  1734  0007                     	;# 
  1735  0008                     	;# 
  1736  0009                     	;# 
  1737  000A                     	;# 
  1738  000B                     	;# 
  1739  000C                     	;# 
  1740  000D                     	;# 
  1741  000E                     	;# 
  1742  0010                     	;# 
  1743  0011                     	;# 
  1744  0012                     	;# 
  1745  0015                     	;# 
  1746  0016                     	;# 
  1747  0016                     	;# 
  1748  0017                     	;# 
  1749  0018                     	;# 
  1750  0019                     	;# 
  1751  001A                     	;# 
  1752  001B                     	;# 
  1753  001C                     	;# 
  1754  008C                     	;# 
  1755  008D                     	;# 
  1756  008E                     	;# 
  1757  0090                     	;# 
  1758  0091                     	;# 
  1759  0092                     	;# 
  1760  0095                     	;# 
  1761  0096                     	;# 
  1762  0097                     	;# 
  1763  0099                     	;# 
  1764  009A                     	;# 
  1765  009B                     	;# 
  1766  009B                     	;# 
  1767  009C                     	;# 
  1768  009D                     	;# 
  1769  009E                     	;# 
  1770  010C                     	;# 
  1771  010D                     	;# 
  1772  010E                     	;# 
  1773  0116                     	;# 
  1774  0117                     	;# 
  1775  011D                     	;# 
  1776  018C                     	;# 
  1777  018D                     	;# 
  1778  018E                     	;# 
  1779  0191                     	;# 
  1780  0191                     	;# 
  1781  0192                     	;# 
  1782  0193                     	;# 
  1783  0193                     	;# 
  1784  0194                     	;# 
  1785  0195                     	;# 
  1786  0196                     	;# 
  1787  0197                     	;# 
  1788  0199                     	;# 
  1789  019A                     	;# 
  1790  019B                     	;# 
  1791  019B                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019C                     	;# 
  1795  019C                     	;# 
  1796  019D                     	;# 
  1797  019E                     	;# 
  1798  019F                     	;# 
  1799  020D                     	;# 
  1800  0210                     	;# 
  1801  0211                     	;# 
  1802  0211                     	;# 
  1803  0212                     	;# 
  1804  0212                     	;# 
  1805  0213                     	;# 
  1806  0213                     	;# 
  1807  0214                     	;# 
  1808  0214                     	;# 
  1809  0215                     	;# 
  1810  0215                     	;# 
  1811  0215                     	;# 
  1812  0216                     	;# 
  1813  0216                     	;# 
  1814  0217                     	;# 
  1815  0217                     	;# 
  1816  0291                     	;# 
  1817  0291                     	;# 
  1818  0292                     	;# 
  1819  0293                     	;# 
  1820  0298                     	;# 
  1821  0298                     	;# 
  1822  0299                     	;# 
  1823  029A                     	;# 
  1824  0394                     	;# 
  1825  0395                     	;# 
  1826  0396                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838  0000                     	;# 
  1839  0001                     	;# 
  1840  0002                     	;# 
  1841  0003                     	;# 
  1842  0004                     	;# 
  1843  0005                     	;# 
  1844  0006                     	;# 
  1845  0007                     	;# 
  1846  0008                     	;# 
  1847  0009                     	;# 
  1848  000A                     	;# 
  1849  000B                     	;# 
  1850  000C                     	;# 
  1851  000D                     	;# 
  1852  000E                     	;# 
  1853  0010                     	;# 
  1854  0011                     	;# 
  1855  0012                     	;# 
  1856  0015                     	;# 
  1857  0016                     	;# 
  1858  0016                     	;# 
  1859  0017                     	;# 
  1860  0018                     	;# 
  1861  0019                     	;# 
  1862  001A                     	;# 
  1863  001B                     	;# 
  1864  001C                     	;# 
  1865  008C                     	;# 
  1866  008D                     	;# 
  1867  008E                     	;# 
  1868  0090                     	;# 
  1869  0091                     	;# 
  1870  0092                     	;# 
  1871  0095                     	;# 
  1872  0096                     	;# 
  1873  0097                     	;# 
  1874  0099                     	;# 
  1875  009A                     	;# 
  1876  009B                     	;# 
  1877  009B                     	;# 
  1878  009C                     	;# 
  1879  009D                     	;# 
  1880  009E                     	;# 
  1881  010C                     	;# 
  1882  010D                     	;# 
  1883  010E                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  011D                     	;# 
  1887  018C                     	;# 
  1888  018D                     	;# 
  1889  018E                     	;# 
  1890  0191                     	;# 
  1891  0191                     	;# 
  1892  0192                     	;# 
  1893  0193                     	;# 
  1894  0193                     	;# 
  1895  0194                     	;# 
  1896  0195                     	;# 
  1897  0196                     	;# 
  1898  0197                     	;# 
  1899  0199                     	;# 
  1900  019A                     	;# 
  1901  019B                     	;# 
  1902  019B                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019C                     	;# 
  1906  019C                     	;# 
  1907  019D                     	;# 
  1908  019E                     	;# 
  1909  019F                     	;# 
  1910  020D                     	;# 
  1911  0210                     	;# 
  1912  0211                     	;# 
  1913  0211                     	;# 
  1914  0212                     	;# 
  1915  0212                     	;# 
  1916  0213                     	;# 
  1917  0213                     	;# 
  1918  0214                     	;# 
  1919  0214                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0215                     	;# 
  1923  0216                     	;# 
  1924  0216                     	;# 
  1925  0217                     	;# 
  1926  0217                     	;# 
  1927  0291                     	;# 
  1928  0291                     	;# 
  1929  0292                     	;# 
  1930  0293                     	;# 
  1931  0298                     	;# 
  1932  0298                     	;# 
  1933  0299                     	;# 
  1934  029A                     	;# 
  1935  0394                     	;# 
  1936  0395                     	;# 
  1937  0396                     	;# 
  1938  0FE4                     	;# 
  1939  0FE5                     	;# 
  1940  0FE6                     	;# 
  1941  0FE7                     	;# 
  1942  0FE8                     	;# 
  1943  0FE9                     	;# 
  1944  0FEA                     	;# 
  1945  0FEB                     	;# 
  1946  0FED                     	;# 
  1947  0FEE                     	;# 
  1948  0FEF                     	;# 
  1949  0000                     	;# 
  1950  0001                     	;# 
  1951  0002                     	;# 
  1952  0003                     	;# 
  1953  0004                     	;# 
  1954  0005                     	;# 
  1955  0006                     	;# 
  1956  0007                     	;# 
  1957  0008                     	;# 
  1958  0009                     	;# 
  1959  000A                     	;# 
  1960  000B                     	;# 
  1961  000C                     	;# 
  1962  000D                     	;# 
  1963  000E                     	;# 
  1964  0010                     	;# 
  1965  0011                     	;# 
  1966  0012                     	;# 
  1967  0015                     	;# 
  1968  0016                     	;# 
  1969  0016                     	;# 
  1970  0017                     	;# 
  1971  0018                     	;# 
  1972  0019                     	;# 
  1973  001A                     	;# 
  1974  001B                     	;# 
  1975  001C                     	;# 
  1976  008C                     	;# 
  1977  008D                     	;# 
  1978  008E                     	;# 
  1979  0090                     	;# 
  1980  0091                     	;# 
  1981  0092                     	;# 
  1982  0095                     	;# 
  1983  0096                     	;# 
  1984  0097                     	;# 
  1985  0099                     	;# 
  1986  009A                     	;# 
  1987  009B                     	;# 
  1988  009B                     	;# 
  1989  009C                     	;# 
  1990  009D                     	;# 
  1991  009E                     	;# 
  1992  010C                     	;# 
  1993  010D                     	;# 
  1994  010E                     	;# 
  1995  0116                     	;# 
  1996  0117                     	;# 
  1997  011D                     	;# 
  1998  018C                     	;# 
  1999  018D                     	;# 
  2000  018E                     	;# 
  2001  0191                     	;# 
  2002  0191                     	;# 
  2003  0192                     	;# 
  2004  0193                     	;# 
  2005  0193                     	;# 
  2006  0194                     	;# 
  2007  0195                     	;# 
  2008  0196                     	;# 
  2009  0197                     	;# 
  2010  0199                     	;# 
  2011  019A                     	;# 
  2012  019B                     	;# 
  2013  019B                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019C                     	;# 
  2017  019C                     	;# 
  2018  019D                     	;# 
  2019  019E                     	;# 
  2020  019F                     	;# 
  2021  020D                     	;# 
  2022  0210                     	;# 
  2023  0211                     	;# 
  2024  0211                     	;# 
  2025  0212                     	;# 
  2026  0212                     	;# 
  2027  0213                     	;# 
  2028  0213                     	;# 
  2029  0214                     	;# 
  2030  0214                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0216                     	;# 
  2035  0216                     	;# 
  2036  0217                     	;# 
  2037  0217                     	;# 
  2038  0291                     	;# 
  2039  0291                     	;# 
  2040  0292                     	;# 
  2041  0293                     	;# 
  2042  0298                     	;# 
  2043  0298                     	;# 
  2044  0299                     	;# 
  2045  029A                     	;# 
  2046  0394                     	;# 
  2047  0395                     	;# 
  2048  0396                     	;# 
  2049  0FE4                     	;# 
  2050  0FE5                     	;# 
  2051  0FE6                     	;# 
  2052  0FE7                     	;# 
  2053  0FE8                     	;# 
  2054  0FE9                     	;# 
  2055  0FEA                     	;# 
  2056  0FEB                     	;# 
  2057  0FED                     	;# 
  2058  0FEE                     	;# 
  2059  0FEF                     	;# 
  2060  0000                     	;# 
  2061  0001                     	;# 
  2062  0002                     	;# 
  2063  0003                     	;# 
  2064  0004                     	;# 
  2065  0005                     	;# 
  2066  0006                     	;# 
  2067  0007                     	;# 
  2068  0008                     	;# 
  2069  0009                     	;# 
  2070  000A                     	;# 
  2071  000B                     	;# 
  2072  000C                     	;# 
  2073  000D                     	;# 
  2074  000E                     	;# 
  2075  0010                     	;# 
  2076  0011                     	;# 
  2077  0012                     	;# 
  2078  0015                     	;# 
  2079  0016                     	;# 
  2080  0016                     	;# 
  2081  0017                     	;# 
  2082  0018                     	;# 
  2083  0019                     	;# 
  2084  001A                     	;# 
  2085  001B                     	;# 
  2086  001C                     	;# 
  2087  008C                     	;# 
  2088  008D                     	;# 
  2089  008E                     	;# 
  2090  0090                     	;# 
  2091  0091                     	;# 
  2092  0092                     	;# 
  2093  0095                     	;# 
  2094  0096                     	;# 
  2095  0097                     	;# 
  2096  0099                     	;# 
  2097  009A                     	;# 
  2098  009B                     	;# 
  2099  009B                     	;# 
  2100  009C                     	;# 
  2101  009D                     	;# 
  2102  009E                     	;# 
  2103  010C                     	;# 
  2104  010D                     	;# 
  2105  010E                     	;# 
  2106  0116                     	;# 
  2107  0117                     	;# 
  2108  011D                     	;# 
  2109  018C                     	;# 
  2110  018D                     	;# 
  2111  018E                     	;# 
  2112  0191                     	;# 
  2113  0191                     	;# 
  2114  0192                     	;# 
  2115  0193                     	;# 
  2116  0193                     	;# 
  2117  0194                     	;# 
  2118  0195                     	;# 
  2119  0196                     	;# 
  2120  0197                     	;# 
  2121  0199                     	;# 
  2122  019A                     	;# 
  2123  019B                     	;# 
  2124  019B                     	;# 
  2125  019B                     	;# 
  2126  019B                     	;# 
  2127  019C                     	;# 
  2128  019C                     	;# 
  2129  019D                     	;# 
  2130  019E                     	;# 
  2131  019F                     	;# 
  2132  020D                     	;# 
  2133  0210                     	;# 
  2134  0211                     	;# 
  2135  0211                     	;# 
  2136  0212                     	;# 
  2137  0212                     	;# 
  2138  0213                     	;# 
  2139  0213                     	;# 
  2140  0214                     	;# 
  2141  0214                     	;# 
  2142  0215                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0216                     	;# 
  2146  0216                     	;# 
  2147  0217                     	;# 
  2148  0217                     	;# 
  2149  0291                     	;# 
  2150  0291                     	;# 
  2151  0292                     	;# 
  2152  0293                     	;# 
  2153  0298                     	;# 
  2154  0298                     	;# 
  2155  0299                     	;# 
  2156  029A                     	;# 
  2157  0394                     	;# 
  2158  0395                     	;# 
  2159  0396                     	;# 
  2160  0FE4                     	;# 
  2161  0FE5                     	;# 
  2162  0FE6                     	;# 
  2163  0FE7                     	;# 
  2164  0FE8                     	;# 
  2165  0FE9                     	;# 
  2166  0FEA                     	;# 
  2167  0FEB                     	;# 
  2168  0FED                     	;# 
  2169  0FEE                     	;# 
  2170  0FEF                     	;# 
  2171                           
  2172                           	psect	idataBANK3
  2173  1EE5                     __pidataBANK3:	
  2174                           
  2175                           ;initializer for __product
  2176  1EE5  3463               	retlw	99
  2177  1EE6  3402               	retlw	2
  2178  1EE7  3400               	retlw	0
  2179  1EE8  3400               	retlw	0
  2180  1EE9  3400               	retlw	0
  2181  1EEA  3400               	retlw	0
  2182  1EEB  3400               	retlw	0
  2183  1EEC  3400               	retlw	0
  2184  1EED  3400               	retlw	0
  2185  1EEE  3400               	retlw	0
  2186  1EEF  3400               	retlw	0
  2187  1EF0  3400               	retlw	0
  2188  1EF1  34FF               	retlw	255
  2189  1EF2  34FF               	retlw	255
  2190  1EF3  34FF               	retlw	255
  2191  1EF4  3400               	retlw	0
  2192  1EF5  3400               	retlw	0
  2193  1EF6  3400               	retlw	0
  2194  1EF7  3400               	retlw	0
  2195  1EF8  3400               	retlw	0
  2196  1EF9  3400               	retlw	0
  2197  1EFA  3400               	retlw	0
  2198  1EFB  3400               	retlw	0
  2199  1EFC  3400               	retlw	0
  2200  1EFD  3400               	retlw	0
  2201  1EFE  3400               	retlw	0
  2202  1EFF  3400               	retlw	0
  2203  1F00  3400               	retlw	0
  2204  1F01  3400               	retlw	0
  2205  1F02  3400               	retlw	0
  2206  1F03  3400               	retlw	0
  2207  1F04  3400               	retlw	0
  2208                           
  2209                           	psect	stringtext
  2210  1800                     __pstringtext:	
  2211  1800                     _CC2500_registers_address:	
  2212  1800  3403               	retlw	3
  2213  1801  3416               	retlw	22
  2214  1802  3417               	retlw	23
  2215  1803  341E               	retlw	30
  2216  1804  341F               	retlw	31
  2217  1805  3420               	retlw	32
  2218  1806  342A               	retlw	42
  2219  1807  342B               	retlw	43
  2220  1808  340B               	retlw	11
  2221  1809  340C               	retlw	12
  2222  180A  340D               	retlw	13
  2223  180B  340E               	retlw	14
  2224  180C  340F               	retlw	15
  2225  180D  3410               	retlw	16
  2226  180E  3411               	retlw	17
  2227  180F  3412               	retlw	18
  2228  1810  3413               	retlw	19
  2229  1811  3414               	retlw	20
  2230  1812  340A               	retlw	10
  2231  1813  3415               	retlw	21
  2232  1814  3421               	retlw	33
  2233  1815  3422               	retlw	34
  2234  1816  3418               	retlw	24
  2235  1817  3419               	retlw	25
  2236  1818  341A               	retlw	26
  2237  1819  341B               	retlw	27
  2238  181A  341C               	retlw	28
  2239  181B  341D               	retlw	29
  2240  181C  3423               	retlw	35
  2241  181D  3424               	retlw	36
  2242  181E  3425               	retlw	37
  2243  181F  3426               	retlw	38
  2244  1820  3429               	retlw	41
  2245  1821  342C               	retlw	44
  2246  1822  342D               	retlw	45
  2247  1823  342E               	retlw	46
  2248  1824  3400               	retlw	0
  2249  1825  3401               	retlw	1
  2250  1826  3402               	retlw	2
  2251  1827  3407               	retlw	7
  2252  1828  3408               	retlw	8
  2253  1829  3409               	retlw	9
  2254  182A  3406               	retlw	6
  2255  182B  3404               	retlw	4
  2256  182C  3405               	retlw	5
  2257  182D  3427               	retlw	39
  2258  182E  3428               	retlw	40
  2259  182F                     __end_of_CC2500_registers_address:	
  2260  182F                     _CC2500_rfSettings:	
  2261  182F  3407               	retlw	7
  2262  1830  3407               	retlw	7
  2263  1831  3430               	retlw	48
  2264  1832  3487               	retlw	135
  2265  1833  346B               	retlw	107
  2266  1834  34F8               	retlw	248
  2267  1835  347F               	retlw	127
  2268  1836  343F               	retlw	63
  2269  1837  3409               	retlw	9
  2270  1838  3400               	retlw	0
  2271  1839  345C               	retlw	92
  2272  183A  34A7               	retlw	167
  2273  183B  3462               	retlw	98
  2274  183C  3486               	retlw	134
  2275  183D  3483               	retlw	131
  2276  183E  3403               	retlw	3
  2277  183F  3422               	retlw	34
  2278  1840  34F8               	retlw	248
  2279  1841  3400               	retlw	0
  2280  1842  3444               	retlw	68
  2281  1843  34B6               	retlw	182
  2282  1844  3410               	retlw	16
  2283  1845  3418               	retlw	24
  2284  1846  341D               	retlw	29
  2285  1847  341C               	retlw	28
  2286  1848  34C7               	retlw	199
  2287  1849  3400               	retlw	0
  2288  184A  34B2               	retlw	178
  2289  184B  34EA               	retlw	234
  2290  184C  340A               	retlw	10
  2291  184D  3400               	retlw	0
  2292  184E  3411               	retlw	17
  2293  184F  3459               	retlw	89
  2294  1850  3488               	retlw	136
  2295  1851  3431               	retlw	49
  2296  1852  340B               	retlw	11
  2297  1853  342F               	retlw	47
  2298  1854  342E               	retlw	46
  2299  1855  3406               	retlw	6
  2300  1856  3404               	retlw	4
  2301  1857  3405               	retlw	5
  2302  1858  3400               	retlw	0
  2303  1859  3430               	retlw	48
  2304  185A  34D3               	retlw	211
  2305  185B  3491               	retlw	145
  2306  185C  3441               	retlw	65
  2307  185D  3400               	retlw	0
  2308  185E                     __end_of_CC2500_rfSettings:	
  2309  185E                     _CC2500_patable_vaule:	
  2310  185E  34FE               	retlw	254
  2311  185F  34FE               	retlw	254
  2312  1860  34FE               	retlw	254
  2313  1861  34FE               	retlw	254
  2314  1862  34FE               	retlw	254
  2315  1863  34FE               	retlw	254
  2316  1864  34FE               	retlw	254
  2317  1865  34FE               	retlw	254
  2318  1866                     __end_of_CC2500_patable_vaule:	
  2319                           
  2320                           	psect	nvBANK1
  2321  00EE                     __pnvBANK1:	
  2322  00EE                     _product:	
  2323  00EE                     	ds	1
  2324  000C                     _PORTA	set	12
  2325  000D                     _PORTB	set	13
  2326  000E                     _PORTC	set	14
  2327  0018                     _T1CON	set	24
  2328  0017                     _TMR1H	set	23
  2329  0016                     _TMR1L	set	22
  2330  005F                     _GIE	set	95
  2331  005B                     _IOCIE	set	91
  2332  0058                     _IOCIF	set	88
  2333  005E                     _PEIE	set	94
  2334  0060                     _RA0	set	96
  2335  0064                     _RA4	set	100
  2336  0066                     _RA6	set	102
  2337  0067                     _RA7	set	103
  2338  0068                     _RB0	set	104
  2339  0069                     _RB1	set	105
  2340  006A                     _RB2	set	106
  2341  006B                     _RB3	set	107
  2342  006D                     _RB5	set	109
  2343  0070                     _RC0	set	112
  2344  0071                     _RC1	set	113
  2345  0073                     _RC3	set	115
  2346  0074                     _RC4	set	116
  2347  0075                     _RC5	set	117
  2348  0088                     _TMR1IF	set	136
  2349  009D                     _ADCON0	set	157
  2350  009E                     _ADCON1	set	158
  2351  009C                     _ADRESH	set	156
  2352  009B                     _ADRESL	set	155
  2353  0099                     _OSCCON	set	153
  2354  008C                     _TRISA	set	140
  2355  008D                     _TRISB	set	141
  2356  008E                     _TRISC	set	142
  2357  0097                     _WDTCON	set	151
  2358  04E9                     _GO_nDONE	set	1257
  2359  0488                     _TMR1IE	set	1160
  2360  0117                     _FVRCON	set	279
  2361  010C                     _LATA	set	268
  2362  010D                     _LATB	set	269
  2363  010E                     _LATC	set	270
  2364  018C                     _ANSELA	set	396
  2365  018D                     _ANSELB	set	397
  2366  018E                     _ANSELC	set	398
  2367  0192                     _PMADRH	set	402
  2368  0191                     _PMADRL	set	401
  2369  0196                     _PMCON2	set	406
  2370  0194                     _PMDATH	set	404
  2371  0193                     _PMDATL	set	403
  2372  0CAE                     _CFGS	set	3246
  2373  0CAC                     _FREE	set	3244
  2374  0CAD                     _LWLO	set	3245
  2375  0CA8                     _RD	set	3240
  2376  0CA9                     _WR	set	3241
  2377  0CAA                     _WREN	set	3242
  2378  020D                     _WPUB	set	525
  2379  0396                     _IOCBF	set	918
  2380  0395                     _IOCBN	set	917
  2381  0394                     _IOCBP	set	916
  2382  1CB2                     _IOCBF2	set	7346
  2383                           
  2384                           ; #config settings
  2385  0000                     
  2386                           	psect	cinit
  2387  0021                     start_initialization:	
  2388  0021                     __initialization:	
  2389                           
  2390                           ; Clear objects allocated to BITCOMMON
  2391  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BITBANK1
  2394  0022  0021               	movlb	1	; select bank1
  2395  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2396                           
  2397                           ; Clear objects allocated to BANK1
  2398  0024  30A0               	movlw	low __pbssBANK1
  2399  0025  0084               	movwf	4
  2400  0026  3000               	movlw	high __pbssBANK1
  2401  0027  0085               	movwf	5
  2402  0028  3045               	movlw	69
  2403  0029  319A  2217  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK2
  2406  002C  3020               	movlw	low __pbssBANK2
  2407  002D  0084               	movwf	4
  2408  002E  3001               	movlw	high __pbssBANK2
  2409  002F  0085               	movwf	5
  2410  0030  304D               	movlw	77
  2411  0031  319A  2217  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Clear objects allocated to BANK3
  2414  0034  30A0               	movlw	low __pbssBANK3
  2415  0035  0084               	movwf	4
  2416  0036  3001               	movlw	high __pbssBANK3
  2417  0037  0085               	movwf	5
  2418  0038  302C               	movlw	44
  2419  0039  319A  2217  3180   	fcall	clear_ram0
  2420                           
  2421                           ; Clear objects allocated to BANK4
  2422  003C  3020               	movlw	low __pbssBANK4
  2423  003D  0084               	movwf	4
  2424  003E  3002               	movlw	high __pbssBANK4
  2425  003F  0085               	movwf	5
  2426  0040  3025               	movlw	37
  2427  0041  319A  2217  3180   	fcall	clear_ram0
  2428                           
  2429                           ; Initialize objects allocated to BANK3
  2430  0044  30E5               	movlw	low __pidataBANK3
  2431  0045  0084               	movwf	4
  2432  0046  309E               	movlw	(high __pidataBANK3)| (0+128)
  2433  0047  0085               	movwf	5
  2434  0048  30CC               	movlw	low __pdataBANK3
  2435  0049  0086               	movwf	6
  2436  004A  3001               	movlw	high __pdataBANK3
  2437  004B  0087               	movwf	7
  2438  004C  3020               	movlw	32
  2439  004D  319A  2211         	fcall	init_ram
  2440  004F                     end_of_initialization:	
  2441                           ;End of C runtime variable initialization code
  2442                           
  2443  004F                     __end_of__initialization:	
  2444  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2445  0050  0020               	movlb	0
  2446  0051  3194  2C87         	ljmp	_main	;jump to C main() function
  2447                           
  2448                           	psect	bitbssCOMMON
  2449  03E8                     __pbitbssCOMMON:	
  2450  03E8                     _Transceive_OK:	
  2451  03E8                     	ds	1
  2452                           
  2453                           	psect	bitbssBANK1
  2454  0778                     __pbitbssBANK1:	
  2455  0778                     _Receive_OK:	
  2456  0778                     	ds	1
  2457                           
  2458                           	psect	bssBANK1
  2459  00A0                     __pbssBANK1:	
  2460  00A0                     _RF1:	
  2461  00A0                     	ds	15
  2462  00AF                     _myMain:	
  2463  00AF                     	ds	13
  2464  00BC                     _DimmerIntr1:	
  2465  00BC                     	ds	12
  2466  00C8                     _CRC:	
  2467  00C8                     	ds	1
  2468  00C9                     _Cmd:	
  2469  00C9                     	ds	1
  2470  00CA                     _DelayOff:	
  2471  00CA                     	ds	1
  2472  00CB                     _DimmerIntr:	
  2473  00CB                     	ds	1
  2474  00CC                     _DimmerLights:	
  2475  00CC                     	ds	1
  2476  00CD                     _LED:	
  2477  00CD                     	ds	1
  2478  00CE                     _RSSI:	
  2479  00CE                     	ds	1
  2480  00CF                     _Rx_Length:	
  2481  00CF                     	ds	1
  2482  00D0                     _SPI0Buffer:	
  2483  00D0                     	ds	1
  2484  00D1                     _Sw:	
  2485  00D1                     	ds	1
  2486  00D2                     _SwDetect:	
  2487  00D2                     	ds	1
  2488  00D3                     _Tx_Length:	
  2489  00D3                     	ds	1
  2490  00D4                     _r_address:	
  2491  00D4                     	ds	1
  2492  00D5                     _r_data:	
  2493  00D5                     	ds	1
  2494  00D6                     _s_data:	
  2495  00D6                     	ds	1
  2496  00D7                     _Temp:	
  2497  00D7                     	ds	14
  2498                           
  2499                           	psect	bssBANK2
  2500  0120                     __pbssBANK2:	
  2501  0120                     _Buz1:	
  2502  0120                     	ds	12
  2503  012C                     _Dimmer:	
  2504  012C                     	ds	5
  2505  0131                     _Timer1:	
  2506  0131                     	ds	3
  2507  0134                     _RF_Count:	
  2508  0134                     	ds	2
  2509  0136                     _WDT:	
  2510  0136                     	ds	2
  2511  0138                     _Light:	
  2512  0138                     	ds	1
  2513  0139                     _Load:	
  2514  0139                     	ds	40
  2515  0161                     _DimmerLights1:	
  2516  0161                     	ds	8
  2517  0169                     _VarErrLED:	
  2518  0169                     	ds	4
  2519                           
  2520                           	psect	bssBANK3
  2521  01A0                     __pbssBANK3:	
  2522  01A0                     _RF_Data:	
  2523  01A0                     	ds	30
  2524  01BE                     _Sw1:	
  2525  01BE                     	ds	9
  2526  01C7                     _DlySw1:	
  2527  01C7                     	ds	5
  2528                           
  2529                           	psect	dataBANK3
  2530  01CC                     __pdataBANK3:	
  2531  01CC                     __product:	
  2532  01CC                     	ds	32
  2533                           
  2534                           	psect	bssBANK4
  2535  0220                     __pbssBANK4:	
  2536  0220                     _Memory:	
  2537  0220                     	ds	37
  2538                           
  2539                           	psect	clrtext
  2540  1A17                     clear_ram0:	
  2541                           ;	Called with FSR0 containing the base address, and
  2542                           ;	WREG with the size to clear
  2543                           
  2544  1A17  0064               	clrwdt	;clear the watchdog before getting into this loop
  2545  1A18                     clrloop0:	
  2546  1A18  0180               	clrf	0	;clear RAM location pointed to by FSR
  2547  1A19  3101               	addfsr 0,1
  2548  1A1A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2549  1A1B  2A18               	goto	clrloop0	;have we reached the end yet?
  2550  1A1C  3400               	retlw	0	;all done for this memory range, return
  2551                           
  2552                           	psect	inittext
  2553  1A11                     init_ram:	
  2554  1A11  00FE               	movwf	126
  2555  1A12                     initloop:	
  2556  1A12  0012               	moviw fsr0++
  2557  1A13  001E               	movwi fsr1++
  2558  1A14  0BFE               	decfsz	126,f
  2559  1A15  2A12               	goto	initloop
  2560  1A16  3400               	retlw	0
  2561                           
  2562                           	psect	cstackBANK1
  2563  00E5                     __pcstackBANK1:	
  2564  00E5                     setDimmerLights_OnOff@lights:	
  2565  00E5                     setRFSW_Control@status:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568                           
  2569                           ; 1 bytes @ 0x0
  2570  00E5                     	ds	1
  2571  00E6                     setDimmerLights_Main@lights:	
  2572  00E6                     setRFSW_Control@rfDimming:	
  2573                           ; 1 bytes @ 0x1
  2574                           
  2575                           
  2576                           ; 1 bytes @ 0x1
  2577  00E6                     	ds	1
  2578  00E7                     setRFSW_Control@sw:	
  2579                           
  2580                           ; 1 bytes @ 0x2
  2581  00E7                     	ds	1
  2582  00E8                     ??_setRF_Main:	
  2583                           
  2584                           ; 0 bytes @ 0x3
  2585  00E8                     	ds	1
  2586  00E9                     setRF_Main@error:	
  2587                           
  2588                           ; 1 bytes @ 0x4
  2589  00E9                     	ds	1
  2590  00EA                     ?_main:	
  2591  00EA                     main@argc:	
  2592                           ; 2 bytes @ 0x5
  2593                           
  2594                           
  2595                           ; 2 bytes @ 0x5
  2596  00EA                     	ds	2
  2597  00EC                     main@argv:	
  2598                           
  2599                           ; 2 bytes @ 0x7
  2600  00EC                     	ds	2
  2601                           
  2602                           	psect	cstackCOMMON
  2603  0070                     __pcstackCOMMON:	
  2604  0070                     ?_CC2500_WriteCommand:	
  2605  0070                     ?_RF_Timeout_Counter:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setRF_TimeoutCleared:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_WriteByte:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_ReadStatus:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_ReadByte:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_PowerRST:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_InitSetREG:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_InitPATable:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_ClearTXFIFO:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_ClearRXFIFO:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_FrequencyCabr:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_SIDLEMode:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_DlyOff_Initialization:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_DlyOff_Main:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_SwOn:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_SwOff:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setMemory_Modify:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_Initialization:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_Main:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_DimmerLights_DimmingFunction:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_Line:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setDimmerLights_DimmingClose:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setTxData:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setRF_TransceiveGO:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setLED_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setLED_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_Fosc_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IO_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_TMR1_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_ADC_Set:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IOC_Set:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_WDT_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_TMR1_ISR:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_IOC_ISR:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Timeout_Counter:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_set_TimeoutCleared:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Write:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Modify:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_WDT_Clearing:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_myMain_Initialization:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Temp_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Load_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Switch_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_RF_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_getLoad_AD:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_getTemp_AD:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_my_MainTimer:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Temp_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Load_Main:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Switch_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_RF_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Exception_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setLoad_AH_AL_Restore:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setTemp_Initialization:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setTemp_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setOverTemp_ADV_Restore:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setRF_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRF_Main:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_RF_RxDisable:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_getRxData:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setLog_Code:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setControl_Lights_Table:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setRFSW_Control:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setRFSW_AdjControl:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setRF_AdjControl:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setSw_Initialization:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setSw_Main:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_Buzzer_Initialization:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_Buzzer_Main:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_CC2500_TxData:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_CC2500_RxData:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_CC2500_PowerOnInitial:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DelayOffPointSelect:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DelayOff_Initialization:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DelayOff_Main:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DimmerIntr_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_SelectPointer:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_Initialization:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setDimmerLights_DimmingOn:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_DimmerLights_Main:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_TMR_1:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ??_DimmerLights_TMR_1:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_DimmerLights_IOC_1:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LedPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Initialization:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_LED_Main:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Mcu_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_ISR:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Unlock:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Erasing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setMemory_LoopSave:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_WDT_Main:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_setRF_Learn:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_TouchPower:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_SwPointSelect:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_getDimmerLights_Status:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_ValueToPercent:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_PercentToValue:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getLoad_OK:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_All_Error_Status:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_All_LightsStatus:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getDimmerLights_Allow_Condition:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getCmd_Status:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_Flash_Memory_Read:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getAll_Sw_KeyStatus:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getRF_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getSw_KeyStatus:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDelayOff_GO:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmerIntr_DimmingValue:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmerLights_Line:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDimmer_LoadGO:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDimmer_Load_Status:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getMain_Lights_Count:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?i1___lbdiv:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     setDimmerLights_Initialization@lights:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     getDimmerLights_Allow_Condition@lights:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     getSw_KeyStatus@sw:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     i1___lbdiv@divisor:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x0
  2973  0070                     	ds	1
  2974  0071                     ??_TMR1_ISR:	
  2975  0071                     ??i1___lbdiv:	
  2976                           ; 0 bytes @ 0x1
  2977                           
  2978                           
  2979                           ; 0 bytes @ 0x1
  2980  0071                     	ds	1
  2981  0072                     i1___lbdiv@dividend:	
  2982                           
  2983                           ; 1 bytes @ 0x2
  2984  0072                     	ds	1
  2985  0073                     i1___lbdiv@counter:	
  2986                           
  2987                           ; 1 bytes @ 0x3
  2988  0073                     	ds	1
  2989  0074                     i1___lbdiv@quotient:	
  2990                           
  2991                           ; 1 bytes @ 0x4
  2992  0074                     	ds	1
  2993  0075                     ?i1_Division:	
  2994  0075                     i1Division@num:	
  2995                           ; 1 bytes @ 0x5
  2996                           
  2997                           
  2998                           ; 1 bytes @ 0x5
  2999  0075                     	ds	1
  3000  0076                     ??i1_Division:	
  3001                           
  3002                           ; 0 bytes @ 0x6
  3003  0076                     	ds	2
  3004  0078                     i1Division@value:	
  3005                           
  3006                           ; 1 bytes @ 0x8
  3007  0078                     	ds	1
  3008  0079                     i1Division@result:	
  3009                           
  3010                           ; 1 bytes @ 0x9
  3011  0079                     	ds	1
  3012  007A                     ??_DimmerLights_IOC_1:	
  3013                           
  3014                           ; 0 bytes @ 0xA
  3015  007A                     	ds	2
  3016  007C                     ??_IOC_ISR:	
  3017  007C                     ??_ISR:	
  3018                           ; 0 bytes @ 0xC
  3019                           
  3020                           
  3021                           ; 0 bytes @ 0xC
  3022  007C                     	ds	1
  3023                           
  3024                           	psect	cstackBANK0
  3025  0020                     __pcstackBANK0:	
  3026  0020                     ??_RF_Timeout_Counter:	
  3027  0020                     ??_setRF_TimeoutCleared:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_CC2500_WriteByte:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_CC2500_ReadByte:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ?_DelayTime_1us:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_setMemory_Modify:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_setDimmerLights_Initialization:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_getLoad_OK:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_getMain_All_Error_Status:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_getMain_All_LightsStatus:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_DimmerLights_DimmingFunction:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_setDimmerLights_Line:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_getCmd_Status:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ?_setCmd_Status:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_setTxData:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_setRF_TransceiveGO:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_Fosc_Set:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_IO_Set:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_TMR1_Set:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_ADC_Set:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_IOC_Set:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_WDT_Set:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_Timeout_Counter:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_set_TimeoutCleared:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_Flash_Memory_Read:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ?_setMemory_Data:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_Flash_Memory_Write:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_getAll_Sw_KeyStatus:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_WDT_Clearing:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_myMain_Initialization:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_Temp_Initialization:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_setLoad_AH_AL_Restore:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_setTemp_Initialization:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_setOverTemp_ADV_Restore:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_setRF_Initialization:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_getRF_KeyStatus:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_getSw_KeyStatus:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ??_Buzzer_Initialization:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_Buzzer_Main:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ??_DelayOffPointSelect:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ?_setDimmerIntr_ControlStatus:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_getDimmerIntr_DimmingValue:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_getDimmerIntr_Dimming_Sw:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ?_setDimmerIntr_Dimming_RF:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_DimmerLights_SelectPointer:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_getDimmerLights_Line:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ??_getDimmer_LoadGO:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ??_getDimmer_Load_Status:	
  3172                           ; 0 bytes @ 0x0
  3173                           
  3174  0020                     ??_LedPointSelect:	
  3175                           ; 0 bytes @ 0x0
  3176                           
  3177  0020                     ??_Flash_Memory_Unlock:	
  3178                           ; 0 bytes @ 0x0
  3179                           
  3180  0020                     ??_Flash_Memory_Erasing:	
  3181                           ; 0 bytes @ 0x0
  3182                           
  3183  0020                     ??_setMemory_LoopSave:	
  3184                           ; 0 bytes @ 0x0
  3185                           
  3186  0020                     ??_WDT_Main:	
  3187                           ; 0 bytes @ 0x0
  3188                           
  3189  0020                     ??_getMain_Lights_Count:	
  3190                           ; 0 bytes @ 0x0
  3191                           
  3192  0020                     ??_setRF_Learn:	
  3193                           ; 0 bytes @ 0x0
  3194                           
  3195  0020                     ??_TouchPower:	
  3196                           ; 0 bytes @ 0x0
  3197                           
  3198  0020                     ??_SwPointSelect:	
  3199                           ; 0 bytes @ 0x0
  3200                           
  3201  0020                     ?___bmul:	
  3202                           ; 0 bytes @ 0x0
  3203                           
  3204  0020                     ?___lbdiv:	
  3205                           ; 1 bytes @ 0x0
  3206                           
  3207  0020                     ?_getBuz_GO:	
  3208                           ; 1 bytes @ 0x0
  3209                           
  3210  0020                     ?_getAD:	
  3211                           ; 2 bytes @ 0x0
  3212                           
  3213  0020                     ?___wmul:	
  3214                           ; 2 bytes @ 0x0
  3215                           
  3216  0020                     ?___awdiv:	
  3217                           ; 2 bytes @ 0x0
  3218                           
  3219  0020                     ?___lwdiv:	
  3220                           ; 2 bytes @ 0x0
  3221                           
  3222  0020                     ?___ftpack:	
  3223                           ; 2 bytes @ 0x0
  3224                           
  3225  0020                     setDimmerIntr_ControlStatus@command:	
  3226                           ; 3 bytes @ 0x0
  3227                           
  3228  0020                     setDimmerIntr_Dimming_Sw@command:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0020                     getDimmerIntr_Dimming_Sw@lights:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     setDimmerIntr_Dimming_RF@command:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     setDimmerLights_Line@lights:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0020                     getDimmerLights_Line@line:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0020                     getDimmer_LoadGO@loadgo:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0020                     getDimmer_Load_Status@status:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0020                     getAD@adcon1:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0020                     setMemory_Data@data:	
  3256                           ; 1 bytes @ 0x0
  3257                           
  3258  0020                     getMain_All_LightsStatus@status:	
  3259                           ; 1 bytes @ 0x0
  3260                           
  3261  0020                     getMain_Lights_Count@count:	
  3262                           ; 1 bytes @ 0x0
  3263                           
  3264  0020                     setCmd_Status@cmd:	
  3265                           ; 1 bytes @ 0x0
  3266                           
  3267  0020                     getCmd_Status@number:	
  3268                           ; 1 bytes @ 0x0
  3269                           
  3270  0020                     getLoad_OK@ok:	
  3271                           ; 1 bytes @ 0x0
  3272                           
  3273  0020                     ___bmul@multiplicand:	
  3274                           ; 1 bytes @ 0x0
  3275                           
  3276  0020                     ___lbdiv@divisor:	
  3277                           ; 1 bytes @ 0x0
  3278                           
  3279  0020                     DelayTime_1us@count:	
  3280                           ; 1 bytes @ 0x0
  3281                           
  3282  0020                     ___wmul@multiplier:	
  3283                           ; 2 bytes @ 0x0
  3284                           
  3285  0020                     ___awdiv@divisor:	
  3286                           ; 2 bytes @ 0x0
  3287                           
  3288  0020                     ___lwdiv@divisor:	
  3289                           ; 2 bytes @ 0x0
  3290                           
  3291  0020                     ___ftpack@arg:	
  3292                           ; 2 bytes @ 0x0
  3293                           
  3294                           
  3295                           ; 3 bytes @ 0x0
  3296  0020                     	ds	1
  3297  0021                     ??_getDimmerLights_Allow_Condition:	
  3298  0021                     ??_setCmd_Status:	
  3299                           ; 0 bytes @ 0x1
  3300                           
  3301  0021                     ??_setMemory_Data:	
  3302                           ; 0 bytes @ 0x1
  3303                           
  3304  0021                     ??_RF_Initialization:	
  3305                           ; 0 bytes @ 0x1
  3306                           
  3307  0021                     ??_setDimmerIntr_ControlStatus:	
  3308                           ; 0 bytes @ 0x1
  3309                           
  3310  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3311                           ; 0 bytes @ 0x1
  3312                           
  3313  0021                     ??_setDimmerIntr_Dimming_RF:	
  3314                           ; 0 bytes @ 0x1
  3315                           
  3316  0021                     ??_Mcu_Initialization:	
  3317                           ; 0 bytes @ 0x1
  3318                           
  3319  0021                     ??___bmul:	
  3320                           ; 0 bytes @ 0x1
  3321                           
  3322  0021                     ??___lbdiv:	
  3323                           ; 0 bytes @ 0x1
  3324                           
  3325  0021                     CC2500_WriteByte@loop_a:	
  3326                           ; 0 bytes @ 0x1
  3327                           
  3328  0021                     CC2500_ReadByte@loop_b:	
  3329                           ; 1 bytes @ 0x1
  3330                           
  3331  0021                     DelayOffPointSelect@sw:	
  3332                           ; 1 bytes @ 0x1
  3333                           
  3334  0021                     getDimmerIntr_DimmingValue@lights:	
  3335                           ; 1 bytes @ 0x1
  3336                           
  3337  0021                     getDimmerIntr_Dimming_Sw@status:	
  3338                           ; 1 bytes @ 0x1
  3339                           
  3340  0021                     DimmerLights_SelectPointer@lights:	
  3341                           ; 1 bytes @ 0x1
  3342                           
  3343  0021                     DimmerLights_DimmingFunction@lights:	
  3344                           ; 1 bytes @ 0x1
  3345                           
  3346  0021                     LedPointSelect@led:	
  3347                           ; 1 bytes @ 0x1
  3348                           
  3349  0021                     Flash_Memory_Read@i:	
  3350                           ; 1 bytes @ 0x1
  3351                           
  3352  0021                     Flash_Memory_Write@i:	
  3353                           ; 1 bytes @ 0x1
  3354                           
  3355  0021                     setMemory_Modify@command:	
  3356                           ; 1 bytes @ 0x1
  3357                           
  3358  0021                     setMemory_LoopSave@command:	
  3359                           ; 1 bytes @ 0x1
  3360                           
  3361  0021                     getMain_Lights_Count@status1:	
  3362                           ; 1 bytes @ 0x1
  3363                           
  3364  0021                     getCmd_Status@cmd:	
  3365                           ; 1 bytes @ 0x1
  3366                           
  3367  0021                     setLoad_AH_AL_Restore@i:	
  3368                           ; 1 bytes @ 0x1
  3369                           
  3370  0021                     setRF_Learn@command:	
  3371                           ; 1 bytes @ 0x1
  3372                           
  3373  0021                     getRF_KeyStatus@key:	
  3374                           ; 1 bytes @ 0x1
  3375                           
  3376  0021                     setRF_TransceiveGO@command:	
  3377                           ; 1 bytes @ 0x1
  3378                           
  3379  0021                     SwPointSelect@sw:	
  3380                           ; 1 bytes @ 0x1
  3381                           
  3382  0021                     getSw_KeyStatus@status:	
  3383                           ; 1 bytes @ 0x1
  3384                           
  3385  0021                     getAll_Sw_KeyStatus@status:	
  3386                           ; 1 bytes @ 0x1
  3387                           
  3388  0021                     _getMain_All_Error_Status$3624:	
  3389                           ; 1 bytes @ 0x1
  3390                           
  3391  0021                     setOverTemp_ADV_Restore@i:	
  3392                           ; 2 bytes @ 0x1
  3393                           
  3394                           
  3395                           ; 2 bytes @ 0x1
  3396  0021                     	ds	1
  3397  0022                     ??_CC2500_WriteCommand:	
  3398  0022                     ??_CC2500_ReadStatus:	
  3399                           ; 0 bytes @ 0x2
  3400                           
  3401  0022                     ??_DelayTime_1us:	
  3402                           ; 0 bytes @ 0x2
  3403                           
  3404  0022                     ?_CC2500_WriteREG:	
  3405                           ; 0 bytes @ 0x2
  3406                           
  3407  0022                     ??_DlyOff_Initialization:	
  3408                           ; 0 bytes @ 0x2
  3409                           
  3410  0022                     ??_getDimmerLights_Status:	
  3411                           ; 0 bytes @ 0x2
  3412                           
  3413  0022                     ??_setDimmerLights_SwOff:	
  3414                           ; 0 bytes @ 0x2
  3415                           
  3416  0022                     ?_setLED:	
  3417                           ; 0 bytes @ 0x2
  3418                           
  3419  0022                     ??_setLED_Main:	
  3420                           ; 0 bytes @ 0x2
  3421                           
  3422  0022                     ??_Load_Initialization:	
  3423                           ; 0 bytes @ 0x2
  3424                           
  3425  0022                     ??_getBuz_GO:	
  3426                           ; 0 bytes @ 0x2
  3427                           
  3428  0022                     ??_getDelayOff_GO:	
  3429                           ; 0 bytes @ 0x2
  3430                           
  3431  0022                     ??_setDimmerLights_DimmingOn:	
  3432                           ; 0 bytes @ 0x2
  3433                           
  3434  0022                     ?_setDimmerLights_DimmingRun:	
  3435                           ; 0 bytes @ 0x2
  3436                           
  3437  0022                     CC2500_WriteREG@value:	
  3438                           ; 0 bytes @ 0x2
  3439                           
  3440  0022                     DlyOff_Initialization@sw:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0022                     getDelayOff_GO@sw:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0022                     setDimmerIntr_ControlStatus@lights:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449  0022                     getDimmerIntr_DimmingValue@value:	
  3450                           ; 1 bytes @ 0x2
  3451                           
  3452  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3453                           ; 1 bytes @ 0x2
  3454                           
  3455  0022                     setDimmerIntr_Dimming_RF@lights:	
  3456                           ; 1 bytes @ 0x2
  3457                           
  3458  0022                     setDimmerLights_SwOff@sw:	
  3459                           ; 1 bytes @ 0x2
  3460                           
  3461  0022                     setDimmerLights_DimmingOn@sw:	
  3462                           ; 1 bytes @ 0x2
  3463                           
  3464  0022                     getDimmerLights_Allow_Condition@allow:	
  3465                           ; 1 bytes @ 0x2
  3466                           
  3467  0022                     getDimmerLights_Status@lights:	
  3468                           ; 1 bytes @ 0x2
  3469                           
  3470  0022                     setDimmerLights_DimmingRun@command:	
  3471                           ; 1 bytes @ 0x2
  3472                           
  3473  0022                     setLED@command:	
  3474                           ; 1 bytes @ 0x2
  3475                           
  3476  0022                     Flash_Memory_Read@address:	
  3477                           ; 1 bytes @ 0x2
  3478                           
  3479  0022                     setMemory_Data@address:	
  3480                           ; 1 bytes @ 0x2
  3481                           
  3482  0022                     setCmd_Status@number:	
  3483                           ; 1 bytes @ 0x2
  3484                           
  3485  0022                     _getRF_KeyStatus$5423:	
  3486                           ; 1 bytes @ 0x2
  3487                           
  3488  0022                     _getSw_KeyStatus$6479:	
  3489                           ; 1 bytes @ 0x2
  3490                           
  3491  0022                     _getAll_Sw_KeyStatus$6482:	
  3492                           ; 1 bytes @ 0x2
  3493                           
  3494  0022                     ___bmul@product:	
  3495                           ; 1 bytes @ 0x2
  3496                           
  3497  0022                     ___lbdiv@dividend:	
  3498                           ; 1 bytes @ 0x2
  3499                           
  3500  0022                     DelayTime_1us@i:	
  3501                           ; 1 bytes @ 0x2
  3502                           
  3503  0022                     ___wmul@multiplicand:	
  3504                           ; 2 bytes @ 0x2
  3505                           
  3506  0022                     ___awdiv@dividend:	
  3507                           ; 2 bytes @ 0x2
  3508                           
  3509  0022                     ___lwdiv@dividend:	
  3510                           ; 2 bytes @ 0x2
  3511                           
  3512                           
  3513                           ; 2 bytes @ 0x2
  3514  0022                     	ds	1
  3515  0023                     ??_CC2500_WriteREG:	
  3516  0023                     ??_setLED:	
  3517                           ; 0 bytes @ 0x3
  3518                           
  3519  0023                     ??_setDimmerLights_DimmingClose:	
  3520                           ; 0 bytes @ 0x3
  3521                           
  3522  0023                     ??_DelayOff_Initialization:	
  3523                           ; 0 bytes @ 0x3
  3524                           
  3525  0023                     ??_setDimmerLights_DimmingRun:	
  3526                           ; 0 bytes @ 0x3
  3527                           
  3528  0023                     ??_getAD:	
  3529                           ; 0 bytes @ 0x3
  3530                           
  3531  0023                     CC2500_WriteCommand@command:	
  3532                           ; 0 bytes @ 0x3
  3533                           
  3534  0023                     CC2500_ReadStatus@status_addr:	
  3535                           ; 1 bytes @ 0x3
  3536                           
  3537  0023                     getDelayOff_GO@go:	
  3538                           ; 1 bytes @ 0x3
  3539                           
  3540  0023                     _getDimmerLights_Allow_Condition$2293:	
  3541                           ; 1 bytes @ 0x3
  3542                           
  3543  0023                     getDimmerLights_Status@status:	
  3544                           ; 1 bytes @ 0x3
  3545                           
  3546  0023                     setLED@led:	
  3547                           ; 1 bytes @ 0x3
  3548                           
  3549  0023                     getAD@adcon0:	
  3550                           ; 1 bytes @ 0x3
  3551                           
  3552  0023                     Flash_Memory_Read@ret:	
  3553                           ; 1 bytes @ 0x3
  3554                           
  3555  0023                     ___bmul@multiplier:	
  3556                           ; 1 bytes @ 0x3
  3557                           
  3558  0023                     ___ftpack@exp:	
  3559                           ; 1 bytes @ 0x3
  3560                           
  3561  0023                     ___lbdiv@counter:	
  3562                           ; 1 bytes @ 0x3
  3563                           
  3564  0023                     _getMain_All_Error_Status$3625:	
  3565                           ; 1 bytes @ 0x3
  3566                           
  3567                           
  3568                           ; 2 bytes @ 0x3
  3569  0023                     	ds	1
  3570  0024                     ??_CC2500_ClearTXFIFO:	
  3571  0024                     ??_CC2500_ClearRXFIFO:	
  3572                           ; 0 bytes @ 0x4
  3573                           
  3574  0024                     ??_CC2500_SIDLEMode:	
  3575                           ; 0 bytes @ 0x4
  3576                           
  3577  0024                     ??_setLED_Initialization:	
  3578                           ; 0 bytes @ 0x4
  3579                           
  3580  0024                     ??_Flash_Memory_Modify:	
  3581                           ; 0 bytes @ 0x4
  3582                           
  3583  0024                     ??_getLoad_AD:	
  3584                           ; 0 bytes @ 0x4
  3585                           
  3586  0024                     ??_getTemp_AD:	
  3587                           ; 0 bytes @ 0x4
  3588                           
  3589  0024                     ??_RF_RxDisable:	
  3590                           ; 0 bytes @ 0x4
  3591                           
  3592  0024                     ??_setRF_AdjControl:	
  3593                           ; 0 bytes @ 0x4
  3594                           
  3595  0024                     ??_setSw_Initialization:	
  3596                           ; 0 bytes @ 0x4
  3597                           
  3598  0024                     ??_CC2500_TxData:	
  3599                           ; 0 bytes @ 0x4
  3600                           
  3601  0024                     ??_CC2500_RxData:	
  3602                           ; 0 bytes @ 0x4
  3603                           
  3604  0024                     ??_Flash_Memory_Initialization:	
  3605                           ; 0 bytes @ 0x4
  3606                           
  3607  0024                     ??___wmul:	
  3608                           ; 0 bytes @ 0x4
  3609                           
  3610  0024                     ??___awdiv:	
  3611                           ; 0 bytes @ 0x4
  3612                           
  3613  0024                     ??___lwdiv:	
  3614                           ; 0 bytes @ 0x4
  3615                           
  3616  0024                     CC2500_WriteREG@w_addr:	
  3617                           ; 0 bytes @ 0x4
  3618                           
  3619  0024                     setDimmerLights_DimmingRun@lights:	
  3620                           ; 1 bytes @ 0x4
  3621                           
  3622  0024                     setLED_Initialization@led:	
  3623                           ; 1 bytes @ 0x4
  3624                           
  3625  0024                     setLED_Main@led:	
  3626                           ; 1 bytes @ 0x4
  3627                           
  3628  0024                     setSw_Initialization@sw:	
  3629                           ; 1 bytes @ 0x4
  3630                           
  3631  0024                     ___ftpack@sign:	
  3632                           ; 1 bytes @ 0x4
  3633                           
  3634  0024                     ___lbdiv@quotient:	
  3635                           ; 1 bytes @ 0x4
  3636                           
  3637  0024                     getBuz_GO@i:	
  3638                           ; 1 bytes @ 0x4
  3639                           
  3640  0024                     DelayTime_1us@j:	
  3641                           ; 2 bytes @ 0x4
  3642                           
  3643  0024                     ___wmul@product:	
  3644                           ; 2 bytes @ 0x4
  3645                           
  3646                           
  3647                           ; 2 bytes @ 0x4
  3648  0024                     	ds	1
  3649  0025                     ??_CC2500_InitSetREG:	
  3650  0025                     ??_CC2500_InitPATable:	
  3651                           ; 0 bytes @ 0x5
  3652                           
  3653  0025                     ??_Switch_Initialization:	
  3654                           ; 0 bytes @ 0x5
  3655                           
  3656  0025                     ??___ftpack:	
  3657                           ; 0 bytes @ 0x5
  3658                           
  3659  0025                     ??_LED_Initialization:	
  3660                           ; 0 bytes @ 0x5
  3661                           
  3662  0025                     ??_LED_Main:	
  3663                           ; 0 bytes @ 0x5
  3664                           
  3665  0025                     ?_Division:	
  3666                           ; 0 bytes @ 0x5
  3667                           
  3668  0025                     CC2500_TxData@loop_e:	
  3669                           ; 1 bytes @ 0x5
  3670                           
  3671  0025                     CC2500_RxData@loop_f:	
  3672                           ; 1 bytes @ 0x5
  3673                           
  3674  0025                     Division@num:	
  3675                           ; 1 bytes @ 0x5
  3676                           
  3677  0025                     Flash_Memory_Initialization@value:	
  3678                           ; 1 bytes @ 0x5
  3679                           
  3680  0025                     Flash_Memory_Modify@i:	
  3681                           ; 1 bytes @ 0x5
  3682                           
  3683  0025                     getMain_All_Error_Status@command:	
  3684                           ; 1 bytes @ 0x5
  3685                           
  3686  0025                     getTemp_AD@channel:	
  3687                           ; 1 bytes @ 0x5
  3688                           
  3689  0025                     setRF_AdjControl@status:	
  3690                           ; 1 bytes @ 0x5
  3691                           
  3692  0025                     ___awdiv@counter:	
  3693                           ; 1 bytes @ 0x5
  3694                           
  3695  0025                     ___lwdiv@quotient:	
  3696                           ; 1 bytes @ 0x5
  3697                           
  3698                           
  3699                           ; 2 bytes @ 0x5
  3700  0025                     	ds	1
  3701  0026                     ??_CC2500_PowerRST:	
  3702  0026                     ??_CC2500_FrequencyCabr:	
  3703                           ; 0 bytes @ 0x6
  3704                           
  3705  0026                     ??_Division:	
  3706                           ; 0 bytes @ 0x6
  3707                           
  3708  0026                     ??_Flash_Memory_Main:	
  3709                           ; 0 bytes @ 0x6
  3710                           
  3711  0026                     CC2500_InitSetREG@temp1:	
  3712                           ; 0 bytes @ 0x6
  3713                           
  3714  0026                     CC2500_InitPATable@temp:	
  3715                           ; 1 bytes @ 0x6
  3716                           
  3717  0026                     getMain_All_Error_Status@status:	
  3718                           ; 1 bytes @ 0x6
  3719                           
  3720  0026                     getLoad_AD@channel:	
  3721                           ; 1 bytes @ 0x6
  3722                           
  3723  0026                     setRF_AdjControl@dimmingStatus:	
  3724                           ; 1 bytes @ 0x6
  3725                           
  3726  0026                     ___awdiv@sign:	
  3727                           ; 1 bytes @ 0x6
  3728                           
  3729  0026                     getTemp_AD@ADRES:	
  3730                           ; 1 bytes @ 0x6
  3731                           
  3732                           
  3733                           ; 2 bytes @ 0x6
  3734  0026                     	ds	1
  3735  0027                     CC2500_InitSetREG@temp2:	
  3736  0027                     CC2500_InitPATable@loop_d:	
  3737                           ; 1 bytes @ 0x7
  3738                           
  3739  0027                     Flash_Memory_Main@key_Status:	
  3740                           ; 1 bytes @ 0x7
  3741                           
  3742  0027                     getLoad_AD@k:	
  3743                           ; 1 bytes @ 0x7
  3744                           
  3745  0027                     setRF_AdjControl@sw:	
  3746                           ; 1 bytes @ 0x7
  3747                           
  3748  0027                     ___lwdiv@counter:	
  3749                           ; 1 bytes @ 0x7
  3750                           
  3751  0027                     ___awdiv@quotient:	
  3752                           ; 1 bytes @ 0x7
  3753                           
  3754                           
  3755                           ; 2 bytes @ 0x7
  3756  0027                     	ds	1
  3757  0028                     ??_Load_Main:	
  3758  0028                     ?___awtoft:	
  3759                           ; 0 bytes @ 0x8
  3760                           
  3761  0028                     CC2500_InitSetREG@loop_c:	
  3762                           ; 3 bytes @ 0x8
  3763                           
  3764  0028                     Division@value:	
  3765                           ; 1 bytes @ 0x8
  3766                           
  3767  0028                     _Flash_Memory_Main$3164:	
  3768                           ; 1 bytes @ 0x8
  3769                           
  3770  0028                     getLoad_AD@j:	
  3771                           ; 1 bytes @ 0x8
  3772                           
  3773  0028                     ___awtoft@c:	
  3774                           ; 1 bytes @ 0x8
  3775                           
  3776                           
  3777                           ; 2 bytes @ 0x8
  3778  0028                     	ds	1
  3779  0029                     ?_setBuz:	
  3780  0029                     ??_CC2500_PowerOnInitial:	
  3781                           ; 0 bytes @ 0x9
  3782                           
  3783  0029                     Division@result:	
  3784                           ; 0 bytes @ 0x9
  3785                           
  3786  0029                     setBuz@time:	
  3787                           ; 1 bytes @ 0x9
  3788                           
  3789  0029                     getLoad_AD@ADRES:	
  3790                           ; 2 bytes @ 0x9
  3791                           
  3792                           
  3793                           ; 2 bytes @ 0x9
  3794  0029                     	ds	1
  3795  002A                     _Load_Main$3999:	
  3796                           
  3797                           ; 2 bytes @ 0xA
  3798  002A                     	ds	1
  3799  002B                     ??_setBuz:	
  3800  002B                     ??___awtoft:	
  3801                           ; 0 bytes @ 0xB
  3802                           
  3803  002B                     getLoad_AD@i:	
  3804                           ; 0 bytes @ 0xB
  3805                           
  3806                           
  3807                           ; 1 bytes @ 0xB
  3808  002B                     	ds	1
  3809  002C                     setBuz@count:	
  3810  002C                     Load_Main@error:	
  3811                           ; 1 bytes @ 0xC
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0xC
  3815  002C                     	ds	1
  3816  002D                     ??_setDimmerLights_SwOn:	
  3817  002D                     ??_my_MainTimer:	
  3818                           ; 0 bytes @ 0xD
  3819                           
  3820  002D                     ??_Exception_Main:	
  3821                           ; 0 bytes @ 0xD
  3822                           
  3823  002D                     Load_Main@ErrorCountValue:	
  3824                           ; 0 bytes @ 0xD
  3825                           
  3826  002D                     ___awtoft@sign:	
  3827                           ; 1 bytes @ 0xD
  3828                           
  3829                           
  3830                           ; 1 bytes @ 0xD
  3831  002D                     	ds	1
  3832  002E                     ?___ftdiv:	
  3833  002E                     ?___ftmul:	
  3834                           ; 3 bytes @ 0xE
  3835                           
  3836  002E                     setDimmerLights_SwOn@idle:	
  3837                           ; 3 bytes @ 0xE
  3838                           
  3839  002E                     Exception_Main@status:	
  3840                           ; 1 bytes @ 0xE
  3841                           
  3842  002E                     Load_Main@Load_RunStatus:	
  3843                           ; 1 bytes @ 0xE
  3844                           
  3845  002E                     ___ftdiv@f2:	
  3846                           ; 1 bytes @ 0xE
  3847                           
  3848  002E                     ___ftmul@f1:	
  3849                           ; 3 bytes @ 0xE
  3850                           
  3851                           
  3852                           ; 3 bytes @ 0xE
  3853  002E                     	ds	1
  3854  002F                     setDimmerLights_SwOn@dimmingStatus:	
  3855  002F                     Exception_Main@count:	
  3856                           ; 1 bytes @ 0xF
  3857                           
  3858  002F                     Load_Main@LightsCount:	
  3859                           ; 1 bytes @ 0xF
  3860                           
  3861                           
  3862                           ; 1 bytes @ 0xF
  3863  002F                     	ds	1
  3864  0030                     setDimmerLights_SwOn@sw:	
  3865  0030                     Exception_Main@i:	
  3866                           ; 1 bytes @ 0x10
  3867                           
  3868  0030                     Load_Main@i:	
  3869                           ; 2 bytes @ 0x10
  3870                           
  3871                           
  3872                           ; 2 bytes @ 0x10
  3873  0030                     	ds	1
  3874  0031                     ??_setSw_Main:	
  3875  0031                     ___ftdiv@f1:	
  3876                           ; 0 bytes @ 0x11
  3877                           
  3878  0031                     ___ftmul@f2:	
  3879                           ; 3 bytes @ 0x11
  3880                           
  3881                           
  3882                           ; 3 bytes @ 0x11
  3883  0031                     	ds	1
  3884  0032                     Exception_Main@i_3636:	
  3885                           
  3886                           ; 2 bytes @ 0x12
  3887  0032                     	ds	1
  3888  0033                     setSw_Main@sw:	
  3889                           
  3890                           ; 1 bytes @ 0x13
  3891  0033                     	ds	1
  3892  0034                     ??_Switch_Main:	
  3893  0034                     ??___ftdiv:	
  3894                           ; 0 bytes @ 0x14
  3895                           
  3896  0034                     ??___ftmul:	
  3897                           ; 0 bytes @ 0x14
  3898                           
  3899  0034                     Exception_Main@error:	
  3900                           ; 0 bytes @ 0x14
  3901                           
  3902                           
  3903                           ; 1 bytes @ 0x14
  3904  0034                     	ds	1
  3905  0035                     Exception_Main@lights:	
  3906                           
  3907                           ; 1 bytes @ 0x15
  3908  0035                     	ds	3
  3909  0038                     ___ftdiv@cntr:	
  3910  0038                     ___ftmul@exp:	
  3911                           ; 1 bytes @ 0x18
  3912                           
  3913                           
  3914                           ; 1 bytes @ 0x18
  3915  0038                     	ds	1
  3916  0039                     ___ftdiv@f3:	
  3917  0039                     ___ftmul@f3_as_product:	
  3918                           ; 3 bytes @ 0x19
  3919                           
  3920                           
  3921                           ; 3 bytes @ 0x19
  3922  0039                     	ds	3
  3923  003C                     ___ftdiv@exp:	
  3924  003C                     ___ftmul@cntr:	
  3925                           ; 1 bytes @ 0x1C
  3926                           
  3927                           
  3928                           ; 1 bytes @ 0x1C
  3929  003C                     	ds	1
  3930  003D                     ___ftdiv@sign:	
  3931  003D                     ___ftmul@sign:	
  3932                           ; 1 bytes @ 0x1D
  3933                           
  3934                           
  3935                           ; 1 bytes @ 0x1D
  3936  003D                     	ds	1
  3937  003E                     ?___ftneg:	
  3938  003E                     ___ftneg@f1:	
  3939                           ; 3 bytes @ 0x1E
  3940                           
  3941                           
  3942                           ; 3 bytes @ 0x1E
  3943  003E                     	ds	3
  3944  0041                     ??___ftneg:	
  3945  0041                     ?___ftadd:	
  3946                           ; 0 bytes @ 0x21
  3947                           
  3948  0041                     ___ftadd@f1:	
  3949                           ; 3 bytes @ 0x21
  3950                           
  3951                           
  3952                           ; 3 bytes @ 0x21
  3953  0041                     	ds	3
  3954  0044                     ___ftadd@f2:	
  3955                           
  3956                           ; 3 bytes @ 0x24
  3957  0044                     	ds	3
  3958  0047                     ??___ftadd:	
  3959                           
  3960                           ; 0 bytes @ 0x27
  3961  0047                     	ds	4
  3962  004B                     ___ftadd@sign:	
  3963                           
  3964                           ; 1 bytes @ 0x2B
  3965  004B                     	ds	1
  3966  004C                     ___ftadd@exp2:	
  3967                           
  3968                           ; 1 bytes @ 0x2C
  3969  004C                     	ds	1
  3970  004D                     ___ftadd@exp1:	
  3971                           
  3972                           ; 1 bytes @ 0x2D
  3973  004D                     	ds	1
  3974  004E                     ?___fttol:	
  3975  004E                     ___fttol@f1:	
  3976                           ; 4 bytes @ 0x2E
  3977                           
  3978                           
  3979                           ; 3 bytes @ 0x2E
  3980  004E                     	ds	4
  3981  0052                     ??___fttol:	
  3982                           
  3983                           ; 0 bytes @ 0x32
  3984  0052                     	ds	4
  3985  0056                     ___fttol@sign1:	
  3986                           
  3987                           ; 1 bytes @ 0x36
  3988  0056                     	ds	1
  3989  0057                     ___fttol@lval:	
  3990                           
  3991                           ; 4 bytes @ 0x37
  3992  0057                     	ds	4
  3993  005B                     ___fttol@exp1:	
  3994                           
  3995                           ; 1 bytes @ 0x3B
  3996  005B                     	ds	1
  3997  005C                     ??_getDimmerLights_ValueToPercent:	
  3998  005C                     ??_getDimmerLights_PercentToValue:	
  3999                           ; 0 bytes @ 0x3C
  4000                           
  4001                           
  4002                           ; 0 bytes @ 0x3C
  4003  005C                     	ds	2
  4004  005E                     getDimmerLights_PercentToValue@value:	
  4005  005E                     getDimmerLights_ValueToPercent@value:	
  4006                           ; 1 bytes @ 0x3E
  4007                           
  4008                           
  4009                           ; 1 bytes @ 0x3E
  4010  005E                     	ds	1
  4011  005F                     getDimmerLights_PercentToValue@i:	
  4012  005F                     getDimmerLights_ValueToPercent@i:	
  4013                           ; 3 bytes @ 0x3F
  4014                           
  4015                           
  4016                           ; 3 bytes @ 0x3F
  4017  005F                     	ds	3
  4018  0062                     ?_setProductData:	
  4019  0062                     ??_DimmerIntr_Initialization:	
  4020                           ; 0 bytes @ 0x42
  4021                           
  4022  0062                     ?_setDimmerIntr_DimmingValue:	
  4023                           ; 0 bytes @ 0x42
  4024                           
  4025  0062                     ?_setDimmerIntr_MaxmumValue:	
  4026                           ; 0 bytes @ 0x42
  4027                           
  4028  0062                     setDimmerIntr_DimmingValue@value:	
  4029                           ; 0 bytes @ 0x42
  4030                           
  4031  0062                     setDimmerIntr_MaxmumValue@value:	
  4032                           ; 1 bytes @ 0x42
  4033                           
  4034  0062                     setProductData@value:	
  4035                           ; 1 bytes @ 0x42
  4036                           
  4037                           
  4038                           ; 1 bytes @ 0x42
  4039  0062                     	ds	1
  4040  0063                     ??_setProductData:	
  4041  0063                     ??_setDimmerIntr_DimmingValue:	
  4042                           ; 0 bytes @ 0x43
  4043                           
  4044  0063                     ??_setDimmerIntr_MaxmumValue:	
  4045                           ; 0 bytes @ 0x43
  4046                           
  4047                           
  4048                           ; 0 bytes @ 0x43
  4049  0063                     	ds	1
  4050  0064                     ??_DimmerLights_Initialization:	
  4051  0064                     setDimmerIntr_DimmingValue@lights:	
  4052                           ; 0 bytes @ 0x44
  4053                           
  4054  0064                     setDimmerIntr_MaxmumValue@lights:	
  4055                           ; 1 bytes @ 0x44
  4056                           
  4057  0064                     setProductData@address:	
  4058                           ; 1 bytes @ 0x44
  4059                           
  4060                           
  4061                           ; 1 bytes @ 0x44
  4062  0064                     	ds	1
  4063  0065                     ??_DlyOff_Main:	
  4064  0065                     ?_setRF_DimmerLights:	
  4065                           ; 0 bytes @ 0x45
  4066                           
  4067  0065                     ??_setTemp_Main:	
  4068                           ; 0 bytes @ 0x45
  4069                           
  4070  0065                     ??_setLog_Code:	
  4071                           ; 0 bytes @ 0x45
  4072                           
  4073  0065                     ??_setRFSW_AdjControl:	
  4074                           ; 0 bytes @ 0x45
  4075                           
  4076  0065                     ?_setDelayOff_GO:	
  4077                           ; 0 bytes @ 0x45
  4078                           
  4079  0065                     setDelayOff_GO@command:	
  4080                           ; 0 bytes @ 0x45
  4081                           
  4082  0065                     setRF_DimmerLights@on:	
  4083                           ; 1 bytes @ 0x45
  4084                           
  4085                           
  4086                           ; 1 bytes @ 0x45
  4087  0065                     	ds	1
  4088  0066                     ??_setRF_DimmerLights:	
  4089  0066                     setDelayOff_GO@value:	
  4090                           ; 0 bytes @ 0x46
  4091                           
  4092                           
  4093                           ; 1 bytes @ 0x46
  4094  0066                     	ds	1
  4095  0067                     ??_setDelayOff_GO:	
  4096  0067                     DlyOff_Main@sw:	
  4097                           ; 0 bytes @ 0x47
  4098                           
  4099  0067                     setTemp_Main@error:	
  4100                           ; 1 bytes @ 0x47
  4101                           
  4102  0067                     setRFSW_AdjControl@status:	
  4103                           ; 1 bytes @ 0x47
  4104                           
  4105                           
  4106                           ; 1 bytes @ 0x47
  4107  0067                     	ds	1
  4108  0068                     ??_DelayOff_Main:	
  4109  0068                     setRFSW_AdjControl@sw:	
  4110                           ; 0 bytes @ 0x48
  4111                           
  4112  0068                     setRF_DimmerLights@status:	
  4113                           ; 1 bytes @ 0x48
  4114                           
  4115  0068                     setTemp_Main@SafeValue:	
  4116                           ; 1 bytes @ 0x48
  4117                           
  4118                           
  4119                           ; 2 bytes @ 0x48
  4120  0068                     	ds	1
  4121  0069                     setDelayOff_GO@i:	
  4122  0069                     setRF_DimmerLights@lights:	
  4123                           ; 1 bytes @ 0x49
  4124                           
  4125                           
  4126                           ; 1 bytes @ 0x49
  4127  0069                     	ds	1
  4128  006A                     ?_setDimmerLights_Dimming:	
  4129  006A                     setDelayOff_GO@j:	
  4130                           ; 0 bytes @ 0x4A
  4131                           
  4132  006A                     setDimmerLights_Dimming@status:	
  4133                           ; 1 bytes @ 0x4A
  4134                           
  4135  006A                     setTemp_Main@DangerValue:	
  4136                           ; 1 bytes @ 0x4A
  4137                           
  4138                           
  4139                           ; 2 bytes @ 0x4A
  4140  006A                     	ds	1
  4141  006B                     ??_setDimmerLights_Dimming:	
  4142  006B                     setDelayOff_GO@k:	
  4143                           ; 0 bytes @ 0x4B
  4144                           
  4145                           
  4146                           ; 1 bytes @ 0x4B
  4147  006B                     	ds	1
  4148  006C                     setDelayOff_GO@sw:	
  4149  006C                     setDimmerLights_Dimming@value:	
  4150                           ; 1 bytes @ 0x4C
  4151                           
  4152  006C                     setTemp_Main@TempGO:	
  4153                           ; 1 bytes @ 0x4C
  4154                           
  4155                           
  4156                           ; 1 bytes @ 0x4C
  4157  006C                     	ds	1
  4158  006D                     ?_setDimmerLights_OnOff:	
  4159  006D                     ??_setRFSW_Control:	
  4160                           ; 0 bytes @ 0x4D
  4161                           
  4162  006D                     setDimmerLights_OnOff@command:	
  4163                           ; 0 bytes @ 0x4D
  4164                           
  4165  006D                     setDimmerLights_Dimming@lights:	
  4166                           ; 1 bytes @ 0x4D
  4167                           
  4168  006D                     setTemp_Main@AD:	
  4169                           ; 1 bytes @ 0x4D
  4170                           
  4171                           
  4172                           ; 2 bytes @ 0x4D
  4173  006D                     	ds	1
  4174  006E                     ??_setDimmerLights_OnOff:	
  4175  006E                     ??_getRxData:	
  4176                           ; 0 bytes @ 0x4E
  4177                           
  4178  006E                     ??_setControl_Lights_Table:	
  4179                           ; 0 bytes @ 0x4E
  4180                           
  4181                           
  4182                           ; 0 bytes @ 0x4E
  4183  006E                     	ds	1
  4184  006F                     ??_Temp_Main:	
  4185  006F                     getRxData@error:	
  4186                           ; 0 bytes @ 0x4F
  4187                           
  4188                           
  4189                           ; 1 bytes @ 0x4F
  4190  006F                     	ds	1
  4191  0070                     ??_setDimmerLights_Main:	
  4192  0070                     ??_RF_Main:	
  4193                           ; 0 bytes @ 0x50
  4194                           
  4195  0070                     ??_DimmerLights_Main:	
  4196                           ; 0 bytes @ 0x50
  4197                           
  4198  0070                     ??_main:	
  4199                           ; 0 bytes @ 0x50
  4200                           
  4201                           
  4202                           	psect	maintext
  4203  1487                     __pmaintext:	
  4204                           ; 0 bytes @ 0x50
  4205 ;;
  4206 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4207 ;;
  4208 ;; *************** function _main *****************
  4209 ;; Defined at:
  4210 ;;		line 7 in file "../src/Main_B1.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;  argc            2    5[BANK1 ] int 
  4213 ;;  argv            2    7[BANK1 ] PTR PTR unsigned char 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  2    5[BANK1 ] int 
  4218 ;; Registers used:
  4219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 17F/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4225 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;Total ram usage:        4 bytes
  4230 ;; Hardware stack levels required when called:   13
  4231 ;; This function calls:
  4232 ;;		_Buzzer_Initialization
  4233 ;;		_Buzzer_Main
  4234 ;;		_CC2500_PowerOnInitial
  4235 ;;		_DelayOff_Initialization
  4236 ;;		_DelayOff_Main
  4237 ;;		_DimmerLights_Initialization
  4238 ;;		_DimmerLights_Main
  4239 ;;		_Exception_Main
  4240 ;;		_Flash_Memory_Initialization
  4241 ;;		_Flash_Memory_Main
  4242 ;;		_LED_Initialization
  4243 ;;		_LED_Main
  4244 ;;		_Load_Initialization
  4245 ;;		_Load_Main
  4246 ;;		_Mcu_Initialization
  4247 ;;		_RF_Initialization
  4248 ;;		_RF_Main
  4249 ;;		_Switch_Initialization
  4250 ;;		_Switch_Main
  4251 ;;		_Temp_Initialization
  4252 ;;		_Temp_Main
  4253 ;;		_WDT_Main
  4254 ;;		_getLoad_AD
  4255 ;;		_getTemp_AD
  4256 ;;		_myMain_Initialization
  4257 ;;		_my_MainTimer
  4258 ;; This function is called by:
  4259 ;;		Startup code after reset
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           
  4264                           ;psect for function _main
  4265  1487                     _main:	
  4266                           
  4267                           ;Main_B1.c: 8: myMain_Initialization();
  4268                           
  4269                           ;incstack = 0
  4270                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4271  1487  319C  24A1  3194   	fcall	_myMain_Initialization
  4272                           
  4273                           ;Main_B1.c: 9: Mcu_Initialization();
  4274  148A  319C  2431  3194   	fcall	_Mcu_Initialization
  4275                           
  4276                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4277  148D  3186  26FC  3194   	fcall	_Flash_Memory_Initialization
  4278                           
  4279                           ;Main_B1.c: 11: LED_Initialization();
  4280  1490  3199  21E0  3194   	fcall	_LED_Initialization
  4281                           
  4282                           ;Main_B1.c: 12: Buzzer_Initialization();
  4283  1493  3199  21C6  3194   	fcall	_Buzzer_Initialization
  4284                           
  4285                           ;Main_B1.c: 14: ;;
  4286                           ;Main_B1.c: 15: Temp_Initialization();
  4287  1496  3199  21D2  3194   	fcall	_Temp_Initialization
  4288                           
  4289                           ;Main_B1.c: 16: Load_Initialization();
  4290  1499  3199  21C9  3194   	fcall	_Load_Initialization
  4291                           
  4292                           ;Main_B1.c: 17: ;;
  4293                           ;Main_B1.c: 18: DelayOff_Initialization();
  4294  149C  3199  21D8  3194   	fcall	_DelayOff_Initialization
  4295                           
  4296                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4297  149F  319A  221D  3194   	fcall	_DimmerLights_Initialization
  4298                           
  4299                           ;Main_B1.c: 21: ;;
  4300                           ;Main_B1.c: 22: ;;
  4301                           ;Main_B1.c: 23: ;;
  4302                           ;Main_B1.c: 24: Switch_Initialization();
  4303  14A2  3199  21FC  3194   	fcall	_Switch_Initialization
  4304                           
  4305                           ;Main_B1.c: 25: RF_Initialization();
  4306  14A5  3199  21CC  3194   	fcall	_RF_Initialization
  4307                           
  4308                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4309  14A8  319C  24DD  3194   	fcall	_CC2500_PowerOnInitial
  4310  14AB                     l8988:	
  4311                           ;Main_B1.c: 27: ;;
  4312                           ;Main_B1.c: 28: ;;
  4313                           ;Main_B1.c: 30: while (1) {
  4314                           
  4315                           
  4316                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4317  14AB  0021               	movlb	1	; select bank1
  4318  14AC  1C2F               	btfss	_myMain^(0+128),0
  4319  14AD  2CB6               	goto	l8992
  4320                           
  4321                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4322  14AE  3005               	movlw	5
  4323  14AF  3189  2191  3194   	fcall	_getLoad_AD
  4324                           
  4325                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4326  14B2  3009               	movlw	9
  4327  14B3  318C  2495  3194   	fcall	_getTemp_AD
  4328  14B6                     l8992:	
  4329                           
  4330                           ;Main_B1.c: 57: }
  4331                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4332  14B6  0022               	movlb	2	; select bank2
  4333  14B7  1C31               	btfss	_Timer1^(0+256),0
  4334  14B8  2CAB               	goto	l8988
  4335                           
  4336                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4337  14B9  1031               	bcf	_Timer1^(0+256),0
  4338                           
  4339                           ;Main_B1.c: 96: my_MainTimer();
  4340  14BA  3191  21F5  3194   	fcall	_my_MainTimer
  4341                           
  4342                           ;Main_B1.c: 97: WDT_Main();
  4343  14BD  319C  2443  3194   	fcall	_WDT_Main
  4344                           
  4345                           ;Main_B1.c: 98: ;;
  4346                           ;Main_B1.c: 99: ;;
  4347                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4348  14C0  0021               	movlb	1	; select bank1
  4349  14C1  1C2F               	btfss	_myMain^(0+128),0
  4350  14C2  2CAB               	goto	l8988
  4351                           
  4352                           ;Main_B1.c: 101: Flash_Memory_Main();
  4353  14C3  3192  226E  3194   	fcall	_Flash_Memory_Main
  4354                           
  4355                           ;Main_B1.c: 103: LED_Main();
  4356  14C6  3199  21E4  3194   	fcall	_LED_Main
  4357                           
  4358                           ;Main_B1.c: 104: Buzzer_Main();
  4359  14C9  3188  2001  3194   	fcall	_Buzzer_Main
  4360                           
  4361                           ;Main_B1.c: 106: ;;
  4362                           ;Main_B1.c: 107: Temp_Main();
  4363  14CC  3199  21D5  3194   	fcall	_Temp_Main
  4364                           
  4365                           ;Main_B1.c: 108: Load_Main();
  4366  14CF  3180  2053  3194   	fcall	_Load_Main
  4367                           
  4368                           ;Main_B1.c: 109: ;;
  4369                           ;Main_B1.c: 111: ;;
  4370                           ;Main_B1.c: 112: DimmerLights_Main();
  4371  14D2  319E  26A5  3194   	fcall	_DimmerLights_Main
  4372                           
  4373                           ;Main_B1.c: 113: Switch_Main();
  4374  14D5  319A  222B  3194   	fcall	_Switch_Main
  4375                           
  4376                           ;Main_B1.c: 114: ;;
  4377                           ;Main_B1.c: 115: ;;
  4378                           ;Main_B1.c: 117: RF_Main();
  4379  14D8  3199  21CF  3194   	fcall	_RF_Main
  4380                           
  4381                           ;Main_B1.c: 118: DelayOff_Main();
  4382  14DB  3199  21DC  3194   	fcall	_DelayOff_Main
  4383                           
  4384                           ;Main_B1.c: 119: ;;
  4385                           ;Main_B1.c: 120: ;;
  4386                           ;Main_B1.c: 121: Exception_Main();
  4387  14DE  3185  2554  3194   	fcall	_Exception_Main
  4388  14E1  2CAB               	goto	l8988
  4389  14E2                     __end_of_main:	
  4390                           ;Main_B1.c: 128: }
  4391                           ;Main_B1.c: 129: }
  4392                           ;Main_B1.c: 163: }
  4393                           ;Main_B1.c: 164: return (0);
  4394                           ;	Return value of _main is never used
  4395                           
  4396                           
  4397                           	psect	text1
  4398  11F5                     __ptext1:	
  4399 ;; *************** function _my_MainTimer *****************
  4400 ;; Defined at:
  4401 ;;		line 185 in file "../src/Main_B1.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;		None               void
  4408 ;; Registers used:
  4409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;Total ram usage:        1 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    7
  4422 ;; This function calls:
  4423 ;;		_setBuz
  4424 ;; This function is called by:
  4425 ;;		_main
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _my_MainTimer
  4431  11F5                     _my_MainTimer:	
  4432                           
  4433                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4437  11F5  0021               	movlb	1	; select bank1
  4438  11F6  182F               	btfsc	_myMain^(0+128),0
  4439  11F7  2A0F               	goto	l8180
  4440                           
  4441                           ;Main_B1.c: 188: myMain.PowerCount++;
  4442  11F8  3001               	movlw	1
  4443  11F9  0020               	movlb	0	; select bank0
  4444  11FA  00AD               	movwf	??_my_MainTimer
  4445  11FB  082D               	movf	??_my_MainTimer,w
  4446  11FC  0021               	movlb	1	; select bank1
  4447  11FD  07B0               	addwf	(_myMain^(0+128)+1),f
  4448                           
  4449                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4450  11FE  0830               	movf	(_myMain^(0+128)+1),w
  4451  11FF  3A4B               	xorlw	75
  4452  1200  1D03               	skipz
  4453  1201  0008               	return
  4454                           
  4455                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4456  1202  01B0               	clrf	(_myMain^(0+128)+1)
  4457                           
  4458                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4459  1203  142F               	bsf	_myMain^(0+128),0
  4460                           
  4461                           ;Main_B1.c: 196: setBuz(3, 50);
  4462  1204  3032               	movlw	50
  4463  1205  0020               	movlb	0	; select bank0
  4464  1206  00A9               	movwf	setBuz@time
  4465  1207  3000               	movlw	0
  4466  1208  00AA               	movwf	setBuz@time+1
  4467  1209  3003               	movlw	3
  4468  120A  3194  242E         	fcall	_setBuz
  4469                           
  4470                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4471  120C  0021               	movlb	1	; select bank1
  4472  120D  162F               	bsf	_myMain^(0+128),4
  4473                           
  4474                           ;Main_B1.c: 206: }
  4475                           ;Main_B1.c: 207: } else {
  4476  120E  0008               	return
  4477  120F                     l8180:	
  4478                           
  4479                           ;Main_B1.c: 208: myMain.PowerCount++;
  4480  120F  3001               	movlw	1
  4481  1210  0020               	movlb	0	; select bank0
  4482  1211  00AD               	movwf	??_my_MainTimer
  4483  1212  082D               	movf	??_my_MainTimer,w
  4484  1213  0021               	movlb	1	; select bank1
  4485  1214  07B0               	addwf	(_myMain^(0+128)+1),f
  4486                           
  4487                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4488  1215  0830               	movf	(_myMain^(0+128)+1),w
  4489  1216  3A32               	xorlw	50
  4490  1217  1903               	btfsc	3,2
  4491                           
  4492                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4493  1218  01B0               	clrf	(_myMain^(0+128)+1)
  4494                           
  4495                           ;Main_B1.c: 226: }
  4496                           ;Main_B1.c: 228: myMain.Count1++;
  4497  1219  3001               	movlw	1
  4498  121A  07B3               	addwf	(_myMain^(0+128)+4),f
  4499  121B  3000               	movlw	0
  4500  121C  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4501                           
  4502                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4503  121D  3004               	movlw	4
  4504  121E  3EAF               	addlw	_myMain& (0+255)
  4505  121F  0086               	movwf	6
  4506  1220  0187               	clrf	7
  4507  1221  3F40               	moviw [0]fsr1
  4508  1222  3A32               	xorlw	50
  4509  1223  1D03               	skipz
  4510  1224  2A27               	goto	u8295
  4511  1225  3F41               	moviw [1]fsr1
  4512  1226  3A00               	xorlw	0
  4513  1227                     u8295:	
  4514  1227  1D03               	skipz
  4515  1228  0008               	return
  4516                           
  4517                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4518  1229  01B3               	clrf	(_myMain^(0+128)+4)
  4519  122A  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4520                           
  4521                           ;Main_B1.c: 242: if (myMain.Flag) {
  4522  122B  1CAF               	btfss	_myMain^(0+128),1
  4523  122C  2A2F               	goto	l1462
  4524                           
  4525                           ;Main_B1.c: 243: myMain.Flag = 0;
  4526  122D  10AF               	bcf	_myMain^(0+128),1
  4527                           
  4528                           ;Main_B1.c: 252: } else {
  4529  122E  0008               	return
  4530  122F                     l1462:	
  4531                           
  4532                           ;Main_B1.c: 253: myMain.Flag = 1;
  4533  122F  14AF               	bsf	_myMain^(0+128),1
  4534  1230  0008               	return
  4535  1231                     __end_of_my_MainTimer:	
  4536                           
  4537                           	psect	text2
  4538  1CA1                     __ptext2:	
  4539 ;; *************** function _myMain_Initialization *****************
  4540 ;; Defined at:
  4541 ;;		line 170 in file "../src/Main_B1.c"
  4542 ;; Parameters:    Size  Location     Type
  4543 ;;		None
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;		None               void
  4548 ;; Registers used:
  4549 ;;		wreg, fsr1l, fsr1h
  4550 ;; Tracked objects:
  4551 ;;		On entry : 0/0
  4552 ;;		On exit  : 0/0
  4553 ;;		Unchanged: 0/0
  4554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4559 ;;Total ram usage:        1 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    5
  4562 ;; This function calls:
  4563 ;;		Nothing
  4564 ;; This function is called by:
  4565 ;;		_main
  4566 ;; This function uses a non-reentrant model
  4567 ;;
  4568                           
  4569                           
  4570                           ;psect for function _myMain_Initialization
  4571  1CA1                     _myMain_Initialization:	
  4572                           
  4573                           ;Main_B1.c: 173: product = &_product;
  4574                           
  4575                           ;incstack = 0
  4576                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4577  1CA1  30CC               	movlw	__product& (0+255)
  4578  1CA2  0020               	movlb	0	; select bank0
  4579  1CA3  00A0               	movwf	??_myMain_Initialization
  4580  1CA4  0820               	movf	??_myMain_Initialization,w
  4581  1CA5  0021               	movlb	1	; select bank1
  4582  1CA6  00EE               	movwf	_product^(0+128)
  4583                           
  4584                           ;Main_B1.c: 174: product->Data[20] = 209;
  4585  1CA7  30D1               	movlw	209
  4586  1CA8  0020               	movlb	0	; select bank0
  4587  1CA9  00A0               	movwf	??_myMain_Initialization
  4588  1CAA  0021               	movlb	1	; select bank1
  4589  1CAB  086E               	movf	_product^(0+128),w
  4590  1CAC  3E14               	addlw	20
  4591  1CAD  0086               	movwf	6
  4592  1CAE  3001               	movlw	1	; select bank2/3
  4593  1CAF  0087               	movwf	7
  4594  1CB0  0020               	movlb	0	; select bank0
  4595  1CB1  0820               	movf	??_myMain_Initialization,w
  4596  1CB2  0081               	movwf	1
  4597  1CB3  0008               	return
  4598  1CB4                     __end_of_myMain_Initialization:	
  4599                           
  4600                           	psect	text3
  4601  0C95                     __ptext3:	
  4602 ;; *************** function _getTemp_AD *****************
  4603 ;; Defined at:
  4604 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  channel         1    wreg     unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  channel         1    5[BANK0 ] unsigned char 
  4609 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4610 ;; Return value:  Size  Location     Type
  4611 ;;		None               void
  4612 ;; Registers used:
  4613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;Total ram usage:        4 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    7
  4626 ;; This function calls:
  4627 ;;		_getAD
  4628 ;; This function is called by:
  4629 ;;		_main
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           
  4634                           ;psect for function _getTemp_AD
  4635  0C95                     _getTemp_AD:	
  4636                           
  4637                           ;incstack = 0
  4638                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4639                           ;getTemp_AD@channel stored from wreg
  4640  0C95  0020               	movlb	0	; select bank0
  4641  0C96  00A5               	movwf	getTemp_AD@channel
  4642                           
  4643                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4644  0C97  01A6               	clrf	getTemp_AD@ADRES
  4645  0C98  01A7               	clrf	getTemp_AD@ADRES+1
  4646                           
  4647                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4648  0C99  0021               	movlb	1	; select bank1
  4649  0C9A  1D57               	btfss	_Temp^(0+128),2
  4650  0C9B  0008               	return
  4651                           
  4652                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4653  0C9C  30F0               	movlw	240
  4654  0C9D  0020               	movlb	0	; select bank0
  4655  0C9E  00A4               	movwf	??_getTemp_AD
  4656  0C9F  0824               	movf	??_getTemp_AD,w
  4657  0CA0  00A0               	movwf	getAD@adcon1
  4658  0CA1  0825               	movf	getTemp_AD@channel,w
  4659  0CA2  319E  26C5  318C   	fcall	_getAD
  4660  0CA5  0020               	movlb	0	; select bank0
  4661  0CA6  0821               	movf	?_getAD+1,w
  4662  0CA7  01A7               	clrf	getTemp_AD@ADRES+1
  4663  0CA8  07A7               	addwf	getTemp_AD@ADRES+1,f
  4664  0CA9  0820               	movf	?_getAD,w
  4665  0CAA  01A6               	clrf	getTemp_AD@ADRES
  4666  0CAB  07A6               	addwf	getTemp_AD@ADRES,f
  4667                           
  4668                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4669  0CAC  0827               	movf	getTemp_AD@ADRES+1,w
  4670  0CAD  0426               	iorwf	getTemp_AD@ADRES,w
  4671  0CAE  1903               	skipnz
  4672  0CAF  0008               	return
  4673                           
  4674                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4675  0CB0  0827               	movf	getTemp_AD@ADRES+1,w
  4676  0CB1  0021               	movlb	1	; select bank1
  4677  0CB2  025C               	subwf	((_Temp+1)^(0+128)+4),w
  4678  0CB3  1D03               	skipz
  4679  0CB4  2CB9               	goto	u8215
  4680  0CB5  0020               	movlb	0	; select bank0
  4681  0CB6  0826               	movf	getTemp_AD@ADRES,w
  4682  0CB7  0021               	movlb	1	; select bank1
  4683  0CB8  025B               	subwf	(_Temp^(0+128)+4),w
  4684  0CB9                     u8215:	
  4685  0CB9  1803               	skipnc
  4686  0CBA  2CC6               	goto	l8150
  4687                           
  4688                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4689  0CBB  0020               	movlb	0	; select bank0
  4690  0CBC  0827               	movf	getTemp_AD@ADRES+1,w
  4691  0CBD  0021               	movlb	1	; select bank1
  4692  0CBE  01DC               	clrf	((_Temp+1)^(0+128)+4)
  4693  0CBF  07DC               	addwf	((_Temp+1)^(0+128)+4),f
  4694  0CC0  0020               	movlb	0	; select bank0
  4695  0CC1  0826               	movf	getTemp_AD@ADRES,w
  4696  0CC2  0021               	movlb	1	; select bank1
  4697  0CC3  01DB               	clrf	(_Temp^(0+128)+4)
  4698  0CC4  07DB               	addwf	(_Temp^(0+128)+4),f
  4699                           
  4700                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4701  0CC5  0008               	return
  4702  0CC6                     l8150:	
  4703  0CC6  0020               	movlb	0	; select bank0
  4704  0CC7  0827               	movf	getTemp_AD@ADRES+1,w
  4705  0CC8  0021               	movlb	1	; select bank1
  4706  0CC9  025E               	subwf	((_Temp+1)^(0+128)+6),w
  4707  0CCA  1D03               	skipz
  4708  0CCB  2CD0               	goto	u8225
  4709  0CCC  0020               	movlb	0	; select bank0
  4710  0CCD  0826               	movf	getTemp_AD@ADRES,w
  4711  0CCE  0021               	movlb	1	; select bank1
  4712  0CCF  025D               	subwf	(_Temp^(0+128)+6),w
  4713  0CD0                     u8225:	
  4714  0CD0  1803               	skipnc
  4715  0CD1  2CDD               	goto	l8154
  4716                           
  4717                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4718  0CD2  0020               	movlb	0	; select bank0
  4719  0CD3  0827               	movf	getTemp_AD@ADRES+1,w
  4720  0CD4  0021               	movlb	1	; select bank1
  4721  0CD5  01DE               	clrf	((_Temp+1)^(0+128)+6)
  4722  0CD6  07DE               	addwf	((_Temp+1)^(0+128)+6),f
  4723  0CD7  0020               	movlb	0	; select bank0
  4724  0CD8  0826               	movf	getTemp_AD@ADRES,w
  4725  0CD9  0021               	movlb	1	; select bank1
  4726  0CDA  01DD               	clrf	(_Temp^(0+128)+6)
  4727  0CDB  07DD               	addwf	(_Temp^(0+128)+6),f
  4728                           
  4729                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4730  0CDC  0008               	return
  4731  0CDD                     l8154:	
  4732  0CDD  0020               	movlb	0	; select bank0
  4733  0CDE  0827               	movf	getTemp_AD@ADRES+1,w
  4734  0CDF  0021               	movlb	1	; select bank1
  4735  0CE0  0260               	subwf	((_Temp+1)^(0+128)+8),w
  4736  0CE1  1D03               	skipz
  4737  0CE2  2CE7               	goto	u8235
  4738  0CE3  0020               	movlb	0	; select bank0
  4739  0CE4  0826               	movf	getTemp_AD@ADRES,w
  4740  0CE5  0021               	movlb	1	; select bank1
  4741  0CE6  025F               	subwf	(_Temp^(0+128)+8),w
  4742  0CE7                     u8235:	
  4743  0CE7  1803               	skipnc
  4744  0CE8  2CF4               	goto	l8158
  4745                           
  4746                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4747  0CE9  0020               	movlb	0	; select bank0
  4748  0CEA  0827               	movf	getTemp_AD@ADRES+1,w
  4749  0CEB  0021               	movlb	1	; select bank1
  4750  0CEC  01E0               	clrf	((_Temp+1)^(0+128)+8)
  4751  0CED  07E0               	addwf	((_Temp+1)^(0+128)+8),f
  4752  0CEE  0020               	movlb	0	; select bank0
  4753  0CEF  0826               	movf	getTemp_AD@ADRES,w
  4754  0CF0  0021               	movlb	1	; select bank1
  4755  0CF1  01DF               	clrf	(_Temp^(0+128)+8)
  4756  0CF2  07DF               	addwf	(_Temp^(0+128)+8),f
  4757                           
  4758                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4759  0CF3  0008               	return
  4760  0CF4                     l8158:	
  4761  0CF4  0020               	movlb	0	; select bank0
  4762  0CF5  0827               	movf	getTemp_AD@ADRES+1,w
  4763  0CF6  0021               	movlb	1	; select bank1
  4764  0CF7  0262               	subwf	((_Temp+1)^(0+128)+10),w
  4765  0CF8  1D03               	skipz
  4766  0CF9  2CFE               	goto	u8245
  4767  0CFA  0020               	movlb	0	; select bank0
  4768  0CFB  0826               	movf	getTemp_AD@ADRES,w
  4769  0CFC  0021               	movlb	1	; select bank1
  4770  0CFD  0261               	subwf	(_Temp^(0+128)+10),w
  4771  0CFE                     u8245:	
  4772  0CFE  1803               	skipnc
  4773  0CFF  2D0B               	goto	l8162
  4774                           
  4775                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4776  0D00  0020               	movlb	0	; select bank0
  4777  0D01  0827               	movf	getTemp_AD@ADRES+1,w
  4778  0D02  0021               	movlb	1	; select bank1
  4779  0D03  01E2               	clrf	((_Temp+1)^(0+128)+10)
  4780  0D04  07E2               	addwf	((_Temp+1)^(0+128)+10),f
  4781  0D05  0020               	movlb	0	; select bank0
  4782  0D06  0826               	movf	getTemp_AD@ADRES,w
  4783  0D07  0021               	movlb	1	; select bank1
  4784  0D08  01E1               	clrf	(_Temp^(0+128)+10)
  4785  0D09  07E1               	addwf	(_Temp^(0+128)+10),f
  4786                           
  4787                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4788  0D0A  0008               	return
  4789  0D0B                     l8162:	
  4790  0D0B  0020               	movlb	0	; select bank0
  4791  0D0C  0827               	movf	getTemp_AD@ADRES+1,w
  4792  0D0D  0021               	movlb	1	; select bank1
  4793  0D0E  0264               	subwf	((_Temp+1)^(0+128)+12),w
  4794  0D0F  1D03               	skipz
  4795  0D10  2D15               	goto	u8255
  4796  0D11  0020               	movlb	0	; select bank0
  4797  0D12  0826               	movf	getTemp_AD@ADRES,w
  4798  0D13  0021               	movlb	1	; select bank1
  4799  0D14  0263               	subwf	(_Temp^(0+128)+12),w
  4800  0D15                     u8255:	
  4801  0D15  1803               	skipnc
  4802  0D16  0008               	return
  4803                           
  4804                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4805  0D17  0020               	movlb	0	; select bank0
  4806  0D18  0827               	movf	getTemp_AD@ADRES+1,w
  4807  0D19  0021               	movlb	1	; select bank1
  4808  0D1A  01E4               	clrf	((_Temp+1)^(0+128)+12)
  4809  0D1B  07E4               	addwf	((_Temp+1)^(0+128)+12),f
  4810  0D1C  0020               	movlb	0	; select bank0
  4811  0D1D  0826               	movf	getTemp_AD@ADRES,w
  4812  0D1E  0021               	movlb	1	; select bank1
  4813  0D1F  01E3               	clrf	(_Temp^(0+128)+12)
  4814  0D20  07E3               	addwf	(_Temp^(0+128)+12),f
  4815  0D21  0008               	return
  4816  0D22                     __end_of_getTemp_AD:	
  4817                           
  4818                           	psect	text4
  4819  0991                     __ptext4:	
  4820 ;; *************** function _getLoad_AD *****************
  4821 ;; Defined at:
  4822 ;;		line 16 in file "../src/OverLoad_B1.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  channel         1    wreg     unsigned char 
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;  channel         1    6[BANK0 ] unsigned char 
  4827 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4828 ;;  i               1   11[BANK0 ] unsigned char 
  4829 ;;  j               1    8[BANK0 ] unsigned char 
  4830 ;;  k               1    7[BANK0 ] unsigned char 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;		None               void
  4833 ;; Registers used:
  4834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;Total ram usage:        8 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    7
  4847 ;; This function calls:
  4848 ;;		_getAD
  4849 ;; This function is called by:
  4850 ;;		_main
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           
  4855                           ;psect for function _getLoad_AD
  4856  0991                     _getLoad_AD:	
  4857                           
  4858                           ;incstack = 0
  4859                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4860                           ;getLoad_AD@channel stored from wreg
  4861  0991  0020               	movlb	0	; select bank0
  4862  0992  00A6               	movwf	getLoad_AD@channel
  4863                           
  4864                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4865  0993  01AB               	clrf	getLoad_AD@i
  4866  0994  01A8               	clrf	getLoad_AD@j
  4867  0995  01A7               	clrf	getLoad_AD@k
  4868                           
  4869                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4870  0996  01A9               	clrf	getLoad_AD@ADRES
  4871  0997  01AA               	clrf	getLoad_AD@ADRES+1
  4872                           
  4873                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4874  0998  0022               	movlb	2	; select bank2
  4875  0999  1E39               	btfss	_Load^(0+256),4
  4876  099A  0008               	return
  4877                           
  4878                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4879  099B  30F3               	movlw	243
  4880  099C  0020               	movlb	0	; select bank0
  4881  099D  00A4               	movwf	??_getLoad_AD
  4882  099E  0824               	movf	??_getLoad_AD,w
  4883  099F  00A0               	movwf	getAD@adcon1
  4884  09A0  0826               	movf	getLoad_AD@channel,w
  4885  09A1  319E  26C5  3189   	fcall	_getAD
  4886  09A4  0020               	movlb	0	; select bank0
  4887  09A5  0821               	movf	?_getAD+1,w
  4888  09A6  01AA               	clrf	getLoad_AD@ADRES+1
  4889  09A7  07AA               	addwf	getLoad_AD@ADRES+1,f
  4890  09A8  0820               	movf	?_getAD,w
  4891  09A9  01A9               	clrf	getLoad_AD@ADRES
  4892  09AA  07A9               	addwf	getLoad_AD@ADRES,f
  4893                           
  4894                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4895  09AB  01AB               	clrf	getLoad_AD@i
  4896  09AC  3004               	movlw	4
  4897  09AD  022B               	subwf	getLoad_AD@i,w
  4898  09AE  1803               	btfsc	3,0
  4899  09AF  29D7               	goto	l8118
  4900  09B0                     l8106:	
  4901                           
  4902                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4903  09B0  352B               	lslf	getLoad_AD@i,w
  4904  09B1  3E44               	addlw	(_Load+11)& (0+255)
  4905  09B2  0086               	movwf	6
  4906  09B3  3001               	movlw	1	; select bank2/3
  4907  09B4  0087               	movwf	7
  4908  09B5  3F40               	moviw [0]fsr1
  4909  09B6  00A4               	movwf	??_getLoad_AD
  4910  09B7  3F41               	moviw [1]fsr1
  4911  09B8  00A5               	movwf	??_getLoad_AD+1
  4912  09B9  082A               	movf	getLoad_AD@ADRES+1,w
  4913  09BA  0225               	subwf	??_getLoad_AD+1,w
  4914  09BB  1D03               	skipz
  4915  09BC  29BF               	goto	u8115
  4916  09BD  0829               	movf	getLoad_AD@ADRES,w
  4917  09BE  0224               	subwf	??_getLoad_AD,w
  4918  09BF                     u8115:	
  4919  09BF  1803               	skipnc
  4920  09C0  29CF               	goto	l8114
  4921  09C1  08A8               	movf	getLoad_AD@j,f
  4922  09C2  1D03               	skipz
  4923  09C3  29CF               	goto	l8114
  4924                           
  4925                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4926  09C4  352B               	lslf	getLoad_AD@i,w
  4927  09C5  3E44               	addlw	(_Load+11)& (0+255)
  4928  09C6  0086               	movwf	6
  4929  09C7  3001               	movlw	1	; select bank2/3
  4930  09C8  0087               	movwf	7
  4931  09C9  0829               	movf	getLoad_AD@ADRES,w
  4932  09CA  3FC0               	movwi [0]fsr1
  4933  09CB  082A               	movf	getLoad_AD@ADRES+1,w
  4934  09CC  3FC1               	movwi [1]fsr1
  4935                           
  4936                           ;OverLoad_B1.c: 25: j = 1;
  4937  09CD  01A8               	clrf	getLoad_AD@j
  4938  09CE  0AA8               	incf	getLoad_AD@j,f
  4939  09CF                     l8114:	
  4940  09CF  3001               	movlw	1
  4941  09D0  00A4               	movwf	??_getLoad_AD
  4942  09D1  0824               	movf	??_getLoad_AD,w
  4943  09D2  07AB               	addwf	getLoad_AD@i,f
  4944  09D3  3004               	movlw	4
  4945  09D4  022B               	subwf	getLoad_AD@i,w
  4946  09D5  1C03               	skipc
  4947  09D6  29B0               	goto	l8106
  4948  09D7                     l8118:	
  4949                           
  4950                           ;OverLoad_B1.c: 26: }
  4951                           ;OverLoad_B1.c: 27: }
  4952                           ;OverLoad_B1.c: 28: if (j == 0) {
  4953  09D7  08A8               	movf	getLoad_AD@j,f
  4954  09D8  1D03               	skipz
  4955  09D9  0008               	return
  4956                           
  4957                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  4958  09DA  01AB               	clrf	getLoad_AD@i
  4959  09DB                     L1:	
  4960  09DB  3004               	movlw	4
  4961  09DC  022B               	subwf	getLoad_AD@i,w
  4962  09DD  1803               	btfsc	3,0
  4963  09DE  0008               	return
  4964                           
  4965                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  4966  09DF  352B               	lslf	getLoad_AD@i,w
  4967  09E0  3E4E               	addlw	(_Load+21)& (0+255)
  4968  09E1  0086               	movwf	6
  4969  09E2  3001               	movlw	1	; select bank2/3
  4970  09E3  0087               	movwf	7
  4971  09E4  3F40               	moviw [0]fsr1
  4972  09E5  00A4               	movwf	??_getLoad_AD
  4973  09E6  3F41               	moviw [1]fsr1
  4974  09E7  00A5               	movwf	??_getLoad_AD+1
  4975  09E8  0825               	movf	??_getLoad_AD+1,w
  4976  09E9  022A               	subwf	getLoad_AD@ADRES+1,w
  4977  09EA  1D03               	skipz
  4978  09EB  29EE               	goto	u8165
  4979  09EC  0824               	movf	??_getLoad_AD,w
  4980  09ED  0229               	subwf	getLoad_AD@ADRES,w
  4981  09EE                     u8165:	
  4982  09EE  1803               	skipnc
  4983  09EF  29FE               	goto	l8134
  4984  09F0  08A7               	movf	getLoad_AD@k,f
  4985  09F1  1D03               	skipz
  4986  09F2  29FE               	goto	l8134
  4987                           
  4988                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  4989  09F3  352B               	lslf	getLoad_AD@i,w
  4990  09F4  3E4E               	addlw	(_Load+21)& (0+255)
  4991  09F5  0086               	movwf	6
  4992  09F6  3001               	movlw	1	; select bank2/3
  4993  09F7  0087               	movwf	7
  4994  09F8  0829               	movf	getLoad_AD@ADRES,w
  4995  09F9  3FC0               	movwi [0]fsr1
  4996  09FA  082A               	movf	getLoad_AD@ADRES+1,w
  4997  09FB  3FC1               	movwi [1]fsr1
  4998                           
  4999                           ;OverLoad_B1.c: 32: k = 1;
  5000  09FC  01A7               	clrf	getLoad_AD@k
  5001  09FD  0AA7               	incf	getLoad_AD@k,f
  5002  09FE                     l8134:	
  5003  09FE  3001               	movlw	1
  5004  09FF  00A4               	movwf	??_getLoad_AD
  5005  0A00  0824               	movf	??_getLoad_AD,w
  5006  0A01  07AB               	addwf	getLoad_AD@i,f
  5007  0A02  29DB               	goto	L1
  5008  0A03                     __end_of_getLoad_AD:	
  5009                           
  5010                           	psect	text5
  5011  1EC5                     __ptext5:	
  5012 ;; *************** function _getAD *****************
  5013 ;; Defined at:
  5014 ;;		line 461 in file "../src/MCU_B1.c"
  5015 ;; Parameters:    Size  Location     Type
  5016 ;;  adcon0          1    wreg     unsigned char 
  5017 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  2    0[BANK0 ] int 
  5022 ;; Registers used:
  5023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5029 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;Total ram usage:        4 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    6
  5036 ;; This function calls:
  5037 ;;		_Timeout_Counter
  5038 ;;		_set_TimeoutCleared
  5039 ;; This function is called by:
  5040 ;;		_getLoad_AD
  5041 ;;		_getTemp_AD
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           
  5046                           ;psect for function _getAD
  5047  1EC5                     _getAD:	
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5051                           ;getAD@adcon0 stored from wreg
  5052  1EC5  0020               	movlb	0	; select bank0
  5053  1EC6  00A3               	movwf	getAD@adcon0
  5054                           
  5055                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5056  1EC7  0823               	movf	getAD@adcon0,w
  5057  1EC8  0021               	movlb	1	; select bank1
  5058  1EC9  009D               	movwf	29	;volatile
  5059                           
  5060                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5061  1ECA  0020               	movlb	0	; select bank0
  5062  1ECB  0820               	movf	getAD@adcon1,w
  5063  1ECC  0021               	movlb	1	; select bank1
  5064  1ECD  009E               	movwf	30	;volatile
  5065                           
  5066                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5067  1ECE  149D               	bsf	29,1	;volatile
  5068                           
  5069                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5070  1ECF  2ED3               	goto	l7582
  5071  1ED0                     l7580:	
  5072                           
  5073                           ;MCU_B1.c: 466: Timeout_Counter();
  5074  1ED0  319C  24F2  319E   	fcall	_Timeout_Counter
  5075  1ED3                     l7582:	
  5076  1ED3  0021               	movlb	1	; select bank1
  5077  1ED4  1C9D               	btfss	29,1	;volatile
  5078  1ED5  2ED8               	goto	l7586
  5079  1ED6  1D39               	btfss	(_myMain^(0+128)+10),2
  5080  1ED7  2ED0               	goto	l7580
  5081  1ED8                     l7586:	
  5082                           
  5083                           ;MCU_B1.c: 467: };
  5084                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5085  1ED8  319A  2200         	fcall	_set_TimeoutCleared
  5086                           
  5087                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5088  1EDA  0021               	movlb	1	; select bank1
  5089  1EDB  081C               	movf	28,w	;volatile
  5090  1EDC  0020               	movlb	0	; select bank0
  5091  1EDD  01A1               	clrf	?_getAD+1
  5092  1EDE  07A1               	addwf	?_getAD+1,f
  5093  1EDF  0021               	movlb	1	; select bank1
  5094  1EE0  081B               	movf	27,w	;volatile
  5095  1EE1  0020               	movlb	0	; select bank0
  5096  1EE2  01A0               	clrf	?_getAD
  5097  1EE3  07A0               	addwf	?_getAD,f
  5098  1EE4  0008               	return
  5099  1EE5                     __end_of_getAD:	
  5100                           
  5101                           	psect	text6
  5102  1C43                     __ptext6:	
  5103 ;; *************** function _WDT_Main *****************
  5104 ;; Defined at:
  5105 ;;		line 1116 in file "../src/MCU_B1.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;		None
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;		None
  5110 ;; Return value:  Size  Location     Type
  5111 ;;		None               void
  5112 ;; Registers used:
  5113 ;;		wreg, status,2, status,0, pclath, cstack
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;Total ram usage:        1 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    6
  5126 ;; This function calls:
  5127 ;;		_WDT_Clearing
  5128 ;; This function is called by:
  5129 ;;		_main
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           
  5134                           ;psect for function _WDT_Main
  5135  1C43                     _WDT_Main:	
  5136                           
  5137                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5138                           
  5139                           ;incstack = 0
  5140                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5141  1C43  0022               	movlb	2	; select bank2
  5142  1C44  1C36               	btfss	_WDT^(0+256),0
  5143  1C45  0008               	return
  5144                           
  5145                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5146  1C46  3001               	movlw	1
  5147  1C47  02B7               	subwf	(_WDT^(0+256)+1),f
  5148  1C48  0837               	movf	(_WDT^(0+256)+1),w
  5149  1C49  3AFF               	xorlw	255
  5150  1C4A  1903               	skipnz
  5151  1C4B  0008               	return
  5152                           
  5153                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5154  1C4C  3064               	movlw	100
  5155  1C4D  0020               	movlb	0	; select bank0
  5156  1C4E  00A0               	movwf	??_WDT_Main
  5157  1C4F  0820               	movf	??_WDT_Main,w
  5158  1C50  0022               	movlb	2	; select bank2
  5159  1C51  00B7               	movwf	(_WDT^(0+256)+1)
  5160                           
  5161                           ;MCU_B1.c: 1120: WDT_Clearing();
  5162  1C52  3180  2002         	fcall	_WDT_Clearing
  5163  1C54  0008               	return
  5164  1C55                     __end_of_WDT_Main:	
  5165                           
  5166                           	psect	text7
  5167  0002                     __ptext7:	
  5168 ;; *************** function _WDT_Clearing *****************
  5169 ;; Defined at:
  5170 ;;		line 1126 in file "../src/MCU_B1.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;		None               void
  5177 ;; Registers used:
  5178 ;;		None
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    5
  5191 ;; This function calls:
  5192 ;;		Nothing
  5193 ;; This function is called by:
  5194 ;;		_WDT_Main
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           
  5199                           ;psect for function _WDT_Clearing
  5200  0002                     _WDT_Clearing:	
  5201                           
  5202                           ;incstack = 0
  5203                           ; Regs used in _WDT_Clearing: []
  5204  0002  0064               	clrwdt	;# 
  5205  0003  0008               	return
  5206  0004                     __end_of_WDT_Clearing:	
  5207                           
  5208                           	psect	text8
  5209  19D5                     __ptext8:	
  5210 ;; *************** function _Temp_Main *****************
  5211 ;; Defined at:
  5212 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;		None
  5217 ;; Return value:  Size  Location     Type
  5218 ;;		None               void
  5219 ;; Registers used:
  5220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;Total ram usage:        0 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    8
  5233 ;; This function calls:
  5234 ;;		_setTemp_Main
  5235 ;; This function is called by:
  5236 ;;		_main
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           
  5241                           ;psect for function _Temp_Main
  5242  19D5                     _Temp_Main:	
  5243                           
  5244                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5245                           
  5246                           ;incstack = 0
  5247                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5248  19D5  3186  2629         	fcall	_setTemp_Main
  5249  19D7  0008               	return
  5250  19D8                     __end_of_Temp_Main:	
  5251                           
  5252                           	psect	text9
  5253  0629                     __ptext9:	
  5254 ;; *************** function _setTemp_Main *****************
  5255 ;; Defined at:
  5256 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;		None
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  AD              2   77[BANK0 ] int 
  5261 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5262 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5263 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5264 ;;  error           1   71[BANK0 ] unsigned char 
  5265 ;; Return value:  Size  Location     Type
  5266 ;;		None               void
  5267 ;; Registers used:
  5268 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5277 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5278 ;;Total ram usage:       10 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    7
  5281 ;; This function calls:
  5282 ;;		___lwdiv
  5283 ;;		_getMain_All_Error_Status
  5284 ;;		_getMain_All_LightsStatus
  5285 ;;		_setBuz
  5286 ;;		_setOverTemp_ADV_Restore
  5287 ;;		_setProductData
  5288 ;; This function is called by:
  5289 ;;		_Temp_Main
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           
  5294                           ;psect for function _setTemp_Main
  5295  0629                     _setTemp_Main:	
  5296                           
  5297                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5298                           
  5299                           ;incstack = 0
  5300                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5301  0629  3000               	movlw	0
  5302  062A  3190  2077  3186   	fcall	_getMain_All_Error_Status
  5303  062D  0020               	movlb	0	; select bank0
  5304  062E  00E5               	movwf	??_setTemp_Main
  5305  062F  0865               	movf	??_setTemp_Main,w
  5306  0630  00E7               	movwf	setTemp_Main@error
  5307                           
  5308                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5309  0631  01E8               	clrf	setTemp_Main@SafeValue
  5310  0632  01E9               	clrf	setTemp_Main@SafeValue+1
  5311  0633  01EA               	clrf	setTemp_Main@DangerValue
  5312  0634  01EB               	clrf	setTemp_Main@DangerValue+1
  5313                           
  5314                           ;OverTemperature_B1.c: 75: int AD = 0;
  5315  0635  01ED               	clrf	setTemp_Main@AD
  5316  0636  01EE               	clrf	setTemp_Main@AD+1
  5317                           
  5318                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5319  0637  319A  2265  3186   	fcall	_getMain_All_LightsStatus
  5320  063A  0020               	movlb	0	; select bank0
  5321  063B  00E5               	movwf	??_setTemp_Main
  5322  063C  0865               	movf	??_setTemp_Main,w
  5323  063D  00EC               	movwf	setTemp_Main@TempGO
  5324                           
  5325                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5326  063E  0021               	movlb	1	; select bank1
  5327  063F  1C57               	btfss	_Temp^(0+128),0
  5328  0640  2EF8               	goto	l1811
  5329                           
  5330                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5331  0641  1957               	btfsc	_Temp^(0+128),2
  5332  0642  2E60               	goto	l7688
  5333                           
  5334                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5335  0643  0020               	movlb	0	; select bank0
  5336  0644  086C               	movf	setTemp_Main@TempGO,w
  5337  0645  3A01               	xorlw	1
  5338  0646  1D03               	skipz
  5339  0647  2E4B               	goto	l1817
  5340  0648  0021               	movlb	1	; select bank1
  5341  0649  1CD7               	btfss	_Temp^(0+128),1
  5342  064A  2E4E               	goto	l7680
  5343  064B                     l1817:	
  5344  064B  0021               	movlb	1	; select bank1
  5345  064C  1CD7               	btfss	_Temp^(0+128),1
  5346  064D  2E5D               	goto	l7686
  5347  064E                     l7680:	
  5348                           
  5349                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5350  064E  3001               	movlw	1
  5351  064F  07D8               	addwf	(_Temp^(0+128)+1),f
  5352  0650  3000               	movlw	0
  5353  0651  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5354                           
  5355                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5356  0652  3000               	movlw	0
  5357  0653  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5358  0654  30FA               	movlw	250
  5359  0655  1903               	skipnz
  5360  0656  0258               	subwf	(_Temp^(0+128)+1),w
  5361  0657  1C03               	skipc
  5362  0658  0008               	return
  5363                           
  5364                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5365  0659  01D8               	clrf	(_Temp^(0+128)+1)
  5366  065A  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5367                           
  5368                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5369  065B  1557               	bsf	_Temp^(0+128),2
  5370                           
  5371                           ;OverTemperature_B1.c: 92: }
  5372                           ;OverTemperature_B1.c: 93: } else {
  5373  065C  0008               	return
  5374  065D                     l7686:	
  5375                           
  5376                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5377  065D  01D8               	clrf	(_Temp^(0+128)+1)
  5378  065E  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5379                           
  5380                           ;OverTemperature_B1.c: 95: }
  5381                           ;OverTemperature_B1.c: 96: } else {
  5382  065F  0008               	return
  5383  0660                     l7688:	
  5384                           
  5385                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5386  0660  3001               	movlw	1
  5387  0661  07D8               	addwf	(_Temp^(0+128)+1),f
  5388  0662  3000               	movlw	0
  5389  0663  3DD9               	addwfc	((_Temp+1)^(0+128)+1),f
  5390                           
  5391                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5392  0664  3000               	movlw	0
  5393  0665  0259               	subwf	((_Temp+1)^(0+128)+1),w
  5394  0666  3005               	movlw	5
  5395  0667  1903               	skipnz
  5396  0668  0258               	subwf	(_Temp^(0+128)+1),w
  5397  0669  1C03               	skipc
  5398  066A  0008               	return
  5399                           
  5400                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5401  066B  01D8               	clrf	(_Temp^(0+128)+1)
  5402  066C  01D9               	clrf	((_Temp+1)^(0+128)+1)
  5403                           
  5404                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5405  066D  3003               	movlw	3
  5406  066E  0020               	movlb	0	; select bank0
  5407  066F  00A0               	movwf	___lwdiv@divisor
  5408  0670  3000               	movlw	0
  5409  0671  00A1               	movwf	___lwdiv@divisor+1
  5410  0672  300A               	movlw	10
  5411  0673  3ED7               	addlw	_Temp& (0+255)
  5412  0674  0086               	movwf	6
  5413  0675  0187               	clrf	7
  5414  0676  3008               	movlw	8
  5415  0677  3ED7               	addlw	_Temp& (0+255)
  5416  0678  0084               	movwf	4
  5417  0679  0185               	clrf	5
  5418  067A  3F00               	moviw [0]fsr0
  5419  067B  0021               	movlb	1	; select bank1
  5420  067C  075D               	addwf	(_Temp^(0+128)+6),w
  5421  067D  0020               	movlb	0	; select bank0
  5422  067E  00E5               	movwf	??_setTemp_Main
  5423  067F  3F01               	moviw [1]fsr0
  5424  0680  0021               	movlb	1	; select bank1
  5425  0681  3D5E               	addwfc	((_Temp+1)^(0+128)+6),w
  5426  0682  0020               	movlb	0	; select bank0
  5427  0683  00E6               	movwf	??_setTemp_Main+1
  5428  0684  3F40               	moviw [0]fsr1
  5429  0685  0765               	addwf	??_setTemp_Main,w
  5430  0686  00A2               	movwf	___lwdiv@dividend
  5431  0687  3F41               	moviw [1]fsr1
  5432  0688  3D66               	addwfc	??_setTemp_Main+1,w
  5433  0689  00A3               	movwf	___lwdiv@dividend+1
  5434  068A  3191  2114  3186   	fcall	___lwdiv
  5435  068D  0020               	movlb	0	; select bank0
  5436  068E  0821               	movf	?___lwdiv+1,w
  5437  068F  01EE               	clrf	setTemp_Main@AD+1
  5438  0690  07EE               	addwf	setTemp_Main@AD+1,f
  5439  0691  0820               	movf	?___lwdiv,w
  5440  0692  01ED               	clrf	setTemp_Main@AD
  5441  0693  07ED               	addwf	setTemp_Main@AD,f
  5442                           
  5443                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5444  0694  319E  2613  3186   	fcall	_setOverTemp_ADV_Restore
  5445                           
  5446                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5447  0697  0020               	movlb	0	; select bank0
  5448  0698  086E               	movf	setTemp_Main@AD+1,w
  5449  0699  3A80               	xorlw	128
  5450  069A  00E5               	movwf	??_setTemp_Main
  5451  069B  3080               	movlw	128
  5452  069C  0265               	subwf	??_setTemp_Main,w
  5453  069D  1D03               	skipz
  5454  069E  2EA1               	goto	u7405
  5455  069F  3001               	movlw	1
  5456  06A0  026D               	subwf	setTemp_Main@AD,w
  5457  06A1                     u7405:	
  5458  06A1  1C03               	skipc
  5459  06A2  0008               	return
  5460                           
  5461                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5462  06A3  0021               	movlb	1	; select bank1
  5463  06A4  1157               	bcf	_Temp^(0+128),2
  5464                           
  5465                           ;OverTemperature_B1.c: 123: SafeValue = 400;
  5466  06A5  3090               	movlw	144
  5467  06A6  0020               	movlb	0	; select bank0
  5468  06A7  00E8               	movwf	setTemp_Main@SafeValue
  5469  06A8  3001               	movlw	1
  5470  06A9  00E9               	movwf	setTemp_Main@SafeValue+1
  5471                           
  5472                           ;OverTemperature_B1.c: 124: DangerValue = 345;
  5473  06AA  3059               	movlw	89
  5474  06AB  00EA               	movwf	setTemp_Main@DangerValue
  5475  06AC  3001               	movlw	1
  5476  06AD  00EB               	movwf	setTemp_Main@DangerValue+1
  5477                           
  5478                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5479  06AE  0021               	movlb	1	; select bank1
  5480  06AF  1CD7               	btfss	_Temp^(0+128),1
  5481  06B0  2ECF               	goto	l7718
  5482                           
  5483                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5484  06B1  0020               	movlb	0	; select bank0
  5485  06B2  0869               	movf	setTemp_Main@SafeValue+1,w
  5486  06B3  026E               	subwf	setTemp_Main@AD+1,w
  5487  06B4  1D03               	skipz
  5488  06B5  2EB8               	goto	u7425
  5489  06B6  0868               	movf	setTemp_Main@SafeValue,w
  5490  06B7  026D               	subwf	setTemp_Main@AD,w
  5491  06B8                     u7425:	
  5492  06B8  1C03               	skipc
  5493  06B9  2EE4               	goto	l7728
  5494                           
  5495                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5496  06BA  3001               	movlw	1
  5497  06BB  00E5               	movwf	??_setTemp_Main
  5498  06BC  0865               	movf	??_setTemp_Main,w
  5499  06BD  0021               	movlb	1	; select bank1
  5500  06BE  07DA               	addwf	(_Temp^(0+128)+3),f
  5501                           
  5502                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5503  06BF  3003               	movlw	3
  5504  06C0  025A               	subwf	(_Temp^(0+128)+3),w
  5505  06C1  1C03               	skipc
  5506  06C2  2EE6               	goto	l7730
  5507                           
  5508                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5509  06C3  01DA               	clrf	(_Temp^(0+128)+3)
  5510                           
  5511                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5512  06C4  10D7               	bcf	_Temp^(0+128),1
  5513                           
  5514                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5515  06C5  3064               	movlw	100
  5516  06C6  0020               	movlb	0	; select bank0
  5517  06C7  00A9               	movwf	setBuz@time
  5518  06C8  3000               	movlw	0
  5519  06C9  00AA               	movwf	setBuz@time+1
  5520  06CA  3002               	movlw	2
  5521  06CB  3194  242E  3186   	fcall	_setBuz
  5522                           
  5523                           ;OverTemperature_B1.c: 137: }
  5524                           ;OverTemperature_B1.c: 138: } else {
  5525  06CE  2EE6               	goto	l7730
  5526  06CF                     l7718:	
  5527                           ;OverTemperature_B1.c: 140: }
  5528                           ;OverTemperature_B1.c: 141: } else {
  5529                           
  5530                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5531                           
  5532                           
  5533                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5534  06CF  0020               	movlb	0	; select bank0
  5535  06D0  086E               	movf	setTemp_Main@AD+1,w
  5536  06D1  026B               	subwf	setTemp_Main@DangerValue+1,w
  5537  06D2  1D03               	skipz
  5538  06D3  2ED6               	goto	u7445
  5539  06D4  086D               	movf	setTemp_Main@AD,w
  5540  06D5  026A               	subwf	setTemp_Main@DangerValue,w
  5541  06D6                     u7445:	
  5542  06D6  1C03               	skipc
  5543  06D7  2EE4               	goto	l7728
  5544                           
  5545                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5546  06D8  3001               	movlw	1
  5547  06D9  00E5               	movwf	??_setTemp_Main
  5548  06DA  0865               	movf	??_setTemp_Main,w
  5549  06DB  0021               	movlb	1	; select bank1
  5550  06DC  07DA               	addwf	(_Temp^(0+128)+3),f
  5551                           
  5552                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5553  06DD  3003               	movlw	3
  5554  06DE  025A               	subwf	(_Temp^(0+128)+3),w
  5555  06DF  1C03               	skipc
  5556  06E0  2EE6               	goto	l7730
  5557                           
  5558                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5559  06E1  01DA               	clrf	(_Temp^(0+128)+3)
  5560                           
  5561                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5562  06E2  14D7               	bsf	_Temp^(0+128),1
  5563                           
  5564                           ;OverTemperature_B1.c: 147: }
  5565                           ;OverTemperature_B1.c: 148: } else {
  5566  06E3  2EE6               	goto	l7730
  5567  06E4                     l7728:	
  5568                           
  5569                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5570  06E4  0021               	movlb	1	; select bank1
  5571  06E5  01DA               	clrf	(_Temp^(0+128)+3)
  5572  06E6                     l7730:	
  5573                           
  5574                           ;OverTemperature_B1.c: 150: }
  5575                           ;OverTemperature_B1.c: 151: }
  5576                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5577  06E6  0020               	movlb	0	; select bank0
  5578  06E7  086E               	movf	setTemp_Main@AD+1,w
  5579  06E8  00E5               	movwf	??_setTemp_Main
  5580  06E9  0865               	movf	??_setTemp_Main,w
  5581  06EA  00E2               	movwf	setProductData@value
  5582  06EB  3018               	movlw	24
  5583  06EC  319A  22B3  3186   	fcall	_setProductData
  5584                           
  5585                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5586  06EF  0020               	movlb	0	; select bank0
  5587  06F0  086D               	movf	setTemp_Main@AD,w
  5588  06F1  00E5               	movwf	??_setTemp_Main
  5589  06F2  0865               	movf	??_setTemp_Main,w
  5590  06F3  00E2               	movwf	setProductData@value
  5591  06F4  3019               	movlw	25
  5592  06F5  319A  22B3         	fcall	_setProductData
  5593                           
  5594                           ;OverTemperature_B1.c: 169: }
  5595                           ;OverTemperature_B1.c: 170: }
  5596                           ;OverTemperature_B1.c: 171: }
  5597                           ;OverTemperature_B1.c: 174: } else {
  5598  06F7  0008               	return
  5599  06F8                     l1811:	
  5600                           
  5601                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5602  06F8  1C2F               	btfss	_myMain^(0+128),0
  5603  06F9  0008               	return
  5604                           
  5605                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5606  06FA  1457               	bsf	_Temp^(0+128),0
  5607  06FB  0008               	return
  5608  06FC                     __end_of_setTemp_Main:	
  5609                           
  5610                           	psect	text10
  5611  1E13                     __ptext10:	
  5612 ;; *************** function _setOverTemp_ADV_Restore *****************
  5613 ;; Defined at:
  5614 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5615 ;; Parameters:    Size  Location     Type
  5616 ;;		None
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  i               2    1[BANK0 ] int 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;		None               void
  5621 ;; Registers used:
  5622 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5623 ;; Tracked objects:
  5624 ;;		On entry : 0/0
  5625 ;;		On exit  : 0/0
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5629 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5631 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;Total ram usage:        3 bytes
  5633 ;; Hardware stack levels used:    1
  5634 ;; Hardware stack levels required when called:    5
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_setTemp_Main
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           
  5643                           ;psect for function _setOverTemp_ADV_Restore
  5644  1E13                     _setOverTemp_ADV_Restore:	
  5645                           
  5646                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5647                           
  5648                           ;incstack = 0
  5649                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5650  1E13  0020               	movlb	0	; select bank0
  5651  1E14  01A1               	clrf	setOverTemp_ADV_Restore@i
  5652  1E15  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5653  1E16                     L2:	
  5654  1E16  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5655  1E17  3A80               	xorlw	128
  5656  1E18  00A0               	movwf	??_setOverTemp_ADV_Restore
  5657  1E19  3080               	movlw	128
  5658  1E1A  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5659  1E1B  1D03               	skipz
  5660  1E1C  2E1F               	goto	u6415
  5661  1E1D  3005               	movlw	5
  5662  1E1E  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5663  1E1F                     u6415:	
  5664  1E1F  1803               	btfsc	3,0
  5665  1E20  0008               	return
  5666                           
  5667                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5668  1E21  0020               	movlb	0	; select bank0
  5669  1E22  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5670  1E23  3EDB               	addlw	(_Temp+4)& (0+255)
  5671  1E24  0086               	movwf	6
  5672  1E25  0187               	clrf	7
  5673  1E26  3000               	movlw	0
  5674  1E27  3FC0               	movwi [0]fsr1
  5675  1E28  3FC1               	movwi [1]fsr1
  5676  1E29  3001               	movlw	1
  5677  1E2A  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5678  1E2B  3000               	movlw	0
  5679  1E2C  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5680  1E2D  2E16               	goto	L2
  5681  1E2E                     __end_of_setOverTemp_ADV_Restore:	
  5682                           
  5683                           	psect	text11
  5684  19D2                     __ptext11:	
  5685 ;; *************** function _Temp_Initialization *****************
  5686 ;; Defined at:
  5687 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5688 ;; Parameters:    Size  Location     Type
  5689 ;;		None
  5690 ;; Auto vars:     Size  Location     Type
  5691 ;;		None
  5692 ;; Return value:  Size  Location     Type
  5693 ;;		None               void
  5694 ;; Registers used:
  5695 ;;		status,2, status,0, pclath, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 0/0
  5698 ;;		On exit  : 0/0
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;Total ram usage:        0 bytes
  5706 ;; Hardware stack levels used:    1
  5707 ;; Hardware stack levels required when called:    6
  5708 ;; This function calls:
  5709 ;;		_setTemp_Initialization
  5710 ;; This function is called by:
  5711 ;;		_main
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           
  5716                           ;psect for function _Temp_Initialization
  5717  19D2                     _Temp_Initialization:	
  5718                           
  5719                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5720                           
  5721                           ;incstack = 0
  5722                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5723  19D2  3188  2000         	fcall	_setTemp_Initialization
  5724  19D4  0008               	return
  5725  19D5                     __end_of_Temp_Initialization:	
  5726                           
  5727                           	psect	text12
  5728  0800                     __ptext12:	
  5729 ;; *************** function _setTemp_Initialization *****************
  5730 ;; Defined at:
  5731 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;		None
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;		None
  5736 ;; Return value:  Size  Location     Type
  5737 ;;		None               void
  5738 ;; Registers used:
  5739 ;;		None
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;Total ram usage:        0 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    5
  5752 ;; This function calls:
  5753 ;;		Nothing
  5754 ;; This function is called by:
  5755 ;;		_Temp_Initialization
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function _setTemp_Initialization
  5761  0800                     _setTemp_Initialization:	
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in _setTemp_Initialization: []
  5765  0800  0008               	return
  5766  0801                     __end_of_setTemp_Initialization:	
  5767                           
  5768                           	psect	text13
  5769  1A2B                     __ptext13:	
  5770 ;; *************** function _Switch_Main *****************
  5771 ;; Defined at:
  5772 ;;		line 76 in file "../src/Switch_B1.c"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;		None
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;		None
  5777 ;; Return value:  Size  Location     Type
  5778 ;;		None               void
  5779 ;; Registers used:
  5780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;Total ram usage:        0 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:    9
  5793 ;; This function calls:
  5794 ;;		_TouchPower
  5795 ;;		_setSw_Main
  5796 ;; This function is called by:
  5797 ;;		_main
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           
  5802                           ;psect for function _Switch_Main
  5803  1A2B                     _Switch_Main:	
  5804                           
  5805                           ;Switch_B1.c: 79: setSw_Main(1);
  5806                           
  5807                           ;incstack = 0
  5808                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5809  1A2B  3001               	movlw	1
  5810  1A2C  3182  2205  319A   	fcall	_setSw_Main
  5811                           
  5812                           ;Switch_B1.c: 91: TouchPower();
  5813  1A2F  319D  2507         	fcall	_TouchPower
  5814  1A31  0008               	return
  5815  1A32                     __end_of_Switch_Main:	
  5816                           
  5817                           	psect	text14
  5818  0205                     __ptext14:	
  5819 ;; *************** function _setSw_Main *****************
  5820 ;; Defined at:
  5821 ;;		line 117 in file "../src/Switch_B1.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  sw              1    wreg     unsigned char 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;  sw              1   19[BANK0 ] unsigned char 
  5826 ;; Return value:  Size  Location     Type
  5827 ;;		None               void
  5828 ;; Registers used:
  5829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5837 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5838 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5839 ;;Total ram usage:        3 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    8
  5842 ;; This function calls:
  5843 ;;		_SwPointSelect
  5844 ;;		_getMain_All_Error_Status
  5845 ;;		_getSw_KeyStatus
  5846 ;;		_setBuz
  5847 ;;		_setDimmerLights_DimmingOn
  5848 ;;		_setDimmerLights_SwOff
  5849 ;;		_setDimmerLights_SwOn
  5850 ;;		_setRF_Learn
  5851 ;; This function is called by:
  5852 ;;		_Switch_Main
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           
  5857                           ;psect for function _setSw_Main
  5858  0205                     _setSw_Main:	
  5859                           
  5860                           ;incstack = 0
  5861                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5862                           ;setSw_Main@sw stored from wreg
  5863  0205  0020               	movlb	0	; select bank0
  5864  0206  00B3               	movwf	setSw_Main@sw
  5865                           
  5866                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5867  0207  0833               	movf	setSw_Main@sw,w
  5868  0208  319B  231F  3182   	fcall	_SwPointSelect
  5869                           
  5870                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5871  020B  0021               	movlb	1	; select bank1
  5872  020C  0851               	movf	_Sw^(0+128),w
  5873  020D  0086               	movwf	6
  5874  020E  3001               	movlw	1	; select bank2/3
  5875  020F  0087               	movwf	7
  5876  0210  1C01               	btfss	1,0
  5877  0211  2B81               	goto	l2545
  5878                           
  5879                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5880  0212  3000               	movlw	0
  5881  0213  3190  2077  3182   	fcall	_getMain_All_Error_Status
  5882  0216  3800               	iorlw	0
  5883  0217  1D03               	skipz
  5884  0218  2A37               	goto	l7842
  5885                           
  5886                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5887  0219  0021               	movlb	1	; select bank1
  5888  021A  0A51               	incf	_Sw^(0+128),w
  5889  021B  0086               	movwf	6
  5890  021C  3001               	movlw	1	; select bank2/3
  5891  021D  0087               	movwf	7
  5892  021E  1081               	bcf	1,1
  5893                           
  5894                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5895  021F  0020               	movlb	0	; select bank0
  5896  0220  0833               	movf	setSw_Main@sw,w
  5897  0221  319B  23EA  3182   	fcall	_getSw_KeyStatus
  5898  0224  3A01               	xorlw	1
  5899  0225  3000               	movlw	0
  5900  0226  1903               	skipnz
  5901  0227  3001               	movlw	1
  5902  0228  0020               	movlb	0	; select bank0
  5903  0229  00B1               	movwf	??_setSw_Main
  5904  022A  0021               	movlb	1	; select bank1
  5905  022B  0851               	movf	_Sw^(0+128),w
  5906  022C  0086               	movwf	6
  5907  022D  3001               	movlw	1	; select bank2/3
  5908  022E  0087               	movwf	7
  5909  022F  0020               	movlb	0	; select bank0
  5910  0230  0DB1               	rlf	??_setSw_Main,f
  5911  0231  0801               	movf	1,w
  5912  0232  0631               	xorwf	??_setSw_Main,w
  5913  0233  39FD               	andlw	-3
  5914  0234  0631               	xorwf	??_setSw_Main,w
  5915  0235  0081               	movwf	1
  5916                           
  5917                           ;Switch_B1.c: 124: } else {
  5918  0236  2A4D               	goto	l2547
  5919  0237                     l7842:	
  5920                           
  5921                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5922  0237  0021               	movlb	1	; select bank1
  5923  0238  0A51               	incf	_Sw^(0+128),w
  5924  0239  0086               	movwf	6
  5925  023A  3001               	movlw	1	; select bank2/3
  5926  023B  0087               	movwf	7
  5927  023C  1881               	btfsc	1,1
  5928  023D  2A4D               	goto	l2547
  5929                           
  5930                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5931  023E  0A51               	incf	_Sw^(0+128),w
  5932  023F  0086               	movwf	6
  5933  0240  3001               	movlw	1	; select bank2/3
  5934  0241  0087               	movwf	7
  5935  0242  1481               	bsf	1,1
  5936                           
  5937                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5938  0243  0851               	movf	_Sw^(0+128),w
  5939  0244  0086               	movwf	6
  5940  0245  3001               	movlw	1	; select bank2/3
  5941  0246  0087               	movwf	7
  5942  0247  1081               	bcf	1,1
  5943                           
  5944                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5945  0248  0851               	movf	_Sw^(0+128),w
  5946  0249  0086               	movwf	6
  5947  024A  3001               	movlw	1	; select bank2/3
  5948  024B  0087               	movwf	7
  5949  024C  1501               	bsf	1,2
  5950  024D                     l2547:	
  5951                           
  5952                           ;Switch_B1.c: 130: }
  5953                           ;Switch_B1.c: 131: }
  5954                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5955  024D  0021               	movlb	1	; select bank1
  5956  024E  0851               	movf	_Sw^(0+128),w
  5957  024F  0086               	movwf	6
  5958  0250  3001               	movlw	1	; select bank2/3
  5959  0251  0087               	movwf	7
  5960  0252  1C81               	btfss	1,1
  5961  0253  2B29               	goto	l7892
  5962                           
  5963                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5964  0254  0851               	movf	_Sw^(0+128),w
  5965  0255  0086               	movwf	6
  5966  0256  3001               	movlw	1	; select bank2/3
  5967  0257  0087               	movwf	7
  5968  0258  1901               	btfsc	1,2
  5969  0259  2A80               	goto	l7858
  5970                           
  5971                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5972  025A  3001               	movlw	1
  5973  025B  0020               	movlb	0	; select bank0
  5974  025C  00B1               	movwf	??_setSw_Main
  5975  025D  0021               	movlb	1	; select bank1
  5976  025E  0851               	movf	_Sw^(0+128),w
  5977  025F  3E02               	addlw	2
  5978  0260  0086               	movwf	6
  5979  0261  3001               	movlw	1	; select bank2/3
  5980  0262  0087               	movwf	7
  5981  0263  0020               	movlb	0	; select bank0
  5982  0264  0831               	movf	??_setSw_Main,w
  5983  0265  0781               	addwf	1,f
  5984                           
  5985                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5986  0266  0021               	movlb	1	; select bank1
  5987  0267  0851               	movf	_Sw^(0+128),w
  5988  0268  3E02               	addlw	2
  5989  0269  0086               	movwf	6
  5990  026A  3001               	movlw	1	; select bank2/3
  5991  026B  0087               	movwf	7
  5992  026C  3003               	movlw	3
  5993  026D  0201               	subwf	1,w
  5994  026E  1C03               	skipc
  5995  026F  0008               	return
  5996                           
  5997                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5998  0270  0851               	movf	_Sw^(0+128),w
  5999  0271  3E02               	addlw	2
  6000  0272  0086               	movwf	6
  6001  0273  3001               	movlw	1	; select bank2/3
  6002  0274  0087               	movwf	7
  6003  0275  0181               	clrf	1
  6004                           
  6005                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  6006  0276  0851               	movf	_Sw^(0+128),w
  6007  0277  0086               	movwf	6
  6008  0278  3001               	movlw	1	; select bank2/3
  6009  0279  0087               	movwf	7
  6010  027A  1501               	bsf	1,2
  6011                           
  6012                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6013  027B  0020               	movlb	0	; select bank0
  6014  027C  0833               	movf	setSw_Main@sw,w
  6015  027D  3193  2339         	fcall	_setDimmerLights_SwOn
  6016                           
  6017                           ;Switch_B1.c: 147: }
  6018                           ;Switch_B1.c: 148: } else {
  6019  027F  0008               	return
  6020  0280                     l7858:	
  6021                           
  6022                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6023  0280  0021               	movlb	1	; select bank1
  6024  0281  0851               	movf	_Sw^(0+128),w
  6025  0282  0086               	movwf	6
  6026  0283  3001               	movlw	1	; select bank2/3
  6027  0284  0087               	movwf	7
  6028  0285  1981               	btfsc	1,3
  6029  0286  2AB5               	goto	l7868
  6030                           
  6031                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6032  0287  0851               	movf	_Sw^(0+128),w
  6033  0288  3E03               	addlw	3
  6034  0289  0086               	movwf	6
  6035  028A  3001               	movlw	1	; select bank2/3
  6036  028B  0087               	movwf	7
  6037  028C  3001               	movlw	1
  6038  028D  0781               	addwf	1,f
  6039  028E  3141               	addfsr 1,1
  6040  028F  1803               	skipnc
  6041  0290  0A81               	incf	1,f
  6042                           
  6043                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6044  0291  0851               	movf	_Sw^(0+128),w
  6045  0292  3E03               	addlw	3
  6046  0293  0086               	movwf	6
  6047  0294  3001               	movlw	1	; select bank2/3
  6048  0295  0087               	movwf	7
  6049  0296  3F40               	moviw [0]fsr1
  6050  0297  0020               	movlb	0	; select bank0
  6051  0298  00B1               	movwf	??_setSw_Main
  6052  0299  3F41               	moviw [1]fsr1
  6053  029A  00B2               	movwf	??_setSw_Main+1
  6054  029B  3000               	movlw	0
  6055  029C  0232               	subwf	??_setSw_Main+1,w
  6056  029D  304B               	movlw	75
  6057  029E  1903               	skipnz
  6058  029F  0231               	subwf	??_setSw_Main,w
  6059  02A0  1C03               	skipc
  6060  02A1  0008               	return
  6061                           
  6062                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6063  02A2  0021               	movlb	1	; select bank1
  6064  02A3  0851               	movf	_Sw^(0+128),w
  6065  02A4  3E03               	addlw	3
  6066  02A5  0086               	movwf	6
  6067  02A6  3001               	movlw	1	; select bank2/3
  6068  02A7  0087               	movwf	7
  6069  02A8  3000               	movlw	0
  6070  02A9  3FC0               	movwi [0]fsr1
  6071  02AA  3FC1               	movwi [1]fsr1
  6072                           
  6073                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6074  02AB  0851               	movf	_Sw^(0+128),w
  6075  02AC  0086               	movwf	6
  6076  02AD  3001               	movlw	1	; select bank2/3
  6077  02AE  0087               	movwf	7
  6078  02AF  1581               	bsf	1,3
  6079                           
  6080                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6081  02B0  0020               	movlb	0	; select bank0
  6082  02B1  0833               	movf	setSw_Main@sw,w
  6083  02B2  319F  27D8         	fcall	_setDimmerLights_DimmingOn
  6084                           
  6085                           ;Switch_B1.c: 162: }
  6086                           ;Switch_B1.c: 163: } else {
  6087  02B4  0008               	return
  6088  02B5                     l7868:	
  6089                           
  6090                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6091  02B5  0021               	movlb	1	; select bank1
  6092  02B6  0851               	movf	_Sw^(0+128),w
  6093  02B7  0086               	movwf	6
  6094  02B8  3001               	movlw	1	; select bank2/3
  6095  02B9  0087               	movwf	7
  6096  02BA  1A01               	btfsc	1,4
  6097  02BB  2AF5               	goto	l7882
  6098                           
  6099                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6100  02BC  0851               	movf	_Sw^(0+128),w
  6101  02BD  3E05               	addlw	5
  6102  02BE  0086               	movwf	6
  6103  02BF  3001               	movlw	1	; select bank2/3
  6104  02C0  0087               	movwf	7
  6105  02C1  3001               	movlw	1
  6106  02C2  0781               	addwf	1,f
  6107  02C3  3141               	addfsr 1,1
  6108  02C4  1803               	skipnc
  6109  02C5  0A81               	incf	1,f
  6110                           
  6111                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6112  02C6  0851               	movf	_Sw^(0+128),w
  6113  02C7  3E05               	addlw	5
  6114  02C8  0086               	movwf	6
  6115  02C9  3001               	movlw	1	; select bank2/3
  6116  02CA  0087               	movwf	7
  6117  02CB  3F40               	moviw [0]fsr1
  6118  02CC  0020               	movlb	0	; select bank0
  6119  02CD  00B1               	movwf	??_setSw_Main
  6120  02CE  3F41               	moviw [1]fsr1
  6121  02CF  00B2               	movwf	??_setSw_Main+1
  6122  02D0  3000               	movlw	0
  6123  02D1  0232               	subwf	??_setSw_Main+1,w
  6124  02D2  304B               	movlw	75
  6125  02D3  1903               	skipnz
  6126  02D4  0231               	subwf	??_setSw_Main,w
  6127  02D5  1C03               	skipc
  6128  02D6  0008               	return
  6129                           
  6130                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6131  02D7  0021               	movlb	1	; select bank1
  6132  02D8  0851               	movf	_Sw^(0+128),w
  6133  02D9  3E05               	addlw	5
  6134  02DA  0086               	movwf	6
  6135  02DB  3001               	movlw	1	; select bank2/3
  6136  02DC  0087               	movwf	7
  6137  02DD  3000               	movlw	0
  6138  02DE  3FC0               	movwi [0]fsr1
  6139  02DF  3FC1               	movwi [1]fsr1
  6140                           
  6141                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6142  02E0  0851               	movf	_Sw^(0+128),w
  6143  02E1  0086               	movwf	6
  6144  02E2  3001               	movlw	1	; select bank2/3
  6145  02E3  0087               	movwf	7
  6146  02E4  1601               	bsf	1,4
  6147                           
  6148                           ;Switch_B1.c: 172: setRF_Learn(1);
  6149  02E5  3001               	movlw	1
  6150  02E6  319C  24B4  3182   	fcall	_setRF_Learn
  6151                           
  6152                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6153  02E9  0021               	movlb	1	; select bank1
  6154  02EA  1EAF               	btfss	_myMain^(0+128),5
  6155  02EB  0008               	return
  6156                           
  6157                           ;Switch_B1.c: 174: setBuz(2, 100);
  6158  02EC  3064               	movlw	100
  6159  02ED  0020               	movlb	0	; select bank0
  6160  02EE  00A9               	movwf	setBuz@time
  6161  02EF  3000               	movlw	0
  6162  02F0  00AA               	movwf	setBuz@time+1
  6163  02F1  3002               	movlw	2
  6164  02F2  3194  242E         	fcall	_setBuz
  6165                           
  6166                           ;Switch_B1.c: 175: }
  6167                           ;Switch_B1.c: 179: }
  6168                           ;Switch_B1.c: 180: } else {
  6169  02F4  0008               	return
  6170  02F5                     l7882:	
  6171                           
  6172                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6173  02F5  0021               	movlb	1	; select bank1
  6174  02F6  0851               	movf	_Sw^(0+128),w
  6175  02F7  0086               	movwf	6
  6176  02F8  3001               	movlw	1	; select bank2/3
  6177  02F9  0087               	movwf	7
  6178  02FA  1A81               	btfsc	1,5
  6179  02FB  0008               	return
  6180                           
  6181                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6182  02FC  0851               	movf	_Sw^(0+128),w
  6183  02FD  3E07               	addlw	7
  6184  02FE  0086               	movwf	6
  6185  02FF  3001               	movlw	1	; select bank2/3
  6186  0300  0087               	movwf	7
  6187  0301  3001               	movlw	1
  6188  0302  0781               	addwf	1,f
  6189  0303  3141               	addfsr 1,1
  6190  0304  1803               	skipnc
  6191  0305  0A81               	incf	1,f
  6192                           
  6193                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6194  0306  0851               	movf	_Sw^(0+128),w
  6195  0307  3E07               	addlw	7
  6196  0308  0086               	movwf	6
  6197  0309  3001               	movlw	1	; select bank2/3
  6198  030A  0087               	movwf	7
  6199  030B  3F40               	moviw [0]fsr1
  6200  030C  0020               	movlb	0	; select bank0
  6201  030D  00B1               	movwf	??_setSw_Main
  6202  030E  3F41               	moviw [1]fsr1
  6203  030F  00B2               	movwf	??_setSw_Main+1
  6204  0310  3000               	movlw	0
  6205  0311  0232               	subwf	??_setSw_Main+1,w
  6206  0312  3096               	movlw	150
  6207  0313  1903               	skipnz
  6208  0314  0231               	subwf	??_setSw_Main,w
  6209  0315  1C03               	skipc
  6210  0316  0008               	return
  6211                           
  6212                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6213  0317  0021               	movlb	1	; select bank1
  6214  0318  0851               	movf	_Sw^(0+128),w
  6215  0319  3E07               	addlw	7
  6216  031A  0086               	movwf	6
  6217  031B  3001               	movlw	1	; select bank2/3
  6218  031C  0087               	movwf	7
  6219  031D  3000               	movlw	0
  6220  031E  3FC0               	movwi [0]fsr1
  6221  031F  3FC1               	movwi [1]fsr1
  6222                           
  6223                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6224  0320  0851               	movf	_Sw^(0+128),w
  6225  0321  0086               	movwf	6
  6226  0322  3001               	movlw	1	; select bank2/3
  6227  0323  0087               	movwf	7
  6228  0324  1681               	bsf	1,5
  6229                           
  6230                           ;Switch_B1.c: 188: setRF_Learn(0);
  6231  0325  3000               	movlw	0
  6232  0326  319C  24B4         	fcall	_setRF_Learn
  6233                           
  6234                           ;Switch_B1.c: 191: }
  6235                           ;Switch_B1.c: 192: }
  6236                           ;Switch_B1.c: 193: }
  6237                           ;Switch_B1.c: 195: }
  6238                           ;Switch_B1.c: 196: }
  6239                           ;Switch_B1.c: 197: } else {
  6240  0328  0008               	return
  6241  0329                     l7892:	
  6242                           
  6243                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6244  0329  0021               	movlb	1	; select bank1
  6245  032A  0851               	movf	_Sw^(0+128),w
  6246  032B  0086               	movwf	6
  6247  032C  3001               	movlw	1	; select bank2/3
  6248  032D  0087               	movwf	7
  6249  032E  1D01               	btfss	1,2
  6250  032F  0008               	return
  6251                           
  6252                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6253  0330  3001               	movlw	1
  6254  0331  0020               	movlb	0	; select bank0
  6255  0332  00B1               	movwf	??_setSw_Main
  6256  0333  0021               	movlb	1	; select bank1
  6257  0334  0851               	movf	_Sw^(0+128),w
  6258  0335  3E02               	addlw	2
  6259  0336  0086               	movwf	6
  6260  0337  3001               	movlw	1	; select bank2/3
  6261  0338  0087               	movwf	7
  6262  0339  0020               	movlb	0	; select bank0
  6263  033A  0831               	movf	??_setSw_Main,w
  6264  033B  0781               	addwf	1,f
  6265                           
  6266                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (60 / 20)) {
  6267  033C  0021               	movlb	1	; select bank1
  6268  033D  0851               	movf	_Sw^(0+128),w
  6269  033E  3E02               	addlw	2
  6270  033F  0086               	movwf	6
  6271  0340  3001               	movlw	1	; select bank2/3
  6272  0341  0087               	movwf	7
  6273  0342  3003               	movlw	3
  6274  0343  0201               	subwf	1,w
  6275  0344  1C03               	skipc
  6276  0345  0008               	return
  6277                           
  6278                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6279  0346  0851               	movf	_Sw^(0+128),w
  6280  0347  3E02               	addlw	2
  6281  0348  0086               	movwf	6
  6282  0349  3001               	movlw	1	; select bank2/3
  6283  034A  0087               	movwf	7
  6284  034B  0181               	clrf	1
  6285                           
  6286                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6287  034C  0851               	movf	_Sw^(0+128),w
  6288  034D  0086               	movwf	6
  6289  034E  3001               	movlw	1	; select bank2/3
  6290  034F  0087               	movwf	7
  6291  0350  1101               	bcf	1,2
  6292                           
  6293                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6294  0351  0851               	movf	_Sw^(0+128),w
  6295  0352  3E03               	addlw	3
  6296  0353  0086               	movwf	6
  6297  0354  3001               	movlw	1	; select bank2/3
  6298  0355  0087               	movwf	7
  6299  0356  3000               	movlw	0
  6300  0357  3FC0               	movwi [0]fsr1
  6301  0358  3FC1               	movwi [1]fsr1
  6302                           
  6303                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6304  0359  0851               	movf	_Sw^(0+128),w
  6305  035A  0086               	movwf	6
  6306  035B  3001               	movlw	1	; select bank2/3
  6307  035C  0087               	movwf	7
  6308  035D  1181               	bcf	1,3
  6309                           
  6310                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6311  035E  0851               	movf	_Sw^(0+128),w
  6312  035F  0086               	movwf	6
  6313  0360  3001               	movlw	1	; select bank2/3
  6314  0361  0087               	movwf	7
  6315  0362  1201               	bcf	1,4
  6316                           
  6317                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6318  0363  0851               	movf	_Sw^(0+128),w
  6319  0364  0086               	movwf	6
  6320  0365  3001               	movlw	1	; select bank2/3
  6321  0366  0087               	movwf	7
  6322  0367  1281               	bcf	1,5
  6323                           
  6324                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6325  0368  0851               	movf	_Sw^(0+128),w
  6326  0369  3E05               	addlw	5
  6327  036A  0086               	movwf	6
  6328  036B  3001               	movlw	1	; select bank2/3
  6329  036C  0087               	movwf	7
  6330  036D  3000               	movlw	0
  6331  036E  3FC0               	movwi [0]fsr1
  6332  036F  3FC1               	movwi [1]fsr1
  6333                           
  6334                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6335  0370  0851               	movf	_Sw^(0+128),w
  6336  0371  3E07               	addlw	7
  6337  0372  0086               	movwf	6
  6338  0373  3001               	movlw	1	; select bank2/3
  6339  0374  0087               	movwf	7
  6340  0375  3000               	movlw	0
  6341  0376  3FC0               	movwi [0]fsr1
  6342  0377  3FC1               	movwi [1]fsr1
  6343                           
  6344                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6345  0378  0020               	movlb	0	; select bank0
  6346  0379  0833               	movf	setSw_Main@sw,w
  6347  037A  3191  2183  3182   	fcall	_setDimmerLights_SwOff
  6348                           
  6349                           ;Switch_B1.c: 220: setRF_Learn(0);
  6350  037D  3000               	movlw	0
  6351  037E  319C  24B4         	fcall	_setRF_Learn
  6352                           
  6353                           ;Switch_B1.c: 222: }
  6354                           ;Switch_B1.c: 223: }
  6355                           ;Switch_B1.c: 224: }
  6356                           ;Switch_B1.c: 225: } else {
  6357  0380  0008               	return
  6358  0381                     l2545:	
  6359                           
  6360                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6361  0381  1C2F               	btfss	_myMain^(0+128),0
  6362  0382  0008               	return
  6363                           
  6364                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6365  0383  0851               	movf	_Sw^(0+128),w
  6366  0384  0086               	movwf	6
  6367  0385  3001               	movlw	1	; select bank2/3
  6368  0386  0087               	movwf	7
  6369  0387  1401               	bsf	1,0
  6370  0388  0008               	return
  6371  0389                     __end_of_setSw_Main:	
  6372                           
  6373                           	psect	text15
  6374  1CB4                     __ptext15:	
  6375 ;; *************** function _setRF_Learn *****************
  6376 ;; Defined at:
  6377 ;;		line 33 in file "../src/RF_Control_B1.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;  command         1    wreg     unsigned char 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  command         1    1[BANK0 ] unsigned char 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;		None               void
  6384 ;; Registers used:
  6385 ;;		wreg, status,2, status,0
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;Total ram usage:        2 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    5
  6398 ;; This function calls:
  6399 ;;		Nothing
  6400 ;; This function is called by:
  6401 ;;		_setSw_Main
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           
  6406                           ;psect for function _setRF_Learn
  6407  1CB4                     _setRF_Learn:	
  6408                           
  6409                           ;incstack = 0
  6410                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6411                           ;setRF_Learn@command stored from wreg
  6412  1CB4  0020               	movlb	0	; select bank0
  6413  1CB5  00A1               	movwf	setRF_Learn@command
  6414                           
  6415                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6416  1CB6  0821               	movf	setRF_Learn@command,w
  6417  1CB7  3A01               	xorlw	1
  6418  1CB8  3000               	movlw	0
  6419  1CB9  1903               	skipnz
  6420  1CBA  3001               	movlw	1
  6421  1CBB  00A0               	movwf	??_setRF_Learn
  6422  1CBC  0EA0               	swapf	??_setRF_Learn,f
  6423  1CBD  0DA0               	rlf	??_setRF_Learn,f
  6424  1CBE  0DA0               	rlf	??_setRF_Learn,f
  6425  1CBF  0021               	movlb	1	; select bank1
  6426  1CC0  0820               	movf	_RF1^(0+128),w
  6427  1CC1  0020               	movlb	0	; select bank0
  6428  1CC2  0620               	xorwf	??_setRF_Learn,w
  6429  1CC3  39BF               	andlw	-65
  6430  1CC4  0620               	xorwf	??_setRF_Learn,w
  6431  1CC5  0021               	movlb	1	; select bank1
  6432  1CC6  00A0               	movwf	_RF1^(0+128)
  6433  1CC7  0008               	return
  6434  1CC8                     __end_of_setRF_Learn:	
  6435                           
  6436                           	psect	text16
  6437  1FD8                     __ptext16:	
  6438 ;; *************** function _setDimmerLights_DimmingOn *****************
  6439 ;; Defined at:
  6440 ;;		line 804 in file "../src/Dimmer_B1.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  sw              1    wreg     unsigned char 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  sw              1    2[BANK0 ] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;		None               void
  6447 ;; Registers used:
  6448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;Total ram usage:        1 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    6
  6461 ;; This function calls:
  6462 ;;		_DimmerLights_SelectPointer
  6463 ;; This function is called by:
  6464 ;;		_setSw_Main
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           
  6469                           ;psect for function _setDimmerLights_DimmingOn
  6470  1FD8                     _setDimmerLights_DimmingOn:	
  6471                           
  6472                           ;incstack = 0
  6473                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6474                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6475  1FD8  0020               	movlb	0	; select bank0
  6476  1FD9  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6477                           
  6478                           ;Dimmer_B1.c: 810: DimmerLights_SelectPointer(sw);
  6479  1FDA  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6480  1FDB  319A  22A7  319F   	fcall	_DimmerLights_SelectPointer
  6481                           
  6482                           ;Dimmer_B1.c: 811: if (DimmerLights->Trigger == 0) {
  6483  1FDE  0021               	movlb	1	; select bank1
  6484  1FDF  084C               	movf	_DimmerLights^(0+128),w
  6485  1FE0  0086               	movwf	6
  6486  1FE1  3001               	movlw	1	; select bank2/3
  6487  1FE2  0087               	movwf	7
  6488  1FE3  1881               	btfsc	1,1
  6489  1FE4  0008               	return
  6490                           
  6491                           ;Dimmer_B1.c: 812: if (DimmerLights->SwFlag == 1) {
  6492  1FE5  084C               	movf	_DimmerLights^(0+128),w
  6493  1FE6  0086               	movwf	6
  6494  1FE7  3001               	movlw	1	; select bank2/3
  6495  1FE8  0087               	movwf	7
  6496  1FE9  1C01               	btfss	1,0
  6497  1FEA  0008               	return
  6498                           
  6499                           ;Dimmer_B1.c: 813: DimmerLights->Status = 1;
  6500  1FEB  0A4C               	incf	_DimmerLights^(0+128),w
  6501  1FEC  0086               	movwf	6
  6502  1FED  3001               	movlw	1	; select bank2/3
  6503  1FEE  0087               	movwf	7
  6504  1FEF  1401               	bsf	1,0
  6505                           
  6506                           ;Dimmer_B1.c: 815: DimmerLights->DimmingSwFlag = 1;
  6507  1FF0  084C               	movf	_DimmerLights^(0+128),w
  6508  1FF1  0086               	movwf	6
  6509  1FF2  3001               	movlw	1	; select bank2/3
  6510  1FF3  0087               	movwf	7
  6511  1FF4  1581               	bsf	1,3
  6512                           
  6513                           ;Dimmer_B1.c: 816: DimmerLights->DimmingTrigger = 1;
  6514  1FF5  084C               	movf	_DimmerLights^(0+128),w
  6515  1FF6  0086               	movwf	6
  6516  1FF7  3001               	movlw	1	; select bank2/3
  6517  1FF8  0087               	movwf	7
  6518  1FF9  1601               	bsf	1,4
  6519                           
  6520                           ;Dimmer_B1.c: 817: DimmerLights->DimmingSwitch = 1;
  6521  1FFA  084C               	movf	_DimmerLights^(0+128),w
  6522  1FFB  0086               	movwf	6
  6523  1FFC  3001               	movlw	1	; select bank2/3
  6524  1FFD  0087               	movwf	7
  6525  1FFE  1681               	bsf	1,5
  6526  1FFF  0008               	return
  6527  2000                     __end_of_setDimmerLights_DimmingOn:	
  6528                           
  6529                           	psect	text17
  6530  1BEA                     __ptext17:	
  6531 ;; *************** function _getSw_KeyStatus *****************
  6532 ;; Defined at:
  6533 ;;		line 238 in file "../src/Switch_B1.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  sw              1    wreg     unsigned char 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;  sw              1    0[COMMON] unsigned char 
  6538 ;;  status          1    1[BANK0 ] unsigned char 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  1    wreg      unsigned char 
  6541 ;; Registers used:
  6542 ;;		wreg, status,2
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;Total ram usage:        3 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    5
  6555 ;; This function calls:
  6556 ;;		Nothing
  6557 ;; This function is called by:
  6558 ;;		_setSw_Main
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function _getSw_KeyStatus
  6564  1BEA                     _getSw_KeyStatus:	
  6565                           
  6566                           ;Switch_B1.c: 239: char status = 0;
  6567                           
  6568                           ;incstack = 0
  6569                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6570  1BEA  0020               	movlb	0	; select bank0
  6571  1BEB  01A1               	clrf	getSw_KeyStatus@status
  6572                           
  6573                           ;Switch_B1.c: 272: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6574  1BEC  01A2               	clrf	_getSw_KeyStatus$6479
  6575  1BED  0AA2               	incf	_getSw_KeyStatus$6479,f
  6576  1BEE  1F0C               	btfss	12,6	;volatile
  6577  1BEF  1A0C               	btfsc	12,4	;volatile
  6578  1BF0  2BF5               	goto	l7262
  6579  1BF1  1C0C               	btfss	12,0	;volatile
  6580  1BF2  1B8C               	btfsc	12,7	;volatile
  6581  1BF3  2BF5               	goto	l7262
  6582  1BF4  01A2               	clrf	_getSw_KeyStatus$6479
  6583  1BF5                     l7262:	
  6584  1BF5  0822               	movf	_getSw_KeyStatus$6479,w
  6585  1BF6  00A0               	movwf	??_getSw_KeyStatus
  6586  1BF7  0820               	movf	??_getSw_KeyStatus,w
  6587  1BF8  00A1               	movwf	getSw_KeyStatus@status
  6588                           
  6589                           ;Switch_B1.c: 276: return status;
  6590  1BF9  0821               	movf	getSw_KeyStatus@status,w
  6591  1BFA  0008               	return
  6592  1BFB                     __end_of_getSw_KeyStatus:	
  6593                           
  6594                           	psect	text18
  6595  1B1F                     __ptext18:	
  6596 ;; *************** function _SwPointSelect *****************
  6597 ;; Defined at:
  6598 ;;		line 25 in file "../src/Switch_B1.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  sw              1    wreg     unsigned char 
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  sw              1    1[BANK0 ] unsigned char 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;		None               void
  6605 ;; Registers used:
  6606 ;;		wreg
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;Total ram usage:        2 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    5
  6619 ;; This function calls:
  6620 ;;		Nothing
  6621 ;; This function is called by:
  6622 ;;		_setSw_Main
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           
  6627                           ;psect for function _SwPointSelect
  6628  1B1F                     _SwPointSelect:	
  6629                           
  6630                           ;incstack = 0
  6631                           ; Regs used in _SwPointSelect: [wreg]
  6632                           ;SwPointSelect@sw stored from wreg
  6633  1B1F  0020               	movlb	0	; select bank0
  6634  1B20  00A1               	movwf	SwPointSelect@sw
  6635                           
  6636                           ;Switch_B1.c: 28: if (sw == 1) {
  6637  1B21  0821               	movf	SwPointSelect@sw,w
  6638  1B22  3A01               	xorlw	1
  6639  1B23  1D03               	skipz
  6640  1B24  0008               	return
  6641                           
  6642                           ;Switch_B1.c: 29: Sw = &Sw1;
  6643  1B25  30BE               	movlw	_Sw1& (0+255)
  6644  1B26  00A0               	movwf	??_SwPointSelect
  6645  1B27  0820               	movf	??_SwPointSelect,w
  6646  1B28  0021               	movlb	1	; select bank1
  6647  1B29  00D1               	movwf	_Sw^(0+128)
  6648  1B2A  0008               	return
  6649  1B2B                     __end_of_SwPointSelect:	
  6650                           
  6651                           	psect	text19
  6652  1D07                     __ptext19:	
  6653 ;; *************** function _TouchPower *****************
  6654 ;; Defined at:
  6655 ;;		line 10 in file "../src/Switch_B1.c"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;		None
  6658 ;; Auto vars:     Size  Location     Type
  6659 ;;		None
  6660 ;; Return value:  Size  Location     Type
  6661 ;;		None               void
  6662 ;; Registers used:
  6663 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;Total ram usage:        0 bytes
  6674 ;; Hardware stack levels used:    1
  6675 ;; Hardware stack levels required when called:    6
  6676 ;; This function calls:
  6677 ;;		_Timeout_Counter
  6678 ;;		_set_TimeoutCleared
  6679 ;; This function is called by:
  6680 ;;		_Switch_Main
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           
  6685                           ;psect for function _TouchPower
  6686  1D07                     _TouchPower:	
  6687                           
  6688                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6689                           
  6690                           ;incstack = 0
  6691                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6692  1D07  0021               	movlb	1	; select bank1
  6693  1D08  1C2F               	btfss	_myMain^(0+128),0
  6694  1D09  0008               	return
  6695                           
  6696                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6697  1D0A  0020               	movlb	0	; select bank0
  6698  1D0B  180D               	btfsc	13,0	;volatile
  6699  1D0C  0008               	return
  6700  1D0D  2D13               	goto	l7824
  6701  1D0E                     l2525:	
  6702                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6703                           
  6704                           
  6705                           ;Switch_B1.c: 14: RB0 = 1;
  6706  1D0E  0020               	movlb	0	; select bank0
  6707  1D0F  140D               	bsf	13,0	;volatile
  6708                           
  6709                           ;Switch_B1.c: 15: Timeout_Counter();
  6710  1D10  319C  24F2  319D   	fcall	_Timeout_Counter
  6711  1D13                     l7824:	
  6712  1D13  0020               	movlb	0	; select bank0
  6713  1D14  180D               	btfsc	13,0	;volatile
  6714  1D15  2D19               	goto	l7828
  6715  1D16  0021               	movlb	1	; select bank1
  6716  1D17  1D39               	btfss	(_myMain^(0+128)+10),2
  6717  1D18  2D0E               	goto	l2525
  6718  1D19                     l7828:	
  6719                           
  6720                           ;Switch_B1.c: 16: }
  6721                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6722  1D19  319A  2200         	fcall	_set_TimeoutCleared
  6723  1D1B  0008               	return
  6724  1D1C                     __end_of_TouchPower:	
  6725                           
  6726                           	psect	text20
  6727  1A00                     __ptext20:	
  6728 ;; *************** function _set_TimeoutCleared *****************
  6729 ;; Defined at:
  6730 ;;		line 281 in file "../src/Main_B1.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;		None
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;		None
  6735 ;; Return value:  Size  Location     Type
  6736 ;;		None               void
  6737 ;; Registers used:
  6738 ;;		status,2
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;Total ram usage:        0 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:    5
  6751 ;; This function calls:
  6752 ;;		Nothing
  6753 ;; This function is called by:
  6754 ;;		_getAD
  6755 ;;		_TouchPower
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           
  6760                           ;psect for function _set_TimeoutCleared
  6761  1A00                     _set_TimeoutCleared:	
  6762                           
  6763                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6764                           
  6765                           ;incstack = 0
  6766                           ; Regs used in _set_TimeoutCleared: [status,2]
  6767  1A00  0021               	movlb	1	; select bank1
  6768  1A01  1139               	bcf	(_myMain^(0+128)+10),2
  6769                           
  6770                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6771  1A02  01BA               	clrf	(_myMain^(0+128)+11)
  6772  1A03  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6773  1A04  0008               	return
  6774  1A05                     __end_of_set_TimeoutCleared:	
  6775                           
  6776                           	psect	text21
  6777  1CF2                     __ptext21:	
  6778 ;; *************** function _Timeout_Counter *****************
  6779 ;; Defined at:
  6780 ;;		line 272 in file "../src/Main_B1.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;		None
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;		None
  6785 ;; Return value:  Size  Location     Type
  6786 ;;		None               void
  6787 ;; Registers used:
  6788 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;Total ram usage:        0 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:    5
  6801 ;; This function calls:
  6802 ;;		Nothing
  6803 ;; This function is called by:
  6804 ;;		_getAD
  6805 ;;		_TouchPower
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           
  6810                           ;psect for function _Timeout_Counter
  6811  1CF2                     _Timeout_Counter:	
  6812                           
  6813                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6814                           
  6815                           ;incstack = 0
  6816                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6817  1CF2  3001               	movlw	1
  6818  1CF3  0021               	movlb	1	; select bank1
  6819  1CF4  07BA               	addwf	(_myMain^(0+128)+11),f
  6820  1CF5  3000               	movlw	0
  6821  1CF6  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6822                           
  6823                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6824  1CF7  300B               	movlw	11
  6825  1CF8  3EAF               	addlw	_myMain& (0+255)
  6826  1CF9  0086               	movwf	6
  6827  1CFA  0187               	clrf	7
  6828  1CFB  3F40               	moviw [0]fsr1
  6829  1CFC  3AA8               	xorlw	168
  6830  1CFD  1D03               	skipz
  6831  1CFE  2D01               	goto	u6385
  6832  1CFF  3F41               	moviw [1]fsr1
  6833  1D00  3A61               	xorlw	97
  6834  1D01                     u6385:	
  6835  1D01  1D03               	skipz
  6836  1D02  0008               	return
  6837                           
  6838                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6839  1D03  01BA               	clrf	(_myMain^(0+128)+11)
  6840  1D04  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6841                           
  6842                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6843  1D05  1539               	bsf	(_myMain^(0+128)+10),2
  6844  1D06  0008               	return
  6845  1D07                     __end_of_Timeout_Counter:	
  6846                           
  6847                           	psect	text22
  6848  19FC                     __ptext22:	
  6849 ;; *************** function _Switch_Initialization *****************
  6850 ;; Defined at:
  6851 ;;		line 46 in file "../src/Switch_B1.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;		None               void
  6858 ;; Registers used:
  6859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;Total ram usage:        0 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    8
  6872 ;; This function calls:
  6873 ;;		_setSw_Initialization
  6874 ;; This function is called by:
  6875 ;;		_main
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _Switch_Initialization
  6881  19FC                     _Switch_Initialization:	
  6882                           
  6883                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6884                           
  6885                           ;incstack = 0
  6886                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6887  19FC  3001               	movlw	1
  6888  19FD  319B  2374         	fcall	_setSw_Initialization
  6889  19FF  0008               	return
  6890  1A00                     __end_of_Switch_Initialization:	
  6891                           
  6892                           	psect	text23
  6893  1B74                     __ptext23:	
  6894 ;; *************** function _setSw_Initialization *****************
  6895 ;; Defined at:
  6896 ;;		line 66 in file "../src/Switch_B1.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  sw              1    wreg     unsigned char 
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;  sw              1    4[BANK0 ] unsigned char 
  6901 ;; Return value:  Size  Location     Type
  6902 ;;		None               void
  6903 ;; Registers used:
  6904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;Total ram usage:        1 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; Hardware stack levels required when called:    7
  6917 ;; This function calls:
  6918 ;;		_setLED
  6919 ;; This function is called by:
  6920 ;;		_Switch_Initialization
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           
  6925                           ;psect for function _setSw_Initialization
  6926  1B74                     _setSw_Initialization:	
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6930                           ;setSw_Initialization@sw stored from wreg
  6931  1B74  0020               	movlb	0	; select bank0
  6932  1B75  00A4               	movwf	setSw_Initialization@sw
  6933                           
  6934                           ;Switch_B1.c: 68: setLED(sw, 1);
  6935  1B76  01A2               	clrf	setLED@command
  6936  1B77  0AA2               	incf	setLED@command,f
  6937  1B78  0824               	movf	setSw_Initialization@sw,w
  6938  1B79  3191  21BC  319B   	fcall	_setLED
  6939                           
  6940                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6941  1B7C  0020               	movlb	0	; select bank0
  6942  1B7D  01A2               	clrf	setLED@command
  6943  1B7E  0AA2               	incf	setLED@command,f
  6944  1B7F  0824               	movf	setSw_Initialization@sw,w
  6945  1B80  3E01               	addlw	1
  6946  1B81  3191  21BC         	fcall	_setLED
  6947  1B83  0008               	return
  6948  1B84                     __end_of_setSw_Initialization:	
  6949                           
  6950                           	psect	text24
  6951  19CF                     __ptext24:	
  6952 ;; *************** function _RF_Main *****************
  6953 ;; Defined at:
  6954 ;;		line 26 in file "../src/RF_Control_B1.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;		None
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;		None
  6959 ;; Return value:  Size  Location     Type
  6960 ;;		None               void
  6961 ;; Registers used:
  6962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;Total ram usage:        0 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:   12
  6975 ;; This function calls:
  6976 ;;		_setRF_Main
  6977 ;; This function is called by:
  6978 ;;		_main
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           
  6983                           ;psect for function _RF_Main
  6984  19CF                     _RF_Main:	
  6985                           
  6986                           ;RF_Control_B1.c: 28: setRF_Main();
  6987                           
  6988                           ;incstack = 0
  6989                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6990  19CF  3184  247F         	fcall	_setRF_Main
  6991  19D1  0008               	return
  6992  19D2                     __end_of_RF_Main:	
  6993                           
  6994                           	psect	text25
  6995  047F                     __ptext25:	
  6996 ;; *************** function _setRF_Main *****************
  6997 ;; Defined at:
  6998 ;;		line 53 in file "../src/RF_Control_B1.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;  error           1    4[BANK1 ] unsigned char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;		None               void
  7005 ;; Registers used:
  7006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7013 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;Total ram usage:        2 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:   11
  7019 ;; This function calls:
  7020 ;;		_CC2500_PowerOnInitial
  7021 ;;		_CC2500_RxData
  7022 ;;		_CC2500_TxData
  7023 ;;		_CC2500_WriteCommand
  7024 ;;		_RF_RxDisable
  7025 ;;		___lwdiv
  7026 ;;		_getBuz_GO
  7027 ;;		_getRF_KeyStatus
  7028 ;;		_getRxData
  7029 ;; This function is called by:
  7030 ;;		_RF_Main
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function _setRF_Main
  7036  047F                     _setRF_Main:	
  7037                           
  7038                           ;RF_Control_B1.c: 54: char error = 0;
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7042  047F  0021               	movlb	1	; select bank1
  7043  0480  01E9               	clrf	setRF_Main@error^(0+128)
  7044                           
  7045                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7046  0481  1C20               	btfss	_RF1^(0+128),0
  7047  0482  2D50               	goto	l2154
  7048                           
  7049                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7050  0483  319B  23C8  3184   	fcall	_getBuz_GO
  7051  0486  0020               	movlb	0	; select bank0
  7052  0487  0821               	movf	?_getBuz_GO+1,w
  7053  0488  0420               	iorwf	?_getBuz_GO,w
  7054  0489  1D03               	skipz
  7055  048A  2D31               	goto	l8924
  7056                           
  7057                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7058  048B  319B  23D9  3184   	fcall	_getRF_KeyStatus
  7059  048E  3A01               	xorlw	1
  7060  048F  3000               	movlw	0
  7061  0490  1903               	skipnz
  7062  0491  3001               	movlw	1
  7063  0492  0021               	movlb	1	; select bank1
  7064  0493  00E8               	movwf	??_setRF_Main^(0+128)
  7065  0494  0CE8               	rrf	??_setRF_Main^(0+128),f
  7066  0495  0CE8               	rrf	??_setRF_Main^(0+128),f
  7067  0496  0820               	movf	_RF1^(0+128),w
  7068  0497  0668               	xorwf	??_setRF_Main^(0+128),w
  7069  0498  397F               	andlw	-129
  7070  0499  0668               	xorwf	??_setRF_Main^(0+128),w
  7071  049A  00A0               	movwf	_RF1^(0+128)
  7072                           
  7073                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7074  049B  1FA0               	btfss	_RF1^(0+128),7
  7075  049C  2C9F               	goto	l2158
  7076  049D  1F20               	btfss	_RF1^(0+128),6
  7077  049E  2D31               	goto	l8924
  7078  049F                     l2158:	
  7079                           
  7080                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7081  049F  1D20               	btfss	_RF1^(0+128),2
  7082  04A0  2CF0               	goto	l2159
  7083                           
  7084                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7085  04A1  1B20               	btfsc	_RF1^(0+128),6
  7086  04A2  2CEB               	goto	l8896
  7087                           
  7088                           ;RF_Control_B1.c: 68: RF1.Count++;
  7089  04A3  3001               	movlw	1
  7090  04A4  07A3               	addwf	(_RF1^(0+128)+3),f
  7091  04A5  3000               	movlw	0
  7092  04A6  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7093                           
  7094                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7095  04A7  3014               	movlw	20
  7096  04A8  0020               	movlb	0	; select bank0
  7097  04A9  00A0               	movwf	___lwdiv@divisor
  7098  04AA  3000               	movlw	0
  7099  04AB  00A1               	movwf	___lwdiv@divisor+1
  7100  04AC  0021               	movlb	1	; select bank1
  7101  04AD  0829               	movf	((_RF1+1)^(0+128)+8),w
  7102  04AE  0020               	movlb	0	; select bank0
  7103  04AF  01A3               	clrf	___lwdiv@dividend+1
  7104  04B0  07A3               	addwf	___lwdiv@dividend+1,f
  7105  04B1  0021               	movlb	1	; select bank1
  7106  04B2  0828               	movf	(_RF1^(0+128)+8),w
  7107  04B3  0020               	movlb	0	; select bank0
  7108  04B4  01A2               	clrf	___lwdiv@dividend
  7109  04B5  07A2               	addwf	___lwdiv@dividend,f
  7110  04B6  3191  2114  3184   	fcall	___lwdiv
  7111  04B9  0020               	movlb	0	; select bank0
  7112  04BA  0821               	movf	?___lwdiv+1,w
  7113  04BB  0021               	movlb	1	; select bank1
  7114  04BC  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7115  04BD  1D03               	skipz
  7116  04BE  2CC3               	goto	u9295
  7117  04BF  0020               	movlb	0	; select bank0
  7118  04C0  0820               	movf	?___lwdiv,w
  7119  04C1  0021               	movlb	1	; select bank1
  7120  04C2  0223               	subwf	(_RF1^(0+128)+3),w
  7121  04C3                     u9295:	
  7122  04C3  1C03               	skipc
  7123  04C4  2D31               	goto	l8924
  7124                           
  7125                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7126  04C5  3014               	movlw	20
  7127  04C6  0020               	movlb	0	; select bank0
  7128  04C7  00A0               	movwf	___lwdiv@divisor
  7129  04C8  3000               	movlw	0
  7130  04C9  00A1               	movwf	___lwdiv@divisor+1
  7131  04CA  0021               	movlb	1	; select bank1
  7132  04CB  0829               	movf	((_RF1+1)^(0+128)+8),w
  7133  04CC  0020               	movlb	0	; select bank0
  7134  04CD  01A3               	clrf	___lwdiv@dividend+1
  7135  04CE  07A3               	addwf	___lwdiv@dividend+1,f
  7136  04CF  0021               	movlb	1	; select bank1
  7137  04D0  0828               	movf	(_RF1^(0+128)+8),w
  7138  04D1  0020               	movlb	0	; select bank0
  7139  04D2  01A2               	clrf	___lwdiv@dividend
  7140  04D3  07A2               	addwf	___lwdiv@dividend,f
  7141  04D4  3191  2114  3184   	fcall	___lwdiv
  7142  04D7  0020               	movlb	0	; select bank0
  7143  04D8  0821               	movf	?___lwdiv+1,w
  7144  04D9  0021               	movlb	1	; select bank1
  7145  04DA  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7146  04DB  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7147  04DC  0020               	movlb	0	; select bank0
  7148  04DD  0820               	movf	?___lwdiv,w
  7149  04DE  0021               	movlb	1	; select bank1
  7150  04DF  01A3               	clrf	(_RF1^(0+128)+3)
  7151  04E0  07A3               	addwf	(_RF1^(0+128)+3),f
  7152                           
  7153                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7154  04E1  1120               	bcf	_RF1^(0+128),2
  7155                           
  7156                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7157  04E2  01AB               	clrf	(_RF1^(0+128)+11)
  7158  04E3  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7159                           
  7160                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7161  04E4  319B  2365  3184   	fcall	_RF_RxDisable
  7162                           
  7163                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7164  04E7  3188  20B6  3184   	fcall	_CC2500_TxData
  7165                           
  7166                           ;RF_Control_B1.c: 77: }
  7167                           ;RF_Control_B1.c: 78: } else {
  7168  04EA  2D31               	goto	l8924
  7169  04EB                     l8896:	
  7170                           
  7171                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7172  04EB  0021               	movlb	1	; select bank1
  7173  04EC  01A3               	clrf	(_RF1^(0+128)+3)
  7174  04ED  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7175                           
  7176                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7177  04EE  1120               	bcf	_RF1^(0+128),2
  7178                           
  7179                           ;RF_Control_B1.c: 81: }
  7180                           ;RF_Control_B1.c: 82: } else {
  7181  04EF  2D31               	goto	l8924
  7182  04F0                     l2159:	
  7183                           
  7184                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7185  04F0  1DA0               	btfss	_RF1^(0+128),3
  7186  04F1  2CFF               	goto	l8910
  7187                           
  7188                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7189  04F2  3188  204B  3184   	fcall	_CC2500_RxData
  7190                           
  7191                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7192  04F5  0021               	movlb	1	; select bank1
  7193  04F6  1CA0               	btfss	_RF1^(0+128),1
  7194  04F7  2D31               	goto	l8924
  7195                           
  7196                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7197  04F8  10A0               	bcf	_RF1^(0+128),1
  7198                           
  7199                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7200  04F9  01AB               	clrf	(_RF1^(0+128)+11)
  7201  04FA  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7202                           
  7203                           ;RF_Control_B1.c: 97: getRxData();
  7204  04FB  3197  272E  3184   	fcall	_getRxData
  7205                           
  7206                           ;RF_Control_B1.c: 100: }
  7207                           ;RF_Control_B1.c: 101: } else {
  7208  04FE  2D31               	goto	l8924
  7209  04FF                     l8910:	
  7210                           
  7211                           ;RF_Control_B1.c: 102: RF1.Count++;
  7212  04FF  3001               	movlw	1
  7213  0500  0021               	movlb	1	; select bank1
  7214  0501  07A3               	addwf	(_RF1^(0+128)+3),f
  7215  0502  3000               	movlw	0
  7216  0503  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7217                           
  7218                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7219  0504  3014               	movlw	20
  7220  0505  0020               	movlb	0	; select bank0
  7221  0506  00A0               	movwf	___lwdiv@divisor
  7222  0507  3000               	movlw	0
  7223  0508  00A1               	movwf	___lwdiv@divisor+1
  7224  0509  0021               	movlb	1	; select bank1
  7225  050A  0829               	movf	((_RF1+1)^(0+128)+8),w
  7226  050B  0020               	movlb	0	; select bank0
  7227  050C  01A3               	clrf	___lwdiv@dividend+1
  7228  050D  07A3               	addwf	___lwdiv@dividend+1,f
  7229  050E  0021               	movlb	1	; select bank1
  7230  050F  0828               	movf	(_RF1^(0+128)+8),w
  7231  0510  0020               	movlb	0	; select bank0
  7232  0511  01A2               	clrf	___lwdiv@dividend
  7233  0512  07A2               	addwf	___lwdiv@dividend,f
  7234  0513  3191  2114  3184   	fcall	___lwdiv
  7235  0516  0020               	movlb	0	; select bank0
  7236  0517  0821               	movf	?___lwdiv+1,w
  7237  0518  0021               	movlb	1	; select bank1
  7238  0519  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7239  051A  1D03               	skipz
  7240  051B  2D20               	goto	u9325
  7241  051C  0020               	movlb	0	; select bank0
  7242  051D  0820               	movf	?___lwdiv,w
  7243  051E  0021               	movlb	1	; select bank1
  7244  051F  0223               	subwf	(_RF1^(0+128)+3),w
  7245  0520                     u9325:	
  7246  0520  1C03               	skipc
  7247  0521  2D31               	goto	l8924
  7248                           
  7249                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7250  0522  01A3               	clrf	(_RF1^(0+128)+3)
  7251  0523  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7252                           
  7253                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7254  0524  15A0               	bsf	_RF1^(0+128),3
  7255                           
  7256                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7257  0525  3036               	movlw	54
  7258  0526  319D  25DE  3184   	fcall	_CC2500_WriteCommand
  7259                           
  7260                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7261  0529  303A               	movlw	58
  7262  052A  319D  25DE  3184   	fcall	_CC2500_WriteCommand
  7263                           
  7264                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7265  052D  3034               	movlw	52
  7266  052E  319D  25DE  3184   	fcall	_CC2500_WriteCommand
  7267  0531                     l8924:	
  7268                           
  7269                           ;RF_Control_B1.c: 111: }
  7270                           ;RF_Control_B1.c: 112: }
  7271                           ;RF_Control_B1.c: 113: }
  7272                           ;RF_Control_B1.c: 114: }
  7273                           ;RF_Control_B1.c: 115: }
  7274                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7275  0531  3001               	movlw	1
  7276  0532  0021               	movlb	1	; select bank1
  7277  0533  07AB               	addwf	(_RF1^(0+128)+11),f
  7278  0534  3000               	movlw	0
  7279  0535  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7280                           
  7281                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7282  0536  300B               	movlw	11
  7283  0537  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7284  0538  30B9               	movlw	185
  7285  0539  1903               	skipnz
  7286  053A  022B               	subwf	(_RF1^(0+128)+11),w
  7287  053B  1C03               	skipc
  7288  053C  2D49               	goto	l8938
  7289                           
  7290                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7291  053D  01AB               	clrf	(_RF1^(0+128)+11)
  7292  053E  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7293                           
  7294                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7295  053F  11A0               	bcf	_RF1^(0+128),3
  7296                           
  7297                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7298  0540  10A0               	bcf	_RF1^(0+128),1
  7299                           
  7300                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7301  0541  3036               	movlw	54
  7302  0542  319D  25DE  3184   	fcall	_CC2500_WriteCommand
  7303                           
  7304                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7305  0545  303A               	movlw	58
  7306  0546  319D  25DE  3184   	fcall	_CC2500_WriteCommand
  7307  0549                     l8938:	
  7308                           
  7309                           ;RF_Control_B1.c: 125: }
  7310                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7311  0549  0021               	movlb	1	; select bank1
  7312  054A  1F21               	btfss	(_RF1^(0+128)+1),6
  7313  054B  0008               	return
  7314                           
  7315                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7316  054C  1321               	bcf	(_RF1^(0+128)+1),6
  7317                           
  7318                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7319  054D  319C  24DD         	fcall	_CC2500_PowerOnInitial
  7320                           
  7321                           ;RF_Control_B1.c: 130: }
  7322                           ;RF_Control_B1.c: 132: } else {
  7323  054F  0008               	return
  7324  0550                     l2154:	
  7325                           
  7326                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7327  0550  1C2F               	btfss	_myMain^(0+128),0
  7328  0551  0008               	return
  7329                           
  7330                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7331  0552  1420               	bsf	_RF1^(0+128),0
  7332  0553  0008               	return
  7333  0554                     __end_of_setRF_Main:	
  7334                           
  7335                           	psect	text26
  7336  172E                     __ptext26:	
  7337 ;; *************** function _getRxData *****************
  7338 ;; Defined at:
  7339 ;;		line 227 in file "../src/RF_Control_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  error           1   79[BANK0 ] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;Total ram usage:        2 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:   10
  7360 ;; This function calls:
  7361 ;;		_getMain_All_Error_Status
  7362 ;;		_setControl_Lights_Table
  7363 ;;		_setLog_Code
  7364 ;;		_setTxData
  7365 ;; This function is called by:
  7366 ;;		_setRF_Main
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _getRxData
  7372  172E                     _getRxData:	
  7373                           
  7374                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7375                           
  7376                           ;incstack = 0
  7377                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7378  172E  0023               	movlb	3	; select bank3
  7379  172F  0820               	movf	_RF_Data^(0+384),w
  7380  1730  3AAA               	xorlw	170
  7381  1731  1D03               	skipz
  7382  1732  2F46               	goto	l7216
  7383  1733  0821               	movf	(_RF_Data^(0+384)+1),w
  7384  1734  3A01               	xorlw	1
  7385  1735  1D03               	skipz
  7386  1736  2F46               	goto	l7216
  7387                           
  7388                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7389  1737  3055               	movlw	85
  7390  1738  0020               	movlb	0	; select bank0
  7391  1739  00EE               	movwf	??_getRxData
  7392  173A  0021               	movlb	1	; select bank1
  7393  173B  086E               	movf	_product^(0+128),w
  7394  173C  3E02               	addlw	2
  7395  173D  0086               	movwf	6
  7396  173E  3001               	movlw	1	; select bank2/3
  7397  173F  0087               	movwf	7
  7398  1740  0020               	movlb	0	; select bank0
  7399  1741  086E               	movf	??_getRxData,w
  7400  1742  0081               	movwf	1
  7401                           
  7402                           ;RF_Control_B1.c: 231: setTxData();
  7403  1743  318E  267F         	fcall	_setTxData
  7404                           
  7405                           ;RF_Control_B1.c: 235: } else {
  7406  1745  0008               	return
  7407  1746                     l7216:	
  7408                           
  7409                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7410  1746  3000               	movlw	0
  7411  1747  3190  2077  3197   	fcall	_getMain_All_Error_Status
  7412  174A  0020               	movlb	0	; select bank0
  7413  174B  00EE               	movwf	??_getRxData
  7414  174C  086E               	movf	??_getRxData,w
  7415  174D  00EF               	movwf	getRxData@error
  7416                           
  7417                           ;RF_Control_B1.c: 237: if (error == 0) {
  7418  174E  08EF               	movf	getRxData@error,f
  7419  174F  1D03               	skipz
  7420  1750  2F93               	goto	l2199
  7421                           
  7422                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7423  1751  0021               	movlb	1	; select bank1
  7424  1752  1F20               	btfss	_RF1^(0+128),6
  7425  1753  2F5F               	goto	l7228
  7426                           
  7427                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7428  1754  0023               	movlb	3	; select bank3
  7429  1755  08A0               	movf	_RF_Data^(0+384),f
  7430  1756  1D03               	skipz
  7431  1757  0008               	return
  7432  1758  0821               	movf	(_RF_Data^(0+384)+1),w
  7433  1759  3A64               	xorlw	100
  7434  175A  1D03               	skipz
  7435  175B  0008               	return
  7436                           
  7437                           ;RF_Control_B1.c: 241: setLog_Code();
  7438  175C  3190  20AA         	fcall	_setLog_Code
  7439                           
  7440                           ;RF_Control_B1.c: 242: }
  7441                           ;RF_Control_B1.c: 243: } else {
  7442  175E  0008               	return
  7443  175F                     l7228:	
  7444                           
  7445                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7446  175F  0023               	movlb	3	; select bank3
  7447  1760  0834               	movf	(_RF_Data^(0+384)+20),w
  7448  1761  3AD1               	xorlw	209
  7449  1762  1903               	skipnz
  7450  1763  2F68               	goto	l7232
  7451  1764  0834               	movf	(_RF_Data^(0+384)+20),w
  7452  1765  3A0A               	xorlw	10
  7453  1766  1D03               	skipz
  7454  1767  0008               	return
  7455  1768                     l7232:	
  7456                           
  7457                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7458  1768  08A0               	movf	_RF_Data^(0+384),f
  7459  1769  1D03               	skipz
  7460  176A  0008               	return
  7461  176B  0821               	movf	(_RF_Data^(0+384)+1),w
  7462  176C  3A02               	xorlw	2
  7463  176D  1D03               	skipz
  7464  176E  0008               	return
  7465                           
  7466                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7467  176F  0021               	movlb	1	; select bank1
  7468  1770  086E               	movf	_product^(0+128),w
  7469  1771  3E0C               	addlw	12
  7470  1772  0086               	movwf	6
  7471  1773  3001               	movlw	1	; select bank2/3
  7472  1774  0087               	movwf	7
  7473  1775  0023               	movlb	3	; select bank3
  7474  1776  082C               	movf	(_RF_Data^(0+384)+12),w
  7475  1777  0601               	xorwf	1,w
  7476  1778  1D03               	skipz
  7477  1779  0008               	return
  7478  177A  0021               	movlb	1	; select bank1
  7479  177B  086E               	movf	_product^(0+128),w
  7480  177C  3E0D               	addlw	13
  7481  177D  0086               	movwf	6
  7482  177E  3001               	movlw	1	; select bank2/3
  7483  177F  0087               	movwf	7
  7484  1780  0023               	movlb	3	; select bank3
  7485  1781  082D               	movf	(_RF_Data^(0+384)+13),w
  7486  1782  0601               	xorwf	1,w
  7487  1783  1D03               	skipz
  7488  1784  0008               	return
  7489  1785  0021               	movlb	1	; select bank1
  7490  1786  086E               	movf	_product^(0+128),w
  7491  1787  3E0E               	addlw	14
  7492  1788  0086               	movwf	6
  7493  1789  3001               	movlw	1	; select bank2/3
  7494  178A  0087               	movwf	7
  7495  178B  0023               	movlb	3	; select bank3
  7496  178C  082E               	movf	(_RF_Data^(0+384)+14),w
  7497  178D  0601               	xorwf	1,w
  7498  178E  1D03               	skipz
  7499  178F  0008               	return
  7500                           
  7501                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7502  1790  318A  2203         	fcall	_setControl_Lights_Table
  7503                           
  7504                           ;RF_Control_B1.c: 250: }
  7505                           ;RF_Control_B1.c: 253: }
  7506                           ;RF_Control_B1.c: 264: }
  7507                           ;RF_Control_B1.c: 265: }
  7508                           ;RF_Control_B1.c: 266: } else {
  7509  1792  0008               	return
  7510  1793                     l2199:	
  7511                           
  7512                           ;RF_Control_B1.c: 267: __nop();
  7513  1793  0000               	nop
  7514  1794  0008               	return
  7515  1795                     __end_of_getRxData:	
  7516                           
  7517                           	psect	text27
  7518  10AA                     __ptext27:	
  7519 ;; *************** function _setLog_Code *****************
  7520 ;; Defined at:
  7521 ;;		line 273 in file "../src/RF_Control_B1.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;		None
  7524 ;; Auto vars:     Size  Location     Type
  7525 ;;		None
  7526 ;; Return value:  Size  Location     Type
  7527 ;;		None               void
  7528 ;; Registers used:
  7529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7530 ;; Tracked objects:
  7531 ;;		On entry : 0/0
  7532 ;;		On exit  : 0/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7539 ;;Total ram usage:        1 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; Hardware stack levels required when called:    7
  7542 ;; This function calls:
  7543 ;;		_setBuz
  7544 ;;		_setMemory_LoopSave
  7545 ;;		_setMemory_Modify
  7546 ;;		_setProductData
  7547 ;; This function is called by:
  7548 ;;		_getRxData
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           
  7553                           ;psect for function _setLog_Code
  7554  10AA                     _setLog_Code:	
  7555                           
  7556                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7557                           
  7558                           ;incstack = 0
  7559                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7560  10AA  0021               	movlb	1	; select bank1
  7561  10AB  1320               	bcf	_RF1^(0+128),6
  7562                           
  7563                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7564  10AC  0023               	movlb	3	; select bank3
  7565  10AD  082C               	movf	(_RF_Data^(0+384)+12),w
  7566  10AE  0020               	movlb	0	; select bank0
  7567  10AF  00E5               	movwf	??_setLog_Code
  7568  10B0  0865               	movf	??_setLog_Code,w
  7569  10B1  00E2               	movwf	setProductData@value
  7570  10B2  300C               	movlw	12
  7571  10B3  319A  22B3  3190   	fcall	_setProductData
  7572                           
  7573                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7574  10B6  0023               	movlb	3	; select bank3
  7575  10B7  082D               	movf	(_RF_Data^(0+384)+13),w
  7576  10B8  0020               	movlb	0	; select bank0
  7577  10B9  00E5               	movwf	??_setLog_Code
  7578  10BA  0865               	movf	??_setLog_Code,w
  7579  10BB  00E2               	movwf	setProductData@value
  7580  10BC  300D               	movlw	13
  7581  10BD  319A  22B3  3190   	fcall	_setProductData
  7582                           
  7583                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7584  10C0  0023               	movlb	3	; select bank3
  7585  10C1  082E               	movf	(_RF_Data^(0+384)+14),w
  7586  10C2  0020               	movlb	0	; select bank0
  7587  10C3  00E5               	movwf	??_setLog_Code
  7588  10C4  0865               	movf	??_setLog_Code,w
  7589  10C5  00E2               	movwf	setProductData@value
  7590  10C6  300E               	movlw	14
  7591  10C7  319A  22B3  3190   	fcall	_setProductData
  7592                           
  7593                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7594  10CA  3064               	movlw	100
  7595  10CB  0020               	movlb	0	; select bank0
  7596  10CC  00A9               	movwf	setBuz@time
  7597  10CD  3000               	movlw	0
  7598  10CE  00AA               	movwf	setBuz@time+1
  7599  10CF  3001               	movlw	1
  7600  10D0  3194  242E  3190   	fcall	_setBuz
  7601                           
  7602                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7603  10D3  0021               	movlb	1	; select bank1
  7604  10D4  1EAF               	btfss	_myMain^(0+128),5
  7605  10D5  28DA               	goto	l2212
  7606                           
  7607                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7608  10D6  3001               	movlw	1
  7609  10D7  319C  248E  3190   	fcall	_setMemory_LoopSave
  7610  10DA                     l2212:	
  7611                           
  7612                           ;RF_Control_B1.c: 281: }
  7613                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7614  10DA  3001               	movlw	1
  7615  10DB  319C  2455         	fcall	_setMemory_Modify
  7616  10DD  0008               	return
  7617  10DE                     __end_of_setLog_Code:	
  7618                           
  7619                           	psect	text28
  7620  1C8E                     __ptext28:	
  7621 ;; *************** function _setMemory_LoopSave *****************
  7622 ;; Defined at:
  7623 ;;		line 1089 in file "../src/MCU_B1.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  command         1    wreg     unsigned char 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  command         1    1[BANK0 ] unsigned char 
  7628 ;; Return value:  Size  Location     Type
  7629 ;;		None               void
  7630 ;; Registers used:
  7631 ;;		wreg, status,2, status,0
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;Total ram usage:        2 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    5
  7644 ;; This function calls:
  7645 ;;		Nothing
  7646 ;; This function is called by:
  7647 ;;		_setLog_Code
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function _setMemory_LoopSave
  7653  1C8E                     _setMemory_LoopSave:	
  7654                           
  7655                           ;incstack = 0
  7656                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7657                           ;setMemory_LoopSave@command stored from wreg
  7658  1C8E  0020               	movlb	0	; select bank0
  7659  1C8F  00A1               	movwf	setMemory_LoopSave@command
  7660                           
  7661                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7662  1C90  0821               	movf	setMemory_LoopSave@command,w
  7663  1C91  3A01               	xorlw	1
  7664  1C92  3000               	movlw	0
  7665  1C93  1903               	skipnz
  7666  1C94  3001               	movlw	1
  7667  1C95  00A0               	movwf	??_setMemory_LoopSave
  7668  1C96  0DA0               	rlf	??_setMemory_LoopSave,f
  7669  1C97  0DA0               	rlf	??_setMemory_LoopSave,f
  7670  1C98  0024               	movlb	4	; select bank4
  7671  1C99  0844               	movf	(_Memory^(0+512)+36),w
  7672  1C9A  0020               	movlb	0	; select bank0
  7673  1C9B  0620               	xorwf	??_setMemory_LoopSave,w
  7674  1C9C  39FB               	andlw	-5
  7675  1C9D  0620               	xorwf	??_setMemory_LoopSave,w
  7676  1C9E  0024               	movlb	4	; select bank4
  7677  1C9F  00C4               	movwf	(_Memory^(0+512)+36)
  7678  1CA0  0008               	return
  7679  1CA1                     __end_of_setMemory_LoopSave:	
  7680                           
  7681                           	psect	text29
  7682  0A03                     __ptext29:	
  7683 ;; *************** function _setControl_Lights_Table *****************
  7684 ;; Defined at:
  7685 ;;		line 286 in file "../src/RF_Control_B1.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;		None
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;		None
  7690 ;; Return value:  Size  Location     Type
  7691 ;;		None               void
  7692 ;; Registers used:
  7693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;Total ram usage:        0 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    9
  7706 ;; This function calls:
  7707 ;;		_getDimmerLights_Status
  7708 ;;		_getMain_All_LightsStatus
  7709 ;;		_setCmd_Status
  7710 ;;		_setDimmerLights_SwOff
  7711 ;;		_setDimmerLights_SwOn
  7712 ;;		_setProductData
  7713 ;;		_setRFSW_AdjControl
  7714 ;;		_setRFSW_Control
  7715 ;;		_setRF_AdjControl
  7716 ;;		_setTxData
  7717 ;; This function is called by:
  7718 ;;		_getRxData
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           
  7723                           ;psect for function _setControl_Lights_Table
  7724  0A03                     _setControl_Lights_Table:	
  7725                           
  7726                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7727                           
  7728                           ;incstack = 0
  7729                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7730  0A03  2A69               	goto	l6814
  7731  0A04                     l6794:	
  7732                           ;RF_Control_B1.c: 290: case 0x00:
  7733                           
  7734                           
  7735                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7736  0A04  319A  2265  318A   	fcall	_getMain_All_LightsStatus
  7737  0A07  3A01               	xorlw	1
  7738  0A08  1D03               	skipz
  7739  0A09  2A20               	goto	l6802
  7740                           
  7741                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7742  0A0A  3001               	movlw	1
  7743  0A0B  319B  2384  318A   	fcall	_getDimmerLights_Status
  7744  0A0E  3A01               	xorlw	1
  7745  0A0F  1D03               	skipz
  7746  0A10  2A19               	goto	l6800
  7747                           
  7748                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7749  0A11  3001               	movlw	1
  7750  0A12  3193  2339  318A   	fcall	_setDimmerLights_SwOn
  7751                           
  7752                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7753  0A15  3001               	movlw	1
  7754  0A16  3191  2183  318A   	fcall	_setDimmerLights_SwOff
  7755  0A19                     l6800:	
  7756                           
  7757                           ;RF_Control_B1.c: 297: }
  7758                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7759  0A19  0020               	movlb	0	; select bank0
  7760  0A1A  01A0               	clrf	setCmd_Status@cmd
  7761  0A1B  0AA0               	incf	setCmd_Status@cmd,f
  7762  0A1C  3001               	movlw	1
  7763  0A1D  319D  2578         	fcall	_setCmd_Status
  7764                           
  7765                           ;RF_Control_B1.c: 313: } else {
  7766  0A1F  0008               	return
  7767  0A20                     l6802:	
  7768                           
  7769                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7770  0A20  0020               	movlb	0	; select bank0
  7771  0A21  01E2               	clrf	setProductData@value
  7772  0A22  3009               	movlw	9
  7773  0A23  319A  22B3  318A   	fcall	_setProductData
  7774                           
  7775                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7776  0A26  0020               	movlb	0	; select bank0
  7777  0A27  01E2               	clrf	setProductData@value
  7778  0A28  300B               	movlw	11
  7779  0A29  319A  22B3  318A   	fcall	_setProductData
  7780                           
  7781                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7782  0A2C  0020               	movlb	0	; select bank0
  7783  0A2D  01E2               	clrf	setProductData@value
  7784  0A2E  300F               	movlw	15
  7785  0A2F  319A  22B3  318A   	fcall	_setProductData
  7786                           
  7787                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7788  0A32  0020               	movlb	0	; select bank0
  7789  0A33  01E2               	clrf	setProductData@value
  7790  0A34  3011               	movlw	17
  7791  0A35  319A  22B3  318A   	fcall	_setProductData
  7792                           
  7793                           ;RF_Control_B1.c: 318: setTxData();
  7794  0A38  318E  267F         	fcall	_setTxData
  7795                           
  7796                           ;RF_Control_B1.c: 319: }
  7797                           ;RF_Control_B1.c: 320: break;
  7798  0A3A  0008               	return
  7799  0A3B                     l6804:	
  7800                           ;RF_Control_B1.c: 322: case 0x20:
  7801                           
  7802                           
  7803                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7804  0A3B  0020               	movlb	0	; select bank0
  7805  0A3C  01E2               	clrf	setProductData@value
  7806  0A3D  3009               	movlw	9
  7807  0A3E  319A  22B3  318A   	fcall	_setProductData
  7808                           
  7809                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7810  0A41  0020               	movlb	0	; select bank0
  7811  0A42  01E2               	clrf	setProductData@value
  7812  0A43  300B               	movlw	11
  7813  0A44  319A  22B3  318A   	fcall	_setProductData
  7814                           
  7815                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7816  0A47  0021               	movlb	1	; select bank1
  7817  0A48  086E               	movf	_product^(0+128),w
  7818  0A49  0086               	movwf	6
  7819  0A4A  3001               	movlw	1	; select bank2/3
  7820  0A4B  0087               	movwf	7
  7821  0A4C  3001               	movlw	1	; select bank2/3
  7822  0A4D  3F4F               	moviw [15]fsr1
  7823  0A4E  0020               	movlb	0	; select bank0
  7824  0A4F  00E2               	movwf	setProductData@value
  7825  0A50  300F               	movlw	15
  7826  0A51  319A  22B3  318A   	fcall	_setProductData
  7827                           
  7828                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7829  0A54  0020               	movlb	0	; select bank0
  7830  0A55  01E2               	clrf	setProductData@value
  7831  0A56  3011               	movlw	17
  7832  0A57  319A  22B3  318A   	fcall	_setProductData
  7833                           
  7834                           ;RF_Control_B1.c: 327: setTxData();
  7835  0A5A  318E  267F         	fcall	_setTxData
  7836                           
  7837                           ;RF_Control_B1.c: 328: break;
  7838  0A5C  0008               	return
  7839  0A5D                     l6806:	
  7840                           ;RF_Control_B1.c: 331: case 0x01:
  7841                           
  7842                           
  7843                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7844  0A5D  3001               	movlw	1
  7845  0A5E  3195  2540         	fcall	_setRFSW_Control
  7846                           
  7847                           ;RF_Control_B1.c: 333: break;
  7848  0A60  0008               	return
  7849  0A61                     l6808:	
  7850                           ;RF_Control_B1.c: 337: case 0x11:
  7851                           
  7852                           
  7853                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7854  0A61  3001               	movlw	1
  7855  0A62  318A  227C         	fcall	_setRFSW_AdjControl
  7856                           
  7857                           ;RF_Control_B1.c: 339: break;
  7858  0A64  0008               	return
  7859  0A65                     l6810:	
  7860                           ;RF_Control_B1.c: 341: case 0xd1:
  7861                           
  7862                           
  7863                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7864  0A65  3001               	movlw	1
  7865  0A66  3187  27C6         	fcall	_setRF_AdjControl
  7866                           
  7867                           ;RF_Control_B1.c: 376: }
  7868                           
  7869                           ;RF_Control_B1.c: 343: break;
  7870  0A68  0008               	return
  7871  0A69                     l6814:	
  7872  0A69  0023               	movlb	3	; select bank3
  7873  0A6A  082F               	movf	(_RF_Data^(0+384)+15),w
  7874                           
  7875                           ; Switch size 1, requested type "space"
  7876                           ; Number of cases is 5, Range of values is 0 to 209
  7877                           ; switch strategies available:
  7878                           ; Name         Instructions Cycles
  7879                           ; simple_byte           16     9 (average)
  7880                           ; jumptable            260     6 (fixed)
  7881                           ;	Chosen strategy is simple_byte
  7882  0A6B  3A00               	xorlw	0	; case 0
  7883  0A6C  1903               	skipnz
  7884  0A6D  2A04               	goto	l6794
  7885  0A6E  3A01               	xorlw	1	; case 1
  7886  0A6F  1903               	skipnz
  7887  0A70  2A5D               	goto	l6806
  7888  0A71  3A10               	xorlw	16	; case 17
  7889  0A72  1903               	skipnz
  7890  0A73  2A61               	goto	l6808
  7891  0A74  3A31               	xorlw	49	; case 32
  7892  0A75  1903               	skipnz
  7893  0A76  2A3B               	goto	l6804
  7894  0A77  3AF1               	xorlw	241	; case 209
  7895  0A78  1903               	skipnz
  7896  0A79  2A65               	goto	l6810
  7897  0A7A  2A7B               	goto	l2226
  7898  0A7B                     l2226:	
  7899  0A7B  0008               	return
  7900  0A7C                     __end_of_setControl_Lights_Table:	
  7901                           
  7902                           	psect	text30
  7903  07C6                     __ptext30:	
  7904 ;; *************** function _setRF_AdjControl *****************
  7905 ;; Defined at:
  7906 ;;		line 457 in file "../src/RF_Control_B1.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;  sw              1    wreg     unsigned char 
  7909 ;; Auto vars:     Size  Location     Type
  7910 ;;  sw              1    7[BANK0 ] unsigned char 
  7911 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
  7912 ;;  status          1    5[BANK0 ] unsigned char 
  7913 ;; Return value:  Size  Location     Type
  7914 ;;		None               void
  7915 ;; Registers used:
  7916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7917 ;; Tracked objects:
  7918 ;;		On entry : 0/0
  7919 ;;		On exit  : 0/0
  7920 ;;		Unchanged: 0/0
  7921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7925 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7926 ;;Total ram usage:        4 bytes
  7927 ;; Hardware stack levels used:    1
  7928 ;; Hardware stack levels required when called:    7
  7929 ;; This function calls:
  7930 ;;		_DimmerLights_SelectPointer
  7931 ;;		_getDimmerIntr_Dimming_Sw
  7932 ;;		_getDimmerLights_Status
  7933 ;; This function is called by:
  7934 ;;		_setControl_Lights_Table
  7935 ;; This function uses a non-reentrant model
  7936 ;;
  7937                           
  7938                           
  7939                           ;psect for function _setRF_AdjControl
  7940  07C6                     _setRF_AdjControl:	
  7941                           
  7942                           ;incstack = 0
  7943                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7944                           ;setRF_AdjControl@sw stored from wreg
  7945  07C6  0020               	movlb	0	; select bank0
  7946  07C7  00A7               	movwf	setRF_AdjControl@sw
  7947                           
  7948                           ;RF_Control_B1.c: 458: char status = 0;
  7949  07C8  01A5               	clrf	setRF_AdjControl@status
  7950                           
  7951                           ;RF_Control_B1.c: 460: status = getDimmerLights_Status(sw);
  7952  07C9  0827               	movf	setRF_AdjControl@sw,w
  7953  07CA  319B  2384  3187   	fcall	_getDimmerLights_Status
  7954  07CD  0020               	movlb	0	; select bank0
  7955  07CE  00A4               	movwf	??_setRF_AdjControl
  7956  07CF  0824               	movf	??_setRF_AdjControl,w
  7957  07D0  00A5               	movwf	setRF_AdjControl@status
  7958                           
  7959                           ;RF_Control_B1.c: 461: char dimmingStatus = 0;
  7960  07D1  01A6               	clrf	setRF_AdjControl@dimmingStatus
  7961                           
  7962                           ;RF_Control_B1.c: 462: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  7963  07D2  0827               	movf	setRF_AdjControl@sw,w
  7964  07D3  319B  2338  3187   	fcall	_getDimmerIntr_Dimming_Sw
  7965  07D6  0020               	movlb	0	; select bank0
  7966  07D7  00A4               	movwf	??_setRF_AdjControl
  7967  07D8  0824               	movf	??_setRF_AdjControl,w
  7968  07D9  00A6               	movwf	setRF_AdjControl@dimmingStatus
  7969                           
  7970                           ;RF_Control_B1.c: 464: if (status == 1) {
  7971  07DA  0825               	movf	setRF_AdjControl@status,w
  7972  07DB  3A01               	xorlw	1
  7973  07DC  1D03               	skipz
  7974  07DD  0008               	return
  7975                           
  7976                           ;RF_Control_B1.c: 465: if (dimmingStatus == 0) {
  7977  07DE  08A6               	movf	setRF_AdjControl@dimmingStatus,f
  7978  07DF  1D03               	skipz
  7979  07E0  2FF0               	goto	l6564
  7980                           
  7981                           ;RF_Control_B1.c: 466: DimmerLights_SelectPointer(sw);
  7982  07E1  0827               	movf	setRF_AdjControl@sw,w
  7983  07E2  319A  22A7         	fcall	_DimmerLights_SelectPointer
  7984                           
  7985                           ;RF_Control_B1.c: 467: DimmerLights->DimmingTrigger = 1;
  7986  07E4  0021               	movlb	1	; select bank1
  7987  07E5  084C               	movf	_DimmerLights^(0+128),w
  7988  07E6  0086               	movwf	6
  7989  07E7  3001               	movlw	1	; select bank2/3
  7990  07E8  0087               	movwf	7
  7991  07E9  1601               	bsf	1,4
  7992                           
  7993                           ;RF_Control_B1.c: 468: DimmerLights->DimmingSwitch = 1;
  7994  07EA  084C               	movf	_DimmerLights^(0+128),w
  7995  07EB  0086               	movwf	6
  7996  07EC  3001               	movlw	1	; select bank2/3
  7997  07ED  0087               	movwf	7
  7998  07EE  1681               	bsf	1,5
  7999                           
  8000                           ;RF_Control_B1.c: 470: } else {
  8001  07EF  0008               	return
  8002  07F0                     l6564:	
  8003                           
  8004                           ;RF_Control_B1.c: 471: DimmerLights_SelectPointer(sw);
  8005  07F0  0020               	movlb	0	; select bank0
  8006  07F1  0827               	movf	setRF_AdjControl@sw,w
  8007  07F2  319A  22A7         	fcall	_DimmerLights_SelectPointer
  8008                           
  8009                           ;RF_Control_B1.c: 472: DimmerLights->DimmingTrigger = 1;
  8010  07F4  0021               	movlb	1	; select bank1
  8011  07F5  084C               	movf	_DimmerLights^(0+128),w
  8012  07F6  0086               	movwf	6
  8013  07F7  3001               	movlw	1	; select bank2/3
  8014  07F8  0087               	movwf	7
  8015  07F9  1601               	bsf	1,4
  8016                           
  8017                           ;RF_Control_B1.c: 473: DimmerLights->DimmingSwitch = 0;
  8018  07FA  084C               	movf	_DimmerLights^(0+128),w
  8019  07FB  0086               	movwf	6
  8020  07FC  3001               	movlw	1	; select bank2/3
  8021  07FD  0087               	movwf	7
  8022  07FE  1281               	bcf	1,5
  8023  07FF  0008               	return
  8024  0800                     __end_of_setRF_AdjControl:	
  8025                           
  8026                           	psect	text31
  8027  1540                     __ptext31:	
  8028 ;; *************** function _setRFSW_Control *****************
  8029 ;; Defined at:
  8030 ;;		line 384 in file "../src/RF_Control_B1.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  sw              1    wreg     unsigned char 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  sw              1    2[BANK1 ] unsigned char 
  8035 ;;  rfDimming       1    1[BANK1 ] unsigned char 
  8036 ;;  status          1    0[BANK1 ] unsigned char 
  8037 ;; Return value:  Size  Location     Type
  8038 ;;		None               void
  8039 ;; Registers used:
  8040 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;Total ram usage:        4 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    8
  8053 ;; This function calls:
  8054 ;;		_getDimmerLights_Status
  8055 ;;		_setBuz
  8056 ;;		_setDelayOff_GO
  8057 ;;		_setDimmerLights_SwOff
  8058 ;;		_setDimmerLights_SwOn
  8059 ;;		_setRF_DimmerLights
  8060 ;;		_setTxData
  8061 ;; This function is called by:
  8062 ;;		_setControl_Lights_Table
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           
  8067                           ;psect for function _setRFSW_Control
  8068  1540                     _setRFSW_Control:	
  8069                           
  8070                           ;incstack = 0
  8071                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8072                           ;setRFSW_Control@sw stored from wreg
  8073  1540  0021               	movlb	1	; select bank1
  8074  1541  00E7               	movwf	setRFSW_Control@sw^(0+128)
  8075                           
  8076                           ;RF_Control_B1.c: 385: char status = 0;
  8077  1542  01E5               	clrf	setRFSW_Control@status^(0+128)
  8078                           
  8079                           ;RF_Control_B1.c: 386: char rfDimming = 0;
  8080  1543  01E6               	clrf	setRFSW_Control@rfDimming^(0+128)
  8081                           
  8082                           ;RF_Control_B1.c: 387: rfDimming = RF1.flagDimming == 1 ? 1 : 0;
  8083  1544  3000               	movlw	0
  8084  1545  1822               	btfsc	(_RF1^(0+128)+2),0
  8085  1546  3001               	movlw	1
  8086  1547  00E6               	movwf	setRFSW_Control@rfDimming^(0+128)
  8087                           
  8088                           ;RF_Control_B1.c: 389: if (rfDimming == 0) {
  8089  1548  08E6               	movf	setRFSW_Control@rfDimming^(0+128),f
  8090  1549  1D03               	skipz
  8091  154A  2D8A               	goto	l2229
  8092                           
  8093                           ;RF_Control_B1.c: 390: if (RF_Data[16] == 0x80) {
  8094  154B  0023               	movlb	3	; select bank3
  8095  154C  0830               	movf	(_RF_Data^(0+384)+16),w
  8096  154D  3A80               	xorlw	128
  8097  154E  1D03               	skipz
  8098  154F  2D7D               	goto	l6512
  8099                           
  8100                           ;RF_Control_B1.c: 391: setDelayOff_GO(sw, 1, RF_Data[17]);
  8101  1550  0020               	movlb	0	; select bank0
  8102  1551  01E5               	clrf	setDelayOff_GO@command
  8103  1552  0AE5               	incf	setDelayOff_GO@command,f
  8104  1553  0023               	movlb	3	; select bank3
  8105  1554  0831               	movf	(_RF_Data^(0+384)+17),w
  8106  1555  0020               	movlb	0	; select bank0
  8107  1556  00ED               	movwf	??_setRFSW_Control
  8108  1557  086D               	movf	??_setRFSW_Control,w
  8109  1558  00E6               	movwf	setDelayOff_GO@value
  8110  1559  0021               	movlb	1	; select bank1
  8111  155A  0867               	movf	setRFSW_Control@sw^(0+128),w
  8112  155B  318C  2409  3195   	fcall	_setDelayOff_GO
  8113                           
  8114                           ;RF_Control_B1.c: 392: if (getDimmerLights_Status(sw) == 1) {
  8115  155E  0021               	movlb	1	; select bank1
  8116  155F  0867               	movf	setRFSW_Control@sw^(0+128),w
  8117  1560  319B  2384  3195   	fcall	_getDimmerLights_Status
  8118  1563  3A01               	xorlw	1
  8119  1564  1D03               	skipz
  8120  1565  2D7D               	goto	l6512
  8121                           
  8122                           ;RF_Control_B1.c: 393: setBuz(1, 100);
  8123  1566  3064               	movlw	100
  8124  1567  0020               	movlb	0	; select bank0
  8125  1568  00A9               	movwf	setBuz@time
  8126  1569  3000               	movlw	0
  8127  156A  00AA               	movwf	setBuz@time+1
  8128  156B  3001               	movlw	1
  8129  156C  3194  242E  3195   	fcall	_setBuz
  8130                           
  8131                           ;RF_Control_B1.c: 394: setRF_DimmerLights(sw, 1);
  8132  156F  0020               	movlb	0	; select bank0
  8133  1570  01E5               	clrf	setRF_DimmerLights@on
  8134  1571  0AE5               	incf	setRF_DimmerLights@on,f
  8135  1572  0021               	movlb	1	; select bank1
  8136  1573  0867               	movf	setRFSW_Control@sw^(0+128),w
  8137  1574  3196  26C9  3195   	fcall	_setRF_DimmerLights
  8138                           
  8139                           ;RF_Control_B1.c: 395: setTxData();
  8140  1577  318E  267F  3195   	fcall	_setTxData
  8141                           
  8142                           ;RF_Control_B1.c: 396: status = 1;
  8143  157A  0021               	movlb	1	; select bank1
  8144  157B  01E5               	clrf	setRFSW_Control@status^(0+128)
  8145  157C  0AE5               	incf	setRFSW_Control@status^(0+128),f
  8146  157D                     l6512:	
  8147                           
  8148                           ;RF_Control_B1.c: 397: }
  8149                           ;RF_Control_B1.c: 398: }
  8150                           ;RF_Control_B1.c: 400: if (status == 0) {
  8151  157D  0021               	movlb	1	; select bank1
  8152  157E  08E5               	movf	setRFSW_Control@status^(0+128),f
  8153  157F  1D03               	skipz
  8154  1580  0008               	return
  8155                           
  8156                           ;RF_Control_B1.c: 402: setDimmerLights_SwOn(sw);
  8157  1581  0867               	movf	setRFSW_Control@sw^(0+128),w
  8158  1582  3193  2339  3195   	fcall	_setDimmerLights_SwOn
  8159                           
  8160                           ;RF_Control_B1.c: 403: setDimmerLights_SwOff(sw);
  8161  1585  0021               	movlb	1	; select bank1
  8162  1586  0867               	movf	setRFSW_Control@sw^(0+128),w
  8163  1587  3191  2183         	fcall	_setDimmerLights_SwOff
  8164                           
  8165                           ;RF_Control_B1.c: 405: }
  8166                           ;RF_Control_B1.c: 406: } else {
  8167  1589  0008               	return
  8168  158A                     l2229:	
  8169                           
  8170                           ;RF_Control_B1.c: 408: RF1.flagDimming = 0;
  8171  158A  1022               	bcf	(_RF1^(0+128)+2),0
  8172                           
  8173                           ;RF_Control_B1.c: 409: DimmerLights->DimmingTrigger = 1;
  8174  158B  084C               	movf	_DimmerLights^(0+128),w
  8175  158C  0086               	movwf	6
  8176  158D  3001               	movlw	1	; select bank2/3
  8177  158E  0087               	movwf	7
  8178  158F  1601               	bsf	1,4
  8179                           
  8180                           ;RF_Control_B1.c: 410: DimmerLights->DimmingSwitch = 0;
  8181  1590  084C               	movf	_DimmerLights^(0+128),w
  8182  1591  0086               	movwf	6
  8183  1592  3001               	movlw	1	; select bank2/3
  8184  1593  0087               	movwf	7
  8185  1594  1281               	bcf	1,5
  8186                           
  8187                           ;RF_Control_B1.c: 411: setBuz(1, 100);
  8188  1595  3064               	movlw	100
  8189  1596  0020               	movlb	0	; select bank0
  8190  1597  00A9               	movwf	setBuz@time
  8191  1598  3000               	movlw	0
  8192  1599  00AA               	movwf	setBuz@time+1
  8193  159A  3001               	movlw	1
  8194  159B  3194  242E         	fcall	_setBuz
  8195  159D  0008               	return
  8196  159E                     __end_of_setRFSW_Control:	
  8197                           
  8198                           	psect	text32
  8199  0A7C                     __ptext32:	
  8200 ;; *************** function _setRFSW_AdjControl *****************
  8201 ;; Defined at:
  8202 ;;		line 416 in file "../src/RF_Control_B1.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;  sw              1    wreg     unsigned char 
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;  sw              1   72[BANK0 ] unsigned char 
  8207 ;;  status          1   71[BANK0 ] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;		None               void
  8210 ;; Registers used:
  8211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;Total ram usage:        4 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    8
  8224 ;; This function calls:
  8225 ;;		_getDimmerLights_PercentToValue
  8226 ;;		_getDimmerLights_Status
  8227 ;;		_setDimmerIntr_Dimming_RF
  8228 ;;		_setDimmerIntr_MaxmumValue
  8229 ;;		_setDimmerLights_DimmingRun
  8230 ;;		_setDimmerLights_SwOff
  8231 ;;		_setDimmerLights_SwOn
  8232 ;;		_setMemory_Modify
  8233 ;;		_setProductData
  8234 ;;		_setTxData
  8235 ;; This function is called by:
  8236 ;;		_setControl_Lights_Table
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           
  8241                           ;psect for function _setRFSW_AdjControl
  8242  0A7C                     _setRFSW_AdjControl:	
  8243                           
  8244                           ;incstack = 0
  8245                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8246                           ;setRFSW_AdjControl@sw stored from wreg
  8247  0A7C  0020               	movlb	0	; select bank0
  8248  0A7D  00E8               	movwf	setRFSW_AdjControl@sw
  8249                           
  8250                           ;RF_Control_B1.c: 417: char status = 0;
  8251  0A7E  01E7               	clrf	setRFSW_AdjControl@status
  8252                           
  8253                           ;RF_Control_B1.c: 419: status = getDimmerLights_Status(sw);
  8254  0A7F  0868               	movf	setRFSW_AdjControl@sw,w
  8255  0A80  319B  2384  318A   	fcall	_getDimmerLights_Status
  8256  0A83  0020               	movlb	0	; select bank0
  8257  0A84  00E5               	movwf	??_setRFSW_AdjControl
  8258  0A85  0865               	movf	??_setRFSW_AdjControl,w
  8259  0A86  00E7               	movwf	setRFSW_AdjControl@status
  8260                           
  8261                           ;RF_Control_B1.c: 421: if (RF_Data[9] > 0x64) {
  8262  0A87  3065               	movlw	101
  8263  0A88  0023               	movlb	3	; select bank3
  8264  0A89  0229               	subwf	(_RF_Data^(0+384)+9),w
  8265  0A8A  1C03               	skipc
  8266  0A8B  2A93               	goto	l6528
  8267                           
  8268                           ;RF_Control_B1.c: 422: RF_Data[9] = 0x64;
  8269  0A8C  3064               	movlw	100
  8270  0A8D  0020               	movlb	0	; select bank0
  8271  0A8E  00E5               	movwf	??_setRFSW_AdjControl
  8272  0A8F  0865               	movf	??_setRFSW_AdjControl,w
  8273  0A90  0023               	movlb	3	; select bank3
  8274  0A91  00A9               	movwf	(_RF_Data^(0+384)+9)
  8275                           
  8276                           ;RF_Control_B1.c: 423: } else if (RF_Data[9] < 0x01) {
  8277  0A92  2A98               	goto	l6532
  8278  0A93                     l6528:	
  8279  0A93  08A9               	movf	(_RF_Data^(0+384)+9),f
  8280  0A94  1D03               	skipz
  8281  0A95  2A98               	goto	l6532
  8282                           
  8283                           ;RF_Control_B1.c: 424: RF_Data[9] = 0x01;
  8284  0A96  01A9               	clrf	(_RF_Data^(0+384)+9)
  8285  0A97  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8286  0A98                     l6532:	
  8287                           
  8288                           ;RF_Control_B1.c: 425: }
  8289                           ;RF_Control_B1.c: 426: setProductData(9, RF_Data[9]);
  8290  0A98  0829               	movf	(_RF_Data^(0+384)+9),w
  8291  0A99  0020               	movlb	0	; select bank0
  8292  0A9A  00E5               	movwf	??_setRFSW_AdjControl
  8293  0A9B  0865               	movf	??_setRFSW_AdjControl,w
  8294  0A9C  00E2               	movwf	setProductData@value
  8295  0A9D  3009               	movlw	9
  8296  0A9E  319A  22B3  318A   	fcall	_setProductData
  8297                           
  8298                           ;RF_Control_B1.c: 427: setProductData(11, sw);
  8299  0AA1  0020               	movlb	0	; select bank0
  8300  0AA2  0868               	movf	setRFSW_AdjControl@sw,w
  8301  0AA3  00E5               	movwf	??_setRFSW_AdjControl
  8302  0AA4  0865               	movf	??_setRFSW_AdjControl,w
  8303  0AA5  00E2               	movwf	setProductData@value
  8304  0AA6  300B               	movlw	11
  8305  0AA7  319A  22B3  318A   	fcall	_setProductData
  8306                           
  8307                           ;RF_Control_B1.c: 428: setProductData(17, product->Data[26 + sw]);
  8308  0AAA  0020               	movlb	0	; select bank0
  8309  0AAB  0868               	movf	setRFSW_AdjControl@sw,w
  8310  0AAC  3E1A               	addlw	26
  8311  0AAD  0021               	movlb	1	; select bank1
  8312  0AAE  076E               	addwf	_product^(0+128),w
  8313  0AAF  0020               	movlb	0	; select bank0
  8314  0AB0  00E5               	movwf	??_setRFSW_AdjControl
  8315  0AB1  0865               	movf	??_setRFSW_AdjControl,w
  8316  0AB2  0086               	movwf	6
  8317  0AB3  3001               	movlw	1	; select bank2/3
  8318  0AB4  0087               	movwf	7
  8319  0AB5  0801               	movf	1,w
  8320  0AB6  00E6               	movwf	??_setRFSW_AdjControl+1
  8321  0AB7  0866               	movf	??_setRFSW_AdjControl+1,w
  8322  0AB8  00E2               	movwf	setProductData@value
  8323  0AB9  3011               	movlw	17
  8324  0ABA  319A  22B3  318A   	fcall	_setProductData
  8325                           
  8326                           ;RF_Control_B1.c: 429: setProductData((20 + sw), RF_Data[9]);
  8327  0ABD  0023               	movlb	3	; select bank3
  8328  0ABE  0829               	movf	(_RF_Data^(0+384)+9),w
  8329  0ABF  0020               	movlb	0	; select bank0
  8330  0AC0  00E5               	movwf	??_setRFSW_AdjControl
  8331  0AC1  0865               	movf	??_setRFSW_AdjControl,w
  8332  0AC2  00E2               	movwf	setProductData@value
  8333  0AC3  0868               	movf	setRFSW_AdjControl@sw,w
  8334  0AC4  3E14               	addlw	20
  8335  0AC5  319A  22B3  318A   	fcall	_setProductData
  8336                           
  8337                           ;RF_Control_B1.c: 437: setMemory_Modify(1);
  8338  0AC8  3001               	movlw	1
  8339  0AC9  319C  2455  318A   	fcall	_setMemory_Modify
  8340                           
  8341                           ;RF_Control_B1.c: 441: if (status == 1) {
  8342  0ACC  0020               	movlb	0	; select bank0
  8343  0ACD  0867               	movf	setRFSW_AdjControl@status,w
  8344  0ACE  3A01               	xorlw	1
  8345  0ACF  1D03               	skipz
  8346  0AD0  2AE8               	goto	l6542
  8347                           
  8348                           ;RF_Control_B1.c: 442: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8349  0AD1  0023               	movlb	3	; select bank3
  8350  0AD2  0829               	movf	(_RF_Data^(0+384)+9),w
  8351  0AD3  3195  25FF  318A   	fcall	_getDimmerLights_PercentToValue
  8352  0AD6  0020               	movlb	0	; select bank0
  8353  0AD7  00E5               	movwf	??_setRFSW_AdjControl
  8354  0AD8  0865               	movf	??_setRFSW_AdjControl,w
  8355  0AD9  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8356  0ADA  0868               	movf	setRFSW_AdjControl@sw,w
  8357  0ADB  319A  22BF  318A   	fcall	_setDimmerIntr_MaxmumValue
  8358                           
  8359                           ;RF_Control_B1.c: 443: setDimmerIntr_Dimming_RF(sw, 1);
  8360  0ADE  0020               	movlb	0	; select bank0
  8361  0ADF  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8362  0AE0  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8363  0AE1  0868               	movf	setRFSW_AdjControl@sw,w
  8364  0AE2  319D  2560  318A   	fcall	_setDimmerIntr_Dimming_RF
  8365                           
  8366                           ;RF_Control_B1.c: 444: setTxData();
  8367  0AE5  318E  267F         	fcall	_setTxData
  8368                           
  8369                           ;RF_Control_B1.c: 446: } else if (status == 0) {
  8370  0AE7  0008               	return
  8371  0AE8                     l6542:	
  8372  0AE8  0020               	movlb	0	; select bank0
  8373  0AE9  08E7               	movf	setRFSW_AdjControl@status,f
  8374  0AEA  1D03               	skipz
  8375  0AEB  0008               	return
  8376                           
  8377                           ;RF_Control_B1.c: 450: setDimmerLights_DimmingRun(sw, 1);
  8378  0AEC  01A2               	clrf	setDimmerLights_DimmingRun@command
  8379  0AED  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8380  0AEE  0868               	movf	setRFSW_AdjControl@sw,w
  8381  0AEF  319D  25F8  318A   	fcall	_setDimmerLights_DimmingRun
  8382                           
  8383                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  8384  0AF2  0020               	movlb	0	; select bank0
  8385  0AF3  0868               	movf	setRFSW_AdjControl@sw,w
  8386  0AF4  3193  2339  318A   	fcall	_setDimmerLights_SwOn
  8387                           
  8388                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  8389  0AF7  0020               	movlb	0	; select bank0
  8390  0AF8  0868               	movf	setRFSW_AdjControl@sw,w
  8391  0AF9  3191  2183         	fcall	_setDimmerLights_SwOff
  8392  0AFB  0008               	return
  8393  0AFC                     __end_of_setRFSW_AdjControl:	
  8394                           
  8395                           	psect	text33
  8396  1DF8                     __ptext33:	
  8397 ;; *************** function _setDimmerLights_DimmingRun *****************
  8398 ;; Defined at:
  8399 ;;		line 1140 in file "../src/Dimmer_B1.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;  lights          1    wreg     unsigned char 
  8402 ;;  command         1    2[BANK0 ] unsigned char 
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;  lights          1    4[BANK0 ] unsigned char 
  8405 ;; Return value:  Size  Location     Type
  8406 ;;		None               void
  8407 ;; Registers used:
  8408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8414 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;Total ram usage:        3 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    6
  8421 ;; This function calls:
  8422 ;;		_DimmerLights_SelectPointer
  8423 ;; This function is called by:
  8424 ;;		_setRFSW_AdjControl
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           
  8429                           ;psect for function _setDimmerLights_DimmingRun
  8430  1DF8                     _setDimmerLights_DimmingRun:	
  8431                           
  8432                           ;incstack = 0
  8433                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8434                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8435  1DF8  0020               	movlb	0	; select bank0
  8436  1DF9  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8437                           
  8438                           ;Dimmer_B1.c: 1141: DimmerLights_SelectPointer(lights);
  8439  1DFA  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8440  1DFB  319A  22A7         	fcall	_DimmerLights_SelectPointer
  8441                           
  8442                           ;Dimmer_B1.c: 1142: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8443  1DFD  0020               	movlb	0	; select bank0
  8444  1DFE  0822               	movf	setDimmerLights_DimmingRun@command,w
  8445  1DFF  3A01               	xorlw	1
  8446  1E00  3000               	movlw	0
  8447  1E01  1903               	skipnz
  8448  1E02  3001               	movlw	1
  8449  1E03  00A3               	movwf	??_setDimmerLights_DimmingRun
  8450  1E04  0021               	movlb	1	; select bank1
  8451  1E05  0A4C               	incf	_DimmerLights^(0+128),w
  8452  1E06  0086               	movwf	6
  8453  1E07  3001               	movlw	1	; select bank2/3
  8454  1E08  0087               	movwf	7
  8455  1E09  0020               	movlb	0	; select bank0
  8456  1E0A  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8457  1E0B  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8458  1E0C  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8459  1E0D  0801               	movf	1,w
  8460  1E0E  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8461  1E0F  39BF               	andlw	-65
  8462  1E10  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8463  1E11  0081               	movwf	1
  8464  1E12  0008               	return
  8465  1E13                     __end_of_setDimmerLights_DimmingRun:	
  8466                           
  8467                           	psect	text34
  8468  1BD9                     __ptext34:	
  8469 ;; *************** function _getRF_KeyStatus *****************
  8470 ;; Defined at:
  8471 ;;		line 166 in file "../src/RF_Control_B1.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;		None
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  key             1    1[BANK0 ] unsigned char 
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  1    wreg      unsigned char 
  8478 ;; Registers used:
  8479 ;;		wreg, status,2
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;Total ram usage:        3 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; Hardware stack levels required when called:    5
  8492 ;; This function calls:
  8493 ;;		Nothing
  8494 ;; This function is called by:
  8495 ;;		_setRF_Main
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           
  8500                           ;psect for function _getRF_KeyStatus
  8501  1BD9                     _getRF_KeyStatus:	
  8502                           
  8503                           ;RF_Control_B1.c: 167: char key = 0;
  8504                           
  8505                           ;incstack = 0
  8506                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8507  1BD9  0020               	movlb	0	; select bank0
  8508  1BDA  01A1               	clrf	getRF_KeyStatus@key
  8509                           
  8510                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8511  1BDB  01A2               	clrf	_getRF_KeyStatus$5423
  8512  1BDC  0AA2               	incf	_getRF_KeyStatus$5423,f
  8513  1BDD  1F0C               	btfss	12,6	;volatile
  8514  1BDE  1A0C               	btfsc	12,4	;volatile
  8515  1BDF  2BE4               	goto	l7196
  8516  1BE0  1C0C               	btfss	12,0	;volatile
  8517  1BE1  1B8C               	btfsc	12,7	;volatile
  8518  1BE2  2BE4               	goto	l7196
  8519  1BE3  01A2               	clrf	_getRF_KeyStatus$5423
  8520  1BE4                     l7196:	
  8521  1BE4  0822               	movf	_getRF_KeyStatus$5423,w
  8522  1BE5  00A0               	movwf	??_getRF_KeyStatus
  8523  1BE6  0820               	movf	??_getRF_KeyStatus,w
  8524  1BE7  00A1               	movwf	getRF_KeyStatus@key
  8525                           
  8526                           ;RF_Control_B1.c: 179: return key;
  8527  1BE8  0821               	movf	getRF_KeyStatus@key,w
  8528  1BE9  0008               	return
  8529  1BEA                     __end_of_getRF_KeyStatus:	
  8530                           
  8531                           	psect	text35
  8532  1BC8                     __ptext35:	
  8533 ;; *************** function _getBuz_GO *****************
  8534 ;; Defined at:
  8535 ;;		line 82 in file "../src/Buzzer_B1.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  i               2    4[BANK0 ] int 
  8540 ;; Return value:  Size  Location     Type
  8541 ;;                  2    0[BANK0 ] int 
  8542 ;; Registers used:
  8543 ;;		wreg, status,2, status,0
  8544 ;; Tracked objects:
  8545 ;;		On entry : 0/0
  8546 ;;		On exit  : 0/0
  8547 ;;		Unchanged: 0/0
  8548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;Total ram usage:        6 bytes
  8554 ;; Hardware stack levels used:    1
  8555 ;; Hardware stack levels required when called:    5
  8556 ;; This function calls:
  8557 ;;		Nothing
  8558 ;; This function is called by:
  8559 ;;		_setRF_Main
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           
  8564                           ;psect for function _getBuz_GO
  8565  1BC8                     _getBuz_GO:	
  8566                           
  8567                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8571  1BC8  0022               	movlb	2	; select bank2
  8572  1BC9  0C20               	rrf	_Buz1^(0+256),w
  8573  1BCA  3901               	andlw	1
  8574  1BCB  0020               	movlb	0	; select bank0
  8575  1BCC  00A2               	movwf	??_getBuz_GO
  8576  1BCD  01A3               	clrf	??_getBuz_GO+1
  8577  1BCE  0822               	movf	??_getBuz_GO,w
  8578  1BCF  00A4               	movwf	getBuz_GO@i
  8579  1BD0  0823               	movf	??_getBuz_GO+1,w
  8580  1BD1  00A5               	movwf	getBuz_GO@i+1
  8581                           
  8582                           ;Buzzer_B1.c: 84: return i;
  8583  1BD2  0825               	movf	getBuz_GO@i+1,w
  8584  1BD3  01A1               	clrf	?_getBuz_GO+1
  8585  1BD4  07A1               	addwf	?_getBuz_GO+1,f
  8586  1BD5  0824               	movf	getBuz_GO@i,w
  8587  1BD6  01A0               	clrf	?_getBuz_GO
  8588  1BD7  07A0               	addwf	?_getBuz_GO,f
  8589  1BD8  0008               	return
  8590  1BD9                     __end_of_getBuz_GO:	
  8591                           
  8592                           	psect	text36
  8593  1B65                     __ptext36:	
  8594 ;; *************** function _RF_RxDisable *****************
  8595 ;; Defined at:
  8596 ;;		line 154 in file "../src/RF_Control_B1.c"
  8597 ;; Parameters:    Size  Location     Type
  8598 ;;		None
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;		None
  8601 ;; Return value:  Size  Location     Type
  8602 ;;		None               void
  8603 ;; Registers used:
  8604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8605 ;; Tracked objects:
  8606 ;;		On entry : 0/0
  8607 ;;		On exit  : 0/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;Total ram usage:        0 bytes
  8615 ;; Hardware stack levels used:    1
  8616 ;; Hardware stack levels required when called:    7
  8617 ;; This function calls:
  8618 ;;		_CC2500_WriteCommand
  8619 ;; This function is called by:
  8620 ;;		_setRF_Main
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           
  8625                           ;psect for function _RF_RxDisable
  8626  1B65                     _RF_RxDisable:	
  8627                           
  8628                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8629                           
  8630                           ;incstack = 0
  8631                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8632  1B65  0021               	movlb	1	; select bank1
  8633  1B66  18A0               	btfsc	_RF1^(0+128),1
  8634  1B67  2B6A               	goto	l2184
  8635  1B68  1DA0               	btfss	_RF1^(0+128),3
  8636  1B69  0008               	return
  8637  1B6A                     l2184:	
  8638                           
  8639                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8640  1B6A  11A0               	bcf	_RF1^(0+128),3
  8641                           
  8642                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8643  1B6B  10A0               	bcf	_RF1^(0+128),1
  8644                           
  8645                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8646  1B6C  3036               	movlw	54
  8647  1B6D  319D  25DE  319B   	fcall	_CC2500_WriteCommand
  8648                           
  8649                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8650  1B70  303A               	movlw	58
  8651  1B71  319D  25DE         	fcall	_CC2500_WriteCommand
  8652  1B73  0008               	return
  8653  1B74                     __end_of_RF_RxDisable:	
  8654                           
  8655                           	psect	text37
  8656  08B6                     __ptext37:	
  8657 ;; *************** function _CC2500_TxData *****************
  8658 ;; Defined at:
  8659 ;;		line 32 in file "../src/CC2500_B1.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;		None
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8664 ;; Return value:  Size  Location     Type
  8665 ;;		None               void
  8666 ;; Registers used:
  8667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;Total ram usage:        2 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    7
  8680 ;; This function calls:
  8681 ;;		_CC2500_WriteByte
  8682 ;;		_CC2500_WriteCommand
  8683 ;;		_RF_Timeout_Counter
  8684 ;;		_setRF_TimeoutCleared
  8685 ;; This function is called by:
  8686 ;;		_setRF_Main
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           
  8691                           ;psect for function _CC2500_TxData
  8692  08B6                     _CC2500_TxData:	
  8693                           
  8694                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8695                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8696                           
  8697                           ;incstack = 0
  8698                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8699  08B6  3036               	movlw	54
  8700  08B7  319D  25DE  3188   	fcall	_CC2500_WriteCommand
  8701                           
  8702                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8703  08BA  303B               	movlw	59
  8704  08BB  319D  25DE  3188   	fcall	_CC2500_WriteCommand
  8705                           
  8706                           ;CC2500_B1.c: 38: RC0 = 0;
  8707  08BE  0020               	movlb	0	; select bank0
  8708  08BF  100E               	bcf	14,0	;volatile
  8709                           
  8710                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8711  08C0  307F               	movlw	127
  8712  08C1  00A4               	movwf	??_CC2500_TxData
  8713  08C2  0824               	movf	??_CC2500_TxData,w
  8714  08C3  0021               	movlb	1	; select bank1
  8715  08C4  00D0               	movwf	_SPI0Buffer^(0+128)
  8716                           
  8717                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8718  08C5  28C9               	goto	l8764
  8719  08C6                     l8762:	
  8720                           
  8721                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8722  08C6  319C  24C8  3188   	fcall	_RF_Timeout_Counter
  8723  08C9                     l8764:	
  8724  08C9  0020               	movlb	0	; select bank0
  8725  08CA  1E8E               	btfss	14,5	;volatile
  8726  08CB  28CF               	goto	l8768
  8727  08CC  0021               	movlb	1	; select bank1
  8728  08CD  1F21               	btfss	(_RF1^(0+128)+1),6
  8729  08CE  28C6               	goto	l8762
  8730  08CF                     l8768:	
  8731                           
  8732                           ;CC2500_B1.c: 42: };
  8733                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8734  08CF  3199  21EC  3188   	fcall	_setRF_TimeoutCleared
  8735                           
  8736                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8737  08D2  319D  2591  3188   	fcall	_CC2500_WriteByte
  8738                           
  8739                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8740  08D5  0021               	movlb	1	; select bank1
  8741  08D6  0853               	movf	_Tx_Length^(0+128),w
  8742  08D7  0020               	movlb	0	; select bank0
  8743  08D8  00A4               	movwf	??_CC2500_TxData
  8744  08D9  0824               	movf	??_CC2500_TxData,w
  8745  08DA  0021               	movlb	1	; select bank1
  8746  08DB  00D0               	movwf	_SPI0Buffer^(0+128)
  8747                           
  8748                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8749  08DC  319D  2591  3188   	fcall	_CC2500_WriteByte
  8750                           
  8751                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8752  08DF  0020               	movlb	0	; select bank0
  8753  08E0  01A5               	clrf	CC2500_TxData@loop_e
  8754  08E1                     l8782:	
  8755  08E1  0021               	movlb	1	; select bank1
  8756  08E2  0853               	movf	_Tx_Length^(0+128),w
  8757  08E3  0020               	movlb	0	; select bank0
  8758  08E4  0225               	subwf	CC2500_TxData@loop_e,w
  8759  08E5  1803               	btfsc	3,0
  8760  08E6  28FA               	goto	l235
  8761                           
  8762                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8763  08E7  0825               	movf	CC2500_TxData@loop_e,w
  8764  08E8  3EA0               	addlw	_RF_Data& (0+255)
  8765  08E9  0086               	movwf	6
  8766  08EA  3001               	movlw	1	; select bank3/4
  8767  08EB  0087               	movwf	7
  8768  08EC  0801               	movf	1,w
  8769  08ED  00A4               	movwf	??_CC2500_TxData
  8770  08EE  0824               	movf	??_CC2500_TxData,w
  8771  08EF  0021               	movlb	1	; select bank1
  8772  08F0  00D0               	movwf	_SPI0Buffer^(0+128)
  8773                           
  8774                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8775  08F1  319D  2591  3188   	fcall	_CC2500_WriteByte
  8776  08F4  3001               	movlw	1
  8777  08F5  0020               	movlb	0	; select bank0
  8778  08F6  00A4               	movwf	??_CC2500_TxData
  8779  08F7  0824               	movf	??_CC2500_TxData,w
  8780  08F8  07A5               	addwf	CC2500_TxData@loop_e,f
  8781  08F9  28E1               	goto	l8782
  8782  08FA                     l235:	
  8783                           
  8784                           ;CC2500_B1.c: 51: }
  8785                           ;CC2500_B1.c: 52: RC0 = 1;
  8786  08FA  140E               	bsf	14,0	;volatile
  8787                           
  8788                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8789  08FB  3035               	movlw	53
  8790  08FC  319D  25DE  3188   	fcall	_CC2500_WriteCommand
  8791                           
  8792                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8793  08FF  2903               	goto	l8788
  8794  0900                     l8786:	
  8795                           
  8796                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8797  0900  319C  24C8  3188   	fcall	_RF_Timeout_Counter
  8798  0903                     l8788:	
  8799  0903  0020               	movlb	0	; select bank0
  8800  0904  188E               	btfsc	14,1	;volatile
  8801  0905  2909               	goto	l8792
  8802  0906  0021               	movlb	1	; select bank1
  8803  0907  1F21               	btfss	(_RF1^(0+128)+1),6
  8804  0908  2900               	goto	l8786
  8805  0909                     l8792:	
  8806                           
  8807                           ;CC2500_B1.c: 56: };
  8808                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8809  0909  3199  21EC  3188   	fcall	_setRF_TimeoutCleared
  8810                           
  8811                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8812  090C  2910               	goto	l8796
  8813  090D                     l8794:	
  8814                           
  8815                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8816  090D  319C  24C8  3188   	fcall	_RF_Timeout_Counter
  8817  0910                     l8796:	
  8818  0910  0020               	movlb	0	; select bank0
  8819  0911  1C8E               	btfss	14,1	;volatile
  8820  0912  2916               	goto	l8800
  8821  0913  0021               	movlb	1	; select bank1
  8822  0914  1F21               	btfss	(_RF1^(0+128)+1),6
  8823  0915  290D               	goto	l8794
  8824  0916                     l8800:	
  8825                           
  8826                           ;CC2500_B1.c: 61: };
  8827                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8828  0916  3199  21EC  3188   	fcall	_setRF_TimeoutCleared
  8829                           
  8830                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8831  0919  3036               	movlw	54
  8832  091A  319D  25DE  3188   	fcall	_CC2500_WriteCommand
  8833                           
  8834                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8835  091D  303B               	movlw	59
  8836  091E  319D  25DE         	fcall	_CC2500_WriteCommand
  8837                           
  8838                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8839  0920  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8840  0921  0008               	return
  8841  0922                     __end_of_CC2500_TxData:	
  8842                           
  8843                           	psect	text38
  8844  084B                     __ptext38:	
  8845 ;; *************** function _CC2500_RxData *****************
  8846 ;; Defined at:
  8847 ;;		line 73 in file "../src/CC2500_B1.c"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;		None
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8852 ;; Return value:  Size  Location     Type
  8853 ;;		None               void
  8854 ;; Registers used:
  8855 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8862 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8863 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8864 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;Total ram usage:        2 bytes
  8866 ;; Hardware stack levels used:    1
  8867 ;; Hardware stack levels required when called:    7
  8868 ;; This function calls:
  8869 ;;		_CC2500_ReadByte
  8870 ;;		_CC2500_ReadStatus
  8871 ;;		_CC2500_WriteByte
  8872 ;;		_CC2500_WriteCommand
  8873 ;;		_RF_Timeout_Counter
  8874 ;;		_setRF_TimeoutCleared
  8875 ;; This function is called by:
  8876 ;;		_setRF_Main
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           
  8881                           ;psect for function _CC2500_RxData
  8882  084B                     _CC2500_RxData:	
  8883                           
  8884                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8885                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8886                           
  8887                           ;incstack = 0
  8888                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8889  084B  0020               	movlb	0	; select bank0
  8890  084C  188E               	btfsc	14,1	;volatile
  8891  084D  0008               	return
  8892                           
  8893                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8894  084E  303B               	movlw	59
  8895  084F  319F  278D  3188   	fcall	_CC2500_ReadStatus
  8896                           
  8897                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8898  0852  0021               	movlb	1	; select bank1
  8899  0853  0856               	movf	_s_data^(0+128),w
  8900  0854  1903               	btfsc	3,2
  8901  0855  0008               	return
  8902                           
  8903                           ;CC2500_B1.c: 90: RC0 = 0;
  8904  0856  0020               	movlb	0	; select bank0
  8905  0857  100E               	bcf	14,0	;volatile
  8906                           
  8907                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8908  0858  30FF               	movlw	255
  8909  0859  00A4               	movwf	??_CC2500_RxData
  8910  085A  0824               	movf	??_CC2500_RxData,w
  8911  085B  0021               	movlb	1	; select bank1
  8912  085C  00D0               	movwf	_SPI0Buffer^(0+128)
  8913                           
  8914                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8915  085D  2861               	goto	l8820
  8916  085E                     l8818:	
  8917                           
  8918                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8919  085E  319C  24C8  3188   	fcall	_RF_Timeout_Counter
  8920  0861                     l8820:	
  8921  0861  0020               	movlb	0	; select bank0
  8922  0862  1E8E               	btfss	14,5	;volatile
  8923  0863  2867               	goto	l8824
  8924  0864  0021               	movlb	1	; select bank1
  8925  0865  1F21               	btfss	(_RF1^(0+128)+1),6
  8926  0866  285E               	goto	l8818
  8927  0867                     l8824:	
  8928                           
  8929                           ;CC2500_B1.c: 95: };
  8930                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8931  0867  3199  21EC  3188   	fcall	_setRF_TimeoutCleared
  8932                           
  8933                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8934  086A  319D  2591  3188   	fcall	_CC2500_WriteByte
  8935                           
  8936                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8937  086D  319E  264A  3188   	fcall	_CC2500_ReadByte
  8938                           
  8939                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8940  0870  0021               	movlb	1	; select bank1
  8941  0871  0850               	movf	_SPI0Buffer^(0+128),w
  8942  0872  0020               	movlb	0	; select bank0
  8943  0873  00A4               	movwf	??_CC2500_RxData
  8944  0874  0824               	movf	??_CC2500_RxData,w
  8945  0875  0021               	movlb	1	; select bank1
  8946  0876  00CF               	movwf	_Rx_Length^(0+128)
  8947                           
  8948                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8949  0877  0020               	movlb	0	; select bank0
  8950  0878  01A5               	clrf	CC2500_RxData@loop_f
  8951  0879                     l8840:	
  8952  0879  0021               	movlb	1	; select bank1
  8953  087A  084F               	movf	_Rx_Length^(0+128),w
  8954  087B  0020               	movlb	0	; select bank0
  8955  087C  0225               	subwf	CC2500_RxData@loop_f,w
  8956  087D  1803               	btfsc	3,0
  8957  087E  2892               	goto	l8842
  8958                           
  8959                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8960  087F  319E  264A  3188   	fcall	_CC2500_ReadByte
  8961                           
  8962                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8963  0882  0021               	movlb	1	; select bank1
  8964  0883  0850               	movf	_SPI0Buffer^(0+128),w
  8965  0884  0020               	movlb	0	; select bank0
  8966  0885  00A4               	movwf	??_CC2500_RxData
  8967  0886  0825               	movf	CC2500_RxData@loop_f,w
  8968  0887  3EA0               	addlw	_RF_Data& (0+255)
  8969  0888  0086               	movwf	6
  8970  0889  3001               	movlw	1	; select bank3/4
  8971  088A  0087               	movwf	7
  8972  088B  0824               	movf	??_CC2500_RxData,w
  8973  088C  0081               	movwf	1
  8974  088D  3001               	movlw	1
  8975  088E  00A4               	movwf	??_CC2500_RxData
  8976  088F  0824               	movf	??_CC2500_RxData,w
  8977  0890  07A5               	addwf	CC2500_RxData@loop_f,f
  8978  0891  2879               	goto	l8840
  8979  0892                     l8842:	
  8980                           
  8981                           ;CC2500_B1.c: 104: }
  8982                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8983  0892  319E  264A  3188   	fcall	_CC2500_ReadByte
  8984                           
  8985                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8986  0895  0021               	movlb	1	; select bank1
  8987  0896  0850               	movf	_SPI0Buffer^(0+128),w
  8988  0897  0020               	movlb	0	; select bank0
  8989  0898  00A4               	movwf	??_CC2500_RxData
  8990  0899  0824               	movf	??_CC2500_RxData,w
  8991  089A  0021               	movlb	1	; select bank1
  8992  089B  00CE               	movwf	_RSSI^(0+128)
  8993                           
  8994                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8995  089C  319E  264A  3188   	fcall	_CC2500_ReadByte
  8996                           
  8997                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8998  089F  0021               	movlb	1	; select bank1
  8999  08A0  0850               	movf	_SPI0Buffer^(0+128),w
  9000  08A1  0020               	movlb	0	; select bank0
  9001  08A2  00A4               	movwf	??_CC2500_RxData
  9002  08A3  0824               	movf	??_CC2500_RxData,w
  9003  08A4  0021               	movlb	1	; select bank1
  9004  08A5  00C8               	movwf	_CRC^(0+128)
  9005                           
  9006                           ;CC2500_B1.c: 109: RC0 = 1;
  9007  08A6  0020               	movlb	0	; select bank0
  9008  08A7  140E               	bsf	14,0	;volatile
  9009                           
  9010                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9011  08A8  0021               	movlb	1	; select bank1
  9012  08A9  1BC8               	btfsc	_CRC^(0+128),7
  9013                           
  9014                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9015  08AA  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  9016                           
  9017                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9018  08AB  11A0               	bcf	_RF1^(0+128),3
  9019                           
  9020                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9021  08AC  14A0               	bsf	_RF1^(0+128),1
  9022                           
  9023                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9024  08AD  3036               	movlw	54
  9025  08AE  319D  25DE  3188   	fcall	_CC2500_WriteCommand
  9026                           
  9027                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9028  08B1  303A               	movlw	58
  9029  08B2  319D  25DE         	fcall	_CC2500_WriteCommand
  9030  08B4  0021               	movlb	1	; select bank1
  9031  08B5  0008               	return
  9032  08B6                     __end_of_CC2500_RxData:	
  9033                           
  9034                           	psect	text39
  9035  1F8D                     __ptext39:	
  9036 ;; *************** function _CC2500_ReadStatus *****************
  9037 ;; Defined at:
  9038 ;;		line 308 in file "../src/CC2500_B1.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  status_addr     1    wreg     unsigned char 
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9043 ;; Return value:  Size  Location     Type
  9044 ;;		None               void
  9045 ;; Registers used:
  9046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;Total ram usage:        2 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    6
  9059 ;; This function calls:
  9060 ;;		_CC2500_ReadByte
  9061 ;;		_CC2500_WriteByte
  9062 ;;		_RF_Timeout_Counter
  9063 ;;		_setRF_TimeoutCleared
  9064 ;; This function is called by:
  9065 ;;		_CC2500_RxData
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function _CC2500_ReadStatus
  9071  1F8D                     _CC2500_ReadStatus:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9075                           ;CC2500_ReadStatus@status_addr stored from wreg
  9076  1F8D  0020               	movlb	0	; select bank0
  9077  1F8E  00A3               	movwf	CC2500_ReadStatus@status_addr
  9078                           
  9079                           ;CC2500_B1.c: 309: RC0 = 0;
  9080  1F8F  100E               	bcf	14,0	;volatile
  9081                           
  9082                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9083  1F90  0823               	movf	CC2500_ReadStatus@status_addr,w
  9084  1F91  3EC0               	addlw	192
  9085  1F92  00A2               	movwf	??_CC2500_ReadStatus
  9086  1F93  0822               	movf	??_CC2500_ReadStatus,w
  9087  1F94  0021               	movlb	1	; select bank1
  9088  1F95  00D0               	movwf	_SPI0Buffer^(0+128)
  9089                           
  9090                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  9091  1F96  2F9A               	goto	l8670
  9092  1F97                     l8668:	
  9093                           
  9094                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9095  1F97  319C  24C8  319F   	fcall	_RF_Timeout_Counter
  9096  1F9A                     l8670:	
  9097  1F9A  0020               	movlb	0	; select bank0
  9098  1F9B  1E8E               	btfss	14,5	;volatile
  9099  1F9C  2FA0               	goto	l8674
  9100  1F9D  0021               	movlb	1	; select bank1
  9101  1F9E  1F21               	btfss	(_RF1^(0+128)+1),6
  9102  1F9F  2F97               	goto	l8668
  9103  1FA0                     l8674:	
  9104                           
  9105                           ;CC2500_B1.c: 314: };
  9106                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9107  1FA0  3199  21EC  319F   	fcall	_setRF_TimeoutCleared
  9108                           
  9109                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9110  1FA3  319D  2591  319F   	fcall	_CC2500_WriteByte
  9111                           
  9112                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9113  1FA6  319E  264A         	fcall	_CC2500_ReadByte
  9114                           
  9115                           ;CC2500_B1.c: 319: RC0 = 1;
  9116  1FA8  0020               	movlb	0	; select bank0
  9117  1FA9  140E               	bsf	14,0	;volatile
  9118                           
  9119                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9120  1FAA  0021               	movlb	1	; select bank1
  9121  1FAB  0850               	movf	_SPI0Buffer^(0+128),w
  9122  1FAC  0020               	movlb	0	; select bank0
  9123  1FAD  00A2               	movwf	??_CC2500_ReadStatus
  9124  1FAE  0822               	movf	??_CC2500_ReadStatus,w
  9125  1FAF  0021               	movlb	1	; select bank1
  9126  1FB0  00D6               	movwf	_s_data^(0+128)
  9127  1FB1  0008               	return
  9128  1FB2                     __end_of_CC2500_ReadStatus:	
  9129                           
  9130                           	psect	text40
  9131  1E4A                     __ptext40:	
  9132 ;; *************** function _CC2500_ReadByte *****************
  9133 ;; Defined at:
  9134 ;;		line 242 in file "../src/CC2500_B1.c"
  9135 ;; Parameters:    Size  Location     Type
  9136 ;;		None
  9137 ;; Auto vars:     Size  Location     Type
  9138 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9139 ;; Return value:  Size  Location     Type
  9140 ;;		None               void
  9141 ;; Registers used:
  9142 ;;		wreg, status,2, status,0
  9143 ;; Tracked objects:
  9144 ;;		On entry : 0/0
  9145 ;;		On exit  : 0/0
  9146 ;;		Unchanged: 0/0
  9147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9149 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;Total ram usage:        2 bytes
  9153 ;; Hardware stack levels used:    1
  9154 ;; Hardware stack levels required when called:    5
  9155 ;; This function calls:
  9156 ;;		Nothing
  9157 ;; This function is called by:
  9158 ;;		_CC2500_RxData
  9159 ;;		_CC2500_ReadStatus
  9160 ;;		_CC2500_ReadREG
  9161 ;; This function uses a non-reentrant model
  9162 ;;
  9163                           
  9164                           
  9165                           ;psect for function _CC2500_ReadByte
  9166  1E4A                     _CC2500_ReadByte:	
  9167                           
  9168                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9169                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9170                           
  9171                           ;incstack = 0
  9172                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9173  1E4A  0020               	movlb	0	; select bank0
  9174  1E4B  01A1               	clrf	CC2500_ReadByte@loop_b
  9175  1E4C                     L3:	
  9176  1E4C  3008               	movlw	8
  9177  1E4D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9178  1E4E  1803               	btfsc	3,0
  9179  1E4F  0008               	return
  9180                           
  9181                           ;CC2500_B1.c: 245: RC3 = 1;
  9182  1E50  158E               	bsf	14,3	;volatile
  9183                           
  9184                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9185  1E51  1003               	clrc
  9186  1E52  0021               	movlb	1	; select bank1
  9187  1E53  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9188                           
  9189                           ;CC2500_B1.c: 247: if (RC5 == 1)
  9190  1E54  0020               	movlb	0	; select bank0
  9191  1E55  1E8E               	btfss	14,5	;volatile
  9192  1E56  2E5A               	goto	l8640
  9193                           
  9194                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9195  1E57  0021               	movlb	1	; select bank1
  9196  1E58  1450               	bsf	_SPI0Buffer^(0+128),0
  9197  1E59  2E60               	goto	l8642
  9198  1E5A                     l8640:	
  9199                           
  9200                           ;CC2500_B1.c: 249: else
  9201                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9202  1E5A  30FE               	movlw	254
  9203  1E5B  0020               	movlb	0	; select bank0
  9204  1E5C  00A0               	movwf	??_CC2500_ReadByte
  9205  1E5D  0820               	movf	??_CC2500_ReadByte,w
  9206  1E5E  0021               	movlb	1	; select bank1
  9207  1E5F  05D0               	andwf	_SPI0Buffer^(0+128),f
  9208  1E60                     l8642:	
  9209                           
  9210                           ;CC2500_B1.c: 251: RC3 = 0;
  9211  1E60  0020               	movlb	0	; select bank0
  9212  1E61  118E               	bcf	14,3	;volatile
  9213  1E62  3001               	movlw	1
  9214  1E63  00A0               	movwf	??_CC2500_ReadByte
  9215  1E64  0820               	movf	??_CC2500_ReadByte,w
  9216  1E65  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9217  1E66  2E4C               	goto	L3
  9218  1E67                     __end_of_CC2500_ReadByte:	
  9219                           
  9220                           	psect	text41
  9221  1CDD                     __ptext41:	
  9222 ;; *************** function _CC2500_PowerOnInitial *****************
  9223 ;; Defined at:
  9224 ;;		line 126 in file "../src/CC2500_B1.c"
  9225 ;; Parameters:    Size  Location     Type
  9226 ;;		None
  9227 ;; Auto vars:     Size  Location     Type
  9228 ;;		None
  9229 ;; Return value:  Size  Location     Type
  9230 ;;		None               void
  9231 ;; Registers used:
  9232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9233 ;; Tracked objects:
  9234 ;;		On entry : 0/0
  9235 ;;		On exit  : 0/0
  9236 ;;		Unchanged: 0/0
  9237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9242 ;;Total ram usage:        0 bytes
  9243 ;; Hardware stack levels used:    1
  9244 ;; Hardware stack levels required when called:    8
  9245 ;; This function calls:
  9246 ;;		_CC2500_ClearRXFIFO
  9247 ;;		_CC2500_ClearTXFIFO
  9248 ;;		_CC2500_FrequencyCabr
  9249 ;;		_CC2500_InitPATable
  9250 ;;		_CC2500_InitSetREG
  9251 ;;		_CC2500_PowerRST
  9252 ;;		_CC2500_SIDLEMode
  9253 ;; This function is called by:
  9254 ;;		_main
  9255 ;;		_setRF_Main
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           
  9260                           ;psect for function _CC2500_PowerOnInitial
  9261  1CDD                     _CC2500_PowerOnInitial:	
  9262                           
  9263                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9267  1CDD  3192  22AF  319C   	fcall	_CC2500_PowerRST
  9268                           
  9269                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9270  1CE0  3190  201E  319C   	fcall	_CC2500_InitSetREG
  9271                           
  9272                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9273  1CE3  319E  2686  319C   	fcall	_CC2500_InitPATable
  9274                           
  9275                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9276  1CE6  3199  21F4  319C   	fcall	_CC2500_ClearTXFIFO
  9277                           
  9278                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9279  1CE9  3199  21F0  319C   	fcall	_CC2500_ClearRXFIFO
  9280                           
  9281                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9282  1CEC  319B  2313  319C   	fcall	_CC2500_FrequencyCabr
  9283                           
  9284                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9285  1CEF  3199  21F8         	fcall	_CC2500_SIDLEMode
  9286  1CF1  0008               	return
  9287  1CF2                     __end_of_CC2500_PowerOnInitial:	
  9288                           
  9289                           	psect	text42
  9290  19F8                     __ptext42:	
  9291 ;; *************** function _CC2500_SIDLEMode *****************
  9292 ;; Defined at:
  9293 ;;		line 216 in file "../src/CC2500_B1.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;		None               void
  9300 ;; Registers used:
  9301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    7
  9314 ;; This function calls:
  9315 ;;		_CC2500_WriteCommand
  9316 ;; This function is called by:
  9317 ;;		_CC2500_PowerOnInitial
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           
  9322                           ;psect for function _CC2500_SIDLEMode
  9323  19F8                     _CC2500_SIDLEMode:	
  9324                           
  9325                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9326                           
  9327                           ;incstack = 0
  9328                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9329  19F8  3036               	movlw	54
  9330  19F9  319D  25DE         	fcall	_CC2500_WriteCommand
  9331  19FB  0008               	return
  9332  19FC                     __end_of_CC2500_SIDLEMode:	
  9333                           
  9334                           	psect	text43
  9335  12AF                     __ptext43:	
  9336 ;; *************** function _CC2500_PowerRST *****************
  9337 ;; Defined at:
  9338 ;;		line 139 in file "../src/CC2500_B1.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;		None
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;		None
  9343 ;; Return value:  Size  Location     Type
  9344 ;;		None               void
  9345 ;; Registers used:
  9346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;Total ram usage:        1 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    6
  9359 ;; This function calls:
  9360 ;;		_CC2500_WriteByte
  9361 ;;		_DelayTime_1us
  9362 ;;		_RF_Timeout_Counter
  9363 ;;		_setRF_TimeoutCleared
  9364 ;; This function is called by:
  9365 ;;		_CC2500_PowerOnInitial
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _CC2500_PowerRST
  9371  12AF                     _CC2500_PowerRST:	
  9372                           
  9373                           ;CC2500_B1.c: 140: RC3 = 0;
  9374                           
  9375                           ;incstack = 0
  9376                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9377  12AF  0020               	movlb	0	; select bank0
  9378  12B0  118E               	bcf	14,3	;volatile
  9379                           
  9380                           ;CC2500_B1.c: 141: RC4 = 0;
  9381  12B1  120E               	bcf	14,4	;volatile
  9382                           
  9383                           ;CC2500_B1.c: 142: RC0 = 1;
  9384  12B2  140E               	bsf	14,0	;volatile
  9385                           
  9386                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9387  12B3  300A               	movlw	10
  9388  12B4  00A0               	movwf	DelayTime_1us@count
  9389  12B5  3000               	movlw	0
  9390  12B6  00A1               	movwf	DelayTime_1us@count+1
  9391  12B7  319F  27B2  3192   	fcall	_DelayTime_1us
  9392                           
  9393                           ;CC2500_B1.c: 144: RC0 = 0;
  9394  12BA  0020               	movlb	0	; select bank0
  9395  12BB  100E               	bcf	14,0	;volatile
  9396                           
  9397                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9398  12BC  300A               	movlw	10
  9399  12BD  00A0               	movwf	DelayTime_1us@count
  9400  12BE  3000               	movlw	0
  9401  12BF  00A1               	movwf	DelayTime_1us@count+1
  9402  12C0  319F  27B2  3192   	fcall	_DelayTime_1us
  9403                           
  9404                           ;CC2500_B1.c: 146: RC0 = 1;
  9405  12C3  0020               	movlb	0	; select bank0
  9406  12C4  140E               	bsf	14,0	;volatile
  9407                           
  9408                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9409  12C5  3028               	movlw	40
  9410  12C6  00A0               	movwf	DelayTime_1us@count
  9411  12C7  3000               	movlw	0
  9412  12C8  00A1               	movwf	DelayTime_1us@count+1
  9413  12C9  319F  27B2  3192   	fcall	_DelayTime_1us
  9414                           
  9415                           ;CC2500_B1.c: 148: RC0 = 0;
  9416  12CC  0020               	movlb	0	; select bank0
  9417  12CD  100E               	bcf	14,0	;volatile
  9418                           
  9419                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9420  12CE  3030               	movlw	48
  9421  12CF  00A6               	movwf	??_CC2500_PowerRST
  9422  12D0  0826               	movf	??_CC2500_PowerRST,w
  9423  12D1  0021               	movlb	1	; select bank1
  9424  12D2  00D0               	movwf	_SPI0Buffer^(0+128)
  9425                           
  9426                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9427  12D3  2AD7               	goto	l8698
  9428  12D4                     l8696:	
  9429                           
  9430                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9431  12D4  319C  24C8  3192   	fcall	_RF_Timeout_Counter
  9432  12D7                     l8698:	
  9433  12D7  0020               	movlb	0	; select bank0
  9434  12D8  1E8E               	btfss	14,5	;volatile
  9435  12D9  2ADD               	goto	l8702
  9436  12DA  0021               	movlb	1	; select bank1
  9437  12DB  1F21               	btfss	(_RF1^(0+128)+1),6
  9438  12DC  2AD4               	goto	l8696
  9439  12DD                     l8702:	
  9440                           
  9441                           ;CC2500_B1.c: 152: };
  9442                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9443  12DD  3199  21EC  3192   	fcall	_setRF_TimeoutCleared
  9444                           
  9445                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9446  12E0  319D  2591  3192   	fcall	_CC2500_WriteByte
  9447                           
  9448                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9449  12E3  2AE7               	goto	l8708
  9450  12E4                     l8706:	
  9451                           
  9452                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9453  12E4  319C  24C8  3192   	fcall	_RF_Timeout_Counter
  9454  12E7                     l8708:	
  9455  12E7  0020               	movlb	0	; select bank0
  9456  12E8  1E8E               	btfss	14,5	;volatile
  9457  12E9  2AED               	goto	l8712
  9458  12EA  0021               	movlb	1	; select bank1
  9459  12EB  1F21               	btfss	(_RF1^(0+128)+1),6
  9460  12EC  2AE4               	goto	l8706
  9461  12ED                     l8712:	
  9462                           
  9463                           ;CC2500_B1.c: 157: };
  9464                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9465  12ED  3199  21EC         	fcall	_setRF_TimeoutCleared
  9466                           
  9467                           ;CC2500_B1.c: 159: RC4 = 0;
  9468  12EF  0020               	movlb	0	; select bank0
  9469  12F0  120E               	bcf	14,4	;volatile
  9470                           
  9471                           ;CC2500_B1.c: 160: RC0 = 1;
  9472  12F1  140E               	bsf	14,0	;volatile
  9473  12F2  0008               	return
  9474  12F3                     __end_of_CC2500_PowerRST:	
  9475                           
  9476                           	psect	text44
  9477  101E                     __ptext44:	
  9478 ;; *************** function _CC2500_InitSetREG *****************
  9479 ;; Defined at:
  9480 ;;		line 166 in file "../src/CC2500_B1.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9485 ;;  temp2           1    7[BANK0 ] unsigned char 
  9486 ;;  temp1           1    6[BANK0 ] unsigned char 
  9487 ;; Return value:  Size  Location     Type
  9488 ;;		None               void
  9489 ;; Registers used:
  9490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9491 ;; Tracked objects:
  9492 ;;		On entry : 0/0
  9493 ;;		On exit  : 0/0
  9494 ;;		Unchanged: 0/0
  9495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9500 ;;Total ram usage:        4 bytes
  9501 ;; Hardware stack levels used:    1
  9502 ;; Hardware stack levels required when called:    7
  9503 ;; This function calls:
  9504 ;;		_CC2500_WriteREG
  9505 ;; This function is called by:
  9506 ;;		_CC2500_PowerOnInitial
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           
  9511                           ;psect for function _CC2500_InitSetREG
  9512  101E                     _CC2500_InitSetREG:	
  9513                           
  9514                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9515                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9516                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9517                           
  9518                           ;incstack = 0
  9519                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9520  101E  0020               	movlb	0	; select bank0
  9521  101F  01A8               	clrf	CC2500_InitSetREG@loop_c
  9522  1020                     L4:	
  9523  1020  302F               	movlw	47
  9524  1021  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9525  1022  1803               	btfsc	3,0
  9526  1023  0008               	return
  9527                           
  9528                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9529  1024  0828               	movf	CC2500_InitSetREG@loop_c,w
  9530  1025  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9531  1026  0084               	movwf	4
  9532  1027  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9533  1028  1803               	skipnc
  9534  1029  3E01               	addlw	1
  9535  102A  0085               	movwf	5
  9536  102B  0800               	movf	0,w	;code access
  9537  102C  00A5               	movwf	??_CC2500_InitSetREG
  9538  102D  0825               	movf	??_CC2500_InitSetREG,w
  9539  102E  00A6               	movwf	CC2500_InitSetREG@temp1
  9540                           
  9541                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9542  102F  0828               	movf	CC2500_InitSetREG@loop_c,w
  9543  1030  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9544  1031  0084               	movwf	4
  9545  1032  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9546  1033  1803               	skipnc
  9547  1034  3E01               	addlw	1
  9548  1035  0085               	movwf	5
  9549  1036  0800               	movf	0,w	;code access
  9550  1037  00A5               	movwf	??_CC2500_InitSetREG
  9551  1038  0825               	movf	??_CC2500_InitSetREG,w
  9552  1039  00A7               	movwf	CC2500_InitSetREG@temp2
  9553                           
  9554                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9555  103A  0827               	movf	CC2500_InitSetREG@temp2,w
  9556  103B  00A5               	movwf	??_CC2500_InitSetREG
  9557  103C  0825               	movf	??_CC2500_InitSetREG,w
  9558  103D  00A2               	movwf	CC2500_WriteREG@value
  9559  103E  0826               	movf	CC2500_InitSetREG@temp1,w
  9560  103F  319F  276A  3190   	fcall	_CC2500_WriteREG
  9561  1042  3001               	movlw	1
  9562  1043  0020               	movlb	0	; select bank0
  9563  1044  00A5               	movwf	??_CC2500_InitSetREG
  9564  1045  0825               	movf	??_CC2500_InitSetREG,w
  9565  1046  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9566  1047  2820               	goto	L4
  9567  1048                     __end_of_CC2500_InitSetREG:	
  9568                           
  9569                           	psect	text45
  9570  1E86                     __ptext45:	
  9571 ;; *************** function _CC2500_InitPATable *****************
  9572 ;; Defined at:
  9573 ;;		line 181 in file "../src/CC2500_B1.c"
  9574 ;; Parameters:    Size  Location     Type
  9575 ;;		None
  9576 ;; Auto vars:     Size  Location     Type
  9577 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9578 ;;  temp            1    6[BANK0 ] unsigned char 
  9579 ;; Return value:  Size  Location     Type
  9580 ;;		None               void
  9581 ;; Registers used:
  9582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9583 ;; Tracked objects:
  9584 ;;		On entry : 0/0
  9585 ;;		On exit  : 0/0
  9586 ;;		Unchanged: 0/0
  9587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;Total ram usage:        3 bytes
  9593 ;; Hardware stack levels used:    1
  9594 ;; Hardware stack levels required when called:    7
  9595 ;; This function calls:
  9596 ;;		_CC2500_WriteREG
  9597 ;; This function is called by:
  9598 ;;		_CC2500_PowerOnInitial
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           
  9603                           ;psect for function _CC2500_InitPATable
  9604  1E86                     _CC2500_InitPATable:	
  9605                           
  9606                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9607                           ;CC2500_B1.c: 183: unsigned char temp;
  9608                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9609                           
  9610                           ;incstack = 0
  9611                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9612  1E86  0020               	movlb	0	; select bank0
  9613  1E87  01A7               	clrf	CC2500_InitPATable@loop_d
  9614  1E88                     L5:	
  9615  1E88  3008               	movlw	8
  9616  1E89  0227               	subwf	CC2500_InitPATable@loop_d,w
  9617  1E8A  1803               	btfsc	3,0
  9618  1E8B  0008               	return
  9619                           
  9620                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9621  1E8C  0827               	movf	CC2500_InitPATable@loop_d,w
  9622  1E8D  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9623  1E8E  0084               	movwf	4
  9624  1E8F  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9625  1E90  1803               	skipnc
  9626  1E91  3E01               	addlw	1
  9627  1E92  0085               	movwf	5
  9628  1E93  0800               	movf	0,w	;code access
  9629  1E94  00A5               	movwf	??_CC2500_InitPATable
  9630  1E95  0825               	movf	??_CC2500_InitPATable,w
  9631  1E96  00A6               	movwf	CC2500_InitPATable@temp
  9632                           
  9633                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9634  1E97  0826               	movf	CC2500_InitPATable@temp,w
  9635  1E98  00A5               	movwf	??_CC2500_InitPATable
  9636  1E99  0825               	movf	??_CC2500_InitPATable,w
  9637  1E9A  00A2               	movwf	CC2500_WriteREG@value
  9638  1E9B  303E               	movlw	62
  9639  1E9C  319F  276A  319E   	fcall	_CC2500_WriteREG
  9640  1E9F  3001               	movlw	1
  9641  1EA0  0020               	movlb	0	; select bank0
  9642  1EA1  00A5               	movwf	??_CC2500_InitPATable
  9643  1EA2  0825               	movf	??_CC2500_InitPATable,w
  9644  1EA3  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9645  1EA4  2E88               	goto	L5
  9646  1EA5                     __end_of_CC2500_InitPATable:	
  9647                           
  9648                           	psect	text46
  9649  1F6A                     __ptext46:	
  9650 ;; *************** function _CC2500_WriteREG *****************
  9651 ;; Defined at:
  9652 ;;		line 258 in file "../src/CC2500_B1.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  w_addr          1    wreg     unsigned char 
  9655 ;;  value           1    2[BANK0 ] unsigned char 
  9656 ;; Auto vars:     Size  Location     Type
  9657 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9658 ;; Return value:  Size  Location     Type
  9659 ;;		None               void
  9660 ;; Registers used:
  9661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9662 ;; Tracked objects:
  9663 ;;		On entry : 0/0
  9664 ;;		On exit  : 0/0
  9665 ;;		Unchanged: 0/0
  9666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9667 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9669 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9670 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;Total ram usage:        3 bytes
  9672 ;; Hardware stack levels used:    1
  9673 ;; Hardware stack levels required when called:    6
  9674 ;; This function calls:
  9675 ;;		_CC2500_WriteByte
  9676 ;;		_RF_Timeout_Counter
  9677 ;;		_setRF_TimeoutCleared
  9678 ;; This function is called by:
  9679 ;;		_CC2500_InitSetREG
  9680 ;;		_CC2500_InitPATable
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           
  9685                           ;psect for function _CC2500_WriteREG
  9686  1F6A                     _CC2500_WriteREG:	
  9687                           
  9688                           ;incstack = 0
  9689                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9690                           ;CC2500_WriteREG@w_addr stored from wreg
  9691  1F6A  0020               	movlb	0	; select bank0
  9692  1F6B  00A4               	movwf	CC2500_WriteREG@w_addr
  9693                           
  9694                           ;CC2500_B1.c: 259: RC0 = 0;
  9695  1F6C  100E               	bcf	14,0	;volatile
  9696                           
  9697                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9698  1F6D  0824               	movf	CC2500_WriteREG@w_addr,w
  9699  1F6E  00A3               	movwf	??_CC2500_WriteREG
  9700  1F6F  0823               	movf	??_CC2500_WriteREG,w
  9701  1F70  0021               	movlb	1	; select bank1
  9702  1F71  00D0               	movwf	_SPI0Buffer^(0+128)
  9703                           
  9704                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9705  1F72  2F76               	goto	l8652
  9706  1F73                     l8650:	
  9707                           
  9708                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9709  1F73  319C  24C8  319F   	fcall	_RF_Timeout_Counter
  9710  1F76                     l8652:	
  9711  1F76  0020               	movlb	0	; select bank0
  9712  1F77  1E8E               	btfss	14,5	;volatile
  9713  1F78  2F7C               	goto	l8656
  9714  1F79  0021               	movlb	1	; select bank1
  9715  1F7A  1F21               	btfss	(_RF1^(0+128)+1),6
  9716  1F7B  2F73               	goto	l8650
  9717  1F7C                     l8656:	
  9718                           
  9719                           ;CC2500_B1.c: 263: };
  9720                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9721  1F7C  3199  21EC  319F   	fcall	_setRF_TimeoutCleared
  9722                           
  9723                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9724  1F7F  319D  2591  319F   	fcall	_CC2500_WriteByte
  9725                           
  9726                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9727  1F82  0020               	movlb	0	; select bank0
  9728  1F83  0822               	movf	CC2500_WriteREG@value,w
  9729  1F84  00A3               	movwf	??_CC2500_WriteREG
  9730  1F85  0823               	movf	??_CC2500_WriteREG,w
  9731  1F86  0021               	movlb	1	; select bank1
  9732  1F87  00D0               	movwf	_SPI0Buffer^(0+128)
  9733                           
  9734                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9735  1F88  319D  2591         	fcall	_CC2500_WriteByte
  9736                           
  9737                           ;CC2500_B1.c: 269: RC0 = 1;
  9738  1F8A  0020               	movlb	0	; select bank0
  9739  1F8B  140E               	bsf	14,0	;volatile
  9740  1F8C  0008               	return
  9741  1F8D                     __end_of_CC2500_WriteREG:	
  9742                           
  9743                           	psect	text47
  9744  1B13                     __ptext47:	
  9745 ;; *************** function _CC2500_FrequencyCabr *****************
  9746 ;; Defined at:
  9747 ;;		line 208 in file "../src/CC2500_B1.c"
  9748 ;; Parameters:    Size  Location     Type
  9749 ;;		None
  9750 ;; Auto vars:     Size  Location     Type
  9751 ;;		None
  9752 ;; Return value:  Size  Location     Type
  9753 ;;		None               void
  9754 ;; Registers used:
  9755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9756 ;; Tracked objects:
  9757 ;;		On entry : 0/0
  9758 ;;		On exit  : 0/0
  9759 ;;		Unchanged: 0/0
  9760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;Total ram usage:        0 bytes
  9766 ;; Hardware stack levels used:    1
  9767 ;; Hardware stack levels required when called:    7
  9768 ;; This function calls:
  9769 ;;		_CC2500_WriteCommand
  9770 ;;		_DelayTime_1us
  9771 ;; This function is called by:
  9772 ;;		_CC2500_PowerOnInitial
  9773 ;; This function uses a non-reentrant model
  9774 ;;
  9775                           
  9776                           
  9777                           ;psect for function _CC2500_FrequencyCabr
  9778  1B13                     _CC2500_FrequencyCabr:	
  9779                           
  9780                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9781                           
  9782                           ;incstack = 0
  9783                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9784  1B13  3033               	movlw	51
  9785  1B14  319D  25DE  319B   	fcall	_CC2500_WriteCommand
  9786                           
  9787                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9788  1B17  30E8               	movlw	232
  9789  1B18  0020               	movlb	0	; select bank0
  9790  1B19  00A0               	movwf	DelayTime_1us@count
  9791  1B1A  3003               	movlw	3
  9792  1B1B  00A1               	movwf	DelayTime_1us@count+1
  9793  1B1C  319F  27B2         	fcall	_DelayTime_1us
  9794  1B1E  0008               	return
  9795  1B1F                     __end_of_CC2500_FrequencyCabr:	
  9796                           
  9797                           	psect	text48
  9798  1FB2                     __ptext48:	
  9799 ;; *************** function _DelayTime_1us *****************
  9800 ;; Defined at:
  9801 ;;		line 327 in file "../src/CC2500_B1.c"
  9802 ;; Parameters:    Size  Location     Type
  9803 ;;  count           2    0[BANK0 ] int 
  9804 ;; Auto vars:     Size  Location     Type
  9805 ;;  j               2    4[BANK0 ] unsigned int 
  9806 ;;  i               2    2[BANK0 ] unsigned int 
  9807 ;; Return value:  Size  Location     Type
  9808 ;;		None               void
  9809 ;; Registers used:
  9810 ;;		wreg, status,2
  9811 ;; Tracked objects:
  9812 ;;		On entry : 0/0
  9813 ;;		On exit  : 0/0
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9816 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;Total ram usage:        6 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; Hardware stack levels required when called:    5
  9823 ;; This function calls:
  9824 ;;		Nothing
  9825 ;; This function is called by:
  9826 ;;		_CC2500_PowerRST
  9827 ;;		_CC2500_FrequencyCabr
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           
  9832                           ;psect for function _DelayTime_1us
  9833  1FB2                     _DelayTime_1us:	
  9834                           
  9835                           ;CC2500_B1.c: 328: unsigned int i, j;
  9836                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9837                           
  9838                           ;incstack = 0
  9839                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9840  1FB2  3001               	movlw	1
  9841  1FB3  0020               	movlb	0	; select bank0
  9842  1FB4  00A2               	movwf	DelayTime_1us@i
  9843  1FB5  3000               	movlw	0
  9844  1FB6  00A3               	movwf	DelayTime_1us@i+1
  9845  1FB7                     l347:	
  9846  1FB7  0821               	movf	DelayTime_1us@count+1,w
  9847  1FB8  0223               	subwf	DelayTime_1us@i+1,w
  9848  1FB9  1D03               	skipz
  9849  1FBA  2FBD               	goto	u5575
  9850  1FBB  0820               	movf	DelayTime_1us@count,w
  9851  1FBC  0222               	subwf	DelayTime_1us@i,w
  9852  1FBD                     u5575:	
  9853  1FBD  1803               	btfsc	3,0
  9854  1FBE  0008               	return
  9855                           
  9856                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9857  1FBF  01A4               	clrf	DelayTime_1us@j
  9858  1FC0  01A5               	clrf	DelayTime_1us@j+1
  9859  1FC1  3000               	movlw	0
  9860  1FC2  0225               	subwf	DelayTime_1us@j+1,w
  9861  1FC3  3002               	movlw	2
  9862  1FC4  1903               	skipnz
  9863  1FC5  0224               	subwf	DelayTime_1us@j,w
  9864  1FC6  1803               	btfsc	3,0
  9865  1FC7  2FD3               	goto	l6450
  9866  1FC8                     l6448:	
  9867  1FC8  3001               	movlw	1
  9868  1FC9  07A4               	addwf	DelayTime_1us@j,f
  9869  1FCA  3000               	movlw	0
  9870  1FCB  3DA5               	addwfc	DelayTime_1us@j+1,f
  9871  1FCC  3000               	movlw	0
  9872  1FCD  0225               	subwf	DelayTime_1us@j+1,w
  9873  1FCE  3002               	movlw	2
  9874  1FCF  1903               	skipnz
  9875  1FD0  0224               	subwf	DelayTime_1us@j,w
  9876  1FD1  1C03               	skipc
  9877  1FD2  2FC8               	goto	l6448
  9878  1FD3                     l6450:	
  9879  1FD3  3001               	movlw	1
  9880  1FD4  07A2               	addwf	DelayTime_1us@i,f
  9881  1FD5  3000               	movlw	0
  9882  1FD6  3DA3               	addwfc	DelayTime_1us@i+1,f
  9883  1FD7  2FB7               	goto	l347
  9884  1FD8                     __end_of_DelayTime_1us:	
  9885                           
  9886                           	psect	text49
  9887  19F4                     __ptext49:	
  9888 ;; *************** function _CC2500_ClearTXFIFO *****************
  9889 ;; Defined at:
  9890 ;;		line 194 in file "../src/CC2500_B1.c"
  9891 ;; Parameters:    Size  Location     Type
  9892 ;;		None
  9893 ;; Auto vars:     Size  Location     Type
  9894 ;;		None
  9895 ;; Return value:  Size  Location     Type
  9896 ;;		None               void
  9897 ;; Registers used:
  9898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;Total ram usage:        0 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; Hardware stack levels required when called:    7
  9911 ;; This function calls:
  9912 ;;		_CC2500_WriteCommand
  9913 ;; This function is called by:
  9914 ;;		_CC2500_PowerOnInitial
  9915 ;; This function uses a non-reentrant model
  9916 ;;
  9917                           
  9918                           
  9919                           ;psect for function _CC2500_ClearTXFIFO
  9920  19F4                     _CC2500_ClearTXFIFO:	
  9921                           
  9922                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9923                           
  9924                           ;incstack = 0
  9925                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9926  19F4  303B               	movlw	59
  9927  19F5  319D  25DE         	fcall	_CC2500_WriteCommand
  9928  19F7  0008               	return
  9929  19F8                     __end_of_CC2500_ClearTXFIFO:	
  9930                           
  9931                           	psect	text50
  9932  19F0                     __ptext50:	
  9933 ;; *************** function _CC2500_ClearRXFIFO *****************
  9934 ;; Defined at:
  9935 ;;		line 201 in file "../src/CC2500_B1.c"
  9936 ;; Parameters:    Size  Location     Type
  9937 ;;		None
  9938 ;; Auto vars:     Size  Location     Type
  9939 ;;		None
  9940 ;; Return value:  Size  Location     Type
  9941 ;;		None               void
  9942 ;; Registers used:
  9943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9944 ;; Tracked objects:
  9945 ;;		On entry : 0/0
  9946 ;;		On exit  : 0/0
  9947 ;;		Unchanged: 0/0
  9948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;Total ram usage:        0 bytes
  9954 ;; Hardware stack levels used:    1
  9955 ;; Hardware stack levels required when called:    7
  9956 ;; This function calls:
  9957 ;;		_CC2500_WriteCommand
  9958 ;; This function is called by:
  9959 ;;		_CC2500_PowerOnInitial
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           
  9964                           ;psect for function _CC2500_ClearRXFIFO
  9965  19F0                     _CC2500_ClearRXFIFO:	
  9966                           
  9967                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9968                           
  9969                           ;incstack = 0
  9970                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9971  19F0  303A               	movlw	58
  9972  19F1  319D  25DE         	fcall	_CC2500_WriteCommand
  9973  19F3  0008               	return
  9974  19F4                     __end_of_CC2500_ClearRXFIFO:	
  9975                           
  9976                           	psect	text51
  9977  1DDE                     __ptext51:	
  9978 ;; *************** function _CC2500_WriteCommand *****************
  9979 ;; Defined at:
  9980 ;;		line 292 in file "../src/CC2500_B1.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;  command         1    wreg     unsigned char 
  9983 ;; Auto vars:     Size  Location     Type
  9984 ;;  command         1    3[BANK0 ] unsigned char 
  9985 ;; Return value:  Size  Location     Type
  9986 ;;		None               void
  9987 ;; Registers used:
  9988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9989 ;; Tracked objects:
  9990 ;;		On entry : 0/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;Total ram usage:        2 bytes
  9999 ;; Hardware stack levels used:    1
 10000 ;; Hardware stack levels required when called:    6
 10001 ;; This function calls:
 10002 ;;		_CC2500_WriteByte
 10003 ;;		_RF_Timeout_Counter
 10004 ;;		_setRF_TimeoutCleared
 10005 ;; This function is called by:
 10006 ;;		_CC2500_TxData
 10007 ;;		_CC2500_RxData
 10008 ;;		_CC2500_ClearTXFIFO
 10009 ;;		_CC2500_ClearRXFIFO
 10010 ;;		_CC2500_FrequencyCabr
 10011 ;;		_CC2500_SIDLEMode
 10012 ;;		_setRF_Main
 10013 ;;		_RF_RxDisable
 10014 ;; This function uses a non-reentrant model
 10015 ;;
 10016                           
 10017                           
 10018                           ;psect for function _CC2500_WriteCommand
 10019  1DDE                     _CC2500_WriteCommand:	
 10020                           
 10021                           ;incstack = 0
 10022                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10023                           ;CC2500_WriteCommand@command stored from wreg
 10024  1DDE  0020               	movlb	0	; select bank0
 10025  1DDF  00A3               	movwf	CC2500_WriteCommand@command
 10026                           
 10027                           ;CC2500_B1.c: 293: RC0 = 0;
 10028  1DE0  100E               	bcf	14,0	;volatile
 10029                           
 10030                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10031  1DE1  0823               	movf	CC2500_WriteCommand@command,w
 10032  1DE2  00A2               	movwf	??_CC2500_WriteCommand
 10033  1DE3  0822               	movf	??_CC2500_WriteCommand,w
 10034  1DE4  0021               	movlb	1	; select bank1
 10035  1DE5  00D0               	movwf	_SPI0Buffer^(0+128)
 10036                           
 10037                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
 10038  1DE6  2DEA               	goto	l8618
 10039  1DE7                     l8616:	
 10040                           
 10041                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10042  1DE7  319C  24C8  319D   	fcall	_RF_Timeout_Counter
 10043  1DEA                     l8618:	
 10044  1DEA  0020               	movlb	0	; select bank0
 10045  1DEB  1E8E               	btfss	14,5	;volatile
 10046  1DEC  2DF0               	goto	l8622
 10047  1DED  0021               	movlb	1	; select bank1
 10048  1DEE  1F21               	btfss	(_RF1^(0+128)+1),6
 10049  1DEF  2DE7               	goto	l8616
 10050  1DF0                     l8622:	
 10051                           
 10052                           ;CC2500_B1.c: 298: };
 10053                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10054  1DF0  3199  21EC  319D   	fcall	_setRF_TimeoutCleared
 10055                           
 10056                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10057  1DF3  319D  2591         	fcall	_CC2500_WriteByte
 10058                           
 10059                           ;CC2500_B1.c: 302: RC0 = 1;
 10060  1DF5  0020               	movlb	0	; select bank0
 10061  1DF6  140E               	bsf	14,0	;volatile
 10062  1DF7  0008               	return
 10063  1DF8                     __end_of_CC2500_WriteCommand:	
 10064                           
 10065                           	psect	text52
 10066  19EC                     __ptext52:	
 10067 ;; *************** function _setRF_TimeoutCleared *****************
 10068 ;; Defined at:
 10069 ;;		line 149 in file "../src/RF_Control_B1.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;		None
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;		None
 10074 ;; Return value:  Size  Location     Type
 10075 ;;		None               void
 10076 ;; Registers used:
 10077 ;;		status,2
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;Total ram usage:        0 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    5
 10090 ;; This function calls:
 10091 ;;		Nothing
 10092 ;; This function is called by:
 10093 ;;		_CC2500_TxData
 10094 ;;		_CC2500_RxData
 10095 ;;		_CC2500_PowerRST
 10096 ;;		_CC2500_WriteREG
 10097 ;;		_CC2500_WriteCommand
 10098 ;;		_CC2500_ReadStatus
 10099 ;;		_CC2500_ReadREG
 10100 ;; This function uses a non-reentrant model
 10101 ;;
 10102                           
 10103                           
 10104                           ;psect for function _setRF_TimeoutCleared
 10105  19EC                     _setRF_TimeoutCleared:	
 10106                           
 10107                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10108                           
 10109                           ;incstack = 0
 10110                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10111  19EC  0021               	movlb	1	; select bank1
 10112  19ED  01AD               	clrf	(_RF1^(0+128)+13)
 10113  19EE  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10114  19EF  0008               	return
 10115  19F0                     __end_of_setRF_TimeoutCleared:	
 10116                           
 10117                           	psect	text53
 10118  1CC8                     __ptext53:	
 10119 ;; *************** function _RF_Timeout_Counter *****************
 10120 ;; Defined at:
 10121 ;;		line 141 in file "../src/RF_Control_B1.c"
 10122 ;; Parameters:    Size  Location     Type
 10123 ;;		None
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;		None
 10126 ;; Return value:  Size  Location     Type
 10127 ;;		None               void
 10128 ;; Registers used:
 10129 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;Total ram usage:        0 bytes
 10140 ;; Hardware stack levels used:    1
 10141 ;; Hardware stack levels required when called:    5
 10142 ;; This function calls:
 10143 ;;		Nothing
 10144 ;; This function is called by:
 10145 ;;		_CC2500_TxData
 10146 ;;		_CC2500_RxData
 10147 ;;		_CC2500_PowerRST
 10148 ;;		_CC2500_WriteREG
 10149 ;;		_CC2500_WriteCommand
 10150 ;;		_CC2500_ReadStatus
 10151 ;;		_CC2500_ReadREG
 10152 ;; This function uses a non-reentrant model
 10153 ;;
 10154                           
 10155                           
 10156                           ;psect for function _RF_Timeout_Counter
 10157  1CC8                     _RF_Timeout_Counter:	
 10158                           
 10159                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10160                           
 10161                           ;incstack = 0
 10162                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10163  1CC8  3001               	movlw	1
 10164  1CC9  0021               	movlb	1	; select bank1
 10165  1CCA  07AD               	addwf	(_RF1^(0+128)+13),f
 10166  1CCB  3000               	movlw	0
 10167  1CCC  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10168                           
 10169                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10170  1CCD  300D               	movlw	13
 10171  1CCE  3EA0               	addlw	_RF1& (0+255)
 10172  1CCF  0086               	movwf	6
 10173  1CD0  0187               	clrf	7
 10174  1CD1  3F40               	moviw [0]fsr1
 10175  1CD2  3AA8               	xorlw	168
 10176  1CD3  1D03               	skipz
 10177  1CD4  2CD7               	goto	u8875
 10178  1CD5  3F41               	moviw [1]fsr1
 10179  1CD6  3A61               	xorlw	97
 10180  1CD7                     u8875:	
 10181  1CD7  1D03               	skipz
 10182  1CD8  0008               	return
 10183                           
 10184                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10185  1CD9  01AD               	clrf	(_RF1^(0+128)+13)
 10186  1CDA  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10187                           
 10188                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10189  1CDB  1721               	bsf	(_RF1^(0+128)+1),6
 10190  1CDC  0008               	return
 10191  1CDD                     __end_of_RF_Timeout_Counter:	
 10192                           
 10193                           	psect	text54
 10194  1D91                     __ptext54:	
 10195 ;; *************** function _CC2500_WriteByte *****************
 10196 ;; Defined at:
 10197 ;;		line 226 in file "../src/CC2500_B1.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;		None
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10202 ;; Return value:  Size  Location     Type
 10203 ;;		None               void
 10204 ;; Registers used:
 10205 ;;		wreg, status,2, status,0
 10206 ;; Tracked objects:
 10207 ;;		On entry : 0/0
 10208 ;;		On exit  : 0/0
 10209 ;;		Unchanged: 0/0
 10210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;Total ram usage:        2 bytes
 10216 ;; Hardware stack levels used:    1
 10217 ;; Hardware stack levels required when called:    5
 10218 ;; This function calls:
 10219 ;;		Nothing
 10220 ;; This function is called by:
 10221 ;;		_CC2500_TxData
 10222 ;;		_CC2500_RxData
 10223 ;;		_CC2500_PowerRST
 10224 ;;		_CC2500_WriteREG
 10225 ;;		_CC2500_WriteCommand
 10226 ;;		_CC2500_ReadStatus
 10227 ;;		_CC2500_ReadREG
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           
 10232                           ;psect for function _CC2500_WriteByte
 10233  1D91                     _CC2500_WriteByte:	
 10234                           
 10235                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10236                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10237                           
 10238                           ;incstack = 0
 10239                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10240  1D91  0020               	movlb	0	; select bank0
 10241  1D92  01A1               	clrf	CC2500_WriteByte@loop_a
 10242  1D93                     L6:	
 10243  1D93  3008               	movlw	8
 10244  1D94  0221               	subwf	CC2500_WriteByte@loop_a,w
 10245  1D95  1803               	btfsc	3,0
 10246  1D96  0008               	return
 10247                           
 10248                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10249  1D97  0021               	movlb	1	; select bank1
 10250  1D98  1FD0               	btfss	_SPI0Buffer^(0+128),7
 10251  1D99  2D9D               	goto	l303
 10252                           
 10253                           ;CC2500_B1.c: 230: RC4 = 1;
 10254  1D9A  0020               	movlb	0	; select bank0
 10255  1D9B  160E               	bsf	14,4	;volatile
 10256  1D9C  2D9F               	goto	l304
 10257  1D9D                     l303:	
 10258                           
 10259                           ;CC2500_B1.c: 231: else
 10260                           ;CC2500_B1.c: 232: RC4 = 0;
 10261  1D9D  0020               	movlb	0	; select bank0
 10262  1D9E  120E               	bcf	14,4	;volatile
 10263  1D9F                     l304:	
 10264                           
 10265                           ;CC2500_B1.c: 233: RC3 = 1;
 10266  1D9F  158E               	bsf	14,3	;volatile
 10267                           
 10268                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10269  1DA0  1003               	clrc
 10270  1DA1  0021               	movlb	1	; select bank1
 10271  1DA2  0DD0               	rlf	_SPI0Buffer^(0+128),f
 10272                           
 10273                           ;CC2500_B1.c: 235: RC3 = 0;
 10274  1DA3  0020               	movlb	0	; select bank0
 10275  1DA4  118E               	bcf	14,3	;volatile
 10276  1DA5  3001               	movlw	1
 10277  1DA6  00A0               	movwf	??_CC2500_WriteByte
 10278  1DA7  0820               	movf	??_CC2500_WriteByte,w
 10279  1DA8  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10280  1DA9  2D93               	goto	L6
 10281  1DAA                     __end_of_CC2500_WriteByte:	
 10282                           
 10283                           	psect	text55
 10284  19CC                     __ptext55:	
 10285 ;; *************** function _RF_Initialization *****************
 10286 ;; Defined at:
 10287 ;;		line 9 in file "../src/RF_Control_B1.c"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;		None
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;		None
 10292 ;; Return value:  Size  Location     Type
 10293 ;;		None               void
 10294 ;; Registers used:
 10295 ;;		wreg, status,2, status,0, pclath, cstack
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;Total ram usage:        0 bytes
 10306 ;; Hardware stack levels used:    1
 10307 ;; Hardware stack levels required when called:    6
 10308 ;; This function calls:
 10309 ;;		_setRF_Initialization
 10310 ;; This function is called by:
 10311 ;;		_main
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           
 10316                           ;psect for function _RF_Initialization
 10317  19CC                     _RF_Initialization:	
 10318                           
 10319                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10320                           
 10321                           ;incstack = 0
 10322                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10323  19CC  319A  2290         	fcall	_setRF_Initialization
 10324  19CE  0008               	return
 10325  19CF                     __end_of_RF_Initialization:	
 10326                           
 10327                           	psect	text56
 10328  1A90                     __ptext56:	
 10329 ;; *************** function _setRF_Initialization *****************
 10330 ;; Defined at:
 10331 ;;		line 17 in file "../src/RF_Control_B1.c"
 10332 ;; Parameters:    Size  Location     Type
 10333 ;;		None
 10334 ;; Auto vars:     Size  Location     Type
 10335 ;;		None
 10336 ;; Return value:  Size  Location     Type
 10337 ;;		None               void
 10338 ;; Registers used:
 10339 ;;		wreg
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;Total ram usage:        1 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    5
 10352 ;; This function calls:
 10353 ;;		Nothing
 10354 ;; This function is called by:
 10355 ;;		_RF_Initialization
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           
 10360                           ;psect for function _setRF_Initialization
 10361  1A90                     _setRF_Initialization:	
 10362                           
 10363                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10364                           
 10365                           ;incstack = 0
 10366                           ; Regs used in _setRF_Initialization: [wreg]
 10367  1A90  3015               	movlw	21
 10368  1A91  0020               	movlb	0	; select bank0
 10369  1A92  00A0               	movwf	??_setRF_Initialization
 10370  1A93  0820               	movf	??_setRF_Initialization,w
 10371  1A94  0021               	movlb	1	; select bank1
 10372  1A95  00D3               	movwf	_Tx_Length^(0+128)
 10373                           
 10374                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10375  1A96  30C8               	movlw	200
 10376  1A97  00A8               	movwf	(_RF1^(0+128)+8)
 10377  1A98  3000               	movlw	0
 10378  1A99  00A9               	movwf	(_RF1^(0+128)+9)
 10379  1A9A  0008               	return
 10380  1A9B                     __end_of_setRF_Initialization:	
 10381                           
 10382                           	psect	text57
 10383  1C31                     __ptext57:	
 10384 ;; *************** function _Mcu_Initialization *****************
 10385 ;; Defined at:
 10386 ;;		line 30 in file "../src/MCU_B1.c"
 10387 ;; Parameters:    Size  Location     Type
 10388 ;;		None
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;		None
 10391 ;; Return value:  Size  Location     Type
 10392 ;;		None               void
 10393 ;; Registers used:
 10394 ;;		wreg, status,2, status,0, pclath, cstack
 10395 ;; Tracked objects:
 10396 ;;		On entry : 0/0
 10397 ;;		On exit  : 0/0
 10398 ;;		Unchanged: 0/0
 10399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10404 ;;Total ram usage:        0 bytes
 10405 ;; Hardware stack levels used:    1
 10406 ;; Hardware stack levels required when called:    6
 10407 ;; This function calls:
 10408 ;;		_ADC_Set
 10409 ;;		_Fosc_Set
 10410 ;;		_IOC_Set
 10411 ;;		_IO_Set
 10412 ;;		_TMR1_Set
 10413 ;;		_WDT_Set
 10414 ;; This function is called by:
 10415 ;;		_main
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           
 10420                           ;psect for function _Mcu_Initialization
 10421  1C31                     _Mcu_Initialization:	
 10422                           
 10423                           ;MCU_B1.c: 32: Fosc_Set();
 10424                           
 10425                           ;incstack = 0
 10426                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10427  1C31  3199  21E8  319C   	fcall	_Fosc_Set
 10428                           
 10429                           ;MCU_B1.c: 34: IO_Set();
 10430  1C34  319D  25C4  319C   	fcall	_IO_Set
 10431                           
 10432                           ;MCU_B1.c: 36: ;;
 10433                           ;MCU_B1.c: 38: TMR1_Set();
 10434  1C37  319A  22FB  319C   	fcall	_TMR1_Set
 10435                           
 10436                           ;MCU_B1.c: 40: ADC_Set();
 10437  1C3A  319A  2224  319C   	fcall	_ADC_Set
 10438                           
 10439                           ;MCU_B1.c: 42: ;;
 10440                           ;MCU_B1.c: 44: ;;
 10441                           ;MCU_B1.c: 46: IOC_Set();
 10442  1C3D  319A  2285  319C   	fcall	_IOC_Set
 10443                           
 10444                           ;MCU_B1.c: 48: ;;
 10445                           ;MCU_B1.c: 50: ;;
 10446                           ;MCU_B1.c: 52: WDT_Set();
 10447  1C40  319B  2307         	fcall	_WDT_Set
 10448  1C42  0008               	return
 10449  1C43                     __end_of_Mcu_Initialization:	
 10450                           
 10451                           	psect	text58
 10452  1B07                     __ptext58:	
 10453 ;; *************** function _WDT_Set *****************
 10454 ;; Defined at:
 10455 ;;		line 1102 in file "../src/MCU_B1.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;		None
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;		None
 10460 ;; Return value:  Size  Location     Type
 10461 ;;		None               void
 10462 ;; Registers used:
 10463 ;;		wreg
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;Total ram usage:        1 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    5
 10476 ;; This function calls:
 10477 ;;		Nothing
 10478 ;; This function is called by:
 10479 ;;		_Mcu_Initialization
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           
 10484                           ;psect for function _WDT_Set
 10485  1B07                     _WDT_Set:	
 10486                           
 10487                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10488                           
 10489                           ;incstack = 0
 10490                           ; Regs used in _WDT_Set: [wreg]
 10491  1B07  3017               	movlw	23
 10492  1B08  0021               	movlb	1	; select bank1
 10493  1B09  0097               	movwf	23	;volatile
 10494                           
 10495                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10496  1B0A  0022               	movlb	2	; select bank2
 10497  1B0B  1436               	bsf	_WDT^(0+256),0
 10498                           
 10499                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10500  1B0C  300A               	movlw	10
 10501  1B0D  0020               	movlb	0	; select bank0
 10502  1B0E  00A0               	movwf	??_WDT_Set
 10503  1B0F  0820               	movf	??_WDT_Set,w
 10504  1B10  0022               	movlb	2	; select bank2
 10505  1B11  00B7               	movwf	(_WDT^(0+256)+1)
 10506  1B12  0008               	return
 10507  1B13                     __end_of_WDT_Set:	
 10508                           
 10509                           	psect	text59
 10510  1AFB                     __ptext59:	
 10511 ;; *************** function _TMR1_Set *****************
 10512 ;; Defined at:
 10513 ;;		line 226 in file "../src/MCU_B1.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;		None
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;		None
 10518 ;; Return value:  Size  Location     Type
 10519 ;;		None               void
 10520 ;; Registers used:
 10521 ;;		wreg
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;Total ram usage:        0 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    5
 10534 ;; This function calls:
 10535 ;;		Nothing
 10536 ;; This function is called by:
 10537 ;;		_Mcu_Initialization
 10538 ;; This function uses a non-reentrant model
 10539 ;;
 10540                           
 10541                           
 10542                           ;psect for function _TMR1_Set
 10543  1AFB                     _TMR1_Set:	
 10544                           
 10545                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10546                           
 10547                           ;incstack = 0
 10548                           ; Regs used in _TMR1_Set: [wreg]
 10549  1AFB  3041               	movlw	65
 10550  1AFC  0020               	movlb	0	; select bank0
 10551  1AFD  0098               	movwf	24	;volatile
 10552                           
 10553                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10554  1AFE  30FA               	movlw	250
 10555  1AFF  0097               	movwf	23	;volatile
 10556                           
 10557                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10558  1B00  3038               	movlw	56
 10559  1B01  0096               	movwf	22	;volatile
 10560                           
 10561                           ;MCU_B1.c: 230: TMR1IE = 1;
 10562  1B02  0021               	movlb	1	; select bank1
 10563  1B03  1411               	bsf	17,0	;volatile
 10564                           
 10565                           ;MCU_B1.c: 231: PEIE = 1;
 10566  1B04  170B               	bsf	11,6	;volatile
 10567                           
 10568                           ;MCU_B1.c: 232: GIE = 1;
 10569  1B05  178B               	bsf	11,7	;volatile
 10570  1B06  0008               	return
 10571  1B07                     __end_of_TMR1_Set:	
 10572                           
 10573                           	psect	text60
 10574  1DC4                     __ptext60:	
 10575 ;; *************** function _IO_Set *****************
 10576 ;; Defined at:
 10577 ;;		line 60 in file "../src/MCU_B1.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;		None
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;		None
 10582 ;; Return value:  Size  Location     Type
 10583 ;;		None               void
 10584 ;; Registers used:
 10585 ;;		wreg, status,2
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;Total ram usage:        0 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:    5
 10598 ;; This function calls:
 10599 ;;		Nothing
 10600 ;; This function is called by:
 10601 ;;		_Mcu_Initialization
 10602 ;; This function uses a non-reentrant model
 10603 ;;
 10604                           
 10605                           
 10606                           ;psect for function _IO_Set
 10607  1DC4                     _IO_Set:	
 10608                           
 10609                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10610                           
 10611                           ;incstack = 0
 10612                           ; Regs used in _IO_Set: [wreg+status,2]
 10613  1DC4  30F7               	movlw	247
 10614  1DC5  0021               	movlb	1	; select bank1
 10615  1DC6  008C               	movwf	12	;volatile
 10616                           
 10617                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10618  1DC7  3004               	movlw	4
 10619  1DC8  008D               	movwf	13	;volatile
 10620                           
 10621                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10622  1DC9  3026               	movlw	38
 10623  1DCA  008E               	movwf	14	;volatile
 10624                           
 10625                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10626  1DCB  0022               	movlb	2	; select bank2
 10627  1DCC  018C               	clrf	12	;volatile
 10628                           
 10629                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10630  1DCD  018D               	clrf	13	;volatile
 10631                           
 10632                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10633  1DCE  018E               	clrf	14	;volatile
 10634                           
 10635                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10636  1DCF  300E               	movlw	14
 10637  1DD0  0023               	movlb	3	; select bank3
 10638  1DD1  008C               	movwf	12	;volatile
 10639                           
 10640                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10641  1DD2  018D               	clrf	13	;volatile
 10642                           
 10643                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10644  1DD3  018E               	clrf	14	;volatile
 10645                           
 10646                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10647  1DD4  30F7               	movlw	247
 10648  1DD5  0020               	movlb	0	; select bank0
 10649  1DD6  008C               	movwf	12	;volatile
 10650                           
 10651                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10652  1DD7  3004               	movlw	4
 10653  1DD8  008D               	movwf	13	;volatile
 10654                           
 10655                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10656  1DD9  3026               	movlw	38
 10657  1DDA  008E               	movwf	14	;volatile
 10658                           
 10659                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10660  1DDB  0024               	movlb	4	; select bank4
 10661  1DDC  018D               	clrf	13	;volatile
 10662  1DDD  0008               	return
 10663  1DDE                     __end_of_IO_Set:	
 10664                           
 10665                           	psect	text61
 10666  1A85                     __ptext61:	
 10667 ;; *************** function _IOC_Set *****************
 10668 ;; Defined at:
 10669 ;;		line 380 in file "../src/MCU_B1.c"
 10670 ;; Parameters:    Size  Location     Type
 10671 ;;		None
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;		None
 10674 ;; Return value:  Size  Location     Type
 10675 ;;		None               void
 10676 ;; Registers used:
 10677 ;;		wreg, status,2
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;Total ram usage:        0 bytes
 10688 ;; Hardware stack levels used:    1
 10689 ;; Hardware stack levels required when called:    5
 10690 ;; This function calls:
 10691 ;;		Nothing
 10692 ;; This function is called by:
 10693 ;;		_Mcu_Initialization
 10694 ;; This function uses a non-reentrant model
 10695 ;;
 10696                           
 10697                           
 10698                           ;psect for function _IOC_Set
 10699  1A85                     _IOC_Set:	
 10700                           
 10701                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10702                           
 10703                           ;incstack = 0
 10704                           ; Regs used in _IOC_Set: [wreg+status,2]
 10705  1A85  3004               	movlw	4
 10706  1A86  0027               	movlb	7	; select bank7
 10707  1A87  0094               	movwf	20	;volatile
 10708                           
 10709                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10710  1A88  3004               	movlw	4
 10711  1A89  0095               	movwf	21	;volatile
 10712                           
 10713                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10714  1A8A  0196               	clrf	22	;volatile
 10715                           
 10716                           ;MCU_B1.c: 387: IOCIE = 1;
 10717  1A8B  158B               	bsf	11,3	;volatile
 10718                           
 10719                           ;MCU_B1.c: 388: IOCIF = 0;
 10720  1A8C  100B               	bcf	11,0	;volatile
 10721                           
 10722                           ;MCU_B1.c: 389: PEIE = 1;
 10723  1A8D  170B               	bsf	11,6	;volatile
 10724                           
 10725                           ;MCU_B1.c: 390: GIE = 1;
 10726  1A8E  178B               	bsf	11,7	;volatile
 10727  1A8F  0008               	return
 10728  1A90                     __end_of_IOC_Set:	
 10729                           
 10730                           	psect	text62
 10731  19E8                     __ptext62:	
 10732 ;; *************** function _Fosc_Set *****************
 10733 ;; Defined at:
 10734 ;;		line 56 in file "../src/MCU_B1.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;		None
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;		None
 10739 ;; Return value:  Size  Location     Type
 10740 ;;		None               void
 10741 ;; Registers used:
 10742 ;;		wreg
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;Total ram usage:        0 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:    5
 10755 ;; This function calls:
 10756 ;;		Nothing
 10757 ;; This function is called by:
 10758 ;;		_Mcu_Initialization
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           
 10763                           ;psect for function _Fosc_Set
 10764  19E8                     _Fosc_Set:	
 10765                           
 10766                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10767                           
 10768                           ;incstack = 0
 10769                           ; Regs used in _Fosc_Set: [wreg]
 10770  19E8  3078               	movlw	120
 10771  19E9  0021               	movlb	1	; select bank1
 10772  19EA  0099               	movwf	25	;volatile
 10773  19EB  0008               	return
 10774  19EC                     __end_of_Fosc_Set:	
 10775                           
 10776                           	psect	text63
 10777  1A24                     __ptext63:	
 10778 ;; *************** function _ADC_Set *****************
 10779 ;; Defined at:
 10780 ;;		line 427 in file "../src/MCU_B1.c"
 10781 ;; Parameters:    Size  Location     Type
 10782 ;;		None
 10783 ;; Auto vars:     Size  Location     Type
 10784 ;;		None
 10785 ;; Return value:  Size  Location     Type
 10786 ;;		None               void
 10787 ;; Registers used:
 10788 ;;		wreg
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;Total ram usage:        0 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    5
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		_Mcu_Initialization
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           
 10809                           ;psect for function _ADC_Set
 10810  1A24                     _ADC_Set:	
 10811                           
 10812                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10813                           
 10814                           ;incstack = 0
 10815                           ; Regs used in _ADC_Set: [wreg]
 10816  1A24  30F3               	movlw	243
 10817  1A25  0021               	movlb	1	; select bank1
 10818  1A26  009E               	movwf	30	;volatile
 10819                           
 10820                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10821  1A27  30C1               	movlw	193
 10822  1A28  0022               	movlb	2	; select bank2
 10823  1A29  0097               	movwf	23	;volatile
 10824  1A2A  0008               	return
 10825  1A2B                     __end_of_ADC_Set:	
 10826                           
 10827                           	psect	text64
 10828  0053                     __ptext64:	
 10829 ;; *************** function _Load_Main *****************
 10830 ;; Defined at:
 10831 ;;		line 40 in file "../src/OverLoad_B1.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  i               2   16[BANK0 ] int 
 10836 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10837 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10838 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10839 ;;  error           1   12[BANK0 ] unsigned char 
 10840 ;; Return value:  Size  Location     Type
 10841 ;;		None               void
 10842 ;; Registers used:
 10843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/0
 10846 ;;		On exit  : 0/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;Total ram usage:       10 bytes
 10854 ;; Hardware stack levels used:    1
 10855 ;; Hardware stack levels required when called:    6
 10856 ;; This function calls:
 10857 ;;		___lwdiv
 10858 ;;		___wmul
 10859 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10860 ;;		_getDimmer_LoadGO
 10861 ;;		_getDimmer_Load_Status
 10862 ;;		_getMain_All_Error_Status
 10863 ;;		_getMain_All_LightsStatus
 10864 ;;		_getMain_Lights_Count
 10865 ;;		_setLoad_AH_AL_Restore
 10866 ;; This function is called by:
 10867 ;;		_main
 10868 ;; This function uses a non-reentrant model
 10869 ;;
 10870                           
 10871                           
 10872                           ;psect for function _Load_Main
 10873  0053                     _Load_Main:	
 10874                           
 10875                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 10876                           
 10877                           ;incstack = 0
 10878                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10879  0053  3000               	movlw	0
 10880  0054  3190  2077  3180   	fcall	_getMain_All_Error_Status
 10881  0057  0020               	movlb	0	; select bank0
 10882  0058  00A8               	movwf	??_Load_Main
 10883  0059  0828               	movf	??_Load_Main,w
 10884  005A  00AC               	movwf	Load_Main@error
 10885                           
 10886                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 10887  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10888  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10889  005D  01AF               	clrf	Load_Main@LightsCount
 10890                           
 10891                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10892  005E  0022               	movlb	2	; select bank2
 10893  005F  1C39               	btfss	_Load^(0+256),0
 10894  0060  29FF               	goto	l1639
 10895                           
 10896                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10897  0061  319A  2265  3180   	fcall	_getMain_All_LightsStatus
 10898  0064  3800               	iorlw	0
 10899  0065  1D03               	skipz
 10900  0066  2869               	goto	l8212
 10901                           
 10902                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10903  0067  0022               	movlb	2	; select bank2
 10904  0068  288A               	goto	l8230
 10905  0069                     l8212:	
 10906                           ;OverLoad_B1.c: 47: } else {
 10907                           
 10908                           
 10909                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10910  0069  0020               	movlb	0	; select bank0
 10911  006A  08AC               	movf	Load_Main@error,f
 10912  006B  1D03               	skipz
 10913  006C  2887               	goto	l1642
 10914  006D  319C  247B  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10915  0070  3800               	iorlw	0
 10916  0071  1D03               	skipz
 10917  0072  2887               	goto	l1642
 10918                           
 10919                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10920  0073  0022               	movlb	2	; select bank2
 10921  0074  14B9               	bsf	_Load^(0+256),1
 10922                           
 10923                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10924  0075  319A  223A  3180   	fcall	_getDimmer_LoadGO
 10925  0078  3A01               	xorlw	1
 10926  0079  1D03               	skipz
 10927  007A  2882               	goto	l1643
 10928                           
 10929                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10930  007B  0022               	movlb	2	; select bank2
 10931  007C  1DB9               	btfss	_Load^(0+256),3
 10932  007D  1BB9               	btfsc	_Load^(0+256),7
 10933  007E  288B               	goto	l1641
 10934                           
 10935                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10936  007F  15B9               	bsf	_Load^(0+256),3
 10937                           
 10938                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10939  0080  01DE               	clrf	(_Load^(0+256)+37)
 10940                           
 10941                           ;OverLoad_B1.c: 57: }
 10942                           ;OverLoad_B1.c: 58: } else {
 10943  0081  288B               	goto	l1641
 10944  0082                     l1643:	
 10945                           
 10946                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10947  0082  0022               	movlb	2	; select bank2
 10948  0083  1FB9               	btfss	_Load^(0+256),7
 10949  0084  288B               	goto	l1641
 10950                           
 10951                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10952  0085  13B9               	bcf	_Load^(0+256),7
 10953                           
 10954                           ;OverLoad_B1.c: 61: }
 10955                           ;OverLoad_B1.c: 62: }
 10956                           ;OverLoad_B1.c: 63: } else {
 10957  0086  288B               	goto	l1641
 10958  0087                     l1642:	
 10959                           
 10960                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10961  0087  0022               	movlb	2	; select bank2
 10962  0088  1CB9               	btfss	_Load^(0+256),1
 10963  0089  288B               	goto	l1641
 10964  008A                     l8230:	
 10965                           
 10966                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10967  008A  10B9               	bcf	_Load^(0+256),1
 10968  008B                     l1641:	
 10969                           
 10970                           ;OverLoad_B1.c: 66: }
 10971                           ;OverLoad_B1.c: 67: }
 10972                           ;OverLoad_B1.c: 89: }
 10973                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 10974  008B  1CB9               	btfss	_Load^(0+256),1
 10975  008C  29DB               	goto	l1649
 10976                           
 10977                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 10978  008D  1539               	bsf	_Load^(0+256),2
 10979                           
 10980                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 10981  008E  1E39               	btfss	_Load^(0+256),4
 10982  008F  29D9               	goto	l1650
 10983                           
 10984                           ;OverLoad_B1.c: 96: Load.Time++;
 10985  0090  3001               	movlw	1
 10986  0091  07BA               	addwf	(_Load^(0+256)+1),f
 10987  0092  3000               	movlw	0
 10988  0093  3DBB               	addwfc	((_Load+1)^(0+256)+1),f
 10989                           
 10990                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 10991  0094  3000               	movlw	0
 10992  0095  023B               	subwf	((_Load+1)^(0+256)+1),w
 10993  0096  3002               	movlw	2
 10994  0097  1903               	skipnz
 10995  0098  023A               	subwf	(_Load^(0+256)+1),w
 10996  0099  1C03               	skipc
 10997  009A  0008               	return
 10998                           
 10999                           ;OverLoad_B1.c: 98: Load.Time = 0;
 11000  009B  01BA               	clrf	(_Load^(0+256)+1)
 11001  009C  01BB               	clrf	((_Load+1)^(0+256)+1)
 11002                           
 11003                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 11004  009D  1239               	bcf	_Load^(0+256),4
 11005                           
 11006                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 11007  009E  3001               	movlw	1
 11008  009F  0020               	movlb	0	; select bank0
 11009  00A0  00B0               	movwf	Load_Main@i
 11010  00A1  3000               	movlw	0
 11011  00A2  00B1               	movwf	Load_Main@i+1
 11012  00A3  0831               	movf	Load_Main@i+1,w
 11013  00A4  3A80               	xorlw	128
 11014  00A5  00A8               	movwf	??_Load_Main
 11015  00A6  3080               	movlw	128
 11016  00A7  0228               	subwf	??_Load_Main,w
 11017  00A8  1D03               	skipz
 11018  00A9  28AC               	goto	u8435
 11019  00AA  3004               	movlw	4
 11020  00AB  0230               	subwf	Load_Main@i,w
 11021  00AC                     u8435:	
 11022  00AC  1803               	btfsc	3,0
 11023  00AD  28E0               	goto	l8252
 11024  00AE                     l8246:	
 11025                           
 11026                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11027  00AE  0020               	movlb	0	; select bank0
 11028  00AF  3530               	lslf	Load_Main@i,w
 11029  00B0  3E44               	addlw	(_Load+11)& (0+255)
 11030  00B1  0086               	movwf	6
 11031  00B2  3001               	movlw	1	; select bank2/3
 11032  00B3  0087               	movwf	7
 11033  00B4  3F40               	moviw [0]fsr1
 11034  00B5  00A8               	movwf	??_Load_Main
 11035  00B6  3F41               	moviw [1]fsr1
 11036  00B7  00A9               	movwf	??_Load_Main+1
 11037  00B8  0828               	movf	??_Load_Main,w
 11038  00B9  0022               	movlb	2	; select bank2
 11039  00BA  07BE               	addwf	(_Load^(0+256)+5),f
 11040  00BB  0020               	movlb	0	; select bank0
 11041  00BC  0829               	movf	??_Load_Main+1,w
 11042  00BD  0022               	movlb	2	; select bank2
 11043  00BE  3DBF               	addwfc	((_Load+1)^(0+256)+5),f
 11044                           
 11045                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11046  00BF  0020               	movlb	0	; select bank0
 11047  00C0  3530               	lslf	Load_Main@i,w
 11048  00C1  3E4E               	addlw	(_Load+21)& (0+255)
 11049  00C2  0086               	movwf	6
 11050  00C3  3001               	movlw	1	; select bank2/3
 11051  00C4  0087               	movwf	7
 11052  00C5  3F40               	moviw [0]fsr1
 11053  00C6  00A8               	movwf	??_Load_Main
 11054  00C7  3F41               	moviw [1]fsr1
 11055  00C8  00A9               	movwf	??_Load_Main+1
 11056  00C9  0828               	movf	??_Load_Main,w
 11057  00CA  0022               	movlb	2	; select bank2
 11058  00CB  07C0               	addwf	(_Load^(0+256)+7),f
 11059  00CC  0020               	movlb	0	; select bank0
 11060  00CD  0829               	movf	??_Load_Main+1,w
 11061  00CE  0022               	movlb	2	; select bank2
 11062  00CF  3DC1               	addwfc	((_Load+1)^(0+256)+7),f
 11063  00D0  3001               	movlw	1
 11064  00D1  0020               	movlb	0	; select bank0
 11065  00D2  07B0               	addwf	Load_Main@i,f
 11066  00D3  3000               	movlw	0
 11067  00D4  3DB1               	addwfc	Load_Main@i+1,f
 11068  00D5  0831               	movf	Load_Main@i+1,w
 11069  00D6  3A80               	xorlw	128
 11070  00D7  00A8               	movwf	??_Load_Main
 11071  00D8  3080               	movlw	128
 11072  00D9  0228               	subwf	??_Load_Main,w
 11073  00DA  1D03               	skipz
 11074  00DB  28DE               	goto	u8445
 11075  00DC  3004               	movlw	4
 11076  00DD  0230               	subwf	Load_Main@i,w
 11077  00DE                     u8445:	
 11078  00DE  1C03               	skipc
 11079  00DF  28AE               	goto	l8246
 11080  00E0                     l8252:	
 11081                           
 11082                           ;OverLoad_B1.c: 104: }
 11083                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11084  00E0  3003               	movlw	3
 11085  00E1  0020               	movlb	0	; select bank0
 11086  00E2  00A0               	movwf	___lwdiv@divisor
 11087  00E3  3000               	movlw	0
 11088  00E4  00A1               	movwf	___lwdiv@divisor+1
 11089  00E5  0022               	movlb	2	; select bank2
 11090  00E6  083F               	movf	((_Load+1)^(0+256)+5),w
 11091  00E7  0020               	movlb	0	; select bank0
 11092  00E8  01A3               	clrf	___lwdiv@dividend+1
 11093  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11094  00EA  0022               	movlb	2	; select bank2
 11095  00EB  083E               	movf	(_Load^(0+256)+5),w
 11096  00EC  0020               	movlb	0	; select bank0
 11097  00ED  01A2               	clrf	___lwdiv@dividend
 11098  00EE  07A2               	addwf	___lwdiv@dividend,f
 11099  00EF  3191  2114  3180   	fcall	___lwdiv
 11100  00F2  0020               	movlb	0	; select bank0
 11101  00F3  0821               	movf	?___lwdiv+1,w
 11102  00F4  0022               	movlb	2	; select bank2
 11103  00F5  01BF               	clrf	((_Load+1)^(0+256)+5)
 11104  00F6  07BF               	addwf	((_Load+1)^(0+256)+5),f
 11105  00F7  0020               	movlb	0	; select bank0
 11106  00F8  0820               	movf	?___lwdiv,w
 11107  00F9  0022               	movlb	2	; select bank2
 11108  00FA  01BE               	clrf	(_Load^(0+256)+5)
 11109  00FB  07BE               	addwf	(_Load^(0+256)+5),f
 11110                           
 11111                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11112  00FC  3003               	movlw	3
 11113  00FD  0020               	movlb	0	; select bank0
 11114  00FE  00A0               	movwf	___lwdiv@divisor
 11115  00FF  3000               	movlw	0
 11116  0100  00A1               	movwf	___lwdiv@divisor+1
 11117  0101  0022               	movlb	2	; select bank2
 11118  0102  0841               	movf	((_Load+1)^(0+256)+7),w
 11119  0103  0020               	movlb	0	; select bank0
 11120  0104  01A3               	clrf	___lwdiv@dividend+1
 11121  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11122  0106  0022               	movlb	2	; select bank2
 11123  0107  0840               	movf	(_Load^(0+256)+7),w
 11124  0108  0020               	movlb	0	; select bank0
 11125  0109  01A2               	clrf	___lwdiv@dividend
 11126  010A  07A2               	addwf	___lwdiv@dividend,f
 11127  010B  3191  2114  3180   	fcall	___lwdiv
 11128  010E  0020               	movlb	0	; select bank0
 11129  010F  0821               	movf	?___lwdiv+1,w
 11130  0110  0022               	movlb	2	; select bank2
 11131  0111  01C1               	clrf	((_Load+1)^(0+256)+7)
 11132  0112  07C1               	addwf	((_Load+1)^(0+256)+7),f
 11133  0113  0020               	movlb	0	; select bank0
 11134  0114  0820               	movf	?___lwdiv,w
 11135  0115  0022               	movlb	2	; select bank2
 11136  0116  01C0               	clrf	(_Load^(0+256)+7)
 11137  0117  07C0               	addwf	(_Load^(0+256)+7),f
 11138                           
 11139                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11140  0118  319E  262E  3180   	fcall	_setLoad_AH_AL_Restore
 11141                           
 11142                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11143  011B  0022               	movlb	2	; select bank2
 11144  011C  0841               	movf	((_Load+1)^(0+256)+7),w
 11145  011D  023F               	subwf	((_Load+1)^(0+256)+5),w
 11146  011E  1D03               	skipz
 11147  011F  2922               	goto	u8455
 11148  0120  0840               	movf	(_Load^(0+256)+7),w
 11149  0121  023E               	subwf	(_Load^(0+256)+5),w
 11150  0122                     u8455:	
 11151  0122  1C03               	skipc
 11152  0123  0008               	return
 11153                           
 11154                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11155  0124  3005               	movlw	5
 11156  0125  3E39               	addlw	_Load& (0+255)
 11157  0126  0086               	movwf	6
 11158  0127  3001               	movlw	1	; select bank2/3
 11159  0128  0087               	movwf	7
 11160  0129  0940               	comf	(_Load^(0+256)+7),w
 11161  012A  0020               	movlb	0	; select bank0
 11162  012B  00A8               	movwf	??_Load_Main
 11163  012C  0022               	movlb	2	; select bank2
 11164  012D  0941               	comf	((_Load+1)^(0+256)+7),w
 11165  012E  0020               	movlb	0	; select bank0
 11166  012F  00A9               	movwf	??_Load_Main+1
 11167  0130  0AA8               	incf	??_Load_Main,f
 11168  0131  1903               	skipnz
 11169  0132  0AA9               	incf	??_Load_Main+1,f
 11170  0133  3F40               	moviw [0]fsr1
 11171  0134  0728               	addwf	??_Load_Main,w
 11172  0135  0022               	movlb	2	; select bank2
 11173  0136  00D8               	movwf	(_Load^(0+256)+31)
 11174  0137  3F41               	moviw [1]fsr1
 11175  0138  0020               	movlb	0	; select bank0
 11176  0139  3D29               	addwfc	??_Load_Main+1,w
 11177  013A  0022               	movlb	2	; select bank2
 11178  013B  00D9               	movwf	(_Load^(0+256)+32)
 11179                           
 11180                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11181  013C  01BE               	clrf	(_Load^(0+256)+5)
 11182  013D  01BF               	clrf	((_Load+1)^(0+256)+5)
 11183                           
 11184                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11185  013E  01C0               	clrf	(_Load^(0+256)+7)
 11186  013F  01C1               	clrf	((_Load+1)^(0+256)+7)
 11187                           
 11188                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11189  0140  1DB9               	btfss	_Load^(0+256),3
 11190  0141  299B               	goto	l8292
 11191                           
 11192                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11193  0142  3002               	movlw	2
 11194  0143  025E               	subwf	(_Load^(0+256)+37),w
 11195  0144  1803               	skipnc
 11196  0145  299B               	goto	l8292
 11197                           
 11198                           ;OverLoad_B1.c: 117: Load.Count++;
 11199  0146  3001               	movlw	1
 11200  0147  0020               	movlb	0	; select bank0
 11201  0148  00A8               	movwf	??_Load_Main
 11202  0149  0828               	movf	??_Load_Main,w
 11203  014A  0022               	movlb	2	; select bank2
 11204  014B  07DE               	addwf	(_Load^(0+256)+37),f
 11205                           
 11206                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11207  014C  319A  2242  3180   	fcall	_getDimmer_Load_Status
 11208  014F  0020               	movlb	0	; select bank0
 11209  0150  00A8               	movwf	??_Load_Main
 11210  0151  0828               	movf	??_Load_Main,w
 11211  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11212                           
 11213                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11214  0153  319A  227A  3180   	fcall	_getMain_Lights_Count
 11215  0156  0020               	movlb	0	; select bank0
 11216  0157  00A8               	movwf	??_Load_Main
 11217  0158  0828               	movf	??_Load_Main,w
 11218  0159  00AF               	movwf	Load_Main@LightsCount
 11219                           
 11220                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11221  015A  0022               	movlb	2	; select bank2
 11222  015B  085E               	movf	(_Load^(0+256)+37),w
 11223  015C  3A01               	xorlw	1
 11224  015D  1D03               	skipz
 11225  015E  2963               	goto	l8278
 11226                           
 11227                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*65);
 11228  015F  3014               	movlw	20
 11229  0160  00DC               	movwf	(_Load^(0+256)+35)
 11230  0161  3005               	movlw	5
 11231  0162  2970               	goto	L7
 11232  0163                     l8278:	
 11233                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11234                           
 11235  0163  085E               	movf	(_Load^(0+256)+37),w
 11236  0164  3A02               	xorlw	2
 11237  0165  1D03               	skipz
 11238  0166  299B               	goto	l8292
 11239                           
 11240                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11241  0167  0020               	movlb	0	; select bank0
 11242  0168  082F               	movf	Load_Main@LightsCount,w
 11243  0169  3A01               	xorlw	1
 11244  016A  1D03               	skipz
 11245  016B  2972               	goto	l8284
 11246                           
 11247                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.8*65);
 11248  016C  3075               	movlw	117
 11249  016D  0022               	movlb	2	; select bank2
 11250  016E  00DC               	movwf	(_Load^(0+256)+35)
 11251  016F  3000               	movlw	0
 11252  0170                     L7:	
 11253  0170  00DD               	movwf	(_Load^(0+256)+36)
 11254                           
 11255                           ;OverLoad_B1.c: 132: } else {
 11256  0171  299B               	goto	l8292
 11257  0172                     l8284:	
 11258                           
 11259                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11260  0172  0020               	movlb	0	; select bank0
 11261  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11262  0174  1D03               	skipz
 11263  0175  298F               	goto	l8288
 11264                           
 11265                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*65) * LightsCount;
 11266  0176  082F               	movf	Load_Main@LightsCount,w
 11267  0177  00A8               	movwf	??_Load_Main
 11268  0178  01A9               	clrf	??_Load_Main+1
 11269  0179  0828               	movf	??_Load_Main,w
 11270  017A  00A0               	movwf	___wmul@multiplier
 11271  017B  0829               	movf	??_Load_Main+1,w
 11272  017C  00A1               	movwf	___wmul@multiplier+1
 11273  017D  3075               	movlw	117
 11274  017E  00A2               	movwf	___wmul@multiplicand
 11275  017F  3000               	movlw	0
 11276  0180  00A3               	movwf	___wmul@multiplicand+1
 11277  0181  3190  2000  3180   	fcall	___wmul
 11278  0184  0020               	movlb	0	; select bank0
 11279  0185  0821               	movf	?___wmul+1,w
 11280  0186  0022               	movlb	2	; select bank2
 11281  0187  01DD               	clrf	((_Load+1)^(0+256)+35)
 11282  0188  07DD               	addwf	((_Load+1)^(0+256)+35),f
 11283  0189  0020               	movlb	0	; select bank0
 11284  018A  0820               	movf	?___wmul,w
 11285  018B  0022               	movlb	2	; select bank2
 11286  018C  01DC               	clrf	(_Load^(0+256)+35)
 11287  018D  07DC               	addwf	(_Load^(0+256)+35),f
 11288                           
 11289                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11290  018E  299B               	goto	l8292
 11291  018F                     l8288:	
 11292  018F  0020               	movlb	0	; select bank0
 11293  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11294  0191  3A01               	xorlw	1
 11295  0192  1D03               	skipz
 11296  0193  299B               	goto	l8292
 11297                           
 11298                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.8*65) + Load.TotalLoad;
 11299  0194  0022               	movlb	2	; select bank2
 11300  0195  0842               	movf	(_Load^(0+256)+9),w
 11301  0196  3E75               	addlw	117
 11302  0197  00DC               	movwf	(_Load^(0+256)+35)
 11303  0198  3000               	movlw	0
 11304  0199  3D43               	addwfc	((_Load+1)^(0+256)+9),w
 11305  019A  00DD               	movwf	((_Load+1)^(0+256)+35)
 11306  019B                     l8292:	
 11307                           
 11308                           ;OverLoad_B1.c: 137: }
 11309                           ;OverLoad_B1.c: 138: }
 11310                           ;OverLoad_B1.c: 139: }
 11311                           ;OverLoad_B1.c: 140: }
 11312                           ;OverLoad_B1.c: 141: }
 11313                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11314  019B  0022               	movlb	2	; select bank2
 11315  019C  085D               	movf	((_Load+1)^(0+256)+35),w
 11316  019D  0259               	subwf	((_Load+1)^(0+256)+31),w
 11317  019E  1D03               	skipz
 11318  019F  29A2               	goto	u8535
 11319  01A0  085C               	movf	(_Load^(0+256)+35),w
 11320  01A1  0258               	subwf	(_Load^(0+256)+31),w
 11321  01A2                     u8535:	
 11322  01A2  1C03               	skipc
 11323  01A3  29C1               	goto	l8308
 11324                           
 11325                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11326  01A4  0020               	movlb	0	; select bank0
 11327  01A5  082F               	movf	Load_Main@LightsCount,w
 11328  01A6  3A01               	xorlw	1
 11329  01A7  1903               	skipnz
 11330  01A8  29AB               	goto	l8298
 11331  01A9  3003               	movlw	3
 11332  01AA  29AC               	goto	L8
 11333  01AB                     l8298:	
 11334  01AB  3002               	movlw	2
 11335  01AC                     L8:	
 11336  01AC  00AA               	movwf	_Load_Main$3999
 11337  01AD  3000               	movlw	0
 11338  01AE  00AB               	movwf	_Load_Main$3999+1
 11339  01AF  082A               	movf	_Load_Main$3999,w
 11340  01B0  00A8               	movwf	??_Load_Main
 11341  01B1  0828               	movf	??_Load_Main,w
 11342  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11343                           
 11344                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11345  01B3  3001               	movlw	1
 11346  01B4  00A8               	movwf	??_Load_Main
 11347  01B5  0828               	movf	??_Load_Main,w
 11348  01B6  0022               	movlb	2	; select bank2
 11349  01B7  07DF               	addwf	(_Load^(0+256)+38),f
 11350                           
 11351                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11352  01B8  085F               	movf	(_Load^(0+256)+38),w
 11353  01B9  0020               	movlb	0	; select bank0
 11354  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11355  01BB  1803               	skipnc
 11356  01BC  0008               	return
 11357                           
 11358                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11359  01BD  0022               	movlb	2	; select bank2
 11360  01BE  01DF               	clrf	(_Load^(0+256)+38)
 11361                           
 11362                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11363  01BF  16B9               	bsf	_Load^(0+256),5
 11364                           
 11365                           ;OverLoad_B1.c: 170: }
 11366                           ;OverLoad_B1.c: 171: } else {
 11367  01C0  0008               	return
 11368  01C1                     l8308:	
 11369                           
 11370                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11371  01C1  01DF               	clrf	(_Load^(0+256)+38)
 11372                           
 11373                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11374  01C2  1DB9               	btfss	_Load^(0+256),3
 11375  01C3  0008               	return
 11376                           
 11377                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11378  01C4  3001               	movlw	1
 11379  01C5  0020               	movlb	0	; select bank0
 11380  01C6  00A8               	movwf	??_Load_Main
 11381  01C7  0828               	movf	??_Load_Main,w
 11382  01C8  0022               	movlb	2	; select bank2
 11383  01C9  07E0               	addwf	(_Load^(0+256)+39),f
 11384                           
 11385                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11386  01CA  3003               	movlw	3
 11387  01CB  0260               	subwf	(_Load^(0+256)+39),w
 11388  01CC  1C03               	skipc
 11389  01CD  0008               	return
 11390                           
 11391                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11392  01CE  01E0               	clrf	(_Load^(0+256)+39)
 11393                           
 11394                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11395  01CF  17B9               	bsf	_Load^(0+256),7
 11396                           
 11397                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11398  01D0  11B9               	bcf	_Load^(0+256),3
 11399                           
 11400                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11401  01D1  01DE               	clrf	(_Load^(0+256)+37)
 11402                           
 11403                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11404  01D2  0859               	movf	((_Load+1)^(0+256)+31),w
 11405  01D3  01C3               	clrf	((_Load+1)^(0+256)+9)
 11406  01D4  07C3               	addwf	((_Load+1)^(0+256)+9),f
 11407  01D5  0858               	movf	(_Load^(0+256)+31),w
 11408  01D6  01C2               	clrf	(_Load^(0+256)+9)
 11409  01D7  07C2               	addwf	(_Load^(0+256)+9),f
 11410                           
 11411                           ;OverLoad_B1.c: 184: }
 11412                           ;OverLoad_B1.c: 185: }
 11413                           ;OverLoad_B1.c: 208: }
 11414                           ;OverLoad_B1.c: 209: }
 11415                           ;OverLoad_B1.c: 210: }
 11416                           ;OverLoad_B1.c: 211: } else {
 11417  01D8  0008               	return
 11418  01D9                     l1650:	
 11419                           
 11420                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11421  01D9  1639               	bsf	_Load^(0+256),4
 11422                           
 11423                           ;OverLoad_B1.c: 213: }
 11424                           ;OverLoad_B1.c: 214: } else {
 11425  01DA  0008               	return
 11426  01DB                     l1649:	
 11427                           
 11428                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11429  01DB  1D39               	btfss	_Load^(0+256),2
 11430  01DC  29EE               	goto	l8344
 11431                           
 11432                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11433  01DD  1139               	bcf	_Load^(0+256),2
 11434                           
 11435                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11436  01DE  1239               	bcf	_Load^(0+256),4
 11437                           
 11438                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11439  01DF  01BA               	clrf	(_Load^(0+256)+1)
 11440  01E0  01BB               	clrf	((_Load+1)^(0+256)+1)
 11441                           
 11442                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11443  01E1  319E  262E  3180   	fcall	_setLoad_AH_AL_Restore
 11444                           
 11445                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11446  01E4  0022               	movlb	2	; select bank2
 11447  01E5  01DF               	clrf	(_Load^(0+256)+38)
 11448                           
 11449                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11450  01E6  01E0               	clrf	(_Load^(0+256)+39)
 11451                           
 11452                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11453  01E7  01BE               	clrf	(_Load^(0+256)+5)
 11454  01E8  01BF               	clrf	((_Load+1)^(0+256)+5)
 11455                           
 11456                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11457  01E9  01C0               	clrf	(_Load^(0+256)+7)
 11458  01EA  01C1               	clrf	((_Load+1)^(0+256)+7)
 11459                           
 11460                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11461  01EB  11B9               	bcf	_Load^(0+256),3
 11462                           
 11463                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11464  01EC  01DE               	clrf	(_Load^(0+256)+37)
 11465                           
 11466                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11467  01ED  13B9               	bcf	_Load^(0+256),7
 11468  01EE                     l8344:	
 11469                           
 11470                           ;OverLoad_B1.c: 257: }
 11471                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11472  01EE  1EB9               	btfss	_Load^(0+256),5
 11473  01EF  0008               	return
 11474                           
 11475                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11476  01F0  3001               	movlw	1
 11477  01F1  07BC               	addwf	(_Load^(0+256)+3),f
 11478  01F2  3000               	movlw	0
 11479  01F3  3DBD               	addwfc	((_Load+1)^(0+256)+3),f
 11480                           
 11481                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11482  01F4  3001               	movlw	1
 11483  01F5  023D               	subwf	((_Load+1)^(0+256)+3),w
 11484  01F6  30F4               	movlw	244
 11485  01F7  1903               	skipnz
 11486  01F8  023C               	subwf	(_Load^(0+256)+3),w
 11487  01F9  1C03               	skipc
 11488  01FA  0008               	return
 11489                           
 11490                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11491  01FB  01BC               	clrf	(_Load^(0+256)+3)
 11492  01FC  01BD               	clrf	((_Load+1)^(0+256)+3)
 11493                           
 11494                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11495  01FD  12B9               	bcf	_Load^(0+256),5
 11496                           
 11497                           ;OverLoad_B1.c: 263: }
 11498                           ;OverLoad_B1.c: 264: }
 11499                           ;OverLoad_B1.c: 265: }
 11500                           ;OverLoad_B1.c: 266: } else {
 11501  01FE  0008               	return
 11502  01FF                     l1639:	
 11503                           
 11504                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11505  01FF  0021               	movlb	1	; select bank1
 11506  0200  1C2F               	btfss	_myMain^(0+128),0
 11507  0201  0008               	return
 11508                           
 11509                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11510  0202  0022               	movlb	2	; select bank2
 11511  0203  1439               	bsf	_Load^(0+256),0
 11512  0204  0008               	return
 11513  0205                     __end_of_Load_Main:	
 11514                           
 11515                           	psect	text65
 11516  1A7A                     __ptext65:	
 11517 ;; *************** function _getMain_Lights_Count *****************
 11518 ;; Defined at:
 11519 ;;		line 459 in file "../src/Main_B1.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;		None
 11522 ;; Auto vars:     Size  Location     Type
 11523 ;;  status1         1    1[BANK0 ] unsigned char 
 11524 ;;  count           1    0[BANK0 ] unsigned char 
 11525 ;; Return value:  Size  Location     Type
 11526 ;;                  1    wreg      unsigned char 
 11527 ;; Registers used:
 11528 ;;		wreg, status,2
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;Total ram usage:        2 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; Hardware stack levels required when called:    5
 11541 ;; This function calls:
 11542 ;;		Nothing
 11543 ;; This function is called by:
 11544 ;;		_Load_Main
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           
 11549                           ;psect for function _getMain_Lights_Count
 11550  1A7A                     _getMain_Lights_Count:	
 11551                           
 11552                           ;Main_B1.c: 460: char count = 0;
 11553                           
 11554                           ;incstack = 0
 11555                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11556  1A7A  0020               	movlb	0	; select bank0
 11557  1A7B  01A0               	clrf	getMain_Lights_Count@count
 11558                           
 11559                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11560  1A7C  3000               	movlw	0
 11561  1A7D  0021               	movlb	1	; select bank1
 11562  1A7E  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11563  1A7F  3001               	movlw	1
 11564  1A80  0020               	movlb	0	; select bank0
 11565  1A81  00A1               	movwf	getMain_Lights_Count@status1
 11566                           
 11567                           ;Main_B1.c: 487: return count = status1;
 11568  1A82  0821               	movf	getMain_Lights_Count@status1,w
 11569  1A83  00A0               	movwf	getMain_Lights_Count@count
 11570  1A84  0008               	return
 11571  1A85                     __end_of_getMain_Lights_Count:	
 11572                           
 11573                           	psect	text66
 11574  1A42                     __ptext66:	
 11575 ;; *************** function _getDimmer_Load_Status *****************
 11576 ;; Defined at:
 11577 ;;		line 1212 in file "../src/Dimmer_B1.c"
 11578 ;; Parameters:    Size  Location     Type
 11579 ;;		None
 11580 ;; Auto vars:     Size  Location     Type
 11581 ;;  status          1    0[BANK0 ] unsigned char 
 11582 ;; Return value:  Size  Location     Type
 11583 ;;                  1    wreg      unsigned char 
 11584 ;; Registers used:
 11585 ;;		wreg, status,2
 11586 ;; Tracked objects:
 11587 ;;		On entry : 0/0
 11588 ;;		On exit  : 0/0
 11589 ;;		Unchanged: 0/0
 11590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11594 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;Total ram usage:        1 bytes
 11596 ;; Hardware stack levels used:    1
 11597 ;; Hardware stack levels required when called:    5
 11598 ;; This function calls:
 11599 ;;		Nothing
 11600 ;; This function is called by:
 11601 ;;		_Load_Main
 11602 ;; This function uses a non-reentrant model
 11603 ;;
 11604                           
 11605                           
 11606                           ;psect for function _getDimmer_Load_Status
 11607  1A42                     _getDimmer_Load_Status:	
 11608                           
 11609                           ;Dimmer_B1.c: 1213: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11610                           
 11611                           ;incstack = 0
 11612                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11613  1A42  3000               	movlw	0
 11614  1A43  0022               	movlb	2	; select bank2
 11615  1A44  192C               	btfsc	_Dimmer^(0+256),2
 11616  1A45  3001               	movlw	1
 11617  1A46  0020               	movlb	0	; select bank0
 11618  1A47  00A0               	movwf	getDimmer_Load_Status@status
 11619                           
 11620                           ;Dimmer_B1.c: 1214: return status;
 11621  1A48  0820               	movf	getDimmer_Load_Status@status,w
 11622  1A49  0008               	return
 11623  1A4A                     __end_of_getDimmer_Load_Status:	
 11624                           
 11625                           	psect	text67
 11626  1A3A                     __ptext67:	
 11627 ;; *************** function _getDimmer_LoadGO *****************
 11628 ;; Defined at:
 11629 ;;		line 1206 in file "../src/Dimmer_B1.c"
 11630 ;; Parameters:    Size  Location     Type
 11631 ;;		None
 11632 ;; Auto vars:     Size  Location     Type
 11633 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11634 ;; Return value:  Size  Location     Type
 11635 ;;                  1    wreg      unsigned char 
 11636 ;; Registers used:
 11637 ;;		wreg, status,2
 11638 ;; Tracked objects:
 11639 ;;		On entry : 0/0
 11640 ;;		On exit  : 0/0
 11641 ;;		Unchanged: 0/0
 11642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;Total ram usage:        1 bytes
 11648 ;; Hardware stack levels used:    1
 11649 ;; Hardware stack levels required when called:    5
 11650 ;; This function calls:
 11651 ;;		Nothing
 11652 ;; This function is called by:
 11653 ;;		_Load_Main
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           
 11658                           ;psect for function _getDimmer_LoadGO
 11659  1A3A                     _getDimmer_LoadGO:	
 11660                           
 11661                           ;Dimmer_B1.c: 1207: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11662                           
 11663                           ;incstack = 0
 11664                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11665  1A3A  3000               	movlw	0
 11666  1A3B  0022               	movlb	2	; select bank2
 11667  1A3C  18AC               	btfsc	_Dimmer^(0+256),1
 11668  1A3D  3001               	movlw	1
 11669  1A3E  0020               	movlb	0	; select bank0
 11670  1A3F  00A0               	movwf	getDimmer_LoadGO@loadgo
 11671                           
 11672                           ;Dimmer_B1.c: 1208: return loadgo;
 11673  1A40  0820               	movf	getDimmer_LoadGO@loadgo,w
 11674  1A41  0008               	return
 11675  1A42                     __end_of_getDimmer_LoadGO:	
 11676                           
 11677                           	psect	text68
 11678  1C7B                     __ptext68:	
 11679 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11680 ;; Defined at:
 11681 ;;		line 320 in file "../src/Dimmer_B1.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;		None
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  status          1    0[BANK0 ] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;                  1    wreg      unsigned char 
 11688 ;; Registers used:
 11689 ;;		wreg, status,2, status,0
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;Total ram usage:        1 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    5
 11702 ;; This function calls:
 11703 ;;		Nothing
 11704 ;; This function is called by:
 11705 ;;		_Load_Main
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           
 11710                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11711  1C7B                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11712                           
 11713                           ;Dimmer_B1.c: 321: char status = 0;
 11714                           
 11715                           ;incstack = 0
 11716                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11717  1C7B  0020               	movlb	0	; select bank0
 11718  1C7C  01A0               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11719                           
 11720                           ;Dimmer_B1.c: 332: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11721  1C7D  3000               	movlw	0
 11722  1C7E  0021               	movlb	1	; select bank1
 11723  1C7F  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 11724  1C80  3001               	movlw	1
 11725  1C81  0020               	movlb	0	; select bank0
 11726  1C82  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11727                           
 11728                           ;Dimmer_B1.c: 336: if (status == 0) {
 11729  1C83  08A0               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11730  1C84  1D03               	skipz
 11731  1C85  2C8C               	goto	l7354
 11732                           
 11733                           ;Dimmer_B1.c: 346: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11734  1C86  3000               	movlw	0
 11735  1C87  0021               	movlb	1	; select bank1
 11736  1C88  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 11737  1C89  3001               	movlw	1
 11738  1C8A  0020               	movlb	0	; select bank0
 11739  1C8B  00A0               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11740  1C8C                     l7354:	
 11741                           
 11742                           ;Dimmer_B1.c: 348: }
 11743                           ;Dimmer_B1.c: 350: return status;
 11744  1C8C  0820               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11745  1C8D  0008               	return
 11746  1C8E                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11747                           
 11748                           	psect	text69
 11749  1000                     __ptext69:	
 11750 ;; *************** function ___wmul *****************
 11751 ;; Defined at:
 11752 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11753 ;; Parameters:    Size  Location     Type
 11754 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11755 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;  product         2    4[BANK0 ] unsigned int 
 11758 ;; Return value:  Size  Location     Type
 11759 ;;                  2    0[BANK0 ] unsigned int 
 11760 ;; Registers used:
 11761 ;;		wreg, status,2, status,0
 11762 ;; Tracked objects:
 11763 ;;		On entry : 0/0
 11764 ;;		On exit  : 0/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11767 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;Total ram usage:        6 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; Hardware stack levels required when called:    5
 11774 ;; This function calls:
 11775 ;;		Nothing
 11776 ;; This function is called by:
 11777 ;;		_Load_Main
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           
 11782                           ;psect for function ___wmul
 11783  1000                     ___wmul:	
 11784                           
 11785                           ;incstack = 0
 11786                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11787  1000  0020               	movlb	0	; select bank0
 11788  1001  01A4               	clrf	___wmul@product
 11789  1002  01A5               	clrf	___wmul@product+1
 11790  1003                     l7922:	
 11791  1003  1C20               	btfss	___wmul@multiplier,0
 11792  1004  2809               	goto	l2729
 11793  1005  0822               	movf	___wmul@multiplicand,w
 11794  1006  07A4               	addwf	___wmul@product,f
 11795  1007  0823               	movf	___wmul@multiplicand+1,w
 11796  1008  3DA5               	addwfc	___wmul@product+1,f
 11797  1009                     l2729:	
 11798  1009  3001               	movlw	1
 11799  100A                     u7815:	
 11800  100A  35A2               	lslf	___wmul@multiplicand,f
 11801  100B  0DA3               	rlf	___wmul@multiplicand+1,f
 11802  100C  0B89               	decfsz	9,f
 11803  100D  280A               	goto	u7815
 11804  100E  3001               	movlw	1
 11805  100F                     u7825:	
 11806  100F  36A1               	lsrf	___wmul@multiplier+1,f
 11807  1010  0CA0               	rrf	___wmul@multiplier,f
 11808  1011  0B89               	decfsz	9,f
 11809  1012  280F               	goto	u7825
 11810  1013  0821               	movf	___wmul@multiplier+1,w
 11811  1014  0420               	iorwf	___wmul@multiplier,w
 11812  1015  1D03               	skipz
 11813  1016  2803               	goto	l7922
 11814  1017  0825               	movf	___wmul@product+1,w
 11815  1018  01A1               	clrf	?___wmul+1
 11816  1019  07A1               	addwf	?___wmul+1,f
 11817  101A  0824               	movf	___wmul@product,w
 11818  101B  01A0               	clrf	?___wmul
 11819  101C  07A0               	addwf	?___wmul,f
 11820  101D  0008               	return
 11821  101E                     __end_of___wmul:	
 11822                           
 11823                           	psect	text70
 11824  1114                     __ptext70:	
 11825 ;; *************** function ___lwdiv *****************
 11826 ;; Defined at:
 11827 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11828 ;; Parameters:    Size  Location     Type
 11829 ;;  divisor         2    0[BANK0 ] unsigned int 
 11830 ;;  dividend        2    2[BANK0 ] unsigned int 
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;  quotient        2    5[BANK0 ] unsigned int 
 11833 ;;  counter         1    7[BANK0 ] unsigned char 
 11834 ;; Return value:  Size  Location     Type
 11835 ;;                  2    0[BANK0 ] unsigned int 
 11836 ;; Registers used:
 11837 ;;		wreg, status,2, status,0
 11838 ;; Tracked objects:
 11839 ;;		On entry : 0/0
 11840 ;;		On exit  : 0/0
 11841 ;;		Unchanged: 0/0
 11842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11843 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11845 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11846 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11847 ;;Total ram usage:        8 bytes
 11848 ;; Hardware stack levels used:    1
 11849 ;; Hardware stack levels required when called:    5
 11850 ;; This function calls:
 11851 ;;		Nothing
 11852 ;; This function is called by:
 11853 ;;		_Load_Main
 11854 ;;		_setTemp_Main
 11855 ;;		_setRF_Main
 11856 ;; This function uses a non-reentrant model
 11857 ;;
 11858                           
 11859                           
 11860                           ;psect for function ___lwdiv
 11861  1114                     ___lwdiv:	
 11862                           
 11863                           ;incstack = 0
 11864                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11865  1114  0020               	movlb	0	; select bank0
 11866  1115  01A5               	clrf	___lwdiv@quotient
 11867  1116  01A6               	clrf	___lwdiv@quotient+1
 11868  1117  0821               	movf	___lwdiv@divisor+1,w
 11869  1118  0420               	iorwf	___lwdiv@divisor,w
 11870  1119  1903               	skipnz
 11871  111A  2944               	goto	l7290
 11872  111B  01A7               	clrf	___lwdiv@counter
 11873  111C  0AA7               	incf	___lwdiv@counter,f
 11874  111D                     l7278:	
 11875  111D  1BA1               	btfsc	___lwdiv@divisor+1,7
 11876  111E  2929               	goto	l7280
 11877  111F  3001               	movlw	1
 11878  1120                     u6685:	
 11879  1120  35A0               	lslf	___lwdiv@divisor,f
 11880  1121  0DA1               	rlf	___lwdiv@divisor+1,f
 11881  1122  0B89               	decfsz	9,f
 11882  1123  2920               	goto	u6685
 11883  1124  3001               	movlw	1
 11884  1125  00A4               	movwf	??___lwdiv
 11885  1126  0824               	movf	??___lwdiv,w
 11886  1127  07A7               	addwf	___lwdiv@counter,f
 11887  1128  291D               	goto	l7278
 11888  1129                     l7280:	
 11889  1129  3001               	movlw	1
 11890  112A                     u6705:	
 11891  112A  35A5               	lslf	___lwdiv@quotient,f
 11892  112B  0DA6               	rlf	___lwdiv@quotient+1,f
 11893  112C  0B89               	decfsz	9,f
 11894  112D  292A               	goto	u6705
 11895  112E  0821               	movf	___lwdiv@divisor+1,w
 11896  112F  0223               	subwf	___lwdiv@dividend+1,w
 11897  1130  1D03               	skipz
 11898  1131  2934               	goto	u6715
 11899  1132  0820               	movf	___lwdiv@divisor,w
 11900  1133  0222               	subwf	___lwdiv@dividend,w
 11901  1134                     u6715:	
 11902  1134  1C03               	skipc
 11903  1135  293B               	goto	l7286
 11904  1136  0820               	movf	___lwdiv@divisor,w
 11905  1137  02A2               	subwf	___lwdiv@dividend,f
 11906  1138  0821               	movf	___lwdiv@divisor+1,w
 11907  1139  3BA3               	subwfb	___lwdiv@dividend+1,f
 11908  113A  1425               	bsf	___lwdiv@quotient,0
 11909  113B                     l7286:	
 11910  113B  3001               	movlw	1
 11911  113C                     u6725:	
 11912  113C  36A1               	lsrf	___lwdiv@divisor+1,f
 11913  113D  0CA0               	rrf	___lwdiv@divisor,f
 11914  113E  0B89               	decfsz	9,f
 11915  113F  293C               	goto	u6725
 11916  1140  3001               	movlw	1
 11917  1141  02A7               	subwf	___lwdiv@counter,f
 11918  1142  1D03               	btfss	3,2
 11919  1143  2929               	goto	l7280
 11920  1144                     l7290:	
 11921  1144  0826               	movf	___lwdiv@quotient+1,w
 11922  1145  01A1               	clrf	?___lwdiv+1
 11923  1146  07A1               	addwf	?___lwdiv+1,f
 11924  1147  0825               	movf	___lwdiv@quotient,w
 11925  1148  01A0               	clrf	?___lwdiv
 11926  1149  07A0               	addwf	?___lwdiv,f
 11927  114A  0008               	return
 11928  114B                     __end_of___lwdiv:	
 11929                           
 11930                           	psect	text71
 11931  19C9                     __ptext71:	
 11932 ;; *************** function _Load_Initialization *****************
 11933 ;; Defined at:
 11934 ;;		line 9 in file "../src/OverLoad_B1.c"
 11935 ;; Parameters:    Size  Location     Type
 11936 ;;		None
 11937 ;; Auto vars:     Size  Location     Type
 11938 ;;		None
 11939 ;; Return value:  Size  Location     Type
 11940 ;;		None               void
 11941 ;; Registers used:
 11942 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11943 ;; Tracked objects:
 11944 ;;		On entry : 0/0
 11945 ;;		On exit  : 0/0
 11946 ;;		Unchanged: 0/0
 11947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;Total ram usage:        0 bytes
 11953 ;; Hardware stack levels used:    1
 11954 ;; Hardware stack levels required when called:    6
 11955 ;; This function calls:
 11956 ;;		_setLoad_AH_AL_Restore
 11957 ;; This function is called by:
 11958 ;;		_main
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           
 11963                           ;psect for function _Load_Initialization
 11964  19C9                     _Load_Initialization:	
 11965                           
 11966                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11967                           
 11968                           ;incstack = 0
 11969                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11970  19C9  319E  262E         	fcall	_setLoad_AH_AL_Restore
 11971  19CB  0008               	return
 11972  19CC                     __end_of_Load_Initialization:	
 11973                           
 11974                           	psect	text72
 11975  1E2E                     __ptext72:	
 11976 ;; *************** function _setLoad_AH_AL_Restore *****************
 11977 ;; Defined at:
 11978 ;;		line 294 in file "../src/OverLoad_B1.c"
 11979 ;; Parameters:    Size  Location     Type
 11980 ;;		None
 11981 ;; Auto vars:     Size  Location     Type
 11982 ;;  i               1    1[BANK0 ] unsigned char 
 11983 ;; Return value:  Size  Location     Type
 11984 ;;		None               void
 11985 ;; Registers used:
 11986 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;Total ram usage:        2 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    5
 11999 ;; This function calls:
 12000 ;;		Nothing
 12001 ;; This function is called by:
 12002 ;;		_Load_Initialization
 12003 ;;		_Load_Main
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           
 12008                           ;psect for function _setLoad_AH_AL_Restore
 12009  1E2E                     _setLoad_AH_AL_Restore:	
 12010                           
 12011                           ;OverLoad_B1.c: 295: char i;
 12012                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12013                           
 12014                           ;incstack = 0
 12015                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12016  1E2E  0020               	movlb	0	; select bank0
 12017  1E2F  01A1               	clrf	setLoad_AH_AL_Restore@i
 12018  1E30                     L9:	
 12019  1E30  3005               	movlw	5
 12020  1E31  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12021  1E32  1803               	btfsc	3,0
 12022  1E33  0008               	return
 12023                           
 12024                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12025  1E34  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12026  1E35  3E44               	addlw	(_Load+11)& (0+255)
 12027  1E36  0086               	movwf	6
 12028  1E37  3001               	movlw	1	; select bank2/3
 12029  1E38  0087               	movwf	7
 12030  1E39  3000               	movlw	0
 12031  1E3A  3FC0               	movwi [0]fsr1
 12032  1E3B  3FC1               	movwi [1]fsr1
 12033                           
 12034                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12035  1E3C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12036  1E3D  3E4E               	addlw	(_Load+21)& (0+255)
 12037  1E3E  0086               	movwf	6
 12038  1E3F  3001               	movlw	1	; select bank2/3
 12039  1E40  0087               	movwf	7
 12040  1E41  30FF               	movlw	255
 12041  1E42  3FC0               	movwi [0]fsr1
 12042  1E43  30FF               	movlw	255
 12043  1E44  3FC1               	movwi [1]fsr1
 12044  1E45  3001               	movlw	1
 12045  1E46  00A0               	movwf	??_setLoad_AH_AL_Restore
 12046  1E47  0820               	movf	??_setLoad_AH_AL_Restore,w
 12047  1E48  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12048  1E49  2E30               	goto	L9
 12049  1E4A                     __end_of_setLoad_AH_AL_Restore:	
 12050                           
 12051                           	psect	text73
 12052  19E4                     __ptext73:	
 12053 ;; *************** function _LED_Main *****************
 12054 ;; Defined at:
 12055 ;;		line 47 in file "../src/LED_B1.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;		None
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;		None
 12060 ;; Return value:  Size  Location     Type
 12061 ;;		None               void
 12062 ;; Registers used:
 12063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;Total ram usage:        0 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    7
 12076 ;; This function calls:
 12077 ;;		_setLED_Main
 12078 ;; This function is called by:
 12079 ;;		_main
 12080 ;; This function uses a non-reentrant model
 12081 ;;
 12082                           
 12083                           
 12084                           ;psect for function _LED_Main
 12085  19E4                     _LED_Main:	
 12086                           
 12087                           ;LED_B1.c: 67: setLED_Main(99);
 12088                           
 12089                           ;incstack = 0
 12090                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12091  19E4  3063               	movlw	99
 12092  19E5  3190  20DE         	fcall	_setLED_Main
 12093  19E7  0008               	return
 12094  19E8                     __end_of_LED_Main:	
 12095                           
 12096                           	psect	text74
 12097  10DE                     __ptext74:	
 12098 ;; *************** function _setLED_Main *****************
 12099 ;; Defined at:
 12100 ;;		line 229 in file "../src/LED_B1.c"
 12101 ;; Parameters:    Size  Location     Type
 12102 ;;  led             1    wreg     unsigned char 
 12103 ;; Auto vars:     Size  Location     Type
 12104 ;;  led             1    4[BANK0 ] unsigned char 
 12105 ;; Return value:  Size  Location     Type
 12106 ;;		None               void
 12107 ;; Registers used:
 12108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12109 ;; Tracked objects:
 12110 ;;		On entry : 0/0
 12111 ;;		On exit  : 0/0
 12112 ;;		Unchanged: 0/0
 12113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12118 ;;Total ram usage:        3 bytes
 12119 ;; Hardware stack levels used:    1
 12120 ;; Hardware stack levels required when called:    6
 12121 ;; This function calls:
 12122 ;;		_LedPointSelect
 12123 ;; This function is called by:
 12124 ;;		_LED_Main
 12125 ;; This function uses a non-reentrant model
 12126 ;;
 12127                           
 12128                           
 12129                           ;psect for function _setLED_Main
 12130  10DE                     _setLED_Main:	
 12131                           
 12132                           ;incstack = 0
 12133                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12134                           ;setLED_Main@led stored from wreg
 12135  10DE  0020               	movlb	0	; select bank0
 12136  10DF  00A4               	movwf	setLED_Main@led
 12137                           
 12138                           ;LED_B1.c: 230: LedPointSelect(led);
 12139  10E0  0824               	movf	setLED_Main@led,w
 12140  10E1  319A  22D7  3190   	fcall	_LedPointSelect
 12141                           
 12142                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12143  10E4  0021               	movlb	1	; select bank1
 12144  10E5  084D               	movf	_LED^(0+128),w
 12145  10E6  0086               	movwf	6
 12146  10E7  3001               	movlw	1	; select bank2/3
 12147  10E8  0087               	movwf	7
 12148  10E9  1C81               	btfss	1,1
 12149  10EA  0008               	return
 12150                           
 12151                           ;LED_B1.c: 232: LED->Time++;
 12152  10EB  0A4D               	incf	_LED^(0+128),w
 12153  10EC  0086               	movwf	6
 12154  10ED  3001               	movlw	1	; select bank2/3
 12155  10EE  0087               	movwf	7
 12156  10EF  3001               	movlw	1
 12157  10F0  0781               	addwf	1,f
 12158  10F1  3141               	addfsr 1,1
 12159  10F2  1803               	skipnc
 12160  10F3  0A81               	incf	1,f
 12161                           
 12162                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12163  10F4  0A4D               	incf	_LED^(0+128),w
 12164  10F5  0086               	movwf	6
 12165  10F6  3001               	movlw	1	; select bank2/3
 12166  10F7  0087               	movwf	7
 12167  10F8  3F40               	moviw [0]fsr1
 12168  10F9  0020               	movlb	0	; select bank0
 12169  10FA  00A2               	movwf	??_setLED_Main
 12170  10FB  3F41               	moviw [1]fsr1
 12171  10FC  00A3               	movwf	??_setLED_Main+1
 12172  10FD  3000               	movlw	0
 12173  10FE  0223               	subwf	??_setLED_Main+1,w
 12174  10FF  3019               	movlw	25
 12175  1100  1903               	skipnz
 12176  1101  0222               	subwf	??_setLED_Main,w
 12177  1102  1C03               	skipc
 12178  1103  0008               	return
 12179                           
 12180                           ;LED_B1.c: 234: LED->Time = 0;
 12181  1104  0021               	movlb	1	; select bank1
 12182  1105  0A4D               	incf	_LED^(0+128),w
 12183  1106  0086               	movwf	6
 12184  1107  3001               	movlw	1	; select bank2/3
 12185  1108  0087               	movwf	7
 12186  1109  3000               	movlw	0
 12187  110A  3FC0               	movwi [0]fsr1
 12188  110B  3FC1               	movwi [1]fsr1
 12189                           
 12190                           ;LED_B1.c: 252: if (led == 99) {
 12191  110C  0020               	movlb	0	; select bank0
 12192  110D  0824               	movf	setLED_Main@led,w
 12193  110E  3A63               	xorlw	99
 12194  110F  1D03               	skipz
 12195  1110  0008               	return
 12196                           
 12197                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12198  1111  3020               	movlw	32
 12199  1112  068D               	xorwf	13,f
 12200  1113  0008               	return
 12201  1114                     __end_of_setLED_Main:	
 12202                           
 12203                           	psect	text75
 12204  19E0                     __ptext75:	
 12205 ;; *************** function _LED_Initialization *****************
 12206 ;; Defined at:
 12207 ;;		line 31 in file "../src/LED_B1.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;		None
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;		None
 12212 ;; Return value:  Size  Location     Type
 12213 ;;		None               void
 12214 ;; Registers used:
 12215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;Total ram usage:        0 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; Hardware stack levels required when called:    8
 12228 ;; This function calls:
 12229 ;;		_setLED_Initialization
 12230 ;; This function is called by:
 12231 ;;		_main
 12232 ;; This function uses a non-reentrant model
 12233 ;;
 12234                           
 12235                           
 12236                           ;psect for function _LED_Initialization
 12237  19E0                     _LED_Initialization:	
 12238                           
 12239                           ;LED_B1.c: 42: setLED_Initialization(99);
 12240                           
 12241                           ;incstack = 0
 12242                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12243  19E0  3063               	movlw	99
 12244  19E1  319C  241F         	fcall	_setLED_Initialization
 12245  19E3  0008               	return
 12246  19E4                     __end_of_LED_Initialization:	
 12247                           
 12248                           	psect	text76
 12249  1C1F                     __ptext76:	
 12250 ;; *************** function _setLED_Initialization *****************
 12251 ;; Defined at:
 12252 ;;		line 74 in file "../src/LED_B1.c"
 12253 ;; Parameters:    Size  Location     Type
 12254 ;;  led             1    wreg     unsigned char 
 12255 ;; Auto vars:     Size  Location     Type
 12256 ;;  led             1    4[BANK0 ] unsigned char 
 12257 ;; Return value:  Size  Location     Type
 12258 ;;		None               void
 12259 ;; Registers used:
 12260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12261 ;; Tracked objects:
 12262 ;;		On entry : 0/0
 12263 ;;		On exit  : 0/0
 12264 ;;		Unchanged: 0/0
 12265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;Total ram usage:        1 bytes
 12271 ;; Hardware stack levels used:    1
 12272 ;; Hardware stack levels required when called:    7
 12273 ;; This function calls:
 12274 ;;		_LedPointSelect
 12275 ;;		_setLED
 12276 ;; This function is called by:
 12277 ;;		_LED_Initialization
 12278 ;; This function uses a non-reentrant model
 12279 ;;
 12280                           
 12281                           
 12282                           ;psect for function _setLED_Initialization
 12283  1C1F                     _setLED_Initialization:	
 12284                           
 12285                           ;incstack = 0
 12286                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12287                           ;setLED_Initialization@led stored from wreg
 12288  1C1F  0020               	movlb	0	; select bank0
 12289  1C20  00A4               	movwf	setLED_Initialization@led
 12290                           
 12291                           ;LED_B1.c: 75: LedPointSelect(led);
 12292  1C21  0824               	movf	setLED_Initialization@led,w
 12293  1C22  319A  22D7  319C   	fcall	_LedPointSelect
 12294                           
 12295                           ;LED_B1.c: 76: LED->Enable = 1;
 12296  1C25  0021               	movlb	1	; select bank1
 12297  1C26  084D               	movf	_LED^(0+128),w
 12298  1C27  0086               	movwf	6
 12299  1C28  3001               	movlw	1	; select bank2/3
 12300  1C29  0087               	movwf	7
 12301  1C2A  1401               	bsf	1,0
 12302                           
 12303                           ;LED_B1.c: 77: setLED(led, 0);
 12304  1C2B  0020               	movlb	0	; select bank0
 12305  1C2C  01A2               	clrf	setLED@command
 12306  1C2D  0824               	movf	setLED_Initialization@led,w
 12307  1C2E  3191  21BC         	fcall	_setLED
 12308  1C30  0008               	return
 12309  1C31                     __end_of_setLED_Initialization:	
 12310                           
 12311                           	psect	text77
 12312  126E                     __ptext77:	
 12313 ;; *************** function _Flash_Memory_Main *****************
 12314 ;; Defined at:
 12315 ;;		line 976 in file "../src/MCU_B1.c"
 12316 ;; Parameters:    Size  Location     Type
 12317 ;;		None
 12318 ;; Auto vars:     Size  Location     Type
 12319 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12320 ;; Return value:  Size  Location     Type
 12321 ;;		None               void
 12322 ;; Registers used:
 12323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12324 ;; Tracked objects:
 12325 ;;		On entry : 0/0
 12326 ;;		On exit  : 0/0
 12327 ;;		Unchanged: 0/0
 12328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;Total ram usage:        3 bytes
 12334 ;; Hardware stack levels used:    1
 12335 ;; Hardware stack levels required when called:    8
 12336 ;; This function calls:
 12337 ;;		_Flash_Memory_Modify
 12338 ;;		_getAll_Sw_KeyStatus
 12339 ;;		_getMain_All_LightsStatus
 12340 ;; This function is called by:
 12341 ;;		_main
 12342 ;; This function uses a non-reentrant model
 12343 ;;
 12344                           
 12345                           
 12346                           ;psect for function _Flash_Memory_Main
 12347  126E                     _Flash_Memory_Main:	
 12348                           
 12349                           ;MCU_B1.c: 977: char key_Status = 0;
 12350                           
 12351                           ;incstack = 0
 12352                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12353  126E  0020               	movlb	0	; select bank0
 12354  126F  01A7               	clrf	Flash_Memory_Main@key_Status
 12355                           
 12356                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12357  1270  319B  23B7  3192   	fcall	_getAll_Sw_KeyStatus
 12358  1273  0020               	movlb	0	; select bank0
 12359  1274  00A6               	movwf	??_Flash_Memory_Main
 12360  1275  0826               	movf	??_Flash_Memory_Main,w
 12361  1276  00A7               	movwf	Flash_Memory_Main@key_Status
 12362                           
 12363                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12364  1277  0024               	movlb	4	; select bank4
 12365  1278  1C44               	btfss	(_Memory^(0+512)+36),0
 12366  1279  0008               	return
 12367                           
 12368                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12369  127A  0020               	movlb	0	; select bank0
 12370  127B  01A8               	clrf	_Flash_Memory_Main$3164
 12371  127C  319A  2265  3192   	fcall	_getMain_All_LightsStatus
 12372  127F  3800               	iorlw	0
 12373  1280  1D03               	skipz
 12374  1281  2A88               	goto	l8052
 12375  1282  0020               	movlb	0	; select bank0
 12376  1283  08A7               	movf	Flash_Memory_Main@key_Status,f
 12377  1284  1D03               	skipz
 12378  1285  2A88               	goto	l8052
 12379  1286  01A8               	clrf	_Flash_Memory_Main$3164
 12380  1287  0AA8               	incf	_Flash_Memory_Main$3164,f
 12381  1288                     l8052:	
 12382  1288  0020               	movlb	0	; select bank0
 12383  1289  0828               	movf	_Flash_Memory_Main$3164,w
 12384  128A  0024               	movlb	4	; select bank4
 12385  128B  10C4               	bcf	(_Memory^(0+512)+36),1
 12386  128C  1D03               	skipz
 12387  128D  14C4               	bsf	(_Memory^(0+512)+36),1
 12388                           
 12389                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12390  128E  1CC4               	btfss	(_Memory^(0+512)+36),1
 12391  128F  2AA9               	goto	l1261
 12392                           
 12393                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12394  1290  15C4               	bsf	(_Memory^(0+512)+36),3
 12395                           
 12396                           ;MCU_B1.c: 985: Memory.Time++;
 12397  1291  3001               	movlw	1
 12398  1292  07C2               	addwf	(_Memory^(0+512)+34),f
 12399  1293  3000               	movlw	0
 12400  1294  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12401                           
 12402                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12403  1295  3022               	movlw	34
 12404  1296  3E20               	addlw	_Memory& (0+255)
 12405  1297  0086               	movwf	6
 12406  1298  3002               	movlw	2	; select bank4/5
 12407  1299  0087               	movwf	7
 12408  129A  3F40               	moviw [0]fsr1
 12409  129B  3A0A               	xorlw	10
 12410  129C  1D03               	skipz
 12411  129D  2AA0               	goto	u8055
 12412  129E  3F41               	moviw [1]fsr1
 12413  129F  3A00               	xorlw	0
 12414  12A0                     u8055:	
 12415  12A0  1D03               	skipz
 12416  12A1  0008               	return
 12417                           
 12418                           ;MCU_B1.c: 987: Memory.Time = 0;
 12419  12A2  01C2               	clrf	(_Memory^(0+512)+34)
 12420  12A3  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12421                           
 12422                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12423  12A4  1044               	bcf	(_Memory^(0+512)+36),0
 12424                           
 12425                           ;MCU_B1.c: 989: Memory.GO = 0;
 12426  12A5  10C4               	bcf	(_Memory^(0+512)+36),1
 12427                           
 12428                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12429  12A6  318A  22FC         	fcall	_Flash_Memory_Modify
 12430                           
 12431                           ;MCU_B1.c: 991: }
 12432                           ;MCU_B1.c: 992: } else {
 12433  12A8  0008               	return
 12434  12A9                     l1261:	
 12435                           
 12436                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12437  12A9  1DC4               	btfss	(_Memory^(0+512)+36),3
 12438  12AA  0008               	return
 12439                           
 12440                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12441  12AB  11C4               	bcf	(_Memory^(0+512)+36),3
 12442                           
 12443                           ;MCU_B1.c: 995: Memory.Time = 0;
 12444  12AC  01C2               	clrf	(_Memory^(0+512)+34)
 12445  12AD  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12446  12AE  0008               	return
 12447  12AF                     __end_of_Flash_Memory_Main:	
 12448                           
 12449                           	psect	text78
 12450  1BB7                     __ptext78:	
 12451 ;; *************** function _getAll_Sw_KeyStatus *****************
 12452 ;; Defined at:
 12453 ;;		line 279 in file "../src/Switch_B1.c"
 12454 ;; Parameters:    Size  Location     Type
 12455 ;;		None
 12456 ;; Auto vars:     Size  Location     Type
 12457 ;;  status          1    1[BANK0 ] unsigned char 
 12458 ;; Return value:  Size  Location     Type
 12459 ;;                  1    wreg      unsigned char 
 12460 ;; Registers used:
 12461 ;;		wreg, status,2
 12462 ;; Tracked objects:
 12463 ;;		On entry : 0/0
 12464 ;;		On exit  : 0/0
 12465 ;;		Unchanged: 0/0
 12466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12469 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12470 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;Total ram usage:        3 bytes
 12472 ;; Hardware stack levels used:    1
 12473 ;; Hardware stack levels required when called:    5
 12474 ;; This function calls:
 12475 ;;		Nothing
 12476 ;; This function is called by:
 12477 ;;		_Flash_Memory_Main
 12478 ;; This function uses a non-reentrant model
 12479 ;;
 12480                           
 12481                           
 12482                           ;psect for function _getAll_Sw_KeyStatus
 12483  1BB7                     _getAll_Sw_KeyStatus:	
 12484                           
 12485                           ;Switch_B1.c: 280: char status = 0;
 12486                           
 12487                           ;incstack = 0
 12488                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12489  1BB7  0020               	movlb	0	; select bank0
 12490  1BB8  01A1               	clrf	getAll_Sw_KeyStatus@status
 12491                           
 12492                           ;Switch_B1.c: 299: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
 12493  1BB9  01A2               	clrf	_getAll_Sw_KeyStatus$6482
 12494  1BBA  0AA2               	incf	_getAll_Sw_KeyStatus$6482,f
 12495  1BBB  1F0C               	btfss	12,6	;volatile
 12496  1BBC  1A0C               	btfsc	12,4	;volatile
 12497  1BBD  2BC2               	goto	l7606
 12498  1BBE  1C0C               	btfss	12,0	;volatile
 12499  1BBF  1B8C               	btfsc	12,7	;volatile
 12500  1BC0  2BC2               	goto	l7606
 12501  1BC1  01A2               	clrf	_getAll_Sw_KeyStatus$6482
 12502  1BC2                     l7606:	
 12503  1BC2  0822               	movf	_getAll_Sw_KeyStatus$6482,w
 12504  1BC3  00A0               	movwf	??_getAll_Sw_KeyStatus
 12505  1BC4  0820               	movf	??_getAll_Sw_KeyStatus,w
 12506  1BC5  00A1               	movwf	getAll_Sw_KeyStatus@status
 12507                           
 12508                           ;Switch_B1.c: 303: return status;
 12509  1BC6  0821               	movf	getAll_Sw_KeyStatus@status,w
 12510  1BC7  0008               	return
 12511  1BC8                     __end_of_getAll_Sw_KeyStatus:	
 12512                           
 12513                           	psect	text79
 12514  0AFC                     __ptext79:	
 12515 ;; *************** function _Flash_Memory_Modify *****************
 12516 ;; Defined at:
 12517 ;;		line 1053 in file "../src/MCU_B1.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;		None
 12520 ;; Auto vars:     Size  Location     Type
 12521 ;;  i               1    5[BANK0 ] unsigned char 
 12522 ;; Return value:  Size  Location     Type
 12523 ;;		None               void
 12524 ;; Registers used:
 12525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12534 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;Total ram usage:        2 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; Hardware stack levels required when called:    7
 12538 ;; This function calls:
 12539 ;;		_Flash_Memory_Erasing
 12540 ;;		_Flash_Memory_Read
 12541 ;;		_Flash_Memory_Write
 12542 ;;		_setMemory_Data
 12543 ;; This function is called by:
 12544 ;;		_Flash_Memory_Main
 12545 ;; This function uses a non-reentrant model
 12546 ;;
 12547                           
 12548                           
 12549                           ;psect for function _Flash_Memory_Modify
 12550  0AFC                     _Flash_Memory_Modify:	
 12551                           
 12552                           ;MCU_B1.c: 1054: char i = 0;
 12553                           
 12554                           ;incstack = 0
 12555                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12556  0AFC  0020               	movlb	0	; select bank0
 12557  0AFD  01A5               	clrf	Flash_Memory_Modify@i
 12558                           
 12559                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12560  0AFE  01A5               	clrf	Flash_Memory_Modify@i
 12561  0AFF  3020               	movlw	32
 12562  0B00  0225               	subwf	Flash_Memory_Modify@i,w
 12563  0B01  1803               	btfsc	3,0
 12564  0B02  2B18               	goto	l7624
 12565  0B03                     l7618:	
 12566                           
 12567                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12568  0B03  0825               	movf	Flash_Memory_Modify@i,w
 12569  0B04  319D  25AA  318A   	fcall	_Flash_Memory_Read
 12570  0B07  0020               	movlb	0	; select bank0
 12571  0B08  00A4               	movwf	??_Flash_Memory_Modify
 12572  0B09  0825               	movf	Flash_Memory_Modify@i,w
 12573  0B0A  3E20               	addlw	_Memory& (0+255)
 12574  0B0B  0086               	movwf	6
 12575  0B0C  3002               	movlw	2	; select bank4/5
 12576  0B0D  0087               	movwf	7
 12577  0B0E  0824               	movf	??_Flash_Memory_Modify,w
 12578  0B0F  0081               	movwf	1
 12579  0B10  3001               	movlw	1
 12580  0B11  00A4               	movwf	??_Flash_Memory_Modify
 12581  0B12  0824               	movf	??_Flash_Memory_Modify,w
 12582  0B13  07A5               	addwf	Flash_Memory_Modify@i,f
 12583  0B14  3020               	movlw	32
 12584  0B15  0225               	subwf	Flash_Memory_Modify@i,w
 12585  0B16  1C03               	skipc
 12586  0B17  2B03               	goto	l7618
 12587  0B18                     l7624:	
 12588                           
 12589                           ;MCU_B1.c: 1057: }
 12590                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12591  0B18  0021               	movlb	1	; select bank1
 12592  0B19  086E               	movf	_product^(0+128),w
 12593  0B1A  0086               	movwf	6
 12594  0B1B  3001               	movlw	1	; select bank2/3
 12595  0B1C  0087               	movwf	7
 12596  0B1D  3001               	movlw	1	; select bank2/3
 12597  0B1E  3F4C               	moviw [12]fsr1
 12598  0B1F  0020               	movlb	0	; select bank0
 12599  0B20  00A0               	movwf	setMemory_Data@data
 12600  0B21  3000               	movlw	0
 12601  0B22  319A  22E3  318A   	fcall	_setMemory_Data
 12602                           
 12603                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12604  0B25  0021               	movlb	1	; select bank1
 12605  0B26  086E               	movf	_product^(0+128),w
 12606  0B27  0086               	movwf	6
 12607  0B28  3001               	movlw	1	; select bank2/3
 12608  0B29  0087               	movwf	7
 12609  0B2A  3001               	movlw	1	; select bank2/3
 12610  0B2B  3F4D               	moviw [13]fsr1
 12611  0B2C  0020               	movlb	0	; select bank0
 12612  0B2D  00A0               	movwf	setMemory_Data@data
 12613  0B2E  3001               	movlw	1
 12614  0B2F  319A  22E3  318A   	fcall	_setMemory_Data
 12615                           
 12616                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12617  0B32  0021               	movlb	1	; select bank1
 12618  0B33  086E               	movf	_product^(0+128),w
 12619  0B34  0086               	movwf	6
 12620  0B35  3001               	movlw	1	; select bank2/3
 12621  0B36  0087               	movwf	7
 12622  0B37  3001               	movlw	1	; select bank2/3
 12623  0B38  3F4E               	moviw [14]fsr1
 12624  0B39  0020               	movlb	0	; select bank0
 12625  0B3A  00A0               	movwf	setMemory_Data@data
 12626  0B3B  3002               	movlw	2
 12627  0B3C  319A  22E3  318A   	fcall	_setMemory_Data
 12628                           
 12629                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12630  0B3F  0021               	movlb	1	; select bank1
 12631  0B40  086E               	movf	_product^(0+128),w
 12632  0B41  0086               	movwf	6
 12633  0B42  3001               	movlw	1	; select bank2/3
 12634  0B43  0087               	movwf	7
 12635  0B44  3001               	movlw	1	; select bank2/3
 12636  0B45  3F55               	moviw [21]fsr1
 12637  0B46  0020               	movlb	0	; select bank0
 12638  0B47  00A0               	movwf	setMemory_Data@data
 12639  0B48  3003               	movlw	3
 12640  0B49  319A  22E3  318A   	fcall	_setMemory_Data
 12641                           
 12642                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12643  0B4C  0021               	movlb	1	; select bank1
 12644  0B4D  086E               	movf	_product^(0+128),w
 12645  0B4E  0086               	movwf	6
 12646  0B4F  3001               	movlw	1	; select bank2/3
 12647  0B50  0087               	movwf	7
 12648  0B51  3001               	movlw	1	; select bank2/3
 12649  0B52  3F56               	moviw [22]fsr1
 12650  0B53  0020               	movlb	0	; select bank0
 12651  0B54  00A0               	movwf	setMemory_Data@data
 12652  0B55  3004               	movlw	4
 12653  0B56  319A  22E3  318A   	fcall	_setMemory_Data
 12654                           
 12655                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12656  0B59  0021               	movlb	1	; select bank1
 12657  0B5A  086E               	movf	_product^(0+128),w
 12658  0B5B  0086               	movwf	6
 12659  0B5C  3001               	movlw	1	; select bank2/3
 12660  0B5D  0087               	movwf	7
 12661  0B5E  3001               	movlw	1	; select bank2/3
 12662  0B5F  3F57               	moviw [23]fsr1
 12663  0B60  0020               	movlb	0	; select bank0
 12664  0B61  00A0               	movwf	setMemory_Data@data
 12665  0B62  3005               	movlw	5
 12666  0B63  319A  22E3  318A   	fcall	_setMemory_Data
 12667                           
 12668                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12669  0B66  0021               	movlb	1	; select bank1
 12670  0B67  1EB9               	btfss	(_myMain^(0+128)+10),5
 12671  0B68  2B73               	goto	l7632
 12672                           
 12673                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12674  0B69  12B9               	bcf	(_myMain^(0+128)+10),5
 12675                           
 12676                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12677  0B6A  30AA               	movlw	170
 12678  0B6B  0020               	movlb	0	; select bank0
 12679  0B6C  00A4               	movwf	??_Flash_Memory_Modify
 12680  0B6D  0824               	movf	??_Flash_Memory_Modify,w
 12681  0B6E  00A0               	movwf	setMemory_Data@data
 12682  0B6F  301E               	movlw	30
 12683  0B70  319A  22E3  318A   	fcall	_setMemory_Data
 12684  0B73                     l7632:	
 12685                           
 12686                           ;MCU_B1.c: 1068: }
 12687                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12688  0B73  0024               	movlb	4	; select bank4
 12689  0B74  1D44               	btfss	(_Memory^(0+512)+36),2
 12690  0B75  2B7A               	goto	l1285
 12691                           
 12692                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12693  0B76  1144               	bcf	(_Memory^(0+512)+36),2
 12694                           
 12695                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12696  0B77  0021               	movlb	1	; select bank1
 12697  0B78  11AF               	bcf	_myMain^(0+128),3
 12698                           
 12699                           ;MCU_B1.c: 1073: myMain.First = 0;
 12700  0B79  12AF               	bcf	_myMain^(0+128),5
 12701  0B7A                     l1285:	
 12702                           
 12703                           ;MCU_B1.c: 1075: }
 12704                           ;MCU_B1.c: 1076: GIE = 0;
 12705  0B7A  138B               	bcf	11,7	;volatile
 12706                           
 12707                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12708  0B7B  319A  22EF  318A   	fcall	_Flash_Memory_Erasing
 12709                           
 12710                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12711  0B7E  3190  2048         	fcall	_Flash_Memory_Write
 12712                           
 12713                           ;MCU_B1.c: 1079: GIE = 1;
 12714  0B80  178B               	bsf	11,7	;volatile
 12715  0B81  0008               	return
 12716  0B82                     __end_of_Flash_Memory_Modify:	
 12717                           
 12718                           	psect	text80
 12719  1AEF                     __ptext80:	
 12720 ;; *************** function _Flash_Memory_Erasing *****************
 12721 ;; Defined at:
 12722 ;;		line 1042 in file "../src/MCU_B1.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;		None
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;		None
 12727 ;; Return value:  Size  Location     Type
 12728 ;;		None               void
 12729 ;; Registers used:
 12730 ;;		wreg, status,2, status,0, pclath, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;Total ram usage:        0 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    6
 12743 ;; This function calls:
 12744 ;;		_Flash_Memory_Unlock
 12745 ;; This function is called by:
 12746 ;;		_Flash_Memory_Modify
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           
 12751                           ;psect for function _Flash_Memory_Erasing
 12752  1AEF                     _Flash_Memory_Erasing:	
 12753                           
 12754                           ;MCU_B1.c: 1043: CFGS = 0;
 12755                           
 12756                           ;incstack = 0
 12757                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12758  1AEF  0023               	movlb	3	; select bank3
 12759  1AF0  1315               	bcf	21,6	;volatile
 12760                           
 12761                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12762  1AF1  3030               	movlw	48
 12763  1AF2  0092               	movwf	18	;volatile
 12764                           
 12765                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12766  1AF3  0191               	clrf	17	;volatile
 12767                           
 12768                           ;MCU_B1.c: 1046: FREE = 1;
 12769  1AF4  1615               	bsf	21,4	;volatile
 12770                           
 12771                           ;MCU_B1.c: 1047: WREN = 1;
 12772  1AF5  1515               	bsf	21,2	;volatile
 12773                           
 12774                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12775  1AF6  319A  225C         	fcall	_Flash_Memory_Unlock
 12776                           
 12777                           ;MCU_B1.c: 1049: WREN = 0;
 12778  1AF8  0023               	movlb	3	; select bank3
 12779  1AF9  1115               	bcf	21,2	;volatile
 12780  1AFA  0008               	return
 12781  1AFB                     __end_of_Flash_Memory_Erasing:	
 12782                           
 12783                           	psect	text81
 12784  06FC                     __ptext81:	
 12785 ;; *************** function _Flash_Memory_Initialization *****************
 12786 ;; Defined at:
 12787 ;;		line 932 in file "../src/MCU_B1.c"
 12788 ;; Parameters:    Size  Location     Type
 12789 ;;		None
 12790 ;; Auto vars:     Size  Location     Type
 12791 ;;  value           1    5[BANK0 ] unsigned char 
 12792 ;; Return value:  Size  Location     Type
 12793 ;;		None               void
 12794 ;; Registers used:
 12795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12796 ;; Tracked objects:
 12797 ;;		On entry : 0/0
 12798 ;;		On exit  : 0/0
 12799 ;;		Unchanged: 0/0
 12800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12804 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12805 ;;Total ram usage:        2 bytes
 12806 ;; Hardware stack levels used:    1
 12807 ;; Hardware stack levels required when called:    7
 12808 ;; This function calls:
 12809 ;;		_Flash_Memory_Read
 12810 ;;		_Flash_Memory_Write
 12811 ;;		_setMemory_Data
 12812 ;; This function is called by:
 12813 ;;		_main
 12814 ;; This function uses a non-reentrant model
 12815 ;;
 12816                           
 12817                           
 12818                           ;psect for function _Flash_Memory_Initialization
 12819  06FC                     _Flash_Memory_Initialization:	
 12820                           
 12821                           ;MCU_B1.c: 933: char value = 0;
 12822                           
 12823                           ;incstack = 0
 12824                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12825  06FC  0020               	movlb	0	; select bank0
 12826  06FD  01A5               	clrf	Flash_Memory_Initialization@value
 12827                           
 12828                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12829  06FE  301F               	movlw	31
 12830  06FF  319D  25AA  3186   	fcall	_Flash_Memory_Read
 12831  0702  3AAA               	xorlw	170
 12832  0703  1D03               	skipz
 12833  0704  2F7E               	goto	l8026
 12834                           
 12835                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12836  0705  3000               	movlw	0
 12837  0706  319D  25AA  3186   	fcall	_Flash_Memory_Read
 12838  0709  0020               	movlb	0	; select bank0
 12839  070A  00A4               	movwf	??_Flash_Memory_Initialization
 12840  070B  0021               	movlb	1	; select bank1
 12841  070C  086E               	movf	_product^(0+128),w
 12842  070D  3E0C               	addlw	12
 12843  070E  0086               	movwf	6
 12844  070F  3001               	movlw	1	; select bank2/3
 12845  0710  0087               	movwf	7
 12846  0711  0020               	movlb	0	; select bank0
 12847  0712  0824               	movf	??_Flash_Memory_Initialization,w
 12848  0713  0081               	movwf	1
 12849                           
 12850                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12851  0714  3001               	movlw	1
 12852  0715  319D  25AA  3186   	fcall	_Flash_Memory_Read
 12853  0718  0020               	movlb	0	; select bank0
 12854  0719  00A4               	movwf	??_Flash_Memory_Initialization
 12855  071A  0021               	movlb	1	; select bank1
 12856  071B  086E               	movf	_product^(0+128),w
 12857  071C  3E0D               	addlw	13
 12858  071D  0086               	movwf	6
 12859  071E  3001               	movlw	1	; select bank2/3
 12860  071F  0087               	movwf	7
 12861  0720  0020               	movlb	0	; select bank0
 12862  0721  0824               	movf	??_Flash_Memory_Initialization,w
 12863  0722  0081               	movwf	1
 12864                           
 12865                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12866  0723  3002               	movlw	2
 12867  0724  319D  25AA  3186   	fcall	_Flash_Memory_Read
 12868  0727  0020               	movlb	0	; select bank0
 12869  0728  00A4               	movwf	??_Flash_Memory_Initialization
 12870  0729  0021               	movlb	1	; select bank1
 12871  072A  086E               	movf	_product^(0+128),w
 12872  072B  3E0E               	addlw	14
 12873  072C  0086               	movwf	6
 12874  072D  3001               	movlw	1	; select bank2/3
 12875  072E  0087               	movwf	7
 12876  072F  0020               	movlb	0	; select bank0
 12877  0730  0824               	movf	??_Flash_Memory_Initialization,w
 12878  0731  0081               	movwf	1
 12879                           
 12880                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12881  0732  3003               	movlw	3
 12882  0733  319D  25AA  3186   	fcall	_Flash_Memory_Read
 12883  0736  0020               	movlb	0	; select bank0
 12884  0737  00A4               	movwf	??_Flash_Memory_Initialization
 12885  0738  0021               	movlb	1	; select bank1
 12886  0739  086E               	movf	_product^(0+128),w
 12887  073A  3E15               	addlw	21
 12888  073B  0086               	movwf	6
 12889  073C  3001               	movlw	1	; select bank2/3
 12890  073D  0087               	movwf	7
 12891  073E  0020               	movlb	0	; select bank0
 12892  073F  0824               	movf	??_Flash_Memory_Initialization,w
 12893  0740  0081               	movwf	1
 12894                           
 12895                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12896  0741  3004               	movlw	4
 12897  0742  319D  25AA  3186   	fcall	_Flash_Memory_Read
 12898  0745  0020               	movlb	0	; select bank0
 12899  0746  00A4               	movwf	??_Flash_Memory_Initialization
 12900  0747  0021               	movlb	1	; select bank1
 12901  0748  086E               	movf	_product^(0+128),w
 12902  0749  3E16               	addlw	22
 12903  074A  0086               	movwf	6
 12904  074B  3001               	movlw	1	; select bank2/3
 12905  074C  0087               	movwf	7
 12906  074D  0020               	movlb	0	; select bank0
 12907  074E  0824               	movf	??_Flash_Memory_Initialization,w
 12908  074F  0081               	movwf	1
 12909                           
 12910                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12911  0750  3005               	movlw	5
 12912  0751  319D  25AA  3186   	fcall	_Flash_Memory_Read
 12913  0754  0020               	movlb	0	; select bank0
 12914  0755  00A4               	movwf	??_Flash_Memory_Initialization
 12915  0756  0021               	movlb	1	; select bank1
 12916  0757  086E               	movf	_product^(0+128),w
 12917  0758  3E17               	addlw	23
 12918  0759  0086               	movwf	6
 12919  075A  3001               	movlw	1	; select bank2/3
 12920  075B  0087               	movwf	7
 12921  075C  0020               	movlb	0	; select bank0
 12922  075D  0824               	movf	??_Flash_Memory_Initialization,w
 12923  075E  0081               	movwf	1
 12924                           
 12925                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12926  075F  0021               	movlb	1	; select bank1
 12927  0760  086E               	movf	_product^(0+128),w
 12928  0761  3E0C               	addlw	12
 12929  0762  0086               	movwf	6
 12930  0763  3001               	movlw	1	; select bank2/3
 12931  0764  0087               	movwf	7
 12932  0765  0801               	movf	1,w
 12933  0766  3AFF               	xorlw	255
 12934  0767  1D03               	skipz
 12935  0768  0008               	return
 12936  0769  086E               	movf	_product^(0+128),w
 12937  076A  3E0D               	addlw	13
 12938  076B  0086               	movwf	6
 12939  076C  3001               	movlw	1	; select bank2/3
 12940  076D  0087               	movwf	7
 12941  076E  0801               	movf	1,w
 12942  076F  3AFF               	xorlw	255
 12943  0770  1D03               	skipz
 12944  0771  0008               	return
 12945  0772  086E               	movf	_product^(0+128),w
 12946  0773  3E0E               	addlw	14
 12947  0774  0086               	movwf	6
 12948  0775  3001               	movlw	1	; select bank2/3
 12949  0776  0087               	movwf	7
 12950  0777  0801               	movf	1,w
 12951  0778  3AFF               	xorlw	255
 12952  0779  1D03               	skipz
 12953  077A  0008               	return
 12954                           
 12955                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12956  077B  15AF               	bsf	_myMain^(0+128),3
 12957                           
 12958                           ;MCU_B1.c: 951: myMain.First = 1;
 12959  077C  16AF               	bsf	_myMain^(0+128),5
 12960                           
 12961                           ;MCU_B1.c: 952: }
 12962                           ;MCU_B1.c: 953: } else {
 12963  077D  0008               	return
 12964  077E                     l8026:	
 12965                           
 12966                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12967  077E  30FF               	movlw	255
 12968  077F  0020               	movlb	0	; select bank0
 12969  0780  00A4               	movwf	??_Flash_Memory_Initialization
 12970  0781  0824               	movf	??_Flash_Memory_Initialization,w
 12971  0782  00A0               	movwf	setMemory_Data@data
 12972  0783  3000               	movlw	0
 12973  0784  319A  22E3  3186   	fcall	_setMemory_Data
 12974                           
 12975                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12976  0787  30FF               	movlw	255
 12977  0788  0020               	movlb	0	; select bank0
 12978  0789  00A4               	movwf	??_Flash_Memory_Initialization
 12979  078A  0824               	movf	??_Flash_Memory_Initialization,w
 12980  078B  00A0               	movwf	setMemory_Data@data
 12981  078C  3001               	movlw	1
 12982  078D  319A  22E3  3186   	fcall	_setMemory_Data
 12983                           
 12984                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12985  0790  30FF               	movlw	255
 12986  0791  0020               	movlb	0	; select bank0
 12987  0792  00A4               	movwf	??_Flash_Memory_Initialization
 12988  0793  0824               	movf	??_Flash_Memory_Initialization,w
 12989  0794  00A0               	movwf	setMemory_Data@data
 12990  0795  3002               	movlw	2
 12991  0796  319A  22E3  3186   	fcall	_setMemory_Data
 12992                           
 12993                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12994  0799  30FF               	movlw	255
 12995  079A  0020               	movlb	0	; select bank0
 12996  079B  00A4               	movwf	??_Flash_Memory_Initialization
 12997  079C  0824               	movf	??_Flash_Memory_Initialization,w
 12998  079D  00A0               	movwf	setMemory_Data@data
 12999  079E  3003               	movlw	3
 13000  079F  319A  22E3  3186   	fcall	_setMemory_Data
 13001                           
 13002                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 13003  07A2  30FF               	movlw	255
 13004  07A3  0020               	movlb	0	; select bank0
 13005  07A4  00A4               	movwf	??_Flash_Memory_Initialization
 13006  07A5  0824               	movf	??_Flash_Memory_Initialization,w
 13007  07A6  00A0               	movwf	setMemory_Data@data
 13008  07A7  3004               	movlw	4
 13009  07A8  319A  22E3  3186   	fcall	_setMemory_Data
 13010                           
 13011                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 13012  07AB  30FF               	movlw	255
 13013  07AC  0020               	movlb	0	; select bank0
 13014  07AD  00A4               	movwf	??_Flash_Memory_Initialization
 13015  07AE  0824               	movf	??_Flash_Memory_Initialization,w
 13016  07AF  00A0               	movwf	setMemory_Data@data
 13017  07B0  3005               	movlw	5
 13018  07B1  319A  22E3  3186   	fcall	_setMemory_Data
 13019                           
 13020                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 13021  07B4  30AA               	movlw	170
 13022  07B5  0020               	movlb	0	; select bank0
 13023  07B6  00A4               	movwf	??_Flash_Memory_Initialization
 13024  07B7  0824               	movf	??_Flash_Memory_Initialization,w
 13025  07B8  00A0               	movwf	setMemory_Data@data
 13026  07B9  301F               	movlw	31
 13027  07BA  319A  22E3  3186   	fcall	_setMemory_Data
 13028                           
 13029                           ;MCU_B1.c: 966: GIE = 0;
 13030  07BD  138B               	bcf	11,7	;volatile
 13031                           
 13032                           ;MCU_B1.c: 967: Flash_Memory_Write();
 13033  07BE  3190  2048         	fcall	_Flash_Memory_Write
 13034                           
 13035                           ;MCU_B1.c: 968: GIE = 1;
 13036  07C0  178B               	bsf	11,7	;volatile
 13037                           
 13038                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 13039  07C1  0021               	movlb	1	; select bank1
 13040  07C2  15AF               	bsf	_myMain^(0+128),3
 13041                           
 13042                           ;MCU_B1.c: 970: myMain.First = 1;
 13043  07C3  16AF               	bsf	_myMain^(0+128),5
 13044                           
 13045                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 13046  07C4  1639               	bsf	(_myMain^(0+128)+10),4
 13047  07C5  0008               	return
 13048  07C6                     __end_of_Flash_Memory_Initialization:	
 13049                           
 13050                           	psect	text82
 13051  1AE3                     __ptext82:	
 13052 ;; *************** function _setMemory_Data *****************
 13053 ;; Defined at:
 13054 ;;		line 1094 in file "../src/MCU_B1.c"
 13055 ;; Parameters:    Size  Location     Type
 13056 ;;  address         1    wreg     unsigned char 
 13057 ;;  data            1    0[BANK0 ] unsigned char 
 13058 ;; Auto vars:     Size  Location     Type
 13059 ;;  address         1    2[BANK0 ] unsigned char 
 13060 ;; Return value:  Size  Location     Type
 13061 ;;		None               void
 13062 ;; Registers used:
 13063 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13064 ;; Tracked objects:
 13065 ;;		On entry : 0/0
 13066 ;;		On exit  : 0/0
 13067 ;;		Unchanged: 0/0
 13068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13069 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;Total ram usage:        3 bytes
 13074 ;; Hardware stack levels used:    1
 13075 ;; Hardware stack levels required when called:    5
 13076 ;; This function calls:
 13077 ;;		Nothing
 13078 ;; This function is called by:
 13079 ;;		_Flash_Memory_Initialization
 13080 ;;		_Flash_Memory_Modify
 13081 ;; This function uses a non-reentrant model
 13082 ;;
 13083                           
 13084                           
 13085                           ;psect for function _setMemory_Data
 13086  1AE3                     _setMemory_Data:	
 13087                           
 13088                           ;incstack = 0
 13089                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13090                           ;setMemory_Data@address stored from wreg
 13091  1AE3  0020               	movlb	0	; select bank0
 13092  1AE4  00A2               	movwf	setMemory_Data@address
 13093                           
 13094                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 13095  1AE5  0820               	movf	setMemory_Data@data,w
 13096  1AE6  00A1               	movwf	??_setMemory_Data
 13097  1AE7  0822               	movf	setMemory_Data@address,w
 13098  1AE8  3E20               	addlw	_Memory& (0+255)
 13099  1AE9  0086               	movwf	6
 13100  1AEA  3002               	movlw	2	; select bank4/5
 13101  1AEB  0087               	movwf	7
 13102  1AEC  0821               	movf	??_setMemory_Data,w
 13103  1AED  0081               	movwf	1
 13104  1AEE  0008               	return
 13105  1AEF                     __end_of_setMemory_Data:	
 13106                           
 13107                           	psect	text83
 13108  1048                     __ptext83:	
 13109 ;; *************** function _Flash_Memory_Write *****************
 13110 ;; Defined at:
 13111 ;;		line 1023 in file "../src/MCU_B1.c"
 13112 ;; Parameters:    Size  Location     Type
 13113 ;;		None
 13114 ;; Auto vars:     Size  Location     Type
 13115 ;;  i               1    1[BANK0 ] unsigned char 
 13116 ;; Return value:  Size  Location     Type
 13117 ;;		None               void
 13118 ;; Registers used:
 13119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13120 ;; Tracked objects:
 13121 ;;		On entry : 0/0
 13122 ;;		On exit  : 0/0
 13123 ;;		Unchanged: 0/0
 13124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13128 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13129 ;;Total ram usage:        2 bytes
 13130 ;; Hardware stack levels used:    1
 13131 ;; Hardware stack levels required when called:    6
 13132 ;; This function calls:
 13133 ;;		_Flash_Memory_Unlock
 13134 ;; This function is called by:
 13135 ;;		_Flash_Memory_Initialization
 13136 ;;		_Flash_Memory_Modify
 13137 ;; This function uses a non-reentrant model
 13138 ;;
 13139                           
 13140                           
 13141                           ;psect for function _Flash_Memory_Write
 13142  1048                     _Flash_Memory_Write:	
 13143                           
 13144                           ;MCU_B1.c: 1024: char i = 0;
 13145                           
 13146                           ;incstack = 0
 13147                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13148  1048  0020               	movlb	0	; select bank0
 13149  1049  01A1               	clrf	Flash_Memory_Write@i
 13150                           
 13151                           ;MCU_B1.c: 1025: CFGS = 0;
 13152  104A  0023               	movlb	3	; select bank3
 13153  104B  1315               	bcf	21,6	;volatile
 13154                           
 13155                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13156  104C  3030               	movlw	48
 13157  104D  0092               	movwf	18	;volatile
 13158                           
 13159                           ;MCU_B1.c: 1027: PMDATH = 0;
 13160  104E  0194               	clrf	20	;volatile
 13161                           
 13162                           ;MCU_B1.c: 1028: FREE = 0;
 13163  104F  1215               	bcf	21,4	;volatile
 13164                           
 13165                           ;MCU_B1.c: 1029: LWLO = 1;
 13166  1050  1695               	bsf	21,5	;volatile
 13167                           
 13168                           ;MCU_B1.c: 1030: WREN = 1;
 13169  1051  1515               	bsf	21,2	;volatile
 13170                           
 13171                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13172  1052  0020               	movlb	0	; select bank0
 13173  1053  01A1               	clrf	Flash_Memory_Write@i
 13174  1054  3020               	movlw	32
 13175  1055  0221               	subwf	Flash_Memory_Write@i,w
 13176  1056  1803               	btfsc	3,0
 13177  1057  2870               	goto	l1275
 13178  1058                     l7140:	
 13179                           
 13180                           ;MCU_B1.c: 1032: PMADRL = i;
 13181  1058  0821               	movf	Flash_Memory_Write@i,w
 13182  1059  0023               	movlb	3	; select bank3
 13183  105A  0091               	movwf	17	;volatile
 13184                           
 13185                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13186  105B  0020               	movlb	0	; select bank0
 13187  105C  0821               	movf	Flash_Memory_Write@i,w
 13188  105D  3E20               	addlw	_Memory& (0+255)
 13189  105E  0086               	movwf	6
 13190  105F  3002               	movlw	2	; select bank4/5
 13191  1060  0087               	movwf	7
 13192  1061  0801               	movf	1,w
 13193  1062  0023               	movlb	3	; select bank3
 13194  1063  0093               	movwf	19	;volatile
 13195                           
 13196                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13197  1064  319A  225C  3190   	fcall	_Flash_Memory_Unlock
 13198  1067  3001               	movlw	1
 13199  1068  0020               	movlb	0	; select bank0
 13200  1069  00A0               	movwf	??_Flash_Memory_Write
 13201  106A  0820               	movf	??_Flash_Memory_Write,w
 13202  106B  07A1               	addwf	Flash_Memory_Write@i,f
 13203  106C  3020               	movlw	32
 13204  106D  0221               	subwf	Flash_Memory_Write@i,w
 13205  106E  1C03               	skipc
 13206  106F  2858               	goto	l7140
 13207  1070                     l1275:	
 13208                           
 13209                           ;MCU_B1.c: 1035: }
 13210                           ;MCU_B1.c: 1036: LWLO = 0;
 13211  1070  0023               	movlb	3	; select bank3
 13212  1071  1295               	bcf	21,5	;volatile
 13213                           
 13214                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13215  1072  319A  225C         	fcall	_Flash_Memory_Unlock
 13216                           
 13217                           ;MCU_B1.c: 1038: WREN = 0;
 13218  1074  0023               	movlb	3	; select bank3
 13219  1075  1115               	bcf	21,2	;volatile
 13220  1076  0008               	return
 13221  1077                     __end_of_Flash_Memory_Write:	
 13222                           
 13223                           	psect	text84
 13224  1A5C                     __ptext84:	
 13225 ;; *************** function _Flash_Memory_Unlock *****************
 13226 ;; Defined at:
 13227 ;;		line 1002 in file "../src/MCU_B1.c"
 13228 ;; Parameters:    Size  Location     Type
 13229 ;;		None
 13230 ;; Auto vars:     Size  Location     Type
 13231 ;;		None
 13232 ;; Return value:  Size  Location     Type
 13233 ;;		None               void
 13234 ;; Registers used:
 13235 ;;		wreg
 13236 ;; Tracked objects:
 13237 ;;		On entry : 0/0
 13238 ;;		On exit  : 0/0
 13239 ;;		Unchanged: 0/0
 13240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;Total ram usage:        0 bytes
 13246 ;; Hardware stack levels used:    1
 13247 ;; Hardware stack levels required when called:    5
 13248 ;; This function calls:
 13249 ;;		Nothing
 13250 ;; This function is called by:
 13251 ;;		_Flash_Memory_Write
 13252 ;;		_Flash_Memory_Erasing
 13253 ;; This function uses a non-reentrant model
 13254 ;;
 13255                           
 13256                           
 13257                           ;psect for function _Flash_Memory_Unlock
 13258  1A5C                     _Flash_Memory_Unlock:	
 13259                           
 13260                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13261                           
 13262                           ;incstack = 0
 13263                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13264  1A5C  3055               	movlw	85
 13265  1A5D  0023               	movlb	3	; select bank3
 13266  1A5E  0096               	movwf	22	;volatile
 13267                           
 13268                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13269  1A5F  30AA               	movlw	170
 13270  1A60  0096               	movwf	22	;volatile
 13271                           
 13272                           ;MCU_B1.c: 1005: WR = 1;
 13273  1A61  1495               	bsf	21,1	;volatile
 13274                           
 13275                           ;MCU_B1.c: 1006: __nop();
 13276  1A62  0000               	nop
 13277                           
 13278                           ;MCU_B1.c: 1007: __nop();
 13279  1A63  0000               	nop
 13280  1A64  0008               	return
 13281  1A65                     __end_of_Flash_Memory_Unlock:	
 13282                           
 13283                           	psect	text85
 13284  1DAA                     __ptext85:	
 13285 ;; *************** function _Flash_Memory_Read *****************
 13286 ;; Defined at:
 13287 ;;		line 1011 in file "../src/MCU_B1.c"
 13288 ;; Parameters:    Size  Location     Type
 13289 ;;  address         1    wreg     unsigned char 
 13290 ;; Auto vars:     Size  Location     Type
 13291 ;;  address         1    2[BANK0 ] unsigned char 
 13292 ;;  ret             1    3[BANK0 ] unsigned char 
 13293 ;;  i               1    1[BANK0 ] unsigned char 
 13294 ;; Return value:  Size  Location     Type
 13295 ;;                  1    wreg      unsigned char 
 13296 ;; Registers used:
 13297 ;;		wreg, status,2
 13298 ;; Tracked objects:
 13299 ;;		On entry : 0/0
 13300 ;;		On exit  : 0/0
 13301 ;;		Unchanged: 0/0
 13302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;Total ram usage:        4 bytes
 13308 ;; Hardware stack levels used:    1
 13309 ;; Hardware stack levels required when called:    5
 13310 ;; This function calls:
 13311 ;;		Nothing
 13312 ;; This function is called by:
 13313 ;;		_Flash_Memory_Initialization
 13314 ;;		_Flash_Memory_Modify
 13315 ;; This function uses a non-reentrant model
 13316 ;;
 13317                           
 13318                           
 13319                           ;psect for function _Flash_Memory_Read
 13320  1DAA                     _Flash_Memory_Read:	
 13321                           
 13322                           ;incstack = 0
 13323                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13324                           ;Flash_Memory_Read@address stored from wreg
 13325  1DAA  0020               	movlb	0	; select bank0
 13326  1DAB  00A2               	movwf	Flash_Memory_Read@address
 13327                           
 13328                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13329  1DAC  01A1               	clrf	Flash_Memory_Read@i
 13330  1DAD  01A3               	clrf	Flash_Memory_Read@ret
 13331                           
 13332                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13333  1DAE  3030               	movlw	48
 13334  1DAF  0023               	movlb	3	; select bank3
 13335  1DB0  0092               	movwf	18	;volatile
 13336                           
 13337                           ;MCU_B1.c: 1014: PMADRL = address;
 13338  1DB1  0020               	movlb	0	; select bank0
 13339  1DB2  0822               	movf	Flash_Memory_Read@address,w
 13340  1DB3  0023               	movlb	3	; select bank3
 13341  1DB4  0091               	movwf	17	;volatile
 13342                           
 13343                           ;MCU_B1.c: 1015: CFGS = 0;
 13344  1DB5  1315               	bcf	21,6	;volatile
 13345                           
 13346                           ;MCU_B1.c: 1016: RD = 1;
 13347  1DB6  1415               	bsf	21,0	;volatile
 13348                           
 13349                           ;MCU_B1.c: 1017: i = PMDATH;
 13350  1DB7  0814               	movf	20,w	;volatile
 13351  1DB8  0020               	movlb	0	; select bank0
 13352  1DB9  00A0               	movwf	??_Flash_Memory_Read
 13353  1DBA  0820               	movf	??_Flash_Memory_Read,w
 13354  1DBB  00A1               	movwf	Flash_Memory_Read@i
 13355                           
 13356                           ;MCU_B1.c: 1018: ret = PMDATL;
 13357  1DBC  0023               	movlb	3	; select bank3
 13358  1DBD  0813               	movf	19,w	;volatile
 13359  1DBE  0020               	movlb	0	; select bank0
 13360  1DBF  00A0               	movwf	??_Flash_Memory_Read
 13361  1DC0  0820               	movf	??_Flash_Memory_Read,w
 13362  1DC1  00A3               	movwf	Flash_Memory_Read@ret
 13363                           
 13364                           ;MCU_B1.c: 1019: return ret;
 13365  1DC2  0823               	movf	Flash_Memory_Read@ret,w
 13366  1DC3  0008               	return
 13367  1DC4                     __end_of_Flash_Memory_Read:	
 13368                           
 13369                           	psect	text86
 13370  0554                     __ptext86:	
 13371 ;; *************** function _Exception_Main *****************
 13372 ;; Defined at:
 13373 ;;		line 499 in file "../src/Main_B1.c"
 13374 ;; Parameters:    Size  Location     Type
 13375 ;;		None
 13376 ;; Auto vars:     Size  Location     Type
 13377 ;;  i               2   18[BANK0 ] int 
 13378 ;;  i               2   16[BANK0 ] int 
 13379 ;;  lights          1   21[BANK0 ] unsigned char 
 13380 ;;  error           1   20[BANK0 ] unsigned char 
 13381 ;;  count           1   15[BANK0 ] unsigned char 
 13382 ;;  status          1   14[BANK0 ] unsigned char 
 13383 ;; Return value:  Size  Location     Type
 13384 ;;		None               void
 13385 ;; Registers used:
 13386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13387 ;; Tracked objects:
 13388 ;;		On entry : 0/0
 13389 ;;		On exit  : 0/0
 13390 ;;		Unchanged: 0/0
 13391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;Total ram usage:        9 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; Hardware stack levels required when called:    7
 13399 ;; This function calls:
 13400 ;;		_getDimmerLights_Line
 13401 ;;		_getDimmerLights_Status
 13402 ;;		_getMain_All_Error_Status
 13403 ;;		_getMain_All_LightsStatus
 13404 ;;		_setBuz
 13405 ;;		_setDimmerLights_SwOff
 13406 ;;		_setLED
 13407 ;; This function is called by:
 13408 ;;		_main
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           
 13413                           ;psect for function _Exception_Main
 13414  0554                     _Exception_Main:	
 13415                           
 13416                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13417                           
 13418                           ;incstack = 0
 13419                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13420  0554  3000               	movlw	0
 13421  0555  3190  2077  3185   	fcall	_getMain_All_Error_Status
 13422  0558  0020               	movlb	0	; select bank0
 13423  0559  00AD               	movwf	??_Exception_Main
 13424  055A  082D               	movf	??_Exception_Main,w
 13425  055B  00B4               	movwf	Exception_Main@error
 13426                           
 13427                           ;Main_B1.c: 501: char lights = 0, count = 1;
 13428  055C  01B5               	clrf	Exception_Main@lights
 13429  055D  01AF               	clrf	Exception_Main@count
 13430  055E  0AAF               	incf	Exception_Main@count,f
 13431                           
 13432                           ;Main_B1.c: 502: char status = 0;
 13433  055F  01AE               	clrf	Exception_Main@status
 13434                           
 13435                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13436  0560  0021               	movlb	1	; select bank1
 13437  0561  1DB9               	btfss	(_myMain^(0+128)+10),3
 13438  0562  2D72               	goto	l8374
 13439                           
 13440                           ;Main_B1.c: 505: if (error == 0) {
 13441  0563  0020               	movlb	0	; select bank0
 13442  0564  08B4               	movf	Exception_Main@error,f
 13443  0565  1D03               	skipz
 13444  0566  0008               	return
 13445                           
 13446                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13447  0567  0021               	movlb	1	; select bank1
 13448  0568  11B9               	bcf	(_myMain^(0+128)+10),3
 13449                           
 13450                           ;Main_B1.c: 509: setLED(99, 10);
 13451  0569  300A               	movlw	10
 13452  056A  0020               	movlb	0	; select bank0
 13453  056B  00AD               	movwf	??_Exception_Main
 13454  056C  082D               	movf	??_Exception_Main,w
 13455  056D  00A2               	movwf	setLED@command
 13456  056E  3063               	movlw	99
 13457  056F  3191  21BC         	fcall	_setLED
 13458                           
 13459                           ;Main_B1.c: 522: }
 13460                           ;Main_B1.c: 523: } else {
 13461  0571  0008               	return
 13462  0572                     l8374:	
 13463                           
 13464                           ;Main_B1.c: 524: if (error != 0) {
 13465  0572  0020               	movlb	0	; select bank0
 13466  0573  0834               	movf	Exception_Main@error,w
 13467  0574  1903               	btfsc	3,2
 13468  0575  0008               	return
 13469                           
 13470                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13471  0576  0021               	movlb	1	; select bank1
 13472  0577  15B9               	bsf	(_myMain^(0+128)+10),3
 13473                           
 13474                           ;Main_B1.c: 527: setLED(99, 11);
 13475  0578  300B               	movlw	11
 13476  0579  0020               	movlb	0	; select bank0
 13477  057A  00AD               	movwf	??_Exception_Main
 13478  057B  082D               	movf	??_Exception_Main,w
 13479  057C  00A2               	movwf	setLED@command
 13480  057D  3063               	movlw	99
 13481  057E  3191  21BC  3185   	fcall	_setLED
 13482                           
 13483                           ;Main_B1.c: 538: switch (error) {
 13484  0581  2E1E               	goto	l8422
 13485  0582                     l8380:	
 13486                           ;Main_B1.c: 539: case 2:
 13487                           
 13488                           
 13489                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13490  0582  319A  2265  3185   	fcall	_getMain_All_LightsStatus
 13491  0585  3A01               	xorlw	1
 13492  0586  1D03               	skipz
 13493  0587  2D91               	goto	l8384
 13494                           
 13495                           ;Main_B1.c: 547: setBuz(10, 300);
 13496  0588  302C               	movlw	44
 13497  0589  0020               	movlb	0	; select bank0
 13498  058A  00A9               	movwf	setBuz@time
 13499  058B  3001               	movlw	1
 13500  058C  00AA               	movwf	setBuz@time+1
 13501  058D  300A               	movlw	10
 13502  058E  3194  242E  3185   	fcall	_setBuz
 13503  0591                     l8384:	
 13504                           
 13505                           ;Main_B1.c: 548: }
 13506                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13507  0591  0020               	movlb	0	; select bank0
 13508  0592  01B0               	clrf	Exception_Main@i
 13509  0593  01B1               	clrf	Exception_Main@i+1
 13510  0594                     l8394:	
 13511  0594  0831               	movf	Exception_Main@i+1,w
 13512  0595  3A80               	xorlw	128
 13513  0596  00AD               	movwf	??_Exception_Main
 13514  0597  3080               	movlw	128
 13515  0598  022D               	subwf	??_Exception_Main,w
 13516  0599  1D03               	skipz
 13517  059A  2D9D               	goto	u8675
 13518  059B  082F               	movf	Exception_Main@count,w
 13519  059C  0230               	subwf	Exception_Main@i,w
 13520  059D                     u8675:	
 13521  059D  1803               	btfsc	3,0
 13522  059E  2DBF               	goto	u8670
 13523                           
 13524                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13525  059F  0020               	movlb	0	; select bank0
 13526  05A0  0830               	movf	Exception_Main@i,w
 13527  05A1  3E01               	addlw	1
 13528  05A2  319B  2384  3185   	fcall	_getDimmerLights_Status
 13529  05A5  3A01               	xorlw	1
 13530  05A6  1D03               	skipz
 13531  05A7  2DB9               	goto	l8392
 13532                           
 13533                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13534  05A8  0021               	movlb	1	; select bank1
 13535  05A9  084C               	movf	_DimmerLights^(0+128),w
 13536  05AA  0086               	movwf	6
 13537  05AB  3001               	movlw	1	; select bank2/3
 13538  05AC  0087               	movwf	7
 13539  05AD  1401               	bsf	1,0
 13540                           
 13541                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13542  05AE  0A4C               	incf	_DimmerLights^(0+128),w
 13543  05AF  0086               	movwf	6
 13544  05B0  3001               	movlw	1	; select bank2/3
 13545  05B1  0087               	movwf	7
 13546  05B2  1001               	bcf	1,0
 13547                           
 13548                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13549  05B3  0020               	movlb	0	; select bank0
 13550  05B4  0830               	movf	Exception_Main@i,w
 13551  05B5  3E01               	addlw	1
 13552  05B6  3191  2183  3185   	fcall	_setDimmerLights_SwOff
 13553  05B9                     l8392:	
 13554  05B9  3001               	movlw	1
 13555  05BA  0020               	movlb	0	; select bank0
 13556  05BB  07B0               	addwf	Exception_Main@i,f
 13557  05BC  3000               	movlw	0
 13558  05BD  3DB1               	addwfc	Exception_Main@i+1,f
 13559  05BE  2D94               	goto	l8394
 13560  05BF                     u8670:	
 13561  05BF  0020               	movlb	0	; select bank0
 13562  05C0  0008               	return
 13563  05C1                     l8396:	
 13564                           ;Main_B1.c: 561: case 3:
 13565                           
 13566                           ;Main_B1.c: 556: }
 13567                           ;Main_B1.c: 557: }
 13568                           ;Main_B1.c: 560: break;
 13569                           
 13570                           
 13571                           ;Main_B1.c: 563: setBuz(5, 300);
 13572  05C1  302C               	movlw	44
 13573  05C2  0020               	movlb	0	; select bank0
 13574  05C3  00A9               	movwf	setBuz@time
 13575  05C4  3001               	movlw	1
 13576  05C5  00AA               	movwf	setBuz@time+1
 13577  05C6  3005               	movlw	5
 13578  05C7  3194  242E  3185   	fcall	_setBuz
 13579                           
 13580                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13581  05CA  319A  226F  3185   	fcall	_getDimmerLights_Line
 13582  05CD  0020               	movlb	0	; select bank0
 13583  05CE  00AD               	movwf	??_Exception_Main
 13584  05CF  082D               	movf	??_Exception_Main,w
 13585  05D0  00B5               	movwf	Exception_Main@lights
 13586                           
 13587                           ;Main_B1.c: 565: if (lights == 0) {
 13588  05D1  08B5               	movf	Exception_Main@lights,f
 13589  05D2  1D03               	skipz
 13590  05D3  2E03               	goto	l8414
 13591                           
 13592                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13593  05D4  01B2               	clrf	Exception_Main@i_3636
 13594  05D5  01B3               	clrf	Exception_Main@i_3636+1
 13595  05D6                     l8412:	
 13596  05D6  0833               	movf	Exception_Main@i_3636+1,w
 13597  05D7  3A80               	xorlw	128
 13598  05D8  00AD               	movwf	??_Exception_Main
 13599  05D9  3080               	movlw	128
 13600  05DA  022D               	subwf	??_Exception_Main,w
 13601  05DB  1D03               	skipz
 13602  05DC  2DDF               	goto	u8705
 13603  05DD  082F               	movf	Exception_Main@count,w
 13604  05DE  0232               	subwf	Exception_Main@i_3636,w
 13605  05DF                     u8705:	
 13606  05DF  1803               	btfsc	3,0
 13607  05E0  2E01               	goto	u8700
 13608                           
 13609                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13610  05E1  0020               	movlb	0	; select bank0
 13611  05E2  0832               	movf	Exception_Main@i_3636,w
 13612  05E3  3E01               	addlw	1
 13613  05E4  319B  2384  3185   	fcall	_getDimmerLights_Status
 13614  05E7  3A01               	xorlw	1
 13615  05E8  1D03               	skipz
 13616  05E9  2DFB               	goto	l8410
 13617                           
 13618                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13619  05EA  0021               	movlb	1	; select bank1
 13620  05EB  084C               	movf	_DimmerLights^(0+128),w
 13621  05EC  0086               	movwf	6
 13622  05ED  3001               	movlw	1	; select bank2/3
 13623  05EE  0087               	movwf	7
 13624  05EF  1401               	bsf	1,0
 13625                           
 13626                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13627  05F0  0A4C               	incf	_DimmerLights^(0+128),w
 13628  05F1  0086               	movwf	6
 13629  05F2  3001               	movlw	1	; select bank2/3
 13630  05F3  0087               	movwf	7
 13631  05F4  1001               	bcf	1,0
 13632                           
 13633                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13634  05F5  0020               	movlb	0	; select bank0
 13635  05F6  0832               	movf	Exception_Main@i_3636,w
 13636  05F7  3E01               	addlw	1
 13637  05F8  3191  2183  3185   	fcall	_setDimmerLights_SwOff
 13638  05FB                     l8410:	
 13639  05FB  3001               	movlw	1
 13640  05FC  0020               	movlb	0	; select bank0
 13641  05FD  07B2               	addwf	Exception_Main@i_3636,f
 13642  05FE  3000               	movlw	0
 13643  05FF  3DB3               	addwfc	Exception_Main@i_3636+1,f
 13644  0600  2DD6               	goto	l8412
 13645  0601                     u8700:	
 13646  0601  0020               	movlb	0	; select bank0
 13647  0602  0008               	return
 13648  0603                     l8414:	
 13649                           ;Main_B1.c: 573: }
 13650                           ;Main_B1.c: 574: }
 13651                           ;Main_B1.c: 575: } else {
 13652                           
 13653                           
 13654                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13655  0603  0020               	movlb	0	; select bank0
 13656  0604  0835               	movf	Exception_Main@lights,w
 13657  0605  319B  2384  3185   	fcall	_getDimmerLights_Status
 13658  0608  3A01               	xorlw	1
 13659  0609  1903               	btfsc	3,2
 13660  060A  2E0D               	goto	l8416
 13661  060B  0020               	movlb	0	; select bank0
 13662  060C  0008               	return
 13663  060D                     l8416:	
 13664                           
 13665                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13666  060D  0021               	movlb	1	; select bank1
 13667  060E  084C               	movf	_DimmerLights^(0+128),w
 13668  060F  0086               	movwf	6
 13669  0610  3001               	movlw	1	; select bank2/3
 13670  0611  0087               	movwf	7
 13671  0612  1401               	bsf	1,0
 13672                           
 13673                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13674  0613  0A4C               	incf	_DimmerLights^(0+128),w
 13675  0614  0086               	movwf	6
 13676  0615  3001               	movlw	1	; select bank2/3
 13677  0616  0087               	movwf	7
 13678  0617  1001               	bcf	1,0
 13679                           
 13680                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13681  0618  0020               	movlb	0	; select bank0
 13682  0619  0835               	movf	Exception_Main@lights,w
 13683  061A  3191  2183         	fcall	_setDimmerLights_SwOff
 13684  061C  0020               	movlb	0	; select bank0
 13685  061D  0008               	return
 13686  061E                     l8422:	
 13687                           ;Main_B1.c: 586: }
 13688                           
 13689                           ;Main_B1.c: 582: }
 13690                           ;Main_B1.c: 583: }
 13691                           ;Main_B1.c: 585: break;
 13692                           
 13693  061E  0020               	movlb	0	; select bank0
 13694  061F  0834               	movf	Exception_Main@error,w
 13695                           
 13696                           ; Switch size 1, requested type "space"
 13697                           ; Number of cases is 2, Range of values is 2 to 3
 13698                           ; switch strategies available:
 13699                           ; Name         Instructions Cycles
 13700                           ; simple_byte            7     4 (average)
 13701                           ; direct_byte           13     9 (fixed)
 13702                           ; jumptable            263     9 (fixed)
 13703                           ;	Chosen strategy is simple_byte
 13704  0620  3A02               	xorlw	2	; case 2
 13705  0621  1903               	skipnz
 13706  0622  2D82               	goto	l8380
 13707  0623  3A01               	xorlw	1	; case 3
 13708  0624  1903               	skipnz
 13709  0625  2DC1               	goto	l8396
 13710  0626  2E28               	goto	l1517
 13711  0627  0008               	return
 13712  0628                     l1517:	
 13713  0628  0008               	return
 13714  0629                     __end_of_Exception_Main:	
 13715                           
 13716                           	psect	text87
 13717  1A6F                     __ptext87:	
 13718 ;; *************** function _getDimmerLights_Line *****************
 13719 ;; Defined at:
 13720 ;;		line 1106 in file "../src/Dimmer_B1.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;		None
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;  line            1    0[BANK0 ] unsigned char 
 13725 ;; Return value:  Size  Location     Type
 13726 ;;                  1    wreg      unsigned char 
 13727 ;; Registers used:
 13728 ;;		wreg, status,2
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        1 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    5
 13741 ;; This function calls:
 13742 ;;		Nothing
 13743 ;; This function is called by:
 13744 ;;		_Exception_Main
 13745 ;; This function uses a non-reentrant model
 13746 ;;
 13747                           
 13748                           
 13749                           ;psect for function _getDimmerLights_Line
 13750  1A6F                     _getDimmerLights_Line:	
 13751                           
 13752                           ;Dimmer_B1.c: 1107: char line = 0;
 13753                           
 13754                           ;incstack = 0
 13755                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13756  1A6F  0020               	movlb	0	; select bank0
 13757  1A70  01A0               	clrf	getDimmerLights_Line@line
 13758                           
 13759                           ;Dimmer_B1.c: 1109: if (DimmerLights1.Line == 1) {
 13760  1A71  0022               	movlb	2	; select bank2
 13761  1A72  1CE2               	btfss	(_DimmerLights1^(0+256)+1),1
 13762  1A73  2A77               	goto	l7426
 13763                           
 13764                           ;Dimmer_B1.c: 1110: line = 1;
 13765  1A74  0020               	movlb	0	; select bank0
 13766  1A75  01A0               	clrf	getDimmerLights_Line@line
 13767  1A76  0AA0               	incf	getDimmerLights_Line@line,f
 13768  1A77                     l7426:	
 13769                           
 13770                           ;Dimmer_B1.c: 1111: }
 13771                           ;Dimmer_B1.c: 1123: return line;
 13772  1A77  0020               	movlb	0	; select bank0
 13773  1A78  0820               	movf	getDimmerLights_Line@line,w
 13774  1A79  0008               	return
 13775  1A7A                     __end_of_getDimmerLights_Line:	
 13776                           
 13777                           	psect	text88
 13778  1EA5                     __ptext88:	
 13779 ;; *************** function _DimmerLights_Main *****************
 13780 ;; Defined at:
 13781 ;;		line 825 in file "../src/Dimmer_B1.c"
 13782 ;; Parameters:    Size  Location     Type
 13783 ;;		None
 13784 ;; Auto vars:     Size  Location     Type
 13785 ;;		None
 13786 ;; Return value:  Size  Location     Type
 13787 ;;		None               void
 13788 ;; Registers used:
 13789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13790 ;; Tracked objects:
 13791 ;;		On entry : 0/0
 13792 ;;		On exit  : 0/0
 13793 ;;		Unchanged: 0/0
 13794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;Total ram usage:        0 bytes
 13800 ;; Hardware stack levels used:    1
 13801 ;; Hardware stack levels required when called:   10
 13802 ;; This function calls:
 13803 ;;		_DimmerLights_DimmingFunction
 13804 ;;		_getLoad_OK
 13805 ;;		_getMain_All_Error_Status
 13806 ;;		_getMain_All_LightsStatus
 13807 ;;		_setDimmerLights_Main
 13808 ;; This function is called by:
 13809 ;;		_main
 13810 ;; This function uses a non-reentrant model
 13811 ;;
 13812                           
 13813                           
 13814                           ;psect for function _DimmerLights_Main
 13815  1EA5                     _DimmerLights_Main:	
 13816                           
 13817                           ;Dimmer_B1.c: 828: if (Dimmer.LoadGO == 1) {
 13818                           
 13819                           ;incstack = 0
 13820                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13821  1EA5  0022               	movlb	2	; select bank2
 13822  1EA6  1CAC               	btfss	_Dimmer^(0+256),1
 13823  1EA7  2EBD               	goto	l7978
 13824                           
 13825                           ;Dimmer_B1.c: 829: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13826  1EA8  319A  2232  319E   	fcall	_getLoad_OK
 13827  1EAB  3A01               	xorlw	1
 13828  1EAC  1903               	skipnz
 13829  1EAD  2EBB               	goto	l768
 13830  1EAE  3000               	movlw	0
 13831  1EAF  3190  2077  319E   	fcall	_getMain_All_Error_Status
 13832  1EB2  3800               	iorlw	0
 13833  1EB3  1D03               	skipz
 13834  1EB4  2EBB               	goto	l768
 13835  1EB5  319A  2265  319E   	fcall	_getMain_All_LightsStatus
 13836  1EB8  3800               	iorlw	0
 13837  1EB9  1D03               	skipz
 13838  1EBA  2EBD               	goto	l7978
 13839  1EBB                     l768:	
 13840                           
 13841                           ;Dimmer_B1.c: 830: Dimmer.LoadGO = 0;
 13842  1EBB  0022               	movlb	2	; select bank2
 13843  1EBC  10AC               	bcf	_Dimmer^(0+256),1
 13844  1EBD                     l7978:	
 13845                           
 13846                           ;Dimmer_B1.c: 831: }
 13847                           ;Dimmer_B1.c: 832: }
 13848                           ;Dimmer_B1.c: 837: setDimmerLights_Main(1);
 13849  1EBD  3001               	movlw	1
 13850  1EBE  3197  2795  319E   	fcall	_setDimmerLights_Main
 13851                           
 13852                           ;Dimmer_B1.c: 840: DimmerLights_DimmingFunction(1);
 13853  1EC1  3001               	movlw	1
 13854  1EC2  3192  22F3         	fcall	_DimmerLights_DimmingFunction
 13855  1EC4  0008               	return
 13856  1EC5                     __end_of_DimmerLights_Main:	
 13857                           
 13858                           	psect	text89
 13859  1795                     __ptext89:	
 13860 ;; *************** function _setDimmerLights_Main *****************
 13861 ;; Defined at:
 13862 ;;		line 863 in file "../src/Dimmer_B1.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;  lights          1    wreg     unsigned char 
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;  lights          1    1[BANK1 ] unsigned char 
 13867 ;; Return value:  Size  Location     Type
 13868 ;;		None               void
 13869 ;; Registers used:
 13870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13880 ;;Total ram usage:        1 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; Hardware stack levels required when called:    9
 13883 ;; This function calls:
 13884 ;;		_DimmerLights_SelectPointer
 13885 ;;		_getDimmerLights_Allow_Condition
 13886 ;;		_getMain_All_LightsStatus
 13887 ;;		_setDimmerLights_Dimming
 13888 ;;		_setDimmerLights_OnOff
 13889 ;; This function is called by:
 13890 ;;		_DimmerLights_Main
 13891 ;; This function uses a non-reentrant model
 13892 ;;
 13893                           
 13894                           
 13895                           ;psect for function _setDimmerLights_Main
 13896  1795                     _setDimmerLights_Main:	
 13897                           
 13898                           ;incstack = 0
 13899                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13900                           ;setDimmerLights_Main@lights stored from wreg
 13901  1795  0021               	movlb	1	; select bank1
 13902  1796  00E6               	movwf	setDimmerLights_Main@lights^(0+128)
 13903                           
 13904                           ;Dimmer_B1.c: 865: DimmerLights_SelectPointer(lights);
 13905  1797  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13906  1798  319A  22A7  3197   	fcall	_DimmerLights_SelectPointer
 13907                           
 13908                           ;Dimmer_B1.c: 866: if (DimmerLights->Trigger == 1) {
 13909  179B  0021               	movlb	1	; select bank1
 13910  179C  084C               	movf	_DimmerLights^(0+128),w
 13911  179D  0086               	movwf	6
 13912  179E  3001               	movlw	1	; select bank2/3
 13913  179F  0087               	movwf	7
 13914  17A0  1C81               	btfss	1,1
 13915  17A1  2FC4               	goto	l7370
 13916                           
 13917                           ;Dimmer_B1.c: 867: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13918  17A2  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13919  17A3  319D  251C  3197   	fcall	_getDimmerLights_Allow_Condition
 13920  17A6  3800               	iorlw	0
 13921  17A7  1D03               	skipz
 13922  17A8  0008               	return
 13923                           
 13924                           ;Dimmer_B1.c: 868: DimmerLights->Trigger = 0;
 13925  17A9  0021               	movlb	1	; select bank1
 13926  17AA  084C               	movf	_DimmerLights^(0+128),w
 13927  17AB  0086               	movwf	6
 13928  17AC  3001               	movlw	1	; select bank2/3
 13929  17AD  0087               	movwf	7
 13930  17AE  1081               	bcf	1,1
 13931                           
 13932                           ;Dimmer_B1.c: 869: if (DimmerLights->Switch == 1) {
 13933  17AF  084C               	movf	_DimmerLights^(0+128),w
 13934  17B0  0086               	movwf	6
 13935  17B1  3001               	movlw	1	; select bank2/3
 13936  17B2  0087               	movwf	7
 13937  17B3  1D01               	btfss	1,2
 13938  17B4  2FBD               	goto	l7368
 13939                           
 13940                           ;Dimmer_B1.c: 870: setDimmerLights_OnOff(lights, 1);
 13941  17B5  0020               	movlb	0	; select bank0
 13942  17B6  01ED               	clrf	setDimmerLights_OnOff@command
 13943  17B7  0AED               	incf	setDimmerLights_OnOff@command,f
 13944  17B8  0021               	movlb	1	; select bank1
 13945  17B9  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13946  17BA  318F  273A         	fcall	_setDimmerLights_OnOff
 13947                           
 13948                           ;Dimmer_B1.c: 871: } else {
 13949  17BC  0008               	return
 13950  17BD                     l7368:	
 13951                           
 13952                           ;Dimmer_B1.c: 872: setDimmerLights_OnOff(lights, 0);
 13953  17BD  0020               	movlb	0	; select bank0
 13954  17BE  01ED               	clrf	setDimmerLights_OnOff@command
 13955  17BF  0021               	movlb	1	; select bank1
 13956  17C0  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13957  17C1  318F  273A         	fcall	_setDimmerLights_OnOff
 13958                           
 13959                           ;Dimmer_B1.c: 873: }
 13960                           ;Dimmer_B1.c: 874: }
 13961                           ;Dimmer_B1.c: 875: } else {
 13962  17C3  0008               	return
 13963  17C4                     l7370:	
 13964                           
 13965                           ;Dimmer_B1.c: 876: if (getMain_All_LightsStatus() == 1) {
 13966  17C4  319A  2265  3197   	fcall	_getMain_All_LightsStatus
 13967  17C7  3A01               	xorlw	1
 13968  17C8  1D03               	skipz
 13969  17C9  2FF3               	goto	l7382
 13970                           
 13971                           ;Dimmer_B1.c: 877: if (DimmerLights->DimmingTrigger == 1) {
 13972  17CA  0021               	movlb	1	; select bank1
 13973  17CB  084C               	movf	_DimmerLights^(0+128),w
 13974  17CC  0086               	movwf	6
 13975  17CD  3001               	movlw	1	; select bank2/3
 13976  17CE  0087               	movwf	7
 13977  17CF  1E01               	btfss	1,4
 13978  17D0  0008               	return
 13979                           
 13980                           ;Dimmer_B1.c: 878: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13981  17D1  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 13982  17D2  319D  251C  3197   	fcall	_getDimmerLights_Allow_Condition
 13983  17D5  3800               	iorlw	0
 13984  17D6  1D03               	skipz
 13985  17D7  0008               	return
 13986                           
 13987                           ;Dimmer_B1.c: 879: DimmerLights->DimmingTrigger = 0;
 13988  17D8  0021               	movlb	1	; select bank1
 13989  17D9  084C               	movf	_DimmerLights^(0+128),w
 13990  17DA  0086               	movwf	6
 13991  17DB  3001               	movlw	1	; select bank2/3
 13992  17DC  0087               	movwf	7
 13993  17DD  1201               	bcf	1,4
 13994                           
 13995                           ;Dimmer_B1.c: 880: if (DimmerLights->DimmingSwitch == 1) {
 13996  17DE  084C               	movf	_DimmerLights^(0+128),w
 13997  17DF  0086               	movwf	6
 13998  17E0  3001               	movlw	1	; select bank2/3
 13999  17E1  0087               	movwf	7
 14000  17E2  1E81               	btfss	1,5
 14001  17E3  2FEC               	goto	l7380
 14002                           
 14003                           ;Dimmer_B1.c: 881: setDimmerLights_Dimming(lights, 1);
 14004  17E4  0020               	movlb	0	; select bank0
 14005  17E5  01EA               	clrf	setDimmerLights_Dimming@status
 14006  17E6  0AEA               	incf	setDimmerLights_Dimming@status,f
 14007  17E7  0021               	movlb	1	; select bank1
 14008  17E8  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14009  17E9  3193  23DA         	fcall	_setDimmerLights_Dimming
 14010                           
 14011                           ;Dimmer_B1.c: 882: } else {
 14012  17EB  0008               	return
 14013  17EC                     l7380:	
 14014                           
 14015                           ;Dimmer_B1.c: 883: setDimmerLights_Dimming(lights, 0);
 14016  17EC  0020               	movlb	0	; select bank0
 14017  17ED  01EA               	clrf	setDimmerLights_Dimming@status
 14018  17EE  0021               	movlb	1	; select bank1
 14019  17EF  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14020  17F0  3193  23DA         	fcall	_setDimmerLights_Dimming
 14021                           
 14022                           ;Dimmer_B1.c: 884: }
 14023                           ;Dimmer_B1.c: 885: }
 14024                           ;Dimmer_B1.c: 886: }
 14025                           ;Dimmer_B1.c: 887: } else {
 14026  17F2  0008               	return
 14027  17F3                     l7382:	
 14028                           
 14029                           ;Dimmer_B1.c: 888: if (DimmerLights->DimmingTrigger == 1) {
 14030  17F3  0021               	movlb	1	; select bank1
 14031  17F4  084C               	movf	_DimmerLights^(0+128),w
 14032  17F5  0086               	movwf	6
 14033  17F6  3001               	movlw	1	; select bank2/3
 14034  17F7  0087               	movwf	7
 14035  17F8  1E01               	btfss	1,4
 14036  17F9  0008               	return
 14037                           
 14038                           ;Dimmer_B1.c: 889: DimmerLights->DimmingTrigger = 0;
 14039  17FA  084C               	movf	_DimmerLights^(0+128),w
 14040  17FB  0086               	movwf	6
 14041  17FC  3001               	movlw	1	; select bank2/3
 14042  17FD  0087               	movwf	7
 14043  17FE  1201               	bcf	1,4
 14044  17FF  0008               	return
 14045  1800                     __end_of_setDimmerLights_Main:	
 14046                           
 14047                           	psect	text90
 14048  0F3A                     __ptext90:	
 14049 ;; *************** function _setDimmerLights_OnOff *****************
 14050 ;; Defined at:
 14051 ;;		line 897 in file "../src/Dimmer_B1.c"
 14052 ;; Parameters:    Size  Location     Type
 14053 ;;  lights          1    wreg     unsigned char 
 14054 ;;  command         1   77[BANK0 ] unsigned char 
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  lights          1    0[BANK1 ] unsigned char 
 14057 ;; Return value:  Size  Location     Type
 14058 ;;		None               void
 14059 ;; Registers used:
 14060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14061 ;; Tracked objects:
 14062 ;;		On entry : 0/0
 14063 ;;		On exit  : 0/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14066 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14069 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14070 ;;Total ram usage:        4 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; Hardware stack levels required when called:    8
 14073 ;; This function calls:
 14074 ;;		_getCmd_Status
 14075 ;;		_getDelayOff_GO
 14076 ;;		_getDimmerLights_PercentToValue
 14077 ;;		_getMain_All_LightsStatus
 14078 ;;		_setCmd_Status
 14079 ;;		_setDelayOff_GO
 14080 ;;		_setDimmerIntr_ControlStatus
 14081 ;;		_setDimmerIntr_DimmingValue
 14082 ;;		_setDimmerIntr_Dimming_RF
 14083 ;;		_setDimmerIntr_MaxmumValue
 14084 ;;		_setDimmerLights_DimmingClose
 14085 ;;		_setDimmerLights_Line
 14086 ;;		_setLED
 14087 ;;		_setProductData
 14088 ;;		_setRF_DimmerLights
 14089 ;;		_setTxData
 14090 ;; This function is called by:
 14091 ;;		_setDimmerLights_Main
 14092 ;; This function uses a non-reentrant model
 14093 ;;
 14094                           
 14095                           
 14096                           ;psect for function _setDimmerLights_OnOff
 14097  0F3A                     _setDimmerLights_OnOff:	
 14098                           
 14099                           ;incstack = 0
 14100                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14101                           ;setDimmerLights_OnOff@lights stored from wreg
 14102  0F3A  0021               	movlb	1	; select bank1
 14103  0F3B  00E5               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14104                           
 14105                           ;Dimmer_B1.c: 899: if (command == 1) {
 14106  0F3C  0020               	movlb	0	; select bank0
 14107  0F3D  086D               	movf	setDimmerLights_OnOff@command,w
 14108  0F3E  3A01               	xorlw	1
 14109  0F3F  1D03               	skipz
 14110  0F40  2F9F               	goto	l7032
 14111                           
 14112                           ;Dimmer_B1.c: 901: setDimmerIntr_ControlStatus(lights, 1);
 14113  0F41  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14114  0F42  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14115  0F43  0021               	movlb	1	; select bank1
 14116  0F44  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14117  0F45  319D  2548  318F   	fcall	_setDimmerIntr_ControlStatus
 14118                           
 14119                           ;Dimmer_B1.c: 904: Dimmer.Load_Status = 1;
 14120  0F48  0022               	movlb	2	; select bank2
 14121  0F49  152C               	bsf	_Dimmer^(0+256),2
 14122                           
 14123                           ;Dimmer_B1.c: 905: setDimmerLights_Line(lights);
 14124  0F4A  0021               	movlb	1	; select bank1
 14125  0F4B  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14126  0F4C  319B  2395  318F   	fcall	_setDimmerLights_Line
 14127                           
 14128                           ;Dimmer_B1.c: 911: setLED(lights, 0);
 14129  0F4F  0020               	movlb	0	; select bank0
 14130  0F50  01A2               	clrf	setLED@command
 14131  0F51  0021               	movlb	1	; select bank1
 14132  0F52  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14133  0F53  3191  21BC  318F   	fcall	_setLED
 14134                           
 14135                           ;Dimmer_B1.c: 912: ;;
 14136                           ;Dimmer_B1.c: 932: if (DimmerLights->DimmingRun == 1) {
 14137  0F56  0021               	movlb	1	; select bank1
 14138  0F57  0A4C               	incf	_DimmerLights^(0+128),w
 14139  0F58  0086               	movwf	6
 14140  0F59  3001               	movlw	1	; select bank2/3
 14141  0F5A  0087               	movwf	7
 14142  0F5B  1F01               	btfss	1,6
 14143  0F5C  2F81               	goto	l7024
 14144                           
 14145                           ;Dimmer_B1.c: 933: DimmerLights->DimmingRun = 0;
 14146  0F5D  0A4C               	incf	_DimmerLights^(0+128),w
 14147  0F5E  0086               	movwf	6
 14148  0F5F  3001               	movlw	1	; select bank2/3
 14149  0F60  0087               	movwf	7
 14150  0F61  1301               	bcf	1,6
 14151                           
 14152                           ;Dimmer_B1.c: 934: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14153  0F62  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14154  0F63  3E14               	addlw	20
 14155  0F64  076E               	addwf	_product^(0+128),w
 14156  0F65  0020               	movlb	0	; select bank0
 14157  0F66  00EE               	movwf	??_setDimmerLights_OnOff
 14158  0F67  086E               	movf	??_setDimmerLights_OnOff,w
 14159  0F68  0086               	movwf	6
 14160  0F69  3001               	movlw	1	; select bank2/3
 14161  0F6A  0087               	movwf	7
 14162  0F6B  0801               	movf	1,w
 14163  0F6C  3195  25FF  318F   	fcall	_getDimmerLights_PercentToValue
 14164  0F6F  0020               	movlb	0	; select bank0
 14165  0F70  00EF               	movwf	??_setDimmerLights_OnOff+1
 14166  0F71  086F               	movf	??_setDimmerLights_OnOff+1,w
 14167  0F72  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14168  0F73  0021               	movlb	1	; select bank1
 14169  0F74  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14170  0F75  319A  22BF  318F   	fcall	_setDimmerIntr_MaxmumValue
 14171                           
 14172                           ;Dimmer_B1.c: 935: setDimmerIntr_Dimming_RF(lights, 1);
 14173  0F78  0020               	movlb	0	; select bank0
 14174  0F79  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14175  0F7A  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14176  0F7B  0021               	movlb	1	; select bank1
 14177  0F7C  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14178  0F7D  319D  2560  318F   	fcall	_setDimmerIntr_Dimming_RF
 14179                           
 14180                           ;Dimmer_B1.c: 936: } else {
 14181  0F80  2F98               	goto	l7026
 14182  0F81                     l7024:	
 14183                           
 14184                           ;Dimmer_B1.c: 937: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14185  0F81  0021               	movlb	1	; select bank1
 14186  0F82  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14187  0F83  3E14               	addlw	20
 14188  0F84  076E               	addwf	_product^(0+128),w
 14189  0F85  0020               	movlb	0	; select bank0
 14190  0F86  00EE               	movwf	??_setDimmerLights_OnOff
 14191  0F87  086E               	movf	??_setDimmerLights_OnOff,w
 14192  0F88  0086               	movwf	6
 14193  0F89  3001               	movlw	1	; select bank2/3
 14194  0F8A  0087               	movwf	7
 14195  0F8B  0801               	movf	1,w
 14196  0F8C  3195  25FF  318F   	fcall	_getDimmerLights_PercentToValue
 14197  0F8F  0020               	movlb	0	; select bank0
 14198  0F90  00EF               	movwf	??_setDimmerLights_OnOff+1
 14199  0F91  086F               	movf	??_setDimmerLights_OnOff+1,w
 14200  0F92  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14201  0F93  0021               	movlb	1	; select bank1
 14202  0F94  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14203  0F95  319A  22CB  318F   	fcall	_setDimmerIntr_DimmingValue
 14204  0F98                     l7026:	
 14205                           
 14206                           ;Dimmer_B1.c: 940: }
 14207                           ;Dimmer_B1.c: 942: if (lights == 1) {
 14208  0F98  0021               	movlb	1	; select bank1
 14209  0F99  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14210  0F9A  3A01               	xorlw	1
 14211  0F9B  1D03               	skipz
 14212  0F9C  2FCE               	goto	l7046
 14213                           
 14214                           ;Dimmer_B1.c: 944: DimmerIntr1.TuneGO = 1;
 14215  0F9D  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14216                           
 14217                           ;Dimmer_B1.c: 950: }
 14218                           ;Dimmer_B1.c: 956: } else if (command == 0) {
 14219                           
 14220                           ;Dimmer_B1.c: 946: } else if (lights == 2) {
 14221  0F9E  2FCE               	goto	l7046
 14222  0F9F                     l7032:	
 14223  0F9F  0020               	movlb	0	; select bank0
 14224  0FA0  08ED               	movf	setDimmerLights_OnOff@command,f
 14225  0FA1  1D03               	skipz
 14226  0FA2  2FCE               	goto	l7046
 14227                           
 14228                           ;Dimmer_B1.c: 958: setDimmerIntr_ControlStatus(lights, 0);
 14229  0FA3  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14230  0FA4  0021               	movlb	1	; select bank1
 14231  0FA5  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14232  0FA6  319D  2548  318F   	fcall	_setDimmerIntr_ControlStatus
 14233                           
 14234                           ;Dimmer_B1.c: 960: Dimmer.Load_Status = 0;
 14235  0FA9  0022               	movlb	2	; select bank2
 14236  0FAA  112C               	bcf	_Dimmer^(0+256),2
 14237                           
 14238                           ;Dimmer_B1.c: 961: setDimmerLights_Line(0);
 14239  0FAB  3000               	movlw	0
 14240  0FAC  319B  2395  318F   	fcall	_setDimmerLights_Line
 14241                           
 14242                           ;Dimmer_B1.c: 965: if (getDelayOff_GO(lights) == 1) {
 14243  0FAF  0021               	movlb	1	; select bank1
 14244  0FB0  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14245  0FB1  319B  23A6  318F   	fcall	_getDelayOff_GO
 14246  0FB4  3A01               	xorlw	1
 14247  0FB5  1D03               	skipz
 14248  0FB6  2FBF               	goto	l795
 14249                           
 14250                           ;Dimmer_B1.c: 966: setDelayOff_GO(lights, 0, 0);
 14251  0FB7  0020               	movlb	0	; select bank0
 14252  0FB8  01E5               	clrf	setDelayOff_GO@command
 14253  0FB9  01E6               	clrf	setDelayOff_GO@value
 14254  0FBA  0021               	movlb	1	; select bank1
 14255  0FBB  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14256  0FBC  318C  2409  318F   	fcall	_setDelayOff_GO
 14257  0FBF                     l795:	
 14258                           
 14259                           ;Dimmer_B1.c: 967: }
 14260                           ;Dimmer_B1.c: 972: setLED(lights, 1);
 14261  0FBF  0020               	movlb	0	; select bank0
 14262  0FC0  01A2               	clrf	setLED@command
 14263  0FC1  0AA2               	incf	setLED@command,f
 14264  0FC2  0021               	movlb	1	; select bank1
 14265  0FC3  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14266  0FC4  3191  21BC  318F   	fcall	_setLED
 14267                           
 14268                           ;Dimmer_B1.c: 973: ;;
 14269                           ;Dimmer_B1.c: 977: if (lights == 1) {
 14270  0FC7  0021               	movlb	1	; select bank1
 14271  0FC8  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14272  0FC9  3A01               	xorlw	1
 14273  0FCA  1D03               	skipz
 14274  0FCB  2FCE               	goto	l7046
 14275                           
 14276                           ;Dimmer_B1.c: 978: RB1 = 0;
 14277  0FCC  0020               	movlb	0	; select bank0
 14278  0FCD  108D               	bcf	13,1	;volatile
 14279  0FCE                     l7046:	
 14280                           
 14281                           ;Dimmer_B1.c: 980: }
 14282                           ;Dimmer_B1.c: 991: }
 14283                           ;Dimmer_B1.c: 993: setDimmerLights_DimmingClose();
 14284  0FCE  319A  220B  318F   	fcall	_setDimmerLights_DimmingClose
 14285                           
 14286                           ;Dimmer_B1.c: 995: setRF_DimmerLights(lights, command);
 14287  0FD1  0020               	movlb	0	; select bank0
 14288  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14289  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14290  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14291  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14292  0FD6  0021               	movlb	1	; select bank1
 14293  0FD7  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14294  0FD8  3196  26C9  318F   	fcall	_setRF_DimmerLights
 14295                           
 14296                           ;Dimmer_B1.c: 997: if (getCmd_Status(1) == 1) {
 14297  0FDB  3001               	movlw	1
 14298  0FDC  319B  23FB  318F   	fcall	_getCmd_Status
 14299  0FDF  3A01               	xorlw	1
 14300  0FE0  1D03               	skipz
 14301  0FE1  2FFD               	goto	l7062
 14302                           
 14303                           ;Dimmer_B1.c: 998: if (getMain_All_LightsStatus() == 0) {
 14304  0FE2  319A  2265  318F   	fcall	_getMain_All_LightsStatus
 14305  0FE5  3800               	iorlw	0
 14306  0FE6  1D03               	skipz
 14307  0FE7  0008               	return
 14308                           
 14309                           ;Dimmer_B1.c: 999: setCmd_Status(1, 0);
 14310  0FE8  0020               	movlb	0	; select bank0
 14311  0FE9  01A0               	clrf	setCmd_Status@cmd
 14312  0FEA  3001               	movlw	1
 14313  0FEB  319D  2578  318F   	fcall	_setCmd_Status
 14314                           
 14315                           ;Dimmer_B1.c: 1000: setProductData(11, 0);
 14316  0FEE  0020               	movlb	0	; select bank0
 14317  0FEF  01E2               	clrf	setProductData@value
 14318  0FF0  300B               	movlw	11
 14319  0FF1  319A  22B3  318F   	fcall	_setProductData
 14320                           
 14321                           ;Dimmer_B1.c: 1001: setProductData(17, 0);
 14322  0FF4  0020               	movlb	0	; select bank0
 14323  0FF5  01E2               	clrf	setProductData@value
 14324  0FF6  3011               	movlw	17
 14325  0FF7  319A  22B3  318F   	fcall	_setProductData
 14326                           
 14327                           ;Dimmer_B1.c: 1002: setTxData();
 14328  0FFA  318E  267F         	fcall	_setTxData
 14329                           
 14330                           ;Dimmer_B1.c: 1003: }
 14331                           ;Dimmer_B1.c: 1004: } else {
 14332  0FFC  0008               	return
 14333  0FFD                     l7062:	
 14334                           
 14335                           ;Dimmer_B1.c: 1005: setTxData();
 14336  0FFD  318E  267F         	fcall	_setTxData
 14337  0FFF  0008               	return
 14338  1000                     __end_of_setDimmerLights_OnOff:	
 14339                           
 14340                           	psect	text91
 14341  11BC                     __ptext91:	
 14342 ;; *************** function _setLED *****************
 14343 ;; Defined at:
 14344 ;;		line 81 in file "../src/LED_B1.c"
 14345 ;; Parameters:    Size  Location     Type
 14346 ;;  led             1    wreg     unsigned char 
 14347 ;;  command         1    2[BANK0 ] unsigned char 
 14348 ;; Auto vars:     Size  Location     Type
 14349 ;;  led             1    3[BANK0 ] unsigned char 
 14350 ;; Return value:  Size  Location     Type
 14351 ;;		None               void
 14352 ;; Registers used:
 14353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14354 ;; Tracked objects:
 14355 ;;		On entry : 0/0
 14356 ;;		On exit  : 0/0
 14357 ;;		Unchanged: 0/0
 14358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14359 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;Total ram usage:        2 bytes
 14364 ;; Hardware stack levels used:    1
 14365 ;; Hardware stack levels required when called:    6
 14366 ;; This function calls:
 14367 ;;		_LedPointSelect
 14368 ;; This function is called by:
 14369 ;;		_setDimmerLights_OnOff
 14370 ;;		_setLED_Initialization
 14371 ;;		_Exception_Main
 14372 ;;		_setSw_Initialization
 14373 ;; This function uses a non-reentrant model
 14374 ;;
 14375                           
 14376                           
 14377                           ;psect for function _setLED
 14378  11BC                     _setLED:	
 14379                           
 14380                           ;incstack = 0
 14381                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14382                           ;setLED@led stored from wreg
 14383  11BC  0020               	movlb	0	; select bank0
 14384  11BD  00A3               	movwf	setLED@led
 14385                           
 14386                           ;LED_B1.c: 82: LedPointSelect(led);
 14387  11BE  0823               	movf	setLED@led,w
 14388  11BF  319A  22D7  3191   	fcall	_LedPointSelect
 14389                           
 14390                           ;LED_B1.c: 83: if (command == 0) {
 14391  11C2  0020               	movlb	0	; select bank0
 14392  11C3  08A2               	movf	setLED@command,f
 14393  11C4  1D03               	skipz
 14394  11C5  29CB               	goto	l6740
 14395                           
 14396                           ;LED_B1.c: 112: if (led == 99) {
 14397  11C6  0823               	movf	setLED@led,w
 14398  11C7  3A63               	xorlw	99
 14399  11C8  1D03               	skipz
 14400  11C9  29CB               	goto	l6740
 14401                           
 14402                           ;LED_B1.c: 116: RB5 = 1;
 14403  11CA  168D               	bsf	13,5	;volatile
 14404  11CB                     l6740:	
 14405                           
 14406                           ;LED_B1.c: 118: }
 14407                           ;LED_B1.c: 120: }
 14408                           ;LED_B1.c: 121: if (command == 1) {
 14409  11CB  0822               	movf	setLED@command,w
 14410  11CC  3A01               	xorlw	1
 14411  11CD  1D03               	skipz
 14412  11CE  29D4               	goto	l6746
 14413                           
 14414                           ;LED_B1.c: 150: if (led == 99) {
 14415  11CF  0823               	movf	setLED@led,w
 14416  11D0  3A63               	xorlw	99
 14417  11D1  1D03               	skipz
 14418  11D2  29D4               	goto	l6746
 14419                           
 14420                           ;LED_B1.c: 154: RB5 = 0;
 14421  11D3  128D               	bcf	13,5	;volatile
 14422  11D4                     l6746:	
 14423                           
 14424                           ;LED_B1.c: 156: }
 14425                           ;LED_B1.c: 158: }
 14426                           ;LED_B1.c: 159: if (command == 10) {
 14427  11D4  0822               	movf	setLED@command,w
 14428  11D5  3A0A               	xorlw	10
 14429  11D6  1D03               	skipz
 14430  11D7  29EA               	goto	l6754
 14431                           
 14432                           ;LED_B1.c: 160: LED->GO = 0;
 14433  11D8  0021               	movlb	1	; select bank1
 14434  11D9  084D               	movf	_LED^(0+128),w
 14435  11DA  0086               	movwf	6
 14436  11DB  3001               	movlw	1	; select bank2/3
 14437  11DC  0087               	movwf	7
 14438  11DD  1081               	bcf	1,1
 14439                           
 14440                           ;LED_B1.c: 161: LED->Time = 0;
 14441  11DE  0A4D               	incf	_LED^(0+128),w
 14442  11DF  0086               	movwf	6
 14443  11E0  3001               	movlw	1	; select bank2/3
 14444  11E1  0087               	movwf	7
 14445  11E2  3000               	movlw	0
 14446  11E3  3FC0               	movwi [0]fsr1
 14447  11E4  3FC1               	movwi [1]fsr1
 14448                           
 14449                           ;LED_B1.c: 190: if (led == 99) {
 14450  11E5  0020               	movlb	0	; select bank0
 14451  11E6  0823               	movf	setLED@led,w
 14452  11E7  3A63               	xorlw	99
 14453  11E8  1903               	btfsc	3,2
 14454                           
 14455                           ;LED_B1.c: 194: RB5 = 1;
 14456  11E9  168D               	bsf	13,5	;volatile
 14457  11EA                     l6754:	
 14458                           
 14459                           ;LED_B1.c: 196: }
 14460                           ;LED_B1.c: 198: }
 14461                           ;LED_B1.c: 199: if (command == 11) {
 14462  11EA  0822               	movf	setLED@command,w
 14463  11EB  3A0B               	xorlw	11
 14464  11EC  1D03               	skipz
 14465  11ED  0008               	return
 14466                           
 14467                           ;LED_B1.c: 200: LED->GO = 1;
 14468  11EE  0021               	movlb	1	; select bank1
 14469  11EF  084D               	movf	_LED^(0+128),w
 14470  11F0  0086               	movwf	6
 14471  11F1  3001               	movlw	1	; select bank2/3
 14472  11F2  0087               	movwf	7
 14473  11F3  1481               	bsf	1,1
 14474  11F4  0008               	return
 14475  11F5                     __end_of_setLED:	
 14476                           
 14477                           	psect	text92
 14478  1AD7                     __ptext92:	
 14479 ;; *************** function _LedPointSelect *****************
 14480 ;; Defined at:
 14481 ;;		line 7 in file "../src/LED_B1.c"
 14482 ;; Parameters:    Size  Location     Type
 14483 ;;  led             1    wreg     unsigned char 
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;  led             1    1[BANK0 ] unsigned char 
 14486 ;; Return value:  Size  Location     Type
 14487 ;;		None               void
 14488 ;; Registers used:
 14489 ;;		wreg
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;Total ram usage:        2 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    5
 14502 ;; This function calls:
 14503 ;;		Nothing
 14504 ;; This function is called by:
 14505 ;;		_setLED_Initialization
 14506 ;;		_setLED
 14507 ;;		_setLED_Main
 14508 ;; This function uses a non-reentrant model
 14509 ;;
 14510                           
 14511                           
 14512                           ;psect for function _LedPointSelect
 14513  1AD7                     _LedPointSelect:	
 14514                           
 14515                           ;incstack = 0
 14516                           ; Regs used in _LedPointSelect: [wreg]
 14517                           ;LedPointSelect@led stored from wreg
 14518  1AD7  0020               	movlb	0	; select bank0
 14519  1AD8  00A1               	movwf	LedPointSelect@led
 14520                           
 14521                           ;LED_B1.c: 24: if (led == 99) {
 14522  1AD9  0821               	movf	LedPointSelect@led,w
 14523  1ADA  3A63               	xorlw	99
 14524  1ADB  1D03               	skipz
 14525  1ADC  0008               	return
 14526                           
 14527                           ;LED_B1.c: 25: LED = &VarErrLED;
 14528  1ADD  3069               	movlw	_VarErrLED& (0+255)
 14529  1ADE  00A0               	movwf	??_LedPointSelect
 14530  1ADF  0820               	movf	??_LedPointSelect,w
 14531  1AE0  0021               	movlb	1	; select bank1
 14532  1AE1  00CD               	movwf	_LED^(0+128)
 14533  1AE2  0008               	return
 14534  1AE3                     __end_of_LedPointSelect:	
 14535                           
 14536                           	psect	text93
 14537  1A0B                     __ptext93:	
 14538 ;; *************** function _setDimmerLights_DimmingClose *****************
 14539 ;; Defined at:
 14540 ;;		line 1774 in file "../src/Dimmer_B1.c"
 14541 ;; Parameters:    Size  Location     Type
 14542 ;;		None
 14543 ;; Auto vars:     Size  Location     Type
 14544 ;;		None
 14545 ;; Return value:  Size  Location     Type
 14546 ;;		None               void
 14547 ;; Registers used:
 14548 ;;		wreg, status,2, status,0, pclath, cstack
 14549 ;; Tracked objects:
 14550 ;;		On entry : 0/0
 14551 ;;		On exit  : 0/0
 14552 ;;		Unchanged: 0/0
 14553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14558 ;;Total ram usage:        0 bytes
 14559 ;; Hardware stack levels used:    1
 14560 ;; Hardware stack levels required when called:    6
 14561 ;; This function calls:
 14562 ;;		_setDimmerIntr_Dimming_Sw
 14563 ;; This function is called by:
 14564 ;;		_setDimmerLights_OnOff
 14565 ;; This function uses a non-reentrant model
 14566 ;;
 14567                           
 14568                           
 14569                           ;psect for function _setDimmerLights_DimmingClose
 14570  1A0B                     _setDimmerLights_DimmingClose:	
 14571                           
 14572                           ;Dimmer_B1.c: 1776: setDimmerIntr_Dimming_Sw(1, 0);
 14573                           
 14574                           ;incstack = 0
 14575                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14576  1A0B  0020               	movlb	0	; select bank0
 14577  1A0C  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14578  1A0D  3001               	movlw	1
 14579  1A0E  319D  2532         	fcall	_setDimmerIntr_Dimming_Sw
 14580  1A10  0008               	return
 14581  1A11                     __end_of_setDimmerLights_DimmingClose:	
 14582                           
 14583                           	psect	text94
 14584  1D60                     __ptext94:	
 14585 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14586 ;; Defined at:
 14587 ;;		line 262 in file "../src/Dimmer_B1.c"
 14588 ;; Parameters:    Size  Location     Type
 14589 ;;  lights          1    wreg     unsigned char 
 14590 ;;  command         1    0[BANK0 ] unsigned char 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  lights          1    2[BANK0 ] unsigned char 
 14593 ;; Return value:  Size  Location     Type
 14594 ;;		None               void
 14595 ;; Registers used:
 14596 ;;		wreg, status,2, status,0
 14597 ;; Tracked objects:
 14598 ;;		On entry : 0/0
 14599 ;;		On exit  : 0/0
 14600 ;;		Unchanged: 0/0
 14601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14602 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;Total ram usage:        3 bytes
 14607 ;; Hardware stack levels used:    1
 14608 ;; Hardware stack levels required when called:    5
 14609 ;; This function calls:
 14610 ;;		Nothing
 14611 ;; This function is called by:
 14612 ;;		_setDimmerLights_OnOff
 14613 ;;		_setRFSW_AdjControl
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           
 14618                           ;psect for function _setDimmerIntr_Dimming_RF
 14619  1D60                     _setDimmerIntr_Dimming_RF:	
 14620                           
 14621                           ;incstack = 0
 14622                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14623                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14624  1D60  0020               	movlb	0	; select bank0
 14625  1D61  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14626                           
 14627                           ;Dimmer_B1.c: 264: if (lights == 1) {
 14628  1D62  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14629  1D63  3A01               	xorlw	1
 14630  1D64  1D03               	skipz
 14631  1D65  0008               	return
 14632                           
 14633                           ;Dimmer_B1.c: 265: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14634  1D66  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14635  1D67  3A01               	xorlw	1
 14636  1D68  3000               	movlw	0
 14637  1D69  1903               	skipnz
 14638  1D6A  3001               	movlw	1
 14639  1D6B  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14640  1D6C  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14641  1D6D  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14642  1D6E  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14643  1D6F  0021               	movlb	1	; select bank1
 14644  1D70  083C               	movf	_DimmerIntr1^(0+128),w
 14645  1D71  0020               	movlb	0	; select bank0
 14646  1D72  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14647  1D73  39BF               	andlw	-65
 14648  1D74  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14649  1D75  0021               	movlb	1	; select bank1
 14650  1D76  00BC               	movwf	_DimmerIntr1^(0+128)
 14651  1D77  0008               	return
 14652  1D78                     __end_of_setDimmerIntr_Dimming_RF:	
 14653                           
 14654                           	psect	text95
 14655  1ACB                     __ptext95:	
 14656 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14657 ;; Defined at:
 14658 ;;		line 106 in file "../src/Dimmer_B1.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;  lights          1    wreg     unsigned char 
 14661 ;;  value           1   66[BANK0 ] unsigned char 
 14662 ;; Auto vars:     Size  Location     Type
 14663 ;;  lights          1   68[BANK0 ] unsigned char 
 14664 ;; Return value:  Size  Location     Type
 14665 ;;		None               void
 14666 ;; Registers used:
 14667 ;;		wreg
 14668 ;; Tracked objects:
 14669 ;;		On entry : 0/0
 14670 ;;		On exit  : 0/0
 14671 ;;		Unchanged: 0/0
 14672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14673 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;Total ram usage:        3 bytes
 14678 ;; Hardware stack levels used:    1
 14679 ;; Hardware stack levels required when called:    5
 14680 ;; This function calls:
 14681 ;;		Nothing
 14682 ;; This function is called by:
 14683 ;;		_setDimmerLights_OnOff
 14684 ;; This function uses a non-reentrant model
 14685 ;;
 14686                           
 14687                           
 14688                           ;psect for function _setDimmerIntr_DimmingValue
 14689  1ACB                     _setDimmerIntr_DimmingValue:	
 14690                           
 14691                           ;incstack = 0
 14692                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14693                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14694  1ACB  0020               	movlb	0	; select bank0
 14695  1ACC  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14696                           
 14697                           ;Dimmer_B1.c: 108: if (lights == 1) {
 14698  1ACD  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14699  1ACE  3A01               	xorlw	1
 14700  1ACF  1D03               	skipz
 14701  1AD0  0008               	return
 14702                           
 14703                           ;Dimmer_B1.c: 109: DimmerIntr1.DimmingValue = value;
 14704  1AD1  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14705  1AD2  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14706  1AD3  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14707  1AD4  0021               	movlb	1	; select bank1
 14708  1AD5  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 14709  1AD6  0008               	return
 14710  1AD7                     __end_of_setDimmerIntr_DimmingValue:	
 14711                           
 14712                           	psect	text96
 14713  1D48                     __ptext96:	
 14714 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14715 ;; Defined at:
 14716 ;;		line 88 in file "../src/Dimmer_B1.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;  lights          1    wreg     unsigned char 
 14719 ;;  command         1    0[BANK0 ] unsigned char 
 14720 ;; Auto vars:     Size  Location     Type
 14721 ;;  lights          1    2[BANK0 ] unsigned char 
 14722 ;; Return value:  Size  Location     Type
 14723 ;;		None               void
 14724 ;; Registers used:
 14725 ;;		wreg, status,2, status,0
 14726 ;; Tracked objects:
 14727 ;;		On entry : 0/0
 14728 ;;		On exit  : 0/0
 14729 ;;		Unchanged: 0/0
 14730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14731 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;Total ram usage:        3 bytes
 14736 ;; Hardware stack levels used:    1
 14737 ;; Hardware stack levels required when called:    5
 14738 ;; This function calls:
 14739 ;;		Nothing
 14740 ;; This function is called by:
 14741 ;;		_setDimmerLights_OnOff
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           
 14746                           ;psect for function _setDimmerIntr_ControlStatus
 14747  1D48                     _setDimmerIntr_ControlStatus:	
 14748                           
 14749                           ;incstack = 0
 14750                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14751                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14752  1D48  0020               	movlb	0	; select bank0
 14753  1D49  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14754                           
 14755                           ;Dimmer_B1.c: 90: if (lights == 1) {
 14756  1D4A  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14757  1D4B  3A01               	xorlw	1
 14758  1D4C  1D03               	skipz
 14759  1D4D  0008               	return
 14760                           
 14761                           ;Dimmer_B1.c: 91: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14762  1D4E  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14763  1D4F  3A01               	xorlw	1
 14764  1D50  3000               	movlw	0
 14765  1D51  1903               	skipnz
 14766  1D52  3001               	movlw	1
 14767  1D53  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14768  1D54  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14769  1D55  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14770  1D56  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14771  1D57  0021               	movlb	1	; select bank1
 14772  1D58  083C               	movf	_DimmerIntr1^(0+128),w
 14773  1D59  0020               	movlb	0	; select bank0
 14774  1D5A  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14775  1D5B  39F7               	andlw	-9
 14776  1D5C  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14777  1D5D  0021               	movlb	1	; select bank1
 14778  1D5E  00BC               	movwf	_DimmerIntr1^(0+128)
 14779  1D5F  0008               	return
 14780  1D60                     __end_of_setDimmerIntr_ControlStatus:	
 14781                           
 14782                           	psect	text97
 14783  0C09                     __ptext97:	
 14784 ;; *************** function _setDelayOff_GO *****************
 14785 ;; Defined at:
 14786 ;;		line 87 in file "../src/DelayOff_B1.c"
 14787 ;; Parameters:    Size  Location     Type
 14788 ;;  sw              1    wreg     unsigned char 
 14789 ;;  command         1   69[BANK0 ] unsigned char 
 14790 ;;  value           1   70[BANK0 ] unsigned char 
 14791 ;; Auto vars:     Size  Location     Type
 14792 ;;  sw              1   76[BANK0 ] unsigned char 
 14793 ;;  k               1   75[BANK0 ] unsigned char 
 14794 ;;  j               1   74[BANK0 ] unsigned char 
 14795 ;;  i               1   73[BANK0 ] unsigned char 
 14796 ;; Return value:  Size  Location     Type
 14797 ;;		None               void
 14798 ;; Registers used:
 14799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14800 ;; Tracked objects:
 14801 ;;		On entry : 0/0
 14802 ;;		On exit  : 0/0
 14803 ;;		Unchanged: 0/0
 14804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14805 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14806 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14807 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14808 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14809 ;;Total ram usage:        8 bytes
 14810 ;; Hardware stack levels used:    1
 14811 ;; Hardware stack levels required when called:    6
 14812 ;; This function calls:
 14813 ;;		_DelayOffPointSelect
 14814 ;;		___bmul
 14815 ;;		_setProductData
 14816 ;; This function is called by:
 14817 ;;		_setDimmerLights_OnOff
 14818 ;;		_setRFSW_Control
 14819 ;; This function uses a non-reentrant model
 14820 ;;
 14821                           
 14822                           
 14823                           ;psect for function _setDelayOff_GO
 14824  0C09                     _setDelayOff_GO:	
 14825                           
 14826                           ;incstack = 0
 14827                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14828                           ;setDelayOff_GO@sw stored from wreg
 14829  0C09  0020               	movlb	0	; select bank0
 14830  0C0A  00EC               	movwf	setDelayOff_GO@sw
 14831                           
 14832                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14833  0C0B  086C               	movf	setDelayOff_GO@sw,w
 14834  0C0C  319A  229B  318C   	fcall	_DelayOffPointSelect
 14835                           
 14836                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14837  0C0F  0020               	movlb	0	; select bank0
 14838  0C10  0865               	movf	setDelayOff_GO@command,w
 14839  0C11  3A01               	xorlw	1
 14840  0C12  3000               	movlw	0
 14841  0C13  1903               	skipnz
 14842  0C14  3001               	movlw	1
 14843  0C15  00E7               	movwf	??_setDelayOff_GO
 14844  0C16  0021               	movlb	1	; select bank1
 14845  0C17  084A               	movf	_DelayOff^(0+128),w
 14846  0C18  0086               	movwf	6
 14847  0C19  3001               	movlw	1	; select bank2/3
 14848  0C1A  0087               	movwf	7
 14849  0C1B  0020               	movlb	0	; select bank0
 14850  0C1C  0DE7               	rlf	??_setDelayOff_GO,f
 14851  0C1D  0801               	movf	1,w
 14852  0C1E  0667               	xorwf	??_setDelayOff_GO,w
 14853  0C1F  39FD               	andlw	-3
 14854  0C20  0667               	xorwf	??_setDelayOff_GO,w
 14855  0C21  0081               	movwf	1
 14856                           
 14857                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14858  0C22  0021               	movlb	1	; select bank1
 14859  0C23  084A               	movf	_DelayOff^(0+128),w
 14860  0C24  3E02               	addlw	2
 14861  0C25  0086               	movwf	6
 14862  0C26  3001               	movlw	1	; select bank2/3
 14863  0C27  0087               	movwf	7
 14864  0C28  3000               	movlw	0
 14865  0C29  3FC0               	movwi [0]fsr1
 14866  0C2A  3FC1               	movwi [1]fsr1
 14867                           
 14868                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14869  0C2B  084A               	movf	_DelayOff^(0+128),w
 14870  0C2C  3E04               	addlw	4
 14871  0C2D  0086               	movwf	6
 14872  0C2E  3001               	movlw	1	; select bank2/3
 14873  0C2F  0087               	movwf	7
 14874  0C30  0181               	clrf	1
 14875                           
 14876                           ;DelayOff_B1.c: 94: if (command == 1) {
 14877  0C31  0020               	movlb	0	; select bank0
 14878  0C32  0865               	movf	setDelayOff_GO@command,w
 14879  0C33  3A01               	xorlw	1
 14880  0C34  1D03               	skipz
 14881  0C35  2C8B               	goto	l6316
 14882                           
 14883                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14884  0C36  3005               	movlw	5
 14885  0C37  00E7               	movwf	??_setDelayOff_GO
 14886  0C38  0867               	movf	??_setDelayOff_GO,w
 14887  0C39  00E9               	movwf	setDelayOff_GO@i
 14888  0C3A  01EA               	clrf	setDelayOff_GO@j
 14889  0C3B  01EB               	clrf	setDelayOff_GO@k
 14890                           
 14891                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14892  0C3C  300F               	movlw	15
 14893  0C3D  0566               	andwf	setDelayOff_GO@value,w
 14894  0C3E  00E7               	movwf	??_setDelayOff_GO
 14895  0C3F  0867               	movf	??_setDelayOff_GO,w
 14896  0C40  3A05               	xorlw	5
 14897  0C41  1903               	skipnz
 14898  0C42  2C47               	goto	l6302
 14899  0C43  0866               	movf	setDelayOff_GO@value,w
 14900  0C44  390F               	andlw	15
 14901  0C45  1D03               	btfss	3,2
 14902  0C46  2C77               	goto	l6312
 14903  0C47                     l6302:	
 14904  0C47  3031               	movlw	49
 14905  0C48  0266               	subwf	setDelayOff_GO@value,w
 14906  0C49  1803               	skipnc
 14907  0C4A  2C77               	goto	l6312
 14908                           
 14909                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14910  0C4B  0866               	movf	setDelayOff_GO@value,w
 14911  0C4C  390F               	andlw	15
 14912  0C4D  00E7               	movwf	??_setDelayOff_GO
 14913  0C4E  0867               	movf	??_setDelayOff_GO,w
 14914  0C4F  00EA               	movwf	setDelayOff_GO@j
 14915                           
 14916                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14917  0C50  0866               	movf	setDelayOff_GO@value,w
 14918  0C51  00E7               	movwf	??_setDelayOff_GO
 14919  0C52  3004               	movlw	4
 14920  0C53                     u5435:	
 14921  0C53  36E7               	lsrf	??_setDelayOff_GO,f
 14922  0C54  0B89               	decfsz	9,f
 14923  0C55  2C53               	goto	u5435
 14924  0C56  0867               	movf	??_setDelayOff_GO,w
 14925  0C57  390F               	andlw	15
 14926  0C58  00E8               	movwf	??_setDelayOff_GO+1
 14927  0C59  0868               	movf	??_setDelayOff_GO+1,w
 14928  0C5A  00EB               	movwf	setDelayOff_GO@k
 14929                           
 14930                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14931  0C5B  300A               	movlw	10
 14932  0C5C  00E7               	movwf	??_setDelayOff_GO
 14933  0C5D  0867               	movf	??_setDelayOff_GO,w
 14934  0C5E  00A0               	movwf	___bmul@multiplicand
 14935  0C5F  086B               	movf	setDelayOff_GO@k,w
 14936  0C60  319C  240D  318C   	fcall	___bmul
 14937  0C63  0020               	movlb	0	; select bank0
 14938  0C64  076A               	addwf	setDelayOff_GO@j,w
 14939  0C65  00E8               	movwf	??_setDelayOff_GO+1
 14940  0C66  0021               	movlb	1	; select bank1
 14941  0C67  0A4A               	incf	_DelayOff^(0+128),w
 14942  0C68  0086               	movwf	6
 14943  0C69  3001               	movlw	1	; select bank2/3
 14944  0C6A  0087               	movwf	7
 14945  0C6B  0020               	movlb	0	; select bank0
 14946  0C6C  0868               	movf	??_setDelayOff_GO+1,w
 14947  0C6D  0081               	movwf	1
 14948                           
 14949                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14950  0C6E  0866               	movf	setDelayOff_GO@value,w
 14951  0C6F  00E7               	movwf	??_setDelayOff_GO
 14952  0C70  0867               	movf	??_setDelayOff_GO,w
 14953  0C71  00E2               	movwf	setProductData@value
 14954  0C72  086C               	movf	setDelayOff_GO@sw,w
 14955  0C73  3E1A               	addlw	26
 14956  0C74  319A  22B3         	fcall	_setProductData
 14957                           
 14958                           ;DelayOff_B1.c: 103: } else {
 14959  0C76  0008               	return
 14960  0C77                     l6312:	
 14961                           
 14962                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14963  0C77  3005               	movlw	5
 14964  0C78  0020               	movlb	0	; select bank0
 14965  0C79  00E7               	movwf	??_setDelayOff_GO
 14966  0C7A  0021               	movlb	1	; select bank1
 14967  0C7B  0A4A               	incf	_DelayOff^(0+128),w
 14968  0C7C  0086               	movwf	6
 14969  0C7D  3001               	movlw	1	; select bank2/3
 14970  0C7E  0087               	movwf	7
 14971  0C7F  0020               	movlb	0	; select bank0
 14972  0C80  0867               	movf	??_setDelayOff_GO,w
 14973  0C81  0081               	movwf	1
 14974                           
 14975                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14976  0C82  3005               	movlw	5
 14977  0C83  00E7               	movwf	??_setDelayOff_GO
 14978  0C84  0867               	movf	??_setDelayOff_GO,w
 14979  0C85  00E2               	movwf	setProductData@value
 14980  0C86  086C               	movf	setDelayOff_GO@sw,w
 14981  0C87  3E1A               	addlw	26
 14982  0C88  319A  22B3         	fcall	_setProductData
 14983                           
 14984                           ;DelayOff_B1.c: 106: }
 14985                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14986  0C8A  0008               	return
 14987  0C8B                     l6316:	
 14988  0C8B  0020               	movlb	0	; select bank0
 14989  0C8C  08E5               	movf	setDelayOff_GO@command,f
 14990  0C8D  1D03               	skipz
 14991  0C8E  0008               	return
 14992                           
 14993                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14994  0C8F  01E2               	clrf	setProductData@value
 14995  0C90  086C               	movf	setDelayOff_GO@sw,w
 14996  0C91  3E1A               	addlw	26
 14997  0C92  319A  22B3         	fcall	_setProductData
 14998  0C94  0008               	return
 14999  0C95                     __end_of_setDelayOff_GO:	
 15000                           
 15001                           	psect	text98
 15002  1C0D                     __ptext98:	
 15003 ;; *************** function ___bmul *****************
 15004 ;; Defined at:
 15005 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15006 ;; Parameters:    Size  Location     Type
 15007 ;;  multiplier      1    wreg     unsigned char 
 15008 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15009 ;; Auto vars:     Size  Location     Type
 15010 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15011 ;;  product         1    2[BANK0 ] unsigned char 
 15012 ;; Return value:  Size  Location     Type
 15013 ;;                  1    wreg      unsigned char 
 15014 ;; Registers used:
 15015 ;;		wreg, status,2, status,0
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15021 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;Total ram usage:        4 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; Hardware stack levels required when called:    5
 15028 ;; This function calls:
 15029 ;;		Nothing
 15030 ;; This function is called by:
 15031 ;;		_setDelayOff_GO
 15032 ;;		_DelayTimejudge
 15033 ;; This function uses a non-reentrant model
 15034 ;;
 15035                           
 15036                           
 15037                           ;psect for function ___bmul
 15038  1C0D                     ___bmul:	
 15039                           
 15040                           ;incstack = 0
 15041                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15042                           ;___bmul@multiplier stored from wreg
 15043  1C0D  0020               	movlb	0	; select bank0
 15044  1C0E  00A3               	movwf	___bmul@multiplier
 15045  1C0F  01A2               	clrf	___bmul@product
 15046  1C10                     l5976:	
 15047  1C10  1C23               	btfss	___bmul@multiplier,0
 15048  1C11  2C16               	goto	l5980
 15049  1C12  0820               	movf	___bmul@multiplicand,w
 15050  1C13  00A1               	movwf	??___bmul
 15051  1C14  0821               	movf	??___bmul,w
 15052  1C15  07A2               	addwf	___bmul@product,f
 15053  1C16                     l5980:	
 15054  1C16  1003               	clrc
 15055  1C17  0DA0               	rlf	___bmul@multiplicand,f
 15056  1C18  1003               	clrc
 15057  1C19  0CA3               	rrf	___bmul@multiplier,f
 15058  1C1A  08A3               	movf	___bmul@multiplier,f
 15059  1C1B  1D03               	skipz
 15060  1C1C  2C10               	goto	l5976
 15061  1C1D  0822               	movf	___bmul@product,w
 15062  1C1E  0008               	return
 15063  1C1F                     __end_of___bmul:	
 15064                           
 15065                           	psect	text99
 15066  1D78                     __ptext99:	
 15067 ;; *************** function _setCmd_Status *****************
 15068 ;; Defined at:
 15069 ;;		line 651 in file "../src/Main_B1.c"
 15070 ;; Parameters:    Size  Location     Type
 15071 ;;  number          1    wreg     unsigned char 
 15072 ;;  cmd             1    0[BANK0 ] unsigned char 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  number          1    2[BANK0 ] unsigned char 
 15075 ;; Return value:  Size  Location     Type
 15076 ;;		None               void
 15077 ;; Registers used:
 15078 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15079 ;; Tracked objects:
 15080 ;;		On entry : 0/0
 15081 ;;		On exit  : 0/0
 15082 ;;		Unchanged: 0/0
 15083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15084 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;Total ram usage:        3 bytes
 15089 ;; Hardware stack levels used:    1
 15090 ;; Hardware stack levels required when called:    5
 15091 ;; This function calls:
 15092 ;;		Nothing
 15093 ;; This function is called by:
 15094 ;;		_setDimmerLights_OnOff
 15095 ;;		_setControl_Lights_Table
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099                           
 15100                           ;psect for function _setCmd_Status
 15101  1D78                     _setCmd_Status:	
 15102                           
 15103                           ;incstack = 0
 15104                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15105                           ;setCmd_Status@number stored from wreg
 15106  1D78  0020               	movlb	0	; select bank0
 15107  1D79  00A2               	movwf	setCmd_Status@number
 15108                           
 15109                           ;Main_B1.c: 652: switch (number) {
 15110  1D7A  2D8A               	goto	l6486
 15111  1D7B                     l6482:	
 15112                           ;Main_B1.c: 653: case 1:
 15113                           
 15114                           
 15115                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15116  1D7B  0820               	movf	setCmd_Status@cmd,w
 15117  1D7C  3A01               	xorlw	1
 15118  1D7D  3000               	movlw	0
 15119  1D7E  1903               	skipnz
 15120  1D7F  3001               	movlw	1
 15121  1D80  00A1               	movwf	??_setCmd_Status
 15122  1D81  0021               	movlb	1	; select bank1
 15123  1D82  0849               	movf	_Cmd^(0+128),w
 15124  1D83  0020               	movlb	0	; select bank0
 15125  1D84  0621               	xorwf	??_setCmd_Status,w
 15126  1D85  39FE               	andlw	-2
 15127  1D86  0621               	xorwf	??_setCmd_Status,w
 15128  1D87  0021               	movlb	1	; select bank1
 15129  1D88  00C9               	movwf	_Cmd^(0+128)
 15130                           
 15131                           ;Main_B1.c: 656: }
 15132                           
 15133                           ;Main_B1.c: 655: break;
 15134  1D89  0008               	return
 15135  1D8A                     l6486:	
 15136  1D8A  0020               	movlb	0	; select bank0
 15137  1D8B  0822               	movf	setCmd_Status@number,w
 15138                           
 15139                           ; Switch size 1, requested type "space"
 15140                           ; Number of cases is 1, Range of values is 1 to 1
 15141                           ; switch strategies available:
 15142                           ; Name         Instructions Cycles
 15143                           ; simple_byte            4     3 (average)
 15144                           ; direct_byte           11     9 (fixed)
 15145                           ; jumptable            263     9 (fixed)
 15146                           ;	Chosen strategy is simple_byte
 15147  1D8C  3A01               	xorlw	1	; case 1
 15148  1D8D  1903               	skipnz
 15149  1D8E  2D7B               	goto	l6482
 15150  1D8F  2D90               	goto	l1526
 15151  1D90                     l1526:	
 15152  1D90  0008               	return
 15153  1D91                     __end_of_setCmd_Status:	
 15154                           
 15155                           	psect	text100
 15156  1A65                     __ptext100:	
 15157 ;; *************** function _getMain_All_LightsStatus *****************
 15158 ;; Defined at:
 15159 ;;		line 373 in file "../src/Main_B1.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;		None
 15162 ;; Auto vars:     Size  Location     Type
 15163 ;;  status          1    0[BANK0 ] unsigned char 
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      unsigned char 
 15166 ;; Registers used:
 15167 ;;		wreg, status,2
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;Total ram usage:        1 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:    5
 15180 ;; This function calls:
 15181 ;;		Nothing
 15182 ;; This function is called by:
 15183 ;;		_DimmerLights_Main
 15184 ;;		_setDimmerLights_Main
 15185 ;;		_setDimmerLights_OnOff
 15186 ;;		_Flash_Memory_Main
 15187 ;;		_Exception_Main
 15188 ;;		_Load_Main
 15189 ;;		_setTemp_Main
 15190 ;;		_setControl_Lights_Table
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           
 15195                           ;psect for function _getMain_All_LightsStatus
 15196  1A65                     _getMain_All_LightsStatus:	
 15197                           
 15198                           ;Main_B1.c: 374: char status = 0;
 15199                           
 15200                           ;incstack = 0
 15201                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 15202  1A65  0020               	movlb	0	; select bank0
 15203  1A66  01A0               	clrf	getMain_All_LightsStatus@status
 15204                           
 15205                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 15206  1A67  3000               	movlw	0
 15207  1A68  0022               	movlb	2	; select bank2
 15208  1A69  1862               	btfsc	(_DimmerLights1^(0+256)+1),0
 15209  1A6A  3001               	movlw	1
 15210  1A6B  0020               	movlb	0	; select bank0
 15211  1A6C  00A0               	movwf	getMain_All_LightsStatus@status
 15212                           
 15213                           ;Main_B1.c: 420: return status;
 15214  1A6D  0820               	movf	getMain_All_LightsStatus@status,w
 15215  1A6E  0008               	return
 15216  1A6F                     __end_of_getMain_All_LightsStatus:	
 15217                           
 15218                           	psect	text101
 15219  1BA6                     __ptext101:	
 15220 ;; *************** function _getDelayOff_GO *****************
 15221 ;; Defined at:
 15222 ;;		line 114 in file "../src/DelayOff_B1.c"
 15223 ;; Parameters:    Size  Location     Type
 15224 ;;  sw              1    wreg     unsigned char 
 15225 ;; Auto vars:     Size  Location     Type
 15226 ;;  sw              1    2[BANK0 ] unsigned char 
 15227 ;;  go              1    3[BANK0 ] unsigned char 
 15228 ;; Return value:  Size  Location     Type
 15229 ;;                  1    wreg      unsigned char 
 15230 ;; Registers used:
 15231 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15241 ;;Total ram usage:        2 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:    6
 15244 ;; This function calls:
 15245 ;;		_DelayOffPointSelect
 15246 ;; This function is called by:
 15247 ;;		_setDimmerLights_OnOff
 15248 ;; This function uses a non-reentrant model
 15249 ;;
 15250                           
 15251                           
 15252                           ;psect for function _getDelayOff_GO
 15253  1BA6                     _getDelayOff_GO:	
 15254                           
 15255                           ;incstack = 0
 15256                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15257                           ;getDelayOff_GO@sw stored from wreg
 15258  1BA6  0020               	movlb	0	; select bank0
 15259  1BA7  00A2               	movwf	getDelayOff_GO@sw
 15260                           
 15261                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15262  1BA8  0822               	movf	getDelayOff_GO@sw,w
 15263  1BA9  319A  229B         	fcall	_DelayOffPointSelect
 15264                           
 15265                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15266  1BAB  0021               	movlb	1	; select bank1
 15267  1BAC  084A               	movf	_DelayOff^(0+128),w
 15268  1BAD  0086               	movwf	6
 15269  1BAE  3001               	movlw	1	; select bank2/3
 15270  1BAF  0087               	movwf	7
 15271  1BB0  3000               	movlw	0
 15272  1BB1  1881               	btfsc	1,1
 15273  1BB2  3001               	movlw	1
 15274  1BB3  0020               	movlb	0	; select bank0
 15275  1BB4  00A3               	movwf	getDelayOff_GO@go
 15276                           
 15277                           ;DelayOff_B1.c: 117: return go;
 15278  1BB5  0823               	movf	getDelayOff_GO@go,w
 15279  1BB6  0008               	return
 15280  1BB7                     __end_of_getDelayOff_GO:	
 15281                           
 15282                           	psect	text102
 15283  1BFB                     __ptext102:	
 15284 ;; *************** function _getCmd_Status *****************
 15285 ;; Defined at:
 15286 ;;		line 659 in file "../src/Main_B1.c"
 15287 ;; Parameters:    Size  Location     Type
 15288 ;;  number          1    wreg     unsigned char 
 15289 ;; Auto vars:     Size  Location     Type
 15290 ;;  number          1    0[BANK0 ] unsigned char 
 15291 ;;  cmd             1    1[BANK0 ] unsigned char 
 15292 ;; Return value:  Size  Location     Type
 15293 ;;                  1    wreg      unsigned char 
 15294 ;; Registers used:
 15295 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15296 ;; Tracked objects:
 15297 ;;		On entry : 0/0
 15298 ;;		On exit  : 0/0
 15299 ;;		Unchanged: 0/0
 15300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;Total ram usage:        2 bytes
 15306 ;; Hardware stack levels used:    1
 15307 ;; Hardware stack levels required when called:    5
 15308 ;; This function calls:
 15309 ;;		Nothing
 15310 ;; This function is called by:
 15311 ;;		_setDimmerLights_OnOff
 15312 ;; This function uses a non-reentrant model
 15313 ;;
 15314                           
 15315                           
 15316                           ;psect for function _getCmd_Status
 15317  1BFB                     _getCmd_Status:	
 15318                           
 15319                           ;incstack = 0
 15320                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15321                           ;getCmd_Status@number stored from wreg
 15322  1BFB  0020               	movlb	0	; select bank0
 15323  1BFC  00A0               	movwf	getCmd_Status@number
 15324                           
 15325                           ;Main_B1.c: 660: char cmd = 0;
 15326  1BFD  01A1               	clrf	getCmd_Status@cmd
 15327                           
 15328                           ;Main_B1.c: 661: switch (number) {
 15329  1BFE  2C06               	goto	l6766
 15330  1BFF                     l6762:	
 15331                           ;Main_B1.c: 662: case 1:
 15332                           
 15333                           
 15334                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15335  1BFF  3000               	movlw	0
 15336  1C00  0021               	movlb	1	; select bank1
 15337  1C01  1849               	btfsc	_Cmd^(0+128),0
 15338  1C02  3001               	movlw	1
 15339  1C03  0020               	movlb	0	; select bank0
 15340  1C04  00A1               	movwf	getCmd_Status@cmd
 15341                           
 15342                           ;Main_B1.c: 665: }
 15343                           
 15344                           ;Main_B1.c: 664: break;
 15345  1C05  2C0B               	goto	l6768
 15346  1C06                     l6766:	
 15347  1C06  0820               	movf	getCmd_Status@number,w
 15348                           
 15349                           ; Switch size 1, requested type "space"
 15350                           ; Number of cases is 1, Range of values is 1 to 1
 15351                           ; switch strategies available:
 15352                           ; Name         Instructions Cycles
 15353                           ; simple_byte            4     3 (average)
 15354                           ; direct_byte           11     9 (fixed)
 15355                           ; jumptable            263     9 (fixed)
 15356                           ;	Chosen strategy is simple_byte
 15357  1C07  3A01               	xorlw	1	; case 1
 15358  1C08  1903               	skipnz
 15359  1C09  2BFF               	goto	l6762
 15360  1C0A  2C0B               	goto	l6768
 15361  1C0B                     l6768:	
 15362                           
 15363                           ;Main_B1.c: 666: return cmd;
 15364  1C0B  0821               	movf	getCmd_Status@cmd,w
 15365  1C0C  0008               	return
 15366  1C0D                     __end_of_getCmd_Status:	
 15367                           
 15368                           	psect	text103
 15369  13DA                     __ptext103:	
 15370 ;; *************** function _setDimmerLights_Dimming *****************
 15371 ;; Defined at:
 15372 ;;		line 1011 in file "../src/Dimmer_B1.c"
 15373 ;; Parameters:    Size  Location     Type
 15374 ;;  lights          1    wreg     unsigned char 
 15375 ;;  status          1   74[BANK0 ] unsigned char 
 15376 ;; Auto vars:     Size  Location     Type
 15377 ;;  lights          1   77[BANK0 ] unsigned char 
 15378 ;;  value           1   76[BANK0 ] unsigned char 
 15379 ;; Return value:  Size  Location     Type
 15380 ;;		None               void
 15381 ;; Registers used:
 15382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15383 ;; Tracked objects:
 15384 ;;		On entry : 0/0
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15388 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;Total ram usage:        4 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    8
 15395 ;; This function calls:
 15396 ;;		_getDimmerIntr_DimmingValue
 15397 ;;		_getDimmerLights_ValueToPercent
 15398 ;;		_setBuz
 15399 ;;		_setDimmerIntr_Dimming_Sw
 15400 ;;		_setDimmerIntr_MaxmumValue
 15401 ;;		_setDimmerLights_Line
 15402 ;;		_setMemory_Modify
 15403 ;;		_setProductData
 15404 ;;		_setRF_DimmerLights
 15405 ;;		_setRF_TransceiveGO
 15406 ;;		_setTxData
 15407 ;; This function is called by:
 15408 ;;		_setDimmerLights_Main
 15409 ;; This function uses a non-reentrant model
 15410 ;;
 15411                           
 15412                           
 15413                           ;psect for function _setDimmerLights_Dimming
 15414  13DA                     _setDimmerLights_Dimming:	
 15415                           
 15416                           ;incstack = 0
 15417                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15418                           ;setDimmerLights_Dimming@lights stored from wreg
 15419  13DA  0020               	movlb	0	; select bank0
 15420  13DB  00ED               	movwf	setDimmerLights_Dimming@lights
 15421                           
 15422                           ;Dimmer_B1.c: 1012: setDimmerIntr_Dimming_Sw(lights, status);
 15423  13DC  086A               	movf	setDimmerLights_Dimming@status,w
 15424  13DD  00EB               	movwf	??_setDimmerLights_Dimming
 15425  13DE  086B               	movf	??_setDimmerLights_Dimming,w
 15426  13DF  00A0               	movwf	setDimmerIntr_Dimming_Sw@command
 15427  13E0  086D               	movf	setDimmerLights_Dimming@lights,w
 15428  13E1  319D  2532  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15429                           
 15430                           ;Dimmer_B1.c: 1013: if (status == 1) {
 15431  13E4  0020               	movlb	0	; select bank0
 15432  13E5  086A               	movf	setDimmerLights_Dimming@status,w
 15433  13E6  3A01               	xorlw	1
 15434  13E7  1D03               	skipz
 15435  13E8  2BF6               	goto	l7070
 15436                           
 15437                           ;Dimmer_B1.c: 1015: setRF_TransceiveGO(0);
 15438  13E9  3000               	movlw	0
 15439  13EA  319C  2468  3193   	fcall	_setRF_TransceiveGO
 15440                           
 15441                           ;Dimmer_B1.c: 1017: setBuz(1, 100);
 15442  13ED  3064               	movlw	100
 15443  13EE  0020               	movlb	0	; select bank0
 15444  13EF  00A9               	movwf	setBuz@time
 15445  13F0  3000               	movlw	0
 15446  13F1  00AA               	movwf	setBuz@time+1
 15447  13F2  3001               	movlw	1
 15448  13F3  3194  242E         	fcall	_setBuz
 15449                           
 15450                           ;Dimmer_B1.c: 1018: } else if (status == 0) {
 15451  13F5  0008               	return
 15452  13F6                     l7070:	
 15453  13F6  0020               	movlb	0	; select bank0
 15454  13F7  08EA               	movf	setDimmerLights_Dimming@status,f
 15455  13F8  1D03               	skipz
 15456  13F9  0008               	return
 15457                           
 15458                           ;Dimmer_B1.c: 1021: Dimmer.Load_Status = 0;
 15459  13FA  0022               	movlb	2	; select bank2
 15460  13FB  112C               	bcf	_Dimmer^(0+256),2
 15461                           
 15462                           ;Dimmer_B1.c: 1022: setDimmerLights_Line(lights);
 15463  13FC  0020               	movlb	0	; select bank0
 15464  13FD  086D               	movf	setDimmerLights_Dimming@lights,w
 15465  13FE  319B  2395  3193   	fcall	_setDimmerLights_Line
 15466                           
 15467                           ;Dimmer_B1.c: 1024: char value = getDimmerIntr_DimmingValue(lights);
 15468  1401  0020               	movlb	0	; select bank0
 15469  1402  086D               	movf	setDimmerLights_Dimming@lights,w
 15470  1403  319B  2356  3193   	fcall	_getDimmerIntr_DimmingValue
 15471  1406  0020               	movlb	0	; select bank0
 15472  1407  00EB               	movwf	??_setDimmerLights_Dimming
 15473  1408  086B               	movf	??_setDimmerLights_Dimming,w
 15474  1409  00EC               	movwf	setDimmerLights_Dimming@value
 15475                           
 15476                           ;Dimmer_B1.c: 1025: setDimmerIntr_MaxmumValue(lights, value);
 15477  140A  086C               	movf	setDimmerLights_Dimming@value,w
 15478  140B  00EB               	movwf	??_setDimmerLights_Dimming
 15479  140C  086B               	movf	??_setDimmerLights_Dimming,w
 15480  140D  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15481  140E  086D               	movf	setDimmerLights_Dimming@lights,w
 15482  140F  319A  22BF  3193   	fcall	_setDimmerIntr_MaxmumValue
 15483                           
 15484                           ;Dimmer_B1.c: 1026: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15485  1412  0020               	movlb	0	; select bank0
 15486  1413  086C               	movf	setDimmerLights_Dimming@value,w
 15487  1414  3196  2664  3193   	fcall	_getDimmerLights_ValueToPercent
 15488  1417  0020               	movlb	0	; select bank0
 15489  1418  00EB               	movwf	??_setDimmerLights_Dimming
 15490  1419  086B               	movf	??_setDimmerLights_Dimming,w
 15491  141A  00E2               	movwf	setProductData@value
 15492  141B  086D               	movf	setDimmerLights_Dimming@lights,w
 15493  141C  3E14               	addlw	20
 15494  141D  319A  22B3  3193   	fcall	_setProductData
 15495                           
 15496                           ;Dimmer_B1.c: 1033: setMemory_Modify(1);
 15497  1420  3001               	movlw	1
 15498  1421  319C  2455  3193   	fcall	_setMemory_Modify
 15499                           
 15500                           ;Dimmer_B1.c: 1037: setRF_DimmerLights(lights, 1);
 15501  1424  0020               	movlb	0	; select bank0
 15502  1425  01E5               	clrf	setRF_DimmerLights@on
 15503  1426  0AE5               	incf	setRF_DimmerLights@on,f
 15504  1427  086D               	movf	setDimmerLights_Dimming@lights,w
 15505  1428  3196  26C9  3193   	fcall	_setRF_DimmerLights
 15506                           
 15507                           ;Dimmer_B1.c: 1038: setTxData();
 15508  142B  318E  267F         	fcall	_setTxData
 15509  142D  0008               	return
 15510  142E                     __end_of_setDimmerLights_Dimming:	
 15511                           
 15512                           	psect	text104
 15513  0E7F                     __ptext104:	
 15514 ;; *************** function _setTxData *****************
 15515 ;; Defined at:
 15516 ;;		line 183 in file "../src/RF_Control_B1.c"
 15517 ;; Parameters:    Size  Location     Type
 15518 ;;		None
 15519 ;; Auto vars:     Size  Location     Type
 15520 ;;  i               1    0        unsigned char 
 15521 ;; Return value:  Size  Location     Type
 15522 ;;		None               void
 15523 ;; Registers used:
 15524 ;;		wreg, fsr1l, fsr1h, status,2
 15525 ;; Tracked objects:
 15526 ;;		On entry : 0/0
 15527 ;;		On exit  : 0/0
 15528 ;;		Unchanged: 0/0
 15529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15533 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15534 ;;Total ram usage:        1 bytes
 15535 ;; Hardware stack levels used:    1
 15536 ;; Hardware stack levels required when called:    5
 15537 ;; This function calls:
 15538 ;;		Nothing
 15539 ;; This function is called by:
 15540 ;;		_setDimmerLights_OnOff
 15541 ;;		_setDimmerLights_Dimming
 15542 ;;		_getRxData
 15543 ;;		_setControl_Lights_Table
 15544 ;;		_setRFSW_Control
 15545 ;;		_setRFSW_AdjControl
 15546 ;; This function uses a non-reentrant model
 15547 ;;
 15548                           
 15549                           
 15550                           ;psect for function _setTxData
 15551  0E7F                     _setTxData:	
 15552                           
 15553                           ;RF_Control_B1.c: 184: char i;
 15554                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15555                           
 15556                           ;incstack = 0
 15557                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15558  0E7F  0021               	movlb	1	; select bank1
 15559  0E80  1C20               	btfss	_RF1^(0+128),0
 15560  0E81  0008               	return
 15561                           
 15562                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15563  0E82  1520               	bsf	_RF1^(0+128),2
 15564                           
 15565                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15566  0E83  01A3               	clrf	(_RF1^(0+128)+3)
 15567  0E84  01A4               	clrf	((_RF1+1)^(0+128)+3)
 15568                           
 15569                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15570  0E85  3063               	movlw	99
 15571  0E86  0020               	movlb	0	; select bank0
 15572  0E87  00A0               	movwf	??_setTxData
 15573  0E88  0820               	movf	??_setTxData,w
 15574  0E89  0023               	movlb	3	; select bank3
 15575  0E8A  00A0               	movwf	_RF_Data^(0+384)
 15576                           
 15577                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15578  0E8B  3002               	movlw	2
 15579  0E8C  0020               	movlb	0	; select bank0
 15580  0E8D  00A0               	movwf	??_setTxData
 15581  0E8E  0820               	movf	??_setTxData,w
 15582  0E8F  0023               	movlb	3	; select bank3
 15583  0E90  00A1               	movwf	(_RF_Data^(0+384)+1)
 15584                           
 15585                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15586  0E91  0021               	movlb	1	; select bank1
 15587  0E92  086E               	movf	_product^(0+128),w
 15588  0E93  0086               	movwf	6
 15589  0E94  3001               	movlw	1	; select bank2/3
 15590  0E95  0087               	movwf	7
 15591  0E96  3001               	movlw	1	; select bank2/3
 15592  0E97  3F42               	moviw [2]fsr1
 15593  0E98  0023               	movlb	3	; select bank3
 15594  0E99  00A2               	movwf	(_RF_Data^(0+384)+2)
 15595                           
 15596                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15597  0E9A  0021               	movlb	1	; select bank1
 15598  0E9B  086E               	movf	_product^(0+128),w
 15599  0E9C  0086               	movwf	6
 15600  0E9D  3001               	movlw	1	; select bank2/3
 15601  0E9E  0087               	movwf	7
 15602  0E9F  3001               	movlw	1	; select bank2/3
 15603  0EA0  3F43               	moviw [3]fsr1
 15604  0EA1  0023               	movlb	3	; select bank3
 15605  0EA2  00A3               	movwf	(_RF_Data^(0+384)+3)
 15606                           
 15607                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15608  0EA3  0021               	movlb	1	; select bank1
 15609  0EA4  086E               	movf	_product^(0+128),w
 15610  0EA5  0086               	movwf	6
 15611  0EA6  3001               	movlw	1	; select bank2/3
 15612  0EA7  0087               	movwf	7
 15613  0EA8  3001               	movlw	1	; select bank2/3
 15614  0EA9  3F44               	moviw [4]fsr1
 15615  0EAA  0023               	movlb	3	; select bank3
 15616  0EAB  00A4               	movwf	(_RF_Data^(0+384)+4)
 15617                           
 15618                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15619  0EAC  0021               	movlb	1	; select bank1
 15620  0EAD  086E               	movf	_product^(0+128),w
 15621  0EAE  0086               	movwf	6
 15622  0EAF  3001               	movlw	1	; select bank2/3
 15623  0EB0  0087               	movwf	7
 15624  0EB1  3001               	movlw	1	; select bank2/3
 15625  0EB2  3F45               	moviw [5]fsr1
 15626  0EB3  0023               	movlb	3	; select bank3
 15627  0EB4  00A5               	movwf	(_RF_Data^(0+384)+5)
 15628                           
 15629                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15630  0EB5  0021               	movlb	1	; select bank1
 15631  0EB6  086E               	movf	_product^(0+128),w
 15632  0EB7  0086               	movwf	6
 15633  0EB8  3001               	movlw	1	; select bank2/3
 15634  0EB9  0087               	movwf	7
 15635  0EBA  3001               	movlw	1	; select bank2/3
 15636  0EBB  3F46               	moviw [6]fsr1
 15637  0EBC  0023               	movlb	3	; select bank3
 15638  0EBD  00A6               	movwf	(_RF_Data^(0+384)+6)
 15639                           
 15640                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15641  0EBE  0021               	movlb	1	; select bank1
 15642  0EBF  086E               	movf	_product^(0+128),w
 15643  0EC0  0086               	movwf	6
 15644  0EC1  3001               	movlw	1	; select bank2/3
 15645  0EC2  0087               	movwf	7
 15646  0EC3  3001               	movlw	1	; select bank2/3
 15647  0EC4  3F47               	moviw [7]fsr1
 15648  0EC5  0023               	movlb	3	; select bank3
 15649  0EC6  00A7               	movwf	(_RF_Data^(0+384)+7)
 15650                           
 15651                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15652  0EC7  0021               	movlb	1	; select bank1
 15653  0EC8  086E               	movf	_product^(0+128),w
 15654  0EC9  0086               	movwf	6
 15655  0ECA  3001               	movlw	1	; select bank2/3
 15656  0ECB  0087               	movwf	7
 15657  0ECC  3001               	movlw	1	; select bank2/3
 15658  0ECD  3F48               	moviw [8]fsr1
 15659  0ECE  0023               	movlb	3	; select bank3
 15660  0ECF  00A8               	movwf	(_RF_Data^(0+384)+8)
 15661                           
 15662                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15663  0ED0  0021               	movlb	1	; select bank1
 15664  0ED1  086E               	movf	_product^(0+128),w
 15665  0ED2  0086               	movwf	6
 15666  0ED3  3001               	movlw	1	; select bank2/3
 15667  0ED4  0087               	movwf	7
 15668  0ED5  3001               	movlw	1	; select bank2/3
 15669  0ED6  3F49               	moviw [9]fsr1
 15670  0ED7  0023               	movlb	3	; select bank3
 15671  0ED8  00A9               	movwf	(_RF_Data^(0+384)+9)
 15672                           
 15673                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15674  0ED9  0021               	movlb	1	; select bank1
 15675  0EDA  086E               	movf	_product^(0+128),w
 15676  0EDB  0086               	movwf	6
 15677  0EDC  3001               	movlw	1	; select bank2/3
 15678  0EDD  0087               	movwf	7
 15679  0EDE  3001               	movlw	1	; select bank2/3
 15680  0EDF  3F4A               	moviw [10]fsr1
 15681  0EE0  0023               	movlb	3	; select bank3
 15682  0EE1  00AA               	movwf	(_RF_Data^(0+384)+10)
 15683                           
 15684                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15685  0EE2  0021               	movlb	1	; select bank1
 15686  0EE3  086E               	movf	_product^(0+128),w
 15687  0EE4  0086               	movwf	6
 15688  0EE5  3001               	movlw	1	; select bank2/3
 15689  0EE6  0087               	movwf	7
 15690  0EE7  3001               	movlw	1	; select bank2/3
 15691  0EE8  3F4B               	moviw [11]fsr1
 15692  0EE9  0023               	movlb	3	; select bank3
 15693  0EEA  00AB               	movwf	(_RF_Data^(0+384)+11)
 15694                           
 15695                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15696  0EEB  0021               	movlb	1	; select bank1
 15697  0EEC  086E               	movf	_product^(0+128),w
 15698  0EED  0086               	movwf	6
 15699  0EEE  3001               	movlw	1	; select bank2/3
 15700  0EEF  0087               	movwf	7
 15701  0EF0  3001               	movlw	1	; select bank2/3
 15702  0EF1  3F4C               	moviw [12]fsr1
 15703  0EF2  0023               	movlb	3	; select bank3
 15704  0EF3  00AC               	movwf	(_RF_Data^(0+384)+12)
 15705                           
 15706                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15707  0EF4  0021               	movlb	1	; select bank1
 15708  0EF5  086E               	movf	_product^(0+128),w
 15709  0EF6  0086               	movwf	6
 15710  0EF7  3001               	movlw	1	; select bank2/3
 15711  0EF8  0087               	movwf	7
 15712  0EF9  3001               	movlw	1	; select bank2/3
 15713  0EFA  3F4D               	moviw [13]fsr1
 15714  0EFB  0023               	movlb	3	; select bank3
 15715  0EFC  00AD               	movwf	(_RF_Data^(0+384)+13)
 15716                           
 15717                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15718  0EFD  0021               	movlb	1	; select bank1
 15719  0EFE  086E               	movf	_product^(0+128),w
 15720  0EFF  0086               	movwf	6
 15721  0F00  3001               	movlw	1	; select bank2/3
 15722  0F01  0087               	movwf	7
 15723  0F02  3001               	movlw	1	; select bank2/3
 15724  0F03  3F4E               	moviw [14]fsr1
 15725  0F04  0023               	movlb	3	; select bank3
 15726  0F05  00AE               	movwf	(_RF_Data^(0+384)+14)
 15727                           
 15728                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15729  0F06  0021               	movlb	1	; select bank1
 15730  0F07  086E               	movf	_product^(0+128),w
 15731  0F08  0086               	movwf	6
 15732  0F09  3001               	movlw	1	; select bank2/3
 15733  0F0A  0087               	movwf	7
 15734  0F0B  3001               	movlw	1	; select bank2/3
 15735  0F0C  3F4F               	moviw [15]fsr1
 15736  0F0D  0023               	movlb	3	; select bank3
 15737  0F0E  00AF               	movwf	(_RF_Data^(0+384)+15)
 15738                           
 15739                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15740  0F0F  0021               	movlb	1	; select bank1
 15741  0F10  086E               	movf	_product^(0+128),w
 15742  0F11  0086               	movwf	6
 15743  0F12  3001               	movlw	1	; select bank2/3
 15744  0F13  0087               	movwf	7
 15745  0F14  3001               	movlw	1	; select bank2/3
 15746  0F15  3F50               	moviw [16]fsr1
 15747  0F16  0023               	movlb	3	; select bank3
 15748  0F17  00B0               	movwf	(_RF_Data^(0+384)+16)
 15749                           
 15750                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15751  0F18  0021               	movlb	1	; select bank1
 15752  0F19  086E               	movf	_product^(0+128),w
 15753  0F1A  0086               	movwf	6
 15754  0F1B  3001               	movlw	1	; select bank2/3
 15755  0F1C  0087               	movwf	7
 15756  0F1D  3001               	movlw	1	; select bank2/3
 15757  0F1E  3F51               	moviw [17]fsr1
 15758  0F1F  0023               	movlb	3	; select bank3
 15759  0F20  00B1               	movwf	(_RF_Data^(0+384)+17)
 15760                           
 15761                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15762  0F21  0021               	movlb	1	; select bank1
 15763  0F22  086E               	movf	_product^(0+128),w
 15764  0F23  0086               	movwf	6
 15765  0F24  3001               	movlw	1	; select bank2/3
 15766  0F25  0087               	movwf	7
 15767  0F26  3001               	movlw	1	; select bank2/3
 15768  0F27  3F52               	moviw [18]fsr1
 15769  0F28  0023               	movlb	3	; select bank3
 15770  0F29  00B2               	movwf	(_RF_Data^(0+384)+18)
 15771                           
 15772                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15773  0F2A  0021               	movlb	1	; select bank1
 15774  0F2B  086E               	movf	_product^(0+128),w
 15775  0F2C  0086               	movwf	6
 15776  0F2D  3001               	movlw	1	; select bank2/3
 15777  0F2E  0087               	movwf	7
 15778  0F2F  3001               	movlw	1	; select bank2/3
 15779  0F30  3F53               	moviw [19]fsr1
 15780  0F31  0023               	movlb	3	; select bank3
 15781  0F32  00B3               	movwf	(_RF_Data^(0+384)+19)
 15782                           
 15783                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15784  0F33  30D1               	movlw	209
 15785  0F34  0020               	movlb	0	; select bank0
 15786  0F35  00A0               	movwf	??_setTxData
 15787  0F36  0820               	movf	??_setTxData,w
 15788  0F37  0023               	movlb	3	; select bank3
 15789  0F38  00B4               	movwf	(_RF_Data^(0+384)+20)
 15790  0F39  0008               	return
 15791  0F3A                     __end_of_setTxData:	
 15792                           
 15793                           	psect	text105
 15794  1C68                     __ptext105:	
 15795 ;; *************** function _setRF_TransceiveGO *****************
 15796 ;; Defined at:
 15797 ;;		line 518 in file "../src/RF_Control_B1.c"
 15798 ;; Parameters:    Size  Location     Type
 15799 ;;  command         1    wreg     unsigned char 
 15800 ;; Auto vars:     Size  Location     Type
 15801 ;;  command         1    1[BANK0 ] unsigned char 
 15802 ;; Return value:  Size  Location     Type
 15803 ;;		None               void
 15804 ;; Registers used:
 15805 ;;		wreg, status,2, status,0
 15806 ;; Tracked objects:
 15807 ;;		On entry : 0/0
 15808 ;;		On exit  : 0/0
 15809 ;;		Unchanged: 0/0
 15810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15812 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15813 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15814 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;Total ram usage:        2 bytes
 15816 ;; Hardware stack levels used:    1
 15817 ;; Hardware stack levels required when called:    5
 15818 ;; This function calls:
 15819 ;;		Nothing
 15820 ;; This function is called by:
 15821 ;;		_setDimmerLights_Dimming
 15822 ;; This function uses a non-reentrant model
 15823 ;;
 15824                           
 15825                           
 15826                           ;psect for function _setRF_TransceiveGO
 15827  1C68                     _setRF_TransceiveGO:	
 15828                           
 15829                           ;incstack = 0
 15830                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15831                           ;setRF_TransceiveGO@command stored from wreg
 15832  1C68  0020               	movlb	0	; select bank0
 15833  1C69  00A1               	movwf	setRF_TransceiveGO@command
 15834                           
 15835                           ;RF_Control_B1.c: 519: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15836  1C6A  0821               	movf	setRF_TransceiveGO@command,w
 15837  1C6B  3A01               	xorlw	1
 15838  1C6C  3000               	movlw	0
 15839  1C6D  1903               	skipnz
 15840  1C6E  3001               	movlw	1
 15841  1C6F  00A0               	movwf	??_setRF_TransceiveGO
 15842  1C70  0DA0               	rlf	??_setRF_TransceiveGO,f
 15843  1C71  0DA0               	rlf	??_setRF_TransceiveGO,f
 15844  1C72  0021               	movlb	1	; select bank1
 15845  1C73  0820               	movf	_RF1^(0+128),w
 15846  1C74  0020               	movlb	0	; select bank0
 15847  1C75  0620               	xorwf	??_setRF_TransceiveGO,w
 15848  1C76  39FB               	andlw	-5
 15849  1C77  0620               	xorwf	??_setRF_TransceiveGO,w
 15850  1C78  0021               	movlb	1	; select bank1
 15851  1C79  00A0               	movwf	_RF1^(0+128)
 15852  1C7A  0008               	return
 15853  1C7B                     __end_of_setRF_TransceiveGO:	
 15854                           
 15855                           	psect	text106
 15856  16C9                     __ptext106:	
 15857 ;; *************** function _setRF_DimmerLights *****************
 15858 ;; Defined at:
 15859 ;;		line 503 in file "../src/RF_Control_B1.c"
 15860 ;; Parameters:    Size  Location     Type
 15861 ;;  lights          1    wreg     unsigned char 
 15862 ;;  on              1   69[BANK0 ] unsigned char 
 15863 ;; Auto vars:     Size  Location     Type
 15864 ;;  lights          1   73[BANK0 ] unsigned char 
 15865 ;;  status          1   72[BANK0 ] unsigned char 
 15866 ;; Return value:  Size  Location     Type
 15867 ;;		None               void
 15868 ;; Registers used:
 15869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15870 ;; Tracked objects:
 15871 ;;		On entry : 0/0
 15872 ;;		On exit  : 0/0
 15873 ;;		Unchanged: 0/0
 15874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15875 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15878 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;Total ram usage:        5 bytes
 15880 ;; Hardware stack levels used:    1
 15881 ;; Hardware stack levels required when called:    6
 15882 ;; This function calls:
 15883 ;;		_setProductData
 15884 ;; This function is called by:
 15885 ;;		_setDimmerLights_OnOff
 15886 ;;		_setDimmerLights_Dimming
 15887 ;;		_setRFSW_Control
 15888 ;; This function uses a non-reentrant model
 15889 ;;
 15890                           
 15891                           
 15892                           ;psect for function _setRF_DimmerLights
 15893  16C9                     _setRF_DimmerLights:	
 15894                           
 15895                           ;incstack = 0
 15896                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15897                           ;setRF_DimmerLights@lights stored from wreg
 15898  16C9  0020               	movlb	0	; select bank0
 15899  16CA  00E9               	movwf	setRF_DimmerLights@lights
 15900                           
 15901                           ;RF_Control_B1.c: 504: char status = 1;
 15902  16CB  01E8               	clrf	setRF_DimmerLights@status
 15903  16CC  0AE8               	incf	setRF_DimmerLights@status,f
 15904                           
 15905                           ;RF_Control_B1.c: 505: status <<= (lights - 1);
 15906  16CD  0869               	movf	setRF_DimmerLights@lights,w
 15907  16CE  3EFF               	addlw	-1
 15908  16CF  0A89               	incf	9,f
 15909  16D0  2ED3               	goto	u5470
 15910  16D1                     u5475:	
 15911  16D1  1003               	clrc
 15912  16D2  0DE8               	rlf	setRF_DimmerLights@status,f
 15913  16D3                     u5470:	
 15914  16D3  3EFF               	addlw	-1
 15915  16D4  1D03               	skipz
 15916  16D5  2ED1               	goto	u5475
 15917                           
 15918                           ;RF_Control_B1.c: 506: setProductData(11, lights);
 15919  16D6  0869               	movf	setRF_DimmerLights@lights,w
 15920  16D7  00E6               	movwf	??_setRF_DimmerLights
 15921  16D8  0866               	movf	??_setRF_DimmerLights,w
 15922  16D9  00E2               	movwf	setProductData@value
 15923  16DA  300B               	movlw	11
 15924  16DB  319A  22B3  3196   	fcall	_setProductData
 15925                           
 15926                           ;RF_Control_B1.c: 507: setProductData(17, product->Data[26 + lights]);
 15927  16DE  0020               	movlb	0	; select bank0
 15928  16DF  0869               	movf	setRF_DimmerLights@lights,w
 15929  16E0  3E1A               	addlw	26
 15930  16E1  0021               	movlb	1	; select bank1
 15931  16E2  076E               	addwf	_product^(0+128),w
 15932  16E3  0020               	movlb	0	; select bank0
 15933  16E4  00E6               	movwf	??_setRF_DimmerLights
 15934  16E5  0866               	movf	??_setRF_DimmerLights,w
 15935  16E6  0086               	movwf	6
 15936  16E7  3001               	movlw	1	; select bank2/3
 15937  16E8  0087               	movwf	7
 15938  16E9  0801               	movf	1,w
 15939  16EA  00E7               	movwf	??_setRF_DimmerLights+1
 15940  16EB  0867               	movf	??_setRF_DimmerLights+1,w
 15941  16EC  00E2               	movwf	setProductData@value
 15942  16ED  3011               	movlw	17
 15943  16EE  319A  22B3  3196   	fcall	_setProductData
 15944                           
 15945                           ;RF_Control_B1.c: 508: if (on == 1) {
 15946  16F1  0020               	movlb	0	; select bank0
 15947  16F2  0865               	movf	setRF_DimmerLights@on,w
 15948  16F3  3A01               	xorlw	1
 15949  16F4  1D03               	skipz
 15950  16F5  2F18               	goto	l6352
 15951                           
 15952                           ;RF_Control_B1.c: 509: setProductData(9, product->Data[20 + lights]);
 15953  16F6  0869               	movf	setRF_DimmerLights@lights,w
 15954  16F7  3E14               	addlw	20
 15955  16F8  0021               	movlb	1	; select bank1
 15956  16F9  076E               	addwf	_product^(0+128),w
 15957  16FA  0020               	movlb	0	; select bank0
 15958  16FB  00E6               	movwf	??_setRF_DimmerLights
 15959  16FC  0866               	movf	??_setRF_DimmerLights,w
 15960  16FD  0086               	movwf	6
 15961  16FE  3001               	movlw	1	; select bank2/3
 15962  16FF  0087               	movwf	7
 15963  1700  0801               	movf	1,w
 15964  1701  00E7               	movwf	??_setRF_DimmerLights+1
 15965  1702  0867               	movf	??_setRF_DimmerLights+1,w
 15966  1703  00E2               	movwf	setProductData@value
 15967  1704  3009               	movlw	9
 15968  1705  319A  22B3  3196   	fcall	_setProductData
 15969                           
 15970                           ;RF_Control_B1.c: 510: setProductData(15, (product->Data[15] | status));
 15971  1708  0021               	movlb	1	; select bank1
 15972  1709  086E               	movf	_product^(0+128),w
 15973  170A  3E0F               	addlw	15
 15974  170B  0086               	movwf	6
 15975  170C  3001               	movlw	1	; select bank2/3
 15976  170D  0087               	movwf	7
 15977  170E  0801               	movf	1,w
 15978  170F  0020               	movlb	0	; select bank0
 15979  1710  0468               	iorwf	setRF_DimmerLights@status,w
 15980  1711  00E6               	movwf	??_setRF_DimmerLights
 15981  1712  0866               	movf	??_setRF_DimmerLights,w
 15982  1713  00E2               	movwf	setProductData@value
 15983  1714  300F               	movlw	15
 15984  1715  319A  22B3         	fcall	_setProductData
 15985                           
 15986                           ;RF_Control_B1.c: 511: } else {
 15987  1717  0008               	return
 15988  1718                     l6352:	
 15989                           
 15990                           ;RF_Control_B1.c: 512: setProductData(9, 0x00);
 15991  1718  0020               	movlb	0	; select bank0
 15992  1719  01E2               	clrf	setProductData@value
 15993  171A  3009               	movlw	9
 15994  171B  319A  22B3  3196   	fcall	_setProductData
 15995                           
 15996                           ;RF_Control_B1.c: 513: setProductData(15, (product->Data[15]&(~status)));
 15997  171E  0021               	movlb	1	; select bank1
 15998  171F  086E               	movf	_product^(0+128),w
 15999  1720  3E0F               	addlw	15
 16000  1721  0086               	movwf	6
 16001  1722  3001               	movlw	1	; select bank2/3
 16002  1723  0087               	movwf	7
 16003  1724  0020               	movlb	0	; select bank0
 16004  1725  0968               	comf	setRF_DimmerLights@status,w
 16005  1726  0501               	andwf	1,w
 16006  1727  00E6               	movwf	??_setRF_DimmerLights
 16007  1728  0866               	movf	??_setRF_DimmerLights,w
 16008  1729  00E2               	movwf	setProductData@value
 16009  172A  300F               	movlw	15
 16010  172B  319A  22B3         	fcall	_setProductData
 16011  172D  0008               	return
 16012  172E                     __end_of_setRF_DimmerLights:	
 16013                           
 16014                           	psect	text107
 16015  1B95                     __ptext107:	
 16016 ;; *************** function _setDimmerLights_Line *****************
 16017 ;; Defined at:
 16018 ;;		line 1083 in file "../src/Dimmer_B1.c"
 16019 ;; Parameters:    Size  Location     Type
 16020 ;;  lights          1    wreg     unsigned char 
 16021 ;; Auto vars:     Size  Location     Type
 16022 ;;  lights          1    0[BANK0 ] unsigned char 
 16023 ;; Return value:  Size  Location     Type
 16024 ;;		None               void
 16025 ;; Registers used:
 16026 ;;		wreg
 16027 ;; Tracked objects:
 16028 ;;		On entry : 0/0
 16029 ;;		On exit  : 0/0
 16030 ;;		Unchanged: 0/0
 16031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;Total ram usage:        1 bytes
 16037 ;; Hardware stack levels used:    1
 16038 ;; Hardware stack levels required when called:    5
 16039 ;; This function calls:
 16040 ;;		Nothing
 16041 ;; This function is called by:
 16042 ;;		_setDimmerLights_OnOff
 16043 ;;		_setDimmerLights_Dimming
 16044 ;; This function uses a non-reentrant model
 16045 ;;
 16046                           
 16047                           
 16048                           ;psect for function _setDimmerLights_Line
 16049  1B95                     _setDimmerLights_Line:	
 16050                           
 16051                           ;incstack = 0
 16052                           ; Regs used in _setDimmerLights_Line: [wreg]
 16053                           ;setDimmerLights_Line@lights stored from wreg
 16054  1B95  0020               	movlb	0	; select bank0
 16055  1B96  00A0               	movwf	setDimmerLights_Line@lights
 16056                           
 16057                           ;Dimmer_B1.c: 1084: Dimmer.LoadGO = 1;
 16058  1B97  0022               	movlb	2	; select bank2
 16059  1B98  14AC               	bsf	_Dimmer^(0+256),1
 16060                           
 16061                           ;Dimmer_B1.c: 1086: DimmerLights1.Line = 0;
 16062  1B99  10E2               	bcf	(_DimmerLights1^(0+256)+1),1
 16063                           
 16064                           ;Dimmer_B1.c: 1087: if (lights == 1 && lights != 0) {
 16065  1B9A  0020               	movlb	0	; select bank0
 16066  1B9B  0820               	movf	setDimmerLights_Line@lights,w
 16067  1B9C  3A01               	xorlw	1
 16068  1B9D  1D03               	skipz
 16069  1B9E  0008               	return
 16070  1B9F  0820               	movf	setDimmerLights_Line@lights,w
 16071  1BA0  1903               	btfsc	3,2
 16072  1BA1  0008               	return
 16073                           
 16074                           ;Dimmer_B1.c: 1088: DimmerLights1.Line = 1;
 16075  1BA2  0022               	movlb	2	; select bank2
 16076  1BA3  14E2               	bsf	(_DimmerLights1^(0+256)+1),1
 16077  1BA4  0020               	movlb	0	; select bank0
 16078  1BA5  0008               	return
 16079  1BA6                     __end_of_setDimmerLights_Line:	
 16080                           
 16081                           	psect	text108
 16082  1ABF                     __ptext108:	
 16083 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16084 ;; Defined at:
 16085 ;;		line 146 in file "../src/Dimmer_B1.c"
 16086 ;; Parameters:    Size  Location     Type
 16087 ;;  lights          1    wreg     unsigned char 
 16088 ;;  value           1   66[BANK0 ] unsigned char 
 16089 ;; Auto vars:     Size  Location     Type
 16090 ;;  lights          1   68[BANK0 ] unsigned char 
 16091 ;; Return value:  Size  Location     Type
 16092 ;;		None               void
 16093 ;; Registers used:
 16094 ;;		wreg
 16095 ;; Tracked objects:
 16096 ;;		On entry : 0/0
 16097 ;;		On exit  : 0/0
 16098 ;;		Unchanged: 0/0
 16099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16100 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;Total ram usage:        3 bytes
 16105 ;; Hardware stack levels used:    1
 16106 ;; Hardware stack levels required when called:    5
 16107 ;; This function calls:
 16108 ;;		Nothing
 16109 ;; This function is called by:
 16110 ;;		_setDimmerLights_OnOff
 16111 ;;		_setDimmerLights_Dimming
 16112 ;;		_setRFSW_AdjControl
 16113 ;; This function uses a non-reentrant model
 16114 ;;
 16115                           
 16116                           
 16117                           ;psect for function _setDimmerIntr_MaxmumValue
 16118  1ABF                     _setDimmerIntr_MaxmumValue:	
 16119                           
 16120                           ;incstack = 0
 16121                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16122                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16123  1ABF  0020               	movlb	0	; select bank0
 16124  1AC0  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16125                           
 16126                           ;Dimmer_B1.c: 148: if (lights == 1) {
 16127  1AC1  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16128  1AC2  3A01               	xorlw	1
 16129  1AC3  1D03               	skipz
 16130  1AC4  0008               	return
 16131                           
 16132                           ;Dimmer_B1.c: 149: DimmerIntr1.MaxmumValue = value;
 16133  1AC5  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16134  1AC6  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16135  1AC7  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16136  1AC8  0021               	movlb	1	; select bank1
 16137  1AC9  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16138  1ACA  0008               	return
 16139  1ACB                     __end_of_setDimmerIntr_MaxmumValue:	
 16140                           
 16141                           	psect	text109
 16142  1D32                     __ptext109:	
 16143 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16144 ;; Defined at:
 16145 ;;		line 223 in file "../src/Dimmer_B1.c"
 16146 ;; Parameters:    Size  Location     Type
 16147 ;;  lights          1    wreg     unsigned char 
 16148 ;;  command         1    0[BANK0 ] unsigned char 
 16149 ;; Auto vars:     Size  Location     Type
 16150 ;;  lights          1    2[BANK0 ] unsigned char 
 16151 ;; Return value:  Size  Location     Type
 16152 ;;		None               void
 16153 ;; Registers used:
 16154 ;;		wreg, status,2, status,0
 16155 ;; Tracked objects:
 16156 ;;		On entry : 0/0
 16157 ;;		On exit  : 0/0
 16158 ;;		Unchanged: 0/0
 16159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16160 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16161 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16163 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16164 ;;Total ram usage:        3 bytes
 16165 ;; Hardware stack levels used:    1
 16166 ;; Hardware stack levels required when called:    5
 16167 ;; This function calls:
 16168 ;;		Nothing
 16169 ;; This function is called by:
 16170 ;;		_setDimmerLights_Dimming
 16171 ;;		_setDimmerLights_DimmingClose
 16172 ;; This function uses a non-reentrant model
 16173 ;;
 16174                           
 16175                           
 16176                           ;psect for function _setDimmerIntr_Dimming_Sw
 16177  1D32                     _setDimmerIntr_Dimming_Sw:	
 16178                           
 16179                           ;incstack = 0
 16180                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16181                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16182  1D32  0020               	movlb	0	; select bank0
 16183  1D33  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16184                           
 16185                           ;Dimmer_B1.c: 225: if (lights == 1) {
 16186  1D34  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16187  1D35  3A01               	xorlw	1
 16188  1D36  1D03               	skipz
 16189  1D37  0008               	return
 16190                           
 16191                           ;Dimmer_B1.c: 226: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16192  1D38  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16193  1D39  3A01               	xorlw	1
 16194  1D3A  3000               	movlw	0
 16195  1D3B  1903               	skipnz
 16196  1D3C  3001               	movlw	1
 16197  1D3D  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16198  1D3E  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16199  1D3F  0021               	movlb	1	; select bank1
 16200  1D40  083C               	movf	_DimmerIntr1^(0+128),w
 16201  1D41  0020               	movlb	0	; select bank0
 16202  1D42  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16203  1D43  39EF               	andlw	-17
 16204  1D44  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16205  1D45  0021               	movlb	1	; select bank1
 16206  1D46  00BC               	movwf	_DimmerIntr1^(0+128)
 16207  1D47  0008               	return
 16208  1D48                     __end_of_setDimmerIntr_Dimming_Sw:	
 16209                           
 16210                           	psect	text110
 16211  1B56                     __ptext110:	
 16212 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16213 ;; Defined at:
 16214 ;;		line 124 in file "../src/Dimmer_B1.c"
 16215 ;; Parameters:    Size  Location     Type
 16216 ;;  lights          1    wreg     unsigned char 
 16217 ;; Auto vars:     Size  Location     Type
 16218 ;;  lights          1    1[BANK0 ] unsigned char 
 16219 ;;  value           1    2[BANK0 ] unsigned char 
 16220 ;; Return value:  Size  Location     Type
 16221 ;;                  1    wreg      unsigned char 
 16222 ;; Registers used:
 16223 ;;		wreg, status,2
 16224 ;; Tracked objects:
 16225 ;;		On entry : 0/0
 16226 ;;		On exit  : 0/0
 16227 ;;		Unchanged: 0/0
 16228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16230 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16232 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16233 ;;Total ram usage:        3 bytes
 16234 ;; Hardware stack levels used:    1
 16235 ;; Hardware stack levels required when called:    5
 16236 ;; This function calls:
 16237 ;;		Nothing
 16238 ;; This function is called by:
 16239 ;;		_setDimmerLights_Dimming
 16240 ;; This function uses a non-reentrant model
 16241 ;;
 16242                           
 16243                           
 16244                           ;psect for function _getDimmerIntr_DimmingValue
 16245  1B56                     _getDimmerIntr_DimmingValue:	
 16246                           
 16247                           ;incstack = 0
 16248                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16249                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16250  1B56  0020               	movlb	0	; select bank0
 16251  1B57  00A1               	movwf	getDimmerIntr_DimmingValue@lights
 16252                           
 16253                           ;Dimmer_B1.c: 125: char value = 0;
 16254  1B58  01A2               	clrf	getDimmerIntr_DimmingValue@value
 16255                           
 16256                           ;Dimmer_B1.c: 127: if (lights == 1) {
 16257  1B59  0821               	movf	getDimmerIntr_DimmingValue@lights,w
 16258  1B5A  3A01               	xorlw	1
 16259  1B5B  1D03               	skipz
 16260  1B5C  2B63               	goto	l693
 16261                           
 16262                           ;Dimmer_B1.c: 128: value = DimmerIntr1.DimmingValue;
 16263  1B5D  0021               	movlb	1	; select bank1
 16264  1B5E  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16265  1B5F  0020               	movlb	0	; select bank0
 16266  1B60  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16267  1B61  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16268  1B62  00A2               	movwf	getDimmerIntr_DimmingValue@value
 16269  1B63                     l693:	
 16270                           
 16271                           ;Dimmer_B1.c: 129: }
 16272                           ;Dimmer_B1.c: 141: return value;
 16273  1B63  0822               	movf	getDimmerIntr_DimmingValue@value,w
 16274  1B64  0008               	return
 16275  1B65                     __end_of_getDimmerIntr_DimmingValue:	
 16276                           
 16277                           	psect	text111
 16278  1D1C                     __ptext111:	
 16279 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16280 ;; Defined at:
 16281 ;;		line 1044 in file "../src/Dimmer_B1.c"
 16282 ;; Parameters:    Size  Location     Type
 16283 ;;  lights          1    wreg     unsigned char 
 16284 ;; Auto vars:     Size  Location     Type
 16285 ;;  lights          1    0[COMMON] unsigned char 
 16286 ;;  allow           1    2[BANK0 ] unsigned char 
 16287 ;; Return value:  Size  Location     Type
 16288 ;;                  1    wreg      unsigned char 
 16289 ;; Registers used:
 16290 ;;		wreg, status,2, pclath, cstack
 16291 ;; Tracked objects:
 16292 ;;		On entry : 0/0
 16293 ;;		On exit  : 0/0
 16294 ;;		Unchanged: 0/0
 16295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;Total ram usage:        3 bytes
 16301 ;; Hardware stack levels used:    1
 16302 ;; Hardware stack levels required when called:    6
 16303 ;; This function calls:
 16304 ;;		_getLoad_OK
 16305 ;; This function is called by:
 16306 ;;		_setDimmerLights_Main
 16307 ;; This function uses a non-reentrant model
 16308 ;;
 16309                           
 16310                           
 16311                           ;psect for function _getDimmerLights_Allow_Condition
 16312  1D1C                     _getDimmerLights_Allow_Condition:	
 16313                           
 16314                           ;Dimmer_B1.c: 1045: char allow = 0;
 16315                           
 16316                           ;incstack = 0
 16317                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 16318  1D1C  0020               	movlb	0	; select bank0
 16319  1D1D  01A2               	clrf	getDimmerLights_Allow_Condition@allow
 16320                           
 16321                           ;Dimmer_B1.c: 1051: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16322  1D1E  01A3               	clrf	_getDimmerLights_Allow_Condition$2293
 16323  1D1F  0AA3               	incf	_getDimmerLights_Allow_Condition$2293,f
 16324  1D20  319A  2232  319D   	fcall	_getLoad_OK
 16325  1D23  3800               	iorlw	0
 16326  1D24  1D03               	skipz
 16327  1D25  2D2B               	goto	l7002
 16328  1D26  0022               	movlb	2	; select bank2
 16329  1D27  18AC               	btfsc	_Dimmer^(0+256),1
 16330  1D28  2D2B               	goto	l7002
 16331  1D29  0020               	movlb	0	; select bank0
 16332  1D2A  01A3               	clrf	_getDimmerLights_Allow_Condition$2293
 16333  1D2B                     l7002:	
 16334  1D2B  0020               	movlb	0	; select bank0
 16335  1D2C  0823               	movf	_getDimmerLights_Allow_Condition$2293,w
 16336  1D2D  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16337  1D2E  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16338  1D2F  00A2               	movwf	getDimmerLights_Allow_Condition@allow
 16339                           
 16340                           ;Dimmer_B1.c: 1078: return allow;
 16341  1D30  0822               	movf	getDimmerLights_Allow_Condition@allow,w
 16342  1D31  0008               	return
 16343  1D32                     __end_of_getDimmerLights_Allow_Condition:	
 16344                           
 16345                           	psect	text112
 16346  1A32                     __ptext112:	
 16347 ;; *************** function _getLoad_OK *****************
 16348 ;; Defined at:
 16349 ;;		line 274 in file "../src/OverLoad_B1.c"
 16350 ;; Parameters:    Size  Location     Type
 16351 ;;		None
 16352 ;; Auto vars:     Size  Location     Type
 16353 ;;  ok              1    0[BANK0 ] unsigned char 
 16354 ;; Return value:  Size  Location     Type
 16355 ;;                  1    wreg      unsigned char 
 16356 ;; Registers used:
 16357 ;;		wreg, status,2
 16358 ;; Tracked objects:
 16359 ;;		On entry : 0/0
 16360 ;;		On exit  : 0/0
 16361 ;;		Unchanged: 0/0
 16362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16366 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;Total ram usage:        1 bytes
 16368 ;; Hardware stack levels used:    1
 16369 ;; Hardware stack levels required when called:    5
 16370 ;; This function calls:
 16371 ;;		Nothing
 16372 ;; This function is called by:
 16373 ;;		_DimmerLights_Main
 16374 ;;		_getDimmerLights_Allow_Condition
 16375 ;; This function uses a non-reentrant model
 16376 ;;
 16377                           
 16378                           
 16379                           ;psect for function _getLoad_OK
 16380  1A32                     _getLoad_OK:	
 16381                           
 16382                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16383                           
 16384                           ;incstack = 0
 16385                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16386  1A32  3000               	movlw	0
 16387  1A33  0022               	movlb	2	; select bank2
 16388  1A34  1BB9               	btfsc	_Load^(0+256),7
 16389  1A35  3001               	movlw	1
 16390  1A36  0020               	movlb	0	; select bank0
 16391  1A37  00A0               	movwf	getLoad_OK@ok
 16392                           
 16393                           ;OverLoad_B1.c: 276: return ok;
 16394  1A38  0820               	movf	getLoad_OK@ok,w
 16395  1A39  0008               	return
 16396  1A3A                     __end_of_getLoad_OK:	
 16397                           
 16398                           	psect	text113
 16399  1077                     __ptext113:	
 16400 ;; *************** function _getMain_All_Error_Status *****************
 16401 ;; Defined at:
 16402 ;;		line 424 in file "../src/Main_B1.c"
 16403 ;; Parameters:    Size  Location     Type
 16404 ;;  command         1    wreg     unsigned char 
 16405 ;; Auto vars:     Size  Location     Type
 16406 ;;  command         1    5[BANK0 ] unsigned char 
 16407 ;;  status          1    6[BANK0 ] unsigned char 
 16408 ;; Return value:  Size  Location     Type
 16409 ;;                  1    wreg      unsigned char 
 16410 ;; Registers used:
 16411 ;;		wreg, status,2, status,0
 16412 ;; Tracked objects:
 16413 ;;		On entry : 0/0
 16414 ;;		On exit  : 0/0
 16415 ;;		Unchanged: 0/0
 16416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;Total ram usage:        7 bytes
 16422 ;; Hardware stack levels used:    1
 16423 ;; Hardware stack levels required when called:    5
 16424 ;; This function calls:
 16425 ;;		Nothing
 16426 ;; This function is called by:
 16427 ;;		_DimmerLights_Main
 16428 ;;		_Exception_Main
 16429 ;;		_Load_Main
 16430 ;;		_setTemp_Main
 16431 ;;		_getRxData
 16432 ;;		_setSw_Main
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436                           
 16437                           ;psect for function _getMain_All_Error_Status
 16438  1077                     _getMain_All_Error_Status:	
 16439                           
 16440                           ;incstack = 0
 16441                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16442                           ;getMain_All_Error_Status@command stored from wreg
 16443  1077  0020               	movlb	0	; select bank0
 16444  1078  00A5               	movwf	getMain_All_Error_Status@command
 16445                           
 16446                           ;Main_B1.c: 425: char status = 0;
 16447  1079  01A6               	clrf	getMain_All_Error_Status@status
 16448                           
 16449                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 16450  107A  08A6               	movf	getMain_All_Error_Status@status,f
 16451  107B  1D03               	skipz
 16452  107C  2891               	goto	l6712
 16453  107D  0825               	movf	getMain_All_Error_Status@command,w
 16454  107E  3A02               	xorlw	2
 16455  107F  1903               	skipnz
 16456  1080  2891               	goto	l6712
 16457                           
 16458                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16459  1081  0021               	movlb	1	; select bank1
 16460  1082  18D7               	btfsc	_Temp^(0+128),1
 16461  1083  2888               	goto	l6710
 16462  1084  0020               	movlb	0	; select bank0
 16463  1085  01A1               	clrf	_getMain_All_Error_Status$3624
 16464  1086  01A2               	clrf	_getMain_All_Error_Status$3624+1
 16465  1087  288D               	goto	l1485
 16466  1088                     l6710:	
 16467  1088  3002               	movlw	2
 16468  1089  0020               	movlb	0	; select bank0
 16469  108A  00A1               	movwf	_getMain_All_Error_Status$3624
 16470  108B  3000               	movlw	0
 16471  108C  00A2               	movwf	_getMain_All_Error_Status$3624+1
 16472  108D                     l1485:	
 16473  108D  0821               	movf	_getMain_All_Error_Status$3624,w
 16474  108E  00A0               	movwf	??_getMain_All_Error_Status
 16475  108F  0820               	movf	??_getMain_All_Error_Status,w
 16476  1090  00A6               	movwf	getMain_All_Error_Status@status
 16477  1091                     l6712:	
 16478                           
 16479                           ;Main_B1.c: 438: }
 16480                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 16481  1091  08A6               	movf	getMain_All_Error_Status@status,f
 16482  1092  1D03               	skipz
 16483  1093  28A8               	goto	l1486
 16484  1094  0825               	movf	getMain_All_Error_Status@command,w
 16485  1095  3A03               	xorlw	3
 16486  1096  1903               	skipnz
 16487  1097  28A8               	goto	l1486
 16488                           
 16489                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16490  1098  0022               	movlb	2	; select bank2
 16491  1099  1AB9               	btfsc	_Load^(0+256),5
 16492  109A  289F               	goto	l6720
 16493  109B  0020               	movlb	0	; select bank0
 16494  109C  01A3               	clrf	_getMain_All_Error_Status$3625
 16495  109D  01A4               	clrf	_getMain_All_Error_Status$3625+1
 16496  109E  28A4               	goto	l1490
 16497  109F                     l6720:	
 16498  109F  3003               	movlw	3
 16499  10A0  0020               	movlb	0	; select bank0
 16500  10A1  00A3               	movwf	_getMain_All_Error_Status$3625
 16501  10A2  3000               	movlw	0
 16502  10A3  00A4               	movwf	_getMain_All_Error_Status$3625+1
 16503  10A4                     l1490:	
 16504  10A4  0823               	movf	_getMain_All_Error_Status$3625,w
 16505  10A5  00A0               	movwf	??_getMain_All_Error_Status
 16506  10A6  0820               	movf	??_getMain_All_Error_Status,w
 16507  10A7  00A6               	movwf	getMain_All_Error_Status@status
 16508  10A8                     l1486:	
 16509                           
 16510                           ;Main_B1.c: 445: }
 16511                           ;Main_B1.c: 455: return status;
 16512  10A8  0826               	movf	getMain_All_Error_Status@status,w
 16513  10A9  0008               	return
 16514  10AA                     __end_of_getMain_All_Error_Status:	
 16515                           
 16516                           	psect	text114
 16517  12F3                     __ptext114:	
 16518 ;; *************** function _DimmerLights_DimmingFunction *****************
 16519 ;; Defined at:
 16520 ;;		line 1789 in file "../src/Dimmer_B1.c"
 16521 ;; Parameters:    Size  Location     Type
 16522 ;;  lights          1    wreg     unsigned char 
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;  lights          1    1[BANK0 ] unsigned char 
 16525 ;; Return value:  Size  Location     Type
 16526 ;;		None               void
 16527 ;; Registers used:
 16528 ;;		wreg, status,2, status,0
 16529 ;; Tracked objects:
 16530 ;;		On entry : 0/0
 16531 ;;		On exit  : 0/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;Total ram usage:        2 bytes
 16539 ;; Hardware stack levels used:    1
 16540 ;; Hardware stack levels required when called:    5
 16541 ;; This function calls:
 16542 ;;		Nothing
 16543 ;; This function is called by:
 16544 ;;		_DimmerLights_Main
 16545 ;; This function uses a non-reentrant model
 16546 ;;
 16547                           
 16548                           
 16549                           ;psect for function _DimmerLights_DimmingFunction
 16550  12F3                     _DimmerLights_DimmingFunction:	
 16551                           
 16552                           ;incstack = 0
 16553                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0]
 16554                           ;DimmerLights_DimmingFunction@lights stored from wreg
 16555  12F3  0020               	movlb	0	; select bank0
 16556  12F4  00A1               	movwf	DimmerLights_DimmingFunction@lights
 16557                           
 16558                           ;Dimmer_B1.c: 1791: if (lights == 1) {
 16559  12F5  0821               	movf	DimmerLights_DimmingFunction@lights,w
 16560  12F6  3A01               	xorlw	1
 16561  12F7  1D03               	skipz
 16562  12F8  0008               	return
 16563                           
 16564                           ;Dimmer_B1.c: 1792: if (DimmerIntr1.Tune == 1) {
 16565  12F9  0021               	movlb	1	; select bank1
 16566  12FA  1CBC               	btfss	_DimmerIntr1^(0+128),1
 16567  12FB  0008               	return
 16568                           
 16569                           ;Dimmer_B1.c: 1793: DimmerIntr1.Tune = 0;
 16570  12FC  10BC               	bcf	_DimmerIntr1^(0+128),1
 16571                           
 16572                           ;Dimmer_B1.c: 1794: DimmerIntr1.TuneTime++;
 16573  12FD  3001               	movlw	1
 16574  12FE  0020               	movlb	0	; select bank0
 16575  12FF  00A0               	movwf	??_DimmerLights_DimmingFunction
 16576  1300  0820               	movf	??_DimmerLights_DimmingFunction,w
 16577  1301  0021               	movlb	1	; select bank1
 16578  1302  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 16579                           
 16580                           ;Dimmer_B1.c: 1795: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 16581  1303  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 16582  1304  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 16583  1305  1C03               	skipc
 16584  1306  0008               	return
 16585                           
 16586                           ;Dimmer_B1.c: 1796: DimmerIntr1.TuneTime = 0;
 16587  1307  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 16588                           
 16589                           ;Dimmer_B1.c: 1797: DimmerIntr1.TuneGO = 1;
 16590  1308  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 16591                           
 16592                           ;Dimmer_B1.c: 1798: if (DimmerIntr1.Dimming_Sw == 1) {
 16593  1309  1E3C               	btfss	_DimmerIntr1^(0+128),4
 16594  130A  2B23               	goto	l882
 16595                           
 16596                           ;Dimmer_B1.c: 1799: if (DimmerIntr1.Dimming_Status == 0) {
 16597  130B  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 16598  130C  2B1A               	goto	l7408
 16599                           
 16600                           ;Dimmer_B1.c: 1800: if (DimmerIntr1.DimmingValue < ((char)(84*0.6))) {
 16601  130D  3032               	movlw	50
 16602  130E  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16603  130F  1803               	skipnc
 16604  1310  2B18               	goto	l884
 16605                           
 16606                           ;Dimmer_B1.c: 1801: DimmerIntr1.DimmingValue++;
 16607  1311  3001               	movlw	1
 16608  1312  0020               	movlb	0	; select bank0
 16609  1313  00A0               	movwf	??_DimmerLights_DimmingFunction
 16610  1314  0820               	movf	??_DimmerLights_DimmingFunction,w
 16611  1315  0021               	movlb	1	; select bank1
 16612  1316  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 16613                           
 16614                           ;Dimmer_B1.c: 1802: } else {
 16615  1317  0008               	return
 16616  1318                     l884:	
 16617                           
 16618                           ;Dimmer_B1.c: 1803: DimmerIntr1.Dimming_Status = 1;
 16619  1318  16BC               	bsf	_DimmerIntr1^(0+128),5
 16620                           
 16621                           ;Dimmer_B1.c: 1804: }
 16622                           ;Dimmer_B1.c: 1805: } else {
 16623  1319  0008               	return
 16624  131A                     l7408:	
 16625                           
 16626                           ;Dimmer_B1.c: 1806: if (DimmerIntr1.DimmingValue > ((char)(10*0.6))) {
 16627  131A  3007               	movlw	7
 16628  131B  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16629  131C  1C03               	skipc
 16630  131D  2B21               	goto	l887
 16631                           
 16632                           ;Dimmer_B1.c: 1807: DimmerIntr1.DimmingValue--;
 16633  131E  3001               	movlw	1
 16634  131F  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 16635                           
 16636                           ;Dimmer_B1.c: 1808: } else {
 16637  1320  0008               	return
 16638  1321                     l887:	
 16639                           
 16640                           ;Dimmer_B1.c: 1809: DimmerIntr1.Dimming_Status = 0;
 16641  1321  12BC               	bcf	_DimmerIntr1^(0+128),5
 16642                           
 16643                           ;Dimmer_B1.c: 1810: }
 16644                           ;Dimmer_B1.c: 1811: }
 16645                           ;Dimmer_B1.c: 1812: } else if (DimmerIntr1.Dimming_RF == 1) {
 16646  1322  0008               	return
 16647  1323                     l882:	
 16648  1323  1F3C               	btfss	_DimmerIntr1^(0+128),6
 16649  1324  0008               	return
 16650                           
 16651                           ;Dimmer_B1.c: 1813: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 16652  1325  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 16653  1326  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 16654  1327  1803               	skipnc
 16655  1328  2B30               	goto	l7416
 16656                           
 16657                           ;Dimmer_B1.c: 1814: DimmerIntr1.DimmingValue++;
 16658  1329  3001               	movlw	1
 16659  132A  0020               	movlb	0	; select bank0
 16660  132B  00A0               	movwf	??_DimmerLights_DimmingFunction
 16661  132C  0820               	movf	??_DimmerLights_DimmingFunction,w
 16662  132D  0021               	movlb	1	; select bank1
 16663  132E  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 16664                           
 16665                           ;Dimmer_B1.c: 1815: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 16666  132F  0008               	return
 16667  1330                     l7416:	
 16668  1330  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16669  1331  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 16670  1332  1803               	skipnc
 16671  1333  2B37               	goto	l893
 16672                           
 16673                           ;Dimmer_B1.c: 1816: DimmerIntr1.DimmingValue--;
 16674  1334  3001               	movlw	1
 16675  1335  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 16676                           
 16677                           ;Dimmer_B1.c: 1817: } else {
 16678  1336  0008               	return
 16679  1337                     l893:	
 16680                           
 16681                           ;Dimmer_B1.c: 1818: DimmerIntr1.Dimming_RF = 0;
 16682  1337  133C               	bcf	_DimmerIntr1^(0+128),6
 16683  1338  0008               	return
 16684  1339                     __end_of_DimmerLights_DimmingFunction:	
 16685                           
 16686                           	psect	text115
 16687  1A1D                     __ptext115:	
 16688 ;; *************** function _DimmerLights_Initialization *****************
 16689 ;; Defined at:
 16690 ;;		line 675 in file "../src/Dimmer_B1.c"
 16691 ;; Parameters:    Size  Location     Type
 16692 ;;		None
 16693 ;; Auto vars:     Size  Location     Type
 16694 ;;		None
 16695 ;; Return value:  Size  Location     Type
 16696 ;;		None               void
 16697 ;; Registers used:
 16698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16699 ;; Tracked objects:
 16700 ;;		On entry : 0/0
 16701 ;;		On exit  : 0/0
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;Total ram usage:        0 bytes
 16709 ;; Hardware stack levels used:    1
 16710 ;; Hardware stack levels required when called:    9
 16711 ;; This function calls:
 16712 ;;		_DimmerIntr_Initialization
 16713 ;;		_setDimmerLights_Initialization
 16714 ;; This function is called by:
 16715 ;;		_main
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           
 16720                           ;psect for function _DimmerLights_Initialization
 16721  1A1D                     _DimmerLights_Initialization:	
 16722                           
 16723                           ;Dimmer_B1.c: 677: setDimmerLights_Initialization(1);
 16724                           
 16725                           ;incstack = 0
 16726                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16727  1A1D  3001               	movlw	1
 16728  1A1E  3199  21C5  319A   	fcall	_setDimmerLights_Initialization
 16729                           
 16730                           ;Dimmer_B1.c: 687: DimmerIntr_Initialization();
 16731  1A21  3194  24E2         	fcall	_DimmerIntr_Initialization
 16732  1A23  0008               	return
 16733  1A24                     __end_of_DimmerLights_Initialization:	
 16734                           
 16735                           	psect	text116
 16736  19C5                     __ptext116:	
 16737 ;; *************** function _setDimmerLights_Initialization *****************
 16738 ;; Defined at:
 16739 ;;		line 691 in file "../src/Dimmer_B1.c"
 16740 ;; Parameters:    Size  Location     Type
 16741 ;;  lights          1    wreg     unsigned char 
 16742 ;; Auto vars:     Size  Location     Type
 16743 ;;  lights          1    0[COMMON] unsigned char 
 16744 ;; Return value:  Size  Location     Type
 16745 ;;		None               void
 16746 ;; Registers used:
 16747 ;;		wreg
 16748 ;; Tracked objects:
 16749 ;;		On entry : 0/0
 16750 ;;		On exit  : 0/0
 16751 ;;		Unchanged: 0/0
 16752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;Total ram usage:        0 bytes
 16758 ;; Hardware stack levels used:    1
 16759 ;; Hardware stack levels required when called:    5
 16760 ;; This function calls:
 16761 ;;		Nothing
 16762 ;; This function is called by:
 16763 ;;		_DimmerLights_Initialization
 16764 ;; This function uses a non-reentrant model
 16765 ;;
 16766                           
 16767                           
 16768                           ;psect for function _setDimmerLights_Initialization
 16769  19C5                     _setDimmerLights_Initialization:	
 16770                           
 16771                           ;incstack = 0
 16772                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16773  19C5  0008               	return
 16774  19C6                     __end_of_setDimmerLights_Initialization:	
 16775                           
 16776                           	psect	text117
 16777  14E2                     __ptext117:	
 16778 ;; *************** function _DimmerIntr_Initialization *****************
 16779 ;; Defined at:
 16780 ;;		line 7 in file "../src/Dimmer_B1.c"
 16781 ;; Parameters:    Size  Location     Type
 16782 ;;		None
 16783 ;; Auto vars:     Size  Location     Type
 16784 ;;		None
 16785 ;; Return value:  Size  Location     Type
 16786 ;;		None               void
 16787 ;; Registers used:
 16788 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16789 ;; Tracked objects:
 16790 ;;		On entry : 0/0
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16796 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;Total ram usage:        2 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; Hardware stack levels required when called:    8
 16801 ;; This function calls:
 16802 ;;		_Division
 16803 ;;		_getDimmerLights_PercentToValue
 16804 ;;		_getDimmerLights_ValueToPercent
 16805 ;;		_setMemory_Modify
 16806 ;; This function is called by:
 16807 ;;		_DimmerLights_Initialization
 16808 ;; This function uses a non-reentrant model
 16809 ;;
 16810                           
 16811                           
 16812                           ;psect for function _DimmerIntr_Initialization
 16813  14E2                     _DimmerIntr_Initialization:	
 16814                           
 16815                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 16816                           
 16817                           ;incstack = 0
 16818                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16819  14E2  3003               	movlw	3
 16820  14E3  0020               	movlb	0	; select bank0
 16821  14E4  00E2               	movwf	??_DimmerIntr_Initialization
 16822  14E5  0862               	movf	??_DimmerIntr_Initialization,w
 16823  14E6  0021               	movlb	1	; select bank1
 16824  14E7  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 16825                           
 16826                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(84*0.6));
 16827  14E8  3032               	movlw	50
 16828  14E9  0020               	movlb	0	; select bank0
 16829  14EA  00E2               	movwf	??_DimmerIntr_Initialization
 16830  14EB  0862               	movf	??_DimmerIntr_Initialization,w
 16831  14EC  0021               	movlb	1	; select bank1
 16832  14ED  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16833                           
 16834                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(10*0.6));
 16835  14EE  3006               	movlw	6
 16836  14EF  0020               	movlb	0	; select bank0
 16837  14F0  00E2               	movwf	??_DimmerIntr_Initialization
 16838  14F1  0862               	movf	??_DimmerIntr_Initialization,w
 16839  14F2  0021               	movlb	1	; select bank1
 16840  14F3  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 16841                           
 16842                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 16843  14F4  10BC               	bcf	_DimmerIntr1^(0+128),1
 16844                           
 16845                           ;Dimmer_B1.c: 17: if (myMain.InitDimmer == 1) {
 16846  14F5  1E39               	btfss	(_myMain^(0+128)+10),4
 16847  14F6  2D06               	goto	l680
 16848                           
 16849                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(84*0.6)));
 16850  14F7  3032               	movlw	50
 16851  14F8  3196  2664  3194   	fcall	_getDimmerLights_ValueToPercent
 16852  14FB  0020               	movlb	0	; select bank0
 16853  14FC  00E2               	movwf	??_DimmerIntr_Initialization
 16854  14FD  0021               	movlb	1	; select bank1
 16855  14FE  086E               	movf	_product^(0+128),w
 16856  14FF  3E15               	addlw	21
 16857  1500  0086               	movwf	6
 16858  1501  3001               	movlw	1	; select bank2/3
 16859  1502  0087               	movwf	7
 16860  1503  0020               	movlb	0	; select bank0
 16861  1504  0862               	movf	??_DimmerIntr_Initialization,w
 16862  1505  0081               	movwf	1
 16863  1506                     l680:	
 16864                           
 16865                           ;Dimmer_B1.c: 19: }
 16866                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16867  1506  0021               	movlb	1	; select bank1
 16868  1507  086E               	movf	_product^(0+128),w
 16869  1508  3E15               	addlw	21
 16870  1509  0086               	movwf	6
 16871  150A  3001               	movlw	1	; select bank2/3
 16872  150B  0087               	movwf	7
 16873  150C  0801               	movf	1,w
 16874  150D  3195  25FF  3194   	fcall	_getDimmerLights_PercentToValue
 16875  1510  0020               	movlb	0	; select bank0
 16876  1511  00E2               	movwf	??_DimmerIntr_Initialization
 16877  1512  0862               	movf	??_DimmerIntr_Initialization,w
 16878  1513  0021               	movlb	1	; select bank1
 16879  1514  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 16880                           
 16881                           ;Dimmer_B1.c: 28: DimmerIntr1.TuneValue2 = Division(((char)(84*0.6)), 2);
 16882  1515  3002               	movlw	2
 16883  1516  0020               	movlb	0	; select bank0
 16884  1517  00E2               	movwf	??_DimmerIntr_Initialization
 16885  1518  0862               	movf	??_DimmerIntr_Initialization,w
 16886  1519  00A5               	movwf	Division@num
 16887  151A  3032               	movlw	50
 16888  151B  319B  2347  3194   	fcall	_Division
 16889  151E  0020               	movlb	0	; select bank0
 16890  151F  00E3               	movwf	??_DimmerIntr_Initialization+1
 16891  1520  0863               	movf	??_DimmerIntr_Initialization+1,w
 16892  1521  0021               	movlb	1	; select bank1
 16893  1522  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 16894                           
 16895                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - ((char)(84*0.6
      +                          )));
 16896  1523  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 16897  1524  3E0A               	addlw	10
 16898  1525  0020               	movlb	0	; select bank0
 16899  1526  00E2               	movwf	??_DimmerIntr_Initialization
 16900  1527  0862               	movf	??_DimmerIntr_Initialization,w
 16901  1528  0021               	movlb	1	; select bank1
 16902  1529  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 16903                           
 16904                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 16905  152A  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 16906  152B  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 16907  152C  0020               	movlb	0	; select bank0
 16908  152D  00E2               	movwf	??_DimmerIntr_Initialization
 16909  152E  0862               	movf	??_DimmerIntr_Initialization,w
 16910  152F  0021               	movlb	1	; select bank1
 16911  1530  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 16912                           
 16913                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 16914  1531  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 16915  1532  3E01               	addlw	1
 16916  1533  0020               	movlb	0	; select bank0
 16917  1534  00E2               	movwf	??_DimmerIntr_Initialization
 16918  1535  0862               	movf	??_DimmerIntr_Initialization,w
 16919  1536  0021               	movlb	1	; select bank1
 16920  1537  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 16921                           
 16922                           ;Dimmer_B1.c: 80: if (myMain.InitDimmer == 1) {
 16923  1538  1E39               	btfss	(_myMain^(0+128)+10),4
 16924  1539  0008               	return
 16925                           
 16926                           ;Dimmer_B1.c: 81: myMain.InitDimmer = 0;
 16927  153A  1239               	bcf	(_myMain^(0+128)+10),4
 16928                           
 16929                           ;Dimmer_B1.c: 82: myMain.SaveDimmer = 1;
 16930  153B  16B9               	bsf	(_myMain^(0+128)+10),5
 16931                           
 16932                           ;Dimmer_B1.c: 83: setMemory_Modify(1);
 16933  153C  3001               	movlw	1
 16934  153D  319C  2455         	fcall	_setMemory_Modify
 16935  153F  0008               	return
 16936  1540                     __end_of_DimmerIntr_Initialization:	
 16937                           
 16938                           	psect	text118
 16939  1C55                     __ptext118:	
 16940 ;; *************** function _setMemory_Modify *****************
 16941 ;; Defined at:
 16942 ;;		line 1083 in file "../src/MCU_B1.c"
 16943 ;; Parameters:    Size  Location     Type
 16944 ;;  command         1    wreg     unsigned char 
 16945 ;; Auto vars:     Size  Location     Type
 16946 ;;  command         1    1[BANK0 ] unsigned char 
 16947 ;; Return value:  Size  Location     Type
 16948 ;;		None               void
 16949 ;; Registers used:
 16950 ;;		wreg, status,2, status,0
 16951 ;; Tracked objects:
 16952 ;;		On entry : 0/0
 16953 ;;		On exit  : 0/0
 16954 ;;		Unchanged: 0/0
 16955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16960 ;;Total ram usage:        2 bytes
 16961 ;; Hardware stack levels used:    1
 16962 ;; Hardware stack levels required when called:    5
 16963 ;; This function calls:
 16964 ;;		Nothing
 16965 ;; This function is called by:
 16966 ;;		_DimmerIntr_Initialization
 16967 ;;		_setDimmerLights_Dimming
 16968 ;;		_setLog_Code
 16969 ;;		_setRFSW_AdjControl
 16970 ;; This function uses a non-reentrant model
 16971 ;;
 16972                           
 16973                           
 16974                           ;psect for function _setMemory_Modify
 16975  1C55                     _setMemory_Modify:	
 16976                           
 16977                           ;incstack = 0
 16978                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16979                           ;setMemory_Modify@command stored from wreg
 16980  1C55  0020               	movlb	0	; select bank0
 16981  1C56  00A1               	movwf	setMemory_Modify@command
 16982                           
 16983                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16984  1C57  0821               	movf	setMemory_Modify@command,w
 16985  1C58  3A01               	xorlw	1
 16986  1C59  3000               	movlw	0
 16987  1C5A  1903               	skipnz
 16988  1C5B  3001               	movlw	1
 16989  1C5C  00A0               	movwf	??_setMemory_Modify
 16990  1C5D  0024               	movlb	4	; select bank4
 16991  1C5E  0844               	movf	(_Memory^(0+512)+36),w
 16992  1C5F  0020               	movlb	0	; select bank0
 16993  1C60  0620               	xorwf	??_setMemory_Modify,w
 16994  1C61  39FE               	andlw	-2
 16995  1C62  0620               	xorwf	??_setMemory_Modify,w
 16996  1C63  0024               	movlb	4	; select bank4
 16997  1C64  00C4               	movwf	(_Memory^(0+512)+36)
 16998                           
 16999                           ;MCU_B1.c: 1085: Memory.Time = 0;
 17000  1C65  01C2               	clrf	(_Memory^(0+512)+34)
 17001  1C66  01C3               	clrf	((_Memory+1)^(0+512)+34)
 17002  1C67  0008               	return
 17003  1C68                     __end_of_setMemory_Modify:	
 17004                           
 17005                           	psect	text119
 17006  1664                     __ptext119:	
 17007 ;; *************** function _getDimmerLights_ValueToPercent *****************
 17008 ;; Defined at:
 17009 ;;		line 1183 in file "../src/Dimmer_B1.c"
 17010 ;; Parameters:    Size  Location     Type
 17011 ;;  value           1    wreg     unsigned char 
 17012 ;; Auto vars:     Size  Location     Type
 17013 ;;  value           1   62[BANK0 ] unsigned char 
 17014 ;;  i               3   63[BANK0 ] float 
 17015 ;; Return value:  Size  Location     Type
 17016 ;;                  1    wreg      unsigned char 
 17017 ;; Registers used:
 17018 ;;		wreg, status,2, status,0, pclath, cstack
 17019 ;; Tracked objects:
 17020 ;;		On entry : 0/0
 17021 ;;		On exit  : 0/0
 17022 ;;		Unchanged: 0/0
 17023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17025 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17027 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;Total ram usage:        6 bytes
 17029 ;; Hardware stack levels used:    1
 17030 ;; Hardware stack levels required when called:    7
 17031 ;; This function calls:
 17032 ;;		___awtoft
 17033 ;;		___ftadd
 17034 ;;		___ftdiv
 17035 ;;		___ftneg
 17036 ;;		___fttol
 17037 ;; This function is called by:
 17038 ;;		_DimmerIntr_Initialization
 17039 ;;		_setDimmerLights_Dimming
 17040 ;; This function uses a non-reentrant model
 17041 ;;
 17042                           
 17043                           
 17044                           ;psect for function _getDimmerLights_ValueToPercent
 17045  1664                     _getDimmerLights_ValueToPercent:	
 17046                           
 17047                           ;incstack = 0
 17048                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 17049                           ;getDimmerLights_ValueToPercent@value stored from wreg
 17050  1664  0020               	movlb	0	; select bank0
 17051  1665  00DE               	movwf	getDimmerLights_ValueToPercent@value
 17052                           
 17053                           ;Dimmer_B1.c: 1191: float i = ((char)(84*0.6)) - ((char)(10*0.6));
 17054  1666  3000               	movlw	0
 17055  1667  00DF               	movwf	getDimmerLights_ValueToPercent@i
 17056  1668  3030               	movlw	48
 17057  1669  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 17058  166A  3042               	movlw	66
 17059  166B  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 17060                           
 17061                           ;Dimmer_B1.c: 1192: i /= 100;
 17062  166C  3000               	movlw	0
 17063  166D  00AE               	movwf	___ftdiv@f2
 17064  166E  30C8               	movlw	200
 17065  166F  00AF               	movwf	___ftdiv@f2+1
 17066  1670  3042               	movlw	66
 17067  1671  00B0               	movwf	___ftdiv@f2+2
 17068  1672  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17069  1673  00B1               	movwf	___ftdiv@f1
 17070  1674  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17071  1675  00B2               	movwf	___ftdiv@f1+1
 17072  1676  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17073  1677  00B3               	movwf	___ftdiv@f1+2
 17074  1678  318D  2522  3196   	fcall	___ftdiv
 17075  167B  0020               	movlb	0	; select bank0
 17076  167C  082E               	movf	?___ftdiv,w
 17077  167D  00DF               	movwf	getDimmerLights_ValueToPercent@i
 17078  167E  082F               	movf	?___ftdiv+1,w
 17079  167F  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 17080  1680  0830               	movf	?___ftdiv+2,w
 17081  1681  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 17082                           
 17083                           ;Dimmer_B1.c: 1194: return (char) (100 - ((((char)(84*0.6)) - value) / i));
 17084  1682  085E               	movf	getDimmerLights_ValueToPercent@value,w
 17085  1683  00DC               	movwf	??_getDimmerLights_ValueToPercent
 17086  1684  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 17087  1685  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 17088  1686  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 17089  1687  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 17090  1688  1903               	skipnz
 17091  1689  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 17092  168A  085C               	movf	??_getDimmerLights_ValueToPercent,w
 17093  168B  3E32               	addlw	50
 17094  168C  00A8               	movwf	___awtoft@c
 17095  168D  3000               	movlw	0
 17096  168E  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17097  168F  00A9               	movwf	___awtoft@c+1
 17098  1690  319F  2748  3196   	fcall	___awtoft
 17099  1693  0020               	movlb	0	; select bank0
 17100  1694  0828               	movf	?___awtoft,w
 17101  1695  00B1               	movwf	___ftdiv@f1
 17102  1696  0829               	movf	?___awtoft+1,w
 17103  1697  00B2               	movwf	___ftdiv@f1+1
 17104  1698  082A               	movf	?___awtoft+2,w
 17105  1699  00B3               	movwf	___ftdiv@f1+2
 17106  169A  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17107  169B  00AE               	movwf	___ftdiv@f2
 17108  169C  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17109  169D  00AF               	movwf	___ftdiv@f2+1
 17110  169E  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17111  169F  00B0               	movwf	___ftdiv@f2+2
 17112  16A0  318D  2522  3196   	fcall	___ftdiv
 17113  16A3  0020               	movlb	0	; select bank0
 17114  16A4  082E               	movf	?___ftdiv,w
 17115  16A5  00BE               	movwf	___ftneg@f1
 17116  16A6  082F               	movf	?___ftdiv+1,w
 17117  16A7  00BF               	movwf	___ftneg@f1+1
 17118  16A8  0830               	movf	?___ftdiv+2,w
 17119  16A9  00C0               	movwf	___ftneg@f1+2
 17120  16AA  319A  2253  3196   	fcall	___ftneg
 17121  16AD  0020               	movlb	0	; select bank0
 17122  16AE  083E               	movf	?___ftneg,w
 17123  16AF  00C4               	movwf	___ftadd@f2
 17124  16B0  083F               	movf	?___ftneg+1,w
 17125  16B1  00C5               	movwf	___ftadd@f2+1
 17126  16B2  0840               	movf	?___ftneg+2,w
 17127  16B3  00C6               	movwf	___ftadd@f2+2
 17128  16B4  3000               	movlw	0
 17129  16B5  00C1               	movwf	___ftadd@f1
 17130  16B6  30C8               	movlw	200
 17131  16B7  00C2               	movwf	___ftadd@f1+1
 17132  16B8  3042               	movlw	66
 17133  16B9  00C3               	movwf	___ftadd@f1+2
 17134  16BA  3183  2389  3196   	fcall	___ftadd
 17135  16BD  0020               	movlb	0	; select bank0
 17136  16BE  0841               	movf	?___ftadd,w
 17137  16BF  00CE               	movwf	___fttol@f1
 17138  16C0  0842               	movf	?___ftadd+1,w
 17139  16C1  00CF               	movwf	___fttol@f1+1
 17140  16C2  0843               	movf	?___ftadd+2,w
 17141  16C3  00D0               	movwf	___fttol@f1+2
 17142  16C4  318B  2382         	fcall	___fttol
 17143  16C6  0020               	movlb	0	; select bank0
 17144  16C7  084E               	movf	?___fttol,w
 17145  16C8  0008               	return
 17146  16C9                     __end_of_getDimmerLights_ValueToPercent:	
 17147                           
 17148                           	psect	text120
 17149  15FF                     __ptext120:	
 17150 ;; *************** function _getDimmerLights_PercentToValue *****************
 17151 ;; Defined at:
 17152 ;;		line 1167 in file "../src/Dimmer_B1.c"
 17153 ;; Parameters:    Size  Location     Type
 17154 ;;  value           1    wreg     unsigned char 
 17155 ;; Auto vars:     Size  Location     Type
 17156 ;;  value           1   62[BANK0 ] unsigned char 
 17157 ;;  i               3   63[BANK0 ] float 
 17158 ;; Return value:  Size  Location     Type
 17159 ;;                  1    wreg      unsigned char 
 17160 ;; Registers used:
 17161 ;;		wreg, status,2, status,0, pclath, cstack
 17162 ;; Tracked objects:
 17163 ;;		On entry : 0/0
 17164 ;;		On exit  : 0/0
 17165 ;;		Unchanged: 0/0
 17166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;Total ram usage:        6 bytes
 17172 ;; Hardware stack levels used:    1
 17173 ;; Hardware stack levels required when called:    7
 17174 ;; This function calls:
 17175 ;;		___awtoft
 17176 ;;		___ftadd
 17177 ;;		___ftdiv
 17178 ;;		___ftmul
 17179 ;;		___ftneg
 17180 ;;		___fttol
 17181 ;; This function is called by:
 17182 ;;		_DimmerIntr_Initialization
 17183 ;;		_setDimmerLights_OnOff
 17184 ;;		_setRFSW_AdjControl
 17185 ;; This function uses a non-reentrant model
 17186 ;;
 17187                           
 17188                           
 17189                           ;psect for function _getDimmerLights_PercentToValue
 17190  15FF                     _getDimmerLights_PercentToValue:	
 17191                           
 17192                           ;incstack = 0
 17193                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 17194                           ;getDimmerLights_PercentToValue@value stored from wreg
 17195  15FF  0020               	movlb	0	; select bank0
 17196  1600  00DE               	movwf	getDimmerLights_PercentToValue@value
 17197                           
 17198                           ;Dimmer_B1.c: 1175: float i = ((char)(84*0.6)) - ((char)(10*0.6));
 17199  1601  3000               	movlw	0
 17200  1602  00DF               	movwf	getDimmerLights_PercentToValue@i
 17201  1603  3030               	movlw	48
 17202  1604  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17203  1605  3042               	movlw	66
 17204  1606  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17205                           
 17206                           ;Dimmer_B1.c: 1176: i /= 100;
 17207  1607  3000               	movlw	0
 17208  1608  00AE               	movwf	___ftdiv@f2
 17209  1609  30C8               	movlw	200
 17210  160A  00AF               	movwf	___ftdiv@f2+1
 17211  160B  3042               	movlw	66
 17212  160C  00B0               	movwf	___ftdiv@f2+2
 17213  160D  085F               	movf	getDimmerLights_PercentToValue@i,w
 17214  160E  00B1               	movwf	___ftdiv@f1
 17215  160F  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17216  1610  00B2               	movwf	___ftdiv@f1+1
 17217  1611  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17218  1612  00B3               	movwf	___ftdiv@f1+2
 17219  1613  318D  2522  3195   	fcall	___ftdiv
 17220  1616  0020               	movlb	0	; select bank0
 17221  1617  082E               	movf	?___ftdiv,w
 17222  1618  00DF               	movwf	getDimmerLights_PercentToValue@i
 17223  1619  082F               	movf	?___ftdiv+1,w
 17224  161A  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17225  161B  0830               	movf	?___ftdiv+2,w
 17226  161C  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17227                           
 17228                           ;Dimmer_B1.c: 1178: return (char) (((char)(84*0.6)) - ((100 - value) * i));
 17229  161D  085E               	movf	getDimmerLights_PercentToValue@value,w
 17230  161E  00DC               	movwf	??_getDimmerLights_PercentToValue
 17231  161F  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 17232  1620  09DC               	comf	??_getDimmerLights_PercentToValue,f
 17233  1621  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 17234  1622  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 17235  1623  1903               	skipnz
 17236  1624  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 17237  1625  085C               	movf	??_getDimmerLights_PercentToValue,w
 17238  1626  3E64               	addlw	100
 17239  1627  00A8               	movwf	___awtoft@c
 17240  1628  3000               	movlw	0
 17241  1629  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 17242  162A  00A9               	movwf	___awtoft@c+1
 17243  162B  319F  2748  3195   	fcall	___awtoft
 17244  162E  0020               	movlb	0	; select bank0
 17245  162F  0828               	movf	?___awtoft,w
 17246  1630  00B1               	movwf	___ftmul@f2
 17247  1631  0829               	movf	?___awtoft+1,w
 17248  1632  00B2               	movwf	___ftmul@f2+1
 17249  1633  082A               	movf	?___awtoft+2,w
 17250  1634  00B3               	movwf	___ftmul@f2+2
 17251  1635  085F               	movf	getDimmerLights_PercentToValue@i,w
 17252  1636  00AE               	movwf	___ftmul@f1
 17253  1637  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17254  1638  00AF               	movwf	___ftmul@f1+1
 17255  1639  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17256  163A  00B0               	movwf	___ftmul@f1+2
 17257  163B  318D  25CB  3195   	fcall	___ftmul
 17258  163E  0020               	movlb	0	; select bank0
 17259  163F  082E               	movf	?___ftmul,w
 17260  1640  00BE               	movwf	___ftneg@f1
 17261  1641  082F               	movf	?___ftmul+1,w
 17262  1642  00BF               	movwf	___ftneg@f1+1
 17263  1643  0830               	movf	?___ftmul+2,w
 17264  1644  00C0               	movwf	___ftneg@f1+2
 17265  1645  319A  2253  3195   	fcall	___ftneg
 17266  1648  0020               	movlb	0	; select bank0
 17267  1649  083E               	movf	?___ftneg,w
 17268  164A  00C4               	movwf	___ftadd@f2
 17269  164B  083F               	movf	?___ftneg+1,w
 17270  164C  00C5               	movwf	___ftadd@f2+1
 17271  164D  0840               	movf	?___ftneg+2,w
 17272  164E  00C6               	movwf	___ftadd@f2+2
 17273  164F  3000               	movlw	0
 17274  1650  00C1               	movwf	___ftadd@f1
 17275  1651  3048               	movlw	72
 17276  1652  00C2               	movwf	___ftadd@f1+1
 17277  1653  3042               	movlw	66
 17278  1654  00C3               	movwf	___ftadd@f1+2
 17279  1655  3183  2389  3195   	fcall	___ftadd
 17280  1658  0020               	movlb	0	; select bank0
 17281  1659  0841               	movf	?___ftadd,w
 17282  165A  00CE               	movwf	___fttol@f1
 17283  165B  0842               	movf	?___ftadd+1,w
 17284  165C  00CF               	movwf	___fttol@f1+1
 17285  165D  0843               	movf	?___ftadd+2,w
 17286  165E  00D0               	movwf	___fttol@f1+2
 17287  165F  318B  2382         	fcall	___fttol
 17288  1661  0020               	movlb	0	; select bank0
 17289  1662  084E               	movf	?___fttol,w
 17290  1663  0008               	return
 17291  1664                     __end_of_getDimmerLights_PercentToValue:	
 17292                           
 17293                           	psect	text121
 17294  0B82                     __ptext121:	
 17295 ;; *************** function ___fttol *****************
 17296 ;; Defined at:
 17297 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17298 ;; Parameters:    Size  Location     Type
 17299 ;;  f1              3   46[BANK0 ] float 
 17300 ;; Auto vars:     Size  Location     Type
 17301 ;;  lval            4   55[BANK0 ] unsigned long 
 17302 ;;  exp1            1   59[BANK0 ] unsigned char 
 17303 ;;  sign1           1   54[BANK0 ] unsigned char 
 17304 ;; Return value:  Size  Location     Type
 17305 ;;                  4   46[BANK0 ] long 
 17306 ;; Registers used:
 17307 ;;		wreg, status,2, status,0
 17308 ;; Tracked objects:
 17309 ;;		On entry : 0/0
 17310 ;;		On exit  : 0/0
 17311 ;;		Unchanged: 0/0
 17312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17313 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;Total ram usage:       14 bytes
 17318 ;; Hardware stack levels used:    1
 17319 ;; Hardware stack levels required when called:    5
 17320 ;; This function calls:
 17321 ;;		Nothing
 17322 ;; This function is called by:
 17323 ;;		_getDimmerLights_PercentToValue
 17324 ;;		_getDimmerLights_ValueToPercent
 17325 ;; This function uses a non-reentrant model
 17326 ;;
 17327                           
 17328                           
 17329                           ;psect for function ___fttol
 17330  0B82                     ___fttol:	
 17331                           
 17332                           ;incstack = 0
 17333                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17334  0B82  0020               	movlb	0	; select bank0
 17335  0B83  084E               	movf	___fttol@f1,w
 17336  0B84  00D2               	movwf	??___fttol
 17337  0B85  084F               	movf	___fttol@f1+1,w
 17338  0B86  00D3               	movwf	??___fttol+1
 17339  0B87  0850               	movf	___fttol@f1+2,w
 17340  0B88  00D4               	movwf	??___fttol+2
 17341  0B89  1003               	clrc
 17342  0B8A  0D53               	rlf	??___fttol+1,w
 17343  0B8B  0D54               	rlf	??___fttol+2,w
 17344  0B8C  00D5               	movwf	??___fttol+3
 17345  0B8D  0855               	movf	??___fttol+3,w
 17346  0B8E  00DB               	movwf	___fttol@exp1
 17347  0B8F  08DB               	movf	___fttol@exp1,f
 17348  0B90  1D03               	skipz
 17349  0B91  2B9B               	goto	l6180
 17350  0B92  3000               	movlw	0
 17351  0B93  00D1               	movwf	?___fttol+3
 17352  0B94  3000               	movlw	0
 17353  0B95  00D0               	movwf	?___fttol+2
 17354  0B96  3000               	movlw	0
 17355  0B97  00CF               	movwf	?___fttol+1
 17356  0B98  3000               	movlw	0
 17357  0B99  00CE               	movwf	?___fttol
 17358  0B9A  0008               	return
 17359  0B9B                     l6180:	
 17360  0B9B  084E               	movf	___fttol@f1,w
 17361  0B9C  00D2               	movwf	??___fttol
 17362  0B9D  084F               	movf	___fttol@f1+1,w
 17363  0B9E  00D3               	movwf	??___fttol+1
 17364  0B9F  0850               	movf	___fttol@f1+2,w
 17365  0BA0  00D4               	movwf	??___fttol+2
 17366  0BA1  3017               	movlw	23
 17367  0BA2                     u5205:	
 17368  0BA2  36D4               	lsrf	??___fttol+2,f
 17369  0BA3  0CD3               	rrf	??___fttol+1,f
 17370  0BA4  0CD2               	rrf	??___fttol,f
 17371  0BA5  0B89               	decfsz	9,f
 17372  0BA6  2BA2               	goto	u5205
 17373  0BA7  0852               	movf	??___fttol,w
 17374  0BA8  00D5               	movwf	??___fttol+3
 17375  0BA9  0855               	movf	??___fttol+3,w
 17376  0BAA  00D6               	movwf	___fttol@sign1
 17377  0BAB  17CF               	bsf	___fttol@f1+1,7
 17378  0BAC  30FF               	movlw	255
 17379  0BAD  05CE               	andwf	___fttol@f1,f
 17380  0BAE  30FF               	movlw	255
 17381  0BAF  05CF               	andwf	___fttol@f1+1,f
 17382  0BB0  3000               	movlw	0
 17383  0BB1  05D0               	andwf	___fttol@f1+2,f
 17384  0BB2  084E               	movf	___fttol@f1,w
 17385  0BB3  00D7               	movwf	___fttol@lval
 17386  0BB4  084F               	movf	___fttol@f1+1,w
 17387  0BB5  00D8               	movwf	___fttol@lval+1
 17388  0BB6  0850               	movf	___fttol@f1+2,w
 17389  0BB7  00D9               	movwf	___fttol@lval+2
 17390  0BB8  01DA               	clrf	___fttol@lval+3
 17391  0BB9  308E               	movlw	142
 17392  0BBA  02DB               	subwf	___fttol@exp1,f
 17393  0BBB  1FDB               	btfss	___fttol@exp1,7
 17394  0BBC  2BD9               	goto	l6200
 17395  0BBD  085B               	movf	___fttol@exp1,w
 17396  0BBE  3A80               	xorlw	128
 17397  0BBF  3E8F               	addlw	143
 17398  0BC0  1803               	skipnc
 17399  0BC1  2BCB               	goto	l6198
 17400  0BC2  3000               	movlw	0
 17401  0BC3  00D1               	movwf	?___fttol+3
 17402  0BC4  3000               	movlw	0
 17403  0BC5  00D0               	movwf	?___fttol+2
 17404  0BC6  3000               	movlw	0
 17405  0BC7  00CF               	movwf	?___fttol+1
 17406  0BC8  3000               	movlw	0
 17407  0BC9  00CE               	movwf	?___fttol
 17408  0BCA  0008               	return
 17409  0BCB                     l6198:	
 17410  0BCB  3001               	movlw	1
 17411  0BCC                     u5235:	
 17412  0BCC  36DA               	lsrf	___fttol@lval+3,f
 17413  0BCD  0CD9               	rrf	___fttol@lval+2,f
 17414  0BCE  0CD8               	rrf	___fttol@lval+1,f
 17415  0BCF  0CD7               	rrf	___fttol@lval,f
 17416  0BD0  0B89               	decfsz	9,f
 17417  0BD1  2BCC               	goto	u5235
 17418  0BD2  3001               	movlw	1
 17419  0BD3  00D2               	movwf	??___fttol
 17420  0BD4  0852               	movf	??___fttol,w
 17421  0BD5  07DB               	addwf	___fttol@exp1,f
 17422  0BD6  1903               	btfsc	3,2
 17423  0BD7  2BF2               	goto	l6210
 17424  0BD8  2BCB               	goto	l6198
 17425  0BD9                     l6200:	
 17426  0BD9  3018               	movlw	24
 17427  0BDA  025B               	subwf	___fttol@exp1,w
 17428  0BDB  1C03               	skipc
 17429  0BDC  2BEF               	goto	l6208
 17430  0BDD  3000               	movlw	0
 17431  0BDE  00D1               	movwf	?___fttol+3
 17432  0BDF  3000               	movlw	0
 17433  0BE0  00D0               	movwf	?___fttol+2
 17434  0BE1  3000               	movlw	0
 17435  0BE2  00CF               	movwf	?___fttol+1
 17436  0BE3  3000               	movlw	0
 17437  0BE4  00CE               	movwf	?___fttol
 17438  0BE5  0008               	return
 17439  0BE6                     l6206:	
 17440  0BE6  3001               	movlw	1
 17441  0BE7                     u5265:	
 17442  0BE7  35D7               	lslf	___fttol@lval,f
 17443  0BE8  0DD8               	rlf	___fttol@lval+1,f
 17444  0BE9  0DD9               	rlf	___fttol@lval+2,f
 17445  0BEA  0DDA               	rlf	___fttol@lval+3,f
 17446  0BEB  0B89               	decfsz	9,f
 17447  0BEC  2BE7               	goto	u5265
 17448  0BED  3001               	movlw	1
 17449  0BEE  02DB               	subwf	___fttol@exp1,f
 17450  0BEF                     l6208:	
 17451  0BEF  08DB               	movf	___fttol@exp1,f
 17452  0BF0  1D03               	skipz
 17453  0BF1  2BE6               	goto	l6206
 17454  0BF2                     l6210:	
 17455  0BF2  0856               	movf	___fttol@sign1,w
 17456  0BF3  1903               	btfsc	3,2
 17457  0BF4  2C00               	goto	l6214
 17458  0BF5  09D7               	comf	___fttol@lval,f
 17459  0BF6  09D8               	comf	___fttol@lval+1,f
 17460  0BF7  09D9               	comf	___fttol@lval+2,f
 17461  0BF8  09DA               	comf	___fttol@lval+3,f
 17462  0BF9  0AD7               	incf	___fttol@lval,f
 17463  0BFA  1903               	skipnz
 17464  0BFB  0AD8               	incf	___fttol@lval+1,f
 17465  0BFC  1903               	skipnz
 17466  0BFD  0AD9               	incf	___fttol@lval+2,f
 17467  0BFE  1903               	skipnz
 17468  0BFF  0ADA               	incf	___fttol@lval+3,f
 17469  0C00                     l6214:	
 17470  0C00  085A               	movf	___fttol@lval+3,w
 17471  0C01  00D1               	movwf	?___fttol+3
 17472  0C02  0859               	movf	___fttol@lval+2,w
 17473  0C03  00D0               	movwf	?___fttol+2
 17474  0C04  0858               	movf	___fttol@lval+1,w
 17475  0C05  00CF               	movwf	?___fttol+1
 17476  0C06  0857               	movf	___fttol@lval,w
 17477  0C07  00CE               	movwf	?___fttol
 17478  0C08  0008               	return
 17479  0C09                     __end_of___fttol:	
 17480                           
 17481                           	psect	text122
 17482  1A53                     __ptext122:	
 17483 ;; *************** function ___ftneg *****************
 17484 ;; Defined at:
 17485 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17486 ;; Parameters:    Size  Location     Type
 17487 ;;  f1              3   30[BANK0 ] float 
 17488 ;; Auto vars:     Size  Location     Type
 17489 ;;		None
 17490 ;; Return value:  Size  Location     Type
 17491 ;;                  3   30[BANK0 ] float 
 17492 ;; Registers used:
 17493 ;;		wreg
 17494 ;; Tracked objects:
 17495 ;;		On entry : 0/0
 17496 ;;		On exit  : 0/0
 17497 ;;		Unchanged: 0/0
 17498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17499 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17502 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17503 ;;Total ram usage:        3 bytes
 17504 ;; Hardware stack levels used:    1
 17505 ;; Hardware stack levels required when called:    5
 17506 ;; This function calls:
 17507 ;;		Nothing
 17508 ;; This function is called by:
 17509 ;;		_getDimmerLights_PercentToValue
 17510 ;;		_getDimmerLights_ValueToPercent
 17511 ;; This function uses a non-reentrant model
 17512 ;;
 17513                           
 17514                           
 17515                           ;psect for function ___ftneg
 17516  1A53                     ___ftneg:	
 17517                           
 17518                           ;incstack = 0
 17519                           ; Regs used in ___ftneg: [wreg]
 17520  1A53  0020               	movlb	0	; select bank0
 17521  1A54  0840               	movf	___ftneg@f1+2,w
 17522  1A55  043F               	iorwf	___ftneg@f1+1,w
 17523  1A56  043E               	iorwf	___ftneg@f1,w
 17524  1A57  1903               	skipnz
 17525  1A58  0008               	return
 17526  1A59  3080               	movlw	128
 17527  1A5A  06C0               	xorwf	___ftneg@f1+2,f
 17528  1A5B  0008               	return
 17529  1A5C                     __end_of___ftneg:	
 17530                           
 17531                           	psect	text123
 17532  0DCB                     __ptext123:	
 17533 ;; *************** function ___ftmul *****************
 17534 ;; Defined at:
 17535 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17536 ;; Parameters:    Size  Location     Type
 17537 ;;  f1              3   14[BANK0 ] float 
 17538 ;;  f2              3   17[BANK0 ] float 
 17539 ;; Auto vars:     Size  Location     Type
 17540 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17541 ;;  sign            1   29[BANK0 ] unsigned char 
 17542 ;;  cntr            1   28[BANK0 ] unsigned char 
 17543 ;;  exp             1   24[BANK0 ] unsigned char 
 17544 ;; Return value:  Size  Location     Type
 17545 ;;                  3   14[BANK0 ] float 
 17546 ;; Registers used:
 17547 ;;		wreg, status,2, status,0, pclath, cstack
 17548 ;; Tracked objects:
 17549 ;;		On entry : 0/0
 17550 ;;		On exit  : 0/0
 17551 ;;		Unchanged: 0/0
 17552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17553 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17554 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17555 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;Total ram usage:       16 bytes
 17558 ;; Hardware stack levels used:    1
 17559 ;; Hardware stack levels required when called:    6
 17560 ;; This function calls:
 17561 ;;		___ftpack
 17562 ;; This function is called by:
 17563 ;;		_getDimmerLights_PercentToValue
 17564 ;; This function uses a non-reentrant model
 17565 ;;
 17566                           
 17567                           
 17568                           ;psect for function ___ftmul
 17569  0DCB                     ___ftmul:	
 17570                           
 17571                           ;incstack = 0
 17572                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17573  0DCB  0020               	movlb	0	; select bank0
 17574  0DCC  082E               	movf	___ftmul@f1,w
 17575  0DCD  00B4               	movwf	??___ftmul
 17576  0DCE  082F               	movf	___ftmul@f1+1,w
 17577  0DCF  00B5               	movwf	??___ftmul+1
 17578  0DD0  0830               	movf	___ftmul@f1+2,w
 17579  0DD1  00B6               	movwf	??___ftmul+2
 17580  0DD2  1003               	clrc
 17581  0DD3  0D35               	rlf	??___ftmul+1,w
 17582  0DD4  0D36               	rlf	??___ftmul+2,w
 17583  0DD5  00B7               	movwf	??___ftmul+3
 17584  0DD6  0837               	movf	??___ftmul+3,w
 17585  0DD7  00B8               	movwf	___ftmul@exp
 17586  0DD8  08B8               	movf	___ftmul@exp,f
 17587  0DD9  1D03               	skipz
 17588  0DDA  2DE2               	goto	l6122
 17589  0DDB  3000               	movlw	0
 17590  0DDC  00AE               	movwf	?___ftmul
 17591  0DDD  3000               	movlw	0
 17592  0DDE  00AF               	movwf	?___ftmul+1
 17593  0DDF  3000               	movlw	0
 17594  0DE0  00B0               	movwf	?___ftmul+2
 17595  0DE1  0008               	return
 17596  0DE2                     l6122:	
 17597  0DE2  0831               	movf	___ftmul@f2,w
 17598  0DE3  00B4               	movwf	??___ftmul
 17599  0DE4  0832               	movf	___ftmul@f2+1,w
 17600  0DE5  00B5               	movwf	??___ftmul+1
 17601  0DE6  0833               	movf	___ftmul@f2+2,w
 17602  0DE7  00B6               	movwf	??___ftmul+2
 17603  0DE8  1003               	clrc
 17604  0DE9  0D35               	rlf	??___ftmul+1,w
 17605  0DEA  0D36               	rlf	??___ftmul+2,w
 17606  0DEB  00B7               	movwf	??___ftmul+3
 17607  0DEC  0837               	movf	??___ftmul+3,w
 17608  0DED  00BD               	movwf	___ftmul@sign
 17609  0DEE  08BD               	movf	___ftmul@sign,f
 17610  0DEF  1D03               	skipz
 17611  0DF0  2DF8               	goto	l6128
 17612  0DF1  3000               	movlw	0
 17613  0DF2  00AE               	movwf	?___ftmul
 17614  0DF3  3000               	movlw	0
 17615  0DF4  00AF               	movwf	?___ftmul+1
 17616  0DF5  3000               	movlw	0
 17617  0DF6  00B0               	movwf	?___ftmul+2
 17618  0DF7  0008               	return
 17619  0DF8                     l6128:	
 17620  0DF8  083D               	movf	___ftmul@sign,w
 17621  0DF9  3E7B               	addlw	123
 17622  0DFA  00B4               	movwf	??___ftmul
 17623  0DFB  0834               	movf	??___ftmul,w
 17624  0DFC  07B8               	addwf	___ftmul@exp,f
 17625  0DFD  082E               	movf	___ftmul@f1,w
 17626  0DFE  00B4               	movwf	??___ftmul
 17627  0DFF  082F               	movf	___ftmul@f1+1,w
 17628  0E00  00B5               	movwf	??___ftmul+1
 17629  0E01  0830               	movf	___ftmul@f1+2,w
 17630  0E02  00B6               	movwf	??___ftmul+2
 17631  0E03  3010               	movlw	16
 17632  0E04                     u5085:	
 17633  0E04  36B6               	lsrf	??___ftmul+2,f
 17634  0E05  0CB5               	rrf	??___ftmul+1,f
 17635  0E06  0CB4               	rrf	??___ftmul,f
 17636  0E07  0B89               	decfsz	9,f
 17637  0E08  2E04               	goto	u5085
 17638  0E09  0834               	movf	??___ftmul,w
 17639  0E0A  00B7               	movwf	??___ftmul+3
 17640  0E0B  0837               	movf	??___ftmul+3,w
 17641  0E0C  00BD               	movwf	___ftmul@sign
 17642  0E0D  0831               	movf	___ftmul@f2,w
 17643  0E0E  00B4               	movwf	??___ftmul
 17644  0E0F  0832               	movf	___ftmul@f2+1,w
 17645  0E10  00B5               	movwf	??___ftmul+1
 17646  0E11  0833               	movf	___ftmul@f2+2,w
 17647  0E12  00B6               	movwf	??___ftmul+2
 17648  0E13  3010               	movlw	16
 17649  0E14                     u5095:	
 17650  0E14  36B6               	lsrf	??___ftmul+2,f
 17651  0E15  0CB5               	rrf	??___ftmul+1,f
 17652  0E16  0CB4               	rrf	??___ftmul,f
 17653  0E17  0B89               	decfsz	9,f
 17654  0E18  2E14               	goto	u5095
 17655  0E19  0834               	movf	??___ftmul,w
 17656  0E1A  00B7               	movwf	??___ftmul+3
 17657  0E1B  0837               	movf	??___ftmul+3,w
 17658  0E1C  06BD               	xorwf	___ftmul@sign,f
 17659  0E1D  3080               	movlw	128
 17660  0E1E  00B4               	movwf	??___ftmul
 17661  0E1F  0834               	movf	??___ftmul,w
 17662  0E20  05BD               	andwf	___ftmul@sign,f
 17663  0E21  17AF               	bsf	___ftmul@f1+1,7
 17664  0E22  17B2               	bsf	___ftmul@f2+1,7
 17665  0E23  30FF               	movlw	255
 17666  0E24  05B1               	andwf	___ftmul@f2,f
 17667  0E25  30FF               	movlw	255
 17668  0E26  05B2               	andwf	___ftmul@f2+1,f
 17669  0E27  3000               	movlw	0
 17670  0E28  05B3               	andwf	___ftmul@f2+2,f
 17671  0E29  3000               	movlw	0
 17672  0E2A  00B9               	movwf	___ftmul@f3_as_product
 17673  0E2B  3000               	movlw	0
 17674  0E2C  00BA               	movwf	___ftmul@f3_as_product+1
 17675  0E2D  3000               	movlw	0
 17676  0E2E  00BB               	movwf	___ftmul@f3_as_product+2
 17677  0E2F  3007               	movlw	7
 17678  0E30  00B4               	movwf	??___ftmul
 17679  0E31  0834               	movf	??___ftmul,w
 17680  0E32  00BC               	movwf	___ftmul@cntr
 17681  0E33                     l6140:	
 17682  0E33  1C2E               	btfss	___ftmul@f1,0
 17683  0E34  2E3B               	goto	l6144
 17684  0E35  0831               	movf	___ftmul@f2,w
 17685  0E36  07B9               	addwf	___ftmul@f3_as_product,f
 17686  0E37  0832               	movf	___ftmul@f2+1,w
 17687  0E38  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17688  0E39  0833               	movf	___ftmul@f2+2,w
 17689  0E3A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17690  0E3B                     l6144:	
 17691  0E3B  3001               	movlw	1
 17692  0E3C                     u5115:	
 17693  0E3C  36B0               	lsrf	___ftmul@f1+2,f
 17694  0E3D  0CAF               	rrf	___ftmul@f1+1,f
 17695  0E3E  0CAE               	rrf	___ftmul@f1,f
 17696  0E3F  0B89               	decfsz	9,f
 17697  0E40  2E3C               	goto	u5115
 17698  0E41  3001               	movlw	1
 17699  0E42                     u5125:	
 17700  0E42  35B1               	lslf	___ftmul@f2,f
 17701  0E43  0DB2               	rlf	___ftmul@f2+1,f
 17702  0E44  0DB3               	rlf	___ftmul@f2+2,f
 17703  0E45  0B89               	decfsz	9,f
 17704  0E46  2E42               	goto	u5125
 17705  0E47  3001               	movlw	1
 17706  0E48  02BC               	subwf	___ftmul@cntr,f
 17707  0E49  1D03               	btfss	3,2
 17708  0E4A  2E33               	goto	l6140
 17709  0E4B  3009               	movlw	9
 17710  0E4C  00B4               	movwf	??___ftmul
 17711  0E4D  0834               	movf	??___ftmul,w
 17712  0E4E  00BC               	movwf	___ftmul@cntr
 17713  0E4F                     l6152:	
 17714  0E4F  1C2E               	btfss	___ftmul@f1,0
 17715  0E50  2E57               	goto	l6156
 17716  0E51  0831               	movf	___ftmul@f2,w
 17717  0E52  07B9               	addwf	___ftmul@f3_as_product,f
 17718  0E53  0832               	movf	___ftmul@f2+1,w
 17719  0E54  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17720  0E55  0833               	movf	___ftmul@f2+2,w
 17721  0E56  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17722  0E57                     l6156:	
 17723  0E57  3001               	movlw	1
 17724  0E58                     u5155:	
 17725  0E58  36B0               	lsrf	___ftmul@f1+2,f
 17726  0E59  0CAF               	rrf	___ftmul@f1+1,f
 17727  0E5A  0CAE               	rrf	___ftmul@f1,f
 17728  0E5B  0B89               	decfsz	9,f
 17729  0E5C  2E58               	goto	u5155
 17730  0E5D  3001               	movlw	1
 17731  0E5E                     u5165:	
 17732  0E5E  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17733  0E5F  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17734  0E60  0CB9               	rrf	___ftmul@f3_as_product,f
 17735  0E61  0B89               	decfsz	9,f
 17736  0E62  2E5E               	goto	u5165
 17737  0E63  3001               	movlw	1
 17738  0E64  02BC               	subwf	___ftmul@cntr,f
 17739  0E65  1D03               	btfss	3,2
 17740  0E66  2E4F               	goto	l6152
 17741  0E67  0839               	movf	___ftmul@f3_as_product,w
 17742  0E68  00A0               	movwf	___ftpack@arg
 17743  0E69  083A               	movf	___ftmul@f3_as_product+1,w
 17744  0E6A  00A1               	movwf	___ftpack@arg+1
 17745  0E6B  083B               	movf	___ftmul@f3_as_product+2,w
 17746  0E6C  00A2               	movwf	___ftpack@arg+2
 17747  0E6D  0838               	movf	___ftmul@exp,w
 17748  0E6E  00B4               	movwf	??___ftmul
 17749  0E6F  0834               	movf	??___ftmul,w
 17750  0E70  00A3               	movwf	___ftpack@exp
 17751  0E71  083D               	movf	___ftmul@sign,w
 17752  0E72  00B5               	movwf	??___ftmul+1
 17753  0E73  0835               	movf	??___ftmul+1,w
 17754  0E74  00A4               	movwf	___ftpack@sign
 17755  0E75  3195  259E         	fcall	___ftpack
 17756  0E77  0020               	movlb	0	; select bank0
 17757  0E78  0820               	movf	?___ftpack,w
 17758  0E79  00AE               	movwf	?___ftmul
 17759  0E7A  0821               	movf	?___ftpack+1,w
 17760  0E7B  00AF               	movwf	?___ftmul+1
 17761  0E7C  0822               	movf	?___ftpack+2,w
 17762  0E7D  00B0               	movwf	?___ftmul+2
 17763  0E7E  0008               	return
 17764  0E7F                     __end_of___ftmul:	
 17765                           
 17766                           	psect	text124
 17767  0D22                     __ptext124:	
 17768 ;; *************** function ___ftdiv *****************
 17769 ;; Defined at:
 17770 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17771 ;; Parameters:    Size  Location     Type
 17772 ;;  f2              3   14[BANK0 ] float 
 17773 ;;  f1              3   17[BANK0 ] float 
 17774 ;; Auto vars:     Size  Location     Type
 17775 ;;  f3              3   25[BANK0 ] float 
 17776 ;;  sign            1   29[BANK0 ] unsigned char 
 17777 ;;  exp             1   28[BANK0 ] unsigned char 
 17778 ;;  cntr            1   24[BANK0 ] unsigned char 
 17779 ;; Return value:  Size  Location     Type
 17780 ;;                  3   14[BANK0 ] float 
 17781 ;; Registers used:
 17782 ;;		wreg, status,2, status,0, pclath, cstack
 17783 ;; Tracked objects:
 17784 ;;		On entry : 0/0
 17785 ;;		On exit  : 0/0
 17786 ;;		Unchanged: 0/0
 17787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17788 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17789 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17790 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17791 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17792 ;;Total ram usage:       16 bytes
 17793 ;; Hardware stack levels used:    1
 17794 ;; Hardware stack levels required when called:    6
 17795 ;; This function calls:
 17796 ;;		___ftpack
 17797 ;; This function is called by:
 17798 ;;		_getDimmerLights_PercentToValue
 17799 ;;		_getDimmerLights_ValueToPercent
 17800 ;; This function uses a non-reentrant model
 17801 ;;
 17802                           
 17803                           
 17804                           ;psect for function ___ftdiv
 17805  0D22                     ___ftdiv:	
 17806                           
 17807                           ;incstack = 0
 17808                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17809  0D22  0020               	movlb	0	; select bank0
 17810  0D23  0831               	movf	___ftdiv@f1,w
 17811  0D24  00B4               	movwf	??___ftdiv
 17812  0D25  0832               	movf	___ftdiv@f1+1,w
 17813  0D26  00B5               	movwf	??___ftdiv+1
 17814  0D27  0833               	movf	___ftdiv@f1+2,w
 17815  0D28  00B6               	movwf	??___ftdiv+2
 17816  0D29  1003               	clrc
 17817  0D2A  0D35               	rlf	??___ftdiv+1,w
 17818  0D2B  0D36               	rlf	??___ftdiv+2,w
 17819  0D2C  00B7               	movwf	??___ftdiv+3
 17820  0D2D  0837               	movf	??___ftdiv+3,w
 17821  0D2E  00BC               	movwf	___ftdiv@exp
 17822  0D2F  08BC               	movf	___ftdiv@exp,f
 17823  0D30  1D03               	skipz
 17824  0D31  2D39               	goto	l6080
 17825  0D32  3000               	movlw	0
 17826  0D33  00AE               	movwf	?___ftdiv
 17827  0D34  3000               	movlw	0
 17828  0D35  00AF               	movwf	?___ftdiv+1
 17829  0D36  3000               	movlw	0
 17830  0D37  00B0               	movwf	?___ftdiv+2
 17831  0D38  0008               	return
 17832  0D39                     l6080:	
 17833  0D39  082E               	movf	___ftdiv@f2,w
 17834  0D3A  00B4               	movwf	??___ftdiv
 17835  0D3B  082F               	movf	___ftdiv@f2+1,w
 17836  0D3C  00B5               	movwf	??___ftdiv+1
 17837  0D3D  0830               	movf	___ftdiv@f2+2,w
 17838  0D3E  00B6               	movwf	??___ftdiv+2
 17839  0D3F  1003               	clrc
 17840  0D40  0D35               	rlf	??___ftdiv+1,w
 17841  0D41  0D36               	rlf	??___ftdiv+2,w
 17842  0D42  00B7               	movwf	??___ftdiv+3
 17843  0D43  0837               	movf	??___ftdiv+3,w
 17844  0D44  00BD               	movwf	___ftdiv@sign
 17845  0D45  08BD               	movf	___ftdiv@sign,f
 17846  0D46  1D03               	skipz
 17847  0D47  2D4F               	goto	l6086
 17848  0D48  3000               	movlw	0
 17849  0D49  00AE               	movwf	?___ftdiv
 17850  0D4A  3000               	movlw	0
 17851  0D4B  00AF               	movwf	?___ftdiv+1
 17852  0D4C  3000               	movlw	0
 17853  0D4D  00B0               	movwf	?___ftdiv+2
 17854  0D4E  0008               	return
 17855  0D4F                     l6086:	
 17856  0D4F  3000               	movlw	0
 17857  0D50  00B9               	movwf	___ftdiv@f3
 17858  0D51  3000               	movlw	0
 17859  0D52  00BA               	movwf	___ftdiv@f3+1
 17860  0D53  3000               	movlw	0
 17861  0D54  00BB               	movwf	___ftdiv@f3+2
 17862  0D55  3089               	movlw	137
 17863  0D56  073D               	addwf	___ftdiv@sign,w
 17864  0D57  00B4               	movwf	??___ftdiv
 17865  0D58  0834               	movf	??___ftdiv,w
 17866  0D59  02BC               	subwf	___ftdiv@exp,f
 17867  0D5A  0831               	movf	___ftdiv@f1,w
 17868  0D5B  00B4               	movwf	??___ftdiv
 17869  0D5C  0832               	movf	___ftdiv@f1+1,w
 17870  0D5D  00B5               	movwf	??___ftdiv+1
 17871  0D5E  0833               	movf	___ftdiv@f1+2,w
 17872  0D5F  00B6               	movwf	??___ftdiv+2
 17873  0D60  3010               	movlw	16
 17874  0D61                     u5005:	
 17875  0D61  36B6               	lsrf	??___ftdiv+2,f
 17876  0D62  0CB5               	rrf	??___ftdiv+1,f
 17877  0D63  0CB4               	rrf	??___ftdiv,f
 17878  0D64  0B89               	decfsz	9,f
 17879  0D65  2D61               	goto	u5005
 17880  0D66  0834               	movf	??___ftdiv,w
 17881  0D67  00B7               	movwf	??___ftdiv+3
 17882  0D68  0837               	movf	??___ftdiv+3,w
 17883  0D69  00BD               	movwf	___ftdiv@sign
 17884  0D6A  082E               	movf	___ftdiv@f2,w
 17885  0D6B  00B4               	movwf	??___ftdiv
 17886  0D6C  082F               	movf	___ftdiv@f2+1,w
 17887  0D6D  00B5               	movwf	??___ftdiv+1
 17888  0D6E  0830               	movf	___ftdiv@f2+2,w
 17889  0D6F  00B6               	movwf	??___ftdiv+2
 17890  0D70  3010               	movlw	16
 17891  0D71                     u5015:	
 17892  0D71  36B6               	lsrf	??___ftdiv+2,f
 17893  0D72  0CB5               	rrf	??___ftdiv+1,f
 17894  0D73  0CB4               	rrf	??___ftdiv,f
 17895  0D74  0B89               	decfsz	9,f
 17896  0D75  2D71               	goto	u5015
 17897  0D76  0834               	movf	??___ftdiv,w
 17898  0D77  00B7               	movwf	??___ftdiv+3
 17899  0D78  0837               	movf	??___ftdiv+3,w
 17900  0D79  06BD               	xorwf	___ftdiv@sign,f
 17901  0D7A  3080               	movlw	128
 17902  0D7B  00B4               	movwf	??___ftdiv
 17903  0D7C  0834               	movf	??___ftdiv,w
 17904  0D7D  05BD               	andwf	___ftdiv@sign,f
 17905  0D7E  17B2               	bsf	___ftdiv@f1+1,7
 17906  0D7F  30FF               	movlw	255
 17907  0D80  05B1               	andwf	___ftdiv@f1,f
 17908  0D81  30FF               	movlw	255
 17909  0D82  05B2               	andwf	___ftdiv@f1+1,f
 17910  0D83  3000               	movlw	0
 17911  0D84  05B3               	andwf	___ftdiv@f1+2,f
 17912  0D85  17AF               	bsf	___ftdiv@f2+1,7
 17913  0D86  30FF               	movlw	255
 17914  0D87  05AE               	andwf	___ftdiv@f2,f
 17915  0D88  30FF               	movlw	255
 17916  0D89  05AF               	andwf	___ftdiv@f2+1,f
 17917  0D8A  3000               	movlw	0
 17918  0D8B  05B0               	andwf	___ftdiv@f2+2,f
 17919  0D8C  3018               	movlw	24
 17920  0D8D  00B4               	movwf	??___ftdiv
 17921  0D8E  0834               	movf	??___ftdiv,w
 17922  0D8F  00B8               	movwf	___ftdiv@cntr
 17923  0D90                     l6100:	
 17924  0D90  3001               	movlw	1
 17925  0D91                     u5025:	
 17926  0D91  35B9               	lslf	___ftdiv@f3,f
 17927  0D92  0DBA               	rlf	___ftdiv@f3+1,f
 17928  0D93  0DBB               	rlf	___ftdiv@f3+2,f
 17929  0D94  0B89               	decfsz	9,f
 17930  0D95  2D91               	goto	u5025
 17931  0D96  0830               	movf	___ftdiv@f2+2,w
 17932  0D97  0233               	subwf	___ftdiv@f1+2,w
 17933  0D98  1D03               	skipz
 17934  0D99  2DA0               	goto	u5035
 17935  0D9A  082F               	movf	___ftdiv@f2+1,w
 17936  0D9B  0232               	subwf	___ftdiv@f1+1,w
 17937  0D9C  1D03               	skipz
 17938  0D9D  2DA0               	goto	u5035
 17939  0D9E  082E               	movf	___ftdiv@f2,w
 17940  0D9F  0231               	subwf	___ftdiv@f1,w
 17941  0DA0                     u5035:	
 17942  0DA0  1C03               	skipc
 17943  0DA1  2DA9               	goto	l6108
 17944  0DA2  082E               	movf	___ftdiv@f2,w
 17945  0DA3  02B1               	subwf	___ftdiv@f1,f
 17946  0DA4  082F               	movf	___ftdiv@f2+1,w
 17947  0DA5  3BB2               	subwfb	___ftdiv@f1+1,f
 17948  0DA6  0830               	movf	___ftdiv@f2+2,w
 17949  0DA7  3BB3               	subwfb	___ftdiv@f1+2,f
 17950  0DA8  1439               	bsf	___ftdiv@f3,0
 17951  0DA9                     l6108:	
 17952  0DA9  3001               	movlw	1
 17953  0DAA                     u5045:	
 17954  0DAA  35B1               	lslf	___ftdiv@f1,f
 17955  0DAB  0DB2               	rlf	___ftdiv@f1+1,f
 17956  0DAC  0DB3               	rlf	___ftdiv@f1+2,f
 17957  0DAD  0B89               	decfsz	9,f
 17958  0DAE  2DAA               	goto	u5045
 17959  0DAF  3001               	movlw	1
 17960  0DB0  02B8               	subwf	___ftdiv@cntr,f
 17961  0DB1  1D03               	btfss	3,2
 17962  0DB2  2D90               	goto	l6100
 17963  0DB3  0839               	movf	___ftdiv@f3,w
 17964  0DB4  00A0               	movwf	___ftpack@arg
 17965  0DB5  083A               	movf	___ftdiv@f3+1,w
 17966  0DB6  00A1               	movwf	___ftpack@arg+1
 17967  0DB7  083B               	movf	___ftdiv@f3+2,w
 17968  0DB8  00A2               	movwf	___ftpack@arg+2
 17969  0DB9  083C               	movf	___ftdiv@exp,w
 17970  0DBA  00B4               	movwf	??___ftdiv
 17971  0DBB  0834               	movf	??___ftdiv,w
 17972  0DBC  00A3               	movwf	___ftpack@exp
 17973  0DBD  083D               	movf	___ftdiv@sign,w
 17974  0DBE  00B5               	movwf	??___ftdiv+1
 17975  0DBF  0835               	movf	??___ftdiv+1,w
 17976  0DC0  00A4               	movwf	___ftpack@sign
 17977  0DC1  3195  259E         	fcall	___ftpack
 17978  0DC3  0020               	movlb	0	; select bank0
 17979  0DC4  0820               	movf	?___ftpack,w
 17980  0DC5  00AE               	movwf	?___ftdiv
 17981  0DC6  0821               	movf	?___ftpack+1,w
 17982  0DC7  00AF               	movwf	?___ftdiv+1
 17983  0DC8  0822               	movf	?___ftpack+2,w
 17984  0DC9  00B0               	movwf	?___ftdiv+2
 17985  0DCA  0008               	return
 17986  0DCB                     __end_of___ftdiv:	
 17987                           
 17988                           	psect	text125
 17989  0389                     __ptext125:	
 17990 ;; *************** function ___ftadd *****************
 17991 ;; Defined at:
 17992 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17993 ;; Parameters:    Size  Location     Type
 17994 ;;  f1              3   33[BANK0 ] float 
 17995 ;;  f2              3   36[BANK0 ] float 
 17996 ;; Auto vars:     Size  Location     Type
 17997 ;;  exp1            1   45[BANK0 ] unsigned char 
 17998 ;;  exp2            1   44[BANK0 ] unsigned char 
 17999 ;;  sign            1   43[BANK0 ] unsigned char 
 18000 ;; Return value:  Size  Location     Type
 18001 ;;                  3   33[BANK0 ] float 
 18002 ;; Registers used:
 18003 ;;		wreg, status,2, status,0, pclath, cstack
 18004 ;; Tracked objects:
 18005 ;;		On entry : 0/0
 18006 ;;		On exit  : 0/0
 18007 ;;		Unchanged: 0/0
 18008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18009 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18010 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18011 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18012 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;Total ram usage:       13 bytes
 18014 ;; Hardware stack levels used:    1
 18015 ;; Hardware stack levels required when called:    6
 18016 ;; This function calls:
 18017 ;;		___ftpack
 18018 ;; This function is called by:
 18019 ;;		_getDimmerLights_PercentToValue
 18020 ;;		_getDimmerLights_ValueToPercent
 18021 ;; This function uses a non-reentrant model
 18022 ;;
 18023                           
 18024                           
 18025                           ;psect for function ___ftadd
 18026  0389                     ___ftadd:	
 18027                           
 18028                           ;incstack = 0
 18029                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18030  0389  0020               	movlb	0	; select bank0
 18031  038A  0841               	movf	___ftadd@f1,w
 18032  038B  00C7               	movwf	??___ftadd
 18033  038C  0842               	movf	___ftadd@f1+1,w
 18034  038D  00C8               	movwf	??___ftadd+1
 18035  038E  0843               	movf	___ftadd@f1+2,w
 18036  038F  00C9               	movwf	??___ftadd+2
 18037  0390  1003               	clrc
 18038  0391  0D48               	rlf	??___ftadd+1,w
 18039  0392  0D49               	rlf	??___ftadd+2,w
 18040  0393  00CA               	movwf	??___ftadd+3
 18041  0394  084A               	movf	??___ftadd+3,w
 18042  0395  00CD               	movwf	___ftadd@exp1
 18043  0396  0844               	movf	___ftadd@f2,w
 18044  0397  00C7               	movwf	??___ftadd
 18045  0398  0845               	movf	___ftadd@f2+1,w
 18046  0399  00C8               	movwf	??___ftadd+1
 18047  039A  0846               	movf	___ftadd@f2+2,w
 18048  039B  00C9               	movwf	??___ftadd+2
 18049  039C  1003               	clrc
 18050  039D  0D48               	rlf	??___ftadd+1,w
 18051  039E  0D49               	rlf	??___ftadd+2,w
 18052  039F  00CA               	movwf	??___ftadd+3
 18053  03A0  084A               	movf	??___ftadd+3,w
 18054  03A1  00CC               	movwf	___ftadd@exp2
 18055  03A2  084D               	movf	___ftadd@exp1,w
 18056  03A3  1903               	btfsc	3,2
 18057  03A4  2BB1               	goto	l6010
 18058  03A5  084C               	movf	___ftadd@exp2,w
 18059  03A6  024D               	subwf	___ftadd@exp1,w
 18060  03A7  1803               	skipnc
 18061  03A8  2BB8               	goto	l6014
 18062  03A9  034D               	decf	___ftadd@exp1,w
 18063  03AA  3AFF               	xorlw	255
 18064  03AB  074C               	addwf	___ftadd@exp2,w
 18065  03AC  00C7               	movwf	??___ftadd
 18066  03AD  3019               	movlw	25
 18067  03AE  0247               	subwf	??___ftadd,w
 18068  03AF  1C03               	skipc
 18069  03B0  2BB8               	goto	l6014
 18070  03B1                     l6010:	
 18071  03B1  0844               	movf	___ftadd@f2,w
 18072  03B2  00C1               	movwf	?___ftadd
 18073  03B3  0845               	movf	___ftadd@f2+1,w
 18074  03B4  00C2               	movwf	?___ftadd+1
 18075  03B5  0846               	movf	___ftadd@f2+2,w
 18076  03B6  00C3               	movwf	?___ftadd+2
 18077  03B7  0008               	return
 18078  03B8                     l6014:	
 18079  03B8  084C               	movf	___ftadd@exp2,w
 18080  03B9  1903               	btfsc	3,2
 18081  03BA  0008               	return
 18082  03BB  084D               	movf	___ftadd@exp1,w
 18083  03BC  024C               	subwf	___ftadd@exp2,w
 18084  03BD  1803               	skipnc
 18085  03BE  2BC7               	goto	l6020
 18086  03BF  034C               	decf	___ftadd@exp2,w
 18087  03C0  3AFF               	xorlw	255
 18088  03C1  074D               	addwf	___ftadd@exp1,w
 18089  03C2  00C7               	movwf	??___ftadd
 18090  03C3  3019               	movlw	25
 18091  03C4  0247               	subwf	??___ftadd,w
 18092  03C5  1803               	btfsc	3,0
 18093  03C6  0008               	return
 18094  03C7                     l6020:	
 18095  03C7  3006               	movlw	6
 18096  03C8  00C7               	movwf	??___ftadd
 18097  03C9  0847               	movf	??___ftadd,w
 18098  03CA  00CB               	movwf	___ftadd@sign
 18099  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 18100  03CC  17CB               	bsf	___ftadd@sign,7
 18101  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 18102  03CE  174B               	bsf	___ftadd@sign,6
 18103  03CF  17C2               	bsf	___ftadd@f1+1,7
 18104  03D0  30FF               	movlw	255
 18105  03D1  05C1               	andwf	___ftadd@f1,f
 18106  03D2  30FF               	movlw	255
 18107  03D3  05C2               	andwf	___ftadd@f1+1,f
 18108  03D4  3000               	movlw	0
 18109  03D5  05C3               	andwf	___ftadd@f1+2,f
 18110  03D6  17C5               	bsf	___ftadd@f2+1,7
 18111  03D7  30FF               	movlw	255
 18112  03D8  05C4               	andwf	___ftadd@f2,f
 18113  03D9  30FF               	movlw	255
 18114  03DA  05C5               	andwf	___ftadd@f2+1,f
 18115  03DB  3000               	movlw	0
 18116  03DC  05C6               	andwf	___ftadd@f2+2,f
 18117  03DD  084C               	movf	___ftadd@exp2,w
 18118  03DE  024D               	subwf	___ftadd@exp1,w
 18119  03DF  1803               	skipnc
 18120  03E0  2C03               	goto	l6042
 18121  03E1                     l6032:	
 18122  03E1  3001               	movlw	1
 18123  03E2                     u4845:	
 18124  03E2  35C4               	lslf	___ftadd@f2,f
 18125  03E3  0DC5               	rlf	___ftadd@f2+1,f
 18126  03E4  0DC6               	rlf	___ftadd@f2+2,f
 18127  03E5  0B89               	decfsz	9,f
 18128  03E6  2BE2               	goto	u4845
 18129  03E7  3001               	movlw	1
 18130  03E8  02CC               	subwf	___ftadd@exp2,f
 18131  03E9  084C               	movf	___ftadd@exp2,w
 18132  03EA  064D               	xorwf	___ftadd@exp1,w
 18133  03EB  1903               	skipnz
 18134  03EC  2BFE               	goto	l6040
 18135  03ED  3001               	movlw	1
 18136  03EE  02CB               	subwf	___ftadd@sign,f
 18137  03EF  084B               	movf	___ftadd@sign,w
 18138  03F0  3907               	andlw	7
 18139  03F1  1903               	btfsc	3,2
 18140  03F2  2BFE               	goto	l6040
 18141  03F3  2BE1               	goto	l6032
 18142  03F4                     l6038:	
 18143  03F4  3001               	movlw	1
 18144  03F5                     u4875:	
 18145  03F5  36C3               	lsrf	___ftadd@f1+2,f
 18146  03F6  0CC2               	rrf	___ftadd@f1+1,f
 18147  03F7  0CC1               	rrf	___ftadd@f1,f
 18148  03F8  0B89               	decfsz	9,f
 18149  03F9  2BF5               	goto	u4875
 18150  03FA  3001               	movlw	1
 18151  03FB  00C7               	movwf	??___ftadd
 18152  03FC  0847               	movf	??___ftadd,w
 18153  03FD  07CD               	addwf	___ftadd@exp1,f
 18154  03FE                     l6040:	
 18155  03FE  084D               	movf	___ftadd@exp1,w
 18156  03FF  064C               	xorwf	___ftadd@exp2,w
 18157  0400  1903               	btfsc	3,2
 18158  0401  2C28               	goto	l2919
 18159  0402  2BF4               	goto	l6038
 18160  0403                     l6042:	
 18161  0403  084D               	movf	___ftadd@exp1,w
 18162  0404  024C               	subwf	___ftadd@exp2,w
 18163  0405  1803               	skipnc
 18164  0406  2C28               	goto	l2919
 18165  0407                     l6044:	
 18166  0407  3001               	movlw	1
 18167  0408                     u4905:	
 18168  0408  35C1               	lslf	___ftadd@f1,f
 18169  0409  0DC2               	rlf	___ftadd@f1+1,f
 18170  040A  0DC3               	rlf	___ftadd@f1+2,f
 18171  040B  0B89               	decfsz	9,f
 18172  040C  2C08               	goto	u4905
 18173  040D  3001               	movlw	1
 18174  040E  02CD               	subwf	___ftadd@exp1,f
 18175  040F  084C               	movf	___ftadd@exp2,w
 18176  0410  064D               	xorwf	___ftadd@exp1,w
 18177  0411  1903               	skipnz
 18178  0412  2C24               	goto	l6052
 18179  0413  3001               	movlw	1
 18180  0414  02CB               	subwf	___ftadd@sign,f
 18181  0415  084B               	movf	___ftadd@sign,w
 18182  0416  3907               	andlw	7
 18183  0417  1903               	btfsc	3,2
 18184  0418  2C24               	goto	l6052
 18185  0419  2C07               	goto	l6044
 18186  041A                     l6050:	
 18187  041A  3001               	movlw	1
 18188  041B                     u4935:	
 18189  041B  36C6               	lsrf	___ftadd@f2+2,f
 18190  041C  0CC5               	rrf	___ftadd@f2+1,f
 18191  041D  0CC4               	rrf	___ftadd@f2,f
 18192  041E  0B89               	decfsz	9,f
 18193  041F  2C1B               	goto	u4935
 18194  0420  3001               	movlw	1
 18195  0421  00C7               	movwf	??___ftadd
 18196  0422  0847               	movf	??___ftadd,w
 18197  0423  07CC               	addwf	___ftadd@exp2,f
 18198  0424                     l6052:	
 18199  0424  084D               	movf	___ftadd@exp1,w
 18200  0425  064C               	xorwf	___ftadd@exp2,w
 18201  0426  1D03               	skipz
 18202  0427  2C1A               	goto	l6050
 18203  0428                     l2919:	
 18204  0428  1FCB               	btfss	___ftadd@sign,7
 18205  0429  2C3A               	goto	l6056
 18206  042A  30FF               	movlw	255
 18207  042B  06C1               	xorwf	___ftadd@f1,f
 18208  042C  30FF               	movlw	255
 18209  042D  06C2               	xorwf	___ftadd@f1+1,f
 18210  042E  30FF               	movlw	255
 18211  042F  06C3               	xorwf	___ftadd@f1+2,f
 18212  0430  3001               	movlw	1
 18213  0431  07C1               	addwf	___ftadd@f1,f
 18214  0432  3000               	movlw	0
 18215  0433  1803               	skipnc
 18216  0434  3001               	movlw	1
 18217  0435  07C2               	addwf	___ftadd@f1+1,f
 18218  0436  3000               	movlw	0
 18219  0437  1803               	skipnc
 18220  0438  3001               	movlw	1
 18221  0439  07C3               	addwf	___ftadd@f1+2,f
 18222  043A                     l6056:	
 18223  043A  1F4B               	btfss	___ftadd@sign,6
 18224  043B  2C4C               	goto	l6060
 18225  043C  30FF               	movlw	255
 18226  043D  06C4               	xorwf	___ftadd@f2,f
 18227  043E  30FF               	movlw	255
 18228  043F  06C5               	xorwf	___ftadd@f2+1,f
 18229  0440  30FF               	movlw	255
 18230  0441  06C6               	xorwf	___ftadd@f2+2,f
 18231  0442  3001               	movlw	1
 18232  0443  07C4               	addwf	___ftadd@f2,f
 18233  0444  3000               	movlw	0
 18234  0445  1803               	skipnc
 18235  0446  3001               	movlw	1
 18236  0447  07C5               	addwf	___ftadd@f2+1,f
 18237  0448  3000               	movlw	0
 18238  0449  1803               	skipnc
 18239  044A  3001               	movlw	1
 18240  044B  07C6               	addwf	___ftadd@f2+2,f
 18241  044C                     l6060:	
 18242  044C  01CB               	clrf	___ftadd@sign
 18243  044D  0841               	movf	___ftadd@f1,w
 18244  044E  07C4               	addwf	___ftadd@f2,f
 18245  044F  0842               	movf	___ftadd@f1+1,w
 18246  0450  3DC5               	addwfc	___ftadd@f2+1,f
 18247  0451  0843               	movf	___ftadd@f1+2,w
 18248  0452  3DC6               	addwfc	___ftadd@f2+2,f
 18249  0453  1FC6               	btfss	___ftadd@f2+2,7
 18250  0454  2C67               	goto	l6070
 18251  0455  30FF               	movlw	255
 18252  0456  06C4               	xorwf	___ftadd@f2,f
 18253  0457  30FF               	movlw	255
 18254  0458  06C5               	xorwf	___ftadd@f2+1,f
 18255  0459  30FF               	movlw	255
 18256  045A  06C6               	xorwf	___ftadd@f2+2,f
 18257  045B  3001               	movlw	1
 18258  045C  07C4               	addwf	___ftadd@f2,f
 18259  045D  3000               	movlw	0
 18260  045E  1803               	skipnc
 18261  045F  3001               	movlw	1
 18262  0460  07C5               	addwf	___ftadd@f2+1,f
 18263  0461  3000               	movlw	0
 18264  0462  1803               	skipnc
 18265  0463  3001               	movlw	1
 18266  0464  07C6               	addwf	___ftadd@f2+2,f
 18267  0465  01CB               	clrf	___ftadd@sign
 18268  0466  0ACB               	incf	___ftadd@sign,f
 18269  0467                     l6070:	
 18270  0467  0844               	movf	___ftadd@f2,w
 18271  0468  00A0               	movwf	___ftpack@arg
 18272  0469  0845               	movf	___ftadd@f2+1,w
 18273  046A  00A1               	movwf	___ftpack@arg+1
 18274  046B  0846               	movf	___ftadd@f2+2,w
 18275  046C  00A2               	movwf	___ftpack@arg+2
 18276  046D  084D               	movf	___ftadd@exp1,w
 18277  046E  00C7               	movwf	??___ftadd
 18278  046F  0847               	movf	??___ftadd,w
 18279  0470  00A3               	movwf	___ftpack@exp
 18280  0471  084B               	movf	___ftadd@sign,w
 18281  0472  00C8               	movwf	??___ftadd+1
 18282  0473  0848               	movf	??___ftadd+1,w
 18283  0474  00A4               	movwf	___ftpack@sign
 18284  0475  3195  259E         	fcall	___ftpack
 18285  0477  0020               	movlb	0	; select bank0
 18286  0478  0820               	movf	?___ftpack,w
 18287  0479  00C1               	movwf	?___ftadd
 18288  047A  0821               	movf	?___ftpack+1,w
 18289  047B  00C2               	movwf	?___ftadd+1
 18290  047C  0822               	movf	?___ftpack+2,w
 18291  047D  00C3               	movwf	?___ftadd+2
 18292  047E  0008               	return
 18293  047F                     __end_of___ftadd:	
 18294                           
 18295                           	psect	text126
 18296  1F48                     __ptext126:	
 18297 ;; *************** function ___awtoft *****************
 18298 ;; Defined at:
 18299 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18300 ;; Parameters:    Size  Location     Type
 18301 ;;  c               2    8[BANK0 ] int 
 18302 ;; Auto vars:     Size  Location     Type
 18303 ;;  sign            1   13[BANK0 ] unsigned char 
 18304 ;; Return value:  Size  Location     Type
 18305 ;;                  3    8[BANK0 ] float 
 18306 ;; Registers used:
 18307 ;;		wreg, status,2, status,0, pclath, cstack
 18308 ;; Tracked objects:
 18309 ;;		On entry : 0/0
 18310 ;;		On exit  : 0/0
 18311 ;;		Unchanged: 0/0
 18312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18313 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18315 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18316 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18317 ;;Total ram usage:        6 bytes
 18318 ;; Hardware stack levels used:    1
 18319 ;; Hardware stack levels required when called:    6
 18320 ;; This function calls:
 18321 ;;		___ftpack
 18322 ;; This function is called by:
 18323 ;;		_getDimmerLights_PercentToValue
 18324 ;;		_getDimmerLights_ValueToPercent
 18325 ;; This function uses a non-reentrant model
 18326 ;;
 18327                           
 18328                           
 18329                           ;psect for function ___awtoft
 18330  1F48                     ___awtoft:	
 18331                           
 18332                           ;incstack = 0
 18333                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18334  1F48  0020               	movlb	0	; select bank0
 18335  1F49  01AD               	clrf	___awtoft@sign
 18336  1F4A  1FA9               	btfss	___awtoft@c+1,7
 18337  1F4B  2F53               	goto	l5998
 18338  1F4C  09A8               	comf	___awtoft@c,f
 18339  1F4D  09A9               	comf	___awtoft@c+1,f
 18340  1F4E  0AA8               	incf	___awtoft@c,f
 18341  1F4F  1903               	skipnz
 18342  1F50  0AA9               	incf	___awtoft@c+1,f
 18343  1F51  01AD               	clrf	___awtoft@sign
 18344  1F52  0AAD               	incf	___awtoft@sign,f
 18345  1F53                     l5998:	
 18346  1F53  0828               	movf	___awtoft@c,w
 18347  1F54  00A0               	movwf	___ftpack@arg
 18348  1F55  0829               	movf	___awtoft@c+1,w
 18349  1F56  00A1               	movwf	___ftpack@arg+1
 18350  1F57  01A2               	clrf	___ftpack@arg+2
 18351  1F58  308E               	movlw	142
 18352  1F59  00AB               	movwf	??___awtoft
 18353  1F5A  082B               	movf	??___awtoft,w
 18354  1F5B  00A3               	movwf	___ftpack@exp
 18355  1F5C  082D               	movf	___awtoft@sign,w
 18356  1F5D  00AC               	movwf	??___awtoft+1
 18357  1F5E  082C               	movf	??___awtoft+1,w
 18358  1F5F  00A4               	movwf	___ftpack@sign
 18359  1F60  3195  259E         	fcall	___ftpack
 18360  1F62  0020               	movlb	0	; select bank0
 18361  1F63  0820               	movf	?___ftpack,w
 18362  1F64  00A8               	movwf	?___awtoft
 18363  1F65  0821               	movf	?___ftpack+1,w
 18364  1F66  00A9               	movwf	?___awtoft+1
 18365  1F67  0822               	movf	?___ftpack+2,w
 18366  1F68  00AA               	movwf	?___awtoft+2
 18367  1F69  0008               	return
 18368  1F6A                     __end_of___awtoft:	
 18369                           
 18370                           	psect	text127
 18371  159E                     __ptext127:	
 18372 ;; *************** function ___ftpack *****************
 18373 ;; Defined at:
 18374 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18375 ;; Parameters:    Size  Location     Type
 18376 ;;  arg             3    0[BANK0 ] unsigned um
 18377 ;;  exp             1    3[BANK0 ] unsigned char 
 18378 ;;  sign            1    4[BANK0 ] unsigned char 
 18379 ;; Auto vars:     Size  Location     Type
 18380 ;;		None
 18381 ;; Return value:  Size  Location     Type
 18382 ;;                  3    0[BANK0 ] float 
 18383 ;; Registers used:
 18384 ;;		wreg, status,2, status,0
 18385 ;; Tracked objects:
 18386 ;;		On entry : 0/0
 18387 ;;		On exit  : 0/0
 18388 ;;		Unchanged: 0/0
 18389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18390 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18392 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;Total ram usage:        8 bytes
 18395 ;; Hardware stack levels used:    1
 18396 ;; Hardware stack levels required when called:    5
 18397 ;; This function calls:
 18398 ;;		Nothing
 18399 ;; This function is called by:
 18400 ;;		___awtoft
 18401 ;;		___ftadd
 18402 ;;		___ftdiv
 18403 ;;		___ftmul
 18404 ;; This function uses a non-reentrant model
 18405 ;;
 18406                           
 18407                           
 18408                           ;psect for function ___ftpack
 18409  159E                     ___ftpack:	
 18410                           
 18411                           ;incstack = 0
 18412                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18413  159E  0020               	movlb	0	; select bank0
 18414  159F  0823               	movf	___ftpack@exp,w
 18415  15A0  1903               	btfsc	3,2
 18416  15A1  2DA7               	goto	l5856
 18417  15A2  0822               	movf	___ftpack@arg+2,w
 18418  15A3  0421               	iorwf	___ftpack@arg+1,w
 18419  15A4  0420               	iorwf	___ftpack@arg,w
 18420  15A5  1D03               	skipz
 18421  15A6  2DB8               	goto	l5862
 18422  15A7                     l5856:	
 18423  15A7  3000               	movlw	0
 18424  15A8  00A0               	movwf	?___ftpack
 18425  15A9  3000               	movlw	0
 18426  15AA  00A1               	movwf	?___ftpack+1
 18427  15AB  3000               	movlw	0
 18428  15AC  00A2               	movwf	?___ftpack+2
 18429  15AD  0008               	return
 18430  15AE                     l5860:	
 18431  15AE  3001               	movlw	1
 18432  15AF  00A5               	movwf	??___ftpack
 18433  15B0  0825               	movf	??___ftpack,w
 18434  15B1  07A3               	addwf	___ftpack@exp,f
 18435  15B2  3001               	movlw	1
 18436  15B3                     u4465:	
 18437  15B3  36A2               	lsrf	___ftpack@arg+2,f
 18438  15B4  0CA1               	rrf	___ftpack@arg+1,f
 18439  15B5  0CA0               	rrf	___ftpack@arg,f
 18440  15B6  0B89               	decfsz	9,f
 18441  15B7  2DB3               	goto	u4465
 18442  15B8                     l5862:	
 18443  15B8  30FE               	movlw	254
 18444  15B9  0522               	andwf	___ftpack@arg+2,w
 18445  15BA  1903               	btfsc	3,2
 18446  15BB  2DD1               	goto	l2890
 18447  15BC  2DAE               	goto	l5860
 18448  15BD                     l5864:	
 18449  15BD  3001               	movlw	1
 18450  15BE  00A5               	movwf	??___ftpack
 18451  15BF  0825               	movf	??___ftpack,w
 18452  15C0  07A3               	addwf	___ftpack@exp,f
 18453  15C1  3001               	movlw	1
 18454  15C2  07A0               	addwf	___ftpack@arg,f
 18455  15C3  3000               	movlw	0
 18456  15C4  1803               	skipnc
 18457  15C5  3001               	movlw	1
 18458  15C6  07A1               	addwf	___ftpack@arg+1,f
 18459  15C7  3000               	movlw	0
 18460  15C8  1803               	skipnc
 18461  15C9  3001               	movlw	1
 18462  15CA  07A2               	addwf	___ftpack@arg+2,f
 18463  15CB  3001               	movlw	1
 18464  15CC                     u4485:	
 18465  15CC  36A2               	lsrf	___ftpack@arg+2,f
 18466  15CD  0CA1               	rrf	___ftpack@arg+1,f
 18467  15CE  0CA0               	rrf	___ftpack@arg,f
 18468  15CF  0B89               	decfsz	9,f
 18469  15D0  2DCC               	goto	u4485
 18470  15D1                     l2890:	
 18471  15D1  30FF               	movlw	255
 18472  15D2  0522               	andwf	___ftpack@arg+2,w
 18473  15D3  1903               	btfsc	3,2
 18474  15D4  2DDE               	goto	l5872
 18475  15D5  2DBD               	goto	l5864
 18476  15D6                     l5870:	
 18477  15D6  3001               	movlw	1
 18478  15D7  02A3               	subwf	___ftpack@exp,f
 18479  15D8  3001               	movlw	1
 18480  15D9                     u4505:	
 18481  15D9  35A0               	lslf	___ftpack@arg,f
 18482  15DA  0DA1               	rlf	___ftpack@arg+1,f
 18483  15DB  0DA2               	rlf	___ftpack@arg+2,f
 18484  15DC  0B89               	decfsz	9,f
 18485  15DD  2DD9               	goto	u4505
 18486  15DE                     l5872:	
 18487  15DE  1FA1               	btfss	___ftpack@arg+1,7
 18488  15DF  2DD6               	goto	l5870
 18489  15E0  1823               	btfsc	___ftpack@exp,0
 18490  15E1  2DE8               	goto	l2896
 18491  15E2  30FF               	movlw	255
 18492  15E3  05A0               	andwf	___ftpack@arg,f
 18493  15E4  307F               	movlw	127
 18494  15E5  05A1               	andwf	___ftpack@arg+1,f
 18495  15E6  30FF               	movlw	255
 18496  15E7  05A2               	andwf	___ftpack@arg+2,f
 18497  15E8                     l2896:	
 18498  15E8  1003               	clrc
 18499  15E9  0CA3               	rrf	___ftpack@exp,f
 18500  15EA  0823               	movf	___ftpack@exp,w
 18501  15EB  00A5               	movwf	??___ftpack
 18502  15EC  01A6               	clrf	??___ftpack+1
 18503  15ED  01A7               	clrf	??___ftpack+2
 18504  15EE  3010               	movlw	16
 18505  15EF                     u4535:	
 18506  15EF  35A5               	lslf	??___ftpack,f
 18507  15F0  0DA6               	rlf	??___ftpack+1,f
 18508  15F1  0DA7               	rlf	??___ftpack+2,f
 18509  15F2  0B89               	decfsz	9,f
 18510  15F3  2DEF               	goto	u4535
 18511  15F4  0825               	movf	??___ftpack,w
 18512  15F5  04A0               	iorwf	___ftpack@arg,f
 18513  15F6  0826               	movf	??___ftpack+1,w
 18514  15F7  04A1               	iorwf	___ftpack@arg+1,f
 18515  15F8  0827               	movf	??___ftpack+2,w
 18516  15F9  04A2               	iorwf	___ftpack@arg+2,f
 18517  15FA  0824               	movf	___ftpack@sign,w
 18518  15FB  1903               	btfsc	3,2
 18519  15FC  0008               	return
 18520  15FD  17A2               	bsf	___ftpack@arg+2,7
 18521  15FE  0008               	return
 18522  15FF                     __end_of___ftpack:	
 18523                           
 18524                           	psect	text128
 18525  1B47                     __ptext128:	
 18526 ;; *************** function _Division *****************
 18527 ;; Defined at:
 18528 ;;		line 1436 in file "../src/Dimmer_B1.c"
 18529 ;; Parameters:    Size  Location     Type
 18530 ;;  value           1    wreg     unsigned char 
 18531 ;;  num             1    5[BANK0 ] unsigned char 
 18532 ;; Auto vars:     Size  Location     Type
 18533 ;;  value           1    8[BANK0 ] unsigned char 
 18534 ;;  result          1    9[BANK0 ] unsigned char 
 18535 ;; Return value:  Size  Location     Type
 18536 ;;                  1    wreg      unsigned char 
 18537 ;; Registers used:
 18538 ;;		wreg, status,2, status,0, pclath, cstack
 18539 ;; Tracked objects:
 18540 ;;		On entry : 0/0
 18541 ;;		On exit  : 0/0
 18542 ;;		Unchanged: 0/0
 18543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18544 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18545 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18546 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18547 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18548 ;;Total ram usage:        5 bytes
 18549 ;; Hardware stack levels used:    1
 18550 ;; Hardware stack levels required when called:    6
 18551 ;; This function calls:
 18552 ;;		___lbdiv
 18553 ;; This function is called by:
 18554 ;;		_DimmerIntr_Initialization
 18555 ;; This function uses a non-reentrant model
 18556 ;;
 18557                           
 18558                           
 18559                           ;psect for function _Division
 18560  1B47                     _Division:	
 18561                           
 18562                           ;incstack = 0
 18563                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 18564                           ;Division@value stored from wreg
 18565  1B47  0020               	movlb	0	; select bank0
 18566  1B48  00A8               	movwf	Division@value
 18567                           
 18568                           ;Dimmer_B1.c: 1437: char result = (char) (value / num);
 18569  1B49  0825               	movf	Division@num,w
 18570  1B4A  00A6               	movwf	??_Division
 18571  1B4B  0826               	movf	??_Division,w
 18572  1B4C  00A0               	movwf	___lbdiv@divisor
 18573  1B4D  0828               	movf	Division@value,w
 18574  1B4E  319F  2726         	fcall	___lbdiv
 18575  1B50  0020               	movlb	0	; select bank0
 18576  1B51  00A7               	movwf	??_Division+1
 18577  1B52  0827               	movf	??_Division+1,w
 18578  1B53  00A9               	movwf	Division@result
 18579                           
 18580                           ;Dimmer_B1.c: 1438: return result;
 18581  1B54  0829               	movf	Division@result,w
 18582  1B55  0008               	return
 18583  1B56                     __end_of_Division:	
 18584                           
 18585                           	psect	text129
 18586  1F26                     __ptext129:	
 18587 ;; *************** function ___lbdiv *****************
 18588 ;; Defined at:
 18589 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 18590 ;; Parameters:    Size  Location     Type
 18591 ;;  dividend        1    wreg     unsigned char 
 18592 ;;  divisor         1    0[BANK0 ] unsigned char 
 18593 ;; Auto vars:     Size  Location     Type
 18594 ;;  dividend        1    2[BANK0 ] unsigned char 
 18595 ;;  quotient        1    4[BANK0 ] unsigned char 
 18596 ;;  counter         1    3[BANK0 ] unsigned char 
 18597 ;; Return value:  Size  Location     Type
 18598 ;;                  1    wreg      unsigned char 
 18599 ;; Registers used:
 18600 ;;		wreg, status,2, status,0
 18601 ;; Tracked objects:
 18602 ;;		On entry : 0/0
 18603 ;;		On exit  : 0/0
 18604 ;;		Unchanged: 0/0
 18605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18606 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18607 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18609 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18610 ;;Total ram usage:        5 bytes
 18611 ;; Hardware stack levels used:    1
 18612 ;; Hardware stack levels required when called:    5
 18613 ;; This function calls:
 18614 ;;		Nothing
 18615 ;; This function is called by:
 18616 ;;		_Division
 18617 ;; This function uses a non-reentrant model
 18618 ;;
 18619                           
 18620                           
 18621                           ;psect for function ___lbdiv
 18622  1F26                     ___lbdiv:	
 18623                           
 18624                           ;incstack = 0
 18625                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 18626                           ;___lbdiv@dividend stored from wreg
 18627  1F26  0020               	movlb	0	; select bank0
 18628  1F27  00A2               	movwf	___lbdiv@dividend
 18629  1F28  01A4               	clrf	___lbdiv@quotient
 18630  1F29  0820               	movf	___lbdiv@divisor,w
 18631  1F2A  1903               	btfsc	3,2
 18632  1F2B  2F46               	goto	l6838
 18633  1F2C  01A3               	clrf	___lbdiv@counter
 18634  1F2D  0AA3               	incf	___lbdiv@counter,f
 18635  1F2E                     l6826:	
 18636  1F2E  1BA0               	btfsc	___lbdiv@divisor,7
 18637  1F2F  2F37               	goto	l6828
 18638  1F30  1003               	clrc
 18639  1F31  0DA0               	rlf	___lbdiv@divisor,f
 18640  1F32  3001               	movlw	1
 18641  1F33  00A1               	movwf	??___lbdiv
 18642  1F34  0821               	movf	??___lbdiv,w
 18643  1F35  07A3               	addwf	___lbdiv@counter,f
 18644  1F36  2F2E               	goto	l6826
 18645  1F37                     l6828:	
 18646  1F37  1003               	clrc
 18647  1F38  0DA4               	rlf	___lbdiv@quotient,f
 18648  1F39  0820               	movf	___lbdiv@divisor,w
 18649  1F3A  0222               	subwf	___lbdiv@dividend,w
 18650  1F3B  1C03               	skipc
 18651  1F3C  2F41               	goto	L10
 18652  1F3D  0820               	movf	___lbdiv@divisor,w
 18653  1F3E  02A2               	subwf	___lbdiv@dividend,f
 18654  1F3F  1424               	bsf	___lbdiv@quotient,0
 18655  1F40  1003               	clrc
 18656  1F41                     L10:	
 18657  1F41  0CA0               	rrf	___lbdiv@divisor,f
 18658  1F42  3001               	movlw	1
 18659  1F43  02A3               	subwf	___lbdiv@counter,f
 18660  1F44  1D03               	btfss	3,2
 18661  1F45  2F37               	goto	l6828
 18662  1F46                     l6838:	
 18663  1F46  0824               	movf	___lbdiv@quotient,w
 18664  1F47  0008               	return
 18665  1F48                     __end_of___lbdiv:	
 18666                           
 18667                           	psect	text130
 18668  19DC                     __ptext130:	
 18669 ;; *************** function _DelayOff_Main *****************
 18670 ;; Defined at:
 18671 ;;		line 41 in file "../src/DelayOff_B1.c"
 18672 ;; Parameters:    Size  Location     Type
 18673 ;;		None
 18674 ;; Auto vars:     Size  Location     Type
 18675 ;;		None
 18676 ;; Return value:  Size  Location     Type
 18677 ;;		None               void
 18678 ;; Registers used:
 18679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18680 ;; Tracked objects:
 18681 ;;		On entry : 0/0
 18682 ;;		On exit  : 0/0
 18683 ;;		Unchanged: 0/0
 18684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18689 ;;Total ram usage:        0 bytes
 18690 ;; Hardware stack levels used:    1
 18691 ;; Hardware stack levels required when called:    9
 18692 ;; This function calls:
 18693 ;;		_DlyOff_Main
 18694 ;; This function is called by:
 18695 ;;		_main
 18696 ;; This function uses a non-reentrant model
 18697 ;;
 18698                           
 18699                           
 18700                           ;psect for function _DelayOff_Main
 18701  19DC                     _DelayOff_Main:	
 18702                           
 18703                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18704                           
 18705                           ;incstack = 0
 18706                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18707  19DC  3001               	movlw	1
 18708  19DD  3189  2122         	fcall	_DlyOff_Main
 18709  19DF  0008               	return
 18710  19E0                     __end_of_DelayOff_Main:	
 18711                           
 18712                           	psect	text131
 18713  0922                     __ptext131:	
 18714 ;; *************** function _DlyOff_Main *****************
 18715 ;; Defined at:
 18716 ;;		line 61 in file "../src/DelayOff_B1.c"
 18717 ;; Parameters:    Size  Location     Type
 18718 ;;  sw              1    wreg     unsigned char 
 18719 ;; Auto vars:     Size  Location     Type
 18720 ;;  sw              1   71[BANK0 ] unsigned char 
 18721 ;; Return value:  Size  Location     Type
 18722 ;;		None               void
 18723 ;; Registers used:
 18724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18725 ;; Tracked objects:
 18726 ;;		On entry : 0/0
 18727 ;;		On exit  : 0/0
 18728 ;;		Unchanged: 0/0
 18729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18732 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;Total ram usage:        3 bytes
 18735 ;; Hardware stack levels used:    1
 18736 ;; Hardware stack levels required when called:    8
 18737 ;; This function calls:
 18738 ;;		_DelayOffPointSelect
 18739 ;;		_getDimmerLights_Status
 18740 ;;		_setDimmerLights_SwOff
 18741 ;;		_setDimmerLights_SwOn
 18742 ;;		_setProductData
 18743 ;; This function is called by:
 18744 ;;		_DelayOff_Main
 18745 ;; This function uses a non-reentrant model
 18746 ;;
 18747                           
 18748                           
 18749                           ;psect for function _DlyOff_Main
 18750  0922                     _DlyOff_Main:	
 18751                           
 18752                           ;incstack = 0
 18753                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18754                           ;DlyOff_Main@sw stored from wreg
 18755  0922  0020               	movlb	0	; select bank0
 18756  0923  00E7               	movwf	DlyOff_Main@sw
 18757                           
 18758                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18759  0924  0867               	movf	DlyOff_Main@sw,w
 18760  0925  319A  229B  3189   	fcall	_DelayOffPointSelect
 18761                           
 18762                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18763  0928  0021               	movlb	1	; select bank1
 18764  0929  084A               	movf	_DelayOff^(0+128),w
 18765  092A  0086               	movwf	6
 18766  092B  3001               	movlw	1	; select bank2/3
 18767  092C  0087               	movwf	7
 18768  092D  1C81               	btfss	1,1
 18769  092E  0008               	return
 18770                           
 18771                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18772  092F  084A               	movf	_DelayOff^(0+128),w
 18773  0930  3E02               	addlw	2
 18774  0931  0086               	movwf	6
 18775  0932  3001               	movlw	1	; select bank2/3
 18776  0933  0087               	movwf	7
 18777  0934  3001               	movlw	1
 18778  0935  0781               	addwf	1,f
 18779  0936  3141               	addfsr 1,1
 18780  0937  1803               	skipnc
 18781  0938  0A81               	incf	1,f
 18782                           
 18783                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18784  0939  084A               	movf	_DelayOff^(0+128),w
 18785  093A  3E02               	addlw	2
 18786  093B  0086               	movwf	6
 18787  093C  3001               	movlw	1	; select bank2/3
 18788  093D  0087               	movwf	7
 18789  093E  3F40               	moviw [0]fsr1
 18790  093F  0020               	movlb	0	; select bank0
 18791  0940  00E5               	movwf	??_DlyOff_Main
 18792  0941  3F41               	moviw [1]fsr1
 18793  0942  00E6               	movwf	??_DlyOff_Main+1
 18794  0943  300B               	movlw	11
 18795  0944  0266               	subwf	??_DlyOff_Main+1,w
 18796  0945  30B8               	movlw	184
 18797  0946  1903               	skipnz
 18798  0947  0265               	subwf	??_DlyOff_Main,w
 18799  0948  1C03               	skipc
 18800  0949  0008               	return
 18801                           
 18802                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18803  094A  0021               	movlb	1	; select bank1
 18804  094B  084A               	movf	_DelayOff^(0+128),w
 18805  094C  3E02               	addlw	2
 18806  094D  0086               	movwf	6
 18807  094E  3001               	movlw	1	; select bank2/3
 18808  094F  0087               	movwf	7
 18809  0950  3000               	movlw	0
 18810  0951  3FC0               	movwi [0]fsr1
 18811  0952  3FC1               	movwi [1]fsr1
 18812                           
 18813                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18814  0953  3001               	movlw	1
 18815  0954  0020               	movlb	0	; select bank0
 18816  0955  00E5               	movwf	??_DlyOff_Main
 18817  0956  0021               	movlb	1	; select bank1
 18818  0957  084A               	movf	_DelayOff^(0+128),w
 18819  0958  3E04               	addlw	4
 18820  0959  0086               	movwf	6
 18821  095A  3001               	movlw	1	; select bank2/3
 18822  095B  0087               	movwf	7
 18823  095C  0020               	movlb	0	; select bank0
 18824  095D  0865               	movf	??_DlyOff_Main,w
 18825  095E  0781               	addwf	1,f
 18826                           
 18827                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18828  095F  0021               	movlb	1	; select bank1
 18829  0960  084A               	movf	_DelayOff^(0+128),w
 18830  0961  3E04               	addlw	4
 18831  0962  0086               	movwf	6
 18832  0963  3001               	movlw	1	; select bank2/3
 18833  0964  0087               	movwf	7
 18834  0965  0A4A               	incf	_DelayOff^(0+128),w
 18835  0966  0084               	movwf	4
 18836  0967  3001               	movlw	1	; select bank2/3
 18837  0968  0085               	movwf	5
 18838  0969  0800               	movf	0,w
 18839  096A  0201               	subwf	1,w
 18840  096B  1C03               	skipc
 18841  096C  0008               	return
 18842                           
 18843                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18844  096D  084A               	movf	_DelayOff^(0+128),w
 18845  096E  3E04               	addlw	4
 18846  096F  0086               	movwf	6
 18847  0970  3001               	movlw	1	; select bank2/3
 18848  0971  0087               	movwf	7
 18849  0972  0181               	clrf	1
 18850                           
 18851                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18852  0973  084A               	movf	_DelayOff^(0+128),w
 18853  0974  0086               	movwf	6
 18854  0975  3001               	movlw	1	; select bank2/3
 18855  0976  0087               	movwf	7
 18856  0977  1081               	bcf	1,1
 18857                           
 18858                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18859  0978  0020               	movlb	0	; select bank0
 18860  0979  0867               	movf	DlyOff_Main@sw,w
 18861  097A  319B  2384  3189   	fcall	_getDimmerLights_Status
 18862  097D  3A01               	xorlw	1
 18863  097E  1D03               	skipz
 18864  097F  298A               	goto	l531
 18865                           
 18866                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18867  0980  0020               	movlb	0	; select bank0
 18868  0981  0867               	movf	DlyOff_Main@sw,w
 18869  0982  3193  2339  3189   	fcall	_setDimmerLights_SwOn
 18870                           
 18871                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18872  0985  0020               	movlb	0	; select bank0
 18873  0986  0867               	movf	DlyOff_Main@sw,w
 18874  0987  3191  2183  3189   	fcall	_setDimmerLights_SwOff
 18875  098A                     l531:	
 18876                           
 18877                           ;DelayOff_B1.c: 78: }
 18878                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18879  098A  0020               	movlb	0	; select bank0
 18880  098B  01E2               	clrf	setProductData@value
 18881  098C  0867               	movf	DlyOff_Main@sw,w
 18882  098D  3E1A               	addlw	26
 18883  098E  319A  22B3         	fcall	_setProductData
 18884  0990  0008               	return
 18885  0991                     __end_of_DlyOff_Main:	
 18886                           
 18887                           	psect	text132
 18888  1AB3                     __ptext132:	
 18889 ;; *************** function _setProductData *****************
 18890 ;; Defined at:
 18891 ;;		line 645 in file "../src/Main_B1.c"
 18892 ;; Parameters:    Size  Location     Type
 18893 ;;  address         1    wreg     unsigned char 
 18894 ;;  value           1   66[BANK0 ] unsigned char 
 18895 ;; Auto vars:     Size  Location     Type
 18896 ;;  address         1   68[BANK0 ] unsigned char 
 18897 ;; Return value:  Size  Location     Type
 18898 ;;		None               void
 18899 ;; Registers used:
 18900 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18901 ;; Tracked objects:
 18902 ;;		On entry : 0/0
 18903 ;;		On exit  : 0/0
 18904 ;;		Unchanged: 0/0
 18905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18906 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18908 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18909 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;Total ram usage:        3 bytes
 18911 ;; Hardware stack levels used:    1
 18912 ;; Hardware stack levels required when called:    5
 18913 ;; This function calls:
 18914 ;;		Nothing
 18915 ;; This function is called by:
 18916 ;;		_DlyOff_Main
 18917 ;;		_setDelayOff_GO
 18918 ;;		_setDimmerLights_OnOff
 18919 ;;		_setDimmerLights_Dimming
 18920 ;;		_setTemp_Main
 18921 ;;		_setLog_Code
 18922 ;;		_setControl_Lights_Table
 18923 ;;		_setRFSW_AdjControl
 18924 ;;		_setRF_DimmerLights
 18925 ;; This function uses a non-reentrant model
 18926 ;;
 18927                           
 18928                           
 18929                           ;psect for function _setProductData
 18930  1AB3                     _setProductData:	
 18931                           
 18932                           ;incstack = 0
 18933                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18934                           ;setProductData@address stored from wreg
 18935  1AB3  0020               	movlb	0	; select bank0
 18936  1AB4  00E4               	movwf	setProductData@address
 18937                           
 18938                           ;Main_B1.c: 646: _product.Data[address] = value;
 18939  1AB5  0862               	movf	setProductData@value,w
 18940  1AB6  00E3               	movwf	??_setProductData
 18941  1AB7  0864               	movf	setProductData@address,w
 18942  1AB8  3ECC               	addlw	__product& (0+255)
 18943  1AB9  0086               	movwf	6
 18944  1ABA  3001               	movlw	1	; select bank3/4
 18945  1ABB  0087               	movwf	7
 18946  1ABC  0863               	movf	??_setProductData,w
 18947  1ABD  0081               	movwf	1
 18948  1ABE  0008               	return
 18949  1ABF                     __end_of_setProductData:	
 18950                           
 18951                           	psect	text133
 18952  1339                     __ptext133:	
 18953 ;; *************** function _setDimmerLights_SwOn *****************
 18954 ;; Defined at:
 18955 ;;		line 731 in file "../src/Dimmer_B1.c"
 18956 ;; Parameters:    Size  Location     Type
 18957 ;;  sw              1    wreg     unsigned char 
 18958 ;; Auto vars:     Size  Location     Type
 18959 ;;  sw              1   16[BANK0 ] unsigned char 
 18960 ;;  dimmingStatu    1   15[BANK0 ] unsigned char 
 18961 ;;  idle            1   14[BANK0 ] unsigned char 
 18962 ;; Return value:  Size  Location     Type
 18963 ;;		None               void
 18964 ;; Registers used:
 18965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18966 ;; Tracked objects:
 18967 ;;		On entry : 0/0
 18968 ;;		On exit  : 0/0
 18969 ;;		Unchanged: 0/0
 18970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18972 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18974 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18975 ;;Total ram usage:        4 bytes
 18976 ;; Hardware stack levels used:    1
 18977 ;; Hardware stack levels required when called:    7
 18978 ;; This function calls:
 18979 ;;		_DimmerLights_SelectPointer
 18980 ;;		_getDimmerIntr_Dimming_Sw
 18981 ;;		_setBuz
 18982 ;; This function is called by:
 18983 ;;		_DlyOff_Main
 18984 ;;		_setControl_Lights_Table
 18985 ;;		_setRFSW_Control
 18986 ;;		_setRFSW_AdjControl
 18987 ;;		_setSw_Main
 18988 ;; This function uses a non-reentrant model
 18989 ;;
 18990                           
 18991                           
 18992                           ;psect for function _setDimmerLights_SwOn
 18993  1339                     _setDimmerLights_SwOn:	
 18994                           
 18995                           ;incstack = 0
 18996                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18997                           ;setDimmerLights_SwOn@sw stored from wreg
 18998  1339  0020               	movlb	0	; select bank0
 18999  133A  00B0               	movwf	setDimmerLights_SwOn@sw
 19000                           
 19001                           ;Dimmer_B1.c: 732: char idle = 0;
 19002  133B  01AE               	clrf	setDimmerLights_SwOn@idle
 19003                           
 19004                           ;Dimmer_B1.c: 734: char dimmingStatus = 0;
 19005  133C  01AF               	clrf	setDimmerLights_SwOn@dimmingStatus
 19006                           
 19007                           ;Dimmer_B1.c: 735: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19008  133D  0830               	movf	setDimmerLights_SwOn@sw,w
 19009  133E  319B  2338  3193   	fcall	_getDimmerIntr_Dimming_Sw
 19010  1341  0020               	movlb	0	; select bank0
 19011  1342  00AD               	movwf	??_setDimmerLights_SwOn
 19012  1343  082D               	movf	??_setDimmerLights_SwOn,w
 19013  1344  00AF               	movwf	setDimmerLights_SwOn@dimmingStatus
 19014                           
 19015                           ;Dimmer_B1.c: 762: DimmerLights_SelectPointer(sw);
 19016  1345  0830               	movf	setDimmerLights_SwOn@sw,w
 19017  1346  319A  22A7  3193   	fcall	_DimmerLights_SelectPointer
 19018                           
 19019                           ;Dimmer_B1.c: 763: if (idle == 0) {
 19020  1349  0020               	movlb	0	; select bank0
 19021  134A  08AE               	movf	setDimmerLights_SwOn@idle,f
 19022  134B  1D03               	skipz
 19023  134C  0008               	return
 19024                           
 19025                           ;Dimmer_B1.c: 765: if (dimmingStatus == 0) {
 19026  134D  08AF               	movf	setDimmerLights_SwOn@dimmingStatus,f
 19027  134E  1D03               	skipz
 19028  134F  2B72               	goto	l6266
 19029                           
 19030                           ;Dimmer_B1.c: 766: DimmerLights->SwFlag = 1;
 19031  1350  0021               	movlb	1	; select bank1
 19032  1351  084C               	movf	_DimmerLights^(0+128),w
 19033  1352  0086               	movwf	6
 19034  1353  3001               	movlw	1	; select bank2/3
 19035  1354  0087               	movwf	7
 19036  1355  1401               	bsf	1,0
 19037                           
 19038                           ;Dimmer_B1.c: 767: if (DimmerLights->Status == 0) {
 19039  1356  0A4C               	incf	_DimmerLights^(0+128),w
 19040  1357  0086               	movwf	6
 19041  1358  3001               	movlw	1	; select bank2/3
 19042  1359  0087               	movwf	7
 19043  135A  1801               	btfsc	1,0
 19044  135B  2B6C               	goto	l6264
 19045                           
 19046                           ;Dimmer_B1.c: 768: DimmerLights->Status = 1;
 19047  135C  0A4C               	incf	_DimmerLights^(0+128),w
 19048  135D  0086               	movwf	6
 19049  135E  3001               	movlw	1	; select bank2/3
 19050  135F  0087               	movwf	7
 19051  1360  1401               	bsf	1,0
 19052                           
 19053                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 19054  1361  084C               	movf	_DimmerLights^(0+128),w
 19055  1362  0086               	movwf	6
 19056  1363  3001               	movlw	1	; select bank2/3
 19057  1364  0087               	movwf	7
 19058  1365  1481               	bsf	1,1
 19059                           
 19060                           ;Dimmer_B1.c: 770: DimmerLights->Switch = 1;
 19061  1366  084C               	movf	_DimmerLights^(0+128),w
 19062  1367  0086               	movwf	6
 19063  1368  3001               	movlw	1	; select bank2/3
 19064  1369  0087               	movwf	7
 19065  136A  1501               	bsf	1,2
 19066                           
 19067                           ;Dimmer_B1.c: 771: } else {
 19068  136B  2B7D               	goto	l6268
 19069  136C                     l6264:	
 19070                           
 19071                           ;Dimmer_B1.c: 772: DimmerLights->Status = 0;
 19072  136C  0A4C               	incf	_DimmerLights^(0+128),w
 19073  136D  0086               	movwf	6
 19074  136E  3001               	movlw	1	; select bank2/3
 19075  136F  0087               	movwf	7
 19076  1370  1001               	bcf	1,0
 19077                           
 19078                           ;Dimmer_B1.c: 773: }
 19079                           ;Dimmer_B1.c: 774: } else {
 19080  1371  2B7D               	goto	l6268
 19081  1372                     l6266:	
 19082                           
 19083                           ;Dimmer_B1.c: 775: DimmerLights->DimmingTrigger = 1;
 19084  1372  0021               	movlb	1	; select bank1
 19085  1373  084C               	movf	_DimmerLights^(0+128),w
 19086  1374  0086               	movwf	6
 19087  1375  3001               	movlw	1	; select bank2/3
 19088  1376  0087               	movwf	7
 19089  1377  1601               	bsf	1,4
 19090                           
 19091                           ;Dimmer_B1.c: 776: DimmerLights->DimmingSwitch = 0;
 19092  1378  084C               	movf	_DimmerLights^(0+128),w
 19093  1379  0086               	movwf	6
 19094  137A  3001               	movlw	1	; select bank2/3
 19095  137B  0087               	movwf	7
 19096  137C  1281               	bcf	1,5
 19097  137D                     l6268:	
 19098                           
 19099                           ;Dimmer_B1.c: 777: }
 19100                           ;Dimmer_B1.c: 778: setBuz(1, 100);
 19101  137D  3064               	movlw	100
 19102  137E  0020               	movlb	0	; select bank0
 19103  137F  00A9               	movwf	setBuz@time
 19104  1380  3000               	movlw	0
 19105  1381  00AA               	movwf	setBuz@time+1
 19106  1382  3001               	movlw	1
 19107  1383  3194  242E         	fcall	_setBuz
 19108  1385  0008               	return
 19109  1386                     __end_of_setDimmerLights_SwOn:	
 19110                           
 19111                           	psect	text134
 19112  142E                     __ptext134:	
 19113 ;; *************** function _setBuz *****************
 19114 ;; Defined at:
 19115 ;;		line 22 in file "../src/Buzzer_B1.c"
 19116 ;; Parameters:    Size  Location     Type
 19117 ;;  count           1    wreg     unsigned char 
 19118 ;;  time            2    9[BANK0 ] int 
 19119 ;; Auto vars:     Size  Location     Type
 19120 ;;  count           1   12[BANK0 ] unsigned char 
 19121 ;; Return value:  Size  Location     Type
 19122 ;;		None               void
 19123 ;; Registers used:
 19124 ;;		wreg, status,2, status,0, pclath, cstack
 19125 ;; Tracked objects:
 19126 ;;		On entry : 0/0
 19127 ;;		On exit  : 0/0
 19128 ;;		Unchanged: 0/0
 19129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19130 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19133 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19134 ;;Total ram usage:        4 bytes
 19135 ;; Hardware stack levels used:    1
 19136 ;; Hardware stack levels required when called:    6
 19137 ;; This function calls:
 19138 ;;		___awdiv
 19139 ;; This function is called by:
 19140 ;;		_setDimmerLights_SwOn
 19141 ;;		_setDimmerLights_Dimming
 19142 ;;		_my_MainTimer
 19143 ;;		_Exception_Main
 19144 ;;		_setTemp_Main
 19145 ;;		_setLog_Code
 19146 ;;		_setRFSW_Control
 19147 ;;		_setSw_Main
 19148 ;; This function uses a non-reentrant model
 19149 ;;
 19150                           
 19151                           
 19152                           ;psect for function _setBuz
 19153  142E                     _setBuz:	
 19154                           
 19155                           ;incstack = 0
 19156                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 19157                           ;setBuz@count stored from wreg
 19158  142E  0020               	movlb	0	; select bank0
 19159  142F  00AC               	movwf	setBuz@count
 19160                           
 19161                           ;Buzzer_B1.c: 23: time /= 20;
 19162  1430  3014               	movlw	20
 19163  1431  00A0               	movwf	___awdiv@divisor
 19164  1432  3000               	movlw	0
 19165  1433  00A1               	movwf	___awdiv@divisor+1
 19166  1434  082A               	movf	setBuz@time+1,w
 19167  1435  01A3               	clrf	___awdiv@dividend+1
 19168  1436  07A3               	addwf	___awdiv@dividend+1,f
 19169  1437  0829               	movf	setBuz@time,w
 19170  1438  01A2               	clrf	___awdiv@dividend
 19171  1439  07A2               	addwf	___awdiv@dividend,f
 19172  143A  3193  2386  3194   	fcall	___awdiv
 19173  143D  0020               	movlb	0	; select bank0
 19174  143E  0821               	movf	?___awdiv+1,w
 19175  143F  01AA               	clrf	setBuz@time+1
 19176  1440  07AA               	addwf	setBuz@time+1,f
 19177  1441  0820               	movf	?___awdiv,w
 19178  1442  01A9               	clrf	setBuz@time
 19179  1443  07A9               	addwf	setBuz@time,f
 19180                           
 19181                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 19182  1444  0022               	movlb	2	; select bank2
 19183  1445  1C20               	btfss	_Buz1^(0+256),0
 19184  1446  0008               	return
 19185                           
 19186                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 19187  1447  18A0               	btfsc	_Buz1^(0+256),1
 19188  1448  2C5F               	goto	l86
 19189                           
 19190                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 19191  1449  14A0               	bsf	_Buz1^(0+256),1
 19192                           
 19193                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 19194  144A  01A1               	clrf	(_Buz1^(0+256)+1)
 19195  144B  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19196                           
 19197                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 19198  144C  0020               	movlb	0	; select bank0
 19199  144D  082C               	movf	setBuz@count,w
 19200  144E  00AB               	movwf	??_setBuz
 19201  144F  082B               	movf	??_setBuz,w
 19202  1450  0022               	movlb	2	; select bank2
 19203  1451  00A3               	movwf	(_Buz1^(0+256)+3)
 19204                           
 19205                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 19206  1452  0020               	movlb	0	; select bank0
 19207  1453  082A               	movf	setBuz@time+1,w
 19208  1454  0022               	movlb	2	; select bank2
 19209  1455  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19210  1456  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19211  1457  0020               	movlb	0	; select bank0
 19212  1458  0829               	movf	setBuz@time,w
 19213  1459  0022               	movlb	2	; select bank2
 19214  145A  01A6               	clrf	(_Buz1^(0+256)+6)
 19215  145B  07A6               	addwf	(_Buz1^(0+256)+6),f
 19216                           
 19217                           ;Buzzer_B1.c: 30: RB3 = 1;
 19218  145C  0020               	movlb	0	; select bank0
 19219  145D  158D               	bsf	13,3	;volatile
 19220                           
 19221                           ;Buzzer_B1.c: 31: } else {
 19222  145E  0008               	return
 19223  145F                     l86:	
 19224                           
 19225                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 19226  145F  19A0               	btfsc	_Buz1^(0+256),3
 19227  1460  2C73               	goto	l88
 19228                           
 19229                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 19230  1461  15A0               	bsf	_Buz1^(0+256),3
 19231                           
 19232                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 19233  1462  0020               	movlb	0	; select bank0
 19234  1463  082C               	movf	setBuz@count,w
 19235  1464  00AB               	movwf	??_setBuz
 19236  1465  082B               	movf	??_setBuz,w
 19237  1466  0022               	movlb	2	; select bank2
 19238  1467  00A4               	movwf	(_Buz1^(0+256)+4)
 19239                           
 19240                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 19241  1468  0020               	movlb	0	; select bank0
 19242  1469  082A               	movf	setBuz@time+1,w
 19243  146A  0022               	movlb	2	; select bank2
 19244  146B  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 19245  146C  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 19246  146D  0020               	movlb	0	; select bank0
 19247  146E  0829               	movf	setBuz@time,w
 19248  146F  0022               	movlb	2	; select bank2
 19249  1470  01A8               	clrf	(_Buz1^(0+256)+8)
 19250  1471  07A8               	addwf	(_Buz1^(0+256)+8),f
 19251                           
 19252                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 19253  1472  0008               	return
 19254  1473                     l88:	
 19255  1473  1A20               	btfsc	_Buz1^(0+256),4
 19256  1474  0008               	return
 19257                           
 19258                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 19259  1475  1620               	bsf	_Buz1^(0+256),4
 19260                           
 19261                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 19262  1476  0020               	movlb	0	; select bank0
 19263  1477  082C               	movf	setBuz@count,w
 19264  1478  00AB               	movwf	??_setBuz
 19265  1479  082B               	movf	??_setBuz,w
 19266  147A  0022               	movlb	2	; select bank2
 19267  147B  00A5               	movwf	(_Buz1^(0+256)+5)
 19268                           
 19269                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 19270  147C  0020               	movlb	0	; select bank0
 19271  147D  082A               	movf	setBuz@time+1,w
 19272  147E  0022               	movlb	2	; select bank2
 19273  147F  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 19274  1480  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 19275  1481  0020               	movlb	0	; select bank0
 19276  1482  0829               	movf	setBuz@time,w
 19277  1483  0022               	movlb	2	; select bank2
 19278  1484  01AA               	clrf	(_Buz1^(0+256)+10)
 19279  1485  07AA               	addwf	(_Buz1^(0+256)+10),f
 19280  1486  0008               	return
 19281  1487                     __end_of_setBuz:	
 19282                           
 19283                           	psect	text135
 19284  1386                     __ptext135:	
 19285 ;; *************** function ___awdiv *****************
 19286 ;; Defined at:
 19287 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19288 ;; Parameters:    Size  Location     Type
 19289 ;;  divisor         2    0[BANK0 ] int 
 19290 ;;  dividend        2    2[BANK0 ] int 
 19291 ;; Auto vars:     Size  Location     Type
 19292 ;;  quotient        2    7[BANK0 ] int 
 19293 ;;  sign            1    6[BANK0 ] unsigned char 
 19294 ;;  counter         1    5[BANK0 ] unsigned char 
 19295 ;; Return value:  Size  Location     Type
 19296 ;;                  2    0[BANK0 ] int 
 19297 ;; Registers used:
 19298 ;;		wreg, status,2, status,0
 19299 ;; Tracked objects:
 19300 ;;		On entry : 0/0
 19301 ;;		On exit  : 0/0
 19302 ;;		Unchanged: 0/0
 19303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19304 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19305 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19307 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19308 ;;Total ram usage:        9 bytes
 19309 ;; Hardware stack levels used:    1
 19310 ;; Hardware stack levels required when called:    5
 19311 ;; This function calls:
 19312 ;;		Nothing
 19313 ;; This function is called by:
 19314 ;;		_setBuz
 19315 ;; This function uses a non-reentrant model
 19316 ;;
 19317                           
 19318                           
 19319                           ;psect for function ___awdiv
 19320  1386                     ___awdiv:	
 19321                           
 19322                           ;incstack = 0
 19323                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19324  1386  0020               	movlb	0	; select bank0
 19325  1387  01A6               	clrf	___awdiv@sign
 19326  1388  1FA1               	btfss	___awdiv@divisor+1,7
 19327  1389  2B91               	goto	l5890
 19328  138A  09A0               	comf	___awdiv@divisor,f
 19329  138B  09A1               	comf	___awdiv@divisor+1,f
 19330  138C  0AA0               	incf	___awdiv@divisor,f
 19331  138D  1903               	skipnz
 19332  138E  0AA1               	incf	___awdiv@divisor+1,f
 19333  138F  01A6               	clrf	___awdiv@sign
 19334  1390  0AA6               	incf	___awdiv@sign,f
 19335  1391                     l5890:	
 19336  1391  1FA3               	btfss	___awdiv@dividend+1,7
 19337  1392  2B9C               	goto	l5896
 19338  1393  09A2               	comf	___awdiv@dividend,f
 19339  1394  09A3               	comf	___awdiv@dividend+1,f
 19340  1395  0AA2               	incf	___awdiv@dividend,f
 19341  1396  1903               	skipnz
 19342  1397  0AA3               	incf	___awdiv@dividend+1,f
 19343  1398  3001               	movlw	1
 19344  1399  00A4               	movwf	??___awdiv
 19345  139A  0824               	movf	??___awdiv,w
 19346  139B  06A6               	xorwf	___awdiv@sign,f
 19347  139C                     l5896:	
 19348  139C  01A7               	clrf	___awdiv@quotient
 19349  139D  01A8               	clrf	___awdiv@quotient+1
 19350  139E  0821               	movf	___awdiv@divisor+1,w
 19351  139F  0420               	iorwf	___awdiv@divisor,w
 19352  13A0  1903               	skipnz
 19353  13A1  2BCB               	goto	l5918
 19354  13A2  01A5               	clrf	___awdiv@counter
 19355  13A3  0AA5               	incf	___awdiv@counter,f
 19356  13A4                     l5906:	
 19357  13A4  1BA1               	btfsc	___awdiv@divisor+1,7
 19358  13A5  2BB0               	goto	l5908
 19359  13A6  3001               	movlw	1
 19360  13A7                     u4585:	
 19361  13A7  35A0               	lslf	___awdiv@divisor,f
 19362  13A8  0DA1               	rlf	___awdiv@divisor+1,f
 19363  13A9  0B89               	decfsz	9,f
 19364  13AA  2BA7               	goto	u4585
 19365  13AB  3001               	movlw	1
 19366  13AC  00A4               	movwf	??___awdiv
 19367  13AD  0824               	movf	??___awdiv,w
 19368  13AE  07A5               	addwf	___awdiv@counter,f
 19369  13AF  2BA4               	goto	l5906
 19370  13B0                     l5908:	
 19371  13B0  3001               	movlw	1
 19372  13B1                     u4605:	
 19373  13B1  35A7               	lslf	___awdiv@quotient,f
 19374  13B2  0DA8               	rlf	___awdiv@quotient+1,f
 19375  13B3  0B89               	decfsz	9,f
 19376  13B4  2BB1               	goto	u4605
 19377  13B5  0821               	movf	___awdiv@divisor+1,w
 19378  13B6  0223               	subwf	___awdiv@dividend+1,w
 19379  13B7  1D03               	skipz
 19380  13B8  2BBB               	goto	u4615
 19381  13B9  0820               	movf	___awdiv@divisor,w
 19382  13BA  0222               	subwf	___awdiv@dividend,w
 19383  13BB                     u4615:	
 19384  13BB  1C03               	skipc
 19385  13BC  2BC2               	goto	l5914
 19386  13BD  0820               	movf	___awdiv@divisor,w
 19387  13BE  02A2               	subwf	___awdiv@dividend,f
 19388  13BF  0821               	movf	___awdiv@divisor+1,w
 19389  13C0  3BA3               	subwfb	___awdiv@dividend+1,f
 19390  13C1  1427               	bsf	___awdiv@quotient,0
 19391  13C2                     l5914:	
 19392  13C2  3001               	movlw	1
 19393  13C3                     u4625:	
 19394  13C3  36A1               	lsrf	___awdiv@divisor+1,f
 19395  13C4  0CA0               	rrf	___awdiv@divisor,f
 19396  13C5  0B89               	decfsz	9,f
 19397  13C6  2BC3               	goto	u4625
 19398  13C7  3001               	movlw	1
 19399  13C8  02A5               	subwf	___awdiv@counter,f
 19400  13C9  1D03               	btfss	3,2
 19401  13CA  2BB0               	goto	l5908
 19402  13CB                     l5918:	
 19403  13CB  0826               	movf	___awdiv@sign,w
 19404  13CC  1903               	btfsc	3,2
 19405  13CD  2BD3               	goto	l5922
 19406  13CE  09A7               	comf	___awdiv@quotient,f
 19407  13CF  09A8               	comf	___awdiv@quotient+1,f
 19408  13D0  0AA7               	incf	___awdiv@quotient,f
 19409  13D1  1903               	skipnz
 19410  13D2  0AA8               	incf	___awdiv@quotient+1,f
 19411  13D3                     l5922:	
 19412  13D3  0828               	movf	___awdiv@quotient+1,w
 19413  13D4  01A1               	clrf	?___awdiv+1
 19414  13D5  07A1               	addwf	?___awdiv+1,f
 19415  13D6  0827               	movf	___awdiv@quotient,w
 19416  13D7  01A0               	clrf	?___awdiv
 19417  13D8  07A0               	addwf	?___awdiv,f
 19418  13D9  0008               	return
 19419  13DA                     __end_of___awdiv:	
 19420                           
 19421                           	psect	text136
 19422  1B38                     __ptext136:	
 19423 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 19424 ;; Defined at:
 19425 ;;		line 241 in file "../src/Dimmer_B1.c"
 19426 ;; Parameters:    Size  Location     Type
 19427 ;;  lights          1    wreg     unsigned char 
 19428 ;; Auto vars:     Size  Location     Type
 19429 ;;  lights          1    0[BANK0 ] unsigned char 
 19430 ;;  status          1    1[BANK0 ] unsigned char 
 19431 ;; Return value:  Size  Location     Type
 19432 ;;                  1    wreg      unsigned char 
 19433 ;; Registers used:
 19434 ;;		wreg, status,2
 19435 ;; Tracked objects:
 19436 ;;		On entry : 0/0
 19437 ;;		On exit  : 0/0
 19438 ;;		Unchanged: 0/0
 19439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19441 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19443 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19444 ;;Total ram usage:        2 bytes
 19445 ;; Hardware stack levels used:    1
 19446 ;; Hardware stack levels required when called:    5
 19447 ;; This function calls:
 19448 ;;		Nothing
 19449 ;; This function is called by:
 19450 ;;		_setDimmerLights_SwOn
 19451 ;;		_setRF_AdjControl
 19452 ;; This function uses a non-reentrant model
 19453 ;;
 19454                           
 19455                           
 19456                           ;psect for function _getDimmerIntr_Dimming_Sw
 19457  1B38                     _getDimmerIntr_Dimming_Sw:	
 19458                           
 19459                           ;incstack = 0
 19460                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 19461                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 19462  1B38  0020               	movlb	0	; select bank0
 19463  1B39  00A0               	movwf	getDimmerIntr_Dimming_Sw@lights
 19464                           
 19465                           ;Dimmer_B1.c: 242: char status = 0;
 19466  1B3A  01A1               	clrf	getDimmerIntr_Dimming_Sw@status
 19467                           
 19468                           ;Dimmer_B1.c: 244: if (lights == 1) {
 19469  1B3B  0820               	movf	getDimmerIntr_Dimming_Sw@lights,w
 19470  1B3C  3A01               	xorlw	1
 19471  1B3D  1D03               	skipz
 19472  1B3E  2B45               	goto	l5966
 19473                           
 19474                           ;Dimmer_B1.c: 245: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 19475  1B3F  3000               	movlw	0
 19476  1B40  0021               	movlb	1	; select bank1
 19477  1B41  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 19478  1B42  3001               	movlw	1
 19479  1B43  0020               	movlb	0	; select bank0
 19480  1B44  00A1               	movwf	getDimmerIntr_Dimming_Sw@status
 19481  1B45                     l5966:	
 19482                           
 19483                           ;Dimmer_B1.c: 246: }
 19484                           ;Dimmer_B1.c: 259: return status;
 19485  1B45  0821               	movf	getDimmerIntr_Dimming_Sw@status,w
 19486  1B46  0008               	return
 19487  1B47                     __end_of_getDimmerIntr_Dimming_Sw:	
 19488                           
 19489                           	psect	text137
 19490  1183                     __ptext137:	
 19491 ;; *************** function _setDimmerLights_SwOff *****************
 19492 ;; Defined at:
 19493 ;;		line 783 in file "../src/Dimmer_B1.c"
 19494 ;; Parameters:    Size  Location     Type
 19495 ;;  sw              1    wreg     unsigned char 
 19496 ;; Auto vars:     Size  Location     Type
 19497 ;;  sw              1    2[BANK0 ] unsigned char 
 19498 ;; Return value:  Size  Location     Type
 19499 ;;		None               void
 19500 ;; Registers used:
 19501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19502 ;; Tracked objects:
 19503 ;;		On entry : 0/0
 19504 ;;		On exit  : 0/0
 19505 ;;		Unchanged: 0/0
 19506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19511 ;;Total ram usage:        1 bytes
 19512 ;; Hardware stack levels used:    1
 19513 ;; Hardware stack levels required when called:    6
 19514 ;; This function calls:
 19515 ;;		_DimmerLights_SelectPointer
 19516 ;; This function is called by:
 19517 ;;		_DlyOff_Main
 19518 ;;		_Exception_Main
 19519 ;;		_setControl_Lights_Table
 19520 ;;		_setRFSW_Control
 19521 ;;		_setRFSW_AdjControl
 19522 ;;		_setSw_Main
 19523 ;; This function uses a non-reentrant model
 19524 ;;
 19525                           
 19526                           
 19527                           ;psect for function _setDimmerLights_SwOff
 19528  1183                     _setDimmerLights_SwOff:	
 19529                           
 19530                           ;incstack = 0
 19531                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19532                           ;setDimmerLights_SwOff@sw stored from wreg
 19533  1183  0020               	movlb	0	; select bank0
 19534  1184  00A2               	movwf	setDimmerLights_SwOff@sw
 19535                           
 19536                           ;Dimmer_B1.c: 785: DimmerLights_SelectPointer(sw);
 19537  1185  0822               	movf	setDimmerLights_SwOff@sw,w
 19538  1186  319A  22A7  3191   	fcall	_DimmerLights_SelectPointer
 19539                           
 19540                           ;Dimmer_B1.c: 787: if (DimmerLights->SwFlag == 1) {
 19541  1189  0021               	movlb	1	; select bank1
 19542  118A  084C               	movf	_DimmerLights^(0+128),w
 19543  118B  0086               	movwf	6
 19544  118C  3001               	movlw	1	; select bank2/3
 19545  118D  0087               	movwf	7
 19546  118E  1C01               	btfss	1,0
 19547  118F  0008               	return
 19548                           
 19549                           ;Dimmer_B1.c: 788: DimmerLights->SwFlag = 0;
 19550  1190  084C               	movf	_DimmerLights^(0+128),w
 19551  1191  0086               	movwf	6
 19552  1192  3001               	movlw	1	; select bank2/3
 19553  1193  0087               	movwf	7
 19554  1194  1001               	bcf	1,0
 19555                           
 19556                           ;Dimmer_B1.c: 789: if (DimmerLights->Status == 1) {
 19557  1195  0A4C               	incf	_DimmerLights^(0+128),w
 19558  1196  0086               	movwf	6
 19559  1197  3001               	movlw	1	; select bank2/3
 19560  1198  0087               	movwf	7
 19561  1199  1C01               	btfss	1,0
 19562  119A  29B1               	goto	l6280
 19563                           
 19564                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingSwFlag == 1) {
 19565  119B  084C               	movf	_DimmerLights^(0+128),w
 19566  119C  0086               	movwf	6
 19567  119D  3001               	movlw	1	; select bank2/3
 19568  119E  0087               	movwf	7
 19569  119F  1D81               	btfss	1,3
 19570  11A0  0008               	return
 19571                           
 19572                           ;Dimmer_B1.c: 791: DimmerLights->DimmingSwFlag = 0;
 19573  11A1  084C               	movf	_DimmerLights^(0+128),w
 19574  11A2  0086               	movwf	6
 19575  11A3  3001               	movlw	1	; select bank2/3
 19576  11A4  0087               	movwf	7
 19577  11A5  1181               	bcf	1,3
 19578                           
 19579                           ;Dimmer_B1.c: 793: DimmerLights->DimmingTrigger = 1;
 19580  11A6  084C               	movf	_DimmerLights^(0+128),w
 19581  11A7  0086               	movwf	6
 19582  11A8  3001               	movlw	1	; select bank2/3
 19583  11A9  0087               	movwf	7
 19584  11AA  1601               	bsf	1,4
 19585                           
 19586                           ;Dimmer_B1.c: 794: DimmerLights->DimmingSwitch = 0;
 19587  11AB  084C               	movf	_DimmerLights^(0+128),w
 19588  11AC  0086               	movwf	6
 19589  11AD  3001               	movlw	1	; select bank2/3
 19590  11AE  0087               	movwf	7
 19591  11AF  1281               	bcf	1,5
 19592                           
 19593                           ;Dimmer_B1.c: 795: }
 19594                           ;Dimmer_B1.c: 796: } else {
 19595  11B0  0008               	return
 19596  11B1                     l6280:	
 19597                           
 19598                           ;Dimmer_B1.c: 797: DimmerLights->Trigger = 1;
 19599  11B1  084C               	movf	_DimmerLights^(0+128),w
 19600  11B2  0086               	movwf	6
 19601  11B3  3001               	movlw	1	; select bank2/3
 19602  11B4  0087               	movwf	7
 19603  11B5  1481               	bsf	1,1
 19604                           
 19605                           ;Dimmer_B1.c: 798: DimmerLights->Switch = 0;
 19606  11B6  084C               	movf	_DimmerLights^(0+128),w
 19607  11B7  0086               	movwf	6
 19608  11B8  3001               	movlw	1	; select bank2/3
 19609  11B9  0087               	movwf	7
 19610  11BA  1101               	bcf	1,2
 19611  11BB  0008               	return
 19612  11BC                     __end_of_setDimmerLights_SwOff:	
 19613                           
 19614                           	psect	text138
 19615  1B84                     __ptext138:	
 19616 ;; *************** function _getDimmerLights_Status *****************
 19617 ;; Defined at:
 19618 ;;		line 1134 in file "../src/Dimmer_B1.c"
 19619 ;; Parameters:    Size  Location     Type
 19620 ;;  lights          1    wreg     unsigned char 
 19621 ;; Auto vars:     Size  Location     Type
 19622 ;;  lights          1    2[BANK0 ] unsigned char 
 19623 ;;  status          1    3[BANK0 ] unsigned char 
 19624 ;; Return value:  Size  Location     Type
 19625 ;;                  1    wreg      unsigned char 
 19626 ;; Registers used:
 19627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19628 ;; Tracked objects:
 19629 ;;		On entry : 0/0
 19630 ;;		On exit  : 0/0
 19631 ;;		Unchanged: 0/0
 19632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19637 ;;Total ram usage:        2 bytes
 19638 ;; Hardware stack levels used:    1
 19639 ;; Hardware stack levels required when called:    6
 19640 ;; This function calls:
 19641 ;;		_DimmerLights_SelectPointer
 19642 ;; This function is called by:
 19643 ;;		_DlyOff_Main
 19644 ;;		_Exception_Main
 19645 ;;		_setControl_Lights_Table
 19646 ;;		_setRFSW_Control
 19647 ;;		_setRFSW_AdjControl
 19648 ;;		_setRF_AdjControl
 19649 ;; This function uses a non-reentrant model
 19650 ;;
 19651                           
 19652                           
 19653                           ;psect for function _getDimmerLights_Status
 19654  1B84                     _getDimmerLights_Status:	
 19655                           
 19656                           ;incstack = 0
 19657                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19658                           ;getDimmerLights_Status@lights stored from wreg
 19659  1B84  0020               	movlb	0	; select bank0
 19660  1B85  00A2               	movwf	getDimmerLights_Status@lights
 19661                           
 19662                           ;Dimmer_B1.c: 1135: DimmerLights_SelectPointer(lights);
 19663  1B86  0822               	movf	getDimmerLights_Status@lights,w
 19664  1B87  319A  22A7         	fcall	_DimmerLights_SelectPointer
 19665                           
 19666                           ;Dimmer_B1.c: 1136: char status = DimmerLights->Status == 1 ? 1 : 0;
 19667  1B89  0021               	movlb	1	; select bank1
 19668  1B8A  0A4C               	incf	_DimmerLights^(0+128),w
 19669  1B8B  0086               	movwf	6
 19670  1B8C  3001               	movlw	1	; select bank2/3
 19671  1B8D  0087               	movwf	7
 19672  1B8E  3000               	movlw	0
 19673  1B8F  1801               	btfsc	1,0
 19674  1B90  3001               	movlw	1
 19675  1B91  0020               	movlb	0	; select bank0
 19676  1B92  00A3               	movwf	getDimmerLights_Status@status
 19677                           
 19678                           ;Dimmer_B1.c: 1137: return status;
 19679  1B93  0823               	movf	getDimmerLights_Status@status,w
 19680  1B94  0008               	return
 19681  1B95                     __end_of_getDimmerLights_Status:	
 19682                           
 19683                           	psect	text139
 19684  1AA7                     __ptext139:	
 19685 ;; *************** function _DimmerLights_SelectPointer *****************
 19686 ;; Defined at:
 19687 ;;		line 654 in file "../src/Dimmer_B1.c"
 19688 ;; Parameters:    Size  Location     Type
 19689 ;;  lights          1    wreg     unsigned char 
 19690 ;; Auto vars:     Size  Location     Type
 19691 ;;  lights          1    1[BANK0 ] unsigned char 
 19692 ;; Return value:  Size  Location     Type
 19693 ;;		None               void
 19694 ;; Registers used:
 19695 ;;		wreg
 19696 ;; Tracked objects:
 19697 ;;		On entry : 0/0
 19698 ;;		On exit  : 0/0
 19699 ;;		Unchanged: 0/0
 19700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19703 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19705 ;;Total ram usage:        2 bytes
 19706 ;; Hardware stack levels used:    1
 19707 ;; Hardware stack levels required when called:    5
 19708 ;; This function calls:
 19709 ;;		Nothing
 19710 ;; This function is called by:
 19711 ;;		_setDimmerLights_SwOn
 19712 ;;		_setDimmerLights_SwOff
 19713 ;;		_setDimmerLights_DimmingOn
 19714 ;;		_setDimmerLights_Main
 19715 ;;		_getDimmerLights_Status
 19716 ;;		_setDimmerLights_DimmingRun
 19717 ;;		_setRF_AdjControl
 19718 ;;		_setDimmerLights_Status
 19719 ;; This function uses a non-reentrant model
 19720 ;;
 19721                           
 19722                           
 19723                           ;psect for function _DimmerLights_SelectPointer
 19724  1AA7                     _DimmerLights_SelectPointer:	
 19725                           
 19726                           ;incstack = 0
 19727                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19728                           ;DimmerLights_SelectPointer@lights stored from wreg
 19729  1AA7  0020               	movlb	0	; select bank0
 19730  1AA8  00A1               	movwf	DimmerLights_SelectPointer@lights
 19731                           
 19732                           ;Dimmer_B1.c: 656: if (lights == 1) {
 19733  1AA9  0821               	movf	DimmerLights_SelectPointer@lights,w
 19734  1AAA  3A01               	xorlw	1
 19735  1AAB  1D03               	skipz
 19736  1AAC  0008               	return
 19737                           
 19738                           ;Dimmer_B1.c: 657: DimmerLights = &DimmerLights1;
 19739  1AAD  3061               	movlw	_DimmerLights1& (0+255)
 19740  1AAE  00A0               	movwf	??_DimmerLights_SelectPointer
 19741  1AAF  0820               	movf	??_DimmerLights_SelectPointer,w
 19742  1AB0  0021               	movlb	1	; select bank1
 19743  1AB1  00CC               	movwf	_DimmerLights^(0+128)
 19744  1AB2  0008               	return
 19745  1AB3                     __end_of_DimmerLights_SelectPointer:	
 19746                           
 19747                           	psect	text140
 19748  19D8                     __ptext140:	
 19749 ;; *************** function _DelayOff_Initialization *****************
 19750 ;; Defined at:
 19751 ;;		line 26 in file "../src/DelayOff_B1.c"
 19752 ;; Parameters:    Size  Location     Type
 19753 ;;		None
 19754 ;; Auto vars:     Size  Location     Type
 19755 ;;		None
 19756 ;; Return value:  Size  Location     Type
 19757 ;;		None               void
 19758 ;; Registers used:
 19759 ;;		wreg, status,2, status,0, pclath, cstack
 19760 ;; Tracked objects:
 19761 ;;		On entry : 0/0
 19762 ;;		On exit  : 0/0
 19763 ;;		Unchanged: 0/0
 19764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19769 ;;Total ram usage:        0 bytes
 19770 ;; Hardware stack levels used:    1
 19771 ;; Hardware stack levels required when called:    7
 19772 ;; This function calls:
 19773 ;;		_DlyOff_Initialization
 19774 ;; This function is called by:
 19775 ;;		_main
 19776 ;; This function uses a non-reentrant model
 19777 ;;
 19778                           
 19779                           
 19780                           ;psect for function _DelayOff_Initialization
 19781  19D8                     _DelayOff_Initialization:	
 19782                           
 19783                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19784                           
 19785                           ;incstack = 0
 19786                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19787  19D8  3001               	movlw	1
 19788  19D9  319A  2205         	fcall	_DlyOff_Initialization
 19789  19DB  0008               	return
 19790  19DC                     __end_of_DelayOff_Initialization:	
 19791                           
 19792                           	psect	text141
 19793  1A05                     __ptext141:	
 19794 ;; *************** function _DlyOff_Initialization *****************
 19795 ;; Defined at:
 19796 ;;		line 56 in file "../src/DelayOff_B1.c"
 19797 ;; Parameters:    Size  Location     Type
 19798 ;;  sw              1    wreg     unsigned char 
 19799 ;; Auto vars:     Size  Location     Type
 19800 ;;  sw              1    2[BANK0 ] unsigned char 
 19801 ;; Return value:  Size  Location     Type
 19802 ;;		None               void
 19803 ;; Registers used:
 19804 ;;		wreg, status,2, status,0, pclath, cstack
 19805 ;; Tracked objects:
 19806 ;;		On entry : 0/0
 19807 ;;		On exit  : 0/0
 19808 ;;		Unchanged: 0/0
 19809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19814 ;;Total ram usage:        1 bytes
 19815 ;; Hardware stack levels used:    1
 19816 ;; Hardware stack levels required when called:    6
 19817 ;; This function calls:
 19818 ;;		_DelayOffPointSelect
 19819 ;; This function is called by:
 19820 ;;		_DelayOff_Initialization
 19821 ;; This function uses a non-reentrant model
 19822 ;;
 19823                           
 19824                           
 19825                           ;psect for function _DlyOff_Initialization
 19826  1A05                     _DlyOff_Initialization:	
 19827                           
 19828                           ;incstack = 0
 19829                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19830                           ;DlyOff_Initialization@sw stored from wreg
 19831  1A05  0020               	movlb	0	; select bank0
 19832  1A06  00A2               	movwf	DlyOff_Initialization@sw
 19833                           
 19834                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19835  1A07  0822               	movf	DlyOff_Initialization@sw,w
 19836  1A08  319A  229B         	fcall	_DelayOffPointSelect
 19837  1A0A  0008               	return
 19838  1A0B                     __end_of_DlyOff_Initialization:	
 19839                           
 19840                           	psect	text142
 19841  1A9B                     __ptext142:	
 19842 ;; *************** function _DelayOffPointSelect *****************
 19843 ;; Defined at:
 19844 ;;		line 7 in file "../src/DelayOff_B1.c"
 19845 ;; Parameters:    Size  Location     Type
 19846 ;;  sw              1    wreg     unsigned char 
 19847 ;; Auto vars:     Size  Location     Type
 19848 ;;  sw              1    1[BANK0 ] unsigned char 
 19849 ;; Return value:  Size  Location     Type
 19850 ;;		None               void
 19851 ;; Registers used:
 19852 ;;		wreg
 19853 ;; Tracked objects:
 19854 ;;		On entry : 0/0
 19855 ;;		On exit  : 0/0
 19856 ;;		Unchanged: 0/0
 19857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19860 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19861 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19862 ;;Total ram usage:        2 bytes
 19863 ;; Hardware stack levels used:    1
 19864 ;; Hardware stack levels required when called:    5
 19865 ;; This function calls:
 19866 ;;		Nothing
 19867 ;; This function is called by:
 19868 ;;		_DlyOff_Initialization
 19869 ;;		_DlyOff_Main
 19870 ;;		_setDelayOff_GO
 19871 ;;		_getDelayOff_GO
 19872 ;; This function uses a non-reentrant model
 19873 ;;
 19874                           
 19875                           
 19876                           ;psect for function _DelayOffPointSelect
 19877  1A9B                     _DelayOffPointSelect:	
 19878                           
 19879                           ;incstack = 0
 19880                           ; Regs used in _DelayOffPointSelect: [wreg]
 19881                           ;DelayOffPointSelect@sw stored from wreg
 19882  1A9B  0020               	movlb	0	; select bank0
 19883  1A9C  00A1               	movwf	DelayOffPointSelect@sw
 19884                           
 19885                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19886  1A9D  0821               	movf	DelayOffPointSelect@sw,w
 19887  1A9E  3A01               	xorlw	1
 19888  1A9F  1D03               	skipz
 19889  1AA0  0008               	return
 19890                           
 19891                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19892  1AA1  30C7               	movlw	_DlySw1& (0+255)
 19893  1AA2  00A0               	movwf	??_DelayOffPointSelect
 19894  1AA3  0820               	movf	??_DelayOffPointSelect,w
 19895  1AA4  0021               	movlb	1	; select bank1
 19896  1AA5  00CA               	movwf	_DelayOff^(0+128)
 19897  1AA6  0008               	return
 19898  1AA7                     __end_of_DelayOffPointSelect:	
 19899                           
 19900                           	psect	text143
 19901  0801                     __ptext143:	
 19902 ;; *************** function _Buzzer_Main *****************
 19903 ;; Defined at:
 19904 ;;		line 46 in file "../src/Buzzer_B1.c"
 19905 ;; Parameters:    Size  Location     Type
 19906 ;;		None
 19907 ;; Auto vars:     Size  Location     Type
 19908 ;;		None
 19909 ;; Return value:  Size  Location     Type
 19910 ;;		None               void
 19911 ;; Registers used:
 19912 ;;		wreg, status,2, status,0
 19913 ;; Tracked objects:
 19914 ;;		On entry : 0/0
 19915 ;;		On exit  : 0/0
 19916 ;;		Unchanged: 0/0
 19917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19921 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19922 ;;Total ram usage:        1 bytes
 19923 ;; Hardware stack levels used:    1
 19924 ;; Hardware stack levels required when called:    5
 19925 ;; This function calls:
 19926 ;;		Nothing
 19927 ;; This function is called by:
 19928 ;;		_main
 19929 ;; This function uses a non-reentrant model
 19930 ;;
 19931                           
 19932                           
 19933                           ;psect for function _Buzzer_Main
 19934  0801                     _Buzzer_Main:	
 19935                           
 19936                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19937                           
 19938                           ;incstack = 0
 19939                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19940  0801  0022               	movlb	2	; select bank2
 19941  0802  1CA0               	btfss	_Buz1^(0+256),1
 19942  0803  0008               	return
 19943                           
 19944                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19945  0804  3001               	movlw	1
 19946  0805  07A1               	addwf	(_Buz1^(0+256)+1),f
 19947  0806  3000               	movlw	0
 19948  0807  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19949                           
 19950                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19951  0808  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19952  0809  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19953  080A  1D03               	skipz
 19954  080B  280E               	goto	u7855
 19955  080C  0826               	movf	(_Buz1^(0+256)+6),w
 19956  080D  0221               	subwf	(_Buz1^(0+256)+1),w
 19957  080E                     u7855:	
 19958  080E  1C03               	skipc
 19959  080F  0008               	return
 19960                           
 19961                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19962  0810  01A1               	clrf	(_Buz1^(0+256)+1)
 19963  0811  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19964                           
 19965                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19966  0812  12A0               	bcf	_Buz1^(0+256),5
 19967  0813  0020               	movlb	0	; select bank0
 19968  0814  1D8D               	btfss	13,3	;volatile
 19969  0815  2818               	goto	l7942
 19970  0816  0022               	movlb	2	; select bank2
 19971  0817  16A0               	bsf	_Buz1^(0+256),5
 19972  0818                     l7942:	
 19973                           
 19974                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19975  0818  0022               	movlb	2	; select bank2
 19976  0819  1AA0               	btfsc	_Buz1^(0+256),5
 19977  081A  2844               	goto	l96
 19978                           
 19979                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19980  081B  08A3               	movf	(_Buz1^(0+256)+3),f
 19981  081C  1D03               	skipz
 19982  081D  2840               	goto	l97
 19983                           
 19984                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19985  081E  1DA0               	btfss	_Buz1^(0+256),3
 19986  081F  282E               	goto	l98
 19987                           
 19988                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19989  0820  11A0               	bcf	_Buz1^(0+256),3
 19990                           
 19991                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19992  0821  0824               	movf	(_Buz1^(0+256)+4),w
 19993  0822  0020               	movlb	0	; select bank0
 19994  0823  00A0               	movwf	??_Buzzer_Main
 19995  0824  0820               	movf	??_Buzzer_Main,w
 19996  0825  0022               	movlb	2	; select bank2
 19997  0826  00A3               	movwf	(_Buz1^(0+256)+3)
 19998                           
 19999                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 20000  0827  0829               	movf	((_Buz1+1)^(0+256)+8),w
 20001  0828  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20002  0829  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20003  082A  0828               	movf	(_Buz1^(0+256)+8),w
 20004  082B  01A6               	clrf	(_Buz1^(0+256)+6)
 20005  082C  07A6               	addwf	(_Buz1^(0+256)+6),f
 20006                           
 20007                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 20008  082D  0008               	return
 20009  082E                     l98:	
 20010  082E  1E20               	btfss	_Buz1^(0+256),4
 20011  082F  283E               	goto	l100
 20012                           
 20013                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 20014  0830  1220               	bcf	_Buz1^(0+256),4
 20015                           
 20016                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 20017  0831  0825               	movf	(_Buz1^(0+256)+5),w
 20018  0832  0020               	movlb	0	; select bank0
 20019  0833  00A0               	movwf	??_Buzzer_Main
 20020  0834  0820               	movf	??_Buzzer_Main,w
 20021  0835  0022               	movlb	2	; select bank2
 20022  0836  00A3               	movwf	(_Buz1^(0+256)+3)
 20023                           
 20024                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 20025  0837  082B               	movf	((_Buz1+1)^(0+256)+10),w
 20026  0838  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20027  0839  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20028  083A  082A               	movf	(_Buz1^(0+256)+10),w
 20029  083B  01A6               	clrf	(_Buz1^(0+256)+6)
 20030  083C  07A6               	addwf	(_Buz1^(0+256)+6),f
 20031                           
 20032                           ;Buzzer_B1.c: 62: } else {
 20033  083D  0008               	return
 20034  083E                     l100:	
 20035                           
 20036                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 20037  083E  10A0               	bcf	_Buz1^(0+256),1
 20038                           
 20039                           ;Buzzer_B1.c: 64: }
 20040                           ;Buzzer_B1.c: 65: } else {
 20041  083F  0008               	return
 20042  0840                     l97:	
 20043                           
 20044                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 20045  0840  16A0               	bsf	_Buz1^(0+256),5
 20046                           
 20047                           ;Buzzer_B1.c: 68: RB3 = 1;
 20048  0841  0020               	movlb	0	; select bank0
 20049  0842  158D               	bsf	13,3	;volatile
 20050                           
 20051                           ;Buzzer_B1.c: 69: }
 20052                           ;Buzzer_B1.c: 70: } else {
 20053  0843  0008               	return
 20054  0844                     l96:	
 20055                           
 20056                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 20057  0844  12A0               	bcf	_Buz1^(0+256),5
 20058                           
 20059                           ;Buzzer_B1.c: 73: RB3 = 0;
 20060  0845  0020               	movlb	0	; select bank0
 20061  0846  118D               	bcf	13,3	;volatile
 20062                           
 20063                           ;Buzzer_B1.c: 75: Buz1.Count--;
 20064  0847  3001               	movlw	1
 20065  0848  0022               	movlb	2	; select bank2
 20066  0849  02A3               	subwf	(_Buz1^(0+256)+3),f
 20067  084A  0008               	return
 20068  084B                     __end_of_Buzzer_Main:	
 20069                           
 20070                           	psect	text144
 20071  19C6                     __ptext144:	
 20072 ;; *************** function _Buzzer_Initialization *****************
 20073 ;; Defined at:
 20074 ;;		line 11 in file "../src/Buzzer_B1.c"
 20075 ;; Parameters:    Size  Location     Type
 20076 ;;		None
 20077 ;; Auto vars:     Size  Location     Type
 20078 ;;		None
 20079 ;; Return value:  Size  Location     Type
 20080 ;;		None               void
 20081 ;; Registers used:
 20082 ;;		None
 20083 ;; Tracked objects:
 20084 ;;		On entry : 0/0
 20085 ;;		On exit  : 0/0
 20086 ;;		Unchanged: 0/0
 20087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20092 ;;Total ram usage:        0 bytes
 20093 ;; Hardware stack levels used:    1
 20094 ;; Hardware stack levels required when called:    5
 20095 ;; This function calls:
 20096 ;;		Nothing
 20097 ;; This function is called by:
 20098 ;;		_main
 20099 ;; This function uses a non-reentrant model
 20100 ;;
 20101                           
 20102                           
 20103                           ;psect for function _Buzzer_Initialization
 20104  19C6                     _Buzzer_Initialization:	
 20105                           
 20106                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 20107                           
 20108                           ;incstack = 0
 20109                           ; Regs used in _Buzzer_Initialization: []
 20110  19C6  0022               	movlb	2	; select bank2
 20111  19C7  1420               	bsf	_Buz1^(0+256),0
 20112  19C8  0008               	return
 20113  19C9                     __end_of_Buzzer_Initialization:	
 20114                           
 20115                           	psect	intentry
 20116  0004                     __pintentry:	
 20117 ;; *************** function _ISR *****************
 20118 ;; Defined at:
 20119 ;;		line 116 in file "../src/MCU_B1.c"
 20120 ;; Parameters:    Size  Location     Type
 20121 ;;		None
 20122 ;; Auto vars:     Size  Location     Type
 20123 ;;		None
 20124 ;; Return value:  Size  Location     Type
 20125 ;;		None               void
 20126 ;; Registers used:
 20127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20128 ;; Tracked objects:
 20129 ;;		On entry : 0/0
 20130 ;;		On exit  : 0/0
 20131 ;;		Unchanged: 0/0
 20132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20137 ;;Total ram usage:        1 bytes
 20138 ;; Hardware stack levels used:    1
 20139 ;; Hardware stack levels required when called:    4
 20140 ;; This function calls:
 20141 ;;		_IOC_ISR
 20142 ;;		_TMR1_ISR
 20143 ;; This function is called by:
 20144 ;;		Interrupt level 1
 20145 ;; This function uses a non-reentrant model
 20146 ;;
 20147                           
 20148  0004                     _ISR:	
 20149                           
 20150                           ;incstack = 0
 20151                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20152  0004  147E               	bsf	126,0	;set compiler interrupt flag
 20153  0005  3180               	pagesel	$
 20154  0006  0020               	movlb	0	; select bank0
 20155  0007  087F               	movf	127,w
 20156  0008  00FC               	movwf	??_ISR
 20157                           
 20158                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 20159  0009  0021               	movlb	1	; select bank1
 20160  000A  1C11               	btfss	17,0	;volatile
 20161  000B  2812               	goto	i1l8508
 20162  000C  0020               	movlb	0	; select bank0
 20163  000D  1C11               	btfss	17,0	;volatile
 20164  000E  2812               	goto	i1l8508
 20165                           
 20166                           ;MCU_B1.c: 126: TMR1_ISR();
 20167  000F  319E  2667  3180   	fcall	_TMR1_ISR
 20168  0012                     i1l8508:	
 20169                           
 20170                           ;MCU_B1.c: 127: }
 20171                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 20172  0012  198B               	btfsc	11,3	;volatile
 20173  0013  1C0B               	btfss	11,0	;volatile
 20174  0014  281A               	goto	i1l1224
 20175  0015  0027               	movlb	7	; select bank7
 20176  0016  1D16               	btfss	22,2	;volatile
 20177  0017  281A               	goto	i1l1224
 20178                           
 20179                           ;MCU_B1.c: 139: IOC_ISR();
 20180  0018  319A  224A         	fcall	_IOC_ISR
 20181  001A                     i1l1224:	
 20182                           ;MCU_B1.c: 140: }
 20183                           ;MCU_B1.c: 148: return;
 20184                           
 20185  001A  087C               	movf	??_ISR,w
 20186  001B  0020               	movlb	0	; select bank0
 20187  001C  00FF               	movwf	127
 20188  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 20189  001E  0009               	retfie
 20190  001F                     __end_of_ISR:	
 20191                           
 20192                           	psect	text146
 20193  1E67                     __ptext146:	
 20194 ;; *************** function _TMR1_ISR *****************
 20195 ;; Defined at:
 20196 ;;		line 236 in file "../src/MCU_B1.c"
 20197 ;; Parameters:    Size  Location     Type
 20198 ;;		None
 20199 ;; Auto vars:     Size  Location     Type
 20200 ;;		None
 20201 ;; Return value:  Size  Location     Type
 20202 ;;		None               void
 20203 ;; Registers used:
 20204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20205 ;; Tracked objects:
 20206 ;;		On entry : 0/0
 20207 ;;		On exit  : 0/0
 20208 ;;		Unchanged: 0/0
 20209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20214 ;;Total ram usage:        0 bytes
 20215 ;; Hardware stack levels used:    1
 20216 ;; Hardware stack levels required when called:    1
 20217 ;; This function calls:
 20218 ;;		_DimmerLights_TMR_1
 20219 ;; This function is called by:
 20220 ;;		_ISR
 20221 ;; This function uses a non-reentrant model
 20222 ;;
 20223                           
 20224                           
 20225                           ;psect for function _TMR1_ISR
 20226  1E67                     _TMR1_ISR:	
 20227                           
 20228                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 20229                           
 20230                           ;incstack = 0
 20231                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20232  1E67  3191  214B  319E   	fcall	_DimmerLights_TMR_1
 20233                           
 20234                           ;MCU_B1.c: 268: Timer1.Count++;
 20235  1E6A  3001               	movlw	1
 20236  1E6B  0022               	movlb	2	; select bank2
 20237  1E6C  07B2               	addwf	(_Timer1^(0+256)+1),f
 20238  1E6D  3000               	movlw	0
 20239  1E6E  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 20240                           
 20241                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 20242  1E6F  3001               	movlw	1
 20243  1E70  3E31               	addlw	_Timer1& (0+255)
 20244  1E71  0086               	movwf	6
 20245  1E72  3001               	movlw	1	; select bank2/3
 20246  1E73  0087               	movwf	7
 20247  1E74  3F40               	moviw [0]fsr1
 20248  1E75  3AC8               	xorlw	200
 20249  1E76  1D03               	skipz
 20250  1E77  2E7A               	goto	u795_25
 20251  1E78  3F41               	moviw [1]fsr1
 20252  1E79  3A00               	xorlw	0
 20253  1E7A                     u795_25:	
 20254  1E7A  1D03               	skipz
 20255  1E7B  2E7F               	goto	i1l7998
 20256                           
 20257                           ;MCU_B1.c: 270: Timer1.Count = 0;
 20258  1E7C  01B2               	clrf	(_Timer1^(0+256)+1)
 20259  1E7D  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 20260                           
 20261                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 20262  1E7E  1431               	bsf	_Timer1^(0+256),0
 20263  1E7F                     i1l7998:	
 20264                           
 20265                           ;MCU_B1.c: 272: }
 20266                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 20267  1E7F  30FA               	movlw	250
 20268  1E80  0020               	movlb	0	; select bank0
 20269  1E81  0097               	movwf	23	;volatile
 20270                           
 20271                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 20272  1E82  3038               	movlw	56
 20273  1E83  0096               	movwf	22	;volatile
 20274                           
 20275                           ;MCU_B1.c: 276: TMR1IF = 0;
 20276  1E84  1011               	bcf	17,0	;volatile
 20277  1E85  0008               	return
 20278  1E86                     __end_of_TMR1_ISR:	
 20279                           
 20280                           	psect	text147
 20281  114B                     __ptext147:	
 20282 ;; *************** function _DimmerLights_TMR_1 *****************
 20283 ;; Defined at:
 20284 ;;		line 1441 in file "../src/Dimmer_B1.c"
 20285 ;; Parameters:    Size  Location     Type
 20286 ;;		None
 20287 ;; Auto vars:     Size  Location     Type
 20288 ;;		None
 20289 ;; Return value:  Size  Location     Type
 20290 ;;		None               void
 20291 ;; Registers used:
 20292 ;;		wreg, status,2, status,0
 20293 ;; Tracked objects:
 20294 ;;		On entry : 0/0
 20295 ;;		On exit  : 0/0
 20296 ;;		Unchanged: 0/0
 20297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20302 ;;Total ram usage:        1 bytes
 20303 ;; Hardware stack levels used:    1
 20304 ;; This function calls:
 20305 ;;		Nothing
 20306 ;; This function is called by:
 20307 ;;		_TMR1_ISR
 20308 ;; This function uses a non-reentrant model
 20309 ;;
 20310                           
 20311                           
 20312                           ;psect for function _DimmerLights_TMR_1
 20313  114B                     _DimmerLights_TMR_1:	
 20314                           
 20315                           ;Dimmer_B1.c: 1443: if (DimmerIntr1.Start == 1) {
 20316                           
 20317                           ;incstack = 0
 20318                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20319  114B  0021               	movlb	1	; select bank1
 20320  114C  1D3C               	btfss	_DimmerIntr1^(0+128),2
 20321  114D  2971               	goto	i1l852
 20322                           
 20323                           ;Dimmer_B1.c: 1444: DimmerIntr1.Count++;
 20324  114E  3001               	movlw	1
 20325  114F  00F0               	movwf	??_DimmerLights_TMR_1
 20326  1150  0870               	movf	??_DimmerLights_TMR_1,w
 20327  1151  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20328                           
 20329                           ;Dimmer_B1.c: 1446: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 20330  1152  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20331  1153  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20332  1154  1D03               	skipz
 20333  1155  2958               	goto	i1l7452
 20334                           
 20335                           ;Dimmer_B1.c: 1447: DimmerIntr1.Count = 0;
 20336  1156  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20337                           
 20338                           ;Dimmer_B1.c: 1448: DimmerIntr1.Start = 0;
 20339  1157  113C               	bcf	_DimmerIntr1^(0+128),2
 20340  1158                     i1l7452:	
 20341                           
 20342                           ;Dimmer_B1.c: 1449: }
 20343                           ;Dimmer_B1.c: 1463: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20344  1158  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20345  1159  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 20346  115A  1903               	btfsc	3,2
 20347                           
 20348                           ;Dimmer_B1.c: 1464: if (DimmerIntr1.ControlStatus == 1) {
 20349  115B  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20350  115C  295F               	goto	i1l7458
 20351                           
 20352                           ;Dimmer_B1.c: 1465: RB1 = 0;
 20353  115D  0020               	movlb	0	; select bank0
 20354  115E  108D               	bcf	13,1	;volatile
 20355  115F                     i1l7458:	
 20356                           
 20357                           ;Dimmer_B1.c: 1466: }
 20358                           ;Dimmer_B1.c: 1467: }
 20359                           ;Dimmer_B1.c: 1470: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20360  115F  0021               	movlb	1	; select bank1
 20361  1160  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20362  1161  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20363  1162  1903               	btfsc	3,2
 20364                           
 20365                           ;Dimmer_B1.c: 1471: if (DimmerIntr1.ControlStatus == 1) {
 20366  1163  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20367  1164  2967               	goto	i1l7464
 20368                           
 20369                           ;Dimmer_B1.c: 1472: RB1 = 1;
 20370  1165  0020               	movlb	0	; select bank0
 20371  1166  148D               	bsf	13,1	;volatile
 20372  1167                     i1l7464:	
 20373                           
 20374                           ;Dimmer_B1.c: 1473: }
 20375                           ;Dimmer_B1.c: 1474: }
 20376                           ;Dimmer_B1.c: 1477: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20377  1167  0021               	movlb	1	; select bank1
 20378  1168  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20379  1169  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20380  116A  1D03               	skipz
 20381  116B  0008               	return
 20382                           
 20383                           ;Dimmer_B1.c: 1478: if (DimmerIntr1.ControlStatus == 1) {
 20384  116C  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20385  116D  0008               	return
 20386                           
 20387                           ;Dimmer_B1.c: 1479: RB1 = 0;
 20388  116E  0020               	movlb	0	; select bank0
 20389  116F  108D               	bcf	13,1	;volatile
 20390                           
 20391                           ;Dimmer_B1.c: 1480: }
 20392                           ;Dimmer_B1.c: 1483: }
 20393                           ;Dimmer_B1.c: 1485: } else {
 20394  1170  0008               	return
 20395  1171                     i1l852:	
 20396                           
 20397                           ;Dimmer_B1.c: 1486: if (DimmerIntr1.GO == 1) {
 20398  1171  1C3C               	btfss	_DimmerIntr1^(0+128),0
 20399  1172  0008               	return
 20400                           
 20401                           ;Dimmer_B1.c: 1487: DimmerIntr1.Count++;
 20402  1173  3001               	movlw	1
 20403  1174  00F0               	movwf	??_DimmerLights_TMR_1
 20404  1175  0870               	movf	??_DimmerLights_TMR_1,w
 20405  1176  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 20406                           
 20407                           ;Dimmer_B1.c: 1488: if (DimmerIntr1.Count == 7) {
 20408  1177  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 20409  1178  3A07               	xorlw	7
 20410  1179  1D03               	skipz
 20411  117A  0008               	return
 20412                           
 20413                           ;Dimmer_B1.c: 1489: DimmerIntr1.Count = 0;
 20414  117B  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20415                           
 20416                           ;Dimmer_B1.c: 1490: DimmerIntr1.GO = 0;
 20417  117C  103C               	bcf	_DimmerIntr1^(0+128),0
 20418                           
 20419                           ;Dimmer_B1.c: 1491: DimmerIntr1.Start = 1;
 20420  117D  153C               	bsf	_DimmerIntr1^(0+128),2
 20421                           
 20422                           ;Dimmer_B1.c: 1493: if (DimmerIntr1.ControlStatus == 1) {
 20423  117E  1DBC               	btfss	_DimmerIntr1^(0+128),3
 20424  117F  0008               	return
 20425                           
 20426                           ;Dimmer_B1.c: 1494: RB1 = 1;
 20427  1180  0020               	movlb	0	; select bank0
 20428  1181  148D               	bsf	13,1	;volatile
 20429  1182  0008               	return
 20430  1183                     __end_of_DimmerLights_TMR_1:	
 20431                           
 20432                           	psect	text148
 20433  1A4A                     __ptext148:	
 20434 ;; *************** function _IOC_ISR *****************
 20435 ;; Defined at:
 20436 ;;		line 395 in file "../src/MCU_B1.c"
 20437 ;; Parameters:    Size  Location     Type
 20438 ;;		None
 20439 ;; Auto vars:     Size  Location     Type
 20440 ;;		None
 20441 ;; Return value:  Size  Location     Type
 20442 ;;		None               void
 20443 ;; Registers used:
 20444 ;;		wreg, status,2, status,0, pclath, cstack
 20445 ;; Tracked objects:
 20446 ;;		On entry : 0/0
 20447 ;;		On exit  : 0/0
 20448 ;;		Unchanged: 0/0
 20449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20454 ;;Total ram usage:        0 bytes
 20455 ;; Hardware stack levels used:    1
 20456 ;; Hardware stack levels required when called:    3
 20457 ;; This function calls:
 20458 ;;		_DimmerLights_IOC_1
 20459 ;; This function is called by:
 20460 ;;		_ISR
 20461 ;; This function uses a non-reentrant model
 20462 ;;
 20463                           
 20464                           
 20465                           ;psect for function _IOC_ISR
 20466  1A4A                     _IOC_ISR:	
 20467                           
 20468                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20469                           
 20470                           ;incstack = 0
 20471                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20472  1A4A  0021               	movlb	1	; select bank1
 20473  1A4B  1C2F               	btfss	_myMain^(0+128),0
 20474  1A4C  2A4F               	goto	i1l8008
 20475                           
 20476                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20477  1A4D  3192  2231         	fcall	_DimmerLights_IOC_1
 20478  1A4F                     i1l8008:	
 20479                           
 20480                           ;MCU_B1.c: 416: }
 20481                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20482  1A4F  0027               	movlb	7	; select bank7
 20483  1A50  1116               	bcf	22,2	;volatile
 20484                           
 20485                           ;MCU_B1.c: 419: IOCIF = 0;
 20486  1A51  100B               	bcf	11,0	;volatile
 20487  1A52  0008               	return
 20488  1A53                     __end_of_IOC_ISR:	
 20489                           
 20490                           	psect	text149
 20491  1231                     __ptext149:	
 20492 ;; *************** function _DimmerLights_IOC_1 *****************
 20493 ;; Defined at:
 20494 ;;		line 1536 in file "../src/Dimmer_B1.c"
 20495 ;; Parameters:    Size  Location     Type
 20496 ;;		None
 20497 ;; Auto vars:     Size  Location     Type
 20498 ;;		None
 20499 ;; Return value:  Size  Location     Type
 20500 ;;		None               void
 20501 ;; Registers used:
 20502 ;;		wreg, status,2, status,0, pclath, cstack
 20503 ;; Tracked objects:
 20504 ;;		On entry : 0/0
 20505 ;;		On exit  : 0/0
 20506 ;;		Unchanged: 0/0
 20507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20510 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20511 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20512 ;;Total ram usage:        2 bytes
 20513 ;; Hardware stack levels used:    1
 20514 ;; Hardware stack levels required when called:    2
 20515 ;; This function calls:
 20516 ;;		i1_Division
 20517 ;; This function is called by:
 20518 ;;		_IOC_ISR
 20519 ;; This function uses a non-reentrant model
 20520 ;;
 20521                           
 20522                           
 20523                           ;psect for function _DimmerLights_IOC_1
 20524  1231                     _DimmerLights_IOC_1:	
 20525                           
 20526                           ;Dimmer_B1.c: 1550: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20527                           
 20528                           ;incstack = 0
 20529                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20530  1231  0021               	movlb	1	; select bank1
 20531  1232  193C               	btfsc	_DimmerIntr1^(0+128),2
 20532  1233  0008               	return
 20533  1234  183C               	btfsc	_DimmerIntr1^(0+128),0
 20534  1235  0008               	return
 20535                           
 20536                           ;Dimmer_B1.c: 1552: if (RB2 != DimmerIntr1.Status) {
 20537  1236  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 20538  1237  0C89               	rrf	9,f
 20539  1238  3901               	andlw	1
 20540  1239  00FA               	movwf	??_DimmerLights_IOC_1
 20541  123A  3000               	movlw	0
 20542  123B  0020               	movlb	0	; select bank0
 20543  123C  190D               	btfsc	13,2	;volatile
 20544  123D  3001               	movlw	1
 20545  123E  067A               	xorwf	??_DimmerLights_IOC_1,w
 20546  123F  1903               	skipnz
 20547  1240  0008               	return
 20548                           
 20549                           ;Dimmer_B1.c: 1555: DimmerIntr1.Count = 0;
 20550  1241  0021               	movlb	1	; select bank1
 20551  1242  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 20552                           
 20553                           ;Dimmer_B1.c: 1556: DimmerIntr1.GO = 1;
 20554  1243  143C               	bsf	_DimmerIntr1^(0+128),0
 20555                           
 20556                           ;Dimmer_B1.c: 1558: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20557  1244  1E3C               	btfss	_DimmerIntr1^(0+128),4
 20558  1245  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 20559                           
 20560                           ;Dimmer_B1.c: 1559: DimmerIntr1.Tune = 1;
 20561  1246  14BC               	bsf	_DimmerIntr1^(0+128),1
 20562                           
 20563                           ;Dimmer_B1.c: 1560: }
 20564                           ;Dimmer_B1.c: 1562: if (DimmerIntr1.TuneGO == 1) {
 20565  1247  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 20566  1248  2A67               	goto	i1l7508
 20567                           
 20568                           ;Dimmer_B1.c: 1563: DimmerIntr1.TuneGO = 0;
 20569  1249  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 20570                           
 20571                           ;Dimmer_B1.c: 1566: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20572  124A  3002               	movlw	2
 20573  124B  00FA               	movwf	??_DimmerLights_IOC_1
 20574  124C  087A               	movf	??_DimmerLights_IOC_1,w
 20575  124D  00F5               	movwf	i1Division@num
 20576  124E  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 20577  124F  319B  232B  3192   	fcall	i1_Division
 20578  1252  00FB               	movwf	??_DimmerLights_IOC_1+1
 20579  1253  087B               	movf	??_DimmerLights_IOC_1+1,w
 20580  1254  0021               	movlb	1	; select bank1
 20581  1255  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 20582                           
 20583                           ;Dimmer_B1.c: 1567: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20584  1256  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 20585  1257  3AFF               	xorlw	255
 20586  1258  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20587  1259  3E3C               	addlw	60
 20588  125A  00FA               	movwf	??_DimmerLights_IOC_1
 20589  125B  087A               	movf	??_DimmerLights_IOC_1,w
 20590  125C  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 20591                           
 20592                           ;Dimmer_B1.c: 1568: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20593  125D  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 20594  125E  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 20595  125F  00FA               	movwf	??_DimmerLights_IOC_1
 20596  1260  087A               	movf	??_DimmerLights_IOC_1,w
 20597  1261  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 20598                           
 20599                           ;Dimmer_B1.c: 1569: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 20600  1262  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 20601  1263  3E01               	addlw	1
 20602  1264  00FA               	movwf	??_DimmerLights_IOC_1
 20603  1265  087A               	movf	??_DimmerLights_IOC_1,w
 20604  1266  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 20605  1267                     i1l7508:	
 20606                           
 20607                           ;Dimmer_B1.c: 1570: }
 20608                           ;Dimmer_B1.c: 1576: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20609  1267  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 20610  1268  0020               	movlb	0	; select bank0
 20611  1269  1D0D               	btfss	13,2	;volatile
 20612  126A  0008               	return
 20613  126B  0021               	movlb	1	; select bank1
 20614  126C  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 20615  126D  0008               	return
 20616  126E                     __end_of_DimmerLights_IOC_1:	
 20617                           
 20618                           	psect	text150
 20619  1B2B                     __ptext150:	
 20620 ;; *************** function i1_Division *****************
 20621 ;; Defined at:
 20622 ;;		line 1436 in file "../src/Dimmer_B1.c"
 20623 ;; Parameters:    Size  Location     Type
 20624 ;;  value           1    wreg     unsigned char 
 20625 ;;  num             1    5[COMMON] unsigned char 
 20626 ;; Auto vars:     Size  Location     Type
 20627 ;;  value           1    8[COMMON] unsigned char 
 20628 ;;  Division        1    9[COMMON] unsigned char 
 20629 ;; Return value:  Size  Location     Type
 20630 ;;                  1    wreg      unsigned char 
 20631 ;; Registers used:
 20632 ;;		wreg, status,2, status,0, pclath, cstack
 20633 ;; Tracked objects:
 20634 ;;		On entry : 0/0
 20635 ;;		On exit  : 0/0
 20636 ;;		Unchanged: 0/0
 20637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20638 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20639 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20640 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20641 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20642 ;;Total ram usage:        5 bytes
 20643 ;; Hardware stack levels used:    1
 20644 ;; Hardware stack levels required when called:    1
 20645 ;; This function calls:
 20646 ;;		i1___lbdiv
 20647 ;; This function is called by:
 20648 ;;		_DimmerLights_IOC_1
 20649 ;; This function uses a non-reentrant model
 20650 ;;
 20651                           
 20652                           
 20653                           ;psect for function i1_Division
 20654  1B2B                     i1_Division:	
 20655                           
 20656                           ;incstack = 0
 20657                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 20658                           ;i1Division@value stored from wreg
 20659  1B2B  00F8               	movwf	i1Division@value
 20660                           
 20661                           ;Dimmer_B1.c: 1437: char result = (char) (value / num);
 20662  1B2C  0875               	movf	i1Division@num,w
 20663  1B2D  00F6               	movwf	??i1_Division
 20664  1B2E  0876               	movf	??i1_Division,w
 20665  1B2F  00F0               	movwf	i1___lbdiv@divisor
 20666  1B30  0878               	movf	i1Division@value,w
 20667  1B31  319F  2705         	fcall	i1___lbdiv
 20668  1B33  00F7               	movwf	??i1_Division+1
 20669  1B34  0877               	movf	??i1_Division+1,w
 20670  1B35  00F9               	movwf	i1Division@result
 20671                           
 20672                           ;Dimmer_B1.c: 1438: return result;
 20673  1B36  0879               	movf	i1Division@result,w
 20674  1B37  0008               	return
 20675  1B38                     __end_ofi1_Division:	
 20676                           
 20677                           	psect	text151
 20678  1F05                     __ptext151:	
 20679 ;; *************** function i1___lbdiv *****************
 20680 ;; Defined at:
 20681 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20682 ;; Parameters:    Size  Location     Type
 20683 ;;  dividend        1    wreg     unsigned char 
 20684 ;;  divisor         1    0[COMMON] unsigned char 
 20685 ;; Auto vars:     Size  Location     Type
 20686 ;;  dividend        1    2[COMMON] unsigned char 
 20687 ;;  __lbdiv         1    4[COMMON] unsigned char 
 20688 ;;  __lbdiv         1    3[COMMON] unsigned char 
 20689 ;; Return value:  Size  Location     Type
 20690 ;;                  1    wreg      unsigned char 
 20691 ;; Registers used:
 20692 ;;		wreg, status,2, status,0
 20693 ;; Tracked objects:
 20694 ;;		On entry : 0/0
 20695 ;;		On exit  : 0/0
 20696 ;;		Unchanged: 0/0
 20697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20698 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20699 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20701 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20702 ;;Total ram usage:        5 bytes
 20703 ;; Hardware stack levels used:    1
 20704 ;; This function calls:
 20705 ;;		Nothing
 20706 ;; This function is called by:
 20707 ;;		i1_Division
 20708 ;; This function uses a non-reentrant model
 20709 ;;
 20710                           
 20711                           
 20712                           ;psect for function i1___lbdiv
 20713  1F05                     i1___lbdiv:	
 20714                           
 20715                           ;incstack = 0
 20716                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 20717                           ;i1___lbdiv@dividend stored from wreg
 20718  1F05  00F2               	movwf	i1___lbdiv@dividend
 20719  1F06  01F4               	clrf	i1___lbdiv@quotient
 20720  1F07  0870               	movf	i1___lbdiv@divisor,w
 20721  1F08  1903               	btfsc	3,2
 20722  1F09  2F24               	goto	i1l6864
 20723  1F0A  01F3               	clrf	i1___lbdiv@counter
 20724  1F0B  0AF3               	incf	i1___lbdiv@counter,f
 20725  1F0C                     i1l6852:	
 20726  1F0C  1BF0               	btfsc	i1___lbdiv@divisor,7
 20727  1F0D  2F15               	goto	i1l6854
 20728  1F0E  1003               	clrc
 20729  1F0F  0DF0               	rlf	i1___lbdiv@divisor,f
 20730  1F10  3001               	movlw	1
 20731  1F11  00F1               	movwf	??i1___lbdiv
 20732  1F12  0871               	movf	??i1___lbdiv,w
 20733  1F13  07F3               	addwf	i1___lbdiv@counter,f
 20734  1F14  2F0C               	goto	i1l6852
 20735  1F15                     i1l6854:	
 20736  1F15  1003               	clrc
 20737  1F16  0DF4               	rlf	i1___lbdiv@quotient,f
 20738  1F17  0870               	movf	i1___lbdiv@divisor,w
 20739  1F18  0272               	subwf	i1___lbdiv@dividend,w
 20740  1F19  1C03               	skipc
 20741  1F1A  2F1F               	goto	L11
 20742  1F1B  0870               	movf	i1___lbdiv@divisor,w
 20743  1F1C  02F2               	subwf	i1___lbdiv@dividend,f
 20744  1F1D  1474               	bsf	i1___lbdiv@quotient,0
 20745  1F1E  1003               	clrc
 20746  1F1F                     L11:	
 20747  1F1F  0CF0               	rrf	i1___lbdiv@divisor,f
 20748  1F20  3001               	movlw	1
 20749  1F21  02F3               	subwf	i1___lbdiv@counter,f
 20750  1F22  1D03               	btfss	3,2
 20751  1F23  2F15               	goto	i1l6854
 20752  1F24                     i1l6864:	
 20753  1F24  0874               	movf	i1___lbdiv@quotient,w
 20754  1F25  0008               	return
 20755  1F26                     __end_ofi1___lbdiv:	
 20756  007E                     btemp	set	126	;btemp
 20757  007E                     pic14e$flags	set	126
 20758  007E                     wtemp	set	126
 20759  007E                     wtemp0	set	126
 20760  0080                     wtemp1	set	128
 20761  0082                     wtemp2	set	130
 20762  0084                     wtemp3	set	132
 20763  0086                     wtemp4	set	134
 20764  0088                     wtemp5	set	136
 20765  007F                     wtemp6	set	127
 20766  007E                     ttemp	set	126
 20767  007E                     ttemp0	set	126
 20768  0081                     ttemp1	set	129
 20769  0084                     ttemp2	set	132
 20770  0087                     ttemp3	set	135
 20771  007F                     ttemp4	set	127
 20772  007E                     ltemp	set	126
 20773  007E                     ltemp0	set	126
 20774  0082                     ltemp1	set	130
 20775  0086                     ltemp2	set	134
 20776  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         227
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      9      80
    BANK2            80      0      77
    BANK3            80      0      76
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  150084
                                              5 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1523
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5904
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    5904
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3656
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3656
                                             17 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   44980
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   44980
                                              3 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40406
                                             78 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4281
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35941
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     271
                                              4 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      4     4      0   10308
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20609
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2168
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1640
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    2981
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48360
       _DimmerLights_DimmingFunction
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48130
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27626
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     222
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3697
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20233
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     311
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              1 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27411
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27411
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     470
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4639
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4639
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 4     4      0    1682
                                             13 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1523
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     281
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     281
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     281
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     281
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     16C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     16C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Mar 17 10:54:17 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1D91                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l86 145F  
                                      l96 0844                                        l88 1473  
                                      l97 0840                                        l98 082E  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1F8D  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D1                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1A6F  
                  __end_of_setDelayOff_GO 0C95                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1795  
                    _setDimmerLights_Line 1B95                              ___ftadd@sign 004B  
                                     l100 083E                                       l303 1D9D  
                                     l304 1D9F                                       l235 08FA  
                    _setDimmerLights_SwOn 1339                                       l531 098A  
                                     l347 1FB7                                       l680 1506  
                                     l693 1B63                                       l768 1EBB  
                                     l882 1323                                       l795 0FBF  
                                     l884 1318                                       l893 1337  
                                     l887 1321                                       _GIE 005F  
                                     _CRC 00C8                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CD                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00C9              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1DAA                     _Buzzer_Initialization 19C6  
                         __end_of_ADC_Set 1A2B                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1D60               _setDimmerIntr_ControlStatus 1D48  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1A53  
                   _setDimmerLights_OnOff 0F3A          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l2212 10DA                                      l1261 12A9  
                                    l2226 0A7B                                      l2154 0550  
                                    l1275 1070                                      l1517 0628  
                                    l1285 0B7A                                      l2229 158A  
                                    l1526 1D90                                      l2158 049F  
                                    l1462 122F                                      l2159 04F0  
                                    l2184 1B6A                                      l1641 008B  
                                    l1490 10A4                                      l1650 01D9  
                                    l1642 0087                                      l1643 0082  
                                    l1811 06F8                                      l1485 108D  
                         __end_of_IOC_Set 1A90                                      l2525 1D0E  
                                    l1486 10A8                                      l1639 01FF  
                                    l2199 1793                                      l1649 01DB  
                                    l2545 0381                                      l1817 064B  
                                    l6010 03B1                                      l2547 024D  
                                    l6020 03C7                                      l6100 0D90  
                                    l6014 03B8                                      l6040 03FE  
                                    l6032 03E1                                      l6200 0BD9  
                                    l2729 1009                                      l6050 041A  
                                    l6042 0403                                      l6122 0DE2  
                                    l6210 0BF2                                      l7002 1D2B  
                                    l6060 044C                                      l6052 0424  
                                    l6044 0407                                      l6108 0DA9  
                                    l6140 0E33                                      l6070 0467  
                                    l6038 03F4                                      l6214 0C00  
                                    l6206 0BE6                                      l6302 0C47  
                                    l2919 0428                                      l6056 043A  
                                    l6080 0D39                                      l6152 0E4F  
                                    l6144 0E3B                                      l6128 0DF8  
                                    l6208 0BEF                                      l6312 0C77  
                                    l7024 0F81                                      l7032 0F9F  
                                    l2890 15D1                                      l7026 0F98  
                                    l6156 0E57                                      l6180 0B9B  
                                    l6316 0C8B                                      l7140 1058  
                                    l6086 0D4F                                      l7070 13F6  
                                    l7062 0FFD                                      l7046 0FCE  
                                    l6280 11B1                                      l6264 136C  
                                    l2896 15E8                                      l6352 1718  
                                    l6512 157D                                      l7232 1768  
                                    l7216 1746                                      l6266 1372  
                                    l8026 077E                                      l6450 1FD3  
                                    l8114 09CF                                      l8106 09B0  
                                    l6268 137D                                      l8052 1288  
                                    l8212 0069                                      l6532 0A98  
                                    l7228 175F                     _setDimmerLights_SwOff 1183  
                          _Load_Main$3999 002A                                      l6198 0BCB  
                                    l6710 1088                                      l8230 008A  
                                    l6542 0AE8                                      l7262 1BF5  
                                    l8134 09FE                                      l8118 09D7  
                                    l8150 0CC6                                      l7416 1330  
                                    l7408 131A                                      l6720 109F  
                                    l6712 1091                                      l7280 1129  
                                    l6448 1FC8                                      l6528 0A93  
                                    l6800 0A19                                      l5922 13D3  
                                    l5914 13C2                                      l5906 13A4  
                                    l6482 1D7B                                      l7370 17C4  
                                    l7426 1A77                                      l8410 05FB  
                                    l7290 1144                                      l7354 1C8C  
                                    l6810 0A65                                      l6802 0A20  
                                    l8162 0D0B                                      l8154 0CDD  
                                    l5908 13B0                                      l5860 15AE  
                                    l6740 11CB                                      l7380 17EC  
                                    l8412 05D6                                      l8308 01C1  
                                    l8252 00E0                                      l7196 1BE4  
                                    l6564 07F0                                      l6804 0A3B  
                                    l8180 120F                                      l5918 13CB  
                                    l5870 15D6                                      l5862 15B8  
                                    l6486 1D8A                                      l7382 17F3  
                                    l8414 0603                                      l8422 061E  
                                    l7606 1BC2                                      l7286 113B  
                                    l7278 111D                                      l8246 00AE  
                                    l6806 0A5D                                      l6814 0A69  
                                    l8158 0CF4                                      l5872 15DE  
                                    l5864 15BD                                      l5856 15A7  
                                    l7368 17BD                                      l8416 060D  
                                    l7632 0B73                                      l7624 0B18  
                                    l8344 01EE                                      l6808 0A61  
                                    l5890 1391                                      l6826 1F2E  
                                    l6762 1BFF                                      l6754 11EA  
                                    l6746 11D4                                      l7618 0B03  
                                    l7730 06E6                                      l6828 1F37  
                                    l5980 1C16                                      l8380 0582  
                                    l8284 0172                                      l8292 019B  
                                    l7580 1ED0                                      l5966 1B45  
                                    l6838 1F46                                      l6766 1C06  
                                    l8374 0572                                      l8278 0163  
                                    l8622 1DF0                                      l8702 12DD  
                                    l7718 06CF                                      l7582 1ED3  
                                    l5896 139C                                      l6768 1C0B  
                                    l5976 1C10                                      l8392 05B9  
                                    l8384 0591                                      l8288 018F  
                                    l8616 1DE7                                      l8712 12ED  
                                    l8640 1E5A                                      l8800 0916  
                                    l7824 1D13                                      l7728 06E4  
                                    l7680 064E                                      l8394 0594  
                                    l7922 1003                                      l8298 01AB  
                                    l8618 1DEA                                      l8650 1F73  
                                    l8706 12E4                                      l8642 1E60  
                                    l6794 0A04                                      l7842 0237  
                                    l7586 1ED8                                      l8396 05C1  
                                    l8652 1F76                                      l8708 12E7  
                                    l8820 0861                                      l7828 1D19  
                   _myMain_Initialization 1CA1                                      l7942 0818  
                                    l5998 1F53                                      l8670 1F9A  
                                    l8910 04FF                                      l7686 065D  
                                    l8656 1F7C                                      l8840 0879  
                                    l8824 0867                                      l7688 0660  
                                    l8674 1FA0                                      l8842 0892  
                                    l8818 085E                                      l8762 08C6  
                                    l7882 02F5                                      l7858 0280  
                                    l8668 1F97                                      l8764 08C9  
                                    l8924 0531                                      l7868 02B5  
                                    l7892 0329                                      l8782 08E1  
                                    l8696 12D4                                      l8792 0909  
                                    l8768 08CF                                      _CFGS 0CAE  
                                    l7978 1EBD                                      l8698 12D7  
                                    l8794 090D                                      l8786 0900  
                                    l8938 0549                                      l8796 0910  
                                    l8788 0903                                      l8896 04EB  
                                    l8992 14B6                              __CFG_WDTE$ON 0000  
                                    l8988 14AB                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5005 0D61  
                                    u5015 0D71                                      u5025 0D91  
                                    u5035 0DA0                                      u5115 0E3C  
                                    u5045 0DAA                                      u5125 0E42  
                                    u5205 0BA2                                      u4505 15D9  
                                    u5155 0E58                                      u5235 0BCC  
                                    _PEIE 005E                                      u4605 13B1  
                                    u5165 0E5E                                      u5085 0E04  
                                    u4615 13BB                                      u4535 15EF  
                                    u5095 0E14                                      u4625 13C3  
                                    u4465 15B3                                      u5265 0BE7  
                                    u5435 0C53                                      u4485 15CC  
                                    u5470 16D3                                      u6415 1E1F  
                                    u4585 13A7                                      u4905 0408  
                                    u5475 16D1                                      u8115 09BF  
                                    u4845 03E2                                      u7405 06A1  
                                    u4935 041B                                      u8055 12A0  
                                    u5575 1FBD                                      u8215 0CB9  
                                    u6705 112A                                      u6385 1D01  
                                    u7425 06B8                                      u8225 0CD0  
                                    u4875 03F5                                      u6715 1134  
                                    u8235 0CE7                                      u6725 113C  
                                    u7445 06D6                                      u8165 09EE  
                                    u8245 0CFE                                      u8255 0D15  
                                    u8435 00AC                                      u8700 0601  
                                    u6685 1120                                      u8445 00DE  
                                    u9325 0520                                      u7815 100A  
                                    u8535 01A2                                      u8455 0122  
                                    u8295 1227                                      u8705 05DF  
                                    u7825 100F                                      u8670 05BF  
                                    u7855 080E                                      u9295 04C3  
                                    u8675 059D                                      u8875 1CD7  
                                    _LWLO 0CAD                                      _RSSI 00CE  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1E13                _setDimmerLights_DimmingRun 1DF8  
                                    _Buz1 0120                                      _Load 0139  
                                    _Temp 00D7                                      _main 1487  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0991  
                         __end_of_RF_Main 19D2                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B13  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 002F  
    __end_of_DimmerLights_DimmingFunction 1339     __size_of_DimmerLights_DimmingFunction 0046  
            _DimmerLights_DimmingFunction 12F3                __end_of_setRFSW_AdjControl 0AFC  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2293 0023                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 1D32  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1D1C                    _getDimmerLights_Status 1B84  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 19E8  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00CB  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                           __end_of___awdiv 13DA  
                         __end_of___lbdiv 1F48                           __end_of___ftadd 047F  
                         __end_of___ftdiv 0DCB                           __end_of___ftneg 1A5C  
                         __end_of___ftmul 0E7F                           ___awdiv@divisor 0020  
                                   _T1CON 0018                           __end_of___fttol 0C09  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 114B  
                                   i1l852 1171                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1D07  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 16C9  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1664  
                                   _Light 0138                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1E86                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1B07        DimmerLights_DimmingFunction@lights 0021  
                                   _getAD 1EC5                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1C55  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1A85                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1C31                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___lbdiv 0021  
                     _getAll_Sw_KeyStatus 1BB7                        _setRF_DimmerLights 16C9  
                         ___lbdiv@divisor 0020               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0023  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0067  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
             ??_setDimmerLights_DimmingOn 0022                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1B56                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 14E2                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 19EC            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0554                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1B74  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0A03                            _setMemory_Data 1AE3  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 13DA                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                _getMain_All_LightsStatus 1A65                  __size_of_setRFSW_Control 005E  
                      _RF_Timeout_Counter 1CC8                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0922  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E          __end_of_getDimmerIntr_Dimming_Sw 1B47  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1A42                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1F6A                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 15FF                  _getMain_All_Error_Status 1077  
                setRFSW_Control@rfDimming 00E6                                    _IOCBF2 1CB2  
                                  i1l1224 001A                                    i1l8008 1A4F  
                                  i1l7508 1267                                    i1l7452 1158  
                                  i1l7464 1167                                    i1l7458 115F  
                                  i1l6852 1F0C                                    i1l8508 0012  
                                  i1l6854 1F15                                    i1l6864 1F24  
                                  i1l7998 1E7F                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0022                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1DC4  
                                  u795_25 1E7A                                    _WDTCON 0097  
    __end_of_setDimmerLights_DimmingClose 1A11     __size_of_setDimmerLights_DimmingClose 0006  
            _setDimmerLights_DimmingClose 1A0B                      Exception_Main@i_3636 0032  
                      DelayTime_1us@count 0020                        setRF_AdjControl@sw 0027  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1CF2                                    _Dimmer 012C  
                                  _DlySw1 01C7                          _setRF_AdjControl 07C6  
                ?_setOverTemp_ADV_Restore 0070             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1C0D                __end_of_Mcu_Initialization 1C43  
                     __end_of_Buzzer_Main 084B                                    _Memory 0220  
                        i1Division@result 0079                                    _Timer1 0131  
                                  ___bmul 1C0D                    __end_of_Exception_Main 0629  
                    Exception_Main@lights 0035                                    ___wmul 1000  
                     __size_ofi1_Division 000D                                 ??___awdiv 0024  
                               ??___lbdiv 0021                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D5                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1C8E  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1C7B                                    _s_data 00D6  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 11BC  
                                  _myMain 00AF                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1AEF                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 142E  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 19CC          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1D78          __end_of_setDimmerIntr_Dimming_Sw 1D48  
                   ___ftmul@f3_as_product 0039                         __end_ofi1___lbdiv 1F26  
               _setDimmerLights_DimmingOn 1FD8                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CA1  
             getMain_Lights_Count@status1 0021               __size_of_DimmerLights_IOC_1 003D  
                   __end_of_SwPointSelect 1B2B               __size_of_DimmerLights_TMR_1 0038  
            __size_of_Flash_Memory_Modify 0086                   __size_of_LedPointSelect 000C  
         setDimmerIntr_Dimming_Sw@command 0020                        setTemp_Main@TempGO 006C  
                        ___lbdiv@dividend 0022                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1D07  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004F  
         setDimmerIntr_DimmingValue@value 0062           getDimmerIntr_DimmingValue@value 0022  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5423 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
           ?_setDimmerLights_DimmingClose 0070                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK3 1EE5  
                           __end_of_getAD 1EE5                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 19E0  
                         _getSw_KeyStatus 1BEA                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
          ??_DimmerLights_DimmingFunction 0020          ??_getDimmerLights_PercentToValue 005C  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006B  
           ??_Flash_Memory_Initialization 0024                          ___lbdiv@quotient 0024  
                    _getMain_Lights_Count 1A7A                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0205         setDimmerIntr_ControlStatus@lights 0022  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1ABF  
              __end_of_set_TimeoutCleared 1A05           setDimmerIntr_MaxmumValue@lights 0064  
                      __size_of_getRxData 0067                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1AB3  
                    __size_of_setLED_Main 0036                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 19D2  
                      ??_CC2500_WriteByte 0020                                 ?_Division 0025  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 0801  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 19D8                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 19D8  
                           ??_Switch_Main 0034                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00CC                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0020                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1487  
                          _getDelayOff_GO 1BA6                       _CC2500_WriteCommand 1DDE  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 1540  
           ??_DimmerLights_Initialization 0064                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
       __size_of_getDimmerIntr_Dimming_Sw 000F                                _getLoad_AD 0991  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1A32  
               ?_getDimmerIntr_Dimming_Sw 0070                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1A24  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 0C95  
      __end_of_DimmerLights_SelectPointer 1AB3                _DimmerLights_SelectPointer 1AA7  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 1A9B  
                      _setRFSW_AdjControl 0A7C                    __end_of_setProductData 1ABF  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 1A4A  
                                 _IOC_Set 1A85                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006A     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                              ??i1_Division 0076  
                       _Flash_Memory_Main 126E                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1DAA                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 19CF  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0026                                   _WDT_Set 1B07  
         __end_of_setControl_Lights_Table 0A7C                           setRF_Main@error 00E9  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 142E  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 1B1F                           __size_of_IO_Set 001A  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 0018  
       __size_of_setDimmerIntr_Dimming_Sw 0016                         __end_of_getBuz_GO 1BD9  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1BB7            __end_of_getDimmerLights_Status 1B95  
                       __end_of_getRxData 1795                   __end_of_getSw_KeyStatus 1BFB  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0065                            ??_setTemp_Main 0065  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 1386            ??_setDimmerLights_DimmingClose 0023  
                                 ___lbdiv 1F26                                   ___ftadd 0389  
                                 ___ftdiv 0D22                                   ___ftneg 1A53  
                         __size_of___wmul 001E                                   ___ftmul 0DCB  
                                 ___fttol 0B82                       __end_of_Switch_Main 1A32  
                      __end_ofi1_Division 1B38                                   ___lwdiv 1114  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1BD9                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0039  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 11F5                                   __ptext2 1CA1  
                                 __ptext3 0C95                                   __ptext4 0991  
                                 __ptext5 1EC5                                   __ptext6 1C43  
                                 __ptext7 0002                                   __ptext8 19D5  
                                 __ptext9 0629                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
                      i1___lbdiv@dividend 0072                 __end_of_Flash_Memory_Main 12AF  
               __end_of_Flash_Memory_Read 1DC4                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 047F                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 19DC                  __end_of_setRF_AdjControl 0800  
                       _DimmerLights_Main 1EA5            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1A0B                __end_of_CC2500_ClearRXFIFO 19F4  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 19F8  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EE                            _LedPointSelect 1AD7  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1A9B                                   clrloop0 1A18  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1A00  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 101E                             _DelayTime_1us 1FB2  
                       __end_of_setTxData 0F3A                __end_of_Flash_Memory_Write 1077  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 1A11  
              __end_of_setRF_TransceiveGO 1C7B                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 1A12                                _setSw_Main 0205  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 0030  
                       _CC2500_ReadStatus 1F8D                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1C1F                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                      i1___lbdiv@quotient 0074                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 084B                             _CC2500_TxData 08B6  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0AFC  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1800  
                           _setCmd_Status 1D78                       _Flash_Memory_Unlock 1A5C  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 006A  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1EC5  
                      _Mcu_Initialization 1C31                  __size_of_CC2500_PowerRST 0044  
        __size_of_setOverTemp_ADV_Restore 001B              __end_of_setRF_TimeoutCleared 19F0  
                    __end_of_my_MainTimer 1231                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1AE3  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002D  
        setDimmerIntr_DimmingValue@lights 0064          getDimmerIntr_DimmingValue@lights 0021  
                               i1___lbdiv 1F05                 __end_of_CC2500_InitSetREG 1048  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0020  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 1FB2                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0022           getMain_All_Error_Status@command 0025  
                             ___ftdiv@exp 003C         __end_of_setDimmerLights_DimmingOn 2000  
                        ??_Exception_Main 002D                             i1Division@num 0075  
                          __end_of_IO_Set 1DDE                      _setRF_Initialization 1A90  
                      _setMemory_LoopSave 1C8E                               _Switch_Main 1A2B  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1BEA                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1CDD  
             ??_DimmerIntr_Initialization 0062                      ??_Mcu_Initialization 0021  
             __end_of_getAll_Sw_KeyStatus 1BC8                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0020  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1C1F  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 101E                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001F  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 11F5                             __pbitbssBANK1 0778  
           __size_of_setDimmerLights_Line 0011             __size_of_setDimmerLights_SwOn 004D  
                          __end_of_setBuz 1487                __end_of_DimmerLights_IOC_1 126E  
                    _CC2500_FrequencyCabr 1B13                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1540  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 1183  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1A3A  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                              ?i1___lbdiv 0070              ?_setDimmerIntr_ControlStatus 0020  
              __end_of_CC2500_InitPATable 1EA5           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 06FC                            ??_RF_RxDisable 0024  
  __end_of_getDimmerLights_PercentToValue 1664   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 15FF                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005E  
                     __size_of_getLoad_OK 0008             setRF_AdjControl@dimmingStatus 0026  
                      _set_TimeoutCleared 1A00         __end_of_setDimmerIntr_MaxmumValue 1ACB  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0169                         __size_of_Division 000F  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 008D  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 19D5                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CF  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0034                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1A6F                                 _Tx_Length 00D3  
                             __pdataBANK3 01CC                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 10AA  
                        _CC2500_SIDLEMode 19F8                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022            getDimmerIntr_Dimming_Sw@lights 0020  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002E  
          getDimmerIntr_Dimming_Sw@status 0021                                 ___latbits 0003  
                        _setMemory_Modify 1C55                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E5  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 14E2                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0161  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1E4A                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EE  
                          getRxData@error 006F               __size_of_LED_Initialization 0004  
                    _setRF_TimeoutCleared 19EC                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0030                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1BFB  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002C  
                  _setTemp_Initialization 0800                                 _getBuz_GO 1BC8  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 07C6  
             _Flash_Memory_Initialization 06FC                                  ?___awdiv 0020  
                               __ptext100 1A65                                 __ptext101 1BA6  
                                ?___lbdiv 0020                                 __ptext110 1B56  
                               __ptext102 1BFB                                 __ptext111 1D1C  
                               __ptext103 13DA                                 __ptext120 15FF  
                               __ptext112 1A32                                 __ptext104 0E7F  
                               __ptext121 0B82                                 __ptext113 1077  
                               __ptext105 1C68                                 __ptext130 19DC  
                               __ptext122 1A53                                 __ptext114 12F3  
                               __ptext106 16C9                                 __ptext131 0922  
                               __ptext123 0DCB                                 __ptext115 1A1D  
                               __ptext107 1B95                                 __ptext140 19D8  
                               __ptext132 1AB3                                 __ptext124 0D22  
                               __ptext116 19C5                                 __ptext108 1ABF  
                               __ptext141 1A05                                 __ptext133 1339  
                               __ptext125 0389                                 __ptext117 14E2  
                               __ptext109 1D32                                  ?___ftadd 0041  
                               __ptext150 1B2B                                 __ptext142 1A9B  
                               __ptext134 142E                                 __ptext126 1F48  
                               __ptext118 1C55                                 __ptext151 1F05  
                               __ptext143 0801                                 __ptext135 1386  
                               __ptext127 159E                                 __ptext119 1664  
                               __ptext144 19C6                                 __ptext136 1B38  
                               __ptext128 1B47                                 __ptext137 1183  
                               __ptext129 1F26                                 __ptext146 1E67  
                               __ptext138 1B84                                 __ptext147 114B  
                               __ptext139 1AA7                                 __ptext148 1A4A  
                               __ptext149 1231                                 _getRxData 172E  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 159E                          ??_setProductData 0063  
                 _setOverTemp_ADV_Restore 1E13             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 19C9  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0020  
                      __end_of_TouchPower 1D1C                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1B65  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 1B56  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00C6  
                       ?_setRF_AdjControl 0070                                 _r_address 00D4  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 11BC  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1CB4  
                             ??i1___lbdiv 0071                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                        ??_setRF_AdjControl 0024  
                           _SwPointSelect 1B1F                       __end_of_setLED_Main 1114  
                        ??_getDelayOff_GO 0022                         i1___lbdiv@divisor 0070  
                       i1___lbdiv@counter 0073                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 19D5                         _CC2500_rfSettings 182F  
                          ___wmul@product 0024                                  _LED_Main 19E4  
                         SwPointSelect@sw 0021                                 clear_ram0 1A17  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 11F5                                 _setTxData 0E7F  
     __end_of_DimmerLights_Initialization 1A24               _DimmerLights_Initialization 1A1D  
                  _Flash_Memory_Main$3164 0028                        _CC2500_ClearRXFIFO 19F0  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 19F4  
                _getDimmerIntr_Dimming_Sw 1B38                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1CC8  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 0018  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 000C  
                      _Flash_Memory_Write 1048                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1E67  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1AFB  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C68                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 1B74                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1DF8                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1C43                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0021                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D3                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00CA  
                            setSw_Main@sw 0033                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 0009            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 1AFB  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 10DE  
                   _DlyOff_Initialization 1A05         __size_of_getMain_All_LightsStatus 000A  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 1B47  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1D60               setDimmerLights_OnOff@lights 00E5  
                _setDimmerIntr_Dimming_Sw 1D32                                  _Fosc_Set 19E8  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 00E5  
                      __end_of_getLoad_AD 0A03                        __end_of_getLoad_OK 1A3A  
                   _Switch_Initialization 19FC         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 0D22  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1D91                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 000C                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00D2                               ??_Temp_Main 006F  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 00E7             _getMain_All_Error_Status$3624 0021  
           _getMain_All_Error_Status$3625 0023                  __end_of_getDimmer_LoadGO 1A42  
                     _Load_Initialization 19C9          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
               ??_setOverTemp_ADV_Restore 0020                              _setTemp_Main 0629  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0022  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1F48                          ??_LedPointSelect 0020  
                                ___ftpack 159E             __size_of_getMain_Lights_Count 000B  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 10DE                __end_of_setRF_DimmerLights 172E  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1A4A                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 1E13  
                                __ptext11 19D2                                  __ptext20 1A00  
                                __ptext12 0800                                  __ptext21 1CF2  
                                __ptext13 1A2B                                  __ptext30 07C6  
                                __ptext22 19FC                                  __ptext14 0205  
                                __ptext31 1540                                  __ptext23 1B74  
                                __ptext15 1CB4                                  __ptext40 1E4A  
                                __ptext32 0A7C                                  __ptext24 19CF  
                                __ptext16 1FD8                                  __ptext41 1CDD  
                                __ptext33 1DF8                                  __ptext25 047F  
                                __ptext17 1BEA                                  __ptext50 19F0  
                                __ptext42 19F8                                  __ptext34 1BD9  
                                __ptext26 172E                                  __ptext18 1B1F  
                                __ptext51 1DDE                                  __ptext43 12AF  
                                __ptext35 1BC8                                  __ptext27 10AA  
                                __ptext19 1D07                                  __ptext60 1DC4  
                                __ptext52 19EC                                  __ptext44 101E  
                                __ptext36 1B65                                  __ptext28 1C8E  
                                __ptext61 1A85                                  __ptext53 1CC8  
                                __ptext45 1E86                                  __ptext37 08B6  
                                __ptext29 0A03                                  __ptext70 1114  
                                __ptext62 19E8                                  __ptext54 1D91  
                                __ptext46 1F6A                                  __ptext38 084B  
                                __ptext71 19C9                                  __ptext63 1A24  
                                __ptext55 19CC                                  __ptext47 1B13  
                                __ptext39 1F8D                                  __ptext80 1AEF  
                                __ptext72 1E2E                                  __ptext64 0053  
                                __ptext56 1A90                                  __ptext48 1FB2  
                                __ptext81 06FC                                  __ptext73 19E4  
                                __ptext65 1A7A                                  __ptext57 1C31  
                                __ptext49 19F4                                  __ptext90 0F3A  
                                __ptext82 1AE3                                  __ptext74 10DE  
                                __ptext66 1A42                                  __ptext58 1B07  
                                __ptext91 11BC                                  __ptext83 1048  
                                __ptext75 19E0                                  __ptext67 1A3A  
                                __ptext59 1AFB                                  __ptext92 1AD7  
                                __ptext84 1A5C                                  __ptext76 1C1F  
                                __ptext68 1C7B                                  __ptext93 1A0B  
                                __ptext85 1DAA                                  __ptext77 126E  
                                __ptext69 1000                                  __ptext94 1D60  
                                __ptext86 0554                                  __ptext78 1BB7  
                                __ptext95 1ACB                                  __ptext87 1A6F  
                                __ptext79 0AFC                                  __ptext96 1D48  
                                __ptext88 1EA5                                  __ptext97 0C09  
                                __ptext89 1795                                  __ptext98 1C0D  
                                __ptext99 1D78                                  __product 01CC  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1A7A              __end_of_setDimmerLights_Main 1800  
            __end_of_setDimmerLights_Line 1BA6                        _DimmerLights_IOC_1 1231  
            __end_of_setDimmerLights_SwOn 1386                              ??_setSw_Main 0031  
                  ??_setRF_TimeoutCleared 0020              ??_setDimmerLights_DimmingRun 0023  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1CB4        __size_of_DimmerIntr_Initialization 005E  
                         ??_getCmd_Status 0020                        _DimmerLights_TMR_1 114B  
                __end_of_CC2500_SIDLEMode 19FC                setDimmerLights_Main@lights 00E6  
             __end_of_DelayOffPointSelect 1AA7                  setOverTemp_ADV_Restore@i 0021  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1E4A  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1E86  
                __end_of_setMemory_Modify 1C68                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 0554                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 006E  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1CDD  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6482 0022  
                                main@argc 00EA                                  main@argv 00EC  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6479 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 12AF  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1AD7                _setDimmerIntr_DimmingValue 1ACB  
             __end_of_Flash_Memory_Modify 0B82              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 10AA               __end_of_Flash_Memory_Unlock 1A65  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1F6A  
                      __end_of_setSw_Main 0389                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0029           __end_of_setOverTemp_ADV_Restore 1E2E  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0020  
              setDimmerLights_Line@lights 0020                   setDimmerLights_SwOff@sw 0022  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0069                           setDelayOff_GO@j 006A  
                         setDelayOff_GO@k 006B                   ??_CC2500_PowerOnInitial 0029  
                   setTemp_Main@SafeValue 0068    __end_of_setDimmerLights_Initialization 19C6  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 19C5  
              ?_setDimmerIntr_MaxmumValue 0062                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                         getLoad_AD@ADRES 0029                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 19CC                               getLoad_AD@i 002B  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1AEF                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00D5  
                           Division@value 0028           __end_of_DelayOff_Initialization 19DC  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 19E0  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0C09               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 0079          __size_of_setDimmerLights_Dimming 0054  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00CA  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0065  
                              i1_Division 1B2B                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1FD8                ??_getDimmerIntr_Dimming_Sw 0020  
                 __end_of_CC2500_ReadByte 1E67              __end_of_setSw_Initialization 1B84  
                         _Timeout_Counter 1CF2           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 1B65  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 19E4  
          __end_of_setTemp_Initialization 0801                               Division@num 0025  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 19CF  
               __size_of_setRF_AdjControl 003A                     __end_of_CC2500_RxData 08B6  
                   __end_of_CC2500_TxData 0922                     _setLoad_AH_AL_Restore 1E2E  
                 __end_of_CC2500_PowerRST 12F3  
