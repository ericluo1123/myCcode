

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Jan 29 15:25:50 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	intentry,global,class=CODE,delta=2
   157                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text143,local,class=CODE,merge=1,delta=2
   163                           	dabs	1,0x7E,2
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  001A                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  008C                     	;# 
   192  008D                     	;# 
   193  008E                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0191                     	;# 
   217  0191                     	;# 
   218  0192                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0197                     	;# 
   225  0199                     	;# 
   226  019A                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  019C                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019F                     	;# 
   236  020D                     	;# 
   237  0210                     	;# 
   238  0211                     	;# 
   239  0211                     	;# 
   240  0212                     	;# 
   241  0212                     	;# 
   242  0213                     	;# 
   243  0213                     	;# 
   244  0214                     	;# 
   245  0214                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0216                     	;# 
   250  0216                     	;# 
   251  0217                     	;# 
   252  0217                     	;# 
   253  0291                     	;# 
   254  0291                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0298                     	;# 
   258  0298                     	;# 
   259  0299                     	;# 
   260  029A                     	;# 
   261  0394                     	;# 
   262  0395                     	;# 
   263  0396                     	;# 
   264  0FE4                     	;# 
   265  0FE5                     	;# 
   266  0FE6                     	;# 
   267  0FE7                     	;# 
   268  0FE8                     	;# 
   269  0FE9                     	;# 
   270  0FEA                     	;# 
   271  0FEB                     	;# 
   272  0FED                     	;# 
   273  0FEE                     	;# 
   274  0FEF                     	;# 
   275  0000                     	;# 
   276  0001                     	;# 
   277  0002                     	;# 
   278  0003                     	;# 
   279  0004                     	;# 
   280  0005                     	;# 
   281  0006                     	;# 
   282  0007                     	;# 
   283  0008                     	;# 
   284  0009                     	;# 
   285  000A                     	;# 
   286  000B                     	;# 
   287  000C                     	;# 
   288  000D                     	;# 
   289  000E                     	;# 
   290  0010                     	;# 
   291  0011                     	;# 
   292  0012                     	;# 
   293  0015                     	;# 
   294  0016                     	;# 
   295  0016                     	;# 
   296  0017                     	;# 
   297  0018                     	;# 
   298  0019                     	;# 
   299  001A                     	;# 
   300  001B                     	;# 
   301  001C                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  0090                     	;# 
   306  0091                     	;# 
   307  0092                     	;# 
   308  0095                     	;# 
   309  0096                     	;# 
   310  0097                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009B                     	;# 
   315  009C                     	;# 
   316  009D                     	;# 
   317  009E                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  0116                     	;# 
   322  0117                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  018E                     	;# 
   327  0191                     	;# 
   328  0191                     	;# 
   329  0192                     	;# 
   330  0193                     	;# 
   331  0193                     	;# 
   332  0194                     	;# 
   333  0195                     	;# 
   334  0196                     	;# 
   335  0197                     	;# 
   336  0199                     	;# 
   337  019A                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019C                     	;# 
   343  019C                     	;# 
   344  019D                     	;# 
   345  019E                     	;# 
   346  019F                     	;# 
   347  020D                     	;# 
   348  0210                     	;# 
   349  0211                     	;# 
   350  0211                     	;# 
   351  0212                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0213                     	;# 
   355  0214                     	;# 
   356  0214                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0216                     	;# 
   361  0216                     	;# 
   362  0217                     	;# 
   363  0217                     	;# 
   364  0291                     	;# 
   365  0291                     	;# 
   366  0292                     	;# 
   367  0293                     	;# 
   368  0298                     	;# 
   369  0298                     	;# 
   370  0299                     	;# 
   371  029A                     	;# 
   372  0394                     	;# 
   373  0395                     	;# 
   374  0396                     	;# 
   375  0FE4                     	;# 
   376  0FE5                     	;# 
   377  0FE6                     	;# 
   378  0FE7                     	;# 
   379  0FE8                     	;# 
   380  0FE9                     	;# 
   381  0FEA                     	;# 
   382  0FEB                     	;# 
   383  0FED                     	;# 
   384  0FEE                     	;# 
   385  0FEF                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0008                     	;# 
   395  0009                     	;# 
   396  000A                     	;# 
   397  000B                     	;# 
   398  000C                     	;# 
   399  000D                     	;# 
   400  000E                     	;# 
   401  0010                     	;# 
   402  0011                     	;# 
   403  0012                     	;# 
   404  0015                     	;# 
   405  0016                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001C                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  0090                     	;# 
   417  0091                     	;# 
   418  0092                     	;# 
   419  0095                     	;# 
   420  0096                     	;# 
   421  0097                     	;# 
   422  0099                     	;# 
   423  009A                     	;# 
   424  009B                     	;# 
   425  009B                     	;# 
   426  009C                     	;# 
   427  009D                     	;# 
   428  009E                     	;# 
   429  010C                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  011D                     	;# 
   435  018C                     	;# 
   436  018D                     	;# 
   437  018E                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0194                     	;# 
   444  0195                     	;# 
   445  0196                     	;# 
   446  0197                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020D                     	;# 
   459  0210                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0291                     	;# 
   476  0291                     	;# 
   477  0292                     	;# 
   478  0293                     	;# 
   479  0298                     	;# 
   480  0298                     	;# 
   481  0299                     	;# 
   482  029A                     	;# 
   483  0394                     	;# 
   484  0395                     	;# 
   485  0396                     	;# 
   486  0FE4                     	;# 
   487  0FE5                     	;# 
   488  0FE6                     	;# 
   489  0FE7                     	;# 
   490  0FE8                     	;# 
   491  0FE9                     	;# 
   492  0FEA                     	;# 
   493  0FEB                     	;# 
   494  0FED                     	;# 
   495  0FEE                     	;# 
   496  0FEF                     	;# 
   497  0000                     	;# 
   498  0001                     	;# 
   499  0002                     	;# 
   500  0003                     	;# 
   501  0004                     	;# 
   502  0005                     	;# 
   503  0006                     	;# 
   504  0007                     	;# 
   505  0008                     	;# 
   506  0009                     	;# 
   507  000A                     	;# 
   508  000B                     	;# 
   509  000C                     	;# 
   510  000D                     	;# 
   511  000E                     	;# 
   512  0010                     	;# 
   513  0011                     	;# 
   514  0012                     	;# 
   515  0015                     	;# 
   516  0016                     	;# 
   517  0016                     	;# 
   518  0017                     	;# 
   519  0018                     	;# 
   520  0019                     	;# 
   521  001A                     	;# 
   522  001B                     	;# 
   523  001C                     	;# 
   524  008C                     	;# 
   525  008D                     	;# 
   526  008E                     	;# 
   527  0090                     	;# 
   528  0091                     	;# 
   529  0092                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0099                     	;# 
   534  009A                     	;# 
   535  009B                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  010C                     	;# 
   541  010D                     	;# 
   542  010E                     	;# 
   543  0116                     	;# 
   544  0117                     	;# 
   545  011D                     	;# 
   546  018C                     	;# 
   547  018D                     	;# 
   548  018E                     	;# 
   549  0191                     	;# 
   550  0191                     	;# 
   551  0192                     	;# 
   552  0193                     	;# 
   553  0193                     	;# 
   554  0194                     	;# 
   555  0195                     	;# 
   556  0196                     	;# 
   557  0197                     	;# 
   558  0199                     	;# 
   559  019A                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019C                     	;# 
   565  019C                     	;# 
   566  019D                     	;# 
   567  019E                     	;# 
   568  019F                     	;# 
   569  020D                     	;# 
   570  0210                     	;# 
   571  0211                     	;# 
   572  0211                     	;# 
   573  0212                     	;# 
   574  0212                     	;# 
   575  0213                     	;# 
   576  0213                     	;# 
   577  0214                     	;# 
   578  0214                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0216                     	;# 
   583  0216                     	;# 
   584  0217                     	;# 
   585  0217                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0298                     	;# 
   591  0298                     	;# 
   592  0299                     	;# 
   593  029A                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  0010                     	;# 
   624  0011                     	;# 
   625  0012                     	;# 
   626  0015                     	;# 
   627  0016                     	;# 
   628  0016                     	;# 
   629  0017                     	;# 
   630  0018                     	;# 
   631  0019                     	;# 
   632  001A                     	;# 
   633  001B                     	;# 
   634  001C                     	;# 
   635  008C                     	;# 
   636  008D                     	;# 
   637  008E                     	;# 
   638  0090                     	;# 
   639  0091                     	;# 
   640  0092                     	;# 
   641  0095                     	;# 
   642  0096                     	;# 
   643  0097                     	;# 
   644  0099                     	;# 
   645  009A                     	;# 
   646  009B                     	;# 
   647  009B                     	;# 
   648  009C                     	;# 
   649  009D                     	;# 
   650  009E                     	;# 
   651  010C                     	;# 
   652  010D                     	;# 
   653  010E                     	;# 
   654  0116                     	;# 
   655  0117                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  018E                     	;# 
   660  0191                     	;# 
   661  0191                     	;# 
   662  0192                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0197                     	;# 
   669  0199                     	;# 
   670  019A                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019C                     	;# 
   676  019C                     	;# 
   677  019D                     	;# 
   678  019E                     	;# 
   679  019F                     	;# 
   680  020D                     	;# 
   681  0210                     	;# 
   682  0211                     	;# 
   683  0211                     	;# 
   684  0212                     	;# 
   685  0212                     	;# 
   686  0213                     	;# 
   687  0213                     	;# 
   688  0214                     	;# 
   689  0214                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0216                     	;# 
   694  0216                     	;# 
   695  0217                     	;# 
   696  0217                     	;# 
   697  0291                     	;# 
   698  0291                     	;# 
   699  0292                     	;# 
   700  0293                     	;# 
   701  0298                     	;# 
   702  0298                     	;# 
   703  0299                     	;# 
   704  029A                     	;# 
   705  0394                     	;# 
   706  0395                     	;# 
   707  0396                     	;# 
   708  0FE4                     	;# 
   709  0FE5                     	;# 
   710  0FE6                     	;# 
   711  0FE7                     	;# 
   712  0FE8                     	;# 
   713  0FE9                     	;# 
   714  0FEA                     	;# 
   715  0FEB                     	;# 
   716  0FED                     	;# 
   717  0FEE                     	;# 
   718  0FEF                     	;# 
   719  0000                     	;# 
   720  0001                     	;# 
   721  0002                     	;# 
   722  0003                     	;# 
   723  0004                     	;# 
   724  0005                     	;# 
   725  0006                     	;# 
   726  0007                     	;# 
   727  0008                     	;# 
   728  0009                     	;# 
   729  000A                     	;# 
   730  000B                     	;# 
   731  000C                     	;# 
   732  000D                     	;# 
   733  000E                     	;# 
   734  0010                     	;# 
   735  0011                     	;# 
   736  0012                     	;# 
   737  0015                     	;# 
   738  0016                     	;# 
   739  0016                     	;# 
   740  0017                     	;# 
   741  0018                     	;# 
   742  0019                     	;# 
   743  001A                     	;# 
   744  001B                     	;# 
   745  001C                     	;# 
   746  008C                     	;# 
   747  008D                     	;# 
   748  008E                     	;# 
   749  0090                     	;# 
   750  0091                     	;# 
   751  0092                     	;# 
   752  0095                     	;# 
   753  0096                     	;# 
   754  0097                     	;# 
   755  0099                     	;# 
   756  009A                     	;# 
   757  009B                     	;# 
   758  009B                     	;# 
   759  009C                     	;# 
   760  009D                     	;# 
   761  009E                     	;# 
   762  010C                     	;# 
   763  010D                     	;# 
   764  010E                     	;# 
   765  0116                     	;# 
   766  0117                     	;# 
   767  011D                     	;# 
   768  018C                     	;# 
   769  018D                     	;# 
   770  018E                     	;# 
   771  0191                     	;# 
   772  0191                     	;# 
   773  0192                     	;# 
   774  0193                     	;# 
   775  0193                     	;# 
   776  0194                     	;# 
   777  0195                     	;# 
   778  0196                     	;# 
   779  0197                     	;# 
   780  0199                     	;# 
   781  019A                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019C                     	;# 
   787  019C                     	;# 
   788  019D                     	;# 
   789  019E                     	;# 
   790  019F                     	;# 
   791  020D                     	;# 
   792  0210                     	;# 
   793  0211                     	;# 
   794  0211                     	;# 
   795  0212                     	;# 
   796  0212                     	;# 
   797  0213                     	;# 
   798  0213                     	;# 
   799  0214                     	;# 
   800  0214                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0216                     	;# 
   805  0216                     	;# 
   806  0217                     	;# 
   807  0217                     	;# 
   808  0291                     	;# 
   809  0291                     	;# 
   810  0292                     	;# 
   811  0293                     	;# 
   812  0298                     	;# 
   813  0298                     	;# 
   814  0299                     	;# 
   815  029A                     	;# 
   816  0394                     	;# 
   817  0395                     	;# 
   818  0396                     	;# 
   819  0FE4                     	;# 
   820  0FE5                     	;# 
   821  0FE6                     	;# 
   822  0FE7                     	;# 
   823  0FE8                     	;# 
   824  0FE9                     	;# 
   825  0FEA                     	;# 
   826  0FEB                     	;# 
   827  0FED                     	;# 
   828  0FEE                     	;# 
   829  0FEF                     	;# 
   830  0000                     	;# 
   831  0001                     	;# 
   832  0002                     	;# 
   833  0003                     	;# 
   834  0004                     	;# 
   835  0005                     	;# 
   836  0006                     	;# 
   837  0007                     	;# 
   838  0008                     	;# 
   839  0009                     	;# 
   840  000A                     	;# 
   841  000B                     	;# 
   842  000C                     	;# 
   843  000D                     	;# 
   844  000E                     	;# 
   845  0010                     	;# 
   846  0011                     	;# 
   847  0012                     	;# 
   848  0015                     	;# 
   849  0016                     	;# 
   850  0016                     	;# 
   851  0017                     	;# 
   852  0018                     	;# 
   853  0019                     	;# 
   854  001A                     	;# 
   855  001B                     	;# 
   856  001C                     	;# 
   857  008C                     	;# 
   858  008D                     	;# 
   859  008E                     	;# 
   860  0090                     	;# 
   861  0091                     	;# 
   862  0092                     	;# 
   863  0095                     	;# 
   864  0096                     	;# 
   865  0097                     	;# 
   866  0099                     	;# 
   867  009A                     	;# 
   868  009B                     	;# 
   869  009B                     	;# 
   870  009C                     	;# 
   871  009D                     	;# 
   872  009E                     	;# 
   873  010C                     	;# 
   874  010D                     	;# 
   875  010E                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  011D                     	;# 
   879  018C                     	;# 
   880  018D                     	;# 
   881  018E                     	;# 
   882  0191                     	;# 
   883  0191                     	;# 
   884  0192                     	;# 
   885  0193                     	;# 
   886  0193                     	;# 
   887  0194                     	;# 
   888  0195                     	;# 
   889  0196                     	;# 
   890  0197                     	;# 
   891  0199                     	;# 
   892  019A                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019C                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020D                     	;# 
   903  0210                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0291                     	;# 
   920  0291                     	;# 
   921  0292                     	;# 
   922  0293                     	;# 
   923  0298                     	;# 
   924  0298                     	;# 
   925  0299                     	;# 
   926  029A                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  0FE4                     	;# 
   931  0FE5                     	;# 
   932  0FE6                     	;# 
   933  0FE7                     	;# 
   934  0FE8                     	;# 
   935  0FE9                     	;# 
   936  0FEA                     	;# 
   937  0FEB                     	;# 
   938  0FED                     	;# 
   939  0FEE                     	;# 
   940  0FEF                     	;# 
   941  0000                     	;# 
   942  0001                     	;# 
   943  0002                     	;# 
   944  0003                     	;# 
   945  0004                     	;# 
   946  0005                     	;# 
   947  0006                     	;# 
   948  0007                     	;# 
   949  0008                     	;# 
   950  0009                     	;# 
   951  000A                     	;# 
   952  000B                     	;# 
   953  000C                     	;# 
   954  000D                     	;# 
   955  000E                     	;# 
   956  0010                     	;# 
   957  0011                     	;# 
   958  0012                     	;# 
   959  0015                     	;# 
   960  0016                     	;# 
   961  0016                     	;# 
   962  0017                     	;# 
   963  0018                     	;# 
   964  0019                     	;# 
   965  001A                     	;# 
   966  001B                     	;# 
   967  001C                     	;# 
   968  008C                     	;# 
   969  008D                     	;# 
   970  008E                     	;# 
   971  0090                     	;# 
   972  0091                     	;# 
   973  0092                     	;# 
   974  0095                     	;# 
   975  0096                     	;# 
   976  0097                     	;# 
   977  0099                     	;# 
   978  009A                     	;# 
   979  009B                     	;# 
   980  009B                     	;# 
   981  009C                     	;# 
   982  009D                     	;# 
   983  009E                     	;# 
   984  010C                     	;# 
   985  010D                     	;# 
   986  010E                     	;# 
   987  0116                     	;# 
   988  0117                     	;# 
   989  011D                     	;# 
   990  018C                     	;# 
   991  018D                     	;# 
   992  018E                     	;# 
   993  0191                     	;# 
   994  0191                     	;# 
   995  0192                     	;# 
   996  0193                     	;# 
   997  0193                     	;# 
   998  0194                     	;# 
   999  0195                     	;# 
  1000  0196                     	;# 
  1001  0197                     	;# 
  1002  0199                     	;# 
  1003  019A                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019C                     	;# 
  1009  019C                     	;# 
  1010  019D                     	;# 
  1011  019E                     	;# 
  1012  019F                     	;# 
  1013  020D                     	;# 
  1014  0210                     	;# 
  1015  0211                     	;# 
  1016  0211                     	;# 
  1017  0212                     	;# 
  1018  0212                     	;# 
  1019  0213                     	;# 
  1020  0213                     	;# 
  1021  0214                     	;# 
  1022  0214                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0216                     	;# 
  1027  0216                     	;# 
  1028  0217                     	;# 
  1029  0217                     	;# 
  1030  0291                     	;# 
  1031  0291                     	;# 
  1032  0292                     	;# 
  1033  0293                     	;# 
  1034  0298                     	;# 
  1035  0298                     	;# 
  1036  0299                     	;# 
  1037  029A                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0FE4                     	;# 
  1042  0FE5                     	;# 
  1043  0FE6                     	;# 
  1044  0FE7                     	;# 
  1045  0FE8                     	;# 
  1046  0FE9                     	;# 
  1047  0FEA                     	;# 
  1048  0FEB                     	;# 
  1049  0FED                     	;# 
  1050  0FEE                     	;# 
  1051  0FEF                     	;# 
  1052  0000                     	;# 
  1053  0001                     	;# 
  1054  0002                     	;# 
  1055  0003                     	;# 
  1056  0004                     	;# 
  1057  0005                     	;# 
  1058  0006                     	;# 
  1059  0007                     	;# 
  1060  0008                     	;# 
  1061  0009                     	;# 
  1062  000A                     	;# 
  1063  000B                     	;# 
  1064  000C                     	;# 
  1065  000D                     	;# 
  1066  000E                     	;# 
  1067  0010                     	;# 
  1068  0011                     	;# 
  1069  0012                     	;# 
  1070  0015                     	;# 
  1071  0016                     	;# 
  1072  0016                     	;# 
  1073  0017                     	;# 
  1074  0018                     	;# 
  1075  0019                     	;# 
  1076  001A                     	;# 
  1077  001B                     	;# 
  1078  001C                     	;# 
  1079  008C                     	;# 
  1080  008D                     	;# 
  1081  008E                     	;# 
  1082  0090                     	;# 
  1083  0091                     	;# 
  1084  0092                     	;# 
  1085  0095                     	;# 
  1086  0096                     	;# 
  1087  0097                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  010E                     	;# 
  1098  0116                     	;# 
  1099  0117                     	;# 
  1100  011D                     	;# 
  1101  018C                     	;# 
  1102  018D                     	;# 
  1103  018E                     	;# 
  1104  0191                     	;# 
  1105  0191                     	;# 
  1106  0192                     	;# 
  1107  0193                     	;# 
  1108  0193                     	;# 
  1109  0194                     	;# 
  1110  0195                     	;# 
  1111  0196                     	;# 
  1112  0197                     	;# 
  1113  0199                     	;# 
  1114  019A                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019C                     	;# 
  1120  019C                     	;# 
  1121  019D                     	;# 
  1122  019E                     	;# 
  1123  019F                     	;# 
  1124  020D                     	;# 
  1125  0210                     	;# 
  1126  0211                     	;# 
  1127  0211                     	;# 
  1128  0212                     	;# 
  1129  0212                     	;# 
  1130  0213                     	;# 
  1131  0213                     	;# 
  1132  0214                     	;# 
  1133  0214                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0216                     	;# 
  1138  0216                     	;# 
  1139  0217                     	;# 
  1140  0217                     	;# 
  1141  0291                     	;# 
  1142  0291                     	;# 
  1143  0292                     	;# 
  1144  0293                     	;# 
  1145  0298                     	;# 
  1146  0298                     	;# 
  1147  0299                     	;# 
  1148  029A                     	;# 
  1149  0394                     	;# 
  1150  0395                     	;# 
  1151  0396                     	;# 
  1152  0FE4                     	;# 
  1153  0FE5                     	;# 
  1154  0FE6                     	;# 
  1155  0FE7                     	;# 
  1156  0FE8                     	;# 
  1157  0FE9                     	;# 
  1158  0FEA                     	;# 
  1159  0FEB                     	;# 
  1160  0FED                     	;# 
  1161  0FEE                     	;# 
  1162  0FEF                     	;# 
  1163  0000                     	;# 
  1164  0001                     	;# 
  1165  0002                     	;# 
  1166  0003                     	;# 
  1167  0004                     	;# 
  1168  0005                     	;# 
  1169  0006                     	;# 
  1170  0007                     	;# 
  1171  0008                     	;# 
  1172  0009                     	;# 
  1173  000A                     	;# 
  1174  000B                     	;# 
  1175  000C                     	;# 
  1176  000D                     	;# 
  1177  000E                     	;# 
  1178  0010                     	;# 
  1179  0011                     	;# 
  1180  0012                     	;# 
  1181  0015                     	;# 
  1182  0016                     	;# 
  1183  0016                     	;# 
  1184  0017                     	;# 
  1185  0018                     	;# 
  1186  0019                     	;# 
  1187  001A                     	;# 
  1188  001B                     	;# 
  1189  001C                     	;# 
  1190  008C                     	;# 
  1191  008D                     	;# 
  1192  008E                     	;# 
  1193  0090                     	;# 
  1194  0091                     	;# 
  1195  0092                     	;# 
  1196  0095                     	;# 
  1197  0096                     	;# 
  1198  0097                     	;# 
  1199  0099                     	;# 
  1200  009A                     	;# 
  1201  009B                     	;# 
  1202  009B                     	;# 
  1203  009C                     	;# 
  1204  009D                     	;# 
  1205  009E                     	;# 
  1206  010C                     	;# 
  1207  010D                     	;# 
  1208  010E                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  011D                     	;# 
  1212  018C                     	;# 
  1213  018D                     	;# 
  1214  018E                     	;# 
  1215  0191                     	;# 
  1216  0191                     	;# 
  1217  0192                     	;# 
  1218  0193                     	;# 
  1219  0193                     	;# 
  1220  0194                     	;# 
  1221  0195                     	;# 
  1222  0196                     	;# 
  1223  0197                     	;# 
  1224  0199                     	;# 
  1225  019A                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019D                     	;# 
  1233  019E                     	;# 
  1234  019F                     	;# 
  1235  020D                     	;# 
  1236  0210                     	;# 
  1237  0211                     	;# 
  1238  0211                     	;# 
  1239  0212                     	;# 
  1240  0212                     	;# 
  1241  0213                     	;# 
  1242  0213                     	;# 
  1243  0214                     	;# 
  1244  0214                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0216                     	;# 
  1249  0216                     	;# 
  1250  0217                     	;# 
  1251  0217                     	;# 
  1252  0291                     	;# 
  1253  0291                     	;# 
  1254  0292                     	;# 
  1255  0293                     	;# 
  1256  0298                     	;# 
  1257  0298                     	;# 
  1258  0299                     	;# 
  1259  029A                     	;# 
  1260  0394                     	;# 
  1261  0395                     	;# 
  1262  0396                     	;# 
  1263  0FE4                     	;# 
  1264  0FE5                     	;# 
  1265  0FE6                     	;# 
  1266  0FE7                     	;# 
  1267  0FE8                     	;# 
  1268  0FE9                     	;# 
  1269  0FEA                     	;# 
  1270  0FEB                     	;# 
  1271  0FED                     	;# 
  1272  0FEE                     	;# 
  1273  0FEF                     	;# 
  1274  0000                     	;# 
  1275  0001                     	;# 
  1276  0002                     	;# 
  1277  0003                     	;# 
  1278  0004                     	;# 
  1279  0005                     	;# 
  1280  0006                     	;# 
  1281  0007                     	;# 
  1282  0008                     	;# 
  1283  0009                     	;# 
  1284  000A                     	;# 
  1285  000B                     	;# 
  1286  000C                     	;# 
  1287  000D                     	;# 
  1288  000E                     	;# 
  1289  0010                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0015                     	;# 
  1293  0016                     	;# 
  1294  0016                     	;# 
  1295  0017                     	;# 
  1296  0018                     	;# 
  1297  0019                     	;# 
  1298  001A                     	;# 
  1299  001B                     	;# 
  1300  001C                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0090                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0095                     	;# 
  1308  0096                     	;# 
  1309  0097                     	;# 
  1310  0099                     	;# 
  1311  009A                     	;# 
  1312  009B                     	;# 
  1313  009B                     	;# 
  1314  009C                     	;# 
  1315  009D                     	;# 
  1316  009E                     	;# 
  1317  010C                     	;# 
  1318  010D                     	;# 
  1319  010E                     	;# 
  1320  0116                     	;# 
  1321  0117                     	;# 
  1322  011D                     	;# 
  1323  018C                     	;# 
  1324  018D                     	;# 
  1325  018E                     	;# 
  1326  0191                     	;# 
  1327  0191                     	;# 
  1328  0192                     	;# 
  1329  0193                     	;# 
  1330  0193                     	;# 
  1331  0194                     	;# 
  1332  0195                     	;# 
  1333  0196                     	;# 
  1334  0197                     	;# 
  1335  0199                     	;# 
  1336  019A                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019C                     	;# 
  1342  019C                     	;# 
  1343  019D                     	;# 
  1344  019E                     	;# 
  1345  019F                     	;# 
  1346  020D                     	;# 
  1347  0210                     	;# 
  1348  0211                     	;# 
  1349  0211                     	;# 
  1350  0212                     	;# 
  1351  0212                     	;# 
  1352  0213                     	;# 
  1353  0213                     	;# 
  1354  0214                     	;# 
  1355  0214                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0216                     	;# 
  1360  0216                     	;# 
  1361  0217                     	;# 
  1362  0217                     	;# 
  1363  0291                     	;# 
  1364  0291                     	;# 
  1365  0292                     	;# 
  1366  0293                     	;# 
  1367  0298                     	;# 
  1368  0298                     	;# 
  1369  0299                     	;# 
  1370  029A                     	;# 
  1371  0394                     	;# 
  1372  0395                     	;# 
  1373  0396                     	;# 
  1374  0FE4                     	;# 
  1375  0FE5                     	;# 
  1376  0FE6                     	;# 
  1377  0FE7                     	;# 
  1378  0FE8                     	;# 
  1379  0FE9                     	;# 
  1380  0FEA                     	;# 
  1381  0FEB                     	;# 
  1382  0FED                     	;# 
  1383  0FEE                     	;# 
  1384  0FEF                     	;# 
  1385  0000                     	;# 
  1386  0001                     	;# 
  1387  0002                     	;# 
  1388  0003                     	;# 
  1389  0004                     	;# 
  1390  0005                     	;# 
  1391  0006                     	;# 
  1392  0007                     	;# 
  1393  0008                     	;# 
  1394  0009                     	;# 
  1395  000A                     	;# 
  1396  000B                     	;# 
  1397  000C                     	;# 
  1398  000D                     	;# 
  1399  000E                     	;# 
  1400  0010                     	;# 
  1401  0011                     	;# 
  1402  0012                     	;# 
  1403  0015                     	;# 
  1404  0016                     	;# 
  1405  0016                     	;# 
  1406  0017                     	;# 
  1407  0018                     	;# 
  1408  0019                     	;# 
  1409  001A                     	;# 
  1410  001B                     	;# 
  1411  001C                     	;# 
  1412  008C                     	;# 
  1413  008D                     	;# 
  1414  008E                     	;# 
  1415  0090                     	;# 
  1416  0091                     	;# 
  1417  0092                     	;# 
  1418  0095                     	;# 
  1419  0096                     	;# 
  1420  0097                     	;# 
  1421  0099                     	;# 
  1422  009A                     	;# 
  1423  009B                     	;# 
  1424  009B                     	;# 
  1425  009C                     	;# 
  1426  009D                     	;# 
  1427  009E                     	;# 
  1428  010C                     	;# 
  1429  010D                     	;# 
  1430  010E                     	;# 
  1431  0116                     	;# 
  1432  0117                     	;# 
  1433  011D                     	;# 
  1434  018C                     	;# 
  1435  018D                     	;# 
  1436  018E                     	;# 
  1437  0191                     	;# 
  1438  0191                     	;# 
  1439  0192                     	;# 
  1440  0193                     	;# 
  1441  0193                     	;# 
  1442  0194                     	;# 
  1443  0195                     	;# 
  1444  0196                     	;# 
  1445  0197                     	;# 
  1446  0199                     	;# 
  1447  019A                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019C                     	;# 
  1453  019C                     	;# 
  1454  019D                     	;# 
  1455  019E                     	;# 
  1456  019F                     	;# 
  1457  020D                     	;# 
  1458  0210                     	;# 
  1459  0211                     	;# 
  1460  0211                     	;# 
  1461  0212                     	;# 
  1462  0212                     	;# 
  1463  0213                     	;# 
  1464  0213                     	;# 
  1465  0214                     	;# 
  1466  0214                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0216                     	;# 
  1471  0216                     	;# 
  1472  0217                     	;# 
  1473  0217                     	;# 
  1474  0291                     	;# 
  1475  0291                     	;# 
  1476  0292                     	;# 
  1477  0293                     	;# 
  1478  0298                     	;# 
  1479  0298                     	;# 
  1480  0299                     	;# 
  1481  029A                     	;# 
  1482  0394                     	;# 
  1483  0395                     	;# 
  1484  0396                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0015                     	;# 
  1515  0016                     	;# 
  1516  0016                     	;# 
  1517  0017                     	;# 
  1518  0018                     	;# 
  1519  0019                     	;# 
  1520  001A                     	;# 
  1521  001B                     	;# 
  1522  001C                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0095                     	;# 
  1530  0096                     	;# 
  1531  0097                     	;# 
  1532  0099                     	;# 
  1533  009A                     	;# 
  1534  009B                     	;# 
  1535  009B                     	;# 
  1536  009C                     	;# 
  1537  009D                     	;# 
  1538  009E                     	;# 
  1539  010C                     	;# 
  1540  010D                     	;# 
  1541  010E                     	;# 
  1542  0116                     	;# 
  1543  0117                     	;# 
  1544  011D                     	;# 
  1545  018C                     	;# 
  1546  018D                     	;# 
  1547  018E                     	;# 
  1548  0191                     	;# 
  1549  0191                     	;# 
  1550  0192                     	;# 
  1551  0193                     	;# 
  1552  0193                     	;# 
  1553  0194                     	;# 
  1554  0195                     	;# 
  1555  0196                     	;# 
  1556  0197                     	;# 
  1557  0199                     	;# 
  1558  019A                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019C                     	;# 
  1564  019C                     	;# 
  1565  019D                     	;# 
  1566  019E                     	;# 
  1567  019F                     	;# 
  1568  020D                     	;# 
  1569  0210                     	;# 
  1570  0211                     	;# 
  1571  0211                     	;# 
  1572  0212                     	;# 
  1573  0212                     	;# 
  1574  0213                     	;# 
  1575  0213                     	;# 
  1576  0214                     	;# 
  1577  0214                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0216                     	;# 
  1582  0216                     	;# 
  1583  0217                     	;# 
  1584  0217                     	;# 
  1585  0291                     	;# 
  1586  0291                     	;# 
  1587  0292                     	;# 
  1588  0293                     	;# 
  1589  0298                     	;# 
  1590  0298                     	;# 
  1591  0299                     	;# 
  1592  029A                     	;# 
  1593  0394                     	;# 
  1594  0395                     	;# 
  1595  0396                     	;# 
  1596  0FE4                     	;# 
  1597  0FE5                     	;# 
  1598  0FE6                     	;# 
  1599  0FE7                     	;# 
  1600  0FE8                     	;# 
  1601  0FE9                     	;# 
  1602  0FEA                     	;# 
  1603  0FEB                     	;# 
  1604  0FED                     	;# 
  1605  0FEE                     	;# 
  1606  0FEF                     	;# 
  1607  0000                     	;# 
  1608  0001                     	;# 
  1609  0002                     	;# 
  1610  0003                     	;# 
  1611  0004                     	;# 
  1612  0005                     	;# 
  1613  0006                     	;# 
  1614  0007                     	;# 
  1615  0008                     	;# 
  1616  0009                     	;# 
  1617  000A                     	;# 
  1618  000B                     	;# 
  1619  000C                     	;# 
  1620  000D                     	;# 
  1621  000E                     	;# 
  1622  0010                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0015                     	;# 
  1626  0016                     	;# 
  1627  0016                     	;# 
  1628  0017                     	;# 
  1629  0018                     	;# 
  1630  0019                     	;# 
  1631  001A                     	;# 
  1632  001B                     	;# 
  1633  001C                     	;# 
  1634  008C                     	;# 
  1635  008D                     	;# 
  1636  008E                     	;# 
  1637  0090                     	;# 
  1638  0091                     	;# 
  1639  0092                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0099                     	;# 
  1644  009A                     	;# 
  1645  009B                     	;# 
  1646  009B                     	;# 
  1647  009C                     	;# 
  1648  009D                     	;# 
  1649  009E                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0116                     	;# 
  1654  0117                     	;# 
  1655  011D                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0191                     	;# 
  1660  0191                     	;# 
  1661  0192                     	;# 
  1662  0193                     	;# 
  1663  0193                     	;# 
  1664  0194                     	;# 
  1665  0195                     	;# 
  1666  0196                     	;# 
  1667  0197                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019C                     	;# 
  1675  019C                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  020D                     	;# 
  1680  0210                     	;# 
  1681  0211                     	;# 
  1682  0211                     	;# 
  1683  0212                     	;# 
  1684  0212                     	;# 
  1685  0213                     	;# 
  1686  0213                     	;# 
  1687  0214                     	;# 
  1688  0214                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0216                     	;# 
  1693  0216                     	;# 
  1694  0217                     	;# 
  1695  0217                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0298                     	;# 
  1701  0298                     	;# 
  1702  0299                     	;# 
  1703  029A                     	;# 
  1704  0394                     	;# 
  1705  0395                     	;# 
  1706  0396                     	;# 
  1707  0FE4                     	;# 
  1708  0FE5                     	;# 
  1709  0FE6                     	;# 
  1710  0FE7                     	;# 
  1711  0FE8                     	;# 
  1712  0FE9                     	;# 
  1713  0FEA                     	;# 
  1714  0FEB                     	;# 
  1715  0FED                     	;# 
  1716  0FEE                     	;# 
  1717  0FEF                     	;# 
  1718  0000                     	;# 
  1719  0001                     	;# 
  1720  0002                     	;# 
  1721  0003                     	;# 
  1722  0004                     	;# 
  1723  0005                     	;# 
  1724  0006                     	;# 
  1725  0007                     	;# 
  1726  0008                     	;# 
  1727  0009                     	;# 
  1728  000A                     	;# 
  1729  000B                     	;# 
  1730  000C                     	;# 
  1731  000D                     	;# 
  1732  000E                     	;# 
  1733  0010                     	;# 
  1734  0011                     	;# 
  1735  0012                     	;# 
  1736  0015                     	;# 
  1737  0016                     	;# 
  1738  0016                     	;# 
  1739  0017                     	;# 
  1740  0018                     	;# 
  1741  0019                     	;# 
  1742  001A                     	;# 
  1743  001B                     	;# 
  1744  001C                     	;# 
  1745  008C                     	;# 
  1746  008D                     	;# 
  1747  008E                     	;# 
  1748  0090                     	;# 
  1749  0091                     	;# 
  1750  0092                     	;# 
  1751  0095                     	;# 
  1752  0096                     	;# 
  1753  0097                     	;# 
  1754  0099                     	;# 
  1755  009A                     	;# 
  1756  009B                     	;# 
  1757  009B                     	;# 
  1758  009C                     	;# 
  1759  009D                     	;# 
  1760  009E                     	;# 
  1761  010C                     	;# 
  1762  010D                     	;# 
  1763  010E                     	;# 
  1764  0116                     	;# 
  1765  0117                     	;# 
  1766  011D                     	;# 
  1767  018C                     	;# 
  1768  018D                     	;# 
  1769  018E                     	;# 
  1770  0191                     	;# 
  1771  0191                     	;# 
  1772  0192                     	;# 
  1773  0193                     	;# 
  1774  0193                     	;# 
  1775  0194                     	;# 
  1776  0195                     	;# 
  1777  0196                     	;# 
  1778  0197                     	;# 
  1779  0199                     	;# 
  1780  019A                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019C                     	;# 
  1786  019C                     	;# 
  1787  019D                     	;# 
  1788  019E                     	;# 
  1789  019F                     	;# 
  1790  020D                     	;# 
  1791  0210                     	;# 
  1792  0211                     	;# 
  1793  0211                     	;# 
  1794  0212                     	;# 
  1795  0212                     	;# 
  1796  0213                     	;# 
  1797  0213                     	;# 
  1798  0214                     	;# 
  1799  0214                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0216                     	;# 
  1804  0216                     	;# 
  1805  0217                     	;# 
  1806  0217                     	;# 
  1807  0291                     	;# 
  1808  0291                     	;# 
  1809  0292                     	;# 
  1810  0293                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  029A                     	;# 
  1815  0394                     	;# 
  1816  0395                     	;# 
  1817  0396                     	;# 
  1818  0FE4                     	;# 
  1819  0FE5                     	;# 
  1820  0FE6                     	;# 
  1821  0FE7                     	;# 
  1822  0FE8                     	;# 
  1823  0FE9                     	;# 
  1824  0FEA                     	;# 
  1825  0FEB                     	;# 
  1826  0FED                     	;# 
  1827  0FEE                     	;# 
  1828  0FEF                     	;# 
  1829  0000                     	;# 
  1830  0001                     	;# 
  1831  0002                     	;# 
  1832  0003                     	;# 
  1833  0004                     	;# 
  1834  0005                     	;# 
  1835  0006                     	;# 
  1836  0007                     	;# 
  1837  0008                     	;# 
  1838  0009                     	;# 
  1839  000A                     	;# 
  1840  000B                     	;# 
  1841  000C                     	;# 
  1842  000D                     	;# 
  1843  000E                     	;# 
  1844  0010                     	;# 
  1845  0011                     	;# 
  1846  0012                     	;# 
  1847  0015                     	;# 
  1848  0016                     	;# 
  1849  0016                     	;# 
  1850  0017                     	;# 
  1851  0018                     	;# 
  1852  0019                     	;# 
  1853  001A                     	;# 
  1854  001B                     	;# 
  1855  001C                     	;# 
  1856  008C                     	;# 
  1857  008D                     	;# 
  1858  008E                     	;# 
  1859  0090                     	;# 
  1860  0091                     	;# 
  1861  0092                     	;# 
  1862  0095                     	;# 
  1863  0096                     	;# 
  1864  0097                     	;# 
  1865  0099                     	;# 
  1866  009A                     	;# 
  1867  009B                     	;# 
  1868  009B                     	;# 
  1869  009C                     	;# 
  1870  009D                     	;# 
  1871  009E                     	;# 
  1872  010C                     	;# 
  1873  010D                     	;# 
  1874  010E                     	;# 
  1875  0116                     	;# 
  1876  0117                     	;# 
  1877  011D                     	;# 
  1878  018C                     	;# 
  1879  018D                     	;# 
  1880  018E                     	;# 
  1881  0191                     	;# 
  1882  0191                     	;# 
  1883  0192                     	;# 
  1884  0193                     	;# 
  1885  0193                     	;# 
  1886  0194                     	;# 
  1887  0195                     	;# 
  1888  0196                     	;# 
  1889  0197                     	;# 
  1890  0199                     	;# 
  1891  019A                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019C                     	;# 
  1897  019C                     	;# 
  1898  019D                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  020D                     	;# 
  1902  0210                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0216                     	;# 
  1915  0216                     	;# 
  1916  0217                     	;# 
  1917  0217                     	;# 
  1918  0291                     	;# 
  1919  0291                     	;# 
  1920  0292                     	;# 
  1921  0293                     	;# 
  1922  0298                     	;# 
  1923  0298                     	;# 
  1924  0299                     	;# 
  1925  029A                     	;# 
  1926  0394                     	;# 
  1927  0395                     	;# 
  1928  0396                     	;# 
  1929  0FE4                     	;# 
  1930  0FE5                     	;# 
  1931  0FE6                     	;# 
  1932  0FE7                     	;# 
  1933  0FE8                     	;# 
  1934  0FE9                     	;# 
  1935  0FEA                     	;# 
  1936  0FEB                     	;# 
  1937  0FED                     	;# 
  1938  0FEE                     	;# 
  1939  0FEF                     	;# 
  1940  0000                     	;# 
  1941  0001                     	;# 
  1942  0002                     	;# 
  1943  0003                     	;# 
  1944  0004                     	;# 
  1945  0005                     	;# 
  1946  0006                     	;# 
  1947  0007                     	;# 
  1948  0008                     	;# 
  1949  0009                     	;# 
  1950  000A                     	;# 
  1951  000B                     	;# 
  1952  000C                     	;# 
  1953  000D                     	;# 
  1954  000E                     	;# 
  1955  0010                     	;# 
  1956  0011                     	;# 
  1957  0012                     	;# 
  1958  0015                     	;# 
  1959  0016                     	;# 
  1960  0016                     	;# 
  1961  0017                     	;# 
  1962  0018                     	;# 
  1963  0019                     	;# 
  1964  001A                     	;# 
  1965  001B                     	;# 
  1966  001C                     	;# 
  1967  008C                     	;# 
  1968  008D                     	;# 
  1969  008E                     	;# 
  1970  0090                     	;# 
  1971  0091                     	;# 
  1972  0092                     	;# 
  1973  0095                     	;# 
  1974  0096                     	;# 
  1975  0097                     	;# 
  1976  0099                     	;# 
  1977  009A                     	;# 
  1978  009B                     	;# 
  1979  009B                     	;# 
  1980  009C                     	;# 
  1981  009D                     	;# 
  1982  009E                     	;# 
  1983  010C                     	;# 
  1984  010D                     	;# 
  1985  010E                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  011D                     	;# 
  1989  018C                     	;# 
  1990  018D                     	;# 
  1991  018E                     	;# 
  1992  0191                     	;# 
  1993  0191                     	;# 
  1994  0192                     	;# 
  1995  0193                     	;# 
  1996  0193                     	;# 
  1997  0194                     	;# 
  1998  0195                     	;# 
  1999  0196                     	;# 
  2000  0197                     	;# 
  2001  0199                     	;# 
  2002  019A                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  020D                     	;# 
  2013  0210                     	;# 
  2014  0211                     	;# 
  2015  0211                     	;# 
  2016  0212                     	;# 
  2017  0212                     	;# 
  2018  0213                     	;# 
  2019  0213                     	;# 
  2020  0214                     	;# 
  2021  0214                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0216                     	;# 
  2026  0216                     	;# 
  2027  0217                     	;# 
  2028  0217                     	;# 
  2029  0291                     	;# 
  2030  0291                     	;# 
  2031  0292                     	;# 
  2032  0293                     	;# 
  2033  0298                     	;# 
  2034  0298                     	;# 
  2035  0299                     	;# 
  2036  029A                     	;# 
  2037  0394                     	;# 
  2038  0395                     	;# 
  2039  0396                     	;# 
  2040  0FE4                     	;# 
  2041  0FE5                     	;# 
  2042  0FE6                     	;# 
  2043  0FE7                     	;# 
  2044  0FE8                     	;# 
  2045  0FE9                     	;# 
  2046  0FEA                     	;# 
  2047  0FEB                     	;# 
  2048  0FED                     	;# 
  2049  0FEE                     	;# 
  2050  0FEF                     	;# 
  2051  0000                     	;# 
  2052  0001                     	;# 
  2053  0002                     	;# 
  2054  0003                     	;# 
  2055  0004                     	;# 
  2056  0005                     	;# 
  2057  0006                     	;# 
  2058  0007                     	;# 
  2059  0008                     	;# 
  2060  0009                     	;# 
  2061  000A                     	;# 
  2062  000B                     	;# 
  2063  000C                     	;# 
  2064  000D                     	;# 
  2065  000E                     	;# 
  2066  0010                     	;# 
  2067  0011                     	;# 
  2068  0012                     	;# 
  2069  0015                     	;# 
  2070  0016                     	;# 
  2071  0016                     	;# 
  2072  0017                     	;# 
  2073  0018                     	;# 
  2074  0019                     	;# 
  2075  001A                     	;# 
  2076  001B                     	;# 
  2077  001C                     	;# 
  2078  008C                     	;# 
  2079  008D                     	;# 
  2080  008E                     	;# 
  2081  0090                     	;# 
  2082  0091                     	;# 
  2083  0092                     	;# 
  2084  0095                     	;# 
  2085  0096                     	;# 
  2086  0097                     	;# 
  2087  0099                     	;# 
  2088  009A                     	;# 
  2089  009B                     	;# 
  2090  009B                     	;# 
  2091  009C                     	;# 
  2092  009D                     	;# 
  2093  009E                     	;# 
  2094  010C                     	;# 
  2095  010D                     	;# 
  2096  010E                     	;# 
  2097  0116                     	;# 
  2098  0117                     	;# 
  2099  011D                     	;# 
  2100  018C                     	;# 
  2101  018D                     	;# 
  2102  018E                     	;# 
  2103  0191                     	;# 
  2104  0191                     	;# 
  2105  0192                     	;# 
  2106  0193                     	;# 
  2107  0193                     	;# 
  2108  0194                     	;# 
  2109  0195                     	;# 
  2110  0196                     	;# 
  2111  0197                     	;# 
  2112  0199                     	;# 
  2113  019A                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019C                     	;# 
  2119  019C                     	;# 
  2120  019D                     	;# 
  2121  019E                     	;# 
  2122  019F                     	;# 
  2123  020D                     	;# 
  2124  0210                     	;# 
  2125  0211                     	;# 
  2126  0211                     	;# 
  2127  0212                     	;# 
  2128  0212                     	;# 
  2129  0213                     	;# 
  2130  0213                     	;# 
  2131  0214                     	;# 
  2132  0214                     	;# 
  2133  0215                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0216                     	;# 
  2137  0216                     	;# 
  2138  0217                     	;# 
  2139  0217                     	;# 
  2140  0291                     	;# 
  2141  0291                     	;# 
  2142  0292                     	;# 
  2143  0293                     	;# 
  2144  0298                     	;# 
  2145  0298                     	;# 
  2146  0299                     	;# 
  2147  029A                     	;# 
  2148  0394                     	;# 
  2149  0395                     	;# 
  2150  0396                     	;# 
  2151  0FE4                     	;# 
  2152  0FE5                     	;# 
  2153  0FE6                     	;# 
  2154  0FE7                     	;# 
  2155  0FE8                     	;# 
  2156  0FE9                     	;# 
  2157  0FEA                     	;# 
  2158  0FEB                     	;# 
  2159  0FED                     	;# 
  2160  0FEE                     	;# 
  2161  0FEF                     	;# 
  2162                           
  2163                           	psect	idataBANK4
  2164  106C                     __pidataBANK4:	
  2165                           
  2166                           ;initializer for __product
  2167  106C  3463               	retlw	99
  2168  106D  3402               	retlw	2
  2169  106E  3400               	retlw	0
  2170  106F  3400               	retlw	0
  2171  1070  3400               	retlw	0
  2172  1071  3400               	retlw	0
  2173  1072  3400               	retlw	0
  2174  1073  3400               	retlw	0
  2175  1074  3400               	retlw	0
  2176  1075  3400               	retlw	0
  2177  1076  3400               	retlw	0
  2178  1077  3400               	retlw	0
  2179  1078  34FF               	retlw	255
  2180  1079  34FF               	retlw	255
  2181  107A  34FF               	retlw	255
  2182  107B  3400               	retlw	0
  2183  107C  3400               	retlw	0
  2184  107D  3400               	retlw	0
  2185  107E  3400               	retlw	0
  2186  107F  3400               	retlw	0
  2187  1080  3400               	retlw	0
  2188  1081  3400               	retlw	0
  2189  1082  3400               	retlw	0
  2190  1083  3400               	retlw	0
  2191  1084  3400               	retlw	0
  2192  1085  3400               	retlw	0
  2193  1086  3400               	retlw	0
  2194  1087  3400               	retlw	0
  2195  1088  3400               	retlw	0
  2196  1089  3400               	retlw	0
  2197  108A  3400               	retlw	0
  2198  108B  3400               	retlw	0
  2199                           
  2200                           	psect	stringtext
  2201  1000                     __pstringtext:	
  2202  1000                     _CC2500_registers_address:	
  2203  1000  3403               	retlw	3
  2204  1001  3416               	retlw	22
  2205  1002  3417               	retlw	23
  2206  1003  341E               	retlw	30
  2207  1004  341F               	retlw	31
  2208  1005  3420               	retlw	32
  2209  1006  342A               	retlw	42
  2210  1007  342B               	retlw	43
  2211  1008  340B               	retlw	11
  2212  1009  340C               	retlw	12
  2213  100A  340D               	retlw	13
  2214  100B  340E               	retlw	14
  2215  100C  340F               	retlw	15
  2216  100D  3410               	retlw	16
  2217  100E  3411               	retlw	17
  2218  100F  3412               	retlw	18
  2219  1010  3413               	retlw	19
  2220  1011  3414               	retlw	20
  2221  1012  340A               	retlw	10
  2222  1013  3415               	retlw	21
  2223  1014  3421               	retlw	33
  2224  1015  3422               	retlw	34
  2225  1016  3418               	retlw	24
  2226  1017  3419               	retlw	25
  2227  1018  341A               	retlw	26
  2228  1019  341B               	retlw	27
  2229  101A  341C               	retlw	28
  2230  101B  341D               	retlw	29
  2231  101C  3423               	retlw	35
  2232  101D  3424               	retlw	36
  2233  101E  3425               	retlw	37
  2234  101F  3426               	retlw	38
  2235  1020  3429               	retlw	41
  2236  1021  342C               	retlw	44
  2237  1022  342D               	retlw	45
  2238  1023  342E               	retlw	46
  2239  1024  3400               	retlw	0
  2240  1025  3401               	retlw	1
  2241  1026  3402               	retlw	2
  2242  1027  3407               	retlw	7
  2243  1028  3408               	retlw	8
  2244  1029  3409               	retlw	9
  2245  102A  3406               	retlw	6
  2246  102B  3404               	retlw	4
  2247  102C  3405               	retlw	5
  2248  102D  3427               	retlw	39
  2249  102E  3428               	retlw	40
  2250  102F                     __end_of_CC2500_registers_address:	
  2251  102F                     _CC2500_rfSettings:	
  2252  102F  3407               	retlw	7
  2253  1030  3407               	retlw	7
  2254  1031  3430               	retlw	48
  2255  1032  3487               	retlw	135
  2256  1033  346B               	retlw	107
  2257  1034  34F8               	retlw	248
  2258  1035  347F               	retlw	127
  2259  1036  343F               	retlw	63
  2260  1037  3409               	retlw	9
  2261  1038  3400               	retlw	0
  2262  1039  345C               	retlw	92
  2263  103A  34A7               	retlw	167
  2264  103B  3462               	retlw	98
  2265  103C  3486               	retlw	134
  2266  103D  3483               	retlw	131
  2267  103E  3403               	retlw	3
  2268  103F  3422               	retlw	34
  2269  1040  34F8               	retlw	248
  2270  1041  3400               	retlw	0
  2271  1042  3444               	retlw	68
  2272  1043  34B6               	retlw	182
  2273  1044  3410               	retlw	16
  2274  1045  3418               	retlw	24
  2275  1046  341D               	retlw	29
  2276  1047  341C               	retlw	28
  2277  1048  34C7               	retlw	199
  2278  1049  3400               	retlw	0
  2279  104A  34B2               	retlw	178
  2280  104B  34EA               	retlw	234
  2281  104C  340A               	retlw	10
  2282  104D  3400               	retlw	0
  2283  104E  3411               	retlw	17
  2284  104F  3459               	retlw	89
  2285  1050  3488               	retlw	136
  2286  1051  3431               	retlw	49
  2287  1052  340B               	retlw	11
  2288  1053  342F               	retlw	47
  2289  1054  342E               	retlw	46
  2290  1055  3406               	retlw	6
  2291  1056  3404               	retlw	4
  2292  1057  3405               	retlw	5
  2293  1058  3400               	retlw	0
  2294  1059  3430               	retlw	48
  2295  105A  34D3               	retlw	211
  2296  105B  3491               	retlw	145
  2297  105C  3441               	retlw	65
  2298  105D  3400               	retlw	0
  2299  105E                     __end_of_CC2500_rfSettings:	
  2300  105E                     _CC2500_patable_vaule:	
  2301  105E  34FE               	retlw	254
  2302  105F  34FE               	retlw	254
  2303  1060  34FE               	retlw	254
  2304  1061  34FE               	retlw	254
  2305  1062  34FE               	retlw	254
  2306  1063  34FE               	retlw	254
  2307  1064  34FE               	retlw	254
  2308  1065  34FE               	retlw	254
  2309  1066                     __end_of_CC2500_patable_vaule:	
  2310                           
  2311                           	psect	nvBANK1
  2312  00ED                     __pnvBANK1:	
  2313  00ED                     _product:	
  2314  00ED                     	ds	1
  2315  000C                     _PORTA	set	12
  2316  000D                     _PORTB	set	13
  2317  000E                     _PORTC	set	14
  2318  0018                     _T1CON	set	24
  2319  0017                     _TMR1H	set	23
  2320  0016                     _TMR1L	set	22
  2321  005F                     _GIE	set	95
  2322  005B                     _IOCIE	set	91
  2323  0058                     _IOCIF	set	88
  2324  005E                     _PEIE	set	94
  2325  0060                     _RA0	set	96
  2326  0064                     _RA4	set	100
  2327  0066                     _RA6	set	102
  2328  0067                     _RA7	set	103
  2329  0068                     _RB0	set	104
  2330  0069                     _RB1	set	105
  2331  006A                     _RB2	set	106
  2332  006B                     _RB3	set	107
  2333  006D                     _RB5	set	109
  2334  0070                     _RC0	set	112
  2335  0071                     _RC1	set	113
  2336  0073                     _RC3	set	115
  2337  0074                     _RC4	set	116
  2338  0075                     _RC5	set	117
  2339  0088                     _TMR1IF	set	136
  2340  009D                     _ADCON0	set	157
  2341  009E                     _ADCON1	set	158
  2342  009C                     _ADRESH	set	156
  2343  009B                     _ADRESL	set	155
  2344  0099                     _OSCCON	set	153
  2345  008C                     _TRISA	set	140
  2346  008D                     _TRISB	set	141
  2347  008E                     _TRISC	set	142
  2348  0097                     _WDTCON	set	151
  2349  04E9                     _GO_nDONE	set	1257
  2350  0488                     _TMR1IE	set	1160
  2351  0117                     _FVRCON	set	279
  2352  010C                     _LATA	set	268
  2353  010D                     _LATB	set	269
  2354  010E                     _LATC	set	270
  2355  018C                     _ANSELA	set	396
  2356  018D                     _ANSELB	set	397
  2357  018E                     _ANSELC	set	398
  2358  0192                     _PMADRH	set	402
  2359  0191                     _PMADRL	set	401
  2360  0196                     _PMCON2	set	406
  2361  0194                     _PMDATH	set	404
  2362  0193                     _PMDATL	set	403
  2363  0CAE                     _CFGS	set	3246
  2364  0CAC                     _FREE	set	3244
  2365  0CAD                     _LWLO	set	3245
  2366  0CA8                     _RD	set	3240
  2367  0CA9                     _WR	set	3241
  2368  0CAA                     _WREN	set	3242
  2369  020D                     _WPUB	set	525
  2370  0396                     _IOCBF	set	918
  2371  0395                     _IOCBN	set	917
  2372  0394                     _IOCBP	set	916
  2373  1CB2                     _IOCBF2	set	7346
  2374                           
  2375                           ; #config settings
  2376  0000                     
  2377                           	psect	cinit
  2378  0022                     start_initialization:	
  2379  0022                     __initialization:	
  2380                           
  2381                           ; Clear objects allocated to BITBANK0
  2382  0022  01EE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2383                           
  2384                           ; Clear objects allocated to BANK1
  2385  0023  30A0               	movlw	low __pbssBANK1
  2386  0024  0084               	movwf	4
  2387  0025  3000               	movlw	high __pbssBANK1
  2388  0026  0085               	movwf	5
  2389  0027  3045               	movlw	69
  2390  0028  3190  2066  3180   	fcall	clear_ram0
  2391                           
  2392                           ; Clear objects allocated to BANK2
  2393  002B  3020               	movlw	low __pbssBANK2
  2394  002C  0084               	movwf	4
  2395  002D  3001               	movlw	high __pbssBANK2
  2396  002E  0085               	movwf	5
  2397  002F  304D               	movlw	77
  2398  0030  3190  2066  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK3
  2401  0033  30A0               	movlw	low __pbssBANK3
  2402  0034  0084               	movwf	4
  2403  0035  3001               	movlw	high __pbssBANK3
  2404  0036  0085               	movwf	5
  2405  0037  304C               	movlw	76
  2406  0038  3190  2066  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Initialize objects allocated to BANK4
  2409  003B  306C               	movlw	low __pidataBANK4
  2410  003C  0084               	movwf	4
  2411  003D  3090               	movlw	(high __pidataBANK4)| (0+128)
  2412  003E  0085               	movwf	5
  2413  003F  3020               	movlw	low __pdataBANK4
  2414  0040  0086               	movwf	6
  2415  0041  3002               	movlw	high __pdataBANK4
  2416  0042  0087               	movwf	7
  2417  0043  3020               	movlw	32
  2418  0044  319B  236A         	fcall	init_ram
  2419  0046                     end_of_initialization:	
  2420                           ;End of C runtime variable initialization code
  2421                           
  2422  0046                     __end_of__initialization:	
  2423  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2424  0047  0020               	movlb	0
  2425  0048  3196  2E15         	ljmp	_main	;jump to C main() function
  2426                           
  2427                           	psect	bitbssBANK0
  2428  0370                     __pbitbssBANK0:	
  2429  0370                     _Receive_OK:	
  2430  0370                     	ds	1
  2431  0371                     _Transceive_OK:	
  2432  0371                     	ds	1
  2433                           
  2434                           	psect	bssBANK1
  2435  00A0                     __pbssBANK1:	
  2436  00A0                     _RF1:	
  2437  00A0                     	ds	14
  2438  00AE                     _Buz1:	
  2439  00AE                     	ds	12
  2440  00BA                     _DimmerIntr1:	
  2441  00BA                     	ds	12
  2442  00C6                     _Timer1:	
  2443  00C6                     	ds	3
  2444  00C9                     _WDT:	
  2445  00C9                     	ds	2
  2446  00CB                     _CRC:	
  2447  00CB                     	ds	1
  2448  00CC                     _Cmd:	
  2449  00CC                     	ds	1
  2450  00CD                     _DelayOff:	
  2451  00CD                     	ds	1
  2452  00CE                     _DimmerIntr:	
  2453  00CE                     	ds	1
  2454  00CF                     _DimmerLights:	
  2455  00CF                     	ds	1
  2456  00D0                     _LED:	
  2457  00D0                     	ds	1
  2458  00D1                     _Light:	
  2459  00D1                     	ds	1
  2460  00D2                     _RSSI:	
  2461  00D2                     	ds	1
  2462  00D3                     _Rx_Length:	
  2463  00D3                     	ds	1
  2464  00D4                     _SPI0Buffer:	
  2465  00D4                     	ds	1
  2466  00D5                     _Sw:	
  2467  00D5                     	ds	1
  2468  00D6                     _SwDetect:	
  2469  00D6                     	ds	1
  2470  00D7                     _Tx_Length:	
  2471  00D7                     	ds	1
  2472  00D8                     _r_address:	
  2473  00D8                     	ds	1
  2474  00D9                     _r_data:	
  2475  00D9                     	ds	1
  2476  00DA                     _s_data:	
  2477  00DA                     	ds	1
  2478  00DB                     _Temp:	
  2479  00DB                     	ds	10
  2480                           
  2481                           	psect	bssBANK2
  2482  0120                     __pbssBANK2:	
  2483  0120                     _myMain:	
  2484  0120                     	ds	13
  2485  012D                     _Dimmer:	
  2486  012D                     	ds	5
  2487  0132                     _RF_Count:	
  2488  0132                     	ds	2
  2489  0134                     _Load:	
  2490  0134                     	ds	40
  2491  015C                     _DimmerLights1:	
  2492  015C                     	ds	8
  2493  0164                     _DlySw1:	
  2494  0164                     	ds	5
  2495  0169                     _VarErrLED:	
  2496  0169                     	ds	4
  2497                           
  2498                           	psect	bssBANK3
  2499  01A0                     __pbssBANK3:	
  2500  01A0                     _RF_Data:	
  2501  01A0                     	ds	30
  2502  01BE                     _Memory:	
  2503  01BE                     	ds	37
  2504  01E3                     _Sw1:	
  2505  01E3                     	ds	9
  2506                           
  2507                           	psect	dataBANK4
  2508  0220                     __pdataBANK4:	
  2509  0220                     __product:	
  2510  0220                     	ds	32
  2511                           
  2512                           	psect	clrtext
  2513  1066                     clear_ram0:	
  2514                           ;	Called with FSR0 containing the base address, and
  2515                           ;	WREG with the size to clear
  2516                           
  2517  1066  0064               	clrwdt	;clear the watchdog before getting into this loop
  2518  1067                     clrloop0:	
  2519  1067  0180               	clrf	0	;clear RAM location pointed to by FSR
  2520  1068  3101               	addfsr 0,1
  2521  1069  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2522  106A  2867               	goto	clrloop0	;have we reached the end yet?
  2523  106B  3400               	retlw	0	;all done for this memory range, return
  2524                           
  2525                           	psect	inittext
  2526  1B6A                     init_ram:	
  2527  1B6A  00FE               	movwf	126
  2528  1B6B                     initloop:	
  2529  1B6B  0012               	moviw fsr0++
  2530  1B6C  001E               	movwi fsr1++
  2531  1B6D  0BFE               	decfsz	126,f
  2532  1B6E  2B6B               	goto	initloop
  2533  1B6F  3400               	retlw	0
  2534                           
  2535                           	psect	cstackBANK3
  2536  01EC                     __pcstackBANK3:	
  2537  01EC                     ?_main:	
  2538  01EC                     main@argc:	
  2539                           ; 2 bytes @ 0x0
  2540                           
  2541                           
  2542                           ; 2 bytes @ 0x0
  2543  01EC                     	ds	2
  2544  01EE                     main@argv:	
  2545                           
  2546                           ; 2 bytes @ 0x2
  2547  01EE                     	ds	2
  2548                           
  2549                           	psect	cstackBANK1
  2550  00E5                     __pcstackBANK1:	
  2551  00E5                     ?_setDimmerLights_OnOff:	
  2552  00E5                     ??_setRFSW_Control:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  00E5                     setDimmerLights_OnOff@command:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  00E5                     setTemp_Main@error:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561                           
  2562                           ; 1 bytes @ 0x0
  2563  00E5                     	ds	1
  2564  00E6                     ??_setDimmerLights_OnOff:	
  2565  00E6                     setTemp_Main@TempGO:	
  2566                           ; 0 bytes @ 0x1
  2567                           
  2568  00E6                     setRFSW_Control@status:	
  2569                           ; 1 bytes @ 0x1
  2570                           
  2571                           
  2572                           ; 1 bytes @ 0x1
  2573  00E6                     	ds	1
  2574  00E7                     setRFSW_Control@sw:	
  2575  00E7                     setTemp_Main@SafeValue:	
  2576                           ; 1 bytes @ 0x2
  2577                           
  2578                           
  2579                           ; 2 bytes @ 0x2
  2580  00E7                     	ds	1
  2581  00E8                     ??_getRxData:	
  2582  00E8                     setDimmerLights_OnOff@lights:	
  2583                           ; 0 bytes @ 0x3
  2584                           
  2585                           
  2586                           ; 1 bytes @ 0x3
  2587  00E8                     	ds	1
  2588  00E9                     setDimmerLights_Main@lights:	
  2589  00E9                     getRxData@error:	
  2590                           ; 1 bytes @ 0x4
  2591                           
  2592  00E9                     setTemp_Main@DangerValue:	
  2593                           ; 1 bytes @ 0x4
  2594                           
  2595                           
  2596                           ; 2 bytes @ 0x4
  2597  00E9                     	ds	1
  2598  00EA                     ??_setRF_Main:	
  2599                           
  2600                           ; 0 bytes @ 0x5
  2601  00EA                     	ds	1
  2602  00EB                     setRF_Main@error:	
  2603  00EB                     setTemp_Main@AD:	
  2604                           ; 1 bytes @ 0x6
  2605                           
  2606                           
  2607                           ; 2 bytes @ 0x6
  2608  00EB                     	ds	2
  2609                           
  2610                           	psect	cstackCOMMON
  2611  0070                     __pcstackCOMMON:	
  2612  0070                     ?_CC2500_WriteCommand:	
  2613  0070                     ?_RF_Timeout_Counter:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_setRF_TimeoutCleared:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_WriteByte:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_ReadStatus:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_CC2500_ReadByte:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_PowerRST:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_InitSetREG:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_CC2500_InitPATable:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_CC2500_ClearTXFIFO:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_ClearRXFIFO:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_FrequencyCabr:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_SIDLEMode:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_DlyOff_Initialization:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_DlyOff_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setDimmerLights_SwOn:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setDimmerLights_SwOff:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setDimmerLights_Initialization:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setDimmerLights_Main:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setDimmerLights_Line:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setTxData:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setRF_TransceiveGO:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setLED_Initialization:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setLED_Main:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_Fosc_Set:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_IO_Set:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_TMR1_Set:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_ADC_Set:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_IOC_Set:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_WDT_Set:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_TMR1_ISR:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_IOC_ISR:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_Timeout_Counter:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_set_TimeoutCleared:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_Flash_Memory_Write:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_Flash_Memory_Modify:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_WDT_Clearing:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_myMain_Initialization:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Temp_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_Load_Initialization:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Switch_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_RF_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_getLoad_AD:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_getTemp_AD:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_my_MainTimer:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Temp_Main:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Load_Main:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_Switch_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_RF_Main:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_Exception_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_setLoad_AH_AL_Restore:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setTemp_Initialization:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setTemp_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_setRF_Initialization:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setRF_Main:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_RF_RxDisable:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_getRxData:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setLog_Code:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setControl_Lights_Table:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setRFSW_Control:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setRFSW_AdjControl:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setSw_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setSw_Main:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_Buzzer_Initialization:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_Buzzer_Main:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_CC2500_TxData:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_CC2500_RxData:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_CC2500_PowerOnInitial:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_DelayOffPointSelect:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_DelayOff_Initialization:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_DelayOff_Main:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_DimmerIntr_Initialization:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_DimmerLights_SelectPointer:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DimmerLights_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_setDimmerLights_DimmingOn:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DimmerLights_Main:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerLights_TMR_1:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ??_DimmerLights_TMR_1:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_DimmerLights_IOC_1:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_LedPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_LED_Initialization:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_LED_Main:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_Mcu_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_ISR:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_Flash_Memory_Initialization:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_Flash_Memory_Main:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_Flash_Memory_Unlock:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_Flash_Memory_Erasing:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_setMemory_Modify:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_setMemory_LoopSave:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_WDT_Main:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_setRF_Learn:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_TouchPower:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_SwPointSelect:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_getDimmerLights_Status:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_getLoad_OK:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getMain_All_Error_Status:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getMain_All_LightsStatus:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getDimmerLights_Allow_Condition:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getDimmerLights_PercentToValue:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getDimmerLights_ValueToPercent:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_getCmd_Status:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_Flash_Memory_Read:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_getRF_KeyStatus:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getSw_KeyStatus:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_getDelayOff_GO:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerIntr_DimmingValue:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmerLights_Line:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getDimmer_LoadGO:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_getDimmer_Load_Status:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getMain_Lights_Count:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?___lbdiv:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     setDimmerLights_Initialization@lights:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     getDimmerLights_Allow_Condition@lights:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     getSw_KeyStatus@sw:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ___lbdiv@divisor:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961                           
  2962                           ; 1 bytes @ 0x0
  2963  0070                     	ds	1
  2964  0071                     ??___lbdiv:	
  2965  0071                     DimmerLights_TMR_1@count:	
  2966                           ; 0 bytes @ 0x1
  2967                           
  2968                           
  2969                           ; 1 bytes @ 0x1
  2970  0071                     	ds	1
  2971  0072                     ??_TMR1_ISR:	
  2972  0072                     ___lbdiv@dividend:	
  2973                           ; 0 bytes @ 0x2
  2974                           
  2975                           
  2976                           ; 1 bytes @ 0x2
  2977  0072                     	ds	1
  2978  0073                     ___lbdiv@counter:	
  2979                           
  2980                           ; 1 bytes @ 0x3
  2981  0073                     	ds	1
  2982  0074                     ___lbdiv@quotient:	
  2983                           
  2984                           ; 1 bytes @ 0x4
  2985  0074                     	ds	1
  2986  0075                     ?_Division:	
  2987  0075                     Division@num:	
  2988                           ; 1 bytes @ 0x5
  2989                           
  2990                           
  2991                           ; 1 bytes @ 0x5
  2992  0075                     	ds	1
  2993  0076                     ??_Division:	
  2994                           
  2995                           ; 0 bytes @ 0x6
  2996  0076                     	ds	2
  2997  0078                     Division@value:	
  2998                           
  2999                           ; 1 bytes @ 0x8
  3000  0078                     	ds	1
  3001  0079                     Division@result:	
  3002                           
  3003                           ; 1 bytes @ 0x9
  3004  0079                     	ds	1
  3005  007A                     ??_DimmerLights_IOC_1:	
  3006                           
  3007                           ; 0 bytes @ 0xA
  3008  007A                     	ds	2
  3009  007C                     DimmerLights_IOC_1@count:	
  3010                           
  3011                           ; 1 bytes @ 0xC
  3012  007C                     	ds	1
  3013  007D                     DimmerLights_IOC_1@dimming:	
  3014                           
  3015                           ; 1 bytes @ 0xD
  3016  007D                     	ds	1
  3017  007E                     ??_IOC_ISR:	
  3018                           
  3019                           	psect	cstackBANK0
  3020  0020                     __pcstackBANK0:	
  3021                           ; 0 bytes @ 0xE
  3022                           
  3023  0020                     ??_ISR:	
  3024                           
  3025                           ; 0 bytes @ 0x0
  3026  0020                     	ds	1
  3027  0021                     ??_RF_Timeout_Counter:	
  3028  0021                     ??_setRF_TimeoutCleared:	
  3029                           ; 0 bytes @ 0x1
  3030                           
  3031  0021                     ??_CC2500_WriteByte:	
  3032                           ; 0 bytes @ 0x1
  3033                           
  3034  0021                     ??_CC2500_ReadByte:	
  3035                           ; 0 bytes @ 0x1
  3036                           
  3037  0021                     ?_DelayTime_1us:	
  3038                           ; 0 bytes @ 0x1
  3039                           
  3040  0021                     ??_setDimmerLights_Initialization:	
  3041                           ; 0 bytes @ 0x1
  3042                           
  3043  0021                     ??_getLoad_OK:	
  3044                           ; 0 bytes @ 0x1
  3045                           
  3046  0021                     ??_getMain_All_Error_Status:	
  3047                           ; 0 bytes @ 0x1
  3048                           
  3049  0021                     ??_getMain_All_LightsStatus:	
  3050                           ; 0 bytes @ 0x1
  3051                           
  3052  0021                     ??_setDimmerLights_Line:	
  3053                           ; 0 bytes @ 0x1
  3054                           
  3055  0021                     ??_getCmd_Status:	
  3056                           ; 0 bytes @ 0x1
  3057                           
  3058  0021                     ?_setCmd_Status:	
  3059                           ; 0 bytes @ 0x1
  3060                           
  3061  0021                     ??_setTxData:	
  3062                           ; 0 bytes @ 0x1
  3063                           
  3064  0021                     ??_setRF_TransceiveGO:	
  3065                           ; 0 bytes @ 0x1
  3066                           
  3067  0021                     ??_Fosc_Set:	
  3068                           ; 0 bytes @ 0x1
  3069                           
  3070  0021                     ??_IO_Set:	
  3071                           ; 0 bytes @ 0x1
  3072                           
  3073  0021                     ??_TMR1_Set:	
  3074                           ; 0 bytes @ 0x1
  3075                           
  3076  0021                     ??_ADC_Set:	
  3077                           ; 0 bytes @ 0x1
  3078                           
  3079  0021                     ??_IOC_Set:	
  3080                           ; 0 bytes @ 0x1
  3081                           
  3082  0021                     ??_WDT_Set:	
  3083                           ; 0 bytes @ 0x1
  3084                           
  3085  0021                     ??_Timeout_Counter:	
  3086                           ; 0 bytes @ 0x1
  3087                           
  3088  0021                     ??_set_TimeoutCleared:	
  3089                           ; 0 bytes @ 0x1
  3090                           
  3091  0021                     ??_Flash_Memory_Read:	
  3092                           ; 0 bytes @ 0x1
  3093                           
  3094  0021                     ?_setMemory_Data:	
  3095                           ; 0 bytes @ 0x1
  3096                           
  3097  0021                     ??_Flash_Memory_Write:	
  3098                           ; 0 bytes @ 0x1
  3099                           
  3100  0021                     ??_WDT_Clearing:	
  3101                           ; 0 bytes @ 0x1
  3102                           
  3103  0021                     ??_myMain_Initialization:	
  3104                           ; 0 bytes @ 0x1
  3105                           
  3106  0021                     ??_Temp_Initialization:	
  3107                           ; 0 bytes @ 0x1
  3108                           
  3109  0021                     ??_setLoad_AH_AL_Restore:	
  3110                           ; 0 bytes @ 0x1
  3111                           
  3112  0021                     ??_setTemp_Initialization:	
  3113                           ; 0 bytes @ 0x1
  3114                           
  3115  0021                     ??_setRF_Initialization:	
  3116                           ; 0 bytes @ 0x1
  3117                           
  3118  0021                     ??_getRF_KeyStatus:	
  3119                           ; 0 bytes @ 0x1
  3120                           
  3121  0021                     ??_getSw_KeyStatus:	
  3122                           ; 0 bytes @ 0x1
  3123                           
  3124  0021                     ??_Buzzer_Initialization:	
  3125                           ; 0 bytes @ 0x1
  3126                           
  3127  0021                     ??_Buzzer_Main:	
  3128                           ; 0 bytes @ 0x1
  3129                           
  3130  0021                     ??_DelayOffPointSelect:	
  3131                           ; 0 bytes @ 0x1
  3132                           
  3133  0021                     ??_DimmerIntr_Initialization:	
  3134                           ; 0 bytes @ 0x1
  3135                           
  3136  0021                     ?_setDimmerIntr_ControlStatus:	
  3137                           ; 0 bytes @ 0x1
  3138                           
  3139  0021                     ?_setDimmerIntr_DimmingValue:	
  3140                           ; 0 bytes @ 0x1
  3141                           
  3142  0021                     ??_getDimmerIntr_DimmingValue:	
  3143                           ; 0 bytes @ 0x1
  3144                           
  3145  0021                     ?_setDimmerIntr_Dimming_Sw:	
  3146                           ; 0 bytes @ 0x1
  3147                           
  3148  0021                     ?_setDimmerIntr_Dimming_RF:	
  3149                           ; 0 bytes @ 0x1
  3150                           
  3151  0021                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3152                           ; 0 bytes @ 0x1
  3153                           
  3154  0021                     ??_DimmerLights_SelectPointer:	
  3155                           ; 0 bytes @ 0x1
  3156                           
  3157  0021                     ??_getDimmerLights_Line:	
  3158                           ; 0 bytes @ 0x1
  3159                           
  3160  0021                     ??_getDimmer_LoadGO:	
  3161                           ; 0 bytes @ 0x1
  3162                           
  3163  0021                     ??_getDimmer_Load_Status:	
  3164                           ; 0 bytes @ 0x1
  3165                           
  3166  0021                     ??_LedPointSelect:	
  3167                           ; 0 bytes @ 0x1
  3168                           
  3169  0021                     ??_Flash_Memory_Unlock:	
  3170                           ; 0 bytes @ 0x1
  3171                           
  3172  0021                     ??_Flash_Memory_Erasing:	
  3173                           ; 0 bytes @ 0x1
  3174                           
  3175  0021                     ??_setMemory_Modify:	
  3176                           ; 0 bytes @ 0x1
  3177                           
  3178  0021                     ??_setMemory_LoopSave:	
  3179                           ; 0 bytes @ 0x1
  3180                           
  3181  0021                     ??_WDT_Main:	
  3182                           ; 0 bytes @ 0x1
  3183                           
  3184  0021                     ??_getMain_Lights_Count:	
  3185                           ; 0 bytes @ 0x1
  3186                           
  3187  0021                     ??_setRF_Learn:	
  3188                           ; 0 bytes @ 0x1
  3189                           
  3190  0021                     ??_TouchPower:	
  3191                           ; 0 bytes @ 0x1
  3192                           
  3193  0021                     ??_SwPointSelect:	
  3194                           ; 0 bytes @ 0x1
  3195                           
  3196  0021                     ?___bmul:	
  3197                           ; 0 bytes @ 0x1
  3198                           
  3199  0021                     ?_getBuz_GO:	
  3200                           ; 1 bytes @ 0x1
  3201                           
  3202  0021                     ?_getAD:	
  3203                           ; 2 bytes @ 0x1
  3204                           
  3205  0021                     ?___wmul:	
  3206                           ; 2 bytes @ 0x1
  3207                           
  3208  0021                     ?___awdiv:	
  3209                           ; 2 bytes @ 0x1
  3210                           
  3211  0021                     ?___lwdiv:	
  3212                           ; 2 bytes @ 0x1
  3213                           
  3214  0021                     ?___ftpack:	
  3215                           ; 2 bytes @ 0x1
  3216                           
  3217  0021                     setDimmerIntr_ControlStatus@command:	
  3218                           ; 3 bytes @ 0x1
  3219                           
  3220  0021                     setDimmerIntr_DimmingValue@value:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223  0021                     setDimmerIntr_Dimming_Sw@command:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0021                     setDimmerIntr_Dimming_RF@command:	
  3227                           ; 1 bytes @ 0x1
  3228                           
  3229  0021                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3230                           ; 1 bytes @ 0x1
  3231                           
  3232  0021                     setDimmerLights_Line@lights:	
  3233                           ; 1 bytes @ 0x1
  3234                           
  3235  0021                     getDimmerLights_Line@line:	
  3236                           ; 1 bytes @ 0x1
  3237                           
  3238  0021                     getDimmer_LoadGO@loadgo:	
  3239                           ; 1 bytes @ 0x1
  3240                           
  3241  0021                     getDimmer_Load_Status@status:	
  3242                           ; 1 bytes @ 0x1
  3243                           
  3244  0021                     getAD@adcon1:	
  3245                           ; 1 bytes @ 0x1
  3246                           
  3247  0021                     setMemory_Data@data:	
  3248                           ; 1 bytes @ 0x1
  3249                           
  3250  0021                     getMain_All_LightsStatus@status:	
  3251                           ; 1 bytes @ 0x1
  3252                           
  3253  0021                     getMain_Lights_Count@count:	
  3254                           ; 1 bytes @ 0x1
  3255                           
  3256  0021                     setCmd_Status@cmd:	
  3257                           ; 1 bytes @ 0x1
  3258                           
  3259  0021                     getCmd_Status@number:	
  3260                           ; 1 bytes @ 0x1
  3261                           
  3262  0021                     getLoad_OK@ok:	
  3263                           ; 1 bytes @ 0x1
  3264                           
  3265  0021                     ___bmul@multiplicand:	
  3266                           ; 1 bytes @ 0x1
  3267                           
  3268  0021                     DelayTime_1us@count:	
  3269                           ; 1 bytes @ 0x1
  3270                           
  3271  0021                     ___wmul@multiplier:	
  3272                           ; 2 bytes @ 0x1
  3273                           
  3274  0021                     ___awdiv@divisor:	
  3275                           ; 2 bytes @ 0x1
  3276                           
  3277  0021                     ___lwdiv@divisor:	
  3278                           ; 2 bytes @ 0x1
  3279                           
  3280  0021                     ___ftpack@arg:	
  3281                           ; 2 bytes @ 0x1
  3282                           
  3283                           
  3284                           ; 3 bytes @ 0x1
  3285  0021                     	ds	1
  3286  0022                     ??_getDimmerLights_Allow_Condition:	
  3287  0022                     ??_setCmd_Status:	
  3288                           ; 0 bytes @ 0x2
  3289                           
  3290  0022                     ??_setMemory_Data:	
  3291                           ; 0 bytes @ 0x2
  3292                           
  3293  0022                     ??_RF_Initialization:	
  3294                           ; 0 bytes @ 0x2
  3295                           
  3296  0022                     ??_setDimmerIntr_ControlStatus:	
  3297                           ; 0 bytes @ 0x2
  3298                           
  3299  0022                     ??_setDimmerIntr_DimmingValue:	
  3300                           ; 0 bytes @ 0x2
  3301                           
  3302  0022                     ??_setDimmerIntr_Dimming_Sw:	
  3303                           ; 0 bytes @ 0x2
  3304                           
  3305  0022                     ??_setDimmerIntr_Dimming_RF:	
  3306                           ; 0 bytes @ 0x2
  3307                           
  3308  0022                     ??_DimmerLights_Initialization:	
  3309                           ; 0 bytes @ 0x2
  3310                           
  3311  0022                     ??_Mcu_Initialization:	
  3312                           ; 0 bytes @ 0x2
  3313                           
  3314  0022                     ??___bmul:	
  3315                           ; 0 bytes @ 0x2
  3316                           
  3317  0022                     CC2500_WriteByte@loop_a:	
  3318                           ; 0 bytes @ 0x2
  3319                           
  3320  0022                     CC2500_ReadByte@loop_b:	
  3321                           ; 1 bytes @ 0x2
  3322                           
  3323  0022                     DelayOffPointSelect@sw:	
  3324                           ; 1 bytes @ 0x2
  3325                           
  3326  0022                     getDimmerIntr_DimmingValue@lights:	
  3327                           ; 1 bytes @ 0x2
  3328                           
  3329  0022                     DimmerLights_SelectPointer@lights:	
  3330                           ; 1 bytes @ 0x2
  3331                           
  3332  0022                     LedPointSelect@led:	
  3333                           ; 1 bytes @ 0x2
  3334                           
  3335  0022                     Flash_Memory_Read@i:	
  3336                           ; 1 bytes @ 0x2
  3337                           
  3338  0022                     Flash_Memory_Write@i:	
  3339                           ; 1 bytes @ 0x2
  3340                           
  3341  0022                     setMemory_Modify@command:	
  3342                           ; 1 bytes @ 0x2
  3343                           
  3344  0022                     setMemory_LoopSave@command:	
  3345                           ; 1 bytes @ 0x2
  3346                           
  3347  0022                     getMain_Lights_Count@status1:	
  3348                           ; 1 bytes @ 0x2
  3349                           
  3350  0022                     getCmd_Status@cmd:	
  3351                           ; 1 bytes @ 0x2
  3352                           
  3353  0022                     setLoad_AH_AL_Restore@i:	
  3354                           ; 1 bytes @ 0x2
  3355                           
  3356  0022                     setRF_Learn@command:	
  3357                           ; 1 bytes @ 0x2
  3358                           
  3359  0022                     getRF_KeyStatus@key:	
  3360                           ; 1 bytes @ 0x2
  3361                           
  3362  0022                     setRF_TransceiveGO@command:	
  3363                           ; 1 bytes @ 0x2
  3364                           
  3365  0022                     SwPointSelect@sw:	
  3366                           ; 1 bytes @ 0x2
  3367                           
  3368  0022                     getSw_KeyStatus@status:	
  3369                           ; 1 bytes @ 0x2
  3370                           
  3371  0022                     _getMain_All_Error_Status$3540:	
  3372                           ; 1 bytes @ 0x2
  3373                           
  3374                           
  3375                           ; 2 bytes @ 0x2
  3376  0022                     	ds	1
  3377  0023                     ??_CC2500_WriteCommand:	
  3378  0023                     ??_CC2500_ReadStatus:	
  3379                           ; 0 bytes @ 0x3
  3380                           
  3381  0023                     ??_DelayTime_1us:	
  3382                           ; 0 bytes @ 0x3
  3383                           
  3384  0023                     ?_CC2500_WriteREG:	
  3385                           ; 0 bytes @ 0x3
  3386                           
  3387  0023                     ??_DlyOff_Initialization:	
  3388                           ; 0 bytes @ 0x3
  3389                           
  3390  0023                     ??_getDimmerLights_Status:	
  3391                           ; 0 bytes @ 0x3
  3392                           
  3393  0023                     ??_setDimmerLights_SwOff:	
  3394                           ; 0 bytes @ 0x3
  3395                           
  3396  0023                     ?_setLED:	
  3397                           ; 0 bytes @ 0x3
  3398                           
  3399  0023                     ??_setLED_Main:	
  3400                           ; 0 bytes @ 0x3
  3401                           
  3402  0023                     ??_Load_Initialization:	
  3403                           ; 0 bytes @ 0x3
  3404                           
  3405  0023                     ??_getBuz_GO:	
  3406                           ; 0 bytes @ 0x3
  3407                           
  3408  0023                     ??_getDelayOff_GO:	
  3409                           ; 0 bytes @ 0x3
  3410                           
  3411  0023                     ??_setDimmerLights_DimmingOn:	
  3412                           ; 0 bytes @ 0x3
  3413                           
  3414  0023                     ?_setDimmerLights_DimmingRun:	
  3415                           ; 0 bytes @ 0x3
  3416                           
  3417  0023                     CC2500_WriteREG@value:	
  3418                           ; 0 bytes @ 0x3
  3419                           
  3420  0023                     DlyOff_Initialization@sw:	
  3421                           ; 1 bytes @ 0x3
  3422                           
  3423  0023                     getDelayOff_GO@sw:	
  3424                           ; 1 bytes @ 0x3
  3425                           
  3426  0023                     setDimmerIntr_ControlStatus@lights:	
  3427                           ; 1 bytes @ 0x3
  3428                           
  3429  0023                     setDimmerIntr_DimmingValue@lights:	
  3430                           ; 1 bytes @ 0x3
  3431                           
  3432  0023                     getDimmerIntr_DimmingValue@value:	
  3433                           ; 1 bytes @ 0x3
  3434                           
  3435  0023                     setDimmerIntr_Dimming_Sw@lights:	
  3436                           ; 1 bytes @ 0x3
  3437                           
  3438  0023                     setDimmerIntr_Dimming_RF@lights:	
  3439                           ; 1 bytes @ 0x3
  3440                           
  3441  0023                     setDimmerLights_SwOff@sw:	
  3442                           ; 1 bytes @ 0x3
  3443                           
  3444  0023                     setDimmerLights_DimmingOn@sw:	
  3445                           ; 1 bytes @ 0x3
  3446                           
  3447  0023                     getDimmerLights_Allow_Condition@allow:	
  3448                           ; 1 bytes @ 0x3
  3449                           
  3450  0023                     getDimmerLights_Status@lights:	
  3451                           ; 1 bytes @ 0x3
  3452                           
  3453  0023                     setDimmerLights_DimmingRun@command:	
  3454                           ; 1 bytes @ 0x3
  3455                           
  3456  0023                     setLED@command:	
  3457                           ; 1 bytes @ 0x3
  3458                           
  3459  0023                     Flash_Memory_Read@address:	
  3460                           ; 1 bytes @ 0x3
  3461                           
  3462  0023                     setMemory_Data@address:	
  3463                           ; 1 bytes @ 0x3
  3464                           
  3465  0023                     setCmd_Status@number:	
  3466                           ; 1 bytes @ 0x3
  3467                           
  3468  0023                     _getRF_KeyStatus$5295:	
  3469                           ; 1 bytes @ 0x3
  3470                           
  3471  0023                     _getSw_KeyStatus$6325:	
  3472                           ; 1 bytes @ 0x3
  3473                           
  3474  0023                     ___bmul@product:	
  3475                           ; 1 bytes @ 0x3
  3476                           
  3477  0023                     DelayTime_1us@i:	
  3478                           ; 1 bytes @ 0x3
  3479                           
  3480  0023                     ___wmul@multiplicand:	
  3481                           ; 2 bytes @ 0x3
  3482                           
  3483  0023                     ___awdiv@dividend:	
  3484                           ; 2 bytes @ 0x3
  3485                           
  3486  0023                     ___lwdiv@dividend:	
  3487                           ; 2 bytes @ 0x3
  3488                           
  3489                           
  3490                           ; 2 bytes @ 0x3
  3491  0023                     	ds	1
  3492  0024                     ??_CC2500_WriteREG:	
  3493  0024                     ??_setLED:	
  3494                           ; 0 bytes @ 0x4
  3495                           
  3496  0024                     ??_DelayOff_Initialization:	
  3497                           ; 0 bytes @ 0x4
  3498                           
  3499  0024                     ??_setDimmerLights_DimmingRun:	
  3500                           ; 0 bytes @ 0x4
  3501                           
  3502  0024                     ??_getAD:	
  3503                           ; 0 bytes @ 0x4
  3504                           
  3505  0024                     CC2500_WriteCommand@command:	
  3506                           ; 0 bytes @ 0x4
  3507                           
  3508  0024                     CC2500_ReadStatus@status_addr:	
  3509                           ; 1 bytes @ 0x4
  3510                           
  3511  0024                     getDelayOff_GO@go:	
  3512                           ; 1 bytes @ 0x4
  3513                           
  3514  0024                     _getDimmerLights_Allow_Condition$2223:	
  3515                           ; 1 bytes @ 0x4
  3516                           
  3517  0024                     getDimmerLights_Status@status:	
  3518                           ; 1 bytes @ 0x4
  3519                           
  3520  0024                     setLED@led:	
  3521                           ; 1 bytes @ 0x4
  3522                           
  3523  0024                     getAD@adcon0:	
  3524                           ; 1 bytes @ 0x4
  3525                           
  3526  0024                     Flash_Memory_Read@ret:	
  3527                           ; 1 bytes @ 0x4
  3528                           
  3529  0024                     ___bmul@multiplier:	
  3530                           ; 1 bytes @ 0x4
  3531                           
  3532  0024                     ___ftpack@exp:	
  3533                           ; 1 bytes @ 0x4
  3534                           
  3535  0024                     _getMain_All_Error_Status$3541:	
  3536                           ; 1 bytes @ 0x4
  3537                           
  3538                           
  3539                           ; 2 bytes @ 0x4
  3540  0024                     	ds	1
  3541  0025                     ??_CC2500_ClearTXFIFO:	
  3542  0025                     ??_CC2500_ClearRXFIFO:	
  3543                           ; 0 bytes @ 0x5
  3544                           
  3545  0025                     ??_CC2500_SIDLEMode:	
  3546                           ; 0 bytes @ 0x5
  3547                           
  3548  0025                     ??_setLED_Initialization:	
  3549                           ; 0 bytes @ 0x5
  3550                           
  3551  0025                     ??_Flash_Memory_Modify:	
  3552                           ; 0 bytes @ 0x5
  3553                           
  3554  0025                     ??_getLoad_AD:	
  3555                           ; 0 bytes @ 0x5
  3556                           
  3557  0025                     ??_getTemp_AD:	
  3558                           ; 0 bytes @ 0x5
  3559                           
  3560  0025                     ??_RF_RxDisable:	
  3561                           ; 0 bytes @ 0x5
  3562                           
  3563  0025                     ??_setSw_Initialization:	
  3564                           ; 0 bytes @ 0x5
  3565                           
  3566  0025                     ??_CC2500_TxData:	
  3567                           ; 0 bytes @ 0x5
  3568                           
  3569  0025                     ??_CC2500_RxData:	
  3570                           ; 0 bytes @ 0x5
  3571                           
  3572  0025                     ??___wmul:	
  3573                           ; 0 bytes @ 0x5
  3574                           
  3575  0025                     ??___awdiv:	
  3576                           ; 0 bytes @ 0x5
  3577                           
  3578  0025                     ??___lwdiv:	
  3579                           ; 0 bytes @ 0x5
  3580                           
  3581  0025                     CC2500_WriteREG@w_addr:	
  3582                           ; 0 bytes @ 0x5
  3583                           
  3584  0025                     setDimmerLights_DimmingRun@lights:	
  3585                           ; 1 bytes @ 0x5
  3586                           
  3587  0025                     setLED_Initialization@led:	
  3588                           ; 1 bytes @ 0x5
  3589                           
  3590  0025                     setLED_Main@led:	
  3591                           ; 1 bytes @ 0x5
  3592                           
  3593  0025                     setSw_Initialization@sw:	
  3594                           ; 1 bytes @ 0x5
  3595                           
  3596  0025                     ___ftpack@sign:	
  3597                           ; 1 bytes @ 0x5
  3598                           
  3599  0025                     getBuz_GO@i:	
  3600                           ; 1 bytes @ 0x5
  3601                           
  3602  0025                     DelayTime_1us@j:	
  3603                           ; 2 bytes @ 0x5
  3604                           
  3605  0025                     ___wmul@product:	
  3606                           ; 2 bytes @ 0x5
  3607                           
  3608                           
  3609                           ; 2 bytes @ 0x5
  3610  0025                     	ds	1
  3611  0026                     ??_CC2500_InitSetREG:	
  3612  0026                     ??_CC2500_InitPATable:	
  3613                           ; 0 bytes @ 0x6
  3614                           
  3615  0026                     ??_Switch_Initialization:	
  3616                           ; 0 bytes @ 0x6
  3617                           
  3618  0026                     ??___ftpack:	
  3619                           ; 0 bytes @ 0x6
  3620                           
  3621  0026                     ??_LED_Initialization:	
  3622                           ; 0 bytes @ 0x6
  3623                           
  3624  0026                     ??_LED_Main:	
  3625                           ; 0 bytes @ 0x6
  3626                           
  3627  0026                     CC2500_TxData@loop_e:	
  3628                           ; 0 bytes @ 0x6
  3629                           
  3630  0026                     CC2500_RxData@loop_f:	
  3631                           ; 1 bytes @ 0x6
  3632                           
  3633  0026                     Flash_Memory_Modify@i:	
  3634                           ; 1 bytes @ 0x6
  3635                           
  3636  0026                     getMain_All_Error_Status@command:	
  3637                           ; 1 bytes @ 0x6
  3638                           
  3639  0026                     getTemp_AD@channel:	
  3640                           ; 1 bytes @ 0x6
  3641                           
  3642  0026                     ___awdiv@counter:	
  3643                           ; 1 bytes @ 0x6
  3644                           
  3645  0026                     ___lwdiv@quotient:	
  3646                           ; 1 bytes @ 0x6
  3647                           
  3648                           
  3649                           ; 2 bytes @ 0x6
  3650  0026                     	ds	1
  3651  0027                     ??_CC2500_PowerRST:	
  3652  0027                     ??_CC2500_FrequencyCabr:	
  3653                           ; 0 bytes @ 0x7
  3654                           
  3655  0027                     ??_Flash_Memory_Main:	
  3656                           ; 0 bytes @ 0x7
  3657                           
  3658  0027                     CC2500_InitSetREG@temp1:	
  3659                           ; 0 bytes @ 0x7
  3660                           
  3661  0027                     CC2500_InitPATable@temp:	
  3662                           ; 1 bytes @ 0x7
  3663                           
  3664  0027                     getMain_All_Error_Status@status:	
  3665                           ; 1 bytes @ 0x7
  3666                           
  3667  0027                     getLoad_AD@channel:	
  3668                           ; 1 bytes @ 0x7
  3669                           
  3670  0027                     ___awdiv@sign:	
  3671                           ; 1 bytes @ 0x7
  3672                           
  3673  0027                     getTemp_AD@ADRES:	
  3674                           ; 1 bytes @ 0x7
  3675                           
  3676                           
  3677                           ; 2 bytes @ 0x7
  3678  0027                     	ds	1
  3679  0028                     CC2500_InitSetREG@temp2:	
  3680  0028                     CC2500_InitPATable@loop_d:	
  3681                           ; 1 bytes @ 0x8
  3682                           
  3683  0028                     getLoad_AD@k:	
  3684                           ; 1 bytes @ 0x8
  3685                           
  3686  0028                     ___lwdiv@counter:	
  3687                           ; 1 bytes @ 0x8
  3688                           
  3689  0028                     ___awdiv@quotient:	
  3690                           ; 1 bytes @ 0x8
  3691                           
  3692                           
  3693                           ; 2 bytes @ 0x8
  3694  0028                     	ds	1
  3695  0029                     ??_Load_Main:	
  3696  0029                     ?___awtoft:	
  3697                           ; 0 bytes @ 0x9
  3698                           
  3699  0029                     CC2500_InitSetREG@loop_c:	
  3700                           ; 3 bytes @ 0x9
  3701                           
  3702  0029                     getLoad_AD@j:	
  3703                           ; 1 bytes @ 0x9
  3704                           
  3705  0029                     ___awtoft@c:	
  3706                           ; 1 bytes @ 0x9
  3707                           
  3708                           
  3709                           ; 2 bytes @ 0x9
  3710  0029                     	ds	1
  3711  002A                     ?_setBuz:	
  3712  002A                     ??_CC2500_PowerOnInitial:	
  3713                           ; 0 bytes @ 0xA
  3714                           
  3715  002A                     setBuz@time:	
  3716                           ; 0 bytes @ 0xA
  3717                           
  3718  002A                     getLoad_AD@ADRES:	
  3719                           ; 2 bytes @ 0xA
  3720                           
  3721                           
  3722                           ; 2 bytes @ 0xA
  3723  002A                     	ds	1
  3724  002B                     Load_Main@error:	
  3725                           
  3726                           ; 1 bytes @ 0xB
  3727  002B                     	ds	1
  3728  002C                     ??_setBuz:	
  3729  002C                     ??___awtoft:	
  3730                           ; 0 bytes @ 0xC
  3731                           
  3732  002C                     getLoad_AD@i:	
  3733                           ; 0 bytes @ 0xC
  3734                           
  3735  002C                     _Load_Main$3909:	
  3736                           ; 1 bytes @ 0xC
  3737                           
  3738                           
  3739                           ; 2 bytes @ 0xC
  3740  002C                     	ds	1
  3741  002D                     setBuz@count:	
  3742                           
  3743                           ; 1 bytes @ 0xD
  3744  002D                     	ds	1
  3745  002E                     ??_setDimmerLights_SwOn:	
  3746  002E                     ??_my_MainTimer:	
  3747                           ; 0 bytes @ 0xE
  3748                           
  3749  002E                     ??_Exception_Main:	
  3750                           ; 0 bytes @ 0xE
  3751                           
  3752  002E                     setDimmerLights_SwOn@sw:	
  3753                           ; 0 bytes @ 0xE
  3754                           
  3755  002E                     Load_Main@ErrorCountValue:	
  3756                           ; 1 bytes @ 0xE
  3757                           
  3758  002E                     ___awtoft@sign:	
  3759                           ; 1 bytes @ 0xE
  3760                           
  3761                           
  3762                           ; 1 bytes @ 0xE
  3763  002E                     	ds	1
  3764  002F                     ?___ftdiv:	
  3765  002F                     ?___ftmul:	
  3766                           ; 3 bytes @ 0xF
  3767                           
  3768  002F                     setDimmerLights_SwOn@idle:	
  3769                           ; 3 bytes @ 0xF
  3770                           
  3771  002F                     Exception_Main@status:	
  3772                           ; 1 bytes @ 0xF
  3773                           
  3774  002F                     Load_Main@Load_RunStatus:	
  3775                           ; 1 bytes @ 0xF
  3776                           
  3777  002F                     ___ftdiv@f2:	
  3778                           ; 1 bytes @ 0xF
  3779                           
  3780  002F                     ___ftmul@f1:	
  3781                           ; 3 bytes @ 0xF
  3782                           
  3783                           
  3784                           ; 3 bytes @ 0xF
  3785  002F                     	ds	1
  3786  0030                     ??_setSw_Main:	
  3787  0030                     Exception_Main@count:	
  3788                           ; 0 bytes @ 0x10
  3789                           
  3790  0030                     Load_Main@LightsCount:	
  3791                           ; 1 bytes @ 0x10
  3792                           
  3793                           
  3794                           ; 1 bytes @ 0x10
  3795  0030                     	ds	1
  3796  0031                     Exception_Main@i:	
  3797  0031                     Load_Main@i:	
  3798                           ; 2 bytes @ 0x11
  3799                           
  3800                           
  3801                           ; 2 bytes @ 0x11
  3802  0031                     	ds	1
  3803  0032                     setSw_Main@sw:	
  3804  0032                     ___ftdiv@f1:	
  3805                           ; 1 bytes @ 0x12
  3806                           
  3807  0032                     ___ftmul@f2:	
  3808                           ; 3 bytes @ 0x12
  3809                           
  3810                           
  3811                           ; 3 bytes @ 0x12
  3812  0032                     	ds	1
  3813  0033                     ??_Switch_Main:	
  3814  0033                     Exception_Main@i_3552:	
  3815                           ; 0 bytes @ 0x13
  3816                           
  3817                           
  3818                           ; 2 bytes @ 0x13
  3819  0033                     	ds	2
  3820  0035                     ??___ftdiv:	
  3821  0035                     ??___ftmul:	
  3822                           ; 0 bytes @ 0x15
  3823                           
  3824  0035                     Exception_Main@lights:	
  3825                           ; 0 bytes @ 0x15
  3826                           
  3827                           
  3828                           ; 1 bytes @ 0x15
  3829  0035                     	ds	1
  3830  0036                     Exception_Main@error:	
  3831                           
  3832                           ; 1 bytes @ 0x16
  3833  0036                     	ds	3
  3834  0039                     ___ftdiv@cntr:	
  3835  0039                     ___ftmul@exp:	
  3836                           ; 1 bytes @ 0x19
  3837                           
  3838                           
  3839                           ; 1 bytes @ 0x19
  3840  0039                     	ds	1
  3841  003A                     ___ftdiv@f3:	
  3842  003A                     ___ftmul@f3_as_product:	
  3843                           ; 3 bytes @ 0x1A
  3844                           
  3845                           
  3846                           ; 3 bytes @ 0x1A
  3847  003A                     	ds	3
  3848  003D                     ___ftdiv@exp:	
  3849  003D                     ___ftmul@cntr:	
  3850                           ; 1 bytes @ 0x1D
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x1D
  3854  003D                     	ds	1
  3855  003E                     ___ftdiv@sign:	
  3856  003E                     ___ftmul@sign:	
  3857                           ; 1 bytes @ 0x1E
  3858                           
  3859                           
  3860                           ; 1 bytes @ 0x1E
  3861  003E                     	ds	1
  3862  003F                     ?___ftneg:	
  3863  003F                     ___ftneg@f1:	
  3864                           ; 3 bytes @ 0x1F
  3865                           
  3866                           
  3867                           ; 3 bytes @ 0x1F
  3868  003F                     	ds	3
  3869  0042                     ??___ftneg:	
  3870  0042                     ?___ftadd:	
  3871                           ; 0 bytes @ 0x22
  3872                           
  3873  0042                     ___ftadd@f1:	
  3874                           ; 3 bytes @ 0x22
  3875                           
  3876                           
  3877                           ; 3 bytes @ 0x22
  3878  0042                     	ds	3
  3879  0045                     ___ftadd@f2:	
  3880                           
  3881                           ; 3 bytes @ 0x25
  3882  0045                     	ds	3
  3883  0048                     ??___ftadd:	
  3884                           
  3885                           ; 0 bytes @ 0x28
  3886  0048                     	ds	4
  3887  004C                     ___ftadd@sign:	
  3888                           
  3889                           ; 1 bytes @ 0x2C
  3890  004C                     	ds	1
  3891  004D                     ___ftadd@exp2:	
  3892                           
  3893                           ; 1 bytes @ 0x2D
  3894  004D                     	ds	1
  3895  004E                     ___ftadd@exp1:	
  3896                           
  3897                           ; 1 bytes @ 0x2E
  3898  004E                     	ds	1
  3899  004F                     ?___fttol:	
  3900  004F                     ___fttol@f1:	
  3901                           ; 4 bytes @ 0x2F
  3902                           
  3903                           
  3904                           ; 3 bytes @ 0x2F
  3905  004F                     	ds	4
  3906  0053                     ??___fttol:	
  3907                           
  3908                           ; 0 bytes @ 0x33
  3909  0053                     	ds	4
  3910  0057                     ___fttol@sign1:	
  3911                           
  3912                           ; 1 bytes @ 0x37
  3913  0057                     	ds	1
  3914  0058                     ___fttol@lval:	
  3915                           
  3916                           ; 4 bytes @ 0x38
  3917  0058                     	ds	4
  3918  005C                     ___fttol@exp1:	
  3919                           
  3920                           ; 1 bytes @ 0x3C
  3921  005C                     	ds	1
  3922  005D                     ??_getDimmerLights_PercentToValue:	
  3923  005D                     ??_getDimmerLights_ValueToPercent:	
  3924                           ; 0 bytes @ 0x3D
  3925                           
  3926                           
  3927                           ; 0 bytes @ 0x3D
  3928  005D                     	ds	2
  3929  005F                     getDimmerLights_PercentToValue@value:	
  3930  005F                     getDimmerLights_ValueToPercent@value:	
  3931                           ; 1 bytes @ 0x3F
  3932                           
  3933                           
  3934                           ; 1 bytes @ 0x3F
  3935  005F                     	ds	1
  3936  0060                     getDimmerLights_PercentToValue@i:	
  3937  0060                     getDimmerLights_ValueToPercent@i:	
  3938                           ; 3 bytes @ 0x40
  3939                           
  3940                           
  3941                           ; 3 bytes @ 0x40
  3942  0060                     	ds	3
  3943  0063                     ?_setProductData:	
  3944  0063                     ?_setDimmerIntr_MaxmumValue:	
  3945                           ; 0 bytes @ 0x43
  3946                           
  3947  0063                     ??_Flash_Memory_Initialization:	
  3948                           ; 0 bytes @ 0x43
  3949                           
  3950  0063                     setDimmerIntr_MaxmumValue@value:	
  3951                           ; 0 bytes @ 0x43
  3952                           
  3953  0063                     setProductData@value:	
  3954                           ; 1 bytes @ 0x43
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x43
  3958  0063                     	ds	1
  3959  0064                     ??_setProductData:	
  3960  0064                     ??_setDimmerIntr_MaxmumValue:	
  3961                           ; 0 bytes @ 0x44
  3962                           
  3963  0064                     Flash_Memory_Initialization@i:	
  3964                           ; 0 bytes @ 0x44
  3965                           
  3966                           
  3967                           ; 1 bytes @ 0x44
  3968  0064                     	ds	1
  3969  0065                     setDimmerIntr_MaxmumValue@lights:	
  3970  0065                     setProductData@address:	
  3971                           ; 1 bytes @ 0x45
  3972                           
  3973                           
  3974                           ; 1 bytes @ 0x45
  3975  0065                     	ds	1
  3976  0066                     ??_DlyOff_Main:	
  3977  0066                     ?_setRF_DimmerLights:	
  3978                           ; 0 bytes @ 0x46
  3979                           
  3980  0066                     ??_setTemp_Main:	
  3981                           ; 0 bytes @ 0x46
  3982                           
  3983  0066                     ??_setLog_Code:	
  3984                           ; 0 bytes @ 0x46
  3985                           
  3986  0066                     ??_setRFSW_AdjControl:	
  3987                           ; 0 bytes @ 0x46
  3988                           
  3989  0066                     ?_setDelayOff_GO:	
  3990                           ; 0 bytes @ 0x46
  3991                           
  3992  0066                     setDelayOff_GO@command:	
  3993                           ; 0 bytes @ 0x46
  3994                           
  3995  0066                     setRF_DimmerLights@on:	
  3996                           ; 1 bytes @ 0x46
  3997                           
  3998                           
  3999                           ; 1 bytes @ 0x46
  4000  0066                     	ds	1
  4001  0067                     ??_setRF_DimmerLights:	
  4002  0067                     ??_Temp_Main:	
  4003                           ; 0 bytes @ 0x47
  4004                           
  4005  0067                     setDelayOff_GO@value:	
  4006                           ; 0 bytes @ 0x47
  4007                           
  4008                           
  4009                           ; 1 bytes @ 0x47
  4010  0067                     	ds	1
  4011  0068                     ??_setDelayOff_GO:	
  4012  0068                     DlyOff_Main@sw:	
  4013                           ; 0 bytes @ 0x48
  4014                           
  4015  0068                     setRFSW_AdjControl@status:	
  4016                           ; 1 bytes @ 0x48
  4017                           
  4018                           
  4019                           ; 1 bytes @ 0x48
  4020  0068                     	ds	1
  4021  0069                     ??_DelayOff_Main:	
  4022  0069                     setRFSW_AdjControl@sw:	
  4023                           ; 0 bytes @ 0x49
  4024                           
  4025  0069                     setRF_DimmerLights@status:	
  4026                           ; 1 bytes @ 0x49
  4027                           
  4028                           
  4029                           ; 1 bytes @ 0x49
  4030  0069                     	ds	1
  4031  006A                     setDelayOff_GO@i:	
  4032  006A                     setRF_DimmerLights@lights:	
  4033                           ; 1 bytes @ 0x4A
  4034                           
  4035                           
  4036                           ; 1 bytes @ 0x4A
  4037  006A                     	ds	1
  4038  006B                     ?_setDimmerLights_Dimming:	
  4039  006B                     setDelayOff_GO@j:	
  4040                           ; 0 bytes @ 0x4B
  4041                           
  4042  006B                     setDimmerLights_Dimming@status:	
  4043                           ; 1 bytes @ 0x4B
  4044                           
  4045                           
  4046                           ; 1 bytes @ 0x4B
  4047  006B                     	ds	1
  4048  006C                     ??_setDimmerLights_Dimming:	
  4049  006C                     setDelayOff_GO@k:	
  4050                           ; 0 bytes @ 0x4C
  4051                           
  4052                           
  4053                           ; 1 bytes @ 0x4C
  4054  006C                     	ds	1
  4055  006D                     setDelayOff_GO@sw:	
  4056  006D                     setDimmerLights_Dimming@lights:	
  4057                           ; 1 bytes @ 0x4D
  4058                           
  4059                           
  4060                           ; 1 bytes @ 0x4D
  4061  006D                     	ds	1
  4062  006E                     ??_setDimmerLights_Main:	
  4063  006E                     ??_RF_Main:	
  4064                           ; 0 bytes @ 0x4E
  4065                           
  4066  006E                     ??_setControl_Lights_Table:	
  4067                           ; 0 bytes @ 0x4E
  4068                           
  4069  006E                     ??_DimmerLights_Main:	
  4070                           ; 0 bytes @ 0x4E
  4071                           
  4072  006E                     ??_main:	
  4073                           ; 0 bytes @ 0x4E
  4074                           
  4075                           
  4076                           	psect	maintext
  4077  1615                     __pmaintext:	
  4078                           ; 0 bytes @ 0x4E
  4079 ;;
  4080 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4081 ;;
  4082 ;; *************** function _main *****************
  4083 ;; Defined at:
  4084 ;;		line 7 in file "../src/Main_B1.c"
  4085 ;; Parameters:    Size  Location     Type
  4086 ;;  argc            2    0[BANK3 ] int 
  4087 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;		None
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  2    0[BANK3 ] int 
  4092 ;; Registers used:
  4093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : 17F/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4099 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4102 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4103 ;;Total ram usage:        4 bytes
  4104 ;; Hardware stack levels required when called:   13
  4105 ;; This function calls:
  4106 ;;		_Buzzer_Initialization
  4107 ;;		_Buzzer_Main
  4108 ;;		_CC2500_PowerOnInitial
  4109 ;;		_DelayOff_Initialization
  4110 ;;		_DelayOff_Main
  4111 ;;		_DimmerLights_Initialization
  4112 ;;		_DimmerLights_Main
  4113 ;;		_Exception_Main
  4114 ;;		_Flash_Memory_Initialization
  4115 ;;		_Flash_Memory_Main
  4116 ;;		_LED_Initialization
  4117 ;;		_LED_Main
  4118 ;;		_Load_Initialization
  4119 ;;		_Load_Main
  4120 ;;		_Mcu_Initialization
  4121 ;;		_RF_Initialization
  4122 ;;		_RF_Main
  4123 ;;		_Switch_Initialization
  4124 ;;		_Switch_Main
  4125 ;;		_Temp_Initialization
  4126 ;;		_Temp_Main
  4127 ;;		_WDT_Main
  4128 ;;		_getLoad_AD
  4129 ;;		_getTemp_AD
  4130 ;;		_myMain_Initialization
  4131 ;;		_my_MainTimer
  4132 ;; This function is called by:
  4133 ;;		Startup code after reset
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           
  4138                           ;psect for function _main
  4139  1615                     _main:	
  4140                           
  4141                           ;Main_B1.c: 8: myMain_Initialization();
  4142                           
  4143                           ;incstack = 0
  4144                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4145  1615  319D  25C4  3196   	fcall	_myMain_Initialization
  4146                           
  4147                           ;Main_B1.c: 9: Mcu_Initialization();
  4148  1618  319D  2554  3196   	fcall	_Mcu_Initialization
  4149                           
  4150                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4151  161B  3184  2476  3196   	fcall	_Flash_Memory_Initialization
  4152                           
  4153                           ;Main_B1.c: 11: LED_Initialization();
  4154  161E  319B  233F  3196   	fcall	_LED_Initialization
  4155                           
  4156                           ;Main_B1.c: 12: Buzzer_Initialization();
  4157  1621  319B  2325  3196   	fcall	_Buzzer_Initialization
  4158                           
  4159                           ;Main_B1.c: 14: ;;
  4160                           ;Main_B1.c: 15: Temp_Initialization();
  4161  1624  319B  2331  3196   	fcall	_Temp_Initialization
  4162                           
  4163                           ;Main_B1.c: 16: Load_Initialization();
  4164  1627  319B  2328  3196   	fcall	_Load_Initialization
  4165                           
  4166                           ;Main_B1.c: 17: ;;
  4167                           ;Main_B1.c: 18: DelayOff_Initialization();
  4168  162A  319B  2337  3196   	fcall	_DelayOff_Initialization
  4169                           
  4170                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4171  162D  319B  2370  3196   	fcall	_DimmerLights_Initialization
  4172                           
  4173                           ;Main_B1.c: 21: ;;
  4174                           ;Main_B1.c: 22: ;;
  4175                           ;Main_B1.c: 23: ;;
  4176                           ;Main_B1.c: 24: Switch_Initialization();
  4177  1630  319B  235B  3196   	fcall	_Switch_Initialization
  4178                           
  4179                           ;Main_B1.c: 25: RF_Initialization();
  4180  1633  319B  232B  3196   	fcall	_RF_Initialization
  4181                           
  4182                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4183  1636  319E  2600  3196   	fcall	_CC2500_PowerOnInitial
  4184  1639                     l9124:	
  4185                           ;Main_B1.c: 27: ;;
  4186                           ;Main_B1.c: 28: ;;
  4187                           ;Main_B1.c: 30: while (1) {
  4188                           
  4189                           
  4190                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4191  1639  0022               	movlb	2	; select bank2
  4192  163A  1C20               	btfss	_myMain^(0+256),0
  4193  163B  2E44               	goto	l9128
  4194                           
  4195                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4196  163C  3005               	movlw	5
  4197  163D  318B  2333  3196   	fcall	_getLoad_AD
  4198                           
  4199                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4200  1640  3009               	movlw	9
  4201  1641  3193  23B4  3196   	fcall	_getTemp_AD
  4202  1644                     l9128:	
  4203                           
  4204                           ;Main_B1.c: 57: }
  4205                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4206  1644  0021               	movlb	1	; select bank1
  4207  1645  1C46               	btfss	_Timer1^(0+128),0
  4208  1646  2E39               	goto	l9124
  4209                           
  4210                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4211  1647  1046               	bcf	_Timer1^(0+128),0
  4212                           
  4213                           ;Main_B1.c: 96: my_MainTimer();
  4214  1648  3193  2377  3196   	fcall	_my_MainTimer
  4215                           
  4216                           ;Main_B1.c: 97: WDT_Main();
  4217  164B  319D  2566  3196   	fcall	_WDT_Main
  4218                           
  4219                           ;Main_B1.c: 98: ;;
  4220                           ;Main_B1.c: 99: ;;
  4221                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4222  164E  0022               	movlb	2	; select bank2
  4223  164F  1C20               	btfss	_myMain^(0+256),0
  4224  1650  2E39               	goto	l9124
  4225                           
  4226                           ;Main_B1.c: 101: Flash_Memory_Main();
  4227  1651  3192  2225  3196   	fcall	_Flash_Memory_Main
  4228                           
  4229                           ;Main_B1.c: 103: LED_Main();
  4230  1654  319B  2343  3196   	fcall	_LED_Main
  4231                           
  4232                           ;Main_B1.c: 104: Buzzer_Main();
  4233  1657  3194  247B  3196   	fcall	_Buzzer_Main
  4234                           
  4235                           ;Main_B1.c: 106: ;;
  4236                           ;Main_B1.c: 107: Temp_Main();
  4237  165A  319B  2334  3196   	fcall	_Temp_Main
  4238                           
  4239                           ;Main_B1.c: 108: Load_Main();
  4240  165D  3180  204A  3196   	fcall	_Load_Main
  4241                           
  4242                           ;Main_B1.c: 109: ;;
  4243                           ;Main_B1.c: 111: ;;
  4244                           ;Main_B1.c: 112: DimmerLights_Main();
  4245  1660  319F  2750  3196   	fcall	_DimmerLights_Main
  4246                           
  4247                           ;Main_B1.c: 113: Switch_Main();
  4248  1663  319B  237E  3196   	fcall	_Switch_Main
  4249                           
  4250                           ;Main_B1.c: 114: ;;
  4251                           ;Main_B1.c: 115: ;;
  4252                           ;Main_B1.c: 117: RF_Main();
  4253  1666  319B  232E  3196   	fcall	_RF_Main
  4254                           
  4255                           ;Main_B1.c: 118: DelayOff_Main();
  4256  1669  319B  233B  3196   	fcall	_DelayOff_Main
  4257                           
  4258                           ;Main_B1.c: 119: ;;
  4259                           ;Main_B1.c: 120: ;;
  4260                           ;Main_B1.c: 121: Exception_Main();
  4261  166C  3186  263C  3196   	fcall	_Exception_Main
  4262  166F  2E39               	goto	l9124
  4263  1670                     __end_of_main:	
  4264                           ;Main_B1.c: 128: }
  4265                           ;Main_B1.c: 129: }
  4266                           ;Main_B1.c: 163: }
  4267                           ;Main_B1.c: 164: return (0);
  4268                           ;	Return value of _main is never used
  4269                           
  4270                           
  4271                           	psect	text1
  4272  1377                     __ptext1:	
  4273 ;; *************** function _my_MainTimer *****************
  4274 ;; Defined at:
  4275 ;;		line 185 in file "../src/Main_B1.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;		None               void
  4282 ;; Registers used:
  4283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;Total ram usage:        1 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    7
  4296 ;; This function calls:
  4297 ;;		_setBuz
  4298 ;; This function is called by:
  4299 ;;		_main
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function _my_MainTimer
  4305  1377                     _my_MainTimer:	
  4306                           
  4307                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4308                           
  4309                           ;incstack = 0
  4310                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4311  1377  0022               	movlb	2	; select bank2
  4312  1378  1820               	btfsc	_myMain^(0+256),0
  4313  1379  2B91               	goto	l8860
  4314                           
  4315                           ;Main_B1.c: 188: myMain.PowerCount++;
  4316  137A  3001               	movlw	1
  4317  137B  0020               	movlb	0	; select bank0
  4318  137C  00AE               	movwf	??_my_MainTimer
  4319  137D  082E               	movf	??_my_MainTimer,w
  4320  137E  0022               	movlb	2	; select bank2
  4321  137F  07A1               	addwf	(_myMain^(0+256)+1),f
  4322                           
  4323                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4324  1380  0821               	movf	(_myMain^(0+256)+1),w
  4325  1381  3A4B               	xorlw	75
  4326  1382  1D03               	skipz
  4327  1383  0008               	return
  4328                           
  4329                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4330  1384  01A1               	clrf	(_myMain^(0+256)+1)
  4331                           
  4332                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4333  1385  1420               	bsf	_myMain^(0+256),0
  4334                           
  4335                           ;Main_B1.c: 196: setBuz(3, 50);
  4336  1386  3032               	movlw	50
  4337  1387  0020               	movlb	0	; select bank0
  4338  1388  00AA               	movwf	setBuz@time
  4339  1389  3000               	movlw	0
  4340  138A  00AB               	movwf	setBuz@time+1
  4341  138B  3003               	movlw	3
  4342  138C  3195  25BC         	fcall	_setBuz
  4343                           
  4344                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4345  138E  0022               	movlb	2	; select bank2
  4346  138F  1620               	bsf	_myMain^(0+256),4
  4347                           
  4348                           ;Main_B1.c: 206: }
  4349                           ;Main_B1.c: 207: } else {
  4350  1390  0008               	return
  4351  1391                     l8860:	
  4352                           
  4353                           ;Main_B1.c: 208: myMain.PowerCount++;
  4354  1391  3001               	movlw	1
  4355  1392  0020               	movlb	0	; select bank0
  4356  1393  00AE               	movwf	??_my_MainTimer
  4357  1394  082E               	movf	??_my_MainTimer,w
  4358  1395  0022               	movlb	2	; select bank2
  4359  1396  07A1               	addwf	(_myMain^(0+256)+1),f
  4360                           
  4361                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4362  1397  0821               	movf	(_myMain^(0+256)+1),w
  4363  1398  3A32               	xorlw	50
  4364  1399  1903               	btfsc	3,2
  4365                           
  4366                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4367  139A  01A1               	clrf	(_myMain^(0+256)+1)
  4368                           
  4369                           ;Main_B1.c: 226: }
  4370                           ;Main_B1.c: 228: myMain.Count1++;
  4371  139B  3001               	movlw	1
  4372  139C  07A4               	addwf	(_myMain^(0+256)+4),f
  4373  139D  3000               	movlw	0
  4374  139E  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4375                           
  4376                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4377  139F  3004               	movlw	4
  4378  13A0  3E20               	addlw	_myMain& (0+255)
  4379  13A1  0086               	movwf	6
  4380  13A2  3001               	movlw	1	; select bank2/3
  4381  13A3  0087               	movwf	7
  4382  13A4  3F40               	moviw [0]fsr1
  4383  13A5  3A32               	xorlw	50
  4384  13A6  1D03               	skipz
  4385  13A7  2BAA               	goto	u9665
  4386  13A8  3F41               	moviw [1]fsr1
  4387  13A9  3A00               	xorlw	0
  4388  13AA                     u9665:	
  4389  13AA  1D03               	skipz
  4390  13AB  0008               	return
  4391                           
  4392                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4393  13AC  01A4               	clrf	(_myMain^(0+256)+4)
  4394  13AD  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4395                           
  4396                           ;Main_B1.c: 242: if (myMain.Flag) {
  4397  13AE  1CA0               	btfss	_myMain^(0+256),1
  4398  13AF  2BB2               	goto	l1431
  4399                           
  4400                           ;Main_B1.c: 243: myMain.Flag = 0;
  4401  13B0  10A0               	bcf	_myMain^(0+256),1
  4402                           
  4403                           ;Main_B1.c: 252: } else {
  4404  13B1  0008               	return
  4405  13B2                     l1431:	
  4406                           
  4407                           ;Main_B1.c: 253: myMain.Flag = 1;
  4408  13B2  14A0               	bsf	_myMain^(0+256),1
  4409  13B3  0008               	return
  4410  13B4                     __end_of_my_MainTimer:	
  4411                           
  4412                           	psect	text2
  4413  1DC4                     __ptext2:	
  4414 ;; *************** function _myMain_Initialization *****************
  4415 ;; Defined at:
  4416 ;;		line 170 in file "../src/Main_B1.c"
  4417 ;; Parameters:    Size  Location     Type
  4418 ;;		None
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;		None
  4421 ;; Return value:  Size  Location     Type
  4422 ;;		None               void
  4423 ;; Registers used:
  4424 ;;		wreg, fsr1l, fsr1h
  4425 ;; Tracked objects:
  4426 ;;		On entry : 0/0
  4427 ;;		On exit  : 0/0
  4428 ;;		Unchanged: 0/0
  4429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;Total ram usage:        1 bytes
  4435 ;; Hardware stack levels used:    1
  4436 ;; Hardware stack levels required when called:    5
  4437 ;; This function calls:
  4438 ;;		Nothing
  4439 ;; This function is called by:
  4440 ;;		_main
  4441 ;; This function uses a non-reentrant model
  4442 ;;
  4443                           
  4444                           
  4445                           ;psect for function _myMain_Initialization
  4446  1DC4                     _myMain_Initialization:	
  4447                           
  4448                           ;Main_B1.c: 173: product = &_product;
  4449                           
  4450                           ;incstack = 0
  4451                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4452  1DC4  3020               	movlw	__product& (0+255)
  4453  1DC5  0020               	movlb	0	; select bank0
  4454  1DC6  00A1               	movwf	??_myMain_Initialization
  4455  1DC7  0821               	movf	??_myMain_Initialization,w
  4456  1DC8  0021               	movlb	1	; select bank1
  4457  1DC9  00ED               	movwf	_product^(0+128)
  4458                           
  4459                           ;Main_B1.c: 174: product->Data[20] = 209;
  4460  1DCA  30D1               	movlw	209
  4461  1DCB  0020               	movlb	0	; select bank0
  4462  1DCC  00A1               	movwf	??_myMain_Initialization
  4463  1DCD  0021               	movlb	1	; select bank1
  4464  1DCE  086D               	movf	_product^(0+128),w
  4465  1DCF  3E14               	addlw	20
  4466  1DD0  0086               	movwf	6
  4467  1DD1  3002               	movlw	2	; select bank4/5
  4468  1DD2  0087               	movwf	7
  4469  1DD3  0020               	movlb	0	; select bank0
  4470  1DD4  0821               	movf	??_myMain_Initialization,w
  4471  1DD5  0081               	movwf	1
  4472  1DD6  0008               	return
  4473  1DD7                     __end_of_myMain_Initialization:	
  4474                           
  4475                           	psect	text3
  4476  13B4                     __ptext3:	
  4477 ;; *************** function _getTemp_AD *****************
  4478 ;; Defined at:
  4479 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;  channel         1    wreg     unsigned char 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  channel         1    6[BANK0 ] unsigned char 
  4484 ;;  ADRES           2    7[BANK0 ] unsigned int 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;		None               void
  4487 ;; Registers used:
  4488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;Total ram usage:        4 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    7
  4501 ;; This function calls:
  4502 ;;		_getAD
  4503 ;; This function is called by:
  4504 ;;		_main
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           
  4509                           ;psect for function _getTemp_AD
  4510  13B4                     _getTemp_AD:	
  4511                           
  4512                           ;incstack = 0
  4513                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4514                           ;getTemp_AD@channel stored from wreg
  4515  13B4  0020               	movlb	0	; select bank0
  4516  13B5  00A6               	movwf	getTemp_AD@channel
  4517                           
  4518                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4519  13B6  01A7               	clrf	getTemp_AD@ADRES
  4520  13B7  01A8               	clrf	getTemp_AD@ADRES+1
  4521                           
  4522                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4523  13B8  0021               	movlb	1	; select bank1
  4524  13B9  1D5B               	btfss	_Temp^(0+128),2
  4525  13BA  2BE4               	goto	l7750
  4526                           
  4527                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4528  13BB  30F0               	movlw	240
  4529  13BC  0020               	movlb	0	; select bank0
  4530  13BD  00A5               	movwf	??_getTemp_AD
  4531  13BE  0825               	movf	??_getTemp_AD,w
  4532  13BF  00A1               	movwf	getAD@adcon1
  4533  13C0  0826               	movf	getTemp_AD@channel,w
  4534  13C1  3190  20AD  3193   	fcall	_getAD
  4535  13C4  0020               	movlb	0	; select bank0
  4536  13C5  0822               	movf	?_getAD+1,w
  4537  13C6  01A8               	clrf	getTemp_AD@ADRES+1
  4538  13C7  07A8               	addwf	getTemp_AD@ADRES+1,f
  4539  13C8  0821               	movf	?_getAD,w
  4540  13C9  01A7               	clrf	getTemp_AD@ADRES
  4541  13CA  07A7               	addwf	getTemp_AD@ADRES,f
  4542                           
  4543                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4544  13CB  0828               	movf	getTemp_AD@ADRES+1,w
  4545  13CC  0427               	iorwf	getTemp_AD@ADRES,w
  4546  13CD  1903               	skipnz
  4547  13CE  2BE4               	goto	l7750
  4548                           
  4549                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4550  13CF  0828               	movf	getTemp_AD@ADRES+1,w
  4551  13D0  0021               	movlb	1	; select bank1
  4552  13D1  0264               	subwf	((_Temp+1)^(0+128)+8),w
  4553  13D2  1D03               	skipz
  4554  13D3  2BD8               	goto	u7735
  4555  13D4  0020               	movlb	0	; select bank0
  4556  13D5  0827               	movf	getTemp_AD@ADRES,w
  4557  13D6  0021               	movlb	1	; select bank1
  4558  13D7  0263               	subwf	(_Temp^(0+128)+8),w
  4559  13D8                     u7735:	
  4560  13D8  1803               	skipnc
  4561  13D9  2BE4               	goto	l7750
  4562                           
  4563                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4564  13DA  0020               	movlb	0	; select bank0
  4565  13DB  0828               	movf	getTemp_AD@ADRES+1,w
  4566  13DC  0021               	movlb	1	; select bank1
  4567  13DD  01E4               	clrf	((_Temp+1)^(0+128)+8)
  4568  13DE  07E4               	addwf	((_Temp+1)^(0+128)+8),f
  4569  13DF  0020               	movlb	0	; select bank0
  4570  13E0  0827               	movf	getTemp_AD@ADRES,w
  4571  13E1  0021               	movlb	1	; select bank1
  4572  13E2  01E3               	clrf	(_Temp^(0+128)+8)
  4573  13E3  07E3               	addwf	(_Temp^(0+128)+8),f
  4574  13E4                     l7750:	
  4575                           
  4576                           ;OverTemperature_B1.c: 32: }
  4577                           ;OverTemperature_B1.c: 33: }
  4578                           ;OverTemperature_B1.c: 34: }
  4579                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4580  13E4  30F0               	movlw	240
  4581  13E5  0020               	movlb	0	; select bank0
  4582  13E6  00A5               	movwf	??_getTemp_AD
  4583  13E7  0825               	movf	??_getTemp_AD,w
  4584  13E8  00A1               	movwf	getAD@adcon1
  4585  13E9  0826               	movf	getTemp_AD@channel,w
  4586  13EA  3190  20AD         	fcall	_getAD
  4587  13EC  0020               	movlb	0	; select bank0
  4588  13ED  0822               	movf	?_getAD+1,w
  4589  13EE  01A8               	clrf	getTemp_AD@ADRES+1
  4590  13EF  07A8               	addwf	getTemp_AD@ADRES+1,f
  4591  13F0  0821               	movf	?_getAD,w
  4592  13F1  01A7               	clrf	getTemp_AD@ADRES
  4593  13F2  07A7               	addwf	getTemp_AD@ADRES,f
  4594  13F3  0008               	return
  4595  13F4                     __end_of_getTemp_AD:	
  4596                           
  4597                           	psect	text4
  4598  0B33                     __ptext4:	
  4599 ;; *************** function _getLoad_AD *****************
  4600 ;; Defined at:
  4601 ;;		line 15 in file "../src/OverLoad_B1.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;  channel         1    wreg     unsigned char 
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;  channel         1    7[BANK0 ] unsigned char 
  4606 ;;  ADRES           2   10[BANK0 ] unsigned int 
  4607 ;;  i               1   12[BANK0 ] unsigned char 
  4608 ;;  j               1    9[BANK0 ] unsigned char 
  4609 ;;  k               1    8[BANK0 ] unsigned char 
  4610 ;; Return value:  Size  Location     Type
  4611 ;;		None               void
  4612 ;; Registers used:
  4613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;Total ram usage:        8 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    7
  4626 ;; This function calls:
  4627 ;;		_getAD
  4628 ;; This function is called by:
  4629 ;;		_main
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           
  4634                           ;psect for function _getLoad_AD
  4635  0B33                     _getLoad_AD:	
  4636                           
  4637                           ;incstack = 0
  4638                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4639                           ;getLoad_AD@channel stored from wreg
  4640  0B33  0020               	movlb	0	; select bank0
  4641  0B34  00A7               	movwf	getLoad_AD@channel
  4642                           
  4643                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4644  0B35  01AC               	clrf	getLoad_AD@i
  4645  0B36  01A9               	clrf	getLoad_AD@j
  4646  0B37  01A8               	clrf	getLoad_AD@k
  4647                           
  4648                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4649  0B38  01AA               	clrf	getLoad_AD@ADRES
  4650  0B39  01AB               	clrf	getLoad_AD@ADRES+1
  4651                           
  4652                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4653  0B3A  0022               	movlb	2	; select bank2
  4654  0B3B  1E34               	btfss	_Load^(0+256),4
  4655  0B3C  0008               	return
  4656                           
  4657                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4658  0B3D  30F3               	movlw	243
  4659  0B3E  0020               	movlb	0	; select bank0
  4660  0B3F  00A5               	movwf	??_getLoad_AD
  4661  0B40  0825               	movf	??_getLoad_AD,w
  4662  0B41  00A1               	movwf	getAD@adcon1
  4663  0B42  0827               	movf	getLoad_AD@channel,w
  4664  0B43  3190  20AD  318B   	fcall	_getAD
  4665  0B46  0020               	movlb	0	; select bank0
  4666  0B47  0822               	movf	?_getAD+1,w
  4667  0B48  01AB               	clrf	getLoad_AD@ADRES+1
  4668  0B49  07AB               	addwf	getLoad_AD@ADRES+1,f
  4669  0B4A  0821               	movf	?_getAD,w
  4670  0B4B  01AA               	clrf	getLoad_AD@ADRES
  4671  0B4C  07AA               	addwf	getLoad_AD@ADRES,f
  4672                           
  4673                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4674  0B4D  01AC               	clrf	getLoad_AD@i
  4675  0B4E  3004               	movlw	4
  4676  0B4F  022C               	subwf	getLoad_AD@i,w
  4677  0B50  1803               	btfsc	3,0
  4678  0B51  2B79               	goto	l7718
  4679  0B52                     l7706:	
  4680                           
  4681                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4682  0B52  352C               	lslf	getLoad_AD@i,w
  4683  0B53  3E3F               	addlw	(_Load+11)& (0+255)
  4684  0B54  0086               	movwf	6
  4685  0B55  3001               	movlw	1	; select bank2/3
  4686  0B56  0087               	movwf	7
  4687  0B57  3F40               	moviw [0]fsr1
  4688  0B58  00A5               	movwf	??_getLoad_AD
  4689  0B59  3F41               	moviw [1]fsr1
  4690  0B5A  00A6               	movwf	??_getLoad_AD+1
  4691  0B5B  082B               	movf	getLoad_AD@ADRES+1,w
  4692  0B5C  0226               	subwf	??_getLoad_AD+1,w
  4693  0B5D  1D03               	skipz
  4694  0B5E  2B61               	goto	u7635
  4695  0B5F  082A               	movf	getLoad_AD@ADRES,w
  4696  0B60  0225               	subwf	??_getLoad_AD,w
  4697  0B61                     u7635:	
  4698  0B61  1803               	skipnc
  4699  0B62  2B71               	goto	l7714
  4700  0B63  08A9               	movf	getLoad_AD@j,f
  4701  0B64  1D03               	skipz
  4702  0B65  2B71               	goto	l7714
  4703                           
  4704                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4705  0B66  352C               	lslf	getLoad_AD@i,w
  4706  0B67  3E3F               	addlw	(_Load+11)& (0+255)
  4707  0B68  0086               	movwf	6
  4708  0B69  3001               	movlw	1	; select bank2/3
  4709  0B6A  0087               	movwf	7
  4710  0B6B  082A               	movf	getLoad_AD@ADRES,w
  4711  0B6C  3FC0               	movwi [0]fsr1
  4712  0B6D  082B               	movf	getLoad_AD@ADRES+1,w
  4713  0B6E  3FC1               	movwi [1]fsr1
  4714                           
  4715                           ;OverLoad_B1.c: 24: j = 1;
  4716  0B6F  01A9               	clrf	getLoad_AD@j
  4717  0B70  0AA9               	incf	getLoad_AD@j,f
  4718  0B71                     l7714:	
  4719  0B71  3001               	movlw	1
  4720  0B72  00A5               	movwf	??_getLoad_AD
  4721  0B73  0825               	movf	??_getLoad_AD,w
  4722  0B74  07AC               	addwf	getLoad_AD@i,f
  4723  0B75  3004               	movlw	4
  4724  0B76  022C               	subwf	getLoad_AD@i,w
  4725  0B77  1C03               	skipc
  4726  0B78  2B52               	goto	l7706
  4727  0B79                     l7718:	
  4728                           
  4729                           ;OverLoad_B1.c: 25: }
  4730                           ;OverLoad_B1.c: 26: }
  4731                           ;OverLoad_B1.c: 27: if (j == 0) {
  4732  0B79  08A9               	movf	getLoad_AD@j,f
  4733  0B7A  1D03               	skipz
  4734  0B7B  0008               	return
  4735                           
  4736                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4737  0B7C  01AC               	clrf	getLoad_AD@i
  4738  0B7D                     L1:	
  4739  0B7D  3004               	movlw	4
  4740  0B7E  022C               	subwf	getLoad_AD@i,w
  4741  0B7F  1803               	btfsc	3,0
  4742  0B80  0008               	return
  4743                           
  4744                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4745  0B81  352C               	lslf	getLoad_AD@i,w
  4746  0B82  3E49               	addlw	(_Load+21)& (0+255)
  4747  0B83  0086               	movwf	6
  4748  0B84  3001               	movlw	1	; select bank2/3
  4749  0B85  0087               	movwf	7
  4750  0B86  3F40               	moviw [0]fsr1
  4751  0B87  00A5               	movwf	??_getLoad_AD
  4752  0B88  3F41               	moviw [1]fsr1
  4753  0B89  00A6               	movwf	??_getLoad_AD+1
  4754  0B8A  0826               	movf	??_getLoad_AD+1,w
  4755  0B8B  022B               	subwf	getLoad_AD@ADRES+1,w
  4756  0B8C  1D03               	skipz
  4757  0B8D  2B90               	goto	u7685
  4758  0B8E  0825               	movf	??_getLoad_AD,w
  4759  0B8F  022A               	subwf	getLoad_AD@ADRES,w
  4760  0B90                     u7685:	
  4761  0B90  1803               	skipnc
  4762  0B91  2BA0               	goto	l7734
  4763  0B92  08A8               	movf	getLoad_AD@k,f
  4764  0B93  1D03               	skipz
  4765  0B94  2BA0               	goto	l7734
  4766                           
  4767                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4768  0B95  352C               	lslf	getLoad_AD@i,w
  4769  0B96  3E49               	addlw	(_Load+21)& (0+255)
  4770  0B97  0086               	movwf	6
  4771  0B98  3001               	movlw	1	; select bank2/3
  4772  0B99  0087               	movwf	7
  4773  0B9A  082A               	movf	getLoad_AD@ADRES,w
  4774  0B9B  3FC0               	movwi [0]fsr1
  4775  0B9C  082B               	movf	getLoad_AD@ADRES+1,w
  4776  0B9D  3FC1               	movwi [1]fsr1
  4777                           
  4778                           ;OverLoad_B1.c: 31: k = 1;
  4779  0B9E  01A8               	clrf	getLoad_AD@k
  4780  0B9F  0AA8               	incf	getLoad_AD@k,f
  4781  0BA0                     l7734:	
  4782  0BA0  3001               	movlw	1
  4783  0BA1  00A5               	movwf	??_getLoad_AD
  4784  0BA2  0825               	movf	??_getLoad_AD,w
  4785  0BA3  07AC               	addwf	getLoad_AD@i,f
  4786  0BA4  2B7D               	goto	L1
  4787  0BA5                     __end_of_getLoad_AD:	
  4788                           
  4789                           	psect	text5
  4790  10AD                     __ptext5:	
  4791 ;; *************** function _getAD *****************
  4792 ;; Defined at:
  4793 ;;		line 459 in file "../src/MCU_B1.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;  adcon0          1    wreg     unsigned char 
  4796 ;;  adcon1          1    1[BANK0 ] unsigned char 
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;  adcon0          1    4[BANK0 ] unsigned char 
  4799 ;; Return value:  Size  Location     Type
  4800 ;;                  2    1[BANK0 ] int 
  4801 ;; Registers used:
  4802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4803 ;; Tracked objects:
  4804 ;;		On entry : 0/0
  4805 ;;		On exit  : 0/0
  4806 ;;		Unchanged: 0/0
  4807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4808 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;Total ram usage:        4 bytes
  4813 ;; Hardware stack levels used:    1
  4814 ;; Hardware stack levels required when called:    6
  4815 ;; This function calls:
  4816 ;;		_Timeout_Counter
  4817 ;;		_set_TimeoutCleared
  4818 ;; This function is called by:
  4819 ;;		_getLoad_AD
  4820 ;;		_getTemp_AD
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           
  4825                           ;psect for function _getAD
  4826  10AD                     _getAD:	
  4827                           
  4828                           ;incstack = 0
  4829                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4830                           ;getAD@adcon0 stored from wreg
  4831  10AD  0020               	movlb	0	; select bank0
  4832  10AE  00A4               	movwf	getAD@adcon0
  4833                           
  4834                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4835  10AF  0824               	movf	getAD@adcon0,w
  4836  10B0  0021               	movlb	1	; select bank1
  4837  10B1  009D               	movwf	29	;volatile
  4838                           
  4839                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4840  10B2  0020               	movlb	0	; select bank0
  4841  10B3  0821               	movf	getAD@adcon1,w
  4842  10B4  0021               	movlb	1	; select bank1
  4843  10B5  009E               	movwf	30	;volatile
  4844                           
  4845                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4846  10B6  149D               	bsf	29,1	;volatile
  4847                           
  4848                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4849  10B7  28BB               	goto	l7204
  4850  10B8                     l7202:	
  4851                           
  4852                           ;MCU_B1.c: 464: Timeout_Counter();
  4853  10B8  319E  2656  3190   	fcall	_Timeout_Counter
  4854  10BB                     l7204:	
  4855  10BB  0021               	movlb	1	; select bank1
  4856  10BC  1C9D               	btfss	29,1	;volatile
  4857  10BD  28C1               	goto	l7208
  4858  10BE  0022               	movlb	2	; select bank2
  4859  10BF  1D2A               	btfss	(_myMain^(0+256)+10),2
  4860  10C0  28B8               	goto	l7202
  4861  10C1                     l7208:	
  4862                           
  4863                           ;MCU_B1.c: 465: };
  4864                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4865  10C1  319B  235F         	fcall	_set_TimeoutCleared
  4866                           
  4867                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4868  10C3  0021               	movlb	1	; select bank1
  4869  10C4  081C               	movf	28,w	;volatile
  4870  10C5  0020               	movlb	0	; select bank0
  4871  10C6  01A2               	clrf	?_getAD+1
  4872  10C7  07A2               	addwf	?_getAD+1,f
  4873  10C8  0021               	movlb	1	; select bank1
  4874  10C9  081B               	movf	27,w	;volatile
  4875  10CA  0020               	movlb	0	; select bank0
  4876  10CB  01A1               	clrf	?_getAD
  4877  10CC  07A1               	addwf	?_getAD,f
  4878  10CD  0008               	return
  4879  10CE                     __end_of_getAD:	
  4880                           
  4881                           	psect	text6
  4882  1D66                     __ptext6:	
  4883 ;; *************** function _WDT_Main *****************
  4884 ;; Defined at:
  4885 ;;		line 1103 in file "../src/MCU_B1.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;		None
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;		None
  4890 ;; Return value:  Size  Location     Type
  4891 ;;		None               void
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0, pclath, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;Total ram usage:        1 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    6
  4906 ;; This function calls:
  4907 ;;		_WDT_Clearing
  4908 ;; This function is called by:
  4909 ;;		_main
  4910 ;; This function uses a non-reentrant model
  4911 ;;
  4912                           
  4913                           
  4914                           ;psect for function _WDT_Main
  4915  1D66                     _WDT_Main:	
  4916                           
  4917                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4918                           
  4919                           ;incstack = 0
  4920                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4921  1D66  0021               	movlb	1	; select bank1
  4922  1D67  1C49               	btfss	_WDT^(0+128),0
  4923  1D68  0008               	return
  4924                           
  4925                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  4926  1D69  3001               	movlw	1
  4927  1D6A  02CA               	subwf	(_WDT^(0+128)+1),f
  4928  1D6B  084A               	movf	(_WDT^(0+128)+1),w
  4929  1D6C  3AFF               	xorlw	255
  4930  1D6D  1903               	skipnz
  4931  1D6E  0008               	return
  4932                           
  4933                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  4934  1D6F  3064               	movlw	100
  4935  1D70  0020               	movlb	0	; select bank0
  4936  1D71  00A1               	movwf	??_WDT_Main
  4937  1D72  0821               	movf	??_WDT_Main,w
  4938  1D73  0021               	movlb	1	; select bank1
  4939  1D74  00CA               	movwf	(_WDT^(0+128)+1)
  4940                           
  4941                           ;MCU_B1.c: 1107: WDT_Clearing();
  4942  1D75  3180  2002         	fcall	_WDT_Clearing
  4943  1D77  0008               	return
  4944  1D78                     __end_of_WDT_Main:	
  4945                           
  4946                           	psect	text7
  4947  0002                     __ptext7:	
  4948 ;; *************** function _WDT_Clearing *****************
  4949 ;; Defined at:
  4950 ;;		line 1113 in file "../src/MCU_B1.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;		None
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;		None
  4955 ;; Return value:  Size  Location     Type
  4956 ;;		None               void
  4957 ;; Registers used:
  4958 ;;		None
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;Total ram usage:        0 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    5
  4971 ;; This function calls:
  4972 ;;		Nothing
  4973 ;; This function is called by:
  4974 ;;		_WDT_Main
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           
  4979                           ;psect for function _WDT_Clearing
  4980  0002                     _WDT_Clearing:	
  4981                           
  4982                           ;incstack = 0
  4983                           ; Regs used in _WDT_Clearing: []
  4984  0002  0064               	clrwdt	;# 
  4985  0003  0008               	return
  4986  0004                     __end_of_WDT_Clearing:	
  4987                           
  4988                           	psect	text8
  4989  1B34                     __ptext8:	
  4990 ;; *************** function _Temp_Main *****************
  4991 ;; Defined at:
  4992 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;		None
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;		None
  4997 ;; Return value:  Size  Location     Type
  4998 ;;		None               void
  4999 ;; Registers used:
  5000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5010 ;;Total ram usage:        0 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    8
  5013 ;; This function calls:
  5014 ;;		_setTemp_Main
  5015 ;; This function is called by:
  5016 ;;		_main
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           
  5021                           ;psect for function _Temp_Main
  5022  1B34                     _Temp_Main:	
  5023                           
  5024                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5025                           
  5026                           ;incstack = 0
  5027                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5028  1B34  318D  25E1         	fcall	_setTemp_Main
  5029  1B36  0008               	return
  5030  1B37                     __end_of_Temp_Main:	
  5031                           
  5032                           	psect	text9
  5033  0DE1                     __ptext9:	
  5034 ;; *************** function _setTemp_Main *****************
  5035 ;; Defined at:
  5036 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;		None
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  AD              2    6[BANK1 ] unsigned int 
  5041 ;;  DangerValue     2    4[BANK1 ] unsigned int 
  5042 ;;  SafeValue       2    2[BANK1 ] unsigned int 
  5043 ;;  TempGO          1    1[BANK1 ] unsigned char 
  5044 ;;  error           1    0[BANK1 ] unsigned char 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;		None               void
  5047 ;; Registers used:
  5048 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5055 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5056 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5057 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5058 ;;Total ram usage:        9 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; Hardware stack levels required when called:    7
  5061 ;; This function calls:
  5062 ;;		_getMain_All_Error_Status
  5063 ;;		_getMain_All_LightsStatus
  5064 ;;		_setBuz
  5065 ;;		_setProductData
  5066 ;; This function is called by:
  5067 ;;		_Temp_Main
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           
  5072                           ;psect for function _setTemp_Main
  5073  0DE1                     _setTemp_Main:	
  5074                           
  5075                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5076                           
  5077                           ;incstack = 0
  5078                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5079  0DE1  3000               	movlw	0
  5080  0DE2  3191  21BD  318D   	fcall	_getMain_All_Error_Status
  5081  0DE5  0020               	movlb	0	; select bank0
  5082  0DE6  00E6               	movwf	??_setTemp_Main
  5083  0DE7  0866               	movf	??_setTemp_Main,w
  5084  0DE8  0021               	movlb	1	; select bank1
  5085  0DE9  00E5               	movwf	setTemp_Main@error^(0+128)
  5086                           
  5087                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5088  0DEA  01E7               	clrf	setTemp_Main@SafeValue^(0+128)
  5089  0DEB  01E8               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5090  0DEC  01E9               	clrf	setTemp_Main@DangerValue^(0+128)
  5091  0DED  01EA               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5092                           
  5093                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5094  0DEE  319B  23B8  318D   	fcall	_getMain_All_LightsStatus
  5095  0DF1  0020               	movlb	0	; select bank0
  5096  0DF2  00E6               	movwf	??_setTemp_Main
  5097  0DF3  0866               	movf	??_setTemp_Main,w
  5098  0DF4  0021               	movlb	1	; select bank1
  5099  0DF5  00E6               	movwf	setTemp_Main@TempGO^(0+128)
  5100                           
  5101                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5102  0DF6  1C5B               	btfss	_Temp^(0+128),0
  5103  0DF7  2E8B               	goto	l1770
  5104                           
  5105                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5106  0DF8  195B               	btfsc	_Temp^(0+128),2
  5107  0DF9  2E14               	goto	l8596
  5108                           
  5109                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5110  0DFA  0866               	movf	setTemp_Main@TempGO^(0+128),w
  5111  0DFB  3A01               	xorlw	1
  5112  0DFC  1D03               	skipz
  5113  0DFD  2E00               	goto	l1776
  5114  0DFE  1CDB               	btfss	_Temp^(0+128),1
  5115  0DFF  2E02               	goto	l8588
  5116  0E00                     l1776:	
  5117  0E00  1CDB               	btfss	_Temp^(0+128),1
  5118  0E01  2E11               	goto	l8594
  5119  0E02                     l8588:	
  5120                           
  5121                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5122  0E02  3001               	movlw	1
  5123  0E03  07DC               	addwf	(_Temp^(0+128)+1),f
  5124  0E04  3000               	movlw	0
  5125  0E05  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5126                           
  5127                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5128  0E06  3000               	movlw	0
  5129  0E07  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5130  0E08  30FA               	movlw	250
  5131  0E09  1903               	skipnz
  5132  0E0A  025C               	subwf	(_Temp^(0+128)+1),w
  5133  0E0B  1C03               	skipc
  5134  0E0C  0008               	return
  5135                           
  5136                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5137  0E0D  01DC               	clrf	(_Temp^(0+128)+1)
  5138  0E0E  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5139                           
  5140                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5141  0E0F  155B               	bsf	_Temp^(0+128),2
  5142                           
  5143                           ;OverTemperature_B1.c: 83: }
  5144                           ;OverTemperature_B1.c: 84: } else {
  5145  0E10  0008               	return
  5146  0E11                     l8594:	
  5147                           
  5148                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5149  0E11  01DC               	clrf	(_Temp^(0+128)+1)
  5150  0E12  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5151                           
  5152                           ;OverTemperature_B1.c: 86: }
  5153                           ;OverTemperature_B1.c: 87: } else {
  5154  0E13  0008               	return
  5155  0E14                     l8596:	
  5156                           
  5157                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5158  0E14  3001               	movlw	1
  5159  0E15  07DC               	addwf	(_Temp^(0+128)+1),f
  5160  0E16  3000               	movlw	0
  5161  0E17  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5162                           
  5163                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5164  0E18  3000               	movlw	0
  5165  0E19  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5166  0E1A  3005               	movlw	5
  5167  0E1B  1903               	skipnz
  5168  0E1C  025C               	subwf	(_Temp^(0+128)+1),w
  5169  0E1D  1C03               	skipc
  5170  0E1E  0008               	return
  5171                           
  5172                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5173  0E1F  01DC               	clrf	(_Temp^(0+128)+1)
  5174  0E20  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5175                           
  5176                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5177  0E21  3008               	movlw	8
  5178  0E22  3EDB               	addlw	_Temp& (0+255)
  5179  0E23  0086               	movwf	6
  5180  0E24  0187               	clrf	7
  5181  0E25  0016               	moviw fsr1++
  5182  0E26  0401               	iorwf	1,w
  5183  0E27  1903               	skipnz
  5184  0E28  2E83               	goto	l1781
  5185                           
  5186                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5187  0E29  115B               	bcf	_Temp^(0+128),2
  5188                           
  5189                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5190  0E2A  0864               	movf	((_Temp+1)^(0+128)+8),w
  5191  0E2B  01EC               	clrf	(setTemp_Main@AD+1)^(0+128)
  5192  0E2C  07EC               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5193  0E2D  0863               	movf	(_Temp^(0+128)+8),w
  5194  0E2E  01EB               	clrf	setTemp_Main@AD^(0+128)
  5195  0E2F  07EB               	addwf	setTemp_Main@AD^(0+128),f
  5196                           
  5197                           ;OverTemperature_B1.c: 112: SafeValue = 400;
  5198  0E30  3090               	movlw	144
  5199  0E31  00E7               	movwf	setTemp_Main@SafeValue^(0+128)
  5200  0E32  3001               	movlw	1
  5201  0E33  00E8               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5202                           
  5203                           ;OverTemperature_B1.c: 113: DangerValue = 345;
  5204  0E34  3059               	movlw	89
  5205  0E35  00E9               	movwf	setTemp_Main@DangerValue^(0+128)
  5206  0E36  3001               	movlw	1
  5207  0E37  00EA               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5208                           
  5209                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5210  0E38  1CDB               	btfss	_Temp^(0+128),1
  5211  0E39  2E5A               	goto	l8626
  5212                           
  5213                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5214  0E3A  0868               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5215  0E3B  026C               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5216  0E3C  1D03               	skipz
  5217  0E3D  2E40               	goto	u9215
  5218  0E3E  0867               	movf	setTemp_Main@SafeValue^(0+128),w
  5219  0E3F  026B               	subwf	setTemp_Main@AD^(0+128),w
  5220  0E40                     u9215:	
  5221  0E40  1C03               	skipc
  5222  0E41  2E58               	goto	l8624
  5223                           
  5224                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5225  0E42  3001               	movlw	1
  5226  0E43  0020               	movlb	0	; select bank0
  5227  0E44  00E6               	movwf	??_setTemp_Main
  5228  0E45  0866               	movf	??_setTemp_Main,w
  5229  0E46  0021               	movlb	1	; select bank1
  5230  0E47  07DE               	addwf	(_Temp^(0+128)+3),f
  5231                           
  5232                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5233  0E48  3003               	movlw	3
  5234  0E49  025E               	subwf	(_Temp^(0+128)+3),w
  5235  0E4A  1C03               	skipc
  5236  0E4B  2E70               	goto	l8638
  5237                           
  5238                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5239  0E4C  01DE               	clrf	(_Temp^(0+128)+3)
  5240                           
  5241                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5242  0E4D  10DB               	bcf	_Temp^(0+128),1
  5243                           
  5244                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5245  0E4E  3064               	movlw	100
  5246  0E4F  0020               	movlb	0	; select bank0
  5247  0E50  00AA               	movwf	setBuz@time
  5248  0E51  3000               	movlw	0
  5249  0E52  00AB               	movwf	setBuz@time+1
  5250  0E53  3002               	movlw	2
  5251  0E54  3195  25BC  318D   	fcall	_setBuz
  5252                           
  5253                           ;OverTemperature_B1.c: 126: }
  5254                           ;OverTemperature_B1.c: 127: } else {
  5255  0E57  2E70               	goto	l8638
  5256  0E58                     l8624:	
  5257                           
  5258                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5259  0E58  0021               	movlb	1	; select bank1
  5260  0E59  2E6F               	goto	l8636
  5261  0E5A                     l8626:	
  5262                           ;OverTemperature_B1.c: 129: }
  5263                           ;OverTemperature_B1.c: 130: } else {
  5264                           
  5265                           
  5266                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5267  0E5A  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5268  0E5B  026A               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5269  0E5C  1D03               	skipz
  5270  0E5D  2E60               	goto	u9235
  5271  0E5E  086B               	movf	setTemp_Main@AD^(0+128),w
  5272  0E5F  0269               	subwf	setTemp_Main@DangerValue^(0+128),w
  5273  0E60                     u9235:	
  5274  0E60  1C03               	skipc
  5275  0E61  2E6F               	goto	l8636
  5276                           
  5277                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5278  0E62  3001               	movlw	1
  5279  0E63  0020               	movlb	0	; select bank0
  5280  0E64  00E6               	movwf	??_setTemp_Main
  5281  0E65  0866               	movf	??_setTemp_Main,w
  5282  0E66  0021               	movlb	1	; select bank1
  5283  0E67  07DE               	addwf	(_Temp^(0+128)+3),f
  5284                           
  5285                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5286  0E68  3003               	movlw	3
  5287  0E69  025E               	subwf	(_Temp^(0+128)+3),w
  5288  0E6A  1C03               	skipc
  5289  0E6B  2E70               	goto	l8638
  5290                           
  5291                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5292  0E6C  01DE               	clrf	(_Temp^(0+128)+3)
  5293                           
  5294                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5295  0E6D  14DB               	bsf	_Temp^(0+128),1
  5296                           
  5297                           ;OverTemperature_B1.c: 136: }
  5298                           ;OverTemperature_B1.c: 137: } else {
  5299  0E6E  2E70               	goto	l8638
  5300  0E6F                     l8636:	
  5301                           
  5302                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5303  0E6F  01DE               	clrf	(_Temp^(0+128)+3)
  5304  0E70                     l8638:	
  5305                           
  5306                           ;OverTemperature_B1.c: 139: }
  5307                           ;OverTemperature_B1.c: 140: }
  5308                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5309  0E70  0021               	movlb	1	; select bank1
  5310  0E71  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5311  0E72  0020               	movlb	0	; select bank0
  5312  0E73  00E6               	movwf	??_setTemp_Main
  5313  0E74  0866               	movf	??_setTemp_Main,w
  5314  0E75  00E3               	movwf	setProductData@value
  5315  0E76  3018               	movlw	24
  5316  0E77  319C  2411  318D   	fcall	_setProductData
  5317                           
  5318                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5319  0E7A  0021               	movlb	1	; select bank1
  5320  0E7B  086B               	movf	setTemp_Main@AD^(0+128),w
  5321  0E7C  0020               	movlb	0	; select bank0
  5322  0E7D  00E6               	movwf	??_setTemp_Main
  5323  0E7E  0866               	movf	??_setTemp_Main,w
  5324  0E7F  00E3               	movwf	setProductData@value
  5325  0E80  3019               	movlw	25
  5326  0E81  319C  2411         	fcall	_setProductData
  5327  0E83                     l1781:	
  5328                           
  5329                           ;OverTemperature_B1.c: 158: }
  5330                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5331  0E83  0021               	movlb	1	; select bank1
  5332  0E84  01DF               	clrf	(_Temp^(0+128)+4)
  5333  0E85  01E0               	clrf	((_Temp+1)^(0+128)+4)
  5334                           
  5335                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5336  0E86  01E1               	clrf	(_Temp^(0+128)+6)
  5337  0E87  01E2               	clrf	((_Temp+1)^(0+128)+6)
  5338                           
  5339                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5340  0E88  01E3               	clrf	(_Temp^(0+128)+8)
  5341  0E89  01E4               	clrf	((_Temp+1)^(0+128)+8)
  5342                           
  5343                           ;OverTemperature_B1.c: 162: }
  5344                           ;OverTemperature_B1.c: 163: }
  5345                           ;OverTemperature_B1.c: 166: } else {
  5346  0E8A  0008               	return
  5347  0E8B                     l1770:	
  5348                           
  5349                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5350  0E8B  0022               	movlb	2	; select bank2
  5351  0E8C  1C20               	btfss	_myMain^(0+256),0
  5352  0E8D  0008               	return
  5353                           
  5354                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5355  0E8E  0021               	movlb	1	; select bank1
  5356  0E8F  145B               	bsf	_Temp^(0+128),0
  5357  0E90  0008               	return
  5358  0E91                     __end_of_setTemp_Main:	
  5359                           
  5360                           	psect	text10
  5361  1B31                     __ptext10:	
  5362 ;; *************** function _Temp_Initialization *****************
  5363 ;; Defined at:
  5364 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;		None               void
  5371 ;; Registers used:
  5372 ;;		status,2, status,0, pclath, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;Total ram usage:        0 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    6
  5385 ;; This function calls:
  5386 ;;		_setTemp_Initialization
  5387 ;; This function is called by:
  5388 ;;		_main
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           
  5393                           ;psect for function _Temp_Initialization
  5394  1B31                     _Temp_Initialization:	
  5395                           
  5396                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5397                           
  5398                           ;incstack = 0
  5399                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5400  1B31  319B  2324         	fcall	_setTemp_Initialization
  5401  1B33  0008               	return
  5402  1B34                     __end_of_Temp_Initialization:	
  5403                           
  5404                           	psect	text11
  5405  1B24                     __ptext11:	
  5406 ;; *************** function _setTemp_Initialization *****************
  5407 ;; Defined at:
  5408 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		None
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    5
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_Temp_Initialization
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           
  5437                           ;psect for function _setTemp_Initialization
  5438  1B24                     _setTemp_Initialization:	
  5439                           
  5440                           ;incstack = 0
  5441                           ; Regs used in _setTemp_Initialization: []
  5442  1B24  0008               	return
  5443  1B25                     __end_of_setTemp_Initialization:	
  5444                           
  5445                           	psect	text12
  5446  1B7E                     __ptext12:	
  5447 ;; *************** function _Switch_Main *****************
  5448 ;; Defined at:
  5449 ;;		line 76 in file "../src/Switch_B1.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;		None
  5454 ;; Return value:  Size  Location     Type
  5455 ;;		None               void
  5456 ;; Registers used:
  5457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;Total ram usage:        0 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    9
  5470 ;; This function calls:
  5471 ;;		_TouchPower
  5472 ;;		_setSw_Main
  5473 ;; This function is called by:
  5474 ;;		_main
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           
  5479                           ;psect for function _Switch_Main
  5480  1B7E                     _Switch_Main:	
  5481                           
  5482                           ;Switch_B1.c: 79: setSw_Main(1);
  5483                           
  5484                           ;incstack = 0
  5485                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5486  1B7E  3001               	movlw	1
  5487  1B7F  3181  21FA  319B   	fcall	_setSw_Main
  5488                           
  5489                           ;Switch_B1.c: 91: TouchPower();
  5490  1B82  319E  2615         	fcall	_TouchPower
  5491  1B84  0008               	return
  5492  1B85                     __end_of_Switch_Main:	
  5493                           
  5494                           	psect	text13
  5495  01FA                     __ptext13:	
  5496 ;; *************** function _setSw_Main *****************
  5497 ;; Defined at:
  5498 ;;		line 117 in file "../src/Switch_B1.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;  sw              1    wreg     unsigned char 
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;  sw              1   18[BANK0 ] unsigned char 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;		None               void
  5505 ;; Registers used:
  5506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5515 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5516 ;;Total ram usage:        3 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    8
  5519 ;; This function calls:
  5520 ;;		_SwPointSelect
  5521 ;;		_getMain_All_Error_Status
  5522 ;;		_getSw_KeyStatus
  5523 ;;		_setBuz
  5524 ;;		_setDimmerLights_DimmingOn
  5525 ;;		_setDimmerLights_SwOff
  5526 ;;		_setDimmerLights_SwOn
  5527 ;;		_setRF_Learn
  5528 ;; This function is called by:
  5529 ;;		_Switch_Main
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _setSw_Main
  5535  01FA                     _setSw_Main:	
  5536                           
  5537                           ;incstack = 0
  5538                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5539                           ;setSw_Main@sw stored from wreg
  5540  01FA  0020               	movlb	0	; select bank0
  5541  01FB  00B2               	movwf	setSw_Main@sw
  5542                           
  5543                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5544  01FC  0832               	movf	setSw_Main@sw,w
  5545  01FD  319C  2471  3181   	fcall	_SwPointSelect
  5546                           
  5547                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5548  0200  0021               	movlb	1	; select bank1
  5549  0201  0855               	movf	_Sw^(0+128),w
  5550  0202  0086               	movwf	6
  5551  0203  3001               	movlw	1	; select bank2/3
  5552  0204  0087               	movwf	7
  5553  0205  1C01               	btfss	1,0
  5554  0206  2B76               	goto	l2480
  5555                           
  5556                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5557  0207  3000               	movlw	0
  5558  0208  3191  21BD  3181   	fcall	_getMain_All_Error_Status
  5559  020B  3800               	iorlw	0
  5560  020C  1D03               	skipz
  5561  020D  2A2C               	goto	l8732
  5562                           
  5563                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5564  020E  0021               	movlb	1	; select bank1
  5565  020F  0A55               	incf	_Sw^(0+128),w
  5566  0210  0086               	movwf	6
  5567  0211  3001               	movlw	1	; select bank2/3
  5568  0212  0087               	movwf	7
  5569  0213  1081               	bcf	1,1
  5570                           
  5571                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5572  0214  0020               	movlb	0	; select bank0
  5573  0215  0832               	movf	setSw_Main@sw,w
  5574  0216  319D  250D  3181   	fcall	_getSw_KeyStatus
  5575  0219  3A01               	xorlw	1
  5576  021A  3000               	movlw	0
  5577  021B  1903               	skipnz
  5578  021C  3001               	movlw	1
  5579  021D  0020               	movlb	0	; select bank0
  5580  021E  00B0               	movwf	??_setSw_Main
  5581  021F  0021               	movlb	1	; select bank1
  5582  0220  0855               	movf	_Sw^(0+128),w
  5583  0221  0086               	movwf	6
  5584  0222  3001               	movlw	1	; select bank2/3
  5585  0223  0087               	movwf	7
  5586  0224  0020               	movlb	0	; select bank0
  5587  0225  0DB0               	rlf	??_setSw_Main,f
  5588  0226  0801               	movf	1,w
  5589  0227  0630               	xorwf	??_setSw_Main,w
  5590  0228  39FD               	andlw	-3
  5591  0229  0630               	xorwf	??_setSw_Main,w
  5592  022A  0081               	movwf	1
  5593                           
  5594                           ;Switch_B1.c: 124: } else {
  5595  022B  2A42               	goto	l2482
  5596  022C                     l8732:	
  5597                           
  5598                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5599  022C  0021               	movlb	1	; select bank1
  5600  022D  0A55               	incf	_Sw^(0+128),w
  5601  022E  0086               	movwf	6
  5602  022F  3001               	movlw	1	; select bank2/3
  5603  0230  0087               	movwf	7
  5604  0231  1881               	btfsc	1,1
  5605  0232  2A42               	goto	l2482
  5606                           
  5607                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5608  0233  0A55               	incf	_Sw^(0+128),w
  5609  0234  0086               	movwf	6
  5610  0235  3001               	movlw	1	; select bank2/3
  5611  0236  0087               	movwf	7
  5612  0237  1481               	bsf	1,1
  5613                           
  5614                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5615  0238  0855               	movf	_Sw^(0+128),w
  5616  0239  0086               	movwf	6
  5617  023A  3001               	movlw	1	; select bank2/3
  5618  023B  0087               	movwf	7
  5619  023C  1081               	bcf	1,1
  5620                           
  5621                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5622  023D  0855               	movf	_Sw^(0+128),w
  5623  023E  0086               	movwf	6
  5624  023F  3001               	movlw	1	; select bank2/3
  5625  0240  0087               	movwf	7
  5626  0241  1501               	bsf	1,2
  5627  0242                     l2482:	
  5628                           
  5629                           ;Switch_B1.c: 130: }
  5630                           ;Switch_B1.c: 131: }
  5631                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5632  0242  0021               	movlb	1	; select bank1
  5633  0243  0855               	movf	_Sw^(0+128),w
  5634  0244  0086               	movwf	6
  5635  0245  3001               	movlw	1	; select bank2/3
  5636  0246  0087               	movwf	7
  5637  0247  1C81               	btfss	1,1
  5638  0248  2B1E               	goto	l8782
  5639                           
  5640                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5641  0249  0855               	movf	_Sw^(0+128),w
  5642  024A  0086               	movwf	6
  5643  024B  3001               	movlw	1	; select bank2/3
  5644  024C  0087               	movwf	7
  5645  024D  1901               	btfsc	1,2
  5646  024E  2A75               	goto	l8748
  5647                           
  5648                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5649  024F  3001               	movlw	1
  5650  0250  0020               	movlb	0	; select bank0
  5651  0251  00B0               	movwf	??_setSw_Main
  5652  0252  0021               	movlb	1	; select bank1
  5653  0253  0855               	movf	_Sw^(0+128),w
  5654  0254  3E02               	addlw	2
  5655  0255  0086               	movwf	6
  5656  0256  3001               	movlw	1	; select bank2/3
  5657  0257  0087               	movwf	7
  5658  0258  0020               	movlb	0	; select bank0
  5659  0259  0830               	movf	??_setSw_Main,w
  5660  025A  0781               	addwf	1,f
  5661                           
  5662                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5663  025B  0021               	movlb	1	; select bank1
  5664  025C  0855               	movf	_Sw^(0+128),w
  5665  025D  3E02               	addlw	2
  5666  025E  0086               	movwf	6
  5667  025F  3001               	movlw	1	; select bank2/3
  5668  0260  0087               	movwf	7
  5669  0261  3003               	movlw	3
  5670  0262  0201               	subwf	1,w
  5671  0263  1C03               	skipc
  5672  0264  0008               	return
  5673                           
  5674                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5675  0265  0855               	movf	_Sw^(0+128),w
  5676  0266  3E02               	addlw	2
  5677  0267  0086               	movwf	6
  5678  0268  3001               	movlw	1	; select bank2/3
  5679  0269  0087               	movwf	7
  5680  026A  0181               	clrf	1
  5681                           
  5682                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5683  026B  0855               	movf	_Sw^(0+128),w
  5684  026C  0086               	movwf	6
  5685  026D  3001               	movlw	1	; select bank2/3
  5686  026E  0087               	movwf	7
  5687  026F  1501               	bsf	1,2
  5688                           
  5689                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5690  0270  0020               	movlb	0	; select bank0
  5691  0271  0832               	movf	setSw_Main@sw,w
  5692  0272  3191  21F0         	fcall	_setDimmerLights_SwOn
  5693                           
  5694                           ;Switch_B1.c: 146: }
  5695                           ;Switch_B1.c: 147: } else {
  5696  0274  0008               	return
  5697  0275                     l8748:	
  5698                           
  5699                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5700  0275  0021               	movlb	1	; select bank1
  5701  0276  0855               	movf	_Sw^(0+128),w
  5702  0277  0086               	movwf	6
  5703  0278  3001               	movlw	1	; select bank2/3
  5704  0279  0087               	movwf	7
  5705  027A  1981               	btfsc	1,3
  5706  027B  2AAA               	goto	l8758
  5707                           
  5708                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5709  027C  0855               	movf	_Sw^(0+128),w
  5710  027D  3E03               	addlw	3
  5711  027E  0086               	movwf	6
  5712  027F  3001               	movlw	1	; select bank2/3
  5713  0280  0087               	movwf	7
  5714  0281  3001               	movlw	1
  5715  0282  0781               	addwf	1,f
  5716  0283  3141               	addfsr 1,1
  5717  0284  1803               	skipnc
  5718  0285  0A81               	incf	1,f
  5719                           
  5720                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5721  0286  0855               	movf	_Sw^(0+128),w
  5722  0287  3E03               	addlw	3
  5723  0288  0086               	movwf	6
  5724  0289  3001               	movlw	1	; select bank2/3
  5725  028A  0087               	movwf	7
  5726  028B  3F40               	moviw [0]fsr1
  5727  028C  0020               	movlb	0	; select bank0
  5728  028D  00B0               	movwf	??_setSw_Main
  5729  028E  3F41               	moviw [1]fsr1
  5730  028F  00B1               	movwf	??_setSw_Main+1
  5731  0290  3000               	movlw	0
  5732  0291  0231               	subwf	??_setSw_Main+1,w
  5733  0292  304B               	movlw	75
  5734  0293  1903               	skipnz
  5735  0294  0230               	subwf	??_setSw_Main,w
  5736  0295  1C03               	skipc
  5737  0296  0008               	return
  5738                           
  5739                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5740  0297  0021               	movlb	1	; select bank1
  5741  0298  0855               	movf	_Sw^(0+128),w
  5742  0299  3E03               	addlw	3
  5743  029A  0086               	movwf	6
  5744  029B  3001               	movlw	1	; select bank2/3
  5745  029C  0087               	movwf	7
  5746  029D  3000               	movlw	0
  5747  029E  3FC0               	movwi [0]fsr1
  5748  029F  3FC1               	movwi [1]fsr1
  5749                           
  5750                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5751  02A0  0855               	movf	_Sw^(0+128),w
  5752  02A1  0086               	movwf	6
  5753  02A2  3001               	movlw	1	; select bank2/3
  5754  02A3  0087               	movwf	7
  5755  02A4  1581               	bsf	1,3
  5756                           
  5757                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5758  02A5  0020               	movlb	0	; select bank0
  5759  02A6  0832               	movf	setSw_Main@sw,w
  5760  02A7  3191  213C         	fcall	_setDimmerLights_DimmingOn
  5761                           
  5762                           ;Switch_B1.c: 161: }
  5763                           ;Switch_B1.c: 162: } else {
  5764  02A9  0008               	return
  5765  02AA                     l8758:	
  5766                           
  5767                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5768  02AA  0021               	movlb	1	; select bank1
  5769  02AB  0855               	movf	_Sw^(0+128),w
  5770  02AC  0086               	movwf	6
  5771  02AD  3001               	movlw	1	; select bank2/3
  5772  02AE  0087               	movwf	7
  5773  02AF  1A01               	btfsc	1,4
  5774  02B0  2AEA               	goto	l8772
  5775                           
  5776                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5777  02B1  0855               	movf	_Sw^(0+128),w
  5778  02B2  3E05               	addlw	5
  5779  02B3  0086               	movwf	6
  5780  02B4  3001               	movlw	1	; select bank2/3
  5781  02B5  0087               	movwf	7
  5782  02B6  3001               	movlw	1
  5783  02B7  0781               	addwf	1,f
  5784  02B8  3141               	addfsr 1,1
  5785  02B9  1803               	skipnc
  5786  02BA  0A81               	incf	1,f
  5787                           
  5788                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5789  02BB  0855               	movf	_Sw^(0+128),w
  5790  02BC  3E05               	addlw	5
  5791  02BD  0086               	movwf	6
  5792  02BE  3001               	movlw	1	; select bank2/3
  5793  02BF  0087               	movwf	7
  5794  02C0  3F40               	moviw [0]fsr1
  5795  02C1  0020               	movlb	0	; select bank0
  5796  02C2  00B0               	movwf	??_setSw_Main
  5797  02C3  3F41               	moviw [1]fsr1
  5798  02C4  00B1               	movwf	??_setSw_Main+1
  5799  02C5  3000               	movlw	0
  5800  02C6  0231               	subwf	??_setSw_Main+1,w
  5801  02C7  304B               	movlw	75
  5802  02C8  1903               	skipnz
  5803  02C9  0230               	subwf	??_setSw_Main,w
  5804  02CA  1C03               	skipc
  5805  02CB  0008               	return
  5806                           
  5807                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5808  02CC  0021               	movlb	1	; select bank1
  5809  02CD  0855               	movf	_Sw^(0+128),w
  5810  02CE  3E05               	addlw	5
  5811  02CF  0086               	movwf	6
  5812  02D0  3001               	movlw	1	; select bank2/3
  5813  02D1  0087               	movwf	7
  5814  02D2  3000               	movlw	0
  5815  02D3  3FC0               	movwi [0]fsr1
  5816  02D4  3FC1               	movwi [1]fsr1
  5817                           
  5818                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5819  02D5  0855               	movf	_Sw^(0+128),w
  5820  02D6  0086               	movwf	6
  5821  02D7  3001               	movlw	1	; select bank2/3
  5822  02D8  0087               	movwf	7
  5823  02D9  1601               	bsf	1,4
  5824                           
  5825                           ;Switch_B1.c: 171: setRF_Learn(1);
  5826  02DA  3001               	movlw	1
  5827  02DB  319D  25D7  3181   	fcall	_setRF_Learn
  5828                           
  5829                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5830  02DE  0022               	movlb	2	; select bank2
  5831  02DF  1EA0               	btfss	_myMain^(0+256),5
  5832  02E0  0008               	return
  5833                           
  5834                           ;Switch_B1.c: 173: setBuz(2, 100);
  5835  02E1  3064               	movlw	100
  5836  02E2  0020               	movlb	0	; select bank0
  5837  02E3  00AA               	movwf	setBuz@time
  5838  02E4  3000               	movlw	0
  5839  02E5  00AB               	movwf	setBuz@time+1
  5840  02E6  3002               	movlw	2
  5841  02E7  3195  25BC         	fcall	_setBuz
  5842                           
  5843                           ;Switch_B1.c: 174: }
  5844                           ;Switch_B1.c: 178: }
  5845                           ;Switch_B1.c: 179: } else {
  5846  02E9  0008               	return
  5847  02EA                     l8772:	
  5848                           
  5849                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5850  02EA  0021               	movlb	1	; select bank1
  5851  02EB  0855               	movf	_Sw^(0+128),w
  5852  02EC  0086               	movwf	6
  5853  02ED  3001               	movlw	1	; select bank2/3
  5854  02EE  0087               	movwf	7
  5855  02EF  1A81               	btfsc	1,5
  5856  02F0  0008               	return
  5857                           
  5858                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5859  02F1  0855               	movf	_Sw^(0+128),w
  5860  02F2  3E07               	addlw	7
  5861  02F3  0086               	movwf	6
  5862  02F4  3001               	movlw	1	; select bank2/3
  5863  02F5  0087               	movwf	7
  5864  02F6  3001               	movlw	1
  5865  02F7  0781               	addwf	1,f
  5866  02F8  3141               	addfsr 1,1
  5867  02F9  1803               	skipnc
  5868  02FA  0A81               	incf	1,f
  5869                           
  5870                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5871  02FB  0855               	movf	_Sw^(0+128),w
  5872  02FC  3E07               	addlw	7
  5873  02FD  0086               	movwf	6
  5874  02FE  3001               	movlw	1	; select bank2/3
  5875  02FF  0087               	movwf	7
  5876  0300  3F40               	moviw [0]fsr1
  5877  0301  0020               	movlb	0	; select bank0
  5878  0302  00B0               	movwf	??_setSw_Main
  5879  0303  3F41               	moviw [1]fsr1
  5880  0304  00B1               	movwf	??_setSw_Main+1
  5881  0305  3000               	movlw	0
  5882  0306  0231               	subwf	??_setSw_Main+1,w
  5883  0307  3096               	movlw	150
  5884  0308  1903               	skipnz
  5885  0309  0230               	subwf	??_setSw_Main,w
  5886  030A  1C03               	skipc
  5887  030B  0008               	return
  5888                           
  5889                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5890  030C  0021               	movlb	1	; select bank1
  5891  030D  0855               	movf	_Sw^(0+128),w
  5892  030E  3E07               	addlw	7
  5893  030F  0086               	movwf	6
  5894  0310  3001               	movlw	1	; select bank2/3
  5895  0311  0087               	movwf	7
  5896  0312  3000               	movlw	0
  5897  0313  3FC0               	movwi [0]fsr1
  5898  0314  3FC1               	movwi [1]fsr1
  5899                           
  5900                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5901  0315  0855               	movf	_Sw^(0+128),w
  5902  0316  0086               	movwf	6
  5903  0317  3001               	movlw	1	; select bank2/3
  5904  0318  0087               	movwf	7
  5905  0319  1681               	bsf	1,5
  5906                           
  5907                           ;Switch_B1.c: 187: setRF_Learn(0);
  5908  031A  3000               	movlw	0
  5909  031B  319D  25D7         	fcall	_setRF_Learn
  5910                           
  5911                           ;Switch_B1.c: 190: }
  5912                           ;Switch_B1.c: 191: }
  5913                           ;Switch_B1.c: 192: }
  5914                           ;Switch_B1.c: 194: }
  5915                           ;Switch_B1.c: 195: }
  5916                           ;Switch_B1.c: 196: } else {
  5917  031D  0008               	return
  5918  031E                     l8782:	
  5919                           
  5920                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5921  031E  0021               	movlb	1	; select bank1
  5922  031F  0855               	movf	_Sw^(0+128),w
  5923  0320  0086               	movwf	6
  5924  0321  3001               	movlw	1	; select bank2/3
  5925  0322  0087               	movwf	7
  5926  0323  1D01               	btfss	1,2
  5927  0324  0008               	return
  5928                           
  5929                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5930  0325  3001               	movlw	1
  5931  0326  0020               	movlb	0	; select bank0
  5932  0327  00B0               	movwf	??_setSw_Main
  5933  0328  0021               	movlb	1	; select bank1
  5934  0329  0855               	movf	_Sw^(0+128),w
  5935  032A  3E02               	addlw	2
  5936  032B  0086               	movwf	6
  5937  032C  3001               	movlw	1	; select bank2/3
  5938  032D  0087               	movwf	7
  5939  032E  0020               	movlb	0	; select bank0
  5940  032F  0830               	movf	??_setSw_Main,w
  5941  0330  0781               	addwf	1,f
  5942                           
  5943                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  5944  0331  0021               	movlb	1	; select bank1
  5945  0332  0855               	movf	_Sw^(0+128),w
  5946  0333  3E02               	addlw	2
  5947  0334  0086               	movwf	6
  5948  0335  3001               	movlw	1	; select bank2/3
  5949  0336  0087               	movwf	7
  5950  0337  3003               	movlw	3
  5951  0338  0201               	subwf	1,w
  5952  0339  1C03               	skipc
  5953  033A  0008               	return
  5954                           
  5955                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  5956  033B  0855               	movf	_Sw^(0+128),w
  5957  033C  3E02               	addlw	2
  5958  033D  0086               	movwf	6
  5959  033E  3001               	movlw	1	; select bank2/3
  5960  033F  0087               	movwf	7
  5961  0340  0181               	clrf	1
  5962                           
  5963                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  5964  0341  0855               	movf	_Sw^(0+128),w
  5965  0342  0086               	movwf	6
  5966  0343  3001               	movlw	1	; select bank2/3
  5967  0344  0087               	movwf	7
  5968  0345  1101               	bcf	1,2
  5969                           
  5970                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  5971  0346  0855               	movf	_Sw^(0+128),w
  5972  0347  3E03               	addlw	3
  5973  0348  0086               	movwf	6
  5974  0349  3001               	movlw	1	; select bank2/3
  5975  034A  0087               	movwf	7
  5976  034B  3000               	movlw	0
  5977  034C  3FC0               	movwi [0]fsr1
  5978  034D  3FC1               	movwi [1]fsr1
  5979                           
  5980                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  5981  034E  0855               	movf	_Sw^(0+128),w
  5982  034F  0086               	movwf	6
  5983  0350  3001               	movlw	1	; select bank2/3
  5984  0351  0087               	movwf	7
  5985  0352  1181               	bcf	1,3
  5986                           
  5987                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  5988  0353  0855               	movf	_Sw^(0+128),w
  5989  0354  0086               	movwf	6
  5990  0355  3001               	movlw	1	; select bank2/3
  5991  0356  0087               	movwf	7
  5992  0357  1201               	bcf	1,4
  5993                           
  5994                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  5995  0358  0855               	movf	_Sw^(0+128),w
  5996  0359  0086               	movwf	6
  5997  035A  3001               	movlw	1	; select bank2/3
  5998  035B  0087               	movwf	7
  5999  035C  1281               	bcf	1,5
  6000                           
  6001                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6002  035D  0855               	movf	_Sw^(0+128),w
  6003  035E  3E05               	addlw	5
  6004  035F  0086               	movwf	6
  6005  0360  3001               	movlw	1	; select bank2/3
  6006  0361  0087               	movwf	7
  6007  0362  3000               	movlw	0
  6008  0363  3FC0               	movwi [0]fsr1
  6009  0364  3FC1               	movwi [1]fsr1
  6010                           
  6011                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6012  0365  0855               	movf	_Sw^(0+128),w
  6013  0366  3E07               	addlw	7
  6014  0367  0086               	movwf	6
  6015  0368  3001               	movlw	1	; select bank2/3
  6016  0369  0087               	movwf	7
  6017  036A  3000               	movlw	0
  6018  036B  3FC0               	movwi [0]fsr1
  6019  036C  3FC1               	movwi [1]fsr1
  6020                           
  6021                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6022  036D  0020               	movlb	0	; select bank0
  6023  036E  0832               	movf	setSw_Main@sw,w
  6024  036F  3192  22C8  3181   	fcall	_setDimmerLights_SwOff
  6025                           
  6026                           ;Switch_B1.c: 219: setRF_Learn(0);
  6027  0372  3000               	movlw	0
  6028  0373  319D  25D7         	fcall	_setRF_Learn
  6029                           
  6030                           ;Switch_B1.c: 221: }
  6031                           ;Switch_B1.c: 222: }
  6032                           ;Switch_B1.c: 223: }
  6033                           ;Switch_B1.c: 224: } else {
  6034  0375  0008               	return
  6035  0376                     l2480:	
  6036                           
  6037                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6038  0376  0022               	movlb	2	; select bank2
  6039  0377  1C20               	btfss	_myMain^(0+256),0
  6040  0378  0008               	return
  6041                           
  6042                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6043  0379  0021               	movlb	1	; select bank1
  6044  037A  0855               	movf	_Sw^(0+128),w
  6045  037B  0086               	movwf	6
  6046  037C  3001               	movlw	1	; select bank2/3
  6047  037D  0087               	movwf	7
  6048  037E  1401               	bsf	1,0
  6049  037F  0008               	return
  6050  0380                     __end_of_setSw_Main:	
  6051                           
  6052                           	psect	text14
  6053  1DD7                     __ptext14:	
  6054 ;; *************** function _setRF_Learn *****************
  6055 ;; Defined at:
  6056 ;;		line 33 in file "../src/RF_Control_B1.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;  command         1    wreg     unsigned char 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;  command         1    2[BANK0 ] unsigned char 
  6061 ;; Return value:  Size  Location     Type
  6062 ;;		None               void
  6063 ;; Registers used:
  6064 ;;		wreg, status,2, status,0
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;Total ram usage:        2 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:    5
  6077 ;; This function calls:
  6078 ;;		Nothing
  6079 ;; This function is called by:
  6080 ;;		_setSw_Main
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           
  6085                           ;psect for function _setRF_Learn
  6086  1DD7                     _setRF_Learn:	
  6087                           
  6088                           ;incstack = 0
  6089                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6090                           ;setRF_Learn@command stored from wreg
  6091  1DD7  0020               	movlb	0	; select bank0
  6092  1DD8  00A2               	movwf	setRF_Learn@command
  6093                           
  6094                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6095  1DD9  0822               	movf	setRF_Learn@command,w
  6096  1DDA  3A01               	xorlw	1
  6097  1DDB  3000               	movlw	0
  6098  1DDC  1903               	skipnz
  6099  1DDD  3001               	movlw	1
  6100  1DDE  00A1               	movwf	??_setRF_Learn
  6101  1DDF  0EA1               	swapf	??_setRF_Learn,f
  6102  1DE0  0DA1               	rlf	??_setRF_Learn,f
  6103  1DE1  0DA1               	rlf	??_setRF_Learn,f
  6104  1DE2  0021               	movlb	1	; select bank1
  6105  1DE3  0820               	movf	_RF1^(0+128),w
  6106  1DE4  0020               	movlb	0	; select bank0
  6107  1DE5  0621               	xorwf	??_setRF_Learn,w
  6108  1DE6  39BF               	andlw	-65
  6109  1DE7  0621               	xorwf	??_setRF_Learn,w
  6110  1DE8  0021               	movlb	1	; select bank1
  6111  1DE9  00A0               	movwf	_RF1^(0+128)
  6112  1DEA  0008               	return
  6113  1DEB                     __end_of_setRF_Learn:	
  6114                           
  6115                           	psect	text15
  6116  113C                     __ptext15:	
  6117 ;; *************** function _setDimmerLights_DimmingOn *****************
  6118 ;; Defined at:
  6119 ;;		line 715 in file "../src/Dimmer_B1.c"
  6120 ;; Parameters:    Size  Location     Type
  6121 ;;  sw              1    wreg     unsigned char 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;  sw              1    3[BANK0 ] unsigned char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;		None               void
  6126 ;; Registers used:
  6127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;Total ram usage:        1 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    6
  6140 ;; This function calls:
  6141 ;;		_DimmerLights_SelectPointer
  6142 ;; This function is called by:
  6143 ;;		_setSw_Main
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _setDimmerLights_DimmingOn
  6149  113C                     _setDimmerLights_DimmingOn:	
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6153                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6154  113C  0020               	movlb	0	; select bank0
  6155  113D  00A3               	movwf	setDimmerLights_DimmingOn@sw
  6156                           
  6157                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6158  113E  0823               	movf	setDimmerLights_DimmingOn@sw,w
  6159  113F  319C  2405  3191   	fcall	_DimmerLights_SelectPointer
  6160                           
  6161                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6162  1142  0021               	movlb	1	; select bank1
  6163  1143  084F               	movf	_DimmerLights^(0+128),w
  6164  1144  0086               	movwf	6
  6165  1145  3001               	movlw	1	; select bank2/3
  6166  1146  0087               	movwf	7
  6167  1147  1881               	btfsc	1,1
  6168  1148  0008               	return
  6169                           
  6170                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6171  1149  084F               	movf	_DimmerLights^(0+128),w
  6172  114A  0086               	movwf	6
  6173  114B  3001               	movlw	1	; select bank2/3
  6174  114C  0087               	movwf	7
  6175  114D  1C01               	btfss	1,0
  6176  114E  0008               	return
  6177                           
  6178                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6179  114F  0A4F               	incf	_DimmerLights^(0+128),w
  6180  1150  0086               	movwf	6
  6181  1151  3001               	movlw	1	; select bank2/3
  6182  1152  0087               	movwf	7
  6183  1153  1401               	bsf	1,0
  6184                           
  6185                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6186  1154  084F               	movf	_DimmerLights^(0+128),w
  6187  1155  0086               	movwf	6
  6188  1156  3001               	movlw	1	; select bank2/3
  6189  1157  0087               	movwf	7
  6190  1158  1581               	bsf	1,3
  6191                           
  6192                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6193  1159  084F               	movf	_DimmerLights^(0+128),w
  6194  115A  0086               	movwf	6
  6195  115B  3001               	movlw	1	; select bank2/3
  6196  115C  0087               	movwf	7
  6197  115D  1601               	bsf	1,4
  6198                           
  6199                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6200  115E  084F               	movf	_DimmerLights^(0+128),w
  6201  115F  0086               	movwf	6
  6202  1160  3001               	movlw	1	; select bank2/3
  6203  1161  0087               	movwf	7
  6204  1162  1681               	bsf	1,5
  6205  1163  0008               	return
  6206  1164                     __end_of_setDimmerLights_DimmingOn:	
  6207                           
  6208                           	psect	text16
  6209  1D0D                     __ptext16:	
  6210 ;; *************** function _getSw_KeyStatus *****************
  6211 ;; Defined at:
  6212 ;;		line 237 in file "../src/Switch_B1.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;  sw              1    wreg     unsigned char 
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;  sw              1    0[COMMON] unsigned char 
  6217 ;;  status          1    2[BANK0 ] unsigned char 
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  1    wreg      unsigned char 
  6220 ;; Registers used:
  6221 ;;		wreg, status,2
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;Total ram usage:        3 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    5
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_setSw_Main
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           
  6242                           ;psect for function _getSw_KeyStatus
  6243  1D0D                     _getSw_KeyStatus:	
  6244                           
  6245                           ;Switch_B1.c: 238: char status = 0;
  6246                           
  6247                           ;incstack = 0
  6248                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6249  1D0D  0020               	movlb	0	; select bank0
  6250  1D0E  01A2               	clrf	getSw_KeyStatus@status
  6251                           
  6252                           ;Switch_B1.c: 271: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1 ? 1 : 0;
  6253  1D0F  01A3               	clrf	_getSw_KeyStatus$6325
  6254  1D10  0AA3               	incf	_getSw_KeyStatus$6325,f
  6255  1D11  1F0C               	btfss	12,6	;volatile
  6256  1D12  1A0C               	btfsc	12,4	;volatile
  6257  1D13  2D18               	goto	l6924
  6258  1D14  1C0C               	btfss	12,0	;volatile
  6259  1D15  1B8C               	btfsc	12,7	;volatile
  6260  1D16  2D18               	goto	l6924
  6261  1D17  01A3               	clrf	_getSw_KeyStatus$6325
  6262  1D18                     l6924:	
  6263  1D18  0823               	movf	_getSw_KeyStatus$6325,w
  6264  1D19  00A1               	movwf	??_getSw_KeyStatus
  6265  1D1A  0821               	movf	??_getSw_KeyStatus,w
  6266  1D1B  00A2               	movwf	getSw_KeyStatus@status
  6267                           
  6268                           ;Switch_B1.c: 275: return status;
  6269  1D1C  0822               	movf	getSw_KeyStatus@status,w
  6270  1D1D  0008               	return
  6271  1D1E                     __end_of_getSw_KeyStatus:	
  6272                           
  6273                           	psect	text17
  6274  1C71                     __ptext17:	
  6275 ;; *************** function _SwPointSelect *****************
  6276 ;; Defined at:
  6277 ;;		line 25 in file "../src/Switch_B1.c"
  6278 ;; Parameters:    Size  Location     Type
  6279 ;;  sw              1    wreg     unsigned char 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  sw              1    2[BANK0 ] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;		None               void
  6284 ;; Registers used:
  6285 ;;		wreg
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;Total ram usage:        2 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    5
  6298 ;; This function calls:
  6299 ;;		Nothing
  6300 ;; This function is called by:
  6301 ;;		_setSw_Main
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           
  6306                           ;psect for function _SwPointSelect
  6307  1C71                     _SwPointSelect:	
  6308                           
  6309                           ;incstack = 0
  6310                           ; Regs used in _SwPointSelect: [wreg]
  6311                           ;SwPointSelect@sw stored from wreg
  6312  1C71  0020               	movlb	0	; select bank0
  6313  1C72  00A2               	movwf	SwPointSelect@sw
  6314                           
  6315                           ;Switch_B1.c: 28: if (sw == 1) {
  6316  1C73  0822               	movf	SwPointSelect@sw,w
  6317  1C74  3A01               	xorlw	1
  6318  1C75  1D03               	skipz
  6319  1C76  0008               	return
  6320                           
  6321                           ;Switch_B1.c: 29: Sw = &Sw1;
  6322  1C77  30E3               	movlw	_Sw1& (0+255)
  6323  1C78  00A1               	movwf	??_SwPointSelect
  6324  1C79  0821               	movf	??_SwPointSelect,w
  6325  1C7A  0021               	movlb	1	; select bank1
  6326  1C7B  00D5               	movwf	_Sw^(0+128)
  6327  1C7C  0008               	return
  6328  1C7D                     __end_of_SwPointSelect:	
  6329                           
  6330                           	psect	text18
  6331  1E15                     __ptext18:	
  6332 ;; *************** function _TouchPower *****************
  6333 ;; Defined at:
  6334 ;;		line 10 in file "../src/Switch_B1.c"
  6335 ;; Parameters:    Size  Location     Type
  6336 ;;		None
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;		None               void
  6341 ;; Registers used:
  6342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;Total ram usage:        0 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    6
  6355 ;; This function calls:
  6356 ;;		_Timeout_Counter
  6357 ;;		_set_TimeoutCleared
  6358 ;; This function is called by:
  6359 ;;		_Switch_Main
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _TouchPower
  6365  1E15                     _TouchPower:	
  6366                           
  6367                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6371  1E15  0022               	movlb	2	; select bank2
  6372  1E16  1C20               	btfss	_myMain^(0+256),0
  6373  1E17  0008               	return
  6374                           
  6375                           ;Switch_B1.c: 12: if (RB0 == 0) {
  6376  1E18  0020               	movlb	0	; select bank0
  6377  1E19  180D               	btfsc	13,0	;volatile
  6378  1E1A  0008               	return
  6379  1E1B  2E21               	goto	l7418
  6380  1E1C                     l2460:	
  6381                           ;Switch_B1.c: 13: while (RB0 == 0 && myMain.Timeout == 0) {
  6382                           
  6383                           
  6384                           ;Switch_B1.c: 14: RB0 = 1;
  6385  1E1C  0020               	movlb	0	; select bank0
  6386  1E1D  140D               	bsf	13,0	;volatile
  6387                           
  6388                           ;Switch_B1.c: 15: Timeout_Counter();
  6389  1E1E  319E  2656  319E   	fcall	_Timeout_Counter
  6390  1E21                     l7418:	
  6391  1E21  0020               	movlb	0	; select bank0
  6392  1E22  180D               	btfsc	13,0	;volatile
  6393  1E23  2E27               	goto	l7422
  6394  1E24  0022               	movlb	2	; select bank2
  6395  1E25  1D2A               	btfss	(_myMain^(0+256)+10),2
  6396  1E26  2E1C               	goto	l2460
  6397  1E27                     l7422:	
  6398                           
  6399                           ;Switch_B1.c: 16: }
  6400                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6401  1E27  319B  235F         	fcall	_set_TimeoutCleared
  6402  1E29  0008               	return
  6403  1E2A                     __end_of_TouchPower:	
  6404                           
  6405                           	psect	text19
  6406  1B5F                     __ptext19:	
  6407 ;; *************** function _set_TimeoutCleared *****************
  6408 ;; Defined at:
  6409 ;;		line 281 in file "../src/Main_B1.c"
  6410 ;; Parameters:    Size  Location     Type
  6411 ;;		None
  6412 ;; Auto vars:     Size  Location     Type
  6413 ;;		None
  6414 ;; Return value:  Size  Location     Type
  6415 ;;		None               void
  6416 ;; Registers used:
  6417 ;;		status,2
  6418 ;; Tracked objects:
  6419 ;;		On entry : 0/0
  6420 ;;		On exit  : 0/0
  6421 ;;		Unchanged: 0/0
  6422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;Total ram usage:        0 bytes
  6428 ;; Hardware stack levels used:    1
  6429 ;; Hardware stack levels required when called:    5
  6430 ;; This function calls:
  6431 ;;		Nothing
  6432 ;; This function is called by:
  6433 ;;		_getAD
  6434 ;;		_TouchPower
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           
  6439                           ;psect for function _set_TimeoutCleared
  6440  1B5F                     _set_TimeoutCleared:	
  6441                           
  6442                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6443                           
  6444                           ;incstack = 0
  6445                           ; Regs used in _set_TimeoutCleared: [status,2]
  6446  1B5F  0022               	movlb	2	; select bank2
  6447  1B60  112A               	bcf	(_myMain^(0+256)+10),2
  6448                           
  6449                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6450  1B61  01AB               	clrf	(_myMain^(0+256)+11)
  6451  1B62  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6452  1B63  0008               	return
  6453  1B64                     __end_of_set_TimeoutCleared:	
  6454                           
  6455                           	psect	text20
  6456  1E56                     __ptext20:	
  6457 ;; *************** function _Timeout_Counter *****************
  6458 ;; Defined at:
  6459 ;;		line 272 in file "../src/Main_B1.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;		None
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;		None               void
  6466 ;; Registers used:
  6467 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;Total ram usage:        0 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    5
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_getAD
  6484 ;;		_TouchPower
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function _Timeout_Counter
  6490  1E56                     _Timeout_Counter:	
  6491                           
  6492                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6493                           
  6494                           ;incstack = 0
  6495                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6496  1E56  3001               	movlw	1
  6497  1E57  0022               	movlb	2	; select bank2
  6498  1E58  07AB               	addwf	(_myMain^(0+256)+11),f
  6499  1E59  3000               	movlw	0
  6500  1E5A  3DAC               	addwfc	((_myMain+1)^(0+256)+11),f
  6501                           
  6502                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6503  1E5B  300B               	movlw	11
  6504  1E5C  3E20               	addlw	_myMain& (0+255)
  6505  1E5D  0086               	movwf	6
  6506  1E5E  3001               	movlw	1	; select bank2/3
  6507  1E5F  0087               	movwf	7
  6508  1E60  3F40               	moviw [0]fsr1
  6509  1E61  3AA8               	xorlw	168
  6510  1E62  1D03               	skipz
  6511  1E63  2E66               	goto	u6025
  6512  1E64  3F41               	moviw [1]fsr1
  6513  1E65  3A61               	xorlw	97
  6514  1E66                     u6025:	
  6515  1E66  1D03               	skipz
  6516  1E67  0008               	return
  6517                           
  6518                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6519  1E68  01AB               	clrf	(_myMain^(0+256)+11)
  6520  1E69  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6521                           
  6522                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6523  1E6A  152A               	bsf	(_myMain^(0+256)+10),2
  6524  1E6B  0008               	return
  6525  1E6C                     __end_of_Timeout_Counter:	
  6526                           
  6527                           	psect	text21
  6528  1B5B                     __ptext21:	
  6529 ;; *************** function _Switch_Initialization *****************
  6530 ;; Defined at:
  6531 ;;		line 46 in file "../src/Switch_B1.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;Total ram usage:        0 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    8
  6552 ;; This function calls:
  6553 ;;		_setSw_Initialization
  6554 ;; This function is called by:
  6555 ;;		_main
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           
  6560                           ;psect for function _Switch_Initialization
  6561  1B5B                     _Switch_Initialization:	
  6562                           
  6563                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6564                           
  6565                           ;incstack = 0
  6566                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6567  1B5B  3001               	movlw	1
  6568  1B5C  319C  24A8         	fcall	_setSw_Initialization
  6569  1B5E  0008               	return
  6570  1B5F                     __end_of_Switch_Initialization:	
  6571                           
  6572                           	psect	text22
  6573  1CA8                     __ptext22:	
  6574 ;; *************** function _setSw_Initialization *****************
  6575 ;; Defined at:
  6576 ;;		line 66 in file "../src/Switch_B1.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  sw              1    wreg     unsigned char 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  sw              1    5[BANK0 ] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;		None               void
  6583 ;; Registers used:
  6584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;Total ram usage:        1 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    7
  6597 ;; This function calls:
  6598 ;;		_setLED
  6599 ;; This function is called by:
  6600 ;;		_Switch_Initialization
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           
  6605                           ;psect for function _setSw_Initialization
  6606  1CA8                     _setSw_Initialization:	
  6607                           
  6608                           ;incstack = 0
  6609                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6610                           ;setSw_Initialization@sw stored from wreg
  6611  1CA8  0020               	movlb	0	; select bank0
  6612  1CA9  00A5               	movwf	setSw_Initialization@sw
  6613                           
  6614                           ;Switch_B1.c: 68: setLED(sw, 1);
  6615  1CAA  01A3               	clrf	setLED@command
  6616  1CAB  0AA3               	incf	setLED@command,f
  6617  1CAC  0825               	movf	setSw_Initialization@sw,w
  6618  1CAD  3193  2301  319C   	fcall	_setLED
  6619                           
  6620                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  6621  1CB0  0020               	movlb	0	; select bank0
  6622  1CB1  01A3               	clrf	setLED@command
  6623  1CB2  0AA3               	incf	setLED@command,f
  6624  1CB3  0825               	movf	setSw_Initialization@sw,w
  6625  1CB4  3E01               	addlw	1
  6626  1CB5  3193  2301         	fcall	_setLED
  6627  1CB7  0008               	return
  6628  1CB8                     __end_of_setSw_Initialization:	
  6629                           
  6630                           	psect	text23
  6631  1B2E                     __ptext23:	
  6632 ;; *************** function _RF_Main *****************
  6633 ;; Defined at:
  6634 ;;		line 26 in file "../src/RF_Control_B1.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;		None
  6639 ;; Return value:  Size  Location     Type
  6640 ;;		None               void
  6641 ;; Registers used:
  6642 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;Total ram usage:        0 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:   12
  6655 ;; This function calls:
  6656 ;;		_setRF_Main
  6657 ;; This function is called by:
  6658 ;;		_main
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           
  6663                           ;psect for function _RF_Main
  6664  1B2E                     _RF_Main:	
  6665                           
  6666                           ;RF_Control_B1.c: 28: setRF_Main();
  6667                           
  6668                           ;incstack = 0
  6669                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6670  1B2E  3185  2565         	fcall	_setRF_Main
  6671  1B30  0008               	return
  6672  1B31                     __end_of_RF_Main:	
  6673                           
  6674                           	psect	text24
  6675  0565                     __ptext24:	
  6676 ;; *************** function _setRF_Main *****************
  6677 ;; Defined at:
  6678 ;;		line 53 in file "../src/RF_Control_B1.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;		None
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  error           1    6[BANK1 ] unsigned char 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;		None               void
  6685 ;; Registers used:
  6686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;Total ram usage:        2 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:   11
  6699 ;; This function calls:
  6700 ;;		_CC2500_PowerOnInitial
  6701 ;;		_CC2500_RxData
  6702 ;;		_CC2500_TxData
  6703 ;;		_CC2500_WriteCommand
  6704 ;;		_RF_RxDisable
  6705 ;;		___lwdiv
  6706 ;;		_getBuz_GO
  6707 ;;		_getRF_KeyStatus
  6708 ;;		_getRxData
  6709 ;; This function is called by:
  6710 ;;		_RF_Main
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           
  6715                           ;psect for function _setRF_Main
  6716  0565                     _setRF_Main:	
  6717                           
  6718                           ;RF_Control_B1.c: 54: char error = 0;
  6719                           
  6720                           ;incstack = 0
  6721                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6722  0565  0021               	movlb	1	; select bank1
  6723  0566  01EB               	clrf	setRF_Main@error^(0+128)
  6724                           
  6725                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6726  0567  1C20               	btfss	_RF1^(0+128),0
  6727  0568  2E36               	goto	l2102
  6728                           
  6729                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6730  0569  319C  24EB  3185   	fcall	_getBuz_GO
  6731  056C  0020               	movlb	0	; select bank0
  6732  056D  0822               	movf	?_getBuz_GO+1,w
  6733  056E  0421               	iorwf	?_getBuz_GO,w
  6734  056F  1D03               	skipz
  6735  0570  2E17               	goto	l8700
  6736                           
  6737                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6738  0571  319C  24FC  3185   	fcall	_getRF_KeyStatus
  6739  0574  3A01               	xorlw	1
  6740  0575  3000               	movlw	0
  6741  0576  1903               	skipnz
  6742  0577  3001               	movlw	1
  6743  0578  0021               	movlb	1	; select bank1
  6744  0579  00EA               	movwf	??_setRF_Main^(0+128)
  6745  057A  0CEA               	rrf	??_setRF_Main^(0+128),f
  6746  057B  0CEA               	rrf	??_setRF_Main^(0+128),f
  6747  057C  0820               	movf	_RF1^(0+128),w
  6748  057D  066A               	xorwf	??_setRF_Main^(0+128),w
  6749  057E  397F               	andlw	-129
  6750  057F  066A               	xorwf	??_setRF_Main^(0+128),w
  6751  0580  00A0               	movwf	_RF1^(0+128)
  6752                           
  6753                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6754  0581  1FA0               	btfss	_RF1^(0+128),7
  6755  0582  2D85               	goto	l2106
  6756  0583  1F20               	btfss	_RF1^(0+128),6
  6757  0584  2E17               	goto	l8700
  6758  0585                     l2106:	
  6759                           
  6760                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6761  0585  1D20               	btfss	_RF1^(0+128),2
  6762  0586  2DD6               	goto	l2107
  6763                           
  6764                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6765  0587  1B20               	btfsc	_RF1^(0+128),6
  6766  0588  2DD1               	goto	l8672
  6767                           
  6768                           ;RF_Control_B1.c: 68: RF1.Count++;
  6769  0589  3001               	movlw	1
  6770  058A  07A2               	addwf	(_RF1^(0+128)+2),f
  6771  058B  3000               	movlw	0
  6772  058C  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6773                           
  6774                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6775  058D  3014               	movlw	20
  6776  058E  0020               	movlb	0	; select bank0
  6777  058F  00A1               	movwf	___lwdiv@divisor
  6778  0590  3000               	movlw	0
  6779  0591  00A2               	movwf	___lwdiv@divisor+1
  6780  0592  0021               	movlb	1	; select bank1
  6781  0593  0828               	movf	((_RF1+1)^(0+128)+7),w
  6782  0594  0020               	movlb	0	; select bank0
  6783  0595  01A4               	clrf	___lwdiv@dividend+1
  6784  0596  07A4               	addwf	___lwdiv@dividend+1,f
  6785  0597  0021               	movlb	1	; select bank1
  6786  0598  0827               	movf	(_RF1^(0+128)+7),w
  6787  0599  0020               	movlb	0	; select bank0
  6788  059A  01A3               	clrf	___lwdiv@dividend
  6789  059B  07A3               	addwf	___lwdiv@dividend,f
  6790  059C  3192  2291  3185   	fcall	___lwdiv
  6791  059F  0020               	movlb	0	; select bank0
  6792  05A0  0822               	movf	?___lwdiv+1,w
  6793  05A1  0021               	movlb	1	; select bank1
  6794  05A2  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6795  05A3  1D03               	skipz
  6796  05A4  2DA9               	goto	u9325
  6797  05A5  0020               	movlb	0	; select bank0
  6798  05A6  0821               	movf	?___lwdiv,w
  6799  05A7  0021               	movlb	1	; select bank1
  6800  05A8  0222               	subwf	(_RF1^(0+128)+2),w
  6801  05A9                     u9325:	
  6802  05A9  1C03               	skipc
  6803  05AA  2E17               	goto	l8700
  6804                           
  6805                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6806  05AB  3014               	movlw	20
  6807  05AC  0020               	movlb	0	; select bank0
  6808  05AD  00A1               	movwf	___lwdiv@divisor
  6809  05AE  3000               	movlw	0
  6810  05AF  00A2               	movwf	___lwdiv@divisor+1
  6811  05B0  0021               	movlb	1	; select bank1
  6812  05B1  0828               	movf	((_RF1+1)^(0+128)+7),w
  6813  05B2  0020               	movlb	0	; select bank0
  6814  05B3  01A4               	clrf	___lwdiv@dividend+1
  6815  05B4  07A4               	addwf	___lwdiv@dividend+1,f
  6816  05B5  0021               	movlb	1	; select bank1
  6817  05B6  0827               	movf	(_RF1^(0+128)+7),w
  6818  05B7  0020               	movlb	0	; select bank0
  6819  05B8  01A3               	clrf	___lwdiv@dividend
  6820  05B9  07A3               	addwf	___lwdiv@dividend,f
  6821  05BA  3192  2291  3185   	fcall	___lwdiv
  6822  05BD  0020               	movlb	0	; select bank0
  6823  05BE  0822               	movf	?___lwdiv+1,w
  6824  05BF  0021               	movlb	1	; select bank1
  6825  05C0  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6826  05C1  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6827  05C2  0020               	movlb	0	; select bank0
  6828  05C3  0821               	movf	?___lwdiv,w
  6829  05C4  0021               	movlb	1	; select bank1
  6830  05C5  01A2               	clrf	(_RF1^(0+128)+2)
  6831  05C6  07A2               	addwf	(_RF1^(0+128)+2),f
  6832                           
  6833                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6834  05C7  1120               	bcf	_RF1^(0+128),2
  6835                           
  6836                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6837  05C8  01AA               	clrf	(_RF1^(0+128)+10)
  6838  05C9  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6839                           
  6840                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6841  05CA  319C  2499  3185   	fcall	_RF_RxDisable
  6842                           
  6843                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6844  05CD  3189  2105  3185   	fcall	_CC2500_TxData
  6845                           
  6846                           ;RF_Control_B1.c: 77: }
  6847                           ;RF_Control_B1.c: 78: } else {
  6848  05D0  2E17               	goto	l8700
  6849  05D1                     l8672:	
  6850                           
  6851                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6852  05D1  0021               	movlb	1	; select bank1
  6853  05D2  01A2               	clrf	(_RF1^(0+128)+2)
  6854  05D3  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6855                           
  6856                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6857  05D4  1120               	bcf	_RF1^(0+128),2
  6858                           
  6859                           ;RF_Control_B1.c: 81: }
  6860                           ;RF_Control_B1.c: 82: } else {
  6861  05D5  2E17               	goto	l8700
  6862  05D6                     l2107:	
  6863                           
  6864                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6865  05D6  1DA0               	btfss	_RF1^(0+128),3
  6866  05D7  2DE5               	goto	l8686
  6867                           
  6868                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6869  05D8  3189  2172  3185   	fcall	_CC2500_RxData
  6870                           
  6871                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6872  05DB  0021               	movlb	1	; select bank1
  6873  05DC  1CA0               	btfss	_RF1^(0+128),1
  6874  05DD  2E17               	goto	l8700
  6875                           
  6876                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6877  05DE  10A0               	bcf	_RF1^(0+128),1
  6878                           
  6879                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6880  05DF  01AA               	clrf	(_RF1^(0+128)+10)
  6881  05E0  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6882                           
  6883                           ;RF_Control_B1.c: 97: getRxData();
  6884  05E1  318A  22C1  3185   	fcall	_getRxData
  6885                           
  6886                           ;RF_Control_B1.c: 100: }
  6887                           ;RF_Control_B1.c: 101: } else {
  6888  05E4  2E17               	goto	l8700
  6889  05E5                     l8686:	
  6890                           
  6891                           ;RF_Control_B1.c: 102: RF1.Count++;
  6892  05E5  3001               	movlw	1
  6893  05E6  0021               	movlb	1	; select bank1
  6894  05E7  07A2               	addwf	(_RF1^(0+128)+2),f
  6895  05E8  3000               	movlw	0
  6896  05E9  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6897                           
  6898                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6899  05EA  3014               	movlw	20
  6900  05EB  0020               	movlb	0	; select bank0
  6901  05EC  00A1               	movwf	___lwdiv@divisor
  6902  05ED  3000               	movlw	0
  6903  05EE  00A2               	movwf	___lwdiv@divisor+1
  6904  05EF  0021               	movlb	1	; select bank1
  6905  05F0  0828               	movf	((_RF1+1)^(0+128)+7),w
  6906  05F1  0020               	movlb	0	; select bank0
  6907  05F2  01A4               	clrf	___lwdiv@dividend+1
  6908  05F3  07A4               	addwf	___lwdiv@dividend+1,f
  6909  05F4  0021               	movlb	1	; select bank1
  6910  05F5  0827               	movf	(_RF1^(0+128)+7),w
  6911  05F6  0020               	movlb	0	; select bank0
  6912  05F7  01A3               	clrf	___lwdiv@dividend
  6913  05F8  07A3               	addwf	___lwdiv@dividend,f
  6914  05F9  3192  2291  3185   	fcall	___lwdiv
  6915  05FC  0020               	movlb	0	; select bank0
  6916  05FD  0822               	movf	?___lwdiv+1,w
  6917  05FE  0021               	movlb	1	; select bank1
  6918  05FF  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6919  0600  1D03               	skipz
  6920  0601  2E06               	goto	u9355
  6921  0602  0020               	movlb	0	; select bank0
  6922  0603  0821               	movf	?___lwdiv,w
  6923  0604  0021               	movlb	1	; select bank1
  6924  0605  0222               	subwf	(_RF1^(0+128)+2),w
  6925  0606                     u9355:	
  6926  0606  1C03               	skipc
  6927  0607  2E17               	goto	l8700
  6928                           
  6929                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6930  0608  01A2               	clrf	(_RF1^(0+128)+2)
  6931  0609  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6932                           
  6933                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6934  060A  15A0               	bsf	_RF1^(0+128),3
  6935                           
  6936                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6937  060B  3036               	movlw	54
  6938  060C  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6939                           
  6940                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6941  060F  303A               	movlw	58
  6942  0610  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6943                           
  6944                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6945  0613  3034               	movlw	52
  6946  0614  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6947  0617                     l8700:	
  6948                           
  6949                           ;RF_Control_B1.c: 111: }
  6950                           ;RF_Control_B1.c: 112: }
  6951                           ;RF_Control_B1.c: 113: }
  6952                           ;RF_Control_B1.c: 114: }
  6953                           ;RF_Control_B1.c: 115: }
  6954                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6955  0617  3001               	movlw	1
  6956  0618  0021               	movlb	1	; select bank1
  6957  0619  07AA               	addwf	(_RF1^(0+128)+10),f
  6958  061A  3000               	movlw	0
  6959  061B  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6960                           
  6961                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6962  061C  300B               	movlw	11
  6963  061D  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6964  061E  30B9               	movlw	185
  6965  061F  1903               	skipnz
  6966  0620  022A               	subwf	(_RF1^(0+128)+10),w
  6967  0621  1C03               	skipc
  6968  0622  2E2F               	goto	l8714
  6969                           
  6970                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6971  0623  01AA               	clrf	(_RF1^(0+128)+10)
  6972  0624  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6973                           
  6974                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6975  0625  11A0               	bcf	_RF1^(0+128),3
  6976                           
  6977                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6978  0626  10A0               	bcf	_RF1^(0+128),1
  6979                           
  6980                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6981  0627  3036               	movlw	54
  6982  0628  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6983                           
  6984                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6985  062B  303A               	movlw	58
  6986  062C  319F  271B  3185   	fcall	_CC2500_WriteCommand
  6987  062F                     l8714:	
  6988                           
  6989                           ;RF_Control_B1.c: 125: }
  6990                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6991  062F  0021               	movlb	1	; select bank1
  6992  0630  1F21               	btfss	(_RF1^(0+128)+1),6
  6993  0631  0008               	return
  6994                           
  6995                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6996  0632  1321               	bcf	(_RF1^(0+128)+1),6
  6997                           
  6998                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6999  0633  319E  2600         	fcall	_CC2500_PowerOnInitial
  7000                           
  7001                           ;RF_Control_B1.c: 130: }
  7002                           ;RF_Control_B1.c: 132: } else {
  7003  0635  0008               	return
  7004  0636                     l2102:	
  7005                           
  7006                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7007  0636  0022               	movlb	2	; select bank2
  7008  0637  1C20               	btfss	_myMain^(0+256),0
  7009  0638  0008               	return
  7010                           
  7011                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7012  0639  0021               	movlb	1	; select bank1
  7013  063A  1420               	bsf	_RF1^(0+128),0
  7014  063B  0008               	return
  7015  063C                     __end_of_setRF_Main:	
  7016                           
  7017                           	psect	text25
  7018  0AC1                     __ptext25:	
  7019 ;; *************** function _getRxData *****************
  7020 ;; Defined at:
  7021 ;;		line 227 in file "../src/RF_Control_B1.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  error           1    4[BANK1 ] unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;		None               void
  7028 ;; Registers used:
  7029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7038 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7039 ;;Total ram usage:        2 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:   10
  7042 ;; This function calls:
  7043 ;;		_getMain_All_Error_Status
  7044 ;;		_setControl_Lights_Table
  7045 ;;		_setLog_Code
  7046 ;;		_setTxData
  7047 ;; This function is called by:
  7048 ;;		_setRF_Main
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _getRxData
  7054  0AC1                     _getRxData:	
  7055                           
  7056                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7060  0AC1  0023               	movlb	3	; select bank3
  7061  0AC2  0820               	movf	_RF_Data^(0+384),w
  7062  0AC3  3AAA               	xorlw	170
  7063  0AC4  1D03               	skipz
  7064  0AC5  2AD7               	goto	l8486
  7065  0AC6  0821               	movf	(_RF_Data^(0+384)+1),w
  7066  0AC7  3A01               	xorlw	1
  7067  0AC8  1D03               	skipz
  7068  0AC9  2AD7               	goto	l8486
  7069                           
  7070                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7071  0ACA  3055               	movlw	85
  7072  0ACB  0021               	movlb	1	; select bank1
  7073  0ACC  00E8               	movwf	??_getRxData^(0+128)
  7074  0ACD  086D               	movf	_product^(0+128),w
  7075  0ACE  3E02               	addlw	2
  7076  0ACF  0086               	movwf	6
  7077  0AD0  3002               	movlw	2	; select bank4/5
  7078  0AD1  0087               	movwf	7
  7079  0AD2  0868               	movf	??_getRxData^(0+128),w
  7080  0AD3  0081               	movwf	1
  7081                           
  7082                           ;RF_Control_B1.c: 231: setTxData();
  7083  0AD4  318F  2745         	fcall	_setTxData
  7084                           
  7085                           ;RF_Control_B1.c: 235: } else {
  7086  0AD6  0008               	return
  7087  0AD7                     l8486:	
  7088                           
  7089                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7090  0AD7  3000               	movlw	0
  7091  0AD8  3191  21BD  318A   	fcall	_getMain_All_Error_Status
  7092  0ADB  0021               	movlb	1	; select bank1
  7093  0ADC  00E8               	movwf	??_getRxData^(0+128)
  7094  0ADD  0868               	movf	??_getRxData^(0+128),w
  7095  0ADE  00E9               	movwf	getRxData@error^(0+128)
  7096                           
  7097                           ;RF_Control_B1.c: 237: if (error == 0) {
  7098  0ADF  08E9               	movf	getRxData@error^(0+128),f
  7099  0AE0  1D03               	skipz
  7100  0AE1  2B31               	goto	l2147
  7101                           
  7102                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7103  0AE2  1F20               	btfss	_RF1^(0+128),6
  7104  0AE3  2AEF               	goto	l8498
  7105                           
  7106                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7107  0AE4  0023               	movlb	3	; select bank3
  7108  0AE5  08A0               	movf	_RF_Data^(0+384),f
  7109  0AE6  1D03               	skipz
  7110  0AE7  0008               	return
  7111  0AE8  0821               	movf	(_RF_Data^(0+384)+1),w
  7112  0AE9  3A64               	xorlw	100
  7113  0AEA  1D03               	skipz
  7114  0AEB  0008               	return
  7115                           
  7116                           ;RF_Control_B1.c: 241: setLog_Code();
  7117  0AEC  3188  2000         	fcall	_setLog_Code
  7118                           
  7119                           ;RF_Control_B1.c: 242: }
  7120                           ;RF_Control_B1.c: 243: } else {
  7121  0AEE  0008               	return
  7122  0AEF                     l8498:	
  7123                           
  7124                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  7125  0AEF  0023               	movlb	3	; select bank3
  7126  0AF0  0834               	movf	(_RF_Data^(0+384)+20),w
  7127  0AF1  3AD1               	xorlw	209
  7128  0AF2  1903               	skipnz
  7129  0AF3  2AF8               	goto	l8502
  7130  0AF4  0834               	movf	(_RF_Data^(0+384)+20),w
  7131  0AF5  3A0A               	xorlw	10
  7132  0AF6  1D03               	skipz
  7133  0AF7  0008               	return
  7134  0AF8                     l8502:	
  7135                           
  7136                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7137  0AF8  08A0               	movf	_RF_Data^(0+384),f
  7138  0AF9  1D03               	skipz
  7139  0AFA  0008               	return
  7140  0AFB  0821               	movf	(_RF_Data^(0+384)+1),w
  7141  0AFC  3A02               	xorlw	2
  7142  0AFD  1D03               	skipz
  7143  0AFE  0008               	return
  7144                           
  7145                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7146  0AFF  082C               	movf	(_RF_Data^(0+384)+12),w
  7147  0B00  3AFF               	xorlw	255
  7148  0B01  1D03               	skipz
  7149  0B02  2B0D               	goto	l8514
  7150  0B03  082D               	movf	(_RF_Data^(0+384)+13),w
  7151  0B04  3AFF               	xorlw	255
  7152  0B05  1D03               	skipz
  7153  0B06  2B0D               	goto	l8514
  7154  0B07  082E               	movf	(_RF_Data^(0+384)+14),w
  7155  0B08  3AFF               	xorlw	255
  7156  0B09  1D03               	skipz
  7157  0B0A  2B0D               	goto	l8514
  7158                           
  7159                           ;RF_Control_B1.c: 249: __nop();
  7160  0B0B  0000               	nop
  7161                           
  7162                           ;RF_Control_B1.c: 250: } else {
  7163  0B0C  0008               	return
  7164  0B0D                     l8514:	
  7165                           
  7166                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7167  0B0D  0021               	movlb	1	; select bank1
  7168  0B0E  086D               	movf	_product^(0+128),w
  7169  0B0F  3E0C               	addlw	12
  7170  0B10  0086               	movwf	6
  7171  0B11  3002               	movlw	2	; select bank4/5
  7172  0B12  0087               	movwf	7
  7173  0B13  0023               	movlb	3	; select bank3
  7174  0B14  082C               	movf	(_RF_Data^(0+384)+12),w
  7175  0B15  0601               	xorwf	1,w
  7176  0B16  1D03               	skipz
  7177  0B17  0008               	return
  7178  0B18  0021               	movlb	1	; select bank1
  7179  0B19  086D               	movf	_product^(0+128),w
  7180  0B1A  3E0D               	addlw	13
  7181  0B1B  0086               	movwf	6
  7182  0B1C  3002               	movlw	2	; select bank4/5
  7183  0B1D  0087               	movwf	7
  7184  0B1E  0023               	movlb	3	; select bank3
  7185  0B1F  082D               	movf	(_RF_Data^(0+384)+13),w
  7186  0B20  0601               	xorwf	1,w
  7187  0B21  1D03               	skipz
  7188  0B22  0008               	return
  7189  0B23  0021               	movlb	1	; select bank1
  7190  0B24  086D               	movf	_product^(0+128),w
  7191  0B25  3E0E               	addlw	14
  7192  0B26  0086               	movwf	6
  7193  0B27  3002               	movlw	2	; select bank4/5
  7194  0B28  0087               	movwf	7
  7195  0B29  0023               	movlb	3	; select bank3
  7196  0B2A  082E               	movf	(_RF_Data^(0+384)+14),w
  7197  0B2B  0601               	xorwf	1,w
  7198  0B2C  1D03               	skipz
  7199  0B2D  0008               	return
  7200                           
  7201                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7202  0B2E  318A  224F         	fcall	_setControl_Lights_Table
  7203                           
  7204                           ;RF_Control_B1.c: 253: }
  7205                           ;RF_Control_B1.c: 254: }
  7206                           ;RF_Control_B1.c: 256: }
  7207                           ;RF_Control_B1.c: 267: }
  7208                           ;RF_Control_B1.c: 268: }
  7209                           ;RF_Control_B1.c: 269: } else {
  7210  0B30  0008               	return
  7211  0B31                     l2147:	
  7212                           
  7213                           ;RF_Control_B1.c: 270: __nop();
  7214  0B31  0000               	nop
  7215  0B32  0008               	return
  7216  0B33                     __end_of_getRxData:	
  7217                           
  7218                           	psect	text26
  7219  0800                     __ptext26:	
  7220 ;; *************** function _setLog_Code *****************
  7221 ;; Defined at:
  7222 ;;		line 276 in file "../src/RF_Control_B1.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;		None               void
  7229 ;; Registers used:
  7230 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7240 ;;Total ram usage:        1 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    7
  7243 ;; This function calls:
  7244 ;;		_setBuz
  7245 ;;		_setMemory_LoopSave
  7246 ;;		_setMemory_Modify
  7247 ;;		_setProductData
  7248 ;; This function is called by:
  7249 ;;		_getRxData
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           
  7254                           ;psect for function _setLog_Code
  7255  0800                     _setLog_Code:	
  7256                           
  7257                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7258                           
  7259                           ;incstack = 0
  7260                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7261  0800  0021               	movlb	1	; select bank1
  7262  0801  1320               	bcf	_RF1^(0+128),6
  7263                           
  7264                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7265  0802  0023               	movlb	3	; select bank3
  7266  0803  082C               	movf	(_RF_Data^(0+384)+12),w
  7267  0804  0020               	movlb	0	; select bank0
  7268  0805  00E6               	movwf	??_setLog_Code
  7269  0806  0866               	movf	??_setLog_Code,w
  7270  0807  00E3               	movwf	setProductData@value
  7271  0808  300C               	movlw	12
  7272  0809  319C  2411  3188   	fcall	_setProductData
  7273                           
  7274                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7275  080C  0023               	movlb	3	; select bank3
  7276  080D  082D               	movf	(_RF_Data^(0+384)+13),w
  7277  080E  0020               	movlb	0	; select bank0
  7278  080F  00E6               	movwf	??_setLog_Code
  7279  0810  0866               	movf	??_setLog_Code,w
  7280  0811  00E3               	movwf	setProductData@value
  7281  0812  300D               	movlw	13
  7282  0813  319C  2411  3188   	fcall	_setProductData
  7283                           
  7284                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7285  0816  0023               	movlb	3	; select bank3
  7286  0817  082E               	movf	(_RF_Data^(0+384)+14),w
  7287  0818  0020               	movlb	0	; select bank0
  7288  0819  00E6               	movwf	??_setLog_Code
  7289  081A  0866               	movf	??_setLog_Code,w
  7290  081B  00E3               	movwf	setProductData@value
  7291  081C  300E               	movlw	14
  7292  081D  319C  2411  3188   	fcall	_setProductData
  7293                           
  7294                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7295  0820  3064               	movlw	100
  7296  0821  0020               	movlb	0	; select bank0
  7297  0822  00AA               	movwf	setBuz@time
  7298  0823  3000               	movlw	0
  7299  0824  00AB               	movwf	setBuz@time+1
  7300  0825  3001               	movlw	1
  7301  0826  3195  25BC  3188   	fcall	_setBuz
  7302                           
  7303                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7304  0829  0022               	movlb	2	; select bank2
  7305  082A  1EA0               	btfss	_myMain^(0+256),5
  7306  082B  2830               	goto	l2162
  7307                           
  7308                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7309  082C  3001               	movlw	1
  7310  082D  319D  25B1  3188   	fcall	_setMemory_LoopSave
  7311  0830                     l2162:	
  7312                           
  7313                           ;RF_Control_B1.c: 284: }
  7314                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7315  0830  3001               	movlw	1
  7316  0831  319D  259E         	fcall	_setMemory_Modify
  7317  0833  0008               	return
  7318  0834                     __end_of_setLog_Code:	
  7319                           
  7320                           	psect	text27
  7321  1DB1                     __ptext27:	
  7322 ;; *************** function _setMemory_LoopSave *****************
  7323 ;; Defined at:
  7324 ;;		line 1076 in file "../src/MCU_B1.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  command         1    wreg     unsigned char 
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;  command         1    2[BANK0 ] unsigned char 
  7329 ;; Return value:  Size  Location     Type
  7330 ;;		None               void
  7331 ;; Registers used:
  7332 ;;		wreg, status,2, status,0
  7333 ;; Tracked objects:
  7334 ;;		On entry : 0/0
  7335 ;;		On exit  : 0/0
  7336 ;;		Unchanged: 0/0
  7337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7341 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7342 ;;Total ram usage:        2 bytes
  7343 ;; Hardware stack levels used:    1
  7344 ;; Hardware stack levels required when called:    5
  7345 ;; This function calls:
  7346 ;;		Nothing
  7347 ;; This function is called by:
  7348 ;;		_setLog_Code
  7349 ;; This function uses a non-reentrant model
  7350 ;;
  7351                           
  7352                           
  7353                           ;psect for function _setMemory_LoopSave
  7354  1DB1                     _setMemory_LoopSave:	
  7355                           
  7356                           ;incstack = 0
  7357                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7358                           ;setMemory_LoopSave@command stored from wreg
  7359  1DB1  0020               	movlb	0	; select bank0
  7360  1DB2  00A2               	movwf	setMemory_LoopSave@command
  7361                           
  7362                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7363  1DB3  0822               	movf	setMemory_LoopSave@command,w
  7364  1DB4  3A01               	xorlw	1
  7365  1DB5  3000               	movlw	0
  7366  1DB6  1903               	skipnz
  7367  1DB7  3001               	movlw	1
  7368  1DB8  00A1               	movwf	??_setMemory_LoopSave
  7369  1DB9  0DA1               	rlf	??_setMemory_LoopSave,f
  7370  1DBA  0DA1               	rlf	??_setMemory_LoopSave,f
  7371  1DBB  0023               	movlb	3	; select bank3
  7372  1DBC  0862               	movf	(_Memory^(0+384)+36),w
  7373  1DBD  0020               	movlb	0	; select bank0
  7374  1DBE  0621               	xorwf	??_setMemory_LoopSave,w
  7375  1DBF  39FB               	andlw	-5
  7376  1DC0  0621               	xorwf	??_setMemory_LoopSave,w
  7377  1DC1  0023               	movlb	3	; select bank3
  7378  1DC2  00E2               	movwf	(_Memory^(0+384)+36)
  7379  1DC3  0008               	return
  7380  1DC4                     __end_of_setMemory_LoopSave:	
  7381                           
  7382                           	psect	text28
  7383  0A4F                     __ptext28:	
  7384 ;; *************** function _setControl_Lights_Table *****************
  7385 ;; Defined at:
  7386 ;;		line 289 in file "../src/RF_Control_B1.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;		None
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;		None
  7391 ;; Return value:  Size  Location     Type
  7392 ;;		None               void
  7393 ;; Registers used:
  7394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7395 ;; Tracked objects:
  7396 ;;		On entry : 0/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7404 ;;Total ram usage:        0 bytes
  7405 ;; Hardware stack levels used:    1
  7406 ;; Hardware stack levels required when called:    9
  7407 ;; This function calls:
  7408 ;;		_getDimmerLights_Status
  7409 ;;		_getMain_All_LightsStatus
  7410 ;;		_setCmd_Status
  7411 ;;		_setDimmerLights_SwOff
  7412 ;;		_setDimmerLights_SwOn
  7413 ;;		_setProductData
  7414 ;;		_setRFSW_AdjControl
  7415 ;;		_setRFSW_Control
  7416 ;;		_setTxData
  7417 ;; This function is called by:
  7418 ;;		_getRxData
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           
  7423                           ;psect for function _setControl_Lights_Table
  7424  0A4F                     _setControl_Lights_Table:	
  7425                           
  7426                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7427                           
  7428                           ;incstack = 0
  7429                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7430  0A4F  2AB1               	goto	l8408
  7431  0A50                     l8390:	
  7432                           ;RF_Control_B1.c: 292: case 0x00:
  7433                           
  7434                           
  7435                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7436  0A50  319B  23B8  318A   	fcall	_getMain_All_LightsStatus
  7437  0A53  3A01               	xorlw	1
  7438  0A54  1D03               	skipz
  7439  0A55  2A6C               	goto	l8398
  7440                           
  7441                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7442  0A56  3001               	movlw	1
  7443  0A57  319C  24B8  318A   	fcall	_getDimmerLights_Status
  7444  0A5A  3A01               	xorlw	1
  7445  0A5B  1D03               	skipz
  7446  0A5C  2A65               	goto	l8396
  7447                           
  7448                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7449  0A5D  3001               	movlw	1
  7450  0A5E  3191  21F0  318A   	fcall	_setDimmerLights_SwOn
  7451                           
  7452                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7453  0A61  3001               	movlw	1
  7454  0A62  3192  22C8  318A   	fcall	_setDimmerLights_SwOff
  7455  0A65                     l8396:	
  7456                           
  7457                           ;RF_Control_B1.c: 299: }
  7458                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7459  0A65  0020               	movlb	0	; select bank0
  7460  0A66  01A1               	clrf	setCmd_Status@cmd
  7461  0A67  0AA1               	incf	setCmd_Status@cmd,f
  7462  0A68  3001               	movlw	1
  7463  0A69  319E  26B5         	fcall	_setCmd_Status
  7464                           
  7465                           ;RF_Control_B1.c: 315: } else {
  7466  0A6B  0008               	return
  7467  0A6C                     l8398:	
  7468                           
  7469                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7470  0A6C  0020               	movlb	0	; select bank0
  7471  0A6D  01E3               	clrf	setProductData@value
  7472  0A6E  3009               	movlw	9
  7473  0A6F  319C  2411  318A   	fcall	_setProductData
  7474                           
  7475                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7476  0A72  0020               	movlb	0	; select bank0
  7477  0A73  01E3               	clrf	setProductData@value
  7478  0A74  300B               	movlw	11
  7479  0A75  319C  2411  318A   	fcall	_setProductData
  7480                           
  7481                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7482  0A78  0020               	movlb	0	; select bank0
  7483  0A79  01E3               	clrf	setProductData@value
  7484  0A7A  300F               	movlw	15
  7485  0A7B  319C  2411  318A   	fcall	_setProductData
  7486                           
  7487                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7488  0A7E  0020               	movlb	0	; select bank0
  7489  0A7F  01E3               	clrf	setProductData@value
  7490  0A80  3011               	movlw	17
  7491  0A81  319C  2411  318A   	fcall	_setProductData
  7492                           
  7493                           ;RF_Control_B1.c: 320: setTxData();
  7494  0A84  318F  2745         	fcall	_setTxData
  7495                           
  7496                           ;RF_Control_B1.c: 321: }
  7497                           ;RF_Control_B1.c: 322: break;
  7498  0A86  0008               	return
  7499  0A87                     l8400:	
  7500                           ;RF_Control_B1.c: 324: case 0x20:
  7501                           
  7502                           
  7503                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7504  0A87  0020               	movlb	0	; select bank0
  7505  0A88  01E3               	clrf	setProductData@value
  7506  0A89  3009               	movlw	9
  7507  0A8A  319C  2411  318A   	fcall	_setProductData
  7508                           
  7509                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7510  0A8D  0020               	movlb	0	; select bank0
  7511  0A8E  01E3               	clrf	setProductData@value
  7512  0A8F  300B               	movlw	11
  7513  0A90  319C  2411  318A   	fcall	_setProductData
  7514                           
  7515                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7516  0A93  0021               	movlb	1	; select bank1
  7517  0A94  086D               	movf	_product^(0+128),w
  7518  0A95  0086               	movwf	6
  7519  0A96  3002               	movlw	2	; select bank4/5
  7520  0A97  0087               	movwf	7
  7521  0A98  3002               	movlw	2	; select bank4/5
  7522  0A99  3F4F               	moviw [15]fsr1
  7523  0A9A  0020               	movlb	0	; select bank0
  7524  0A9B  00E3               	movwf	setProductData@value
  7525  0A9C  300F               	movlw	15
  7526  0A9D  319C  2411  318A   	fcall	_setProductData
  7527                           
  7528                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7529  0AA0  0020               	movlb	0	; select bank0
  7530  0AA1  01E3               	clrf	setProductData@value
  7531  0AA2  3011               	movlw	17
  7532  0AA3  319C  2411  318A   	fcall	_setProductData
  7533                           
  7534                           ;RF_Control_B1.c: 329: setTxData();
  7535  0AA6  318F  2745         	fcall	_setTxData
  7536                           
  7537                           ;RF_Control_B1.c: 330: break;
  7538  0AA8  0008               	return
  7539  0AA9                     l8402:	
  7540                           ;RF_Control_B1.c: 333: case 0x01:
  7541                           
  7542                           
  7543                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7544  0AA9  3001               	movlw	1
  7545  0AAA  3193  23F4         	fcall	_setRFSW_Control
  7546                           
  7547                           ;RF_Control_B1.c: 335: break;
  7548  0AAC  0008               	return
  7549  0AAD                     l8404:	
  7550                           ;RF_Control_B1.c: 339: case 0x11:
  7551                           
  7552                           
  7553                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7554  0AAD  3001               	movlw	1
  7555  0AAE  318B  23A5         	fcall	_setRFSW_AdjControl
  7556                           
  7557                           ;RF_Control_B1.c: 370: }
  7558                           
  7559                           ;RF_Control_B1.c: 341: break;
  7560  0AB0  0008               	return
  7561  0AB1                     l8408:	
  7562  0AB1  0023               	movlb	3	; select bank3
  7563  0AB2  082F               	movf	(_RF_Data^(0+384)+15),w
  7564                           
  7565                           ; Switch size 1, requested type "space"
  7566                           ; Number of cases is 4, Range of values is 0 to 32
  7567                           ; switch strategies available:
  7568                           ; Name         Instructions Cycles
  7569                           ; simple_byte           13     7 (average)
  7570                           ; direct_byte           72     6 (fixed)
  7571                           ; jumptable            260     6 (fixed)
  7572                           ;	Chosen strategy is simple_byte
  7573  0AB3  3A00               	xorlw	0	; case 0
  7574  0AB4  1903               	skipnz
  7575  0AB5  2A50               	goto	l8390
  7576  0AB6  3A01               	xorlw	1	; case 1
  7577  0AB7  1903               	skipnz
  7578  0AB8  2AA9               	goto	l8402
  7579  0AB9  3A10               	xorlw	16	; case 17
  7580  0ABA  1903               	skipnz
  7581  0ABB  2AAD               	goto	l8404
  7582  0ABC  3A31               	xorlw	49	; case 32
  7583  0ABD  1903               	skipnz
  7584  0ABE  2A87               	goto	l8400
  7585  0ABF  2AC0               	goto	l2175
  7586  0AC0                     l2175:	
  7587  0AC0  0008               	return
  7588  0AC1                     __end_of_setControl_Lights_Table:	
  7589                           
  7590                           	psect	text29
  7591  13F4                     __ptext29:	
  7592 ;; *************** function _setRFSW_Control *****************
  7593 ;; Defined at:
  7594 ;;		line 378 in file "../src/RF_Control_B1.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;  sw              1    wreg     unsigned char 
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;  sw              1    2[BANK1 ] unsigned char 
  7599 ;;  status          1    1[BANK1 ] unsigned char 
  7600 ;; Return value:  Size  Location     Type
  7601 ;;		None               void
  7602 ;; Registers used:
  7603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;Total ram usage:        3 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:    8
  7616 ;; This function calls:
  7617 ;;		_getDimmerLights_Status
  7618 ;;		_setBuz
  7619 ;;		_setDelayOff_GO
  7620 ;;		_setDimmerLights_SwOff
  7621 ;;		_setDimmerLights_SwOn
  7622 ;;		_setRF_DimmerLights
  7623 ;;		_setTxData
  7624 ;; This function is called by:
  7625 ;;		_setControl_Lights_Table
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           
  7630                           ;psect for function _setRFSW_Control
  7631  13F4                     _setRFSW_Control:	
  7632                           
  7633                           ;incstack = 0
  7634                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7635                           ;setRFSW_Control@sw stored from wreg
  7636  13F4  0021               	movlb	1	; select bank1
  7637  13F5  00E7               	movwf	setRFSW_Control@sw^(0+128)
  7638                           
  7639                           ;RF_Control_B1.c: 379: char status = 0;
  7640  13F6  01E6               	clrf	setRFSW_Control@status^(0+128)
  7641                           
  7642                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7643  13F7  0023               	movlb	3	; select bank3
  7644  13F8  0830               	movf	(_RF_Data^(0+384)+16),w
  7645  13F9  3A80               	xorlw	128
  7646  13FA  1D03               	skipz
  7647  13FB  2C2A               	goto	l8324
  7648                           
  7649                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7650  13FC  0020               	movlb	0	; select bank0
  7651  13FD  01E6               	clrf	setDelayOff_GO@command
  7652  13FE  0AE6               	incf	setDelayOff_GO@command,f
  7653  13FF  0023               	movlb	3	; select bank3
  7654  1400  0831               	movf	(_RF_Data^(0+384)+17),w
  7655  1401  0021               	movlb	1	; select bank1
  7656  1402  00E5               	movwf	??_setRFSW_Control^(0+128)
  7657  1403  0865               	movf	??_setRFSW_Control^(0+128),w
  7658  1404  0020               	movlb	0	; select bank0
  7659  1405  00E7               	movwf	setDelayOff_GO@value
  7660  1406  0021               	movlb	1	; select bank1
  7661  1407  0867               	movf	setRFSW_Control@sw^(0+128),w
  7662  1408  318C  24AC  3193   	fcall	_setDelayOff_GO
  7663                           
  7664                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7665  140B  0021               	movlb	1	; select bank1
  7666  140C  0867               	movf	setRFSW_Control@sw^(0+128),w
  7667  140D  319C  24B8  3193   	fcall	_getDimmerLights_Status
  7668  1410  3A01               	xorlw	1
  7669  1411  1D03               	skipz
  7670  1412  2C2A               	goto	l8324
  7671                           
  7672                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7673  1413  3064               	movlw	100
  7674  1414  0020               	movlb	0	; select bank0
  7675  1415  00AA               	movwf	setBuz@time
  7676  1416  3000               	movlw	0
  7677  1417  00AB               	movwf	setBuz@time+1
  7678  1418  3001               	movlw	1
  7679  1419  3195  25BC  3193   	fcall	_setBuz
  7680                           
  7681                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7682  141C  0020               	movlb	0	; select bank0
  7683  141D  01E6               	clrf	setRF_DimmerLights@on
  7684  141E  0AE6               	incf	setRF_DimmerLights@on,f
  7685  141F  0021               	movlb	1	; select bank1
  7686  1420  0867               	movf	setRFSW_Control@sw^(0+128),w
  7687  1421  3197  2736  3193   	fcall	_setRF_DimmerLights
  7688                           
  7689                           ;RF_Control_B1.c: 386: setTxData();
  7690  1424  318F  2745  3193   	fcall	_setTxData
  7691                           
  7692                           ;RF_Control_B1.c: 387: status = 1;
  7693  1427  0021               	movlb	1	; select bank1
  7694  1428  01E6               	clrf	setRFSW_Control@status^(0+128)
  7695  1429  0AE6               	incf	setRFSW_Control@status^(0+128),f
  7696  142A                     l8324:	
  7697                           
  7698                           ;RF_Control_B1.c: 388: }
  7699                           ;RF_Control_B1.c: 389: }
  7700                           ;RF_Control_B1.c: 391: if (status == 0) {
  7701  142A  0021               	movlb	1	; select bank1
  7702  142B  08E6               	movf	setRFSW_Control@status^(0+128),f
  7703  142C  1D03               	skipz
  7704  142D  0008               	return
  7705                           
  7706                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7707  142E  0867               	movf	setRFSW_Control@sw^(0+128),w
  7708  142F  3191  21F0  3193   	fcall	_setDimmerLights_SwOn
  7709                           
  7710                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7711  1432  0021               	movlb	1	; select bank1
  7712  1433  0867               	movf	setRFSW_Control@sw^(0+128),w
  7713  1434  3192  22C8         	fcall	_setDimmerLights_SwOff
  7714  1436  0008               	return
  7715  1437                     __end_of_setRFSW_Control:	
  7716                           
  7717                           	psect	text30
  7718  0BA5                     __ptext30:	
  7719 ;; *************** function _setRFSW_AdjControl *****************
  7720 ;; Defined at:
  7721 ;;		line 400 in file "../src/RF_Control_B1.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  sw              1    wreg     unsigned char 
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;  sw              1   73[BANK0 ] unsigned char 
  7726 ;;  status          1   72[BANK0 ] unsigned char 
  7727 ;; Return value:  Size  Location     Type
  7728 ;;		None               void
  7729 ;; Registers used:
  7730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7731 ;; Tracked objects:
  7732 ;;		On entry : 0/0
  7733 ;;		On exit  : 0/0
  7734 ;;		Unchanged: 0/0
  7735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;Total ram usage:        4 bytes
  7741 ;; Hardware stack levels used:    1
  7742 ;; Hardware stack levels required when called:    8
  7743 ;; This function calls:
  7744 ;;		_getDimmerLights_PercentToValue
  7745 ;;		_getDimmerLights_Status
  7746 ;;		_setDimmerIntr_Dimming_RF
  7747 ;;		_setDimmerIntr_MaxmumValue
  7748 ;;		_setDimmerLights_DimmingRun
  7749 ;;		_setDimmerLights_SwOff
  7750 ;;		_setDimmerLights_SwOn
  7751 ;;		_setMemory_Modify
  7752 ;;		_setProductData
  7753 ;;		_setTxData
  7754 ;; This function is called by:
  7755 ;;		_setControl_Lights_Table
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           
  7760                           ;psect for function _setRFSW_AdjControl
  7761  0BA5                     _setRFSW_AdjControl:	
  7762                           
  7763                           ;incstack = 0
  7764                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7765                           ;setRFSW_AdjControl@sw stored from wreg
  7766  0BA5  0020               	movlb	0	; select bank0
  7767  0BA6  00E9               	movwf	setRFSW_AdjControl@sw
  7768                           
  7769                           ;RF_Control_B1.c: 401: char status = 0;
  7770  0BA7  01E8               	clrf	setRFSW_AdjControl@status
  7771                           
  7772                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7773  0BA8  0869               	movf	setRFSW_AdjControl@sw,w
  7774  0BA9  319C  24B8  318B   	fcall	_getDimmerLights_Status
  7775  0BAC  0020               	movlb	0	; select bank0
  7776  0BAD  00E6               	movwf	??_setRFSW_AdjControl
  7777  0BAE  0866               	movf	??_setRFSW_AdjControl,w
  7778  0BAF  00E8               	movwf	setRFSW_AdjControl@status
  7779                           
  7780                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7781  0BB0  3065               	movlw	101
  7782  0BB1  0023               	movlb	3	; select bank3
  7783  0BB2  0229               	subwf	(_RF_Data^(0+384)+9),w
  7784  0BB3  1C03               	skipc
  7785  0BB4  2BBC               	goto	l8336
  7786                           
  7787                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7788  0BB5  3064               	movlw	100
  7789  0BB6  0020               	movlb	0	; select bank0
  7790  0BB7  00E6               	movwf	??_setRFSW_AdjControl
  7791  0BB8  0866               	movf	??_setRFSW_AdjControl,w
  7792  0BB9  0023               	movlb	3	; select bank3
  7793  0BBA  00A9               	movwf	(_RF_Data^(0+384)+9)
  7794                           
  7795                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7796  0BBB  2BC1               	goto	l8340
  7797  0BBC                     l8336:	
  7798  0BBC  08A9               	movf	(_RF_Data^(0+384)+9),f
  7799  0BBD  1D03               	skipz
  7800  0BBE  2BC1               	goto	l8340
  7801                           
  7802                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7803  0BBF  01A9               	clrf	(_RF_Data^(0+384)+9)
  7804  0BC0  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7805  0BC1                     l8340:	
  7806                           
  7807                           ;RF_Control_B1.c: 409: }
  7808                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7809  0BC1  0829               	movf	(_RF_Data^(0+384)+9),w
  7810  0BC2  0020               	movlb	0	; select bank0
  7811  0BC3  00E6               	movwf	??_setRFSW_AdjControl
  7812  0BC4  0866               	movf	??_setRFSW_AdjControl,w
  7813  0BC5  00E3               	movwf	setProductData@value
  7814  0BC6  3009               	movlw	9
  7815  0BC7  319C  2411  318B   	fcall	_setProductData
  7816                           
  7817                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7818  0BCA  0020               	movlb	0	; select bank0
  7819  0BCB  0869               	movf	setRFSW_AdjControl@sw,w
  7820  0BCC  00E6               	movwf	??_setRFSW_AdjControl
  7821  0BCD  0866               	movf	??_setRFSW_AdjControl,w
  7822  0BCE  00E3               	movwf	setProductData@value
  7823  0BCF  300B               	movlw	11
  7824  0BD0  319C  2411  318B   	fcall	_setProductData
  7825                           
  7826                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7827  0BD3  0020               	movlb	0	; select bank0
  7828  0BD4  0869               	movf	setRFSW_AdjControl@sw,w
  7829  0BD5  3E1A               	addlw	26
  7830  0BD6  0021               	movlb	1	; select bank1
  7831  0BD7  076D               	addwf	_product^(0+128),w
  7832  0BD8  0020               	movlb	0	; select bank0
  7833  0BD9  00E6               	movwf	??_setRFSW_AdjControl
  7834  0BDA  0866               	movf	??_setRFSW_AdjControl,w
  7835  0BDB  0086               	movwf	6
  7836  0BDC  3002               	movlw	2	; select bank4/5
  7837  0BDD  0087               	movwf	7
  7838  0BDE  0801               	movf	1,w
  7839  0BDF  00E7               	movwf	??_setRFSW_AdjControl+1
  7840  0BE0  0867               	movf	??_setRFSW_AdjControl+1,w
  7841  0BE1  00E3               	movwf	setProductData@value
  7842  0BE2  3011               	movlw	17
  7843  0BE3  319C  2411  318B   	fcall	_setProductData
  7844                           
  7845                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7846  0BE6  0023               	movlb	3	; select bank3
  7847  0BE7  0829               	movf	(_RF_Data^(0+384)+9),w
  7848  0BE8  0020               	movlb	0	; select bank0
  7849  0BE9  00E6               	movwf	??_setRFSW_AdjControl
  7850  0BEA  0866               	movf	??_setRFSW_AdjControl,w
  7851  0BEB  00E3               	movwf	setProductData@value
  7852  0BEC  0869               	movf	setRFSW_AdjControl@sw,w
  7853  0BED  3E14               	addlw	20
  7854  0BEE  319C  2411  318B   	fcall	_setProductData
  7855                           
  7856                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7857  0BF1  3001               	movlw	1
  7858  0BF2  319D  259E  318B   	fcall	_setMemory_Modify
  7859                           
  7860                           ;RF_Control_B1.c: 416: if (status == 1) {
  7861  0BF5  0020               	movlb	0	; select bank0
  7862  0BF6  0868               	movf	setRFSW_AdjControl@status,w
  7863  0BF7  3A01               	xorlw	1
  7864  0BF8  1D03               	skipz
  7865  0BF9  2C11               	goto	l8350
  7866                           
  7867                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7868  0BFA  0023               	movlb	3	; select bank3
  7869  0BFB  0829               	movf	(_RF_Data^(0+384)+9),w
  7870  0BFC  3197  279B  318B   	fcall	_getDimmerLights_PercentToValue
  7871  0BFF  0020               	movlb	0	; select bank0
  7872  0C00  00E6               	movwf	??_setRFSW_AdjControl
  7873  0C01  0866               	movf	??_setRFSW_AdjControl,w
  7874  0C02  00E3               	movwf	setDimmerIntr_MaxmumValue@value
  7875  0C03  0869               	movf	setRFSW_AdjControl@sw,w
  7876  0C04  319C  241D  318B   	fcall	_setDimmerIntr_MaxmumValue
  7877                           
  7878                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7879  0C07  0020               	movlb	0	; select bank0
  7880  0C08  01A1               	clrf	setDimmerIntr_Dimming_RF@command
  7881  0C09  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
  7882  0C0A  0869               	movf	setRFSW_AdjControl@sw,w
  7883  0C0B  319E  2684  318B   	fcall	_setDimmerIntr_Dimming_RF
  7884                           
  7885                           ;RF_Control_B1.c: 419: setTxData();
  7886  0C0E  318F  2745         	fcall	_setTxData
  7887                           
  7888                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7889  0C10  0008               	return
  7890  0C11                     l8350:	
  7891  0C11  0020               	movlb	0	; select bank0
  7892  0C12  08E8               	movf	setRFSW_AdjControl@status,f
  7893  0C13  1D03               	skipz
  7894  0C14  0008               	return
  7895                           
  7896                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7897  0C15  01A3               	clrf	setDimmerLights_DimmingRun@command
  7898  0C16  0AA3               	incf	setDimmerLights_DimmingRun@command,f
  7899  0C17  0869               	movf	setRFSW_AdjControl@sw,w
  7900  0C18  319F  2735  318B   	fcall	_setDimmerLights_DimmingRun
  7901                           
  7902                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7903  0C1B  0020               	movlb	0	; select bank0
  7904  0C1C  0869               	movf	setRFSW_AdjControl@sw,w
  7905  0C1D  3191  21F0  318B   	fcall	_setDimmerLights_SwOn
  7906                           
  7907                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7908  0C20  0020               	movlb	0	; select bank0
  7909  0C21  0869               	movf	setRFSW_AdjControl@sw,w
  7910  0C22  3192  22C8         	fcall	_setDimmerLights_SwOff
  7911  0C24  0008               	return
  7912  0C25                     __end_of_setRFSW_AdjControl:	
  7913                           
  7914                           	psect	text31
  7915  1D9E                     __ptext31:	
  7916 ;; *************** function _setMemory_Modify *****************
  7917 ;; Defined at:
  7918 ;;		line 1070 in file "../src/MCU_B1.c"
  7919 ;; Parameters:    Size  Location     Type
  7920 ;;  command         1    wreg     unsigned char 
  7921 ;; Auto vars:     Size  Location     Type
  7922 ;;  command         1    2[BANK0 ] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;		None               void
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;Total ram usage:        2 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    5
  7939 ;; This function calls:
  7940 ;;		Nothing
  7941 ;; This function is called by:
  7942 ;;		_setLog_Code
  7943 ;;		_setRFSW_AdjControl
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947                           
  7948                           ;psect for function _setMemory_Modify
  7949  1D9E                     _setMemory_Modify:	
  7950                           
  7951                           ;incstack = 0
  7952                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7953                           ;setMemory_Modify@command stored from wreg
  7954  1D9E  0020               	movlb	0	; select bank0
  7955  1D9F  00A2               	movwf	setMemory_Modify@command
  7956                           
  7957                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  7958  1DA0  0822               	movf	setMemory_Modify@command,w
  7959  1DA1  3A01               	xorlw	1
  7960  1DA2  3000               	movlw	0
  7961  1DA3  1903               	skipnz
  7962  1DA4  3001               	movlw	1
  7963  1DA5  00A1               	movwf	??_setMemory_Modify
  7964  1DA6  0023               	movlb	3	; select bank3
  7965  1DA7  0862               	movf	(_Memory^(0+384)+36),w
  7966  1DA8  0020               	movlb	0	; select bank0
  7967  1DA9  0621               	xorwf	??_setMemory_Modify,w
  7968  1DAA  39FE               	andlw	-2
  7969  1DAB  0621               	xorwf	??_setMemory_Modify,w
  7970  1DAC  0023               	movlb	3	; select bank3
  7971  1DAD  00E2               	movwf	(_Memory^(0+384)+36)
  7972                           
  7973                           ;MCU_B1.c: 1072: Memory.Time = 0;
  7974  1DAE  01E0               	clrf	(_Memory^(0+384)+34)
  7975  1DAF  01E1               	clrf	((_Memory+1)^(0+384)+34)
  7976  1DB0  0008               	return
  7977  1DB1                     __end_of_setMemory_Modify:	
  7978                           
  7979                           	psect	text32
  7980  1F35                     __ptext32:	
  7981 ;; *************** function _setDimmerLights_DimmingRun *****************
  7982 ;; Defined at:
  7983 ;;		line 1012 in file "../src/Dimmer_B1.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;  lights          1    wreg     unsigned char 
  7986 ;;  command         1    3[BANK0 ] unsigned char 
  7987 ;; Auto vars:     Size  Location     Type
  7988 ;;  lights          1    5[BANK0 ] unsigned char 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;		None               void
  7991 ;; Registers used:
  7992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7998 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8000 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8001 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;Total ram usage:        3 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    6
  8005 ;; This function calls:
  8006 ;;		_DimmerLights_SelectPointer
  8007 ;; This function is called by:
  8008 ;;		_setRFSW_AdjControl
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           
  8013                           ;psect for function _setDimmerLights_DimmingRun
  8014  1F35                     _setDimmerLights_DimmingRun:	
  8015                           
  8016                           ;incstack = 0
  8017                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8018                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8019  1F35  0020               	movlb	0	; select bank0
  8020  1F36  00A5               	movwf	setDimmerLights_DimmingRun@lights
  8021                           
  8022                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  8023  1F37  0825               	movf	setDimmerLights_DimmingRun@lights,w
  8024  1F38  319C  2405         	fcall	_DimmerLights_SelectPointer
  8025                           
  8026                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8027  1F3A  0020               	movlb	0	; select bank0
  8028  1F3B  0823               	movf	setDimmerLights_DimmingRun@command,w
  8029  1F3C  3A01               	xorlw	1
  8030  1F3D  3000               	movlw	0
  8031  1F3E  1903               	skipnz
  8032  1F3F  3001               	movlw	1
  8033  1F40  00A4               	movwf	??_setDimmerLights_DimmingRun
  8034  1F41  0021               	movlb	1	; select bank1
  8035  1F42  0A4F               	incf	_DimmerLights^(0+128),w
  8036  1F43  0086               	movwf	6
  8037  1F44  3001               	movlw	1	; select bank2/3
  8038  1F45  0087               	movwf	7
  8039  1F46  0020               	movlb	0	; select bank0
  8040  1F47  0EA4               	swapf	??_setDimmerLights_DimmingRun,f
  8041  1F48  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8042  1F49  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8043  1F4A  0801               	movf	1,w
  8044  1F4B  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8045  1F4C  39BF               	andlw	-65
  8046  1F4D  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8047  1F4E  0081               	movwf	1
  8048  1F4F  0008               	return
  8049  1F50                     __end_of_setDimmerLights_DimmingRun:	
  8050                           
  8051                           	psect	text33
  8052  1CFC                     __ptext33:	
  8053 ;; *************** function _getRF_KeyStatus *****************
  8054 ;; Defined at:
  8055 ;;		line 166 in file "../src/RF_Control_B1.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;		None
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  key             1    2[BANK0 ] unsigned char 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  1    wreg      unsigned char 
  8062 ;; Registers used:
  8063 ;;		wreg, status,2
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;Total ram usage:        3 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:    5
  8076 ;; This function calls:
  8077 ;;		Nothing
  8078 ;; This function is called by:
  8079 ;;		_setRF_Main
  8080 ;; This function uses a non-reentrant model
  8081 ;;
  8082                           
  8083                           
  8084                           ;psect for function _getRF_KeyStatus
  8085  1CFC                     _getRF_KeyStatus:	
  8086                           
  8087                           ;RF_Control_B1.c: 167: char key = 0;
  8088                           
  8089                           ;incstack = 0
  8090                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8091  1CFC  0020               	movlb	0	; select bank0
  8092  1CFD  01A2               	clrf	getRF_KeyStatus@key
  8093                           
  8094                           ;RF_Control_B1.c: 177: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RA7 == 1) ? 1 : 0;
  8095  1CFE  01A3               	clrf	_getRF_KeyStatus$5295
  8096  1CFF  0AA3               	incf	_getRF_KeyStatus$5295,f
  8097  1D00  1F0C               	btfss	12,6	;volatile
  8098  1D01  1A0C               	btfsc	12,4	;volatile
  8099  1D02  2D07               	goto	l6850
  8100  1D03  1C0C               	btfss	12,0	;volatile
  8101  1D04  1B8C               	btfsc	12,7	;volatile
  8102  1D05  2D07               	goto	l6850
  8103  1D06  01A3               	clrf	_getRF_KeyStatus$5295
  8104  1D07                     l6850:	
  8105  1D07  0823               	movf	_getRF_KeyStatus$5295,w
  8106  1D08  00A1               	movwf	??_getRF_KeyStatus
  8107  1D09  0821               	movf	??_getRF_KeyStatus,w
  8108  1D0A  00A2               	movwf	getRF_KeyStatus@key
  8109                           
  8110                           ;RF_Control_B1.c: 179: return key;
  8111  1D0B  0822               	movf	getRF_KeyStatus@key,w
  8112  1D0C  0008               	return
  8113  1D0D                     __end_of_getRF_KeyStatus:	
  8114                           
  8115                           	psect	text34
  8116  1CEB                     __ptext34:	
  8117 ;; *************** function _getBuz_GO *****************
  8118 ;; Defined at:
  8119 ;;		line 82 in file "../src/Buzzer_B1.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;		None
  8122 ;; Auto vars:     Size  Location     Type
  8123 ;;  i               2    5[BANK0 ] int 
  8124 ;; Return value:  Size  Location     Type
  8125 ;;                  2    1[BANK0 ] int 
  8126 ;; Registers used:
  8127 ;;		wreg, status,2, status,0
  8128 ;; Tracked objects:
  8129 ;;		On entry : 0/0
  8130 ;;		On exit  : 0/0
  8131 ;;		Unchanged: 0/0
  8132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8133 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;Total ram usage:        6 bytes
  8138 ;; Hardware stack levels used:    1
  8139 ;; Hardware stack levels required when called:    5
  8140 ;; This function calls:
  8141 ;;		Nothing
  8142 ;; This function is called by:
  8143 ;;		_setRF_Main
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           
  8148                           ;psect for function _getBuz_GO
  8149  1CEB                     _getBuz_GO:	
  8150                           
  8151                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8152                           
  8153                           ;incstack = 0
  8154                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8155  1CEB  0021               	movlb	1	; select bank1
  8156  1CEC  0C2E               	rrf	_Buz1^(0+128),w
  8157  1CED  3901               	andlw	1
  8158  1CEE  0020               	movlb	0	; select bank0
  8159  1CEF  00A3               	movwf	??_getBuz_GO
  8160  1CF0  01A4               	clrf	??_getBuz_GO+1
  8161  1CF1  0823               	movf	??_getBuz_GO,w
  8162  1CF2  00A5               	movwf	getBuz_GO@i
  8163  1CF3  0824               	movf	??_getBuz_GO+1,w
  8164  1CF4  00A6               	movwf	getBuz_GO@i+1
  8165                           
  8166                           ;Buzzer_B1.c: 84: return i;
  8167  1CF5  0826               	movf	getBuz_GO@i+1,w
  8168  1CF6  01A2               	clrf	?_getBuz_GO+1
  8169  1CF7  07A2               	addwf	?_getBuz_GO+1,f
  8170  1CF8  0825               	movf	getBuz_GO@i,w
  8171  1CF9  01A1               	clrf	?_getBuz_GO
  8172  1CFA  07A1               	addwf	?_getBuz_GO,f
  8173  1CFB  0008               	return
  8174  1CFC                     __end_of_getBuz_GO:	
  8175                           
  8176                           	psect	text35
  8177  1C99                     __ptext35:	
  8178 ;; *************** function _RF_RxDisable *****************
  8179 ;; Defined at:
  8180 ;;		line 154 in file "../src/RF_Control_B1.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;		None
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;		None
  8185 ;; Return value:  Size  Location     Type
  8186 ;;		None               void
  8187 ;; Registers used:
  8188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;Total ram usage:        0 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; Hardware stack levels required when called:    7
  8201 ;; This function calls:
  8202 ;;		_CC2500_WriteCommand
  8203 ;; This function is called by:
  8204 ;;		_setRF_Main
  8205 ;; This function uses a non-reentrant model
  8206 ;;
  8207                           
  8208                           
  8209                           ;psect for function _RF_RxDisable
  8210  1C99                     _RF_RxDisable:	
  8211                           
  8212                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8213                           
  8214                           ;incstack = 0
  8215                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8216  1C99  0021               	movlb	1	; select bank1
  8217  1C9A  18A0               	btfsc	_RF1^(0+128),1
  8218  1C9B  2C9E               	goto	l2132
  8219  1C9C  1DA0               	btfss	_RF1^(0+128),3
  8220  1C9D  0008               	return
  8221  1C9E                     l2132:	
  8222                           
  8223                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8224  1C9E  11A0               	bcf	_RF1^(0+128),3
  8225                           
  8226                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8227  1C9F  10A0               	bcf	_RF1^(0+128),1
  8228                           
  8229                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8230  1CA0  3036               	movlw	54
  8231  1CA1  319F  271B  319C   	fcall	_CC2500_WriteCommand
  8232                           
  8233                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8234  1CA4  303A               	movlw	58
  8235  1CA5  319F  271B         	fcall	_CC2500_WriteCommand
  8236  1CA7  0008               	return
  8237  1CA8                     __end_of_RF_RxDisable:	
  8238                           
  8239                           	psect	text36
  8240  0905                     __ptext36:	
  8241 ;; *************** function _CC2500_TxData *****************
  8242 ;; Defined at:
  8243 ;;		line 32 in file "../src/CC2500_B1.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;		None
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  loop_e          1    6[BANK0 ] unsigned char 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;		None               void
  8250 ;; Registers used:
  8251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;Total ram usage:        2 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    7
  8264 ;; This function calls:
  8265 ;;		_CC2500_WriteByte
  8266 ;;		_CC2500_WriteCommand
  8267 ;;		_RF_Timeout_Counter
  8268 ;;		_setRF_TimeoutCleared
  8269 ;; This function is called by:
  8270 ;;		_setRF_Main
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           
  8275                           ;psect for function _CC2500_TxData
  8276  0905                     _CC2500_TxData:	
  8277                           
  8278                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8279                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8280                           
  8281                           ;incstack = 0
  8282                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8283  0905  3036               	movlw	54
  8284  0906  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8285                           
  8286                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8287  0909  303B               	movlw	59
  8288  090A  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8289                           
  8290                           ;CC2500_B1.c: 38: RC0 = 0;
  8291  090D  0020               	movlb	0	; select bank0
  8292  090E  100E               	bcf	14,0	;volatile
  8293                           
  8294                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8295  090F  307F               	movlw	127
  8296  0910  00A5               	movwf	??_CC2500_TxData
  8297  0911  0825               	movf	??_CC2500_TxData,w
  8298  0912  0021               	movlb	1	; select bank1
  8299  0913  00D4               	movwf	_SPI0Buffer^(0+128)
  8300                           
  8301                           ;CC2500_B1.c: 40: while (RC5 == 1 && RF1.Timeout == 0) {
  8302  0914  2918               	goto	l6558
  8303  0915                     l6556:	
  8304                           
  8305                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8306  0915  319D  25EB  3189   	fcall	_RF_Timeout_Counter
  8307  0918                     l6558:	
  8308  0918  0020               	movlb	0	; select bank0
  8309  0919  1E8E               	btfss	14,5	;volatile
  8310  091A  291E               	goto	l6562
  8311  091B  0021               	movlb	1	; select bank1
  8312  091C  1F21               	btfss	(_RF1^(0+128)+1),6
  8313  091D  2915               	goto	l6556
  8314  091E                     l6562:	
  8315                           
  8316                           ;CC2500_B1.c: 42: };
  8317                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8318  091E  319B  234B  3189   	fcall	_setRF_TimeoutCleared
  8319                           
  8320                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8321  0921  319E  26CE  3189   	fcall	_CC2500_WriteByte
  8322                           
  8323                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8324  0924  0021               	movlb	1	; select bank1
  8325  0925  0857               	movf	_Tx_Length^(0+128),w
  8326  0926  0020               	movlb	0	; select bank0
  8327  0927  00A5               	movwf	??_CC2500_TxData
  8328  0928  0825               	movf	??_CC2500_TxData,w
  8329  0929  0021               	movlb	1	; select bank1
  8330  092A  00D4               	movwf	_SPI0Buffer^(0+128)
  8331                           
  8332                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8333  092B  319E  26CE  3189   	fcall	_CC2500_WriteByte
  8334                           
  8335                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8336  092E  0020               	movlb	0	; select bank0
  8337  092F  01A6               	clrf	CC2500_TxData@loop_e
  8338  0930                     l6576:	
  8339  0930  0021               	movlb	1	; select bank1
  8340  0931  0857               	movf	_Tx_Length^(0+128),w
  8341  0932  0020               	movlb	0	; select bank0
  8342  0933  0226               	subwf	CC2500_TxData@loop_e,w
  8343  0934  1803               	btfsc	3,0
  8344  0935  2949               	goto	l235
  8345                           
  8346                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8347  0936  0826               	movf	CC2500_TxData@loop_e,w
  8348  0937  3EA0               	addlw	_RF_Data& (0+255)
  8349  0938  0086               	movwf	6
  8350  0939  3001               	movlw	1	; select bank3/4
  8351  093A  0087               	movwf	7
  8352  093B  0801               	movf	1,w
  8353  093C  00A5               	movwf	??_CC2500_TxData
  8354  093D  0825               	movf	??_CC2500_TxData,w
  8355  093E  0021               	movlb	1	; select bank1
  8356  093F  00D4               	movwf	_SPI0Buffer^(0+128)
  8357                           
  8358                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8359  0940  319E  26CE  3189   	fcall	_CC2500_WriteByte
  8360  0943  3001               	movlw	1
  8361  0944  0020               	movlb	0	; select bank0
  8362  0945  00A5               	movwf	??_CC2500_TxData
  8363  0946  0825               	movf	??_CC2500_TxData,w
  8364  0947  07A6               	addwf	CC2500_TxData@loop_e,f
  8365  0948  2930               	goto	l6576
  8366  0949                     l235:	
  8367                           
  8368                           ;CC2500_B1.c: 51: }
  8369                           ;CC2500_B1.c: 52: RC0 = 1;
  8370  0949  140E               	bsf	14,0	;volatile
  8371                           
  8372                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8373  094A  3035               	movlw	53
  8374  094B  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8375                           
  8376                           ;CC2500_B1.c: 54: while (RC1 == 0 && RF1.Timeout == 0) {
  8377  094E  2952               	goto	l6582
  8378  094F                     l6580:	
  8379                           
  8380                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8381  094F  319D  25EB  3189   	fcall	_RF_Timeout_Counter
  8382  0952                     l6582:	
  8383  0952  0020               	movlb	0	; select bank0
  8384  0953  188E               	btfsc	14,1	;volatile
  8385  0954  2958               	goto	l6586
  8386  0955  0021               	movlb	1	; select bank1
  8387  0956  1F21               	btfss	(_RF1^(0+128)+1),6
  8388  0957  294F               	goto	l6580
  8389  0958                     l6586:	
  8390                           
  8391                           ;CC2500_B1.c: 56: };
  8392                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8393  0958  319B  234B  3189   	fcall	_setRF_TimeoutCleared
  8394                           
  8395                           ;CC2500_B1.c: 59: while (RC1 == 1 && RF1.Timeout == 0) {
  8396  095B  295F               	goto	l6590
  8397  095C                     l6588:	
  8398                           
  8399                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8400  095C  319D  25EB  3189   	fcall	_RF_Timeout_Counter
  8401  095F                     l6590:	
  8402  095F  0020               	movlb	0	; select bank0
  8403  0960  1C8E               	btfss	14,1	;volatile
  8404  0961  2965               	goto	l6594
  8405  0962  0021               	movlb	1	; select bank1
  8406  0963  1F21               	btfss	(_RF1^(0+128)+1),6
  8407  0964  295C               	goto	l6588
  8408  0965                     l6594:	
  8409                           
  8410                           ;CC2500_B1.c: 61: };
  8411                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8412  0965  319B  234B  3189   	fcall	_setRF_TimeoutCleared
  8413                           
  8414                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8415  0968  3036               	movlw	54
  8416  0969  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8417                           
  8418                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8419  096C  303B               	movlw	59
  8420  096D  319F  271B         	fcall	_CC2500_WriteCommand
  8421                           
  8422                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8423  096F  0020               	movlb	0	; select bank0
  8424  0970  14EE               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8425  0971  0008               	return
  8426  0972                     __end_of_CC2500_TxData:	
  8427                           
  8428                           	psect	text37
  8429  0972                     __ptext37:	
  8430 ;; *************** function _CC2500_RxData *****************
  8431 ;; Defined at:
  8432 ;;		line 73 in file "../src/CC2500_B1.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  loop_f          1    6[BANK0 ] unsigned char 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;		None               void
  8439 ;; Registers used:
  8440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;Total ram usage:        2 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; Hardware stack levels required when called:    7
  8453 ;; This function calls:
  8454 ;;		_CC2500_ReadByte
  8455 ;;		_CC2500_ReadStatus
  8456 ;;		_CC2500_WriteByte
  8457 ;;		_CC2500_WriteCommand
  8458 ;;		_RF_Timeout_Counter
  8459 ;;		_setRF_TimeoutCleared
  8460 ;; This function is called by:
  8461 ;;		_setRF_Main
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           
  8466                           ;psect for function _CC2500_RxData
  8467  0972                     _CC2500_RxData:	
  8468                           
  8469                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8470                           ;CC2500_B1.c: 78: if (RC1 == 0) {
  8471                           
  8472                           ;incstack = 0
  8473                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8474  0972  0020               	movlb	0	; select bank0
  8475  0973  188E               	btfsc	14,1	;volatile
  8476  0974  0008               	return
  8477                           
  8478                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8479  0975  303B               	movlw	59
  8480  0976  3190  20F1  3189   	fcall	_CC2500_ReadStatus
  8481                           
  8482                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8483  0979  0021               	movlb	1	; select bank1
  8484  097A  085A               	movf	_s_data^(0+128),w
  8485  097B  1903               	btfsc	3,2
  8486  097C  0008               	return
  8487                           
  8488                           ;CC2500_B1.c: 90: RC0 = 0;
  8489  097D  0020               	movlb	0	; select bank0
  8490  097E  100E               	bcf	14,0	;volatile
  8491                           
  8492                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8493  097F  30FF               	movlw	255
  8494  0980  00A5               	movwf	??_CC2500_RxData
  8495  0981  0825               	movf	??_CC2500_RxData,w
  8496  0982  0021               	movlb	1	; select bank1
  8497  0983  00D4               	movwf	_SPI0Buffer^(0+128)
  8498                           
  8499                           ;CC2500_B1.c: 93: while (RC5 == 1 && RF1.Timeout == 0) {
  8500  0984  2988               	goto	l6614
  8501  0985                     l6612:	
  8502                           
  8503                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8504  0985  319D  25EB  3189   	fcall	_RF_Timeout_Counter
  8505  0988                     l6614:	
  8506  0988  0020               	movlb	0	; select bank0
  8507  0989  1E8E               	btfss	14,5	;volatile
  8508  098A  298E               	goto	l6618
  8509  098B  0021               	movlb	1	; select bank1
  8510  098C  1F21               	btfss	(_RF1^(0+128)+1),6
  8511  098D  2985               	goto	l6612
  8512  098E                     l6618:	
  8513                           
  8514                           ;CC2500_B1.c: 95: };
  8515                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8516  098E  319B  234B  3189   	fcall	_setRF_TimeoutCleared
  8517                           
  8518                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8519  0991  319E  26CE  3189   	fcall	_CC2500_WriteByte
  8520                           
  8521                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8522  0994  319F  2788  3189   	fcall	_CC2500_ReadByte
  8523                           
  8524                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8525  0997  0021               	movlb	1	; select bank1
  8526  0998  0854               	movf	_SPI0Buffer^(0+128),w
  8527  0999  0020               	movlb	0	; select bank0
  8528  099A  00A5               	movwf	??_CC2500_RxData
  8529  099B  0825               	movf	??_CC2500_RxData,w
  8530  099C  0021               	movlb	1	; select bank1
  8531  099D  00D3               	movwf	_Rx_Length^(0+128)
  8532                           
  8533                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8534  099E  0020               	movlb	0	; select bank0
  8535  099F  01A6               	clrf	CC2500_RxData@loop_f
  8536  09A0                     l6634:	
  8537  09A0  0021               	movlb	1	; select bank1
  8538  09A1  0853               	movf	_Rx_Length^(0+128),w
  8539  09A2  0020               	movlb	0	; select bank0
  8540  09A3  0226               	subwf	CC2500_RxData@loop_f,w
  8541  09A4  1803               	btfsc	3,0
  8542  09A5  29B9               	goto	l6636
  8543                           
  8544                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8545  09A6  319F  2788  3189   	fcall	_CC2500_ReadByte
  8546                           
  8547                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8548  09A9  0021               	movlb	1	; select bank1
  8549  09AA  0854               	movf	_SPI0Buffer^(0+128),w
  8550  09AB  0020               	movlb	0	; select bank0
  8551  09AC  00A5               	movwf	??_CC2500_RxData
  8552  09AD  0826               	movf	CC2500_RxData@loop_f,w
  8553  09AE  3EA0               	addlw	_RF_Data& (0+255)
  8554  09AF  0086               	movwf	6
  8555  09B0  3001               	movlw	1	; select bank3/4
  8556  09B1  0087               	movwf	7
  8557  09B2  0825               	movf	??_CC2500_RxData,w
  8558  09B3  0081               	movwf	1
  8559  09B4  3001               	movlw	1
  8560  09B5  00A5               	movwf	??_CC2500_RxData
  8561  09B6  0825               	movf	??_CC2500_RxData,w
  8562  09B7  07A6               	addwf	CC2500_RxData@loop_f,f
  8563  09B8  29A0               	goto	l6634
  8564  09B9                     l6636:	
  8565                           
  8566                           ;CC2500_B1.c: 104: }
  8567                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8568  09B9  319F  2788  3189   	fcall	_CC2500_ReadByte
  8569                           
  8570                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8571  09BC  0021               	movlb	1	; select bank1
  8572  09BD  0854               	movf	_SPI0Buffer^(0+128),w
  8573  09BE  0020               	movlb	0	; select bank0
  8574  09BF  00A5               	movwf	??_CC2500_RxData
  8575  09C0  0825               	movf	??_CC2500_RxData,w
  8576  09C1  0021               	movlb	1	; select bank1
  8577  09C2  00D2               	movwf	_RSSI^(0+128)
  8578                           
  8579                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8580  09C3  319F  2788  3189   	fcall	_CC2500_ReadByte
  8581                           
  8582                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8583  09C6  0021               	movlb	1	; select bank1
  8584  09C7  0854               	movf	_SPI0Buffer^(0+128),w
  8585  09C8  0020               	movlb	0	; select bank0
  8586  09C9  00A5               	movwf	??_CC2500_RxData
  8587  09CA  0825               	movf	??_CC2500_RxData,w
  8588  09CB  0021               	movlb	1	; select bank1
  8589  09CC  00CB               	movwf	_CRC^(0+128)
  8590                           
  8591                           ;CC2500_B1.c: 109: RC0 = 1;
  8592  09CD  0020               	movlb	0	; select bank0
  8593  09CE  140E               	bsf	14,0	;volatile
  8594                           
  8595                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8596  09CF  0021               	movlb	1	; select bank1
  8597  09D0  1FCB               	btfss	_CRC^(0+128),7
  8598  09D1  29D4               	goto	l259
  8599                           
  8600                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8601  09D2  0020               	movlb	0	; select bank0
  8602  09D3  146E               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8603  09D4                     l259:	
  8604                           
  8605                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8606  09D4  0021               	movlb	1	; select bank1
  8607  09D5  11A0               	bcf	_RF1^(0+128),3
  8608                           
  8609                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8610  09D6  14A0               	bsf	_RF1^(0+128),1
  8611                           
  8612                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8613  09D7  3036               	movlw	54
  8614  09D8  319F  271B  3189   	fcall	_CC2500_WriteCommand
  8615                           
  8616                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8617  09DB  303A               	movlw	58
  8618  09DC  319F  271B         	fcall	_CC2500_WriteCommand
  8619  09DE  0021               	movlb	1	; select bank1
  8620  09DF  0008               	return
  8621  09E0                     __end_of_CC2500_RxData:	
  8622                           
  8623                           	psect	text38
  8624  10F1                     __ptext38:	
  8625 ;; *************** function _CC2500_ReadStatus *****************
  8626 ;; Defined at:
  8627 ;;		line 308 in file "../src/CC2500_B1.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;  status_addr     1    wreg     unsigned char 
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;  status_addr     1    4[BANK0 ] unsigned char 
  8632 ;; Return value:  Size  Location     Type
  8633 ;;		None               void
  8634 ;; Registers used:
  8635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8636 ;; Tracked objects:
  8637 ;;		On entry : 0/0
  8638 ;;		On exit  : 0/0
  8639 ;;		Unchanged: 0/0
  8640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8644 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;Total ram usage:        2 bytes
  8646 ;; Hardware stack levels used:    1
  8647 ;; Hardware stack levels required when called:    6
  8648 ;; This function calls:
  8649 ;;		_CC2500_ReadByte
  8650 ;;		_CC2500_WriteByte
  8651 ;;		_RF_Timeout_Counter
  8652 ;;		_setRF_TimeoutCleared
  8653 ;; This function is called by:
  8654 ;;		_CC2500_RxData
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _CC2500_ReadStatus
  8660  10F1                     _CC2500_ReadStatus:	
  8661                           
  8662                           ;incstack = 0
  8663                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8664                           ;CC2500_ReadStatus@status_addr stored from wreg
  8665  10F1  0020               	movlb	0	; select bank0
  8666  10F2  00A4               	movwf	CC2500_ReadStatus@status_addr
  8667                           
  8668                           ;CC2500_B1.c: 309: RC0 = 0;
  8669  10F3  100E               	bcf	14,0	;volatile
  8670                           
  8671                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8672  10F4  0824               	movf	CC2500_ReadStatus@status_addr,w
  8673  10F5  3EC0               	addlw	192
  8674  10F6  00A3               	movwf	??_CC2500_ReadStatus
  8675  10F7  0823               	movf	??_CC2500_ReadStatus,w
  8676  10F8  0021               	movlb	1	; select bank1
  8677  10F9  00D4               	movwf	_SPI0Buffer^(0+128)
  8678                           
  8679                           ;CC2500_B1.c: 312: while (RC5 == 1 && RF1.Timeout == 0) {
  8680  10FA  28FE               	goto	l6280
  8681  10FB                     l6278:	
  8682                           
  8683                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8684  10FB  319D  25EB  3190   	fcall	_RF_Timeout_Counter
  8685  10FE                     l6280:	
  8686  10FE  0020               	movlb	0	; select bank0
  8687  10FF  1E8E               	btfss	14,5	;volatile
  8688  1100  2904               	goto	l6284
  8689  1101  0021               	movlb	1	; select bank1
  8690  1102  1F21               	btfss	(_RF1^(0+128)+1),6
  8691  1103  28FB               	goto	l6278
  8692  1104                     l6284:	
  8693                           
  8694                           ;CC2500_B1.c: 314: };
  8695                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8696  1104  319B  234B  3190   	fcall	_setRF_TimeoutCleared
  8697                           
  8698                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8699  1107  319E  26CE  3190   	fcall	_CC2500_WriteByte
  8700                           
  8701                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8702  110A  319F  2788         	fcall	_CC2500_ReadByte
  8703                           
  8704                           ;CC2500_B1.c: 319: RC0 = 1;
  8705  110C  0020               	movlb	0	; select bank0
  8706  110D  140E               	bsf	14,0	;volatile
  8707                           
  8708                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8709  110E  0021               	movlb	1	; select bank1
  8710  110F  0854               	movf	_SPI0Buffer^(0+128),w
  8711  1110  0020               	movlb	0	; select bank0
  8712  1111  00A3               	movwf	??_CC2500_ReadStatus
  8713  1112  0823               	movf	??_CC2500_ReadStatus,w
  8714  1113  0021               	movlb	1	; select bank1
  8715  1114  00DA               	movwf	_s_data^(0+128)
  8716  1115  0008               	return
  8717  1116                     __end_of_CC2500_ReadStatus:	
  8718                           
  8719                           	psect	text39
  8720  1F88                     __ptext39:	
  8721 ;; *************** function _CC2500_ReadByte *****************
  8722 ;; Defined at:
  8723 ;;		line 242 in file "../src/CC2500_B1.c"
  8724 ;; Parameters:    Size  Location     Type
  8725 ;;		None
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  loop_b          1    2[BANK0 ] unsigned char 
  8728 ;; Return value:  Size  Location     Type
  8729 ;;		None               void
  8730 ;; Registers used:
  8731 ;;		wreg, status,2, status,0
  8732 ;; Tracked objects:
  8733 ;;		On entry : 0/0
  8734 ;;		On exit  : 0/0
  8735 ;;		Unchanged: 0/0
  8736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;Total ram usage:        2 bytes
  8742 ;; Hardware stack levels used:    1
  8743 ;; Hardware stack levels required when called:    5
  8744 ;; This function calls:
  8745 ;;		Nothing
  8746 ;; This function is called by:
  8747 ;;		_CC2500_RxData
  8748 ;;		_CC2500_ReadStatus
  8749 ;;		_CC2500_ReadREG
  8750 ;; This function uses a non-reentrant model
  8751 ;;
  8752                           
  8753                           
  8754                           ;psect for function _CC2500_ReadByte
  8755  1F88                     _CC2500_ReadByte:	
  8756                           
  8757                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8758                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8759                           
  8760                           ;incstack = 0
  8761                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8762  1F88  0020               	movlb	0	; select bank0
  8763  1F89  01A2               	clrf	CC2500_ReadByte@loop_b
  8764  1F8A                     L2:	
  8765  1F8A  3008               	movlw	8
  8766  1F8B  0222               	subwf	CC2500_ReadByte@loop_b,w
  8767  1F8C  1803               	btfsc	3,0
  8768  1F8D  0008               	return
  8769                           
  8770                           ;CC2500_B1.c: 245: RC3 = 1;
  8771  1F8E  158E               	bsf	14,3	;volatile
  8772                           
  8773                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8774  1F8F  1003               	clrc
  8775  1F90  0021               	movlb	1	; select bank1
  8776  1F91  0DD4               	rlf	_SPI0Buffer^(0+128),f
  8777                           
  8778                           ;CC2500_B1.c: 247: if (RC5 == 1)
  8779  1F92  0020               	movlb	0	; select bank0
  8780  1F93  1E8E               	btfss	14,5	;volatile
  8781  1F94  2F98               	goto	l6174
  8782                           
  8783                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8784  1F95  0021               	movlb	1	; select bank1
  8785  1F96  1454               	bsf	_SPI0Buffer^(0+128),0
  8786  1F97  2F9E               	goto	l6176
  8787  1F98                     l6174:	
  8788                           
  8789                           ;CC2500_B1.c: 249: else
  8790                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8791  1F98  30FE               	movlw	254
  8792  1F99  0020               	movlb	0	; select bank0
  8793  1F9A  00A1               	movwf	??_CC2500_ReadByte
  8794  1F9B  0821               	movf	??_CC2500_ReadByte,w
  8795  1F9C  0021               	movlb	1	; select bank1
  8796  1F9D  05D4               	andwf	_SPI0Buffer^(0+128),f
  8797  1F9E                     l6176:	
  8798                           
  8799                           ;CC2500_B1.c: 251: RC3 = 0;
  8800  1F9E  0020               	movlb	0	; select bank0
  8801  1F9F  118E               	bcf	14,3	;volatile
  8802  1FA0  3001               	movlw	1
  8803  1FA1  00A1               	movwf	??_CC2500_ReadByte
  8804  1FA2  0821               	movf	??_CC2500_ReadByte,w
  8805  1FA3  07A2               	addwf	CC2500_ReadByte@loop_b,f
  8806  1FA4  2F8A               	goto	L2
  8807  1FA5                     __end_of_CC2500_ReadByte:	
  8808                           
  8809                           	psect	text40
  8810  1E00                     __ptext40:	
  8811 ;; *************** function _CC2500_PowerOnInitial *****************
  8812 ;; Defined at:
  8813 ;;		line 126 in file "../src/CC2500_B1.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;		None
  8816 ;; Auto vars:     Size  Location     Type
  8817 ;;		None
  8818 ;; Return value:  Size  Location     Type
  8819 ;;		None               void
  8820 ;; Registers used:
  8821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8822 ;; Tracked objects:
  8823 ;;		On entry : 0/0
  8824 ;;		On exit  : 0/0
  8825 ;;		Unchanged: 0/0
  8826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8831 ;;Total ram usage:        0 bytes
  8832 ;; Hardware stack levels used:    1
  8833 ;; Hardware stack levels required when called:    8
  8834 ;; This function calls:
  8835 ;;		_CC2500_ClearRXFIFO
  8836 ;;		_CC2500_ClearTXFIFO
  8837 ;;		_CC2500_FrequencyCabr
  8838 ;;		_CC2500_InitPATable
  8839 ;;		_CC2500_InitSetREG
  8840 ;;		_CC2500_PowerRST
  8841 ;;		_CC2500_SIDLEMode
  8842 ;; This function is called by:
  8843 ;;		_main
  8844 ;;		_setRF_Main
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           
  8849                           ;psect for function _CC2500_PowerOnInitial
  8850  1E00                     _CC2500_PowerOnInitial:	
  8851                           
  8852                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8853                           
  8854                           ;incstack = 0
  8855                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8856  1E00  3194  2437  319E   	fcall	_CC2500_PowerRST
  8857                           
  8858                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8859  1E03  3191  2164  319E   	fcall	_CC2500_InitSetREG
  8860                           
  8861                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8862  1E06  319F  27E1  319E   	fcall	_CC2500_InitPATable
  8863                           
  8864                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8865  1E09  319B  2353  319E   	fcall	_CC2500_ClearTXFIFO
  8866                           
  8867                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8868  1E0C  319B  234F  319E   	fcall	_CC2500_ClearRXFIFO
  8869                           
  8870                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8871  1E0F  319C  2465  319E   	fcall	_CC2500_FrequencyCabr
  8872                           
  8873                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8874  1E12  319B  2357         	fcall	_CC2500_SIDLEMode
  8875  1E14  0008               	return
  8876  1E15                     __end_of_CC2500_PowerOnInitial:	
  8877                           
  8878                           	psect	text41
  8879  1B57                     __ptext41:	
  8880 ;; *************** function _CC2500_SIDLEMode *****************
  8881 ;; Defined at:
  8882 ;;		line 216 in file "../src/CC2500_B1.c"
  8883 ;; Parameters:    Size  Location     Type
  8884 ;;		None
  8885 ;; Auto vars:     Size  Location     Type
  8886 ;;		None
  8887 ;; Return value:  Size  Location     Type
  8888 ;;		None               void
  8889 ;; Registers used:
  8890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8891 ;; Tracked objects:
  8892 ;;		On entry : 0/0
  8893 ;;		On exit  : 0/0
  8894 ;;		Unchanged: 0/0
  8895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;Total ram usage:        0 bytes
  8901 ;; Hardware stack levels used:    1
  8902 ;; Hardware stack levels required when called:    7
  8903 ;; This function calls:
  8904 ;;		_CC2500_WriteCommand
  8905 ;; This function is called by:
  8906 ;;		_CC2500_PowerOnInitial
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           
  8911                           ;psect for function _CC2500_SIDLEMode
  8912  1B57                     _CC2500_SIDLEMode:	
  8913                           
  8914                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8915                           
  8916                           ;incstack = 0
  8917                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8918  1B57  3036               	movlw	54
  8919  1B58  319F  271B         	fcall	_CC2500_WriteCommand
  8920  1B5A  0008               	return
  8921  1B5B                     __end_of_CC2500_SIDLEMode:	
  8922                           
  8923                           	psect	text42
  8924  1437                     __ptext42:	
  8925 ;; *************** function _CC2500_PowerRST *****************
  8926 ;; Defined at:
  8927 ;;		line 139 in file "../src/CC2500_B1.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;		None
  8930 ;; Auto vars:     Size  Location     Type
  8931 ;;		None
  8932 ;; Return value:  Size  Location     Type
  8933 ;;		None               void
  8934 ;; Registers used:
  8935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;Total ram usage:        1 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    6
  8948 ;; This function calls:
  8949 ;;		_CC2500_WriteByte
  8950 ;;		_DelayTime_1us
  8951 ;;		_RF_Timeout_Counter
  8952 ;;		_setRF_TimeoutCleared
  8953 ;; This function is called by:
  8954 ;;		_CC2500_PowerOnInitial
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _CC2500_PowerRST
  8960  1437                     _CC2500_PowerRST:	
  8961                           
  8962                           ;CC2500_B1.c: 140: RC3 = 0;
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8966  1437  0020               	movlb	0	; select bank0
  8967  1438  118E               	bcf	14,3	;volatile
  8968                           
  8969                           ;CC2500_B1.c: 141: RC4 = 0;
  8970  1439  120E               	bcf	14,4	;volatile
  8971                           
  8972                           ;CC2500_B1.c: 142: RC0 = 1;
  8973  143A  140E               	bsf	14,0	;volatile
  8974                           
  8975                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8976  143B  300A               	movlw	10
  8977  143C  00A1               	movwf	DelayTime_1us@count
  8978  143D  3000               	movlw	0
  8979  143E  00A2               	movwf	DelayTime_1us@count+1
  8980  143F  3191  2116  3194   	fcall	_DelayTime_1us
  8981                           
  8982                           ;CC2500_B1.c: 144: RC0 = 0;
  8983  1442  0020               	movlb	0	; select bank0
  8984  1443  100E               	bcf	14,0	;volatile
  8985                           
  8986                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8987  1444  300A               	movlw	10
  8988  1445  00A1               	movwf	DelayTime_1us@count
  8989  1446  3000               	movlw	0
  8990  1447  00A2               	movwf	DelayTime_1us@count+1
  8991  1448  3191  2116  3194   	fcall	_DelayTime_1us
  8992                           
  8993                           ;CC2500_B1.c: 146: RC0 = 1;
  8994  144B  0020               	movlb	0	; select bank0
  8995  144C  140E               	bsf	14,0	;volatile
  8996                           
  8997                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8998  144D  3028               	movlw	40
  8999  144E  00A1               	movwf	DelayTime_1us@count
  9000  144F  3000               	movlw	0
  9001  1450  00A2               	movwf	DelayTime_1us@count+1
  9002  1451  3191  2116  3194   	fcall	_DelayTime_1us
  9003                           
  9004                           ;CC2500_B1.c: 148: RC0 = 0;
  9005  1454  0020               	movlb	0	; select bank0
  9006  1455  100E               	bcf	14,0	;volatile
  9007                           
  9008                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9009  1456  3030               	movlw	48
  9010  1457  00A7               	movwf	??_CC2500_PowerRST
  9011  1458  0827               	movf	??_CC2500_PowerRST,w
  9012  1459  0021               	movlb	1	; select bank1
  9013  145A  00D4               	movwf	_SPI0Buffer^(0+128)
  9014                           
  9015                           ;CC2500_B1.c: 150: while (RC5 == 1 && RF1.Timeout == 0) {
  9016  145B  2C5F               	goto	l6308
  9017  145C                     l6306:	
  9018                           
  9019                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9020  145C  319D  25EB  3194   	fcall	_RF_Timeout_Counter
  9021  145F                     l6308:	
  9022  145F  0020               	movlb	0	; select bank0
  9023  1460  1E8E               	btfss	14,5	;volatile
  9024  1461  2C65               	goto	l6312
  9025  1462  0021               	movlb	1	; select bank1
  9026  1463  1F21               	btfss	(_RF1^(0+128)+1),6
  9027  1464  2C5C               	goto	l6306
  9028  1465                     l6312:	
  9029                           
  9030                           ;CC2500_B1.c: 152: };
  9031                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9032  1465  319B  234B  3194   	fcall	_setRF_TimeoutCleared
  9033                           
  9034                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9035  1468  319E  26CE  3194   	fcall	_CC2500_WriteByte
  9036                           
  9037                           ;CC2500_B1.c: 155: while (RC5 == 1 && RF1.Timeout == 0) {
  9038  146B  2C6F               	goto	l6318
  9039  146C                     l6316:	
  9040                           
  9041                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9042  146C  319D  25EB  3194   	fcall	_RF_Timeout_Counter
  9043  146F                     l6318:	
  9044  146F  0020               	movlb	0	; select bank0
  9045  1470  1E8E               	btfss	14,5	;volatile
  9046  1471  2C75               	goto	l6322
  9047  1472  0021               	movlb	1	; select bank1
  9048  1473  1F21               	btfss	(_RF1^(0+128)+1),6
  9049  1474  2C6C               	goto	l6316
  9050  1475                     l6322:	
  9051                           
  9052                           ;CC2500_B1.c: 157: };
  9053                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9054  1475  319B  234B         	fcall	_setRF_TimeoutCleared
  9055                           
  9056                           ;CC2500_B1.c: 159: RC4 = 0;
  9057  1477  0020               	movlb	0	; select bank0
  9058  1478  120E               	bcf	14,4	;volatile
  9059                           
  9060                           ;CC2500_B1.c: 160: RC0 = 1;
  9061  1479  140E               	bsf	14,0	;volatile
  9062  147A  0008               	return
  9063  147B                     __end_of_CC2500_PowerRST:	
  9064                           
  9065                           	psect	text43
  9066  1164                     __ptext43:	
  9067 ;; *************** function _CC2500_InitSetREG *****************
  9068 ;; Defined at:
  9069 ;;		line 166 in file "../src/CC2500_B1.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;		None
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  loop_c          1    9[BANK0 ] unsigned char 
  9074 ;;  temp2           1    8[BANK0 ] unsigned char 
  9075 ;;  temp1           1    7[BANK0 ] unsigned char 
  9076 ;; Return value:  Size  Location     Type
  9077 ;;		None               void
  9078 ;; Registers used:
  9079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9088 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9089 ;;Total ram usage:        4 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; Hardware stack levels required when called:    7
  9092 ;; This function calls:
  9093 ;;		_CC2500_WriteREG
  9094 ;; This function is called by:
  9095 ;;		_CC2500_PowerOnInitial
  9096 ;; This function uses a non-reentrant model
  9097 ;;
  9098                           
  9099                           
  9100                           ;psect for function _CC2500_InitSetREG
  9101  1164                     _CC2500_InitSetREG:	
  9102                           
  9103                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9104                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9105                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9106                           
  9107                           ;incstack = 0
  9108                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9109  1164  0020               	movlb	0	; select bank0
  9110  1165  01A9               	clrf	CC2500_InitSetREG@loop_c
  9111  1166                     L3:	
  9112  1166  302F               	movlw	47
  9113  1167  0229               	subwf	CC2500_InitSetREG@loop_c,w
  9114  1168  1803               	btfsc	3,0
  9115  1169  0008               	return
  9116                           
  9117                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9118  116A  0829               	movf	CC2500_InitSetREG@loop_c,w
  9119  116B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9120  116C  0084               	movwf	4
  9121  116D  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9122  116E  1803               	skipnc
  9123  116F  3E01               	addlw	1
  9124  1170  0085               	movwf	5
  9125  1171  0800               	movf	0,w	;code access
  9126  1172  00A6               	movwf	??_CC2500_InitSetREG
  9127  1173  0826               	movf	??_CC2500_InitSetREG,w
  9128  1174  00A7               	movwf	CC2500_InitSetREG@temp1
  9129                           
  9130                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9131  1175  0829               	movf	CC2500_InitSetREG@loop_c,w
  9132  1176  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9133  1177  0084               	movwf	4
  9134  1178  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9135  1179  1803               	skipnc
  9136  117A  3E01               	addlw	1
  9137  117B  0085               	movwf	5
  9138  117C  0800               	movf	0,w	;code access
  9139  117D  00A6               	movwf	??_CC2500_InitSetREG
  9140  117E  0826               	movf	??_CC2500_InitSetREG,w
  9141  117F  00A8               	movwf	CC2500_InitSetREG@temp2
  9142                           
  9143                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9144  1180  0828               	movf	CC2500_InitSetREG@temp2,w
  9145  1181  00A6               	movwf	??_CC2500_InitSetREG
  9146  1182  0826               	movf	??_CC2500_InitSetREG,w
  9147  1183  00A3               	movwf	CC2500_WriteREG@value
  9148  1184  0827               	movf	CC2500_InitSetREG@temp1,w
  9149  1185  3190  20CE  3191   	fcall	_CC2500_WriteREG
  9150  1188  3001               	movlw	1
  9151  1189  0020               	movlb	0	; select bank0
  9152  118A  00A6               	movwf	??_CC2500_InitSetREG
  9153  118B  0826               	movf	??_CC2500_InitSetREG,w
  9154  118C  07A9               	addwf	CC2500_InitSetREG@loop_c,f
  9155  118D  2966               	goto	L3
  9156  118E                     __end_of_CC2500_InitSetREG:	
  9157                           
  9158                           	psect	text44
  9159  1FE1                     __ptext44:	
  9160 ;; *************** function _CC2500_InitPATable *****************
  9161 ;; Defined at:
  9162 ;;		line 181 in file "../src/CC2500_B1.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  loop_d          1    8[BANK0 ] unsigned char 
  9167 ;;  temp            1    7[BANK0 ] unsigned char 
  9168 ;; Return value:  Size  Location     Type
  9169 ;;		None               void
  9170 ;; Registers used:
  9171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/0
  9174 ;;		On exit  : 0/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9181 ;;Total ram usage:        3 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:    7
  9184 ;; This function calls:
  9185 ;;		_CC2500_WriteREG
  9186 ;; This function is called by:
  9187 ;;		_CC2500_PowerOnInitial
  9188 ;; This function uses a non-reentrant model
  9189 ;;
  9190                           
  9191                           
  9192                           ;psect for function _CC2500_InitPATable
  9193  1FE1                     _CC2500_InitPATable:	
  9194                           
  9195                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9196                           ;CC2500_B1.c: 183: unsigned char temp;
  9197                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9198                           
  9199                           ;incstack = 0
  9200                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9201  1FE1  0020               	movlb	0	; select bank0
  9202  1FE2  01A8               	clrf	CC2500_InitPATable@loop_d
  9203  1FE3                     L4:	
  9204  1FE3  3008               	movlw	8
  9205  1FE4  0228               	subwf	CC2500_InitPATable@loop_d,w
  9206  1FE5  1803               	btfsc	3,0
  9207  1FE6  0008               	return
  9208                           
  9209                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9210  1FE7  0828               	movf	CC2500_InitPATable@loop_d,w
  9211  1FE8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9212  1FE9  0084               	movwf	4
  9213  1FEA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9214  1FEB  1803               	skipnc
  9215  1FEC  3E01               	addlw	1
  9216  1FED  0085               	movwf	5
  9217  1FEE  0800               	movf	0,w	;code access
  9218  1FEF  00A6               	movwf	??_CC2500_InitPATable
  9219  1FF0  0826               	movf	??_CC2500_InitPATable,w
  9220  1FF1  00A7               	movwf	CC2500_InitPATable@temp
  9221                           
  9222                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9223  1FF2  0827               	movf	CC2500_InitPATable@temp,w
  9224  1FF3  00A6               	movwf	??_CC2500_InitPATable
  9225  1FF4  0826               	movf	??_CC2500_InitPATable,w
  9226  1FF5  00A3               	movwf	CC2500_WriteREG@value
  9227  1FF6  303E               	movlw	62
  9228  1FF7  3190  20CE  319F   	fcall	_CC2500_WriteREG
  9229  1FFA  3001               	movlw	1
  9230  1FFB  0020               	movlb	0	; select bank0
  9231  1FFC  00A6               	movwf	??_CC2500_InitPATable
  9232  1FFD  0826               	movf	??_CC2500_InitPATable,w
  9233  1FFE  07A8               	addwf	CC2500_InitPATable@loop_d,f
  9234  1FFF  2FE3               	goto	L4
  9235  2000                     __end_of_CC2500_InitPATable:	
  9236                           
  9237                           	psect	text45
  9238  10CE                     __ptext45:	
  9239 ;; *************** function _CC2500_WriteREG *****************
  9240 ;; Defined at:
  9241 ;;		line 258 in file "../src/CC2500_B1.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;  w_addr          1    wreg     unsigned char 
  9244 ;;  value           1    3[BANK0 ] unsigned char 
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;  w_addr          1    5[BANK0 ] unsigned char 
  9247 ;; Return value:  Size  Location     Type
  9248 ;;		None               void
  9249 ;; Registers used:
  9250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9251 ;; Tracked objects:
  9252 ;;		On entry : 0/0
  9253 ;;		On exit  : 0/0
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9256 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;Total ram usage:        3 bytes
  9261 ;; Hardware stack levels used:    1
  9262 ;; Hardware stack levels required when called:    6
  9263 ;; This function calls:
  9264 ;;		_CC2500_WriteByte
  9265 ;;		_RF_Timeout_Counter
  9266 ;;		_setRF_TimeoutCleared
  9267 ;; This function is called by:
  9268 ;;		_CC2500_InitSetREG
  9269 ;;		_CC2500_InitPATable
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           
  9274                           ;psect for function _CC2500_WriteREG
  9275  10CE                     _CC2500_WriteREG:	
  9276                           
  9277                           ;incstack = 0
  9278                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9279                           ;CC2500_WriteREG@w_addr stored from wreg
  9280  10CE  0020               	movlb	0	; select bank0
  9281  10CF  00A5               	movwf	CC2500_WriteREG@w_addr
  9282                           
  9283                           ;CC2500_B1.c: 259: RC0 = 0;
  9284  10D0  100E               	bcf	14,0	;volatile
  9285                           
  9286                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9287  10D1  0825               	movf	CC2500_WriteREG@w_addr,w
  9288  10D2  00A4               	movwf	??_CC2500_WriteREG
  9289  10D3  0824               	movf	??_CC2500_WriteREG,w
  9290  10D4  0021               	movlb	1	; select bank1
  9291  10D5  00D4               	movwf	_SPI0Buffer^(0+128)
  9292                           
  9293                           ;CC2500_B1.c: 261: while (RC5 == 1 && RF1.Timeout == 0) {
  9294  10D6  28DA               	goto	l6198
  9295  10D7                     l6196:	
  9296                           
  9297                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9298  10D7  319D  25EB  3190   	fcall	_RF_Timeout_Counter
  9299  10DA                     l6198:	
  9300  10DA  0020               	movlb	0	; select bank0
  9301  10DB  1E8E               	btfss	14,5	;volatile
  9302  10DC  28E0               	goto	l6202
  9303  10DD  0021               	movlb	1	; select bank1
  9304  10DE  1F21               	btfss	(_RF1^(0+128)+1),6
  9305  10DF  28D7               	goto	l6196
  9306  10E0                     l6202:	
  9307                           
  9308                           ;CC2500_B1.c: 263: };
  9309                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9310  10E0  319B  234B  3190   	fcall	_setRF_TimeoutCleared
  9311                           
  9312                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9313  10E3  319E  26CE  3190   	fcall	_CC2500_WriteByte
  9314                           
  9315                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9316  10E6  0020               	movlb	0	; select bank0
  9317  10E7  0823               	movf	CC2500_WriteREG@value,w
  9318  10E8  00A4               	movwf	??_CC2500_WriteREG
  9319  10E9  0824               	movf	??_CC2500_WriteREG,w
  9320  10EA  0021               	movlb	1	; select bank1
  9321  10EB  00D4               	movwf	_SPI0Buffer^(0+128)
  9322                           
  9323                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9324  10EC  319E  26CE         	fcall	_CC2500_WriteByte
  9325                           
  9326                           ;CC2500_B1.c: 269: RC0 = 1;
  9327  10EE  0020               	movlb	0	; select bank0
  9328  10EF  140E               	bsf	14,0	;volatile
  9329  10F0  0008               	return
  9330  10F1                     __end_of_CC2500_WriteREG:	
  9331                           
  9332                           	psect	text46
  9333  1C65                     __ptext46:	
  9334 ;; *************** function _CC2500_FrequencyCabr *****************
  9335 ;; Defined at:
  9336 ;;		line 208 in file "../src/CC2500_B1.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;		None
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;		None
  9341 ;; Return value:  Size  Location     Type
  9342 ;;		None               void
  9343 ;; Registers used:
  9344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;Total ram usage:        0 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; Hardware stack levels required when called:    7
  9357 ;; This function calls:
  9358 ;;		_CC2500_WriteCommand
  9359 ;;		_DelayTime_1us
  9360 ;; This function is called by:
  9361 ;;		_CC2500_PowerOnInitial
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           
  9366                           ;psect for function _CC2500_FrequencyCabr
  9367  1C65                     _CC2500_FrequencyCabr:	
  9368                           
  9369                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9370                           
  9371                           ;incstack = 0
  9372                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9373  1C65  3033               	movlw	51
  9374  1C66  319F  271B  319C   	fcall	_CC2500_WriteCommand
  9375                           
  9376                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9377  1C69  30E8               	movlw	232
  9378  1C6A  0020               	movlb	0	; select bank0
  9379  1C6B  00A1               	movwf	DelayTime_1us@count
  9380  1C6C  3003               	movlw	3
  9381  1C6D  00A2               	movwf	DelayTime_1us@count+1
  9382  1C6E  3191  2116         	fcall	_DelayTime_1us
  9383  1C70  0008               	return
  9384  1C71                     __end_of_CC2500_FrequencyCabr:	
  9385                           
  9386                           	psect	text47
  9387  1116                     __ptext47:	
  9388 ;; *************** function _DelayTime_1us *****************
  9389 ;; Defined at:
  9390 ;;		line 327 in file "../src/CC2500_B1.c"
  9391 ;; Parameters:    Size  Location     Type
  9392 ;;  count           2    1[BANK0 ] int 
  9393 ;; Auto vars:     Size  Location     Type
  9394 ;;  j               2    5[BANK0 ] unsigned int 
  9395 ;;  i               2    3[BANK0 ] unsigned int 
  9396 ;; Return value:  Size  Location     Type
  9397 ;;		None               void
  9398 ;; Registers used:
  9399 ;;		wreg, status,2
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9405 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;Total ram usage:        6 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    5
  9412 ;; This function calls:
  9413 ;;		Nothing
  9414 ;; This function is called by:
  9415 ;;		_CC2500_PowerRST
  9416 ;;		_CC2500_FrequencyCabr
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           
  9421                           ;psect for function _DelayTime_1us
  9422  1116                     _DelayTime_1us:	
  9423                           
  9424                           ;CC2500_B1.c: 328: unsigned int i, j;
  9425                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9426                           
  9427                           ;incstack = 0
  9428                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9429  1116  3001               	movlw	1
  9430  1117  0020               	movlb	0	; select bank0
  9431  1118  00A3               	movwf	DelayTime_1us@i
  9432  1119  3000               	movlw	0
  9433  111A  00A4               	movwf	DelayTime_1us@i+1
  9434  111B                     l347:	
  9435  111B  0822               	movf	DelayTime_1us@count+1,w
  9436  111C  0224               	subwf	DelayTime_1us@i+1,w
  9437  111D  1D03               	skipz
  9438  111E  2921               	goto	u5295
  9439  111F  0821               	movf	DelayTime_1us@count,w
  9440  1120  0223               	subwf	DelayTime_1us@i,w
  9441  1121                     u5295:	
  9442  1121  1803               	btfsc	3,0
  9443  1122  0008               	return
  9444                           
  9445                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9446  1123  01A5               	clrf	DelayTime_1us@j
  9447  1124  01A6               	clrf	DelayTime_1us@j+1
  9448  1125  3000               	movlw	0
  9449  1126  0226               	subwf	DelayTime_1us@j+1,w
  9450  1127  3002               	movlw	2
  9451  1128  1903               	skipnz
  9452  1129  0225               	subwf	DelayTime_1us@j,w
  9453  112A  1803               	btfsc	3,0
  9454  112B  2937               	goto	l6190
  9455  112C                     l6188:	
  9456  112C  3001               	movlw	1
  9457  112D  07A5               	addwf	DelayTime_1us@j,f
  9458  112E  3000               	movlw	0
  9459  112F  3DA6               	addwfc	DelayTime_1us@j+1,f
  9460  1130  3000               	movlw	0
  9461  1131  0226               	subwf	DelayTime_1us@j+1,w
  9462  1132  3002               	movlw	2
  9463  1133  1903               	skipnz
  9464  1134  0225               	subwf	DelayTime_1us@j,w
  9465  1135  1C03               	skipc
  9466  1136  292C               	goto	l6188
  9467  1137                     l6190:	
  9468  1137  3001               	movlw	1
  9469  1138  07A3               	addwf	DelayTime_1us@i,f
  9470  1139  3000               	movlw	0
  9471  113A  3DA4               	addwfc	DelayTime_1us@i+1,f
  9472  113B  291B               	goto	l347
  9473  113C                     __end_of_DelayTime_1us:	
  9474                           
  9475                           	psect	text48
  9476  1B53                     __ptext48:	
  9477 ;; *************** function _CC2500_ClearTXFIFO *****************
  9478 ;; Defined at:
  9479 ;;		line 194 in file "../src/CC2500_B1.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;		None               void
  9486 ;; Registers used:
  9487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;Total ram usage:        0 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    7
  9500 ;; This function calls:
  9501 ;;		_CC2500_WriteCommand
  9502 ;; This function is called by:
  9503 ;;		_CC2500_PowerOnInitial
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           
  9508                           ;psect for function _CC2500_ClearTXFIFO
  9509  1B53                     _CC2500_ClearTXFIFO:	
  9510                           
  9511                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9512                           
  9513                           ;incstack = 0
  9514                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9515  1B53  303B               	movlw	59
  9516  1B54  319F  271B         	fcall	_CC2500_WriteCommand
  9517  1B56  0008               	return
  9518  1B57                     __end_of_CC2500_ClearTXFIFO:	
  9519                           
  9520                           	psect	text49
  9521  1B4F                     __ptext49:	
  9522 ;; *************** function _CC2500_ClearRXFIFO *****************
  9523 ;; Defined at:
  9524 ;;		line 201 in file "../src/CC2500_B1.c"
  9525 ;; Parameters:    Size  Location     Type
  9526 ;;		None
  9527 ;; Auto vars:     Size  Location     Type
  9528 ;;		None
  9529 ;; Return value:  Size  Location     Type
  9530 ;;		None               void
  9531 ;; Registers used:
  9532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9533 ;; Tracked objects:
  9534 ;;		On entry : 0/0
  9535 ;;		On exit  : 0/0
  9536 ;;		Unchanged: 0/0
  9537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9542 ;;Total ram usage:        0 bytes
  9543 ;; Hardware stack levels used:    1
  9544 ;; Hardware stack levels required when called:    7
  9545 ;; This function calls:
  9546 ;;		_CC2500_WriteCommand
  9547 ;; This function is called by:
  9548 ;;		_CC2500_PowerOnInitial
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           
  9553                           ;psect for function _CC2500_ClearRXFIFO
  9554  1B4F                     _CC2500_ClearRXFIFO:	
  9555                           
  9556                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9557                           
  9558                           ;incstack = 0
  9559                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9560  1B4F  303A               	movlw	58
  9561  1B50  319F  271B         	fcall	_CC2500_WriteCommand
  9562  1B52  0008               	return
  9563  1B53                     __end_of_CC2500_ClearRXFIFO:	
  9564                           
  9565                           	psect	text50
  9566  1F1B                     __ptext50:	
  9567 ;; *************** function _CC2500_WriteCommand *****************
  9568 ;; Defined at:
  9569 ;;		line 292 in file "../src/CC2500_B1.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;  command         1    wreg     unsigned char 
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;  command         1    4[BANK0 ] unsigned char 
  9574 ;; Return value:  Size  Location     Type
  9575 ;;		None               void
  9576 ;; Registers used:
  9577 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;Total ram usage:        2 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    6
  9590 ;; This function calls:
  9591 ;;		_CC2500_WriteByte
  9592 ;;		_RF_Timeout_Counter
  9593 ;;		_setRF_TimeoutCleared
  9594 ;; This function is called by:
  9595 ;;		_CC2500_TxData
  9596 ;;		_CC2500_RxData
  9597 ;;		_CC2500_ClearTXFIFO
  9598 ;;		_CC2500_ClearRXFIFO
  9599 ;;		_CC2500_FrequencyCabr
  9600 ;;		_CC2500_SIDLEMode
  9601 ;;		_setRF_Main
  9602 ;;		_RF_RxDisable
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function _CC2500_WriteCommand
  9608  1F1B                     _CC2500_WriteCommand:	
  9609                           
  9610                           ;incstack = 0
  9611                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9612                           ;CC2500_WriteCommand@command stored from wreg
  9613  1F1B  0020               	movlb	0	; select bank0
  9614  1F1C  00A4               	movwf	CC2500_WriteCommand@command
  9615                           
  9616                           ;CC2500_B1.c: 293: RC0 = 0;
  9617  1F1D  100E               	bcf	14,0	;volatile
  9618                           
  9619                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9620  1F1E  0824               	movf	CC2500_WriteCommand@command,w
  9621  1F1F  00A3               	movwf	??_CC2500_WriteCommand
  9622  1F20  0823               	movf	??_CC2500_WriteCommand,w
  9623  1F21  0021               	movlb	1	; select bank1
  9624  1F22  00D4               	movwf	_SPI0Buffer^(0+128)
  9625                           
  9626                           ;CC2500_B1.c: 296: while (RC5 == 1 && RF1.Timeout == 0) {
  9627  1F23  2F27               	goto	l6152
  9628  1F24                     l6150:	
  9629                           
  9630                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9631  1F24  319D  25EB  319F   	fcall	_RF_Timeout_Counter
  9632  1F27                     l6152:	
  9633  1F27  0020               	movlb	0	; select bank0
  9634  1F28  1E8E               	btfss	14,5	;volatile
  9635  1F29  2F2D               	goto	l6156
  9636  1F2A  0021               	movlb	1	; select bank1
  9637  1F2B  1F21               	btfss	(_RF1^(0+128)+1),6
  9638  1F2C  2F24               	goto	l6150
  9639  1F2D                     l6156:	
  9640                           
  9641                           ;CC2500_B1.c: 298: };
  9642                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9643  1F2D  319B  234B  319F   	fcall	_setRF_TimeoutCleared
  9644                           
  9645                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9646  1F30  319E  26CE         	fcall	_CC2500_WriteByte
  9647                           
  9648                           ;CC2500_B1.c: 302: RC0 = 1;
  9649  1F32  0020               	movlb	0	; select bank0
  9650  1F33  140E               	bsf	14,0	;volatile
  9651  1F34  0008               	return
  9652  1F35                     __end_of_CC2500_WriteCommand:	
  9653                           
  9654                           	psect	text51
  9655  1B4B                     __ptext51:	
  9656 ;; *************** function _setRF_TimeoutCleared *****************
  9657 ;; Defined at:
  9658 ;;		line 149 in file "../src/RF_Control_B1.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;		None
  9663 ;; Return value:  Size  Location     Type
  9664 ;;		None               void
  9665 ;; Registers used:
  9666 ;;		status,2
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    5
  9679 ;; This function calls:
  9680 ;;		Nothing
  9681 ;; This function is called by:
  9682 ;;		_CC2500_TxData
  9683 ;;		_CC2500_RxData
  9684 ;;		_CC2500_PowerRST
  9685 ;;		_CC2500_WriteREG
  9686 ;;		_CC2500_WriteCommand
  9687 ;;		_CC2500_ReadStatus
  9688 ;;		_CC2500_ReadREG
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           
  9693                           ;psect for function _setRF_TimeoutCleared
  9694  1B4B                     _setRF_TimeoutCleared:	
  9695                           
  9696                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9697                           
  9698                           ;incstack = 0
  9699                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9700  1B4B  0021               	movlb	1	; select bank1
  9701  1B4C  01AC               	clrf	(_RF1^(0+128)+12)
  9702  1B4D  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9703  1B4E  0008               	return
  9704  1B4F                     __end_of_setRF_TimeoutCleared:	
  9705                           
  9706                           	psect	text52
  9707  1DEB                     __ptext52:	
  9708 ;; *************** function _RF_Timeout_Counter *****************
  9709 ;; Defined at:
  9710 ;;		line 141 in file "../src/RF_Control_B1.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;		None
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;		None
  9715 ;; Return value:  Size  Location     Type
  9716 ;;		None               void
  9717 ;; Registers used:
  9718 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: 0/0
  9723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;Total ram usage:        0 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; Hardware stack levels required when called:    5
  9731 ;; This function calls:
  9732 ;;		Nothing
  9733 ;; This function is called by:
  9734 ;;		_CC2500_TxData
  9735 ;;		_CC2500_RxData
  9736 ;;		_CC2500_PowerRST
  9737 ;;		_CC2500_WriteREG
  9738 ;;		_CC2500_WriteCommand
  9739 ;;		_CC2500_ReadStatus
  9740 ;;		_CC2500_ReadREG
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           
  9745                           ;psect for function _RF_Timeout_Counter
  9746  1DEB                     _RF_Timeout_Counter:	
  9747                           
  9748                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9752  1DEB  3001               	movlw	1
  9753  1DEC  0021               	movlb	1	; select bank1
  9754  1DED  07AC               	addwf	(_RF1^(0+128)+12),f
  9755  1DEE  3000               	movlw	0
  9756  1DEF  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9757                           
  9758                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9759  1DF0  300C               	movlw	12
  9760  1DF1  3EA0               	addlw	_RF1& (0+255)
  9761  1DF2  0086               	movwf	6
  9762  1DF3  0187               	clrf	7
  9763  1DF4  3F40               	moviw [0]fsr1
  9764  1DF5  3AA8               	xorlw	168
  9765  1DF6  1D03               	skipz
  9766  1DF7  2DFA               	goto	u5025
  9767  1DF8  3F41               	moviw [1]fsr1
  9768  1DF9  3A61               	xorlw	97
  9769  1DFA                     u5025:	
  9770  1DFA  1D03               	skipz
  9771  1DFB  0008               	return
  9772                           
  9773                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9774  1DFC  01AC               	clrf	(_RF1^(0+128)+12)
  9775  1DFD  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9776                           
  9777                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9778  1DFE  1721               	bsf	(_RF1^(0+128)+1),6
  9779  1DFF  0008               	return
  9780  1E00                     __end_of_RF_Timeout_Counter:	
  9781                           
  9782                           	psect	text53
  9783  1ECE                     __ptext53:	
  9784 ;; *************** function _CC2500_WriteByte *****************
  9785 ;; Defined at:
  9786 ;;		line 226 in file "../src/CC2500_B1.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;		None
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;  loop_a          1    2[BANK0 ] unsigned char 
  9791 ;; Return value:  Size  Location     Type
  9792 ;;		None               void
  9793 ;; Registers used:
  9794 ;;		wreg, status,2, status,0
  9795 ;; Tracked objects:
  9796 ;;		On entry : 0/0
  9797 ;;		On exit  : 0/0
  9798 ;;		Unchanged: 0/0
  9799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;Total ram usage:        2 bytes
  9805 ;; Hardware stack levels used:    1
  9806 ;; Hardware stack levels required when called:    5
  9807 ;; This function calls:
  9808 ;;		Nothing
  9809 ;; This function is called by:
  9810 ;;		_CC2500_TxData
  9811 ;;		_CC2500_RxData
  9812 ;;		_CC2500_PowerRST
  9813 ;;		_CC2500_WriteREG
  9814 ;;		_CC2500_WriteCommand
  9815 ;;		_CC2500_ReadStatus
  9816 ;;		_CC2500_ReadREG
  9817 ;; This function uses a non-reentrant model
  9818 ;;
  9819                           
  9820                           
  9821                           ;psect for function _CC2500_WriteByte
  9822  1ECE                     _CC2500_WriteByte:	
  9823                           
  9824                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9825                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9826                           
  9827                           ;incstack = 0
  9828                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9829  1ECE  0020               	movlb	0	; select bank0
  9830  1ECF  01A2               	clrf	CC2500_WriteByte@loop_a
  9831  1ED0                     L5:	
  9832  1ED0  3008               	movlw	8
  9833  1ED1  0222               	subwf	CC2500_WriteByte@loop_a,w
  9834  1ED2  1803               	btfsc	3,0
  9835  1ED3  0008               	return
  9836                           
  9837                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9838  1ED4  0021               	movlb	1	; select bank1
  9839  1ED5  1FD4               	btfss	_SPI0Buffer^(0+128),7
  9840  1ED6  2EDA               	goto	l303
  9841                           
  9842                           ;CC2500_B1.c: 230: RC4 = 1;
  9843  1ED7  0020               	movlb	0	; select bank0
  9844  1ED8  160E               	bsf	14,4	;volatile
  9845  1ED9  2EDC               	goto	l304
  9846  1EDA                     l303:	
  9847                           
  9848                           ;CC2500_B1.c: 231: else
  9849                           ;CC2500_B1.c: 232: RC4 = 0;
  9850  1EDA  0020               	movlb	0	; select bank0
  9851  1EDB  120E               	bcf	14,4	;volatile
  9852  1EDC                     l304:	
  9853                           
  9854                           ;CC2500_B1.c: 233: RC3 = 1;
  9855  1EDC  158E               	bsf	14,3	;volatile
  9856                           
  9857                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9858  1EDD  1003               	clrc
  9859  1EDE  0021               	movlb	1	; select bank1
  9860  1EDF  0DD4               	rlf	_SPI0Buffer^(0+128),f
  9861                           
  9862                           ;CC2500_B1.c: 235: RC3 = 0;
  9863  1EE0  0020               	movlb	0	; select bank0
  9864  1EE1  118E               	bcf	14,3	;volatile
  9865  1EE2  3001               	movlw	1
  9866  1EE3  00A1               	movwf	??_CC2500_WriteByte
  9867  1EE4  0821               	movf	??_CC2500_WriteByte,w
  9868  1EE5  07A2               	addwf	CC2500_WriteByte@loop_a,f
  9869  1EE6  2ED0               	goto	L5
  9870  1EE7                     __end_of_CC2500_WriteByte:	
  9871                           
  9872                           	psect	text54
  9873  1B2B                     __ptext54:	
  9874 ;; *************** function _RF_Initialization *****************
  9875 ;; Defined at:
  9876 ;;		line 9 in file "../src/RF_Control_B1.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;		None
  9879 ;; Auto vars:     Size  Location     Type
  9880 ;;		None
  9881 ;; Return value:  Size  Location     Type
  9882 ;;		None               void
  9883 ;; Registers used:
  9884 ;;		wreg, status,2, status,0, pclath, cstack
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;Total ram usage:        0 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    6
  9897 ;; This function calls:
  9898 ;;		_setRF_Initialization
  9899 ;; This function is called by:
  9900 ;;		_main
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function _RF_Initialization
  9906  1B2B                     _RF_Initialization:	
  9907                           
  9908                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9912  1B2B  319B  23EE         	fcall	_setRF_Initialization
  9913  1B2D  0008               	return
  9914  1B2E                     __end_of_RF_Initialization:	
  9915                           
  9916                           	psect	text55
  9917  1BEE                     __ptext55:	
  9918 ;; *************** function _setRF_Initialization *****************
  9919 ;; Defined at:
  9920 ;;		line 17 in file "../src/RF_Control_B1.c"
  9921 ;; Parameters:    Size  Location     Type
  9922 ;;		None
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;		None
  9925 ;; Return value:  Size  Location     Type
  9926 ;;		None               void
  9927 ;; Registers used:
  9928 ;;		wreg
  9929 ;; Tracked objects:
  9930 ;;		On entry : 0/0
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;Total ram usage:        1 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    5
  9941 ;; This function calls:
  9942 ;;		Nothing
  9943 ;; This function is called by:
  9944 ;;		_RF_Initialization
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           
  9949                           ;psect for function _setRF_Initialization
  9950  1BEE                     _setRF_Initialization:	
  9951                           
  9952                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9953                           
  9954                           ;incstack = 0
  9955                           ; Regs used in _setRF_Initialization: [wreg]
  9956  1BEE  3015               	movlw	21
  9957  1BEF  0020               	movlb	0	; select bank0
  9958  1BF0  00A1               	movwf	??_setRF_Initialization
  9959  1BF1  0821               	movf	??_setRF_Initialization,w
  9960  1BF2  0021               	movlb	1	; select bank1
  9961  1BF3  00D7               	movwf	_Tx_Length^(0+128)
  9962                           
  9963                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  9964  1BF4  30C8               	movlw	200
  9965  1BF5  00A7               	movwf	(_RF1^(0+128)+7)
  9966  1BF6  3000               	movlw	0
  9967  1BF7  00A8               	movwf	(_RF1^(0+128)+8)
  9968  1BF8  0008               	return
  9969  1BF9                     __end_of_setRF_Initialization:	
  9970                           
  9971                           	psect	text56
  9972  1D54                     __ptext56:	
  9973 ;; *************** function _Mcu_Initialization *****************
  9974 ;; Defined at:
  9975 ;;		line 30 in file "../src/MCU_B1.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;		None
  9978 ;; Auto vars:     Size  Location     Type
  9979 ;;		None
  9980 ;; Return value:  Size  Location     Type
  9981 ;;		None               void
  9982 ;; Registers used:
  9983 ;;		wreg, status,2, status,0, pclath, cstack
  9984 ;; Tracked objects:
  9985 ;;		On entry : 0/0
  9986 ;;		On exit  : 0/0
  9987 ;;		Unchanged: 0/0
  9988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;Total ram usage:        0 bytes
  9994 ;; Hardware stack levels used:    1
  9995 ;; Hardware stack levels required when called:    6
  9996 ;; This function calls:
  9997 ;;		_ADC_Set
  9998 ;;		_Fosc_Set
  9999 ;;		_IOC_Set
 10000 ;;		_IO_Set
 10001 ;;		_TMR1_Set
 10002 ;;		_WDT_Set
 10003 ;; This function is called by:
 10004 ;;		_main
 10005 ;; This function uses a non-reentrant model
 10006 ;;
 10007                           
 10008                           
 10009                           ;psect for function _Mcu_Initialization
 10010  1D54                     _Mcu_Initialization:	
 10011                           
 10012                           ;MCU_B1.c: 32: Fosc_Set();
 10013                           
 10014                           ;incstack = 0
 10015                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10016  1D54  319B  2347  319D   	fcall	_Fosc_Set
 10017                           
 10018                           ;MCU_B1.c: 34: IO_Set();
 10019  1D57  319F  2701  319D   	fcall	_IO_Set
 10020                           
 10021                           ;MCU_B1.c: 36: ;;
 10022                           ;MCU_B1.c: 38: TMR1_Set();
 10023  1D5A  319C  2459  319D   	fcall	_TMR1_Set
 10024                           
 10025                           ;MCU_B1.c: 40: ADC_Set();
 10026  1D5D  319B  2377  319D   	fcall	_ADC_Set
 10027                           
 10028                           ;MCU_B1.c: 42: ;;
 10029                           ;MCU_B1.c: 44: ;;
 10030                           ;MCU_B1.c: 46: IOC_Set();
 10031  1D60  319B  23D8  319D   	fcall	_IOC_Set
 10032                           
 10033                           ;MCU_B1.c: 48: ;;
 10034                           ;MCU_B1.c: 50: ;;
 10035                           ;MCU_B1.c: 52: WDT_Set();
 10036  1D63  319B  23E3         	fcall	_WDT_Set
 10037  1D65  0008               	return
 10038  1D66                     __end_of_Mcu_Initialization:	
 10039                           
 10040                           	psect	text57
 10041  1BE3                     __ptext57:	
 10042 ;; *************** function _WDT_Set *****************
 10043 ;; Defined at:
 10044 ;;		line 1089 in file "../src/MCU_B1.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;		None
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;		None
 10049 ;; Return value:  Size  Location     Type
 10050 ;;		None               void
 10051 ;; Registers used:
 10052 ;;		wreg
 10053 ;; Tracked objects:
 10054 ;;		On entry : 0/0
 10055 ;;		On exit  : 0/0
 10056 ;;		Unchanged: 0/0
 10057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;Total ram usage:        1 bytes
 10063 ;; Hardware stack levels used:    1
 10064 ;; Hardware stack levels required when called:    5
 10065 ;; This function calls:
 10066 ;;		Nothing
 10067 ;; This function is called by:
 10068 ;;		_Mcu_Initialization
 10069 ;; This function uses a non-reentrant model
 10070 ;;
 10071                           
 10072                           
 10073                           ;psect for function _WDT_Set
 10074  1BE3                     _WDT_Set:	
 10075                           
 10076                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10077                           
 10078                           ;incstack = 0
 10079                           ; Regs used in _WDT_Set: [wreg]
 10080  1BE3  3017               	movlw	23
 10081  1BE4  0021               	movlb	1	; select bank1
 10082  1BE5  0097               	movwf	23	;volatile
 10083                           
 10084                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10085  1BE6  1449               	bsf	_WDT^(0+128),0
 10086                           
 10087                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10088  1BE7  300A               	movlw	10
 10089  1BE8  0020               	movlb	0	; select bank0
 10090  1BE9  00A1               	movwf	??_WDT_Set
 10091  1BEA  0821               	movf	??_WDT_Set,w
 10092  1BEB  0021               	movlb	1	; select bank1
 10093  1BEC  00CA               	movwf	(_WDT^(0+128)+1)
 10094  1BED  0008               	return
 10095  1BEE                     __end_of_WDT_Set:	
 10096                           
 10097                           	psect	text58
 10098  1C59                     __ptext58:	
 10099 ;; *************** function _TMR1_Set *****************
 10100 ;; Defined at:
 10101 ;;		line 226 in file "../src/MCU_B1.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;		None
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;		None
 10106 ;; Return value:  Size  Location     Type
 10107 ;;		None               void
 10108 ;; Registers used:
 10109 ;;		wreg
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;Total ram usage:        0 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    5
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_Mcu_Initialization
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           
 10130                           ;psect for function _TMR1_Set
 10131  1C59                     _TMR1_Set:	
 10132                           
 10133                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10134                           
 10135                           ;incstack = 0
 10136                           ; Regs used in _TMR1_Set: [wreg]
 10137  1C59  3041               	movlw	65
 10138  1C5A  0020               	movlb	0	; select bank0
 10139  1C5B  0098               	movwf	24	;volatile
 10140                           
 10141                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10142  1C5C  30FA               	movlw	250
 10143  1C5D  0097               	movwf	23	;volatile
 10144                           
 10145                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10146  1C5E  3038               	movlw	56
 10147  1C5F  0096               	movwf	22	;volatile
 10148                           
 10149                           ;MCU_B1.c: 230: TMR1IE = 1;
 10150  1C60  0021               	movlb	1	; select bank1
 10151  1C61  1411               	bsf	17,0	;volatile
 10152                           
 10153                           ;MCU_B1.c: 231: PEIE = 1;
 10154  1C62  170B               	bsf	11,6	;volatile
 10155                           
 10156                           ;MCU_B1.c: 232: GIE = 1;
 10157  1C63  178B               	bsf	11,7	;volatile
 10158  1C64  0008               	return
 10159  1C65                     __end_of_TMR1_Set:	
 10160                           
 10161                           	psect	text59
 10162  1F01                     __ptext59:	
 10163 ;; *************** function _IO_Set *****************
 10164 ;; Defined at:
 10165 ;;		line 60 in file "../src/MCU_B1.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;		None
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;		None
 10170 ;; Return value:  Size  Location     Type
 10171 ;;		None               void
 10172 ;; Registers used:
 10173 ;;		wreg, status,2
 10174 ;; Tracked objects:
 10175 ;;		On entry : 0/0
 10176 ;;		On exit  : 0/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;Total ram usage:        0 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    5
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_Mcu_Initialization
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           
 10194                           ;psect for function _IO_Set
 10195  1F01                     _IO_Set:	
 10196                           
 10197                           ;MCU_B1.c: 92: TRISA = 0b11110111;;
 10198                           
 10199                           ;incstack = 0
 10200                           ; Regs used in _IO_Set: [wreg+status,2]
 10201  1F01  30F7               	movlw	247
 10202  1F02  0021               	movlb	1	; select bank1
 10203  1F03  008C               	movwf	12	;volatile
 10204                           
 10205                           ;MCU_B1.c: 93: TRISB = 0b00000100;;
 10206  1F04  3004               	movlw	4
 10207  1F05  008D               	movwf	13	;volatile
 10208                           
 10209                           ;MCU_B1.c: 94: TRISC = 0b00100110;;
 10210  1F06  3026               	movlw	38
 10211  1F07  008E               	movwf	14	;volatile
 10212                           
 10213                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10214  1F08  0022               	movlb	2	; select bank2
 10215  1F09  018C               	clrf	12	;volatile
 10216                           
 10217                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10218  1F0A  018D               	clrf	13	;volatile
 10219                           
 10220                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10221  1F0B  018E               	clrf	14	;volatile
 10222                           
 10223                           ;MCU_B1.c: 100: ANSELA = 0b00001110;;
 10224  1F0C  300E               	movlw	14
 10225  1F0D  0023               	movlb	3	; select bank3
 10226  1F0E  008C               	movwf	12	;volatile
 10227                           
 10228                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10229  1F0F  018D               	clrf	13	;volatile
 10230                           
 10231                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10232  1F10  018E               	clrf	14	;volatile
 10233                           
 10234                           ;MCU_B1.c: 104: PORTA = 0b11110111;;
 10235  1F11  30F7               	movlw	247
 10236  1F12  0020               	movlb	0	; select bank0
 10237  1F13  008C               	movwf	12	;volatile
 10238                           
 10239                           ;MCU_B1.c: 105: PORTB = 0b00000100;;
 10240  1F14  3004               	movlw	4
 10241  1F15  008D               	movwf	13	;volatile
 10242                           
 10243                           ;MCU_B1.c: 106: PORTC = 0b00100110;;
 10244  1F16  3026               	movlw	38
 10245  1F17  008E               	movwf	14	;volatile
 10246                           
 10247                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10248  1F18  0024               	movlb	4	; select bank4
 10249  1F19  018D               	clrf	13	;volatile
 10250  1F1A  0008               	return
 10251  1F1B                     __end_of_IO_Set:	
 10252                           
 10253                           	psect	text60
 10254  1BD8                     __ptext60:	
 10255 ;; *************** function _IOC_Set *****************
 10256 ;; Defined at:
 10257 ;;		line 379 in file "../src/MCU_B1.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;		None
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;		None
 10262 ;; Return value:  Size  Location     Type
 10263 ;;		None               void
 10264 ;; Registers used:
 10265 ;;		wreg, status,2
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        0 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    5
 10278 ;; This function calls:
 10279 ;;		Nothing
 10280 ;; This function is called by:
 10281 ;;		_Mcu_Initialization
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           
 10286                           ;psect for function _IOC_Set
 10287  1BD8                     _IOC_Set:	
 10288                           
 10289                           ;MCU_B1.c: 381: IOCBP = 0b00000100;;
 10290                           
 10291                           ;incstack = 0
 10292                           ; Regs used in _IOC_Set: [wreg+status,2]
 10293  1BD8  3004               	movlw	4
 10294  1BD9  0027               	movlb	7	; select bank7
 10295  1BDA  0094               	movwf	20	;volatile
 10296                           
 10297                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10298  1BDB  3004               	movlw	4
 10299  1BDC  0095               	movwf	21	;volatile
 10300                           
 10301                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10302  1BDD  0196               	clrf	22	;volatile
 10303                           
 10304                           ;MCU_B1.c: 386: IOCIE = 1;
 10305  1BDE  158B               	bsf	11,3	;volatile
 10306                           
 10307                           ;MCU_B1.c: 387: IOCIF = 0;
 10308  1BDF  100B               	bcf	11,0	;volatile
 10309                           
 10310                           ;MCU_B1.c: 388: PEIE = 1;
 10311  1BE0  170B               	bsf	11,6	;volatile
 10312                           
 10313                           ;MCU_B1.c: 389: GIE = 1;
 10314  1BE1  178B               	bsf	11,7	;volatile
 10315  1BE2  0008               	return
 10316  1BE3                     __end_of_IOC_Set:	
 10317                           
 10318                           	psect	text61
 10319  1B47                     __ptext61:	
 10320 ;; *************** function _Fosc_Set *****************
 10321 ;; Defined at:
 10322 ;;		line 56 in file "../src/MCU_B1.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;		None
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;		None               void
 10329 ;; Registers used:
 10330 ;;		wreg
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;Total ram usage:        0 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; Hardware stack levels required when called:    5
 10343 ;; This function calls:
 10344 ;;		Nothing
 10345 ;; This function is called by:
 10346 ;;		_Mcu_Initialization
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350                           
 10351                           ;psect for function _Fosc_Set
 10352  1B47                     _Fosc_Set:	
 10353                           
 10354                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10355                           
 10356                           ;incstack = 0
 10357                           ; Regs used in _Fosc_Set: [wreg]
 10358  1B47  3078               	movlw	120
 10359  1B48  0021               	movlb	1	; select bank1
 10360  1B49  0099               	movwf	25	;volatile
 10361  1B4A  0008               	return
 10362  1B4B                     __end_of_Fosc_Set:	
 10363                           
 10364                           	psect	text62
 10365  1B77                     __ptext62:	
 10366 ;; *************** function _ADC_Set *****************
 10367 ;; Defined at:
 10368 ;;		line 425 in file "../src/MCU_B1.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;		None
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;		None
 10373 ;; Return value:  Size  Location     Type
 10374 ;;		None               void
 10375 ;; Registers used:
 10376 ;;		wreg
 10377 ;; Tracked objects:
 10378 ;;		On entry : 0/0
 10379 ;;		On exit  : 0/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;Total ram usage:        0 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; Hardware stack levels required when called:    5
 10389 ;; This function calls:
 10390 ;;		Nothing
 10391 ;; This function is called by:
 10392 ;;		_Mcu_Initialization
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           
 10397                           ;psect for function _ADC_Set
 10398  1B77                     _ADC_Set:	
 10399                           
 10400                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10401                           
 10402                           ;incstack = 0
 10403                           ; Regs used in _ADC_Set: [wreg]
 10404  1B77  30F3               	movlw	243
 10405  1B78  0021               	movlb	1	; select bank1
 10406  1B79  009E               	movwf	30	;volatile
 10407                           
 10408                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10409  1B7A  30C1               	movlw	193
 10410  1B7B  0022               	movlb	2	; select bank2
 10411  1B7C  0097               	movwf	23	;volatile
 10412  1B7D  0008               	return
 10413  1B7E                     __end_of_ADC_Set:	
 10414                           
 10415                           	psect	text63
 10416  004A                     __ptext63:	
 10417 ;; *************** function _Load_Main *****************
 10418 ;; Defined at:
 10419 ;;		line 39 in file "../src/OverLoad_B1.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;  i               2   17[BANK0 ] int 
 10424 ;;  LightsCount     1   16[BANK0 ] unsigned char 
 10425 ;;  Load_RunStat    1   15[BANK0 ] unsigned char 
 10426 ;;  ErrorCountVa    1   14[BANK0 ] unsigned char 
 10427 ;;  error           1   11[BANK0 ] unsigned char 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;		None               void
 10430 ;; Registers used:
 10431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;Total ram usage:       10 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    6
 10444 ;; This function calls:
 10445 ;;		___lwdiv
 10446 ;;		___wmul
 10447 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10448 ;;		_getDimmer_LoadGO
 10449 ;;		_getDimmer_Load_Status
 10450 ;;		_getMain_All_Error_Status
 10451 ;;		_getMain_All_LightsStatus
 10452 ;;		_getMain_Lights_Count
 10453 ;;		_setLoad_AH_AL_Restore
 10454 ;; This function is called by:
 10455 ;;		_main
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           
 10460                           ;psect for function _Load_Main
 10461  004A                     _Load_Main:	
 10462                           
 10463                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10464                           
 10465                           ;incstack = 0
 10466                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10467  004A  3000               	movlw	0
 10468  004B  3191  21BD  3180   	fcall	_getMain_All_Error_Status
 10469  004E  0020               	movlb	0	; select bank0
 10470  004F  00A9               	movwf	??_Load_Main
 10471  0050  0829               	movf	??_Load_Main,w
 10472  0051  00AB               	movwf	Load_Main@error
 10473                           
 10474                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10475  0052  01AF               	clrf	Load_Main@Load_RunStatus
 10476  0053  01AE               	clrf	Load_Main@ErrorCountValue
 10477  0054  01B0               	clrf	Load_Main@LightsCount
 10478                           
 10479                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10480  0055  0022               	movlb	2	; select bank2
 10481  0056  1C34               	btfss	_Load^(0+256),0
 10482  0057  29F6               	goto	l1608
 10483                           
 10484                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10485  0058  319B  23B8  3180   	fcall	_getMain_All_LightsStatus
 10486  005B  3800               	iorlw	0
 10487  005C  1D03               	skipz
 10488  005D  2860               	goto	l8892
 10489                           
 10490                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10491  005E  0022               	movlb	2	; select bank2
 10492  005F  2881               	goto	l8910
 10493  0060                     l8892:	
 10494                           ;OverLoad_B1.c: 46: } else {
 10495                           
 10496                           
 10497                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10498  0060  0020               	movlb	0	; select bank0
 10499  0061  08AB               	movf	Load_Main@error,f
 10500  0062  1D03               	skipz
 10501  0063  287E               	goto	l1611
 10502  0064  319D  258B  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10503  0067  3800               	iorlw	0
 10504  0068  1D03               	skipz
 10505  0069  287E               	goto	l1611
 10506                           
 10507                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10508  006A  0022               	movlb	2	; select bank2
 10509  006B  14B4               	bsf	_Load^(0+256),1
 10510                           
 10511                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10512  006C  319B  238D  3180   	fcall	_getDimmer_LoadGO
 10513  006F  3A01               	xorlw	1
 10514  0070  1D03               	skipz
 10515  0071  2879               	goto	l1612
 10516                           
 10517                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10518  0072  0022               	movlb	2	; select bank2
 10519  0073  1DB4               	btfss	_Load^(0+256),3
 10520  0074  1BB4               	btfsc	_Load^(0+256),7
 10521  0075  2882               	goto	l1610
 10522                           
 10523                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10524  0076  15B4               	bsf	_Load^(0+256),3
 10525                           
 10526                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10527  0077  01D9               	clrf	(_Load^(0+256)+37)
 10528                           
 10529                           ;OverLoad_B1.c: 56: }
 10530                           ;OverLoad_B1.c: 57: } else {
 10531  0078  2882               	goto	l1610
 10532  0079                     l1612:	
 10533                           
 10534                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10535  0079  0022               	movlb	2	; select bank2
 10536  007A  1FB4               	btfss	_Load^(0+256),7
 10537  007B  2882               	goto	l1610
 10538                           
 10539                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10540  007C  13B4               	bcf	_Load^(0+256),7
 10541                           
 10542                           ;OverLoad_B1.c: 60: }
 10543                           ;OverLoad_B1.c: 61: }
 10544                           ;OverLoad_B1.c: 62: } else {
 10545  007D  2882               	goto	l1610
 10546  007E                     l1611:	
 10547                           
 10548                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10549  007E  0022               	movlb	2	; select bank2
 10550  007F  1CB4               	btfss	_Load^(0+256),1
 10551  0080  2882               	goto	l1610
 10552  0081                     l8910:	
 10553                           
 10554                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10555  0081  10B4               	bcf	_Load^(0+256),1
 10556  0082                     l1610:	
 10557                           
 10558                           ;OverLoad_B1.c: 65: }
 10559                           ;OverLoad_B1.c: 66: }
 10560                           ;OverLoad_B1.c: 88: }
 10561                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10562  0082  1CB4               	btfss	_Load^(0+256),1
 10563  0083  29D2               	goto	l1618
 10564                           
 10565                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10566  0084  1534               	bsf	_Load^(0+256),2
 10567                           
 10568                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10569  0085  1E34               	btfss	_Load^(0+256),4
 10570  0086  29D0               	goto	l1619
 10571                           
 10572                           ;OverLoad_B1.c: 95: Load.Time++;
 10573  0087  3001               	movlw	1
 10574  0088  07B5               	addwf	(_Load^(0+256)+1),f
 10575  0089  3000               	movlw	0
 10576  008A  3DB6               	addwfc	((_Load+1)^(0+256)+1),f
 10577                           
 10578                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10579  008B  3000               	movlw	0
 10580  008C  0236               	subwf	((_Load+1)^(0+256)+1),w
 10581  008D  3002               	movlw	2
 10582  008E  1903               	skipnz
 10583  008F  0235               	subwf	(_Load^(0+256)+1),w
 10584  0090  1C03               	skipc
 10585  0091  0008               	return
 10586                           
 10587                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10588  0092  01B5               	clrf	(_Load^(0+256)+1)
 10589  0093  01B6               	clrf	((_Load+1)^(0+256)+1)
 10590                           
 10591                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10592  0094  1234               	bcf	_Load^(0+256),4
 10593                           
 10594                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10595  0095  3001               	movlw	1
 10596  0096  0020               	movlb	0	; select bank0
 10597  0097  00B1               	movwf	Load_Main@i
 10598  0098  3000               	movlw	0
 10599  0099  00B2               	movwf	Load_Main@i+1
 10600  009A  0832               	movf	Load_Main@i+1,w
 10601  009B  3A80               	xorlw	128
 10602  009C  00A9               	movwf	??_Load_Main
 10603  009D  3080               	movlw	128
 10604  009E  0229               	subwf	??_Load_Main,w
 10605  009F  1D03               	skipz
 10606  00A0  28A3               	goto	u9805
 10607  00A1  3004               	movlw	4
 10608  00A2  0231               	subwf	Load_Main@i,w
 10609  00A3                     u9805:	
 10610  00A3  1803               	btfsc	3,0
 10611  00A4  28D7               	goto	l8932
 10612  00A5                     l8926:	
 10613                           
 10614                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10615  00A5  0020               	movlb	0	; select bank0
 10616  00A6  3531               	lslf	Load_Main@i,w
 10617  00A7  3E3F               	addlw	(_Load+11)& (0+255)
 10618  00A8  0086               	movwf	6
 10619  00A9  3001               	movlw	1	; select bank2/3
 10620  00AA  0087               	movwf	7
 10621  00AB  3F40               	moviw [0]fsr1
 10622  00AC  00A9               	movwf	??_Load_Main
 10623  00AD  3F41               	moviw [1]fsr1
 10624  00AE  00AA               	movwf	??_Load_Main+1
 10625  00AF  0829               	movf	??_Load_Main,w
 10626  00B0  0022               	movlb	2	; select bank2
 10627  00B1  07B9               	addwf	(_Load^(0+256)+5),f
 10628  00B2  0020               	movlb	0	; select bank0
 10629  00B3  082A               	movf	??_Load_Main+1,w
 10630  00B4  0022               	movlb	2	; select bank2
 10631  00B5  3DBA               	addwfc	((_Load+1)^(0+256)+5),f
 10632                           
 10633                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10634  00B6  0020               	movlb	0	; select bank0
 10635  00B7  3531               	lslf	Load_Main@i,w
 10636  00B8  3E49               	addlw	(_Load+21)& (0+255)
 10637  00B9  0086               	movwf	6
 10638  00BA  3001               	movlw	1	; select bank2/3
 10639  00BB  0087               	movwf	7
 10640  00BC  3F40               	moviw [0]fsr1
 10641  00BD  00A9               	movwf	??_Load_Main
 10642  00BE  3F41               	moviw [1]fsr1
 10643  00BF  00AA               	movwf	??_Load_Main+1
 10644  00C0  0829               	movf	??_Load_Main,w
 10645  00C1  0022               	movlb	2	; select bank2
 10646  00C2  07BB               	addwf	(_Load^(0+256)+7),f
 10647  00C3  0020               	movlb	0	; select bank0
 10648  00C4  082A               	movf	??_Load_Main+1,w
 10649  00C5  0022               	movlb	2	; select bank2
 10650  00C6  3DBC               	addwfc	((_Load+1)^(0+256)+7),f
 10651  00C7  3001               	movlw	1
 10652  00C8  0020               	movlb	0	; select bank0
 10653  00C9  07B1               	addwf	Load_Main@i,f
 10654  00CA  3000               	movlw	0
 10655  00CB  3DB2               	addwfc	Load_Main@i+1,f
 10656  00CC  0832               	movf	Load_Main@i+1,w
 10657  00CD  3A80               	xorlw	128
 10658  00CE  00A9               	movwf	??_Load_Main
 10659  00CF  3080               	movlw	128
 10660  00D0  0229               	subwf	??_Load_Main,w
 10661  00D1  1D03               	skipz
 10662  00D2  28D5               	goto	u9815
 10663  00D3  3004               	movlw	4
 10664  00D4  0231               	subwf	Load_Main@i,w
 10665  00D5                     u9815:	
 10666  00D5  1C03               	skipc
 10667  00D6  28A5               	goto	l8926
 10668  00D7                     l8932:	
 10669                           
 10670                           ;OverLoad_B1.c: 103: }
 10671                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10672  00D7  3003               	movlw	3
 10673  00D8  0020               	movlb	0	; select bank0
 10674  00D9  00A1               	movwf	___lwdiv@divisor
 10675  00DA  3000               	movlw	0
 10676  00DB  00A2               	movwf	___lwdiv@divisor+1
 10677  00DC  0022               	movlb	2	; select bank2
 10678  00DD  083A               	movf	((_Load+1)^(0+256)+5),w
 10679  00DE  0020               	movlb	0	; select bank0
 10680  00DF  01A4               	clrf	___lwdiv@dividend+1
 10681  00E0  07A4               	addwf	___lwdiv@dividend+1,f
 10682  00E1  0022               	movlb	2	; select bank2
 10683  00E2  0839               	movf	(_Load^(0+256)+5),w
 10684  00E3  0020               	movlb	0	; select bank0
 10685  00E4  01A3               	clrf	___lwdiv@dividend
 10686  00E5  07A3               	addwf	___lwdiv@dividend,f
 10687  00E6  3192  2291  3180   	fcall	___lwdiv
 10688  00E9  0020               	movlb	0	; select bank0
 10689  00EA  0822               	movf	?___lwdiv+1,w
 10690  00EB  0022               	movlb	2	; select bank2
 10691  00EC  01BA               	clrf	((_Load+1)^(0+256)+5)
 10692  00ED  07BA               	addwf	((_Load+1)^(0+256)+5),f
 10693  00EE  0020               	movlb	0	; select bank0
 10694  00EF  0821               	movf	?___lwdiv,w
 10695  00F0  0022               	movlb	2	; select bank2
 10696  00F1  01B9               	clrf	(_Load^(0+256)+5)
 10697  00F2  07B9               	addwf	(_Load^(0+256)+5),f
 10698                           
 10699                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10700  00F3  3003               	movlw	3
 10701  00F4  0020               	movlb	0	; select bank0
 10702  00F5  00A1               	movwf	___lwdiv@divisor
 10703  00F6  3000               	movlw	0
 10704  00F7  00A2               	movwf	___lwdiv@divisor+1
 10705  00F8  0022               	movlb	2	; select bank2
 10706  00F9  083C               	movf	((_Load+1)^(0+256)+7),w
 10707  00FA  0020               	movlb	0	; select bank0
 10708  00FB  01A4               	clrf	___lwdiv@dividend+1
 10709  00FC  07A4               	addwf	___lwdiv@dividend+1,f
 10710  00FD  0022               	movlb	2	; select bank2
 10711  00FE  083B               	movf	(_Load^(0+256)+7),w
 10712  00FF  0020               	movlb	0	; select bank0
 10713  0100  01A3               	clrf	___lwdiv@dividend
 10714  0101  07A3               	addwf	___lwdiv@dividend,f
 10715  0102  3192  2291  3180   	fcall	___lwdiv
 10716  0105  0020               	movlb	0	; select bank0
 10717  0106  0822               	movf	?___lwdiv+1,w
 10718  0107  0022               	movlb	2	; select bank2
 10719  0108  01BC               	clrf	((_Load+1)^(0+256)+7)
 10720  0109  07BC               	addwf	((_Load+1)^(0+256)+7),f
 10721  010A  0020               	movlb	0	; select bank0
 10722  010B  0821               	movf	?___lwdiv,w
 10723  010C  0022               	movlb	2	; select bank2
 10724  010D  01BB               	clrf	(_Load^(0+256)+7)
 10725  010E  07BB               	addwf	(_Load^(0+256)+7),f
 10726                           
 10727                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10728  010F  319F  276C  3180   	fcall	_setLoad_AH_AL_Restore
 10729                           
 10730                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10731  0112  0022               	movlb	2	; select bank2
 10732  0113  083C               	movf	((_Load+1)^(0+256)+7),w
 10733  0114  023A               	subwf	((_Load+1)^(0+256)+5),w
 10734  0115  1D03               	skipz
 10735  0116  2919               	goto	u9825
 10736  0117  083B               	movf	(_Load^(0+256)+7),w
 10737  0118  0239               	subwf	(_Load^(0+256)+5),w
 10738  0119                     u9825:	
 10739  0119  1C03               	skipc
 10740  011A  0008               	return
 10741                           
 10742                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10743  011B  3005               	movlw	5
 10744  011C  3E34               	addlw	_Load& (0+255)
 10745  011D  0086               	movwf	6
 10746  011E  3001               	movlw	1	; select bank2/3
 10747  011F  0087               	movwf	7
 10748  0120  093B               	comf	(_Load^(0+256)+7),w
 10749  0121  0020               	movlb	0	; select bank0
 10750  0122  00A9               	movwf	??_Load_Main
 10751  0123  0022               	movlb	2	; select bank2
 10752  0124  093C               	comf	((_Load+1)^(0+256)+7),w
 10753  0125  0020               	movlb	0	; select bank0
 10754  0126  00AA               	movwf	??_Load_Main+1
 10755  0127  0AA9               	incf	??_Load_Main,f
 10756  0128  1903               	skipnz
 10757  0129  0AAA               	incf	??_Load_Main+1,f
 10758  012A  3F40               	moviw [0]fsr1
 10759  012B  0729               	addwf	??_Load_Main,w
 10760  012C  0022               	movlb	2	; select bank2
 10761  012D  00D3               	movwf	(_Load^(0+256)+31)
 10762  012E  3F41               	moviw [1]fsr1
 10763  012F  0020               	movlb	0	; select bank0
 10764  0130  3D2A               	addwfc	??_Load_Main+1,w
 10765  0131  0022               	movlb	2	; select bank2
 10766  0132  00D4               	movwf	(_Load^(0+256)+32)
 10767                           
 10768                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10769  0133  01B9               	clrf	(_Load^(0+256)+5)
 10770  0134  01BA               	clrf	((_Load+1)^(0+256)+5)
 10771                           
 10772                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10773  0135  01BB               	clrf	(_Load^(0+256)+7)
 10774  0136  01BC               	clrf	((_Load+1)^(0+256)+7)
 10775                           
 10776                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10777  0137  1DB4               	btfss	_Load^(0+256),3
 10778  0138  2992               	goto	l8972
 10779                           
 10780                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10781  0139  3002               	movlw	2
 10782  013A  0259               	subwf	(_Load^(0+256)+37),w
 10783  013B  1803               	skipnc
 10784  013C  2992               	goto	l8972
 10785                           
 10786                           ;OverLoad_B1.c: 115: Load.Count++;
 10787  013D  3001               	movlw	1
 10788  013E  0020               	movlb	0	; select bank0
 10789  013F  00A9               	movwf	??_Load_Main
 10790  0140  0829               	movf	??_Load_Main,w
 10791  0141  0022               	movlb	2	; select bank2
 10792  0142  07D9               	addwf	(_Load^(0+256)+37),f
 10793                           
 10794                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10795  0143  319B  2395  3180   	fcall	_getDimmer_Load_Status
 10796  0146  0020               	movlb	0	; select bank0
 10797  0147  00A9               	movwf	??_Load_Main
 10798  0148  0829               	movf	??_Load_Main,w
 10799  0149  00AF               	movwf	Load_Main@Load_RunStatus
 10800                           
 10801                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10802  014A  319B  23CD  3180   	fcall	_getMain_Lights_Count
 10803  014D  0020               	movlb	0	; select bank0
 10804  014E  00A9               	movwf	??_Load_Main
 10805  014F  0829               	movf	??_Load_Main,w
 10806  0150  00B0               	movwf	Load_Main@LightsCount
 10807                           
 10808                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10809  0151  0022               	movlb	2	; select bank2
 10810  0152  0859               	movf	(_Load^(0+256)+37),w
 10811  0153  3A01               	xorlw	1
 10812  0154  1D03               	skipz
 10813  0155  295A               	goto	l8958
 10814                           
 10815                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*57);
 10816  0156  3074               	movlw	116
 10817  0157  00D7               	movwf	(_Load^(0+256)+35)
 10818  0158  3004               	movlw	4
 10819  0159  2967               	goto	L6
 10820  015A                     l8958:	
 10821                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10822                           
 10823  015A  0859               	movf	(_Load^(0+256)+37),w
 10824  015B  3A02               	xorlw	2
 10825  015C  1D03               	skipz
 10826  015D  2992               	goto	l8972
 10827                           
 10828                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10829  015E  0020               	movlb	0	; select bank0
 10830  015F  0830               	movf	Load_Main@LightsCount,w
 10831  0160  3A01               	xorlw	1
 10832  0161  1D03               	skipz
 10833  0162  2969               	goto	l8964
 10834                           
 10835                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.8*57);
 10836  0163  3066               	movlw	102
 10837  0164  0022               	movlb	2	; select bank2
 10838  0165  00D7               	movwf	(_Load^(0+256)+35)
 10839  0166  3000               	movlw	0
 10840  0167                     L6:	
 10841  0167  00D8               	movwf	(_Load^(0+256)+36)
 10842                           
 10843                           ;OverLoad_B1.c: 130: } else {
 10844  0168  2992               	goto	l8972
 10845  0169                     l8964:	
 10846                           
 10847                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10848  0169  0020               	movlb	0	; select bank0
 10849  016A  08AF               	movf	Load_Main@Load_RunStatus,f
 10850  016B  1D03               	skipz
 10851  016C  2986               	goto	l8968
 10852                           
 10853                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.8*57) * LightsCount;
 10854  016D  0830               	movf	Load_Main@LightsCount,w
 10855  016E  00A9               	movwf	??_Load_Main
 10856  016F  01AA               	clrf	??_Load_Main+1
 10857  0170  0829               	movf	??_Load_Main,w
 10858  0171  00A1               	movwf	___wmul@multiplier
 10859  0172  082A               	movf	??_Load_Main+1,w
 10860  0173  00A2               	movwf	___wmul@multiplier+1
 10861  0174  3066               	movlw	102
 10862  0175  00A3               	movwf	___wmul@multiplicand
 10863  0176  3000               	movlw	0
 10864  0177  00A4               	movwf	___wmul@multiplicand+1
 10865  0178  319F  27C3  3180   	fcall	___wmul
 10866  017B  0020               	movlb	0	; select bank0
 10867  017C  0822               	movf	?___wmul+1,w
 10868  017D  0022               	movlb	2	; select bank2
 10869  017E  01D8               	clrf	((_Load+1)^(0+256)+35)
 10870  017F  07D8               	addwf	((_Load+1)^(0+256)+35),f
 10871  0180  0020               	movlb	0	; select bank0
 10872  0181  0821               	movf	?___wmul,w
 10873  0182  0022               	movlb	2	; select bank2
 10874  0183  01D7               	clrf	(_Load^(0+256)+35)
 10875  0184  07D7               	addwf	(_Load^(0+256)+35),f
 10876                           
 10877                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10878  0185  2992               	goto	l8972
 10879  0186                     l8968:	
 10880  0186  0020               	movlb	0	; select bank0
 10881  0187  082F               	movf	Load_Main@Load_RunStatus,w
 10882  0188  3A01               	xorlw	1
 10883  0189  1D03               	skipz
 10884  018A  2992               	goto	l8972
 10885                           
 10886                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.8*57) + Load.TotalLoad;
 10887  018B  0022               	movlb	2	; select bank2
 10888  018C  083D               	movf	(_Load^(0+256)+9),w
 10889  018D  3E66               	addlw	102
 10890  018E  00D7               	movwf	(_Load^(0+256)+35)
 10891  018F  3000               	movlw	0
 10892  0190  3D3E               	addwfc	((_Load+1)^(0+256)+9),w
 10893  0191  00D8               	movwf	((_Load+1)^(0+256)+35)
 10894  0192                     l8972:	
 10895                           
 10896                           ;OverLoad_B1.c: 135: }
 10897                           ;OverLoad_B1.c: 136: }
 10898                           ;OverLoad_B1.c: 137: }
 10899                           ;OverLoad_B1.c: 138: }
 10900                           ;OverLoad_B1.c: 139: }
 10901                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10902  0192  0022               	movlb	2	; select bank2
 10903  0193  0858               	movf	((_Load+1)^(0+256)+35),w
 10904  0194  0254               	subwf	((_Load+1)^(0+256)+31),w
 10905  0195  1D03               	skipz
 10906  0196  2999               	goto	u9905
 10907  0197  0857               	movf	(_Load^(0+256)+35),w
 10908  0198  0253               	subwf	(_Load^(0+256)+31),w
 10909  0199                     u9905:	
 10910  0199  1C03               	skipc
 10911  019A  29B8               	goto	l8988
 10912                           
 10913                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10914  019B  0020               	movlb	0	; select bank0
 10915  019C  0830               	movf	Load_Main@LightsCount,w
 10916  019D  3A01               	xorlw	1
 10917  019E  1903               	skipnz
 10918  019F  29A2               	goto	l8978
 10919  01A0  3003               	movlw	3
 10920  01A1  29A3               	goto	L7
 10921  01A2                     l8978:	
 10922  01A2  3002               	movlw	2
 10923  01A3                     L7:	
 10924  01A3  00AC               	movwf	_Load_Main$3909
 10925  01A4  3000               	movlw	0
 10926  01A5  00AD               	movwf	_Load_Main$3909+1
 10927  01A6  082C               	movf	_Load_Main$3909,w
 10928  01A7  00A9               	movwf	??_Load_Main
 10929  01A8  0829               	movf	??_Load_Main,w
 10930  01A9  00AE               	movwf	Load_Main@ErrorCountValue
 10931                           
 10932                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 10933  01AA  3001               	movlw	1
 10934  01AB  00A9               	movwf	??_Load_Main
 10935  01AC  0829               	movf	??_Load_Main,w
 10936  01AD  0022               	movlb	2	; select bank2
 10937  01AE  07DA               	addwf	(_Load^(0+256)+38),f
 10938                           
 10939                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 10940  01AF  085A               	movf	(_Load^(0+256)+38),w
 10941  01B0  0020               	movlb	0	; select bank0
 10942  01B1  022E               	subwf	Load_Main@ErrorCountValue,w
 10943  01B2  1803               	skipnc
 10944  01B3  0008               	return
 10945                           
 10946                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 10947  01B4  0022               	movlb	2	; select bank2
 10948  01B5  01DA               	clrf	(_Load^(0+256)+38)
 10949                           
 10950                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 10951  01B6  16B4               	bsf	_Load^(0+256),5
 10952                           
 10953                           ;OverLoad_B1.c: 168: }
 10954                           ;OverLoad_B1.c: 169: } else {
 10955  01B7  0008               	return
 10956  01B8                     l8988:	
 10957                           
 10958                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 10959  01B8  01DA               	clrf	(_Load^(0+256)+38)
 10960                           
 10961                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 10962  01B9  1DB4               	btfss	_Load^(0+256),3
 10963  01BA  0008               	return
 10964                           
 10965                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 10966  01BB  3001               	movlw	1
 10967  01BC  0020               	movlb	0	; select bank0
 10968  01BD  00A9               	movwf	??_Load_Main
 10969  01BE  0829               	movf	??_Load_Main,w
 10970  01BF  0022               	movlb	2	; select bank2
 10971  01C0  07DB               	addwf	(_Load^(0+256)+39),f
 10972                           
 10973                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 10974  01C1  3003               	movlw	3
 10975  01C2  025B               	subwf	(_Load^(0+256)+39),w
 10976  01C3  1C03               	skipc
 10977  01C4  0008               	return
 10978                           
 10979                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 10980  01C5  01DB               	clrf	(_Load^(0+256)+39)
 10981                           
 10982                           ;OverLoad_B1.c: 175: Load.OK = 1;
 10983  01C6  17B4               	bsf	_Load^(0+256),7
 10984                           
 10985                           ;OverLoad_B1.c: 176: Load.Run = 0;
 10986  01C7  11B4               	bcf	_Load^(0+256),3
 10987                           
 10988                           ;OverLoad_B1.c: 177: Load.Count = 0;
 10989  01C8  01D9               	clrf	(_Load^(0+256)+37)
 10990                           
 10991                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 10992  01C9  0854               	movf	((_Load+1)^(0+256)+31),w
 10993  01CA  01BE               	clrf	((_Load+1)^(0+256)+9)
 10994  01CB  07BE               	addwf	((_Load+1)^(0+256)+9),f
 10995  01CC  0853               	movf	(_Load^(0+256)+31),w
 10996  01CD  01BD               	clrf	(_Load^(0+256)+9)
 10997  01CE  07BD               	addwf	(_Load^(0+256)+9),f
 10998                           
 10999                           ;OverLoad_B1.c: 182: }
 11000                           ;OverLoad_B1.c: 183: }
 11001                           ;OverLoad_B1.c: 206: }
 11002                           ;OverLoad_B1.c: 207: }
 11003                           ;OverLoad_B1.c: 208: }
 11004                           ;OverLoad_B1.c: 209: } else {
 11005  01CF  0008               	return
 11006  01D0                     l1619:	
 11007                           
 11008                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11009  01D0  1634               	bsf	_Load^(0+256),4
 11010                           
 11011                           ;OverLoad_B1.c: 211: }
 11012                           ;OverLoad_B1.c: 212: } else {
 11013  01D1  0008               	return
 11014  01D2                     l1618:	
 11015                           
 11016                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11017  01D2  1D34               	btfss	_Load^(0+256),2
 11018  01D3  29E5               	goto	l9024
 11019                           
 11020                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11021  01D4  1134               	bcf	_Load^(0+256),2
 11022                           
 11023                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11024  01D5  1234               	bcf	_Load^(0+256),4
 11025                           
 11026                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11027  01D6  01B5               	clrf	(_Load^(0+256)+1)
 11028  01D7  01B6               	clrf	((_Load+1)^(0+256)+1)
 11029                           
 11030                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11031  01D8  319F  276C  3180   	fcall	_setLoad_AH_AL_Restore
 11032                           
 11033                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11034  01DB  0022               	movlb	2	; select bank2
 11035  01DC  01DA               	clrf	(_Load^(0+256)+38)
 11036                           
 11037                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11038  01DD  01DB               	clrf	(_Load^(0+256)+39)
 11039                           
 11040                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11041  01DE  01B9               	clrf	(_Load^(0+256)+5)
 11042  01DF  01BA               	clrf	((_Load+1)^(0+256)+5)
 11043                           
 11044                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11045  01E0  01BB               	clrf	(_Load^(0+256)+7)
 11046  01E1  01BC               	clrf	((_Load+1)^(0+256)+7)
 11047                           
 11048                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11049  01E2  11B4               	bcf	_Load^(0+256),3
 11050                           
 11051                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11052  01E3  01D9               	clrf	(_Load^(0+256)+37)
 11053                           
 11054                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11055  01E4  13B4               	bcf	_Load^(0+256),7
 11056  01E5                     l9024:	
 11057                           
 11058                           ;OverLoad_B1.c: 255: }
 11059                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11060  01E5  1EB4               	btfss	_Load^(0+256),5
 11061  01E6  0008               	return
 11062                           
 11063                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11064  01E7  3001               	movlw	1
 11065  01E8  07B7               	addwf	(_Load^(0+256)+3),f
 11066  01E9  3000               	movlw	0
 11067  01EA  3DB8               	addwfc	((_Load+1)^(0+256)+3),f
 11068                           
 11069                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11070  01EB  3001               	movlw	1
 11071  01EC  0238               	subwf	((_Load+1)^(0+256)+3),w
 11072  01ED  30F4               	movlw	244
 11073  01EE  1903               	skipnz
 11074  01EF  0237               	subwf	(_Load^(0+256)+3),w
 11075  01F0  1C03               	skipc
 11076  01F1  0008               	return
 11077                           
 11078                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11079  01F2  01B7               	clrf	(_Load^(0+256)+3)
 11080  01F3  01B8               	clrf	((_Load+1)^(0+256)+3)
 11081                           
 11082                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11083  01F4  12B4               	bcf	_Load^(0+256),5
 11084                           
 11085                           ;OverLoad_B1.c: 261: }
 11086                           ;OverLoad_B1.c: 262: }
 11087                           ;OverLoad_B1.c: 263: }
 11088                           ;OverLoad_B1.c: 264: } else {
 11089  01F5  0008               	return
 11090  01F6                     l1608:	
 11091                           
 11092                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11093  01F6  1C20               	btfss	_myMain^(0+256),0
 11094  01F7  0008               	return
 11095                           
 11096                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11097  01F8  1434               	bsf	_Load^(0+256),0
 11098  01F9  0008               	return
 11099  01FA                     __end_of_Load_Main:	
 11100                           
 11101                           	psect	text64
 11102  1BCD                     __ptext64:	
 11103 ;; *************** function _getMain_Lights_Count *****************
 11104 ;; Defined at:
 11105 ;;		line 459 in file "../src/Main_B1.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;		None
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;  status1         1    2[BANK0 ] unsigned char 
 11110 ;;  count           1    1[BANK0 ] unsigned char 
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  1    wreg      unsigned char 
 11113 ;; Registers used:
 11114 ;;		wreg, status,2
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;Total ram usage:        2 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    5
 11127 ;; This function calls:
 11128 ;;		Nothing
 11129 ;; This function is called by:
 11130 ;;		_Load_Main
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           
 11135                           ;psect for function _getMain_Lights_Count
 11136  1BCD                     _getMain_Lights_Count:	
 11137                           
 11138                           ;Main_B1.c: 460: char count = 0;
 11139                           
 11140                           ;incstack = 0
 11141                           ; Regs used in _getMain_Lights_Count: [wreg+status,2]
 11142  1BCD  0020               	movlb	0	; select bank0
 11143  1BCE  01A1               	clrf	getMain_Lights_Count@count
 11144                           
 11145                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11146  1BCF  3000               	movlw	0
 11147  1BD0  0021               	movlb	1	; select bank1
 11148  1BD1  19BA               	btfsc	_DimmerIntr1^(0+128),3
 11149  1BD2  3001               	movlw	1
 11150  1BD3  0020               	movlb	0	; select bank0
 11151  1BD4  00A2               	movwf	getMain_Lights_Count@status1
 11152                           
 11153                           ;Main_B1.c: 487: return count = status1;
 11154  1BD5  0822               	movf	getMain_Lights_Count@status1,w
 11155  1BD6  00A1               	movwf	getMain_Lights_Count@count
 11156  1BD7  0008               	return
 11157  1BD8                     __end_of_getMain_Lights_Count:	
 11158                           
 11159                           	psect	text65
 11160  1B95                     __ptext65:	
 11161 ;; *************** function _getDimmer_Load_Status *****************
 11162 ;; Defined at:
 11163 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11164 ;; Parameters:    Size  Location     Type
 11165 ;;		None
 11166 ;; Auto vars:     Size  Location     Type
 11167 ;;  status          1    1[BANK0 ] unsigned char 
 11168 ;; Return value:  Size  Location     Type
 11169 ;;                  1    wreg      unsigned char 
 11170 ;; Registers used:
 11171 ;;		wreg, status,2
 11172 ;; Tracked objects:
 11173 ;;		On entry : 0/0
 11174 ;;		On exit  : 0/0
 11175 ;;		Unchanged: 0/0
 11176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11181 ;;Total ram usage:        1 bytes
 11182 ;; Hardware stack levels used:    1
 11183 ;; Hardware stack levels required when called:    5
 11184 ;; This function calls:
 11185 ;;		Nothing
 11186 ;; This function is called by:
 11187 ;;		_Load_Main
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           
 11192                           ;psect for function _getDimmer_Load_Status
 11193  1B95                     _getDimmer_Load_Status:	
 11194                           
 11195                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11196                           
 11197                           ;incstack = 0
 11198                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11199  1B95  3000               	movlw	0
 11200  1B96  0022               	movlb	2	; select bank2
 11201  1B97  192D               	btfsc	_Dimmer^(0+256),2
 11202  1B98  3001               	movlw	1
 11203  1B99  0020               	movlb	0	; select bank0
 11204  1B9A  00A1               	movwf	getDimmer_Load_Status@status
 11205                           
 11206                           ;Dimmer_B1.c: 1086: return status;
 11207  1B9B  0821               	movf	getDimmer_Load_Status@status,w
 11208  1B9C  0008               	return
 11209  1B9D                     __end_of_getDimmer_Load_Status:	
 11210                           
 11211                           	psect	text66
 11212  1B8D                     __ptext66:	
 11213 ;; *************** function _getDimmer_LoadGO *****************
 11214 ;; Defined at:
 11215 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;		None
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  loadgo          1    1[BANK0 ] unsigned char 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  1    wreg      unsigned char 
 11222 ;; Registers used:
 11223 ;;		wreg, status,2
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11232 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;Total ram usage:        1 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:    5
 11236 ;; This function calls:
 11237 ;;		Nothing
 11238 ;; This function is called by:
 11239 ;;		_Load_Main
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           
 11244                           ;psect for function _getDimmer_LoadGO
 11245  1B8D                     _getDimmer_LoadGO:	
 11246                           
 11247                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11248                           
 11249                           ;incstack = 0
 11250                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11251  1B8D  3000               	movlw	0
 11252  1B8E  0022               	movlb	2	; select bank2
 11253  1B8F  18AD               	btfsc	_Dimmer^(0+256),1
 11254  1B90  3001               	movlw	1
 11255  1B91  0020               	movlb	0	; select bank0
 11256  1B92  00A1               	movwf	getDimmer_LoadGO@loadgo
 11257                           
 11258                           ;Dimmer_B1.c: 1080: return loadgo;
 11259  1B93  0821               	movf	getDimmer_LoadGO@loadgo,w
 11260  1B94  0008               	return
 11261  1B95                     __end_of_getDimmer_LoadGO:	
 11262                           
 11263                           	psect	text67
 11264  1D8B                     __ptext67:	
 11265 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11266 ;; Defined at:
 11267 ;;		line 242 in file "../src/Dimmer_B1.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;		None
 11270 ;; Auto vars:     Size  Location     Type
 11271 ;;  status          1    1[BANK0 ] unsigned char 
 11272 ;; Return value:  Size  Location     Type
 11273 ;;                  1    wreg      unsigned char 
 11274 ;; Registers used:
 11275 ;;		wreg, status,2, status,0
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;Total ram usage:        1 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:    5
 11288 ;; This function calls:
 11289 ;;		Nothing
 11290 ;; This function is called by:
 11291 ;;		_Load_Main
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           
 11296                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11297  1D8B                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11298                           
 11299                           ;Dimmer_B1.c: 243: char status = 0;
 11300                           
 11301                           ;incstack = 0
 11302                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11303  1D8B  0020               	movlb	0	; select bank0
 11304  1D8C  01A1               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11305                           
 11306                           ;Dimmer_B1.c: 254: status = (DimmerIntr1.Dimming_Sw == 1) ? 1 : 0;
 11307  1D8D  3000               	movlw	0
 11308  1D8E  0021               	movlb	1	; select bank1
 11309  1D8F  1A3A               	btfsc	_DimmerIntr1^(0+128),4
 11310  1D90  3001               	movlw	1
 11311  1D91  0020               	movlb	0	; select bank0
 11312  1D92  00A1               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11313                           
 11314                           ;Dimmer_B1.c: 258: if (status == 0) {
 11315  1D93  08A1               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11316  1D94  1D03               	skipz
 11317  1D95  2D9C               	goto	l6990
 11318                           
 11319                           ;Dimmer_B1.c: 268: status = (DimmerIntr1.Dimming_RF == 1) ? 1 : 0;
 11320  1D96  3000               	movlw	0
 11321  1D97  0021               	movlb	1	; select bank1
 11322  1D98  1B3A               	btfsc	_DimmerIntr1^(0+128),6
 11323  1D99  3001               	movlw	1
 11324  1D9A  0020               	movlb	0	; select bank0
 11325  1D9B  00A1               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11326  1D9C                     l6990:	
 11327                           
 11328                           ;Dimmer_B1.c: 270: }
 11329                           ;Dimmer_B1.c: 272: return status;
 11330  1D9C  0821               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11331  1D9D  0008               	return
 11332  1D9E                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11333                           
 11334                           	psect	text68
 11335  1FC3                     __ptext68:	
 11336 ;; *************** function ___wmul *****************
 11337 ;; Defined at:
 11338 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11339 ;; Parameters:    Size  Location     Type
 11340 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11341 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11342 ;; Auto vars:     Size  Location     Type
 11343 ;;  product         2    5[BANK0 ] unsigned int 
 11344 ;; Return value:  Size  Location     Type
 11345 ;;                  2    1[BANK0 ] unsigned int 
 11346 ;; Registers used:
 11347 ;;		wreg, status,2, status,0
 11348 ;; Tracked objects:
 11349 ;;		On entry : 0/0
 11350 ;;		On exit  : 0/0
 11351 ;;		Unchanged: 0/0
 11352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11353 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11357 ;;Total ram usage:        6 bytes
 11358 ;; Hardware stack levels used:    1
 11359 ;; Hardware stack levels required when called:    5
 11360 ;; This function calls:
 11361 ;;		Nothing
 11362 ;; This function is called by:
 11363 ;;		_Load_Main
 11364 ;; This function uses a non-reentrant model
 11365 ;;
 11366                           
 11367                           
 11368                           ;psect for function ___wmul
 11369  1FC3                     ___wmul:	
 11370                           
 11371                           ;incstack = 0
 11372                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11373  1FC3  0020               	movlb	0	; select bank0
 11374  1FC4  01A5               	clrf	___wmul@product
 11375  1FC5  01A6               	clrf	___wmul@product+1
 11376  1FC6                     l7516:	
 11377  1FC6  1C21               	btfss	___wmul@multiplier,0
 11378  1FC7  2FCC               	goto	l2659
 11379  1FC8  0823               	movf	___wmul@multiplicand,w
 11380  1FC9  07A5               	addwf	___wmul@product,f
 11381  1FCA  0824               	movf	___wmul@multiplicand+1,w
 11382  1FCB  3DA6               	addwfc	___wmul@product+1,f
 11383  1FCC                     l2659:	
 11384  1FCC  3001               	movlw	1
 11385  1FCD                     u7355:	
 11386  1FCD  35A3               	lslf	___wmul@multiplicand,f
 11387  1FCE  0DA4               	rlf	___wmul@multiplicand+1,f
 11388  1FCF  0B89               	decfsz	9,f
 11389  1FD0  2FCD               	goto	u7355
 11390  1FD1  3001               	movlw	1
 11391  1FD2                     u7365:	
 11392  1FD2  36A2               	lsrf	___wmul@multiplier+1,f
 11393  1FD3  0CA1               	rrf	___wmul@multiplier,f
 11394  1FD4  0B89               	decfsz	9,f
 11395  1FD5  2FD2               	goto	u7365
 11396  1FD6  0822               	movf	___wmul@multiplier+1,w
 11397  1FD7  0421               	iorwf	___wmul@multiplier,w
 11398  1FD8  1D03               	skipz
 11399  1FD9  2FC6               	goto	l7516
 11400  1FDA  0826               	movf	___wmul@product+1,w
 11401  1FDB  01A2               	clrf	?___wmul+1
 11402  1FDC  07A2               	addwf	?___wmul+1,f
 11403  1FDD  0825               	movf	___wmul@product,w
 11404  1FDE  01A1               	clrf	?___wmul
 11405  1FDF  07A1               	addwf	?___wmul,f
 11406  1FE0  0008               	return
 11407  1FE1                     __end_of___wmul:	
 11408                           
 11409                           	psect	text69
 11410  1291                     __ptext69:	
 11411 ;; *************** function ___lwdiv *****************
 11412 ;; Defined at:
 11413 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11414 ;; Parameters:    Size  Location     Type
 11415 ;;  divisor         2    1[BANK0 ] unsigned int 
 11416 ;;  dividend        2    3[BANK0 ] unsigned int 
 11417 ;; Auto vars:     Size  Location     Type
 11418 ;;  quotient        2    6[BANK0 ] unsigned int 
 11419 ;;  counter         1    8[BANK0 ] unsigned char 
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  2    1[BANK0 ] unsigned int 
 11422 ;; Registers used:
 11423 ;;		wreg, status,2, status,0
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11429 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;Total ram usage:        8 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; Hardware stack levels required when called:    5
 11436 ;; This function calls:
 11437 ;;		Nothing
 11438 ;; This function is called by:
 11439 ;;		_Load_Main
 11440 ;;		_setRF_Main
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           
 11445                           ;psect for function ___lwdiv
 11446  1291                     ___lwdiv:	
 11447                           
 11448                           ;incstack = 0
 11449                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11450  1291  0020               	movlb	0	; select bank0
 11451  1292  01A6               	clrf	___lwdiv@quotient
 11452  1293  01A7               	clrf	___lwdiv@quotient+1
 11453  1294  0822               	movf	___lwdiv@divisor+1,w
 11454  1295  0421               	iorwf	___lwdiv@divisor,w
 11455  1296  1903               	skipnz
 11456  1297  2AC1               	goto	l6952
 11457  1298  01A8               	clrf	___lwdiv@counter
 11458  1299  0AA8               	incf	___lwdiv@counter,f
 11459  129A                     l6940:	
 11460  129A  1BA2               	btfsc	___lwdiv@divisor+1,7
 11461  129B  2AA6               	goto	l6942
 11462  129C  3001               	movlw	1
 11463  129D                     u6335:	
 11464  129D  35A1               	lslf	___lwdiv@divisor,f
 11465  129E  0DA2               	rlf	___lwdiv@divisor+1,f
 11466  129F  0B89               	decfsz	9,f
 11467  12A0  2A9D               	goto	u6335
 11468  12A1  3001               	movlw	1
 11469  12A2  00A5               	movwf	??___lwdiv
 11470  12A3  0825               	movf	??___lwdiv,w
 11471  12A4  07A8               	addwf	___lwdiv@counter,f
 11472  12A5  2A9A               	goto	l6940
 11473  12A6                     l6942:	
 11474  12A6  3001               	movlw	1
 11475  12A7                     u6355:	
 11476  12A7  35A6               	lslf	___lwdiv@quotient,f
 11477  12A8  0DA7               	rlf	___lwdiv@quotient+1,f
 11478  12A9  0B89               	decfsz	9,f
 11479  12AA  2AA7               	goto	u6355
 11480  12AB  0822               	movf	___lwdiv@divisor+1,w
 11481  12AC  0224               	subwf	___lwdiv@dividend+1,w
 11482  12AD  1D03               	skipz
 11483  12AE  2AB1               	goto	u6365
 11484  12AF  0821               	movf	___lwdiv@divisor,w
 11485  12B0  0223               	subwf	___lwdiv@dividend,w
 11486  12B1                     u6365:	
 11487  12B1  1C03               	skipc
 11488  12B2  2AB8               	goto	l6948
 11489  12B3  0821               	movf	___lwdiv@divisor,w
 11490  12B4  02A3               	subwf	___lwdiv@dividend,f
 11491  12B5  0822               	movf	___lwdiv@divisor+1,w
 11492  12B6  3BA4               	subwfb	___lwdiv@dividend+1,f
 11493  12B7  1426               	bsf	___lwdiv@quotient,0
 11494  12B8                     l6948:	
 11495  12B8  3001               	movlw	1
 11496  12B9                     u6375:	
 11497  12B9  36A2               	lsrf	___lwdiv@divisor+1,f
 11498  12BA  0CA1               	rrf	___lwdiv@divisor,f
 11499  12BB  0B89               	decfsz	9,f
 11500  12BC  2AB9               	goto	u6375
 11501  12BD  3001               	movlw	1
 11502  12BE  02A8               	subwf	___lwdiv@counter,f
 11503  12BF  1D03               	btfss	3,2
 11504  12C0  2AA6               	goto	l6942
 11505  12C1                     l6952:	
 11506  12C1  0827               	movf	___lwdiv@quotient+1,w
 11507  12C2  01A2               	clrf	?___lwdiv+1
 11508  12C3  07A2               	addwf	?___lwdiv+1,f
 11509  12C4  0826               	movf	___lwdiv@quotient,w
 11510  12C5  01A1               	clrf	?___lwdiv
 11511  12C6  07A1               	addwf	?___lwdiv,f
 11512  12C7  0008               	return
 11513  12C8                     __end_of___lwdiv:	
 11514                           
 11515                           	psect	text70
 11516  1B28                     __ptext70:	
 11517 ;; *************** function _Load_Initialization *****************
 11518 ;; Defined at:
 11519 ;;		line 9 in file "../src/OverLoad_B1.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;		None
 11522 ;; Auto vars:     Size  Location     Type
 11523 ;;		None
 11524 ;; Return value:  Size  Location     Type
 11525 ;;		None               void
 11526 ;; Registers used:
 11527 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11528 ;; Tracked objects:
 11529 ;;		On entry : 0/0
 11530 ;;		On exit  : 0/0
 11531 ;;		Unchanged: 0/0
 11532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11537 ;;Total ram usage:        0 bytes
 11538 ;; Hardware stack levels used:    1
 11539 ;; Hardware stack levels required when called:    6
 11540 ;; This function calls:
 11541 ;;		_setLoad_AH_AL_Restore
 11542 ;; This function is called by:
 11543 ;;		_main
 11544 ;; This function uses a non-reentrant model
 11545 ;;
 11546                           
 11547                           
 11548                           ;psect for function _Load_Initialization
 11549  1B28                     _Load_Initialization:	
 11550                           
 11551                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11552                           
 11553                           ;incstack = 0
 11554                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11555  1B28  319F  276C         	fcall	_setLoad_AH_AL_Restore
 11556  1B2A  0008               	return
 11557  1B2B                     __end_of_Load_Initialization:	
 11558                           
 11559                           	psect	text71
 11560  1F6C                     __ptext71:	
 11561 ;; *************** function _setLoad_AH_AL_Restore *****************
 11562 ;; Defined at:
 11563 ;;		line 292 in file "../src/OverLoad_B1.c"
 11564 ;; Parameters:    Size  Location     Type
 11565 ;;		None
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;  i               1    2[BANK0 ] unsigned char 
 11568 ;; Return value:  Size  Location     Type
 11569 ;;		None               void
 11570 ;; Registers used:
 11571 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11572 ;; Tracked objects:
 11573 ;;		On entry : 0/0
 11574 ;;		On exit  : 0/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;Total ram usage:        2 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; Hardware stack levels required when called:    5
 11584 ;; This function calls:
 11585 ;;		Nothing
 11586 ;; This function is called by:
 11587 ;;		_Load_Initialization
 11588 ;;		_Load_Main
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           
 11593                           ;psect for function _setLoad_AH_AL_Restore
 11594  1F6C                     _setLoad_AH_AL_Restore:	
 11595                           
 11596                           ;OverLoad_B1.c: 293: char i;
 11597                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11598                           
 11599                           ;incstack = 0
 11600                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11601  1F6C  0020               	movlb	0	; select bank0
 11602  1F6D  01A2               	clrf	setLoad_AH_AL_Restore@i
 11603  1F6E                     L8:	
 11604  1F6E  3005               	movlw	5
 11605  1F6F  0222               	subwf	setLoad_AH_AL_Restore@i,w
 11606  1F70  1803               	btfsc	3,0
 11607  1F71  0008               	return
 11608                           
 11609                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11610  1F72  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11611  1F73  3E3F               	addlw	(_Load+11)& (0+255)
 11612  1F74  0086               	movwf	6
 11613  1F75  3001               	movlw	1	; select bank2/3
 11614  1F76  0087               	movwf	7
 11615  1F77  3000               	movlw	0
 11616  1F78  3FC0               	movwi [0]fsr1
 11617  1F79  3FC1               	movwi [1]fsr1
 11618                           
 11619                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11620  1F7A  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11621  1F7B  3E49               	addlw	(_Load+21)& (0+255)
 11622  1F7C  0086               	movwf	6
 11623  1F7D  3001               	movlw	1	; select bank2/3
 11624  1F7E  0087               	movwf	7
 11625  1F7F  30FF               	movlw	255
 11626  1F80  3FC0               	movwi [0]fsr1
 11627  1F81  30FF               	movlw	255
 11628  1F82  3FC1               	movwi [1]fsr1
 11629  1F83  3001               	movlw	1
 11630  1F84  00A1               	movwf	??_setLoad_AH_AL_Restore
 11631  1F85  0821               	movf	??_setLoad_AH_AL_Restore,w
 11632  1F86  07A2               	addwf	setLoad_AH_AL_Restore@i,f
 11633  1F87  2F6E               	goto	L8
 11634  1F88                     __end_of_setLoad_AH_AL_Restore:	
 11635                           
 11636                           	psect	text72
 11637  1B43                     __ptext72:	
 11638 ;; *************** function _LED_Main *****************
 11639 ;; Defined at:
 11640 ;;		line 47 in file "../src/LED_B1.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;		None
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;		None
 11645 ;; Return value:  Size  Location     Type
 11646 ;;		None               void
 11647 ;; Registers used:
 11648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11649 ;; Tracked objects:
 11650 ;;		On entry : 0/0
 11651 ;;		On exit  : 0/0
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;Total ram usage:        0 bytes
 11659 ;; Hardware stack levels used:    1
 11660 ;; Hardware stack levels required when called:    7
 11661 ;; This function calls:
 11662 ;;		_setLED_Main
 11663 ;; This function is called by:
 11664 ;;		_main
 11665 ;; This function uses a non-reentrant model
 11666 ;;
 11667                           
 11668                           
 11669                           ;psect for function _LED_Main
 11670  1B43                     _LED_Main:	
 11671                           
 11672                           ;LED_B1.c: 67: setLED_Main(99);
 11673                           
 11674                           ;incstack = 0
 11675                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11676  1B43  3063               	movlw	99
 11677  1B44  3192  225B         	fcall	_setLED_Main
 11678  1B46  0008               	return
 11679  1B47                     __end_of_LED_Main:	
 11680                           
 11681                           	psect	text73
 11682  125B                     __ptext73:	
 11683 ;; *************** function _setLED_Main *****************
 11684 ;; Defined at:
 11685 ;;		line 229 in file "../src/LED_B1.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;  led             1    wreg     unsigned char 
 11688 ;; Auto vars:     Size  Location     Type
 11689 ;;  led             1    5[BANK0 ] unsigned char 
 11690 ;; Return value:  Size  Location     Type
 11691 ;;		None               void
 11692 ;; Registers used:
 11693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11694 ;; Tracked objects:
 11695 ;;		On entry : 0/0
 11696 ;;		On exit  : 0/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;Total ram usage:        3 bytes
 11704 ;; Hardware stack levels used:    1
 11705 ;; Hardware stack levels required when called:    6
 11706 ;; This function calls:
 11707 ;;		_LedPointSelect
 11708 ;; This function is called by:
 11709 ;;		_LED_Main
 11710 ;; This function uses a non-reentrant model
 11711 ;;
 11712                           
 11713                           
 11714                           ;psect for function _setLED_Main
 11715  125B                     _setLED_Main:	
 11716                           
 11717                           ;incstack = 0
 11718                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11719                           ;setLED_Main@led stored from wreg
 11720  125B  0020               	movlb	0	; select bank0
 11721  125C  00A5               	movwf	setLED_Main@led
 11722                           
 11723                           ;LED_B1.c: 230: LedPointSelect(led);
 11724  125D  0825               	movf	setLED_Main@led,w
 11725  125E  319C  2435  3192   	fcall	_LedPointSelect
 11726                           
 11727                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11728  1261  0021               	movlb	1	; select bank1
 11729  1262  0850               	movf	_LED^(0+128),w
 11730  1263  0086               	movwf	6
 11731  1264  3001               	movlw	1	; select bank2/3
 11732  1265  0087               	movwf	7
 11733  1266  1C81               	btfss	1,1
 11734  1267  0008               	return
 11735                           
 11736                           ;LED_B1.c: 232: LED->Time++;
 11737  1268  0A50               	incf	_LED^(0+128),w
 11738  1269  0086               	movwf	6
 11739  126A  3001               	movlw	1	; select bank2/3
 11740  126B  0087               	movwf	7
 11741  126C  3001               	movlw	1
 11742  126D  0781               	addwf	1,f
 11743  126E  3141               	addfsr 1,1
 11744  126F  1803               	skipnc
 11745  1270  0A81               	incf	1,f
 11746                           
 11747                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11748  1271  0A50               	incf	_LED^(0+128),w
 11749  1272  0086               	movwf	6
 11750  1273  3001               	movlw	1	; select bank2/3
 11751  1274  0087               	movwf	7
 11752  1275  3F40               	moviw [0]fsr1
 11753  1276  0020               	movlb	0	; select bank0
 11754  1277  00A3               	movwf	??_setLED_Main
 11755  1278  3F41               	moviw [1]fsr1
 11756  1279  00A4               	movwf	??_setLED_Main+1
 11757  127A  3000               	movlw	0
 11758  127B  0224               	subwf	??_setLED_Main+1,w
 11759  127C  3019               	movlw	25
 11760  127D  1903               	skipnz
 11761  127E  0223               	subwf	??_setLED_Main,w
 11762  127F  1C03               	skipc
 11763  1280  0008               	return
 11764                           
 11765                           ;LED_B1.c: 234: LED->Time = 0;
 11766  1281  0021               	movlb	1	; select bank1
 11767  1282  0A50               	incf	_LED^(0+128),w
 11768  1283  0086               	movwf	6
 11769  1284  3001               	movlw	1	; select bank2/3
 11770  1285  0087               	movwf	7
 11771  1286  3000               	movlw	0
 11772  1287  3FC0               	movwi [0]fsr1
 11773  1288  3FC1               	movwi [1]fsr1
 11774                           
 11775                           ;LED_B1.c: 252: if (led == 99) {
 11776  1289  0020               	movlb	0	; select bank0
 11777  128A  0825               	movf	setLED_Main@led,w
 11778  128B  3A63               	xorlw	99
 11779  128C  1D03               	skipz
 11780  128D  0008               	return
 11781                           
 11782                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11783  128E  3020               	movlw	32
 11784  128F  068D               	xorwf	13,f
 11785  1290  0008               	return
 11786  1291                     __end_of_setLED_Main:	
 11787                           
 11788                           	psect	text74
 11789  1B3F                     __ptext74:	
 11790 ;; *************** function _LED_Initialization *****************
 11791 ;; Defined at:
 11792 ;;		line 31 in file "../src/LED_B1.c"
 11793 ;; Parameters:    Size  Location     Type
 11794 ;;		None
 11795 ;; Auto vars:     Size  Location     Type
 11796 ;;		None
 11797 ;; Return value:  Size  Location     Type
 11798 ;;		None               void
 11799 ;; Registers used:
 11800 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11801 ;; Tracked objects:
 11802 ;;		On entry : 0/0
 11803 ;;		On exit  : 0/0
 11804 ;;		Unchanged: 0/0
 11805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;Total ram usage:        0 bytes
 11811 ;; Hardware stack levels used:    1
 11812 ;; Hardware stack levels required when called:    8
 11813 ;; This function calls:
 11814 ;;		_setLED_Initialization
 11815 ;; This function is called by:
 11816 ;;		_main
 11817 ;; This function uses a non-reentrant model
 11818 ;;
 11819                           
 11820                           
 11821                           ;psect for function _LED_Initialization
 11822  1B3F                     _LED_Initialization:	
 11823                           
 11824                           ;LED_B1.c: 42: setLED_Initialization(99);
 11825                           
 11826                           ;incstack = 0
 11827                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11828  1B3F  3063               	movlw	99
 11829  1B40  319D  2542         	fcall	_setLED_Initialization
 11830  1B42  0008               	return
 11831  1B43                     __end_of_LED_Initialization:	
 11832                           
 11833                           	psect	text75
 11834  1D42                     __ptext75:	
 11835 ;; *************** function _setLED_Initialization *****************
 11836 ;; Defined at:
 11837 ;;		line 74 in file "../src/LED_B1.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;  led             1    wreg     unsigned char 
 11840 ;; Auto vars:     Size  Location     Type
 11841 ;;  led             1    5[BANK0 ] unsigned char 
 11842 ;; Return value:  Size  Location     Type
 11843 ;;		None               void
 11844 ;; Registers used:
 11845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11846 ;; Tracked objects:
 11847 ;;		On entry : 0/0
 11848 ;;		On exit  : 0/0
 11849 ;;		Unchanged: 0/0
 11850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11854 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11855 ;;Total ram usage:        1 bytes
 11856 ;; Hardware stack levels used:    1
 11857 ;; Hardware stack levels required when called:    7
 11858 ;; This function calls:
 11859 ;;		_LedPointSelect
 11860 ;;		_setLED
 11861 ;; This function is called by:
 11862 ;;		_LED_Initialization
 11863 ;; This function uses a non-reentrant model
 11864 ;;
 11865                           
 11866                           
 11867                           ;psect for function _setLED_Initialization
 11868  1D42                     _setLED_Initialization:	
 11869                           
 11870                           ;incstack = 0
 11871                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11872                           ;setLED_Initialization@led stored from wreg
 11873  1D42  0020               	movlb	0	; select bank0
 11874  1D43  00A5               	movwf	setLED_Initialization@led
 11875                           
 11876                           ;LED_B1.c: 75: LedPointSelect(led);
 11877  1D44  0825               	movf	setLED_Initialization@led,w
 11878  1D45  319C  2435  319D   	fcall	_LedPointSelect
 11879                           
 11880                           ;LED_B1.c: 76: LED->Enable = 1;
 11881  1D48  0021               	movlb	1	; select bank1
 11882  1D49  0850               	movf	_LED^(0+128),w
 11883  1D4A  0086               	movwf	6
 11884  1D4B  3001               	movlw	1	; select bank2/3
 11885  1D4C  0087               	movwf	7
 11886  1D4D  1401               	bsf	1,0
 11887                           
 11888                           ;LED_B1.c: 77: setLED(led, 0);
 11889  1D4E  0020               	movlb	0	; select bank0
 11890  1D4F  01A3               	clrf	setLED@command
 11891  1D50  0825               	movf	setLED_Initialization@led,w
 11892  1D51  3193  2301         	fcall	_setLED
 11893  1D53  0008               	return
 11894  1D54                     __end_of_setLED_Initialization:	
 11895                           
 11896                           	psect	text76
 11897  1225                     __ptext76:	
 11898 ;; *************** function _Flash_Memory_Main *****************
 11899 ;; Defined at:
 11900 ;;		line 971 in file "../src/MCU_B1.c"
 11901 ;; Parameters:    Size  Location     Type
 11902 ;;		None
 11903 ;; Auto vars:     Size  Location     Type
 11904 ;;		None
 11905 ;; Return value:  Size  Location     Type
 11906 ;;		None               void
 11907 ;; Registers used:
 11908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11909 ;; Tracked objects:
 11910 ;;		On entry : 0/0
 11911 ;;		On exit  : 0/0
 11912 ;;		Unchanged: 0/0
 11913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;Total ram usage:        1 bytes
 11919 ;; Hardware stack levels used:    1
 11920 ;; Hardware stack levels required when called:    8
 11921 ;; This function calls:
 11922 ;;		_Flash_Memory_Modify
 11923 ;;		_getMain_All_LightsStatus
 11924 ;; This function is called by:
 11925 ;;		_main
 11926 ;; This function uses a non-reentrant model
 11927 ;;
 11928                           
 11929                           
 11930                           ;psect for function _Flash_Memory_Main
 11931  1225                     _Flash_Memory_Main:	
 11932                           
 11933                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 11934                           
 11935                           ;incstack = 0
 11936                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11937  1225  0023               	movlb	3	; select bank3
 11938  1226  1C62               	btfss	(_Memory^(0+384)+36),0
 11939  1227  0008               	return
 11940                           
 11941                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11942  1228  319B  23B8  3192   	fcall	_getMain_All_LightsStatus
 11943  122B  3A00               	xorlw	0
 11944  122C  3000               	movlw	0
 11945  122D  1903               	skipnz
 11946  122E  3001               	movlw	1
 11947  122F  0020               	movlb	0	; select bank0
 11948  1230  00A7               	movwf	??_Flash_Memory_Main
 11949  1231  0DA7               	rlf	??_Flash_Memory_Main,f
 11950  1232  0023               	movlb	3	; select bank3
 11951  1233  0862               	movf	(_Memory^(0+384)+36),w
 11952  1234  0020               	movlb	0	; select bank0
 11953  1235  0627               	xorwf	??_Flash_Memory_Main,w
 11954  1236  39FD               	andlw	-3
 11955  1237  0627               	xorwf	??_Flash_Memory_Main,w
 11956  1238  0023               	movlb	3	; select bank3
 11957  1239  00E2               	movwf	(_Memory^(0+384)+36)
 11958                           
 11959                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 11960  123A  1CE2               	btfss	(_Memory^(0+384)+36),1
 11961  123B  2A55               	goto	l1231
 11962                           
 11963                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 11964  123C  15E2               	bsf	(_Memory^(0+384)+36),3
 11965                           
 11966                           ;MCU_B1.c: 976: Memory.Time++;
 11967  123D  3001               	movlw	1
 11968  123E  07E0               	addwf	(_Memory^(0+384)+34),f
 11969  123F  3000               	movlw	0
 11970  1240  3DE1               	addwfc	((_Memory+1)^(0+384)+34),f
 11971                           
 11972                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 11973  1241  3022               	movlw	34
 11974  1242  3EBE               	addlw	_Memory& (0+255)
 11975  1243  0086               	movwf	6
 11976  1244  3001               	movlw	1	; select bank3/4
 11977  1245  0087               	movwf	7
 11978  1246  3F40               	moviw [0]fsr1
 11979  1247  3A0A               	xorlw	10
 11980  1248  1D03               	skipz
 11981  1249  2A4C               	goto	u9615
 11982  124A  3F41               	moviw [1]fsr1
 11983  124B  3A00               	xorlw	0
 11984  124C                     u9615:	
 11985  124C  1D03               	skipz
 11986  124D  0008               	return
 11987                           
 11988                           ;MCU_B1.c: 978: Memory.Time = 0;
 11989  124E  01E0               	clrf	(_Memory^(0+384)+34)
 11990  124F  01E1               	clrf	((_Memory+1)^(0+384)+34)
 11991                           
 11992                           ;MCU_B1.c: 979: Memory.Modify = 0;
 11993  1250  1062               	bcf	(_Memory^(0+384)+36),0
 11994                           
 11995                           ;MCU_B1.c: 980: Memory.GO = 0;
 11996  1251  10E2               	bcf	(_Memory^(0+384)+36),1
 11997                           
 11998                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 11999  1252  3195  2516         	fcall	_Flash_Memory_Modify
 12000                           
 12001                           ;MCU_B1.c: 982: }
 12002                           ;MCU_B1.c: 983: } else {
 12003  1254  0008               	return
 12004  1255                     l1231:	
 12005                           
 12006                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 12007  1255  1DE2               	btfss	(_Memory^(0+384)+36),3
 12008  1256  0008               	return
 12009                           
 12010                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 12011  1257  11E2               	bcf	(_Memory^(0+384)+36),3
 12012                           
 12013                           ;MCU_B1.c: 986: Memory.Time = 0;
 12014  1258  01E0               	clrf	(_Memory^(0+384)+34)
 12015  1259  01E1               	clrf	((_Memory+1)^(0+384)+34)
 12016  125A  0008               	return
 12017  125B                     __end_of_Flash_Memory_Main:	
 12018                           
 12019                           	psect	text77
 12020  1516                     __ptext77:	
 12021 ;; *************** function _Flash_Memory_Modify *****************
 12022 ;; Defined at:
 12023 ;;		line 1044 in file "../src/MCU_B1.c"
 12024 ;; Parameters:    Size  Location     Type
 12025 ;;		None
 12026 ;; Auto vars:     Size  Location     Type
 12027 ;;  i               1    6[BANK0 ] unsigned char 
 12028 ;; Return value:  Size  Location     Type
 12029 ;;		None               void
 12030 ;; Registers used:
 12031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;Total ram usage:        2 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    7
 12044 ;; This function calls:
 12045 ;;		_Flash_Memory_Erasing
 12046 ;;		_Flash_Memory_Read
 12047 ;;		_Flash_Memory_Write
 12048 ;;		_setMemory_Data
 12049 ;; This function is called by:
 12050 ;;		_Flash_Memory_Main
 12051 ;; This function uses a non-reentrant model
 12052 ;;
 12053                           
 12054                           
 12055                           ;psect for function _Flash_Memory_Modify
 12056  1516                     _Flash_Memory_Modify:	
 12057                           
 12058                           ;MCU_B1.c: 1045: char i = 0;
 12059                           
 12060                           ;incstack = 0
 12061                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12062  1516  0020               	movlb	0	; select bank0
 12063  1517  01A6               	clrf	Flash_Memory_Modify@i
 12064                           
 12065                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12066  1518  01A6               	clrf	Flash_Memory_Modify@i
 12067  1519  3020               	movlw	32
 12068  151A  0226               	subwf	Flash_Memory_Modify@i,w
 12069  151B  1803               	btfsc	3,0
 12070  151C  2D32               	goto	l7226
 12071  151D                     l7220:	
 12072                           
 12073                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12074  151D  0826               	movf	Flash_Memory_Modify@i,w
 12075  151E  319E  26E7  3195   	fcall	_Flash_Memory_Read
 12076  1521  0020               	movlb	0	; select bank0
 12077  1522  00A5               	movwf	??_Flash_Memory_Modify
 12078  1523  0826               	movf	Flash_Memory_Modify@i,w
 12079  1524  3EBE               	addlw	_Memory& (0+255)
 12080  1525  0086               	movwf	6
 12081  1526  3001               	movlw	1	; select bank3/4
 12082  1527  0087               	movwf	7
 12083  1528  0825               	movf	??_Flash_Memory_Modify,w
 12084  1529  0081               	movwf	1
 12085  152A  3001               	movlw	1
 12086  152B  00A5               	movwf	??_Flash_Memory_Modify
 12087  152C  0825               	movf	??_Flash_Memory_Modify,w
 12088  152D  07A6               	addwf	Flash_Memory_Modify@i,f
 12089  152E  3020               	movlw	32
 12090  152F  0226               	subwf	Flash_Memory_Modify@i,w
 12091  1530  1C03               	skipc
 12092  1531  2D1D               	goto	l7220
 12093  1532                     l7226:	
 12094                           
 12095                           ;MCU_B1.c: 1048: }
 12096                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12097  1532  0021               	movlb	1	; select bank1
 12098  1533  086D               	movf	_product^(0+128),w
 12099  1534  0086               	movwf	6
 12100  1535  3002               	movlw	2	; select bank4/5
 12101  1536  0087               	movwf	7
 12102  1537  3002               	movlw	2	; select bank4/5
 12103  1538  3F4C               	moviw [12]fsr1
 12104  1539  0020               	movlb	0	; select bank0
 12105  153A  00A1               	movwf	setMemory_Data@data
 12106  153B  3000               	movlw	0
 12107  153C  319C  2441  3195   	fcall	_setMemory_Data
 12108                           
 12109                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12110  153F  0021               	movlb	1	; select bank1
 12111  1540  086D               	movf	_product^(0+128),w
 12112  1541  0086               	movwf	6
 12113  1542  3002               	movlw	2	; select bank4/5
 12114  1543  0087               	movwf	7
 12115  1544  3002               	movlw	2	; select bank4/5
 12116  1545  3F4D               	moviw [13]fsr1
 12117  1546  0020               	movlb	0	; select bank0
 12118  1547  00A1               	movwf	setMemory_Data@data
 12119  1548  3001               	movlw	1
 12120  1549  319C  2441  3195   	fcall	_setMemory_Data
 12121                           
 12122                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12123  154C  0021               	movlb	1	; select bank1
 12124  154D  086D               	movf	_product^(0+128),w
 12125  154E  0086               	movwf	6
 12126  154F  3002               	movlw	2	; select bank4/5
 12127  1550  0087               	movwf	7
 12128  1551  3002               	movlw	2	; select bank4/5
 12129  1552  3F4E               	moviw [14]fsr1
 12130  1553  0020               	movlb	0	; select bank0
 12131  1554  00A1               	movwf	setMemory_Data@data
 12132  1555  3002               	movlw	2
 12133  1556  319C  2441  3195   	fcall	_setMemory_Data
 12134                           
 12135                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12136  1559  0023               	movlb	3	; select bank3
 12137  155A  1D62               	btfss	(_Memory^(0+384)+36),2
 12138  155B  2D60               	goto	l1254
 12139                           
 12140                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12141  155C  1162               	bcf	(_Memory^(0+384)+36),2
 12142                           
 12143                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12144  155D  0022               	movlb	2	; select bank2
 12145  155E  11A0               	bcf	_myMain^(0+256),3
 12146                           
 12147                           ;MCU_B1.c: 1060: myMain.First = 0;
 12148  155F  12A0               	bcf	_myMain^(0+256),5
 12149  1560                     l1254:	
 12150                           
 12151                           ;MCU_B1.c: 1062: }
 12152                           ;MCU_B1.c: 1063: GIE = 0;
 12153  1560  138B               	bcf	11,7	;volatile
 12154                           
 12155                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12156  1561  319C  244D  3195   	fcall	_Flash_Memory_Erasing
 12157                           
 12158                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12159  1564  3191  218E         	fcall	_Flash_Memory_Write
 12160                           
 12161                           ;MCU_B1.c: 1066: GIE = 1;
 12162  1566  178B               	bsf	11,7	;volatile
 12163  1567  0008               	return
 12164  1568                     __end_of_Flash_Memory_Modify:	
 12165                           
 12166                           	psect	text78
 12167  1C4D                     __ptext78:	
 12168 ;; *************** function _Flash_Memory_Erasing *****************
 12169 ;; Defined at:
 12170 ;;		line 1033 in file "../src/MCU_B1.c"
 12171 ;; Parameters:    Size  Location     Type
 12172 ;;		None
 12173 ;; Auto vars:     Size  Location     Type
 12174 ;;		None
 12175 ;; Return value:  Size  Location     Type
 12176 ;;		None               void
 12177 ;; Registers used:
 12178 ;;		wreg, status,2, status,0, pclath, cstack
 12179 ;; Tracked objects:
 12180 ;;		On entry : 0/0
 12181 ;;		On exit  : 0/0
 12182 ;;		Unchanged: 0/0
 12183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;Total ram usage:        0 bytes
 12189 ;; Hardware stack levels used:    1
 12190 ;; Hardware stack levels required when called:    6
 12191 ;; This function calls:
 12192 ;;		_Flash_Memory_Unlock
 12193 ;; This function is called by:
 12194 ;;		_Flash_Memory_Modify
 12195 ;; This function uses a non-reentrant model
 12196 ;;
 12197                           
 12198                           
 12199                           ;psect for function _Flash_Memory_Erasing
 12200  1C4D                     _Flash_Memory_Erasing:	
 12201                           
 12202                           ;MCU_B1.c: 1034: CFGS = 0;
 12203                           
 12204                           ;incstack = 0
 12205                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12206  1C4D  0023               	movlb	3	; select bank3
 12207  1C4E  1315               	bcf	21,6	;volatile
 12208                           
 12209                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12210  1C4F  3030               	movlw	48
 12211  1C50  0092               	movwf	18	;volatile
 12212                           
 12213                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12214  1C51  0191               	clrf	17	;volatile
 12215                           
 12216                           ;MCU_B1.c: 1037: FREE = 1;
 12217  1C52  1615               	bsf	21,4	;volatile
 12218                           
 12219                           ;MCU_B1.c: 1038: WREN = 1;
 12220  1C53  1515               	bsf	21,2	;volatile
 12221                           
 12222                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12223  1C54  319B  23AF         	fcall	_Flash_Memory_Unlock
 12224                           
 12225                           ;MCU_B1.c: 1040: WREN = 0;
 12226  1C56  0023               	movlb	3	; select bank3
 12227  1C57  1115               	bcf	21,2	;volatile
 12228  1C58  0008               	return
 12229  1C59                     __end_of_Flash_Memory_Erasing:	
 12230                           
 12231                           	psect	text79
 12232  0476                     __ptext79:	
 12233 ;; *************** function _Flash_Memory_Initialization *****************
 12234 ;; Defined at:
 12235 ;;		line 930 in file "../src/MCU_B1.c"
 12236 ;; Parameters:    Size  Location     Type
 12237 ;;		None
 12238 ;; Auto vars:     Size  Location     Type
 12239 ;;  i               1   68[BANK0 ] unsigned char 
 12240 ;; Return value:  Size  Location     Type
 12241 ;;		None               void
 12242 ;; Registers used:
 12243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12244 ;; Tracked objects:
 12245 ;;		On entry : 0/0
 12246 ;;		On exit  : 0/0
 12247 ;;		Unchanged: 0/0
 12248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;Total ram usage:        2 bytes
 12254 ;; Hardware stack levels used:    1
 12255 ;; Hardware stack levels required when called:    8
 12256 ;; This function calls:
 12257 ;;		_Flash_Memory_Read
 12258 ;;		_Flash_Memory_Write
 12259 ;;		_getDimmerLights_ValueToPercent
 12260 ;;		_setMemory_Data
 12261 ;; This function is called by:
 12262 ;;		_main
 12263 ;; This function uses a non-reentrant model
 12264 ;;
 12265                           
 12266                           
 12267                           ;psect for function _Flash_Memory_Initialization
 12268  0476                     _Flash_Memory_Initialization:	
 12269                           
 12270                           ;MCU_B1.c: 931: char i = 0;
 12271                           
 12272                           ;incstack = 0
 12273                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12274  0476  0020               	movlb	0	; select bank0
 12275  0477  01E4               	clrf	Flash_Memory_Initialization@i
 12276                           
 12277                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12278  0478  301F               	movlw	31
 12279  0479  319E  26E7  3184   	fcall	_Flash_Memory_Read
 12280  047C  3AAA               	xorlw	170
 12281  047D  1D03               	skipz
 12282  047E  2CF5               	goto	l7618
 12283                           
 12284                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12285  047F  3000               	movlw	0
 12286  0480  319E  26E7  3184   	fcall	_Flash_Memory_Read
 12287  0483  0020               	movlb	0	; select bank0
 12288  0484  00E3               	movwf	??_Flash_Memory_Initialization
 12289  0485  0021               	movlb	1	; select bank1
 12290  0486  086D               	movf	_product^(0+128),w
 12291  0487  3E0C               	addlw	12
 12292  0488  0086               	movwf	6
 12293  0489  3002               	movlw	2	; select bank4/5
 12294  048A  0087               	movwf	7
 12295  048B  0020               	movlb	0	; select bank0
 12296  048C  0863               	movf	??_Flash_Memory_Initialization,w
 12297  048D  0081               	movwf	1
 12298                           
 12299                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12300  048E  3001               	movlw	1
 12301  048F  319E  26E7  3184   	fcall	_Flash_Memory_Read
 12302  0492  0020               	movlb	0	; select bank0
 12303  0493  00E3               	movwf	??_Flash_Memory_Initialization
 12304  0494  0021               	movlb	1	; select bank1
 12305  0495  086D               	movf	_product^(0+128),w
 12306  0496  3E0D               	addlw	13
 12307  0497  0086               	movwf	6
 12308  0498  3002               	movlw	2	; select bank4/5
 12309  0499  0087               	movwf	7
 12310  049A  0020               	movlb	0	; select bank0
 12311  049B  0863               	movf	??_Flash_Memory_Initialization,w
 12312  049C  0081               	movwf	1
 12313                           
 12314                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12315  049D  3002               	movlw	2
 12316  049E  319E  26E7  3184   	fcall	_Flash_Memory_Read
 12317  04A1  0020               	movlb	0	; select bank0
 12318  04A2  00E3               	movwf	??_Flash_Memory_Initialization
 12319  04A3  0021               	movlb	1	; select bank1
 12320  04A4  086D               	movf	_product^(0+128),w
 12321  04A5  3E0E               	addlw	14
 12322  04A6  0086               	movwf	6
 12323  04A7  3002               	movlw	2	; select bank4/5
 12324  04A8  0087               	movwf	7
 12325  04A9  0020               	movlb	0	; select bank0
 12326  04AA  0863               	movf	??_Flash_Memory_Initialization,w
 12327  04AB  0081               	movwf	1
 12328                           
 12329                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(65*0.78)));
 12330  04AC  3032               	movlw	50
 12331  04AD  3196  26D1  3184   	fcall	_getDimmerLights_ValueToPercent
 12332  04B0  0020               	movlb	0	; select bank0
 12333  04B1  00E3               	movwf	??_Flash_Memory_Initialization
 12334  04B2  0863               	movf	??_Flash_Memory_Initialization,w
 12335  04B3  00E4               	movwf	Flash_Memory_Initialization@i
 12336                           
 12337                           ;MCU_B1.c: 942: product->Data[21] = i;
 12338  04B4  0864               	movf	Flash_Memory_Initialization@i,w
 12339  04B5  00E3               	movwf	??_Flash_Memory_Initialization
 12340  04B6  0021               	movlb	1	; select bank1
 12341  04B7  086D               	movf	_product^(0+128),w
 12342  04B8  3E15               	addlw	21
 12343  04B9  0086               	movwf	6
 12344  04BA  3002               	movlw	2	; select bank4/5
 12345  04BB  0087               	movwf	7
 12346  04BC  0020               	movlb	0	; select bank0
 12347  04BD  0863               	movf	??_Flash_Memory_Initialization,w
 12348  04BE  0081               	movwf	1
 12349                           
 12350                           ;MCU_B1.c: 943: product->Data[22] = i;
 12351  04BF  0864               	movf	Flash_Memory_Initialization@i,w
 12352  04C0  00E3               	movwf	??_Flash_Memory_Initialization
 12353  04C1  0021               	movlb	1	; select bank1
 12354  04C2  086D               	movf	_product^(0+128),w
 12355  04C3  3E16               	addlw	22
 12356  04C4  0086               	movwf	6
 12357  04C5  3002               	movlw	2	; select bank4/5
 12358  04C6  0087               	movwf	7
 12359  04C7  0020               	movlb	0	; select bank0
 12360  04C8  0863               	movf	??_Flash_Memory_Initialization,w
 12361  04C9  0081               	movwf	1
 12362                           
 12363                           ;MCU_B1.c: 944: product->Data[23] = i;
 12364  04CA  0864               	movf	Flash_Memory_Initialization@i,w
 12365  04CB  00E3               	movwf	??_Flash_Memory_Initialization
 12366  04CC  0021               	movlb	1	; select bank1
 12367  04CD  086D               	movf	_product^(0+128),w
 12368  04CE  3E17               	addlw	23
 12369  04CF  0086               	movwf	6
 12370  04D0  3002               	movlw	2	; select bank4/5
 12371  04D1  0087               	movwf	7
 12372  04D2  0020               	movlb	0	; select bank0
 12373  04D3  0863               	movf	??_Flash_Memory_Initialization,w
 12374  04D4  0081               	movwf	1
 12375                           
 12376                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12377  04D5  0021               	movlb	1	; select bank1
 12378  04D6  086D               	movf	_product^(0+128),w
 12379  04D7  3E0C               	addlw	12
 12380  04D8  0086               	movwf	6
 12381  04D9  3002               	movlw	2	; select bank4/5
 12382  04DA  0087               	movwf	7
 12383  04DB  0801               	movf	1,w
 12384  04DC  3AFF               	xorlw	255
 12385  04DD  1D03               	skipz
 12386  04DE  0008               	return
 12387  04DF  086D               	movf	_product^(0+128),w
 12388  04E0  3E0D               	addlw	13
 12389  04E1  0086               	movwf	6
 12390  04E2  3002               	movlw	2	; select bank4/5
 12391  04E3  0087               	movwf	7
 12392  04E4  0801               	movf	1,w
 12393  04E5  3AFF               	xorlw	255
 12394  04E6  1D03               	skipz
 12395  04E7  0008               	return
 12396  04E8  086D               	movf	_product^(0+128),w
 12397  04E9  3E0E               	addlw	14
 12398  04EA  0086               	movwf	6
 12399  04EB  3002               	movlw	2	; select bank4/5
 12400  04EC  0087               	movwf	7
 12401  04ED  0801               	movf	1,w
 12402  04EE  3AFF               	xorlw	255
 12403  04EF  1D03               	skipz
 12404  04F0  0008               	return
 12405                           
 12406                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12407  04F1  0022               	movlb	2	; select bank2
 12408  04F2  15A0               	bsf	_myMain^(0+256),3
 12409                           
 12410                           ;MCU_B1.c: 948: myMain.First = 1;
 12411  04F3  16A0               	bsf	_myMain^(0+256),5
 12412                           
 12413                           ;MCU_B1.c: 949: }
 12414                           ;MCU_B1.c: 950: } else {
 12415  04F4  0008               	return
 12416  04F5                     l7618:	
 12417                           
 12418                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(65*0.78)));
 12419  04F5  3032               	movlw	50
 12420  04F6  3196  26D1  3184   	fcall	_getDimmerLights_ValueToPercent
 12421  04F9  0020               	movlb	0	; select bank0
 12422  04FA  00E3               	movwf	??_Flash_Memory_Initialization
 12423  04FB  0863               	movf	??_Flash_Memory_Initialization,w
 12424  04FC  00E4               	movwf	Flash_Memory_Initialization@i
 12425                           
 12426                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12427  04FD  30FF               	movlw	255
 12428  04FE  00E3               	movwf	??_Flash_Memory_Initialization
 12429  04FF  0863               	movf	??_Flash_Memory_Initialization,w
 12430  0500  00A1               	movwf	setMemory_Data@data
 12431  0501  3000               	movlw	0
 12432  0502  319C  2441  3184   	fcall	_setMemory_Data
 12433                           
 12434                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12435  0505  30FF               	movlw	255
 12436  0506  0020               	movlb	0	; select bank0
 12437  0507  00E3               	movwf	??_Flash_Memory_Initialization
 12438  0508  0863               	movf	??_Flash_Memory_Initialization,w
 12439  0509  00A1               	movwf	setMemory_Data@data
 12440  050A  3001               	movlw	1
 12441  050B  319C  2441  3184   	fcall	_setMemory_Data
 12442                           
 12443                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12444  050E  30FF               	movlw	255
 12445  050F  0020               	movlb	0	; select bank0
 12446  0510  00E3               	movwf	??_Flash_Memory_Initialization
 12447  0511  0863               	movf	??_Flash_Memory_Initialization,w
 12448  0512  00A1               	movwf	setMemory_Data@data
 12449  0513  3002               	movlw	2
 12450  0514  319C  2441  3184   	fcall	_setMemory_Data
 12451                           
 12452                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12453  0517  30FF               	movlw	255
 12454  0518  0020               	movlb	0	; select bank0
 12455  0519  00E3               	movwf	??_Flash_Memory_Initialization
 12456  051A  0863               	movf	??_Flash_Memory_Initialization,w
 12457  051B  00A1               	movwf	setMemory_Data@data
 12458  051C  3003               	movlw	3
 12459  051D  319C  2441  3184   	fcall	_setMemory_Data
 12460                           
 12461                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12462  0520  30FF               	movlw	255
 12463  0521  0020               	movlb	0	; select bank0
 12464  0522  00E3               	movwf	??_Flash_Memory_Initialization
 12465  0523  0863               	movf	??_Flash_Memory_Initialization,w
 12466  0524  00A1               	movwf	setMemory_Data@data
 12467  0525  3004               	movlw	4
 12468  0526  319C  2441  3184   	fcall	_setMemory_Data
 12469                           
 12470                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12471  0529  30FF               	movlw	255
 12472  052A  0020               	movlb	0	; select bank0
 12473  052B  00E3               	movwf	??_Flash_Memory_Initialization
 12474  052C  0863               	movf	??_Flash_Memory_Initialization,w
 12475  052D  00A1               	movwf	setMemory_Data@data
 12476  052E  3005               	movlw	5
 12477  052F  319C  2441  3184   	fcall	_setMemory_Data
 12478                           
 12479                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12480  0532  30AA               	movlw	170
 12481  0533  0020               	movlb	0	; select bank0
 12482  0534  00E3               	movwf	??_Flash_Memory_Initialization
 12483  0535  0863               	movf	??_Flash_Memory_Initialization,w
 12484  0536  00A1               	movwf	setMemory_Data@data
 12485  0537  301F               	movlw	31
 12486  0538  319C  2441  3184   	fcall	_setMemory_Data
 12487                           
 12488                           ;MCU_B1.c: 959: product->Data[21] = i;
 12489  053B  0020               	movlb	0	; select bank0
 12490  053C  0864               	movf	Flash_Memory_Initialization@i,w
 12491  053D  00E3               	movwf	??_Flash_Memory_Initialization
 12492  053E  0021               	movlb	1	; select bank1
 12493  053F  086D               	movf	_product^(0+128),w
 12494  0540  3E15               	addlw	21
 12495  0541  0086               	movwf	6
 12496  0542  3002               	movlw	2	; select bank4/5
 12497  0543  0087               	movwf	7
 12498  0544  0020               	movlb	0	; select bank0
 12499  0545  0863               	movf	??_Flash_Memory_Initialization,w
 12500  0546  0081               	movwf	1
 12501                           
 12502                           ;MCU_B1.c: 960: product->Data[22] = i;
 12503  0547  0864               	movf	Flash_Memory_Initialization@i,w
 12504  0548  00E3               	movwf	??_Flash_Memory_Initialization
 12505  0549  0021               	movlb	1	; select bank1
 12506  054A  086D               	movf	_product^(0+128),w
 12507  054B  3E16               	addlw	22
 12508  054C  0086               	movwf	6
 12509  054D  3002               	movlw	2	; select bank4/5
 12510  054E  0087               	movwf	7
 12511  054F  0020               	movlb	0	; select bank0
 12512  0550  0863               	movf	??_Flash_Memory_Initialization,w
 12513  0551  0081               	movwf	1
 12514                           
 12515                           ;MCU_B1.c: 961: product->Data[23] = i;
 12516  0552  0864               	movf	Flash_Memory_Initialization@i,w
 12517  0553  00E3               	movwf	??_Flash_Memory_Initialization
 12518  0554  0021               	movlb	1	; select bank1
 12519  0555  086D               	movf	_product^(0+128),w
 12520  0556  3E17               	addlw	23
 12521  0557  0086               	movwf	6
 12522  0558  3002               	movlw	2	; select bank4/5
 12523  0559  0087               	movwf	7
 12524  055A  0020               	movlb	0	; select bank0
 12525  055B  0863               	movf	??_Flash_Memory_Initialization,w
 12526  055C  0081               	movwf	1
 12527                           
 12528                           ;MCU_B1.c: 962: GIE = 0;
 12529  055D  138B               	bcf	11,7	;volatile
 12530                           
 12531                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12532  055E  3191  218E         	fcall	_Flash_Memory_Write
 12533                           
 12534                           ;MCU_B1.c: 964: GIE = 1;
 12535  0560  178B               	bsf	11,7	;volatile
 12536                           
 12537                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12538  0561  0022               	movlb	2	; select bank2
 12539  0562  15A0               	bsf	_myMain^(0+256),3
 12540                           
 12541                           ;MCU_B1.c: 966: myMain.First = 1;
 12542  0563  16A0               	bsf	_myMain^(0+256),5
 12543  0564  0008               	return
 12544  0565                     __end_of_Flash_Memory_Initialization:	
 12545                           
 12546                           	psect	text80
 12547  1C41                     __ptext80:	
 12548 ;; *************** function _setMemory_Data *****************
 12549 ;; Defined at:
 12550 ;;		line 1081 in file "../src/MCU_B1.c"
 12551 ;; Parameters:    Size  Location     Type
 12552 ;;  address         1    wreg     unsigned char 
 12553 ;;  data            1    1[BANK0 ] unsigned char 
 12554 ;; Auto vars:     Size  Location     Type
 12555 ;;  address         1    3[BANK0 ] unsigned char 
 12556 ;; Return value:  Size  Location     Type
 12557 ;;		None               void
 12558 ;; Registers used:
 12559 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12560 ;; Tracked objects:
 12561 ;;		On entry : 0/0
 12562 ;;		On exit  : 0/0
 12563 ;;		Unchanged: 0/0
 12564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12565 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12568 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12569 ;;Total ram usage:        3 bytes
 12570 ;; Hardware stack levels used:    1
 12571 ;; Hardware stack levels required when called:    5
 12572 ;; This function calls:
 12573 ;;		Nothing
 12574 ;; This function is called by:
 12575 ;;		_Flash_Memory_Initialization
 12576 ;;		_Flash_Memory_Modify
 12577 ;; This function uses a non-reentrant model
 12578 ;;
 12579                           
 12580                           
 12581                           ;psect for function _setMemory_Data
 12582  1C41                     _setMemory_Data:	
 12583                           
 12584                           ;incstack = 0
 12585                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12586                           ;setMemory_Data@address stored from wreg
 12587  1C41  0020               	movlb	0	; select bank0
 12588  1C42  00A3               	movwf	setMemory_Data@address
 12589                           
 12590                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12591  1C43  0821               	movf	setMemory_Data@data,w
 12592  1C44  00A2               	movwf	??_setMemory_Data
 12593  1C45  0823               	movf	setMemory_Data@address,w
 12594  1C46  3EBE               	addlw	_Memory& (0+255)
 12595  1C47  0086               	movwf	6
 12596  1C48  3001               	movlw	1	; select bank3/4
 12597  1C49  0087               	movwf	7
 12598  1C4A  0822               	movf	??_setMemory_Data,w
 12599  1C4B  0081               	movwf	1
 12600  1C4C  0008               	return
 12601  1C4D                     __end_of_setMemory_Data:	
 12602                           
 12603                           	psect	text81
 12604  118E                     __ptext81:	
 12605 ;; *************** function _Flash_Memory_Write *****************
 12606 ;; Defined at:
 12607 ;;		line 1014 in file "../src/MCU_B1.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;  i               1    2[BANK0 ] unsigned char 
 12612 ;; Return value:  Size  Location     Type
 12613 ;;		None               void
 12614 ;; Registers used:
 12615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;Total ram usage:        2 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    6
 12628 ;; This function calls:
 12629 ;;		_Flash_Memory_Unlock
 12630 ;; This function is called by:
 12631 ;;		_Flash_Memory_Initialization
 12632 ;;		_Flash_Memory_Modify
 12633 ;; This function uses a non-reentrant model
 12634 ;;
 12635                           
 12636                           
 12637                           ;psect for function _Flash_Memory_Write
 12638  118E                     _Flash_Memory_Write:	
 12639                           
 12640                           ;MCU_B1.c: 1015: char i = 0;
 12641                           
 12642                           ;incstack = 0
 12643                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12644  118E  0020               	movlb	0	; select bank0
 12645  118F  01A2               	clrf	Flash_Memory_Write@i
 12646                           
 12647                           ;MCU_B1.c: 1016: CFGS = 0;
 12648  1190  0023               	movlb	3	; select bank3
 12649  1191  1315               	bcf	21,6	;volatile
 12650                           
 12651                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12652  1192  3030               	movlw	48
 12653  1193  0092               	movwf	18	;volatile
 12654                           
 12655                           ;MCU_B1.c: 1018: PMDATH = 0;
 12656  1194  0194               	clrf	20	;volatile
 12657                           
 12658                           ;MCU_B1.c: 1019: FREE = 0;
 12659  1195  1215               	bcf	21,4	;volatile
 12660                           
 12661                           ;MCU_B1.c: 1020: LWLO = 1;
 12662  1196  1695               	bsf	21,5	;volatile
 12663                           
 12664                           ;MCU_B1.c: 1021: WREN = 1;
 12665  1197  1515               	bsf	21,2	;volatile
 12666                           
 12667                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12668  1198  0020               	movlb	0	; select bank0
 12669  1199  01A2               	clrf	Flash_Memory_Write@i
 12670  119A  3020               	movlw	32
 12671  119B  0222               	subwf	Flash_Memory_Write@i,w
 12672  119C  1803               	btfsc	3,0
 12673  119D  29B6               	goto	l1245
 12674  119E                     l6806:	
 12675                           
 12676                           ;MCU_B1.c: 1023: PMADRL = i;
 12677  119E  0822               	movf	Flash_Memory_Write@i,w
 12678  119F  0023               	movlb	3	; select bank3
 12679  11A0  0091               	movwf	17	;volatile
 12680                           
 12681                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12682  11A1  0020               	movlb	0	; select bank0
 12683  11A2  0822               	movf	Flash_Memory_Write@i,w
 12684  11A3  3EBE               	addlw	_Memory& (0+255)
 12685  11A4  0086               	movwf	6
 12686  11A5  3001               	movlw	1	; select bank3/4
 12687  11A6  0087               	movwf	7
 12688  11A7  0801               	movf	1,w
 12689  11A8  0023               	movlb	3	; select bank3
 12690  11A9  0093               	movwf	19	;volatile
 12691                           
 12692                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12693  11AA  319B  23AF  3191   	fcall	_Flash_Memory_Unlock
 12694  11AD  3001               	movlw	1
 12695  11AE  0020               	movlb	0	; select bank0
 12696  11AF  00A1               	movwf	??_Flash_Memory_Write
 12697  11B0  0821               	movf	??_Flash_Memory_Write,w
 12698  11B1  07A2               	addwf	Flash_Memory_Write@i,f
 12699  11B2  3020               	movlw	32
 12700  11B3  0222               	subwf	Flash_Memory_Write@i,w
 12701  11B4  1C03               	skipc
 12702  11B5  299E               	goto	l6806
 12703  11B6                     l1245:	
 12704                           
 12705                           ;MCU_B1.c: 1026: }
 12706                           ;MCU_B1.c: 1027: LWLO = 0;
 12707  11B6  0023               	movlb	3	; select bank3
 12708  11B7  1295               	bcf	21,5	;volatile
 12709                           
 12710                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12711  11B8  319B  23AF         	fcall	_Flash_Memory_Unlock
 12712                           
 12713                           ;MCU_B1.c: 1029: WREN = 0;
 12714  11BA  0023               	movlb	3	; select bank3
 12715  11BB  1115               	bcf	21,2	;volatile
 12716  11BC  0008               	return
 12717  11BD                     __end_of_Flash_Memory_Write:	
 12718                           
 12719                           	psect	text82
 12720  1BAF                     __ptext82:	
 12721 ;; *************** function _Flash_Memory_Unlock *****************
 12722 ;; Defined at:
 12723 ;;		line 993 in file "../src/MCU_B1.c"
 12724 ;; Parameters:    Size  Location     Type
 12725 ;;		None
 12726 ;; Auto vars:     Size  Location     Type
 12727 ;;		None
 12728 ;; Return value:  Size  Location     Type
 12729 ;;		None               void
 12730 ;; Registers used:
 12731 ;;		wreg
 12732 ;; Tracked objects:
 12733 ;;		On entry : 0/0
 12734 ;;		On exit  : 0/0
 12735 ;;		Unchanged: 0/0
 12736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;Total ram usage:        0 bytes
 12742 ;; Hardware stack levels used:    1
 12743 ;; Hardware stack levels required when called:    5
 12744 ;; This function calls:
 12745 ;;		Nothing
 12746 ;; This function is called by:
 12747 ;;		_Flash_Memory_Write
 12748 ;;		_Flash_Memory_Erasing
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _Flash_Memory_Unlock
 12754  1BAF                     _Flash_Memory_Unlock:	
 12755                           
 12756                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12757                           
 12758                           ;incstack = 0
 12759                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12760  1BAF  3055               	movlw	85
 12761  1BB0  0023               	movlb	3	; select bank3
 12762  1BB1  0096               	movwf	22	;volatile
 12763                           
 12764                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12765  1BB2  30AA               	movlw	170
 12766  1BB3  0096               	movwf	22	;volatile
 12767                           
 12768                           ;MCU_B1.c: 996: WR = 1;
 12769  1BB4  1495               	bsf	21,1	;volatile
 12770                           
 12771                           ;MCU_B1.c: 997: __nop();
 12772  1BB5  0000               	nop
 12773                           
 12774                           ;MCU_B1.c: 998: __nop();
 12775  1BB6  0000               	nop
 12776  1BB7  0008               	return
 12777  1BB8                     __end_of_Flash_Memory_Unlock:	
 12778                           
 12779                           	psect	text83
 12780  1EE7                     __ptext83:	
 12781 ;; *************** function _Flash_Memory_Read *****************
 12782 ;; Defined at:
 12783 ;;		line 1002 in file "../src/MCU_B1.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;  address         1    wreg     unsigned char 
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;  address         1    3[BANK0 ] unsigned char 
 12788 ;;  ret             1    4[BANK0 ] unsigned char 
 12789 ;;  i               1    2[BANK0 ] unsigned char 
 12790 ;; Return value:  Size  Location     Type
 12791 ;;                  1    wreg      unsigned char 
 12792 ;; Registers used:
 12793 ;;		wreg, status,2
 12794 ;; Tracked objects:
 12795 ;;		On entry : 0/0
 12796 ;;		On exit  : 0/0
 12797 ;;		Unchanged: 0/0
 12798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12800 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12802 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12803 ;;Total ram usage:        4 bytes
 12804 ;; Hardware stack levels used:    1
 12805 ;; Hardware stack levels required when called:    5
 12806 ;; This function calls:
 12807 ;;		Nothing
 12808 ;; This function is called by:
 12809 ;;		_Flash_Memory_Initialization
 12810 ;;		_Flash_Memory_Modify
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           
 12815                           ;psect for function _Flash_Memory_Read
 12816  1EE7                     _Flash_Memory_Read:	
 12817                           
 12818                           ;incstack = 0
 12819                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12820                           ;Flash_Memory_Read@address stored from wreg
 12821  1EE7  0020               	movlb	0	; select bank0
 12822  1EE8  00A3               	movwf	Flash_Memory_Read@address
 12823                           
 12824                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 12825  1EE9  01A2               	clrf	Flash_Memory_Read@i
 12826  1EEA  01A4               	clrf	Flash_Memory_Read@ret
 12827                           
 12828                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 12829  1EEB  3030               	movlw	48
 12830  1EEC  0023               	movlb	3	; select bank3
 12831  1EED  0092               	movwf	18	;volatile
 12832                           
 12833                           ;MCU_B1.c: 1005: PMADRL = address;
 12834  1EEE  0020               	movlb	0	; select bank0
 12835  1EEF  0823               	movf	Flash_Memory_Read@address,w
 12836  1EF0  0023               	movlb	3	; select bank3
 12837  1EF1  0091               	movwf	17	;volatile
 12838                           
 12839                           ;MCU_B1.c: 1006: CFGS = 0;
 12840  1EF2  1315               	bcf	21,6	;volatile
 12841                           
 12842                           ;MCU_B1.c: 1007: RD = 1;
 12843  1EF3  1415               	bsf	21,0	;volatile
 12844                           
 12845                           ;MCU_B1.c: 1008: i = PMDATH;
 12846  1EF4  0814               	movf	20,w	;volatile
 12847  1EF5  0020               	movlb	0	; select bank0
 12848  1EF6  00A1               	movwf	??_Flash_Memory_Read
 12849  1EF7  0821               	movf	??_Flash_Memory_Read,w
 12850  1EF8  00A2               	movwf	Flash_Memory_Read@i
 12851                           
 12852                           ;MCU_B1.c: 1009: ret = PMDATL;
 12853  1EF9  0023               	movlb	3	; select bank3
 12854  1EFA  0813               	movf	19,w	;volatile
 12855  1EFB  0020               	movlb	0	; select bank0
 12856  1EFC  00A1               	movwf	??_Flash_Memory_Read
 12857  1EFD  0821               	movf	??_Flash_Memory_Read,w
 12858  1EFE  00A4               	movwf	Flash_Memory_Read@ret
 12859                           
 12860                           ;MCU_B1.c: 1010: return ret;
 12861  1EFF  0824               	movf	Flash_Memory_Read@ret,w
 12862  1F00  0008               	return
 12863  1F01                     __end_of_Flash_Memory_Read:	
 12864                           
 12865                           	psect	text84
 12866  063C                     __ptext84:	
 12867 ;; *************** function _Exception_Main *****************
 12868 ;; Defined at:
 12869 ;;		line 499 in file "../src/Main_B1.c"
 12870 ;; Parameters:    Size  Location     Type
 12871 ;;		None
 12872 ;; Auto vars:     Size  Location     Type
 12873 ;;  i               2   19[BANK0 ] int 
 12874 ;;  i               2   17[BANK0 ] int 
 12875 ;;  error           1   22[BANK0 ] unsigned char 
 12876 ;;  lights          1   21[BANK0 ] unsigned char 
 12877 ;;  count           1   16[BANK0 ] unsigned char 
 12878 ;;  status          1   15[BANK0 ] unsigned char 
 12879 ;; Return value:  Size  Location     Type
 12880 ;;		None               void
 12881 ;; Registers used:
 12882 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12883 ;; Tracked objects:
 12884 ;;		On entry : 0/0
 12885 ;;		On exit  : 0/0
 12886 ;;		Unchanged: 0/0
 12887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;Total ram usage:        9 bytes
 12893 ;; Hardware stack levels used:    1
 12894 ;; Hardware stack levels required when called:    7
 12895 ;; This function calls:
 12896 ;;		_getDimmerLights_Line
 12897 ;;		_getDimmerLights_Status
 12898 ;;		_getMain_All_Error_Status
 12899 ;;		_getMain_All_LightsStatus
 12900 ;;		_setBuz
 12901 ;;		_setDimmerLights_SwOff
 12902 ;;		_setLED
 12903 ;; This function is called by:
 12904 ;;		_main
 12905 ;; This function uses a non-reentrant model
 12906 ;;
 12907                           
 12908                           
 12909                           ;psect for function _Exception_Main
 12910  063C                     _Exception_Main:	
 12911                           
 12912                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 12913                           
 12914                           ;incstack = 0
 12915                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12916  063C  3000               	movlw	0
 12917  063D  3191  21BD  3186   	fcall	_getMain_All_Error_Status
 12918  0640  0020               	movlb	0	; select bank0
 12919  0641  00AE               	movwf	??_Exception_Main
 12920  0642  082E               	movf	??_Exception_Main,w
 12921  0643  00B6               	movwf	Exception_Main@error
 12922                           
 12923                           ;Main_B1.c: 501: char lights = 0, count = 1;
 12924  0644  01B5               	clrf	Exception_Main@lights
 12925  0645  01B0               	clrf	Exception_Main@count
 12926  0646  0AB0               	incf	Exception_Main@count,f
 12927                           
 12928                           ;Main_B1.c: 502: char status = 0;
 12929  0647  01AF               	clrf	Exception_Main@status
 12930                           
 12931                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 12932  0648  0022               	movlb	2	; select bank2
 12933  0649  1DAA               	btfss	(_myMain^(0+256)+10),3
 12934  064A  2E5A               	goto	l9054
 12935                           
 12936                           ;Main_B1.c: 505: if (error == 0) {
 12937  064B  0020               	movlb	0	; select bank0
 12938  064C  08B6               	movf	Exception_Main@error,f
 12939  064D  1D03               	skipz
 12940  064E  0008               	return
 12941                           
 12942                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 12943  064F  0022               	movlb	2	; select bank2
 12944  0650  11AA               	bcf	(_myMain^(0+256)+10),3
 12945                           
 12946                           ;Main_B1.c: 511: setLED(error, 110);
 12947  0651  306E               	movlw	110
 12948  0652  0020               	movlb	0	; select bank0
 12949  0653  00AE               	movwf	??_Exception_Main
 12950  0654  082E               	movf	??_Exception_Main,w
 12951  0655  00A3               	movwf	setLED@command
 12952  0656  0836               	movf	Exception_Main@error,w
 12953  0657  3193  2301         	fcall	_setLED
 12954                           
 12955                           ;Main_B1.c: 522: }
 12956                           ;Main_B1.c: 523: } else {
 12957  0659  0008               	return
 12958  065A                     l9054:	
 12959                           
 12960                           ;Main_B1.c: 524: if (error != 0) {
 12961  065A  0020               	movlb	0	; select bank0
 12962  065B  0836               	movf	Exception_Main@error,w
 12963  065C  1903               	btfsc	3,2
 12964  065D  0008               	return
 12965                           
 12966                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12967  065E  0022               	movlb	2	; select bank2
 12968  065F  15AA               	bsf	(_myMain^(0+256)+10),3
 12969                           
 12970                           ;Main_B1.c: 529: setLED(error, 111);
 12971  0660  306F               	movlw	111
 12972  0661  0020               	movlb	0	; select bank0
 12973  0662  00AE               	movwf	??_Exception_Main
 12974  0663  082E               	movf	??_Exception_Main,w
 12975  0664  00A3               	movwf	setLED@command
 12976  0665  0836               	movf	Exception_Main@error,w
 12977  0666  3193  2301  3186   	fcall	_setLED
 12978                           
 12979                           ;Main_B1.c: 538: switch (error) {
 12980  0669  2F06               	goto	l9102
 12981  066A                     l9060:	
 12982                           ;Main_B1.c: 539: case 2:
 12983                           
 12984                           
 12985                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 12986  066A  319B  23B8  3186   	fcall	_getMain_All_LightsStatus
 12987  066D  3A01               	xorlw	1
 12988  066E  1D03               	skipz
 12989  066F  2E79               	goto	l9064
 12990                           
 12991                           ;Main_B1.c: 547: setBuz(10, 300);
 12992  0670  302C               	movlw	44
 12993  0671  0020               	movlb	0	; select bank0
 12994  0672  00AA               	movwf	setBuz@time
 12995  0673  3001               	movlw	1
 12996  0674  00AB               	movwf	setBuz@time+1
 12997  0675  300A               	movlw	10
 12998  0676  3195  25BC  3186   	fcall	_setBuz
 12999  0679                     l9064:	
 13000                           
 13001                           ;Main_B1.c: 548: }
 13002                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13003  0679  0020               	movlb	0	; select bank0
 13004  067A  01B1               	clrf	Exception_Main@i
 13005  067B  01B2               	clrf	Exception_Main@i+1
 13006  067C                     l9074:	
 13007  067C  0832               	movf	Exception_Main@i+1,w
 13008  067D  3A80               	xorlw	128
 13009  067E  00AE               	movwf	??_Exception_Main
 13010  067F  3080               	movlw	128
 13011  0680  022E               	subwf	??_Exception_Main,w
 13012  0681  1D03               	skipz
 13013  0682  2E85               	goto	u10045
 13014  0683  0830               	movf	Exception_Main@count,w
 13015  0684  0231               	subwf	Exception_Main@i,w
 13016  0685                     u10045:	
 13017  0685  1803               	btfsc	3,0
 13018  0686  2EA7               	goto	u10040
 13019                           
 13020                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13021  0687  0020               	movlb	0	; select bank0
 13022  0688  0831               	movf	Exception_Main@i,w
 13023  0689  3E01               	addlw	1
 13024  068A  319C  24B8  3186   	fcall	_getDimmerLights_Status
 13025  068D  3A01               	xorlw	1
 13026  068E  1D03               	skipz
 13027  068F  2EA1               	goto	l9072
 13028                           
 13029                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13030  0690  0021               	movlb	1	; select bank1
 13031  0691  084F               	movf	_DimmerLights^(0+128),w
 13032  0692  0086               	movwf	6
 13033  0693  3001               	movlw	1	; select bank2/3
 13034  0694  0087               	movwf	7
 13035  0695  1401               	bsf	1,0
 13036                           
 13037                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13038  0696  0A4F               	incf	_DimmerLights^(0+128),w
 13039  0697  0086               	movwf	6
 13040  0698  3001               	movlw	1	; select bank2/3
 13041  0699  0087               	movwf	7
 13042  069A  1001               	bcf	1,0
 13043                           
 13044                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13045  069B  0020               	movlb	0	; select bank0
 13046  069C  0831               	movf	Exception_Main@i,w
 13047  069D  3E01               	addlw	1
 13048  069E  3192  22C8  3186   	fcall	_setDimmerLights_SwOff
 13049  06A1                     l9072:	
 13050  06A1  3001               	movlw	1
 13051  06A2  0020               	movlb	0	; select bank0
 13052  06A3  07B1               	addwf	Exception_Main@i,f
 13053  06A4  3000               	movlw	0
 13054  06A5  3DB2               	addwfc	Exception_Main@i+1,f
 13055  06A6  2E7C               	goto	l9074
 13056  06A7                     u10040:	
 13057  06A7  0020               	movlb	0	; select bank0
 13058  06A8  0008               	return
 13059  06A9                     l9076:	
 13060                           ;Main_B1.c: 561: case 3:
 13061                           
 13062                           ;Main_B1.c: 556: }
 13063                           ;Main_B1.c: 557: }
 13064                           ;Main_B1.c: 560: break;
 13065                           
 13066                           
 13067                           ;Main_B1.c: 563: setBuz(5, 300);
 13068  06A9  302C               	movlw	44
 13069  06AA  0020               	movlb	0	; select bank0
 13070  06AB  00AA               	movwf	setBuz@time
 13071  06AC  3001               	movlw	1
 13072  06AD  00AB               	movwf	setBuz@time+1
 13073  06AE  3005               	movlw	5
 13074  06AF  3195  25BC  3186   	fcall	_setBuz
 13075                           
 13076                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13077  06B2  319B  23C2  3186   	fcall	_getDimmerLights_Line
 13078  06B5  0020               	movlb	0	; select bank0
 13079  06B6  00AE               	movwf	??_Exception_Main
 13080  06B7  082E               	movf	??_Exception_Main,w
 13081  06B8  00B5               	movwf	Exception_Main@lights
 13082                           
 13083                           ;Main_B1.c: 565: if (lights == 0) {
 13084  06B9  08B5               	movf	Exception_Main@lights,f
 13085  06BA  1D03               	skipz
 13086  06BB  2EEB               	goto	l9094
 13087                           
 13088                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 13089  06BC  01B3               	clrf	Exception_Main@i_3552
 13090  06BD  01B4               	clrf	Exception_Main@i_3552+1
 13091  06BE                     l9092:	
 13092  06BE  0834               	movf	Exception_Main@i_3552+1,w
 13093  06BF  3A80               	xorlw	128
 13094  06C0  00AE               	movwf	??_Exception_Main
 13095  06C1  3080               	movlw	128
 13096  06C2  022E               	subwf	??_Exception_Main,w
 13097  06C3  1D03               	skipz
 13098  06C4  2EC7               	goto	u10075
 13099  06C5  0830               	movf	Exception_Main@count,w
 13100  06C6  0233               	subwf	Exception_Main@i_3552,w
 13101  06C7                     u10075:	
 13102  06C7  1803               	btfsc	3,0
 13103  06C8  2EE9               	goto	u10070
 13104                           
 13105                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13106  06C9  0020               	movlb	0	; select bank0
 13107  06CA  0833               	movf	Exception_Main@i_3552,w
 13108  06CB  3E01               	addlw	1
 13109  06CC  319C  24B8  3186   	fcall	_getDimmerLights_Status
 13110  06CF  3A01               	xorlw	1
 13111  06D0  1D03               	skipz
 13112  06D1  2EE3               	goto	l9090
 13113                           
 13114                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 13115  06D2  0021               	movlb	1	; select bank1
 13116  06D3  084F               	movf	_DimmerLights^(0+128),w
 13117  06D4  0086               	movwf	6
 13118  06D5  3001               	movlw	1	; select bank2/3
 13119  06D6  0087               	movwf	7
 13120  06D7  1401               	bsf	1,0
 13121                           
 13122                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 13123  06D8  0A4F               	incf	_DimmerLights^(0+128),w
 13124  06D9  0086               	movwf	6
 13125  06DA  3001               	movlw	1	; select bank2/3
 13126  06DB  0087               	movwf	7
 13127  06DC  1001               	bcf	1,0
 13128                           
 13129                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13130  06DD  0020               	movlb	0	; select bank0
 13131  06DE  0833               	movf	Exception_Main@i_3552,w
 13132  06DF  3E01               	addlw	1
 13133  06E0  3192  22C8  3186   	fcall	_setDimmerLights_SwOff
 13134  06E3                     l9090:	
 13135  06E3  3001               	movlw	1
 13136  06E4  0020               	movlb	0	; select bank0
 13137  06E5  07B3               	addwf	Exception_Main@i_3552,f
 13138  06E6  3000               	movlw	0
 13139  06E7  3DB4               	addwfc	Exception_Main@i_3552+1,f
 13140  06E8  2EBE               	goto	l9092
 13141  06E9                     u10070:	
 13142  06E9  0020               	movlb	0	; select bank0
 13143  06EA  0008               	return
 13144  06EB                     l9094:	
 13145                           ;Main_B1.c: 573: }
 13146                           ;Main_B1.c: 574: }
 13147                           ;Main_B1.c: 575: } else {
 13148                           
 13149                           
 13150                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13151  06EB  0020               	movlb	0	; select bank0
 13152  06EC  0835               	movf	Exception_Main@lights,w
 13153  06ED  319C  24B8  3186   	fcall	_getDimmerLights_Status
 13154  06F0  3A01               	xorlw	1
 13155  06F1  1903               	btfsc	3,2
 13156  06F2  2EF5               	goto	l9096
 13157  06F3  0020               	movlb	0	; select bank0
 13158  06F4  0008               	return
 13159  06F5                     l9096:	
 13160                           
 13161                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 13162  06F5  0021               	movlb	1	; select bank1
 13163  06F6  084F               	movf	_DimmerLights^(0+128),w
 13164  06F7  0086               	movwf	6
 13165  06F8  3001               	movlw	1	; select bank2/3
 13166  06F9  0087               	movwf	7
 13167  06FA  1401               	bsf	1,0
 13168                           
 13169                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 13170  06FB  0A4F               	incf	_DimmerLights^(0+128),w
 13171  06FC  0086               	movwf	6
 13172  06FD  3001               	movlw	1	; select bank2/3
 13173  06FE  0087               	movwf	7
 13174  06FF  1001               	bcf	1,0
 13175                           
 13176                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 13177  0700  0020               	movlb	0	; select bank0
 13178  0701  0835               	movf	Exception_Main@lights,w
 13179  0702  3192  22C8         	fcall	_setDimmerLights_SwOff
 13180  0704  0020               	movlb	0	; select bank0
 13181  0705  0008               	return
 13182  0706                     l9102:	
 13183                           ;Main_B1.c: 586: }
 13184                           
 13185                           ;Main_B1.c: 582: }
 13186                           ;Main_B1.c: 583: }
 13187                           ;Main_B1.c: 585: break;
 13188                           
 13189  0706  0020               	movlb	0	; select bank0
 13190  0707  0836               	movf	Exception_Main@error,w
 13191                           
 13192                           ; Switch size 1, requested type "space"
 13193                           ; Number of cases is 2, Range of values is 2 to 3
 13194                           ; switch strategies available:
 13195                           ; Name         Instructions Cycles
 13196                           ; simple_byte            7     4 (average)
 13197                           ; direct_byte           13     9 (fixed)
 13198                           ; jumptable            263     9 (fixed)
 13199                           ;	Chosen strategy is simple_byte
 13200  0708  3A02               	xorlw	2	; case 2
 13201  0709  1903               	skipnz
 13202  070A  2E6A               	goto	l9060
 13203  070B  3A01               	xorlw	1	; case 3
 13204  070C  1903               	skipnz
 13205  070D  2EA9               	goto	l9076
 13206  070E  2F10               	goto	l1486
 13207  070F  0008               	return
 13208  0710                     l1486:	
 13209  0710  0008               	return
 13210  0711                     __end_of_Exception_Main:	
 13211                           
 13212                           	psect	text85
 13213  1BC2                     __ptext85:	
 13214 ;; *************** function _getDimmerLights_Line *****************
 13215 ;; Defined at:
 13216 ;;		line 978 in file "../src/Dimmer_B1.c"
 13217 ;; Parameters:    Size  Location     Type
 13218 ;;		None
 13219 ;; Auto vars:     Size  Location     Type
 13220 ;;  line            1    1[BANK0 ] unsigned char 
 13221 ;; Return value:  Size  Location     Type
 13222 ;;                  1    wreg      unsigned char 
 13223 ;; Registers used:
 13224 ;;		wreg, status,2
 13225 ;; Tracked objects:
 13226 ;;		On entry : 0/0
 13227 ;;		On exit  : 0/0
 13228 ;;		Unchanged: 0/0
 13229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;Total ram usage:        1 bytes
 13235 ;; Hardware stack levels used:    1
 13236 ;; Hardware stack levels required when called:    5
 13237 ;; This function calls:
 13238 ;;		Nothing
 13239 ;; This function is called by:
 13240 ;;		_Exception_Main
 13241 ;; This function uses a non-reentrant model
 13242 ;;
 13243                           
 13244                           
 13245                           ;psect for function _getDimmerLights_Line
 13246  1BC2                     _getDimmerLights_Line:	
 13247                           
 13248                           ;Dimmer_B1.c: 979: char line = 0;
 13249                           
 13250                           ;incstack = 0
 13251                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13252  1BC2  0020               	movlb	0	; select bank0
 13253  1BC3  01A1               	clrf	getDimmerLights_Line@line
 13254                           
 13255                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13256  1BC4  0022               	movlb	2	; select bank2
 13257  1BC5  1CDD               	btfss	(_DimmerLights1^(0+256)+1),1
 13258  1BC6  2BCA               	goto	l7028
 13259                           
 13260                           ;Dimmer_B1.c: 982: line = 1;
 13261  1BC7  0020               	movlb	0	; select bank0
 13262  1BC8  01A1               	clrf	getDimmerLights_Line@line
 13263  1BC9  0AA1               	incf	getDimmerLights_Line@line,f
 13264  1BCA                     l7028:	
 13265                           
 13266                           ;Dimmer_B1.c: 983: }
 13267                           ;Dimmer_B1.c: 995: return line;
 13268  1BCA  0020               	movlb	0	; select bank0
 13269  1BCB  0821               	movf	getDimmerLights_Line@line,w
 13270  1BCC  0008               	return
 13271  1BCD                     __end_of_getDimmerLights_Line:	
 13272                           
 13273                           	psect	text86
 13274  1F50                     __ptext86:	
 13275 ;; *************** function _DimmerLights_Main *****************
 13276 ;; Defined at:
 13277 ;;		line 736 in file "../src/Dimmer_B1.c"
 13278 ;; Parameters:    Size  Location     Type
 13279 ;;		None
 13280 ;; Auto vars:     Size  Location     Type
 13281 ;;		None
 13282 ;; Return value:  Size  Location     Type
 13283 ;;		None               void
 13284 ;; Registers used:
 13285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13286 ;; Tracked objects:
 13287 ;;		On entry : 0/0
 13288 ;;		On exit  : 0/0
 13289 ;;		Unchanged: 0/0
 13290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13295 ;;Total ram usage:        0 bytes
 13296 ;; Hardware stack levels used:    1
 13297 ;; Hardware stack levels required when called:   10
 13298 ;; This function calls:
 13299 ;;		_getLoad_OK
 13300 ;;		_getMain_All_Error_Status
 13301 ;;		_getMain_All_LightsStatus
 13302 ;;		_setDimmerLights_Main
 13303 ;; This function is called by:
 13304 ;;		_main
 13305 ;; This function uses a non-reentrant model
 13306 ;;
 13307                           
 13308                           
 13309                           ;psect for function _DimmerLights_Main
 13310  1F50                     _DimmerLights_Main:	
 13311                           
 13312                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13313                           
 13314                           ;incstack = 0
 13315                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13316  1F50  0022               	movlb	2	; select bank2
 13317  1F51  1CAD               	btfss	_Dimmer^(0+256),1
 13318  1F52  2F68               	goto	l8820
 13319                           
 13320                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13321  1F53  319B  2385  319F   	fcall	_getLoad_OK
 13322  1F56  3A01               	xorlw	1
 13323  1F57  1903               	skipnz
 13324  1F58  2F66               	goto	l752
 13325  1F59  3000               	movlw	0
 13326  1F5A  3191  21BD  319F   	fcall	_getMain_All_Error_Status
 13327  1F5D  3800               	iorlw	0
 13328  1F5E  1D03               	skipz
 13329  1F5F  2F66               	goto	l752
 13330  1F60  319B  23B8  319F   	fcall	_getMain_All_LightsStatus
 13331  1F63  3800               	iorlw	0
 13332  1F64  1D03               	skipz
 13333  1F65  2F68               	goto	l8820
 13334  1F66                     l752:	
 13335                           
 13336                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13337  1F66  0022               	movlb	2	; select bank2
 13338  1F67  10AD               	bcf	_Dimmer^(0+256),1
 13339  1F68                     l8820:	
 13340                           
 13341                           ;Dimmer_B1.c: 742: }
 13342                           ;Dimmer_B1.c: 743: }
 13343                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13344  1F68  3001               	movlw	1
 13345  1F69  3188  2034         	fcall	_setDimmerLights_Main
 13346  1F6B  0008               	return
 13347  1F6C                     __end_of_DimmerLights_Main:	
 13348                           
 13349                           	psect	text87
 13350  0834                     __ptext87:	
 13351 ;; *************** function _setDimmerLights_Main *****************
 13352 ;; Defined at:
 13353 ;;		line 765 in file "../src/Dimmer_B1.c"
 13354 ;; Parameters:    Size  Location     Type
 13355 ;;  lights          1    wreg     unsigned char 
 13356 ;; Auto vars:     Size  Location     Type
 13357 ;;  lights          1    4[BANK1 ] unsigned char 
 13358 ;; Return value:  Size  Location     Type
 13359 ;;		None               void
 13360 ;; Registers used:
 13361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13362 ;; Tracked objects:
 13363 ;;		On entry : 0/0
 13364 ;;		On exit  : 0/0
 13365 ;;		Unchanged: 0/0
 13366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13368 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13370 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13371 ;;Total ram usage:        1 bytes
 13372 ;; Hardware stack levels used:    1
 13373 ;; Hardware stack levels required when called:    9
 13374 ;; This function calls:
 13375 ;;		_DimmerLights_SelectPointer
 13376 ;;		_getDimmerLights_Allow_Condition
 13377 ;;		_getMain_All_LightsStatus
 13378 ;;		_setDimmerLights_Dimming
 13379 ;;		_setDimmerLights_OnOff
 13380 ;; This function is called by:
 13381 ;;		_DimmerLights_Main
 13382 ;; This function uses a non-reentrant model
 13383 ;;
 13384                           
 13385                           
 13386                           ;psect for function _setDimmerLights_Main
 13387  0834                     _setDimmerLights_Main:	
 13388                           
 13389                           ;incstack = 0
 13390                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13391                           ;setDimmerLights_Main@lights stored from wreg
 13392  0834  0021               	movlb	1	; select bank1
 13393  0835  00E9               	movwf	setDimmerLights_Main@lights^(0+128)
 13394                           
 13395                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13396  0836  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13397  0837  319C  2405  3188   	fcall	_DimmerLights_SelectPointer
 13398                           
 13399                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13400  083A  0021               	movlb	1	; select bank1
 13401  083B  084F               	movf	_DimmerLights^(0+128),w
 13402  083C  0086               	movwf	6
 13403  083D  3001               	movlw	1	; select bank2/3
 13404  083E  0087               	movwf	7
 13405  083F  1C81               	btfss	1,1
 13406  0840  2860               	goto	l8556
 13407                           
 13408                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13409  0841  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13410  0842  319E  262A  3188   	fcall	_getDimmerLights_Allow_Condition
 13411  0845  3800               	iorlw	0
 13412  0846  1D03               	skipz
 13413  0847  0008               	return
 13414                           
 13415                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13416  0848  0021               	movlb	1	; select bank1
 13417  0849  084F               	movf	_DimmerLights^(0+128),w
 13418  084A  0086               	movwf	6
 13419  084B  3001               	movlw	1	; select bank2/3
 13420  084C  0087               	movwf	7
 13421  084D  1081               	bcf	1,1
 13422                           
 13423                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13424  084E  084F               	movf	_DimmerLights^(0+128),w
 13425  084F  0086               	movwf	6
 13426  0850  3001               	movlw	1	; select bank2/3
 13427  0851  0087               	movwf	7
 13428  0852  1D01               	btfss	1,2
 13429  0853  285A               	goto	l8554
 13430                           
 13431                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13432  0854  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13433  0855  0AE5               	incf	setDimmerLights_OnOff@command^(0+128),f
 13434  0856  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13435  0857  3187  2711         	fcall	_setDimmerLights_OnOff
 13436                           
 13437                           ;Dimmer_B1.c: 773: } else {
 13438  0859  0008               	return
 13439  085A                     l8554:	
 13440                           
 13441                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13442  085A  0021               	movlb	1	; select bank1
 13443  085B  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13444  085C  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13445  085D  3187  2711         	fcall	_setDimmerLights_OnOff
 13446                           
 13447                           ;Dimmer_B1.c: 775: }
 13448                           ;Dimmer_B1.c: 776: }
 13449                           ;Dimmer_B1.c: 777: } else {
 13450  085F  0008               	return
 13451  0860                     l8556:	
 13452                           
 13453                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13454  0860  319B  23B8  3188   	fcall	_getMain_All_LightsStatus
 13455  0863  3A01               	xorlw	1
 13456  0864  1D03               	skipz
 13457  0865  288F               	goto	l8568
 13458                           
 13459                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13460  0866  0021               	movlb	1	; select bank1
 13461  0867  084F               	movf	_DimmerLights^(0+128),w
 13462  0868  0086               	movwf	6
 13463  0869  3001               	movlw	1	; select bank2/3
 13464  086A  0087               	movwf	7
 13465  086B  1E01               	btfss	1,4
 13466  086C  0008               	return
 13467                           
 13468                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13469  086D  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13470  086E  319E  262A  3188   	fcall	_getDimmerLights_Allow_Condition
 13471  0871  3800               	iorlw	0
 13472  0872  1D03               	skipz
 13473  0873  0008               	return
 13474                           
 13475                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13476  0874  0021               	movlb	1	; select bank1
 13477  0875  084F               	movf	_DimmerLights^(0+128),w
 13478  0876  0086               	movwf	6
 13479  0877  3001               	movlw	1	; select bank2/3
 13480  0878  0087               	movwf	7
 13481  0879  1201               	bcf	1,4
 13482                           
 13483                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13484  087A  084F               	movf	_DimmerLights^(0+128),w
 13485  087B  0086               	movwf	6
 13486  087C  3001               	movlw	1	; select bank2/3
 13487  087D  0087               	movwf	7
 13488  087E  1E81               	btfss	1,5
 13489  087F  2888               	goto	l8566
 13490                           
 13491                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13492  0880  0020               	movlb	0	; select bank0
 13493  0881  01EB               	clrf	setDimmerLights_Dimming@status
 13494  0882  0AEB               	incf	setDimmerLights_Dimming@status,f
 13495  0883  0021               	movlb	1	; select bank1
 13496  0884  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13497  0885  3194  24C5         	fcall	_setDimmerLights_Dimming
 13498                           
 13499                           ;Dimmer_B1.c: 784: } else {
 13500  0887  0008               	return
 13501  0888                     l8566:	
 13502                           
 13503                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13504  0888  0020               	movlb	0	; select bank0
 13505  0889  01EB               	clrf	setDimmerLights_Dimming@status
 13506  088A  0021               	movlb	1	; select bank1
 13507  088B  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13508  088C  3194  24C5         	fcall	_setDimmerLights_Dimming
 13509                           
 13510                           ;Dimmer_B1.c: 786: }
 13511                           ;Dimmer_B1.c: 787: }
 13512                           ;Dimmer_B1.c: 788: }
 13513                           ;Dimmer_B1.c: 789: } else {
 13514  088E  0008               	return
 13515  088F                     l8568:	
 13516                           
 13517                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13518  088F  0021               	movlb	1	; select bank1
 13519  0890  084F               	movf	_DimmerLights^(0+128),w
 13520  0891  0086               	movwf	6
 13521  0892  3001               	movlw	1	; select bank2/3
 13522  0893  0087               	movwf	7
 13523  0894  1E01               	btfss	1,4
 13524  0895  0008               	return
 13525                           
 13526                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13527  0896  084F               	movf	_DimmerLights^(0+128),w
 13528  0897  0086               	movwf	6
 13529  0898  3001               	movlw	1	; select bank2/3
 13530  0899  0087               	movwf	7
 13531  089A  1201               	bcf	1,4
 13532  089B  0008               	return
 13533  089C                     __end_of_setDimmerLights_Main:	
 13534                           
 13535                           	psect	text88
 13536  0711                     __ptext88:	
 13537 ;; *************** function _setDimmerLights_OnOff *****************
 13538 ;; Defined at:
 13539 ;;		line 799 in file "../src/Dimmer_B1.c"
 13540 ;; Parameters:    Size  Location     Type
 13541 ;;  lights          1    wreg     unsigned char 
 13542 ;;  command         1    0[BANK1 ] unsigned char 
 13543 ;; Auto vars:     Size  Location     Type
 13544 ;;  lights          1    3[BANK1 ] unsigned char 
 13545 ;; Return value:  Size  Location     Type
 13546 ;;		None               void
 13547 ;; Registers used:
 13548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13549 ;; Tracked objects:
 13550 ;;		On entry : 0/0
 13551 ;;		On exit  : 0/0
 13552 ;;		Unchanged: 0/0
 13553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13554 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;Total ram usage:        4 bytes
 13559 ;; Hardware stack levels used:    1
 13560 ;; Hardware stack levels required when called:    8
 13561 ;; This function calls:
 13562 ;;		_getCmd_Status
 13563 ;;		_getDelayOff_GO
 13564 ;;		_getDimmerLights_PercentToValue
 13565 ;;		_getDimmerLights_ValueToPercent
 13566 ;;		_getMain_All_LightsStatus
 13567 ;;		_setCmd_Status
 13568 ;;		_setDelayOff_GO
 13569 ;;		_setDimmerIntr_ControlStatus
 13570 ;;		_setDimmerIntr_DimmingValue
 13571 ;;		_setDimmerIntr_Dimming_RF
 13572 ;;		_setDimmerIntr_MaxmumValue
 13573 ;;		_setDimmerLights_Line
 13574 ;;		_setLED
 13575 ;;		_setProductData
 13576 ;;		_setRF_DimmerLights
 13577 ;;		_setTxData
 13578 ;; This function is called by:
 13579 ;;		_setDimmerLights_Main
 13580 ;; This function uses a non-reentrant model
 13581 ;;
 13582                           
 13583                           
 13584                           ;psect for function _setDimmerLights_OnOff
 13585  0711                     _setDimmerLights_OnOff:	
 13586                           
 13587                           ;incstack = 0
 13588                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13589                           ;setDimmerLights_OnOff@lights stored from wreg
 13590  0711  0021               	movlb	1	; select bank1
 13591  0712  00E8               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13592                           
 13593                           ;Dimmer_B1.c: 801: if (command == 1) {
 13594  0713  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13595  0714  3A01               	xorlw	1
 13596  0715  1D03               	skipz
 13597  0716  2F7E               	goto	l8432
 13598                           
 13599                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13600  0717  0020               	movlb	0	; select bank0
 13601  0718  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13602  0719  0AA1               	incf	setDimmerIntr_ControlStatus@command,f
 13603  071A  0021               	movlb	1	; select bank1
 13604  071B  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13605  071C  319E  266C  3187   	fcall	_setDimmerIntr_ControlStatus
 13606                           
 13607                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13608  071F  0022               	movlb	2	; select bank2
 13609  0720  152D               	bsf	_Dimmer^(0+256),2
 13610                           
 13611                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13612  0721  0021               	movlb	1	; select bank1
 13613  0722  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13614  0723  319C  24C9  3187   	fcall	_setDimmerLights_Line
 13615                           
 13616                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13617  0726  0020               	movlb	0	; select bank0
 13618  0727  01A3               	clrf	setLED@command
 13619  0728  0021               	movlb	1	; select bank1
 13620  0729  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13621  072A  3193  2301  3187   	fcall	_setLED
 13622                           
 13623                           ;Dimmer_B1.c: 813: ;;
 13624                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(65*0.78)));
 13625  072D  3032               	movlw	50
 13626  072E  0021               	movlb	1	; select bank1
 13627  072F  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13628  0730  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13629  0731  0020               	movlb	0	; select bank0
 13630  0732  00A1               	movwf	setDimmerIntr_DimmingValue@value
 13631  0733  0021               	movlb	1	; select bank1
 13632  0734  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13633  0735  319C  2429  3187   	fcall	_setDimmerIntr_DimmingValue
 13634                           
 13635                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13636  0738  0021               	movlb	1	; select bank1
 13637  0739  0A4F               	incf	_DimmerLights^(0+128),w
 13638  073A  0086               	movwf	6
 13639  073B  3001               	movlw	1	; select bank2/3
 13640  073C  0087               	movwf	7
 13641  073D  1F01               	btfss	1,6
 13642  073E  2F63               	goto	l8428
 13643                           
 13644                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13645  073F  0A4F               	incf	_DimmerLights^(0+128),w
 13646  0740  0086               	movwf	6
 13647  0741  3001               	movlw	1	; select bank2/3
 13648  0742  0087               	movwf	7
 13649  0743  1301               	bcf	1,6
 13650                           
 13651                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13652  0744  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13653  0745  3E14               	addlw	20
 13654  0746  076D               	addwf	_product^(0+128),w
 13655  0747  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13656  0748  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13657  0749  0086               	movwf	6
 13658  074A  3002               	movlw	2	; select bank4/5
 13659  074B  0087               	movwf	7
 13660  074C  0801               	movf	1,w
 13661  074D  3197  279B  3187   	fcall	_getDimmerLights_PercentToValue
 13662  0750  0021               	movlb	1	; select bank1
 13663  0751  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13664  0752  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13665  0753  0020               	movlb	0	; select bank0
 13666  0754  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13667  0755  0021               	movlb	1	; select bank1
 13668  0756  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13669  0757  319C  241D  3187   	fcall	_setDimmerIntr_MaxmumValue
 13670                           
 13671                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13672  075A  0020               	movlb	0	; select bank0
 13673  075B  01A1               	clrf	setDimmerIntr_Dimming_RF@command
 13674  075C  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
 13675  075D  0021               	movlb	1	; select bank1
 13676  075E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13677  075F  319E  2684  3187   	fcall	_setDimmerIntr_Dimming_RF
 13678                           
 13679                           ;Dimmer_B1.c: 824: } else {
 13680  0762  2FAE               	goto	l8446
 13681  0763                     l8428:	
 13682                           
 13683                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.78)));
 13684  0763  3032               	movlw	50
 13685  0764  0021               	movlb	1	; select bank1
 13686  0765  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13687  0766  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13688  0767  0020               	movlb	0	; select bank0
 13689  0768  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13690  0769  0021               	movlb	1	; select bank1
 13691  076A  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13692  076B  319C  241D  3187   	fcall	_setDimmerIntr_MaxmumValue
 13693                           
 13694                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.78))));
 13695  076E  3032               	movlw	50
 13696  076F  3196  26D1  3187   	fcall	_getDimmerLights_ValueToPercent
 13697  0772  0021               	movlb	1	; select bank1
 13698  0773  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13699  0774  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13700  0775  0020               	movlb	0	; select bank0
 13701  0776  00E3               	movwf	setProductData@value
 13702  0777  0021               	movlb	1	; select bank1
 13703  0778  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13704  0779  3E14               	addlw	20
 13705  077A  319C  2411  3187   	fcall	_setProductData
 13706                           
 13707                           ;Dimmer_B1.c: 827: }
 13708                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13709  077D  2FAE               	goto	l8446
 13710  077E                     l8432:	
 13711  077E  0021               	movlb	1	; select bank1
 13712  077F  08E5               	movf	setDimmerLights_OnOff@command^(0+128),f
 13713  0780  1D03               	skipz
 13714  0781  2FAE               	goto	l8446
 13715                           
 13716                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13717  0782  0020               	movlb	0	; select bank0
 13718  0783  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13719  0784  0021               	movlb	1	; select bank1
 13720  0785  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13721  0786  319E  266C  3187   	fcall	_setDimmerIntr_ControlStatus
 13722                           
 13723                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13724  0789  0022               	movlb	2	; select bank2
 13725  078A  112D               	bcf	_Dimmer^(0+256),2
 13726                           
 13727                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13728  078B  3000               	movlw	0
 13729  078C  319C  24C9  3187   	fcall	_setDimmerLights_Line
 13730                           
 13731                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13732  078F  0021               	movlb	1	; select bank1
 13733  0790  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13734  0791  319C  24DA  3187   	fcall	_getDelayOff_GO
 13735  0794  3A01               	xorlw	1
 13736  0795  1D03               	skipz
 13737  0796  2F9F               	goto	l776
 13738                           
 13739                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13740  0797  0020               	movlb	0	; select bank0
 13741  0798  01E6               	clrf	setDelayOff_GO@command
 13742  0799  01E7               	clrf	setDelayOff_GO@value
 13743  079A  0021               	movlb	1	; select bank1
 13744  079B  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13745  079C  318C  24AC  3187   	fcall	_setDelayOff_GO
 13746  079F                     l776:	
 13747                           
 13748                           ;Dimmer_B1.c: 840: }
 13749                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13750  079F  0020               	movlb	0	; select bank0
 13751  07A0  01A3               	clrf	setLED@command
 13752  07A1  0AA3               	incf	setLED@command,f
 13753  07A2  0021               	movlb	1	; select bank1
 13754  07A3  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13755  07A4  3193  2301  3187   	fcall	_setLED
 13756                           
 13757                           ;Dimmer_B1.c: 846: ;;
 13758                           ;Dimmer_B1.c: 850: if (lights == 1) {
 13759  07A7  0021               	movlb	1	; select bank1
 13760  07A8  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13761  07A9  3A01               	xorlw	1
 13762  07AA  1D03               	skipz
 13763  07AB  2FAE               	goto	l8446
 13764                           
 13765                           ;Dimmer_B1.c: 851: RB1 = 0;
 13766  07AC  0020               	movlb	0	; select bank0
 13767  07AD  108D               	bcf	13,1	;volatile
 13768  07AE                     l8446:	
 13769                           
 13770                           ;Dimmer_B1.c: 853: }
 13771                           ;Dimmer_B1.c: 864: }
 13772                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 13773  07AE  0021               	movlb	1	; select bank1
 13774  07AF  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13775  07B0  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13776  07B1  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13777  07B2  0020               	movlb	0	; select bank0
 13778  07B3  00E6               	movwf	setRF_DimmerLights@on
 13779  07B4  0021               	movlb	1	; select bank1
 13780  07B5  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13781  07B6  3197  2736  3187   	fcall	_setRF_DimmerLights
 13782                           
 13783                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 13784  07B9  3001               	movlw	1
 13785  07BA  319D  251E  3187   	fcall	_getCmd_Status
 13786  07BD  3A01               	xorlw	1
 13787  07BE  1D03               	skipz
 13788  07BF  2FDB               	goto	l8460
 13789                           
 13790                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 13791  07C0  319B  23B8  3187   	fcall	_getMain_All_LightsStatus
 13792  07C3  3800               	iorlw	0
 13793  07C4  1D03               	skipz
 13794  07C5  0008               	return
 13795                           
 13796                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 13797  07C6  0020               	movlb	0	; select bank0
 13798  07C7  01A1               	clrf	setCmd_Status@cmd
 13799  07C8  3001               	movlw	1
 13800  07C9  319E  26B5  3187   	fcall	_setCmd_Status
 13801                           
 13802                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 13803  07CC  0020               	movlb	0	; select bank0
 13804  07CD  01E3               	clrf	setProductData@value
 13805  07CE  300B               	movlw	11
 13806  07CF  319C  2411  3187   	fcall	_setProductData
 13807                           
 13808                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 13809  07D2  0020               	movlb	0	; select bank0
 13810  07D3  01E3               	clrf	setProductData@value
 13811  07D4  3011               	movlw	17
 13812  07D5  319C  2411  3187   	fcall	_setProductData
 13813                           
 13814                           ;Dimmer_B1.c: 874: setTxData();
 13815  07D8  318F  2745         	fcall	_setTxData
 13816                           
 13817                           ;Dimmer_B1.c: 875: }
 13818                           ;Dimmer_B1.c: 876: } else {
 13819  07DA  0008               	return
 13820  07DB                     l8460:	
 13821                           
 13822                           ;Dimmer_B1.c: 877: setTxData();
 13823  07DB  318F  2745         	fcall	_setTxData
 13824  07DD  0008               	return
 13825  07DE                     __end_of_setDimmerLights_OnOff:	
 13826                           
 13827                           	psect	text89
 13828  1301                     __ptext89:	
 13829 ;; *************** function _setLED *****************
 13830 ;; Defined at:
 13831 ;;		line 81 in file "../src/LED_B1.c"
 13832 ;; Parameters:    Size  Location     Type
 13833 ;;  led             1    wreg     unsigned char 
 13834 ;;  command         1    3[BANK0 ] unsigned char 
 13835 ;; Auto vars:     Size  Location     Type
 13836 ;;  led             1    4[BANK0 ] unsigned char 
 13837 ;; Return value:  Size  Location     Type
 13838 ;;		None               void
 13839 ;; Registers used:
 13840 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13841 ;; Tracked objects:
 13842 ;;		On entry : 0/0
 13843 ;;		On exit  : 0/0
 13844 ;;		Unchanged: 0/0
 13845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13846 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13847 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;Total ram usage:        2 bytes
 13851 ;; Hardware stack levels used:    1
 13852 ;; Hardware stack levels required when called:    6
 13853 ;; This function calls:
 13854 ;;		_LedPointSelect
 13855 ;; This function is called by:
 13856 ;;		_setDimmerLights_OnOff
 13857 ;;		_setLED_Initialization
 13858 ;;		_Exception_Main
 13859 ;;		_setSw_Initialization
 13860 ;; This function uses a non-reentrant model
 13861 ;;
 13862                           
 13863                           
 13864                           ;psect for function _setLED
 13865  1301                     _setLED:	
 13866                           
 13867                           ;incstack = 0
 13868                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13869                           ;setLED@led stored from wreg
 13870  1301  0020               	movlb	0	; select bank0
 13871  1302  00A4               	movwf	setLED@led
 13872                           
 13873                           ;LED_B1.c: 82: LedPointSelect(led);
 13874  1303  0824               	movf	setLED@led,w
 13875  1304  319C  2435  3193   	fcall	_LedPointSelect
 13876                           
 13877                           ;LED_B1.c: 83: if (command == 0) {
 13878  1307  0020               	movlb	0	; select bank0
 13879  1308  08A3               	movf	setLED@command,f
 13880  1309  1D03               	skipz
 13881  130A  2B10               	goto	l6440
 13882                           
 13883                           ;LED_B1.c: 112: if (led == 99) {
 13884  130B  0824               	movf	setLED@led,w
 13885  130C  3A63               	xorlw	99
 13886  130D  1D03               	skipz
 13887  130E  2B10               	goto	l6440
 13888                           
 13889                           ;LED_B1.c: 116: RB5 = 1;
 13890  130F  168D               	bsf	13,5	;volatile
 13891  1310                     l6440:	
 13892                           
 13893                           ;LED_B1.c: 118: }
 13894                           ;LED_B1.c: 120: }
 13895                           ;LED_B1.c: 121: if (command == 1) {
 13896  1310  0823               	movf	setLED@command,w
 13897  1311  3A01               	xorlw	1
 13898  1312  1D03               	skipz
 13899  1313  2B19               	goto	l6446
 13900                           
 13901                           ;LED_B1.c: 150: if (led == 99) {
 13902  1314  0824               	movf	setLED@led,w
 13903  1315  3A63               	xorlw	99
 13904  1316  1D03               	skipz
 13905  1317  2B19               	goto	l6446
 13906                           
 13907                           ;LED_B1.c: 154: RB5 = 0;
 13908  1318  128D               	bcf	13,5	;volatile
 13909  1319                     l6446:	
 13910                           
 13911                           ;LED_B1.c: 156: }
 13912                           ;LED_B1.c: 158: }
 13913                           ;LED_B1.c: 159: if (command == 10) {
 13914  1319  0823               	movf	setLED@command,w
 13915  131A  3A0A               	xorlw	10
 13916  131B  1D03               	skipz
 13917  131C  2B2F               	goto	l6454
 13918                           
 13919                           ;LED_B1.c: 160: LED->GO = 0;
 13920  131D  0021               	movlb	1	; select bank1
 13921  131E  0850               	movf	_LED^(0+128),w
 13922  131F  0086               	movwf	6
 13923  1320  3001               	movlw	1	; select bank2/3
 13924  1321  0087               	movwf	7
 13925  1322  1081               	bcf	1,1
 13926                           
 13927                           ;LED_B1.c: 161: LED->Time = 0;
 13928  1323  0A50               	incf	_LED^(0+128),w
 13929  1324  0086               	movwf	6
 13930  1325  3001               	movlw	1	; select bank2/3
 13931  1326  0087               	movwf	7
 13932  1327  3000               	movlw	0
 13933  1328  3FC0               	movwi [0]fsr1
 13934  1329  3FC1               	movwi [1]fsr1
 13935                           
 13936                           ;LED_B1.c: 190: if (led == 99) {
 13937  132A  0020               	movlb	0	; select bank0
 13938  132B  0824               	movf	setLED@led,w
 13939  132C  3A63               	xorlw	99
 13940  132D  1903               	btfsc	3,2
 13941                           
 13942                           ;LED_B1.c: 194: RB5 = 1;
 13943  132E  168D               	bsf	13,5	;volatile
 13944  132F                     l6454:	
 13945                           
 13946                           ;LED_B1.c: 196: }
 13947                           ;LED_B1.c: 198: }
 13948                           ;LED_B1.c: 199: if (command == 11) {
 13949  132F  0823               	movf	setLED@command,w
 13950  1330  3A0B               	xorlw	11
 13951  1331  1D03               	skipz
 13952  1332  0008               	return
 13953                           
 13954                           ;LED_B1.c: 200: LED->GO = 1;
 13955  1333  0021               	movlb	1	; select bank1
 13956  1334  0850               	movf	_LED^(0+128),w
 13957  1335  0086               	movwf	6
 13958  1336  3001               	movlw	1	; select bank2/3
 13959  1337  0087               	movwf	7
 13960  1338  1481               	bsf	1,1
 13961  1339  0008               	return
 13962  133A                     __end_of_setLED:	
 13963                           
 13964                           	psect	text90
 13965  1C35                     __ptext90:	
 13966 ;; *************** function _LedPointSelect *****************
 13967 ;; Defined at:
 13968 ;;		line 7 in file "../src/LED_B1.c"
 13969 ;; Parameters:    Size  Location     Type
 13970 ;;  led             1    wreg     unsigned char 
 13971 ;; Auto vars:     Size  Location     Type
 13972 ;;  led             1    2[BANK0 ] unsigned char 
 13973 ;; Return value:  Size  Location     Type
 13974 ;;		None               void
 13975 ;; Registers used:
 13976 ;;		wreg
 13977 ;; Tracked objects:
 13978 ;;		On entry : 0/0
 13979 ;;		On exit  : 0/0
 13980 ;;		Unchanged: 0/0
 13981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13986 ;;Total ram usage:        2 bytes
 13987 ;; Hardware stack levels used:    1
 13988 ;; Hardware stack levels required when called:    5
 13989 ;; This function calls:
 13990 ;;		Nothing
 13991 ;; This function is called by:
 13992 ;;		_setLED_Initialization
 13993 ;;		_setLED
 13994 ;;		_setLED_Main
 13995 ;; This function uses a non-reentrant model
 13996 ;;
 13997                           
 13998                           
 13999                           ;psect for function _LedPointSelect
 14000  1C35                     _LedPointSelect:	
 14001                           
 14002                           ;incstack = 0
 14003                           ; Regs used in _LedPointSelect: [wreg]
 14004                           ;LedPointSelect@led stored from wreg
 14005  1C35  0020               	movlb	0	; select bank0
 14006  1C36  00A2               	movwf	LedPointSelect@led
 14007                           
 14008                           ;LED_B1.c: 24: if (led == 99) {
 14009  1C37  0822               	movf	LedPointSelect@led,w
 14010  1C38  3A63               	xorlw	99
 14011  1C39  1D03               	skipz
 14012  1C3A  0008               	return
 14013                           
 14014                           ;LED_B1.c: 25: LED = &VarErrLED;
 14015  1C3B  3069               	movlw	_VarErrLED& (0+255)
 14016  1C3C  00A1               	movwf	??_LedPointSelect
 14017  1C3D  0821               	movf	??_LedPointSelect,w
 14018  1C3E  0021               	movlb	1	; select bank1
 14019  1C3F  00D0               	movwf	_LED^(0+128)
 14020  1C40  0008               	return
 14021  1C41                     __end_of_LedPointSelect:	
 14022                           
 14023                           	psect	text91
 14024  1E84                     __ptext91:	
 14025 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14026 ;; Defined at:
 14027 ;;		line 184 in file "../src/Dimmer_B1.c"
 14028 ;; Parameters:    Size  Location     Type
 14029 ;;  lights          1    wreg     unsigned char 
 14030 ;;  command         1    1[BANK0 ] unsigned char 
 14031 ;; Auto vars:     Size  Location     Type
 14032 ;;  lights          1    3[BANK0 ] unsigned char 
 14033 ;; Return value:  Size  Location     Type
 14034 ;;		None               void
 14035 ;; Registers used:
 14036 ;;		wreg, status,2, status,0
 14037 ;; Tracked objects:
 14038 ;;		On entry : 0/0
 14039 ;;		On exit  : 0/0
 14040 ;;		Unchanged: 0/0
 14041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14042 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14044 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14045 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14046 ;;Total ram usage:        3 bytes
 14047 ;; Hardware stack levels used:    1
 14048 ;; Hardware stack levels required when called:    5
 14049 ;; This function calls:
 14050 ;;		Nothing
 14051 ;; This function is called by:
 14052 ;;		_setDimmerLights_OnOff
 14053 ;;		_setRFSW_AdjControl
 14054 ;; This function uses a non-reentrant model
 14055 ;;
 14056                           
 14057                           
 14058                           ;psect for function _setDimmerIntr_Dimming_RF
 14059  1E84                     _setDimmerIntr_Dimming_RF:	
 14060                           
 14061                           ;incstack = 0
 14062                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14063                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14064  1E84  0020               	movlb	0	; select bank0
 14065  1E85  00A3               	movwf	setDimmerIntr_Dimming_RF@lights
 14066                           
 14067                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14068  1E86  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14069  1E87  3A01               	xorlw	1
 14070  1E88  1D03               	skipz
 14071  1E89  0008               	return
 14072                           
 14073                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14074  1E8A  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14075  1E8B  3A01               	xorlw	1
 14076  1E8C  3000               	movlw	0
 14077  1E8D  1903               	skipnz
 14078  1E8E  3001               	movlw	1
 14079  1E8F  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14080  1E90  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14081  1E91  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14082  1E92  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14083  1E93  0021               	movlb	1	; select bank1
 14084  1E94  083A               	movf	_DimmerIntr1^(0+128),w
 14085  1E95  0020               	movlb	0	; select bank0
 14086  1E96  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14087  1E97  39BF               	andlw	-65
 14088  1E98  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14089  1E99  0021               	movlb	1	; select bank1
 14090  1E9A  00BA               	movwf	_DimmerIntr1^(0+128)
 14091  1E9B  0008               	return
 14092  1E9C                     __end_of_setDimmerIntr_Dimming_RF:	
 14093                           
 14094                           	psect	text92
 14095  1C29                     __ptext92:	
 14096 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14097 ;; Defined at:
 14098 ;;		line 49 in file "../src/Dimmer_B1.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;  lights          1    wreg     unsigned char 
 14101 ;;  value           1    1[BANK0 ] unsigned char 
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;  lights          1    3[BANK0 ] unsigned char 
 14104 ;; Return value:  Size  Location     Type
 14105 ;;		None               void
 14106 ;; Registers used:
 14107 ;;		wreg
 14108 ;; Tracked objects:
 14109 ;;		On entry : 0/0
 14110 ;;		On exit  : 0/0
 14111 ;;		Unchanged: 0/0
 14112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14113 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;Total ram usage:        3 bytes
 14118 ;; Hardware stack levels used:    1
 14119 ;; Hardware stack levels required when called:    5
 14120 ;; This function calls:
 14121 ;;		Nothing
 14122 ;; This function is called by:
 14123 ;;		_setDimmerLights_OnOff
 14124 ;; This function uses a non-reentrant model
 14125 ;;
 14126                           
 14127                           
 14128                           ;psect for function _setDimmerIntr_DimmingValue
 14129  1C29                     _setDimmerIntr_DimmingValue:	
 14130                           
 14131                           ;incstack = 0
 14132                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14133                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14134  1C29  0020               	movlb	0	; select bank0
 14135  1C2A  00A3               	movwf	setDimmerIntr_DimmingValue@lights
 14136                           
 14137                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14138  1C2B  0823               	movf	setDimmerIntr_DimmingValue@lights,w
 14139  1C2C  3A01               	xorlw	1
 14140  1C2D  1D03               	skipz
 14141  1C2E  0008               	return
 14142                           
 14143                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14144  1C2F  0821               	movf	setDimmerIntr_DimmingValue@value,w
 14145  1C30  00A2               	movwf	??_setDimmerIntr_DimmingValue
 14146  1C31  0822               	movf	??_setDimmerIntr_DimmingValue,w
 14147  1C32  0021               	movlb	1	; select bank1
 14148  1C33  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 14149  1C34  0008               	return
 14150  1C35                     __end_of_setDimmerIntr_DimmingValue:	
 14151                           
 14152                           	psect	text93
 14153  1E6C                     __ptext93:	
 14154 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14155 ;; Defined at:
 14156 ;;		line 31 in file "../src/Dimmer_B1.c"
 14157 ;; Parameters:    Size  Location     Type
 14158 ;;  lights          1    wreg     unsigned char 
 14159 ;;  command         1    1[BANK0 ] unsigned char 
 14160 ;; Auto vars:     Size  Location     Type
 14161 ;;  lights          1    3[BANK0 ] unsigned char 
 14162 ;; Return value:  Size  Location     Type
 14163 ;;		None               void
 14164 ;; Registers used:
 14165 ;;		wreg, status,2, status,0
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14171 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;Total ram usage:        3 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; Hardware stack levels required when called:    5
 14178 ;; This function calls:
 14179 ;;		Nothing
 14180 ;; This function is called by:
 14181 ;;		_setDimmerLights_OnOff
 14182 ;; This function uses a non-reentrant model
 14183 ;;
 14184                           
 14185                           
 14186                           ;psect for function _setDimmerIntr_ControlStatus
 14187  1E6C                     _setDimmerIntr_ControlStatus:	
 14188                           
 14189                           ;incstack = 0
 14190                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14191                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14192  1E6C  0020               	movlb	0	; select bank0
 14193  1E6D  00A3               	movwf	setDimmerIntr_ControlStatus@lights
 14194                           
 14195                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14196  1E6E  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14197  1E6F  3A01               	xorlw	1
 14198  1E70  1D03               	skipz
 14199  1E71  0008               	return
 14200                           
 14201                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14202  1E72  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14203  1E73  3A01               	xorlw	1
 14204  1E74  3000               	movlw	0
 14205  1E75  1903               	skipnz
 14206  1E76  3001               	movlw	1
 14207  1E77  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14208  1E78  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14209  1E79  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14210  1E7A  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14211  1E7B  0021               	movlb	1	; select bank1
 14212  1E7C  083A               	movf	_DimmerIntr1^(0+128),w
 14213  1E7D  0020               	movlb	0	; select bank0
 14214  1E7E  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14215  1E7F  39F7               	andlw	-9
 14216  1E80  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14217  1E81  0021               	movlb	1	; select bank1
 14218  1E82  00BA               	movwf	_DimmerIntr1^(0+128)
 14219  1E83  0008               	return
 14220  1E84                     __end_of_setDimmerIntr_ControlStatus:	
 14221                           
 14222                           	psect	text94
 14223  0CAC                     __ptext94:	
 14224 ;; *************** function _setDelayOff_GO *****************
 14225 ;; Defined at:
 14226 ;;		line 87 in file "../src/DelayOff_B1.c"
 14227 ;; Parameters:    Size  Location     Type
 14228 ;;  sw              1    wreg     unsigned char 
 14229 ;;  command         1   70[BANK0 ] unsigned char 
 14230 ;;  value           1   71[BANK0 ] unsigned char 
 14231 ;; Auto vars:     Size  Location     Type
 14232 ;;  sw              1   77[BANK0 ] unsigned char 
 14233 ;;  k               1   76[BANK0 ] unsigned char 
 14234 ;;  j               1   75[BANK0 ] unsigned char 
 14235 ;;  i               1   74[BANK0 ] unsigned char 
 14236 ;; Return value:  Size  Location     Type
 14237 ;;		None               void
 14238 ;; Registers used:
 14239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14240 ;; Tracked objects:
 14241 ;;		On entry : 0/0
 14242 ;;		On exit  : 0/0
 14243 ;;		Unchanged: 0/0
 14244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14245 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14249 ;;Total ram usage:        8 bytes
 14250 ;; Hardware stack levels used:    1
 14251 ;; Hardware stack levels required when called:    6
 14252 ;; This function calls:
 14253 ;;		_DelayOffPointSelect
 14254 ;;		___bmul
 14255 ;;		_setProductData
 14256 ;; This function is called by:
 14257 ;;		_setDimmerLights_OnOff
 14258 ;;		_setRFSW_Control
 14259 ;; This function uses a non-reentrant model
 14260 ;;
 14261                           
 14262                           
 14263                           ;psect for function _setDelayOff_GO
 14264  0CAC                     _setDelayOff_GO:	
 14265                           
 14266                           ;incstack = 0
 14267                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14268                           ;setDelayOff_GO@sw stored from wreg
 14269  0CAC  0020               	movlb	0	; select bank0
 14270  0CAD  00ED               	movwf	setDelayOff_GO@sw
 14271                           
 14272                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14273  0CAE  086D               	movf	setDelayOff_GO@sw,w
 14274  0CAF  319B  23F9  318C   	fcall	_DelayOffPointSelect
 14275                           
 14276                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14277  0CB2  0020               	movlb	0	; select bank0
 14278  0CB3  0866               	movf	setDelayOff_GO@command,w
 14279  0CB4  3A01               	xorlw	1
 14280  0CB5  3000               	movlw	0
 14281  0CB6  1903               	skipnz
 14282  0CB7  3001               	movlw	1
 14283  0CB8  00E8               	movwf	??_setDelayOff_GO
 14284  0CB9  0021               	movlb	1	; select bank1
 14285  0CBA  084D               	movf	_DelayOff^(0+128),w
 14286  0CBB  0086               	movwf	6
 14287  0CBC  3001               	movlw	1	; select bank2/3
 14288  0CBD  0087               	movwf	7
 14289  0CBE  0020               	movlb	0	; select bank0
 14290  0CBF  0DE8               	rlf	??_setDelayOff_GO,f
 14291  0CC0  0801               	movf	1,w
 14292  0CC1  0668               	xorwf	??_setDelayOff_GO,w
 14293  0CC2  39FD               	andlw	-3
 14294  0CC3  0668               	xorwf	??_setDelayOff_GO,w
 14295  0CC4  0081               	movwf	1
 14296                           
 14297                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14298  0CC5  0021               	movlb	1	; select bank1
 14299  0CC6  084D               	movf	_DelayOff^(0+128),w
 14300  0CC7  3E02               	addlw	2
 14301  0CC8  0086               	movwf	6
 14302  0CC9  3001               	movlw	1	; select bank2/3
 14303  0CCA  0087               	movwf	7
 14304  0CCB  3000               	movlw	0
 14305  0CCC  3FC0               	movwi [0]fsr1
 14306  0CCD  3FC1               	movwi [1]fsr1
 14307                           
 14308                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14309  0CCE  084D               	movf	_DelayOff^(0+128),w
 14310  0CCF  3E04               	addlw	4
 14311  0CD0  0086               	movwf	6
 14312  0CD1  3001               	movlw	1	; select bank2/3
 14313  0CD2  0087               	movwf	7
 14314  0CD3  0181               	clrf	1
 14315                           
 14316                           ;DelayOff_B1.c: 94: if (command == 1) {
 14317  0CD4  0020               	movlb	0	; select bank0
 14318  0CD5  0866               	movf	setDelayOff_GO@command,w
 14319  0CD6  3A01               	xorlw	1
 14320  0CD7  1D03               	skipz
 14321  0CD8  2D2E               	goto	l8286
 14322                           
 14323                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14324  0CD9  3005               	movlw	5
 14325  0CDA  00E8               	movwf	??_setDelayOff_GO
 14326  0CDB  0868               	movf	??_setDelayOff_GO,w
 14327  0CDC  00EA               	movwf	setDelayOff_GO@i
 14328  0CDD  01EB               	clrf	setDelayOff_GO@j
 14329  0CDE  01EC               	clrf	setDelayOff_GO@k
 14330                           
 14331                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14332  0CDF  300F               	movlw	15
 14333  0CE0  0567               	andwf	setDelayOff_GO@value,w
 14334  0CE1  00E8               	movwf	??_setDelayOff_GO
 14335  0CE2  0868               	movf	??_setDelayOff_GO,w
 14336  0CE3  3A05               	xorlw	5
 14337  0CE4  1903               	skipnz
 14338  0CE5  2CEA               	goto	l8272
 14339  0CE6  0867               	movf	setDelayOff_GO@value,w
 14340  0CE7  390F               	andlw	15
 14341  0CE8  1D03               	btfss	3,2
 14342  0CE9  2D1A               	goto	l8282
 14343  0CEA                     l8272:	
 14344  0CEA  3031               	movlw	49
 14345  0CEB  0267               	subwf	setDelayOff_GO@value,w
 14346  0CEC  1803               	skipnc
 14347  0CED  2D1A               	goto	l8282
 14348                           
 14349                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14350  0CEE  0867               	movf	setDelayOff_GO@value,w
 14351  0CEF  390F               	andlw	15
 14352  0CF0  00E8               	movwf	??_setDelayOff_GO
 14353  0CF1  0868               	movf	??_setDelayOff_GO,w
 14354  0CF2  00EB               	movwf	setDelayOff_GO@j
 14355                           
 14356                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14357  0CF3  0867               	movf	setDelayOff_GO@value,w
 14358  0CF4  00E8               	movwf	??_setDelayOff_GO
 14359  0CF5  3004               	movlw	4
 14360  0CF6                     u8555:	
 14361  0CF6  36E8               	lsrf	??_setDelayOff_GO,f
 14362  0CF7  0B89               	decfsz	9,f
 14363  0CF8  2CF6               	goto	u8555
 14364  0CF9  0868               	movf	??_setDelayOff_GO,w
 14365  0CFA  390F               	andlw	15
 14366  0CFB  00E9               	movwf	??_setDelayOff_GO+1
 14367  0CFC  0869               	movf	??_setDelayOff_GO+1,w
 14368  0CFD  00EC               	movwf	setDelayOff_GO@k
 14369                           
 14370                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14371  0CFE  300A               	movlw	10
 14372  0CFF  00E8               	movwf	??_setDelayOff_GO
 14373  0D00  0868               	movf	??_setDelayOff_GO,w
 14374  0D01  00A1               	movwf	___bmul@multiplicand
 14375  0D02  086C               	movf	setDelayOff_GO@k,w
 14376  0D03  319D  2530  318C   	fcall	___bmul
 14377  0D06  0020               	movlb	0	; select bank0
 14378  0D07  076B               	addwf	setDelayOff_GO@j,w
 14379  0D08  00E9               	movwf	??_setDelayOff_GO+1
 14380  0D09  0021               	movlb	1	; select bank1
 14381  0D0A  0A4D               	incf	_DelayOff^(0+128),w
 14382  0D0B  0086               	movwf	6
 14383  0D0C  3001               	movlw	1	; select bank2/3
 14384  0D0D  0087               	movwf	7
 14385  0D0E  0020               	movlb	0	; select bank0
 14386  0D0F  0869               	movf	??_setDelayOff_GO+1,w
 14387  0D10  0081               	movwf	1
 14388                           
 14389                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14390  0D11  0867               	movf	setDelayOff_GO@value,w
 14391  0D12  00E8               	movwf	??_setDelayOff_GO
 14392  0D13  0868               	movf	??_setDelayOff_GO,w
 14393  0D14  00E3               	movwf	setProductData@value
 14394  0D15  086D               	movf	setDelayOff_GO@sw,w
 14395  0D16  3E1A               	addlw	26
 14396  0D17  319C  2411         	fcall	_setProductData
 14397                           
 14398                           ;DelayOff_B1.c: 103: } else {
 14399  0D19  0008               	return
 14400  0D1A                     l8282:	
 14401                           
 14402                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14403  0D1A  3005               	movlw	5
 14404  0D1B  0020               	movlb	0	; select bank0
 14405  0D1C  00E8               	movwf	??_setDelayOff_GO
 14406  0D1D  0021               	movlb	1	; select bank1
 14407  0D1E  0A4D               	incf	_DelayOff^(0+128),w
 14408  0D1F  0086               	movwf	6
 14409  0D20  3001               	movlw	1	; select bank2/3
 14410  0D21  0087               	movwf	7
 14411  0D22  0020               	movlb	0	; select bank0
 14412  0D23  0868               	movf	??_setDelayOff_GO,w
 14413  0D24  0081               	movwf	1
 14414                           
 14415                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14416  0D25  3005               	movlw	5
 14417  0D26  00E8               	movwf	??_setDelayOff_GO
 14418  0D27  0868               	movf	??_setDelayOff_GO,w
 14419  0D28  00E3               	movwf	setProductData@value
 14420  0D29  086D               	movf	setDelayOff_GO@sw,w
 14421  0D2A  3E1A               	addlw	26
 14422  0D2B  319C  2411         	fcall	_setProductData
 14423                           
 14424                           ;DelayOff_B1.c: 106: }
 14425                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14426  0D2D  0008               	return
 14427  0D2E                     l8286:	
 14428  0D2E  0020               	movlb	0	; select bank0
 14429  0D2F  08E6               	movf	setDelayOff_GO@command,f
 14430  0D30  1D03               	skipz
 14431  0D31  0008               	return
 14432                           
 14433                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14434  0D32  01E3               	clrf	setProductData@value
 14435  0D33  086D               	movf	setDelayOff_GO@sw,w
 14436  0D34  3E1A               	addlw	26
 14437  0D35  319C  2411         	fcall	_setProductData
 14438  0D37  0008               	return
 14439  0D38                     __end_of_setDelayOff_GO:	
 14440                           
 14441                           	psect	text95
 14442  1D30                     __ptext95:	
 14443 ;; *************** function ___bmul *****************
 14444 ;; Defined at:
 14445 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;  multiplier      1    wreg     unsigned char 
 14448 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;  multiplier      1    4[BANK0 ] unsigned char 
 14451 ;;  product         1    3[BANK0 ] unsigned char 
 14452 ;; Return value:  Size  Location     Type
 14453 ;;                  1    wreg      unsigned char 
 14454 ;; Registers used:
 14455 ;;		wreg, status,2, status,0
 14456 ;; Tracked objects:
 14457 ;;		On entry : 0/0
 14458 ;;		On exit  : 0/0
 14459 ;;		Unchanged: 0/0
 14460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14461 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;Total ram usage:        4 bytes
 14466 ;; Hardware stack levels used:    1
 14467 ;; Hardware stack levels required when called:    5
 14468 ;; This function calls:
 14469 ;;		Nothing
 14470 ;; This function is called by:
 14471 ;;		_setDelayOff_GO
 14472 ;;		_DelayTimejudge
 14473 ;; This function uses a non-reentrant model
 14474 ;;
 14475                           
 14476                           
 14477                           ;psect for function ___bmul
 14478  1D30                     ___bmul:	
 14479                           
 14480                           ;incstack = 0
 14481                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14482                           ;___bmul@multiplier stored from wreg
 14483  1D30  0020               	movlb	0	; select bank0
 14484  1D31  00A4               	movwf	___bmul@multiplier
 14485  1D32  01A3               	clrf	___bmul@product
 14486  1D33                     l5720:	
 14487  1D33  1C24               	btfss	___bmul@multiplier,0
 14488  1D34  2D39               	goto	l5724
 14489  1D35  0821               	movf	___bmul@multiplicand,w
 14490  1D36  00A2               	movwf	??___bmul
 14491  1D37  0822               	movf	??___bmul,w
 14492  1D38  07A3               	addwf	___bmul@product,f
 14493  1D39                     l5724:	
 14494  1D39  1003               	clrc
 14495  1D3A  0DA1               	rlf	___bmul@multiplicand,f
 14496  1D3B  1003               	clrc
 14497  1D3C  0CA4               	rrf	___bmul@multiplier,f
 14498  1D3D  08A4               	movf	___bmul@multiplier,f
 14499  1D3E  1D03               	skipz
 14500  1D3F  2D33               	goto	l5720
 14501  1D40  0823               	movf	___bmul@product,w
 14502  1D41  0008               	return
 14503  1D42                     __end_of___bmul:	
 14504                           
 14505                           	psect	text96
 14506  1EB5                     __ptext96:	
 14507 ;; *************** function _setCmd_Status *****************
 14508 ;; Defined at:
 14509 ;;		line 651 in file "../src/Main_B1.c"
 14510 ;; Parameters:    Size  Location     Type
 14511 ;;  number          1    wreg     unsigned char 
 14512 ;;  cmd             1    1[BANK0 ] unsigned char 
 14513 ;; Auto vars:     Size  Location     Type
 14514 ;;  number          1    3[BANK0 ] unsigned char 
 14515 ;; Return value:  Size  Location     Type
 14516 ;;		None               void
 14517 ;; Registers used:
 14518 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14519 ;; Tracked objects:
 14520 ;;		On entry : 0/0
 14521 ;;		On exit  : 0/0
 14522 ;;		Unchanged: 0/0
 14523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14524 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14527 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14528 ;;Total ram usage:        3 bytes
 14529 ;; Hardware stack levels used:    1
 14530 ;; Hardware stack levels required when called:    5
 14531 ;; This function calls:
 14532 ;;		Nothing
 14533 ;; This function is called by:
 14534 ;;		_setDimmerLights_OnOff
 14535 ;;		_setControl_Lights_Table
 14536 ;; This function uses a non-reentrant model
 14537 ;;
 14538                           
 14539                           
 14540                           ;psect for function _setCmd_Status
 14541  1EB5                     _setCmd_Status:	
 14542                           
 14543                           ;incstack = 0
 14544                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14545                           ;setCmd_Status@number stored from wreg
 14546  1EB5  0020               	movlb	0	; select bank0
 14547  1EB6  00A3               	movwf	setCmd_Status@number
 14548                           
 14549                           ;Main_B1.c: 652: switch (number) {
 14550  1EB7  2EC7               	goto	l6222
 14551  1EB8                     l6218:	
 14552                           ;Main_B1.c: 653: case 1:
 14553                           
 14554                           
 14555                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14556  1EB8  0821               	movf	setCmd_Status@cmd,w
 14557  1EB9  3A01               	xorlw	1
 14558  1EBA  3000               	movlw	0
 14559  1EBB  1903               	skipnz
 14560  1EBC  3001               	movlw	1
 14561  1EBD  00A2               	movwf	??_setCmd_Status
 14562  1EBE  0021               	movlb	1	; select bank1
 14563  1EBF  084C               	movf	_Cmd^(0+128),w
 14564  1EC0  0020               	movlb	0	; select bank0
 14565  1EC1  0622               	xorwf	??_setCmd_Status,w
 14566  1EC2  39FE               	andlw	-2
 14567  1EC3  0622               	xorwf	??_setCmd_Status,w
 14568  1EC4  0021               	movlb	1	; select bank1
 14569  1EC5  00CC               	movwf	_Cmd^(0+128)
 14570                           
 14571                           ;Main_B1.c: 656: }
 14572                           
 14573                           ;Main_B1.c: 655: break;
 14574  1EC6  0008               	return
 14575  1EC7                     l6222:	
 14576  1EC7  0020               	movlb	0	; select bank0
 14577  1EC8  0823               	movf	setCmd_Status@number,w
 14578                           
 14579                           ; Switch size 1, requested type "space"
 14580                           ; Number of cases is 1, Range of values is 1 to 1
 14581                           ; switch strategies available:
 14582                           ; Name         Instructions Cycles
 14583                           ; simple_byte            4     3 (average)
 14584                           ; direct_byte           11     9 (fixed)
 14585                           ; jumptable            263     9 (fixed)
 14586                           ;	Chosen strategy is simple_byte
 14587  1EC9  3A01               	xorlw	1	; case 1
 14588  1ECA  1903               	skipnz
 14589  1ECB  2EB8               	goto	l6218
 14590  1ECC  2ECD               	goto	l1495
 14591  1ECD                     l1495:	
 14592  1ECD  0008               	return
 14593  1ECE                     __end_of_setCmd_Status:	
 14594                           
 14595                           	psect	text97
 14596  1BB8                     __ptext97:	
 14597 ;; *************** function _getMain_All_LightsStatus *****************
 14598 ;; Defined at:
 14599 ;;		line 373 in file "../src/Main_B1.c"
 14600 ;; Parameters:    Size  Location     Type
 14601 ;;		None
 14602 ;; Auto vars:     Size  Location     Type
 14603 ;;  status          1    1[BANK0 ] unsigned char 
 14604 ;; Return value:  Size  Location     Type
 14605 ;;                  1    wreg      unsigned char 
 14606 ;; Registers used:
 14607 ;;		wreg, status,2
 14608 ;; Tracked objects:
 14609 ;;		On entry : 0/0
 14610 ;;		On exit  : 0/0
 14611 ;;		Unchanged: 0/0
 14612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14614 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14616 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;Total ram usage:        1 bytes
 14618 ;; Hardware stack levels used:    1
 14619 ;; Hardware stack levels required when called:    5
 14620 ;; This function calls:
 14621 ;;		Nothing
 14622 ;; This function is called by:
 14623 ;;		_DimmerLights_Main
 14624 ;;		_setDimmerLights_Main
 14625 ;;		_setDimmerLights_OnOff
 14626 ;;		_Flash_Memory_Main
 14627 ;;		_Exception_Main
 14628 ;;		_Load_Main
 14629 ;;		_setTemp_Main
 14630 ;;		_setControl_Lights_Table
 14631 ;; This function uses a non-reentrant model
 14632 ;;
 14633                           
 14634                           
 14635                           ;psect for function _getMain_All_LightsStatus
 14636  1BB8                     _getMain_All_LightsStatus:	
 14637                           
 14638                           ;Main_B1.c: 374: char status = 0;
 14639                           
 14640                           ;incstack = 0
 14641                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 14642  1BB8  0020               	movlb	0	; select bank0
 14643  1BB9  01A1               	clrf	getMain_All_LightsStatus@status
 14644                           
 14645                           ;Main_B1.c: 381: status = DimmerLights1.Status == 1 ? 1 : 0;
 14646  1BBA  3000               	movlw	0
 14647  1BBB  0022               	movlb	2	; select bank2
 14648  1BBC  185D               	btfsc	(_DimmerLights1^(0+256)+1),0
 14649  1BBD  3001               	movlw	1
 14650  1BBE  0020               	movlb	0	; select bank0
 14651  1BBF  00A1               	movwf	getMain_All_LightsStatus@status
 14652                           
 14653                           ;Main_B1.c: 420: return status;
 14654  1BC0  0821               	movf	getMain_All_LightsStatus@status,w
 14655  1BC1  0008               	return
 14656  1BC2                     __end_of_getMain_All_LightsStatus:	
 14657                           
 14658                           	psect	text98
 14659  179B                     __ptext98:	
 14660 ;; *************** function _getDimmerLights_PercentToValue *****************
 14661 ;; Defined at:
 14662 ;;		line 1039 in file "../src/Dimmer_B1.c"
 14663 ;; Parameters:    Size  Location     Type
 14664 ;;  value           1    wreg     unsigned char 
 14665 ;; Auto vars:     Size  Location     Type
 14666 ;;  value           1   63[BANK0 ] unsigned char 
 14667 ;;  i               3   64[BANK0 ] float 
 14668 ;; Return value:  Size  Location     Type
 14669 ;;                  1    wreg      unsigned char 
 14670 ;; Registers used:
 14671 ;;		wreg, status,2, status,0, pclath, cstack
 14672 ;; Tracked objects:
 14673 ;;		On entry : 0/0
 14674 ;;		On exit  : 0/0
 14675 ;;		Unchanged: 0/0
 14676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14680 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14681 ;;Total ram usage:        6 bytes
 14682 ;; Hardware stack levels used:    1
 14683 ;; Hardware stack levels required when called:    7
 14684 ;; This function calls:
 14685 ;;		___awtoft
 14686 ;;		___ftadd
 14687 ;;		___ftdiv
 14688 ;;		___ftmul
 14689 ;;		___ftneg
 14690 ;;		___fttol
 14691 ;; This function is called by:
 14692 ;;		_setDimmerLights_OnOff
 14693 ;;		_setRFSW_AdjControl
 14694 ;; This function uses a non-reentrant model
 14695 ;;
 14696                           
 14697                           
 14698                           ;psect for function _getDimmerLights_PercentToValue
 14699  179B                     _getDimmerLights_PercentToValue:	
 14700                           
 14701                           ;incstack = 0
 14702                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14703                           ;getDimmerLights_PercentToValue@value stored from wreg
 14704  179B  0020               	movlb	0	; select bank0
 14705  179C  00DF               	movwf	getDimmerLights_PercentToValue@value
 14706                           
 14707                           ;Dimmer_B1.c: 1047: float i = ((char)(65*0.78)) - ((char)(5*0.78));
 14708  179D  3000               	movlw	0
 14709  179E  00E0               	movwf	getDimmerLights_PercentToValue@i
 14710  179F  303C               	movlw	60
 14711  17A0  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 14712  17A1  3042               	movlw	66
 14713  17A2  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 14714                           
 14715                           ;Dimmer_B1.c: 1048: i /= 100;
 14716  17A3  3000               	movlw	0
 14717  17A4  00AF               	movwf	___ftdiv@f2
 14718  17A5  30C8               	movlw	200
 14719  17A6  00B0               	movwf	___ftdiv@f2+1
 14720  17A7  3042               	movlw	66
 14721  17A8  00B1               	movwf	___ftdiv@f2+2
 14722  17A9  0860               	movf	getDimmerLights_PercentToValue@i,w
 14723  17AA  00B2               	movwf	___ftdiv@f1
 14724  17AB  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 14725  17AC  00B3               	movwf	___ftdiv@f1+1
 14726  17AD  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 14727  17AE  00B4               	movwf	___ftdiv@f1+2
 14728  17AF  318D  2538  3197   	fcall	___ftdiv
 14729  17B2  0020               	movlb	0	; select bank0
 14730  17B3  082F               	movf	?___ftdiv,w
 14731  17B4  00E0               	movwf	getDimmerLights_PercentToValue@i
 14732  17B5  0830               	movf	?___ftdiv+1,w
 14733  17B6  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 14734  17B7  0831               	movf	?___ftdiv+2,w
 14735  17B8  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 14736                           
 14737                           ;Dimmer_B1.c: 1050: return (char) (((char)(65*0.78)) - ((100 - value) * i));
 14738  17B9  085F               	movf	getDimmerLights_PercentToValue@value,w
 14739  17BA  00DD               	movwf	??_getDimmerLights_PercentToValue
 14740  17BB  01DE               	clrf	??_getDimmerLights_PercentToValue+1
 14741  17BC  09DD               	comf	??_getDimmerLights_PercentToValue,f
 14742  17BD  09DE               	comf	??_getDimmerLights_PercentToValue+1,f
 14743  17BE  0ADD               	incf	??_getDimmerLights_PercentToValue,f
 14744  17BF  1903               	skipnz
 14745  17C0  0ADE               	incf	??_getDimmerLights_PercentToValue+1,f
 14746  17C1  085D               	movf	??_getDimmerLights_PercentToValue,w
 14747  17C2  3E64               	addlw	100
 14748  17C3  00A9               	movwf	___awtoft@c
 14749  17C4  3000               	movlw	0
 14750  17C5  3D5E               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14751  17C6  00AA               	movwf	___awtoft@c+1
 14752  17C7  3187  27DE  3197   	fcall	___awtoft
 14753  17CA  0020               	movlb	0	; select bank0
 14754  17CB  0829               	movf	?___awtoft,w
 14755  17CC  00B2               	movwf	___ftmul@f2
 14756  17CD  082A               	movf	?___awtoft+1,w
 14757  17CE  00B3               	movwf	___ftmul@f2+1
 14758  17CF  082B               	movf	?___awtoft+2,w
 14759  17D0  00B4               	movwf	___ftmul@f2+2
 14760  17D1  0860               	movf	getDimmerLights_PercentToValue@i,w
 14761  17D2  00AF               	movwf	___ftmul@f1
 14762  17D3  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 14763  17D4  00B0               	movwf	___ftmul@f1+1
 14764  17D5  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 14765  17D6  00B1               	movwf	___ftmul@f1+2
 14766  17D7  318E  2691  3197   	fcall	___ftmul
 14767  17DA  0020               	movlb	0	; select bank0
 14768  17DB  082F               	movf	?___ftmul,w
 14769  17DC  00BF               	movwf	___ftneg@f1
 14770  17DD  0830               	movf	?___ftmul+1,w
 14771  17DE  00C0               	movwf	___ftneg@f1+1
 14772  17DF  0831               	movf	?___ftmul+2,w
 14773  17E0  00C1               	movwf	___ftneg@f1+2
 14774  17E1  319B  23A6  3197   	fcall	___ftneg
 14775  17E4  0020               	movlb	0	; select bank0
 14776  17E5  083F               	movf	?___ftneg,w
 14777  17E6  00C5               	movwf	___ftadd@f2
 14778  17E7  0840               	movf	?___ftneg+1,w
 14779  17E8  00C6               	movwf	___ftadd@f2+1
 14780  17E9  0841               	movf	?___ftneg+2,w
 14781  17EA  00C7               	movwf	___ftadd@f2+2
 14782  17EB  3000               	movlw	0
 14783  17EC  00C2               	movwf	___ftadd@f1
 14784  17ED  3048               	movlw	72
 14785  17EE  00C3               	movwf	___ftadd@f1+1
 14786  17EF  3042               	movlw	66
 14787  17F0  00C4               	movwf	___ftadd@f1+2
 14788  17F1  3183  2380  3197   	fcall	___ftadd
 14789  17F4  0020               	movlb	0	; select bank0
 14790  17F5  0842               	movf	?___ftadd,w
 14791  17F6  00CF               	movwf	___fttol@f1
 14792  17F7  0843               	movf	?___ftadd+1,w
 14793  17F8  00D0               	movwf	___fttol@f1+1
 14794  17F9  0844               	movf	?___ftadd+2,w
 14795  17FA  00D1               	movwf	___fttol@f1+2
 14796  17FB  318C  2425         	fcall	___fttol
 14797  17FD  0020               	movlb	0	; select bank0
 14798  17FE  084F               	movf	?___fttol,w
 14799  17FF  0008               	return
 14800  1800                     __end_of_getDimmerLights_PercentToValue:	
 14801                           
 14802                           	psect	text99
 14803  0E91                     __ptext99:	
 14804 ;; *************** function ___ftmul *****************
 14805 ;; Defined at:
 14806 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14807 ;; Parameters:    Size  Location     Type
 14808 ;;  f1              3   15[BANK0 ] float 
 14809 ;;  f2              3   18[BANK0 ] float 
 14810 ;; Auto vars:     Size  Location     Type
 14811 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
 14812 ;;  sign            1   30[BANK0 ] unsigned char 
 14813 ;;  cntr            1   29[BANK0 ] unsigned char 
 14814 ;;  exp             1   25[BANK0 ] unsigned char 
 14815 ;; Return value:  Size  Location     Type
 14816 ;;                  3   15[BANK0 ] float 
 14817 ;; Registers used:
 14818 ;;		wreg, status,2, status,0, pclath, cstack
 14819 ;; Tracked objects:
 14820 ;;		On entry : 0/0
 14821 ;;		On exit  : 0/0
 14822 ;;		Unchanged: 0/0
 14823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14824 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14826 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14827 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14828 ;;Total ram usage:       16 bytes
 14829 ;; Hardware stack levels used:    1
 14830 ;; Hardware stack levels required when called:    6
 14831 ;; This function calls:
 14832 ;;		___ftpack
 14833 ;; This function is called by:
 14834 ;;		_getDimmerLights_PercentToValue
 14835 ;; This function uses a non-reentrant model
 14836 ;;
 14837                           
 14838                           
 14839                           ;psect for function ___ftmul
 14840  0E91                     ___ftmul:	
 14841                           
 14842                           ;incstack = 0
 14843                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14844  0E91  0020               	movlb	0	; select bank0
 14845  0E92  082F               	movf	___ftmul@f1,w
 14846  0E93  00B5               	movwf	??___ftmul
 14847  0E94  0830               	movf	___ftmul@f1+1,w
 14848  0E95  00B6               	movwf	??___ftmul+1
 14849  0E96  0831               	movf	___ftmul@f1+2,w
 14850  0E97  00B7               	movwf	??___ftmul+2
 14851  0E98  1003               	clrc
 14852  0E99  0D36               	rlf	??___ftmul+1,w
 14853  0E9A  0D37               	rlf	??___ftmul+2,w
 14854  0E9B  00B8               	movwf	??___ftmul+3
 14855  0E9C  0838               	movf	??___ftmul+3,w
 14856  0E9D  00B9               	movwf	___ftmul@exp
 14857  0E9E  08B9               	movf	___ftmul@exp,f
 14858  0E9F  1D03               	skipz
 14859  0EA0  2EA8               	goto	l5866
 14860  0EA1  3000               	movlw	0
 14861  0EA2  00AF               	movwf	?___ftmul
 14862  0EA3  3000               	movlw	0
 14863  0EA4  00B0               	movwf	?___ftmul+1
 14864  0EA5  3000               	movlw	0
 14865  0EA6  00B1               	movwf	?___ftmul+2
 14866  0EA7  0008               	return
 14867  0EA8                     l5866:	
 14868  0EA8  0832               	movf	___ftmul@f2,w
 14869  0EA9  00B5               	movwf	??___ftmul
 14870  0EAA  0833               	movf	___ftmul@f2+1,w
 14871  0EAB  00B6               	movwf	??___ftmul+1
 14872  0EAC  0834               	movf	___ftmul@f2+2,w
 14873  0EAD  00B7               	movwf	??___ftmul+2
 14874  0EAE  1003               	clrc
 14875  0EAF  0D36               	rlf	??___ftmul+1,w
 14876  0EB0  0D37               	rlf	??___ftmul+2,w
 14877  0EB1  00B8               	movwf	??___ftmul+3
 14878  0EB2  0838               	movf	??___ftmul+3,w
 14879  0EB3  00BE               	movwf	___ftmul@sign
 14880  0EB4  08BE               	movf	___ftmul@sign,f
 14881  0EB5  1D03               	skipz
 14882  0EB6  2EBE               	goto	l5872
 14883  0EB7  3000               	movlw	0
 14884  0EB8  00AF               	movwf	?___ftmul
 14885  0EB9  3000               	movlw	0
 14886  0EBA  00B0               	movwf	?___ftmul+1
 14887  0EBB  3000               	movlw	0
 14888  0EBC  00B1               	movwf	?___ftmul+2
 14889  0EBD  0008               	return
 14890  0EBE                     l5872:	
 14891  0EBE  083E               	movf	___ftmul@sign,w
 14892  0EBF  3E7B               	addlw	123
 14893  0EC0  00B5               	movwf	??___ftmul
 14894  0EC1  0835               	movf	??___ftmul,w
 14895  0EC2  07B9               	addwf	___ftmul@exp,f
 14896  0EC3  082F               	movf	___ftmul@f1,w
 14897  0EC4  00B5               	movwf	??___ftmul
 14898  0EC5  0830               	movf	___ftmul@f1+1,w
 14899  0EC6  00B6               	movwf	??___ftmul+1
 14900  0EC7  0831               	movf	___ftmul@f1+2,w
 14901  0EC8  00B7               	movwf	??___ftmul+2
 14902  0EC9  3010               	movlw	16
 14903  0ECA                     u4815:	
 14904  0ECA  36B7               	lsrf	??___ftmul+2,f
 14905  0ECB  0CB6               	rrf	??___ftmul+1,f
 14906  0ECC  0CB5               	rrf	??___ftmul,f
 14907  0ECD  0B89               	decfsz	9,f
 14908  0ECE  2ECA               	goto	u4815
 14909  0ECF  0835               	movf	??___ftmul,w
 14910  0ED0  00B8               	movwf	??___ftmul+3
 14911  0ED1  0838               	movf	??___ftmul+3,w
 14912  0ED2  00BE               	movwf	___ftmul@sign
 14913  0ED3  0832               	movf	___ftmul@f2,w
 14914  0ED4  00B5               	movwf	??___ftmul
 14915  0ED5  0833               	movf	___ftmul@f2+1,w
 14916  0ED6  00B6               	movwf	??___ftmul+1
 14917  0ED7  0834               	movf	___ftmul@f2+2,w
 14918  0ED8  00B7               	movwf	??___ftmul+2
 14919  0ED9  3010               	movlw	16
 14920  0EDA                     u4825:	
 14921  0EDA  36B7               	lsrf	??___ftmul+2,f
 14922  0EDB  0CB6               	rrf	??___ftmul+1,f
 14923  0EDC  0CB5               	rrf	??___ftmul,f
 14924  0EDD  0B89               	decfsz	9,f
 14925  0EDE  2EDA               	goto	u4825
 14926  0EDF  0835               	movf	??___ftmul,w
 14927  0EE0  00B8               	movwf	??___ftmul+3
 14928  0EE1  0838               	movf	??___ftmul+3,w
 14929  0EE2  06BE               	xorwf	___ftmul@sign,f
 14930  0EE3  3080               	movlw	128
 14931  0EE4  00B5               	movwf	??___ftmul
 14932  0EE5  0835               	movf	??___ftmul,w
 14933  0EE6  05BE               	andwf	___ftmul@sign,f
 14934  0EE7  17B0               	bsf	___ftmul@f1+1,7
 14935  0EE8  17B3               	bsf	___ftmul@f2+1,7
 14936  0EE9  30FF               	movlw	255
 14937  0EEA  05B2               	andwf	___ftmul@f2,f
 14938  0EEB  30FF               	movlw	255
 14939  0EEC  05B3               	andwf	___ftmul@f2+1,f
 14940  0EED  3000               	movlw	0
 14941  0EEE  05B4               	andwf	___ftmul@f2+2,f
 14942  0EEF  3000               	movlw	0
 14943  0EF0  00BA               	movwf	___ftmul@f3_as_product
 14944  0EF1  3000               	movlw	0
 14945  0EF2  00BB               	movwf	___ftmul@f3_as_product+1
 14946  0EF3  3000               	movlw	0
 14947  0EF4  00BC               	movwf	___ftmul@f3_as_product+2
 14948  0EF5  3007               	movlw	7
 14949  0EF6  00B5               	movwf	??___ftmul
 14950  0EF7  0835               	movf	??___ftmul,w
 14951  0EF8  00BD               	movwf	___ftmul@cntr
 14952  0EF9                     l5884:	
 14953  0EF9  1C2F               	btfss	___ftmul@f1,0
 14954  0EFA  2F01               	goto	l5888
 14955  0EFB  0832               	movf	___ftmul@f2,w
 14956  0EFC  07BA               	addwf	___ftmul@f3_as_product,f
 14957  0EFD  0833               	movf	___ftmul@f2+1,w
 14958  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 14959  0EFF  0834               	movf	___ftmul@f2+2,w
 14960  0F00  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 14961  0F01                     l5888:	
 14962  0F01  3001               	movlw	1
 14963  0F02                     u4845:	
 14964  0F02  36B1               	lsrf	___ftmul@f1+2,f
 14965  0F03  0CB0               	rrf	___ftmul@f1+1,f
 14966  0F04  0CAF               	rrf	___ftmul@f1,f
 14967  0F05  0B89               	decfsz	9,f
 14968  0F06  2F02               	goto	u4845
 14969  0F07  3001               	movlw	1
 14970  0F08                     u4855:	
 14971  0F08  35B2               	lslf	___ftmul@f2,f
 14972  0F09  0DB3               	rlf	___ftmul@f2+1,f
 14973  0F0A  0DB4               	rlf	___ftmul@f2+2,f
 14974  0F0B  0B89               	decfsz	9,f
 14975  0F0C  2F08               	goto	u4855
 14976  0F0D  3001               	movlw	1
 14977  0F0E  02BD               	subwf	___ftmul@cntr,f
 14978  0F0F  1D03               	btfss	3,2
 14979  0F10  2EF9               	goto	l5884
 14980  0F11  3009               	movlw	9
 14981  0F12  00B5               	movwf	??___ftmul
 14982  0F13  0835               	movf	??___ftmul,w
 14983  0F14  00BD               	movwf	___ftmul@cntr
 14984  0F15                     l5896:	
 14985  0F15  1C2F               	btfss	___ftmul@f1,0
 14986  0F16  2F1D               	goto	l5900
 14987  0F17  0832               	movf	___ftmul@f2,w
 14988  0F18  07BA               	addwf	___ftmul@f3_as_product,f
 14989  0F19  0833               	movf	___ftmul@f2+1,w
 14990  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 14991  0F1B  0834               	movf	___ftmul@f2+2,w
 14992  0F1C  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 14993  0F1D                     l5900:	
 14994  0F1D  3001               	movlw	1
 14995  0F1E                     u4885:	
 14996  0F1E  36B1               	lsrf	___ftmul@f1+2,f
 14997  0F1F  0CB0               	rrf	___ftmul@f1+1,f
 14998  0F20  0CAF               	rrf	___ftmul@f1,f
 14999  0F21  0B89               	decfsz	9,f
 15000  0F22  2F1E               	goto	u4885
 15001  0F23  3001               	movlw	1
 15002  0F24                     u4895:	
 15003  0F24  36BC               	lsrf	___ftmul@f3_as_product+2,f
 15004  0F25  0CBB               	rrf	___ftmul@f3_as_product+1,f
 15005  0F26  0CBA               	rrf	___ftmul@f3_as_product,f
 15006  0F27  0B89               	decfsz	9,f
 15007  0F28  2F24               	goto	u4895
 15008  0F29  3001               	movlw	1
 15009  0F2A  02BD               	subwf	___ftmul@cntr,f
 15010  0F2B  1D03               	btfss	3,2
 15011  0F2C  2F15               	goto	l5896
 15012  0F2D  083A               	movf	___ftmul@f3_as_product,w
 15013  0F2E  00A1               	movwf	___ftpack@arg
 15014  0F2F  083B               	movf	___ftmul@f3_as_product+1,w
 15015  0F30  00A2               	movwf	___ftpack@arg+1
 15016  0F31  083C               	movf	___ftmul@f3_as_product+2,w
 15017  0F32  00A3               	movwf	___ftpack@arg+2
 15018  0F33  0839               	movf	___ftmul@exp,w
 15019  0F34  00B5               	movwf	??___ftmul
 15020  0F35  0835               	movf	??___ftmul,w
 15021  0F36  00A4               	movwf	___ftpack@exp
 15022  0F37  083E               	movf	___ftmul@sign,w
 15023  0F38  00B6               	movwf	??___ftmul+1
 15024  0F39  0836               	movf	??___ftmul+1,w
 15025  0F3A  00A5               	movwf	___ftpack@sign
 15026  0F3B  3196  2670         	fcall	___ftpack
 15027  0F3D  0020               	movlb	0	; select bank0
 15028  0F3E  0821               	movf	?___ftpack,w
 15029  0F3F  00AF               	movwf	?___ftmul
 15030  0F40  0822               	movf	?___ftpack+1,w
 15031  0F41  00B0               	movwf	?___ftmul+1
 15032  0F42  0823               	movf	?___ftpack+2,w
 15033  0F43  00B1               	movwf	?___ftmul+2
 15034  0F44  0008               	return
 15035  0F45                     __end_of___ftmul:	
 15036                           
 15037                           	psect	text100
 15038  1CDA                     __ptext100:	
 15039 ;; *************** function _getDelayOff_GO *****************
 15040 ;; Defined at:
 15041 ;;		line 114 in file "../src/DelayOff_B1.c"
 15042 ;; Parameters:    Size  Location     Type
 15043 ;;  sw              1    wreg     unsigned char 
 15044 ;; Auto vars:     Size  Location     Type
 15045 ;;  sw              1    3[BANK0 ] unsigned char 
 15046 ;;  go              1    4[BANK0 ] unsigned char 
 15047 ;; Return value:  Size  Location     Type
 15048 ;;                  1    wreg      unsigned char 
 15049 ;; Registers used:
 15050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15051 ;; Tracked objects:
 15052 ;;		On entry : 0/0
 15053 ;;		On exit  : 0/0
 15054 ;;		Unchanged: 0/0
 15055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;Total ram usage:        2 bytes
 15061 ;; Hardware stack levels used:    1
 15062 ;; Hardware stack levels required when called:    6
 15063 ;; This function calls:
 15064 ;;		_DelayOffPointSelect
 15065 ;; This function is called by:
 15066 ;;		_setDimmerLights_OnOff
 15067 ;; This function uses a non-reentrant model
 15068 ;;
 15069                           
 15070                           
 15071                           ;psect for function _getDelayOff_GO
 15072  1CDA                     _getDelayOff_GO:	
 15073                           
 15074                           ;incstack = 0
 15075                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15076                           ;getDelayOff_GO@sw stored from wreg
 15077  1CDA  0020               	movlb	0	; select bank0
 15078  1CDB  00A3               	movwf	getDelayOff_GO@sw
 15079                           
 15080                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15081  1CDC  0823               	movf	getDelayOff_GO@sw,w
 15082  1CDD  319B  23F9         	fcall	_DelayOffPointSelect
 15083                           
 15084                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15085  1CDF  0021               	movlb	1	; select bank1
 15086  1CE0  084D               	movf	_DelayOff^(0+128),w
 15087  1CE1  0086               	movwf	6
 15088  1CE2  3001               	movlw	1	; select bank2/3
 15089  1CE3  0087               	movwf	7
 15090  1CE4  3000               	movlw	0
 15091  1CE5  1881               	btfsc	1,1
 15092  1CE6  3001               	movlw	1
 15093  1CE7  0020               	movlb	0	; select bank0
 15094  1CE8  00A4               	movwf	getDelayOff_GO@go
 15095                           
 15096                           ;DelayOff_B1.c: 117: return go;
 15097  1CE9  0824               	movf	getDelayOff_GO@go,w
 15098  1CEA  0008               	return
 15099  1CEB                     __end_of_getDelayOff_GO:	
 15100                           
 15101                           	psect	text101
 15102  1D1E                     __ptext101:	
 15103 ;; *************** function _getCmd_Status *****************
 15104 ;; Defined at:
 15105 ;;		line 659 in file "../src/Main_B1.c"
 15106 ;; Parameters:    Size  Location     Type
 15107 ;;  number          1    wreg     unsigned char 
 15108 ;; Auto vars:     Size  Location     Type
 15109 ;;  number          1    1[BANK0 ] unsigned char 
 15110 ;;  cmd             1    2[BANK0 ] unsigned char 
 15111 ;; Return value:  Size  Location     Type
 15112 ;;                  1    wreg      unsigned char 
 15113 ;; Registers used:
 15114 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15115 ;; Tracked objects:
 15116 ;;		On entry : 0/0
 15117 ;;		On exit  : 0/0
 15118 ;;		Unchanged: 0/0
 15119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;Total ram usage:        2 bytes
 15125 ;; Hardware stack levels used:    1
 15126 ;; Hardware stack levels required when called:    5
 15127 ;; This function calls:
 15128 ;;		Nothing
 15129 ;; This function is called by:
 15130 ;;		_setDimmerLights_OnOff
 15131 ;; This function uses a non-reentrant model
 15132 ;;
 15133                           
 15134                           
 15135                           ;psect for function _getCmd_Status
 15136  1D1E                     _getCmd_Status:	
 15137                           
 15138                           ;incstack = 0
 15139                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15140                           ;getCmd_Status@number stored from wreg
 15141  1D1E  0020               	movlb	0	; select bank0
 15142  1D1F  00A1               	movwf	getCmd_Status@number
 15143                           
 15144                           ;Main_B1.c: 660: char cmd = 0;
 15145  1D20  01A2               	clrf	getCmd_Status@cmd
 15146                           
 15147                           ;Main_B1.c: 661: switch (number) {
 15148  1D21  2D29               	goto	l6472
 15149  1D22                     l6468:	
 15150                           ;Main_B1.c: 662: case 1:
 15151                           
 15152                           
 15153                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15154  1D22  3000               	movlw	0
 15155  1D23  0021               	movlb	1	; select bank1
 15156  1D24  184C               	btfsc	_Cmd^(0+128),0
 15157  1D25  3001               	movlw	1
 15158  1D26  0020               	movlb	0	; select bank0
 15159  1D27  00A2               	movwf	getCmd_Status@cmd
 15160                           
 15161                           ;Main_B1.c: 665: }
 15162                           
 15163                           ;Main_B1.c: 664: break;
 15164  1D28  2D2E               	goto	l6474
 15165  1D29                     l6472:	
 15166  1D29  0821               	movf	getCmd_Status@number,w
 15167                           
 15168                           ; Switch size 1, requested type "space"
 15169                           ; Number of cases is 1, Range of values is 1 to 1
 15170                           ; switch strategies available:
 15171                           ; Name         Instructions Cycles
 15172                           ; simple_byte            4     3 (average)
 15173                           ; direct_byte           11     9 (fixed)
 15174                           ; jumptable            263     9 (fixed)
 15175                           ;	Chosen strategy is simple_byte
 15176  1D2A  3A01               	xorlw	1	; case 1
 15177  1D2B  1903               	skipnz
 15178  1D2C  2D22               	goto	l6468
 15179  1D2D  2D2E               	goto	l6474
 15180  1D2E                     l6474:	
 15181                           
 15182                           ;Main_B1.c: 666: return cmd;
 15183  1D2E  0822               	movf	getCmd_Status@cmd,w
 15184  1D2F  0008               	return
 15185  1D30                     __end_of_getCmd_Status:	
 15186                           
 15187                           	psect	text102
 15188  14C5                     __ptext102:	
 15189 ;; *************** function _setDimmerLights_Dimming *****************
 15190 ;; Defined at:
 15191 ;;		line 883 in file "../src/Dimmer_B1.c"
 15192 ;; Parameters:    Size  Location     Type
 15193 ;;  lights          1    wreg     unsigned char 
 15194 ;;  status          1   75[BANK0 ] unsigned char 
 15195 ;; Auto vars:     Size  Location     Type
 15196 ;;  lights          1   77[BANK0 ] unsigned char 
 15197 ;; Return value:  Size  Location     Type
 15198 ;;		None               void
 15199 ;; Registers used:
 15200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15201 ;; Tracked objects:
 15202 ;;		On entry : 0/0
 15203 ;;		On exit  : 0/0
 15204 ;;		Unchanged: 0/0
 15205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15206 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15209 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15210 ;;Total ram usage:        3 bytes
 15211 ;; Hardware stack levels used:    1
 15212 ;; Hardware stack levels required when called:    8
 15213 ;; This function calls:
 15214 ;;		_getDimmerIntr_DimmingValue
 15215 ;;		_getDimmerLights_ValueToPercent
 15216 ;;		_setBuz
 15217 ;;		_setDimmerIntr_Dimming_Sw
 15218 ;;		_setDimmerIntr_MaxmumValue
 15219 ;;		_setDimmerLights_Line
 15220 ;;		_setProductData
 15221 ;;		_setRF_DimmerLights
 15222 ;;		_setRF_TransceiveGO
 15223 ;;		_setTxData
 15224 ;; This function is called by:
 15225 ;;		_setDimmerLights_Main
 15226 ;; This function uses a non-reentrant model
 15227 ;;
 15228                           
 15229                           
 15230                           ;psect for function _setDimmerLights_Dimming
 15231  14C5                     _setDimmerLights_Dimming:	
 15232                           
 15233                           ;incstack = 0
 15234                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15235                           ;setDimmerLights_Dimming@lights stored from wreg
 15236  14C5  0020               	movlb	0	; select bank0
 15237  14C6  00ED               	movwf	setDimmerLights_Dimming@lights
 15238                           
 15239                           ;Dimmer_B1.c: 884: if (status == 1) {
 15240  14C7  086B               	movf	setDimmerLights_Dimming@status,w
 15241  14C8  3A01               	xorlw	1
 15242  14C9  1D03               	skipz
 15243  14CA  2CDE               	goto	l8466
 15244                           
 15245                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15246  14CB  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15247  14CC  0AA1               	incf	setDimmerIntr_Dimming_Sw@command,f
 15248  14CD  086D               	movf	setDimmerLights_Dimming@lights,w
 15249  14CE  319E  2640  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15250                           
 15251                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15252  14D1  3000               	movlw	0
 15253  14D2  319D  2578  3194   	fcall	_setRF_TransceiveGO
 15254                           
 15255                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15256  14D5  3064               	movlw	100
 15257  14D6  0020               	movlb	0	; select bank0
 15258  14D7  00AA               	movwf	setBuz@time
 15259  14D8  3000               	movlw	0
 15260  14D9  00AB               	movwf	setBuz@time+1
 15261  14DA  3001               	movlw	1
 15262  14DB  3195  25BC         	fcall	_setBuz
 15263                           
 15264                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15265  14DD  0008               	return
 15266  14DE                     l8466:	
 15267  14DE  0020               	movlb	0	; select bank0
 15268  14DF  08EB               	movf	setDimmerLights_Dimming@status,f
 15269  14E0  1D03               	skipz
 15270  14E1  0008               	return
 15271                           
 15272                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15273  14E2  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15274  14E3  086D               	movf	setDimmerLights_Dimming@lights,w
 15275  14E4  319E  2640  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15276                           
 15277                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15278  14E7  0022               	movlb	2	; select bank2
 15279  14E8  112D               	bcf	_Dimmer^(0+256),2
 15280                           
 15281                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15282  14E9  0020               	movlb	0	; select bank0
 15283  14EA  086D               	movf	setDimmerLights_Dimming@lights,w
 15284  14EB  319C  24C9  3194   	fcall	_setDimmerLights_Line
 15285                           
 15286                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15287  14EE  0020               	movlb	0	; select bank0
 15288  14EF  086D               	movf	setDimmerLights_Dimming@lights,w
 15289  14F0  319C  248A  3194   	fcall	_getDimmerIntr_DimmingValue
 15290  14F3  0020               	movlb	0	; select bank0
 15291  14F4  00EC               	movwf	??_setDimmerLights_Dimming
 15292  14F5  086C               	movf	??_setDimmerLights_Dimming,w
 15293  14F6  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 15294  14F7  086D               	movf	setDimmerLights_Dimming@lights,w
 15295  14F8  319C  241D  3194   	fcall	_setDimmerIntr_MaxmumValue
 15296                           
 15297                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15298  14FB  0020               	movlb	0	; select bank0
 15299  14FC  086D               	movf	setDimmerLights_Dimming@lights,w
 15300  14FD  319C  248A  3194   	fcall	_getDimmerIntr_DimmingValue
 15301  1500  3196  26D1  3194   	fcall	_getDimmerLights_ValueToPercent
 15302  1503  0020               	movlb	0	; select bank0
 15303  1504  00EC               	movwf	??_setDimmerLights_Dimming
 15304  1505  086C               	movf	??_setDimmerLights_Dimming,w
 15305  1506  00E3               	movwf	setProductData@value
 15306  1507  086D               	movf	setDimmerLights_Dimming@lights,w
 15307  1508  3E14               	addlw	20
 15308  1509  319C  2411  3194   	fcall	_setProductData
 15309                           
 15310                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15311  150C  0020               	movlb	0	; select bank0
 15312  150D  01E6               	clrf	setRF_DimmerLights@on
 15313  150E  0AE6               	incf	setRF_DimmerLights@on,f
 15314  150F  086D               	movf	setDimmerLights_Dimming@lights,w
 15315  1510  3197  2736  3194   	fcall	_setRF_DimmerLights
 15316                           
 15317                           ;Dimmer_B1.c: 911: setTxData();
 15318  1513  318F  2745         	fcall	_setTxData
 15319  1515  0008               	return
 15320  1516                     __end_of_setDimmerLights_Dimming:	
 15321                           
 15322                           	psect	text103
 15323  0F45                     __ptext103:	
 15324 ;; *************** function _setTxData *****************
 15325 ;; Defined at:
 15326 ;;		line 183 in file "../src/RF_Control_B1.c"
 15327 ;; Parameters:    Size  Location     Type
 15328 ;;		None
 15329 ;; Auto vars:     Size  Location     Type
 15330 ;;  i               1    0        unsigned char 
 15331 ;; Return value:  Size  Location     Type
 15332 ;;		None               void
 15333 ;; Registers used:
 15334 ;;		wreg, fsr1l, fsr1h, status,2
 15335 ;; Tracked objects:
 15336 ;;		On entry : 0/0
 15337 ;;		On exit  : 0/0
 15338 ;;		Unchanged: 0/0
 15339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;Total ram usage:        1 bytes
 15345 ;; Hardware stack levels used:    1
 15346 ;; Hardware stack levels required when called:    5
 15347 ;; This function calls:
 15348 ;;		Nothing
 15349 ;; This function is called by:
 15350 ;;		_setDimmerLights_OnOff
 15351 ;;		_setDimmerLights_Dimming
 15352 ;;		_getRxData
 15353 ;;		_setControl_Lights_Table
 15354 ;;		_setRFSW_Control
 15355 ;;		_setRFSW_AdjControl
 15356 ;; This function uses a non-reentrant model
 15357 ;;
 15358                           
 15359                           
 15360                           ;psect for function _setTxData
 15361  0F45                     _setTxData:	
 15362                           
 15363                           ;RF_Control_B1.c: 184: char i;
 15364                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15365                           
 15366                           ;incstack = 0
 15367                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15368  0F45  0021               	movlb	1	; select bank1
 15369  0F46  1C20               	btfss	_RF1^(0+128),0
 15370  0F47  0008               	return
 15371                           
 15372                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15373  0F48  1520               	bsf	_RF1^(0+128),2
 15374                           
 15375                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15376  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15377  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15378                           
 15379                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15380  0F4B  3063               	movlw	99
 15381  0F4C  0020               	movlb	0	; select bank0
 15382  0F4D  00A1               	movwf	??_setTxData
 15383  0F4E  0821               	movf	??_setTxData,w
 15384  0F4F  0023               	movlb	3	; select bank3
 15385  0F50  00A0               	movwf	_RF_Data^(0+384)
 15386                           
 15387                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15388  0F51  3002               	movlw	2
 15389  0F52  0020               	movlb	0	; select bank0
 15390  0F53  00A1               	movwf	??_setTxData
 15391  0F54  0821               	movf	??_setTxData,w
 15392  0F55  0023               	movlb	3	; select bank3
 15393  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15394                           
 15395                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15396  0F57  0021               	movlb	1	; select bank1
 15397  0F58  086D               	movf	_product^(0+128),w
 15398  0F59  0086               	movwf	6
 15399  0F5A  3002               	movlw	2	; select bank4/5
 15400  0F5B  0087               	movwf	7
 15401  0F5C  3002               	movlw	2	; select bank4/5
 15402  0F5D  3F42               	moviw [2]fsr1
 15403  0F5E  0023               	movlb	3	; select bank3
 15404  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15405                           
 15406                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15407  0F60  0021               	movlb	1	; select bank1
 15408  0F61  086D               	movf	_product^(0+128),w
 15409  0F62  0086               	movwf	6
 15410  0F63  3002               	movlw	2	; select bank4/5
 15411  0F64  0087               	movwf	7
 15412  0F65  3002               	movlw	2	; select bank4/5
 15413  0F66  3F43               	moviw [3]fsr1
 15414  0F67  0023               	movlb	3	; select bank3
 15415  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15416                           
 15417                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15418  0F69  0021               	movlb	1	; select bank1
 15419  0F6A  086D               	movf	_product^(0+128),w
 15420  0F6B  0086               	movwf	6
 15421  0F6C  3002               	movlw	2	; select bank4/5
 15422  0F6D  0087               	movwf	7
 15423  0F6E  3002               	movlw	2	; select bank4/5
 15424  0F6F  3F44               	moviw [4]fsr1
 15425  0F70  0023               	movlb	3	; select bank3
 15426  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15427                           
 15428                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15429  0F72  0021               	movlb	1	; select bank1
 15430  0F73  086D               	movf	_product^(0+128),w
 15431  0F74  0086               	movwf	6
 15432  0F75  3002               	movlw	2	; select bank4/5
 15433  0F76  0087               	movwf	7
 15434  0F77  3002               	movlw	2	; select bank4/5
 15435  0F78  3F45               	moviw [5]fsr1
 15436  0F79  0023               	movlb	3	; select bank3
 15437  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15438                           
 15439                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15440  0F7B  0021               	movlb	1	; select bank1
 15441  0F7C  086D               	movf	_product^(0+128),w
 15442  0F7D  0086               	movwf	6
 15443  0F7E  3002               	movlw	2	; select bank4/5
 15444  0F7F  0087               	movwf	7
 15445  0F80  3002               	movlw	2	; select bank4/5
 15446  0F81  3F46               	moviw [6]fsr1
 15447  0F82  0023               	movlb	3	; select bank3
 15448  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15449                           
 15450                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15451  0F84  0021               	movlb	1	; select bank1
 15452  0F85  086D               	movf	_product^(0+128),w
 15453  0F86  0086               	movwf	6
 15454  0F87  3002               	movlw	2	; select bank4/5
 15455  0F88  0087               	movwf	7
 15456  0F89  3002               	movlw	2	; select bank4/5
 15457  0F8A  3F47               	moviw [7]fsr1
 15458  0F8B  0023               	movlb	3	; select bank3
 15459  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15460                           
 15461                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15462  0F8D  0021               	movlb	1	; select bank1
 15463  0F8E  086D               	movf	_product^(0+128),w
 15464  0F8F  0086               	movwf	6
 15465  0F90  3002               	movlw	2	; select bank4/5
 15466  0F91  0087               	movwf	7
 15467  0F92  3002               	movlw	2	; select bank4/5
 15468  0F93  3F48               	moviw [8]fsr1
 15469  0F94  0023               	movlb	3	; select bank3
 15470  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15471                           
 15472                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15473  0F96  0021               	movlb	1	; select bank1
 15474  0F97  086D               	movf	_product^(0+128),w
 15475  0F98  0086               	movwf	6
 15476  0F99  3002               	movlw	2	; select bank4/5
 15477  0F9A  0087               	movwf	7
 15478  0F9B  3002               	movlw	2	; select bank4/5
 15479  0F9C  3F49               	moviw [9]fsr1
 15480  0F9D  0023               	movlb	3	; select bank3
 15481  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15482                           
 15483                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15484  0F9F  0021               	movlb	1	; select bank1
 15485  0FA0  086D               	movf	_product^(0+128),w
 15486  0FA1  0086               	movwf	6
 15487  0FA2  3002               	movlw	2	; select bank4/5
 15488  0FA3  0087               	movwf	7
 15489  0FA4  3002               	movlw	2	; select bank4/5
 15490  0FA5  3F4A               	moviw [10]fsr1
 15491  0FA6  0023               	movlb	3	; select bank3
 15492  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15493                           
 15494                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15495  0FA8  0021               	movlb	1	; select bank1
 15496  0FA9  086D               	movf	_product^(0+128),w
 15497  0FAA  0086               	movwf	6
 15498  0FAB  3002               	movlw	2	; select bank4/5
 15499  0FAC  0087               	movwf	7
 15500  0FAD  3002               	movlw	2	; select bank4/5
 15501  0FAE  3F4B               	moviw [11]fsr1
 15502  0FAF  0023               	movlb	3	; select bank3
 15503  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15504                           
 15505                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15506  0FB1  0021               	movlb	1	; select bank1
 15507  0FB2  086D               	movf	_product^(0+128),w
 15508  0FB3  0086               	movwf	6
 15509  0FB4  3002               	movlw	2	; select bank4/5
 15510  0FB5  0087               	movwf	7
 15511  0FB6  3002               	movlw	2	; select bank4/5
 15512  0FB7  3F4C               	moviw [12]fsr1
 15513  0FB8  0023               	movlb	3	; select bank3
 15514  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15515                           
 15516                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15517  0FBA  0021               	movlb	1	; select bank1
 15518  0FBB  086D               	movf	_product^(0+128),w
 15519  0FBC  0086               	movwf	6
 15520  0FBD  3002               	movlw	2	; select bank4/5
 15521  0FBE  0087               	movwf	7
 15522  0FBF  3002               	movlw	2	; select bank4/5
 15523  0FC0  3F4D               	moviw [13]fsr1
 15524  0FC1  0023               	movlb	3	; select bank3
 15525  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15526                           
 15527                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15528  0FC3  0021               	movlb	1	; select bank1
 15529  0FC4  086D               	movf	_product^(0+128),w
 15530  0FC5  0086               	movwf	6
 15531  0FC6  3002               	movlw	2	; select bank4/5
 15532  0FC7  0087               	movwf	7
 15533  0FC8  3002               	movlw	2	; select bank4/5
 15534  0FC9  3F4E               	moviw [14]fsr1
 15535  0FCA  0023               	movlb	3	; select bank3
 15536  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15537                           
 15538                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15539  0FCC  0021               	movlb	1	; select bank1
 15540  0FCD  086D               	movf	_product^(0+128),w
 15541  0FCE  0086               	movwf	6
 15542  0FCF  3002               	movlw	2	; select bank4/5
 15543  0FD0  0087               	movwf	7
 15544  0FD1  3002               	movlw	2	; select bank4/5
 15545  0FD2  3F4F               	moviw [15]fsr1
 15546  0FD3  0023               	movlb	3	; select bank3
 15547  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15548                           
 15549                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15550  0FD5  0021               	movlb	1	; select bank1
 15551  0FD6  086D               	movf	_product^(0+128),w
 15552  0FD7  0086               	movwf	6
 15553  0FD8  3002               	movlw	2	; select bank4/5
 15554  0FD9  0087               	movwf	7
 15555  0FDA  3002               	movlw	2	; select bank4/5
 15556  0FDB  3F50               	moviw [16]fsr1
 15557  0FDC  0023               	movlb	3	; select bank3
 15558  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15559                           
 15560                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15561  0FDE  0021               	movlb	1	; select bank1
 15562  0FDF  086D               	movf	_product^(0+128),w
 15563  0FE0  0086               	movwf	6
 15564  0FE1  3002               	movlw	2	; select bank4/5
 15565  0FE2  0087               	movwf	7
 15566  0FE3  3002               	movlw	2	; select bank4/5
 15567  0FE4  3F51               	moviw [17]fsr1
 15568  0FE5  0023               	movlb	3	; select bank3
 15569  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15570                           
 15571                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15572  0FE7  0021               	movlb	1	; select bank1
 15573  0FE8  086D               	movf	_product^(0+128),w
 15574  0FE9  0086               	movwf	6
 15575  0FEA  3002               	movlw	2	; select bank4/5
 15576  0FEB  0087               	movwf	7
 15577  0FEC  3002               	movlw	2	; select bank4/5
 15578  0FED  3F52               	moviw [18]fsr1
 15579  0FEE  0023               	movlb	3	; select bank3
 15580  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15581                           
 15582                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15583  0FF0  0021               	movlb	1	; select bank1
 15584  0FF1  086D               	movf	_product^(0+128),w
 15585  0FF2  0086               	movwf	6
 15586  0FF3  3002               	movlw	2	; select bank4/5
 15587  0FF4  0087               	movwf	7
 15588  0FF5  3002               	movlw	2	; select bank4/5
 15589  0FF6  3F53               	moviw [19]fsr1
 15590  0FF7  0023               	movlb	3	; select bank3
 15591  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15592                           
 15593                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 15594  0FF9  30D1               	movlw	209
 15595  0FFA  0020               	movlb	0	; select bank0
 15596  0FFB  00A1               	movwf	??_setTxData
 15597  0FFC  0821               	movf	??_setTxData,w
 15598  0FFD  0023               	movlb	3	; select bank3
 15599  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15600  0FFF  0008               	return
 15601  1000                     __end_of_setTxData:	
 15602                           
 15603                           	psect	text104
 15604  1D78                     __ptext104:	
 15605 ;; *************** function _setRF_TransceiveGO *****************
 15606 ;; Defined at:
 15607 ;;		line 461 in file "../src/RF_Control_B1.c"
 15608 ;; Parameters:    Size  Location     Type
 15609 ;;  command         1    wreg     unsigned char 
 15610 ;; Auto vars:     Size  Location     Type
 15611 ;;  command         1    2[BANK0 ] unsigned char 
 15612 ;; Return value:  Size  Location     Type
 15613 ;;		None               void
 15614 ;; Registers used:
 15615 ;;		wreg, status,2, status,0
 15616 ;; Tracked objects:
 15617 ;;		On entry : 0/0
 15618 ;;		On exit  : 0/0
 15619 ;;		Unchanged: 0/0
 15620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15625 ;;Total ram usage:        2 bytes
 15626 ;; Hardware stack levels used:    1
 15627 ;; Hardware stack levels required when called:    5
 15628 ;; This function calls:
 15629 ;;		Nothing
 15630 ;; This function is called by:
 15631 ;;		_setDimmerLights_Dimming
 15632 ;; This function uses a non-reentrant model
 15633 ;;
 15634                           
 15635                           
 15636                           ;psect for function _setRF_TransceiveGO
 15637  1D78                     _setRF_TransceiveGO:	
 15638                           
 15639                           ;incstack = 0
 15640                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15641                           ;setRF_TransceiveGO@command stored from wreg
 15642  1D78  0020               	movlb	0	; select bank0
 15643  1D79  00A2               	movwf	setRF_TransceiveGO@command
 15644                           
 15645                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15646  1D7A  0822               	movf	setRF_TransceiveGO@command,w
 15647  1D7B  3A01               	xorlw	1
 15648  1D7C  3000               	movlw	0
 15649  1D7D  1903               	skipnz
 15650  1D7E  3001               	movlw	1
 15651  1D7F  00A1               	movwf	??_setRF_TransceiveGO
 15652  1D80  0DA1               	rlf	??_setRF_TransceiveGO,f
 15653  1D81  0DA1               	rlf	??_setRF_TransceiveGO,f
 15654  1D82  0021               	movlb	1	; select bank1
 15655  1D83  0820               	movf	_RF1^(0+128),w
 15656  1D84  0020               	movlb	0	; select bank0
 15657  1D85  0621               	xorwf	??_setRF_TransceiveGO,w
 15658  1D86  39FB               	andlw	-5
 15659  1D87  0621               	xorwf	??_setRF_TransceiveGO,w
 15660  1D88  0021               	movlb	1	; select bank1
 15661  1D89  00A0               	movwf	_RF1^(0+128)
 15662  1D8A  0008               	return
 15663  1D8B                     __end_of_setRF_TransceiveGO:	
 15664                           
 15665                           	psect	text105
 15666  1736                     __ptext105:	
 15667 ;; *************** function _setRF_DimmerLights *****************
 15668 ;; Defined at:
 15669 ;;		line 446 in file "../src/RF_Control_B1.c"
 15670 ;; Parameters:    Size  Location     Type
 15671 ;;  lights          1    wreg     unsigned char 
 15672 ;;  on              1   70[BANK0 ] unsigned char 
 15673 ;; Auto vars:     Size  Location     Type
 15674 ;;  lights          1   74[BANK0 ] unsigned char 
 15675 ;;  status          1   73[BANK0 ] unsigned char 
 15676 ;; Return value:  Size  Location     Type
 15677 ;;		None               void
 15678 ;; Registers used:
 15679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15680 ;; Tracked objects:
 15681 ;;		On entry : 0/0
 15682 ;;		On exit  : 0/0
 15683 ;;		Unchanged: 0/0
 15684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15685 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15687 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15688 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15689 ;;Total ram usage:        5 bytes
 15690 ;; Hardware stack levels used:    1
 15691 ;; Hardware stack levels required when called:    6
 15692 ;; This function calls:
 15693 ;;		_setProductData
 15694 ;; This function is called by:
 15695 ;;		_setDimmerLights_OnOff
 15696 ;;		_setDimmerLights_Dimming
 15697 ;;		_setRFSW_Control
 15698 ;; This function uses a non-reentrant model
 15699 ;;
 15700                           
 15701                           
 15702                           ;psect for function _setRF_DimmerLights
 15703  1736                     _setRF_DimmerLights:	
 15704                           
 15705                           ;incstack = 0
 15706                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15707                           ;setRF_DimmerLights@lights stored from wreg
 15708  1736  0020               	movlb	0	; select bank0
 15709  1737  00EA               	movwf	setRF_DimmerLights@lights
 15710                           
 15711                           ;RF_Control_B1.c: 447: char status = 1;
 15712  1738  01E9               	clrf	setRF_DimmerLights@status
 15713  1739  0AE9               	incf	setRF_DimmerLights@status,f
 15714                           
 15715                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15716  173A  086A               	movf	setRF_DimmerLights@lights,w
 15717  173B  3EFF               	addlw	-1
 15718  173C  0A89               	incf	9,f
 15719  173D  2F40               	goto	u8570
 15720  173E                     u8575:	
 15721  173E  1003               	clrc
 15722  173F  0DE9               	rlf	setRF_DimmerLights@status,f
 15723  1740                     u8570:	
 15724  1740  3EFF               	addlw	-1
 15725  1741  1D03               	skipz
 15726  1742  2F3E               	goto	u8575
 15727                           
 15728                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15729  1743  086A               	movf	setRF_DimmerLights@lights,w
 15730  1744  00E7               	movwf	??_setRF_DimmerLights
 15731  1745  0867               	movf	??_setRF_DimmerLights,w
 15732  1746  00E3               	movwf	setProductData@value
 15733  1747  300B               	movlw	11
 15734  1748  319C  2411  3197   	fcall	_setProductData
 15735                           
 15736                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15737  174B  0020               	movlb	0	; select bank0
 15738  174C  086A               	movf	setRF_DimmerLights@lights,w
 15739  174D  3E1A               	addlw	26
 15740  174E  0021               	movlb	1	; select bank1
 15741  174F  076D               	addwf	_product^(0+128),w
 15742  1750  0020               	movlb	0	; select bank0
 15743  1751  00E7               	movwf	??_setRF_DimmerLights
 15744  1752  0867               	movf	??_setRF_DimmerLights,w
 15745  1753  0086               	movwf	6
 15746  1754  3002               	movlw	2	; select bank4/5
 15747  1755  0087               	movwf	7
 15748  1756  0801               	movf	1,w
 15749  1757  00E8               	movwf	??_setRF_DimmerLights+1
 15750  1758  0868               	movf	??_setRF_DimmerLights+1,w
 15751  1759  00E3               	movwf	setProductData@value
 15752  175A  3011               	movlw	17
 15753  175B  319C  2411  3197   	fcall	_setProductData
 15754                           
 15755                           ;RF_Control_B1.c: 451: if (on == 1) {
 15756  175E  0020               	movlb	0	; select bank0
 15757  175F  0866               	movf	setRF_DimmerLights@on,w
 15758  1760  3A01               	xorlw	1
 15759  1761  1D03               	skipz
 15760  1762  2F85               	goto	l8302
 15761                           
 15762                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15763  1763  086A               	movf	setRF_DimmerLights@lights,w
 15764  1764  3E14               	addlw	20
 15765  1765  0021               	movlb	1	; select bank1
 15766  1766  076D               	addwf	_product^(0+128),w
 15767  1767  0020               	movlb	0	; select bank0
 15768  1768  00E7               	movwf	??_setRF_DimmerLights
 15769  1769  0867               	movf	??_setRF_DimmerLights,w
 15770  176A  0086               	movwf	6
 15771  176B  3002               	movlw	2	; select bank4/5
 15772  176C  0087               	movwf	7
 15773  176D  0801               	movf	1,w
 15774  176E  00E8               	movwf	??_setRF_DimmerLights+1
 15775  176F  0868               	movf	??_setRF_DimmerLights+1,w
 15776  1770  00E3               	movwf	setProductData@value
 15777  1771  3009               	movlw	9
 15778  1772  319C  2411  3197   	fcall	_setProductData
 15779                           
 15780                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15781  1775  0021               	movlb	1	; select bank1
 15782  1776  086D               	movf	_product^(0+128),w
 15783  1777  3E0F               	addlw	15
 15784  1778  0086               	movwf	6
 15785  1779  3002               	movlw	2	; select bank4/5
 15786  177A  0087               	movwf	7
 15787  177B  0801               	movf	1,w
 15788  177C  0020               	movlb	0	; select bank0
 15789  177D  0469               	iorwf	setRF_DimmerLights@status,w
 15790  177E  00E7               	movwf	??_setRF_DimmerLights
 15791  177F  0867               	movf	??_setRF_DimmerLights,w
 15792  1780  00E3               	movwf	setProductData@value
 15793  1781  300F               	movlw	15
 15794  1782  319C  2411         	fcall	_setProductData
 15795                           
 15796                           ;RF_Control_B1.c: 454: } else {
 15797  1784  0008               	return
 15798  1785                     l8302:	
 15799                           
 15800                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15801  1785  0020               	movlb	0	; select bank0
 15802  1786  01E3               	clrf	setProductData@value
 15803  1787  3009               	movlw	9
 15804  1788  319C  2411  3197   	fcall	_setProductData
 15805                           
 15806                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15807  178B  0021               	movlb	1	; select bank1
 15808  178C  086D               	movf	_product^(0+128),w
 15809  178D  3E0F               	addlw	15
 15810  178E  0086               	movwf	6
 15811  178F  3002               	movlw	2	; select bank4/5
 15812  1790  0087               	movwf	7
 15813  1791  0020               	movlb	0	; select bank0
 15814  1792  0969               	comf	setRF_DimmerLights@status,w
 15815  1793  0501               	andwf	1,w
 15816  1794  00E7               	movwf	??_setRF_DimmerLights
 15817  1795  0867               	movf	??_setRF_DimmerLights,w
 15818  1796  00E3               	movwf	setProductData@value
 15819  1797  300F               	movlw	15
 15820  1798  319C  2411         	fcall	_setProductData
 15821  179A  0008               	return
 15822  179B                     __end_of_setRF_DimmerLights:	
 15823                           
 15824                           	psect	text106
 15825  1CC9                     __ptext106:	
 15826 ;; *************** function _setDimmerLights_Line *****************
 15827 ;; Defined at:
 15828 ;;		line 955 in file "../src/Dimmer_B1.c"
 15829 ;; Parameters:    Size  Location     Type
 15830 ;;  lights          1    wreg     unsigned char 
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;  lights          1    1[BANK0 ] unsigned char 
 15833 ;; Return value:  Size  Location     Type
 15834 ;;		None               void
 15835 ;; Registers used:
 15836 ;;		wreg
 15837 ;; Tracked objects:
 15838 ;;		On entry : 0/0
 15839 ;;		On exit  : 0/0
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15846 ;;Total ram usage:        1 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:    5
 15849 ;; This function calls:
 15850 ;;		Nothing
 15851 ;; This function is called by:
 15852 ;;		_setDimmerLights_OnOff
 15853 ;;		_setDimmerLights_Dimming
 15854 ;; This function uses a non-reentrant model
 15855 ;;
 15856                           
 15857                           
 15858                           ;psect for function _setDimmerLights_Line
 15859  1CC9                     _setDimmerLights_Line:	
 15860                           
 15861                           ;incstack = 0
 15862                           ; Regs used in _setDimmerLights_Line: [wreg]
 15863                           ;setDimmerLights_Line@lights stored from wreg
 15864  1CC9  0020               	movlb	0	; select bank0
 15865  1CCA  00A1               	movwf	setDimmerLights_Line@lights
 15866                           
 15867                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 15868  1CCB  0022               	movlb	2	; select bank2
 15869  1CCC  14AD               	bsf	_Dimmer^(0+256),1
 15870                           
 15871                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 15872  1CCD  10DD               	bcf	(_DimmerLights1^(0+256)+1),1
 15873                           
 15874                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 15875  1CCE  0020               	movlb	0	; select bank0
 15876  1CCF  0821               	movf	setDimmerLights_Line@lights,w
 15877  1CD0  3A01               	xorlw	1
 15878  1CD1  1D03               	skipz
 15879  1CD2  0008               	return
 15880  1CD3  0821               	movf	setDimmerLights_Line@lights,w
 15881  1CD4  1903               	btfsc	3,2
 15882  1CD5  0008               	return
 15883                           
 15884                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 15885  1CD6  0022               	movlb	2	; select bank2
 15886  1CD7  14DD               	bsf	(_DimmerLights1^(0+256)+1),1
 15887  1CD8  0020               	movlb	0	; select bank0
 15888  1CD9  0008               	return
 15889  1CDA                     __end_of_setDimmerLights_Line:	
 15890                           
 15891                           	psect	text107
 15892  1C1D                     __ptext107:	
 15893 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15894 ;; Defined at:
 15895 ;;		line 89 in file "../src/Dimmer_B1.c"
 15896 ;; Parameters:    Size  Location     Type
 15897 ;;  lights          1    wreg     unsigned char 
 15898 ;;  value           1   67[BANK0 ] unsigned char 
 15899 ;; Auto vars:     Size  Location     Type
 15900 ;;  lights          1   69[BANK0 ] unsigned char 
 15901 ;; Return value:  Size  Location     Type
 15902 ;;		None               void
 15903 ;; Registers used:
 15904 ;;		wreg
 15905 ;; Tracked objects:
 15906 ;;		On entry : 0/0
 15907 ;;		On exit  : 0/0
 15908 ;;		Unchanged: 0/0
 15909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15910 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;Total ram usage:        3 bytes
 15915 ;; Hardware stack levels used:    1
 15916 ;; Hardware stack levels required when called:    5
 15917 ;; This function calls:
 15918 ;;		Nothing
 15919 ;; This function is called by:
 15920 ;;		_setDimmerLights_OnOff
 15921 ;;		_setDimmerLights_Dimming
 15922 ;;		_setRFSW_AdjControl
 15923 ;; This function uses a non-reentrant model
 15924 ;;
 15925                           
 15926                           
 15927                           ;psect for function _setDimmerIntr_MaxmumValue
 15928  1C1D                     _setDimmerIntr_MaxmumValue:	
 15929                           
 15930                           ;incstack = 0
 15931                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15932                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15933  1C1D  0020               	movlb	0	; select bank0
 15934  1C1E  00E5               	movwf	setDimmerIntr_MaxmumValue@lights
 15935                           
 15936                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15937  1C1F  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 15938  1C20  3A01               	xorlw	1
 15939  1C21  1D03               	skipz
 15940  1C22  0008               	return
 15941                           
 15942                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 15943  1C23  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 15944  1C24  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 15945  1C25  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 15946  1C26  0021               	movlb	1	; select bank1
 15947  1C27  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 15948  1C28  0008               	return
 15949  1C29                     __end_of_setDimmerIntr_MaxmumValue:	
 15950                           
 15951                           	psect	text108
 15952  1E40                     __ptext108:	
 15953 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15954 ;; Defined at:
 15955 ;;		line 166 in file "../src/Dimmer_B1.c"
 15956 ;; Parameters:    Size  Location     Type
 15957 ;;  lights          1    wreg     unsigned char 
 15958 ;;  command         1    1[BANK0 ] unsigned char 
 15959 ;; Auto vars:     Size  Location     Type
 15960 ;;  lights          1    3[BANK0 ] unsigned char 
 15961 ;; Return value:  Size  Location     Type
 15962 ;;		None               void
 15963 ;; Registers used:
 15964 ;;		wreg, status,2, status,0
 15965 ;; Tracked objects:
 15966 ;;		On entry : 0/0
 15967 ;;		On exit  : 0/0
 15968 ;;		Unchanged: 0/0
 15969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15970 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15974 ;;Total ram usage:        3 bytes
 15975 ;; Hardware stack levels used:    1
 15976 ;; Hardware stack levels required when called:    5
 15977 ;; This function calls:
 15978 ;;		Nothing
 15979 ;; This function is called by:
 15980 ;;		_setDimmerLights_Dimming
 15981 ;; This function uses a non-reentrant model
 15982 ;;
 15983                           
 15984                           
 15985                           ;psect for function _setDimmerIntr_Dimming_Sw
 15986  1E40                     _setDimmerIntr_Dimming_Sw:	
 15987                           
 15988                           ;incstack = 0
 15989                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15990                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15991  1E40  0020               	movlb	0	; select bank0
 15992  1E41  00A3               	movwf	setDimmerIntr_Dimming_Sw@lights
 15993                           
 15994                           ;Dimmer_B1.c: 168: if (lights == 1) {
 15995  1E42  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15996  1E43  3A01               	xorlw	1
 15997  1E44  1D03               	skipz
 15998  1E45  0008               	return
 15999                           
 16000                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16001  1E46  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16002  1E47  3A01               	xorlw	1
 16003  1E48  3000               	movlw	0
 16004  1E49  1903               	skipnz
 16005  1E4A  3001               	movlw	1
 16006  1E4B  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16007  1E4C  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16008  1E4D  0021               	movlb	1	; select bank1
 16009  1E4E  083A               	movf	_DimmerIntr1^(0+128),w
 16010  1E4F  0020               	movlb	0	; select bank0
 16011  1E50  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16012  1E51  39EF               	andlw	-17
 16013  1E52  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16014  1E53  0021               	movlb	1	; select bank1
 16015  1E54  00BA               	movwf	_DimmerIntr1^(0+128)
 16016  1E55  0008               	return
 16017  1E56                     __end_of_setDimmerIntr_Dimming_Sw:	
 16018                           
 16019                           	psect	text109
 16020  16D1                     __ptext109:	
 16021 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16022 ;; Defined at:
 16023 ;;		line 1055 in file "../src/Dimmer_B1.c"
 16024 ;; Parameters:    Size  Location     Type
 16025 ;;  value           1    wreg     unsigned char 
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;  value           1   63[BANK0 ] unsigned char 
 16028 ;;  i               3   64[BANK0 ] float 
 16029 ;; Return value:  Size  Location     Type
 16030 ;;                  1    wreg      unsigned char 
 16031 ;; Registers used:
 16032 ;;		wreg, status,2, status,0, pclath, cstack
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;Total ram usage:        6 bytes
 16043 ;; Hardware stack levels used:    1
 16044 ;; Hardware stack levels required when called:    7
 16045 ;; This function calls:
 16046 ;;		___awtoft
 16047 ;;		___ftadd
 16048 ;;		___ftdiv
 16049 ;;		___ftneg
 16050 ;;		___fttol
 16051 ;; This function is called by:
 16052 ;;		_setDimmerLights_OnOff
 16053 ;;		_setDimmerLights_Dimming
 16054 ;;		_Flash_Memory_Initialization
 16055 ;; This function uses a non-reentrant model
 16056 ;;
 16057                           
 16058                           
 16059                           ;psect for function _getDimmerLights_ValueToPercent
 16060  16D1                     _getDimmerLights_ValueToPercent:	
 16061                           
 16062                           ;incstack = 0
 16063                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16064                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16065  16D1  0020               	movlb	0	; select bank0
 16066  16D2  00DF               	movwf	getDimmerLights_ValueToPercent@value
 16067                           
 16068                           ;Dimmer_B1.c: 1063: float i = ((char)(65*0.78)) - ((char)(5*0.78));
 16069  16D3  3000               	movlw	0
 16070  16D4  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16071  16D5  303C               	movlw	60
 16072  16D6  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16073  16D7  3042               	movlw	66
 16074  16D8  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16075                           
 16076                           ;Dimmer_B1.c: 1064: i /= 100;
 16077  16D9  3000               	movlw	0
 16078  16DA  00AF               	movwf	___ftdiv@f2
 16079  16DB  30C8               	movlw	200
 16080  16DC  00B0               	movwf	___ftdiv@f2+1
 16081  16DD  3042               	movlw	66
 16082  16DE  00B1               	movwf	___ftdiv@f2+2
 16083  16DF  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16084  16E0  00B2               	movwf	___ftdiv@f1
 16085  16E1  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16086  16E2  00B3               	movwf	___ftdiv@f1+1
 16087  16E3  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16088  16E4  00B4               	movwf	___ftdiv@f1+2
 16089  16E5  318D  2538  3196   	fcall	___ftdiv
 16090  16E8  0020               	movlb	0	; select bank0
 16091  16E9  082F               	movf	?___ftdiv,w
 16092  16EA  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16093  16EB  0830               	movf	?___ftdiv+1,w
 16094  16EC  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16095  16ED  0831               	movf	?___ftdiv+2,w
 16096  16EE  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16097                           
 16098                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(65*0.78)) - value) / i));
 16099  16EF  085F               	movf	getDimmerLights_ValueToPercent@value,w
 16100  16F0  00DD               	movwf	??_getDimmerLights_ValueToPercent
 16101  16F1  01DE               	clrf	??_getDimmerLights_ValueToPercent+1
 16102  16F2  09DD               	comf	??_getDimmerLights_ValueToPercent,f
 16103  16F3  09DE               	comf	??_getDimmerLights_ValueToPercent+1,f
 16104  16F4  0ADD               	incf	??_getDimmerLights_ValueToPercent,f
 16105  16F5  1903               	skipnz
 16106  16F6  0ADE               	incf	??_getDimmerLights_ValueToPercent+1,f
 16107  16F7  085D               	movf	??_getDimmerLights_ValueToPercent,w
 16108  16F8  3E32               	addlw	50
 16109  16F9  00A9               	movwf	___awtoft@c
 16110  16FA  3000               	movlw	0
 16111  16FB  3D5E               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16112  16FC  00AA               	movwf	___awtoft@c+1
 16113  16FD  3187  27DE  3196   	fcall	___awtoft
 16114  1700  0020               	movlb	0	; select bank0
 16115  1701  0829               	movf	?___awtoft,w
 16116  1702  00B2               	movwf	___ftdiv@f1
 16117  1703  082A               	movf	?___awtoft+1,w
 16118  1704  00B3               	movwf	___ftdiv@f1+1
 16119  1705  082B               	movf	?___awtoft+2,w
 16120  1706  00B4               	movwf	___ftdiv@f1+2
 16121  1707  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16122  1708  00AF               	movwf	___ftdiv@f2
 16123  1709  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16124  170A  00B0               	movwf	___ftdiv@f2+1
 16125  170B  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16126  170C  00B1               	movwf	___ftdiv@f2+2
 16127  170D  318D  2538  3196   	fcall	___ftdiv
 16128  1710  0020               	movlb	0	; select bank0
 16129  1711  082F               	movf	?___ftdiv,w
 16130  1712  00BF               	movwf	___ftneg@f1
 16131  1713  0830               	movf	?___ftdiv+1,w
 16132  1714  00C0               	movwf	___ftneg@f1+1
 16133  1715  0831               	movf	?___ftdiv+2,w
 16134  1716  00C1               	movwf	___ftneg@f1+2
 16135  1717  319B  23A6  3196   	fcall	___ftneg
 16136  171A  0020               	movlb	0	; select bank0
 16137  171B  083F               	movf	?___ftneg,w
 16138  171C  00C5               	movwf	___ftadd@f2
 16139  171D  0840               	movf	?___ftneg+1,w
 16140  171E  00C6               	movwf	___ftadd@f2+1
 16141  171F  0841               	movf	?___ftneg+2,w
 16142  1720  00C7               	movwf	___ftadd@f2+2
 16143  1721  3000               	movlw	0
 16144  1722  00C2               	movwf	___ftadd@f1
 16145  1723  30C8               	movlw	200
 16146  1724  00C3               	movwf	___ftadd@f1+1
 16147  1725  3042               	movlw	66
 16148  1726  00C4               	movwf	___ftadd@f1+2
 16149  1727  3183  2380  3196   	fcall	___ftadd
 16150  172A  0020               	movlb	0	; select bank0
 16151  172B  0842               	movf	?___ftadd,w
 16152  172C  00CF               	movwf	___fttol@f1
 16153  172D  0843               	movf	?___ftadd+1,w
 16154  172E  00D0               	movwf	___fttol@f1+1
 16155  172F  0844               	movf	?___ftadd+2,w
 16156  1730  00D1               	movwf	___fttol@f1+2
 16157  1731  318C  2425         	fcall	___fttol
 16158  1733  0020               	movlb	0	; select bank0
 16159  1734  084F               	movf	?___fttol,w
 16160  1735  0008               	return
 16161  1736                     __end_of_getDimmerLights_ValueToPercent:	
 16162                           
 16163                           	psect	text110
 16164  0C25                     __ptext110:	
 16165 ;; *************** function ___fttol *****************
 16166 ;; Defined at:
 16167 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16168 ;; Parameters:    Size  Location     Type
 16169 ;;  f1              3   47[BANK0 ] float 
 16170 ;; Auto vars:     Size  Location     Type
 16171 ;;  lval            4   56[BANK0 ] unsigned long 
 16172 ;;  exp1            1   60[BANK0 ] unsigned char 
 16173 ;;  sign1           1   55[BANK0 ] unsigned char 
 16174 ;; Return value:  Size  Location     Type
 16175 ;;                  4   47[BANK0 ] long 
 16176 ;; Registers used:
 16177 ;;		wreg, status,2, status,0
 16178 ;; Tracked objects:
 16179 ;;		On entry : 0/0
 16180 ;;		On exit  : 0/0
 16181 ;;		Unchanged: 0/0
 16182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16183 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16185 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;Total ram usage:       14 bytes
 16188 ;; Hardware stack levels used:    1
 16189 ;; Hardware stack levels required when called:    5
 16190 ;; This function calls:
 16191 ;;		Nothing
 16192 ;; This function is called by:
 16193 ;;		_getDimmerLights_PercentToValue
 16194 ;;		_getDimmerLights_ValueToPercent
 16195 ;; This function uses a non-reentrant model
 16196 ;;
 16197                           
 16198                           
 16199                           ;psect for function ___fttol
 16200  0C25                     ___fttol:	
 16201                           
 16202                           ;incstack = 0
 16203                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16204  0C25  0020               	movlb	0	; select bank0
 16205  0C26  084F               	movf	___fttol@f1,w
 16206  0C27  00D3               	movwf	??___fttol
 16207  0C28  0850               	movf	___fttol@f1+1,w
 16208  0C29  00D4               	movwf	??___fttol+1
 16209  0C2A  0851               	movf	___fttol@f1+2,w
 16210  0C2B  00D5               	movwf	??___fttol+2
 16211  0C2C  1003               	clrc
 16212  0C2D  0D54               	rlf	??___fttol+1,w
 16213  0C2E  0D55               	rlf	??___fttol+2,w
 16214  0C2F  00D6               	movwf	??___fttol+3
 16215  0C30  0856               	movf	??___fttol+3,w
 16216  0C31  00DC               	movwf	___fttol@exp1
 16217  0C32  08DC               	movf	___fttol@exp1,f
 16218  0C33  1D03               	skipz
 16219  0C34  2C3E               	goto	l5924
 16220  0C35  3000               	movlw	0
 16221  0C36  00D2               	movwf	?___fttol+3
 16222  0C37  3000               	movlw	0
 16223  0C38  00D1               	movwf	?___fttol+2
 16224  0C39  3000               	movlw	0
 16225  0C3A  00D0               	movwf	?___fttol+1
 16226  0C3B  3000               	movlw	0
 16227  0C3C  00CF               	movwf	?___fttol
 16228  0C3D  0008               	return
 16229  0C3E                     l5924:	
 16230  0C3E  084F               	movf	___fttol@f1,w
 16231  0C3F  00D3               	movwf	??___fttol
 16232  0C40  0850               	movf	___fttol@f1+1,w
 16233  0C41  00D4               	movwf	??___fttol+1
 16234  0C42  0851               	movf	___fttol@f1+2,w
 16235  0C43  00D5               	movwf	??___fttol+2
 16236  0C44  3017               	movlw	23
 16237  0C45                     u4935:	
 16238  0C45  36D5               	lsrf	??___fttol+2,f
 16239  0C46  0CD4               	rrf	??___fttol+1,f
 16240  0C47  0CD3               	rrf	??___fttol,f
 16241  0C48  0B89               	decfsz	9,f
 16242  0C49  2C45               	goto	u4935
 16243  0C4A  0853               	movf	??___fttol,w
 16244  0C4B  00D6               	movwf	??___fttol+3
 16245  0C4C  0856               	movf	??___fttol+3,w
 16246  0C4D  00D7               	movwf	___fttol@sign1
 16247  0C4E  17D0               	bsf	___fttol@f1+1,7
 16248  0C4F  30FF               	movlw	255
 16249  0C50  05CF               	andwf	___fttol@f1,f
 16250  0C51  30FF               	movlw	255
 16251  0C52  05D0               	andwf	___fttol@f1+1,f
 16252  0C53  3000               	movlw	0
 16253  0C54  05D1               	andwf	___fttol@f1+2,f
 16254  0C55  084F               	movf	___fttol@f1,w
 16255  0C56  00D8               	movwf	___fttol@lval
 16256  0C57  0850               	movf	___fttol@f1+1,w
 16257  0C58  00D9               	movwf	___fttol@lval+1
 16258  0C59  0851               	movf	___fttol@f1+2,w
 16259  0C5A  00DA               	movwf	___fttol@lval+2
 16260  0C5B  01DB               	clrf	___fttol@lval+3
 16261  0C5C  308E               	movlw	142
 16262  0C5D  02DC               	subwf	___fttol@exp1,f
 16263  0C5E  1FDC               	btfss	___fttol@exp1,7
 16264  0C5F  2C7C               	goto	l5944
 16265  0C60  085C               	movf	___fttol@exp1,w
 16266  0C61  3A80               	xorlw	128
 16267  0C62  3E8F               	addlw	143
 16268  0C63  1803               	skipnc
 16269  0C64  2C6E               	goto	l5942
 16270  0C65  3000               	movlw	0
 16271  0C66  00D2               	movwf	?___fttol+3
 16272  0C67  3000               	movlw	0
 16273  0C68  00D1               	movwf	?___fttol+2
 16274  0C69  3000               	movlw	0
 16275  0C6A  00D0               	movwf	?___fttol+1
 16276  0C6B  3000               	movlw	0
 16277  0C6C  00CF               	movwf	?___fttol
 16278  0C6D  0008               	return
 16279  0C6E                     l5942:	
 16280  0C6E  3001               	movlw	1
 16281  0C6F                     u4965:	
 16282  0C6F  36DB               	lsrf	___fttol@lval+3,f
 16283  0C70  0CDA               	rrf	___fttol@lval+2,f
 16284  0C71  0CD9               	rrf	___fttol@lval+1,f
 16285  0C72  0CD8               	rrf	___fttol@lval,f
 16286  0C73  0B89               	decfsz	9,f
 16287  0C74  2C6F               	goto	u4965
 16288  0C75  3001               	movlw	1
 16289  0C76  00D3               	movwf	??___fttol
 16290  0C77  0853               	movf	??___fttol,w
 16291  0C78  07DC               	addwf	___fttol@exp1,f
 16292  0C79  1903               	btfsc	3,2
 16293  0C7A  2C95               	goto	l5954
 16294  0C7B  2C6E               	goto	l5942
 16295  0C7C                     l5944:	
 16296  0C7C  3018               	movlw	24
 16297  0C7D  025C               	subwf	___fttol@exp1,w
 16298  0C7E  1C03               	skipc
 16299  0C7F  2C92               	goto	l5952
 16300  0C80  3000               	movlw	0
 16301  0C81  00D2               	movwf	?___fttol+3
 16302  0C82  3000               	movlw	0
 16303  0C83  00D1               	movwf	?___fttol+2
 16304  0C84  3000               	movlw	0
 16305  0C85  00D0               	movwf	?___fttol+1
 16306  0C86  3000               	movlw	0
 16307  0C87  00CF               	movwf	?___fttol
 16308  0C88  0008               	return
 16309  0C89                     l5950:	
 16310  0C89  3001               	movlw	1
 16311  0C8A                     u4995:	
 16312  0C8A  35D8               	lslf	___fttol@lval,f
 16313  0C8B  0DD9               	rlf	___fttol@lval+1,f
 16314  0C8C  0DDA               	rlf	___fttol@lval+2,f
 16315  0C8D  0DDB               	rlf	___fttol@lval+3,f
 16316  0C8E  0B89               	decfsz	9,f
 16317  0C8F  2C8A               	goto	u4995
 16318  0C90  3001               	movlw	1
 16319  0C91  02DC               	subwf	___fttol@exp1,f
 16320  0C92                     l5952:	
 16321  0C92  08DC               	movf	___fttol@exp1,f
 16322  0C93  1D03               	skipz
 16323  0C94  2C89               	goto	l5950
 16324  0C95                     l5954:	
 16325  0C95  0857               	movf	___fttol@sign1,w
 16326  0C96  1903               	btfsc	3,2
 16327  0C97  2CA3               	goto	l5958
 16328  0C98  09D8               	comf	___fttol@lval,f
 16329  0C99  09D9               	comf	___fttol@lval+1,f
 16330  0C9A  09DA               	comf	___fttol@lval+2,f
 16331  0C9B  09DB               	comf	___fttol@lval+3,f
 16332  0C9C  0AD8               	incf	___fttol@lval,f
 16333  0C9D  1903               	skipnz
 16334  0C9E  0AD9               	incf	___fttol@lval+1,f
 16335  0C9F  1903               	skipnz
 16336  0CA0  0ADA               	incf	___fttol@lval+2,f
 16337  0CA1  1903               	skipnz
 16338  0CA2  0ADB               	incf	___fttol@lval+3,f
 16339  0CA3                     l5958:	
 16340  0CA3  085B               	movf	___fttol@lval+3,w
 16341  0CA4  00D2               	movwf	?___fttol+3
 16342  0CA5  085A               	movf	___fttol@lval+2,w
 16343  0CA6  00D1               	movwf	?___fttol+2
 16344  0CA7  0859               	movf	___fttol@lval+1,w
 16345  0CA8  00D0               	movwf	?___fttol+1
 16346  0CA9  0858               	movf	___fttol@lval,w
 16347  0CAA  00CF               	movwf	?___fttol
 16348  0CAB  0008               	return
 16349  0CAC                     __end_of___fttol:	
 16350                           
 16351                           	psect	text111
 16352  1BA6                     __ptext111:	
 16353 ;; *************** function ___ftneg *****************
 16354 ;; Defined at:
 16355 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16356 ;; Parameters:    Size  Location     Type
 16357 ;;  f1              3   31[BANK0 ] float 
 16358 ;; Auto vars:     Size  Location     Type
 16359 ;;		None
 16360 ;; Return value:  Size  Location     Type
 16361 ;;                  3   31[BANK0 ] float 
 16362 ;; Registers used:
 16363 ;;		wreg
 16364 ;; Tracked objects:
 16365 ;;		On entry : 0/0
 16366 ;;		On exit  : 0/0
 16367 ;;		Unchanged: 0/0
 16368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16369 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16373 ;;Total ram usage:        3 bytes
 16374 ;; Hardware stack levels used:    1
 16375 ;; Hardware stack levels required when called:    5
 16376 ;; This function calls:
 16377 ;;		Nothing
 16378 ;; This function is called by:
 16379 ;;		_getDimmerLights_PercentToValue
 16380 ;;		_getDimmerLights_ValueToPercent
 16381 ;; This function uses a non-reentrant model
 16382 ;;
 16383                           
 16384                           
 16385                           ;psect for function ___ftneg
 16386  1BA6                     ___ftneg:	
 16387                           
 16388                           ;incstack = 0
 16389                           ; Regs used in ___ftneg: [wreg]
 16390  1BA6  0020               	movlb	0	; select bank0
 16391  1BA7  0841               	movf	___ftneg@f1+2,w
 16392  1BA8  0440               	iorwf	___ftneg@f1+1,w
 16393  1BA9  043F               	iorwf	___ftneg@f1,w
 16394  1BAA  1903               	skipnz
 16395  1BAB  0008               	return
 16396  1BAC  3080               	movlw	128
 16397  1BAD  06C1               	xorwf	___ftneg@f1+2,f
 16398  1BAE  0008               	return
 16399  1BAF                     __end_of___ftneg:	
 16400                           
 16401                           	psect	text112
 16402  0D38                     __ptext112:	
 16403 ;; *************** function ___ftdiv *****************
 16404 ;; Defined at:
 16405 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;  f2              3   15[BANK0 ] float 
 16408 ;;  f1              3   18[BANK0 ] float 
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;  f3              3   26[BANK0 ] float 
 16411 ;;  sign            1   30[BANK0 ] unsigned char 
 16412 ;;  exp             1   29[BANK0 ] unsigned char 
 16413 ;;  cntr            1   25[BANK0 ] unsigned char 
 16414 ;; Return value:  Size  Location     Type
 16415 ;;                  3   15[BANK0 ] float 
 16416 ;; Registers used:
 16417 ;;		wreg, status,2, status,0, pclath, cstack
 16418 ;; Tracked objects:
 16419 ;;		On entry : 0/0
 16420 ;;		On exit  : 0/0
 16421 ;;		Unchanged: 0/0
 16422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16423 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;Total ram usage:       16 bytes
 16428 ;; Hardware stack levels used:    1
 16429 ;; Hardware stack levels required when called:    6
 16430 ;; This function calls:
 16431 ;;		___ftpack
 16432 ;; This function is called by:
 16433 ;;		_getDimmerLights_PercentToValue
 16434 ;;		_getDimmerLights_ValueToPercent
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           
 16439                           ;psect for function ___ftdiv
 16440  0D38                     ___ftdiv:	
 16441                           
 16442                           ;incstack = 0
 16443                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16444  0D38  0020               	movlb	0	; select bank0
 16445  0D39  0832               	movf	___ftdiv@f1,w
 16446  0D3A  00B5               	movwf	??___ftdiv
 16447  0D3B  0833               	movf	___ftdiv@f1+1,w
 16448  0D3C  00B6               	movwf	??___ftdiv+1
 16449  0D3D  0834               	movf	___ftdiv@f1+2,w
 16450  0D3E  00B7               	movwf	??___ftdiv+2
 16451  0D3F  1003               	clrc
 16452  0D40  0D36               	rlf	??___ftdiv+1,w
 16453  0D41  0D37               	rlf	??___ftdiv+2,w
 16454  0D42  00B8               	movwf	??___ftdiv+3
 16455  0D43  0838               	movf	??___ftdiv+3,w
 16456  0D44  00BD               	movwf	___ftdiv@exp
 16457  0D45  08BD               	movf	___ftdiv@exp,f
 16458  0D46  1D03               	skipz
 16459  0D47  2D4F               	goto	l5824
 16460  0D48  3000               	movlw	0
 16461  0D49  00AF               	movwf	?___ftdiv
 16462  0D4A  3000               	movlw	0
 16463  0D4B  00B0               	movwf	?___ftdiv+1
 16464  0D4C  3000               	movlw	0
 16465  0D4D  00B1               	movwf	?___ftdiv+2
 16466  0D4E  0008               	return
 16467  0D4F                     l5824:	
 16468  0D4F  082F               	movf	___ftdiv@f2,w
 16469  0D50  00B5               	movwf	??___ftdiv
 16470  0D51  0830               	movf	___ftdiv@f2+1,w
 16471  0D52  00B6               	movwf	??___ftdiv+1
 16472  0D53  0831               	movf	___ftdiv@f2+2,w
 16473  0D54  00B7               	movwf	??___ftdiv+2
 16474  0D55  1003               	clrc
 16475  0D56  0D36               	rlf	??___ftdiv+1,w
 16476  0D57  0D37               	rlf	??___ftdiv+2,w
 16477  0D58  00B8               	movwf	??___ftdiv+3
 16478  0D59  0838               	movf	??___ftdiv+3,w
 16479  0D5A  00BE               	movwf	___ftdiv@sign
 16480  0D5B  08BE               	movf	___ftdiv@sign,f
 16481  0D5C  1D03               	skipz
 16482  0D5D  2D65               	goto	l5830
 16483  0D5E  3000               	movlw	0
 16484  0D5F  00AF               	movwf	?___ftdiv
 16485  0D60  3000               	movlw	0
 16486  0D61  00B0               	movwf	?___ftdiv+1
 16487  0D62  3000               	movlw	0
 16488  0D63  00B1               	movwf	?___ftdiv+2
 16489  0D64  0008               	return
 16490  0D65                     l5830:	
 16491  0D65  3000               	movlw	0
 16492  0D66  00BA               	movwf	___ftdiv@f3
 16493  0D67  3000               	movlw	0
 16494  0D68  00BB               	movwf	___ftdiv@f3+1
 16495  0D69  3000               	movlw	0
 16496  0D6A  00BC               	movwf	___ftdiv@f3+2
 16497  0D6B  3089               	movlw	137
 16498  0D6C  073E               	addwf	___ftdiv@sign,w
 16499  0D6D  00B5               	movwf	??___ftdiv
 16500  0D6E  0835               	movf	??___ftdiv,w
 16501  0D6F  02BD               	subwf	___ftdiv@exp,f
 16502  0D70  0832               	movf	___ftdiv@f1,w
 16503  0D71  00B5               	movwf	??___ftdiv
 16504  0D72  0833               	movf	___ftdiv@f1+1,w
 16505  0D73  00B6               	movwf	??___ftdiv+1
 16506  0D74  0834               	movf	___ftdiv@f1+2,w
 16507  0D75  00B7               	movwf	??___ftdiv+2
 16508  0D76  3010               	movlw	16
 16509  0D77                     u4735:	
 16510  0D77  36B7               	lsrf	??___ftdiv+2,f
 16511  0D78  0CB6               	rrf	??___ftdiv+1,f
 16512  0D79  0CB5               	rrf	??___ftdiv,f
 16513  0D7A  0B89               	decfsz	9,f
 16514  0D7B  2D77               	goto	u4735
 16515  0D7C  0835               	movf	??___ftdiv,w
 16516  0D7D  00B8               	movwf	??___ftdiv+3
 16517  0D7E  0838               	movf	??___ftdiv+3,w
 16518  0D7F  00BE               	movwf	___ftdiv@sign
 16519  0D80  082F               	movf	___ftdiv@f2,w
 16520  0D81  00B5               	movwf	??___ftdiv
 16521  0D82  0830               	movf	___ftdiv@f2+1,w
 16522  0D83  00B6               	movwf	??___ftdiv+1
 16523  0D84  0831               	movf	___ftdiv@f2+2,w
 16524  0D85  00B7               	movwf	??___ftdiv+2
 16525  0D86  3010               	movlw	16
 16526  0D87                     u4745:	
 16527  0D87  36B7               	lsrf	??___ftdiv+2,f
 16528  0D88  0CB6               	rrf	??___ftdiv+1,f
 16529  0D89  0CB5               	rrf	??___ftdiv,f
 16530  0D8A  0B89               	decfsz	9,f
 16531  0D8B  2D87               	goto	u4745
 16532  0D8C  0835               	movf	??___ftdiv,w
 16533  0D8D  00B8               	movwf	??___ftdiv+3
 16534  0D8E  0838               	movf	??___ftdiv+3,w
 16535  0D8F  06BE               	xorwf	___ftdiv@sign,f
 16536  0D90  3080               	movlw	128
 16537  0D91  00B5               	movwf	??___ftdiv
 16538  0D92  0835               	movf	??___ftdiv,w
 16539  0D93  05BE               	andwf	___ftdiv@sign,f
 16540  0D94  17B3               	bsf	___ftdiv@f1+1,7
 16541  0D95  30FF               	movlw	255
 16542  0D96  05B2               	andwf	___ftdiv@f1,f
 16543  0D97  30FF               	movlw	255
 16544  0D98  05B3               	andwf	___ftdiv@f1+1,f
 16545  0D99  3000               	movlw	0
 16546  0D9A  05B4               	andwf	___ftdiv@f1+2,f
 16547  0D9B  17B0               	bsf	___ftdiv@f2+1,7
 16548  0D9C  30FF               	movlw	255
 16549  0D9D  05AF               	andwf	___ftdiv@f2,f
 16550  0D9E  30FF               	movlw	255
 16551  0D9F  05B0               	andwf	___ftdiv@f2+1,f
 16552  0DA0  3000               	movlw	0
 16553  0DA1  05B1               	andwf	___ftdiv@f2+2,f
 16554  0DA2  3018               	movlw	24
 16555  0DA3  00B5               	movwf	??___ftdiv
 16556  0DA4  0835               	movf	??___ftdiv,w
 16557  0DA5  00B9               	movwf	___ftdiv@cntr
 16558  0DA6                     l5844:	
 16559  0DA6  3001               	movlw	1
 16560  0DA7                     u4755:	
 16561  0DA7  35BA               	lslf	___ftdiv@f3,f
 16562  0DA8  0DBB               	rlf	___ftdiv@f3+1,f
 16563  0DA9  0DBC               	rlf	___ftdiv@f3+2,f
 16564  0DAA  0B89               	decfsz	9,f
 16565  0DAB  2DA7               	goto	u4755
 16566  0DAC  0831               	movf	___ftdiv@f2+2,w
 16567  0DAD  0234               	subwf	___ftdiv@f1+2,w
 16568  0DAE  1D03               	skipz
 16569  0DAF  2DB6               	goto	u4765
 16570  0DB0  0830               	movf	___ftdiv@f2+1,w
 16571  0DB1  0233               	subwf	___ftdiv@f1+1,w
 16572  0DB2  1D03               	skipz
 16573  0DB3  2DB6               	goto	u4765
 16574  0DB4  082F               	movf	___ftdiv@f2,w
 16575  0DB5  0232               	subwf	___ftdiv@f1,w
 16576  0DB6                     u4765:	
 16577  0DB6  1C03               	skipc
 16578  0DB7  2DBF               	goto	l5852
 16579  0DB8  082F               	movf	___ftdiv@f2,w
 16580  0DB9  02B2               	subwf	___ftdiv@f1,f
 16581  0DBA  0830               	movf	___ftdiv@f2+1,w
 16582  0DBB  3BB3               	subwfb	___ftdiv@f1+1,f
 16583  0DBC  0831               	movf	___ftdiv@f2+2,w
 16584  0DBD  3BB4               	subwfb	___ftdiv@f1+2,f
 16585  0DBE  143A               	bsf	___ftdiv@f3,0
 16586  0DBF                     l5852:	
 16587  0DBF  3001               	movlw	1
 16588  0DC0                     u4775:	
 16589  0DC0  35B2               	lslf	___ftdiv@f1,f
 16590  0DC1  0DB3               	rlf	___ftdiv@f1+1,f
 16591  0DC2  0DB4               	rlf	___ftdiv@f1+2,f
 16592  0DC3  0B89               	decfsz	9,f
 16593  0DC4  2DC0               	goto	u4775
 16594  0DC5  3001               	movlw	1
 16595  0DC6  02B9               	subwf	___ftdiv@cntr,f
 16596  0DC7  1D03               	btfss	3,2
 16597  0DC8  2DA6               	goto	l5844
 16598  0DC9  083A               	movf	___ftdiv@f3,w
 16599  0DCA  00A1               	movwf	___ftpack@arg
 16600  0DCB  083B               	movf	___ftdiv@f3+1,w
 16601  0DCC  00A2               	movwf	___ftpack@arg+1
 16602  0DCD  083C               	movf	___ftdiv@f3+2,w
 16603  0DCE  00A3               	movwf	___ftpack@arg+2
 16604  0DCF  083D               	movf	___ftdiv@exp,w
 16605  0DD0  00B5               	movwf	??___ftdiv
 16606  0DD1  0835               	movf	??___ftdiv,w
 16607  0DD2  00A4               	movwf	___ftpack@exp
 16608  0DD3  083E               	movf	___ftdiv@sign,w
 16609  0DD4  00B6               	movwf	??___ftdiv+1
 16610  0DD5  0836               	movf	??___ftdiv+1,w
 16611  0DD6  00A5               	movwf	___ftpack@sign
 16612  0DD7  3196  2670         	fcall	___ftpack
 16613  0DD9  0020               	movlb	0	; select bank0
 16614  0DDA  0821               	movf	?___ftpack,w
 16615  0DDB  00AF               	movwf	?___ftdiv
 16616  0DDC  0822               	movf	?___ftpack+1,w
 16617  0DDD  00B0               	movwf	?___ftdiv+1
 16618  0DDE  0823               	movf	?___ftpack+2,w
 16619  0DDF  00B1               	movwf	?___ftdiv+2
 16620  0DE0  0008               	return
 16621  0DE1                     __end_of___ftdiv:	
 16622                           
 16623                           	psect	text113
 16624  0380                     __ptext113:	
 16625 ;; *************** function ___ftadd *****************
 16626 ;; Defined at:
 16627 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16628 ;; Parameters:    Size  Location     Type
 16629 ;;  f1              3   34[BANK0 ] float 
 16630 ;;  f2              3   37[BANK0 ] float 
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;  exp1            1   46[BANK0 ] unsigned char 
 16633 ;;  exp2            1   45[BANK0 ] unsigned char 
 16634 ;;  sign            1   44[BANK0 ] unsigned char 
 16635 ;; Return value:  Size  Location     Type
 16636 ;;                  3   34[BANK0 ] float 
 16637 ;; Registers used:
 16638 ;;		wreg, status,2, status,0, pclath, cstack
 16639 ;; Tracked objects:
 16640 ;;		On entry : 0/0
 16641 ;;		On exit  : 0/0
 16642 ;;		Unchanged: 0/0
 16643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16644 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16646 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16647 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16648 ;;Total ram usage:       13 bytes
 16649 ;; Hardware stack levels used:    1
 16650 ;; Hardware stack levels required when called:    6
 16651 ;; This function calls:
 16652 ;;		___ftpack
 16653 ;; This function is called by:
 16654 ;;		_getDimmerLights_PercentToValue
 16655 ;;		_getDimmerLights_ValueToPercent
 16656 ;; This function uses a non-reentrant model
 16657 ;;
 16658                           
 16659                           
 16660                           ;psect for function ___ftadd
 16661  0380                     ___ftadd:	
 16662                           
 16663                           ;incstack = 0
 16664                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16665  0380  0020               	movlb	0	; select bank0
 16666  0381  0842               	movf	___ftadd@f1,w
 16667  0382  00C8               	movwf	??___ftadd
 16668  0383  0843               	movf	___ftadd@f1+1,w
 16669  0384  00C9               	movwf	??___ftadd+1
 16670  0385  0844               	movf	___ftadd@f1+2,w
 16671  0386  00CA               	movwf	??___ftadd+2
 16672  0387  1003               	clrc
 16673  0388  0D49               	rlf	??___ftadd+1,w
 16674  0389  0D4A               	rlf	??___ftadd+2,w
 16675  038A  00CB               	movwf	??___ftadd+3
 16676  038B  084B               	movf	??___ftadd+3,w
 16677  038C  00CE               	movwf	___ftadd@exp1
 16678  038D  0845               	movf	___ftadd@f2,w
 16679  038E  00C8               	movwf	??___ftadd
 16680  038F  0846               	movf	___ftadd@f2+1,w
 16681  0390  00C9               	movwf	??___ftadd+1
 16682  0391  0847               	movf	___ftadd@f2+2,w
 16683  0392  00CA               	movwf	??___ftadd+2
 16684  0393  1003               	clrc
 16685  0394  0D49               	rlf	??___ftadd+1,w
 16686  0395  0D4A               	rlf	??___ftadd+2,w
 16687  0396  00CB               	movwf	??___ftadd+3
 16688  0397  084B               	movf	??___ftadd+3,w
 16689  0398  00CD               	movwf	___ftadd@exp2
 16690  0399  084E               	movf	___ftadd@exp1,w
 16691  039A  1903               	btfsc	3,2
 16692  039B  2BA8               	goto	l5754
 16693  039C  084D               	movf	___ftadd@exp2,w
 16694  039D  024E               	subwf	___ftadd@exp1,w
 16695  039E  1803               	skipnc
 16696  039F  2BAF               	goto	l5758
 16697  03A0  034E               	decf	___ftadd@exp1,w
 16698  03A1  3AFF               	xorlw	255
 16699  03A2  074D               	addwf	___ftadd@exp2,w
 16700  03A3  00C8               	movwf	??___ftadd
 16701  03A4  3019               	movlw	25
 16702  03A5  0248               	subwf	??___ftadd,w
 16703  03A6  1C03               	skipc
 16704  03A7  2BAF               	goto	l5758
 16705  03A8                     l5754:	
 16706  03A8  0845               	movf	___ftadd@f2,w
 16707  03A9  00C2               	movwf	?___ftadd
 16708  03AA  0846               	movf	___ftadd@f2+1,w
 16709  03AB  00C3               	movwf	?___ftadd+1
 16710  03AC  0847               	movf	___ftadd@f2+2,w
 16711  03AD  00C4               	movwf	?___ftadd+2
 16712  03AE  0008               	return
 16713  03AF                     l5758:	
 16714  03AF  084D               	movf	___ftadd@exp2,w
 16715  03B0  1903               	btfsc	3,2
 16716  03B1  0008               	return
 16717  03B2  084E               	movf	___ftadd@exp1,w
 16718  03B3  024D               	subwf	___ftadd@exp2,w
 16719  03B4  1803               	skipnc
 16720  03B5  2BBE               	goto	l5764
 16721  03B6  034D               	decf	___ftadd@exp2,w
 16722  03B7  3AFF               	xorlw	255
 16723  03B8  074E               	addwf	___ftadd@exp1,w
 16724  03B9  00C8               	movwf	??___ftadd
 16725  03BA  3019               	movlw	25
 16726  03BB  0248               	subwf	??___ftadd,w
 16727  03BC  1803               	btfsc	3,0
 16728  03BD  0008               	return
 16729  03BE                     l5764:	
 16730  03BE  3006               	movlw	6
 16731  03BF  00C8               	movwf	??___ftadd
 16732  03C0  0848               	movf	??___ftadd,w
 16733  03C1  00CC               	movwf	___ftadd@sign
 16734  03C2  1BC4               	btfsc	___ftadd@f1+2,7
 16735  03C3  17CC               	bsf	___ftadd@sign,7
 16736  03C4  1BC7               	btfsc	___ftadd@f2+2,7
 16737  03C5  174C               	bsf	___ftadd@sign,6
 16738  03C6  17C3               	bsf	___ftadd@f1+1,7
 16739  03C7  30FF               	movlw	255
 16740  03C8  05C2               	andwf	___ftadd@f1,f
 16741  03C9  30FF               	movlw	255
 16742  03CA  05C3               	andwf	___ftadd@f1+1,f
 16743  03CB  3000               	movlw	0
 16744  03CC  05C4               	andwf	___ftadd@f1+2,f
 16745  03CD  17C6               	bsf	___ftadd@f2+1,7
 16746  03CE  30FF               	movlw	255
 16747  03CF  05C5               	andwf	___ftadd@f2,f
 16748  03D0  30FF               	movlw	255
 16749  03D1  05C6               	andwf	___ftadd@f2+1,f
 16750  03D2  3000               	movlw	0
 16751  03D3  05C7               	andwf	___ftadd@f2+2,f
 16752  03D4  084D               	movf	___ftadd@exp2,w
 16753  03D5  024E               	subwf	___ftadd@exp1,w
 16754  03D6  1803               	skipnc
 16755  03D7  2BFA               	goto	l5786
 16756  03D8                     l5776:	
 16757  03D8  3001               	movlw	1
 16758  03D9                     u4575:	
 16759  03D9  35C5               	lslf	___ftadd@f2,f
 16760  03DA  0DC6               	rlf	___ftadd@f2+1,f
 16761  03DB  0DC7               	rlf	___ftadd@f2+2,f
 16762  03DC  0B89               	decfsz	9,f
 16763  03DD  2BD9               	goto	u4575
 16764  03DE  3001               	movlw	1
 16765  03DF  02CD               	subwf	___ftadd@exp2,f
 16766  03E0  084D               	movf	___ftadd@exp2,w
 16767  03E1  064E               	xorwf	___ftadd@exp1,w
 16768  03E2  1903               	skipnz
 16769  03E3  2BF5               	goto	l5784
 16770  03E4  3001               	movlw	1
 16771  03E5  02CC               	subwf	___ftadd@sign,f
 16772  03E6  084C               	movf	___ftadd@sign,w
 16773  03E7  3907               	andlw	7
 16774  03E8  1903               	btfsc	3,2
 16775  03E9  2BF5               	goto	l5784
 16776  03EA  2BD8               	goto	l5776
 16777  03EB                     l5782:	
 16778  03EB  3001               	movlw	1
 16779  03EC                     u4605:	
 16780  03EC  36C4               	lsrf	___ftadd@f1+2,f
 16781  03ED  0CC3               	rrf	___ftadd@f1+1,f
 16782  03EE  0CC2               	rrf	___ftadd@f1,f
 16783  03EF  0B89               	decfsz	9,f
 16784  03F0  2BEC               	goto	u4605
 16785  03F1  3001               	movlw	1
 16786  03F2  00C8               	movwf	??___ftadd
 16787  03F3  0848               	movf	??___ftadd,w
 16788  03F4  07CE               	addwf	___ftadd@exp1,f
 16789  03F5                     l5784:	
 16790  03F5  084E               	movf	___ftadd@exp1,w
 16791  03F6  064D               	xorwf	___ftadd@exp2,w
 16792  03F7  1903               	btfsc	3,2
 16793  03F8  2C1F               	goto	l2849
 16794  03F9  2BEB               	goto	l5782
 16795  03FA                     l5786:	
 16796  03FA  084E               	movf	___ftadd@exp1,w
 16797  03FB  024D               	subwf	___ftadd@exp2,w
 16798  03FC  1803               	skipnc
 16799  03FD  2C1F               	goto	l2849
 16800  03FE                     l5788:	
 16801  03FE  3001               	movlw	1
 16802  03FF                     u4635:	
 16803  03FF  35C2               	lslf	___ftadd@f1,f
 16804  0400  0DC3               	rlf	___ftadd@f1+1,f
 16805  0401  0DC4               	rlf	___ftadd@f1+2,f
 16806  0402  0B89               	decfsz	9,f
 16807  0403  2BFF               	goto	u4635
 16808  0404  3001               	movlw	1
 16809  0405  02CE               	subwf	___ftadd@exp1,f
 16810  0406  084D               	movf	___ftadd@exp2,w
 16811  0407  064E               	xorwf	___ftadd@exp1,w
 16812  0408  1903               	skipnz
 16813  0409  2C1B               	goto	l5796
 16814  040A  3001               	movlw	1
 16815  040B  02CC               	subwf	___ftadd@sign,f
 16816  040C  084C               	movf	___ftadd@sign,w
 16817  040D  3907               	andlw	7
 16818  040E  1903               	btfsc	3,2
 16819  040F  2C1B               	goto	l5796
 16820  0410  2BFE               	goto	l5788
 16821  0411                     l5794:	
 16822  0411  3001               	movlw	1
 16823  0412                     u4665:	
 16824  0412  36C7               	lsrf	___ftadd@f2+2,f
 16825  0413  0CC6               	rrf	___ftadd@f2+1,f
 16826  0414  0CC5               	rrf	___ftadd@f2,f
 16827  0415  0B89               	decfsz	9,f
 16828  0416  2C12               	goto	u4665
 16829  0417  3001               	movlw	1
 16830  0418  00C8               	movwf	??___ftadd
 16831  0419  0848               	movf	??___ftadd,w
 16832  041A  07CD               	addwf	___ftadd@exp2,f
 16833  041B                     l5796:	
 16834  041B  084E               	movf	___ftadd@exp1,w
 16835  041C  064D               	xorwf	___ftadd@exp2,w
 16836  041D  1D03               	skipz
 16837  041E  2C11               	goto	l5794
 16838  041F                     l2849:	
 16839  041F  1FCC               	btfss	___ftadd@sign,7
 16840  0420  2C31               	goto	l5800
 16841  0421  30FF               	movlw	255
 16842  0422  06C2               	xorwf	___ftadd@f1,f
 16843  0423  30FF               	movlw	255
 16844  0424  06C3               	xorwf	___ftadd@f1+1,f
 16845  0425  30FF               	movlw	255
 16846  0426  06C4               	xorwf	___ftadd@f1+2,f
 16847  0427  3001               	movlw	1
 16848  0428  07C2               	addwf	___ftadd@f1,f
 16849  0429  3000               	movlw	0
 16850  042A  1803               	skipnc
 16851  042B  3001               	movlw	1
 16852  042C  07C3               	addwf	___ftadd@f1+1,f
 16853  042D  3000               	movlw	0
 16854  042E  1803               	skipnc
 16855  042F  3001               	movlw	1
 16856  0430  07C4               	addwf	___ftadd@f1+2,f
 16857  0431                     l5800:	
 16858  0431  1F4C               	btfss	___ftadd@sign,6
 16859  0432  2C43               	goto	l5804
 16860  0433  30FF               	movlw	255
 16861  0434  06C5               	xorwf	___ftadd@f2,f
 16862  0435  30FF               	movlw	255
 16863  0436  06C6               	xorwf	___ftadd@f2+1,f
 16864  0437  30FF               	movlw	255
 16865  0438  06C7               	xorwf	___ftadd@f2+2,f
 16866  0439  3001               	movlw	1
 16867  043A  07C5               	addwf	___ftadd@f2,f
 16868  043B  3000               	movlw	0
 16869  043C  1803               	skipnc
 16870  043D  3001               	movlw	1
 16871  043E  07C6               	addwf	___ftadd@f2+1,f
 16872  043F  3000               	movlw	0
 16873  0440  1803               	skipnc
 16874  0441  3001               	movlw	1
 16875  0442  07C7               	addwf	___ftadd@f2+2,f
 16876  0443                     l5804:	
 16877  0443  01CC               	clrf	___ftadd@sign
 16878  0444  0842               	movf	___ftadd@f1,w
 16879  0445  07C5               	addwf	___ftadd@f2,f
 16880  0446  0843               	movf	___ftadd@f1+1,w
 16881  0447  3DC6               	addwfc	___ftadd@f2+1,f
 16882  0448  0844               	movf	___ftadd@f1+2,w
 16883  0449  3DC7               	addwfc	___ftadd@f2+2,f
 16884  044A  1FC7               	btfss	___ftadd@f2+2,7
 16885  044B  2C5E               	goto	l5814
 16886  044C  30FF               	movlw	255
 16887  044D  06C5               	xorwf	___ftadd@f2,f
 16888  044E  30FF               	movlw	255
 16889  044F  06C6               	xorwf	___ftadd@f2+1,f
 16890  0450  30FF               	movlw	255
 16891  0451  06C7               	xorwf	___ftadd@f2+2,f
 16892  0452  3001               	movlw	1
 16893  0453  07C5               	addwf	___ftadd@f2,f
 16894  0454  3000               	movlw	0
 16895  0455  1803               	skipnc
 16896  0456  3001               	movlw	1
 16897  0457  07C6               	addwf	___ftadd@f2+1,f
 16898  0458  3000               	movlw	0
 16899  0459  1803               	skipnc
 16900  045A  3001               	movlw	1
 16901  045B  07C7               	addwf	___ftadd@f2+2,f
 16902  045C  01CC               	clrf	___ftadd@sign
 16903  045D  0ACC               	incf	___ftadd@sign,f
 16904  045E                     l5814:	
 16905  045E  0845               	movf	___ftadd@f2,w
 16906  045F  00A1               	movwf	___ftpack@arg
 16907  0460  0846               	movf	___ftadd@f2+1,w
 16908  0461  00A2               	movwf	___ftpack@arg+1
 16909  0462  0847               	movf	___ftadd@f2+2,w
 16910  0463  00A3               	movwf	___ftpack@arg+2
 16911  0464  084E               	movf	___ftadd@exp1,w
 16912  0465  00C8               	movwf	??___ftadd
 16913  0466  0848               	movf	??___ftadd,w
 16914  0467  00A4               	movwf	___ftpack@exp
 16915  0468  084C               	movf	___ftadd@sign,w
 16916  0469  00C9               	movwf	??___ftadd+1
 16917  046A  0849               	movf	??___ftadd+1,w
 16918  046B  00A5               	movwf	___ftpack@sign
 16919  046C  3196  2670         	fcall	___ftpack
 16920  046E  0020               	movlb	0	; select bank0
 16921  046F  0821               	movf	?___ftpack,w
 16922  0470  00C2               	movwf	?___ftadd
 16923  0471  0822               	movf	?___ftpack+1,w
 16924  0472  00C3               	movwf	?___ftadd+1
 16925  0473  0823               	movf	?___ftpack+2,w
 16926  0474  00C4               	movwf	?___ftadd+2
 16927  0475  0008               	return
 16928  0476                     __end_of___ftadd:	
 16929                           
 16930                           	psect	text114
 16931  07DE                     __ptext114:	
 16932 ;; *************** function ___awtoft *****************
 16933 ;; Defined at:
 16934 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 16935 ;; Parameters:    Size  Location     Type
 16936 ;;  c               2    9[BANK0 ] int 
 16937 ;; Auto vars:     Size  Location     Type
 16938 ;;  sign            1   14[BANK0 ] unsigned char 
 16939 ;; Return value:  Size  Location     Type
 16940 ;;                  3    9[BANK0 ] float 
 16941 ;; Registers used:
 16942 ;;		wreg, status,2, status,0, pclath, cstack
 16943 ;; Tracked objects:
 16944 ;;		On entry : 0/0
 16945 ;;		On exit  : 0/0
 16946 ;;		Unchanged: 0/0
 16947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16948 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16951 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;Total ram usage:        6 bytes
 16953 ;; Hardware stack levels used:    1
 16954 ;; Hardware stack levels required when called:    6
 16955 ;; This function calls:
 16956 ;;		___ftpack
 16957 ;; This function is called by:
 16958 ;;		_getDimmerLights_PercentToValue
 16959 ;;		_getDimmerLights_ValueToPercent
 16960 ;; This function uses a non-reentrant model
 16961 ;;
 16962                           
 16963                           
 16964                           ;psect for function ___awtoft
 16965  07DE                     ___awtoft:	
 16966                           
 16967                           ;incstack = 0
 16968                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 16969  07DE  0020               	movlb	0	; select bank0
 16970  07DF  01AE               	clrf	___awtoft@sign
 16971  07E0  1FAA               	btfss	___awtoft@c+1,7
 16972  07E1  2FE9               	goto	l5742
 16973  07E2  09A9               	comf	___awtoft@c,f
 16974  07E3  09AA               	comf	___awtoft@c+1,f
 16975  07E4  0AA9               	incf	___awtoft@c,f
 16976  07E5  1903               	skipnz
 16977  07E6  0AAA               	incf	___awtoft@c+1,f
 16978  07E7  01AE               	clrf	___awtoft@sign
 16979  07E8  0AAE               	incf	___awtoft@sign,f
 16980  07E9                     l5742:	
 16981  07E9  0829               	movf	___awtoft@c,w
 16982  07EA  00A1               	movwf	___ftpack@arg
 16983  07EB  082A               	movf	___awtoft@c+1,w
 16984  07EC  00A2               	movwf	___ftpack@arg+1
 16985  07ED  01A3               	clrf	___ftpack@arg+2
 16986  07EE  308E               	movlw	142
 16987  07EF  00AC               	movwf	??___awtoft
 16988  07F0  082C               	movf	??___awtoft,w
 16989  07F1  00A4               	movwf	___ftpack@exp
 16990  07F2  082E               	movf	___awtoft@sign,w
 16991  07F3  00AD               	movwf	??___awtoft+1
 16992  07F4  082D               	movf	??___awtoft+1,w
 16993  07F5  00A5               	movwf	___ftpack@sign
 16994  07F6  3196  2670         	fcall	___ftpack
 16995  07F8  0020               	movlb	0	; select bank0
 16996  07F9  0821               	movf	?___ftpack,w
 16997  07FA  00A9               	movwf	?___awtoft
 16998  07FB  0822               	movf	?___ftpack+1,w
 16999  07FC  00AA               	movwf	?___awtoft+1
 17000  07FD  0823               	movf	?___ftpack+2,w
 17001  07FE  00AB               	movwf	?___awtoft+2
 17002  07FF  0008               	return
 17003  0800                     __end_of___awtoft:	
 17004                           
 17005                           	psect	text115
 17006  1670                     __ptext115:	
 17007 ;; *************** function ___ftpack *****************
 17008 ;; Defined at:
 17009 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17010 ;; Parameters:    Size  Location     Type
 17011 ;;  arg             3    1[BANK0 ] unsigned um
 17012 ;;  exp             1    4[BANK0 ] unsigned char 
 17013 ;;  sign            1    5[BANK0 ] unsigned char 
 17014 ;; Auto vars:     Size  Location     Type
 17015 ;;		None
 17016 ;; Return value:  Size  Location     Type
 17017 ;;                  3    1[BANK0 ] float 
 17018 ;; Registers used:
 17019 ;;		wreg, status,2, status,0
 17020 ;; Tracked objects:
 17021 ;;		On entry : 0/0
 17022 ;;		On exit  : 0/0
 17023 ;;		Unchanged: 0/0
 17024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17025 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17027 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17029 ;;Total ram usage:        8 bytes
 17030 ;; Hardware stack levels used:    1
 17031 ;; Hardware stack levels required when called:    5
 17032 ;; This function calls:
 17033 ;;		Nothing
 17034 ;; This function is called by:
 17035 ;;		___awtoft
 17036 ;;		___ftadd
 17037 ;;		___ftdiv
 17038 ;;		___ftmul
 17039 ;; This function uses a non-reentrant model
 17040 ;;
 17041                           
 17042                           
 17043                           ;psect for function ___ftpack
 17044  1670                     ___ftpack:	
 17045                           
 17046                           ;incstack = 0
 17047                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17048  1670  0020               	movlb	0	; select bank0
 17049  1671  0824               	movf	___ftpack@exp,w
 17050  1672  1903               	btfsc	3,2
 17051  1673  2E79               	goto	l5610
 17052  1674  0823               	movf	___ftpack@arg+2,w
 17053  1675  0422               	iorwf	___ftpack@arg+1,w
 17054  1676  0421               	iorwf	___ftpack@arg,w
 17055  1677  1D03               	skipz
 17056  1678  2E8A               	goto	l5616
 17057  1679                     l5610:	
 17058  1679  3000               	movlw	0
 17059  167A  00A1               	movwf	?___ftpack
 17060  167B  3000               	movlw	0
 17061  167C  00A2               	movwf	?___ftpack+1
 17062  167D  3000               	movlw	0
 17063  167E  00A3               	movwf	?___ftpack+2
 17064  167F  0008               	return
 17065  1680                     l5614:	
 17066  1680  3001               	movlw	1
 17067  1681  00A6               	movwf	??___ftpack
 17068  1682  0826               	movf	??___ftpack,w
 17069  1683  07A4               	addwf	___ftpack@exp,f
 17070  1684  3001               	movlw	1
 17071  1685                     u4205:	
 17072  1685  36A3               	lsrf	___ftpack@arg+2,f
 17073  1686  0CA2               	rrf	___ftpack@arg+1,f
 17074  1687  0CA1               	rrf	___ftpack@arg,f
 17075  1688  0B89               	decfsz	9,f
 17076  1689  2E85               	goto	u4205
 17077  168A                     l5616:	
 17078  168A  30FE               	movlw	254
 17079  168B  0523               	andwf	___ftpack@arg+2,w
 17080  168C  1903               	btfsc	3,2
 17081  168D  2EA3               	goto	l2820
 17082  168E  2E80               	goto	l5614
 17083  168F                     l5618:	
 17084  168F  3001               	movlw	1
 17085  1690  00A6               	movwf	??___ftpack
 17086  1691  0826               	movf	??___ftpack,w
 17087  1692  07A4               	addwf	___ftpack@exp,f
 17088  1693  3001               	movlw	1
 17089  1694  07A1               	addwf	___ftpack@arg,f
 17090  1695  3000               	movlw	0
 17091  1696  1803               	skipnc
 17092  1697  3001               	movlw	1
 17093  1698  07A2               	addwf	___ftpack@arg+1,f
 17094  1699  3000               	movlw	0
 17095  169A  1803               	skipnc
 17096  169B  3001               	movlw	1
 17097  169C  07A3               	addwf	___ftpack@arg+2,f
 17098  169D  3001               	movlw	1
 17099  169E                     u4225:	
 17100  169E  36A3               	lsrf	___ftpack@arg+2,f
 17101  169F  0CA2               	rrf	___ftpack@arg+1,f
 17102  16A0  0CA1               	rrf	___ftpack@arg,f
 17103  16A1  0B89               	decfsz	9,f
 17104  16A2  2E9E               	goto	u4225
 17105  16A3                     l2820:	
 17106  16A3  30FF               	movlw	255
 17107  16A4  0523               	andwf	___ftpack@arg+2,w
 17108  16A5  1903               	btfsc	3,2
 17109  16A6  2EB0               	goto	l5626
 17110  16A7  2E8F               	goto	l5618
 17111  16A8                     l5624:	
 17112  16A8  3001               	movlw	1
 17113  16A9  02A4               	subwf	___ftpack@exp,f
 17114  16AA  3001               	movlw	1
 17115  16AB                     u4245:	
 17116  16AB  35A1               	lslf	___ftpack@arg,f
 17117  16AC  0DA2               	rlf	___ftpack@arg+1,f
 17118  16AD  0DA3               	rlf	___ftpack@arg+2,f
 17119  16AE  0B89               	decfsz	9,f
 17120  16AF  2EAB               	goto	u4245
 17121  16B0                     l5626:	
 17122  16B0  1FA2               	btfss	___ftpack@arg+1,7
 17123  16B1  2EA8               	goto	l5624
 17124  16B2  1824               	btfsc	___ftpack@exp,0
 17125  16B3  2EBA               	goto	l2826
 17126  16B4  30FF               	movlw	255
 17127  16B5  05A1               	andwf	___ftpack@arg,f
 17128  16B6  307F               	movlw	127
 17129  16B7  05A2               	andwf	___ftpack@arg+1,f
 17130  16B8  30FF               	movlw	255
 17131  16B9  05A3               	andwf	___ftpack@arg+2,f
 17132  16BA                     l2826:	
 17133  16BA  1003               	clrc
 17134  16BB  0CA4               	rrf	___ftpack@exp,f
 17135  16BC  0824               	movf	___ftpack@exp,w
 17136  16BD  00A6               	movwf	??___ftpack
 17137  16BE  01A7               	clrf	??___ftpack+1
 17138  16BF  01A8               	clrf	??___ftpack+2
 17139  16C0  3010               	movlw	16
 17140  16C1                     u4275:	
 17141  16C1  35A6               	lslf	??___ftpack,f
 17142  16C2  0DA7               	rlf	??___ftpack+1,f
 17143  16C3  0DA8               	rlf	??___ftpack+2,f
 17144  16C4  0B89               	decfsz	9,f
 17145  16C5  2EC1               	goto	u4275
 17146  16C6  0826               	movf	??___ftpack,w
 17147  16C7  04A1               	iorwf	___ftpack@arg,f
 17148  16C8  0827               	movf	??___ftpack+1,w
 17149  16C9  04A2               	iorwf	___ftpack@arg+1,f
 17150  16CA  0828               	movf	??___ftpack+2,w
 17151  16CB  04A3               	iorwf	___ftpack@arg+2,f
 17152  16CC  0825               	movf	___ftpack@sign,w
 17153  16CD  1903               	btfsc	3,2
 17154  16CE  0008               	return
 17155  16CF  17A3               	bsf	___ftpack@arg+2,7
 17156  16D0  0008               	return
 17157  16D1                     __end_of___ftpack:	
 17158                           
 17159                           	psect	text116
 17160  1C8A                     __ptext116:	
 17161 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17162 ;; Defined at:
 17163 ;;		line 67 in file "../src/Dimmer_B1.c"
 17164 ;; Parameters:    Size  Location     Type
 17165 ;;  lights          1    wreg     unsigned char 
 17166 ;; Auto vars:     Size  Location     Type
 17167 ;;  lights          1    2[BANK0 ] unsigned char 
 17168 ;;  value           1    3[BANK0 ] unsigned char 
 17169 ;; Return value:  Size  Location     Type
 17170 ;;                  1    wreg      unsigned char 
 17171 ;; Registers used:
 17172 ;;		wreg, status,2
 17173 ;; Tracked objects:
 17174 ;;		On entry : 0/0
 17175 ;;		On exit  : 0/0
 17176 ;;		Unchanged: 0/0
 17177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17179 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17181 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17182 ;;Total ram usage:        3 bytes
 17183 ;; Hardware stack levels used:    1
 17184 ;; Hardware stack levels required when called:    5
 17185 ;; This function calls:
 17186 ;;		Nothing
 17187 ;; This function is called by:
 17188 ;;		_setDimmerLights_Dimming
 17189 ;; This function uses a non-reentrant model
 17190 ;;
 17191                           
 17192                           
 17193                           ;psect for function _getDimmerIntr_DimmingValue
 17194  1C8A                     _getDimmerIntr_DimmingValue:	
 17195                           
 17196                           ;incstack = 0
 17197                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17198                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17199  1C8A  0020               	movlb	0	; select bank0
 17200  1C8B  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 17201                           
 17202                           ;Dimmer_B1.c: 68: char value = 0;
 17203  1C8C  01A3               	clrf	getDimmerIntr_DimmingValue@value
 17204                           
 17205                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17206  1C8D  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 17207  1C8E  3A01               	xorlw	1
 17208  1C8F  1D03               	skipz
 17209  1C90  2C97               	goto	l683
 17210                           
 17211                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17212  1C91  0021               	movlb	1	; select bank1
 17213  1C92  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 17214  1C93  0020               	movlb	0	; select bank0
 17215  1C94  00A1               	movwf	??_getDimmerIntr_DimmingValue
 17216  1C95  0821               	movf	??_getDimmerIntr_DimmingValue,w
 17217  1C96  00A3               	movwf	getDimmerIntr_DimmingValue@value
 17218  1C97                     l683:	
 17219                           
 17220                           ;Dimmer_B1.c: 72: }
 17221                           ;Dimmer_B1.c: 84: return value;
 17222  1C97  0823               	movf	getDimmerIntr_DimmingValue@value,w
 17223  1C98  0008               	return
 17224  1C99                     __end_of_getDimmerIntr_DimmingValue:	
 17225                           
 17226                           	psect	text117
 17227  1E2A                     __ptext117:	
 17228 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17229 ;; Defined at:
 17230 ;;		line 916 in file "../src/Dimmer_B1.c"
 17231 ;; Parameters:    Size  Location     Type
 17232 ;;  lights          1    wreg     unsigned char 
 17233 ;; Auto vars:     Size  Location     Type
 17234 ;;  lights          1    0[COMMON] unsigned char 
 17235 ;;  allow           1    3[BANK0 ] unsigned char 
 17236 ;; Return value:  Size  Location     Type
 17237 ;;                  1    wreg      unsigned char 
 17238 ;; Registers used:
 17239 ;;		wreg, status,2, pclath, cstack
 17240 ;; Tracked objects:
 17241 ;;		On entry : 0/0
 17242 ;;		On exit  : 0/0
 17243 ;;		Unchanged: 0/0
 17244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17249 ;;Total ram usage:        3 bytes
 17250 ;; Hardware stack levels used:    1
 17251 ;; Hardware stack levels required when called:    6
 17252 ;; This function calls:
 17253 ;;		_getLoad_OK
 17254 ;; This function is called by:
 17255 ;;		_setDimmerLights_Main
 17256 ;; This function uses a non-reentrant model
 17257 ;;
 17258                           
 17259                           
 17260                           ;psect for function _getDimmerLights_Allow_Condition
 17261  1E2A                     _getDimmerLights_Allow_Condition:	
 17262                           
 17263                           ;Dimmer_B1.c: 917: char allow = 0;
 17264                           
 17265                           ;incstack = 0
 17266                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+pclath+cstack]
 17267  1E2A  0020               	movlb	0	; select bank0
 17268  1E2B  01A3               	clrf	getDimmerLights_Allow_Condition@allow
 17269                           
 17270                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17271  1E2C  01A4               	clrf	_getDimmerLights_Allow_Condition$2223
 17272  1E2D  0AA4               	incf	_getDimmerLights_Allow_Condition$2223,f
 17273  1E2E  319B  2385  319E   	fcall	_getLoad_OK
 17274  1E31  3800               	iorlw	0
 17275  1E32  1D03               	skipz
 17276  1E33  2E39               	goto	l6674
 17277  1E34  0022               	movlb	2	; select bank2
 17278  1E35  18AD               	btfsc	_Dimmer^(0+256),1
 17279  1E36  2E39               	goto	l6674
 17280  1E37  0020               	movlb	0	; select bank0
 17281  1E38  01A4               	clrf	_getDimmerLights_Allow_Condition$2223
 17282  1E39                     l6674:	
 17283  1E39  0020               	movlb	0	; select bank0
 17284  1E3A  0824               	movf	_getDimmerLights_Allow_Condition$2223,w
 17285  1E3B  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17286  1E3C  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17287  1E3D  00A3               	movwf	getDimmerLights_Allow_Condition@allow
 17288                           
 17289                           ;Dimmer_B1.c: 950: return allow;
 17290  1E3E  0823               	movf	getDimmerLights_Allow_Condition@allow,w
 17291  1E3F  0008               	return
 17292  1E40                     __end_of_getDimmerLights_Allow_Condition:	
 17293                           
 17294                           	psect	text118
 17295  1B85                     __ptext118:	
 17296 ;; *************** function _getLoad_OK *****************
 17297 ;; Defined at:
 17298 ;;		line 272 in file "../src/OverLoad_B1.c"
 17299 ;; Parameters:    Size  Location     Type
 17300 ;;		None
 17301 ;; Auto vars:     Size  Location     Type
 17302 ;;  ok              1    1[BANK0 ] unsigned char 
 17303 ;; Return value:  Size  Location     Type
 17304 ;;                  1    wreg      unsigned char 
 17305 ;; Registers used:
 17306 ;;		wreg, status,2
 17307 ;; Tracked objects:
 17308 ;;		On entry : 0/0
 17309 ;;		On exit  : 0/0
 17310 ;;		Unchanged: 0/0
 17311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;Total ram usage:        1 bytes
 17317 ;; Hardware stack levels used:    1
 17318 ;; Hardware stack levels required when called:    5
 17319 ;; This function calls:
 17320 ;;		Nothing
 17321 ;; This function is called by:
 17322 ;;		_DimmerLights_Main
 17323 ;;		_getDimmerLights_Allow_Condition
 17324 ;; This function uses a non-reentrant model
 17325 ;;
 17326                           
 17327                           
 17328                           ;psect for function _getLoad_OK
 17329  1B85                     _getLoad_OK:	
 17330                           
 17331                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17332                           
 17333                           ;incstack = 0
 17334                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17335  1B85  3000               	movlw	0
 17336  1B86  0022               	movlb	2	; select bank2
 17337  1B87  1BB4               	btfsc	_Load^(0+256),7
 17338  1B88  3001               	movlw	1
 17339  1B89  0020               	movlb	0	; select bank0
 17340  1B8A  00A1               	movwf	getLoad_OK@ok
 17341                           
 17342                           ;OverLoad_B1.c: 274: return ok;
 17343  1B8B  0821               	movf	getLoad_OK@ok,w
 17344  1B8C  0008               	return
 17345  1B8D                     __end_of_getLoad_OK:	
 17346                           
 17347                           	psect	text119
 17348  11BD                     __ptext119:	
 17349 ;; *************** function _getMain_All_Error_Status *****************
 17350 ;; Defined at:
 17351 ;;		line 424 in file "../src/Main_B1.c"
 17352 ;; Parameters:    Size  Location     Type
 17353 ;;  command         1    wreg     unsigned char 
 17354 ;; Auto vars:     Size  Location     Type
 17355 ;;  command         1    6[BANK0 ] unsigned char 
 17356 ;;  status          1    7[BANK0 ] unsigned char 
 17357 ;; Return value:  Size  Location     Type
 17358 ;;                  1    wreg      unsigned char 
 17359 ;; Registers used:
 17360 ;;		wreg, status,2, status,0
 17361 ;; Tracked objects:
 17362 ;;		On entry : 0/0
 17363 ;;		On exit  : 0/0
 17364 ;;		Unchanged: 0/0
 17365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17367 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17369 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17370 ;;Total ram usage:        7 bytes
 17371 ;; Hardware stack levels used:    1
 17372 ;; Hardware stack levels required when called:    5
 17373 ;; This function calls:
 17374 ;;		Nothing
 17375 ;; This function is called by:
 17376 ;;		_DimmerLights_Main
 17377 ;;		_Exception_Main
 17378 ;;		_Load_Main
 17379 ;;		_setTemp_Main
 17380 ;;		_getRxData
 17381 ;;		_setSw_Main
 17382 ;; This function uses a non-reentrant model
 17383 ;;
 17384                           
 17385                           
 17386                           ;psect for function _getMain_All_Error_Status
 17387  11BD                     _getMain_All_Error_Status:	
 17388                           
 17389                           ;incstack = 0
 17390                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17391                           ;getMain_All_Error_Status@command stored from wreg
 17392  11BD  0020               	movlb	0	; select bank0
 17393  11BE  00A6               	movwf	getMain_All_Error_Status@command
 17394                           
 17395                           ;Main_B1.c: 425: char status = 0;
 17396  11BF  01A7               	clrf	getMain_All_Error_Status@status
 17397                           
 17398                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17399  11C0  08A7               	movf	getMain_All_Error_Status@status,f
 17400  11C1  1D03               	skipz
 17401  11C2  29D7               	goto	l8366
 17402  11C3  0826               	movf	getMain_All_Error_Status@command,w
 17403  11C4  3A02               	xorlw	2
 17404  11C5  1903               	skipnz
 17405  11C6  29D7               	goto	l8366
 17406                           
 17407                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17408  11C7  0021               	movlb	1	; select bank1
 17409  11C8  18DB               	btfsc	_Temp^(0+128),1
 17410  11C9  29CE               	goto	l8364
 17411  11CA  0020               	movlb	0	; select bank0
 17412  11CB  01A2               	clrf	_getMain_All_Error_Status$3540
 17413  11CC  01A3               	clrf	_getMain_All_Error_Status$3540+1
 17414  11CD  29D3               	goto	l1454
 17415  11CE                     l8364:	
 17416  11CE  3002               	movlw	2
 17417  11CF  0020               	movlb	0	; select bank0
 17418  11D0  00A2               	movwf	_getMain_All_Error_Status$3540
 17419  11D1  3000               	movlw	0
 17420  11D2  00A3               	movwf	_getMain_All_Error_Status$3540+1
 17421  11D3                     l1454:	
 17422  11D3  0822               	movf	_getMain_All_Error_Status$3540,w
 17423  11D4  00A1               	movwf	??_getMain_All_Error_Status
 17424  11D5  0821               	movf	??_getMain_All_Error_Status,w
 17425  11D6  00A7               	movwf	getMain_All_Error_Status@status
 17426  11D7                     l8366:	
 17427                           
 17428                           ;Main_B1.c: 438: }
 17429                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 17430  11D7  08A7               	movf	getMain_All_Error_Status@status,f
 17431  11D8  1D03               	skipz
 17432  11D9  29EE               	goto	l1455
 17433  11DA  0826               	movf	getMain_All_Error_Status@command,w
 17434  11DB  3A03               	xorlw	3
 17435  11DC  1903               	skipnz
 17436  11DD  29EE               	goto	l1455
 17437                           
 17438                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17439  11DE  0022               	movlb	2	; select bank2
 17440  11DF  1AB4               	btfsc	_Load^(0+256),5
 17441  11E0  29E5               	goto	l8374
 17442  11E1  0020               	movlb	0	; select bank0
 17443  11E2  01A4               	clrf	_getMain_All_Error_Status$3541
 17444  11E3  01A5               	clrf	_getMain_All_Error_Status$3541+1
 17445  11E4  29EA               	goto	l1459
 17446  11E5                     l8374:	
 17447  11E5  3003               	movlw	3
 17448  11E6  0020               	movlb	0	; select bank0
 17449  11E7  00A4               	movwf	_getMain_All_Error_Status$3541
 17450  11E8  3000               	movlw	0
 17451  11E9  00A5               	movwf	_getMain_All_Error_Status$3541+1
 17452  11EA                     l1459:	
 17453  11EA  0824               	movf	_getMain_All_Error_Status$3541,w
 17454  11EB  00A1               	movwf	??_getMain_All_Error_Status
 17455  11EC  0821               	movf	??_getMain_All_Error_Status,w
 17456  11ED  00A7               	movwf	getMain_All_Error_Status@status
 17457  11EE                     l1455:	
 17458                           
 17459                           ;Main_B1.c: 445: }
 17460                           ;Main_B1.c: 455: return status;
 17461  11EE  0827               	movf	getMain_All_Error_Status@status,w
 17462  11EF  0008               	return
 17463  11F0                     __end_of_getMain_All_Error_Status:	
 17464                           
 17465                           	psect	text120
 17466  1B70                     __ptext120:	
 17467 ;; *************** function _DimmerLights_Initialization *****************
 17468 ;; Defined at:
 17469 ;;		line 597 in file "../src/Dimmer_B1.c"
 17470 ;; Parameters:    Size  Location     Type
 17471 ;;		None
 17472 ;; Auto vars:     Size  Location     Type
 17473 ;;		None
 17474 ;; Return value:  Size  Location     Type
 17475 ;;		None               void
 17476 ;; Registers used:
 17477 ;;		wreg, status,2, status,0, pclath, cstack
 17478 ;; Tracked objects:
 17479 ;;		On entry : 0/0
 17480 ;;		On exit  : 0/0
 17481 ;;		Unchanged: 0/0
 17482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;Total ram usage:        0 bytes
 17488 ;; Hardware stack levels used:    1
 17489 ;; Hardware stack levels required when called:    6
 17490 ;; This function calls:
 17491 ;;		_DimmerIntr_Initialization
 17492 ;;		_setDimmerLights_Initialization
 17493 ;; This function is called by:
 17494 ;;		_main
 17495 ;; This function uses a non-reentrant model
 17496 ;;
 17497                           
 17498                           
 17499                           ;psect for function _DimmerLights_Initialization
 17500  1B70                     _DimmerLights_Initialization:	
 17501                           
 17502                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 17503                           
 17504                           ;incstack = 0
 17505                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17506  1B70  3001               	movlw	1
 17507  1B71  319B  2323  319B   	fcall	_setDimmerLights_Initialization
 17508                           
 17509                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 17510  1B74  319E  269C         	fcall	_DimmerIntr_Initialization
 17511  1B76  0008               	return
 17512  1B77                     __end_of_DimmerLights_Initialization:	
 17513                           
 17514                           	psect	text121
 17515  1B23                     __ptext121:	
 17516 ;; *************** function _setDimmerLights_Initialization *****************
 17517 ;; Defined at:
 17518 ;;		line 613 in file "../src/Dimmer_B1.c"
 17519 ;; Parameters:    Size  Location     Type
 17520 ;;  lights          1    wreg     unsigned char 
 17521 ;; Auto vars:     Size  Location     Type
 17522 ;;  lights          1    0[COMMON] unsigned char 
 17523 ;; Return value:  Size  Location     Type
 17524 ;;		None               void
 17525 ;; Registers used:
 17526 ;;		wreg
 17527 ;; Tracked objects:
 17528 ;;		On entry : 0/0
 17529 ;;		On exit  : 0/0
 17530 ;;		Unchanged: 0/0
 17531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;Total ram usage:        0 bytes
 17537 ;; Hardware stack levels used:    1
 17538 ;; Hardware stack levels required when called:    5
 17539 ;; This function calls:
 17540 ;;		Nothing
 17541 ;; This function is called by:
 17542 ;;		_DimmerLights_Initialization
 17543 ;; This function uses a non-reentrant model
 17544 ;;
 17545                           
 17546                           
 17547                           ;psect for function _setDimmerLights_Initialization
 17548  1B23                     _setDimmerLights_Initialization:	
 17549                           
 17550                           ;incstack = 0
 17551                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17552  1B23  0008               	return
 17553  1B24                     __end_of_setDimmerLights_Initialization:	
 17554                           
 17555                           	psect	text122
 17556  1E9C                     __ptext122:	
 17557 ;; *************** function _DimmerIntr_Initialization *****************
 17558 ;; Defined at:
 17559 ;;		line 7 in file "../src/Dimmer_B1.c"
 17560 ;; Parameters:    Size  Location     Type
 17561 ;;		None
 17562 ;; Auto vars:     Size  Location     Type
 17563 ;;		None
 17564 ;; Return value:  Size  Location     Type
 17565 ;;		None               void
 17566 ;; Registers used:
 17567 ;;		wreg
 17568 ;; Tracked objects:
 17569 ;;		On entry : 0/0
 17570 ;;		On exit  : 0/0
 17571 ;;		Unchanged: 0/0
 17572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17576 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17577 ;;Total ram usage:        1 bytes
 17578 ;; Hardware stack levels used:    1
 17579 ;; Hardware stack levels required when called:    5
 17580 ;; This function calls:
 17581 ;;		Nothing
 17582 ;; This function is called by:
 17583 ;;		_DimmerLights_Initialization
 17584 ;; This function uses a non-reentrant model
 17585 ;;
 17586                           
 17587                           
 17588                           ;psect for function _DimmerIntr_Initialization
 17589  1E9C                     _DimmerIntr_Initialization:	
 17590                           
 17591                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 17592                           
 17593                           ;incstack = 0
 17594                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17595  1E9C  3007               	movlw	7
 17596  1E9D  0020               	movlb	0	; select bank0
 17597  1E9E  00A1               	movwf	??_DimmerIntr_Initialization
 17598  1E9F  0821               	movf	??_DimmerIntr_Initialization,w
 17599  1EA0  0021               	movlb	1	; select bank1
 17600  1EA1  00BE               	movwf	(_DimmerIntr1^(0+128)+4)
 17601                           
 17602                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(65*0.78));
 17603  1EA2  3032               	movlw	50
 17604  1EA3  0020               	movlb	0	; select bank0
 17605  1EA4  00A1               	movwf	??_DimmerIntr_Initialization
 17606  1EA5  0821               	movf	??_DimmerIntr_Initialization,w
 17607  1EA6  0021               	movlb	1	; select bank1
 17608  1EA7  00C0               	movwf	(_DimmerIntr1^(0+128)+6)
 17609                           
 17610                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.78));
 17611  1EA8  3003               	movlw	3
 17612  1EA9  0020               	movlb	0	; select bank0
 17613  1EAA  00A1               	movwf	??_DimmerIntr_Initialization
 17614  1EAB  0821               	movf	??_DimmerIntr_Initialization,w
 17615  1EAC  0021               	movlb	1	; select bank1
 17616  1EAD  00C1               	movwf	(_DimmerIntr1^(0+128)+7)
 17617                           
 17618                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(65*0.78));
 17619  1EAE  3032               	movlw	50
 17620  1EAF  0020               	movlb	0	; select bank0
 17621  1EB0  00A1               	movwf	??_DimmerIntr_Initialization
 17622  1EB1  0821               	movf	??_DimmerIntr_Initialization,w
 17623  1EB2  0021               	movlb	1	; select bank1
 17624  1EB3  00BF               	movwf	(_DimmerIntr1^(0+128)+5)
 17625  1EB4  0008               	return
 17626  1EB5                     __end_of_DimmerIntr_Initialization:	
 17627                           
 17628                           	psect	text123
 17629  1B3B                     __ptext123:	
 17630 ;; *************** function _DelayOff_Main *****************
 17631 ;; Defined at:
 17632 ;;		line 41 in file "../src/DelayOff_B1.c"
 17633 ;; Parameters:    Size  Location     Type
 17634 ;;		None
 17635 ;; Auto vars:     Size  Location     Type
 17636 ;;		None
 17637 ;; Return value:  Size  Location     Type
 17638 ;;		None               void
 17639 ;; Registers used:
 17640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17641 ;; Tracked objects:
 17642 ;;		On entry : 0/0
 17643 ;;		On exit  : 0/0
 17644 ;;		Unchanged: 0/0
 17645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17650 ;;Total ram usage:        0 bytes
 17651 ;; Hardware stack levels used:    1
 17652 ;; Hardware stack levels required when called:    9
 17653 ;; This function calls:
 17654 ;;		_DlyOff_Main
 17655 ;; This function is called by:
 17656 ;;		_main
 17657 ;; This function uses a non-reentrant model
 17658 ;;
 17659                           
 17660                           
 17661                           ;psect for function _DelayOff_Main
 17662  1B3B                     _DelayOff_Main:	
 17663                           
 17664                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17665                           
 17666                           ;incstack = 0
 17667                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17668  1B3B  3001               	movlw	1
 17669  1B3C  3189  21E0         	fcall	_DlyOff_Main
 17670  1B3E  0008               	return
 17671  1B3F                     __end_of_DelayOff_Main:	
 17672                           
 17673                           	psect	text124
 17674  09E0                     __ptext124:	
 17675 ;; *************** function _DlyOff_Main *****************
 17676 ;; Defined at:
 17677 ;;		line 61 in file "../src/DelayOff_B1.c"
 17678 ;; Parameters:    Size  Location     Type
 17679 ;;  sw              1    wreg     unsigned char 
 17680 ;; Auto vars:     Size  Location     Type
 17681 ;;  sw              1   72[BANK0 ] unsigned char 
 17682 ;; Return value:  Size  Location     Type
 17683 ;;		None               void
 17684 ;; Registers used:
 17685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17686 ;; Tracked objects:
 17687 ;;		On entry : 0/0
 17688 ;;		On exit  : 0/0
 17689 ;;		Unchanged: 0/0
 17690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;Total ram usage:        3 bytes
 17696 ;; Hardware stack levels used:    1
 17697 ;; Hardware stack levels required when called:    8
 17698 ;; This function calls:
 17699 ;;		_DelayOffPointSelect
 17700 ;;		_getDimmerLights_Status
 17701 ;;		_setDimmerLights_SwOff
 17702 ;;		_setDimmerLights_SwOn
 17703 ;;		_setProductData
 17704 ;; This function is called by:
 17705 ;;		_DelayOff_Main
 17706 ;; This function uses a non-reentrant model
 17707 ;;
 17708                           
 17709                           
 17710                           ;psect for function _DlyOff_Main
 17711  09E0                     _DlyOff_Main:	
 17712                           
 17713                           ;incstack = 0
 17714                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17715                           ;DlyOff_Main@sw stored from wreg
 17716  09E0  0020               	movlb	0	; select bank0
 17717  09E1  00E8               	movwf	DlyOff_Main@sw
 17718                           
 17719                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17720  09E2  0868               	movf	DlyOff_Main@sw,w
 17721  09E3  319B  23F9  3189   	fcall	_DelayOffPointSelect
 17722                           
 17723                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17724  09E6  0021               	movlb	1	; select bank1
 17725  09E7  084D               	movf	_DelayOff^(0+128),w
 17726  09E8  0086               	movwf	6
 17727  09E9  3001               	movlw	1	; select bank2/3
 17728  09EA  0087               	movwf	7
 17729  09EB  1C81               	btfss	1,1
 17730  09EC  0008               	return
 17731                           
 17732                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17733  09ED  084D               	movf	_DelayOff^(0+128),w
 17734  09EE  3E02               	addlw	2
 17735  09EF  0086               	movwf	6
 17736  09F0  3001               	movlw	1	; select bank2/3
 17737  09F1  0087               	movwf	7
 17738  09F2  3001               	movlw	1
 17739  09F3  0781               	addwf	1,f
 17740  09F4  3141               	addfsr 1,1
 17741  09F5  1803               	skipnc
 17742  09F6  0A81               	incf	1,f
 17743                           
 17744                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17745  09F7  084D               	movf	_DelayOff^(0+128),w
 17746  09F8  3E02               	addlw	2
 17747  09F9  0086               	movwf	6
 17748  09FA  3001               	movlw	1	; select bank2/3
 17749  09FB  0087               	movwf	7
 17750  09FC  3F40               	moviw [0]fsr1
 17751  09FD  0020               	movlb	0	; select bank0
 17752  09FE  00E6               	movwf	??_DlyOff_Main
 17753  09FF  3F41               	moviw [1]fsr1
 17754  0A00  00E7               	movwf	??_DlyOff_Main+1
 17755  0A01  300B               	movlw	11
 17756  0A02  0267               	subwf	??_DlyOff_Main+1,w
 17757  0A03  30B8               	movlw	184
 17758  0A04  1903               	skipnz
 17759  0A05  0266               	subwf	??_DlyOff_Main,w
 17760  0A06  1C03               	skipc
 17761  0A07  0008               	return
 17762                           
 17763                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17764  0A08  0021               	movlb	1	; select bank1
 17765  0A09  084D               	movf	_DelayOff^(0+128),w
 17766  0A0A  3E02               	addlw	2
 17767  0A0B  0086               	movwf	6
 17768  0A0C  3001               	movlw	1	; select bank2/3
 17769  0A0D  0087               	movwf	7
 17770  0A0E  3000               	movlw	0
 17771  0A0F  3FC0               	movwi [0]fsr1
 17772  0A10  3FC1               	movwi [1]fsr1
 17773                           
 17774                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17775  0A11  3001               	movlw	1
 17776  0A12  0020               	movlb	0	; select bank0
 17777  0A13  00E6               	movwf	??_DlyOff_Main
 17778  0A14  0021               	movlb	1	; select bank1
 17779  0A15  084D               	movf	_DelayOff^(0+128),w
 17780  0A16  3E04               	addlw	4
 17781  0A17  0086               	movwf	6
 17782  0A18  3001               	movlw	1	; select bank2/3
 17783  0A19  0087               	movwf	7
 17784  0A1A  0020               	movlb	0	; select bank0
 17785  0A1B  0866               	movf	??_DlyOff_Main,w
 17786  0A1C  0781               	addwf	1,f
 17787                           
 17788                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17789  0A1D  0021               	movlb	1	; select bank1
 17790  0A1E  084D               	movf	_DelayOff^(0+128),w
 17791  0A1F  3E04               	addlw	4
 17792  0A20  0086               	movwf	6
 17793  0A21  3001               	movlw	1	; select bank2/3
 17794  0A22  0087               	movwf	7
 17795  0A23  0A4D               	incf	_DelayOff^(0+128),w
 17796  0A24  0084               	movwf	4
 17797  0A25  3001               	movlw	1	; select bank2/3
 17798  0A26  0085               	movwf	5
 17799  0A27  0800               	movf	0,w
 17800  0A28  0201               	subwf	1,w
 17801  0A29  1C03               	skipc
 17802  0A2A  0008               	return
 17803                           
 17804                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17805  0A2B  084D               	movf	_DelayOff^(0+128),w
 17806  0A2C  3E04               	addlw	4
 17807  0A2D  0086               	movwf	6
 17808  0A2E  3001               	movlw	1	; select bank2/3
 17809  0A2F  0087               	movwf	7
 17810  0A30  0181               	clrf	1
 17811                           
 17812                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17813  0A31  084D               	movf	_DelayOff^(0+128),w
 17814  0A32  0086               	movwf	6
 17815  0A33  3001               	movlw	1	; select bank2/3
 17816  0A34  0087               	movwf	7
 17817  0A35  1081               	bcf	1,1
 17818                           
 17819                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 17820  0A36  0020               	movlb	0	; select bank0
 17821  0A37  0868               	movf	DlyOff_Main@sw,w
 17822  0A38  319C  24B8  3189   	fcall	_getDimmerLights_Status
 17823  0A3B  3A01               	xorlw	1
 17824  0A3C  1D03               	skipz
 17825  0A3D  2A48               	goto	l531
 17826                           
 17827                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 17828  0A3E  0020               	movlb	0	; select bank0
 17829  0A3F  0868               	movf	DlyOff_Main@sw,w
 17830  0A40  3191  21F0  3189   	fcall	_setDimmerLights_SwOn
 17831                           
 17832                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 17833  0A43  0020               	movlb	0	; select bank0
 17834  0A44  0868               	movf	DlyOff_Main@sw,w
 17835  0A45  3192  22C8  3189   	fcall	_setDimmerLights_SwOff
 17836  0A48                     l531:	
 17837                           
 17838                           ;DelayOff_B1.c: 78: }
 17839                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 17840  0A48  0020               	movlb	0	; select bank0
 17841  0A49  01E3               	clrf	setProductData@value
 17842  0A4A  0868               	movf	DlyOff_Main@sw,w
 17843  0A4B  3E1A               	addlw	26
 17844  0A4C  319C  2411         	fcall	_setProductData
 17845  0A4E  0008               	return
 17846  0A4F                     __end_of_DlyOff_Main:	
 17847                           
 17848                           	psect	text125
 17849  1C11                     __ptext125:	
 17850 ;; *************** function _setProductData *****************
 17851 ;; Defined at:
 17852 ;;		line 645 in file "../src/Main_B1.c"
 17853 ;; Parameters:    Size  Location     Type
 17854 ;;  address         1    wreg     unsigned char 
 17855 ;;  value           1   67[BANK0 ] unsigned char 
 17856 ;; Auto vars:     Size  Location     Type
 17857 ;;  address         1   69[BANK0 ] unsigned char 
 17858 ;; Return value:  Size  Location     Type
 17859 ;;		None               void
 17860 ;; Registers used:
 17861 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17862 ;; Tracked objects:
 17863 ;;		On entry : 0/0
 17864 ;;		On exit  : 0/0
 17865 ;;		Unchanged: 0/0
 17866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17867 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;Total ram usage:        3 bytes
 17872 ;; Hardware stack levels used:    1
 17873 ;; Hardware stack levels required when called:    5
 17874 ;; This function calls:
 17875 ;;		Nothing
 17876 ;; This function is called by:
 17877 ;;		_DlyOff_Main
 17878 ;;		_setDelayOff_GO
 17879 ;;		_setDimmerLights_OnOff
 17880 ;;		_setDimmerLights_Dimming
 17881 ;;		_setTemp_Main
 17882 ;;		_setLog_Code
 17883 ;;		_setControl_Lights_Table
 17884 ;;		_setRFSW_AdjControl
 17885 ;;		_setRF_DimmerLights
 17886 ;; This function uses a non-reentrant model
 17887 ;;
 17888                           
 17889                           
 17890                           ;psect for function _setProductData
 17891  1C11                     _setProductData:	
 17892                           
 17893                           ;incstack = 0
 17894                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17895                           ;setProductData@address stored from wreg
 17896  1C11  0020               	movlb	0	; select bank0
 17897  1C12  00E5               	movwf	setProductData@address
 17898                           
 17899                           ;Main_B1.c: 646: _product.Data[address] = value;
 17900  1C13  0863               	movf	setProductData@value,w
 17901  1C14  00E4               	movwf	??_setProductData
 17902  1C15  0865               	movf	setProductData@address,w
 17903  1C16  3E20               	addlw	__product& (0+255)
 17904  1C17  0086               	movwf	6
 17905  1C18  3002               	movlw	2	; select bank4/5
 17906  1C19  0087               	movwf	7
 17907  1C1A  0864               	movf	??_setProductData,w
 17908  1C1B  0081               	movwf	1
 17909  1C1C  0008               	return
 17910  1C1D                     __end_of_setProductData:	
 17911                           
 17912                           	psect	text126
 17913  11F0                     __ptext126:	
 17914 ;; *************** function _setDimmerLights_SwOn *****************
 17915 ;; Defined at:
 17916 ;;		line 653 in file "../src/Dimmer_B1.c"
 17917 ;; Parameters:    Size  Location     Type
 17918 ;;  sw              1    wreg     unsigned char 
 17919 ;; Auto vars:     Size  Location     Type
 17920 ;;  sw              1   14[BANK0 ] unsigned char 
 17921 ;;  idle            1   15[BANK0 ] unsigned char 
 17922 ;; Return value:  Size  Location     Type
 17923 ;;		None               void
 17924 ;; Registers used:
 17925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17926 ;; Tracked objects:
 17927 ;;		On entry : 0/0
 17928 ;;		On exit  : 0/0
 17929 ;;		Unchanged: 0/0
 17930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17935 ;;Total ram usage:        2 bytes
 17936 ;; Hardware stack levels used:    1
 17937 ;; Hardware stack levels required when called:    7
 17938 ;; This function calls:
 17939 ;;		_DimmerLights_SelectPointer
 17940 ;;		_setBuz
 17941 ;; This function is called by:
 17942 ;;		_DlyOff_Main
 17943 ;;		_setControl_Lights_Table
 17944 ;;		_setRFSW_Control
 17945 ;;		_setRFSW_AdjControl
 17946 ;;		_setSw_Main
 17947 ;; This function uses a non-reentrant model
 17948 ;;
 17949                           
 17950                           
 17951                           ;psect for function _setDimmerLights_SwOn
 17952  11F0                     _setDimmerLights_SwOn:	
 17953                           
 17954                           ;incstack = 0
 17955                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17956                           ;setDimmerLights_SwOn@sw stored from wreg
 17957  11F0  0020               	movlb	0	; select bank0
 17958  11F1  00AE               	movwf	setDimmerLights_SwOn@sw
 17959                           
 17960                           ;Dimmer_B1.c: 654: char idle = 0;
 17961  11F2  01AF               	clrf	setDimmerLights_SwOn@idle
 17962                           
 17963                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 17964  11F3  082E               	movf	setDimmerLights_SwOn@sw,w
 17965  11F4  319C  2405  3191   	fcall	_DimmerLights_SelectPointer
 17966                           
 17967                           ;Dimmer_B1.c: 680: if (idle == 0) {
 17968  11F7  0020               	movlb	0	; select bank0
 17969  11F8  08AF               	movf	setDimmerLights_SwOn@idle,f
 17970  11F9  1D03               	skipz
 17971  11FA  0008               	return
 17972                           
 17973                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 17974  11FB  0021               	movlb	1	; select bank1
 17975  11FC  084F               	movf	_DimmerLights^(0+128),w
 17976  11FD  0086               	movwf	6
 17977  11FE  3001               	movlw	1	; select bank2/3
 17978  11FF  0087               	movwf	7
 17979  1200  1401               	bsf	1,0
 17980                           
 17981                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 17982  1201  0A4F               	incf	_DimmerLights^(0+128),w
 17983  1202  0086               	movwf	6
 17984  1203  3001               	movlw	1	; select bank2/3
 17985  1204  0087               	movwf	7
 17986  1205  1801               	btfsc	1,0
 17987  1206  2A17               	goto	l8248
 17988                           
 17989                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 17990  1207  0A4F               	incf	_DimmerLights^(0+128),w
 17991  1208  0086               	movwf	6
 17992  1209  3001               	movlw	1	; select bank2/3
 17993  120A  0087               	movwf	7
 17994  120B  1401               	bsf	1,0
 17995                           
 17996                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 17997  120C  084F               	movf	_DimmerLights^(0+128),w
 17998  120D  0086               	movwf	6
 17999  120E  3001               	movlw	1	; select bank2/3
 18000  120F  0087               	movwf	7
 18001  1210  1481               	bsf	1,1
 18002                           
 18003                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 18004  1211  084F               	movf	_DimmerLights^(0+128),w
 18005  1212  0086               	movwf	6
 18006  1213  3001               	movlw	1	; select bank2/3
 18007  1214  0087               	movwf	7
 18008  1215  1501               	bsf	1,2
 18009                           
 18010                           ;Dimmer_B1.c: 686: } else {
 18011  1216  2A1C               	goto	l8250
 18012  1217                     l8248:	
 18013                           
 18014                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 18015  1217  0A4F               	incf	_DimmerLights^(0+128),w
 18016  1218  0086               	movwf	6
 18017  1219  3001               	movlw	1	; select bank2/3
 18018  121A  0087               	movwf	7
 18019  121B  1001               	bcf	1,0
 18020  121C                     l8250:	
 18021                           
 18022                           ;Dimmer_B1.c: 688: }
 18023                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 18024  121C  3064               	movlw	100
 18025  121D  0020               	movlb	0	; select bank0
 18026  121E  00AA               	movwf	setBuz@time
 18027  121F  3000               	movlw	0
 18028  1220  00AB               	movwf	setBuz@time+1
 18029  1221  3001               	movlw	1
 18030  1222  3195  25BC         	fcall	_setBuz
 18031  1224  0008               	return
 18032  1225                     __end_of_setDimmerLights_SwOn:	
 18033                           
 18034                           	psect	text127
 18035  15BC                     __ptext127:	
 18036 ;; *************** function _setBuz *****************
 18037 ;; Defined at:
 18038 ;;		line 22 in file "../src/Buzzer_B1.c"
 18039 ;; Parameters:    Size  Location     Type
 18040 ;;  count           1    wreg     unsigned char 
 18041 ;;  time            2   10[BANK0 ] int 
 18042 ;; Auto vars:     Size  Location     Type
 18043 ;;  count           1   13[BANK0 ] unsigned char 
 18044 ;; Return value:  Size  Location     Type
 18045 ;;		None               void
 18046 ;; Registers used:
 18047 ;;		wreg, status,2, status,0, pclath, cstack
 18048 ;; Tracked objects:
 18049 ;;		On entry : 0/0
 18050 ;;		On exit  : 0/0
 18051 ;;		Unchanged: 0/0
 18052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18053 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18056 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18057 ;;Total ram usage:        4 bytes
 18058 ;; Hardware stack levels used:    1
 18059 ;; Hardware stack levels required when called:    6
 18060 ;; This function calls:
 18061 ;;		___awdiv
 18062 ;; This function is called by:
 18063 ;;		_setDimmerLights_SwOn
 18064 ;;		_setDimmerLights_Dimming
 18065 ;;		_my_MainTimer
 18066 ;;		_Exception_Main
 18067 ;;		_setTemp_Main
 18068 ;;		_setLog_Code
 18069 ;;		_setRFSW_Control
 18070 ;;		_setSw_Main
 18071 ;; This function uses a non-reentrant model
 18072 ;;
 18073                           
 18074                           
 18075                           ;psect for function _setBuz
 18076  15BC                     _setBuz:	
 18077                           
 18078                           ;incstack = 0
 18079                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18080                           ;setBuz@count stored from wreg
 18081  15BC  0020               	movlb	0	; select bank0
 18082  15BD  00AD               	movwf	setBuz@count
 18083                           
 18084                           ;Buzzer_B1.c: 23: time /= 20;
 18085  15BE  3014               	movlw	20
 18086  15BF  00A1               	movwf	___awdiv@divisor
 18087  15C0  3000               	movlw	0
 18088  15C1  00A2               	movwf	___awdiv@divisor+1
 18089  15C2  082B               	movf	setBuz@time+1,w
 18090  15C3  01A4               	clrf	___awdiv@dividend+1
 18091  15C4  07A4               	addwf	___awdiv@dividend+1,f
 18092  15C5  082A               	movf	setBuz@time,w
 18093  15C6  01A3               	clrf	___awdiv@dividend
 18094  15C7  07A3               	addwf	___awdiv@dividend,f
 18095  15C8  3195  2568  3195   	fcall	___awdiv
 18096  15CB  0020               	movlb	0	; select bank0
 18097  15CC  0822               	movf	?___awdiv+1,w
 18098  15CD  01AB               	clrf	setBuz@time+1
 18099  15CE  07AB               	addwf	setBuz@time+1,f
 18100  15CF  0821               	movf	?___awdiv,w
 18101  15D0  01AA               	clrf	setBuz@time
 18102  15D1  07AA               	addwf	setBuz@time,f
 18103                           
 18104                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18105  15D2  0021               	movlb	1	; select bank1
 18106  15D3  1C2E               	btfss	_Buz1^(0+128),0
 18107  15D4  0008               	return
 18108                           
 18109                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18110  15D5  18AE               	btfsc	_Buz1^(0+128),1
 18111  15D6  2DED               	goto	l86
 18112                           
 18113                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18114  15D7  14AE               	bsf	_Buz1^(0+128),1
 18115                           
 18116                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18117  15D8  01AF               	clrf	(_Buz1^(0+128)+1)
 18118  15D9  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18119                           
 18120                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18121  15DA  0020               	movlb	0	; select bank0
 18122  15DB  082D               	movf	setBuz@count,w
 18123  15DC  00AC               	movwf	??_setBuz
 18124  15DD  082C               	movf	??_setBuz,w
 18125  15DE  0021               	movlb	1	; select bank1
 18126  15DF  00B1               	movwf	(_Buz1^(0+128)+3)
 18127                           
 18128                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18129  15E0  0020               	movlb	0	; select bank0
 18130  15E1  082B               	movf	setBuz@time+1,w
 18131  15E2  0021               	movlb	1	; select bank1
 18132  15E3  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18133  15E4  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18134  15E5  0020               	movlb	0	; select bank0
 18135  15E6  082A               	movf	setBuz@time,w
 18136  15E7  0021               	movlb	1	; select bank1
 18137  15E8  01B4               	clrf	(_Buz1^(0+128)+6)
 18138  15E9  07B4               	addwf	(_Buz1^(0+128)+6),f
 18139                           
 18140                           ;Buzzer_B1.c: 30: RB3 = 1;
 18141  15EA  0020               	movlb	0	; select bank0
 18142  15EB  158D               	bsf	13,3	;volatile
 18143                           
 18144                           ;Buzzer_B1.c: 31: } else {
 18145  15EC  0008               	return
 18146  15ED                     l86:	
 18147                           
 18148                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18149  15ED  19AE               	btfsc	_Buz1^(0+128),3
 18150  15EE  2E01               	goto	l88
 18151                           
 18152                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18153  15EF  15AE               	bsf	_Buz1^(0+128),3
 18154                           
 18155                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18156  15F0  0020               	movlb	0	; select bank0
 18157  15F1  082D               	movf	setBuz@count,w
 18158  15F2  00AC               	movwf	??_setBuz
 18159  15F3  082C               	movf	??_setBuz,w
 18160  15F4  0021               	movlb	1	; select bank1
 18161  15F5  00B2               	movwf	(_Buz1^(0+128)+4)
 18162                           
 18163                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18164  15F6  0020               	movlb	0	; select bank0
 18165  15F7  082B               	movf	setBuz@time+1,w
 18166  15F8  0021               	movlb	1	; select bank1
 18167  15F9  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18168  15FA  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18169  15FB  0020               	movlb	0	; select bank0
 18170  15FC  082A               	movf	setBuz@time,w
 18171  15FD  0021               	movlb	1	; select bank1
 18172  15FE  01B6               	clrf	(_Buz1^(0+128)+8)
 18173  15FF  07B6               	addwf	(_Buz1^(0+128)+8),f
 18174                           
 18175                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18176  1600  0008               	return
 18177  1601                     l88:	
 18178  1601  1A2E               	btfsc	_Buz1^(0+128),4
 18179  1602  0008               	return
 18180                           
 18181                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18182  1603  162E               	bsf	_Buz1^(0+128),4
 18183                           
 18184                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18185  1604  0020               	movlb	0	; select bank0
 18186  1605  082D               	movf	setBuz@count,w
 18187  1606  00AC               	movwf	??_setBuz
 18188  1607  082C               	movf	??_setBuz,w
 18189  1608  0021               	movlb	1	; select bank1
 18190  1609  00B3               	movwf	(_Buz1^(0+128)+5)
 18191                           
 18192                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18193  160A  0020               	movlb	0	; select bank0
 18194  160B  082B               	movf	setBuz@time+1,w
 18195  160C  0021               	movlb	1	; select bank1
 18196  160D  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18197  160E  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18198  160F  0020               	movlb	0	; select bank0
 18199  1610  082A               	movf	setBuz@time,w
 18200  1611  0021               	movlb	1	; select bank1
 18201  1612  01B8               	clrf	(_Buz1^(0+128)+10)
 18202  1613  07B8               	addwf	(_Buz1^(0+128)+10),f
 18203  1614  0008               	return
 18204  1615                     __end_of_setBuz:	
 18205                           
 18206                           	psect	text128
 18207  1568                     __ptext128:	
 18208 ;; *************** function ___awdiv *****************
 18209 ;; Defined at:
 18210 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18211 ;; Parameters:    Size  Location     Type
 18212 ;;  divisor         2    1[BANK0 ] int 
 18213 ;;  dividend        2    3[BANK0 ] int 
 18214 ;; Auto vars:     Size  Location     Type
 18215 ;;  quotient        2    8[BANK0 ] int 
 18216 ;;  sign            1    7[BANK0 ] unsigned char 
 18217 ;;  counter         1    6[BANK0 ] unsigned char 
 18218 ;; Return value:  Size  Location     Type
 18219 ;;                  2    1[BANK0 ] int 
 18220 ;; Registers used:
 18221 ;;		wreg, status,2, status,0
 18222 ;; Tracked objects:
 18223 ;;		On entry : 0/0
 18224 ;;		On exit  : 0/0
 18225 ;;		Unchanged: 0/0
 18226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18227 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18231 ;;Total ram usage:        9 bytes
 18232 ;; Hardware stack levels used:    1
 18233 ;; Hardware stack levels required when called:    5
 18234 ;; This function calls:
 18235 ;;		Nothing
 18236 ;; This function is called by:
 18237 ;;		_setBuz
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           
 18242                           ;psect for function ___awdiv
 18243  1568                     ___awdiv:	
 18244                           
 18245                           ;incstack = 0
 18246                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18247  1568  0020               	movlb	0	; select bank0
 18248  1569  01A7               	clrf	___awdiv@sign
 18249  156A  1FA2               	btfss	___awdiv@divisor+1,7
 18250  156B  2D73               	goto	l8172
 18251  156C  09A1               	comf	___awdiv@divisor,f
 18252  156D  09A2               	comf	___awdiv@divisor+1,f
 18253  156E  0AA1               	incf	___awdiv@divisor,f
 18254  156F  1903               	skipnz
 18255  1570  0AA2               	incf	___awdiv@divisor+1,f
 18256  1571  01A7               	clrf	___awdiv@sign
 18257  1572  0AA7               	incf	___awdiv@sign,f
 18258  1573                     l8172:	
 18259  1573  1FA4               	btfss	___awdiv@dividend+1,7
 18260  1574  2D7E               	goto	l8178
 18261  1575  09A3               	comf	___awdiv@dividend,f
 18262  1576  09A4               	comf	___awdiv@dividend+1,f
 18263  1577  0AA3               	incf	___awdiv@dividend,f
 18264  1578  1903               	skipnz
 18265  1579  0AA4               	incf	___awdiv@dividend+1,f
 18266  157A  3001               	movlw	1
 18267  157B  00A5               	movwf	??___awdiv
 18268  157C  0825               	movf	??___awdiv,w
 18269  157D  06A7               	xorwf	___awdiv@sign,f
 18270  157E                     l8178:	
 18271  157E  01A8               	clrf	___awdiv@quotient
 18272  157F  01A9               	clrf	___awdiv@quotient+1
 18273  1580  0822               	movf	___awdiv@divisor+1,w
 18274  1581  0421               	iorwf	___awdiv@divisor,w
 18275  1582  1903               	skipnz
 18276  1583  2DAD               	goto	l8200
 18277  1584  01A6               	clrf	___awdiv@counter
 18278  1585  0AA6               	incf	___awdiv@counter,f
 18279  1586                     l8188:	
 18280  1586  1BA2               	btfsc	___awdiv@divisor+1,7
 18281  1587  2D92               	goto	l8190
 18282  1588  3001               	movlw	1
 18283  1589                     u8385:	
 18284  1589  35A1               	lslf	___awdiv@divisor,f
 18285  158A  0DA2               	rlf	___awdiv@divisor+1,f
 18286  158B  0B89               	decfsz	9,f
 18287  158C  2D89               	goto	u8385
 18288  158D  3001               	movlw	1
 18289  158E  00A5               	movwf	??___awdiv
 18290  158F  0825               	movf	??___awdiv,w
 18291  1590  07A6               	addwf	___awdiv@counter,f
 18292  1591  2D86               	goto	l8188
 18293  1592                     l8190:	
 18294  1592  3001               	movlw	1
 18295  1593                     u8405:	
 18296  1593  35A8               	lslf	___awdiv@quotient,f
 18297  1594  0DA9               	rlf	___awdiv@quotient+1,f
 18298  1595  0B89               	decfsz	9,f
 18299  1596  2D93               	goto	u8405
 18300  1597  0822               	movf	___awdiv@divisor+1,w
 18301  1598  0224               	subwf	___awdiv@dividend+1,w
 18302  1599  1D03               	skipz
 18303  159A  2D9D               	goto	u8415
 18304  159B  0821               	movf	___awdiv@divisor,w
 18305  159C  0223               	subwf	___awdiv@dividend,w
 18306  159D                     u8415:	
 18307  159D  1C03               	skipc
 18308  159E  2DA4               	goto	l8196
 18309  159F  0821               	movf	___awdiv@divisor,w
 18310  15A0  02A3               	subwf	___awdiv@dividend,f
 18311  15A1  0822               	movf	___awdiv@divisor+1,w
 18312  15A2  3BA4               	subwfb	___awdiv@dividend+1,f
 18313  15A3  1428               	bsf	___awdiv@quotient,0
 18314  15A4                     l8196:	
 18315  15A4  3001               	movlw	1
 18316  15A5                     u8425:	
 18317  15A5  36A2               	lsrf	___awdiv@divisor+1,f
 18318  15A6  0CA1               	rrf	___awdiv@divisor,f
 18319  15A7  0B89               	decfsz	9,f
 18320  15A8  2DA5               	goto	u8425
 18321  15A9  3001               	movlw	1
 18322  15AA  02A6               	subwf	___awdiv@counter,f
 18323  15AB  1D03               	btfss	3,2
 18324  15AC  2D92               	goto	l8190
 18325  15AD                     l8200:	
 18326  15AD  0827               	movf	___awdiv@sign,w
 18327  15AE  1903               	btfsc	3,2
 18328  15AF  2DB5               	goto	l8204
 18329  15B0  09A8               	comf	___awdiv@quotient,f
 18330  15B1  09A9               	comf	___awdiv@quotient+1,f
 18331  15B2  0AA8               	incf	___awdiv@quotient,f
 18332  15B3  1903               	skipnz
 18333  15B4  0AA9               	incf	___awdiv@quotient+1,f
 18334  15B5                     l8204:	
 18335  15B5  0829               	movf	___awdiv@quotient+1,w
 18336  15B6  01A2               	clrf	?___awdiv+1
 18337  15B7  07A2               	addwf	?___awdiv+1,f
 18338  15B8  0828               	movf	___awdiv@quotient,w
 18339  15B9  01A1               	clrf	?___awdiv
 18340  15BA  07A1               	addwf	?___awdiv,f
 18341  15BB  0008               	return
 18342  15BC                     __end_of___awdiv:	
 18343                           
 18344                           	psect	text129
 18345  12C8                     __ptext129:	
 18346 ;; *************** function _setDimmerLights_SwOff *****************
 18347 ;; Defined at:
 18348 ;;		line 694 in file "../src/Dimmer_B1.c"
 18349 ;; Parameters:    Size  Location     Type
 18350 ;;  sw              1    wreg     unsigned char 
 18351 ;; Auto vars:     Size  Location     Type
 18352 ;;  sw              1    3[BANK0 ] unsigned char 
 18353 ;; Return value:  Size  Location     Type
 18354 ;;		None               void
 18355 ;; Registers used:
 18356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18357 ;; Tracked objects:
 18358 ;;		On entry : 0/0
 18359 ;;		On exit  : 0/0
 18360 ;;		Unchanged: 0/0
 18361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18365 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18366 ;;Total ram usage:        1 bytes
 18367 ;; Hardware stack levels used:    1
 18368 ;; Hardware stack levels required when called:    6
 18369 ;; This function calls:
 18370 ;;		_DimmerLights_SelectPointer
 18371 ;; This function is called by:
 18372 ;;		_DlyOff_Main
 18373 ;;		_Exception_Main
 18374 ;;		_setControl_Lights_Table
 18375 ;;		_setRFSW_Control
 18376 ;;		_setRFSW_AdjControl
 18377 ;;		_setSw_Main
 18378 ;; This function uses a non-reentrant model
 18379 ;;
 18380                           
 18381                           
 18382                           ;psect for function _setDimmerLights_SwOff
 18383  12C8                     _setDimmerLights_SwOff:	
 18384                           
 18385                           ;incstack = 0
 18386                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18387                           ;setDimmerLights_SwOff@sw stored from wreg
 18388  12C8  0020               	movlb	0	; select bank0
 18389  12C9  00A3               	movwf	setDimmerLights_SwOff@sw
 18390                           
 18391                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 18392  12CA  0823               	movf	setDimmerLights_SwOff@sw,w
 18393  12CB  319C  2405  3192   	fcall	_DimmerLights_SelectPointer
 18394                           
 18395                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 18396  12CE  0021               	movlb	1	; select bank1
 18397  12CF  084F               	movf	_DimmerLights^(0+128),w
 18398  12D0  0086               	movwf	6
 18399  12D1  3001               	movlw	1	; select bank2/3
 18400  12D2  0087               	movwf	7
 18401  12D3  1C01               	btfss	1,0
 18402  12D4  0008               	return
 18403                           
 18404                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 18405  12D5  084F               	movf	_DimmerLights^(0+128),w
 18406  12D6  0086               	movwf	6
 18407  12D7  3001               	movlw	1	; select bank2/3
 18408  12D8  0087               	movwf	7
 18409  12D9  1001               	bcf	1,0
 18410                           
 18411                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 18412  12DA  0A4F               	incf	_DimmerLights^(0+128),w
 18413  12DB  0086               	movwf	6
 18414  12DC  3001               	movlw	1	; select bank2/3
 18415  12DD  0087               	movwf	7
 18416  12DE  1C01               	btfss	1,0
 18417  12DF  2AF6               	goto	l6020
 18418                           
 18419                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 18420  12E0  084F               	movf	_DimmerLights^(0+128),w
 18421  12E1  0086               	movwf	6
 18422  12E2  3001               	movlw	1	; select bank2/3
 18423  12E3  0087               	movwf	7
 18424  12E4  1D81               	btfss	1,3
 18425  12E5  0008               	return
 18426                           
 18427                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 18428  12E6  084F               	movf	_DimmerLights^(0+128),w
 18429  12E7  0086               	movwf	6
 18430  12E8  3001               	movlw	1	; select bank2/3
 18431  12E9  0087               	movwf	7
 18432  12EA  1181               	bcf	1,3
 18433                           
 18434                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 18435  12EB  084F               	movf	_DimmerLights^(0+128),w
 18436  12EC  0086               	movwf	6
 18437  12ED  3001               	movlw	1	; select bank2/3
 18438  12EE  0087               	movwf	7
 18439  12EF  1601               	bsf	1,4
 18440                           
 18441                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 18442  12F0  084F               	movf	_DimmerLights^(0+128),w
 18443  12F1  0086               	movwf	6
 18444  12F2  3001               	movlw	1	; select bank2/3
 18445  12F3  0087               	movwf	7
 18446  12F4  1281               	bcf	1,5
 18447                           
 18448                           ;Dimmer_B1.c: 705: }
 18449                           ;Dimmer_B1.c: 706: } else {
 18450  12F5  0008               	return
 18451  12F6                     l6020:	
 18452                           
 18453                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 18454  12F6  084F               	movf	_DimmerLights^(0+128),w
 18455  12F7  0086               	movwf	6
 18456  12F8  3001               	movlw	1	; select bank2/3
 18457  12F9  0087               	movwf	7
 18458  12FA  1481               	bsf	1,1
 18459                           
 18460                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 18461  12FB  084F               	movf	_DimmerLights^(0+128),w
 18462  12FC  0086               	movwf	6
 18463  12FD  3001               	movlw	1	; select bank2/3
 18464  12FE  0087               	movwf	7
 18465  12FF  1101               	bcf	1,2
 18466  1300  0008               	return
 18467  1301                     __end_of_setDimmerLights_SwOff:	
 18468                           
 18469                           	psect	text130
 18470  1CB8                     __ptext130:	
 18471 ;; *************** function _getDimmerLights_Status *****************
 18472 ;; Defined at:
 18473 ;;		line 1006 in file "../src/Dimmer_B1.c"
 18474 ;; Parameters:    Size  Location     Type
 18475 ;;  lights          1    wreg     unsigned char 
 18476 ;; Auto vars:     Size  Location     Type
 18477 ;;  lights          1    3[BANK0 ] unsigned char 
 18478 ;;  status          1    4[BANK0 ] unsigned char 
 18479 ;; Return value:  Size  Location     Type
 18480 ;;                  1    wreg      unsigned char 
 18481 ;; Registers used:
 18482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18483 ;; Tracked objects:
 18484 ;;		On entry : 0/0
 18485 ;;		On exit  : 0/0
 18486 ;;		Unchanged: 0/0
 18487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18491 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18492 ;;Total ram usage:        2 bytes
 18493 ;; Hardware stack levels used:    1
 18494 ;; Hardware stack levels required when called:    6
 18495 ;; This function calls:
 18496 ;;		_DimmerLights_SelectPointer
 18497 ;; This function is called by:
 18498 ;;		_DlyOff_Main
 18499 ;;		_Exception_Main
 18500 ;;		_setControl_Lights_Table
 18501 ;;		_setRFSW_Control
 18502 ;;		_setRFSW_AdjControl
 18503 ;; This function uses a non-reentrant model
 18504 ;;
 18505                           
 18506                           
 18507                           ;psect for function _getDimmerLights_Status
 18508  1CB8                     _getDimmerLights_Status:	
 18509                           
 18510                           ;incstack = 0
 18511                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18512                           ;getDimmerLights_Status@lights stored from wreg
 18513  1CB8  0020               	movlb	0	; select bank0
 18514  1CB9  00A3               	movwf	getDimmerLights_Status@lights
 18515                           
 18516                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 18517  1CBA  0823               	movf	getDimmerLights_Status@lights,w
 18518  1CBB  319C  2405         	fcall	_DimmerLights_SelectPointer
 18519                           
 18520                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 18521  1CBD  0021               	movlb	1	; select bank1
 18522  1CBE  0A4F               	incf	_DimmerLights^(0+128),w
 18523  1CBF  0086               	movwf	6
 18524  1CC0  3001               	movlw	1	; select bank2/3
 18525  1CC1  0087               	movwf	7
 18526  1CC2  3000               	movlw	0
 18527  1CC3  1801               	btfsc	1,0
 18528  1CC4  3001               	movlw	1
 18529  1CC5  0020               	movlb	0	; select bank0
 18530  1CC6  00A4               	movwf	getDimmerLights_Status@status
 18531                           
 18532                           ;Dimmer_B1.c: 1009: return status;
 18533  1CC7  0824               	movf	getDimmerLights_Status@status,w
 18534  1CC8  0008               	return
 18535  1CC9                     __end_of_getDimmerLights_Status:	
 18536                           
 18537                           	psect	text131
 18538  1C05                     __ptext131:	
 18539 ;; *************** function _DimmerLights_SelectPointer *****************
 18540 ;; Defined at:
 18541 ;;		line 576 in file "../src/Dimmer_B1.c"
 18542 ;; Parameters:    Size  Location     Type
 18543 ;;  lights          1    wreg     unsigned char 
 18544 ;; Auto vars:     Size  Location     Type
 18545 ;;  lights          1    2[BANK0 ] unsigned char 
 18546 ;; Return value:  Size  Location     Type
 18547 ;;		None               void
 18548 ;; Registers used:
 18549 ;;		wreg
 18550 ;; Tracked objects:
 18551 ;;		On entry : 0/0
 18552 ;;		On exit  : 0/0
 18553 ;;		Unchanged: 0/0
 18554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18559 ;;Total ram usage:        2 bytes
 18560 ;; Hardware stack levels used:    1
 18561 ;; Hardware stack levels required when called:    5
 18562 ;; This function calls:
 18563 ;;		Nothing
 18564 ;; This function is called by:
 18565 ;;		_setDimmerLights_SwOn
 18566 ;;		_setDimmerLights_SwOff
 18567 ;;		_setDimmerLights_DimmingOn
 18568 ;;		_setDimmerLights_Main
 18569 ;;		_getDimmerLights_Status
 18570 ;;		_setDimmerLights_DimmingRun
 18571 ;;		_setDimmerLights_Status
 18572 ;; This function uses a non-reentrant model
 18573 ;;
 18574                           
 18575                           
 18576                           ;psect for function _DimmerLights_SelectPointer
 18577  1C05                     _DimmerLights_SelectPointer:	
 18578                           
 18579                           ;incstack = 0
 18580                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18581                           ;DimmerLights_SelectPointer@lights stored from wreg
 18582  1C05  0020               	movlb	0	; select bank0
 18583  1C06  00A2               	movwf	DimmerLights_SelectPointer@lights
 18584                           
 18585                           ;Dimmer_B1.c: 578: if (lights == 1) {
 18586  1C07  0822               	movf	DimmerLights_SelectPointer@lights,w
 18587  1C08  3A01               	xorlw	1
 18588  1C09  1D03               	skipz
 18589  1C0A  0008               	return
 18590                           
 18591                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 18592  1C0B  305C               	movlw	_DimmerLights1& (0+255)
 18593  1C0C  00A1               	movwf	??_DimmerLights_SelectPointer
 18594  1C0D  0821               	movf	??_DimmerLights_SelectPointer,w
 18595  1C0E  0021               	movlb	1	; select bank1
 18596  1C0F  00CF               	movwf	_DimmerLights^(0+128)
 18597  1C10  0008               	return
 18598  1C11                     __end_of_DimmerLights_SelectPointer:	
 18599                           
 18600                           	psect	text132
 18601  1B37                     __ptext132:	
 18602 ;; *************** function _DelayOff_Initialization *****************
 18603 ;; Defined at:
 18604 ;;		line 26 in file "../src/DelayOff_B1.c"
 18605 ;; Parameters:    Size  Location     Type
 18606 ;;		None
 18607 ;; Auto vars:     Size  Location     Type
 18608 ;;		None
 18609 ;; Return value:  Size  Location     Type
 18610 ;;		None               void
 18611 ;; Registers used:
 18612 ;;		wreg, status,2, status,0, pclath, cstack
 18613 ;; Tracked objects:
 18614 ;;		On entry : 0/0
 18615 ;;		On exit  : 0/0
 18616 ;;		Unchanged: 0/0
 18617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18622 ;;Total ram usage:        0 bytes
 18623 ;; Hardware stack levels used:    1
 18624 ;; Hardware stack levels required when called:    7
 18625 ;; This function calls:
 18626 ;;		_DlyOff_Initialization
 18627 ;; This function is called by:
 18628 ;;		_main
 18629 ;; This function uses a non-reentrant model
 18630 ;;
 18631                           
 18632                           
 18633                           ;psect for function _DelayOff_Initialization
 18634  1B37                     _DelayOff_Initialization:	
 18635                           
 18636                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18637                           
 18638                           ;incstack = 0
 18639                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18640  1B37  3001               	movlw	1
 18641  1B38  319B  2364         	fcall	_DlyOff_Initialization
 18642  1B3A  0008               	return
 18643  1B3B                     __end_of_DelayOff_Initialization:	
 18644                           
 18645                           	psect	text133
 18646  1B64                     __ptext133:	
 18647 ;; *************** function _DlyOff_Initialization *****************
 18648 ;; Defined at:
 18649 ;;		line 56 in file "../src/DelayOff_B1.c"
 18650 ;; Parameters:    Size  Location     Type
 18651 ;;  sw              1    wreg     unsigned char 
 18652 ;; Auto vars:     Size  Location     Type
 18653 ;;  sw              1    3[BANK0 ] unsigned char 
 18654 ;; Return value:  Size  Location     Type
 18655 ;;		None               void
 18656 ;; Registers used:
 18657 ;;		wreg, status,2, status,0, pclath, cstack
 18658 ;; Tracked objects:
 18659 ;;		On entry : 0/0
 18660 ;;		On exit  : 0/0
 18661 ;;		Unchanged: 0/0
 18662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18666 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18667 ;;Total ram usage:        1 bytes
 18668 ;; Hardware stack levels used:    1
 18669 ;; Hardware stack levels required when called:    6
 18670 ;; This function calls:
 18671 ;;		_DelayOffPointSelect
 18672 ;; This function is called by:
 18673 ;;		_DelayOff_Initialization
 18674 ;; This function uses a non-reentrant model
 18675 ;;
 18676                           
 18677                           
 18678                           ;psect for function _DlyOff_Initialization
 18679  1B64                     _DlyOff_Initialization:	
 18680                           
 18681                           ;incstack = 0
 18682                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18683                           ;DlyOff_Initialization@sw stored from wreg
 18684  1B64  0020               	movlb	0	; select bank0
 18685  1B65  00A3               	movwf	DlyOff_Initialization@sw
 18686                           
 18687                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18688  1B66  0823               	movf	DlyOff_Initialization@sw,w
 18689  1B67  319B  23F9         	fcall	_DelayOffPointSelect
 18690  1B69  0008               	return
 18691  1B6A                     __end_of_DlyOff_Initialization:	
 18692                           
 18693                           	psect	text134
 18694  1BF9                     __ptext134:	
 18695 ;; *************** function _DelayOffPointSelect *****************
 18696 ;; Defined at:
 18697 ;;		line 7 in file "../src/DelayOff_B1.c"
 18698 ;; Parameters:    Size  Location     Type
 18699 ;;  sw              1    wreg     unsigned char 
 18700 ;; Auto vars:     Size  Location     Type
 18701 ;;  sw              1    2[BANK0 ] unsigned char 
 18702 ;; Return value:  Size  Location     Type
 18703 ;;		None               void
 18704 ;; Registers used:
 18705 ;;		wreg
 18706 ;; Tracked objects:
 18707 ;;		On entry : 0/0
 18708 ;;		On exit  : 0/0
 18709 ;;		Unchanged: 0/0
 18710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18713 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18715 ;;Total ram usage:        2 bytes
 18716 ;; Hardware stack levels used:    1
 18717 ;; Hardware stack levels required when called:    5
 18718 ;; This function calls:
 18719 ;;		Nothing
 18720 ;; This function is called by:
 18721 ;;		_DlyOff_Initialization
 18722 ;;		_DlyOff_Main
 18723 ;;		_setDelayOff_GO
 18724 ;;		_getDelayOff_GO
 18725 ;; This function uses a non-reentrant model
 18726 ;;
 18727                           
 18728                           
 18729                           ;psect for function _DelayOffPointSelect
 18730  1BF9                     _DelayOffPointSelect:	
 18731                           
 18732                           ;incstack = 0
 18733                           ; Regs used in _DelayOffPointSelect: [wreg]
 18734                           ;DelayOffPointSelect@sw stored from wreg
 18735  1BF9  0020               	movlb	0	; select bank0
 18736  1BFA  00A2               	movwf	DelayOffPointSelect@sw
 18737                           
 18738                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18739  1BFB  0822               	movf	DelayOffPointSelect@sw,w
 18740  1BFC  3A01               	xorlw	1
 18741  1BFD  1D03               	skipz
 18742  1BFE  0008               	return
 18743                           
 18744                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18745  1BFF  3064               	movlw	_DlySw1& (0+255)
 18746  1C00  00A1               	movwf	??_DelayOffPointSelect
 18747  1C01  0821               	movf	??_DelayOffPointSelect,w
 18748  1C02  0021               	movlb	1	; select bank1
 18749  1C03  00CD               	movwf	_DelayOff^(0+128)
 18750  1C04  0008               	return
 18751  1C05                     __end_of_DelayOffPointSelect:	
 18752                           
 18753                           	psect	text135
 18754  147B                     __ptext135:	
 18755 ;; *************** function _Buzzer_Main *****************
 18756 ;; Defined at:
 18757 ;;		line 46 in file "../src/Buzzer_B1.c"
 18758 ;; Parameters:    Size  Location     Type
 18759 ;;		None
 18760 ;; Auto vars:     Size  Location     Type
 18761 ;;		None
 18762 ;; Return value:  Size  Location     Type
 18763 ;;		None               void
 18764 ;; Registers used:
 18765 ;;		wreg, status,2, status,0
 18766 ;; Tracked objects:
 18767 ;;		On entry : 0/0
 18768 ;;		On exit  : 0/0
 18769 ;;		Unchanged: 0/0
 18770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18774 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18775 ;;Total ram usage:        1 bytes
 18776 ;; Hardware stack levels used:    1
 18777 ;; Hardware stack levels required when called:    5
 18778 ;; This function calls:
 18779 ;;		Nothing
 18780 ;; This function is called by:
 18781 ;;		_main
 18782 ;; This function uses a non-reentrant model
 18783 ;;
 18784                           
 18785                           
 18786                           ;psect for function _Buzzer_Main
 18787  147B                     _Buzzer_Main:	
 18788                           
 18789                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18790                           
 18791                           ;incstack = 0
 18792                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18793  147B  0021               	movlb	1	; select bank1
 18794  147C  1CAE               	btfss	_Buz1^(0+128),1
 18795  147D  0008               	return
 18796                           
 18797                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18798  147E  3001               	movlw	1
 18799  147F  07AF               	addwf	(_Buz1^(0+128)+1),f
 18800  1480  3000               	movlw	0
 18801  1481  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18802                           
 18803                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18804  1482  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18805  1483  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18806  1484  1D03               	skipz
 18807  1485  2C88               	goto	u7395
 18808  1486  0834               	movf	(_Buz1^(0+128)+6),w
 18809  1487  022F               	subwf	(_Buz1^(0+128)+1),w
 18810  1488                     u7395:	
 18811  1488  1C03               	skipc
 18812  1489  0008               	return
 18813                           
 18814                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18815  148A  01AF               	clrf	(_Buz1^(0+128)+1)
 18816  148B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18817                           
 18818                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18819  148C  12AE               	bcf	_Buz1^(0+128),5
 18820  148D  0020               	movlb	0	; select bank0
 18821  148E  1D8D               	btfss	13,3	;volatile
 18822  148F  2C92               	goto	l7536
 18823  1490  0021               	movlb	1	; select bank1
 18824  1491  16AE               	bsf	_Buz1^(0+128),5
 18825  1492                     l7536:	
 18826                           
 18827                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18828  1492  0021               	movlb	1	; select bank1
 18829  1493  1AAE               	btfsc	_Buz1^(0+128),5
 18830  1494  2CBE               	goto	l96
 18831                           
 18832                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18833  1495  08B1               	movf	(_Buz1^(0+128)+3),f
 18834  1496  1D03               	skipz
 18835  1497  2CBA               	goto	l97
 18836                           
 18837                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18838  1498  1DAE               	btfss	_Buz1^(0+128),3
 18839  1499  2CA8               	goto	l98
 18840                           
 18841                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18842  149A  11AE               	bcf	_Buz1^(0+128),3
 18843                           
 18844                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18845  149B  0832               	movf	(_Buz1^(0+128)+4),w
 18846  149C  0020               	movlb	0	; select bank0
 18847  149D  00A1               	movwf	??_Buzzer_Main
 18848  149E  0821               	movf	??_Buzzer_Main,w
 18849  149F  0021               	movlb	1	; select bank1
 18850  14A0  00B1               	movwf	(_Buz1^(0+128)+3)
 18851                           
 18852                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18853  14A1  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18854  14A2  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18855  14A3  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18856  14A4  0836               	movf	(_Buz1^(0+128)+8),w
 18857  14A5  01B4               	clrf	(_Buz1^(0+128)+6)
 18858  14A6  07B4               	addwf	(_Buz1^(0+128)+6),f
 18859                           
 18860                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18861  14A7  0008               	return
 18862  14A8                     l98:	
 18863  14A8  1E2E               	btfss	_Buz1^(0+128),4
 18864  14A9  2CB8               	goto	l100
 18865                           
 18866                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18867  14AA  122E               	bcf	_Buz1^(0+128),4
 18868                           
 18869                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18870  14AB  0833               	movf	(_Buz1^(0+128)+5),w
 18871  14AC  0020               	movlb	0	; select bank0
 18872  14AD  00A1               	movwf	??_Buzzer_Main
 18873  14AE  0821               	movf	??_Buzzer_Main,w
 18874  14AF  0021               	movlb	1	; select bank1
 18875  14B0  00B1               	movwf	(_Buz1^(0+128)+3)
 18876                           
 18877                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18878  14B1  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18879  14B2  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18880  14B3  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18881  14B4  0838               	movf	(_Buz1^(0+128)+10),w
 18882  14B5  01B4               	clrf	(_Buz1^(0+128)+6)
 18883  14B6  07B4               	addwf	(_Buz1^(0+128)+6),f
 18884                           
 18885                           ;Buzzer_B1.c: 62: } else {
 18886  14B7  0008               	return
 18887  14B8                     l100:	
 18888                           
 18889                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18890  14B8  10AE               	bcf	_Buz1^(0+128),1
 18891                           
 18892                           ;Buzzer_B1.c: 64: }
 18893                           ;Buzzer_B1.c: 65: } else {
 18894  14B9  0008               	return
 18895  14BA                     l97:	
 18896                           
 18897                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18898  14BA  16AE               	bsf	_Buz1^(0+128),5
 18899                           
 18900                           ;Buzzer_B1.c: 68: RB3 = 1;
 18901  14BB  0020               	movlb	0	; select bank0
 18902  14BC  158D               	bsf	13,3	;volatile
 18903                           
 18904                           ;Buzzer_B1.c: 69: }
 18905                           ;Buzzer_B1.c: 70: } else {
 18906  14BD  0008               	return
 18907  14BE                     l96:	
 18908                           
 18909                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18910  14BE  12AE               	bcf	_Buz1^(0+128),5
 18911                           
 18912                           ;Buzzer_B1.c: 73: RB3 = 0;
 18913  14BF  0020               	movlb	0	; select bank0
 18914  14C0  118D               	bcf	13,3	;volatile
 18915                           
 18916                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18917  14C1  3001               	movlw	1
 18918  14C2  0021               	movlb	1	; select bank1
 18919  14C3  02B1               	subwf	(_Buz1^(0+128)+3),f
 18920  14C4  0008               	return
 18921  14C5                     __end_of_Buzzer_Main:	
 18922                           
 18923                           	psect	text136
 18924  1B25                     __ptext136:	
 18925 ;; *************** function _Buzzer_Initialization *****************
 18926 ;; Defined at:
 18927 ;;		line 11 in file "../src/Buzzer_B1.c"
 18928 ;; Parameters:    Size  Location     Type
 18929 ;;		None
 18930 ;; Auto vars:     Size  Location     Type
 18931 ;;		None
 18932 ;; Return value:  Size  Location     Type
 18933 ;;		None               void
 18934 ;; Registers used:
 18935 ;;		None
 18936 ;; Tracked objects:
 18937 ;;		On entry : 0/0
 18938 ;;		On exit  : 0/0
 18939 ;;		Unchanged: 0/0
 18940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18945 ;;Total ram usage:        0 bytes
 18946 ;; Hardware stack levels used:    1
 18947 ;; Hardware stack levels required when called:    5
 18948 ;; This function calls:
 18949 ;;		Nothing
 18950 ;; This function is called by:
 18951 ;;		_main
 18952 ;; This function uses a non-reentrant model
 18953 ;;
 18954                           
 18955                           
 18956                           ;psect for function _Buzzer_Initialization
 18957  1B25                     _Buzzer_Initialization:	
 18958                           
 18959                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18960                           
 18961                           ;incstack = 0
 18962                           ; Regs used in _Buzzer_Initialization: []
 18963  1B25  0021               	movlb	1	; select bank1
 18964  1B26  142E               	bsf	_Buz1^(0+128),0
 18965  1B27  0008               	return
 18966  1B28                     __end_of_Buzzer_Initialization:	
 18967                           
 18968                           	psect	intentry
 18969  0004                     __pintentry:	
 18970 ;; *************** function _ISR *****************
 18971 ;; Defined at:
 18972 ;;		line 116 in file "../src/MCU_B1.c"
 18973 ;; Parameters:    Size  Location     Type
 18974 ;;		None
 18975 ;; Auto vars:     Size  Location     Type
 18976 ;;		None
 18977 ;; Return value:  Size  Location     Type
 18978 ;;		None               void
 18979 ;; Registers used:
 18980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18981 ;; Tracked objects:
 18982 ;;		On entry : 0/0
 18983 ;;		On exit  : 0/0
 18984 ;;		Unchanged: 0/0
 18985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18989 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18990 ;;Total ram usage:        1 bytes
 18991 ;; Hardware stack levels used:    1
 18992 ;; Hardware stack levels required when called:    4
 18993 ;; This function calls:
 18994 ;;		_IOC_ISR
 18995 ;;		_TMR1_ISR
 18996 ;; This function is called by:
 18997 ;;		Interrupt level 1
 18998 ;; This function uses a non-reentrant model
 18999 ;;
 19000                           
 19001  0004                     _ISR:	
 19002                           
 19003                           ;incstack = 0
 19004                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19005  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19006  0005  3180               	pagesel	$
 19007  0006  0020               	movlb	0	; select bank0
 19008  0007  087F               	movf	127,w
 19009  0008  00A0               	movwf	??_ISR
 19010                           
 19011                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19012  0009  0021               	movlb	1	; select bank1
 19013  000A  1C11               	btfss	17,0	;volatile
 19014  000B  2813               	goto	i1l1193
 19015  000C  0020               	movlb	0	; select bank0
 19016  000D  1C11               	btfss	17,0	;volatile
 19017  000E  2813               	goto	i1l1193
 19018                           
 19019                           ;MCU_B1.c: 126: TMR1_ISR();
 19020  000F  319F  27A5  3180   	fcall	_TMR1_ISR
 19021                           
 19022                           ;MCU_B1.c: 127: }
 19023  0012  281B               	goto	i1l1196
 19024  0013                     i1l1193:	
 19025                           
 19026                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19027  0013  198B               	btfsc	11,3	;volatile
 19028  0014  1C0B               	btfss	11,0	;volatile
 19029  0015  281B               	goto	i1l1196
 19030  0016  0027               	movlb	7	; select bank7
 19031  0017  1D16               	btfss	22,2	;volatile
 19032  0018  281B               	goto	i1l1196
 19033                           
 19034                           ;MCU_B1.c: 139: IOC_ISR();
 19035  0019  319B  239D         	fcall	_IOC_ISR
 19036  001B                     i1l1196:	
 19037                           ;MCU_B1.c: 140: }
 19038                           ;MCU_B1.c: 148: return;
 19039                           
 19040  001B  0020               	movlb	0	; select bank0
 19041  001C  0820               	movf	??_ISR,w
 19042  001D  00FF               	movwf	127
 19043  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19044  001F  0009               	retfie
 19045  0020                     __end_of_ISR:	
 19046                           
 19047                           	psect	text138
 19048  1FA5                     __ptext138:	
 19049 ;; *************** function _TMR1_ISR *****************
 19050 ;; Defined at:
 19051 ;;		line 236 in file "../src/MCU_B1.c"
 19052 ;; Parameters:    Size  Location     Type
 19053 ;;		None
 19054 ;; Auto vars:     Size  Location     Type
 19055 ;;		None
 19056 ;; Return value:  Size  Location     Type
 19057 ;;		None               void
 19058 ;; Registers used:
 19059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19060 ;; Tracked objects:
 19061 ;;		On entry : 0/0
 19062 ;;		On exit  : 0/0
 19063 ;;		Unchanged: 0/0
 19064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19069 ;;Total ram usage:        0 bytes
 19070 ;; Hardware stack levels used:    1
 19071 ;; Hardware stack levels required when called:    1
 19072 ;; This function calls:
 19073 ;;		_DimmerLights_TMR_1
 19074 ;; This function is called by:
 19075 ;;		_ISR
 19076 ;; This function uses a non-reentrant model
 19077 ;;
 19078                           
 19079                           
 19080                           ;psect for function _TMR1_ISR
 19081  1FA5                     _TMR1_ISR:	
 19082                           
 19083                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19084                           
 19085                           ;incstack = 0
 19086                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19087  1FA5  30FA               	movlw	250
 19088  1FA6  0020               	movlb	0	; select bank0
 19089  1FA7  0097               	movwf	23	;volatile
 19090                           
 19091                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19092  1FA8  3038               	movlw	56
 19093  1FA9  0096               	movwf	22	;volatile
 19094                           
 19095                           ;MCU_B1.c: 240: TMR1IF = 0;
 19096  1FAA  1011               	bcf	17,0	;volatile
 19097                           
 19098                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19099  1FAB  3188  209C  319F   	fcall	_DimmerLights_TMR_1
 19100                           
 19101                           ;MCU_B1.c: 271: Timer1.Count++;
 19102  1FAE  3001               	movlw	1
 19103  1FAF  0021               	movlb	1	; select bank1
 19104  1FB0  07C7               	addwf	(_Timer1^(0+128)+1),f
 19105  1FB1  3000               	movlw	0
 19106  1FB2  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 19107                           
 19108                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19109  1FB3  3001               	movlw	1
 19110  1FB4  3EC6               	addlw	_Timer1& (0+255)
 19111  1FB5  0086               	movwf	6
 19112  1FB6  0187               	clrf	7
 19113  1FB7  3F40               	moviw [0]fsr1
 19114  1FB8  3AC8               	xorlw	200
 19115  1FB9  1D03               	skipz
 19116  1FBA  2FBD               	goto	u749_25
 19117  1FBB  3F41               	moviw [1]fsr1
 19118  1FBC  3A00               	xorlw	0
 19119  1FBD                     u749_25:	
 19120  1FBD  1D03               	skipz
 19121  1FBE  0008               	return
 19122                           
 19123                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19124  1FBF  01C7               	clrf	(_Timer1^(0+128)+1)
 19125  1FC0  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 19126                           
 19127                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19128  1FC1  1446               	bsf	_Timer1^(0+128),0
 19129  1FC2  0008               	return
 19130  1FC3                     __end_of_TMR1_ISR:	
 19131                           
 19132                           	psect	text139
 19133  089C                     __ptext139:	
 19134 ;; *************** function _DimmerLights_TMR_1 *****************
 19135 ;; Defined at:
 19136 ;;		line 1313 in file "../src/Dimmer_B1.c"
 19137 ;; Parameters:    Size  Location     Type
 19138 ;;		None
 19139 ;; Auto vars:     Size  Location     Type
 19140 ;;  count           1    1[COMMON] unsigned char 
 19141 ;; Return value:  Size  Location     Type
 19142 ;;		None               void
 19143 ;; Registers used:
 19144 ;;		wreg, status,2, status,0
 19145 ;; Tracked objects:
 19146 ;;		On entry : 0/0
 19147 ;;		On exit  : 0/0
 19148 ;;		Unchanged: 0/0
 19149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19154 ;;Total ram usage:        2 bytes
 19155 ;; Hardware stack levels used:    1
 19156 ;; This function calls:
 19157 ;;		Nothing
 19158 ;; This function is called by:
 19159 ;;		_TMR1_ISR
 19160 ;; This function uses a non-reentrant model
 19161 ;;
 19162                           
 19163                           
 19164                           ;psect for function _DimmerLights_TMR_1
 19165  089C                     _DimmerLights_TMR_1:	
 19166                           
 19167                           ;Dimmer_B1.c: 1314: char count = 78;
 19168                           
 19169                           ;incstack = 0
 19170                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 19171  089C  304E               	movlw	78
 19172  089D  00F0               	movwf	??_DimmerLights_TMR_1
 19173  089E  0870               	movf	??_DimmerLights_TMR_1,w
 19174  089F  00F1               	movwf	DimmerLights_TMR_1@count
 19175                           
 19176                           ;Dimmer_B1.c: 1327: if (DimmerIntr1.Start == 1) {
 19177  08A0  0021               	movlb	1	; select bank1
 19178  08A1  1D3A               	btfss	_DimmerIntr1^(0+128),2
 19179  08A2  28AD               	goto	i1l7056
 19180                           
 19181                           ;Dimmer_B1.c: 1328: DimmerIntr1.Count++;
 19182  08A3  3001               	movlw	1
 19183  08A4  00F0               	movwf	??_DimmerLights_TMR_1
 19184  08A5  0870               	movf	??_DimmerLights_TMR_1,w
 19185  08A6  07BC               	addwf	(_DimmerIntr1^(0+128)+2),f
 19186                           
 19187                           ;Dimmer_B1.c: 1329: if (DimmerIntr1.Count >= count) {
 19188  08A7  0871               	movf	DimmerLights_TMR_1@count,w
 19189  08A8  023C               	subwf	(_DimmerIntr1^(0+128)+2),w
 19190  08A9  1C03               	skipc
 19191  08AA  28AD               	goto	i1l7056
 19192                           
 19193                           ;Dimmer_B1.c: 1330: DimmerIntr1.Count = 0;
 19194  08AB  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19195                           
 19196                           ;Dimmer_B1.c: 1331: DimmerIntr1.Start = 0;
 19197  08AC  113A               	bcf	_DimmerIntr1^(0+128),2
 19198  08AD                     i1l7056:	
 19199                           
 19200                           ;Dimmer_B1.c: 1333: }
 19201                           ;Dimmer_B1.c: 1334: }
 19202                           ;Dimmer_B1.c: 1338: if (DimmerIntr1.Count == 7) {
 19203  08AD  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19204  08AE  3A07               	xorlw	7
 19205  08AF  1903               	btfsc	3,2
 19206                           
 19207                           ;Dimmer_B1.c: 1341: if (DimmerIntr1.ControlStatus == 1) {
 19208  08B0  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19209  08B1  28B4               	goto	i1l7062
 19210                           
 19211                           ;Dimmer_B1.c: 1342: RB1 = 1;
 19212  08B2  0020               	movlb	0	; select bank0
 19213  08B3  148D               	bsf	13,1	;volatile
 19214  08B4                     i1l7062:	
 19215                           
 19216                           ;Dimmer_B1.c: 1344: }
 19217                           ;Dimmer_B1.c: 1345: }
 19218                           ;Dimmer_B1.c: 1349: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 19219  08B4  0021               	movlb	1	; select bank1
 19220  08B5  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19221  08B6  0643               	xorwf	(_DimmerIntr1^(0+128)+9),w
 19222  08B7  1903               	btfsc	3,2
 19223                           
 19224                           ;Dimmer_B1.c: 1352: if (DimmerIntr1.ControlStatus == 1) {
 19225  08B8  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19226  08B9  28BC               	goto	i1l7068
 19227                           
 19228                           ;Dimmer_B1.c: 1353: RB1 = 0;
 19229  08BA  0020               	movlb	0	; select bank0
 19230  08BB  108D               	bcf	13,1	;volatile
 19231  08BC                     i1l7068:	
 19232                           
 19233                           ;Dimmer_B1.c: 1355: }
 19234                           ;Dimmer_B1.c: 1356: }
 19235                           ;Dimmer_B1.c: 1360: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 19236  08BC  0021               	movlb	1	; select bank1
 19237  08BD  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19238  08BE  0644               	xorwf	(_DimmerIntr1^(0+128)+10),w
 19239  08BF  1903               	btfsc	3,2
 19240                           
 19241                           ;Dimmer_B1.c: 1363: if (DimmerIntr1.ControlStatus == 1) {
 19242  08C0  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19243  08C1  28C4               	goto	i1l7074
 19244                           
 19245                           ;Dimmer_B1.c: 1364: RB1 = 1;
 19246  08C2  0020               	movlb	0	; select bank0
 19247  08C3  148D               	bsf	13,1	;volatile
 19248  08C4                     i1l7074:	
 19249                           
 19250                           ;Dimmer_B1.c: 1366: }
 19251                           ;Dimmer_B1.c: 1367: }
 19252                           ;Dimmer_B1.c: 1384: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 19253  08C4  0021               	movlb	1	; select bank1
 19254  08C5  083C               	movf	(_DimmerIntr1^(0+128)+2),w
 19255  08C6  0645               	xorwf	(_DimmerIntr1^(0+128)+11),w
 19256  08C7  1903               	btfsc	3,2
 19257                           
 19258                           ;Dimmer_B1.c: 1386: if (DimmerIntr1.ControlStatus == 1) {
 19259  08C8  1DBA               	btfss	_DimmerIntr1^(0+128),3
 19260  08C9  28CC               	goto	i1l841
 19261                           
 19262                           ;Dimmer_B1.c: 1387: RB1 = 0;
 19263  08CA  0020               	movlb	0	; select bank0
 19264  08CB  108D               	bcf	13,1	;volatile
 19265  08CC                     i1l841:	
 19266                           
 19267                           ;Dimmer_B1.c: 1389: }
 19268                           ;Dimmer_B1.c: 1390: }
 19269                           ;Dimmer_B1.c: 1393: if (DimmerIntr1.Tune == 1) {
 19270  08CC  0021               	movlb	1	; select bank1
 19271  08CD  1CBA               	btfss	_DimmerIntr1^(0+128),1
 19272  08CE  0008               	return
 19273                           
 19274                           ;Dimmer_B1.c: 1394: DimmerIntr1.Tune = 0;
 19275  08CF  10BA               	bcf	_DimmerIntr1^(0+128),1
 19276                           
 19277                           ;Dimmer_B1.c: 1395: DimmerIntr1.TuneTime++;
 19278  08D0  3001               	movlw	1
 19279  08D1  00F0               	movwf	??_DimmerLights_TMR_1
 19280  08D2  0870               	movf	??_DimmerLights_TMR_1,w
 19281  08D3  07BD               	addwf	(_DimmerIntr1^(0+128)+3),f
 19282                           
 19283                           ;Dimmer_B1.c: 1396: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19284  08D4  083E               	movf	(_DimmerIntr1^(0+128)+4),w
 19285  08D5  023D               	subwf	(_DimmerIntr1^(0+128)+3),w
 19286  08D6  1C03               	skipc
 19287  08D7  0008               	return
 19288                           
 19289                           ;Dimmer_B1.c: 1397: DimmerIntr1.TuneTime = 0;
 19290  08D8  01BD               	clrf	(_DimmerIntr1^(0+128)+3)
 19291                           
 19292                           ;Dimmer_B1.c: 1398: if (DimmerIntr1.Dimming_Sw == 1) {
 19293  08D9  1E3A               	btfss	_DimmerIntr1^(0+128),4
 19294  08DA  28F1               	goto	i1l845
 19295                           
 19296                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Dimming_Status == 0) {
 19297  08DB  1ABA               	btfsc	_DimmerIntr1^(0+128),5
 19298  08DC  28E8               	goto	i1l7096
 19299                           
 19300                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.DimmingValue < ((char)(65*0.78))) {
 19301  08DD  3032               	movlw	50
 19302  08DE  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19303  08DF  1803               	skipnc
 19304  08E0  28E6               	goto	i1l847
 19305                           
 19306                           ;Dimmer_B1.c: 1401: DimmerIntr1.DimmingValue++;
 19307  08E1  3001               	movlw	1
 19308  08E2  00F0               	movwf	??_DimmerLights_TMR_1
 19309  08E3  0870               	movf	??_DimmerLights_TMR_1,w
 19310  08E4  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19311                           
 19312                           ;Dimmer_B1.c: 1402: } else {
 19313  08E5  0008               	return
 19314  08E6                     i1l847:	
 19315                           
 19316                           ;Dimmer_B1.c: 1403: DimmerIntr1.Dimming_Status = 1;
 19317  08E6  16BA               	bsf	_DimmerIntr1^(0+128),5
 19318                           
 19319                           ;Dimmer_B1.c: 1404: }
 19320                           ;Dimmer_B1.c: 1405: } else {
 19321  08E7  0008               	return
 19322  08E8                     i1l7096:	
 19323                           
 19324                           ;Dimmer_B1.c: 1406: if (DimmerIntr1.DimmingValue > ((char)(5*0.78))) {
 19325  08E8  3004               	movlw	4
 19326  08E9  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19327  08EA  1C03               	skipc
 19328  08EB  28EF               	goto	i1l850
 19329                           
 19330                           ;Dimmer_B1.c: 1407: DimmerIntr1.DimmingValue--;
 19331  08EC  3001               	movlw	1
 19332  08ED  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19333                           
 19334                           ;Dimmer_B1.c: 1408: } else {
 19335  08EE  0008               	return
 19336  08EF                     i1l850:	
 19337                           
 19338                           ;Dimmer_B1.c: 1409: DimmerIntr1.Dimming_Status = 0;
 19339  08EF  12BA               	bcf	_DimmerIntr1^(0+128),5
 19340                           
 19341                           ;Dimmer_B1.c: 1410: }
 19342                           ;Dimmer_B1.c: 1411: }
 19343                           ;Dimmer_B1.c: 1412: } else if (DimmerIntr1.Dimming_RF == 1) {
 19344  08F0  0008               	return
 19345  08F1                     i1l845:	
 19346  08F1  1F3A               	btfss	_DimmerIntr1^(0+128),6
 19347  08F2  0008               	return
 19348                           
 19349                           ;Dimmer_B1.c: 1413: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19350  08F3  0840               	movf	(_DimmerIntr1^(0+128)+6),w
 19351  08F4  023F               	subwf	(_DimmerIntr1^(0+128)+5),w
 19352  08F5  1803               	skipnc
 19353  08F6  28FC               	goto	i1l7104
 19354                           
 19355                           ;Dimmer_B1.c: 1414: DimmerIntr1.DimmingValue++;
 19356  08F7  3001               	movlw	1
 19357  08F8  00F0               	movwf	??_DimmerLights_TMR_1
 19358  08F9  0870               	movf	??_DimmerLights_TMR_1,w
 19359  08FA  07BF               	addwf	(_DimmerIntr1^(0+128)+5),f
 19360                           
 19361                           ;Dimmer_B1.c: 1415: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19362  08FB  0008               	return
 19363  08FC                     i1l7104:	
 19364  08FC  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19365  08FD  0240               	subwf	(_DimmerIntr1^(0+128)+6),w
 19366  08FE  1803               	skipnc
 19367  08FF  2903               	goto	i1l856
 19368                           
 19369                           ;Dimmer_B1.c: 1416: DimmerIntr1.DimmingValue--;
 19370  0900  3001               	movlw	1
 19371  0901  02BF               	subwf	(_DimmerIntr1^(0+128)+5),f
 19372                           
 19373                           ;Dimmer_B1.c: 1417: } else {
 19374  0902  0008               	return
 19375  0903                     i1l856:	
 19376                           
 19377                           ;Dimmer_B1.c: 1418: DimmerIntr1.Dimming_RF = 0;
 19378  0903  133A               	bcf	_DimmerIntr1^(0+128),6
 19379  0904  0008               	return
 19380  0905                     __end_of_DimmerLights_TMR_1:	
 19381                           
 19382                           	psect	text140
 19383  1B9D                     __ptext140:	
 19384 ;; *************** function _IOC_ISR *****************
 19385 ;; Defined at:
 19386 ;;		line 394 in file "../src/MCU_B1.c"
 19387 ;; Parameters:    Size  Location     Type
 19388 ;;		None
 19389 ;; Auto vars:     Size  Location     Type
 19390 ;;		None
 19391 ;; Return value:  Size  Location     Type
 19392 ;;		None               void
 19393 ;; Registers used:
 19394 ;;		wreg, status,2, status,0, pclath, cstack
 19395 ;; Tracked objects:
 19396 ;;		On entry : 0/0
 19397 ;;		On exit  : 0/0
 19398 ;;		Unchanged: 0/0
 19399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19404 ;;Total ram usage:        0 bytes
 19405 ;; Hardware stack levels used:    1
 19406 ;; Hardware stack levels required when called:    3
 19407 ;; This function calls:
 19408 ;;		_DimmerLights_IOC_1
 19409 ;; This function is called by:
 19410 ;;		_ISR
 19411 ;; This function uses a non-reentrant model
 19412 ;;
 19413                           
 19414                           
 19415                           ;psect for function _IOC_ISR
 19416  1B9D                     _IOC_ISR:	
 19417                           
 19418                           ;MCU_B1.c: 395: IOCBF2 = 0;
 19419                           
 19420                           ;incstack = 0
 19421                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 19422  1B9D  0027               	movlb	7	; select bank7
 19423  1B9E  1116               	bcf	22,2	;volatile
 19424                           
 19425                           ;MCU_B1.c: 396: IOCIF = 0;
 19426  1B9F  100B               	bcf	11,0	;volatile
 19427                           
 19428                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 19429  1BA0  0022               	movlb	2	; select bank2
 19430  1BA1  1C20               	btfss	_myMain^(0+256),0
 19431  1BA2  0008               	return
 19432                           
 19433                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 19434  1BA3  3193  233A         	fcall	_DimmerLights_IOC_1
 19435  1BA5  0008               	return
 19436  1BA6                     __end_of_IOC_ISR:	
 19437                           
 19438                           	psect	text141
 19439  133A                     __ptext141:	
 19440 ;; *************** function _DimmerLights_IOC_1 *****************
 19441 ;; Defined at:
 19442 ;;		line 1425 in file "../src/Dimmer_B1.c"
 19443 ;; Parameters:    Size  Location     Type
 19444 ;;		None
 19445 ;; Auto vars:     Size  Location     Type
 19446 ;;  dimming         1   13[COMMON] unsigned char 
 19447 ;;  count           1   12[COMMON] unsigned char 
 19448 ;; Return value:  Size  Location     Type
 19449 ;;		None               void
 19450 ;; Registers used:
 19451 ;;		wreg, status,2, status,0, pclath, cstack
 19452 ;; Tracked objects:
 19453 ;;		On entry : 0/0
 19454 ;;		On exit  : 0/0
 19455 ;;		Unchanged: 0/0
 19456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19458 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19459 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19460 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19461 ;;Total ram usage:        4 bytes
 19462 ;; Hardware stack levels used:    1
 19463 ;; Hardware stack levels required when called:    2
 19464 ;; This function calls:
 19465 ;;		_Division
 19466 ;; This function is called by:
 19467 ;;		_IOC_ISR
 19468 ;; This function uses a non-reentrant model
 19469 ;;
 19470                           
 19471                           
 19472                           ;psect for function _DimmerLights_IOC_1
 19473  133A                     _DimmerLights_IOC_1:	
 19474                           
 19475                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Start == 0) {
 19476                           
 19477                           ;incstack = 0
 19478                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 19479  133A  0021               	movlb	1	; select bank1
 19480  133B  193A               	btfsc	_DimmerIntr1^(0+128),2
 19481  133C  0008               	return
 19482                           
 19483                           ;Dimmer_B1.c: 1440: if (RB2 != DimmerIntr1.Status) {
 19484  133D  0E3B               	swapf	(_DimmerIntr1^(0+128)+1),w
 19485  133E  0C89               	rrf	9,f
 19486  133F  3901               	andlw	1
 19487  1340  00FA               	movwf	??_DimmerLights_IOC_1
 19488  1341  3000               	movlw	0
 19489  1342  0020               	movlb	0	; select bank0
 19490  1343  190D               	btfsc	13,2	;volatile
 19491  1344  3001               	movlw	1
 19492  1345  067A               	xorwf	??_DimmerLights_IOC_1,w
 19493  1346  1903               	skipnz
 19494  1347  0008               	return
 19495                           
 19496                           ;Dimmer_B1.c: 1441: DimmerIntr1.Start = 1;
 19497  1348  0021               	movlb	1	; select bank1
 19498  1349  153A               	bsf	_DimmerIntr1^(0+128),2
 19499                           
 19500                           ;Dimmer_B1.c: 1442: DimmerIntr1.Count = 0;
 19501  134A  01BC               	clrf	(_DimmerIntr1^(0+128)+2)
 19502                           
 19503                           ;Dimmer_B1.c: 1443: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 19504  134B  1E3A               	btfss	_DimmerIntr1^(0+128),4
 19505  134C  1B3A               	btfsc	_DimmerIntr1^(0+128),6
 19506                           
 19507                           ;Dimmer_B1.c: 1444: DimmerIntr1.Tune = 1;
 19508  134D  14BA               	bsf	_DimmerIntr1^(0+128),1
 19509                           
 19510                           ;Dimmer_B1.c: 1445: }
 19511                           ;Dimmer_B1.c: 1446: char count = 78;
 19512  134E  304E               	movlw	78
 19513  134F  00FA               	movwf	??_DimmerLights_IOC_1
 19514  1350  087A               	movf	??_DimmerLights_IOC_1,w
 19515  1351  00FC               	movwf	DimmerLights_IOC_1@count
 19516                           
 19517                           ;Dimmer_B1.c: 1447: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 19518  1352  3002               	movlw	2
 19519  1353  00FA               	movwf	??_DimmerLights_IOC_1
 19520  1354  087A               	movf	??_DimmerLights_IOC_1,w
 19521  1355  00F5               	movwf	Division@num
 19522  1356  083F               	movf	(_DimmerIntr1^(0+128)+5),w
 19523  1357  319C  247D  3193   	fcall	_Division
 19524  135A  00FB               	movwf	??_DimmerLights_IOC_1+1
 19525  135B  087B               	movf	??_DimmerLights_IOC_1+1,w
 19526  135C  00FD               	movwf	DimmerLights_IOC_1@dimming
 19527                           
 19528                           ;Dimmer_B1.c: 1448: DimmerIntr1.TuneValue2 = 7 + dimming;
 19529  135D  087D               	movf	DimmerLights_IOC_1@dimming,w
 19530  135E  3E07               	addlw	7
 19531  135F  00FA               	movwf	??_DimmerLights_IOC_1
 19532  1360  087A               	movf	??_DimmerLights_IOC_1,w
 19533  1361  0021               	movlb	1	; select bank1
 19534  1362  00C3               	movwf	(_DimmerIntr1^(0+128)+9)
 19535                           
 19536                           ;Dimmer_B1.c: 1449: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((count - (7 + 7))
      +                           - DimmerIntr1.DimmingValue);
 19537  1363  033F               	decf	(_DimmerIntr1^(0+128)+5),w
 19538  1364  3AFF               	xorlw	255
 19539  1365  0743               	addwf	(_DimmerIntr1^(0+128)+9),w
 19540  1366  077C               	addwf	DimmerLights_IOC_1@count,w
 19541  1367  3EF2               	addlw	242
 19542  1368  00FA               	movwf	??_DimmerLights_IOC_1
 19543  1369  087A               	movf	??_DimmerLights_IOC_1,w
 19544  136A  00C4               	movwf	(_DimmerIntr1^(0+128)+10)
 19545                           
 19546                           ;Dimmer_B1.c: 1450: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 19547  136B  0844               	movf	(_DimmerIntr1^(0+128)+10),w
 19548  136C  077D               	addwf	DimmerLights_IOC_1@dimming,w
 19549  136D  00FA               	movwf	??_DimmerLights_IOC_1
 19550  136E  087A               	movf	??_DimmerLights_IOC_1,w
 19551  136F  00C5               	movwf	(_DimmerIntr1^(0+128)+11)
 19552                           
 19553                           ;Dimmer_B1.c: 1456: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 19554  1370  12BB               	bcf	(_DimmerIntr1^(0+128)+1),5
 19555  1371  0020               	movlb	0	; select bank0
 19556  1372  1D0D               	btfss	13,2	;volatile
 19557  1373  0008               	return
 19558  1374  0021               	movlb	1	; select bank1
 19559  1375  16BB               	bsf	(_DimmerIntr1^(0+128)+1),5
 19560  1376  0008               	return
 19561  1377                     __end_of_DimmerLights_IOC_1:	
 19562                           
 19563                           	psect	text142
 19564  1C7D                     __ptext142:	
 19565 ;; *************** function _Division *****************
 19566 ;; Defined at:
 19567 ;;		line 1308 in file "../src/Dimmer_B1.c"
 19568 ;; Parameters:    Size  Location     Type
 19569 ;;  value           1    wreg     unsigned char 
 19570 ;;  num             1    5[COMMON] unsigned char 
 19571 ;; Auto vars:     Size  Location     Type
 19572 ;;  value           1    8[COMMON] unsigned char 
 19573 ;;  result          1    9[COMMON] unsigned char 
 19574 ;; Return value:  Size  Location     Type
 19575 ;;                  1    wreg      unsigned char 
 19576 ;; Registers used:
 19577 ;;		wreg, status,2, status,0, pclath, cstack
 19578 ;; Tracked objects:
 19579 ;;		On entry : 0/0
 19580 ;;		On exit  : 0/0
 19581 ;;		Unchanged: 0/0
 19582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19583 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19584 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19585 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19586 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19587 ;;Total ram usage:        5 bytes
 19588 ;; Hardware stack levels used:    1
 19589 ;; Hardware stack levels required when called:    1
 19590 ;; This function calls:
 19591 ;;		___lbdiv
 19592 ;; This function is called by:
 19593 ;;		_DimmerLights_IOC_1
 19594 ;; This function uses a non-reentrant model
 19595 ;;
 19596                           
 19597                           
 19598                           ;psect for function _Division
 19599  1C7D                     _Division:	
 19600                           
 19601                           ;incstack = 0
 19602                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19603                           ;Division@value stored from wreg
 19604  1C7D  00F8               	movwf	Division@value
 19605                           
 19606                           ;Dimmer_B1.c: 1309: char result = (char) (value / num);
 19607  1C7E  0875               	movf	Division@num,w
 19608  1C7F  00F6               	movwf	??_Division
 19609  1C80  0876               	movf	??_Division,w
 19610  1C81  00F0               	movwf	___lbdiv@divisor
 19611  1C82  0878               	movf	Division@value,w
 19612  1C83  3190  208C         	fcall	___lbdiv
 19613  1C85  00F7               	movwf	??_Division+1
 19614  1C86  0877               	movf	??_Division+1,w
 19615  1C87  00F9               	movwf	Division@result
 19616                           
 19617                           ;Dimmer_B1.c: 1310: return result;
 19618  1C88  0879               	movf	Division@result,w
 19619  1C89  0008               	return
 19620  1C8A                     __end_of_Division:	
 19621                           
 19622                           	psect	text143
 19623  108C                     __ptext143:	
 19624 ;; *************** function ___lbdiv *****************
 19625 ;; Defined at:
 19626 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19627 ;; Parameters:    Size  Location     Type
 19628 ;;  dividend        1    wreg     unsigned char 
 19629 ;;  divisor         1    0[COMMON] unsigned char 
 19630 ;; Auto vars:     Size  Location     Type
 19631 ;;  dividend        1    2[COMMON] unsigned char 
 19632 ;;  quotient        1    4[COMMON] unsigned char 
 19633 ;;  counter         1    3[COMMON] unsigned char 
 19634 ;; Return value:  Size  Location     Type
 19635 ;;                  1    wreg      unsigned char 
 19636 ;; Registers used:
 19637 ;;		wreg, status,2, status,0
 19638 ;; Tracked objects:
 19639 ;;		On entry : 0/0
 19640 ;;		On exit  : 0/0
 19641 ;;		Unchanged: 0/0
 19642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19643 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19644 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19646 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19647 ;;Total ram usage:        5 bytes
 19648 ;; Hardware stack levels used:    1
 19649 ;; This function calls:
 19650 ;;		Nothing
 19651 ;; This function is called by:
 19652 ;;		_Division
 19653 ;; This function uses a non-reentrant model
 19654 ;;
 19655                           
 19656                           
 19657                           ;psect for function ___lbdiv
 19658  108C                     ___lbdiv:	
 19659                           
 19660                           ;incstack = 0
 19661                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19662                           ;___lbdiv@dividend stored from wreg
 19663  108C  00F2               	movwf	___lbdiv@dividend
 19664  108D  01F4               	clrf	___lbdiv@quotient
 19665  108E  0870               	movf	___lbdiv@divisor,w
 19666  108F  1903               	btfsc	3,2
 19667  1090  28AB               	goto	i1l6542
 19668  1091  01F3               	clrf	___lbdiv@counter
 19669  1092  0AF3               	incf	___lbdiv@counter,f
 19670  1093                     i1l6530:	
 19671  1093  1BF0               	btfsc	___lbdiv@divisor,7
 19672  1094  289C               	goto	i1l6532
 19673  1095  1003               	clrc
 19674  1096  0DF0               	rlf	___lbdiv@divisor,f
 19675  1097  3001               	movlw	1
 19676  1098  00F1               	movwf	??___lbdiv
 19677  1099  0871               	movf	??___lbdiv,w
 19678  109A  07F3               	addwf	___lbdiv@counter,f
 19679  109B  2893               	goto	i1l6530
 19680  109C                     i1l6532:	
 19681  109C  1003               	clrc
 19682  109D  0DF4               	rlf	___lbdiv@quotient,f
 19683  109E  0870               	movf	___lbdiv@divisor,w
 19684  109F  0272               	subwf	___lbdiv@dividend,w
 19685  10A0  1C03               	skipc
 19686  10A1  28A6               	goto	L9
 19687  10A2  0870               	movf	___lbdiv@divisor,w
 19688  10A3  02F2               	subwf	___lbdiv@dividend,f
 19689  10A4  1474               	bsf	___lbdiv@quotient,0
 19690  10A5  1003               	clrc
 19691  10A6                     L9:	
 19692  10A6  0CF0               	rrf	___lbdiv@divisor,f
 19693  10A7  3001               	movlw	1
 19694  10A8  02F3               	subwf	___lbdiv@counter,f
 19695  10A9  1D03               	btfss	3,2
 19696  10AA  289C               	goto	i1l6532
 19697  10AB                     i1l6542:	
 19698  10AB  0874               	movf	___lbdiv@quotient,w
 19699  10AC  0008               	return
 19700  10AD                     __end_of___lbdiv:	
 19701  007E                     btemp	set	126	;btemp
 19702  007E                     pic14e$flags	set	126
 19703  007E                     wtemp	set	126
 19704  007E                     wtemp0	set	126
 19705  0080                     wtemp1	set	128
 19706  0082                     wtemp2	set	130
 19707  0084                     wtemp3	set	132
 19708  0086                     wtemp4	set	134
 19709  0088                     wtemp5	set	136
 19710  007F                     wtemp6	set	127
 19711  007E                     ttemp	set	126
 19712  007E                     ttemp0	set	126
 19713  0081                     ttemp1	set	129
 19714  0084                     ttemp2	set	132
 19715  0087                     ttemp3	set	135
 19716  007F                     ttemp4	set	127
 19717  007E                     ltemp	set	126
 19718  007E                     ltemp0	set	126
 19719  0082                     ltemp1	set	130
 19720  0086                     ltemp2	set	134
 19721  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         222
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      8      78
    BANK2            80      0      77
    BANK3            80      4      80
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights1(BANK2[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_Dimming
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  154781
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             14 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              5 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              5 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              1 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              1 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5608
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5608
                                             70 BANK0      1     1      0
                                              0 BANK1      8     8      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4278
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4278
                                             16 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      44
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     865
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     865
                                              5 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   48572
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   48572
                                              5 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44853
                                              3 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5139
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   39442
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12303
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21587
                                             70 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     155
                                              3 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              7 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              6 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              6 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              3 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2210
                                              9 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 2     2      0      25
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      1     1      0      47
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0      66
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0      66
                                              3 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     887
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     887
                                              5 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1201
                                              7 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              5 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             67 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3563
                                             14 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 1     1      0      24
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   64064
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   63766
                                              4 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   41480
                                              0 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     821
                                              3 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4474
                                             70 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      37
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              3 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   21939
                                             75 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3821
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             47 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             31 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             34 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      4     4      0      71
                                              2 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              1 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5470
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5470
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3286
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1896
                                             14 BANK0      2     2      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                             10 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      44
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      67
                                              3 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              3 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     498
                                              0 BANK0      1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      23
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     475
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  4     4      0     475
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     407
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     168      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     168      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Jan 29 15:25:50 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1ECE  
                          ___bmul@product 0023                 getMain_Lights_Count@count 0021  
                                      l86 15ED                                        l96 14BE  
                                      l88 1601                                        l97 14BA  
                                      l98 14A8                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 10F1                                        _WR 0CA9  
                            ___awdiv@sign 0027                                        _Sw 00D5  
                          setTemp_Main@AD 00EB                       ___wmul@multiplicand 0023  
                    _getDimmerLights_Line 1BC2                    __end_of_setDelayOff_GO 0D38  
                            ___ftadd@exp1 004E                              ___ftadd@exp2 004D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0834  
                    _setDimmerLights_Line 1CC9                              ___ftadd@sign 004C  
                                     l100 14B8                                       l303 1EDA  
                                     l304 1EDC                                       l235 0949  
                    _setDimmerLights_SwOn 11F0                                       l531 0A48  
                                     l347 111B                                       l259 09D4  
                                     l752 1F66                                       l683 1C97  
                                     l776 079F                                       _GIE 005F  
                                     _CRC 00CB                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00D0                                       _RC1 0071  
                                     _RB3 006B                                       _RA6 0066  
                                     _RC3 0073                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 00C9  
                                     _Cmd 00CC              getDimmerLights_Status@lights 0023  
                                     _Sw1 01E3                ??_setDimmerIntr_Dimming_RF 0022  
              ??_setDimmerIntr_Dimming_Sw 0022           setDimmerIntr_Dimming_RF@command 0021  
                __end_of_CC2500_WriteByte 1EE7                     _Buzzer_Initialization 1B25  
                         __end_of_ADC_Set 1B7E                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0024  
     __end_of_setDimmerIntr_ControlStatus 1E84               _setDimmerIntr_ControlStatus 1E6C  
                       ??_getSw_KeyStatus 0021                                      ?_ISR 0070  
                            ___ftdiv@cntr 0039                           __end_of_IOC_ISR 1BA6  
                   _setDimmerLights_OnOff 0711          setDimmerLights_DimmingRun@lights 0025  
                              Load_Main@i 0031                              ___ftdiv@sign 003E  
                                    l2102 0636                                      l1231 1255  
                                    l2106 0585                                      l2107 05D6  
                                    l2132 1C9E                                      l1245 11B6  
                                    l1254 1560                                      l1431 13B2  
                                    l1610 0082                                      l2162 0830  
                                    l1611 007E                                      l2147 0B31  
                                    l1612 0079                                      l1454 11D3  
                                    l1455 11EE                                      l2175 0AC0  
                                    l1608 01F6                                      l1618 01D2  
                                    l1459 11EA                                      l1619 01D0  
                                    l2460 1E1C                           __end_of_IOC_Set 1BE3  
                                    l1486 0710                                      l1495 1ECD  
                                    l2480 0376                                      l2482 0242  
                                    l1770 0E8B                                      l6020 12F6  
                                    l2820 16A3                                      l1781 0E83  
                                    l1776 0E00                                      l2826 16BA  
                                    l6202 10E0                                      l2659 1FCC  
                          _Load_Main$3909 002C                                      l6222 1EC7  
                                    l6150 1F24                                      l6152 1F27  
                                    l6312 1465                                      l2849 041F  
                                    l5610 1679                                      l6218 1EB8  
                                    l6322 1475                                      l6306 145C  
                                    l7202 10B8                                      l7028 1BCA  
                                    l7220 151D                                      l6156 1F2D  
                                    l6316 146C                                      l6308 145F  
                                    l7204 10BB                                      l5614 1680  
                                    l6190 1137                                      l6318 146F  
                                    l6174 1F98                                      l8200 15AD  
                                    l5624 16A8                                      l5616 168A  
                                    l5800 0431                                      l5720 1D33  
                                    l6440 1310                                      l6176 1F9E  
                                    l6280 10FE                                      l7208 10C1  
                                    l5626 16B0                                      l5618 168F  
                                    l7226 1532                                      l8204 15B5  
                                    l5804 0443                                      l5900 0F1D  
                                    l5724 1D39                                      l6188 112C  
                                    l6196 10D7                                      l6284 1104  
                                    l6612 0985                     _setDimmerLights_SwOff 12C8  
                                    l5742 07E9                                      l5814 045E  
                                    l5830 0D65                                      l8302 1785  
                                    l6454 132F                                      l6446 1319  
                                    l9102 0706                                      l6198 10DA  
                                    l6278 10FB                                      l6614 0988  
                                    l7422 1E27                                      l5824 0D4F  
                                    l6472 1D29                                      l9024 01E5  
                                    l8400 0A87                                      l8250 121C  
                                    l5754 03A8                                      l6474 1D2E  
                                    l6634 09A0                                      l6618 098E  
                                    l6562 091E                                      l8402 0AA9  
                                    l7418 1E21                                      l8172 1573  
                                    l5764 03BE                                      l5852 0DBF  
                                    l5844 0DA6                                      l5924 0C3E  
                                    l6468 1D22                                      l9060 066A  
                                    l7516 1FC6                                      l6636 09B9  
                                    l6580 094F                                      l6556 0915  
                                    l8340 0BC1                                      l8324 142A  
                                    l8404 0AAD                                      l9124 1639  
                                    l8190 1592                                      l5782 03EB  
                                    l5758 03AF                                      l5950 0C89  
                                    l5942 0C6E                                      l9054 065A  
                                    l6806 119E                                      l6590 095F  
                                    l6582 0952                                      l6558 0918  
                                    l8350 0C11                                      l8502 0AF8  
                                    l7536 1492                                      l8248 1217  
                                    l5784 03F5                                      l5776 03D8  
                                    l5952 0C92                                      l5944 0C7C  
                                    l5872 0EBE                                      l8272 0CEA  
                                    l8432 077E                                      l9072 06A1  
                                    l9064 0679                                      l6576 0930  
                                    l8336 0BBC                                      l8408 0AB1  
                                    l9128 1644                                      l8178 157E  
                                    l6674 1E39                                      l5794 0411  
                                    l5786 03FA                                      l5954 0C95  
                                    l5866 0EA8                                      l8282 0D1A  
                                    l9090 06E3                                      l9074 067C  
                                    l7618 04F5                                      l6594 0965  
                                    l6586 0958                                      l6850 1D07  
                                    l8514 0B0D                                      l7714 0B71  
                                    l7706 0B52                                      l8196 15A4  
                                    l8188 1586                                      l8364 11CE  
                                    l5796 041B                                      l5788 03FE  
                                    l5884 0EF9                                      l8460 07DB  
                                    l8428 0763                                      l9092 06BE  
                                    l9076 06A9                                      l6940 129A  
                                    l6588 095C                                      l8700 0617  
                                    l6924 1D18                                      l8374 11E5  
                                    l8366 11D7                                      l5958 0CA3  
                                    l8286 0D2E                                      l8446 07AE  
                                    l9094 06EB                                      l6942 12A6  
                                    l8390 0A50                                      l7734 0BA0  
                                    l7718 0B79                                      l7750 13E4  
                                    l5896 0F15                                      l5888 0F01  
                                    l9096 06F5                                      l6952 12C1  
                                    l8624 0E58                                      l8466 14DE  
                                    l8554 085A                                      l8714 062F  
                                    l8626 0E5A                                      l8556 0860  
                                    l8820 1F68                                      l6948 12B8  
                                    l8396 0A65                                      l8732 022C  
                                    l8636 0E6F                     _myMain_Initialization 1DC4  
                                    l8566 0888                                      l6990 1D9C  
                                    l8910 0081                                      l8398 0A6C  
                                    l8486 0AD7                                      l8638 0E70  
                                    l8568 088F                                      l8672 05D1  
                                    l8498 0AEF                                      l8594 0E11  
                                    l8932 00D7                                      l8772 02EA  
                                    l8748 0275                                      l8588 0E02  
                                    l8596 0E14                                      l8860 1391  
                                    l8926 00A5                                      l8686 05E5  
                                    l8758 02AA                                      l8782 031E  
                                    _CFGS 0CAE                                      l8964 0169  
                                    l8972 0192                                      l8892 0060  
                                    l8958 015A                                      l8968 0186  
                            __CFG_WDTE$ON 0000                                      l8978 01A2  
                                    l8988 01B8                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u4205 1685  
                                    u4225 169E                                      u5025 1DFA  
                                    u4245 16AB                                      u6025 1E66  
                                    u4275 16C1                                      _PEIE 005E  
                                    u4605 03EC                                      u4635 03FF  
                                    u4575 03D9                                      u4735 0D77  
                                    u4815 0ECA                                      u6335 129D  
                                    u5295 1121                                      u4665 0412  
                                    u4745 0D87                                      u4825 0EDA  
                                    u4755 0DA7                                      u6355 12A7  
                                    u4765 0DB6                                      u4845 0F02  
                                    u6365 12B1                                      u4775 0DC0  
                                    u4935 0C45                                      u4855 0F08  
                                    u6375 12B9                                      u7355 1FCD  
                                    u8405 1593                                      u4965 0C6F  
                                    u4885 0F1E                                      u7365 1FD2  
                                    u8415 159D                                      u4895 0F24  
                                    u9215 0E40                                      u8425 15A5  
                                    u7395 1488                                      u4995 0C8A  
                                    u9235 0E60                                      u7635 0B61  
                                    u9325 05A9                                      u7735 13D8  
                                    u8385 1589                                      u8570 1740  
                                    u8555 0CF6                                      u9355 0606  
                                    u7685 0B90                                      u8575 173E  
                                    u9615 124C                                      u9805 00A3  
                                    u9815 00D5                                      u9905 0199  
                                    u9825 0119                                      u9665 13AA  
                                    _LWLO 0CAD                                      _RSSI 00D2  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1F50                _setDimmerLights_DimmingRun 1F35  
                                    _Buz1 00AE                                      _Load 0134  
                                    _Temp 00DB                                      _main 1615  
                            ___ftpack@arg 0021                       __end_of_DlyOff_Main 0A4F  
                         __end_of_RF_Main 1B31                              ___ftpack@exp 0024  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1BEE  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0C25  
                       ___bmul@multiplier 0024                              ___ftmul@cntr 003D  
                            ___ftmul@sign 003E              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2223 0024                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0020                              ___fttol@exp1 005C  
                            ___fttol@lval 0058         setDimmerLights_DimmingRun@command 0023  
 __end_of_getDimmerLights_Allow_Condition 1E40  __size_of_getDimmerLights_Allow_Condition 0016  
       ??_getDimmerLights_Allow_Condition 0022          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1E2A                    _getDimmerLights_Status 1CB8  
                      ??_getDimmer_LoadGO 0021                          __end_of_LED_Main 1B47  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00CE  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01EC                           __end_of___awdiv 15BC  
                         __end_of___lbdiv 10AD                           __end_of___ftadd 0476  
                         __end_of___ftdiv 0DE1                           __end_of___ftneg 1BAF  
                                   u10040 06A7                                     u10045 0685  
                                   u10070 06E9                                     u10075 06C7  
                         __end_of___ftmul 0F45                           ___awdiv@divisor 0021  
                                   _T1CON 0018                           __end_of___fttol 0CAC  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 12C8  
                                   i1l841 08CC                                     i1l850 08EF  
                                   i1l845 08F1                                     i1l847 08E6  
                                   i1l856 0903                           ___awdiv@counter 0026  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0022  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1E6C  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 1736  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 16D1  
                                   _Light 00D1                          __end_of_TMR1_ISR 1FC3  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1C65                                     _getAD 10AD  
                           ___awtoft@sign 002E                             ___ftpack@sign 0025  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0021  
                        __end_of_WDT_Main 1D78               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0026                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1BD8                        Flash_Memory_Read@i 0022  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1D54                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 1736  
                         ___lbdiv@divisor 0070               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0073  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 00E5  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0021  
             ??_setDimmerLights_DimmingOn 0023                        ??_CC2500_SIDLEMode 0025  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 1C8A  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 1670  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 1B4B  
          getMain_All_LightsStatus@status 0021                        ??_setMemory_Modify 0021  
            setDimmerLights_OnOff@command 00E5                            _Exception_Main 063C  
                        ?_CC2500_WriteREG 0023                                 ??_ADC_Set 0021  
                    _setSw_Initialization 1CA8                                    ??_main 006E  
                           ___fttol@sign1 0057                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0021              ??_DimmerLights_SelectPointer 0021  
                 _setControl_Lights_Table 0A4F                            _setMemory_Data 1C41  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0023  
                              _Receive_OK 0370        setDimmerIntr_ControlStatus@command 0021  
                 _setDimmerLights_Dimming 14C5                                 ??_IOC_ISR 007E  
                               ??_IOC_Set 0021                               _DimmerIntr1 00BA  
                _getMain_All_LightsStatus 1BB8                  __size_of_setRFSW_Control 0043  
                      _RF_Timeout_Counter 1DEB                   ??_Switch_Initialization 0026  
                  ?_setDimmerLights_OnOff 00E5                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0021                         ??_getRF_KeyStatus 0021  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 09E0  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0023                     _getDimmer_Load_Status 1B95  
                               ??_WDT_Set 0021                          __end_of___awtoft 0800  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 16D1  
                _getMain_All_Error_Status 11BD                                    _IOCBF2 1CB2  
                                  i1l1193 0013                                    i1l1196 001B  
                                  i1l7104 08FC                                    i1l7062 08B4  
                                  i1l7056 08AD                                    i1l6530 1093  
                                  i1l7074 08C4                                    i1l6532 109C  
                                  i1l7068 08BC                                    i1l6542 10AB  
                                  i1l7096 08E8                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0023                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B0                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u749_25 1FBD  
                                  _IO_Set 1F01                                    _WDTCON 0097  
                    Exception_Main@i_3552 0033                        DelayTime_1us@count 0021  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0064  
           __end_of_CC2500_PowerOnInitial 1E15                                    _Dimmer 012D  
                                  _DlySw1 0164             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1D30                __end_of_Mcu_Initialization 1D66  
                     __end_of_Buzzer_Main 14C5                                    _Memory 01BE  
                                  _Timer1 00C6                                    ___bmul 1D30  
                  __end_of_Exception_Main 0711                      Exception_Main@lights 0035  
                                  ___wmul 1FC3                                 ??___awdiv 0025  
                               ??___lbdiv 0071                                 ??___ftadd 0048  
            __size_of_DelayOffPointSelect 000C                                 ??___ftdiv 0035  
                               ??___ftneg 0042                                 ??___ftmul 0035  
                               ??___fttol 0053              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0021                                 ??___lwdiv 0025  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0021  
                                  _r_data 00D9                      Exception_Main@status 002F  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1D9E  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0013  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0021          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1D8B                                    _s_data 00DA  
                  ??_setDimmerLights_SwOn 002E                                    _setLED 1301  
                                  _myMain 0120                      ??_RF_Timeout_Counter 0021  
                  __end_of_setMemory_Data 1C4D                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0028                                    _setBuz 15BC  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 0030  
             __end_of_Load_Initialization 1B2B          ??_setDimmerLights_Initialization 0021  
         ?_setDimmerLights_Initialization 0070          __end_of_setDimmerIntr_Dimming_RF 1E9C  
                 DimmerLights_TMR_1@count 0071          __end_of_setDimmerIntr_Dimming_Sw 1E56  
                   ___ftmul@f3_as_product 003A                 _setDimmerLights_DimmingOn 113C  
                Flash_Memory_Read@address 0023                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1DC4               getMain_Lights_Count@status1 0022  
             __size_of_DimmerLights_IOC_1 003D                     __end_of_SwPointSelect 1C7D  
             __size_of_DimmerLights_TMR_1 0069              __size_of_Flash_Memory_Modify 0052  
                 __size_of_LedPointSelect 000C           setDimmerIntr_Dimming_Sw@command 0021  
                      setTemp_Main@TempGO 00E6                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0022              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1E15               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0026          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 0046           getDimmerIntr_DimmingValue@value 0023  
         setDimmerIntr_DimmingValue@value 0021                                 ?_LED_Main 0070  
                              ___ftadd@f1 0042                                ___ftadd@f2 0045  
                    _getRF_KeyStatus$5295 0023                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0032                                ___ftdiv@f2 002F  
                              ___ftdiv@f3 003A                                ___ftneg@f1 003F  
                              ___awtoft@c 0029                       ___bmul@multiplicand 0021  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002F  
                              ___ftmul@f2 0032                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004F                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 106C  
                           __end_of_getAD 10CE                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0022  
               setMemory_LoopSave@command 0022                        _LED_Initialization 1B3F  
                         _getSw_KeyStatus 1D0D                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0022                           ?_setMemory_Data 0021  
        ??_getDimmerLights_PercentToValue 005D           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006C             ??_Flash_Memory_Initialization 0063  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1BCD  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01FA  
       setDimmerIntr_ControlStatus@lights 0023                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1C1D                __end_of_set_TimeoutCleared 1B64  
         setDimmerIntr_MaxmumValue@lights 0065                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1C11                      __size_of_setLED_Main 0036  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0024  
                     _Temp_Initialization 1B31                        ??_CC2500_WriteByte 0021  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 147B  
                       ??_setRFSW_Control 00E5               ?_setDimmerLights_DimmingRun 0023  
                       __end_of_Temp_Main 1B37                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002E                                ??_LED_Main 0026  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B37  
                           ??_Switch_Main 0033                            DelayTime_1us@i 0023  
                          DelayTime_1us@j 0025                      ??_LED_Initialization 0026  
                            _DimmerLights 00CF                         LedPointSelect@led 0022  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0021                    __size_of_DelayOff_Main 0004  
                    __size_of_setRF_Learn 0014                               setBuz@count 002D  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1615  
                          _getDelayOff_GO 1CDA                       _CC2500_WriteCommand 1F1B  
                    ?_Temp_Initialization 0070                                   ?___bmul 0021  
                        ??_setDelayOff_GO 0068         __end_of_DimmerIntr_Initialization 1EB5  
           ??_DimmerLights_Initialization 0022                                   ?___wmul 0021  
                              ??_TMR1_ISR 0072                             ?_setTemp_Main 0070  
                              _getLoad_AD 0B33                                ??_TMR1_Set 0021  
                              __pintentry 0004                    ??_setSw_Initialization 0025  
                              _getLoad_OK 1B85                        __size_of_setTxData 00BB  
                                 ?_setLED 0023                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B77  
                                 ?_setBuz 002A                                 ?___awtoft 0029  
                               ?___ftpack 0021                                _getTemp_AD 13B4  
      __end_of_DimmerLights_SelectPointer 1C11                _DimmerLights_SelectPointer 1C05  
                              ??_WDT_Main 0021              __end_of_setRF_Initialization 1BF9  
                      _setRFSW_AdjControl 0BA5                    __end_of_setProductData 1C1D  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 1B9D  
                                 _IOC_Set 1BD8                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006B     getDimmerLights_Allow_Condition@lights 0070  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 1225  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1EE7  
                  __size_of_CC2500_RxData 006E                    __size_of_CC2500_TxData 006D  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1B2E                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 1BE3           __end_of_setControl_Lights_Table 0AC1  
                         setRF_Main@error 00EB                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0021                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 1516                   ??_setLoad_AH_AL_Restore 0021  
                     getCmd_Status@number 0021              __end_of_CC2500_FrequencyCabr 1C71  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0023  
       __size_of_setDimmerIntr_Dimming_RF 0018         __size_of_setDimmerIntr_Dimming_Sw 0016  
                       __end_of_getBuz_GO 1CFC                 ?_setDimmerIntr_Dimming_RF 0021  
                     ??_Flash_Memory_Main 0027                 ?_setDimmerIntr_Dimming_Sw 0021  
                     ??_Flash_Memory_Read 0021                    __end_of_getDelayOff_GO 1CEB  
          __end_of_getDimmerLights_Status 1CC9                         __end_of_getRxData 0B33  
                 __end_of_getSw_KeyStatus 1D1E                  _CC2500_registers_address 1000  
                   ??_Temp_Initialization 0021                      ??_setRFSW_AdjControl 0066  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0063                                   ___awdiv 1568  
                                 ___lbdiv 108C                                   ___ftadd 0380  
                                 ___ftdiv 0D38                                   ___ftneg 1BA6  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0C25                       __end_of_Switch_Main 1B85  
                                 ___lwdiv 1291                ??_getMain_All_LightsStatus 0021  
                 ??_Buzzer_Initialization 0021                           _getRF_KeyStatus 1CFC  
                              ??___awtoft 002C                                ??___ftpack 0026  
                         __size_of_setLED 0039                      setRFSW_AdjControl@sw 0069  
                         __size_of_setBuz 0059                                   __ptext1 1377  
                                 __ptext2 1DC4                                   __ptext3 13B4  
                                 __ptext4 0B33                                   __ptext5 10AD  
                                 __ptext6 1D66                                   __ptext7 0002  
                                 __ptext8 1B34                                   __ptext9 0DE1  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0021                   ??_setDimmerLights_OnOff 00E6  
                         ?_setProductData 0063                 __end_of_Flash_Memory_Main 125B  
               __end_of_Flash_Memory_Read 1F01                   ??_setDimmerLights_SwOff 0023  
                              _setRF_Main 0565                   ??_myMain_Initialization 0021  
                           _DelayOff_Main 1B3B                         _DimmerLights_Main 1F50  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0023  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1B6A  
              __end_of_CC2500_ClearRXFIFO 1B53                  ??_setTemp_Initialization 0021  
              __end_of_CC2500_ClearTXFIFO 1B57                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00ED  
                          _LedPointSelect 1C35                           getTemp_AD@ADRES 0027  
                     _DelayOffPointSelect 1BF9                                   clrloop0 1067  
          __size_of_Switch_Initialization 0004             __end_of_Switch_Initialization 1B5F  
                    end_of_initialization 0046                 ??_DelayOff_Initialization 0024  
                       _CC2500_InitSetREG 1164                             _DelayTime_1us 1116  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 11BD  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 1B6A  
              __end_of_setRF_TransceiveGO 1D8B                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 006E                      Flash_Memory_Read@ret 0024  
                                 initloop 1B6B                                _setSw_Main 01FA  
                   CC2500_ReadByte@loop_b 0022                    setDimmerLights_SwOn@sw 002E  
                       _CC2500_ReadStatus 10F1                      Flash_Memory_Modify@i 0026  
                   _setLED_Initialization 1D42                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0025                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0972  
                           _CC2500_TxData 0905                       ??_CC2500_InitSetREG 0026  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 1516                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0021  
                            __pstringtext 1000                             _setCmd_Status 1EB5  
                     _Flash_Memory_Unlock 1BAF                       ??_CC2500_ReadStatus 0023  
                 CC2500_InitSetREG@loop_c 0029                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0025  
                 setTemp_Main@DangerValue 00E9                    setSw_Initialization@sw 0025  
               __end_of_DimmerLights_Main 1F6C                        _Mcu_Initialization 1D54  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1B4F  
                    __end_of_my_MainTimer 13B4                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1C41  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002E  
        setDimmerIntr_DimmingValue@lights 0023          getDimmerIntr_DimmingValue@lights 0022  
               __end_of_CC2500_InitSetREG 118E                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0021                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 000C                 __end_of_CC2500_ReadStatus 1116  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0023  
         getMain_All_Error_Status@command 0026                               ___ftdiv@exp 003D  
       __end_of_setDimmerLights_DimmingOn 1164                          ??_Exception_Main 002E  
                          __end_of_IO_Set 1F1B                      _setRF_Initialization 1BEE  
                      _setMemory_LoopSave 1DB1                               _Switch_Main 1B7E  
                       __size_of_LED_Main 0004                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1D0D                          ??_setMemory_Data 0022  
                             ___ftmul@exp 0039                     _CC2500_PowerOnInitial 1E00  
             ??_DimmerIntr_Initialization 0021                      ??_Mcu_Initialization 0022  
                   ??_DelayOffPointSelect 0021                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0021                 DimmerLights_IOC_1@dimming 007D  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1D42  
     __size_of_getDimmerIntr_DimmingValue 000F                      setRF_DimmerLights@on 0066  
                          __end_of___wmul 1FE1                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001E  
           __size_of_getDimmerLights_Line 000B          DimmerLights_SelectPointer@lights 0022  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0068  
                          __end_of_setLED 133A                             __pbitbssBANK0 0370  
           __size_of_setDimmerLights_Line 0011             __size_of_setDimmerLights_SwOn 0035  
                          __end_of_setBuz 1615                __end_of_DimmerLights_IOC_1 1377  
                    _CC2500_FrequencyCabr 1C65                   ??_getDimmer_Load_Status 0021  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 13F4  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 0905  
                     start_initialization 0022                           ?_LedPointSelect 0070  
                               _Load_Main 004A                               __end_of_ISR 0020  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1B8D  
                   ??_Flash_Memory_Modify 0025              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0021                __end_of_CC2500_InitPATable 2000  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0021  
                   ??_Flash_Memory_Unlock 0021                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0025    __end_of_getDimmerLights_PercentToValue 1800  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 179B  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005F                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1B5F         __end_of_setDimmerIntr_MaxmumValue 1C29  
                                ??_IO_Set 0021                  __size_of_Timeout_Counter 0016  
                               _VarErrLED 0169                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0040  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1B34                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0021                                 _Rx_Length 00D3  
                   setProductData@address 0065                       Exception_Main@count 0030  
                     Exception_Main@error 0036                                  ??___bmul 0022  
                                ??___wmul 0025                    __size_of_SwPointSelect 000C  
        __end_of_getMain_All_LightsStatus 1BC2                                 _Tx_Length 00D7  
                             __pdataBANK4 0220                                  ??_setLED 0024  
                                ?_ADC_Set 0070                                  ??_setBuz 002C  
                         ??_DelayOff_Main 0069                         ??_CC2500_ReadByte 0021  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11F0  
                        _CC2500_SIDLEMode 1B57                __size_of_DimmerLights_Main 001C  
                      setMemory_Data@data 0021                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0023                             ??_setLED_Main 0023  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002F                                 ___latbits 0003  
                        _setMemory_Modify 1D9E                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E5  
               setRF_TransceiveGO@command 0022                             __pcstackBANK3 01EC  
                    ??_set_TimeoutCleared 0021                 _DimmerIntr_Initialization 1E9C  
                         ??_DelayTime_1us 0023                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0068                         ??_CC2500_PowerRST 0027  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0022                              ??_TouchPower 0021  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0063               setDimmerLights_DimmingOn@sw 0023  
                       ??_CC2500_WriteREG 0024                             ??_setRF_Learn 0021  
                           _DimmerLights1 015C                     CC2500_WriteREG@w_addr 0025  
                   setDelayOff_GO@command 0066            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0025             __end_of_setLoad_AH_AL_Restore 1F88  
                setRFSW_AdjControl@status 0068                           ??_CC2500_TxData 0025  
                               __pnvBANK1 00ED                            getRxData@error 00E9  
             __size_of_LED_Initialization 0004                      _setRF_TimeoutCleared 1B4B  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0031  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D7  
                        ___lwdiv@dividend 0023                     DelayOffPointSelect@sw 0022  
                           _getCmd_Status 1D1E                                setBuz@time 002A  
                         ??_setCmd_Status 0022                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002B                    _setTemp_Initialization 1B24  
                               _getBuz_GO 1CEB                  ?_setDimmerLights_Dimming 006B  
     __end_of_Flash_Memory_Initialization 0565               _Flash_Memory_Initialization 0476  
                                ?___awdiv 0021                                 __ptext100 1CDA  
                               __ptext101 1D1E                                  ?___lbdiv 0070  
                               __ptext110 0C25                                 __ptext102 14C5  
                               __ptext111 1BA6                                 __ptext103 0F45  
                               __ptext120 1B70                                 __ptext112 0D38  
                               __ptext104 1D78                                 __ptext121 1B23  
                               __ptext113 0380                                 __ptext105 1736  
                               __ptext130 1CB8                                 __ptext122 1E9C  
                               __ptext114 07DE                                 __ptext106 1CC9  
                               __ptext131 1C05                                 __ptext123 1B3B  
                               __ptext115 1670                                 __ptext107 1C1D  
                               __ptext140 1B9D                                 __ptext132 1B37  
                               __ptext124 09E0                                 __ptext116 1C8A  
                               __ptext108 1E40                                 __ptext141 133A  
                               __ptext133 1B64                                 __ptext125 1C11  
                               __ptext117 1E2A                                 __ptext109 16D1  
                                ?___ftadd 0042                                 __ptext142 1C7D  
                               __ptext134 1BF9                                 __ptext126 11F0  
                               __ptext118 1B85                                 __ptext143 108C  
                               __ptext135 147B                                 __ptext127 15BC  
                               __ptext119 11BD                                 __ptext136 1B25  
                               __ptext128 1568                                 __ptext129 12C8  
                               __ptext138 1FA5                                 __ptext139 089C  
                               _getRxData 0AC1                                  ?___ftdiv 002F  
                                ?___ftneg 003F                                  ?___ftmul 002F  
                                ?___fttol 004F                     __size_of_my_MainTimer 003D  
                                ?___lwdiv 0021                   __end_of_setRFSW_Control 1437  
                        ??_setProductData 0064             __size_of_setSw_Initialization 0010  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1B28  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 1E2A                       __size_of_setSw_Main 0186  
            CC2500_ReadStatus@status_addr 0024        __end_of_getDimmerIntr_DimmingValue 1C99  
            ??_setDimmerIntr_DimmingValue 0022                _getDimmerIntr_DimmingValue 1C8A  
                  CC2500_WriteByte@loop_a 0022            __size_of_setDimmerLights_OnOff 00CD  
                               _r_address 00D8             __end_of_setDimmerLights_OnOff 07DE  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 1301              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1DD7                            __size_of_getAD 0021  
                        ___lwdiv@quotient 0026                             _SwPointSelect 1C71  
                     __end_of_setLED_Main 1291                          ??_getDelayOff_GO 0023  
                  ??_setRF_Initialization 0021               __end_of_Temp_Initialization 1B34  
                       _CC2500_rfSettings 102F                            ___wmul@product 0025  
                                _LED_Main 1B43                           SwPointSelect@sw 0022  
                               clear_ram0 1066                  CC2500_InitPATable@loop_d 0028  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1377  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 1B77  
             _DimmerLights_Initialization 1B70                        _CC2500_ClearRXFIFO 1B4F  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 1B53  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1DEB                         ??_Timeout_Counter 0021  
                              ?_getBuz_GO 0021                  setRF_DimmerLights@status 0069  
    __size_of_setDimmerIntr_ControlStatus 0018               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 118E  
                              ?_getRxData 0070                              ??_getLoad_AD 0025  
                                _TMR1_ISR 1FA5                    CC2500_InitSetREG@temp1 0027  
                  CC2500_InitSetREG@temp2 0028                              ??_getLoad_OK 0021  
                                _TMR1_Set 1C59                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1D78  
                                _RF_Count 0132                      __end_of_RF_RxDisable 1CA8  
                            ??_getTemp_AD 0025               __end_of_CC2500_WriteCommand 1F35  
                  ??_CC2500_FrequencyCabr 0027                                  _WDT_Main 1D66  
                 DlyOff_Initialization@sw 0023                     getSw_KeyStatus@status 0022  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0021  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B0  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00CD                              setSw_Main@sw 0032  
                             ??_Load_Main 0029                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0027                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 1C59                            ?_SwPointSelect 0070  
                             getAD@adcon0 0024                               getAD@adcon1 0021  
                          setLED_Main@led 0025                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 0834                     _DlyOff_Initialization 1B64  
       __size_of_getMain_All_LightsStatus 000A                      ??_CC2500_ClearRXFIFO 0025  
                                _Division 1C7D                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0025                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1E84  
             setDimmerLights_OnOff@lights 00E8                  _setDimmerIntr_Dimming_Sw 1E40  
                                _Fosc_Set 1B47                          __size_of_WDT_Set 000B  
                   setRFSW_Control@status 00E6                        __end_of_getLoad_AD 0BA5  
                      __end_of_getLoad_OK 1B8D                     _Switch_Initialization 1B5B  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0021  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 13F4                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1ECE  
                       getLoad_AD@channel 0027       __size_of_DimmerLights_SelectPointer 000C  
                    ??_setRF_TransceiveGO 0021              Flash_Memory_Initialization@i 0064  
                                _SwDetect 00D6                               ??_Temp_Main 0067  
                        getCmd_Status@cmd 0022                          setCmd_Status@cmd 0021  
                       setRFSW_Control@sw 00E7             _getMain_All_Error_Status$3540 0022  
           _getMain_All_Error_Status$3541 0024                  __end_of_getDimmer_LoadGO 1B95  
                     _Load_Initialization 1B28          ??_getDimmerLights_ValueToPercent 005D  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0024  
                            _setTemp_Main 0DE1                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 002F                                  ___awtoft 07DE  
                        ??_LedPointSelect 0021                                  ___ftpack 1670  
           __size_of_getMain_Lights_Count 000B                    getDimmer_LoadGO@loadgo 0021  
                       getTemp_AD@channel 0026                              ??_setRF_Main 00EA  
                    CC2500_WriteREG@value 0023                               _setLED_Main 125B  
              __end_of_setRF_DimmerLights 179B            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0024  
                        getDelayOff_GO@sw 0023             __end_of_getDimmer_Load_Status 1B9D  
                        setDelayOff_GO@sw 006D                           ___lwdiv@divisor 0021  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0028  
                                __ptext10 1B31                                  __ptext11 1B24  
                                __ptext20 1E56                                  __ptext12 1B7E  
                                __ptext21 1B5B                                  __ptext13 01FA  
                                __ptext30 0BA5                                  __ptext22 1CA8  
                                __ptext14 1DD7                                  __ptext31 1D9E  
                                __ptext23 1B2E                                  __ptext15 113C  
                                __ptext40 1E00                                  __ptext32 1F35  
                                __ptext24 0565                                  __ptext16 1D0D  
                                __ptext41 1B57                                  __ptext33 1CFC  
                                __ptext25 0AC1                                  __ptext17 1C71  
                                __ptext50 1F1B                                  __ptext42 1437  
                                __ptext34 1CEB                                  __ptext26 0800  
                                __ptext18 1E15                                  __ptext51 1B4B  
                                __ptext43 1164                                  __ptext35 1C99  
                                __ptext27 1DB1                                  __ptext19 1B5F  
                                __ptext60 1BD8                                  __ptext52 1DEB  
                                __ptext44 1FE1                                  __ptext36 0905  
                                __ptext28 0A4F                                  __ptext61 1B47  
                                __ptext53 1ECE                                  __ptext45 10CE  
                                __ptext37 0972                                  __ptext29 13F4  
                                __ptext70 1B28                                  __ptext62 1B77  
                                __ptext54 1B2B                                  __ptext46 1C65  
                                __ptext38 10F1                                  __ptext71 1F6C  
                                __ptext63 004A                                  __ptext55 1BEE  
                                __ptext47 1116                                  __ptext39 1F88  
                                __ptext80 1C41                                  __ptext72 1B43  
                                __ptext64 1BCD                                  __ptext56 1D54  
                                __ptext48 1B53                                  __ptext81 118E  
                                __ptext73 125B                                  __ptext65 1B95  
                                __ptext57 1BE3                                  __ptext49 1B4F  
                                __ptext90 1C35                                  __ptext82 1BAF  
                                __ptext74 1B3F                                  __ptext66 1B8D  
                                __ptext58 1C59                                  __ptext91 1E84  
                                __ptext83 1EE7                                  __ptext75 1D42  
                                __ptext67 1D8B                                  __ptext59 1F01  
                                __ptext92 1C29                                  __ptext84 063C  
                                __ptext76 1225                                  __ptext68 1FC3  
                                __ptext93 1E6C                                  __ptext85 1BC2  
                                __ptext77 1516                                  __ptext69 1291  
                                __ptext94 0CAC                                  __ptext86 1F50  
                                __ptext78 1C4D                                  __ptext95 1D30  
                                __ptext87 0834                                  __ptext79 0476  
                                __ptext96 1EB5                                  __ptext88 0711  
                                __ptext97 1BB8                                  __ptext89 1301  
                                __ptext98 179B                                  __ptext99 0E91  
                                __product 0220                   ??_setLED_Initialization 0025  
                ??_getDimmerLights_Status 0023              __end_of_getDimmerLights_Line 1BCD  
            __end_of_setDimmerLights_Main 089C              __end_of_setDimmerLights_Line 1CDA  
                      _DimmerLights_IOC_1 133A              __end_of_setDimmerLights_SwOn 1225  
                            ??_setSw_Main 0030                    ??_setRF_TimeoutCleared 0021  
            ??_setDimmerLights_DimmingRun 0024                             setLED@command 0023  
                           __size_of_main 005B                               _setRF_Learn 1DD7  
      __size_of_DimmerIntr_Initialization 0019                           ??_getCmd_Status 0021  
                      _DimmerLights_TMR_1 089C                  __end_of_CC2500_SIDLEMode 1B5B  
              setDimmerLights_Main@lights 00E9               __end_of_DelayOffPointSelect 1C05  
              CC2500_WriteCommand@command 0024                           _CC2500_ReadByte 1F88  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1FE1  
                __end_of_setMemory_Modify 1DB1                       ?_DimmerLights_IOC_1 0070  
                      __end_of_setRF_Main 063C                               ??_getBuz_GO 0023  
                     ?_DimmerLights_TMR_1 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 105E                               ??_getRxData 00E8  
                            getLoad_OK@ok 0021                __end_of_RF_Timeout_Counter 1E00  
                                main@argc 01EC                                  main@argv 01EE  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6325 0023  
     getDimmerLights_ValueToPercent@value 005F                           _CC2500_PowerRST 1437  
                __size_of_getSw_KeyStatus 0011        __end_of_setDimmerIntr_DimmingValue 1C35  
              _setDimmerIntr_DimmingValue 1C29               __end_of_Flash_Memory_Modify 1568  
                             _setLog_Code 0800               __end_of_Flash_Memory_Unlock 1BB8  
                         ??_SwPointSelect 0021                           _CC2500_WriteREG 10CE  
                      __end_of_setSw_Main 0380                     ??_Load_Initialization 0023  
                    ??_DimmerLights_IOC_1 007A           getDimmerLights_PercentToValue@i 0060  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 0371  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0021                setDimmerLights_Line@lights 0021  
                 setDimmerLights_SwOff@sw 0023               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0026  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 006A  
                         setDelayOff_GO@j 006B                           setDelayOff_GO@k 006C  
                 ??_CC2500_PowerOnInitial 002A                     setTemp_Main@SafeValue 00E7  
  __end_of_setDimmerLights_Initialization 1B24   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1B23                ?_setDimmerIntr_MaxmumValue 0063  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0021  
                  CC2500_InitPATable@temp 0027                           getLoad_AD@ADRES 002A  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1B2B  
                             getLoad_AD@i 002C                               getLoad_AD@j 0029  
                             getLoad_AD@k 0028                      _Flash_Memory_Erasing 1C4D  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D4  
                 __size_of_Exception_Main 00D5                             Division@value 0078  
         __end_of_DelayOff_Initialization 1B3B                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B3F                       ??_RF_Initialization 0022  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0CAC  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0072  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0021  
    __size_of_Flash_Memory_Initialization 00EF               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0066                     setMemory_Data@address 0023  
                   __end_of_DelayTime_1us 113C                   __end_of_CC2500_ReadByte 1FA5  
            __end_of_setSw_Initialization 1CB8                           _Timeout_Counter 1E56  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 0060  
                            _RF_RxDisable 1C99                __end_of_LED_Initialization 1B43  
          __end_of_setTemp_Initialization 1B25                               Division@num 0075  
                 setMemory_Modify@command 0022                   DimmerLights_IOC_1@count 007C  
               __end_of_RF_Initialization 1B2E                     __end_of_CC2500_RxData 09E0  
                   __end_of_CC2500_TxData 0972                     _setLoad_AH_AL_Restore 1F6C  
                 __end_of_CC2500_PowerRST 147B  
