

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Jan 16 15:11:33 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	text37,local,class=CODE,merge=1,delta=2
    52                           	psect	text38,local,class=CODE,merge=1,delta=2
    53                           	psect	text39,local,class=CODE,merge=1,delta=2
    54                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text41,local,class=CODE,merge=1,delta=2
    56                           	psect	text42,local,class=CODE,merge=1,delta=2
    57                           	psect	text43,local,class=CODE,merge=1,delta=2
    58                           	psect	text44,local,class=CODE,merge=1,delta=2
    59                           	psect	text45,local,class=CODE,merge=1,delta=2
    60                           	psect	text46,local,class=CODE,merge=1,delta=2
    61                           	psect	text47,local,class=CODE,merge=1,delta=2
    62                           	psect	text48,local,class=CODE,merge=1,delta=2
    63                           	psect	text49,local,class=CODE,merge=1,delta=2
    64                           	psect	text50,local,class=CODE,merge=1,delta=2
    65                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text52,local,class=CODE,merge=1,delta=2
    67                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text54,local,class=CODE,merge=1,delta=2
    69                           	psect	text55,local,class=CODE,merge=1,delta=2
    70                           	psect	text56,local,class=CODE,merge=1,delta=2
    71                           	psect	text57,local,class=CODE,merge=1,delta=2
    72                           	psect	text58,local,class=CODE,merge=1,delta=2
    73                           	psect	text59,local,class=CODE,merge=1,delta=2
    74                           	psect	text60,local,class=CODE,merge=1,delta=2
    75                           	psect	text61,local,class=CODE,merge=1,delta=2
    76                           	psect	text62,local,class=CODE,merge=1,delta=2
    77                           	psect	text63,local,class=CODE,merge=1,delta=2
    78                           	psect	text64,local,class=CODE,merge=1,delta=2
    79                           	psect	text65,local,class=CODE,merge=1,delta=2
    80                           	psect	text66,local,class=CODE,merge=1,delta=2
    81                           	psect	text67,local,class=CODE,merge=1,delta=2
    82                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text73,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0094                     	;# 
   140  0095                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0096                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009F                     	;# 
   149  0108                     	;# 
   150  0109                     	;# 
   151  010C                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  0185                     	;# 
   158  0186                     	;# 
   159  018C                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0095                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0096                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009F                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  0185                     	;# 
   227  0186                     	;# 
   228  018C                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0096                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009F                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0186                     	;# 
   297  018C                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0096                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009F                     	;# 
   356  0108                     	;# 
   357  0109                     	;# 
   358  010C                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0186                     	;# 
   366  018C                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  000E                     	;# 
   382  000F                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0014                     	;# 
   388  0015                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  001D                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  0081                     	;# 
   402  0085                     	;# 
   403  0086                     	;# 
   404  0087                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0096                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009F                     	;# 
   425  0108                     	;# 
   426  0109                     	;# 
   427  010C                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  010F                     	;# 
   433  0185                     	;# 
   434  0186                     	;# 
   435  018C                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  0007                     	;# 
   444  0009                     	;# 
   445  000A                     	;# 
   446  000B                     	;# 
   447  000C                     	;# 
   448  000D                     	;# 
   449  000E                     	;# 
   450  000E                     	;# 
   451  000F                     	;# 
   452  0010                     	;# 
   453  0011                     	;# 
   454  0012                     	;# 
   455  0013                     	;# 
   456  0014                     	;# 
   457  0015                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001D                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  0081                     	;# 
   471  0085                     	;# 
   472  0086                     	;# 
   473  0087                     	;# 
   474  0089                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  008F                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0095                     	;# 
   486  0095                     	;# 
   487  0096                     	;# 
   488  0096                     	;# 
   489  0098                     	;# 
   490  0099                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009F                     	;# 
   494  0108                     	;# 
   495  0109                     	;# 
   496  010C                     	;# 
   497  010C                     	;# 
   498  010D                     	;# 
   499  010D                     	;# 
   500  010E                     	;# 
   501  010F                     	;# 
   502  0185                     	;# 
   503  0186                     	;# 
   504  018C                     	;# 
   505  0000                     	;# 
   506  0001                     	;# 
   507  0002                     	;# 
   508  0003                     	;# 
   509  0004                     	;# 
   510  0005                     	;# 
   511  0006                     	;# 
   512  0007                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  000E                     	;# 
   520  000F                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0014                     	;# 
   526  0015                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001D                     	;# 
   537  001E                     	;# 
   538  001F                     	;# 
   539  0081                     	;# 
   540  0085                     	;# 
   541  0086                     	;# 
   542  0087                     	;# 
   543  0089                     	;# 
   544  008C                     	;# 
   545  008D                     	;# 
   546  008E                     	;# 
   547  008F                     	;# 
   548  0090                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0093                     	;# 
   552  0093                     	;# 
   553  0094                     	;# 
   554  0095                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0096                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009F                     	;# 
   563  0108                     	;# 
   564  0109                     	;# 
   565  010C                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0185                     	;# 
   572  0186                     	;# 
   573  018C                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  000E                     	;# 
   589  000F                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0014                     	;# 
   595  0015                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001D                     	;# 
   606  001E                     	;# 
   607  001F                     	;# 
   608  0081                     	;# 
   609  0085                     	;# 
   610  0086                     	;# 
   611  0087                     	;# 
   612  0089                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008F                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0093                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0096                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009F                     	;# 
   632  0108                     	;# 
   633  0109                     	;# 
   634  010C                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  010F                     	;# 
   640  0185                     	;# 
   641  0186                     	;# 
   642  018C                     	;# 
   643  0000                     	;# 
   644  0001                     	;# 
   645  0002                     	;# 
   646  0003                     	;# 
   647  0004                     	;# 
   648  0005                     	;# 
   649  0006                     	;# 
   650  0007                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  000E                     	;# 
   658  000F                     	;# 
   659  0010                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0014                     	;# 
   664  0015                     	;# 
   665  0015                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001B                     	;# 
   673  001C                     	;# 
   674  001D                     	;# 
   675  001E                     	;# 
   676  001F                     	;# 
   677  0081                     	;# 
   678  0085                     	;# 
   679  0086                     	;# 
   680  0087                     	;# 
   681  0089                     	;# 
   682  008C                     	;# 
   683  008D                     	;# 
   684  008E                     	;# 
   685  008F                     	;# 
   686  0090                     	;# 
   687  0091                     	;# 
   688  0092                     	;# 
   689  0093                     	;# 
   690  0093                     	;# 
   691  0094                     	;# 
   692  0095                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0096                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009F                     	;# 
   701  0108                     	;# 
   702  0109                     	;# 
   703  010C                     	;# 
   704  010C                     	;# 
   705  010D                     	;# 
   706  010D                     	;# 
   707  010E                     	;# 
   708  010F                     	;# 
   709  0185                     	;# 
   710  0186                     	;# 
   711  018C                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0096                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009F                     	;# 
   770  0108                     	;# 
   771  0109                     	;# 
   772  010C                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  010F                     	;# 
   778  0185                     	;# 
   779  0186                     	;# 
   780  018C                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000E                     	;# 
   796  000F                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  0081                     	;# 
   816  0085                     	;# 
   817  0086                     	;# 
   818  0087                     	;# 
   819  0089                     	;# 
   820  008C                     	;# 
   821  008D                     	;# 
   822  008E                     	;# 
   823  008F                     	;# 
   824  0090                     	;# 
   825  0091                     	;# 
   826  0092                     	;# 
   827  0093                     	;# 
   828  0093                     	;# 
   829  0094                     	;# 
   830  0095                     	;# 
   831  0095                     	;# 
   832  0096                     	;# 
   833  0096                     	;# 
   834  0098                     	;# 
   835  0099                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009F                     	;# 
   839  0108                     	;# 
   840  0109                     	;# 
   841  010C                     	;# 
   842  010C                     	;# 
   843  010D                     	;# 
   844  010D                     	;# 
   845  010E                     	;# 
   846  010F                     	;# 
   847  0185                     	;# 
   848  0186                     	;# 
   849  018C                     	;# 
   850  0000                     	;# 
   851  0001                     	;# 
   852  0002                     	;# 
   853  0003                     	;# 
   854  0004                     	;# 
   855  0005                     	;# 
   856  0006                     	;# 
   857  0007                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  000E                     	;# 
   865  000F                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0014                     	;# 
   871  0015                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0017                     	;# 
   875  0018                     	;# 
   876  0019                     	;# 
   877  001A                     	;# 
   878  001B                     	;# 
   879  001B                     	;# 
   880  001C                     	;# 
   881  001D                     	;# 
   882  001E                     	;# 
   883  001F                     	;# 
   884  0081                     	;# 
   885  0085                     	;# 
   886  0086                     	;# 
   887  0087                     	;# 
   888  0089                     	;# 
   889  008C                     	;# 
   890  008D                     	;# 
   891  008E                     	;# 
   892  008F                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0093                     	;# 
   898  0094                     	;# 
   899  0095                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0096                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009F                     	;# 
   908  0108                     	;# 
   909  0109                     	;# 
   910  010C                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  010F                     	;# 
   916  0185                     	;# 
   917  0186                     	;# 
   918  018C                     	;# 
   919  0000                     	;# 
   920  0001                     	;# 
   921  0002                     	;# 
   922  0003                     	;# 
   923  0004                     	;# 
   924  0005                     	;# 
   925  0006                     	;# 
   926  0007                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  000E                     	;# 
   934  000F                     	;# 
   935  0010                     	;# 
   936  0011                     	;# 
   937  0012                     	;# 
   938  0013                     	;# 
   939  0014                     	;# 
   940  0015                     	;# 
   941  0015                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001B                     	;# 
   949  001C                     	;# 
   950  001D                     	;# 
   951  001E                     	;# 
   952  001F                     	;# 
   953  0081                     	;# 
   954  0085                     	;# 
   955  0086                     	;# 
   956  0087                     	;# 
   957  0089                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  008F                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0093                     	;# 
   966  0093                     	;# 
   967  0094                     	;# 
   968  0095                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0096                     	;# 
   972  0098                     	;# 
   973  0099                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009F                     	;# 
   977  0108                     	;# 
   978  0109                     	;# 
   979  010C                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  010F                     	;# 
   985  0185                     	;# 
   986  0186                     	;# 
   987  018C                     	;# 
   988  0000                     	;# 
   989  0001                     	;# 
   990  0002                     	;# 
   991  0003                     	;# 
   992  0004                     	;# 
   993  0005                     	;# 
   994  0006                     	;# 
   995  0007                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  000E                     	;# 
  1003  000F                     	;# 
  1004  0010                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0014                     	;# 
  1009  0015                     	;# 
  1010  0015                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001B                     	;# 
  1018  001C                     	;# 
  1019  001D                     	;# 
  1020  001E                     	;# 
  1021  001F                     	;# 
  1022  0081                     	;# 
  1023  0085                     	;# 
  1024  0086                     	;# 
  1025  0087                     	;# 
  1026  0089                     	;# 
  1027  008C                     	;# 
  1028  008D                     	;# 
  1029  008E                     	;# 
  1030  008F                     	;# 
  1031  0090                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0093                     	;# 
  1036  0094                     	;# 
  1037  0095                     	;# 
  1038  0095                     	;# 
  1039  0096                     	;# 
  1040  0096                     	;# 
  1041  0098                     	;# 
  1042  0099                     	;# 
  1043  009C                     	;# 
  1044  009D                     	;# 
  1045  009F                     	;# 
  1046  0108                     	;# 
  1047  0109                     	;# 
  1048  010C                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0185                     	;# 
  1055  0186                     	;# 
  1056  018C                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  000E                     	;# 
  1072  000F                     	;# 
  1073  0010                     	;# 
  1074  0011                     	;# 
  1075  0012                     	;# 
  1076  0013                     	;# 
  1077  0014                     	;# 
  1078  0015                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0017                     	;# 
  1082  0018                     	;# 
  1083  0019                     	;# 
  1084  001A                     	;# 
  1085  001B                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001D                     	;# 
  1089  001E                     	;# 
  1090  001F                     	;# 
  1091  0081                     	;# 
  1092  0085                     	;# 
  1093  0086                     	;# 
  1094  0087                     	;# 
  1095  0089                     	;# 
  1096  008C                     	;# 
  1097  008D                     	;# 
  1098  008E                     	;# 
  1099  008F                     	;# 
  1100  0090                     	;# 
  1101  0091                     	;# 
  1102  0092                     	;# 
  1103  0093                     	;# 
  1104  0093                     	;# 
  1105  0094                     	;# 
  1106  0095                     	;# 
  1107  0095                     	;# 
  1108  0096                     	;# 
  1109  0096                     	;# 
  1110  0098                     	;# 
  1111  0099                     	;# 
  1112  009C                     	;# 
  1113  009D                     	;# 
  1114  009F                     	;# 
  1115  0108                     	;# 
  1116  0109                     	;# 
  1117  010C                     	;# 
  1118  010C                     	;# 
  1119  010D                     	;# 
  1120  010D                     	;# 
  1121  010E                     	;# 
  1122  010F                     	;# 
  1123  0185                     	;# 
  1124  0186                     	;# 
  1125  018C                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0009                     	;# 
  1135  000A                     	;# 
  1136  000B                     	;# 
  1137  000C                     	;# 
  1138  000D                     	;# 
  1139  000E                     	;# 
  1140  000E                     	;# 
  1141  000F                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  001D                     	;# 
  1158  001E                     	;# 
  1159  001F                     	;# 
  1160  0081                     	;# 
  1161  0085                     	;# 
  1162  0086                     	;# 
  1163  0087                     	;# 
  1164  0089                     	;# 
  1165  008C                     	;# 
  1166  008D                     	;# 
  1167  008E                     	;# 
  1168  008F                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0093                     	;# 
  1173  0093                     	;# 
  1174  0094                     	;# 
  1175  0095                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0096                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009F                     	;# 
  1184  0108                     	;# 
  1185  0109                     	;# 
  1186  010C                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010F                     	;# 
  1192  0185                     	;# 
  1193  0186                     	;# 
  1194  018C                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000D                     	;# 
  1208  000E                     	;# 
  1209  000E                     	;# 
  1210  000F                     	;# 
  1211  0010                     	;# 
  1212  0011                     	;# 
  1213  0012                     	;# 
  1214  0013                     	;# 
  1215  0014                     	;# 
  1216  0015                     	;# 
  1217  0015                     	;# 
  1218  0016                     	;# 
  1219  0017                     	;# 
  1220  0018                     	;# 
  1221  0019                     	;# 
  1222  001A                     	;# 
  1223  001B                     	;# 
  1224  001B                     	;# 
  1225  001C                     	;# 
  1226  001D                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  0081                     	;# 
  1230  0085                     	;# 
  1231  0086                     	;# 
  1232  0087                     	;# 
  1233  0089                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0093                     	;# 
  1243  0094                     	;# 
  1244  0095                     	;# 
  1245  0095                     	;# 
  1246  0096                     	;# 
  1247  0096                     	;# 
  1248  0098                     	;# 
  1249  0099                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009F                     	;# 
  1253  0108                     	;# 
  1254  0109                     	;# 
  1255  010C                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  010D                     	;# 
  1259  010E                     	;# 
  1260  010F                     	;# 
  1261  0185                     	;# 
  1262  0186                     	;# 
  1263  018C                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  000E                     	;# 
  1279  000F                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0013                     	;# 
  1284  0014                     	;# 
  1285  0015                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  001D                     	;# 
  1296  001E                     	;# 
  1297  001F                     	;# 
  1298  0081                     	;# 
  1299  0085                     	;# 
  1300  0086                     	;# 
  1301  0087                     	;# 
  1302  0089                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  008F                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0093                     	;# 
  1311  0093                     	;# 
  1312  0094                     	;# 
  1313  0095                     	;# 
  1314  0095                     	;# 
  1315  0096                     	;# 
  1316  0096                     	;# 
  1317  0098                     	;# 
  1318  0099                     	;# 
  1319  009C                     	;# 
  1320  009D                     	;# 
  1321  009F                     	;# 
  1322  0108                     	;# 
  1323  0109                     	;# 
  1324  010C                     	;# 
  1325  010C                     	;# 
  1326  010D                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  010F                     	;# 
  1330  0185                     	;# 
  1331  0186                     	;# 
  1332  018C                     	;# 
  1333  001F                     _ADCON0	set	31
  1334  001E                     _ADRES	set	30
  1335  0005                     _PORTA	set	5
  1336  0006                     _PORTB	set	6
  1337  0007                     _PORTC	set	7
  1338  0010                     _T1CON	set	16
  1339  000F                     _TMR1H	set	15
  1340  000E                     _TMR1L	set	14
  1341  005F                     _GIE	set	95
  1342  00F9                     _GO_nDONE	set	249
  1343  005E                     _PEIE	set	94
  1344  002E                     _RA6	set	46
  1345  002F                     _RA7	set	47
  1346  0032                     _RB2	set	50
  1347  0033                     _RB3	set	51
  1348  0034                     _RB4	set	52
  1349  0035                     _RB5	set	53
  1350  0038                     _RC0	set	56
  1351  0039                     _RC1	set	57
  1352  003C                     _RC4	set	60
  1353  003D                     _RC5	set	61
  1354  003E                     _RC6	set	62
  1355  003F                     _RC7	set	63
  1356  0060                     _TMR1IF	set	96
  1357  009F                     _ADCON1	set	159
  1358  009D                     _FVRCON	set	157
  1359  0090                     _OSCCON	set	144
  1360  0085                     _TRISA	set	133
  1361  0086                     _TRISB	set	134
  1362  0087                     _TRISC	set	135
  1363  0095                     _WPUB	set	149
  1364  0408                     _PS0	set	1032
  1365  0409                     _PS1	set	1033
  1366  040A                     _PS2	set	1034
  1367  040B                     _PSA	set	1035
  1368  0460                     _TMR1IE	set	1120
  1369  0185                     _ANSELA	set	389
  1370  0186                     _ANSELB	set	390
  1371                           
  1372                           	psect	text0
  1373  0000                     __ptext0:	
  1374                           ; #config settings
  1375                           
  1376                           
  1377                           ;psect for function _TMR1_ISR
  1378  0000                     
  1379                           	psect	cinit
  1380  0013                     start_initialization:	
  1381  0013                     __initialization:	
  1382                           
  1383                           ; Clear objects allocated to COMMON
  1384  0013  01F0               	clrf	__pbssCOMMON& (0+127)
  1385  0014  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1386  0015  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1387  0016  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1388  0017  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1389                           
  1390                           ; Clear objects allocated to BANK0
  1391  0018  1383               	bcf	3,7	;select IRP bank0
  1392  0019  3020               	movlw	low __pbssBANK0
  1393  001A  0084               	movwf	4
  1394  001B  305A               	movlw	low (__pbssBANK0+58)
  1395  001C  158A  20A3  118A   	fcall	clear_ram0
  1396                           
  1397                           ; Clear objects allocated to BANK1
  1398  001F  30A0               	movlw	low __pbssBANK1
  1399  0020  0084               	movwf	4
  1400  0021  30EF               	movlw	low (__pbssBANK1+79)
  1401  0022  158A  20A3         	fcall	clear_ram0
  1402                           
  1403                           ; Clear objects allocated to BANK2
  1404  0024  1283               	bcf	3,5	;RP0=0, select bank2
  1405  0025  1703               	bsf	3,6	;RP1=1, select bank2
  1406  0026  01A0               	clrf	__pbssBANK2& (0+127)
  1407  0027  01A1               	clrf	(__pbssBANK2+1)& (0+127)
  1408  0028  01A2               	clrf	(__pbssBANK2+2)& (0+127)
  1409  0029  01A3               	clrf	(__pbssBANK2+3)& (0+127)
  1410  002A  01A4               	clrf	(__pbssBANK2+4)& (0+127)
  1411  002B                     end_of_initialization:	
  1412                           ;End of C runtime variable initialization code
  1413                           
  1414  002B                     __end_of__initialization:	
  1415  002B  0183               	clrf	3
  1416  002C  158A  2E6E         	ljmp	_main	;jump to C main() function
  1417                           
  1418                           	psect	bssCOMMON
  1419  0070                     __pbssCOMMON:	
  1420  0070                     _Sw:	
  1421  0070                     	ds	2
  1422  0072                     _LED:	
  1423  0072                     	ds	1
  1424  0073                     _Light:	
  1425  0073                     	ds	1
  1426  0074                     _Lights:	
  1427  0074                     	ds	1
  1428                           
  1429                           	psect	bssBANK0
  1430  0020                     __pbssBANK0:	
  1431  0020                     _Buz1:	
  1432  0020                     	ds	12
  1433  002C                     _SYSC:	
  1434  002C                     	ds	5
  1435  0031                     _myMain:	
  1436  0031                     	ds	5
  1437  0036                     __CDS:	
  1438  0036                     	ds	4
  1439  003A                     _Timer1:	
  1440  003A                     	ds	3
  1441  003D                     _WDT:	
  1442  003D                     	ds	2
  1443  003F                     _Cmd:	
  1444  003F                     	ds	1
  1445  0040                     _LightsControl:	
  1446  0040                     	ds	1
  1447  0041                     _SwDetect:	
  1448  0041                     	ds	1
  1449  0042                     _Temp:	
  1450  0042                     	ds	6
  1451  0048                     _Lights1:	
  1452  0048                     	ds	5
  1453  004D                     _Lights2:	
  1454  004D                     	ds	5
  1455  0052                     _VarErrLED:	
  1456  0052                     	ds	4
  1457  0056                     _VarLED1:	
  1458  0056                     	ds	4
  1459                           
  1460                           	psect	bssBANK1
  1461  00A0                     __pbssBANK1:	
  1462  00A0                     __PIR:	
  1463  00A0                     	ds	42
  1464  00CA                     _Load:	
  1465  00CA                     	ds	28
  1466  00E6                     _Sw1:	
  1467  00E6                     	ds	5
  1468  00EB                     _VarLED2:	
  1469  00EB                     	ds	4
  1470                           
  1471                           	psect	bssBANK2
  1472  0120                     __pbssBANK2:	
  1473  0120                     _Sw2:	
  1474  0120                     	ds	5
  1475                           
  1476                           	psect	clrtext
  1477  08A3                     clear_ram0:	
  1478                           ;	Called with FSR containing the base address, and
  1479                           ;	W with the last address+1
  1480                           
  1481  08A3  0064               	clrwdt	;clear the watchdog before getting into this loop
  1482  08A4                     clrloop0:	
  1483  08A4  0180               	clrf	0	;clear RAM location pointed to by FSR
  1484  08A5  0A84               	incf	4,f	;increment pointer
  1485  08A6  0604               	xorwf	4,w	;XOR with final address
  1486  08A7  1903               	btfsc	3,2	;have we reached the end yet?
  1487  08A8  3400               	retlw	0	;all done for this memory range, return
  1488  08A9  0604               	xorwf	4,w	;XOR again to restore value
  1489  08AA  28A4               	goto	clrloop0	;do the next byte
  1490                           
  1491                           	psect	cstackBANK2
  1492  0125                     __pcstackBANK2:	
  1493  0125                     ?_main:	
  1494  0125                     main@argc:	
  1495                           ; 2 bytes @ 0x0
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x0
  1499  0125                     	ds	2
  1500  0127                     main@argv:	
  1501                           
  1502                           ; 2 bytes @ 0x2
  1503  0127                     	ds	2
  1504                           
  1505                           	psect	cstackCOMMON
  1506  0075                     __pcstackCOMMON:	
  1507  0075                     ?_setLED_Initialization:	
  1508  0075                     ?_setLED_Main:	
  1509                           ; 0 bytes @ 0x0
  1510                           
  1511  0075                     ?_Fosc_Set:	
  1512                           ; 0 bytes @ 0x0
  1513                           
  1514  0075                     ?_IO_Set:	
  1515                           ; 0 bytes @ 0x0
  1516                           
  1517  0075                     ?_TMR1_Set:	
  1518                           ; 0 bytes @ 0x0
  1519                           
  1520  0075                     ?_ADC_Set:	
  1521                           ; 0 bytes @ 0x0
  1522                           
  1523  0075                     ?_WDT_Set:	
  1524                           ; 0 bytes @ 0x0
  1525                           
  1526  0075                     ?_TMR1_ISR:	
  1527                           ; 0 bytes @ 0x0
  1528                           
  1529  0075                     ??_TMR1_ISR:	
  1530                           ; 0 bytes @ 0x0
  1531                           
  1532  0075                     ?_Timeout_Counter:	
  1533                           ; 0 bytes @ 0x0
  1534                           
  1535  0075                     ?_set_TimeoutCleared:	
  1536                           ; 0 bytes @ 0x0
  1537                           
  1538  0075                     ?_WDT_Clearing:	
  1539                           ; 0 bytes @ 0x0
  1540                           
  1541  0075                     ?_myMain_Initialization:	
  1542                           ; 0 bytes @ 0x0
  1543                           
  1544  0075                     ?_SYSC_Initialization:	
  1545                           ; 0 bytes @ 0x0
  1546                           
  1547  0075                     ?_Temp_Initialization:	
  1548                           ; 0 bytes @ 0x0
  1549                           
  1550  0075                     ?_Load_Initialization:	
  1551                           ; 0 bytes @ 0x0
  1552                           
  1553  0075                     ?_Lights_Initialization:	
  1554                           ; 0 bytes @ 0x0
  1555                           
  1556  0075                     ?_PIR_Initialization:	
  1557                           ; 0 bytes @ 0x0
  1558                           
  1559  0075                     ?_Switch_Initialization:	
  1560                           ; 0 bytes @ 0x0
  1561                           
  1562  0075                     ?_DetectSYSC_Signal:	
  1563                           ; 0 bytes @ 0x0
  1564                           
  1565  0075                     ?_getLoad_AD:	
  1566                           ; 0 bytes @ 0x0
  1567                           
  1568  0075                     ?_getTemp_AD:	
  1569                           ; 0 bytes @ 0x0
  1570                           
  1571  0075                     ?_my_MainTimer:	
  1572                           ; 0 bytes @ 0x0
  1573                           
  1574  0075                     ?_SYSC_Main:	
  1575                           ; 0 bytes @ 0x0
  1576                           
  1577  0075                     ?_Temp_Main:	
  1578                           ; 0 bytes @ 0x0
  1579                           
  1580  0075                     ?_Load_Main:	
  1581                           ; 0 bytes @ 0x0
  1582                           
  1583  0075                     ?_Lights_Main:	
  1584                           ; 0 bytes @ 0x0
  1585                           
  1586  0075                     ?_Switch_Main:	
  1587                           ; 0 bytes @ 0x0
  1588                           
  1589  0075                     ?_PIR_Main:	
  1590                           ; 0 bytes @ 0x0
  1591                           
  1592  0075                     ?_Exception_Main:	
  1593                           ; 0 bytes @ 0x0
  1594                           
  1595  0075                     ?_setLights_SwOn:	
  1596                           ; 0 bytes @ 0x0
  1597                           
  1598  0075                     ?_setLights_SwOff:	
  1599                           ; 0 bytes @ 0x0
  1600                           
  1601  0075                     ?_setLoad_AH_AL_Restore:	
  1602                           ; 0 bytes @ 0x0
  1603                           
  1604  0075                     ?_setTemp_Initialization:	
  1605                           ; 0 bytes @ 0x0
  1606                           
  1607  0075                     ?_setTemp_Main:	
  1608                           ; 0 bytes @ 0x0
  1609                           
  1610  0075                     ?_setSYSC_Initialization:	
  1611                           ; 0 bytes @ 0x0
  1612                           
  1613  0075                     ?_setSYSC_Main:	
  1614                           ; 0 bytes @ 0x0
  1615                           
  1616  0075                     ?_setSw_Main:	
  1617                           ; 0 bytes @ 0x0
  1618                           
  1619  0075                     ?_setLights_Initialization:	
  1620                           ; 0 bytes @ 0x0
  1621                           
  1622  0075                     ?_setLights_Main:	
  1623                           ; 0 bytes @ 0x0
  1624                           
  1625  0075                     ?_Lights_Control:	
  1626                           ; 0 bytes @ 0x0
  1627                           
  1628  0075                     ?_setLights_Line:	
  1629                           ; 0 bytes @ 0x0
  1630                           
  1631  0075                     ?_Buzzer_Initialization:	
  1632                           ; 0 bytes @ 0x0
  1633                           
  1634  0075                     ?_Buzzer_Main:	
  1635                           ; 0 bytes @ 0x0
  1636                           
  1637  0075                     ?_CDS_Initialization:	
  1638                           ; 0 bytes @ 0x0
  1639                           
  1640  0075                     ?_CDS_Main:	
  1641                           ; 0 bytes @ 0x0
  1642                           
  1643  0075                     ?_LedPointSelect:	
  1644                           ; 0 bytes @ 0x0
  1645                           
  1646  0075                     ?_LED_Initialization:	
  1647                           ; 0 bytes @ 0x0
  1648                           
  1649  0075                     ?_LED_Main:	
  1650                           ; 0 bytes @ 0x0
  1651                           
  1652  0075                     ?_Mcu_Initialization:	
  1653                           ; 0 bytes @ 0x0
  1654                           
  1655  0075                     ?_ISR:	
  1656                           ; 0 bytes @ 0x0
  1657                           
  1658  0075                     ??_ISR:	
  1659                           ; 0 bytes @ 0x0
  1660                           
  1661  0075                     ?_WDT_Main:	
  1662                           ; 0 bytes @ 0x0
  1663                           
  1664  0075                     ?_TouchPower:	
  1665                           ; 0 bytes @ 0x0
  1666                           
  1667  0075                     ?_SwPointSelect:	
  1668                           ; 0 bytes @ 0x0
  1669                           
  1670  0075                     ?_LightsPointSelect:	
  1671                           ; 0 bytes @ 0x0
  1672                           
  1673  0075                     ?_getAll_Lights_Line:	
  1674                           ; 0 bytes @ 0x0
  1675                           
  1676  0075                     ?_getLights_Status:	
  1677                           ; 1 bytes @ 0x0
  1678                           
  1679  0075                     ?_getLight_LoadGO:	
  1680                           ; 1 bytes @ 0x0
  1681                           
  1682  0075                     ?_getLight_Load_Status:	
  1683                           ; 1 bytes @ 0x0
  1684                           
  1685  0075                     ?_getSw_KeyStatus:	
  1686                           ; 1 bytes @ 0x0
  1687                           
  1688  0075                     ?_getLights_Allow_Condition:	
  1689                           ; 1 bytes @ 0x0
  1690                           
  1691  0075                     ?_getCDS_Status:	
  1692                           ; 1 bytes @ 0x0
  1693                           
  1694  0075                     ?_getMain_All_LightsStatus:	
  1695                           ; 1 bytes @ 0x0
  1696                           
  1697  0075                     ?_getMain_All_Error_Status:	
  1698                           ; 1 bytes @ 0x0
  1699                           
  1700  0075                     ?_getMain_Lights_Count:	
  1701                           ; 1 bytes @ 0x0
  1702                           
  1703  0075                     ?_getLoad_OK:	
  1704                           ; 1 bytes @ 0x0
  1705                           
  1706  0075                     getLights_Allow_Condition@lights:	
  1707                           ; 1 bytes @ 0x0
  1708                           
  1709                           
  1710                           ; 1 bytes @ 0x0
  1711  0075                     	ds	4
  1712  0079                     ??_Fosc_Set:	
  1713  0079                     ??_IO_Set:	
  1714                           ; 0 bytes @ 0x4
  1715                           
  1716  0079                     ??_TMR1_Set:	
  1717                           ; 0 bytes @ 0x4
  1718                           
  1719  0079                     ??_ADC_Set:	
  1720                           ; 0 bytes @ 0x4
  1721                           
  1722  0079                     ??_WDT_Set:	
  1723                           ; 0 bytes @ 0x4
  1724                           
  1725  0079                     ??_Timeout_Counter:	
  1726                           ; 0 bytes @ 0x4
  1727                           
  1728  0079                     ??_set_TimeoutCleared:	
  1729                           ; 0 bytes @ 0x4
  1730                           
  1731  0079                     ??_WDT_Clearing:	
  1732                           ; 0 bytes @ 0x4
  1733                           
  1734  0079                     ??_myMain_Initialization:	
  1735                           ; 0 bytes @ 0x4
  1736                           
  1737  0079                     ??_SYSC_Initialization:	
  1738                           ; 0 bytes @ 0x4
  1739                           
  1740  0079                     ??_Temp_Initialization:	
  1741                           ; 0 bytes @ 0x4
  1742                           
  1743  0079                     ??_PIR_Initialization:	
  1744                           ; 0 bytes @ 0x4
  1745                           
  1746  0079                     ??_Switch_Initialization:	
  1747                           ; 0 bytes @ 0x4
  1748                           
  1749  0079                     ??_DetectSYSC_Signal:	
  1750                           ; 0 bytes @ 0x4
  1751                           
  1752  0079                     ??_getAll_Lights_Line:	
  1753                           ; 0 bytes @ 0x4
  1754                           
  1755  0079                     ??_setLoad_AH_AL_Restore:	
  1756                           ; 0 bytes @ 0x4
  1757                           
  1758  0079                     ??_getLight_LoadGO:	
  1759                           ; 0 bytes @ 0x4
  1760                           
  1761  0079                     ??_getLight_Load_Status:	
  1762                           ; 0 bytes @ 0x4
  1763                           
  1764  0079                     ??_setTemp_Initialization:	
  1765                           ; 0 bytes @ 0x4
  1766                           
  1767  0079                     ??_setSYSC_Initialization:	
  1768                           ; 0 bytes @ 0x4
  1769                           
  1770  0079                     ??_getSw_KeyStatus:	
  1771                           ; 0 bytes @ 0x4
  1772                           
  1773  0079                     ??_setLights_Line:	
  1774                           ; 0 bytes @ 0x4
  1775                           
  1776  0079                     ??_Buzzer_Initialization:	
  1777                           ; 0 bytes @ 0x4
  1778                           
  1779  0079                     ??_Buzzer_Main:	
  1780                           ; 0 bytes @ 0x4
  1781                           
  1782  0079                     ??_CDS_Initialization:	
  1783                           ; 0 bytes @ 0x4
  1784                           
  1785  0079                     ??_getCDS_Status:	
  1786                           ; 0 bytes @ 0x4
  1787                           
  1788  0079                     ??_LedPointSelect:	
  1789                           ; 0 bytes @ 0x4
  1790                           
  1791  0079                     ??_WDT_Main:	
  1792                           ; 0 bytes @ 0x4
  1793                           
  1794  0079                     ??_getMain_All_LightsStatus:	
  1795                           ; 0 bytes @ 0x4
  1796                           
  1797  0079                     ??_getMain_All_Error_Status:	
  1798                           ; 0 bytes @ 0x4
  1799                           
  1800  0079                     ??_getMain_Lights_Count:	
  1801                           ; 0 bytes @ 0x4
  1802                           
  1803  0079                     ??_getLoad_OK:	
  1804                           ; 0 bytes @ 0x4
  1805                           
  1806  0079                     ??_TouchPower:	
  1807                           ; 0 bytes @ 0x4
  1808                           
  1809  0079                     ??_SwPointSelect:	
  1810                           ; 0 bytes @ 0x4
  1811                           
  1812  0079                     ??_LightsPointSelect:	
  1813                           ; 0 bytes @ 0x4
  1814                           
  1815  0079                     ??___awdiv:	
  1816                           ; 0 bytes @ 0x4
  1817                           
  1818  0079                     ??___lwdiv:	
  1819                           ; 0 bytes @ 0x4
  1820                           
  1821  0079                     ?_getAD:	
  1822                           ; 0 bytes @ 0x4
  1823                           
  1824  0079                     getCDS_Status@status:	
  1825                           ; 1 bytes @ 0x4
  1826                           
  1827  0079                     getAD@adcon1:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830  0079                     getMain_All_LightsStatus@status:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  0079                     getLoad_OK@ok:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836  0079                     SwPointSelect@sw:	
  1837                           ; 1 bytes @ 0x4
  1838                           
  1839  0079                     setLights_Line@lights:	
  1840                           ; 1 bytes @ 0x4
  1841                           
  1842  0079                     getLight_LoadGO@loadgo:	
  1843                           ; 1 bytes @ 0x4
  1844                           
  1845  0079                     getLight_Load_Status@loadstatus:	
  1846                           ; 1 bytes @ 0x4
  1847                           
  1848                           
  1849                           ; 1 bytes @ 0x4
  1850  0079                     	ds	1
  1851  007A                     ??_getAD:	
  1852  007A                     ??_setLED_Initialization:	
  1853                           ; 0 bytes @ 0x5
  1854                           
  1855  007A                     ??_setLED:	
  1856                           ; 0 bytes @ 0x5
  1857                           
  1858  007A                     ??_Load_Initialization:	
  1859                           ; 0 bytes @ 0x5
  1860                           
  1861  007A                     ??_Lights_Initialization:	
  1862                           ; 0 bytes @ 0x5
  1863                           
  1864  007A                     ??_SYSC_Main:	
  1865                           ; 0 bytes @ 0x5
  1866                           
  1867  007A                     ??_Temp_Main:	
  1868                           ; 0 bytes @ 0x5
  1869                           
  1870  007A                     ??_Lights_Main:	
  1871                           ; 0 bytes @ 0x5
  1872                           
  1873  007A                     ??_Switch_Main:	
  1874                           ; 0 bytes @ 0x5
  1875                           
  1876  007A                     ??_getLights_Status:	
  1877                           ; 0 bytes @ 0x5
  1878                           
  1879  007A                     ??_setLights_SwOn:	
  1880                           ; 0 bytes @ 0x5
  1881                           
  1882  007A                     ??_setLights_SwOff:	
  1883                           ; 0 bytes @ 0x5
  1884                           
  1885  007A                     ??_setSYSC_Main:	
  1886                           ; 0 bytes @ 0x5
  1887                           
  1888  007A                     ??_setLights_Initialization:	
  1889                           ; 0 bytes @ 0x5
  1890                           
  1891  007A                     ??_setLights_Main:	
  1892                           ; 0 bytes @ 0x5
  1893                           
  1894  007A                     ??_LED_Initialization:	
  1895                           ; 0 bytes @ 0x5
  1896                           
  1897  007A                     ??_LED_Main:	
  1898                           ; 0 bytes @ 0x5
  1899                           
  1900  007A                     ??_Mcu_Initialization:	
  1901                           ; 0 bytes @ 0x5
  1902                           
  1903                           
  1904                           	psect	cstackBANK0
  1905  005A                     __pcstackBANK0:	
  1906                           ; 0 bytes @ 0x5
  1907                           
  1908  005A                     ??_getLights_Allow_Condition:	
  1909  005A                     ??_CDS_Main:	
  1910                           ; 0 bytes @ 0x0
  1911                           
  1912  005A                     ?___awdiv:	
  1913                           ; 0 bytes @ 0x0
  1914                           
  1915  005A                     ?___lwdiv:	
  1916                           ; 2 bytes @ 0x0
  1917                           
  1918  005A                     LedPointSelect@led:	
  1919                           ; 2 bytes @ 0x0
  1920                           
  1921  005A                     getAD@adcon0:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  005A                     getMain_Lights_Count@count:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  005A                     setLoad_AH_AL_Restore@i:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  005A                     getSw_KeyStatus@status:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  005A                     LightsPointSelect@lights:	
  1934                           ; 1 bytes @ 0x0
  1935                           
  1936  005A                     getAll_Lights_Line@line:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  005A                     _getMain_All_Error_Status$2412:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  005A                     ___awdiv@divisor:	
  1943                           ; 2 bytes @ 0x0
  1944                           
  1945  005A                     ___lwdiv@divisor:	
  1946                           ; 2 bytes @ 0x0
  1947                           
  1948                           
  1949                           ; 2 bytes @ 0x0
  1950  005A                     	ds	1
  1951  005B                     ??_setLED_Main:	
  1952  005B                     ?_setLED:	
  1953                           ; 0 bytes @ 0x1
  1954                           
  1955  005B                     ??_getLoad_AD:	
  1956                           ; 0 bytes @ 0x1
  1957                           
  1958  005B                     ??_getTemp_AD:	
  1959                           ; 0 bytes @ 0x1
  1960                           
  1961  005B                     ?_setLights_Trigger:	
  1962                           ; 0 bytes @ 0x1
  1963                           
  1964  005B                     ?_getCDS_AD:	
  1965                           ; 0 bytes @ 0x1
  1966                           
  1967  005B                     getCDS_AD@channel2:	
  1968                           ; 0 bytes @ 0x1
  1969                           
  1970  005B                     setLED@command:	
  1971                           ; 1 bytes @ 0x1
  1972                           
  1973  005B                     getMain_Lights_Count@status1:	
  1974                           ; 1 bytes @ 0x1
  1975                           
  1976  005B                     getSw_KeyStatus@sw:	
  1977                           ; 1 bytes @ 0x1
  1978                           
  1979  005B                     setLights_Initialization@lights:	
  1980                           ; 1 bytes @ 0x1
  1981                           
  1982  005B                     getLights_Status@lights:	
  1983                           ; 1 bytes @ 0x1
  1984                           
  1985  005B                     setLights_Trigger@command:	
  1986                           ; 1 bytes @ 0x1
  1987                           
  1988  005B                     getLights_Allow_Condition@allow:	
  1989                           ; 1 bytes @ 0x1
  1990                           
  1991                           
  1992                           ; 1 bytes @ 0x1
  1993  005B                     	ds	1
  1994  005C                     ??_setLights_Trigger:	
  1995  005C                     ??_getCDS_AD:	
  1996                           ; 0 bytes @ 0x2
  1997                           
  1998  005C                     setLED@led:	
  1999                           ; 0 bytes @ 0x2
  2000                           
  2001  005C                     getMain_Lights_Count@status2:	
  2002                           ; 1 bytes @ 0x2
  2003                           
  2004  005C                     getLights_Status@status:	
  2005                           ; 1 bytes @ 0x2
  2006                           
  2007  005C                     _getLights_Allow_Condition$4782:	
  2008                           ; 1 bytes @ 0x2
  2009                           
  2010  005C                     _getMain_All_Error_Status$2413:	
  2011                           ; 1 bytes @ 0x2
  2012                           
  2013  005C                     ___awdiv@dividend:	
  2014                           ; 2 bytes @ 0x2
  2015                           
  2016  005C                     ___lwdiv@dividend:	
  2017                           ; 2 bytes @ 0x2
  2018                           
  2019                           
  2020                           ; 2 bytes @ 0x2
  2021  005C                     	ds	1
  2022  005D                     ?_setLights:	
  2023  005D                     setLED_Initialization@led:	
  2024                           ; 0 bytes @ 0x3
  2025                           
  2026  005D                     setLED_Main@led:	
  2027                           ; 1 bytes @ 0x3
  2028                           
  2029  005D                     getLoad_AD@channel:	
  2030                           ; 1 bytes @ 0x3
  2031                           
  2032  005D                     getTemp_AD@channel:	
  2033                           ; 1 bytes @ 0x3
  2034                           
  2035  005D                     setLights@status:	
  2036                           ; 1 bytes @ 0x3
  2037                           
  2038  005D                     setLights_Trigger@lights:	
  2039                           ; 1 bytes @ 0x3
  2040                           
  2041                           
  2042                           ; 1 bytes @ 0x3
  2043  005D                     	ds	1
  2044  005E                     ??_setLights:	
  2045  005E                     getCDS_AD@i:	
  2046                           ; 0 bytes @ 0x4
  2047                           
  2048  005E                     getMain_All_Error_Status@command:	
  2049                           ; 1 bytes @ 0x4
  2050                           
  2051  005E                     getLoad_AD@k:	
  2052                           ; 1 bytes @ 0x4
  2053                           
  2054  005E                     getTemp_AD@ADRES:	
  2055                           ; 1 bytes @ 0x4
  2056                           
  2057  005E                     setLights_SwOn@sw:	
  2058                           ; 1 bytes @ 0x4
  2059                           
  2060  005E                     setLights_SwOff@sw:	
  2061                           ; 1 bytes @ 0x4
  2062                           
  2063  005E                     ___awdiv@counter:	
  2064                           ; 1 bytes @ 0x4
  2065                           
  2066  005E                     ___lwdiv@counter:	
  2067                           ; 1 bytes @ 0x4
  2068                           
  2069                           
  2070                           ; 1 bytes @ 0x4
  2071  005E                     	ds	1
  2072  005F                     getCDS_AD@j:	
  2073  005F                     getMain_All_Error_Status@status:	
  2074                           ; 1 bytes @ 0x5
  2075                           
  2076  005F                     getLoad_AD@j:	
  2077                           ; 1 bytes @ 0x5
  2078                           
  2079  005F                     setLights@lights:	
  2080                           ; 1 bytes @ 0x5
  2081                           
  2082  005F                     ___awdiv@sign:	
  2083                           ; 1 bytes @ 0x5
  2084                           
  2085  005F                     ___lwdiv@quotient:	
  2086                           ; 1 bytes @ 0x5
  2087                           
  2088                           
  2089                           ; 2 bytes @ 0x5
  2090  005F                     	ds	1
  2091  0060                     ??_PIR_Main:	
  2092  0060                     ??_setSw_Main:	
  2093                           ; 0 bytes @ 0x6
  2094                           
  2095  0060                     getCDS_AD@channel1:	
  2096                           ; 0 bytes @ 0x6
  2097                           
  2098  0060                     getLoad_AD@ADRES:	
  2099                           ; 1 bytes @ 0x6
  2100                           
  2101  0060                     setLights_Main@lights:	
  2102                           ; 1 bytes @ 0x6
  2103                           
  2104  0060                     ___awdiv@quotient:	
  2105                           ; 1 bytes @ 0x6
  2106                           
  2107                           
  2108                           ; 2 bytes @ 0x6
  2109  0060                     	ds	1
  2110  0061                     ??_Load_Main:	
  2111  0061                     getLoad_AD@i:	
  2112                           ; 0 bytes @ 0x7
  2113                           
  2114                           
  2115                           ; 1 bytes @ 0x7
  2116  0061                     	ds	1
  2117  0062                     ?_getPIR_AD:	
  2118  0062                     ??_Lights_Control:	
  2119                           ; 0 bytes @ 0x8
  2120                           
  2121  0062                     ?_setBuz:	
  2122                           ; 0 bytes @ 0x8
  2123                           
  2124  0062                     getPIR_AD@channel2:	
  2125                           ; 0 bytes @ 0x8
  2126                           
  2127  0062                     setBuz@time:	
  2128                           ; 1 bytes @ 0x8
  2129                           
  2130                           
  2131                           ; 2 bytes @ 0x8
  2132  0062                     	ds	1
  2133  0063                     ??_getPIR_AD:	
  2134  0063                     Load_Main@error:	
  2135                           ; 0 bytes @ 0x9
  2136                           
  2137                           
  2138                           ; 1 bytes @ 0x9
  2139  0063                     	ds	1
  2140  0064                     ??_setBuz:	
  2141  0064                     PIR_Main@error:	
  2142                           ; 0 bytes @ 0xA
  2143                           
  2144  0064                     setSw_Main@sw:	
  2145                           ; 1 bytes @ 0xA
  2146                           
  2147  0064                     Lights_Control@lights:	
  2148                           ; 1 bytes @ 0xA
  2149                           
  2150  0064                     _Load_Main$2699:	
  2151                           ; 1 bytes @ 0xA
  2152                           
  2153                           
  2154                           ; 2 bytes @ 0xA
  2155  0064                     	ds	1
  2156  0065                     setBuz@count:	
  2157  0065                     _PIR_Main$3214:	
  2158                           ; 1 bytes @ 0xB
  2159                           
  2160                           
  2161                           ; 2 bytes @ 0xB
  2162  0065                     	ds	1
  2163  0066                     ??_my_MainTimer:	
  2164  0066                     ??_Exception_Main:	
  2165                           ; 0 bytes @ 0xC
  2166                           
  2167  0066                     ??_setTemp_Main:	
  2168                           ; 0 bytes @ 0xC
  2169                           
  2170  0066                     Load_Main@ErrorCountValue:	
  2171                           ; 0 bytes @ 0xC
  2172                           
  2173  0066                     getPIR_AD@j:	
  2174                           ; 1 bytes @ 0xC
  2175                           
  2176                           
  2177                           ; 1 bytes @ 0xC
  2178  0066                     	ds	1
  2179  0067                     Exception_Main@lights:	
  2180  0067                     Load_Main@Load_RunStatus:	
  2181                           ; 1 bytes @ 0xD
  2182                           
  2183  0067                     setTemp_Main@error:	
  2184                           ; 1 bytes @ 0xD
  2185                           
  2186  0067                     PIR_Main@Enable_Switch:	
  2187                           ; 1 bytes @ 0xD
  2188                           
  2189  0067                     getPIR_AD@channel1:	
  2190                           ; 1 bytes @ 0xD
  2191                           
  2192                           
  2193                           ; 1 bytes @ 0xD
  2194  0067                     	ds	1
  2195  0068                     Exception_Main@count:	
  2196  0068                     Load_Main@LightsCount:	
  2197                           ; 1 bytes @ 0xE
  2198                           
  2199  0068                     setTemp_Main@SafeValue:	
  2200                           ; 1 bytes @ 0xE
  2201                           
  2202  0068                     PIR_Main@TriggerValue:	
  2203                           ; 1 bytes @ 0xE
  2204                           
  2205  0068                     getPIR_AD@VRAD1:	
  2206                           ; 1 bytes @ 0xE
  2207                           
  2208                           
  2209                           ; 1 bytes @ 0xE
  2210  0068                     	ds	1
  2211  0069                     Exception_Main@error:	
  2212  0069                     setTemp_Main@DangerValue:	
  2213                           ; 1 bytes @ 0xF
  2214                           
  2215  0069                     PIR_Main@cds:	
  2216                           ; 1 bytes @ 0xF
  2217                           
  2218  0069                     getPIR_AD@VRAD:	
  2219                           ; 1 bytes @ 0xF
  2220                           
  2221  0069                     Load_Main@i:	
  2222                           ; 1 bytes @ 0xF
  2223                           
  2224                           
  2225                           ; 2 bytes @ 0xF
  2226  0069                     	ds	1
  2227  006A                     Exception_Main@status:	
  2228  006A                     setTemp_Main@AD:	
  2229                           ; 1 bytes @ 0x10
  2230                           
  2231  006A                     PIR_Main@LightsStatus:	
  2232                           ; 1 bytes @ 0x10
  2233                           
  2234  006A                     getPIR_AD@i:	
  2235                           ; 1 bytes @ 0x10
  2236                           
  2237                           
  2238                           ; 1 bytes @ 0x10
  2239  006A                     	ds	1
  2240  006B                     Exception_Main@i:	
  2241                           
  2242                           ; 2 bytes @ 0x11
  2243  006B                     	ds	2
  2244  006D                     Exception_Main@i_2426:	
  2245                           
  2246                           ; 2 bytes @ 0x13
  2247  006D                     	ds	2
  2248  006F                     ??_main:	
  2249                           
  2250                           ; 0 bytes @ 0x15
  2251  006F                     	ds	1
  2252                           
  2253                           	psect	maintext
  2254  0E6E                     __pmaintext:	
  2255 ;;
  2256 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2257 ;;
  2258 ;; *************** function _main *****************
  2259 ;; Defined at:
  2260 ;;		line 7 in file "../src/Main_B1.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  argc            2    0[BANK2 ] int 
  2263 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  2    0[BANK2 ] int 
  2268 ;; Registers used:
  2269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2270 ;; Tracked objects:
  2271 ;;		On entry : 17F/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2275 ;;      Params:         0       0       0       4
  2276 ;;      Locals:         0       0       0       0
  2277 ;;      Temps:          0       1       0       0
  2278 ;;      Totals:         0       1       0       4
  2279 ;;Total ram usage:        5 bytes
  2280 ;; Hardware stack levels required when called:    7
  2281 ;; This function calls:
  2282 ;;		_Buzzer_Initialization
  2283 ;;		_Buzzer_Main
  2284 ;;		_CDS_Initialization
  2285 ;;		_CDS_Main
  2286 ;;		_DetectSYSC_Signal
  2287 ;;		_Exception_Main
  2288 ;;		_LED_Initialization
  2289 ;;		_LED_Main
  2290 ;;		_Lights_Initialization
  2291 ;;		_Lights_Main
  2292 ;;		_Load_Initialization
  2293 ;;		_Load_Main
  2294 ;;		_Mcu_Initialization
  2295 ;;		_PIR_Initialization
  2296 ;;		_PIR_Main
  2297 ;;		_SYSC_Initialization
  2298 ;;		_SYSC_Main
  2299 ;;		_Switch_Initialization
  2300 ;;		_Switch_Main
  2301 ;;		_Temp_Initialization
  2302 ;;		_Temp_Main
  2303 ;;		_WDT_Main
  2304 ;;		_getCDS_AD
  2305 ;;		_getLoad_AD
  2306 ;;		_getPIR_AD
  2307 ;;		_getTemp_AD
  2308 ;;		_myMain_Initialization
  2309 ;;		_my_MainTimer
  2310 ;; This function is called by:
  2311 ;;		Startup code after reset
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           
  2316                           ;psect for function _main
  2317  0E6E                     _main:	
  2318                           
  2319                           ;Main_B1.c: 8: myMain_Initialization();
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2323  0E6E  158A  204D  158A   	fcall	_myMain_Initialization
  2324                           
  2325                           ;Main_B1.c: 9: Mcu_Initialization();
  2326  0E71  158A  2112  158A   	fcall	_Mcu_Initialization
  2327                           
  2328                           ;Main_B1.c: 10: ;;
  2329                           ;Main_B1.c: 11: LED_Initialization();
  2330  0E74  158A  20C1  158A   	fcall	_LED_Initialization
  2331                           
  2332                           ;Main_B1.c: 12: Buzzer_Initialization();
  2333  0E77  158A  205A  158A   	fcall	_Buzzer_Initialization
  2334                           
  2335                           ;Main_B1.c: 14: SYSC_Initialization();
  2336  0E7A  158A  2051  158A   	fcall	_SYSC_Initialization
  2337                           
  2338                           ;Main_B1.c: 15: Temp_Initialization();
  2339  0E7D  158A  2057  158A   	fcall	_Temp_Initialization
  2340                           
  2341                           ;Main_B1.c: 16: Load_Initialization();
  2342  0E80  158A  204E  158A   	fcall	_Load_Initialization
  2343                           
  2344                           ;Main_B1.c: 17: ;;
  2345                           ;Main_B1.c: 18: ;;
  2346                           ;Main_B1.c: 20: ;;
  2347                           ;Main_B1.c: 21: Lights_Initialization();
  2348  0E83  158A  208B  158A   	fcall	_Lights_Initialization
  2349                           
  2350                           ;Main_B1.c: 22: CDS_Initialization();
  2351  0E86  158A  205E  158A   	fcall	_CDS_Initialization
  2352                           
  2353                           ;Main_B1.c: 23: PIR_Initialization();
  2354  0E89  158A  20AB  158A   	fcall	_PIR_Initialization
  2355                           
  2356                           ;Main_B1.c: 24: Switch_Initialization();
  2357  0E8C  158A  204B  158A   	fcall	_Switch_Initialization
  2358  0E8F                     l7358:	
  2359                           ;Main_B1.c: 25: ;;
  2360                           ;Main_B1.c: 26: ;;
  2361                           ;Main_B1.c: 27: ;;
  2362                           ;Main_B1.c: 28: ;;
  2363                           ;Main_B1.c: 30: while (1) {
  2364                           
  2365                           
  2366                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2367  0E8F  1283               	bcf	3,5	;RP0=0, select bank0
  2368  0E90  1303               	bcf	3,6	;RP1=0, select bank0
  2369  0E91  1C31               	btfss	_myMain,0
  2370  0E92  2EB2               	goto	l7370
  2371                           
  2372                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2373  0E93  158A  20D9  158A   	fcall	_DetectSYSC_Signal
  2374                           
  2375                           ;Main_B1.c: 38: getLoad_AD(0x31);
  2376  0E96  3031               	movlw	49
  2377  0E97  158A  25B5  158A   	fcall	_getLoad_AD
  2378                           
  2379                           ;Main_B1.c: 42: getTemp_AD(0x21);
  2380  0E9A  3021               	movlw	33
  2381  0E9B  158A  23BD  158A   	fcall	_getTemp_AD
  2382                           
  2383                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x11);
  2384  0E9E  3011               	movlw	17
  2385  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  2386  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  2387  0EA1  00EF               	movwf	??_main
  2388  0EA2  086F               	movf	??_main,w
  2389  0EA3  00DB               	movwf	getCDS_AD@channel2
  2390  0EA4  3009               	movlw	9
  2391  0EA5  158A  22BC  158A   	fcall	_getCDS_AD
  2392                           
  2393                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2394  0EA8  300D               	movlw	13
  2395  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  2396  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  2397  0EAB  00EF               	movwf	??_main
  2398  0EAC  086F               	movf	??_main,w
  2399  0EAD  00E2               	movwf	getPIR_AD@channel2
  2400  0EAE  3005               	movlw	5
  2401  0EAF  118A  250F  158A   	fcall	_getPIR_AD
  2402  0EB2                     l7370:	
  2403                           
  2404                           ;Main_B1.c: 57: }
  2405                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2406  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
  2407  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
  2408  0EB4  1C3A               	btfss	_Timer1,0
  2409  0EB5  2E8F               	goto	l7358
  2410                           
  2411                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2412  0EB6  103A               	bcf	_Timer1,0
  2413                           
  2414                           ;Main_B1.c: 96: my_MainTimer();
  2415  0EB7  158A  22DE  158A   	fcall	_my_MainTimer
  2416                           
  2417                           ;Main_B1.c: 97: WDT_Main();
  2418  0EBA  158A  2152  158A   	fcall	_WDT_Main
  2419                           
  2420                           ;Main_B1.c: 98: ;;
  2421                           ;Main_B1.c: 99: ;;
  2422                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2423  0EBD  1283               	bcf	3,5	;RP0=0, select bank0
  2424  0EBE  1303               	bcf	3,6	;RP1=0, select bank0
  2425  0EBF  1C31               	btfss	_myMain,0
  2426  0EC0  2E8F               	goto	l7358
  2427                           
  2428                           ;Main_B1.c: 101: ;;
  2429                           ;Main_B1.c: 103: LED_Main();
  2430  0EC1  158A  20CD  158A   	fcall	_LED_Main
  2431                           
  2432                           ;Main_B1.c: 104: Buzzer_Main();
  2433  0EC4  158A  252A  158A   	fcall	_Buzzer_Main
  2434                           
  2435                           ;Main_B1.c: 106: SYSC_Main();
  2436  0EC7  158A  2054  158A   	fcall	_SYSC_Main
  2437                           
  2438                           ;Main_B1.c: 107: Temp_Main();
  2439  0ECA  118A  27FD  158A   	fcall	_Temp_Main
  2440                           
  2441                           ;Main_B1.c: 108: Load_Main();
  2442  0ECD  118A  202E  158A   	fcall	_Load_Main
  2443                           
  2444                           ;Main_B1.c: 109: ;;
  2445                           ;Main_B1.c: 111: Lights_Main();
  2446  0ED0  158A  2301  158A   	fcall	_Lights_Main
  2447                           
  2448                           ;Main_B1.c: 112: ;;
  2449                           ;Main_B1.c: 113: Switch_Main();
  2450  0ED3  158A  20B6  158A   	fcall	_Switch_Main
  2451                           
  2452                           ;Main_B1.c: 114: CDS_Main();
  2453  0ED6  158A  2389  158A   	fcall	_CDS_Main
  2454                           
  2455                           ;Main_B1.c: 115: PIR_Main();
  2456  0ED9  118A  2212  158A   	fcall	_PIR_Main
  2457                           
  2458                           ;Main_B1.c: 117: ;;
  2459                           ;Main_B1.c: 118: ;;
  2460                           ;Main_B1.c: 119: ;;
  2461                           ;Main_B1.c: 120: ;;
  2462                           ;Main_B1.c: 121: Exception_Main();
  2463  0EDC  118A  263D  158A   	fcall	_Exception_Main
  2464  0EDF  2E8F               	goto	l7358
  2465  0EE0                     __end_of_main:	
  2466                           ;Main_B1.c: 128: }
  2467                           ;Main_B1.c: 129: }
  2468                           ;Main_B1.c: 163: }
  2469                           ;Main_B1.c: 164: return (0);
  2470                           ;	Return value of _main is never used
  2471                           
  2472                           
  2473                           	psect	text1
  2474  0ADE                     __ptext1:	
  2475 ;; *************** function _my_MainTimer *****************
  2476 ;; Defined at:
  2477 ;;		line 185 in file "../src/Main_B1.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;		None
  2482 ;; Return value:  Size  Location     Type
  2483 ;;		None               void
  2484 ;; Registers used:
  2485 ;;		wreg, status,2, status,0, pclath, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2491 ;;      Params:         0       0       0       0
  2492 ;;      Locals:         0       0       0       0
  2493 ;;      Temps:          0       1       0       0
  2494 ;;      Totals:         0       1       0       0
  2495 ;;Total ram usage:        1 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    4
  2498 ;; This function calls:
  2499 ;;		_setBuz
  2500 ;; This function is called by:
  2501 ;;		_main
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           
  2506                           ;psect for function _my_MainTimer
  2507  0ADE                     _my_MainTimer:	
  2508                           
  2509                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2510                           
  2511                           ;incstack = 0
  2512                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2513  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  2514  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  2515  0AE0  1831               	btfsc	_myMain,0
  2516  0AE1  2AF7               	goto	l6966
  2517                           
  2518                           ;Main_B1.c: 188: myMain.PowerCount++;
  2519  0AE2  3001               	movlw	1
  2520  0AE3  00E6               	movwf	??_my_MainTimer
  2521  0AE4  0866               	movf	??_my_MainTimer,w
  2522  0AE5  07B2               	addwf	_myMain+1,f
  2523                           
  2524                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2525  0AE6  0832               	movf	_myMain+1,w
  2526  0AE7  3A4B               	xorlw	75
  2527  0AE8  1D03               	skipz
  2528  0AE9  0008               	return
  2529                           
  2530                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2531  0AEA  01B2               	clrf	_myMain+1
  2532                           
  2533                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2534  0AEB  1431               	bsf	_myMain,0
  2535                           
  2536                           ;Main_B1.c: 196: setBuz(3, 50);
  2537  0AEC  3032               	movlw	50
  2538  0AED  00E2               	movwf	setBuz@time
  2539  0AEE  3000               	movlw	0
  2540  0AEF  00E3               	movwf	setBuz@time+1
  2541  0AF0  3003               	movlw	3
  2542  0AF1  158A  256E         	fcall	_setBuz
  2543                           
  2544                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2545  0AF3  1283               	bcf	3,5	;RP0=0, select bank0
  2546  0AF4  1303               	bcf	3,6	;RP1=0, select bank0
  2547  0AF5  1631               	bsf	_myMain,4
  2548                           
  2549                           ;Main_B1.c: 206: }
  2550                           ;Main_B1.c: 207: } else {
  2551  0AF6  0008               	return
  2552  0AF7                     l6966:	
  2553                           
  2554                           ;Main_B1.c: 208: myMain.PowerCount++;
  2555  0AF7  3001               	movlw	1
  2556  0AF8  00E6               	movwf	??_my_MainTimer
  2557  0AF9  0866               	movf	??_my_MainTimer,w
  2558  0AFA  07B2               	addwf	_myMain+1,f
  2559                           
  2560                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2561  0AFB  0832               	movf	_myMain+1,w
  2562  0AFC  3A32               	xorlw	50
  2563  0AFD  1D03               	skipz
  2564  0AFE  0008               	return
  2565                           
  2566                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2567  0AFF  01B2               	clrf	_myMain+1
  2568  0B00  0008               	return
  2569  0B01                     __end_of_my_MainTimer:	
  2570                           
  2571                           	psect	text2
  2572  084D                     __ptext2:	
  2573 ;; *************** function _myMain_Initialization *****************
  2574 ;; Defined at:
  2575 ;;		line 170 in file "../src/Main_B1.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;		None               void
  2582 ;; Registers used:
  2583 ;;		None
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2589 ;;      Params:         0       0       0       0
  2590 ;;      Locals:         0       0       0       0
  2591 ;;      Temps:          0       0       0       0
  2592 ;;      Totals:         0       0       0       0
  2593 ;;Total ram usage:        0 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    2
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_main
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           
  2604                           ;psect for function _myMain_Initialization
  2605  084D                     _myMain_Initialization:	
  2606                           
  2607                           ;incstack = 0
  2608                           ; Regs used in _myMain_Initialization: []
  2609  084D  0008               	return
  2610  084E                     __end_of_myMain_Initialization:	
  2611                           
  2612                           	psect	text3
  2613  0BBD                     __ptext3:	
  2614 ;; *************** function _getTemp_AD *****************
  2615 ;; Defined at:
  2616 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;  channel         1    wreg     unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  channel         1    3[BANK0 ] unsigned char 
  2621 ;;  ADRES           1    4[BANK0 ] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;		None               void
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, pclath, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2631 ;;      Params:         0       0       0       0
  2632 ;;      Locals:         0       2       0       0
  2633 ;;      Temps:          0       2       0       0
  2634 ;;      Totals:         0       4       0       0
  2635 ;;Total ram usage:        4 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    4
  2638 ;; This function calls:
  2639 ;;		_getAD
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           
  2646                           ;psect for function _getTemp_AD
  2647  0BBD                     _getTemp_AD:	
  2648                           
  2649                           ;incstack = 0
  2650                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2651                           ;getTemp_AD@channel stored from wreg
  2652  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  2653  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  2654  0BBF  00DD               	movwf	getTemp_AD@channel
  2655                           
  2656                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2657  0BC0  01DE               	clrf	getTemp_AD@ADRES
  2658                           
  2659                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2660  0BC1  1D42               	btfss	_Temp,2
  2661  0BC2  2BE4               	goto	l6872
  2662                           
  2663                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2664  0BC3  3070               	movlw	112
  2665  0BC4  00DB               	movwf	??_getTemp_AD
  2666  0BC5  085B               	movf	??_getTemp_AD,w
  2667  0BC6  00F9               	movwf	getAD@adcon1
  2668  0BC7  085D               	movf	getTemp_AD@channel,w
  2669  0BC8  158A  22A0  158A   	fcall	_getAD
  2670  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0BCD  00DC               	movwf	??_getTemp_AD+1
  2673  0BCE  085C               	movf	??_getTemp_AD+1,w
  2674  0BCF  00DE               	movwf	getTemp_AD@ADRES
  2675                           
  2676                           ;OverTemperature_B1.c: 22: if (ADRES > 0) {
  2677  0BD0  085E               	movf	getTemp_AD@ADRES,w
  2678  0BD1  1903               	btfsc	3,2
  2679  0BD2  2BE4               	goto	l6872
  2680                           
  2681                           ;OverTemperature_B1.c: 23: if (Temp.ADH[0] < ADRES) {
  2682  0BD3  085E               	movf	getTemp_AD@ADRES,w
  2683  0BD4  0246               	subwf	_Temp+4,w
  2684  0BD5  1803               	skipnc
  2685  0BD6  2BDC               	goto	l6868
  2686                           
  2687                           ;OverTemperature_B1.c: 24: Temp.ADH[0] = ADRES;
  2688  0BD7  085E               	movf	getTemp_AD@ADRES,w
  2689  0BD8  00DB               	movwf	??_getTemp_AD
  2690  0BD9  085B               	movf	??_getTemp_AD,w
  2691  0BDA  00C6               	movwf	_Temp+4
  2692                           
  2693                           ;OverTemperature_B1.c: 25: } else if (Temp.ADH[1] < ADRES) {
  2694  0BDB  2BE4               	goto	l6872
  2695  0BDC                     l6868:	
  2696  0BDC  085E               	movf	getTemp_AD@ADRES,w
  2697  0BDD  0247               	subwf	_Temp+5,w
  2698  0BDE  1803               	skipnc
  2699  0BDF  2BE4               	goto	l6872
  2700                           
  2701                           ;OverTemperature_B1.c: 26: Temp.ADH[1] = ADRES;
  2702  0BE0  085E               	movf	getTemp_AD@ADRES,w
  2703  0BE1  00DB               	movwf	??_getTemp_AD
  2704  0BE2  085B               	movf	??_getTemp_AD,w
  2705  0BE3  00C7               	movwf	_Temp+5
  2706  0BE4                     l6872:	
  2707                           
  2708                           ;OverTemperature_B1.c: 27: }
  2709                           ;OverTemperature_B1.c: 28: }
  2710                           ;OverTemperature_B1.c: 29: }
  2711                           ;OverTemperature_B1.c: 36: ADRES = getAD(channel, 0x70);
  2712  0BE4  3070               	movlw	112
  2713  0BE5  00DB               	movwf	??_getTemp_AD
  2714  0BE6  085B               	movf	??_getTemp_AD,w
  2715  0BE7  00F9               	movwf	getAD@adcon1
  2716  0BE8  085D               	movf	getTemp_AD@channel,w
  2717  0BE9  158A  22A0         	fcall	_getAD
  2718  0BEB  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0BEC  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0BED  00DC               	movwf	??_getTemp_AD+1
  2721  0BEE  085C               	movf	??_getTemp_AD+1,w
  2722  0BEF  00DE               	movwf	getTemp_AD@ADRES
  2723  0BF0  0008               	return
  2724  0BF1                     __end_of_getTemp_AD:	
  2725                           
  2726                           	psect	text4
  2727  050F                     __ptext4:	
  2728 ;; *************** function _getPIR_AD *****************
  2729 ;; Defined at:
  2730 ;;		line 327 in file "../src/PIR_B1.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  channel1        1    wreg     unsigned char 
  2733 ;;  channel2        1    8[BANK0 ] unsigned char 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  channel1        1   13[BANK0 ] unsigned char 
  2736 ;;  i               1   16[BANK0 ] unsigned char 
  2737 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2738 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2739 ;;  j               1   12[BANK0 ] unsigned char 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;		None               void
  2742 ;; Registers used:
  2743 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2749 ;;      Params:         0       1       0       0
  2750 ;;      Locals:         0       5       0       0
  2751 ;;      Temps:          0       3       0       0
  2752 ;;      Totals:         0       9       0       0
  2753 ;;Total ram usage:        9 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    4
  2756 ;; This function calls:
  2757 ;;		___awdiv
  2758 ;;		___lwdiv
  2759 ;;		_getAD
  2760 ;; This function is called by:
  2761 ;;		_main
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function _getPIR_AD
  2767  050F                     _getPIR_AD:	
  2768                           
  2769                           ;incstack = 0
  2770                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2771                           ;getPIR_AD@channel1 stored from wreg
  2772  050F  1283               	bcf	3,5	;RP0=0, select bank0
  2773  0510  1303               	bcf	3,6	;RP1=0, select bank0
  2774  0511  00E7               	movwf	getPIR_AD@channel1
  2775                           
  2776                           ;PIR_B1.c: 328: char i = 0, j = 0;
  2777  0512  01EA               	clrf	getPIR_AD@i
  2778  0513  01E6               	clrf	getPIR_AD@j
  2779                           
  2780                           ;PIR_B1.c: 329: char VRAD = 0, VRAD1 = 0;
  2781  0514  01E9               	clrf	getPIR_AD@VRAD
  2782  0515  01E8               	clrf	getPIR_AD@VRAD1
  2783                           
  2784                           ;PIR_B1.c: 330: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2785  0516  1683               	bsf	3,5	;RP0=1, select bank1
  2786  0517  1303               	bcf	3,6	;RP1=0, select bank1
  2787  0518  1CA0               	btfss	__PIR^(0+128),1
  2788  0519  0008               	return
  2789  051A  1920               	btfsc	__PIR^(0+128),2
  2790  051B  0008               	return
  2791                           
  2792                           ;PIR_B1.c: 331: _PIR.GO = 1;
  2793  051C  1520               	bsf	__PIR^(0+128),2
  2794                           
  2795                           ;PIR_B1.c: 338: VRAD1 = getAD(channel1, 0x70);
  2796  051D  3070               	movlw	112
  2797  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2798  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2799  0520  00E3               	movwf	??_getPIR_AD
  2800  0521  0863               	movf	??_getPIR_AD,w
  2801  0522  00F9               	movwf	getAD@adcon1
  2802  0523  0867               	movf	getPIR_AD@channel1,w
  2803  0524  158A  22A0  118A   	fcall	_getAD
  2804  0527  1283               	bcf	3,5	;RP0=0, select bank0
  2805  0528  1303               	bcf	3,6	;RP1=0, select bank0
  2806  0529  00E4               	movwf	??_getPIR_AD+1
  2807  052A  0864               	movf	??_getPIR_AD+1,w
  2808  052B  00E8               	movwf	getPIR_AD@VRAD1
  2809                           
  2810                           ;PIR_B1.c: 339: VRAD = VRAD1 / 25;
  2811  052C  3019               	movlw	25
  2812  052D  00DA               	movwf	___awdiv@divisor
  2813  052E  3000               	movlw	0
  2814  052F  00DB               	movwf	___awdiv@divisor+1
  2815  0530  0868               	movf	getPIR_AD@VRAD1,w
  2816  0531  00E3               	movwf	??_getPIR_AD
  2817  0532  01E4               	clrf	??_getPIR_AD+1
  2818  0533  0863               	movf	??_getPIR_AD,w
  2819  0534  00DC               	movwf	___awdiv@dividend
  2820  0535  0864               	movf	??_getPIR_AD+1,w
  2821  0536  00DD               	movwf	___awdiv@dividend+1
  2822  0537  158A  2611  118A   	fcall	___awdiv
  2823  053A  1283               	bcf	3,5	;RP0=0, select bank0
  2824  053B  1303               	bcf	3,6	;RP1=0, select bank0
  2825  053C  085A               	movf	?___awdiv,w
  2826  053D  00E5               	movwf	??_getPIR_AD+2
  2827  053E  0865               	movf	??_getPIR_AD+2,w
  2828  053F  00E9               	movwf	getPIR_AD@VRAD
  2829                           
  2830                           ;PIR_B1.c: 340: _PIR.SignalAD = getAD(channel2, 0x70);
  2831  0540  3070               	movlw	112
  2832  0541  00E3               	movwf	??_getPIR_AD
  2833  0542  0863               	movf	??_getPIR_AD,w
  2834  0543  00F9               	movwf	getAD@adcon1
  2835  0544  0862               	movf	getPIR_AD@channel2,w
  2836  0545  158A  22A0  118A   	fcall	_getAD
  2837  0548  1283               	bcf	3,5	;RP0=0, select bank0
  2838  0549  1303               	bcf	3,6	;RP1=0, select bank0
  2839  054A  00E4               	movwf	??_getPIR_AD+1
  2840  054B  0864               	movf	??_getPIR_AD+1,w
  2841  054C  1683               	bsf	3,5	;RP0=1, select bank1
  2842  054D  1303               	bcf	3,6	;RP1=0, select bank1
  2843  054E  00A1               	movwf	(__PIR^(0+128)+1)
  2844                           
  2845                           ;PIR_B1.c: 354: if (VRAD < 1) {
  2846  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2847  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2848  0551  08E9               	movf	getPIR_AD@VRAD,f
  2849  0552  1D03               	skipz
  2850  0553  2D56               	goto	l6888
  2851                           
  2852                           ;PIR_B1.c: 355: _PIR.CloseTimeValue = 5;
  2853  0554  3005               	movlw	5
  2854  0555  2D5C               	goto	L1
  2855  0556                     l6888:	
  2856                           ;PIR_B1.c: 356: } else if (VRAD < 3) {
  2857                           
  2858  0556  3003               	movlw	3
  2859  0557  1283               	bcf	3,5	;RP0=0, select bank0
  2860  0558  0269               	subwf	getPIR_AD@VRAD,w
  2861  0559  1803               	skipnc
  2862  055A  2D61               	goto	l6892
  2863                           
  2864                           ;PIR_B1.c: 357: _PIR.CloseTimeValue = 60;
  2865  055B  303C               	movlw	60
  2866  055C                     L1:	
  2867  055C  1683               	bsf	3,5	;RP0=1, select bank1
  2868  055D  1303               	bcf	3,6	;RP1=0, select bank1
  2869  055E  00C3               	movwf	(__PIR^(0+128)+35)
  2870  055F  3000               	movlw	0
  2871  0560  2D87               	goto	L5
  2872  0561                     l6892:	
  2873                           ;PIR_B1.c: 358: } else if (VRAD < 5) {
  2874                           
  2875  0561  3005               	movlw	5
  2876  0562  1283               	bcf	3,5	;RP0=0, select bank0
  2877  0563  0269               	subwf	getPIR_AD@VRAD,w
  2878  0564  1803               	skipnc
  2879  0565  2D6C               	goto	l6896
  2880                           
  2881                           ;PIR_B1.c: 359: _PIR.CloseTimeValue = 300;
  2882  0566  302C               	movlw	44
  2883  0567  1683               	bsf	3,5	;RP0=1, select bank1
  2884  0568  1303               	bcf	3,6	;RP1=0, select bank1
  2885  0569  00C3               	movwf	(__PIR^(0+128)+35)
  2886  056A  3001               	movlw	1
  2887  056B  2D87               	goto	L5
  2888  056C                     l6896:	
  2889                           ;PIR_B1.c: 360: } else if (VRAD < 7) {
  2890                           
  2891  056C  3007               	movlw	7
  2892  056D  1283               	bcf	3,5	;RP0=0, select bank0
  2893  056E  0269               	subwf	getPIR_AD@VRAD,w
  2894  056F  1803               	skipnc
  2895  0570  2D77               	goto	l6900
  2896                           
  2897                           ;PIR_B1.c: 361: _PIR.CloseTimeValue = 600;
  2898  0571  3058               	movlw	88
  2899  0572  1683               	bsf	3,5	;RP0=1, select bank1
  2900  0573  1303               	bcf	3,6	;RP1=0, select bank1
  2901  0574  00C3               	movwf	(__PIR^(0+128)+35)
  2902  0575  3002               	movlw	2
  2903  0576  2D87               	goto	L5
  2904  0577                     l6900:	
  2905                           ;PIR_B1.c: 362: } else if (VRAD < 9) {
  2906                           
  2907  0577  3009               	movlw	9
  2908  0578  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0579  0269               	subwf	getPIR_AD@VRAD,w
  2910  057A  1803               	skipnc
  2911  057B  2D82               	goto	l6904
  2912                           
  2913                           ;PIR_B1.c: 363: _PIR.CloseTimeValue = 900;
  2914  057C  3084               	movlw	132
  2915  057D  1683               	bsf	3,5	;RP0=1, select bank1
  2916  057E  1303               	bcf	3,6	;RP1=0, select bank1
  2917  057F  00C3               	movwf	(__PIR^(0+128)+35)
  2918  0580  3003               	movlw	3
  2919  0581  2D87               	goto	L5
  2920  0582                     l6904:	
  2921                           ;PIR_B1.c: 364: } else {
  2922                           
  2923                           
  2924                           ;PIR_B1.c: 365: _PIR.CloseTimeValue = 1200;
  2925  0582  30B0               	movlw	176
  2926  0583  1683               	bsf	3,5	;RP0=1, select bank1
  2927  0584  1303               	bcf	3,6	;RP1=0, select bank1
  2928  0585  00C3               	movwf	(__PIR^(0+128)+35)
  2929  0586  3004               	movlw	4
  2930  0587                     L5:	
  2931  0587  00C4               	movwf	(__PIR^(0+128)+36)
  2932                           
  2933                           ;PIR_B1.c: 366: }
  2934                           ;PIR_B1.c: 375: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2935  0588  0821               	movf	(__PIR^(0+128)+1),w
  2936  0589  1283               	bcf	3,5	;RP0=0, select bank0
  2937  058A  1303               	bcf	3,6	;RP1=0, select bank0
  2938  058B  00E3               	movwf	??_getPIR_AD
  2939  058C  1683               	bsf	3,5	;RP0=1, select bank1
  2940  058D  1303               	bcf	3,6	;RP1=0, select bank1
  2941  058E  0824               	movf	(__PIR^(0+128)+4),w
  2942  058F  3EA5               	addlw	(__PIR+5)& (0+255)
  2943  0590  0084               	movwf	4
  2944  0591  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0592  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0593  0863               	movf	??_getPIR_AD,w
  2947  0594  1383               	bcf	3,7	;select IRP bank1
  2948  0595  0080               	movwf	0
  2949                           
  2950                           ;PIR_B1.c: 376: for (i = 0; i < 10; i++) {
  2951  0596  01EA               	clrf	getPIR_AD@i
  2952  0597  300A               	movlw	10
  2953  0598  026A               	subwf	getPIR_AD@i,w
  2954  0599  1803               	btfsc	3,0
  2955  059A  2DB7               	goto	l6920
  2956  059B                     l6914:	
  2957                           
  2958                           ;PIR_B1.c: 377: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2959  059B  086A               	movf	getPIR_AD@i,w
  2960  059C  3EA5               	addlw	(__PIR+5)& (0+255)
  2961  059D  0084               	movwf	4
  2962  059E  0800               	movf	0,w
  2963  059F  00E3               	movwf	??_getPIR_AD
  2964  05A0  01E4               	clrf	??_getPIR_AD+1
  2965  05A1  0863               	movf	??_getPIR_AD,w
  2966  05A2  1683               	bsf	3,5	;RP0=1, select bank1
  2967  05A3  1303               	bcf	3,6	;RP1=0, select bank1
  2968  05A4  07AF               	addwf	(__PIR^(0+128)+15),f
  2969  05A5  1803               	skipnc
  2970  05A6  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2971  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  2972  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  2973  05A9  0864               	movf	??_getPIR_AD+1,w
  2974  05AA  1683               	bsf	3,5	;RP0=1, select bank1
  2975  05AB  1303               	bcf	3,6	;RP1=0, select bank1
  2976  05AC  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2977  05AD  3001               	movlw	1
  2978  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  2979  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  2980  05B0  00E3               	movwf	??_getPIR_AD
  2981  05B1  0863               	movf	??_getPIR_AD,w
  2982  05B2  07EA               	addwf	getPIR_AD@i,f
  2983  05B3  300A               	movlw	10
  2984  05B4  026A               	subwf	getPIR_AD@i,w
  2985  05B5  1C03               	skipc
  2986  05B6  2D9B               	goto	l6914
  2987  05B7                     l6920:	
  2988                           
  2989                           ;PIR_B1.c: 378: }
  2990                           ;PIR_B1.c: 379: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2991  05B7  300A               	movlw	10
  2992  05B8  00DA               	movwf	___lwdiv@divisor
  2993  05B9  3000               	movlw	0
  2994  05BA  00DB               	movwf	___lwdiv@divisor+1
  2995  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  2996  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  2997  05BD  0830               	movf	((__PIR+1)^(0+128)+15),w
  2998  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  2999  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  3000  05C0  01DD               	clrf	___lwdiv@dividend+1
  3001  05C1  07DD               	addwf	___lwdiv@dividend+1,f
  3002  05C2  1683               	bsf	3,5	;RP0=1, select bank1
  3003  05C3  1303               	bcf	3,6	;RP1=0, select bank1
  3004  05C4  082F               	movf	(__PIR^(0+128)+15),w
  3005  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  3006  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  3007  05C7  01DC               	clrf	___lwdiv@dividend
  3008  05C8  07DC               	addwf	___lwdiv@dividend,f
  3009  05C9  158A  24A8  118A   	fcall	___lwdiv
  3010  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  3011  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  3012  05CE  085A               	movf	?___lwdiv,w
  3013  05CF  00E3               	movwf	??_getPIR_AD
  3014  05D0  1683               	bsf	3,5	;RP0=1, select bank1
  3015  05D1  1303               	bcf	3,6	;RP1=0, select bank1
  3016  05D2  0831               	movf	(__PIR^(0+128)+17),w
  3017  05D3  3EB2               	addlw	(__PIR+18)& (0+255)
  3018  05D4  0084               	movwf	4
  3019  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3020  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3021  05D7  0863               	movf	??_getPIR_AD,w
  3022  05D8  1383               	bcf	3,7	;select IRP bank1
  3023  05D9  0080               	movwf	0
  3024                           
  3025                           ;PIR_B1.c: 380: _PIR.TenAverageValue = 0;
  3026  05DA  1683               	bsf	3,5	;RP0=1, select bank1
  3027  05DB  1303               	bcf	3,6	;RP1=0, select bank1
  3028  05DC  01AF               	clrf	(__PIR^(0+128)+15)
  3029  05DD  01B0               	clrf	((__PIR+1)^(0+128)+15)
  3030                           
  3031                           ;PIR_B1.c: 382: for (i = 0; i <= 9; i++) {
  3032  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3033  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  3034  05E0  01EA               	clrf	getPIR_AD@i
  3035  05E1  300A               	movlw	10
  3036  05E2  026A               	subwf	getPIR_AD@i,w
  3037  05E3  1803               	btfsc	3,0
  3038  05E4  2E01               	goto	l6936
  3039  05E5                     l6930:	
  3040                           
  3041                           ;PIR_B1.c: 383: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  3042  05E5  086A               	movf	getPIR_AD@i,w
  3043  05E6  3EB2               	addlw	(__PIR+18)& (0+255)
  3044  05E7  0084               	movwf	4
  3045  05E8  0800               	movf	0,w
  3046  05E9  00E3               	movwf	??_getPIR_AD
  3047  05EA  01E4               	clrf	??_getPIR_AD+1
  3048  05EB  0863               	movf	??_getPIR_AD,w
  3049  05EC  1683               	bsf	3,5	;RP0=1, select bank1
  3050  05ED  1303               	bcf	3,6	;RP1=0, select bank1
  3051  05EE  07BC               	addwf	(__PIR^(0+128)+28),f
  3052  05EF  1803               	skipnc
  3053  05F0  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  3054  05F1  1283               	bcf	3,5	;RP0=0, select bank0
  3055  05F2  1303               	bcf	3,6	;RP1=0, select bank0
  3056  05F3  0864               	movf	??_getPIR_AD+1,w
  3057  05F4  1683               	bsf	3,5	;RP0=1, select bank1
  3058  05F5  1303               	bcf	3,6	;RP1=0, select bank1
  3059  05F6  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  3060  05F7  3001               	movlw	1
  3061  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  3062  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  3063  05FA  00E3               	movwf	??_getPIR_AD
  3064  05FB  0863               	movf	??_getPIR_AD,w
  3065  05FC  07EA               	addwf	getPIR_AD@i,f
  3066  05FD  300A               	movlw	10
  3067  05FE  026A               	subwf	getPIR_AD@i,w
  3068  05FF  1C03               	skipc
  3069  0600  2DE5               	goto	l6930
  3070  0601                     l6936:	
  3071                           
  3072                           ;PIR_B1.c: 384: }
  3073                           ;PIR_B1.c: 385: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  3074  0601  300A               	movlw	10
  3075  0602  00DA               	movwf	___lwdiv@divisor
  3076  0603  3000               	movlw	0
  3077  0604  00DB               	movwf	___lwdiv@divisor+1
  3078  0605  1683               	bsf	3,5	;RP0=1, select bank1
  3079  0606  1303               	bcf	3,6	;RP1=0, select bank1
  3080  0607  083D               	movf	((__PIR+1)^(0+128)+28),w
  3081  0608  1283               	bcf	3,5	;RP0=0, select bank0
  3082  0609  1303               	bcf	3,6	;RP1=0, select bank0
  3083  060A  01DD               	clrf	___lwdiv@dividend+1
  3084  060B  07DD               	addwf	___lwdiv@dividend+1,f
  3085  060C  1683               	bsf	3,5	;RP0=1, select bank1
  3086  060D  1303               	bcf	3,6	;RP1=0, select bank1
  3087  060E  083C               	movf	(__PIR^(0+128)+28),w
  3088  060F  1283               	bcf	3,5	;RP0=0, select bank0
  3089  0610  1303               	bcf	3,6	;RP1=0, select bank0
  3090  0611  01DC               	clrf	___lwdiv@dividend
  3091  0612  07DC               	addwf	___lwdiv@dividend,f
  3092  0613  158A  24A8  118A   	fcall	___lwdiv
  3093  0616  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0617  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0618  085A               	movf	?___lwdiv,w
  3096  0619  00E3               	movwf	??_getPIR_AD
  3097  061A  0863               	movf	??_getPIR_AD,w
  3098  061B  1683               	bsf	3,5	;RP0=1, select bank1
  3099  061C  1303               	bcf	3,6	;RP1=0, select bank1
  3100  061D  00A3               	movwf	(__PIR^(0+128)+3)
  3101                           
  3102                           ;PIR_B1.c: 386: _PIR.HundredAverageValue = 0;
  3103  061E  01BC               	clrf	(__PIR^(0+128)+28)
  3104  061F  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3105                           
  3106                           ;PIR_B1.c: 388: if (_PIR.TenCount < 10) {
  3107  0620  300A               	movlw	10
  3108  0621  0224               	subwf	(__PIR^(0+128)+4),w
  3109  0622  1803               	skipnc
  3110  0623  2E2D               	goto	l6944
  3111                           
  3112                           ;PIR_B1.c: 389: _PIR.TenCount++;
  3113  0624  3001               	movlw	1
  3114  0625  1283               	bcf	3,5	;RP0=0, select bank0
  3115  0626  1303               	bcf	3,6	;RP1=0, select bank0
  3116  0627  00E3               	movwf	??_getPIR_AD
  3117  0628  0863               	movf	??_getPIR_AD,w
  3118  0629  1683               	bsf	3,5	;RP0=1, select bank1
  3119  062A  1303               	bcf	3,6	;RP1=0, select bank1
  3120  062B  07A4               	addwf	(__PIR^(0+128)+4),f
  3121                           
  3122                           ;PIR_B1.c: 390: } else {
  3123  062C  0008               	return
  3124  062D                     l6944:	
  3125                           
  3126                           ;PIR_B1.c: 391: _PIR.TenCount = 0;
  3127  062D  01A4               	clrf	(__PIR^(0+128)+4)
  3128                           
  3129                           ;PIR_B1.c: 392: if (_PIR.HundreCount < 10)
  3130  062E  300A               	movlw	10
  3131  062F  0231               	subwf	(__PIR^(0+128)+17),w
  3132  0630  1803               	skipnc
  3133  0631  2E3B               	goto	l6950
  3134                           
  3135                           ;PIR_B1.c: 393: _PIR.HundreCount++;
  3136  0632  3001               	movlw	1
  3137  0633  1283               	bcf	3,5	;RP0=0, select bank0
  3138  0634  1303               	bcf	3,6	;RP1=0, select bank0
  3139  0635  00E3               	movwf	??_getPIR_AD
  3140  0636  0863               	movf	??_getPIR_AD,w
  3141  0637  1683               	bsf	3,5	;RP0=1, select bank1
  3142  0638  1303               	bcf	3,6	;RP1=0, select bank1
  3143  0639  07B1               	addwf	(__PIR^(0+128)+17),f
  3144  063A  0008               	return
  3145  063B                     l6950:	
  3146                           
  3147                           ;PIR_B1.c: 394: else
  3148                           ;PIR_B1.c: 395: _PIR.HundreCount = 0;
  3149  063B  01B1               	clrf	(__PIR^(0+128)+17)
  3150  063C  0008               	return
  3151  063D                     __end_of_getPIR_AD:	
  3152                           
  3153                           	psect	text5
  3154  0DB5                     __ptext5:	
  3155 ;; *************** function _getLoad_AD *****************
  3156 ;; Defined at:
  3157 ;;		line 15 in file "../src/OverLoad_B1.c"
  3158 ;; Parameters:    Size  Location     Type
  3159 ;;  channel         1    wreg     unsigned char 
  3160 ;; Auto vars:     Size  Location     Type
  3161 ;;  channel         1    3[BANK0 ] unsigned char 
  3162 ;;  i               1    7[BANK0 ] unsigned char 
  3163 ;;  ADRES           1    6[BANK0 ] unsigned char 
  3164 ;;  j               1    5[BANK0 ] unsigned char 
  3165 ;;  k               1    4[BANK0 ] unsigned char 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3175 ;;      Params:         0       0       0       0
  3176 ;;      Locals:         0       5       0       0
  3177 ;;      Temps:          0       2       0       0
  3178 ;;      Totals:         0       7       0       0
  3179 ;;Total ram usage:        7 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    4
  3182 ;; This function calls:
  3183 ;;		_getAD
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           
  3190                           ;psect for function _getLoad_AD
  3191  0DB5                     _getLoad_AD:	
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3195                           ;getLoad_AD@channel stored from wreg
  3196  0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  3197  0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  3198  0DB7  00DD               	movwf	getLoad_AD@channel
  3199                           
  3200                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3201  0DB8  01E1               	clrf	getLoad_AD@i
  3202  0DB9  01DF               	clrf	getLoad_AD@j
  3203  0DBA  01DE               	clrf	getLoad_AD@k
  3204                           
  3205                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3206  0DBB  01E0               	clrf	getLoad_AD@ADRES
  3207                           
  3208                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3209  0DBC  1683               	bsf	3,5	;RP0=1, select bank1
  3210  0DBD  1303               	bcf	3,6	;RP1=0, select bank1
  3211  0DBE  1E4A               	btfss	_Load^(0+128),4
  3212  0DBF  0008               	return
  3213                           
  3214                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3215  0DC0  3073               	movlw	115
  3216  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0DC3  00DB               	movwf	??_getLoad_AD
  3219  0DC4  085B               	movf	??_getLoad_AD,w
  3220  0DC5  00F9               	movwf	getAD@adcon1
  3221  0DC6  085D               	movf	getLoad_AD@channel,w
  3222  0DC7  158A  22A0  158A   	fcall	_getAD
  3223  0DCA  1283               	bcf	3,5	;RP0=0, select bank0
  3224  0DCB  1303               	bcf	3,6	;RP1=0, select bank0
  3225  0DCC  00DC               	movwf	??_getLoad_AD+1
  3226  0DCD  085C               	movf	??_getLoad_AD+1,w
  3227  0DCE  00E0               	movwf	getLoad_AD@ADRES
  3228                           
  3229                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3230  0DCF  01E1               	clrf	getLoad_AD@i
  3231  0DD0  3004               	movlw	4
  3232  0DD1  0261               	subwf	getLoad_AD@i,w
  3233  0DD2  1803               	btfsc	3,0
  3234  0DD3  2DF0               	goto	l6836
  3235  0DD4                     l6824:	
  3236                           
  3237                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3238  0DD4  0861               	movf	getLoad_AD@i,w
  3239  0DD5  3ED4               	addlw	(_Load+10)& (0+255)
  3240  0DD6  0084               	movwf	4
  3241  0DD7  0860               	movf	getLoad_AD@ADRES,w
  3242  0DD8  1383               	bcf	3,7	;select IRP bank1
  3243  0DD9  0200               	subwf	0,w
  3244  0DDA  1803               	skipnc
  3245  0DDB  2DE8               	goto	l6832
  3246  0DDC  08DF               	movf	getLoad_AD@j,f
  3247  0DDD  1D03               	skipz
  3248  0DDE  2DE8               	goto	l6832
  3249                           
  3250                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3251  0DDF  0860               	movf	getLoad_AD@ADRES,w
  3252  0DE0  00DB               	movwf	??_getLoad_AD
  3253  0DE1  0861               	movf	getLoad_AD@i,w
  3254  0DE2  3ED4               	addlw	(_Load+10)& (0+255)
  3255  0DE3  0084               	movwf	4
  3256  0DE4  085B               	movf	??_getLoad_AD,w
  3257  0DE5  0080               	movwf	0
  3258                           
  3259                           ;OverLoad_B1.c: 24: j = 1;
  3260  0DE6  01DF               	clrf	getLoad_AD@j
  3261  0DE7  0ADF               	incf	getLoad_AD@j,f
  3262  0DE8                     l6832:	
  3263  0DE8  3001               	movlw	1
  3264  0DE9  00DB               	movwf	??_getLoad_AD
  3265  0DEA  085B               	movf	??_getLoad_AD,w
  3266  0DEB  07E1               	addwf	getLoad_AD@i,f
  3267  0DEC  3004               	movlw	4
  3268  0DED  0261               	subwf	getLoad_AD@i,w
  3269  0DEE  1C03               	skipc
  3270  0DEF  2DD4               	goto	l6824
  3271  0DF0                     l6836:	
  3272                           
  3273                           ;OverLoad_B1.c: 25: }
  3274                           ;OverLoad_B1.c: 26: }
  3275                           ;OverLoad_B1.c: 27: if (j == 0) {
  3276  0DF0  08DF               	movf	getLoad_AD@j,f
  3277  0DF1  1D03               	skipz
  3278  0DF2  0008               	return
  3279                           
  3280                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3281  0DF3  01E1               	clrf	getLoad_AD@i
  3282  0DF4                     L6:	
  3283  0DF4  3004               	movlw	4
  3284  0DF5  0261               	subwf	getLoad_AD@i,w
  3285  0DF6  1803               	btfsc	3,0
  3286  0DF7  0008               	return
  3287                           
  3288                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3289  0DF8  0861               	movf	getLoad_AD@i,w
  3290  0DF9  3ED9               	addlw	(_Load+15)& (0+255)
  3291  0DFA  0084               	movwf	4
  3292  0DFB  1383               	bcf	3,7	;select IRP bank1
  3293  0DFC  0800               	movf	0,w
  3294  0DFD  0260               	subwf	getLoad_AD@ADRES,w
  3295  0DFE  1803               	skipnc
  3296  0DFF  2E0C               	goto	l6852
  3297  0E00  08DE               	movf	getLoad_AD@k,f
  3298  0E01  1D03               	skipz
  3299  0E02  2E0C               	goto	l6852
  3300                           
  3301                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3302  0E03  0860               	movf	getLoad_AD@ADRES,w
  3303  0E04  00DB               	movwf	??_getLoad_AD
  3304  0E05  0861               	movf	getLoad_AD@i,w
  3305  0E06  3ED9               	addlw	(_Load+15)& (0+255)
  3306  0E07  0084               	movwf	4
  3307  0E08  085B               	movf	??_getLoad_AD,w
  3308  0E09  0080               	movwf	0
  3309                           
  3310                           ;OverLoad_B1.c: 31: k = 1;
  3311  0E0A  01DE               	clrf	getLoad_AD@k
  3312  0E0B  0ADE               	incf	getLoad_AD@k,f
  3313  0E0C                     l6852:	
  3314  0E0C  3001               	movlw	1
  3315  0E0D  00DB               	movwf	??_getLoad_AD
  3316  0E0E  085B               	movf	??_getLoad_AD,w
  3317  0E0F  07E1               	addwf	getLoad_AD@i,f
  3318  0E10  2DF4               	goto	L6
  3319  0E11                     __end_of_getLoad_AD:	
  3320                           
  3321                           	psect	text6
  3322  0ABC                     __ptext6:	
  3323 ;; *************** function _getCDS_AD *****************
  3324 ;; Defined at:
  3325 ;;		line 48 in file "../src/CDS_B1.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  channel1        1    wreg     unsigned char 
  3328 ;;  channel2        1    1[BANK0 ] unsigned char 
  3329 ;; Auto vars:     Size  Location     Type
  3330 ;;  channel1        1    6[BANK0 ] unsigned char 
  3331 ;;  j               1    5[BANK0 ] unsigned char 
  3332 ;;  i               1    4[BANK0 ] unsigned char 
  3333 ;; Return value:  Size  Location     Type
  3334 ;;		None               void
  3335 ;; Registers used:
  3336 ;;		wreg, status,2, status,0, pclath, cstack
  3337 ;; Tracked objects:
  3338 ;;		On entry : 0/0
  3339 ;;		On exit  : 0/0
  3340 ;;		Unchanged: 0/0
  3341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3342 ;;      Params:         0       1       0       0
  3343 ;;      Locals:         0       3       0       0
  3344 ;;      Temps:          0       2       0       0
  3345 ;;      Totals:         0       6       0       0
  3346 ;;Total ram usage:        6 bytes
  3347 ;; Hardware stack levels used:    1
  3348 ;; Hardware stack levels required when called:    4
  3349 ;; This function calls:
  3350 ;;		_getAD
  3351 ;; This function is called by:
  3352 ;;		_main
  3353 ;; This function uses a non-reentrant model
  3354 ;;
  3355                           
  3356                           
  3357                           ;psect for function _getCDS_AD
  3358  0ABC                     _getCDS_AD:	
  3359                           
  3360                           ;incstack = 0
  3361                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3362                           ;getCDS_AD@channel1 stored from wreg
  3363  0ABC  1283               	bcf	3,5	;RP0=0, select bank0
  3364  0ABD  1303               	bcf	3,6	;RP1=0, select bank0
  3365  0ABE  00E0               	movwf	getCDS_AD@channel1
  3366                           
  3367                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3368  0ABF  01DE               	clrf	getCDS_AD@i
  3369  0AC0  01DF               	clrf	getCDS_AD@j
  3370                           
  3371                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3372  0AC1  1DB6               	btfss	__CDS,3
  3373  0AC2  0008               	return
  3374                           
  3375                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3376  0AC3  14B6               	bsf	__CDS,1
  3377                           
  3378                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3379  0AC4  3070               	movlw	112
  3380  0AC5  00DC               	movwf	??_getCDS_AD
  3381  0AC6  085C               	movf	??_getCDS_AD,w
  3382  0AC7  00F9               	movwf	getAD@adcon1
  3383  0AC8  0860               	movf	getCDS_AD@channel1,w
  3384  0AC9  158A  22A0  158A   	fcall	_getAD
  3385  0ACC  1283               	bcf	3,5	;RP0=0, select bank0
  3386  0ACD  1303               	bcf	3,6	;RP1=0, select bank0
  3387  0ACE  00DD               	movwf	??_getCDS_AD+1
  3388  0ACF  085D               	movf	??_getCDS_AD+1,w
  3389  0AD0  00B8               	movwf	__CDS+2
  3390                           
  3391                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3392  0AD1  3070               	movlw	112
  3393  0AD2  00DC               	movwf	??_getCDS_AD
  3394  0AD3  085C               	movf	??_getCDS_AD,w
  3395  0AD4  00F9               	movwf	getAD@adcon1
  3396  0AD5  085B               	movf	getCDS_AD@channel2,w
  3397  0AD6  158A  22A0         	fcall	_getAD
  3398  0AD8  1283               	bcf	3,5	;RP0=0, select bank0
  3399  0AD9  1303               	bcf	3,6	;RP1=0, select bank0
  3400  0ADA  00DD               	movwf	??_getCDS_AD+1
  3401  0ADB  085D               	movf	??_getCDS_AD+1,w
  3402  0ADC  00B9               	movwf	__CDS+3
  3403  0ADD  0008               	return
  3404  0ADE                     __end_of_getCDS_AD:	
  3405                           
  3406                           	psect	text7
  3407  0AA0                     __ptext7:	
  3408 ;; *************** function _getAD *****************
  3409 ;; Defined at:
  3410 ;;		line 432 in file "../src/MCU_B1.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  adcon0          1    wreg     unsigned char 
  3413 ;;  adcon1          1    4[COMMON] unsigned char 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  adcon0          1    0[BANK0 ] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      unsigned char 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0, pclath, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3425 ;;      Params:         1       0       0       0
  3426 ;;      Locals:         0       1       0       0
  3427 ;;      Temps:          0       0       0       0
  3428 ;;      Totals:         1       1       0       0
  3429 ;;Total ram usage:        2 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    3
  3432 ;; This function calls:
  3433 ;;		_Timeout_Counter
  3434 ;;		_set_TimeoutCleared
  3435 ;; This function is called by:
  3436 ;;		_getCDS_AD
  3437 ;;		_getLoad_AD
  3438 ;;		_getTemp_AD
  3439 ;;		_getPIR_AD
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _getAD
  3445  0AA0                     _getAD:	
  3446                           
  3447                           ;incstack = 0
  3448                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3449                           ;getAD@adcon0 stored from wreg
  3450  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0AA2  00DA               	movwf	getAD@adcon0
  3453                           
  3454                           ;MCU_B1.c: 433: ADCON0 = adcon0;
  3455  0AA3  085A               	movf	getAD@adcon0,w
  3456  0AA4  009F               	movwf	31	;volatile
  3457                           
  3458                           ;MCU_B1.c: 434: ADCON1 = adcon1;
  3459  0AA5  0879               	movf	getAD@adcon1,w
  3460  0AA6  1683               	bsf	3,5	;RP0=1, select bank1
  3461  0AA7  1303               	bcf	3,6	;RP1=0, select bank1
  3462  0AA8  009F               	movwf	31	;volatile
  3463                           
  3464                           ;MCU_B1.c: 435: GO_nDONE = 1;
  3465  0AA9  1283               	bcf	3,5	;RP0=0, select bank0
  3466  0AAA  1303               	bcf	3,6	;RP1=0, select bank0
  3467  0AAB  149F               	bsf	31,1	;volatile
  3468                           
  3469                           ;MCU_B1.c: 436: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3470  0AAC  2AB0               	goto	l6554
  3471  0AAD                     l6552:	
  3472                           
  3473                           ;MCU_B1.c: 437: Timeout_Counter();
  3474  0AAD  158A  2188  158A   	fcall	_Timeout_Counter
  3475  0AB0                     l6554:	
  3476  0AB0  1283               	bcf	3,5	;RP0=0, select bank0
  3477  0AB1  1303               	bcf	3,6	;RP1=0, select bank0
  3478  0AB2  1C9F               	btfss	31,1	;volatile
  3479  0AB3  2AB6               	goto	l6558
  3480  0AB4  1D33               	btfss	_myMain+2,2
  3481  0AB5  2AAD               	goto	l6552
  3482  0AB6                     l6558:	
  3483                           
  3484                           ;MCU_B1.c: 438: };
  3485                           ;MCU_B1.c: 439: set_TimeoutCleared();
  3486  0AB6  158A  2077         	fcall	_set_TimeoutCleared
  3487                           
  3488                           ;MCU_B1.c: 440: return ADRES;
  3489  0AB8  1283               	bcf	3,5	;RP0=0, select bank0
  3490  0AB9  1303               	bcf	3,6	;RP1=0, select bank0
  3491  0ABA  081E               	movf	30,w	;volatile
  3492  0ABB  0008               	return
  3493  0ABC                     __end_of_getAD:	
  3494                           
  3495                           	psect	text8
  3496  0952                     __ptext8:	
  3497 ;; *************** function _WDT_Main *****************
  3498 ;; Defined at:
  3499 ;;		line 1103 in file "../src/MCU_B1.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;		None               void
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, status,0, pclath, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3513 ;;      Params:         0       0       0       0
  3514 ;;      Locals:         0       0       0       0
  3515 ;;      Temps:          1       0       0       0
  3516 ;;      Totals:         1       0       0       0
  3517 ;;Total ram usage:        1 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    3
  3520 ;; This function calls:
  3521 ;;		_WDT_Clearing
  3522 ;; This function is called by:
  3523 ;;		_main
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           
  3528                           ;psect for function _WDT_Main
  3529  0952                     _WDT_Main:	
  3530                           
  3531                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  3532                           
  3533                           ;incstack = 0
  3534                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3535  0952  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0953  1303               	bcf	3,6	;RP1=0, select bank0
  3537  0954  1C3D               	btfss	_WDT,0
  3538  0955  0008               	return
  3539                           
  3540                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  3541  0956  3001               	movlw	1
  3542  0957  02BE               	subwf	_WDT+1,f
  3543  0958  083E               	movf	_WDT+1,w
  3544  0959  3AFF               	xorlw	255
  3545  095A  1903               	skipnz
  3546  095B  0008               	return
  3547                           
  3548                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  3549  095C  3064               	movlw	100
  3550  095D  00F9               	movwf	??_WDT_Main
  3551  095E  0879               	movf	??_WDT_Main,w
  3552  095F  00BE               	movwf	_WDT+1
  3553                           
  3554                           ;MCU_B1.c: 1107: WDT_Clearing();
  3555  0960  118A  2002         	fcall	_WDT_Clearing
  3556  0962  0008               	return
  3557  0963                     __end_of_WDT_Main:	
  3558                           
  3559                           	psect	text9
  3560  0002                     __ptext9:	
  3561 ;; *************** function _WDT_Clearing *****************
  3562 ;; Defined at:
  3563 ;;		line 1113 in file "../src/MCU_B1.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;		None
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;		None               void
  3570 ;; Registers used:
  3571 ;;		None
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3577 ;;      Params:         0       0       0       0
  3578 ;;      Locals:         0       0       0       0
  3579 ;;      Temps:          0       0       0       0
  3580 ;;      Totals:         0       0       0       0
  3581 ;;Total ram usage:        0 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:    2
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		_WDT_Main
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           
  3592                           ;psect for function _WDT_Clearing
  3593  0002                     _WDT_Clearing:	
  3594                           
  3595                           ;incstack = 0
  3596                           ; Regs used in _WDT_Clearing: []
  3597  0002  0064               	clrwdt	;# 
  3598  0003  0008               	return
  3599  0004                     __end_of_WDT_Clearing:	
  3600                           
  3601                           	psect	text10
  3602  07FD                     __ptext10:	
  3603 ;; *************** function _Temp_Main *****************
  3604 ;; Defined at:
  3605 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;		None               void
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0, pclath, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3619 ;;      Params:         0       0       0       0
  3620 ;;      Locals:         0       0       0       0
  3621 ;;      Temps:          0       0       0       0
  3622 ;;      Totals:         0       0       0       0
  3623 ;;Total ram usage:        0 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    5
  3626 ;; This function calls:
  3627 ;;		_setTemp_Main
  3628 ;; This function is called by:
  3629 ;;		_main
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           
  3634                           ;psect for function _Temp_Main
  3635  07FD                     _Temp_Main:	
  3636                           
  3637                           ;OverTemperature_B1.c: 54: setTemp_Main();
  3638                           
  3639                           ;incstack = 0
  3640                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3641  07FD  158A  2769         	fcall	_setTemp_Main
  3642  07FF  0008               	return
  3643  0800                     __end_of_Temp_Main:	
  3644                           
  3645                           	psect	text11
  3646  0F69                     __ptext11:	
  3647 ;; *************** function _setTemp_Main *****************
  3648 ;; Defined at:
  3649 ;;		line 59 in file "../src/OverTemperature_B1.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  AD              1   16[BANK0 ] unsigned char 
  3654 ;;  DangerValue     1   15[BANK0 ] unsigned char 
  3655 ;;  SafeValue       1   14[BANK0 ] unsigned char 
  3656 ;;  error           1   13[BANK0 ] unsigned char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;		None               void
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, pclath, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3666 ;;      Params:         0       0       0       0
  3667 ;;      Locals:         0       4       0       0
  3668 ;;      Temps:          0       1       0       0
  3669 ;;      Totals:         0       5       0       0
  3670 ;;Total ram usage:        5 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    4
  3673 ;; This function calls:
  3674 ;;		___awdiv
  3675 ;;		_getMain_All_Error_Status
  3676 ;;		_getMain_All_LightsStatus
  3677 ;;		_setBuz
  3678 ;; This function is called by:
  3679 ;;		_Temp_Main
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _setTemp_Main
  3685  0F69                     _setTemp_Main:	
  3686                           
  3687                           ;OverTemperature_B1.c: 60: char error = getMain_All_Error_Status(0);
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3691  0F69  3000               	movlw	0
  3692  0F6A  158A  242C  158A   	fcall	_getMain_All_Error_Status
  3693  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  3694  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  3695  0F6F  00E6               	movwf	??_setTemp_Main
  3696  0F70  0866               	movf	??_setTemp_Main,w
  3697  0F71  00E7               	movwf	setTemp_Main@error
  3698                           
  3699                           ;OverTemperature_B1.c: 61: ADtype SafeValue = 0, DangerValue = 0, AD;
  3700  0F72  01E8               	clrf	setTemp_Main@SafeValue
  3701  0F73  01E9               	clrf	setTemp_Main@DangerValue
  3702                           
  3703                           ;OverTemperature_B1.c: 62: if (Temp.Enable == 1) {
  3704  0F74  1C42               	btfss	_Temp,0
  3705  0F75  2FFC               	goto	l972
  3706                           
  3707                           ;OverTemperature_B1.c: 69: if (Temp.ADtoGO == 0) {
  3708  0F76  1942               	btfsc	_Temp,2
  3709  0F77  2F89               	goto	l6626
  3710                           
  3711                           ;OverTemperature_B1.c: 70: Temp.Time++;
  3712  0F78  3001               	movlw	1
  3713  0F79  07C3               	addwf	_Temp+1,f
  3714  0F7A  1803               	skipnc
  3715  0F7B  0AC4               	incf	_Temp+2,f
  3716  0F7C  3000               	movlw	0
  3717  0F7D  07C4               	addwf	_Temp+2,f
  3718                           
  3719                           ;OverTemperature_B1.c: 71: if (Temp.Time >= (5000 / 20)) {
  3720  0F7E  3000               	movlw	0
  3721  0F7F  0244               	subwf	_Temp+2,w
  3722  0F80  30FA               	movlw	250
  3723  0F81  1903               	skipnz
  3724  0F82  0243               	subwf	_Temp+1,w
  3725  0F83  1C03               	skipc
  3726  0F84  0008               	return
  3727                           
  3728                           ;OverTemperature_B1.c: 72: Temp.Time = 0;
  3729  0F85  01C3               	clrf	_Temp+1
  3730  0F86  01C4               	clrf	_Temp+2
  3731                           
  3732                           ;OverTemperature_B1.c: 73: Temp.ADtoGO = 1;
  3733  0F87  1542               	bsf	_Temp,2
  3734                           
  3735                           ;OverTemperature_B1.c: 74: }
  3736                           ;OverTemperature_B1.c: 75: } else {
  3737  0F88  0008               	return
  3738  0F89                     l6626:	
  3739                           
  3740                           ;OverTemperature_B1.c: 76: Temp.Time++;
  3741  0F89  3001               	movlw	1
  3742  0F8A  07C3               	addwf	_Temp+1,f
  3743  0F8B  1803               	skipnc
  3744  0F8C  0AC4               	incf	_Temp+2,f
  3745  0F8D  3000               	movlw	0
  3746  0F8E  07C4               	addwf	_Temp+2,f
  3747                           
  3748                           ;OverTemperature_B1.c: 77: if (Temp.Time >= (40 / 20)) {
  3749  0F8F  3000               	movlw	0
  3750  0F90  0244               	subwf	_Temp+2,w
  3751  0F91  3002               	movlw	2
  3752  0F92  1903               	skipnz
  3753  0F93  0243               	subwf	_Temp+1,w
  3754  0F94  1C03               	skipc
  3755  0F95  0008               	return
  3756                           
  3757                           ;OverTemperature_B1.c: 78: Temp.Time = 0;
  3758  0F96  01C3               	clrf	_Temp+1
  3759  0F97  01C4               	clrf	_Temp+2
  3760                           
  3761                           ;OverTemperature_B1.c: 80: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  3762  0F98  0846               	movf	_Temp+4,w
  3763  0F99  1903               	btfsc	3,2
  3764  0F9A  2FF7               	goto	l977
  3765  0F9B  0847               	movf	_Temp+5,w
  3766  0F9C  1903               	btfsc	3,2
  3767  0F9D  2FF7               	goto	l977
  3768                           
  3769                           ;OverTemperature_B1.c: 81: Temp.ADtoGO = 0;
  3770  0F9E  1142               	bcf	_Temp,2
  3771                           
  3772                           ;OverTemperature_B1.c: 82: AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  3773  0F9F  3002               	movlw	2
  3774  0FA0  00DA               	movwf	___awdiv@divisor
  3775  0FA1  3000               	movlw	0
  3776  0FA2  00DB               	movwf	___awdiv@divisor+1
  3777  0FA3  0846               	movf	_Temp+4,w
  3778  0FA4  0747               	addwf	_Temp+5,w
  3779  0FA5  00DC               	movwf	___awdiv@dividend
  3780  0FA6  01DD               	clrf	___awdiv@dividend+1
  3781  0FA7  0DDD               	rlf	___awdiv@dividend+1,f
  3782  0FA8  158A  2611  158A   	fcall	___awdiv
  3783  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  3785  0FAD  085A               	movf	?___awdiv,w
  3786  0FAE  00E6               	movwf	??_setTemp_Main
  3787  0FAF  0866               	movf	??_setTemp_Main,w
  3788  0FB0  00EA               	movwf	setTemp_Main@AD
  3789                           
  3790                           ;OverTemperature_B1.c: 85: if (getMain_All_LightsStatus() == 1) {
  3791  0FB1  158A  2131  158A   	fcall	_getMain_All_LightsStatus
  3792  0FB4  3A01               	xorlw	1
  3793  0FB5  1D03               	skipz
  3794  0FB6  2FBF               	goto	l6640
  3795                           
  3796                           ;OverTemperature_B1.c: 86: SafeValue = 0x85;
  3797  0FB7  3085               	movlw	133
  3798  0FB8  1283               	bcf	3,5	;RP0=0, select bank0
  3799  0FB9  1303               	bcf	3,6	;RP1=0, select bank0
  3800  0FBA  00E6               	movwf	??_setTemp_Main
  3801  0FBB  0866               	movf	??_setTemp_Main,w
  3802  0FBC  00E8               	movwf	setTemp_Main@SafeValue
  3803                           
  3804                           ;OverTemperature_B1.c: 87: DangerValue = 0x70;
  3805  0FBD  3070               	movlw	112
  3806  0FBE  2FC6               	goto	L7
  3807  0FBF                     l6640:	
  3808                           ;OverTemperature_B1.c: 88: } else {
  3809                           
  3810                           
  3811                           ;OverTemperature_B1.c: 89: SafeValue = 0x4f;
  3812  0FBF  304F               	movlw	79
  3813  0FC0  1283               	bcf	3,5	;RP0=0, select bank0
  3814  0FC1  1303               	bcf	3,6	;RP1=0, select bank0
  3815  0FC2  00E6               	movwf	??_setTemp_Main
  3816  0FC3  0866               	movf	??_setTemp_Main,w
  3817  0FC4  00E8               	movwf	setTemp_Main@SafeValue
  3818                           
  3819                           ;OverTemperature_B1.c: 90: DangerValue = 0x40;
  3820  0FC5  3040               	movlw	64
  3821  0FC6                     L7:	
  3822  0FC6  00E6               	movwf	??_setTemp_Main
  3823  0FC7  0866               	movf	??_setTemp_Main,w
  3824  0FC8  00E9               	movwf	setTemp_Main@DangerValue
  3825                           
  3826                           ;OverTemperature_B1.c: 91: }
  3827                           ;OverTemperature_B1.c: 103: if (Temp.ERROR == 1) {
  3828  0FC9  1CC2               	btfss	_Temp,1
  3829  0FCA  2FE7               	goto	l6658
  3830                           
  3831                           ;OverTemperature_B1.c: 104: if (AD >= SafeValue) {
  3832  0FCB  0868               	movf	setTemp_Main@SafeValue,w
  3833  0FCC  026A               	subwf	setTemp_Main@AD,w
  3834  0FCD  1C03               	skipc
  3835  0FCE  2FE4               	goto	l6656
  3836                           
  3837                           ;OverTemperature_B1.c: 105: Temp.Count++;
  3838  0FCF  3001               	movlw	1
  3839  0FD0  00E6               	movwf	??_setTemp_Main
  3840  0FD1  0866               	movf	??_setTemp_Main,w
  3841  0FD2  07C5               	addwf	_Temp+3,f
  3842                           
  3843                           ;OverTemperature_B1.c: 106: if (Temp.Count >= 3) {
  3844  0FD3  3003               	movlw	3
  3845  0FD4  0245               	subwf	_Temp+3,w
  3846  0FD5  1C03               	skipc
  3847  0FD6  2FF7               	goto	l977
  3848                           
  3849                           ;OverTemperature_B1.c: 107: Temp.Count = 0;
  3850  0FD7  01C5               	clrf	_Temp+3
  3851                           
  3852                           ;OverTemperature_B1.c: 108: Temp.ERROR = 0;
  3853  0FD8  10C2               	bcf	_Temp,1
  3854                           
  3855                           ;OverTemperature_B1.c: 109: setBuz(2, 100);
  3856  0FD9  3064               	movlw	100
  3857  0FDA  00E2               	movwf	setBuz@time
  3858  0FDB  3000               	movlw	0
  3859  0FDC  00E3               	movwf	setBuz@time+1
  3860  0FDD  3002               	movlw	2
  3861  0FDE  158A  256E  158A   	fcall	_setBuz
  3862                           
  3863                           ;OverTemperature_B1.c: 110: }
  3864                           ;OverTemperature_B1.c: 111: } else {
  3865  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0FE3  2FF7               	goto	l977
  3868  0FE4                     l6656:	
  3869                           
  3870                           ;OverTemperature_B1.c: 112: Temp.Count = 0;
  3871  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  3873  0FE6  2FF6               	goto	l6668
  3874  0FE7                     l6658:	
  3875                           ;OverTemperature_B1.c: 113: }
  3876                           ;OverTemperature_B1.c: 114: } else {
  3877                           
  3878                           
  3879                           ;OverTemperature_B1.c: 115: if (AD <= DangerValue) {
  3880  0FE7  086A               	movf	setTemp_Main@AD,w
  3881  0FE8  0269               	subwf	setTemp_Main@DangerValue,w
  3882  0FE9  1C03               	skipc
  3883  0FEA  2FF6               	goto	l6668
  3884                           
  3885                           ;OverTemperature_B1.c: 116: Temp.Count++;
  3886  0FEB  3001               	movlw	1
  3887  0FEC  00E6               	movwf	??_setTemp_Main
  3888  0FED  0866               	movf	??_setTemp_Main,w
  3889  0FEE  07C5               	addwf	_Temp+3,f
  3890                           
  3891                           ;OverTemperature_B1.c: 117: if (Temp.Count >= 3) {
  3892  0FEF  3003               	movlw	3
  3893  0FF0  0245               	subwf	_Temp+3,w
  3894  0FF1  1C03               	skipc
  3895  0FF2  2FF7               	goto	l977
  3896                           
  3897                           ;OverTemperature_B1.c: 118: Temp.Count = 0;
  3898  0FF3  01C5               	clrf	_Temp+3
  3899                           
  3900                           ;OverTemperature_B1.c: 119: Temp.ERROR = 1;
  3901  0FF4  14C2               	bsf	_Temp,1
  3902                           
  3903                           ;OverTemperature_B1.c: 120: }
  3904                           ;OverTemperature_B1.c: 121: } else {
  3905  0FF5  2FF7               	goto	l977
  3906  0FF6                     l6668:	
  3907                           
  3908                           ;OverTemperature_B1.c: 122: Temp.Count = 0;
  3909  0FF6  01C5               	clrf	_Temp+3
  3910  0FF7                     l977:	
  3911                           ;OverTemperature_B1.c: 123: }
  3912                           ;OverTemperature_B1.c: 124: }
  3913                           ;OverTemperature_B1.c: 125: ;;
  3914                           ;OverTemperature_B1.c: 126: ;;
  3915                           
  3916                           
  3917                           ;OverTemperature_B1.c: 142: }
  3918                           ;OverTemperature_B1.c: 143: Temp.ADH[0] = 0;
  3919  0FF7  1283               	bcf	3,5	;RP0=0, select bank0
  3920  0FF8  1303               	bcf	3,6	;RP1=0, select bank0
  3921  0FF9  01C6               	clrf	_Temp+4
  3922                           
  3923                           ;OverTemperature_B1.c: 144: Temp.ADH[1] = 0;
  3924  0FFA  01C7               	clrf	_Temp+5
  3925                           
  3926                           ;OverTemperature_B1.c: 145: }
  3927                           ;OverTemperature_B1.c: 146: }
  3928                           ;OverTemperature_B1.c: 148: } else {
  3929  0FFB  0008               	return
  3930  0FFC                     l972:	
  3931                           
  3932                           ;OverTemperature_B1.c: 149: if (myMain.PowerON == 1) {
  3933  0FFC  1C31               	btfss	_myMain,0
  3934  0FFD  0008               	return
  3935                           
  3936                           ;OverTemperature_B1.c: 150: Temp.Enable = 1;
  3937  0FFE  1442               	bsf	_Temp,0
  3938  0FFF  0008               	return
  3939  1000                     __end_of_setTemp_Main:	
  3940                           
  3941                           	psect	text12
  3942  0857                     __ptext12:	
  3943 ;; *************** function _Temp_Initialization *****************
  3944 ;; Defined at:
  3945 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;		None               void
  3952 ;; Registers used:
  3953 ;;		status,2, status,0, pclath, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       0       0       0
  3960 ;;      Locals:         0       0       0       0
  3961 ;;      Temps:          0       0       0       0
  3962 ;;      Totals:         0       0       0       0
  3963 ;;Total ram usage:        0 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:    3
  3966 ;; This function calls:
  3967 ;;		_setTemp_Initialization
  3968 ;; This function is called by:
  3969 ;;		_main
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           
  3974                           ;psect for function _Temp_Initialization
  3975  0857                     _Temp_Initialization:	
  3976                           
  3977                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3978                           
  3979                           ;incstack = 0
  3980                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3981  0857  158A  204C         	fcall	_setTemp_Initialization
  3982  0859  0008               	return
  3983  085A                     __end_of_Temp_Initialization:	
  3984                           
  3985                           	psect	text13
  3986  084C                     __ptext13:	
  3987 ;; *************** function _setTemp_Initialization *****************
  3988 ;; Defined at:
  3989 ;;		line 47 in file "../src/OverTemperature_B1.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;		None
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;		None
  3994 ;; Return value:  Size  Location     Type
  3995 ;;		None               void
  3996 ;; Registers used:
  3997 ;;		None
  3998 ;; Tracked objects:
  3999 ;;		On entry : 0/0
  4000 ;;		On exit  : 0/0
  4001 ;;		Unchanged: 0/0
  4002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4003 ;;      Params:         0       0       0       0
  4004 ;;      Locals:         0       0       0       0
  4005 ;;      Temps:          0       0       0       0
  4006 ;;      Totals:         0       0       0       0
  4007 ;;Total ram usage:        0 bytes
  4008 ;; Hardware stack levels used:    1
  4009 ;; Hardware stack levels required when called:    2
  4010 ;; This function calls:
  4011 ;;		Nothing
  4012 ;; This function is called by:
  4013 ;;		_Temp_Initialization
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           
  4018                           ;psect for function _setTemp_Initialization
  4019  084C                     _setTemp_Initialization:	
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _setTemp_Initialization: []
  4023  084C  0008               	return
  4024  084D                     __end_of_setTemp_Initialization:	
  4025                           
  4026                           	psect	text14
  4027  08B6                     __ptext14:	
  4028 ;; *************** function _Switch_Main *****************
  4029 ;; Defined at:
  4030 ;;		line 76 in file "../src/Switch_B1.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;		None               void
  4037 ;; Registers used:
  4038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4044 ;;      Params:         0       0       0       0
  4045 ;;      Locals:         0       0       0       0
  4046 ;;      Temps:          0       0       0       0
  4047 ;;      Totals:         0       0       0       0
  4048 ;;Total ram usage:        0 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    6
  4051 ;; This function calls:
  4052 ;;		_TouchPower
  4053 ;;		_setSw_Main
  4054 ;; This function is called by:
  4055 ;;		_main
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function _Switch_Main
  4061  08B6                     _Switch_Main:	
  4062                           
  4063                           ;Switch_B1.c: 79: setSw_Main(1);
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _Switch_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4067  08B6  3001               	movlw	1
  4068  08B7  118A  23B2  158A   	fcall	_setSw_Main
  4069                           
  4070                           ;Switch_B1.c: 83: setSw_Main(2);
  4071  08BA  3002               	movlw	2
  4072  08BB  118A  23B2  158A   	fcall	_setSw_Main
  4073                           
  4074                           ;Switch_B1.c: 91: TouchPower();
  4075  08BE  158A  219C         	fcall	_TouchPower
  4076  08C0  0008               	return
  4077  08C1                     __end_of_Switch_Main:	
  4078                           
  4079                           	psect	text15
  4080  03B2                     __ptext15:	
  4081 ;; *************** function _setSw_Main *****************
  4082 ;; Defined at:
  4083 ;;		line 117 in file "../src/Switch_B1.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  sw              1    wreg     unsigned char 
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  sw              1   10[BANK0 ] unsigned char 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;		None               void
  4090 ;; Registers used:
  4091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4097 ;;      Params:         0       0       0       0
  4098 ;;      Locals:         0       1       0       0
  4099 ;;      Temps:          0       4       0       0
  4100 ;;      Totals:         0       5       0       0
  4101 ;;Total ram usage:        5 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    5
  4104 ;; This function calls:
  4105 ;;		_SwPointSelect
  4106 ;;		_getMain_All_Error_Status
  4107 ;;		_getSw_KeyStatus
  4108 ;;		_setLED
  4109 ;;		_setLights_SwOff
  4110 ;;		_setLights_SwOn
  4111 ;; This function is called by:
  4112 ;;		_Switch_Main
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _setSw_Main
  4118  03B2                     _setSw_Main:	
  4119                           
  4120                           ;incstack = 0
  4121                           ; Regs used in _setSw_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4122                           ;setSw_Main@sw stored from wreg
  4123  03B2  1283               	bcf	3,5	;RP0=0, select bank0
  4124  03B3  1303               	bcf	3,6	;RP1=0, select bank0
  4125  03B4  00E4               	movwf	setSw_Main@sw
  4126                           
  4127                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4128  03B5  0864               	movf	setSw_Main@sw,w
  4129  03B6  158A  2175  118A   	fcall	_SwPointSelect
  4130                           
  4131                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4132  03B9  0870               	movf	_Sw,w
  4133  03BA  0084               	movwf	4
  4134  03BB  1783               	bsf	3,7
  4135  03BC  1C71               	btfss	_Sw+1,0
  4136  03BD  1383               	bcf	3,7
  4137  03BE  1C00               	btfss	0,0
  4138  03BF  2CFB               	goto	l1442
  4139                           
  4140                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4141  03C0  3000               	movlw	0
  4142  03C1  158A  242C  118A   	fcall	_getMain_All_Error_Status
  4143  03C4  3800               	iorlw	0
  4144  03C5  1D03               	skipz
  4145  03C6  2BED               	goto	l6696
  4146                           
  4147                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4148  03C7  3001               	movlw	1
  4149  03C8  0770               	addwf	_Sw,w
  4150  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  4151  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  4152  03CB  00E0               	movwf	??_setSw_Main
  4153  03CC  0871               	movf	_Sw+1,w
  4154  03CD  1803               	skipnc
  4155  03CE  3E01               	addlw	1
  4156  03CF  00E1               	movwf	??_setSw_Main+1
  4157  03D0  0860               	movf	??_setSw_Main,w
  4158  03D1  0084               	movwf	4
  4159  03D2  1783               	bsf	3,7
  4160  03D3  1C61               	btfss	??_setSw_Main+1,0
  4161  03D4  1383               	bcf	3,7
  4162  03D5  1080               	bcf	0,1
  4163                           
  4164                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4165  03D6  0864               	movf	setSw_Main@sw,w
  4166  03D7  158A  2251  118A   	fcall	_getSw_KeyStatus
  4167  03DA  3A01               	xorlw	1
  4168  03DB  3000               	movlw	0
  4169  03DC  1903               	skipnz
  4170  03DD  3001               	movlw	1
  4171  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  4172  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  4173  03E0  00E0               	movwf	??_setSw_Main
  4174  03E1  0870               	movf	_Sw,w
  4175  03E2  0084               	movwf	4
  4176  03E3  1783               	bsf	3,7
  4177  03E4  1C71               	btfss	_Sw+1,0
  4178  03E5  1383               	bcf	3,7
  4179  03E6  0DE0               	rlf	??_setSw_Main,f
  4180  03E7  0800               	movf	0,w
  4181  03E8  0660               	xorwf	??_setSw_Main,w
  4182  03E9  39FD               	andlw	-3
  4183  03EA  0660               	xorwf	??_setSw_Main,w
  4184  03EB  0080               	movwf	0
  4185                           
  4186                           ;Switch_B1.c: 124: } else {
  4187  03EC  2C16               	goto	l6704
  4188  03ED                     l6696:	
  4189                           
  4190                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4191  03ED  3001               	movlw	1
  4192  03EE  0770               	addwf	_Sw,w
  4193  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  4194  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  4195  03F1  00E0               	movwf	??_setSw_Main
  4196  03F2  0871               	movf	_Sw+1,w
  4197  03F3  1803               	skipnc
  4198  03F4  3E01               	addlw	1
  4199  03F5  00E1               	movwf	??_setSw_Main+1
  4200  03F6  0860               	movf	??_setSw_Main,w
  4201  03F7  0084               	movwf	4
  4202  03F8  1783               	bsf	3,7
  4203  03F9  1C61               	btfss	??_setSw_Main+1,0
  4204  03FA  1383               	bcf	3,7
  4205  03FB  1880               	btfsc	0,1
  4206  03FC  2C16               	goto	l6704
  4207                           
  4208                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4209  03FD  3001               	movlw	1
  4210  03FE  0770               	addwf	_Sw,w
  4211  03FF  00E0               	movwf	??_setSw_Main
  4212  0400  0871               	movf	_Sw+1,w
  4213  0401  1803               	skipnc
  4214  0402  3E01               	addlw	1
  4215  0403  00E1               	movwf	??_setSw_Main+1
  4216  0404  0860               	movf	??_setSw_Main,w
  4217  0405  0084               	movwf	4
  4218  0406  1783               	bsf	3,7
  4219  0407  1C61               	btfss	??_setSw_Main+1,0
  4220  0408  1383               	bcf	3,7
  4221  0409  1480               	bsf	0,1
  4222                           
  4223                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4224  040A  0870               	movf	_Sw,w
  4225  040B  0084               	movwf	4
  4226  040C  1783               	bsf	3,7
  4227  040D  1C71               	btfss	_Sw+1,0
  4228  040E  1383               	bcf	3,7
  4229  040F  1080               	bcf	0,1
  4230                           
  4231                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4232  0410  0870               	movf	_Sw,w
  4233  0411  0084               	movwf	4
  4234  0412  1783               	bsf	3,7
  4235  0413  1C71               	btfss	_Sw+1,0
  4236  0414  1383               	bcf	3,7
  4237  0415  1500               	bsf	0,2
  4238  0416                     l6704:	
  4239                           
  4240                           ;Switch_B1.c: 130: }
  4241                           ;Switch_B1.c: 131: }
  4242                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4243  0416  0870               	movf	_Sw,w
  4244  0417  0084               	movwf	4
  4245  0418  1783               	bsf	3,7
  4246  0419  1C71               	btfss	_Sw+1,0
  4247  041A  1383               	bcf	3,7
  4248  041B  1C80               	btfss	0,1
  4249  041C  2CA6               	goto	l6726
  4250                           
  4251                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4252  041D  0870               	movf	_Sw,w
  4253  041E  0084               	movwf	4
  4254  041F  1783               	bsf	3,7
  4255  0420  1C71               	btfss	_Sw+1,0
  4256  0421  1383               	bcf	3,7
  4257  0422  1900               	btfsc	0,2
  4258  0423  2C5B               	goto	l6716
  4259                           
  4260                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4261  0424  3001               	movlw	1
  4262  0425  00E0               	movwf	??_setSw_Main
  4263  0426  3002               	movlw	2
  4264  0427  0770               	addwf	_Sw,w
  4265  0428  00E1               	movwf	??_setSw_Main+1
  4266  0429  0871               	movf	_Sw+1,w
  4267  042A  1803               	skipnc
  4268  042B  3E01               	addlw	1
  4269  042C  00E2               	movwf	??_setSw_Main+2
  4270  042D  0861               	movf	??_setSw_Main+1,w
  4271  042E  0084               	movwf	4
  4272  042F  1783               	bsf	3,7
  4273  0430  1C62               	btfss	??_setSw_Main+2,0
  4274  0431  1383               	bcf	3,7
  4275  0432  0860               	movf	??_setSw_Main,w
  4276  0433  0780               	addwf	0,f
  4277                           
  4278                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  4279  0434  3002               	movlw	2
  4280  0435  0770               	addwf	_Sw,w
  4281  0436  00E0               	movwf	??_setSw_Main
  4282  0437  0871               	movf	_Sw+1,w
  4283  0438  1803               	skipnc
  4284  0439  3E01               	addlw	1
  4285  043A  00E1               	movwf	??_setSw_Main+1
  4286  043B  0860               	movf	??_setSw_Main,w
  4287  043C  0084               	movwf	4
  4288  043D  1783               	bsf	3,7
  4289  043E  1C61               	btfss	??_setSw_Main+1,0
  4290  043F  1383               	bcf	3,7
  4291  0440  3003               	movlw	3
  4292  0441  0200               	subwf	0,w
  4293  0442  1C03               	skipc
  4294  0443  0008               	return
  4295                           
  4296                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4297  0444  3002               	movlw	2
  4298  0445  0770               	addwf	_Sw,w
  4299  0446  00E0               	movwf	??_setSw_Main
  4300  0447  0871               	movf	_Sw+1,w
  4301  0448  1803               	skipnc
  4302  0449  3E01               	addlw	1
  4303  044A  00E1               	movwf	??_setSw_Main+1
  4304  044B  0860               	movf	??_setSw_Main,w
  4305  044C  0084               	movwf	4
  4306  044D  1783               	bsf	3,7
  4307  044E  1C61               	btfss	??_setSw_Main+1,0
  4308  044F  1383               	bcf	3,7
  4309  0450  0180               	clrf	0
  4310                           
  4311                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4312  0451  0870               	movf	_Sw,w
  4313  0452  0084               	movwf	4
  4314  0453  1783               	bsf	3,7
  4315  0454  1C71               	btfss	_Sw+1,0
  4316  0455  1383               	bcf	3,7
  4317  0456  1500               	bsf	0,2
  4318                           
  4319                           ;Switch_B1.c: 140: setLights_SwOn(sw);
  4320  0457  0864               	movf	setSw_Main@sw,w
  4321  0458  158A  246A         	fcall	_setLights_SwOn
  4322                           
  4323                           ;Switch_B1.c: 146: }
  4324                           ;Switch_B1.c: 147: } else {
  4325  045A  0008               	return
  4326  045B                     l6716:	
  4327                           
  4328                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  4329  045B  0870               	movf	_Sw,w
  4330  045C  0084               	movwf	4
  4331  045D  1783               	bsf	3,7
  4332  045E  1C71               	btfss	_Sw+1,0
  4333  045F  1383               	bcf	3,7
  4334  0460  1980               	btfsc	0,3
  4335  0461  0008               	return
  4336                           
  4337                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  4338  0462  3003               	movlw	3
  4339  0463  0770               	addwf	_Sw,w
  4340  0464  1283               	bcf	3,5	;RP0=0, select bank0
  4341  0465  1303               	bcf	3,6	;RP1=0, select bank0
  4342  0466  00E0               	movwf	??_setSw_Main
  4343  0467  0871               	movf	_Sw+1,w
  4344  0468  1803               	skipnc
  4345  0469  3E01               	addlw	1
  4346  046A  00E1               	movwf	??_setSw_Main+1
  4347  046B  0860               	movf	??_setSw_Main,w
  4348  046C  0084               	movwf	4
  4349  046D  1783               	bsf	3,7
  4350  046E  1C61               	btfss	??_setSw_Main+1,0
  4351  046F  1383               	bcf	3,7
  4352  0470  3001               	movlw	1
  4353  0471  0780               	addwf	0,f
  4354  0472  0A84               	incf	4,f
  4355  0473  1803               	skipnc
  4356  0474  0A80               	incf	0,f
  4357                           
  4358                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (3000 / 20)) {
  4359  0475  3003               	movlw	3
  4360  0476  0770               	addwf	_Sw,w
  4361  0477  00E0               	movwf	??_setSw_Main
  4362  0478  0871               	movf	_Sw+1,w
  4363  0479  1803               	skipnc
  4364  047A  3E01               	addlw	1
  4365  047B  00E1               	movwf	??_setSw_Main+1
  4366  047C  0860               	movf	??_setSw_Main,w
  4367  047D  0084               	movwf	4
  4368  047E  1783               	bsf	3,7
  4369  047F  1C61               	btfss	??_setSw_Main+1,0
  4370  0480  1383               	bcf	3,7
  4371  0481  0800               	movf	0,w
  4372  0482  00E2               	movwf	??_setSw_Main+2
  4373  0483  0A84               	incf	4,f
  4374  0484  0800               	movf	0,w
  4375  0485  00E3               	movwf	??_setSw_Main+3
  4376  0486  3000               	movlw	0
  4377  0487  0263               	subwf	??_setSw_Main+3,w
  4378  0488  3096               	movlw	150
  4379  0489  1903               	skipnz
  4380  048A  0262               	subwf	??_setSw_Main+2,w
  4381  048B  1C03               	skipc
  4382  048C  0008               	return
  4383                           
  4384                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  4385  048D  3003               	movlw	3
  4386  048E  0770               	addwf	_Sw,w
  4387  048F  00E0               	movwf	??_setSw_Main
  4388  0490  0871               	movf	_Sw+1,w
  4389  0491  1803               	skipnc
  4390  0492  3E01               	addlw	1
  4391  0493  00E1               	movwf	??_setSw_Main+1
  4392  0494  0860               	movf	??_setSw_Main,w
  4393  0495  0084               	movwf	4
  4394  0496  1783               	bsf	3,7
  4395  0497  1C61               	btfss	??_setSw_Main+1,0
  4396  0498  1383               	bcf	3,7
  4397  0499  0180               	clrf	0
  4398  049A  0A84               	incf	4,f
  4399  049B  0180               	clrf	0
  4400                           
  4401                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  4402  049C  0870               	movf	_Sw,w
  4403  049D  0084               	movwf	4
  4404  049E  1783               	bsf	3,7
  4405  049F  1C71               	btfss	_Sw+1,0
  4406  04A0  1383               	bcf	3,7
  4407  04A1  1580               	bsf	0,3
  4408                           
  4409                           ;Switch_B1.c: 154: setLights_SwOff(sw);
  4410  04A2  0864               	movf	setSw_Main@sw,w
  4411  04A3  158A  2357         	fcall	_setLights_SwOff
  4412                           
  4413                           ;Switch_B1.c: 194: }
  4414                           ;Switch_B1.c: 195: }
  4415                           ;Switch_B1.c: 196: } else {
  4416                           
  4417                           ;Switch_B1.c: 161: }
  4418                           ;Switch_B1.c: 162: } else {
  4419  04A5  0008               	return
  4420  04A6                     l6726:	
  4421                           
  4422                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  4423  04A6  0870               	movf	_Sw,w
  4424  04A7  0084               	movwf	4
  4425  04A8  1783               	bsf	3,7
  4426  04A9  1C71               	btfss	_Sw+1,0
  4427  04AA  1383               	bcf	3,7
  4428  04AB  1D00               	btfss	0,2
  4429  04AC  0008               	return
  4430                           
  4431                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  4432  04AD  3001               	movlw	1
  4433  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  4434  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  4435  04B0  00E0               	movwf	??_setSw_Main
  4436  04B1  3002               	movlw	2
  4437  04B2  0770               	addwf	_Sw,w
  4438  04B3  00E1               	movwf	??_setSw_Main+1
  4439  04B4  0871               	movf	_Sw+1,w
  4440  04B5  1803               	skipnc
  4441  04B6  3E01               	addlw	1
  4442  04B7  00E2               	movwf	??_setSw_Main+2
  4443  04B8  0861               	movf	??_setSw_Main+1,w
  4444  04B9  0084               	movwf	4
  4445  04BA  1783               	bsf	3,7
  4446  04BB  1C62               	btfss	??_setSw_Main+2,0
  4447  04BC  1383               	bcf	3,7
  4448  04BD  0860               	movf	??_setSw_Main,w
  4449  04BE  0780               	addwf	0,f
  4450                           
  4451                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  4452  04BF  3002               	movlw	2
  4453  04C0  0770               	addwf	_Sw,w
  4454  04C1  00E0               	movwf	??_setSw_Main
  4455  04C2  0871               	movf	_Sw+1,w
  4456  04C3  1803               	skipnc
  4457  04C4  3E01               	addlw	1
  4458  04C5  00E1               	movwf	??_setSw_Main+1
  4459  04C6  0860               	movf	??_setSw_Main,w
  4460  04C7  0084               	movwf	4
  4461  04C8  1783               	bsf	3,7
  4462  04C9  1C61               	btfss	??_setSw_Main+1,0
  4463  04CA  1383               	bcf	3,7
  4464  04CB  3003               	movlw	3
  4465  04CC  0200               	subwf	0,w
  4466  04CD  1C03               	skipc
  4467  04CE  0008               	return
  4468                           
  4469                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  4470  04CF  3002               	movlw	2
  4471  04D0  0770               	addwf	_Sw,w
  4472  04D1  00E0               	movwf	??_setSw_Main
  4473  04D2  0871               	movf	_Sw+1,w
  4474  04D3  1803               	skipnc
  4475  04D4  3E01               	addlw	1
  4476  04D5  00E1               	movwf	??_setSw_Main+1
  4477  04D6  0860               	movf	??_setSw_Main,w
  4478  04D7  0084               	movwf	4
  4479  04D8  1783               	bsf	3,7
  4480  04D9  1C61               	btfss	??_setSw_Main+1,0
  4481  04DA  1383               	bcf	3,7
  4482  04DB  0180               	clrf	0
  4483                           
  4484                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  4485  04DC  0870               	movf	_Sw,w
  4486  04DD  0084               	movwf	4
  4487  04DE  1783               	bsf	3,7
  4488  04DF  1C71               	btfss	_Sw+1,0
  4489  04E0  1383               	bcf	3,7
  4490  04E1  1100               	bcf	0,2
  4491                           
  4492                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  4493  04E2  3003               	movlw	3
  4494  04E3  0770               	addwf	_Sw,w
  4495  04E4  00E0               	movwf	??_setSw_Main
  4496  04E5  0871               	movf	_Sw+1,w
  4497  04E6  1803               	skipnc
  4498  04E7  3E01               	addlw	1
  4499  04E8  00E1               	movwf	??_setSw_Main+1
  4500  04E9  0860               	movf	??_setSw_Main,w
  4501  04EA  0084               	movwf	4
  4502  04EB  1783               	bsf	3,7
  4503  04EC  1C61               	btfss	??_setSw_Main+1,0
  4504  04ED  1383               	bcf	3,7
  4505  04EE  0180               	clrf	0
  4506  04EF  0A84               	incf	4,f
  4507  04F0  0180               	clrf	0
  4508                           
  4509                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  4510  04F1  0870               	movf	_Sw,w
  4511  04F2  0084               	movwf	4
  4512  04F3  1783               	bsf	3,7
  4513  04F4  1C71               	btfss	_Sw+1,0
  4514  04F5  1383               	bcf	3,7
  4515  04F6  1180               	bcf	0,3
  4516                           
  4517                           ;Switch_B1.c: 212: setLights_SwOff(sw);
  4518  04F7  0864               	movf	setSw_Main@sw,w
  4519  04F8  158A  2357         	fcall	_setLights_SwOff
  4520                           
  4521                           ;Switch_B1.c: 221: }
  4522                           ;Switch_B1.c: 222: }
  4523                           ;Switch_B1.c: 223: }
  4524                           ;Switch_B1.c: 224: } else {
  4525  04FA  0008               	return
  4526  04FB                     l1442:	
  4527                           
  4528                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  4529  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  4530  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  4531  04FD  1C31               	btfss	_myMain,0
  4532  04FE  0008               	return
  4533                           
  4534                           ;Switch_B1.c: 226: Sw->Enable = 1;
  4535  04FF  0870               	movf	_Sw,w
  4536  0500  0084               	movwf	4
  4537  0501  1783               	bsf	3,7
  4538  0502  1C71               	btfss	_Sw+1,0
  4539  0503  1383               	bcf	3,7
  4540  0504  1400               	bsf	0,0
  4541                           
  4542                           ;Switch_B1.c: 228: if (sw == 2) {
  4543  0505  0864               	movf	setSw_Main@sw,w
  4544  0506  3A02               	xorlw	2
  4545  0507  1D03               	skipz
  4546  0508  0008               	return
  4547                           
  4548                           ;Switch_B1.c: 229: setLED(1, 1);
  4549  0509  01DB               	clrf	setLED@command
  4550  050A  0ADB               	incf	setLED@command,f
  4551  050B  3001               	movlw	1
  4552  050C  118A  27AF         	fcall	_setLED
  4553  050E  0008               	return
  4554  050F                     __end_of_setSw_Main:	
  4555                           
  4556                           	psect	text16
  4557  0A51                     __ptext16:	
  4558 ;; *************** function _getSw_KeyStatus *****************
  4559 ;; Defined at:
  4560 ;;		line 237 in file "../src/Switch_B1.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;  sw              1    wreg     unsigned char 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  sw              1    1[BANK0 ] unsigned char 
  4565 ;;  status          1    0[BANK0 ] unsigned char 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      unsigned char 
  4568 ;; Registers used:
  4569 ;;		wreg, status,2
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4575 ;;      Params:         0       0       0       0
  4576 ;;      Locals:         0       2       0       0
  4577 ;;      Temps:          0       0       0       0
  4578 ;;      Totals:         0       2       0       0
  4579 ;;Total ram usage:        2 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    2
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_setSw_Main
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function _getSw_KeyStatus
  4591  0A51                     _getSw_KeyStatus:	
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  4595                           ;getSw_KeyStatus@sw stored from wreg
  4596  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0A53  00DB               	movwf	getSw_KeyStatus@sw
  4599                           
  4600                           ;Switch_B1.c: 238: char status = 0;
  4601  0A54  01DA               	clrf	getSw_KeyStatus@status
  4602                           
  4603                           ;Switch_B1.c: 252: if (sw == 1) {
  4604  0A55  085B               	movf	getSw_KeyStatus@sw,w
  4605  0A56  3A01               	xorlw	1
  4606  0A57  1D03               	skipz
  4607  0A58  2A5B               	goto	l6474
  4608                           
  4609                           ;Switch_B1.c: 253: __nop();
  4610  0A59  0000               	nop
  4611                           
  4612                           ;Switch_B1.c: 254: } else if (sw == 2) {
  4613  0A5A  2A65               	goto	l6478
  4614  0A5B                     l6474:	
  4615  0A5B  1283               	bcf	3,5	;RP0=0, select bank0
  4616  0A5C  1303               	bcf	3,6	;RP1=0, select bank0
  4617  0A5D  085B               	movf	getSw_KeyStatus@sw,w
  4618  0A5E  3A02               	xorlw	2
  4619  0A5F  1D03               	skipz
  4620  0A60  2A65               	goto	l6478
  4621                           
  4622                           ;Switch_B1.c: 255: status = RB4 == 1 ? 1 : 0;
  4623  0A61  3000               	movlw	0
  4624  0A62  1A06               	btfsc	6,4	;volatile
  4625  0A63  3001               	movlw	1
  4626  0A64  00DA               	movwf	getSw_KeyStatus@status
  4627  0A65                     l6478:	
  4628                           
  4629                           ;Switch_B1.c: 256: }
  4630                           ;Switch_B1.c: 275: return status;
  4631  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  4632  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  4633  0A67  085A               	movf	getSw_KeyStatus@status,w
  4634  0A68  0008               	return
  4635  0A69                     __end_of_getSw_KeyStatus:	
  4636                           
  4637                           	psect	text17
  4638  0975                     __ptext17:	
  4639 ;; *************** function _SwPointSelect *****************
  4640 ;; Defined at:
  4641 ;;		line 25 in file "../src/Switch_B1.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  sw              1    wreg     unsigned char 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  sw              1    4[COMMON] unsigned char 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;		None               void
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, status,0
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4655 ;;      Params:         0       0       0       0
  4656 ;;      Locals:         1       0       0       0
  4657 ;;      Temps:          0       0       0       0
  4658 ;;      Totals:         1       0       0       0
  4659 ;;Total ram usage:        1 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    2
  4662 ;; This function calls:
  4663 ;;		Nothing
  4664 ;; This function is called by:
  4665 ;;		_setSw_Main
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           
  4670                           ;psect for function _SwPointSelect
  4671  0975                     _SwPointSelect:	
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
  4675                           ;SwPointSelect@sw stored from wreg
  4676  0975  00F9               	movwf	SwPointSelect@sw
  4677                           
  4678                           ;Switch_B1.c: 28: if (sw == 1) {
  4679  0976  0879               	movf	SwPointSelect@sw,w
  4680  0977  3A01               	xorlw	1
  4681  0978  1D03               	skipz
  4682  0979  297F               	goto	l3862
  4683                           
  4684                           ;Switch_B1.c: 29: Sw = &Sw1;
  4685  097A  30E6               	movlw	_Sw1& (0+255)
  4686  097B  00F0               	movwf	_Sw
  4687  097C  3000               	movlw	0
  4688  097D  00F1               	movwf	_Sw+1
  4689                           
  4690                           ;Switch_B1.c: 30: }
  4691  097E  0008               	return
  4692  097F                     l3862:	
  4693                           
  4694                           ;Switch_B1.c: 33: else if (sw == 2) {
  4695  097F  0879               	movf	SwPointSelect@sw,w
  4696  0980  3A02               	xorlw	2
  4697  0981  1D03               	skipz
  4698  0982  0008               	return
  4699                           
  4700                           ;Switch_B1.c: 34: Sw = &Sw2;
  4701  0983  3020               	movlw	_Sw2& (0+255)
  4702  0984  00F0               	movwf	_Sw
  4703  0985  3001               	movlw	1
  4704  0986  00F1               	movwf	_Sw+1
  4705  0987  0008               	return
  4706  0988                     __end_of_SwPointSelect:	
  4707                           
  4708                           	psect	text18
  4709  099C                     __ptext18:	
  4710 ;; *************** function _TouchPower *****************
  4711 ;; Defined at:
  4712 ;;		line 10 in file "../src/Switch_B1.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;		None
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;		None               void
  4719 ;; Registers used:
  4720 ;;		wreg, status,2, status,0, pclath, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4726 ;;      Params:         0       0       0       0
  4727 ;;      Locals:         0       0       0       0
  4728 ;;      Temps:          0       0       0       0
  4729 ;;      Totals:         0       0       0       0
  4730 ;;Total ram usage:        0 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    3
  4733 ;; This function calls:
  4734 ;;		_Timeout_Counter
  4735 ;;		_set_TimeoutCleared
  4736 ;; This function is called by:
  4737 ;;		_Switch_Main
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           
  4742                           ;psect for function _TouchPower
  4743  099C                     _TouchPower:	
  4744                           
  4745                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  4746                           
  4747                           ;incstack = 0
  4748                           ; Regs used in _TouchPower: [wreg+status,2+status,0+pclath+cstack]
  4749  099C  1283               	bcf	3,5	;RP0=0, select bank0
  4750  099D  1303               	bcf	3,6	;RP1=0, select bank0
  4751  099E  1C31               	btfss	_myMain,0
  4752  099F  0008               	return
  4753                           
  4754                           ;Switch_B1.c: 12: if (RB5 == 0) {
  4755  09A0  1A86               	btfsc	6,5	;volatile
  4756  09A1  0008               	return
  4757  09A2  29A7               	goto	l6680
  4758  09A3                     l1420:	
  4759                           ;Switch_B1.c: 13: while (RB5 == 0 && myMain.Timeout == 0) {
  4760                           
  4761                           
  4762                           ;Switch_B1.c: 14: RB5 = 1;
  4763  09A3  1686               	bsf	6,5	;volatile
  4764                           
  4765                           ;Switch_B1.c: 15: Timeout_Counter();
  4766  09A4  158A  2188  158A   	fcall	_Timeout_Counter
  4767  09A7                     l6680:	
  4768  09A7  1283               	bcf	3,5	;RP0=0, select bank0
  4769  09A8  1303               	bcf	3,6	;RP1=0, select bank0
  4770  09A9  1A86               	btfsc	6,5	;volatile
  4771  09AA  29AD               	goto	l6684
  4772  09AB  1D33               	btfss	_myMain+2,2
  4773  09AC  29A3               	goto	l1420
  4774  09AD                     l6684:	
  4775                           
  4776                           ;Switch_B1.c: 16: }
  4777                           ;Switch_B1.c: 17: set_TimeoutCleared();
  4778  09AD  158A  2077         	fcall	_set_TimeoutCleared
  4779  09AF  0008               	return
  4780  09B0                     __end_of_TouchPower:	
  4781                           
  4782                           	psect	text19
  4783  0877                     __ptext19:	
  4784 ;; *************** function _set_TimeoutCleared *****************
  4785 ;; Defined at:
  4786 ;;		line 281 in file "../src/Main_B1.c"
  4787 ;; Parameters:    Size  Location     Type
  4788 ;;		None
  4789 ;; Auto vars:     Size  Location     Type
  4790 ;;		None
  4791 ;; Return value:  Size  Location     Type
  4792 ;;		None               void
  4793 ;; Registers used:
  4794 ;;		status,2
  4795 ;; Tracked objects:
  4796 ;;		On entry : 0/0
  4797 ;;		On exit  : 0/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4800 ;;      Params:         0       0       0       0
  4801 ;;      Locals:         0       0       0       0
  4802 ;;      Temps:          0       0       0       0
  4803 ;;      Totals:         0       0       0       0
  4804 ;;Total ram usage:        0 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    2
  4807 ;; This function calls:
  4808 ;;		Nothing
  4809 ;; This function is called by:
  4810 ;;		_getAD
  4811 ;;		_TouchPower
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815                           
  4816                           ;psect for function _set_TimeoutCleared
  4817  0877                     _set_TimeoutCleared:	
  4818                           
  4819                           ;Main_B1.c: 282: myMain.Timeout = 0;
  4820                           
  4821                           ;incstack = 0
  4822                           ; Regs used in _set_TimeoutCleared: [status,2]
  4823  0877  1283               	bcf	3,5	;RP0=0, select bank0
  4824  0878  1303               	bcf	3,6	;RP1=0, select bank0
  4825  0879  1133               	bcf	_myMain+2,2
  4826                           
  4827                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  4828  087A  01B4               	clrf	_myMain+3
  4829  087B  01B5               	clrf	_myMain+4
  4830  087C  0008               	return
  4831  087D                     __end_of_set_TimeoutCleared:	
  4832                           
  4833                           	psect	text20
  4834  0988                     __ptext20:	
  4835 ;; *************** function _Timeout_Counter *****************
  4836 ;; Defined at:
  4837 ;;		line 272 in file "../src/Main_B1.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;		None
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;		None               void
  4844 ;; Registers used:
  4845 ;;		wreg, status,2
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4851 ;;      Params:         0       0       0       0
  4852 ;;      Locals:         0       0       0       0
  4853 ;;      Temps:          0       0       0       0
  4854 ;;      Totals:         0       0       0       0
  4855 ;;Total ram usage:        0 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    2
  4858 ;; This function calls:
  4859 ;;		Nothing
  4860 ;; This function is called by:
  4861 ;;		_getAD
  4862 ;;		_TouchPower
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _Timeout_Counter
  4868  0988                     _Timeout_Counter:	
  4869                           
  4870                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  4874  0988  3001               	movlw	1
  4875  0989  1283               	bcf	3,5	;RP0=0, select bank0
  4876  098A  1303               	bcf	3,6	;RP1=0, select bank0
  4877  098B  07B4               	addwf	_myMain+3,f
  4878  098C  1803               	skipnc
  4879  098D  0AB5               	incf	_myMain+4,f
  4880  098E  3000               	movlw	0
  4881  098F  07B5               	addwf	_myMain+4,f
  4882                           
  4883                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  4884  0990  3061               	movlw	97
  4885  0991  0635               	xorwf	_myMain+4,w
  4886  0992  1D03               	skipz
  4887  0993  2996               	goto	u8365
  4888  0994  30A8               	movlw	168
  4889  0995  0634               	xorwf	_myMain+3,w
  4890  0996                     u8365:	
  4891  0996  1D03               	skipz
  4892  0997  0008               	return
  4893                           
  4894                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  4895  0998  01B4               	clrf	_myMain+3
  4896  0999  01B5               	clrf	_myMain+4
  4897                           
  4898                           ;Main_B1.c: 276: myMain.Timeout = 1;
  4899  099A  1533               	bsf	_myMain+2,2
  4900  099B  0008               	return
  4901  099C                     __end_of_Timeout_Counter:	
  4902                           
  4903                           	psect	text21
  4904  084B                     __ptext21:	
  4905 ;; *************** function _Switch_Initialization *****************
  4906 ;; Defined at:
  4907 ;;		line 46 in file "../src/Switch_B1.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;		None
  4910 ;; Auto vars:     Size  Location     Type
  4911 ;;		None
  4912 ;; Return value:  Size  Location     Type
  4913 ;;		None               void
  4914 ;; Registers used:
  4915 ;;		None
  4916 ;; Tracked objects:
  4917 ;;		On entry : 0/0
  4918 ;;		On exit  : 0/0
  4919 ;;		Unchanged: 0/0
  4920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4921 ;;      Params:         0       0       0       0
  4922 ;;      Locals:         0       0       0       0
  4923 ;;      Temps:          0       0       0       0
  4924 ;;      Totals:         0       0       0       0
  4925 ;;Total ram usage:        0 bytes
  4926 ;; Hardware stack levels used:    1
  4927 ;; Hardware stack levels required when called:    2
  4928 ;; This function calls:
  4929 ;;		Nothing
  4930 ;; This function is called by:
  4931 ;;		_main
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           
  4936                           ;psect for function _Switch_Initialization
  4937  084B                     _Switch_Initialization:	
  4938                           
  4939                           ;incstack = 0
  4940                           ; Regs used in _Switch_Initialization: []
  4941  084B  0008               	return
  4942  084C                     __end_of_Switch_Initialization:	
  4943                           
  4944                           	psect	text22
  4945  0854                     __ptext22:	
  4946 ;; *************** function _SYSC_Main *****************
  4947 ;; Defined at:
  4948 ;;		line 17 in file "../src/SYSC_B1.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;		None               void
  4955 ;; Registers used:
  4956 ;;		wreg, status,2, status,0, pclath, cstack
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4962 ;;      Params:         0       0       0       0
  4963 ;;      Locals:         0       0       0       0
  4964 ;;      Temps:          0       0       0       0
  4965 ;;      Totals:         0       0       0       0
  4966 ;;Total ram usage:        0 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    4
  4969 ;; This function calls:
  4970 ;;		_setSYSC_Main
  4971 ;; This function is called by:
  4972 ;;		_main
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           
  4977                           ;psect for function _SYSC_Main
  4978  0854                     _SYSC_Main:	
  4979                           
  4980                           ;SYSC_B1.c: 19: setSYSC_Main();
  4981                           
  4982                           ;incstack = 0
  4983                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4984  0854  158A  24E8         	fcall	_setSYSC_Main
  4985  0856  0008               	return
  4986  0857                     __end_of_SYSC_Main:	
  4987                           
  4988                           	psect	text23
  4989  0CE8                     __ptext23:	
  4990 ;; *************** function _setSYSC_Main *****************
  4991 ;; Defined at:
  4992 ;;		line 23 in file "../src/SYSC_B1.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;		None
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;		None
  4997 ;; Return value:  Size  Location     Type
  4998 ;;		None               void
  4999 ;; Registers used:
  5000 ;;		wreg, status,2, status,0, pclath, cstack
  5001 ;; Tracked objects:
  5002 ;;		On entry : 0/0
  5003 ;;		On exit  : 0/0
  5004 ;;		Unchanged: 0/0
  5005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5006 ;;      Params:         0       0       0       0
  5007 ;;      Locals:         0       0       0       0
  5008 ;;      Temps:          0       0       0       0
  5009 ;;      Totals:         0       0       0       0
  5010 ;;Total ram usage:        0 bytes
  5011 ;; Hardware stack levels used:    1
  5012 ;; Hardware stack levels required when called:    3
  5013 ;; This function calls:
  5014 ;;		_getMain_All_Error_Status
  5015 ;; This function is called by:
  5016 ;;		_SYSC_Main
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           
  5021                           ;psect for function _setSYSC_Main
  5022  0CE8                     _setSYSC_Main:	
  5023                           
  5024                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  5025                           
  5026                           ;incstack = 0
  5027                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  5028  0CE8  1283               	bcf	3,5	;RP0=0, select bank0
  5029  0CE9  1303               	bcf	3,6	;RP1=0, select bank0
  5030  0CEA  1C2C               	btfss	_SYSC,0
  5031  0CEB  0008               	return
  5032                           
  5033                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  5034  0CEC  18AC               	btfsc	_SYSC,1
  5035  0CED  2CFF               	goto	l4144
  5036                           
  5037                           ;SYSC_B1.c: 27: SYSC.Timer++;
  5038  0CEE  3001               	movlw	1
  5039  0CEF  07AD               	addwf	_SYSC+1,f
  5040  0CF0  1803               	skipnc
  5041  0CF1  0AAE               	incf	_SYSC+2,f
  5042  0CF2  3000               	movlw	0
  5043  0CF3  07AE               	addwf	_SYSC+2,f
  5044                           
  5045                           ;SYSC_B1.c: 28: if (SYSC.Timer >= (160 / 20)) {
  5046  0CF4  3000               	movlw	0
  5047  0CF5  022E               	subwf	_SYSC+2,w
  5048  0CF6  3008               	movlw	8
  5049  0CF7  1903               	skipnz
  5050  0CF8  022D               	subwf	_SYSC+1,w
  5051  0CF9  1C03               	skipc
  5052  0CFA  0008               	return
  5053                           
  5054                           ;SYSC_B1.c: 29: SYSC.Timer = 0;
  5055  0CFB  01AD               	clrf	_SYSC+1
  5056  0CFC  01AE               	clrf	_SYSC+2
  5057                           
  5058                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  5059  0CFD  14AC               	bsf	_SYSC,1
  5060                           
  5061                           ;SYSC_B1.c: 31: }
  5062                           ;SYSC_B1.c: 32: } else {
  5063  0CFE  0008               	return
  5064  0CFF                     l4144:	
  5065                           
  5066                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  5067  0CFF  3001               	movlw	1
  5068  0D00  158A  242C  158A   	fcall	_getMain_All_Error_Status
  5069  0D03  3800               	iorlw	0
  5070  0D04  1D03               	skipz
  5071  0D05  0008               	return
  5072                           
  5073                           ;SYSC_B1.c: 34: SYSC.Timer++;
  5074  0D06  3001               	movlw	1
  5075  0D07  1283               	bcf	3,5	;RP0=0, select bank0
  5076  0D08  1303               	bcf	3,6	;RP1=0, select bank0
  5077  0D09  07AD               	addwf	_SYSC+1,f
  5078  0D0A  1803               	skipnc
  5079  0D0B  0AAE               	incf	_SYSC+2,f
  5080  0D0C  3000               	movlw	0
  5081  0D0D  07AE               	addwf	_SYSC+2,f
  5082                           
  5083                           ;SYSC_B1.c: 35: if (SYSC.Timer == (500 / 20)) {
  5084  0D0E  3019               	movlw	25
  5085  0D0F  062D               	xorwf	_SYSC+1,w
  5086  0D10  042E               	iorwf	_SYSC+2,w
  5087  0D11  1D03               	skipz
  5088  0D12  2D18               	goto	l4150
  5089                           
  5090                           ;SYSC_B1.c: 36: SYSC.Timer = 0;
  5091  0D13  01AD               	clrf	_SYSC+1
  5092  0D14  01AE               	clrf	_SYSC+2
  5093                           
  5094                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  5095  0D15  01AF               	clrf	_SYSC+3
  5096  0D16  01B0               	clrf	_SYSC+4
  5097                           
  5098                           ;SYSC_B1.c: 38: } else {
  5099  0D17  0008               	return
  5100  0D18                     l4150:	
  5101                           
  5102                           ;SYSC_B1.c: 39: SYSC.Counter++;
  5103  0D18  3001               	movlw	1
  5104  0D19  07AF               	addwf	_SYSC+3,f
  5105  0D1A  1803               	skipnc
  5106  0D1B  0AB0               	incf	_SYSC+4,f
  5107  0D1C  3000               	movlw	0
  5108  0D1D  07B0               	addwf	_SYSC+4,f
  5109                           
  5110                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  5111  0D1E  3001               	movlw	1
  5112  0D1F  0630               	xorwf	_SYSC+4,w
  5113  0D20  1D03               	skipz
  5114  0D21  2D24               	goto	u3855
  5115  0D22  30F4               	movlw	244
  5116  0D23  062F               	xorwf	_SYSC+3,w
  5117  0D24                     u3855:	
  5118  0D24  1D03               	skipz
  5119  0D25  0008               	return
  5120                           
  5121                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  5122  0D26  01AF               	clrf	_SYSC+3
  5123  0D27  01B0               	clrf	_SYSC+4
  5124                           
  5125                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  5126  0D28  10AC               	bcf	_SYSC,1
  5127  0D29  0008               	return
  5128  0D2A                     __end_of_setSYSC_Main:	
  5129                           
  5130                           	psect	text24
  5131  0851                     __ptext24:	
  5132 ;; *************** function _SYSC_Initialization *****************
  5133 ;; Defined at:
  5134 ;;		line 7 in file "../src/SYSC_B1.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;		None               void
  5141 ;; Registers used:
  5142 ;;		status,2, status,0, pclath, cstack
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5148 ;;      Params:         0       0       0       0
  5149 ;;      Locals:         0       0       0       0
  5150 ;;      Temps:          0       0       0       0
  5151 ;;      Totals:         0       0       0       0
  5152 ;;Total ram usage:        0 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    3
  5155 ;; This function calls:
  5156 ;;		_setSYSC_Initialization
  5157 ;; This function is called by:
  5158 ;;		_main
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           
  5163                           ;psect for function _SYSC_Initialization
  5164  0851                     _SYSC_Initialization:	
  5165                           
  5166                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  5170  0851  158A  2062         	fcall	_setSYSC_Initialization
  5171  0853  0008               	return
  5172  0854                     __end_of_SYSC_Initialization:	
  5173                           
  5174                           	psect	text25
  5175  0862                     __ptext25:	
  5176 ;; *************** function _setSYSC_Initialization *****************
  5177 ;; Defined at:
  5178 ;;		line 13 in file "../src/SYSC_B1.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;		None
  5181 ;; Auto vars:     Size  Location     Type
  5182 ;;		None
  5183 ;; Return value:  Size  Location     Type
  5184 ;;		None               void
  5185 ;; Registers used:
  5186 ;;		None
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5192 ;;      Params:         0       0       0       0
  5193 ;;      Locals:         0       0       0       0
  5194 ;;      Temps:          0       0       0       0
  5195 ;;      Totals:         0       0       0       0
  5196 ;;Total ram usage:        0 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    2
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_SYSC_Initialization
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           
  5207                           ;psect for function _setSYSC_Initialization
  5208  0862                     _setSYSC_Initialization:	
  5209                           
  5210                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in _setSYSC_Initialization: []
  5214  0862  1283               	bcf	3,5	;RP0=0, select bank0
  5215  0863  1303               	bcf	3,6	;RP1=0, select bank0
  5216  0864  142C               	bsf	_SYSC,0
  5217  0865  0008               	return
  5218  0866                     __end_of_setSYSC_Initialization:	
  5219                           
  5220                           	psect	text26
  5221  0212                     __ptext26:	
  5222 ;; *************** function _PIR_Main *****************
  5223 ;; Defined at:
  5224 ;;		line 13 in file "../src/PIR_B1.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;		None
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  LightsStatus    1   16[BANK0 ] unsigned char 
  5229 ;;  cds             1   15[BANK0 ] unsigned char 
  5230 ;;  TriggerValue    1   14[BANK0 ] unsigned char 
  5231 ;;  Enable_Switc    1   13[BANK0 ] unsigned char 
  5232 ;;  error           1   10[BANK0 ] unsigned char 
  5233 ;; Return value:  Size  Location     Type
  5234 ;;		None               void
  5235 ;; Registers used:
  5236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5242 ;;      Params:         0       0       0       0
  5243 ;;      Locals:         0       7       0       0
  5244 ;;      Temps:          0       4       0       0
  5245 ;;      Totals:         0      11       0       0
  5246 ;;Total ram usage:       11 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:    5
  5249 ;; This function calls:
  5250 ;;		_getCDS_Status
  5251 ;;		_getLights_Status
  5252 ;;		_getMain_All_Error_Status
  5253 ;;		_setLights_SwOff
  5254 ;;		_setLights_SwOn
  5255 ;; This function is called by:
  5256 ;;		_main
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           
  5261                           ;psect for function _PIR_Main
  5262  0212                     _PIR_Main:	
  5263                           
  5264                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  5265                           
  5266                           ;incstack = 0
  5267                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5268  0212  3000               	movlw	0
  5269  0213  158A  242C  118A   	fcall	_getMain_All_Error_Status
  5270  0216  1283               	bcf	3,5	;RP0=0, select bank0
  5271  0217  1303               	bcf	3,6	;RP1=0, select bank0
  5272  0218  00E0               	movwf	??_PIR_Main
  5273  0219  0860               	movf	??_PIR_Main,w
  5274  021A  00E4               	movwf	PIR_Main@error
  5275                           
  5276                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  5277  021B  158A  209B  118A   	fcall	_getCDS_Status
  5278  021E  1283               	bcf	3,5	;RP0=0, select bank0
  5279  021F  1303               	bcf	3,6	;RP1=0, select bank0
  5280  0220  00E0               	movwf	??_PIR_Main
  5281  0221  0860               	movf	??_PIR_Main,w
  5282  0222  00E9               	movwf	PIR_Main@cds
  5283                           
  5284                           ;PIR_B1.c: 16: char LightsStatus = 0;
  5285  0223  01EA               	clrf	PIR_Main@LightsStatus
  5286                           
  5287                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  5288  0224  01E7               	clrf	PIR_Main@Enable_Switch
  5289  0225  0AE7               	incf	PIR_Main@Enable_Switch,f
  5290                           
  5291                           ;PIR_B1.c: 18: char TriggerValue = 0;
  5292  0226  01E8               	clrf	PIR_Main@TriggerValue
  5293                           
  5294                           ;PIR_B1.c: 20: Enable_Switch = RB3 == 1 ? 1 : 0;
  5295  0227  3000               	movlw	0
  5296  0228  1986               	btfsc	6,3	;volatile
  5297  0229  3001               	movlw	1
  5298  022A  00E7               	movwf	PIR_Main@Enable_Switch
  5299                           
  5300                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  5301  022B  3001               	movlw	1
  5302  022C  158A  2141  118A   	fcall	_getLights_Status
  5303  022F  1283               	bcf	3,5	;RP0=0, select bank0
  5304  0230  1303               	bcf	3,6	;RP1=0, select bank0
  5305  0231  00E0               	movwf	??_PIR_Main
  5306  0232  0860               	movf	??_PIR_Main,w
  5307  0233  00EA               	movwf	PIR_Main@LightsStatus
  5308                           
  5309                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  5310  0234  1683               	bsf	3,5	;RP0=1, select bank1
  5311  0235  1303               	bcf	3,6	;RP1=0, select bank1
  5312  0236  1C20               	btfss	__PIR^(0+128),0
  5313  0237  2B9C               	goto	l1056
  5314                           
  5315                           ;PIR_B1.c: 36: if (error == 0) {
  5316  0238  1283               	bcf	3,5	;RP0=0, select bank0
  5317  0239  1303               	bcf	3,6	;RP1=0, select bank0
  5318  023A  08E4               	movf	PIR_Main@error,f
  5319  023B  1D03               	skipz
  5320  023C  2A63               	goto	l1057
  5321                           
  5322                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  5323  023D  0869               	movf	PIR_Main@cds,w
  5324  023E  3A01               	xorlw	1
  5325  023F  1D03               	skipz
  5326  0240  2A49               	goto	l1058
  5327  0241  0867               	movf	PIR_Main@Enable_Switch,w
  5328  0242  3A01               	xorlw	1
  5329  0243  1D03               	skipz
  5330  0244  2A49               	goto	l1058
  5331                           
  5332                           ;PIR_B1.c: 39: _PIR.Available = 1;
  5333  0245  1683               	bsf	3,5	;RP0=1, select bank1
  5334  0246  1303               	bcf	3,6	;RP1=0, select bank1
  5335  0247  17A0               	bsf	__PIR^(0+128),7
  5336                           
  5337                           ;PIR_B1.c: 40: } else {
  5338  0248  2A5D               	goto	l7168
  5339  0249                     l1058:	
  5340                           
  5341                           ;PIR_B1.c: 41: _PIR.Available = 0;
  5342  0249  1683               	bsf	3,5	;RP0=1, select bank1
  5343  024A  1303               	bcf	3,6	;RP1=0, select bank1
  5344  024B  13A0               	bcf	__PIR^(0+128),7
  5345                           
  5346                           ;PIR_B1.c: 42: if (_PIR.OK == 1) {
  5347  024C  1DA0               	btfss	__PIR^(0+128),3
  5348  024D  2A5D               	goto	l7168
  5349                           
  5350                           ;PIR_B1.c: 44: if (getLights_Status(1) == 1) {
  5351  024E  3001               	movlw	1
  5352  024F  158A  2141  118A   	fcall	_getLights_Status
  5353  0252  3A01               	xorlw	1
  5354  0253  1D03               	skipz
  5355  0254  2A5D               	goto	l7168
  5356                           
  5357                           ;PIR_B1.c: 45: setLights_SwOn(1);
  5358  0255  3001               	movlw	1
  5359  0256  158A  246A  118A   	fcall	_setLights_SwOn
  5360                           
  5361                           ;PIR_B1.c: 46: setLights_SwOff(1);
  5362  0259  3001               	movlw	1
  5363  025A  158A  2357  118A   	fcall	_setLights_SwOff
  5364  025D                     l7168:	
  5365                           
  5366                           ;PIR_B1.c: 48: }
  5367                           ;PIR_B1.c: 59: }
  5368                           ;PIR_B1.c: 60: }
  5369                           ;PIR_B1.c: 64: if (_PIR.Detect == 0) {
  5370  025D  1683               	bsf	3,5	;RP0=1, select bank1
  5371  025E  1303               	bcf	3,6	;RP1=0, select bank1
  5372  025F  1A20               	btfsc	__PIR^(0+128),4
  5373  0260  2A69               	goto	l1063
  5374                           
  5375                           ;PIR_B1.c: 65: _PIR.Detect = 1;
  5376  0261  1620               	bsf	__PIR^(0+128),4
  5377                           
  5378                           ;PIR_B1.c: 71: }
  5379                           ;PIR_B1.c: 72: } else {
  5380  0262  2A69               	goto	l1063
  5381  0263                     l1057:	
  5382                           
  5383                           ;PIR_B1.c: 73: if (_PIR.Detect == 1) {
  5384  0263  1683               	bsf	3,5	;RP0=1, select bank1
  5385  0264  1303               	bcf	3,6	;RP1=0, select bank1
  5386  0265  1E20               	btfss	__PIR^(0+128),4
  5387  0266  2A69               	goto	l1063
  5388                           
  5389                           ;PIR_B1.c: 74: _PIR.Detect = 0;
  5390  0267  1220               	bcf	__PIR^(0+128),4
  5391                           
  5392                           ;PIR_B1.c: 75: _PIR.Available = 0;
  5393  0268  13A0               	bcf	__PIR^(0+128),7
  5394  0269                     l1063:	
  5395                           
  5396                           ;PIR_B1.c: 93: }
  5397                           ;PIR_B1.c: 94: }
  5398                           ;PIR_B1.c: 96: if (_PIR.ADtoGO == 0) {
  5399  0269  18A0               	btfsc	__PIR^(0+128),1
  5400  026A  2A7A               	goto	l1065
  5401                           
  5402                           ;PIR_B1.c: 97: _PIR.Time++;
  5403  026B  3001               	movlw	1
  5404  026C  1283               	bcf	3,5	;RP0=0, select bank0
  5405  026D  1303               	bcf	3,6	;RP1=0, select bank0
  5406  026E  00E0               	movwf	??_PIR_Main
  5407  026F  0860               	movf	??_PIR_Main,w
  5408  0270  1683               	bsf	3,5	;RP0=1, select bank1
  5409  0271  1303               	bcf	3,6	;RP1=0, select bank1
  5410  0272  07A2               	addwf	(__PIR^(0+128)+2),f
  5411                           
  5412                           ;PIR_B1.c: 98: if (_PIR.Time == (100 / 20)) {
  5413  0273  0822               	movf	(__PIR^(0+128)+2),w
  5414  0274  3A05               	xorlw	5
  5415  0275  1D03               	skipz
  5416  0276  2B43               	goto	l7244
  5417                           
  5418                           ;PIR_B1.c: 99: _PIR.Time = 0;
  5419  0277  01A2               	clrf	(__PIR^(0+128)+2)
  5420                           
  5421                           ;PIR_B1.c: 100: _PIR.ADtoGO = 1;
  5422  0278  14A0               	bsf	__PIR^(0+128),1
  5423                           
  5424                           ;PIR_B1.c: 101: }
  5425                           ;PIR_B1.c: 102: } else {
  5426  0279  2B43               	goto	l7244
  5427  027A                     l1065:	
  5428                           
  5429                           ;PIR_B1.c: 103: if (_PIR.GO == 1) {
  5430  027A  1D20               	btfss	__PIR^(0+128),2
  5431  027B  2B43               	goto	l7244
  5432                           
  5433                           ;PIR_B1.c: 104: _PIR.GO = 0;
  5434  027C  1120               	bcf	__PIR^(0+128),2
  5435                           
  5436                           ;PIR_B1.c: 105: _PIR.ADtoGO = 0;
  5437  027D  10A0               	bcf	__PIR^(0+128),1
  5438                           
  5439                           ;PIR_B1.c: 106: if (_PIR.Available == 1) {
  5440  027E  1BA0               	btfsc	__PIR^(0+128),7
  5441                           
  5442                           ;PIR_B1.c: 107: if (_PIR.OK == 1) {
  5443  027F  1DA0               	btfss	__PIR^(0+128),3
  5444  0280  2B43               	goto	l7244
  5445                           
  5446                           ;PIR_B1.c: 109: _PIR.Time++;
  5447  0281  3001               	movlw	1
  5448  0282  1283               	bcf	3,5	;RP0=0, select bank0
  5449  0283  1303               	bcf	3,6	;RP1=0, select bank0
  5450  0284  00E0               	movwf	??_PIR_Main
  5451  0285  0860               	movf	??_PIR_Main,w
  5452  0286  1683               	bsf	3,5	;RP0=1, select bank1
  5453  0287  1303               	bcf	3,6	;RP1=0, select bank1
  5454  0288  07A2               	addwf	(__PIR^(0+128)+2),f
  5455                           
  5456                           ;PIR_B1.c: 110: if (_PIR.Time == 60) {
  5457  0289  0822               	movf	(__PIR^(0+128)+2),w
  5458  028A  3A3C               	xorlw	60
  5459  028B  1D03               	skipz
  5460  028C  2AC1               	goto	l7222
  5461                           
  5462                           ;PIR_B1.c: 111: _PIR.Time = 0;
  5463  028D  01A2               	clrf	(__PIR^(0+128)+2)
  5464                           
  5465                           ;PIR_B1.c: 112: if (_PIR.RangeCount >= 90) {
  5466  028E  305A               	movlw	90
  5467  028F  0247               	subwf	(__PIR^(0+128)+39),w
  5468  0290  1C03               	skipc
  5469  0291  2A9D               	goto	l7204
  5470                           
  5471                           ;PIR_B1.c: 113: _PIR.RangeTime1 = 0;
  5472  0292  01C6               	clrf	(__PIR^(0+128)+38)
  5473                           
  5474                           ;PIR_B1.c: 115: if (_PIR.RangeValue == 25) {
  5475  0293  0848               	movf	(__PIR^(0+128)+40),w
  5476  0294  3A19               	xorlw	25
  5477  0295  1903               	btfsc	3,2
  5478  0296  2AB2               	goto	L11
  5479                           
  5480                           ;PIR_B1.c: 117: } else if (_PIR.RangeValue == (25+10)) {
  5481                           
  5482                           ;PIR_B1.c: 116: _PIR.RangeValue = (25+10);
  5483  0297  0848               	movf	(__PIR^(0+128)+40),w
  5484  0298  3A23               	xorlw	35
  5485  0299  1D03               	skipz
  5486  029A  2AC0               	goto	l7220
  5487                           
  5488                           ;PIR_B1.c: 118: _PIR.RangeValue = (25+20);
  5489  029B  302D               	movlw	45
  5490  029C  2AB9               	goto	L10
  5491  029D                     l7204:	
  5492                           ;PIR_B1.c: 119: }
  5493                           ;PIR_B1.c: 120: } else if (_PIR.RangeCount <= 10) {
  5494                           
  5495  029D  300B               	movlw	11
  5496  029E  0247               	subwf	(__PIR^(0+128)+39),w
  5497  029F  1803               	skipnc
  5498  02A0  2AC0               	goto	l7220
  5499                           
  5500                           ;PIR_B1.c: 121: _PIR.RangeTime1++;
  5501  02A1  3001               	movlw	1
  5502  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  5503  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  5504  02A4  00E0               	movwf	??_PIR_Main
  5505  02A5  0860               	movf	??_PIR_Main,w
  5506  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  5507  02A7  1303               	bcf	3,6	;RP1=0, select bank1
  5508  02A8  07C6               	addwf	(__PIR^(0+128)+38),f
  5509                           
  5510                           ;PIR_B1.c: 122: if (_PIR.RangeTime1 == 2) {
  5511  02A9  0846               	movf	(__PIR^(0+128)+38),w
  5512  02AA  3A02               	xorlw	2
  5513  02AB  1D03               	skipz
  5514  02AC  2AC0               	goto	l7220
  5515                           
  5516                           ;PIR_B1.c: 123: _PIR.RangeTime1 = 0;
  5517  02AD  01C6               	clrf	(__PIR^(0+128)+38)
  5518                           
  5519                           ;PIR_B1.c: 125: if (_PIR.RangeValue == (25+20)) {
  5520  02AE  0848               	movf	(__PIR^(0+128)+40),w
  5521  02AF  3A2D               	xorlw	45
  5522  02B0  1D03               	skipz
  5523  02B1  2AB4               	goto	l7216
  5524  02B2                     L11:	
  5525                           
  5526                           ;PIR_B1.c: 126: _PIR.RangeValue = (25+10);
  5527  02B2  3023               	movlw	35
  5528  02B3  2AB9               	goto	L10
  5529  02B4                     l7216:	
  5530                           ;PIR_B1.c: 127: } else if (_PIR.RangeValue == (25+10)) {
  5531                           
  5532  02B4  0848               	movf	(__PIR^(0+128)+40),w
  5533  02B5  3A23               	xorlw	35
  5534  02B6  1D03               	skipz
  5535  02B7  2AC0               	goto	l7220
  5536                           
  5537                           ;PIR_B1.c: 128: _PIR.RangeValue = 25;
  5538  02B8  3019               	movlw	25
  5539  02B9                     L10:	
  5540  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  5541  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  5542  02BB  00E0               	movwf	??_PIR_Main
  5543  02BC  0860               	movf	??_PIR_Main,w
  5544  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  5545  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  5546  02BF  00C8               	movwf	(__PIR^(0+128)+40)
  5547  02C0                     l7220:	
  5548                           
  5549                           ;PIR_B1.c: 129: }
  5550                           ;PIR_B1.c: 130: }
  5551                           ;PIR_B1.c: 131: }
  5552                           ;PIR_B1.c: 132: _PIR.RangeCount = 0;
  5553  02C0  01C7               	clrf	(__PIR^(0+128)+39)
  5554  02C1                     l7222:	
  5555                           
  5556                           ;PIR_B1.c: 133: }
  5557                           ;PIR_B1.c: 136: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  5558                           ;PIR_B1.c: 137: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  5559  02C1  0848               	movf	(__PIR^(0+128)+40),w
  5560  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  5561  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  5562  02C4  00E0               	movwf	??_PIR_Main
  5563  02C5  01E1               	clrf	??_PIR_Main+1
  5564  02C6  09E0               	comf	??_PIR_Main,f
  5565  02C7  09E1               	comf	??_PIR_Main+1,f
  5566  02C8  0AE0               	incf	??_PIR_Main,f
  5567  02C9  1903               	skipnz
  5568  02CA  0AE1               	incf	??_PIR_Main+1,f
  5569  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  5570  02CC  1303               	bcf	3,6	;RP1=0, select bank1
  5571  02CD  0823               	movf	(__PIR^(0+128)+3),w
  5572  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  5573  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  5574  02D0  0760               	addwf	??_PIR_Main,w
  5575  02D1  00E2               	movwf	??_PIR_Main+2
  5576  02D2  0861               	movf	??_PIR_Main+1,w
  5577  02D3  1803               	skipnc
  5578  02D4  0A61               	incf	??_PIR_Main+1,w
  5579  02D5  00E3               	movwf	??_PIR_Main+3
  5580  02D6  0863               	movf	??_PIR_Main+3,w
  5581  02D7  3A80               	xorlw	128
  5582  02D8  3C80               	sublw	128
  5583  02D9  1D03               	skipz
  5584  02DA  2ADF               	goto	u10015
  5585  02DB  0862               	movf	??_PIR_Main+2,w
  5586  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5587  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  5588  02DE  0221               	subwf	(__PIR^(0+128)+1),w
  5589  02DF                     u10015:	
  5590  02DF  1C03               	skipc
  5591  02E0  2AFE               	goto	l7228
  5592  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  5593  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  5594  02E3  0823               	movf	(__PIR^(0+128)+3),w
  5595  02E4  0748               	addwf	(__PIR^(0+128)+40),w
  5596  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  5597  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  5598  02E7  00E0               	movwf	??_PIR_Main
  5599  02E8  01E1               	clrf	??_PIR_Main+1
  5600  02E9  0DE1               	rlf	??_PIR_Main+1,f
  5601  02EA  0861               	movf	??_PIR_Main+1,w
  5602  02EB  3A80               	xorlw	128
  5603  02EC  00E2               	movwf	??_PIR_Main+2
  5604  02ED  3080               	movlw	128
  5605  02EE  0262               	subwf	??_PIR_Main+2,w
  5606  02EF  1D03               	skipz
  5607  02F0  2AF7               	goto	u10025
  5608  02F1  1683               	bsf	3,5	;RP0=1, select bank1
  5609  02F2  1303               	bcf	3,6	;RP1=0, select bank1
  5610  02F3  0821               	movf	(__PIR^(0+128)+1),w
  5611  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  5612  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  5613  02F6  0260               	subwf	??_PIR_Main,w
  5614  02F7                     u10025:	
  5615  02F7  1C03               	skipc
  5616  02F8  2AFE               	goto	l7228
  5617                           
  5618                           ;PIR_B1.c: 139: _PIR.Count = 0;
  5619  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  5620  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  5621  02FB  01BE               	clrf	(__PIR^(0+128)+30)
  5622  02FC  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5623                           
  5624                           ;PIR_B1.c: 149: } else {
  5625  02FD  2B43               	goto	l7244
  5626  02FE                     l7228:	
  5627                           
  5628                           ;PIR_B1.c: 152: _PIR.RangeCount++;
  5629  02FE  3001               	movlw	1
  5630  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  5631  0300  1303               	bcf	3,6	;RP1=0, select bank0
  5632  0301  00E0               	movwf	??_PIR_Main
  5633  0302  0860               	movf	??_PIR_Main,w
  5634  0303  1683               	bsf	3,5	;RP0=1, select bank1
  5635  0304  1303               	bcf	3,6	;RP1=0, select bank1
  5636  0305  07C7               	addwf	(__PIR^(0+128)+39),f
  5637                           
  5638                           ;PIR_B1.c: 153: _PIR.Count++;
  5639  0306  3001               	movlw	1
  5640  0307  07BE               	addwf	(__PIR^(0+128)+30),f
  5641  0308  1803               	skipnc
  5642  0309  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5643  030A  3000               	movlw	0
  5644  030B  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5645                           
  5646                           ;PIR_B1.c: 155: TriggerValue = LightsStatus == 1 ? 3 : 3;
  5647  030C  1283               	bcf	3,5	;RP0=0, select bank0
  5648  030D  1303               	bcf	3,6	;RP1=0, select bank0
  5649  030E  086A               	movf	PIR_Main@LightsStatus,w
  5650  030F  3A01               	xorlw	1
  5651  0310  1903               	skipnz
  5652  0311  2B12               	goto	l7236
  5653  0312                     l7236:	
  5654  0312  3003               	movlw	3
  5655  0313  00E5               	movwf	_PIR_Main$3214
  5656  0314  3000               	movlw	0
  5657  0315  00E6               	movwf	_PIR_Main$3214+1
  5658  0316  0865               	movf	_PIR_Main$3214,w
  5659  0317  00E0               	movwf	??_PIR_Main
  5660  0318  0860               	movf	??_PIR_Main,w
  5661  0319  00E8               	movwf	PIR_Main@TriggerValue
  5662                           
  5663                           ;PIR_B1.c: 157: if (_PIR.Count == TriggerValue) {
  5664  031A  0868               	movf	PIR_Main@TriggerValue,w
  5665  031B  00E0               	movwf	??_PIR_Main
  5666  031C  01E1               	clrf	??_PIR_Main+1
  5667  031D  1683               	bsf	3,5	;RP0=1, select bank1
  5668  031E  1303               	bcf	3,6	;RP1=0, select bank1
  5669  031F  083F               	movf	((__PIR+1)^(0+128)+30),w
  5670  0320  1283               	bcf	3,5	;RP0=0, select bank0
  5671  0321  1303               	bcf	3,6	;RP1=0, select bank0
  5672  0322  0661               	xorwf	??_PIR_Main+1,w
  5673  0323  1D03               	skipz
  5674  0324  2B2B               	goto	u10045
  5675  0325  1683               	bsf	3,5	;RP0=1, select bank1
  5676  0326  1303               	bcf	3,6	;RP1=0, select bank1
  5677  0327  083E               	movf	(__PIR^(0+128)+30),w
  5678  0328  1283               	bcf	3,5	;RP0=0, select bank0
  5679  0329  1303               	bcf	3,6	;RP1=0, select bank0
  5680  032A  0660               	xorwf	??_PIR_Main,w
  5681  032B                     u10045:	
  5682  032B  1D03               	skipz
  5683  032C  2B43               	goto	l7244
  5684                           
  5685                           ;PIR_B1.c: 158: _PIR.Count = 0;
  5686  032D  1683               	bsf	3,5	;RP0=1, select bank1
  5687  032E  1303               	bcf	3,6	;RP1=0, select bank1
  5688  032F  01BE               	clrf	(__PIR^(0+128)+30)
  5689  0330  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5690                           
  5691                           ;PIR_B1.c: 160: _PIR.CloseTimeSeconds = 0;
  5692  0331  01C2               	clrf	(__PIR^(0+128)+34)
  5693                           
  5694                           ;PIR_B1.c: 161: _PIR.CloseTimeMinutes = 0;
  5695  0332  01C0               	clrf	(__PIR^(0+128)+32)
  5696  0333  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5697                           
  5698                           ;PIR_B1.c: 167: if (getLights_Status(1) == 0) {
  5699  0334  3001               	movlw	1
  5700  0335  158A  2141  118A   	fcall	_getLights_Status
  5701  0338  3800               	iorlw	0
  5702  0339  1D03               	skipz
  5703  033A  2B43               	goto	l7244
  5704                           
  5705                           ;PIR_B1.c: 168: setLights_SwOn(1);
  5706  033B  3001               	movlw	1
  5707  033C  158A  246A  118A   	fcall	_setLights_SwOn
  5708                           
  5709                           ;PIR_B1.c: 169: setLights_SwOff(1);
  5710  033F  3001               	movlw	1
  5711  0340  158A  2357  118A   	fcall	_setLights_SwOff
  5712  0343                     l7244:	
  5713                           
  5714                           ;PIR_B1.c: 171: }
  5715                           ;PIR_B1.c: 231: }
  5716                           ;PIR_B1.c: 232: }
  5717                           ;PIR_B1.c: 233: }
  5718                           ;PIR_B1.c: 234: }
  5719                           ;PIR_B1.c: 235: }
  5720                           ;PIR_B1.c: 236: }
  5721                           ;PIR_B1.c: 237: if (_PIR.OK == 0) {
  5722  0343  1683               	bsf	3,5	;RP0=1, select bank1
  5723  0344  1303               	bcf	3,6	;RP1=0, select bank1
  5724  0345  19A0               	btfsc	__PIR^(0+128),3
  5725  0346  2B6C               	goto	l7258
  5726                           
  5727                           ;PIR_B1.c: 238: _PIR.Count++;
  5728  0347  3001               	movlw	1
  5729  0348  07BE               	addwf	(__PIR^(0+128)+30),f
  5730  0349  1803               	skipnc
  5731  034A  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5732  034B  3000               	movlw	0
  5733  034C  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5734                           
  5735                           ;PIR_B1.c: 239: if (_PIR.Count == (30000 / 20)) {
  5736  034D  3005               	movlw	5
  5737  034E  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5738  034F  1D03               	skipz
  5739  0350  2B53               	goto	u10075
  5740  0351  30DC               	movlw	220
  5741  0352  063E               	xorwf	(__PIR^(0+128)+30),w
  5742  0353                     u10075:	
  5743  0353  1D03               	skipz
  5744  0354  0008               	return
  5745                           
  5746                           ;PIR_B1.c: 240: _PIR.Count = 0;
  5747  0355  01BE               	clrf	(__PIR^(0+128)+30)
  5748  0356  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5749                           
  5750                           ;PIR_B1.c: 241: _PIR.OK = 1;
  5751  0357  15A0               	bsf	__PIR^(0+128),3
  5752                           
  5753                           ;PIR_B1.c: 245: if (cds == 0) {
  5754  0358  1283               	bcf	3,5	;RP0=0, select bank0
  5755  0359  1303               	bcf	3,6	;RP1=0, select bank0
  5756  035A  08E9               	movf	PIR_Main@cds,f
  5757  035B  1D03               	skipz
  5758  035C  0008               	return
  5759                           
  5760                           ;PIR_B1.c: 248: if (getLights_Status(1) == 1) {
  5761  035D  3001               	movlw	1
  5762  035E  158A  2141  118A   	fcall	_getLights_Status
  5763  0361  3A01               	xorlw	1
  5764  0362  1D03               	skipz
  5765  0363  0008               	return
  5766                           
  5767                           ;PIR_B1.c: 249: setLights_SwOn(1);
  5768  0364  3001               	movlw	1
  5769  0365  158A  246A  118A   	fcall	_setLights_SwOn
  5770                           
  5771                           ;PIR_B1.c: 250: setLights_SwOff(1);
  5772  0368  3001               	movlw	1
  5773  0369  158A  2357         	fcall	_setLights_SwOff
  5774                           
  5775                           ;PIR_B1.c: 252: }
  5776                           ;PIR_B1.c: 264: }
  5777                           ;PIR_B1.c: 265: }
  5778                           ;PIR_B1.c: 266: } else {
  5779  036B  0008               	return
  5780  036C                     l7258:	
  5781                           
  5782                           ;PIR_B1.c: 267: if (LightsStatus == 1) {
  5783  036C  1283               	bcf	3,5	;RP0=0, select bank0
  5784  036D  1303               	bcf	3,6	;RP1=0, select bank0
  5785  036E  086A               	movf	PIR_Main@LightsStatus,w
  5786  036F  3A01               	xorlw	1
  5787  0370  1D03               	skipz
  5788  0371  0008               	return
  5789                           
  5790                           ;PIR_B1.c: 268: _PIR.CloseTimeSeconds++;
  5791  0372  3001               	movlw	1
  5792  0373  00E0               	movwf	??_PIR_Main
  5793  0374  0860               	movf	??_PIR_Main,w
  5794  0375  1683               	bsf	3,5	;RP0=1, select bank1
  5795  0376  1303               	bcf	3,6	;RP1=0, select bank1
  5796  0377  07C2               	addwf	(__PIR^(0+128)+34),f
  5797                           
  5798                           ;PIR_B1.c: 269: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5799  0378  0842               	movf	(__PIR^(0+128)+34),w
  5800  0379  3A32               	xorlw	50
  5801  037A  1D03               	skipz
  5802  037B  0008               	return
  5803                           
  5804                           ;PIR_B1.c: 270: _PIR.CloseTimeSeconds = 0;
  5805  037C  01C2               	clrf	(__PIR^(0+128)+34)
  5806                           
  5807                           ;PIR_B1.c: 271: _PIR.CloseTimeMinutes++;
  5808  037D  3001               	movlw	1
  5809  037E  07C0               	addwf	(__PIR^(0+128)+32),f
  5810  037F  1803               	skipnc
  5811  0380  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5812  0381  3000               	movlw	0
  5813  0382  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5814                           
  5815                           ;PIR_B1.c: 272: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5816  0383  0844               	movf	((__PIR+1)^(0+128)+35),w
  5817  0384  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5818  0385  1D03               	skipz
  5819  0386  2B89               	goto	u10125
  5820  0387  0843               	movf	(__PIR^(0+128)+35),w
  5821  0388  0640               	xorwf	(__PIR^(0+128)+32),w
  5822  0389                     u10125:	
  5823  0389  1D03               	skipz
  5824  038A  0008               	return
  5825                           
  5826                           ;PIR_B1.c: 273: _PIR.CloseTimeMinutes = 0;
  5827  038B  01C0               	clrf	(__PIR^(0+128)+32)
  5828  038C  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5829                           
  5830                           ;PIR_B1.c: 279: if (getLights_Status(1) == 1) {
  5831  038D  3001               	movlw	1
  5832  038E  158A  2141  118A   	fcall	_getLights_Status
  5833  0391  3A01               	xorlw	1
  5834  0392  1D03               	skipz
  5835  0393  0008               	return
  5836                           
  5837                           ;PIR_B1.c: 280: setLights_SwOn(1);
  5838  0394  3001               	movlw	1
  5839  0395  158A  246A  118A   	fcall	_setLights_SwOn
  5840                           
  5841                           ;PIR_B1.c: 281: setLights_SwOff(1);
  5842  0398  3001               	movlw	1
  5843  0399  158A  2357         	fcall	_setLights_SwOff
  5844                           
  5845                           ;PIR_B1.c: 283: }
  5846                           ;PIR_B1.c: 295: }
  5847                           ;PIR_B1.c: 296: }
  5848                           ;PIR_B1.c: 297: }
  5849                           ;PIR_B1.c: 298: }
  5850                           ;PIR_B1.c: 299: } else {
  5851  039B  0008               	return
  5852  039C                     l1056:	
  5853                           
  5854                           ;PIR_B1.c: 300: if (myMain.PowerON == 1) {
  5855  039C  1283               	bcf	3,5	;RP0=0, select bank0
  5856  039D  1303               	bcf	3,6	;RP1=0, select bank0
  5857  039E  1C31               	btfss	_myMain,0
  5858  039F  0008               	return
  5859                           
  5860                           ;PIR_B1.c: 301: _PIR.Enable = 1;
  5861  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  5862  03A1  1303               	bcf	3,6	;RP1=0, select bank1
  5863  03A2  1420               	bsf	__PIR^(0+128),0
  5864                           
  5865                           ;PIR_B1.c: 307: if (getLights_Status(1) == 0) {
  5866  03A3  3001               	movlw	1
  5867  03A4  158A  2141  118A   	fcall	_getLights_Status
  5868  03A7  3800               	iorlw	0
  5869  03A8  1D03               	skipz
  5870  03A9  0008               	return
  5871                           
  5872                           ;PIR_B1.c: 308: setLights_SwOn(1);
  5873  03AA  3001               	movlw	1
  5874  03AB  158A  246A  118A   	fcall	_setLights_SwOn
  5875                           
  5876                           ;PIR_B1.c: 309: setLights_SwOff(1);
  5877  03AE  3001               	movlw	1
  5878  03AF  158A  2357         	fcall	_setLights_SwOff
  5879  03B1  0008               	return
  5880  03B2                     __end_of_PIR_Main:	
  5881                           
  5882                           	psect	text27
  5883  089B                     __ptext27:	
  5884 ;; *************** function _getCDS_Status *****************
  5885 ;; Defined at:
  5886 ;;		line 42 in file "../src/CDS_B1.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  status          1    4[COMMON] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      unsigned char 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5900 ;;      Params:         0       0       0       0
  5901 ;;      Locals:         1       0       0       0
  5902 ;;      Temps:          0       0       0       0
  5903 ;;      Totals:         1       0       0       0
  5904 ;;Total ram usage:        1 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    2
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_PIR_Main
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function _getCDS_Status
  5916  089B                     _getCDS_Status:	
  5917                           
  5918                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5922  089B  3000               	movlw	0
  5923  089C  1283               	bcf	3,5	;RP0=0, select bank0
  5924  089D  1303               	bcf	3,6	;RP1=0, select bank0
  5925  089E  1A36               	btfsc	__CDS,4
  5926  089F  3001               	movlw	1
  5927  08A0  00F9               	movwf	getCDS_Status@status
  5928                           
  5929                           ;CDS_B1.c: 44: return status;
  5930  08A1  0879               	movf	getCDS_Status@status,w
  5931  08A2  0008               	return
  5932  08A3                     __end_of_getCDS_Status:	
  5933                           
  5934                           	psect	text28
  5935  08AB                     __ptext28:	
  5936 ;; *************** function _PIR_Initialization *****************
  5937 ;; Defined at:
  5938 ;;		line 7 in file "../src/PIR_B1.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;		None
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;		None
  5943 ;; Return value:  Size  Location     Type
  5944 ;;		None               void
  5945 ;; Registers used:
  5946 ;;		wreg
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5952 ;;      Params:         0       0       0       0
  5953 ;;      Locals:         0       0       0       0
  5954 ;;      Temps:          1       0       0       0
  5955 ;;      Totals:         1       0       0       0
  5956 ;;Total ram usage:        1 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    2
  5959 ;; This function calls:
  5960 ;;		Nothing
  5961 ;; This function is called by:
  5962 ;;		_main
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           
  5967                           ;psect for function _PIR_Initialization
  5968  08AB                     _PIR_Initialization:	
  5969                           
  5970                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5971                           
  5972                           ;incstack = 0
  5973                           ; Regs used in _PIR_Initialization: [wreg]
  5974  08AB  3019               	movlw	25
  5975  08AC  00F9               	movwf	??_PIR_Initialization
  5976  08AD  0879               	movf	??_PIR_Initialization,w
  5977  08AE  1683               	bsf	3,5	;RP0=1, select bank1
  5978  08AF  1303               	bcf	3,6	;RP1=0, select bank1
  5979  08B0  00C8               	movwf	(__PIR^(0+128)+40)
  5980                           
  5981                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5982  08B1  3005               	movlw	5
  5983  08B2  00C3               	movwf	(__PIR^(0+128)+35)
  5984  08B3  3000               	movlw	0
  5985  08B4  00C4               	movwf	(__PIR^(0+128)+36)
  5986  08B5  0008               	return
  5987  08B6                     __end_of_PIR_Initialization:	
  5988                           
  5989                           	psect	text29
  5990  0912                     __ptext29:	
  5991 ;; *************** function _Mcu_Initialization *****************
  5992 ;; Defined at:
  5993 ;;		line 30 in file "../src/MCU_B1.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;		None               void
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0, pclath, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6007 ;;      Params:         0       0       0       0
  6008 ;;      Locals:         0       0       0       0
  6009 ;;      Temps:          0       0       0       0
  6010 ;;      Totals:         0       0       0       0
  6011 ;;Total ram usage:        0 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    3
  6014 ;; This function calls:
  6015 ;;		_ADC_Set
  6016 ;;		_Fosc_Set
  6017 ;;		_IO_Set
  6018 ;;		_TMR1_Set
  6019 ;;		_WDT_Set
  6020 ;; This function is called by:
  6021 ;;		_main
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _Mcu_Initialization
  6027  0912                     _Mcu_Initialization:	
  6028                           
  6029                           ;MCU_B1.c: 32: Fosc_Set();
  6030                           
  6031                           ;incstack = 0
  6032                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  6033  0912  158A  2066  158A   	fcall	_Fosc_Set
  6034                           
  6035                           ;MCU_B1.c: 34: IO_Set();
  6036  0915  158A  2239  158A   	fcall	_IO_Set
  6037                           
  6038                           ;MCU_B1.c: 36: ;;
  6039                           ;MCU_B1.c: 38: TMR1_Set();
  6040  0918  158A  20E7  158A   	fcall	_TMR1_Set
  6041                           
  6042                           ;MCU_B1.c: 40: ADC_Set();
  6043  091B  158A  2084  158A   	fcall	_ADC_Set
  6044                           
  6045                           ;MCU_B1.c: 42: ;;
  6046                           ;MCU_B1.c: 44: ;;
  6047                           ;MCU_B1.c: 46: ;;
  6048                           ;MCU_B1.c: 48: ;;
  6049                           ;MCU_B1.c: 50: ;;
  6050                           ;MCU_B1.c: 52: WDT_Set();
  6051  091E  158A  20F5         	fcall	_WDT_Set
  6052  0920  0008               	return
  6053  0921                     __end_of_Mcu_Initialization:	
  6054                           
  6055                           	psect	text30
  6056  08F5                     __ptext30:	
  6057 ;; *************** function _WDT_Set *****************
  6058 ;; Defined at:
  6059 ;;		line 1089 in file "../src/MCU_B1.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;		None
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;		None
  6064 ;; Return value:  Size  Location     Type
  6065 ;;		None               void
  6066 ;; Registers used:
  6067 ;;		wreg
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6073 ;;      Params:         0       0       0       0
  6074 ;;      Locals:         0       0       0       0
  6075 ;;      Temps:          1       0       0       0
  6076 ;;      Totals:         1       0       0       0
  6077 ;;Total ram usage:        1 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:    2
  6080 ;; This function calls:
  6081 ;;		Nothing
  6082 ;; This function is called by:
  6083 ;;		_Mcu_Initialization
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           
  6088                           ;psect for function _WDT_Set
  6089  08F5                     _WDT_Set:	
  6090                           
  6091                           ;MCU_B1.c: 1091: PSA = 1;
  6092                           
  6093                           ;incstack = 0
  6094                           ; Regs used in _WDT_Set: [wreg]
  6095  08F5  1683               	bsf	3,5	;RP0=1, select bank1
  6096  08F6  1303               	bcf	3,6	;RP1=0, select bank1
  6097  08F7  1581               	bsf	1,3	;volatile
  6098                           
  6099                           ;MCU_B1.c: 1092: PS0 = 1;
  6100  08F8  1401               	bsf	1,0	;volatile
  6101                           
  6102                           ;MCU_B1.c: 1093: PS1 = 1;
  6103  08F9  1481               	bsf	1,1	;volatile
  6104                           
  6105                           ;MCU_B1.c: 1094: PS2 = 1;
  6106  08FA  1501               	bsf	1,2	;volatile
  6107                           
  6108                           ;MCU_B1.c: 1098: WDT.Enable = 1;
  6109  08FB  1283               	bcf	3,5	;RP0=0, select bank0
  6110  08FC  1303               	bcf	3,6	;RP1=0, select bank0
  6111  08FD  143D               	bsf	_WDT,0
  6112                           
  6113                           ;MCU_B1.c: 1099: WDT.Timer = 10;
  6114  08FE  300A               	movlw	10
  6115  08FF  00F9               	movwf	??_WDT_Set
  6116  0900  0879               	movf	??_WDT_Set,w
  6117  0901  00BE               	movwf	_WDT+1
  6118  0902  0008               	return
  6119  0903                     __end_of_WDT_Set:	
  6120                           
  6121                           	psect	text31
  6122  08E7                     __ptext31:	
  6123 ;; *************** function _TMR1_Set *****************
  6124 ;; Defined at:
  6125 ;;		line 226 in file "../src/MCU_B1.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;		None
  6130 ;; Return value:  Size  Location     Type
  6131 ;;		None               void
  6132 ;; Registers used:
  6133 ;;		wreg
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6139 ;;      Params:         0       0       0       0
  6140 ;;      Locals:         0       0       0       0
  6141 ;;      Temps:          0       0       0       0
  6142 ;;      Totals:         0       0       0       0
  6143 ;;Total ram usage:        0 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    2
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_Mcu_Initialization
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _TMR1_Set
  6155  08E7                     _TMR1_Set:	
  6156                           
  6157                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _TMR1_Set: [wreg]
  6161  08E7  3041               	movlw	65
  6162  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  6163  08E9  1303               	bcf	3,6	;RP1=0, select bank0
  6164  08EA  0090               	movwf	16	;volatile
  6165                           
  6166                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  6167  08EB  30FA               	movlw	250
  6168  08EC  008F               	movwf	15	;volatile
  6169                           
  6170                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  6171  08ED  3038               	movlw	56
  6172  08EE  008E               	movwf	14	;volatile
  6173                           
  6174                           ;MCU_B1.c: 230: TMR1IE = 1;
  6175  08EF  1683               	bsf	3,5	;RP0=1, select bank1
  6176  08F0  1303               	bcf	3,6	;RP1=0, select bank1
  6177  08F1  140C               	bsf	12,0	;volatile
  6178                           
  6179                           ;MCU_B1.c: 231: PEIE = 1;
  6180  08F2  170B               	bsf	11,6	;volatile
  6181                           
  6182                           ;MCU_B1.c: 232: GIE = 1;
  6183  08F3  178B               	bsf	11,7	;volatile
  6184  08F4  0008               	return
  6185  08F5                     __end_of_TMR1_Set:	
  6186                           
  6187                           	psect	text32
  6188  0A39                     __ptext32:	
  6189 ;; *************** function _IO_Set *****************
  6190 ;; Defined at:
  6191 ;;		line 60 in file "../src/MCU_B1.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;		None
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, status,2
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6205 ;;      Params:         0       0       0       0
  6206 ;;      Locals:         0       0       0       0
  6207 ;;      Temps:          0       0       0       0
  6208 ;;      Totals:         0       0       0       0
  6209 ;;Total ram usage:        0 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    2
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		_Mcu_Initialization
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           
  6220                           ;psect for function _IO_Set
  6221  0A39                     _IO_Set:	
  6222                           
  6223                           ;MCU_B1.c: 62: TRISA = 0b00101110;;
  6224                           
  6225                           ;incstack = 0
  6226                           ; Regs used in _IO_Set: [wreg+status,2]
  6227  0A39  302E               	movlw	46
  6228  0A3A  1683               	bsf	3,5	;RP0=1, select bank1
  6229  0A3B  1303               	bcf	3,6	;RP1=0, select bank1
  6230  0A3C  0085               	movwf	5	;volatile
  6231                           
  6232                           ;MCU_B1.c: 63: TRISB = 0b00010101;;
  6233  0A3D  3015               	movlw	21
  6234  0A3E  0086               	movwf	6	;volatile
  6235                           
  6236                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  6237  0A3F  0187               	clrf	7	;volatile
  6238                           
  6239                           ;MCU_B1.c: 65: ANSELA = 0b00101110;;
  6240  0A40  302E               	movlw	46
  6241  0A41  1683               	bsf	3,5	;RP0=1, select bank3
  6242  0A42  1703               	bsf	3,6	;RP1=1, select bank3
  6243  0A43  0085               	movwf	5	;volatile
  6244                           
  6245                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  6246  0A44  3001               	movlw	1
  6247  0A45  0086               	movwf	6	;volatile
  6248                           
  6249                           ;MCU_B1.c: 67: PORTA = 0b00101110;;
  6250  0A46  302E               	movlw	46
  6251  0A47  1283               	bcf	3,5	;RP0=0, select bank0
  6252  0A48  1303               	bcf	3,6	;RP1=0, select bank0
  6253  0A49  0085               	movwf	5	;volatile
  6254                           
  6255                           ;MCU_B1.c: 68: PORTB = 0b00010101;;
  6256  0A4A  3015               	movlw	21
  6257  0A4B  0086               	movwf	6	;volatile
  6258                           
  6259                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  6260  0A4C  0187               	clrf	7	;volatile
  6261                           
  6262                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  6263  0A4D  1683               	bsf	3,5	;RP0=1, select bank1
  6264  0A4E  1303               	bcf	3,6	;RP1=0, select bank1
  6265  0A4F  0195               	clrf	21	;volatile
  6266  0A50  0008               	return
  6267  0A51                     __end_of_IO_Set:	
  6268                           
  6269                           	psect	text33
  6270  0866                     __ptext33:	
  6271 ;; *************** function _Fosc_Set *****************
  6272 ;; Defined at:
  6273 ;;		line 56 in file "../src/MCU_B1.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;		None
  6278 ;; Return value:  Size  Location     Type
  6279 ;;		None               void
  6280 ;; Registers used:
  6281 ;;		wreg
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6287 ;;      Params:         0       0       0       0
  6288 ;;      Locals:         0       0       0       0
  6289 ;;      Temps:          0       0       0       0
  6290 ;;      Totals:         0       0       0       0
  6291 ;;Total ram usage:        0 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    2
  6294 ;; This function calls:
  6295 ;;		Nothing
  6296 ;; This function is called by:
  6297 ;;		_Mcu_Initialization
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function _Fosc_Set
  6303  0866                     _Fosc_Set:	
  6304                           
  6305                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  6306                           
  6307                           ;incstack = 0
  6308                           ; Regs used in _Fosc_Set: [wreg]
  6309  0866  303C               	movlw	60
  6310  0867  1683               	bsf	3,5	;RP0=1, select bank1
  6311  0868  1303               	bcf	3,6	;RP1=0, select bank1
  6312  0869  0090               	movwf	16	;volatile
  6313  086A  0008               	return
  6314  086B                     __end_of_Fosc_Set:	
  6315                           
  6316                           	psect	text34
  6317  0884                     __ptext34:	
  6318 ;; *************** function _ADC_Set *****************
  6319 ;; Defined at:
  6320 ;;		line 425 in file "../src/MCU_B1.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;		None
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;		None               void
  6327 ;; Registers used:
  6328 ;;		wreg
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6334 ;;      Params:         0       0       0       0
  6335 ;;      Locals:         0       0       0       0
  6336 ;;      Temps:          0       0       0       0
  6337 ;;      Totals:         0       0       0       0
  6338 ;;Total ram usage:        0 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    2
  6341 ;; This function calls:
  6342 ;;		Nothing
  6343 ;; This function is called by:
  6344 ;;		_Mcu_Initialization
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           
  6349                           ;psect for function _ADC_Set
  6350  0884                     _ADC_Set:	
  6351                           
  6352                           ;MCU_B1.c: 426: ADCON1 = 0x73;
  6353                           
  6354                           ;incstack = 0
  6355                           ; Regs used in _ADC_Set: [wreg]
  6356  0884  3073               	movlw	115
  6357  0885  1683               	bsf	3,5	;RP0=1, select bank1
  6358  0886  1303               	bcf	3,6	;RP1=0, select bank1
  6359  0887  009F               	movwf	31	;volatile
  6360                           
  6361                           ;MCU_B1.c: 427: FVRCON = 0xc1;
  6362  0888  30C1               	movlw	193
  6363  0889  009D               	movwf	29	;volatile
  6364  088A  0008               	return
  6365  088B                     __end_of_ADC_Set:	
  6366                           
  6367                           	psect	text35
  6368  002E                     __ptext35:	
  6369 ;; *************** function _Load_Main *****************
  6370 ;; Defined at:
  6371 ;;		line 39 in file "../src/OverLoad_B1.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;		None
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;  i               2   15[BANK0 ] int 
  6376 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  6377 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  6378 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  6379 ;;  error           1    9[BANK0 ] unsigned char 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;		None               void
  6382 ;; Registers used:
  6383 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6389 ;;      Params:         0       0       0       0
  6390 ;;      Locals:         0       8       0       0
  6391 ;;      Temps:          0       2       0       0
  6392 ;;      Totals:         0      10       0       0
  6393 ;;Total ram usage:       10 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    3
  6396 ;; This function calls:
  6397 ;;		___lwdiv
  6398 ;;		_getLight_LoadGO
  6399 ;;		_getLight_Load_Status
  6400 ;;		_getMain_All_Error_Status
  6401 ;;		_getMain_All_LightsStatus
  6402 ;;		_getMain_Lights_Count
  6403 ;;		_setLoad_AH_AL_Restore
  6404 ;; This function is called by:
  6405 ;;		_main
  6406 ;; This function uses a non-reentrant model
  6407 ;;
  6408                           
  6409                           
  6410                           ;psect for function _Load_Main
  6411  002E                     _Load_Main:	
  6412                           
  6413                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6417  002E  3000               	movlw	0
  6418  002F  158A  242C  118A   	fcall	_getMain_All_Error_Status
  6419  0032  1283               	bcf	3,5	;RP0=0, select bank0
  6420  0033  1303               	bcf	3,6	;RP1=0, select bank0
  6421  0034  00E1               	movwf	??_Load_Main
  6422  0035  0861               	movf	??_Load_Main,w
  6423  0036  00E3               	movwf	Load_Main@error
  6424                           
  6425                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  6426  0037  01E7               	clrf	Load_Main@Load_RunStatus
  6427  0038  01E6               	clrf	Load_Main@ErrorCountValue
  6428  0039  01E8               	clrf	Load_Main@LightsCount
  6429                           
  6430                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  6431  003A  1683               	bsf	3,5	;RP0=1, select bank1
  6432  003B  1303               	bcf	3,6	;RP1=0, select bank1
  6433  003C  1C4A               	btfss	_Load^(0+128),0
  6434  003D  2A0A               	goto	l838
  6435                           
  6436                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  6437  003E  158A  2131  118A   	fcall	_getMain_All_LightsStatus
  6438  0041  3800               	iorlw	0
  6439  0042  1D03               	skipz
  6440  0043  2847               	goto	l6988
  6441                           
  6442                           ;OverLoad_B1.c: 45: Load.GO = 0;
  6443  0044  1683               	bsf	3,5	;RP0=1, select bank1
  6444  0045  1303               	bcf	3,6	;RP1=0, select bank1
  6445  0046  2866               	goto	l7004
  6446  0047                     l6988:	
  6447                           ;OverLoad_B1.c: 46: } else {
  6448                           
  6449                           
  6450                           ;OverLoad_B1.c: 69: if (error == 0) {
  6451  0047  1283               	bcf	3,5	;RP0=0, select bank0
  6452  0048  1303               	bcf	3,6	;RP1=0, select bank0
  6453  0049  08E3               	movf	Load_Main@error,f
  6454  004A  1D03               	skipz
  6455  004B  2863               	goto	l841
  6456                           
  6457                           ;OverLoad_B1.c: 70: Load.GO = 1;
  6458  004C  1683               	bsf	3,5	;RP0=1, select bank1
  6459  004D  1303               	bcf	3,6	;RP1=0, select bank1
  6460  004E  14CA               	bsf	_Load^(0+128),1
  6461                           
  6462                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  6463  004F  158A  206B  118A   	fcall	_getLight_LoadGO
  6464  0052  3A01               	xorlw	1
  6465  0053  1D03               	skipz
  6466  0054  285D               	goto	l842
  6467                           
  6468                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  6469  0055  1683               	bsf	3,5	;RP0=1, select bank1
  6470  0056  1303               	bcf	3,6	;RP1=0, select bank1
  6471  0057  1DCA               	btfss	_Load^(0+128),3
  6472  0058  1BCA               	btfsc	_Load^(0+128),7
  6473  0059  2867               	goto	l840
  6474                           
  6475                           ;OverLoad_B1.c: 74: Load.Run = 1;
  6476  005A  15CA               	bsf	_Load^(0+128),3
  6477                           
  6478                           ;OverLoad_B1.c: 75: Load.Count = 0;
  6479  005B  01E3               	clrf	(_Load^(0+128)+25)
  6480                           
  6481                           ;OverLoad_B1.c: 76: }
  6482                           ;OverLoad_B1.c: 77: } else {
  6483  005C  2867               	goto	l840
  6484  005D                     l842:	
  6485                           
  6486                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  6487  005D  1683               	bsf	3,5	;RP0=1, select bank1
  6488  005E  1303               	bcf	3,6	;RP1=0, select bank1
  6489  005F  1FCA               	btfss	_Load^(0+128),7
  6490  0060  2867               	goto	l840
  6491                           
  6492                           ;OverLoad_B1.c: 79: Load.OK = 0;
  6493  0061  13CA               	bcf	_Load^(0+128),7
  6494                           
  6495                           ;OverLoad_B1.c: 80: }
  6496                           ;OverLoad_B1.c: 81: }
  6497                           ;OverLoad_B1.c: 82: } else {
  6498  0062  2867               	goto	l840
  6499  0063                     l841:	
  6500                           
  6501                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  6502  0063  1683               	bsf	3,5	;RP0=1, select bank1
  6503  0064  1303               	bcf	3,6	;RP1=0, select bank1
  6504  0065  18CA               	btfsc	_Load^(0+128),1
  6505  0066                     l7004:	
  6506                           
  6507                           ;OverLoad_B1.c: 84: Load.GO = 0;
  6508  0066  10CA               	bcf	_Load^(0+128),1
  6509  0067                     l840:	
  6510                           
  6511                           ;OverLoad_B1.c: 85: }
  6512                           ;OverLoad_B1.c: 86: }
  6513                           ;OverLoad_B1.c: 88: }
  6514                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  6515  0067  1CCA               	btfss	_Load^(0+128),1
  6516  0068  29E3               	goto	l848
  6517                           
  6518                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  6519  0069  154A               	bsf	_Load^(0+128),2
  6520                           
  6521                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  6522  006A  1E4A               	btfss	_Load^(0+128),4
  6523  006B  29E1               	goto	l849
  6524                           
  6525                           ;OverLoad_B1.c: 95: Load.Time++;
  6526  006C  3001               	movlw	1
  6527  006D  07CB               	addwf	(_Load^(0+128)+1),f
  6528  006E  1803               	skipnc
  6529  006F  0ACC               	incf	((_Load+1)^(0+128)+1),f
  6530  0070  3000               	movlw	0
  6531  0071  07CC               	addwf	((_Load+1)^(0+128)+1),f
  6532                           
  6533                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  6534  0072  3000               	movlw	0
  6535  0073  024C               	subwf	((_Load+1)^(0+128)+1),w
  6536  0074  3002               	movlw	2
  6537  0075  1903               	skipnz
  6538  0076  024B               	subwf	(_Load^(0+128)+1),w
  6539  0077  1C03               	skipc
  6540  0078  0008               	return
  6541                           
  6542                           ;OverLoad_B1.c: 97: Load.Time = 0;
  6543  0079  01CB               	clrf	(_Load^(0+128)+1)
  6544  007A  01CC               	clrf	((_Load+1)^(0+128)+1)
  6545                           
  6546                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  6547  007B  124A               	bcf	_Load^(0+128),4
  6548                           
  6549                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  6550  007C  3001               	movlw	1
  6551  007D  1283               	bcf	3,5	;RP0=0, select bank0
  6552  007E  1303               	bcf	3,6	;RP1=0, select bank0
  6553  007F  00E9               	movwf	Load_Main@i
  6554  0080  3000               	movlw	0
  6555  0081  00EA               	movwf	Load_Main@i+1
  6556  0082  086A               	movf	Load_Main@i+1,w
  6557  0083  3A80               	xorlw	128
  6558  0084  00FF               	movwf	127
  6559  0085  3080               	movlw	128
  6560  0086  027F               	subwf	127,w
  6561  0087  1D03               	skipz
  6562  0088  288B               	goto	u9575
  6563  0089  3004               	movlw	4
  6564  008A  0269               	subwf	Load_Main@i,w
  6565  008B                     u9575:	
  6566  008B  1803               	btfsc	3,0
  6567  008C  28C9               	goto	l7026
  6568  008D                     l7020:	
  6569                           
  6570                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  6571  008D  1283               	bcf	3,5	;RP0=0, select bank0
  6572  008E  1303               	bcf	3,6	;RP1=0, select bank0
  6573  008F  0869               	movf	Load_Main@i,w
  6574  0090  3ED4               	addlw	(_Load+10)& (0+255)
  6575  0091  0084               	movwf	4
  6576  0092  1383               	bcf	3,7	;select IRP bank1
  6577  0093  0800               	movf	0,w
  6578  0094  00E1               	movwf	??_Load_Main
  6579  0095  01E2               	clrf	??_Load_Main+1
  6580  0096  0861               	movf	??_Load_Main,w
  6581  0097  1683               	bsf	3,5	;RP0=1, select bank1
  6582  0098  1303               	bcf	3,6	;RP1=0, select bank1
  6583  0099  07CF               	addwf	(_Load^(0+128)+5),f
  6584  009A  1803               	skipnc
  6585  009B  0AD0               	incf	((_Load+1)^(0+128)+5),f
  6586  009C  1283               	bcf	3,5	;RP0=0, select bank0
  6587  009D  1303               	bcf	3,6	;RP1=0, select bank0
  6588  009E  0862               	movf	??_Load_Main+1,w
  6589  009F  1683               	bsf	3,5	;RP0=1, select bank1
  6590  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  6591  00A1  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6592                           
  6593                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  6594  00A2  1283               	bcf	3,5	;RP0=0, select bank0
  6595  00A3  1303               	bcf	3,6	;RP1=0, select bank0
  6596  00A4  0869               	movf	Load_Main@i,w
  6597  00A5  3ED9               	addlw	(_Load+15)& (0+255)
  6598  00A6  0084               	movwf	4
  6599  00A7  0800               	movf	0,w
  6600  00A8  00E1               	movwf	??_Load_Main
  6601  00A9  01E2               	clrf	??_Load_Main+1
  6602  00AA  0861               	movf	??_Load_Main,w
  6603  00AB  1683               	bsf	3,5	;RP0=1, select bank1
  6604  00AC  1303               	bcf	3,6	;RP1=0, select bank1
  6605  00AD  07D1               	addwf	(_Load^(0+128)+7),f
  6606  00AE  1803               	skipnc
  6607  00AF  0AD2               	incf	((_Load+1)^(0+128)+7),f
  6608  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  6609  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  6610  00B2  0862               	movf	??_Load_Main+1,w
  6611  00B3  1683               	bsf	3,5	;RP0=1, select bank1
  6612  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  6613  00B5  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6614  00B6  3001               	movlw	1
  6615  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  6616  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  6617  00B9  07E9               	addwf	Load_Main@i,f
  6618  00BA  1803               	skipnc
  6619  00BB  0AEA               	incf	Load_Main@i+1,f
  6620  00BC  3000               	movlw	0
  6621  00BD  07EA               	addwf	Load_Main@i+1,f
  6622  00BE  086A               	movf	Load_Main@i+1,w
  6623  00BF  3A80               	xorlw	128
  6624  00C0  00FF               	movwf	127
  6625  00C1  3080               	movlw	128
  6626  00C2  027F               	subwf	127,w
  6627  00C3  1D03               	skipz
  6628  00C4  28C7               	goto	u9585
  6629  00C5  3004               	movlw	4
  6630  00C6  0269               	subwf	Load_Main@i,w
  6631  00C7                     u9585:	
  6632  00C7  1C03               	skipc
  6633  00C8  288D               	goto	l7020
  6634  00C9                     l7026:	
  6635                           
  6636                           ;OverLoad_B1.c: 103: }
  6637                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  6638  00C9  3003               	movlw	3
  6639  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  6640  00CB  1303               	bcf	3,6	;RP1=0, select bank0
  6641  00CC  00DA               	movwf	___lwdiv@divisor
  6642  00CD  3000               	movlw	0
  6643  00CE  00DB               	movwf	___lwdiv@divisor+1
  6644  00CF  1683               	bsf	3,5	;RP0=1, select bank1
  6645  00D0  1303               	bcf	3,6	;RP1=0, select bank1
  6646  00D1  0850               	movf	((_Load+1)^(0+128)+5),w
  6647  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  6648  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  6649  00D4  01DD               	clrf	___lwdiv@dividend+1
  6650  00D5  07DD               	addwf	___lwdiv@dividend+1,f
  6651  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  6652  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  6653  00D8  084F               	movf	(_Load^(0+128)+5),w
  6654  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  6655  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  6656  00DB  01DC               	clrf	___lwdiv@dividend
  6657  00DC  07DC               	addwf	___lwdiv@dividend,f
  6658  00DD  158A  24A8  118A   	fcall	___lwdiv
  6659  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  6660  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  6661  00E2  085B               	movf	?___lwdiv+1,w
  6662  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  6663  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  6664  00E5  01D0               	clrf	((_Load+1)^(0+128)+5)
  6665  00E6  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6666  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  6667  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  6668  00E9  085A               	movf	?___lwdiv,w
  6669  00EA  1683               	bsf	3,5	;RP0=1, select bank1
  6670  00EB  1303               	bcf	3,6	;RP1=0, select bank1
  6671  00EC  01CF               	clrf	(_Load^(0+128)+5)
  6672  00ED  07CF               	addwf	(_Load^(0+128)+5),f
  6673                           
  6674                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  6675  00EE  3003               	movlw	3
  6676  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  6677  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  6678  00F1  00DA               	movwf	___lwdiv@divisor
  6679  00F2  3000               	movlw	0
  6680  00F3  00DB               	movwf	___lwdiv@divisor+1
  6681  00F4  1683               	bsf	3,5	;RP0=1, select bank1
  6682  00F5  1303               	bcf	3,6	;RP1=0, select bank1
  6683  00F6  0852               	movf	((_Load+1)^(0+128)+7),w
  6684  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  6685  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  6686  00F9  01DD               	clrf	___lwdiv@dividend+1
  6687  00FA  07DD               	addwf	___lwdiv@dividend+1,f
  6688  00FB  1683               	bsf	3,5	;RP0=1, select bank1
  6689  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  6690  00FD  0851               	movf	(_Load^(0+128)+7),w
  6691  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  6692  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  6693  0100  01DC               	clrf	___lwdiv@dividend
  6694  0101  07DC               	addwf	___lwdiv@dividend,f
  6695  0102  158A  24A8  118A   	fcall	___lwdiv
  6696  0105  1283               	bcf	3,5	;RP0=0, select bank0
  6697  0106  1303               	bcf	3,6	;RP1=0, select bank0
  6698  0107  085B               	movf	?___lwdiv+1,w
  6699  0108  1683               	bsf	3,5	;RP0=1, select bank1
  6700  0109  1303               	bcf	3,6	;RP1=0, select bank1
  6701  010A  01D2               	clrf	((_Load+1)^(0+128)+7)
  6702  010B  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6703  010C  1283               	bcf	3,5	;RP0=0, select bank0
  6704  010D  1303               	bcf	3,6	;RP1=0, select bank0
  6705  010E  085A               	movf	?___lwdiv,w
  6706  010F  1683               	bsf	3,5	;RP0=1, select bank1
  6707  0110  1303               	bcf	3,6	;RP1=0, select bank1
  6708  0111  01D1               	clrf	(_Load^(0+128)+7)
  6709  0112  07D1               	addwf	(_Load^(0+128)+7),f
  6710                           
  6711                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  6712  0113  158A  2221  118A   	fcall	_setLoad_AH_AL_Restore
  6713                           
  6714                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  6715  0116  1683               	bsf	3,5	;RP0=1, select bank1
  6716  0117  1303               	bcf	3,6	;RP1=0, select bank1
  6717  0118  0852               	movf	((_Load+1)^(0+128)+7),w
  6718  0119  0250               	subwf	((_Load+1)^(0+128)+5),w
  6719  011A  1D03               	skipz
  6720  011B  291E               	goto	u9595
  6721  011C  0851               	movf	(_Load^(0+128)+7),w
  6722  011D  024F               	subwf	(_Load^(0+128)+5),w
  6723  011E                     u9595:	
  6724  011E  1C03               	skipc
  6725  011F  0008               	return
  6726                           
  6727                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  6728  0120  0351               	decf	(_Load^(0+128)+7),w
  6729  0121  3AFF               	xorlw	255
  6730  0122  074F               	addwf	(_Load^(0+128)+5),w
  6731  0123  1283               	bcf	3,5	;RP0=0, select bank0
  6732  0124  1303               	bcf	3,6	;RP1=0, select bank0
  6733  0125  00E1               	movwf	??_Load_Main
  6734  0126  0861               	movf	??_Load_Main,w
  6735  0127  1683               	bsf	3,5	;RP0=1, select bank1
  6736  0128  1303               	bcf	3,6	;RP1=0, select bank1
  6737  0129  00DE               	movwf	(_Load^(0+128)+20)
  6738                           
  6739                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  6740  012A  01CF               	clrf	(_Load^(0+128)+5)
  6741  012B  01D0               	clrf	((_Load+1)^(0+128)+5)
  6742                           
  6743                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  6744  012C  01D1               	clrf	(_Load^(0+128)+7)
  6745  012D  01D2               	clrf	((_Load+1)^(0+128)+7)
  6746                           
  6747                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  6748  012E  1DCA               	btfss	_Load^(0+128),3
  6749  012F  298D               	goto	l854
  6750                           
  6751                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  6752  0130  3002               	movlw	2
  6753  0131  0263               	subwf	(_Load^(0+128)+25),w
  6754  0132  1803               	skipnc
  6755  0133  298D               	goto	l854
  6756                           
  6757                           ;OverLoad_B1.c: 115: Load.Count++;
  6758  0134  3001               	movlw	1
  6759  0135  1283               	bcf	3,5	;RP0=0, select bank0
  6760  0136  1303               	bcf	3,6	;RP1=0, select bank0
  6761  0137  00E1               	movwf	??_Load_Main
  6762  0138  0861               	movf	??_Load_Main,w
  6763  0139  1683               	bsf	3,5	;RP0=1, select bank1
  6764  013A  1303               	bcf	3,6	;RP1=0, select bank1
  6765  013B  07E3               	addwf	(_Load^(0+128)+25),f
  6766                           
  6767                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  6768  013C  158A  2071  118A   	fcall	_getLight_Load_Status
  6769  013F  1283               	bcf	3,5	;RP0=0, select bank0
  6770  0140  1303               	bcf	3,6	;RP1=0, select bank0
  6771  0141  00E1               	movwf	??_Load_Main
  6772  0142  0861               	movf	??_Load_Main,w
  6773  0143  00E7               	movwf	Load_Main@Load_RunStatus
  6774                           
  6775                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  6776  0144  158A  2103  118A   	fcall	_getMain_Lights_Count
  6777  0147  1283               	bcf	3,5	;RP0=0, select bank0
  6778  0148  1303               	bcf	3,6	;RP1=0, select bank0
  6779  0149  00E1               	movwf	??_Load_Main
  6780  014A  0861               	movf	??_Load_Main,w
  6781  014B  00E8               	movwf	Load_Main@LightsCount
  6782                           
  6783                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  6784  014C  1683               	bsf	3,5	;RP0=1, select bank1
  6785  014D  1303               	bcf	3,6	;RP1=0, select bank1
  6786  014E  0863               	movf	(_Load^(0+128)+25),w
  6787  014F  3A01               	xorlw	1
  6788  0150  1D03               	skipz
  6789  0151  2954               	goto	l7052
  6790                           
  6791                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*2.5);
  6792  0152  3032               	movlw	50
  6793  0153  2961               	goto	L12
  6794  0154                     l7052:	
  6795                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  6796                           
  6797  0154  0863               	movf	(_Load^(0+128)+25),w
  6798  0155  3A02               	xorlw	2
  6799  0156  1D03               	skipz
  6800  0157  298D               	goto	l854
  6801                           
  6802                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  6803  0158  1283               	bcf	3,5	;RP0=0, select bank0
  6804  0159  1303               	bcf	3,6	;RP1=0, select bank0
  6805  015A  0868               	movf	Load_Main@LightsCount,w
  6806  015B  3A01               	xorlw	1
  6807  015C  1D03               	skipz
  6808  015D  2964               	goto	l7058
  6809                           
  6810                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(3.5*2.5);
  6811  015E  3008               	movlw	8
  6812  015F  1683               	bsf	3,5	;RP0=1, select bank1
  6813  0160  1303               	bcf	3,6	;RP1=0, select bank1
  6814  0161                     L12:	
  6815  0161  00E1               	movwf	(_Load^(0+128)+23)
  6816  0162  3000               	movlw	0
  6817  0163  298C               	goto	L13
  6818  0164                     l7058:	
  6819                           ;OverLoad_B1.c: 130: } else {
  6820                           
  6821                           
  6822                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  6823  0164  1283               	bcf	3,5	;RP0=0, select bank0
  6824  0165  08E7               	movf	Load_Main@Load_RunStatus,f
  6825  0166  1D03               	skipz
  6826  0167  297F               	goto	l7062
  6827                           
  6828                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(3.5*2.5) * LightsCount;
  6829  0168  0868               	movf	Load_Main@LightsCount,w
  6830  0169  00E1               	movwf	??_Load_Main
  6831  016A  01E2               	clrf	??_Load_Main+1
  6832  016B  1003               	clrc
  6833  016C  0DE1               	rlf	??_Load_Main,f
  6834  016D  0DE2               	rlf	??_Load_Main+1,f
  6835  016E  1003               	clrc
  6836  016F  0DE1               	rlf	??_Load_Main,f
  6837  0170  0DE2               	rlf	??_Load_Main+1,f
  6838  0171  1003               	clrc
  6839  0172  0DE1               	rlf	??_Load_Main,f
  6840  0173  0DE2               	rlf	??_Load_Main+1,f
  6841  0174  0861               	movf	??_Load_Main,w
  6842  0175  1683               	bsf	3,5	;RP0=1, select bank1
  6843  0176  1303               	bcf	3,6	;RP1=0, select bank1
  6844  0177  00E1               	movwf	(_Load^(0+128)+23)
  6845  0178  1283               	bcf	3,5	;RP0=0, select bank0
  6846  0179  1303               	bcf	3,6	;RP1=0, select bank0
  6847  017A  0862               	movf	??_Load_Main+1,w
  6848  017B  1683               	bsf	3,5	;RP0=1, select bank1
  6849  017C  1303               	bcf	3,6	;RP1=0, select bank1
  6850  017D  00E2               	movwf	((_Load+1)^(0+128)+23)
  6851                           
  6852                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6853  017E  298D               	goto	l854
  6854  017F                     l7062:	
  6855  017F  1283               	bcf	3,5	;RP0=0, select bank0
  6856  0180  0867               	movf	Load_Main@Load_RunStatus,w
  6857  0181  3A01               	xorlw	1
  6858  0182  1D03               	skipz
  6859  0183  298D               	goto	l854
  6860                           
  6861                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(3.5*2.5) + Load.TotalLoad;
  6862  0184  1683               	bsf	3,5	;RP0=1, select bank1
  6863  0185  1303               	bcf	3,6	;RP1=0, select bank1
  6864  0186  0853               	movf	(_Load^(0+128)+9),w
  6865  0187  3E08               	addlw	8
  6866  0188  00E1               	movwf	(_Load^(0+128)+23)
  6867  0189  3000               	movlw	0
  6868  018A  1803               	skipnc
  6869  018B  3001               	movlw	1
  6870  018C                     L13:	
  6871  018C  00E2               	movwf	(_Load^(0+128)+24)
  6872  018D                     l854:	
  6873                           
  6874                           ;OverLoad_B1.c: 135: }
  6875                           ;OverLoad_B1.c: 136: }
  6876                           ;OverLoad_B1.c: 137: }
  6877                           ;OverLoad_B1.c: 138: }
  6878                           ;OverLoad_B1.c: 139: }
  6879                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6880  018D  1683               	bsf	3,5	;RP0=1, select bank1
  6881  018E  1303               	bcf	3,6	;RP1=0, select bank1
  6882  018F  085E               	movf	(_Load^(0+128)+20),w
  6883  0190  1283               	bcf	3,5	;RP0=0, select bank0
  6884  0191  1303               	bcf	3,6	;RP1=0, select bank0
  6885  0192  00E1               	movwf	??_Load_Main
  6886  0193  01E2               	clrf	??_Load_Main+1
  6887  0194  1683               	bsf	3,5	;RP0=1, select bank1
  6888  0195  1303               	bcf	3,6	;RP1=0, select bank1
  6889  0196  0862               	movf	((_Load+1)^(0+128)+23),w
  6890  0197  1283               	bcf	3,5	;RP0=0, select bank0
  6891  0198  1303               	bcf	3,6	;RP1=0, select bank0
  6892  0199  0262               	subwf	??_Load_Main+1,w
  6893  019A  1D03               	skipz
  6894  019B  29A2               	goto	u9675
  6895  019C  1683               	bsf	3,5	;RP0=1, select bank1
  6896  019D  1303               	bcf	3,6	;RP1=0, select bank1
  6897  019E  0861               	movf	(_Load^(0+128)+23),w
  6898  019F  1283               	bcf	3,5	;RP0=0, select bank0
  6899  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  6900  01A1  0261               	subwf	??_Load_Main,w
  6901  01A2                     u9675:	
  6902  01A2  1C03               	skipc
  6903  01A3  29C3               	goto	l7080
  6904                           
  6905                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6906  01A4  0868               	movf	Load_Main@LightsCount,w
  6907  01A5  3A01               	xorlw	1
  6908  01A6  1903               	skipnz
  6909  01A7  29AA               	goto	l7070
  6910  01A8  3003               	movlw	3
  6911  01A9  29AB               	goto	L14
  6912  01AA                     l7070:	
  6913  01AA  3002               	movlw	2
  6914  01AB                     L14:	
  6915  01AB  00E4               	movwf	_Load_Main$2699
  6916  01AC  3000               	movlw	0
  6917  01AD  00E5               	movwf	_Load_Main$2699+1
  6918  01AE  0864               	movf	_Load_Main$2699,w
  6919  01AF  00E1               	movwf	??_Load_Main
  6920  01B0  0861               	movf	??_Load_Main,w
  6921  01B1  00E6               	movwf	Load_Main@ErrorCountValue
  6922                           
  6923                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6924  01B2  3001               	movlw	1
  6925  01B3  00E1               	movwf	??_Load_Main
  6926  01B4  0861               	movf	??_Load_Main,w
  6927  01B5  1683               	bsf	3,5	;RP0=1, select bank1
  6928  01B6  1303               	bcf	3,6	;RP1=0, select bank1
  6929  01B7  07E4               	addwf	(_Load^(0+128)+26),f
  6930                           
  6931                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6932  01B8  0864               	movf	(_Load^(0+128)+26),w
  6933  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  6934  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  6935  01BB  0266               	subwf	Load_Main@ErrorCountValue,w
  6936  01BC  1803               	skipnc
  6937  01BD  0008               	return
  6938                           
  6939                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6940  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  6941  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  6942  01C0  01E4               	clrf	(_Load^(0+128)+26)
  6943                           
  6944                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6945  01C1  16CA               	bsf	_Load^(0+128),5
  6946                           
  6947                           ;OverLoad_B1.c: 168: }
  6948                           ;OverLoad_B1.c: 169: } else {
  6949  01C2  0008               	return
  6950  01C3                     l7080:	
  6951                           
  6952                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6953  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  6954  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  6955  01C5  01E4               	clrf	(_Load^(0+128)+26)
  6956                           
  6957                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6958  01C6  1DCA               	btfss	_Load^(0+128),3
  6959  01C7  0008               	return
  6960                           
  6961                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6962  01C8  3001               	movlw	1
  6963  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  6964  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  6965  01CB  00E1               	movwf	??_Load_Main
  6966  01CC  0861               	movf	??_Load_Main,w
  6967  01CD  1683               	bsf	3,5	;RP0=1, select bank1
  6968  01CE  1303               	bcf	3,6	;RP1=0, select bank1
  6969  01CF  07E5               	addwf	(_Load^(0+128)+27),f
  6970                           
  6971                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6972  01D0  3003               	movlw	3
  6973  01D1  0265               	subwf	(_Load^(0+128)+27),w
  6974  01D2  1C03               	skipc
  6975  01D3  0008               	return
  6976                           
  6977                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6978  01D4  01E5               	clrf	(_Load^(0+128)+27)
  6979                           
  6980                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6981  01D5  17CA               	bsf	_Load^(0+128),7
  6982                           
  6983                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6984  01D6  11CA               	bcf	_Load^(0+128),3
  6985                           
  6986                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6987  01D7  01E3               	clrf	(_Load^(0+128)+25)
  6988                           
  6989                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6990  01D8  085E               	movf	(_Load^(0+128)+20),w
  6991  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  6992  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  6993  01DB  00E1               	movwf	??_Load_Main
  6994  01DC  0861               	movf	??_Load_Main,w
  6995  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  6996  01DE  1303               	bcf	3,6	;RP1=0, select bank1
  6997  01DF  00D3               	movwf	(_Load^(0+128)+9)
  6998                           
  6999                           ;OverLoad_B1.c: 182: }
  7000                           ;OverLoad_B1.c: 183: }
  7001                           ;OverLoad_B1.c: 206: }
  7002                           ;OverLoad_B1.c: 207: }
  7003                           ;OverLoad_B1.c: 208: }
  7004                           ;OverLoad_B1.c: 209: } else {
  7005  01E0  0008               	return
  7006  01E1                     l849:	
  7007                           
  7008                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  7009  01E1  164A               	bsf	_Load^(0+128),4
  7010                           
  7011                           ;OverLoad_B1.c: 211: }
  7012                           ;OverLoad_B1.c: 212: } else {
  7013  01E2  0008               	return
  7014  01E3                     l848:	
  7015                           
  7016                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  7017  01E3  1D4A               	btfss	_Load^(0+128),2
  7018  01E4  29F7               	goto	l7116
  7019                           
  7020                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  7021  01E5  114A               	bcf	_Load^(0+128),2
  7022                           
  7023                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  7024  01E6  124A               	bcf	_Load^(0+128),4
  7025                           
  7026                           ;OverLoad_B1.c: 218: Load.Time = 0;
  7027  01E7  01CB               	clrf	(_Load^(0+128)+1)
  7028  01E8  01CC               	clrf	((_Load+1)^(0+128)+1)
  7029                           
  7030                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  7031  01E9  158A  2221  118A   	fcall	_setLoad_AH_AL_Restore
  7032                           
  7033                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  7034  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  7035  01ED  1303               	bcf	3,6	;RP1=0, select bank1
  7036  01EE  01E4               	clrf	(_Load^(0+128)+26)
  7037                           
  7038                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  7039  01EF  01E5               	clrf	(_Load^(0+128)+27)
  7040                           
  7041                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  7042  01F0  01CF               	clrf	(_Load^(0+128)+5)
  7043  01F1  01D0               	clrf	((_Load+1)^(0+128)+5)
  7044                           
  7045                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  7046  01F2  01D1               	clrf	(_Load^(0+128)+7)
  7047  01F3  01D2               	clrf	((_Load+1)^(0+128)+7)
  7048                           
  7049                           ;OverLoad_B1.c: 231: Load.Run = 0;
  7050  01F4  11CA               	bcf	_Load^(0+128),3
  7051                           
  7052                           ;OverLoad_B1.c: 232: Load.Count = 0;
  7053  01F5  01E3               	clrf	(_Load^(0+128)+25)
  7054                           
  7055                           ;OverLoad_B1.c: 233: Load.OK = 0;
  7056  01F6  13CA               	bcf	_Load^(0+128),7
  7057  01F7                     l7116:	
  7058                           
  7059                           ;OverLoad_B1.c: 255: }
  7060                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  7061  01F7  1ECA               	btfss	_Load^(0+128),5
  7062  01F8  0008               	return
  7063                           
  7064                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  7065  01F9  3001               	movlw	1
  7066  01FA  07CD               	addwf	(_Load^(0+128)+3),f
  7067  01FB  1803               	skipnc
  7068  01FC  0ACE               	incf	((_Load+1)^(0+128)+3),f
  7069  01FD  3000               	movlw	0
  7070  01FE  07CE               	addwf	((_Load+1)^(0+128)+3),f
  7071                           
  7072                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  7073  01FF  3001               	movlw	1
  7074  0200  024E               	subwf	((_Load+1)^(0+128)+3),w
  7075  0201  30F4               	movlw	244
  7076  0202  1903               	skipnz
  7077  0203  024D               	subwf	(_Load^(0+128)+3),w
  7078  0204  1C03               	skipc
  7079  0205  0008               	return
  7080                           
  7081                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  7082  0206  01CD               	clrf	(_Load^(0+128)+3)
  7083  0207  01CE               	clrf	((_Load+1)^(0+128)+3)
  7084                           
  7085                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  7086  0208  12CA               	bcf	_Load^(0+128),5
  7087                           
  7088                           ;OverLoad_B1.c: 261: }
  7089                           ;OverLoad_B1.c: 262: }
  7090                           ;OverLoad_B1.c: 263: }
  7091                           ;OverLoad_B1.c: 264: } else {
  7092  0209  0008               	return
  7093  020A                     l838:	
  7094                           
  7095                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  7096  020A  1283               	bcf	3,5	;RP0=0, select bank0
  7097  020B  1303               	bcf	3,6	;RP1=0, select bank0
  7098  020C  1C31               	btfss	_myMain,0
  7099  020D  0008               	return
  7100                           
  7101                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  7102  020E  1683               	bsf	3,5	;RP0=1, select bank1
  7103  020F  1303               	bcf	3,6	;RP1=0, select bank1
  7104  0210  144A               	bsf	_Load^(0+128),0
  7105  0211  0008               	return
  7106  0212                     __end_of_Load_Main:	
  7107                           
  7108                           	psect	text36
  7109  0903                     __ptext36:	
  7110 ;; *************** function _getMain_Lights_Count *****************
  7111 ;; Defined at:
  7112 ;;		line 459 in file "../src/Main_B1.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;		None
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  status2         1    2[BANK0 ] unsigned char 
  7117 ;;  status1         1    1[BANK0 ] unsigned char 
  7118 ;;  count           1    0[BANK0 ] unsigned char 
  7119 ;; Return value:  Size  Location     Type
  7120 ;;                  1    wreg      unsigned char 
  7121 ;; Registers used:
  7122 ;;		wreg, status,2, status,0
  7123 ;; Tracked objects:
  7124 ;;		On entry : 0/0
  7125 ;;		On exit  : 0/0
  7126 ;;		Unchanged: 0/0
  7127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7128 ;;      Params:         0       0       0       0
  7129 ;;      Locals:         0       3       0       0
  7130 ;;      Temps:          0       0       0       0
  7131 ;;      Totals:         0       3       0       0
  7132 ;;Total ram usage:        3 bytes
  7133 ;; Hardware stack levels used:    1
  7134 ;; Hardware stack levels required when called:    2
  7135 ;; This function calls:
  7136 ;;		Nothing
  7137 ;; This function is called by:
  7138 ;;		_Load_Main
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           
  7143                           ;psect for function _getMain_Lights_Count
  7144  0903                     _getMain_Lights_Count:	
  7145                           
  7146                           ;Main_B1.c: 460: char count = 0;
  7147                           
  7148                           ;incstack = 0
  7149                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  7150  0903  1283               	bcf	3,5	;RP0=0, select bank0
  7151  0904  1303               	bcf	3,6	;RP1=0, select bank0
  7152  0905  01DA               	clrf	getMain_Lights_Count@count
  7153                           
  7154                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  7155  0906  3000               	movlw	0
  7156  0907  1948               	btfsc	_Lights1,2
  7157  0908  3001               	movlw	1
  7158  0909  00DB               	movwf	getMain_Lights_Count@status1
  7159                           
  7160                           ;Main_B1.c: 479: char status2 = Lights2.Status == 1 ? 1 : 0;
  7161  090A  3000               	movlw	0
  7162  090B  194D               	btfsc	_Lights2,2
  7163  090C  3001               	movlw	1
  7164  090D  00DC               	movwf	getMain_Lights_Count@status2
  7165                           
  7166                           ;Main_B1.c: 490: return count = (status1 + status2);
  7167  090E  085C               	movf	getMain_Lights_Count@status2,w
  7168  090F  075B               	addwf	getMain_Lights_Count@status1,w
  7169  0910  00DA               	movwf	getMain_Lights_Count@count
  7170  0911  0008               	return
  7171  0912                     __end_of_getMain_Lights_Count:	
  7172                           
  7173                           	psect	text37
  7174  0871                     __ptext37:	
  7175 ;; *************** function _getLight_Load_Status *****************
  7176 ;; Defined at:
  7177 ;;		line 405 in file "../src/TriacRelay_B1.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  loadstatus      1    4[COMMON] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      unsigned char 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7191 ;;      Params:         0       0       0       0
  7192 ;;      Locals:         1       0       0       0
  7193 ;;      Temps:          0       0       0       0
  7194 ;;      Totals:         1       0       0       0
  7195 ;;Total ram usage:        1 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    2
  7198 ;; This function calls:
  7199 ;;		Nothing
  7200 ;; This function is called by:
  7201 ;;		_Load_Main
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           
  7206                           ;psect for function _getLight_Load_Status
  7207  0871                     _getLight_Load_Status:	
  7208                           
  7209                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  7210                           
  7211                           ;incstack = 0
  7212                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  7213  0871  3000               	movlw	0
  7214  0872  18F3               	btfsc	_Light,1
  7215  0873  3001               	movlw	1
  7216  0874  00F9               	movwf	getLight_Load_Status@loadstatus
  7217                           
  7218                           ;TriacRelay_B1.c: 407: return loadstatus;
  7219  0875  0879               	movf	getLight_Load_Status@loadstatus,w
  7220  0876  0008               	return
  7221  0877                     __end_of_getLight_Load_Status:	
  7222                           
  7223                           	psect	text38
  7224  086B                     __ptext38:	
  7225 ;; *************** function _getLight_LoadGO *****************
  7226 ;; Defined at:
  7227 ;;		line 400 in file "../src/TriacRelay_B1.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;  loadgo          1    4[COMMON] unsigned char 
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      unsigned char 
  7234 ;; Registers used:
  7235 ;;		wreg, status,2
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7241 ;;      Params:         0       0       0       0
  7242 ;;      Locals:         1       0       0       0
  7243 ;;      Temps:          0       0       0       0
  7244 ;;      Totals:         1       0       0       0
  7245 ;;Total ram usage:        1 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:    2
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_Load_Main
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _getLight_LoadGO
  7257  086B                     _getLight_LoadGO:	
  7258                           
  7259                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  7260                           
  7261                           ;incstack = 0
  7262                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  7263  086B  3000               	movlw	0
  7264  086C  1873               	btfsc	_Light,0
  7265  086D  3001               	movlw	1
  7266  086E  00F9               	movwf	getLight_LoadGO@loadgo
  7267                           
  7268                           ;TriacRelay_B1.c: 402: return loadgo;
  7269  086F  0879               	movf	getLight_LoadGO@loadgo,w
  7270  0870  0008               	return
  7271  0871                     __end_of_getLight_LoadGO:	
  7272                           
  7273                           	psect	text39
  7274  0CA8                     __ptext39:	
  7275 ;; *************** function ___lwdiv *****************
  7276 ;; Defined at:
  7277 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  divisor         2    0[BANK0 ] unsigned int 
  7280 ;;  dividend        2    2[BANK0 ] unsigned int 
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  quotient        2    5[BANK0 ] unsigned int 
  7283 ;;  counter         1    4[BANK0 ] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  2    0[BANK0 ] unsigned int 
  7286 ;; Registers used:
  7287 ;;		wreg, status,2, status,0
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7293 ;;      Params:         0       4       0       0
  7294 ;;      Locals:         0       3       0       0
  7295 ;;      Temps:          1       0       0       0
  7296 ;;      Totals:         1       7       0       0
  7297 ;;Total ram usage:        8 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    2
  7300 ;; This function calls:
  7301 ;;		Nothing
  7302 ;; This function is called by:
  7303 ;;		_Load_Main
  7304 ;;		_getPIR_AD
  7305 ;; This function uses a non-reentrant model
  7306 ;;
  7307                           
  7308                           
  7309                           ;psect for function ___lwdiv
  7310  0CA8                     ___lwdiv:	
  7311                           
  7312                           ;incstack = 0
  7313                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7314  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  7315  0CA9  1303               	bcf	3,6	;RP1=0, select bank0
  7316  0CAA  01DF               	clrf	___lwdiv@quotient
  7317  0CAB  01E0               	clrf	___lwdiv@quotient+1
  7318  0CAC  085B               	movf	___lwdiv@divisor+1,w
  7319  0CAD  045A               	iorwf	___lwdiv@divisor,w
  7320  0CAE  1903               	skipnz
  7321  0CAF  2CE1               	goto	l5632
  7322  0CB0  01DE               	clrf	___lwdiv@counter
  7323  0CB1  0ADE               	incf	___lwdiv@counter,f
  7324  0CB2                     l5620:	
  7325  0CB2  1BDB               	btfsc	___lwdiv@divisor+1,7
  7326  0CB3  2CC0               	goto	l5622
  7327  0CB4  3001               	movlw	1
  7328  0CB5                     u6775:	
  7329  0CB5  1003               	clrc
  7330  0CB6  0DDA               	rlf	___lwdiv@divisor,f
  7331  0CB7  0DDB               	rlf	___lwdiv@divisor+1,f
  7332  0CB8  3EFF               	addlw	-1
  7333  0CB9  1D03               	skipz
  7334  0CBA  2CB5               	goto	u6775
  7335  0CBB  3001               	movlw	1
  7336  0CBC  00F9               	movwf	??___lwdiv
  7337  0CBD  0879               	movf	??___lwdiv,w
  7338  0CBE  07DE               	addwf	___lwdiv@counter,f
  7339  0CBF  2CB2               	goto	l5620
  7340  0CC0                     l5622:	
  7341  0CC0  3001               	movlw	1
  7342  0CC1                     u6795:	
  7343  0CC1  1003               	clrc
  7344  0CC2  0DDF               	rlf	___lwdiv@quotient,f
  7345  0CC3  0DE0               	rlf	___lwdiv@quotient+1,f
  7346  0CC4  3EFF               	addlw	-1
  7347  0CC5  1D03               	skipz
  7348  0CC6  2CC1               	goto	u6795
  7349  0CC7  085B               	movf	___lwdiv@divisor+1,w
  7350  0CC8  025D               	subwf	___lwdiv@dividend+1,w
  7351  0CC9  1D03               	skipz
  7352  0CCA  2CCD               	goto	u6805
  7353  0CCB  085A               	movf	___lwdiv@divisor,w
  7354  0CCC  025C               	subwf	___lwdiv@dividend,w
  7355  0CCD                     u6805:	
  7356  0CCD  1C03               	skipc
  7357  0CCE  2CD6               	goto	l5628
  7358  0CCF  085A               	movf	___lwdiv@divisor,w
  7359  0CD0  02DC               	subwf	___lwdiv@dividend,f
  7360  0CD1  085B               	movf	___lwdiv@divisor+1,w
  7361  0CD2  1C03               	skipc
  7362  0CD3  03DD               	decf	___lwdiv@dividend+1,f
  7363  0CD4  02DD               	subwf	___lwdiv@dividend+1,f
  7364  0CD5  145F               	bsf	___lwdiv@quotient,0
  7365  0CD6                     l5628:	
  7366  0CD6  3001               	movlw	1
  7367  0CD7                     u6815:	
  7368  0CD7  1003               	clrc
  7369  0CD8  0CDB               	rrf	___lwdiv@divisor+1,f
  7370  0CD9  0CDA               	rrf	___lwdiv@divisor,f
  7371  0CDA  3EFF               	addlw	-1
  7372  0CDB  1D03               	skipz
  7373  0CDC  2CD7               	goto	u6815
  7374  0CDD  3001               	movlw	1
  7375  0CDE  02DE               	subwf	___lwdiv@counter,f
  7376  0CDF  1D03               	btfss	3,2
  7377  0CE0  2CC0               	goto	l5622
  7378  0CE1                     l5632:	
  7379  0CE1  0860               	movf	___lwdiv@quotient+1,w
  7380  0CE2  01DB               	clrf	?___lwdiv+1
  7381  0CE3  07DB               	addwf	?___lwdiv+1,f
  7382  0CE4  085F               	movf	___lwdiv@quotient,w
  7383  0CE5  01DA               	clrf	?___lwdiv
  7384  0CE6  07DA               	addwf	?___lwdiv,f
  7385  0CE7  0008               	return
  7386  0CE8                     __end_of___lwdiv:	
  7387                           
  7388                           	psect	text40
  7389  084E                     __ptext40:	
  7390 ;; *************** function _Load_Initialization *****************
  7391 ;; Defined at:
  7392 ;;		line 9 in file "../src/OverLoad_B1.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;		None               void
  7399 ;; Registers used:
  7400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7406 ;;      Params:         0       0       0       0
  7407 ;;      Locals:         0       0       0       0
  7408 ;;      Temps:          0       0       0       0
  7409 ;;      Totals:         0       0       0       0
  7410 ;;Total ram usage:        0 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    3
  7413 ;; This function calls:
  7414 ;;		_setLoad_AH_AL_Restore
  7415 ;; This function is called by:
  7416 ;;		_main
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           
  7421                           ;psect for function _Load_Initialization
  7422  084E                     _Load_Initialization:	
  7423                           
  7424                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7425                           
  7426                           ;incstack = 0
  7427                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7428  084E  158A  2221         	fcall	_setLoad_AH_AL_Restore
  7429  0850  0008               	return
  7430  0851                     __end_of_Load_Initialization:	
  7431                           
  7432                           	psect	text41
  7433  0A21                     __ptext41:	
  7434 ;; *************** function _setLoad_AH_AL_Restore *****************
  7435 ;; Defined at:
  7436 ;;		line 292 in file "../src/OverLoad_B1.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  i               1    0[BANK0 ] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;		None               void
  7443 ;; Registers used:
  7444 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7450 ;;      Params:         0       0       0       0
  7451 ;;      Locals:         0       1       0       0
  7452 ;;      Temps:          1       0       0       0
  7453 ;;      Totals:         1       1       0       0
  7454 ;;Total ram usage:        2 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    2
  7457 ;; This function calls:
  7458 ;;		Nothing
  7459 ;; This function is called by:
  7460 ;;		_Load_Initialization
  7461 ;;		_Load_Main
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           
  7466                           ;psect for function _setLoad_AH_AL_Restore
  7467  0A21                     _setLoad_AH_AL_Restore:	
  7468                           
  7469                           ;OverLoad_B1.c: 293: char i;
  7470                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  7471                           
  7472                           ;incstack = 0
  7473                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  7474  0A21  1283               	bcf	3,5	;RP0=0, select bank0
  7475  0A22  1303               	bcf	3,6	;RP1=0, select bank0
  7476  0A23  01DA               	clrf	setLoad_AH_AL_Restore@i
  7477  0A24                     L15:	
  7478  0A24  3005               	movlw	5
  7479  0A25  025A               	subwf	setLoad_AH_AL_Restore@i,w
  7480  0A26  1803               	btfsc	3,0
  7481  0A27  0008               	return
  7482                           
  7483                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  7484  0A28  085A               	movf	setLoad_AH_AL_Restore@i,w
  7485  0A29  3ED4               	addlw	(_Load+10)& (0+255)
  7486  0A2A  0084               	movwf	4
  7487  0A2B  1383               	bcf	3,7	;select IRP bank1
  7488  0A2C  0180               	clrf	0
  7489                           
  7490                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  7491  0A2D  30FF               	movlw	255
  7492  0A2E  00F9               	movwf	??_setLoad_AH_AL_Restore
  7493  0A2F  085A               	movf	setLoad_AH_AL_Restore@i,w
  7494  0A30  3ED9               	addlw	(_Load+15)& (0+255)
  7495  0A31  0084               	movwf	4
  7496  0A32  0879               	movf	??_setLoad_AH_AL_Restore,w
  7497  0A33  0080               	movwf	0
  7498  0A34  3001               	movlw	1
  7499  0A35  00F9               	movwf	??_setLoad_AH_AL_Restore
  7500  0A36  0879               	movf	??_setLoad_AH_AL_Restore,w
  7501  0A37  07DA               	addwf	setLoad_AH_AL_Restore@i,f
  7502  0A38  2A24               	goto	L15
  7503  0A39                     __end_of_setLoad_AH_AL_Restore:	
  7504                           
  7505                           	psect	text42
  7506  0B01                     __ptext42:	
  7507 ;; *************** function _Lights_Main *****************
  7508 ;; Defined at:
  7509 ;;		line 52 in file "../src/TriacRelay_B1.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;		None
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;		None
  7514 ;; Return value:  Size  Location     Type
  7515 ;;		None               void
  7516 ;; Registers used:
  7517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7518 ;; Tracked objects:
  7519 ;;		On entry : 0/0
  7520 ;;		On exit  : 0/0
  7521 ;;		Unchanged: 0/0
  7522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7523 ;;      Params:         0       0       0       0
  7524 ;;      Locals:         0       0       0       0
  7525 ;;      Temps:          0       0       0       0
  7526 ;;      Totals:         0       0       0       0
  7527 ;;Total ram usage:        0 bytes
  7528 ;; Hardware stack levels used:    1
  7529 ;; Hardware stack levels required when called:    6
  7530 ;; This function calls:
  7531 ;;		_Lights_Control
  7532 ;;		_getLoad_OK
  7533 ;;		_getMain_All_Error_Status
  7534 ;;		_getMain_All_LightsStatus
  7535 ;;		_setLights_Main
  7536 ;; This function is called by:
  7537 ;;		_main
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           
  7542                           ;psect for function _Lights_Main
  7543  0B01                     _Lights_Main:	
  7544                           
  7545                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  7546                           
  7547                           ;incstack = 0
  7548                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7549  0B01  1C73               	btfss	_Light,0
  7550  0B02  2B17               	goto	l7134
  7551                           
  7552                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  7553  0B03  158A  2093  158A   	fcall	_getLoad_OK
  7554  0B06  3A01               	xorlw	1
  7555  0B07  1903               	skipnz
  7556  0B08  2B16               	goto	l1557
  7557  0B09  3000               	movlw	0
  7558  0B0A  158A  242C  158A   	fcall	_getMain_All_Error_Status
  7559  0B0D  3800               	iorlw	0
  7560  0B0E  1D03               	skipz
  7561  0B0F  2B16               	goto	l1557
  7562  0B10  158A  2131  158A   	fcall	_getMain_All_LightsStatus
  7563  0B13  3800               	iorlw	0
  7564  0B14  1D03               	skipz
  7565  0B15  2B17               	goto	l7134
  7566  0B16                     l1557:	
  7567                           
  7568                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7569  0B16  1073               	bcf	_Light,0
  7570  0B17                     l7134:	
  7571                           
  7572                           ;TriacRelay_B1.c: 68: }
  7573                           ;TriacRelay_B1.c: 69: }
  7574                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7575  0B17  3001               	movlw	1
  7576  0B18  158A  2327  158A   	fcall	_setLights_Main
  7577                           
  7578                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7579  0B1B  3001               	movlw	1
  7580  0B1C  118A  2715  158A   	fcall	_Lights_Control
  7581                           
  7582                           ;TriacRelay_B1.c: 78: setLights_Main(2);
  7583  0B1F  3002               	movlw	2
  7584  0B20  158A  2327  158A   	fcall	_setLights_Main
  7585                           
  7586                           ;TriacRelay_B1.c: 79: Lights_Control(2);
  7587  0B23  3002               	movlw	2
  7588  0B24  118A  2715         	fcall	_Lights_Control
  7589  0B26  0008               	return
  7590  0B27                     __end_of_Lights_Main:	
  7591                           
  7592                           	psect	text43
  7593  0B27                     __ptext43:	
  7594 ;; *************** function _setLights_Main *****************
  7595 ;; Defined at:
  7596 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;  lights          1    wreg     unsigned char 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  lights          1    6[BANK0 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7610 ;;      Params:         0       0       0       0
  7611 ;;      Locals:         0       1       0       0
  7612 ;;      Temps:          0       0       0       0
  7613 ;;      Totals:         0       1       0       0
  7614 ;;Total ram usage:        1 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    5
  7617 ;; This function calls:
  7618 ;;		_LightsPointSelect
  7619 ;;		_getLights_Allow_Condition
  7620 ;;		_setLights
  7621 ;; This function is called by:
  7622 ;;		_Lights_Main
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           
  7627                           ;psect for function _setLights_Main
  7628  0B27                     _setLights_Main:	
  7629                           
  7630                           ;incstack = 0
  7631                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7632                           ;setLights_Main@lights stored from wreg
  7633  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  7634  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  7635  0B29  00E0               	movwf	setLights_Main@lights
  7636                           
  7637                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7638  0B2A  0860               	movf	setLights_Main@lights,w
  7639  0B2B  158A  21B0  158A   	fcall	_LightsPointSelect
  7640                           
  7641                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7642  0B2E  0874               	movf	_Lights,w
  7643  0B2F  0084               	movwf	4
  7644  0B30  1383               	bcf	3,7	;select IRP bank0
  7645  0B31  1880               	btfsc	0,1
  7646  0B32  0008               	return
  7647                           
  7648                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7649  0B33  0874               	movf	_Lights,w
  7650  0B34  0084               	movwf	4
  7651  0B35  1D80               	btfss	0,3
  7652  0B36  0008               	return
  7653                           
  7654                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7655  0B37  1283               	bcf	3,5	;RP0=0, select bank0
  7656  0B38  1303               	bcf	3,6	;RP1=0, select bank0
  7657  0B39  0860               	movf	setLights_Main@lights,w
  7658  0B3A  158A  21DB  158A   	fcall	_getLights_Allow_Condition
  7659  0B3D  3800               	iorlw	0
  7660  0B3E  1D03               	skipz
  7661  0B3F  0008               	return
  7662                           
  7663                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7664  0B40  0874               	movf	_Lights,w
  7665  0B41  0084               	movwf	4
  7666  0B42  1383               	bcf	3,7	;select IRP bank0
  7667  0B43  1180               	bcf	0,3
  7668                           
  7669                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7670  0B44  0874               	movf	_Lights,w
  7671  0B45  0084               	movwf	4
  7672  0B46  1E00               	btfss	0,4
  7673  0B47  2B50               	goto	l6758
  7674                           
  7675                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7676  0B48  1283               	bcf	3,5	;RP0=0, select bank0
  7677  0B49  1303               	bcf	3,6	;RP1=0, select bank0
  7678  0B4A  01DD               	clrf	setLights@status
  7679  0B4B  0ADD               	incf	setLights@status,f
  7680  0B4C  0860               	movf	setLights_Main@lights,w
  7681  0B4D  158A  26E0         	fcall	_setLights
  7682                           
  7683                           ;TriacRelay_B1.c: 99: } else {
  7684  0B4F  0008               	return
  7685  0B50                     l6758:	
  7686                           
  7687                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7688  0B50  1283               	bcf	3,5	;RP0=0, select bank0
  7689  0B51  1303               	bcf	3,6	;RP1=0, select bank0
  7690  0B52  01DD               	clrf	setLights@status
  7691  0B53  0860               	movf	setLights_Main@lights,w
  7692  0B54  158A  26E0         	fcall	_setLights
  7693  0B56  0008               	return
  7694  0B57                     __end_of_setLights_Main:	
  7695                           
  7696                           	psect	text44
  7697  0EE0                     __ptext44:	
  7698 ;; *************** function _setLights *****************
  7699 ;; Defined at:
  7700 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  lights          1    wreg     unsigned char 
  7703 ;;  status          1    3[BANK0 ] unsigned char 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  lights          1    5[BANK0 ] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7715 ;;      Params:         0       1       0       0
  7716 ;;      Locals:         0       1       0       0
  7717 ;;      Temps:          0       1       0       0
  7718 ;;      Totals:         0       3       0       0
  7719 ;;Total ram usage:        3 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    4
  7722 ;; This function calls:
  7723 ;;		_setLED
  7724 ;;		_setLights_Line
  7725 ;; This function is called by:
  7726 ;;		_setLights_Main
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           
  7731                           ;psect for function _setLights
  7732  0EE0                     _setLights:	
  7733                           
  7734                           ;incstack = 0
  7735                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7736                           ;setLights@lights stored from wreg
  7737  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
  7738  0EE1  1303               	bcf	3,6	;RP1=0, select bank0
  7739  0EE2  00DF               	movwf	setLights@lights
  7740                           
  7741                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7742  0EE3  085D               	movf	setLights@status,w
  7743  0EE4  3A01               	xorlw	1
  7744  0EE5  1D03               	skipz
  7745  0EE6  2F28               	goto	l6524
  7746                           
  7747                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7748  0EE7  085F               	movf	setLights@lights,w
  7749  0EE8  3A02               	xorlw	2
  7750  0EE9  1D03               	skipz
  7751  0EEA  2EF8               	goto	l6504
  7752                           
  7753                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7754  0EEB  01DB               	clrf	setLED@command
  7755  0EEC  3001               	movlw	1
  7756  0EED  118A  27AF  158A   	fcall	_setLED
  7757                           
  7758                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7759  0EF0  1283               	bcf	3,5	;RP0=0, select bank0
  7760  0EF1  1303               	bcf	3,6	;RP1=0, select bank0
  7761  0EF2  01DB               	clrf	setLED@command
  7762  0EF3  0ADB               	incf	setLED@command,f
  7763  0EF4  3002               	movlw	2
  7764  0EF5  118A  27AF  158A   	fcall	_setLED
  7765  0EF8                     l6504:	
  7766                           
  7767                           ;TriacRelay_B1.c: 121: }
  7768                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7769  0EF8  0874               	movf	_Lights,w
  7770  0EF9  0084               	movwf	4
  7771  0EFA  1383               	bcf	3,7	;select IRP bank0
  7772  0EFB  1900               	btfsc	0,2
  7773  0EFC  2F21               	goto	l1571
  7774                           
  7775                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7776  0EFD  0874               	movf	_Lights,w
  7777  0EFE  0084               	movwf	4
  7778  0EFF  1500               	bsf	0,2
  7779                           
  7780                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7781  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  7782  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  7783  0F02  085F               	movf	setLights@lights,w
  7784  0F03  3A01               	xorlw	1
  7785  0F04  1D03               	skipz
  7786  0F05  2F1D               	goto	l6518
  7787                           
  7788                           ;TriacRelay_B1.c: 131: RA7 = 1;
  7789  0F06  1785               	bsf	5,7	;volatile
  7790                           
  7791                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7792  0F07  3064               	movlw	100
  7793  0F08  00DE               	movwf	??_setLights
  7794  0F09  0874               	movf	_Lights,w
  7795  0F0A  3E04               	addlw	4
  7796  0F0B  0084               	movwf	4
  7797  0F0C  085E               	movf	??_setLights,w
  7798  0F0D  0080               	movwf	0
  7799                           
  7800                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7801  0F0E  308C               	movlw	140
  7802  0F0F  00DE               	movwf	??_setLights
  7803  0F10  0874               	movf	_Lights,w
  7804  0F11  3E03               	addlw	3
  7805  0F12  0084               	movwf	4
  7806  0F13  085E               	movf	??_setLights,w
  7807  0F14  0080               	movwf	0
  7808                           
  7809                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7810  0F15  0874               	movf	_Lights,w
  7811  0F16  3E02               	addlw	2
  7812  0F17  0084               	movwf	4
  7813  0F18  0180               	clrf	0
  7814                           
  7815                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7816  0F19  0874               	movf	_Lights,w
  7817  0F1A  0084               	movwf	4
  7818  0F1B  1480               	bsf	0,1
  7819                           
  7820                           ;TriacRelay_B1.c: 136: }
  7821  0F1C  2F21               	goto	l1571
  7822  0F1D                     l6518:	
  7823                           
  7824                           ;TriacRelay_B1.c: 139: else if (lights == 2) {
  7825  0F1D  085F               	movf	setLights@lights,w
  7826  0F1E  3A02               	xorlw	2
  7827  0F1F  1903               	btfsc	3,2
  7828                           
  7829                           ;TriacRelay_B1.c: 147: RC4 = 1;
  7830  0F20  1607               	bsf	7,4	;volatile
  7831  0F21                     l1571:	
  7832                           
  7833                           ;TriacRelay_B1.c: 151: }
  7834                           ;TriacRelay_B1.c: 162: }
  7835                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7836  0F21  14F3               	bsf	_Light,1
  7837                           
  7838                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7839  0F22  1283               	bcf	3,5	;RP0=0, select bank0
  7840  0F23  1303               	bcf	3,6	;RP1=0, select bank0
  7841  0F24  085F               	movf	setLights@lights,w
  7842  0F25  158A  21F2         	fcall	_setLights_Line
  7843                           
  7844                           ;TriacRelay_B1.c: 167: } else {
  7845  0F27  0008               	return
  7846  0F28                     l6524:	
  7847                           
  7848                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7849  0F28  1283               	bcf	3,5	;RP0=0, select bank0
  7850  0F29  1303               	bcf	3,6	;RP1=0, select bank0
  7851  0F2A  085F               	movf	setLights@lights,w
  7852  0F2B  3A02               	xorlw	2
  7853  0F2C  1D03               	skipz
  7854  0F2D  2F3B               	goto	l6528
  7855                           
  7856                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7857  0F2E  01DB               	clrf	setLED@command
  7858  0F2F  0ADB               	incf	setLED@command,f
  7859  0F30  3001               	movlw	1
  7860  0F31  118A  27AF  158A   	fcall	_setLED
  7861                           
  7862                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7863  0F34  1283               	bcf	3,5	;RP0=0, select bank0
  7864  0F35  1303               	bcf	3,6	;RP1=0, select bank0
  7865  0F36  01DB               	clrf	setLED@command
  7866  0F37  3002               	movlw	2
  7867  0F38  118A  27AF  158A   	fcall	_setLED
  7868  0F3B                     l6528:	
  7869                           
  7870                           ;TriacRelay_B1.c: 173: }
  7871                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7872  0F3B  0874               	movf	_Lights,w
  7873  0F3C  0084               	movwf	4
  7874  0F3D  1383               	bcf	3,7	;select IRP bank0
  7875  0F3E  1D00               	btfss	0,2
  7876  0F3F  2F64               	goto	l1577
  7877                           
  7878                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7879  0F40  0874               	movf	_Lights,w
  7880  0F41  0084               	movwf	4
  7881  0F42  1100               	bcf	0,2
  7882                           
  7883                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7884  0F43  1283               	bcf	3,5	;RP0=0, select bank0
  7885  0F44  1303               	bcf	3,6	;RP1=0, select bank0
  7886  0F45  085F               	movf	setLights@lights,w
  7887  0F46  3A01               	xorlw	1
  7888  0F47  1D03               	skipz
  7889  0F48  2F60               	goto	l6542
  7890                           
  7891                           ;TriacRelay_B1.c: 179: RA7 = 1;
  7892  0F49  1785               	bsf	5,7	;volatile
  7893                           
  7894                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7895  0F4A  3028               	movlw	40
  7896  0F4B  00DE               	movwf	??_setLights
  7897  0F4C  0874               	movf	_Lights,w
  7898  0F4D  3E04               	addlw	4
  7899  0F4E  0084               	movwf	4
  7900  0F4F  085E               	movf	??_setLights,w
  7901  0F50  0080               	movwf	0
  7902                           
  7903                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7904  0F51  3050               	movlw	80
  7905  0F52  00DE               	movwf	??_setLights
  7906  0F53  0874               	movf	_Lights,w
  7907  0F54  3E03               	addlw	3
  7908  0F55  0084               	movwf	4
  7909  0F56  085E               	movf	??_setLights,w
  7910  0F57  0080               	movwf	0
  7911                           
  7912                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7913  0F58  0874               	movf	_Lights,w
  7914  0F59  3E02               	addlw	2
  7915  0F5A  0084               	movwf	4
  7916  0F5B  0180               	clrf	0
  7917                           
  7918                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7919  0F5C  0874               	movf	_Lights,w
  7920  0F5D  0084               	movwf	4
  7921  0F5E  1480               	bsf	0,1
  7922                           
  7923                           ;TriacRelay_B1.c: 184: }
  7924  0F5F  2F64               	goto	l1577
  7925  0F60                     l6542:	
  7926                           
  7927                           ;TriacRelay_B1.c: 187: else if (lights == 2) {
  7928  0F60  085F               	movf	setLights@lights,w
  7929  0F61  3A02               	xorlw	2
  7930  0F62  1903               	btfsc	3,2
  7931                           
  7932                           ;TriacRelay_B1.c: 195: RC4 = 0;
  7933  0F63  1207               	bcf	7,4	;volatile
  7934  0F64                     l1577:	
  7935                           
  7936                           ;TriacRelay_B1.c: 199: }
  7937                           ;TriacRelay_B1.c: 211: }
  7938                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7939  0F64  10F3               	bcf	_Light,1
  7940                           
  7941                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7942  0F65  3000               	movlw	0
  7943  0F66  158A  21F2         	fcall	_setLights_Line
  7944  0F68  0008               	return
  7945  0F69                     __end_of_setLights:	
  7946                           
  7947                           	psect	text45
  7948  09F2                     __ptext45:	
  7949 ;; *************** function _setLights_Line *****************
  7950 ;; Defined at:
  7951 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  lights          1    wreg     unsigned char 
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;  lights          1    4[COMMON] unsigned char 
  7956 ;; Return value:  Size  Location     Type
  7957 ;;		None               void
  7958 ;; Registers used:
  7959 ;;		wreg
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7965 ;;      Params:         0       0       0       0
  7966 ;;      Locals:         1       0       0       0
  7967 ;;      Temps:          0       0       0       0
  7968 ;;      Totals:         1       0       0       0
  7969 ;;Total ram usage:        1 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; Hardware stack levels required when called:    2
  7972 ;; This function calls:
  7973 ;;		Nothing
  7974 ;; This function is called by:
  7975 ;;		_setLights
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979                           
  7980                           ;psect for function _setLights_Line
  7981  09F2                     _setLights_Line:	
  7982                           
  7983                           ;incstack = 0
  7984                           ; Regs used in _setLights_Line: [wreg]
  7985                           ;setLights_Line@lights stored from wreg
  7986  09F2  00F9               	movwf	setLights_Line@lights
  7987                           
  7988                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7989  09F3  1473               	bsf	_Light,0
  7990                           
  7991                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7992  09F4  1283               	bcf	3,5	;RP0=0, select bank0
  7993  09F5  1303               	bcf	3,6	;RP1=0, select bank0
  7994  09F6  1049               	bcf	_Lights1+1,0
  7995                           
  7996                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7997  09F7  0879               	movf	setLights_Line@lights,w
  7998  09F8  3A01               	xorlw	1
  7999  09F9  1D03               	skipz
  8000  09FA  29FF               	goto	l1604
  8001  09FB  0879               	movf	setLights_Line@lights,w
  8002  09FC  1903               	btfsc	3,2
  8003  09FD  29FF               	goto	l1604
  8004                           
  8005                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  8006  09FE  1449               	bsf	_Lights1+1,0
  8007  09FF                     l1604:	
  8008                           
  8009                           ;TriacRelay_B1.c: 291: }
  8010                           ;TriacRelay_B1.c: 294: Lights2.Line = 0;
  8011  09FF  104E               	bcf	_Lights2+1,0
  8012                           
  8013                           ;TriacRelay_B1.c: 295: if (lights == 2 && lights != 0) {
  8014  0A00  0879               	movf	setLights_Line@lights,w
  8015  0A01  3A02               	xorlw	2
  8016  0A02  1D03               	skipz
  8017  0A03  0008               	return
  8018  0A04  0879               	movf	setLights_Line@lights,w
  8019  0A05  1903               	btfsc	3,2
  8020  0A06  0008               	return
  8021                           
  8022                           ;TriacRelay_B1.c: 296: Lights2.Line = 1;
  8023  0A07  144E               	bsf	_Lights2+1,0
  8024  0A08  0008               	return
  8025  0A09                     __end_of_setLights_Line:	
  8026                           
  8027                           	psect	text46
  8028  09DB                     __ptext46:	
  8029 ;; *************** function _getLights_Allow_Condition *****************
  8030 ;; Defined at:
  8031 ;;		line 367 in file "../src/TriacRelay_B1.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;  lights          1    wreg     unsigned char 
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  lights          1    0[COMMON] unsigned char 
  8036 ;;  allow           1    1[BANK0 ] unsigned char 
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  1    wreg      unsigned char 
  8039 ;; Registers used:
  8040 ;;		wreg, status,2, pclath, cstack
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8046 ;;      Params:         0       0       0       0
  8047 ;;      Locals:         0       2       0       0
  8048 ;;      Temps:          0       1       0       0
  8049 ;;      Totals:         0       3       0       0
  8050 ;;Total ram usage:        3 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; Hardware stack levels required when called:    3
  8053 ;; This function calls:
  8054 ;;		_getLoad_OK
  8055 ;; This function is called by:
  8056 ;;		_setLights_Main
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _getLights_Allow_Condition
  8062  09DB                     _getLights_Allow_Condition:	
  8063                           
  8064                           ;TriacRelay_B1.c: 368: char allow = 0;
  8065                           
  8066                           ;incstack = 0
  8067                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  8068  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  8069  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  8070  09DD  01DB               	clrf	getLights_Allow_Condition@allow
  8071                           
  8072                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  8073  09DE  01DC               	clrf	_getLights_Allow_Condition$4782
  8074  09DF  0ADC               	incf	_getLights_Allow_Condition$4782,f
  8075  09E0  158A  2093  158A   	fcall	_getLoad_OK
  8076  09E3  3800               	iorlw	0
  8077  09E4  1903               	btfsc	3,2
  8078  09E5  1873               	btfsc	_Light,0
  8079  09E6  29EA               	goto	l6492
  8080  09E7  1283               	bcf	3,5	;RP0=0, select bank0
  8081  09E8  1303               	bcf	3,6	;RP1=0, select bank0
  8082  09E9  01DC               	clrf	_getLights_Allow_Condition$4782
  8083  09EA                     l6492:	
  8084  09EA  1283               	bcf	3,5	;RP0=0, select bank0
  8085  09EB  1303               	bcf	3,6	;RP1=0, select bank0
  8086  09EC  085C               	movf	_getLights_Allow_Condition$4782,w
  8087  09ED  00DA               	movwf	??_getLights_Allow_Condition
  8088  09EE  085A               	movf	??_getLights_Allow_Condition,w
  8089  09EF  00DB               	movwf	getLights_Allow_Condition@allow
  8090                           
  8091                           ;TriacRelay_B1.c: 396: return allow;
  8092  09F0  085B               	movf	getLights_Allow_Condition@allow,w
  8093  09F1  0008               	return
  8094  09F2                     __end_of_getLights_Allow_Condition:	
  8095                           
  8096                           	psect	text47
  8097  0893                     __ptext47:	
  8098 ;; *************** function _getLoad_OK *****************
  8099 ;; Defined at:
  8100 ;;		line 272 in file "../src/OverLoad_B1.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;		None
  8103 ;; Auto vars:     Size  Location     Type
  8104 ;;  ok              1    4[COMMON] unsigned char 
  8105 ;; Return value:  Size  Location     Type
  8106 ;;                  1    wreg      unsigned char 
  8107 ;; Registers used:
  8108 ;;		wreg, status,2
  8109 ;; Tracked objects:
  8110 ;;		On entry : 0/0
  8111 ;;		On exit  : 0/0
  8112 ;;		Unchanged: 0/0
  8113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8114 ;;      Params:         0       0       0       0
  8115 ;;      Locals:         1       0       0       0
  8116 ;;      Temps:          0       0       0       0
  8117 ;;      Totals:         1       0       0       0
  8118 ;;Total ram usage:        1 bytes
  8119 ;; Hardware stack levels used:    1
  8120 ;; Hardware stack levels required when called:    2
  8121 ;; This function calls:
  8122 ;;		Nothing
  8123 ;; This function is called by:
  8124 ;;		_Lights_Main
  8125 ;;		_getLights_Allow_Condition
  8126 ;; This function uses a non-reentrant model
  8127 ;;
  8128                           
  8129                           
  8130                           ;psect for function _getLoad_OK
  8131  0893                     _getLoad_OK:	
  8132                           
  8133                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  8134                           
  8135                           ;incstack = 0
  8136                           ; Regs used in _getLoad_OK: [wreg+status,2]
  8137  0893  3000               	movlw	0
  8138  0894  1683               	bsf	3,5	;RP0=1, select bank1
  8139  0895  1303               	bcf	3,6	;RP1=0, select bank1
  8140  0896  1BCA               	btfsc	_Load^(0+128),7
  8141  0897  3001               	movlw	1
  8142  0898  00F9               	movwf	getLoad_OK@ok
  8143                           
  8144                           ;OverLoad_B1.c: 274: return ok;
  8145  0899  0879               	movf	getLoad_OK@ok,w
  8146  089A  0008               	return
  8147  089B                     __end_of_getLoad_OK:	
  8148                           
  8149                           	psect	text48
  8150  0715                     __ptext48:	
  8151 ;; *************** function _Lights_Control *****************
  8152 ;; Defined at:
  8153 ;;		line 220 in file "../src/TriacRelay_B1.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  lights          1    wreg     unsigned char 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  lights          1   10[BANK0 ] unsigned char 
  8158 ;; Return value:  Size  Location     Type
  8159 ;;		None               void
  8160 ;; Registers used:
  8161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8167 ;;      Params:         0       0       0       0
  8168 ;;      Locals:         0       1       0       0
  8169 ;;      Temps:          0       2       0       0
  8170 ;;      Totals:         0       3       0       0
  8171 ;;Total ram usage:        3 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    3
  8174 ;; This function calls:
  8175 ;;		_LightsPointSelect
  8176 ;;		___awdiv
  8177 ;; This function is called by:
  8178 ;;		_Lights_Main
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           
  8183                           ;psect for function _Lights_Control
  8184  0715                     _Lights_Control:	
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8188                           ;Lights_Control@lights stored from wreg
  8189  0715  1283               	bcf	3,5	;RP0=0, select bank0
  8190  0716  1303               	bcf	3,6	;RP1=0, select bank0
  8191  0717  00E4               	movwf	Lights_Control@lights
  8192                           
  8193                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  8194  0718  0864               	movf	Lights_Control@lights,w
  8195  0719  158A  21B0  118A   	fcall	_LightsPointSelect
  8196                           
  8197                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  8198  071C  0874               	movf	_Lights,w
  8199  071D  0084               	movwf	4
  8200  071E  1383               	bcf	3,7	;select IRP bank0
  8201  071F  1C80               	btfss	0,1
  8202  0720  0008               	return
  8203                           
  8204                           ;TriacRelay_B1.c: 223: Lights->Time++;
  8205  0721  3001               	movlw	1
  8206  0722  1283               	bcf	3,5	;RP0=0, select bank0
  8207  0723  1303               	bcf	3,6	;RP1=0, select bank0
  8208  0724  00E2               	movwf	??_Lights_Control
  8209  0725  0874               	movf	_Lights,w
  8210  0726  3E02               	addlw	2
  8211  0727  0084               	movwf	4
  8212  0728  0862               	movf	??_Lights_Control,w
  8213  0729  0780               	addwf	0,f
  8214                           
  8215                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  8216  072A  0874               	movf	_Lights,w
  8217  072B  0084               	movwf	4
  8218  072C  1B80               	btfsc	0,7
  8219  072D  2F75               	goto	l6780
  8220                           
  8221                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  8222  072E  3014               	movlw	20
  8223  072F  00DA               	movwf	___awdiv@divisor
  8224  0730  3000               	movlw	0
  8225  0731  00DB               	movwf	___awdiv@divisor+1
  8226  0732  0874               	movf	_Lights,w
  8227  0733  3E04               	addlw	4
  8228  0734  0084               	movwf	4
  8229  0735  0800               	movf	0,w
  8230  0736  00E2               	movwf	??_Lights_Control
  8231  0737  01E3               	clrf	??_Lights_Control+1
  8232  0738  0862               	movf	??_Lights_Control,w
  8233  0739  00DC               	movwf	___awdiv@dividend
  8234  073A  0863               	movf	??_Lights_Control+1,w
  8235  073B  00DD               	movwf	___awdiv@dividend+1
  8236  073C  158A  2611  118A   	fcall	___awdiv
  8237  073F  0874               	movf	_Lights,w
  8238  0740  3E02               	addlw	2
  8239  0741  0084               	movwf	4
  8240  0742  1283               	bcf	3,5	;RP0=0, select bank0
  8241  0743  1303               	bcf	3,6	;RP1=0, select bank0
  8242  0744  085B               	movf	?___awdiv+1,w
  8243  0745  3A80               	xorlw	128
  8244  0746  3C80               	sublw	128
  8245  0747  1D03               	skipz
  8246  0748  2F4C               	goto	u9055
  8247  0749  085A               	movf	?___awdiv,w
  8248  074A  1383               	bcf	3,7	;select IRP bank0
  8249  074B  0200               	subwf	0,w
  8250  074C                     u9055:	
  8251  074C  1C03               	skipc
  8252  074D  0008               	return
  8253                           
  8254                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  8255  074E  0874               	movf	_Lights,w
  8256  074F  0084               	movwf	4
  8257  0750  1383               	bcf	3,7	;select IRP bank0
  8258  0751  1780               	bsf	0,7
  8259                           
  8260                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  8261  0752  1283               	bcf	3,5	;RP0=0, select bank0
  8262  0753  1303               	bcf	3,6	;RP1=0, select bank0
  8263  0754  0864               	movf	Lights_Control@lights,w
  8264  0755  3A01               	xorlw	1
  8265  0756  1D03               	skipz
  8266  0757  2F64               	goto	l6776
  8267                           
  8268                           ;TriacRelay_B1.c: 229: RA6 = Lights->Status == 1 ? 1 : 0;
  8269  0758  0874               	movf	_Lights,w
  8270  0759  0084               	movwf	4
  8271  075A  1D00               	btfss	0,2
  8272  075B  2F60               	goto	u9070
  8273  075C  1283               	bcf	3,5	;RP0=0, select bank0
  8274  075D  1303               	bcf	3,6	;RP1=0, select bank0
  8275  075E  1705               	bsf	5,6	;volatile
  8276  075F  0008               	return
  8277  0760                     u9070:	
  8278  0760  1283               	bcf	3,5	;RP0=0, select bank0
  8279  0761  1303               	bcf	3,6	;RP1=0, select bank0
  8280  0762  1305               	bcf	5,6	;volatile
  8281                           
  8282                           ;TriacRelay_B1.c: 230: }
  8283  0763  0008               	return
  8284  0764                     l6776:	
  8285                           
  8286                           ;TriacRelay_B1.c: 233: else if (lights == 2) {
  8287  0764  0864               	movf	Lights_Control@lights,w
  8288  0765  3A02               	xorlw	2
  8289  0766  1D03               	skipz
  8290  0767  0008               	return
  8291                           
  8292                           ;TriacRelay_B1.c: 234: RC5 = Lights->Status == 1 ? 1 : 0;
  8293  0768  0874               	movf	_Lights,w
  8294  0769  0084               	movwf	4
  8295  076A  1383               	bcf	3,7	;select IRP bank0
  8296  076B  1D00               	btfss	0,2
  8297  076C  2F71               	goto	u9100
  8298  076D  1283               	bcf	3,5	;RP0=0, select bank0
  8299  076E  1303               	bcf	3,6	;RP1=0, select bank0
  8300  076F  1687               	bsf	7,5	;volatile
  8301  0770  0008               	return
  8302  0771                     u9100:	
  8303  0771  1283               	bcf	3,5	;RP0=0, select bank0
  8304  0772  1303               	bcf	3,6	;RP1=0, select bank0
  8305  0773  1287               	bcf	7,5	;volatile
  8306                           
  8307                           ;TriacRelay_B1.c: 235: }
  8308                           ;TriacRelay_B1.c: 242: }
  8309                           ;TriacRelay_B1.c: 243: } else {
  8310  0774  0008               	return
  8311  0775                     l6780:	
  8312                           
  8313                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  8314  0775  3014               	movlw	20
  8315  0776  00DA               	movwf	___awdiv@divisor
  8316  0777  3000               	movlw	0
  8317  0778  00DB               	movwf	___awdiv@divisor+1
  8318  0779  0874               	movf	_Lights,w
  8319  077A  3E03               	addlw	3
  8320  077B  0084               	movwf	4
  8321  077C  1383               	bcf	3,7	;select IRP bank0
  8322  077D  0800               	movf	0,w
  8323  077E  00E2               	movwf	??_Lights_Control
  8324  077F  01E3               	clrf	??_Lights_Control+1
  8325  0780  0862               	movf	??_Lights_Control,w
  8326  0781  00DC               	movwf	___awdiv@dividend
  8327  0782  0863               	movf	??_Lights_Control+1,w
  8328  0783  00DD               	movwf	___awdiv@dividend+1
  8329  0784  158A  2611  118A   	fcall	___awdiv
  8330  0787  0874               	movf	_Lights,w
  8331  0788  3E02               	addlw	2
  8332  0789  0084               	movwf	4
  8333  078A  1283               	bcf	3,5	;RP0=0, select bank0
  8334  078B  1303               	bcf	3,6	;RP1=0, select bank0
  8335  078C  085B               	movf	?___awdiv+1,w
  8336  078D  3A80               	xorlw	128
  8337  078E  3C80               	sublw	128
  8338  078F  1D03               	skipz
  8339  0790  2F94               	goto	u9125
  8340  0791  085A               	movf	?___awdiv,w
  8341  0792  1383               	bcf	3,7	;select IRP bank0
  8342  0793  0200               	subwf	0,w
  8343  0794                     u9125:	
  8344  0794  1C03               	skipc
  8345  0795  0008               	return
  8346                           
  8347                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  8348  0796  0874               	movf	_Lights,w
  8349  0797  3E02               	addlw	2
  8350  0798  0084               	movwf	4
  8351  0799  1383               	bcf	3,7	;select IRP bank0
  8352  079A  0180               	clrf	0
  8353                           
  8354                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  8355  079B  0874               	movf	_Lights,w
  8356  079C  0084               	movwf	4
  8357  079D  1080               	bcf	0,1
  8358                           
  8359                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  8360  079E  0874               	movf	_Lights,w
  8361  079F  0084               	movwf	4
  8362  07A0  1380               	bcf	0,7
  8363                           
  8364                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  8365  07A1  1283               	bcf	3,5	;RP0=0, select bank0
  8366  07A2  1303               	bcf	3,6	;RP1=0, select bank0
  8367  07A3  0864               	movf	Lights_Control@lights,w
  8368  07A4  3A01               	xorlw	1
  8369  07A5  1D03               	skipz
  8370  07A6  2FA9               	goto	l6792
  8371                           
  8372                           ;TriacRelay_B1.c: 251: RA7 = 0;
  8373  07A7  1385               	bcf	5,7	;volatile
  8374                           
  8375                           ;TriacRelay_B1.c: 252: }
  8376  07A8  0008               	return
  8377  07A9                     l6792:	
  8378                           
  8379                           ;TriacRelay_B1.c: 255: else if (lights == 2) {
  8380  07A9  0864               	movf	Lights_Control@lights,w
  8381  07AA  3A02               	xorlw	2
  8382  07AB  1D03               	skipz
  8383  07AC  0008               	return
  8384                           
  8385                           ;TriacRelay_B1.c: 256: RC4 = 0;
  8386  07AD  1207               	bcf	7,4	;volatile
  8387  07AE  0008               	return
  8388  07AF                     __end_of_Lights_Control:	
  8389                           
  8390                           	psect	text49
  8391  088B                     __ptext49:	
  8392 ;; *************** function _Lights_Initialization *****************
  8393 ;; Defined at:
  8394 ;;		line 32 in file "../src/TriacRelay_B1.c"
  8395 ;; Parameters:    Size  Location     Type
  8396 ;;		None
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;		None
  8399 ;; Return value:  Size  Location     Type
  8400 ;;		None               void
  8401 ;; Registers used:
  8402 ;;		wreg, status,2, status,0, pclath, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8408 ;;      Params:         0       0       0       0
  8409 ;;      Locals:         0       0       0       0
  8410 ;;      Temps:          0       0       0       0
  8411 ;;      Totals:         0       0       0       0
  8412 ;;Total ram usage:        0 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    4
  8415 ;; This function calls:
  8416 ;;		_setLights_Initialization
  8417 ;; This function is called by:
  8418 ;;		_main
  8419 ;; This function uses a non-reentrant model
  8420 ;;
  8421                           
  8422                           
  8423                           ;psect for function _Lights_Initialization
  8424  088B                     _Lights_Initialization:	
  8425                           
  8426                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  8427                           
  8428                           ;incstack = 0
  8429                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8430  088B  3001               	movlw	1
  8431  088C  158A  207D  158A   	fcall	_setLights_Initialization
  8432                           
  8433                           ;TriacRelay_B1.c: 38: setLights_Initialization(2);
  8434  088F  3002               	movlw	2
  8435  0890  158A  207D         	fcall	_setLights_Initialization
  8436  0892  0008               	return
  8437  0893                     __end_of_Lights_Initialization:	
  8438                           
  8439                           	psect	text50
  8440  087D                     __ptext50:	
  8441 ;; *************** function _setLights_Initialization *****************
  8442 ;; Defined at:
  8443 ;;		line 47 in file "../src/TriacRelay_B1.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;  lights          1    wreg     unsigned char 
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;  lights          1    1[BANK0 ] unsigned char 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;		None               void
  8450 ;; Registers used:
  8451 ;;		wreg, status,2, status,0, pclath, cstack
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8457 ;;      Params:         0       0       0       0
  8458 ;;      Locals:         0       1       0       0
  8459 ;;      Temps:          0       0       0       0
  8460 ;;      Totals:         0       1       0       0
  8461 ;;Total ram usage:        1 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    3
  8464 ;; This function calls:
  8465 ;;		_LightsPointSelect
  8466 ;; This function is called by:
  8467 ;;		_Lights_Initialization
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           
  8472                           ;psect for function _setLights_Initialization
  8473  087D                     _setLights_Initialization:	
  8474                           
  8475                           ;incstack = 0
  8476                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8477                           ;setLights_Initialization@lights stored from wreg
  8478  087D  1283               	bcf	3,5	;RP0=0, select bank0
  8479  087E  1303               	bcf	3,6	;RP1=0, select bank0
  8480  087F  00DB               	movwf	setLights_Initialization@lights
  8481                           
  8482                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  8483  0880  085B               	movf	setLights_Initialization@lights,w
  8484  0881  158A  21B0         	fcall	_LightsPointSelect
  8485  0883  0008               	return
  8486  0884                     __end_of_setLights_Initialization:	
  8487                           
  8488                           	psect	text51
  8489  08CD                     __ptext51:	
  8490 ;; *************** function _LED_Main *****************
  8491 ;; Defined at:
  8492 ;;		line 47 in file "../src/LED_B1.c"
  8493 ;; Parameters:    Size  Location     Type
  8494 ;;		None
  8495 ;; Auto vars:     Size  Location     Type
  8496 ;;		None
  8497 ;; Return value:  Size  Location     Type
  8498 ;;		None               void
  8499 ;; Registers used:
  8500 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8501 ;; Tracked objects:
  8502 ;;		On entry : 0/0
  8503 ;;		On exit  : 0/0
  8504 ;;		Unchanged: 0/0
  8505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8506 ;;      Params:         0       0       0       0
  8507 ;;      Locals:         0       0       0       0
  8508 ;;      Temps:          0       0       0       0
  8509 ;;      Totals:         0       0       0       0
  8510 ;;Total ram usage:        0 bytes
  8511 ;; Hardware stack levels used:    1
  8512 ;; Hardware stack levels required when called:    4
  8513 ;; This function calls:
  8514 ;;		_setLED_Main
  8515 ;; This function is called by:
  8516 ;;		_main
  8517 ;; This function uses a non-reentrant model
  8518 ;;
  8519                           
  8520                           
  8521                           ;psect for function _LED_Main
  8522  08CD                     _LED_Main:	
  8523                           
  8524                           ;LED_B1.c: 58: setLED_Main(1);
  8525                           
  8526                           ;incstack = 0
  8527                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8528  08CD  3001               	movlw	1
  8529  08CE  158A  23F1  158A   	fcall	_setLED_Main
  8530                           
  8531                           ;LED_B1.c: 61: setLED_Main(2);
  8532  08D1  3002               	movlw	2
  8533  08D2  158A  23F1  158A   	fcall	_setLED_Main
  8534                           
  8535                           ;LED_B1.c: 67: setLED_Main(99);
  8536  08D5  3063               	movlw	99
  8537  08D6  158A  23F1         	fcall	_setLED_Main
  8538  08D8  0008               	return
  8539  08D9                     __end_of_LED_Main:	
  8540                           
  8541                           	psect	text52
  8542  0BF1                     __ptext52:	
  8543 ;; *************** function _setLED_Main *****************
  8544 ;; Defined at:
  8545 ;;		line 229 in file "../src/LED_B1.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  led             1    wreg     unsigned char 
  8548 ;; Auto vars:     Size  Location     Type
  8549 ;;  led             1    3[BANK0 ] unsigned char 
  8550 ;; Return value:  Size  Location     Type
  8551 ;;		None               void
  8552 ;; Registers used:
  8553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8554 ;; Tracked objects:
  8555 ;;		On entry : 0/0
  8556 ;;		On exit  : 0/0
  8557 ;;		Unchanged: 0/0
  8558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8559 ;;      Params:         0       0       0       0
  8560 ;;      Locals:         0       1       0       0
  8561 ;;      Temps:          0       2       0       0
  8562 ;;      Totals:         0       3       0       0
  8563 ;;Total ram usage:        3 bytes
  8564 ;; Hardware stack levels used:    1
  8565 ;; Hardware stack levels required when called:    3
  8566 ;; This function calls:
  8567 ;;		_LedPointSelect
  8568 ;; This function is called by:
  8569 ;;		_LED_Main
  8570 ;; This function uses a non-reentrant model
  8571 ;;
  8572                           
  8573                           
  8574                           ;psect for function _setLED_Main
  8575  0BF1                     _setLED_Main:	
  8576                           
  8577                           ;incstack = 0
  8578                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8579                           ;setLED_Main@led stored from wreg
  8580  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
  8581  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
  8582  0BF3  00DD               	movwf	setLED_Main@led
  8583                           
  8584                           ;LED_B1.c: 230: LedPointSelect(led);
  8585  0BF4  085D               	movf	setLED_Main@led,w
  8586  0BF5  158A  2284  158A   	fcall	_LedPointSelect
  8587                           
  8588                           ;LED_B1.c: 231: if (LED->GO == 1) {
  8589  0BF8  0872               	movf	_LED,w
  8590  0BF9  0084               	movwf	4
  8591  0BFA  1383               	bcf	3,7	;select IRP bank0
  8592  0BFB  1C80               	btfss	0,1
  8593  0BFC  0008               	return
  8594                           
  8595                           ;LED_B1.c: 232: LED->Time++;
  8596  0BFD  0A72               	incf	_LED,w
  8597  0BFE  0084               	movwf	4
  8598  0BFF  3001               	movlw	1
  8599  0C00  0780               	addwf	0,f
  8600  0C01  0A84               	incf	4,f
  8601  0C02  1803               	skipnc
  8602  0C03  0A80               	incf	0,f
  8603                           
  8604                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  8605  0C04  0A72               	incf	_LED,w
  8606  0C05  0084               	movwf	4
  8607  0C06  0800               	movf	0,w
  8608  0C07  1283               	bcf	3,5	;RP0=0, select bank0
  8609  0C08  1303               	bcf	3,6	;RP1=0, select bank0
  8610  0C09  00DB               	movwf	??_setLED_Main
  8611  0C0A  0A84               	incf	4,f
  8612  0C0B  0800               	movf	0,w
  8613  0C0C  00DC               	movwf	??_setLED_Main+1
  8614  0C0D  3000               	movlw	0
  8615  0C0E  025C               	subwf	??_setLED_Main+1,w
  8616  0C0F  3019               	movlw	25
  8617  0C10  1903               	skipnz
  8618  0C11  025B               	subwf	??_setLED_Main,w
  8619  0C12  1C03               	skipc
  8620  0C13  0008               	return
  8621                           
  8622                           ;LED_B1.c: 234: LED->Time = 0;
  8623  0C14  0A72               	incf	_LED,w
  8624  0C15  0084               	movwf	4
  8625  0C16  0180               	clrf	0
  8626  0C17  0A84               	incf	4,f
  8627  0C18  0180               	clrf	0
  8628                           
  8629                           ;LED_B1.c: 237: if (led == 1) {
  8630  0C19  085D               	movf	setLED_Main@led,w
  8631  0C1A  3A01               	xorlw	1
  8632  0C1B  1D03               	skipz
  8633  0C1C  2C1F               	goto	l383
  8634                           
  8635                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
  8636  0C1D  3080               	movlw	128
  8637  0C1E  0687               	xorwf	7,f
  8638  0C1F                     l383:	
  8639                           
  8640                           ;LED_B1.c: 239: }
  8641                           ;LED_B1.c: 242: if (led == 2) {
  8642  0C1F  085D               	movf	setLED_Main@led,w
  8643  0C20  3A02               	xorlw	2
  8644  0C21  1D03               	skipz
  8645  0C22  2C25               	goto	l384
  8646                           
  8647                           ;LED_B1.c: 243: RC6 = RC6 == 1 ? 0 : 1;
  8648  0C23  3040               	movlw	64
  8649  0C24  0687               	xorwf	7,f
  8650  0C25                     l384:	
  8651                           
  8652                           ;LED_B1.c: 244: }
  8653                           ;LED_B1.c: 252: if (led == 99) {
  8654  0C25  085D               	movf	setLED_Main@led,w
  8655  0C26  3A63               	xorlw	99
  8656  0C27  1D03               	skipz
  8657  0C28  0008               	return
  8658                           
  8659                           ;LED_B1.c: 253: RC1 = RC1 == 1 ? 0 : 1;
  8660  0C29  3002               	movlw	2
  8661  0C2A  0687               	xorwf	7,f
  8662  0C2B  0008               	return
  8663  0C2C                     __end_of_setLED_Main:	
  8664                           
  8665                           	psect	text53
  8666  08C1                     __ptext53:	
  8667 ;; *************** function _LED_Initialization *****************
  8668 ;; Defined at:
  8669 ;;		line 31 in file "../src/LED_B1.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;		None
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;		None
  8674 ;; Return value:  Size  Location     Type
  8675 ;;		None               void
  8676 ;; Registers used:
  8677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8678 ;; Tracked objects:
  8679 ;;		On entry : 0/0
  8680 ;;		On exit  : 0/0
  8681 ;;		Unchanged: 0/0
  8682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8683 ;;      Params:         0       0       0       0
  8684 ;;      Locals:         0       0       0       0
  8685 ;;      Temps:          0       0       0       0
  8686 ;;      Totals:         0       0       0       0
  8687 ;;Total ram usage:        0 bytes
  8688 ;; Hardware stack levels used:    1
  8689 ;; Hardware stack levels required when called:    5
  8690 ;; This function calls:
  8691 ;;		_setLED_Initialization
  8692 ;; This function is called by:
  8693 ;;		_main
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _LED_Initialization
  8699  08C1                     _LED_Initialization:	
  8700                           
  8701                           ;LED_B1.c: 33: setLED_Initialization(1);
  8702                           
  8703                           ;incstack = 0
  8704                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8705  08C1  3001               	movlw	1
  8706  08C2  158A  2163  158A   	fcall	_setLED_Initialization
  8707                           
  8708                           ;LED_B1.c: 36: setLED_Initialization(2);
  8709  08C5  3002               	movlw	2
  8710  08C6  158A  2163  158A   	fcall	_setLED_Initialization
  8711                           
  8712                           ;LED_B1.c: 42: setLED_Initialization(99);
  8713  08C9  3063               	movlw	99
  8714  08CA  158A  2163         	fcall	_setLED_Initialization
  8715  08CC  0008               	return
  8716  08CD                     __end_of_LED_Initialization:	
  8717                           
  8718                           	psect	text54
  8719  0963                     __ptext54:	
  8720 ;; *************** function _setLED_Initialization *****************
  8721 ;; Defined at:
  8722 ;;		line 74 in file "../src/LED_B1.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;  led             1    wreg     unsigned char 
  8725 ;; Auto vars:     Size  Location     Type
  8726 ;;  led             1    3[BANK0 ] unsigned char 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;		None               void
  8729 ;; Registers used:
  8730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8736 ;;      Params:         0       0       0       0
  8737 ;;      Locals:         0       1       0       0
  8738 ;;      Temps:          0       0       0       0
  8739 ;;      Totals:         0       1       0       0
  8740 ;;Total ram usage:        1 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    4
  8743 ;; This function calls:
  8744 ;;		_LedPointSelect
  8745 ;;		_setLED
  8746 ;; This function is called by:
  8747 ;;		_LED_Initialization
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _setLED_Initialization
  8753  0963                     _setLED_Initialization:	
  8754                           
  8755                           ;incstack = 0
  8756                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8757                           ;setLED_Initialization@led stored from wreg
  8758  0963  1283               	bcf	3,5	;RP0=0, select bank0
  8759  0964  1303               	bcf	3,6	;RP1=0, select bank0
  8760  0965  00DD               	movwf	setLED_Initialization@led
  8761                           
  8762                           ;LED_B1.c: 75: LedPointSelect(led);
  8763  0966  085D               	movf	setLED_Initialization@led,w
  8764  0967  158A  2284  158A   	fcall	_LedPointSelect
  8765                           
  8766                           ;LED_B1.c: 76: LED->Enable = 1;
  8767  096A  0872               	movf	_LED,w
  8768  096B  0084               	movwf	4
  8769  096C  1383               	bcf	3,7	;select IRP bank0
  8770  096D  1400               	bsf	0,0
  8771                           
  8772                           ;LED_B1.c: 77: setLED(led, 0);
  8773  096E  1283               	bcf	3,5	;RP0=0, select bank0
  8774  096F  1303               	bcf	3,6	;RP1=0, select bank0
  8775  0970  01DB               	clrf	setLED@command
  8776  0971  085D               	movf	setLED_Initialization@led,w
  8777  0972  118A  27AF         	fcall	_setLED
  8778  0974  0008               	return
  8779  0975                     __end_of_setLED_Initialization:	
  8780                           
  8781                           	psect	text55
  8782  063D                     __ptext55:	
  8783 ;; *************** function _Exception_Main *****************
  8784 ;; Defined at:
  8785 ;;		line 499 in file "../src/Main_B1.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;		None
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  i               2   19[BANK0 ] int 
  8790 ;;  i               2   17[BANK0 ] int 
  8791 ;;  status          1   16[BANK0 ] unsigned char 
  8792 ;;  error           1   15[BANK0 ] unsigned char 
  8793 ;;  count           1   14[BANK0 ] unsigned char 
  8794 ;;  lights          1   13[BANK0 ] unsigned char 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;		None               void
  8797 ;; Registers used:
  8798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8804 ;;      Params:         0       0       0       0
  8805 ;;      Locals:         0       8       0       0
  8806 ;;      Temps:          0       1       0       0
  8807 ;;      Totals:         0       9       0       0
  8808 ;;Total ram usage:        9 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    5
  8811 ;; This function calls:
  8812 ;;		_getAll_Lights_Line
  8813 ;;		_getLights_Status
  8814 ;;		_getMain_All_Error_Status
  8815 ;;		_getMain_All_LightsStatus
  8816 ;;		_setBuz
  8817 ;;		_setLED
  8818 ;;		_setLights_SwOff
  8819 ;;		_setLights_SwOn
  8820 ;; This function is called by:
  8821 ;;		_main
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           
  8826                           ;psect for function _Exception_Main
  8827  063D                     _Exception_Main:	
  8828                           
  8829                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8830                           
  8831                           ;incstack = 0
  8832                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8833  063D  3000               	movlw	0
  8834  063E  158A  242C  118A   	fcall	_getMain_All_Error_Status
  8835  0641  1283               	bcf	3,5	;RP0=0, select bank0
  8836  0642  1303               	bcf	3,6	;RP1=0, select bank0
  8837  0643  00E6               	movwf	??_Exception_Main
  8838  0644  0866               	movf	??_Exception_Main,w
  8839  0645  00E9               	movwf	Exception_Main@error
  8840                           
  8841                           ;Main_B1.c: 501: char lights = 0, count = 2;
  8842  0646  01E7               	clrf	Exception_Main@lights
  8843  0647  3002               	movlw	2
  8844  0648  00E6               	movwf	??_Exception_Main
  8845  0649  0866               	movf	??_Exception_Main,w
  8846  064A  00E8               	movwf	Exception_Main@count
  8847                           
  8848                           ;Main_B1.c: 502: char status = 0;
  8849  064B  01EA               	clrf	Exception_Main@status
  8850                           
  8851                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8852  064C  1DB3               	btfss	_myMain+2,3
  8853  064D  2E5A               	goto	l7298
  8854                           
  8855                           ;Main_B1.c: 505: if (error == 0) {
  8856  064E  08E9               	movf	Exception_Main@error,f
  8857  064F  1D03               	skipz
  8858  0650  0008               	return
  8859                           
  8860                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8861  0651  11B3               	bcf	_myMain+2,3
  8862                           
  8863                           ;Main_B1.c: 509: setLED(99, 10);
  8864  0652  300A               	movlw	10
  8865  0653  00E6               	movwf	??_Exception_Main
  8866  0654  0866               	movf	??_Exception_Main,w
  8867  0655  00DB               	movwf	setLED@command
  8868  0656  3063               	movlw	99
  8869  0657  118A  27AF         	fcall	_setLED
  8870                           
  8871                           ;Main_B1.c: 521: }
  8872                           ;Main_B1.c: 522: } else {
  8873  0659  0008               	return
  8874  065A                     l7298:	
  8875                           
  8876                           ;Main_B1.c: 523: if (error != 0) {
  8877  065A  1283               	bcf	3,5	;RP0=0, select bank0
  8878  065B  1303               	bcf	3,6	;RP1=0, select bank0
  8879  065C  0869               	movf	Exception_Main@error,w
  8880  065D  1903               	btfsc	3,2
  8881  065E  0008               	return
  8882                           
  8883                           ;Main_B1.c: 524: myMain.Error_Run = 1;
  8884  065F  15B3               	bsf	_myMain+2,3
  8885                           
  8886                           ;Main_B1.c: 586: setLED(99, 11);
  8887  0660  300B               	movlw	11
  8888  0661  00E6               	movwf	??_Exception_Main
  8889  0662  0866               	movf	??_Exception_Main,w
  8890  0663  00DB               	movwf	setLED@command
  8891  0664  3063               	movlw	99
  8892  0665  118A  27AF  118A   	fcall	_setLED
  8893                           
  8894                           ;Main_B1.c: 590: switch (error) {
  8895  0668  2F06               	goto	l7338
  8896  0669                     l7304:	
  8897                           ;Main_B1.c: 591: case 1:
  8898                           
  8899                           
  8900                           ;Main_B1.c: 592: for (int i = 0; i < count; i++) {
  8901  0669  1283               	bcf	3,5	;RP0=0, select bank0
  8902  066A  1303               	bcf	3,6	;RP1=0, select bank0
  8903  066B  01EB               	clrf	Exception_Main@i
  8904  066C  01EC               	clrf	Exception_Main@i+1
  8905  066D                     l7312:	
  8906  066D  086C               	movf	Exception_Main@i+1,w
  8907  066E  3A80               	xorlw	128
  8908  066F  00E6               	movwf	??_Exception_Main
  8909  0670  3080               	movlw	128
  8910  0671  0266               	subwf	??_Exception_Main,w
  8911  0672  1D03               	skipz
  8912  0673  2E76               	goto	u10205
  8913  0674  0868               	movf	Exception_Main@count,w
  8914  0675  026B               	subwf	Exception_Main@i,w
  8915  0676                     u10205:	
  8916  0676  1803               	btfsc	3,0
  8917  0677  2E99               	goto	u10200
  8918                           
  8919                           ;Main_B1.c: 593: if (getLights_Status(i + 1) == 1) {
  8920  0678  1283               	bcf	3,5	;RP0=0, select bank0
  8921  0679  1303               	bcf	3,6	;RP1=0, select bank0
  8922  067A  086B               	movf	Exception_Main@i,w
  8923  067B  3E01               	addlw	1
  8924  067C  158A  2141  118A   	fcall	_getLights_Status
  8925  067F  3A01               	xorlw	1
  8926  0680  1D03               	skipz
  8927  0681  2E90               	goto	l7310
  8928                           
  8929                           ;Main_B1.c: 595: setLights_SwOn(i + 1);
  8930  0682  1283               	bcf	3,5	;RP0=0, select bank0
  8931  0683  1303               	bcf	3,6	;RP1=0, select bank0
  8932  0684  086B               	movf	Exception_Main@i,w
  8933  0685  3E01               	addlw	1
  8934  0686  158A  246A  118A   	fcall	_setLights_SwOn
  8935                           
  8936                           ;Main_B1.c: 596: setLights_SwOff(i + 1);
  8937  0689  1283               	bcf	3,5	;RP0=0, select bank0
  8938  068A  1303               	bcf	3,6	;RP1=0, select bank0
  8939  068B  086B               	movf	Exception_Main@i,w
  8940  068C  3E01               	addlw	1
  8941  068D  158A  2357  118A   	fcall	_setLights_SwOff
  8942  0690                     l7310:	
  8943  0690  3001               	movlw	1
  8944  0691  1283               	bcf	3,5	;RP0=0, select bank0
  8945  0692  1303               	bcf	3,6	;RP1=0, select bank0
  8946  0693  07EB               	addwf	Exception_Main@i,f
  8947  0694  1803               	skipnc
  8948  0695  0AEC               	incf	Exception_Main@i+1,f
  8949  0696  3000               	movlw	0
  8950  0697  07EC               	addwf	Exception_Main@i+1,f
  8951  0698  2E6D               	goto	l7312
  8952  0699                     u10200:	
  8953  0699  1283               	bcf	3,5	;RP0=0, select bank0
  8954  069A  1303               	bcf	3,6	;RP1=0, select bank0
  8955  069B  0008               	return
  8956  069C                     l7314:	
  8957                           ;Main_B1.c: 600: case 2:
  8958                           
  8959                           ;Main_B1.c: 597: }
  8960                           ;Main_B1.c: 598: }
  8961                           ;Main_B1.c: 599: break;
  8962                           
  8963                           
  8964                           ;Main_B1.c: 601: if (getMain_All_LightsStatus() == 1) {
  8965  069C  158A  2131  118A   	fcall	_getMain_All_LightsStatus
  8966  069F  3A01               	xorlw	1
  8967  06A0  1D03               	skipz
  8968  06A1  2EAC               	goto	l7318
  8969                           
  8970                           ;Main_B1.c: 602: setBuz(10, 300);
  8971  06A2  302C               	movlw	44
  8972  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  8973  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  8974  06A5  00E2               	movwf	setBuz@time
  8975  06A6  3001               	movlw	1
  8976  06A7  00E3               	movwf	setBuz@time+1
  8977  06A8  300A               	movlw	10
  8978  06A9  158A  256E  118A   	fcall	_setBuz
  8979  06AC                     l7318:	
  8980                           
  8981                           ;Main_B1.c: 603: }
  8982                           ;Main_B1.c: 605: for (int i = 0; i < count; i++) {
  8983  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  8984  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  8985  06AE  01ED               	clrf	Exception_Main@i_2426
  8986  06AF  01EE               	clrf	Exception_Main@i_2426+1
  8987  06B0                     l7326:	
  8988  06B0  086E               	movf	Exception_Main@i_2426+1,w
  8989  06B1  3A80               	xorlw	128
  8990  06B2  00E6               	movwf	??_Exception_Main
  8991  06B3  3080               	movlw	128
  8992  06B4  0266               	subwf	??_Exception_Main,w
  8993  06B5  1D03               	skipz
  8994  06B6  2EB9               	goto	u10235
  8995  06B7  0868               	movf	Exception_Main@count,w
  8996  06B8  026D               	subwf	Exception_Main@i_2426,w
  8997  06B9                     u10235:	
  8998  06B9  1803               	btfsc	3,0
  8999  06BA  2EDC               	goto	u10230
  9000                           
  9001                           ;Main_B1.c: 606: if (getLights_Status(i + 1) == 1) {
  9002  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  9003  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  9004  06BD  086D               	movf	Exception_Main@i_2426,w
  9005  06BE  3E01               	addlw	1
  9006  06BF  158A  2141  118A   	fcall	_getLights_Status
  9007  06C2  3A01               	xorlw	1
  9008  06C3  1D03               	skipz
  9009  06C4  2ED3               	goto	l7324
  9010                           
  9011                           ;Main_B1.c: 607: setLights_SwOn(i + 1);
  9012  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  9013  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  9014  06C7  086D               	movf	Exception_Main@i_2426,w
  9015  06C8  3E01               	addlw	1
  9016  06C9  158A  246A  118A   	fcall	_setLights_SwOn
  9017                           
  9018                           ;Main_B1.c: 608: setLights_SwOff(i + 1);
  9019  06CC  1283               	bcf	3,5	;RP0=0, select bank0
  9020  06CD  1303               	bcf	3,6	;RP1=0, select bank0
  9021  06CE  086D               	movf	Exception_Main@i_2426,w
  9022  06CF  3E01               	addlw	1
  9023  06D0  158A  2357  118A   	fcall	_setLights_SwOff
  9024  06D3                     l7324:	
  9025  06D3  3001               	movlw	1
  9026  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  9027  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  9028  06D6  07ED               	addwf	Exception_Main@i_2426,f
  9029  06D7  1803               	skipnc
  9030  06D8  0AEE               	incf	Exception_Main@i_2426+1,f
  9031  06D9  3000               	movlw	0
  9032  06DA  07EE               	addwf	Exception_Main@i_2426+1,f
  9033  06DB  2EB0               	goto	l7326
  9034  06DC                     u10230:	
  9035  06DC  1283               	bcf	3,5	;RP0=0, select bank0
  9036  06DD  1303               	bcf	3,6	;RP1=0, select bank0
  9037  06DE  0008               	return
  9038  06DF                     l7328:	
  9039                           ;Main_B1.c: 612: case 3:
  9040                           
  9041                           ;Main_B1.c: 609: }
  9042                           ;Main_B1.c: 610: }
  9043                           ;Main_B1.c: 611: break;
  9044                           
  9045                           
  9046                           ;Main_B1.c: 613: status = getAll_Lights_Line();
  9047  06DF  158A  2121  118A   	fcall	_getAll_Lights_Line
  9048  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  9049  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  9050  06E4  00E6               	movwf	??_Exception_Main
  9051  06E5  0866               	movf	??_Exception_Main,w
  9052  06E6  00EA               	movwf	Exception_Main@status
  9053                           
  9054                           ;Main_B1.c: 615: if (getLights_Status(status) == 1) {
  9055  06E7  086A               	movf	Exception_Main@status,w
  9056  06E8  158A  2141  118A   	fcall	_getLights_Status
  9057  06EB  3A01               	xorlw	1
  9058  06EC  1D03               	skipz
  9059  06ED  2EFA               	goto	l7334
  9060                           
  9061                           ;Main_B1.c: 616: setLights_SwOn(status);
  9062  06EE  1283               	bcf	3,5	;RP0=0, select bank0
  9063  06EF  1303               	bcf	3,6	;RP1=0, select bank0
  9064  06F0  086A               	movf	Exception_Main@status,w
  9065  06F1  158A  246A  118A   	fcall	_setLights_SwOn
  9066                           
  9067                           ;Main_B1.c: 617: setLights_SwOff(status);
  9068  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  9069  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  9070  06F6  086A               	movf	Exception_Main@status,w
  9071  06F7  158A  2357  118A   	fcall	_setLights_SwOff
  9072  06FA                     l7334:	
  9073                           
  9074                           ;Main_B1.c: 619: }
  9075                           ;Main_B1.c: 620: setBuz(5, 300);
  9076  06FA  302C               	movlw	44
  9077  06FB  1283               	bcf	3,5	;RP0=0, select bank0
  9078  06FC  1303               	bcf	3,6	;RP1=0, select bank0
  9079  06FD  00E2               	movwf	setBuz@time
  9080  06FE  3001               	movlw	1
  9081  06FF  00E3               	movwf	setBuz@time+1
  9082  0700  3005               	movlw	5
  9083  0701  158A  256E         	fcall	_setBuz
  9084                           
  9085                           ;Main_B1.c: 621: break;
  9086  0703  1283               	bcf	3,5	;RP0=0, select bank0
  9087  0704  1303               	bcf	3,6	;RP1=0, select bank0
  9088  0705  0008               	return
  9089  0706                     l7338:	
  9090                           ;Main_B1.c: 622: }
  9091                           
  9092  0706  1283               	bcf	3,5	;RP0=0, select bank0
  9093  0707  1303               	bcf	3,6	;RP1=0, select bank0
  9094  0708  0869               	movf	Exception_Main@error,w
  9095                           
  9096                           ; Switch size 1, requested type "space"
  9097                           ; Number of cases is 3, Range of values is 1 to 3
  9098                           ; switch strategies available:
  9099                           ; Name         Instructions Cycles
  9100                           ; simple_byte           10     6 (average)
  9101                           ; direct_byte           16    10 (fixed)
  9102                           ; jumptable            263     9 (fixed)
  9103                           ;	Chosen strategy is simple_byte
  9104  0709  3A01               	xorlw	1	; case 1
  9105  070A  1903               	skipnz
  9106  070B  2E69               	goto	l7304
  9107  070C  3A03               	xorlw	3	; case 2
  9108  070D  1903               	skipnz
  9109  070E  2E9C               	goto	l7314
  9110  070F  3A01               	xorlw	1	; case 3
  9111  0710  1903               	skipnz
  9112  0711  2EDF               	goto	l7328
  9113  0712  2F14               	goto	l749
  9114  0713  0008               	return
  9115  0714                     l749:	
  9116  0714  0008               	return
  9117  0715                     __end_of_Exception_Main:	
  9118                           
  9119                           	psect	text56
  9120  0C6A                     __ptext56:	
  9121 ;; *************** function _setLights_SwOn *****************
  9122 ;; Defined at:
  9123 ;;		line 410 in file "../src/TriacRelay_B1.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;  sw              1    wreg     unsigned char 
  9126 ;; Auto vars:     Size  Location     Type
  9127 ;;  sw              1    4[BANK0 ] unsigned char 
  9128 ;; Return value:  Size  Location     Type
  9129 ;;		None               void
  9130 ;; Registers used:
  9131 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9137 ;;      Params:         0       0       0       0
  9138 ;;      Locals:         0       1       0       0
  9139 ;;      Temps:          0       0       0       0
  9140 ;;      Totals:         0       1       0       0
  9141 ;;Total ram usage:        1 bytes
  9142 ;; Hardware stack levels used:    1
  9143 ;; Hardware stack levels required when called:    4
  9144 ;; This function calls:
  9145 ;;		_LightsPointSelect
  9146 ;;		_getLights_Status
  9147 ;;		_setLights_Trigger
  9148 ;; This function is called by:
  9149 ;;		_Exception_Main
  9150 ;;		_PIR_Main
  9151 ;;		_setSw_Main
  9152 ;; This function uses a non-reentrant model
  9153 ;;
  9154                           
  9155                           
  9156                           ;psect for function _setLights_SwOn
  9157  0C6A                     _setLights_SwOn:	
  9158                           
  9159                           ;incstack = 0
  9160                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9161                           ;setLights_SwOn@sw stored from wreg
  9162  0C6A  1283               	bcf	3,5	;RP0=0, select bank0
  9163  0C6B  1303               	bcf	3,6	;RP1=0, select bank0
  9164  0C6C  00DE               	movwf	setLights_SwOn@sw
  9165                           
  9166                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  9167  0C6D  085E               	movf	setLights_SwOn@sw,w
  9168  0C6E  158A  21B0  158A   	fcall	_LightsPointSelect
  9169                           
  9170                           ;TriacRelay_B1.c: 422: Lights->SwFlag = 1;
  9171  0C71  0A74               	incf	_Lights,w
  9172  0C72  0084               	movwf	4
  9173  0C73  1383               	bcf	3,7	;select IRP bank0
  9174  0C74  1500               	bsf	0,2
  9175                           
  9176                           ;TriacRelay_B1.c: 423: if (sw == 1) {
  9177  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  9178  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  9179  0C77  085E               	movf	setLights_SwOn@sw,w
  9180  0C78  3A01               	xorlw	1
  9181  0C79  1D03               	skipz
  9182  0C7A  2C93               	goto	l6446
  9183                           
  9184                           ;TriacRelay_B1.c: 424: if (getLights_Status(sw) == 0) {
  9185  0C7B  085E               	movf	setLights_SwOn@sw,w
  9186  0C7C  158A  2141  158A   	fcall	_getLights_Status
  9187  0C7F  3800               	iorlw	0
  9188  0C80  1D03               	skipz
  9189  0C81  2C8E               	goto	l6444
  9190                           
  9191                           ;TriacRelay_B1.c: 425: Lights->SwStatus = 1;
  9192  0C82  0A74               	incf	_Lights,w
  9193  0C83  0084               	movwf	4
  9194  0C84  1383               	bcf	3,7	;select IRP bank0
  9195  0C85  1580               	bsf	0,3
  9196                           
  9197                           ;TriacRelay_B1.c: 426: setLights_Trigger(sw, 1);
  9198  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  9199  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  9200  0C88  01DB               	clrf	setLights_Trigger@command
  9201  0C89  0ADB               	incf	setLights_Trigger@command,f
  9202  0C8A  085E               	movf	setLights_SwOn@sw,w
  9203  0C8B  158A  2269         	fcall	_setLights_Trigger
  9204                           
  9205                           ;TriacRelay_B1.c: 427: } else {
  9206  0C8D  0008               	return
  9207  0C8E                     l6444:	
  9208                           
  9209                           ;TriacRelay_B1.c: 428: Lights->SwStatus = 0;
  9210  0C8E  0A74               	incf	_Lights,w
  9211  0C8F  0084               	movwf	4
  9212  0C90  1383               	bcf	3,7	;select IRP bank0
  9213  0C91  1180               	bcf	0,3
  9214                           
  9215                           ;TriacRelay_B1.c: 429: }
  9216                           ;TriacRelay_B1.c: 430: } else if (sw == 2) {
  9217  0C92  0008               	return
  9218  0C93                     l6446:	
  9219  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  9220  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  9221  0C95  085E               	movf	setLights_SwOn@sw,w
  9222  0C96  3A02               	xorlw	2
  9223  0C97  1D03               	skipz
  9224  0C98  0008               	return
  9225                           
  9226                           ;TriacRelay_B1.c: 431: if (getLights_Status(sw) == 0) {
  9227  0C99  085E               	movf	setLights_SwOn@sw,w
  9228  0C9A  158A  2141  158A   	fcall	_getLights_Status
  9229  0C9D  3800               	iorlw	0
  9230  0C9E  1D03               	skipz
  9231  0C9F  0008               	return
  9232                           
  9233                           ;TriacRelay_B1.c: 432: setLights_Trigger(sw, 1);
  9234  0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  9235  0CA1  1303               	bcf	3,6	;RP1=0, select bank0
  9236  0CA2  01DB               	clrf	setLights_Trigger@command
  9237  0CA3  0ADB               	incf	setLights_Trigger@command,f
  9238  0CA4  085E               	movf	setLights_SwOn@sw,w
  9239  0CA5  158A  2269         	fcall	_setLights_Trigger
  9240  0CA7  0008               	return
  9241  0CA8                     __end_of_setLights_SwOn:	
  9242                           
  9243                           	psect	text57
  9244  0B57                     __ptext57:	
  9245 ;; *************** function _setLights_SwOff *****************
  9246 ;; Defined at:
  9247 ;;		line 438 in file "../src/TriacRelay_B1.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  sw              1    wreg     unsigned char 
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;  sw              1    4[BANK0 ] unsigned char 
  9252 ;; Return value:  Size  Location     Type
  9253 ;;		None               void
  9254 ;; Registers used:
  9255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9261 ;;      Params:         0       0       0       0
  9262 ;;      Locals:         0       1       0       0
  9263 ;;      Temps:          0       0       0       0
  9264 ;;      Totals:         0       1       0       0
  9265 ;;Total ram usage:        1 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    4
  9268 ;; This function calls:
  9269 ;;		_LightsPointSelect
  9270 ;;		_getLights_Status
  9271 ;;		_setLights_Trigger
  9272 ;; This function is called by:
  9273 ;;		_Exception_Main
  9274 ;;		_PIR_Main
  9275 ;;		_setSw_Main
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           
  9280                           ;psect for function _setLights_SwOff
  9281  0B57                     _setLights_SwOff:	
  9282                           
  9283                           ;incstack = 0
  9284                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9285                           ;setLights_SwOff@sw stored from wreg
  9286  0B57  1283               	bcf	3,5	;RP0=0, select bank0
  9287  0B58  1303               	bcf	3,6	;RP1=0, select bank0
  9288  0B59  00DE               	movwf	setLights_SwOff@sw
  9289                           
  9290                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  9291  0B5A  085E               	movf	setLights_SwOff@sw,w
  9292  0B5B  158A  21B0  158A   	fcall	_LightsPointSelect
  9293                           
  9294                           ;TriacRelay_B1.c: 449: if (sw == 1) {
  9295  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  9296  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
  9297  0B60  085E               	movf	setLights_SwOff@sw,w
  9298  0B61  3A01               	xorlw	1
  9299  0B62  1D03               	skipz
  9300  0B63  2B75               	goto	l6462
  9301                           
  9302                           ;TriacRelay_B1.c: 450: if (Lights->SwFlag == 1) {
  9303  0B64  0A74               	incf	_Lights,w
  9304  0B65  0084               	movwf	4
  9305  0B66  1383               	bcf	3,7	;select IRP bank0
  9306  0B67  1D00               	btfss	0,2
  9307  0B68  0008               	return
  9308                           
  9309                           ;TriacRelay_B1.c: 451: Lights->SwFlag = 0;
  9310  0B69  0A74               	incf	_Lights,w
  9311  0B6A  0084               	movwf	4
  9312  0B6B  1100               	bcf	0,2
  9313                           
  9314                           ;TriacRelay_B1.c: 452: if (Lights->SwStatus == 0) {
  9315  0B6C  0A74               	incf	_Lights,w
  9316  0B6D  0084               	movwf	4
  9317  0B6E  1980               	btfsc	0,3
  9318  0B6F  0008               	return
  9319                           
  9320                           ;TriacRelay_B1.c: 453: setLights_Trigger(sw, 0);
  9321  0B70  01DB               	clrf	setLights_Trigger@command
  9322  0B71  085E               	movf	setLights_SwOff@sw,w
  9323  0B72  158A  2269         	fcall	_setLights_Trigger
  9324                           
  9325                           ;TriacRelay_B1.c: 454: }
  9326                           ;TriacRelay_B1.c: 455: }
  9327                           ;TriacRelay_B1.c: 456: } else if (sw == 2) {
  9328  0B74  0008               	return
  9329  0B75                     l6462:	
  9330  0B75  1283               	bcf	3,5	;RP0=0, select bank0
  9331  0B76  1303               	bcf	3,6	;RP1=0, select bank0
  9332  0B77  085E               	movf	setLights_SwOff@sw,w
  9333  0B78  3A02               	xorlw	2
  9334  0B79  1D03               	skipz
  9335  0B7A  0008               	return
  9336                           
  9337                           ;TriacRelay_B1.c: 457: if (getLights_Status(sw) == 1) {
  9338  0B7B  085E               	movf	setLights_SwOff@sw,w
  9339  0B7C  158A  2141  158A   	fcall	_getLights_Status
  9340  0B7F  3A01               	xorlw	1
  9341  0B80  1D03               	skipz
  9342  0B81  0008               	return
  9343                           
  9344                           ;TriacRelay_B1.c: 458: setLights_Trigger(sw, 0);
  9345  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  9346  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  9347  0B84  01DB               	clrf	setLights_Trigger@command
  9348  0B85  085E               	movf	setLights_SwOff@sw,w
  9349  0B86  158A  2269         	fcall	_setLights_Trigger
  9350  0B88  0008               	return
  9351  0B89                     __end_of_setLights_SwOff:	
  9352                           
  9353                           	psect	text58
  9354  0A69                     __ptext58:	
  9355 ;; *************** function _setLights_Trigger *****************
  9356 ;; Defined at:
  9357 ;;		line 278 in file "../src/TriacRelay_B1.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;  lights          1    wreg     unsigned char 
  9360 ;;  command         1    1[BANK0 ] unsigned char 
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;  lights          1    3[BANK0 ] unsigned char 
  9363 ;; Return value:  Size  Location     Type
  9364 ;;		None               void
  9365 ;; Registers used:
  9366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9372 ;;      Params:         0       1       0       0
  9373 ;;      Locals:         0       1       0       0
  9374 ;;      Temps:          0       1       0       0
  9375 ;;      Totals:         0       3       0       0
  9376 ;;Total ram usage:        3 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    3
  9379 ;; This function calls:
  9380 ;;		_LightsPointSelect
  9381 ;; This function is called by:
  9382 ;;		_setLights_SwOn
  9383 ;;		_setLights_SwOff
  9384 ;;		_setMain_Exception
  9385 ;;		_setLights_ErrorClose
  9386 ;; This function uses a non-reentrant model
  9387 ;;
  9388                           
  9389                           
  9390                           ;psect for function _setLights_Trigger
  9391  0A69                     _setLights_Trigger:	
  9392                           
  9393                           ;incstack = 0
  9394                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9395                           ;setLights_Trigger@lights stored from wreg
  9396  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  9397  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  9398  0A6B  00DD               	movwf	setLights_Trigger@lights
  9399                           
  9400                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  9401  0A6C  085D               	movf	setLights_Trigger@lights,w
  9402  0A6D  158A  21B0         	fcall	_LightsPointSelect
  9403                           
  9404                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  9405  0A6F  0874               	movf	_Lights,w
  9406  0A70  0084               	movwf	4
  9407  0A71  1383               	bcf	3,7	;select IRP bank0
  9408  0A72  1580               	bsf	0,3
  9409                           
  9410                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  9411  0A73  1283               	bcf	3,5	;RP0=0, select bank0
  9412  0A74  1303               	bcf	3,6	;RP1=0, select bank0
  9413  0A75  085B               	movf	setLights_Trigger@command,w
  9414  0A76  3A01               	xorlw	1
  9415  0A77  3000               	movlw	0
  9416  0A78  1903               	skipnz
  9417  0A79  3001               	movlw	1
  9418  0A7A  00DC               	movwf	??_setLights_Trigger
  9419  0A7B  0874               	movf	_Lights,w
  9420  0A7C  0084               	movwf	4
  9421  0A7D  0EDC               	swapf	??_setLights_Trigger,f
  9422  0A7E  0800               	movf	0,w
  9423  0A7F  065C               	xorwf	??_setLights_Trigger,w
  9424  0A80  39EF               	andlw	-17
  9425  0A81  065C               	xorwf	??_setLights_Trigger,w
  9426  0A82  0080               	movwf	0
  9427  0A83  0008               	return
  9428  0A84                     __end_of_setLights_Trigger:	
  9429                           
  9430                           	psect	text59
  9431  0941                     __ptext59:	
  9432 ;; *************** function _getLights_Status *****************
  9433 ;; Defined at:
  9434 ;;		line 271 in file "../src/TriacRelay_B1.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  lights          1    wreg     unsigned char 
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  lights          1    1[BANK0 ] unsigned char 
  9439 ;;  status          1    2[BANK0 ] unsigned char 
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  1    wreg      unsigned char 
  9442 ;; Registers used:
  9443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9449 ;;      Params:         0       0       0       0
  9450 ;;      Locals:         0       2       0       0
  9451 ;;      Temps:          0       0       0       0
  9452 ;;      Totals:         0       2       0       0
  9453 ;;Total ram usage:        2 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    3
  9456 ;; This function calls:
  9457 ;;		_LightsPointSelect
  9458 ;; This function is called by:
  9459 ;;		_Exception_Main
  9460 ;;		_PIR_Main
  9461 ;;		_setLights_SwOn
  9462 ;;		_setLights_SwOff
  9463 ;;		_setMain_Exception
  9464 ;;		_setLights_ErrorClose
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           
  9469                           ;psect for function _getLights_Status
  9470  0941                     _getLights_Status:	
  9471                           
  9472                           ;incstack = 0
  9473                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9474                           ;getLights_Status@lights stored from wreg
  9475  0941  1283               	bcf	3,5	;RP0=0, select bank0
  9476  0942  1303               	bcf	3,6	;RP1=0, select bank0
  9477  0943  00DB               	movwf	getLights_Status@lights
  9478                           
  9479                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  9480  0944  085B               	movf	getLights_Status@lights,w
  9481  0945  158A  21B0         	fcall	_LightsPointSelect
  9482                           
  9483                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  9484  0947  0874               	movf	_Lights,w
  9485  0948  0084               	movwf	4
  9486  0949  3000               	movlw	0
  9487  094A  1383               	bcf	3,7	;select IRP bank0
  9488  094B  1900               	btfsc	0,2
  9489  094C  3001               	movlw	1
  9490  094D  1283               	bcf	3,5	;RP0=0, select bank0
  9491  094E  1303               	bcf	3,6	;RP1=0, select bank0
  9492  094F  00DC               	movwf	getLights_Status@status
  9493                           
  9494                           ;TriacRelay_B1.c: 274: return status;
  9495  0950  085C               	movf	getLights_Status@status,w
  9496  0951  0008               	return
  9497  0952                     __end_of_getLights_Status:	
  9498                           
  9499                           	psect	text60
  9500  09B0                     __ptext60:	
  9501 ;; *************** function _LightsPointSelect *****************
  9502 ;; Defined at:
  9503 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9504 ;; Parameters:    Size  Location     Type
  9505 ;;  lights          1    wreg     unsigned char 
  9506 ;; Auto vars:     Size  Location     Type
  9507 ;;  lights          1    0[BANK0 ] unsigned char 
  9508 ;; Return value:  Size  Location     Type
  9509 ;;		None               void
  9510 ;; Registers used:
  9511 ;;		wreg
  9512 ;; Tracked objects:
  9513 ;;		On entry : 0/0
  9514 ;;		On exit  : 0/0
  9515 ;;		Unchanged: 0/0
  9516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9517 ;;      Params:         0       0       0       0
  9518 ;;      Locals:         0       1       0       0
  9519 ;;      Temps:          1       0       0       0
  9520 ;;      Totals:         1       1       0       0
  9521 ;;Total ram usage:        2 bytes
  9522 ;; Hardware stack levels used:    1
  9523 ;; Hardware stack levels required when called:    2
  9524 ;; This function calls:
  9525 ;;		Nothing
  9526 ;; This function is called by:
  9527 ;;		_setLights_Initialization
  9528 ;;		_setLights_Main
  9529 ;;		_Lights_Control
  9530 ;;		_getLights_Status
  9531 ;;		_setLights_Trigger
  9532 ;;		_setLights_SwOn
  9533 ;;		_setLights_SwOff
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           
  9538                           ;psect for function _LightsPointSelect
  9539  09B0                     _LightsPointSelect:	
  9540                           
  9541                           ;incstack = 0
  9542                           ; Regs used in _LightsPointSelect: [wreg]
  9543                           ;LightsPointSelect@lights stored from wreg
  9544  09B0  1283               	bcf	3,5	;RP0=0, select bank0
  9545  09B1  1303               	bcf	3,6	;RP1=0, select bank0
  9546  09B2  00DA               	movwf	LightsPointSelect@lights
  9547                           
  9548                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9549  09B3  085A               	movf	LightsPointSelect@lights,w
  9550  09B4  3A01               	xorlw	1
  9551  09B5  1D03               	skipz
  9552  09B6  29BC               	goto	l6324
  9553                           
  9554                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9555  09B7  3048               	movlw	_Lights1& (0+255)
  9556  09B8  00F9               	movwf	??_LightsPointSelect
  9557  09B9  0879               	movf	??_LightsPointSelect,w
  9558  09BA  00F4               	movwf	_Lights
  9559                           
  9560                           ;TriacRelay_B1.c: 15: }
  9561  09BB  0008               	return
  9562  09BC                     l6324:	
  9563                           
  9564                           ;TriacRelay_B1.c: 19: else if (lights == 2) {
  9565  09BC  085A               	movf	LightsPointSelect@lights,w
  9566  09BD  3A02               	xorlw	2
  9567  09BE  1D03               	skipz
  9568  09BF  0008               	return
  9569                           
  9570                           ;TriacRelay_B1.c: 20: Lights = &Lights2;
  9571  09C0  304D               	movlw	_Lights2& (0+255)
  9572  09C1  00F9               	movwf	??_LightsPointSelect
  9573  09C2  0879               	movf	??_LightsPointSelect,w
  9574  09C3  00F4               	movwf	_Lights
  9575  09C4  0008               	return
  9576  09C5                     __end_of_LightsPointSelect:	
  9577                           
  9578                           	psect	text61
  9579  07AF                     __ptext61:	
  9580 ;; *************** function _setLED *****************
  9581 ;; Defined at:
  9582 ;;		line 81 in file "../src/LED_B1.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;  led             1    wreg     unsigned char 
  9585 ;;  command         1    1[BANK0 ] unsigned char 
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;  led             1    2[BANK0 ] unsigned char 
  9588 ;; Return value:  Size  Location     Type
  9589 ;;		None               void
  9590 ;; Registers used:
  9591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9592 ;; Tracked objects:
  9593 ;;		On entry : 0/0
  9594 ;;		On exit  : 0/0
  9595 ;;		Unchanged: 0/0
  9596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9597 ;;      Params:         0       1       0       0
  9598 ;;      Locals:         0       1       0       0
  9599 ;;      Temps:          0       0       0       0
  9600 ;;      Totals:         0       2       0       0
  9601 ;;Total ram usage:        2 bytes
  9602 ;; Hardware stack levels used:    1
  9603 ;; Hardware stack levels required when called:    3
  9604 ;; This function calls:
  9605 ;;		_LedPointSelect
  9606 ;; This function is called by:
  9607 ;;		_setLED_Initialization
  9608 ;;		_Exception_Main
  9609 ;;		_setSw_Main
  9610 ;;		_setLights
  9611 ;;		_setMain_Exception
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _setLED
  9617  07AF                     _setLED:	
  9618                           
  9619                           ;incstack = 0
  9620                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9621                           ;setLED@led stored from wreg
  9622  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  9623  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  9624  07B1  00DC               	movwf	setLED@led
  9625                           
  9626                           ;LED_B1.c: 82: LedPointSelect(led);
  9627  07B2  085C               	movf	setLED@led,w
  9628  07B3  158A  2284  118A   	fcall	_LedPointSelect
  9629                           
  9630                           ;LED_B1.c: 83: if (command == 0) {
  9631  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  9632  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  9633  07B8  08DB               	movf	setLED@command,f
  9634  07B9  1D03               	skipz
  9635  07BA  2FC8               	goto	l6344
  9636                           
  9637                           ;LED_B1.c: 85: if (led == 1) {
  9638  07BB  085C               	movf	setLED@led,w
  9639  07BC  3A01               	xorlw	1
  9640  07BD  1D03               	skipz
  9641  07BE  2FC0               	goto	l6336
  9642                           
  9643                           ;LED_B1.c: 89: RC7 = 1;
  9644  07BF  1787               	bsf	7,7	;volatile
  9645  07C0                     l6336:	
  9646                           
  9647                           ;LED_B1.c: 91: }
  9648                           ;LED_B1.c: 94: if (led == 2) {
  9649  07C0  085C               	movf	setLED@led,w
  9650  07C1  3A02               	xorlw	2
  9651  07C2  1903               	btfsc	3,2
  9652                           
  9653                           ;LED_B1.c: 98: RC6 = 1;
  9654  07C3  1707               	bsf	7,6	;volatile
  9655                           
  9656                           ;LED_B1.c: 100: }
  9657                           ;LED_B1.c: 112: if (led == 99) {
  9658  07C4  085C               	movf	setLED@led,w
  9659  07C5  3A63               	xorlw	99
  9660  07C6  1903               	btfsc	3,2
  9661                           
  9662                           ;LED_B1.c: 116: RC1 = 1;
  9663  07C7  1487               	bsf	7,1	;volatile
  9664  07C8                     l6344:	
  9665                           
  9666                           ;LED_B1.c: 118: }
  9667                           ;LED_B1.c: 120: }
  9668                           ;LED_B1.c: 121: if (command == 1) {
  9669  07C8  085B               	movf	setLED@command,w
  9670  07C9  3A01               	xorlw	1
  9671  07CA  1D03               	skipz
  9672  07CB  2FD9               	goto	l6358
  9673                           
  9674                           ;LED_B1.c: 123: if (led == 1) {
  9675  07CC  085C               	movf	setLED@led,w
  9676  07CD  3A01               	xorlw	1
  9677  07CE  1D03               	skipz
  9678  07CF  2FD1               	goto	l6350
  9679                           
  9680                           ;LED_B1.c: 127: RC7 = 0;
  9681  07D0  1387               	bcf	7,7	;volatile
  9682  07D1                     l6350:	
  9683                           
  9684                           ;LED_B1.c: 129: }
  9685                           ;LED_B1.c: 132: if (led == 2) {
  9686  07D1  085C               	movf	setLED@led,w
  9687  07D2  3A02               	xorlw	2
  9688  07D3  1903               	btfsc	3,2
  9689                           
  9690                           ;LED_B1.c: 136: RC6 = 0;
  9691  07D4  1307               	bcf	7,6	;volatile
  9692                           
  9693                           ;LED_B1.c: 138: }
  9694                           ;LED_B1.c: 150: if (led == 99) {
  9695  07D5  085C               	movf	setLED@led,w
  9696  07D6  3A63               	xorlw	99
  9697  07D7  1903               	btfsc	3,2
  9698                           
  9699                           ;LED_B1.c: 154: RC1 = 0;
  9700  07D8  1087               	bcf	7,1	;volatile
  9701  07D9                     l6358:	
  9702                           
  9703                           ;LED_B1.c: 156: }
  9704                           ;LED_B1.c: 158: }
  9705                           ;LED_B1.c: 159: if (command == 10) {
  9706  07D9  085B               	movf	setLED@command,w
  9707  07DA  3A0A               	xorlw	10
  9708  07DB  1D03               	skipz
  9709  07DC  2FF4               	goto	l6376
  9710                           
  9711                           ;LED_B1.c: 160: LED->GO = 0;
  9712  07DD  0872               	movf	_LED,w
  9713  07DE  0084               	movwf	4
  9714  07DF  1383               	bcf	3,7	;select IRP bank0
  9715  07E0  1080               	bcf	0,1
  9716                           
  9717                           ;LED_B1.c: 161: LED->Time = 0;
  9718  07E1  0A72               	incf	_LED,w
  9719  07E2  0084               	movwf	4
  9720  07E3  0180               	clrf	0
  9721  07E4  0A84               	incf	4,f
  9722  07E5  0180               	clrf	0
  9723                           
  9724                           ;LED_B1.c: 163: if (led == 1) {
  9725  07E6  085C               	movf	setLED@led,w
  9726  07E7  3A01               	xorlw	1
  9727  07E8  1D03               	skipz
  9728  07E9  2FEC               	goto	l6368
  9729                           
  9730                           ;LED_B1.c: 167: RC7 = 1;
  9731  07EA  1787               	bsf	7,7	;volatile
  9732                           
  9733                           ;LED_B1.c: 169: }
  9734  07EB  2FF0               	goto	l6372
  9735  07EC                     l6368:	
  9736                           
  9737                           ;LED_B1.c: 172: else if (led == 2) {
  9738  07EC  085C               	movf	setLED@led,w
  9739  07ED  3A02               	xorlw	2
  9740  07EE  1903               	btfsc	3,2
  9741                           
  9742                           ;LED_B1.c: 176: RC6 = 1;
  9743  07EF  1707               	bsf	7,6	;volatile
  9744  07F0                     l6372:	
  9745                           
  9746                           ;LED_B1.c: 178: }
  9747                           ;LED_B1.c: 190: if (led == 99) {
  9748  07F0  085C               	movf	setLED@led,w
  9749  07F1  3A63               	xorlw	99
  9750  07F2  1903               	btfsc	3,2
  9751                           
  9752                           ;LED_B1.c: 194: RC1 = 1;
  9753  07F3  1487               	bsf	7,1	;volatile
  9754  07F4                     l6376:	
  9755                           
  9756                           ;LED_B1.c: 196: }
  9757                           ;LED_B1.c: 198: }
  9758                           ;LED_B1.c: 199: if (command == 11) {
  9759  07F4  085B               	movf	setLED@command,w
  9760  07F5  3A0B               	xorlw	11
  9761  07F6  1D03               	skipz
  9762  07F7  0008               	return
  9763                           
  9764                           ;LED_B1.c: 200: LED->GO = 1;
  9765  07F8  0872               	movf	_LED,w
  9766  07F9  0084               	movwf	4
  9767  07FA  1383               	bcf	3,7	;select IRP bank0
  9768  07FB  1480               	bsf	0,1
  9769  07FC  0008               	return
  9770  07FD                     __end_of_setLED:	
  9771                           
  9772                           	psect	text62
  9773  0A84                     __ptext62:	
  9774 ;; *************** function _LedPointSelect *****************
  9775 ;; Defined at:
  9776 ;;		line 7 in file "../src/LED_B1.c"
  9777 ;; Parameters:    Size  Location     Type
  9778 ;;  led             1    wreg     unsigned char 
  9779 ;; Auto vars:     Size  Location     Type
  9780 ;;  led             1    0[BANK0 ] unsigned char 
  9781 ;; Return value:  Size  Location     Type
  9782 ;;		None               void
  9783 ;; Registers used:
  9784 ;;		wreg
  9785 ;; Tracked objects:
  9786 ;;		On entry : 0/0
  9787 ;;		On exit  : 0/0
  9788 ;;		Unchanged: 0/0
  9789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9790 ;;      Params:         0       0       0       0
  9791 ;;      Locals:         0       1       0       0
  9792 ;;      Temps:          1       0       0       0
  9793 ;;      Totals:         1       1       0       0
  9794 ;;Total ram usage:        2 bytes
  9795 ;; Hardware stack levels used:    1
  9796 ;; Hardware stack levels required when called:    2
  9797 ;; This function calls:
  9798 ;;		Nothing
  9799 ;; This function is called by:
  9800 ;;		_setLED_Initialization
  9801 ;;		_setLED
  9802 ;;		_setLED_Main
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           
  9807                           ;psect for function _LedPointSelect
  9808  0A84                     _LedPointSelect:	
  9809                           
  9810                           ;incstack = 0
  9811                           ; Regs used in _LedPointSelect: [wreg]
  9812                           ;LedPointSelect@led stored from wreg
  9813  0A84  1283               	bcf	3,5	;RP0=0, select bank0
  9814  0A85  1303               	bcf	3,6	;RP1=0, select bank0
  9815  0A86  00DA               	movwf	LedPointSelect@led
  9816                           
  9817                           ;LED_B1.c: 9: if (led == 1) {
  9818  0A87  085A               	movf	LedPointSelect@led,w
  9819  0A88  3A01               	xorlw	1
  9820  0A89  1D03               	skipz
  9821  0A8A  2A8F               	goto	l349
  9822                           
  9823                           ;LED_B1.c: 10: LED = &VarLED1;
  9824  0A8B  3056               	movlw	_VarLED1& (0+255)
  9825  0A8C  00F9               	movwf	??_LedPointSelect
  9826  0A8D  0879               	movf	??_LedPointSelect,w
  9827  0A8E  00F2               	movwf	_LED
  9828  0A8F                     l349:	
  9829                           
  9830                           ;LED_B1.c: 11: }
  9831                           ;LED_B1.c: 14: if (led == 2) {
  9832  0A8F  085A               	movf	LedPointSelect@led,w
  9833  0A90  3A02               	xorlw	2
  9834  0A91  1D03               	skipz
  9835  0A92  2A97               	goto	l350
  9836                           
  9837                           ;LED_B1.c: 15: LED = &VarLED2;
  9838  0A93  30EB               	movlw	_VarLED2& (0+255)
  9839  0A94  00F9               	movwf	??_LedPointSelect
  9840  0A95  0879               	movf	??_LedPointSelect,w
  9841  0A96  00F2               	movwf	_LED
  9842  0A97                     l350:	
  9843                           
  9844                           ;LED_B1.c: 16: }
  9845                           ;LED_B1.c: 24: if (led == 99) {
  9846  0A97  085A               	movf	LedPointSelect@led,w
  9847  0A98  3A63               	xorlw	99
  9848  0A99  1D03               	skipz
  9849  0A9A  0008               	return
  9850                           
  9851                           ;LED_B1.c: 25: LED = &VarErrLED;
  9852  0A9B  3052               	movlw	_VarErrLED& (0+255)
  9853  0A9C  00F9               	movwf	??_LedPointSelect
  9854  0A9D  0879               	movf	??_LedPointSelect,w
  9855  0A9E  00F2               	movwf	_LED
  9856  0A9F  0008               	return
  9857  0AA0                     __end_of_LedPointSelect:	
  9858                           
  9859                           	psect	text63
  9860  0D6E                     __ptext63:	
  9861 ;; *************** function _setBuz *****************
  9862 ;; Defined at:
  9863 ;;		line 22 in file "../src/Buzzer_B1.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;  count           1    wreg     unsigned char 
  9866 ;;  time            2    8[BANK0 ] int 
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;  count           1   11[BANK0 ] unsigned char 
  9869 ;; Return value:  Size  Location     Type
  9870 ;;		None               void
  9871 ;; Registers used:
  9872 ;;		wreg, status,2, status,0, pclath, cstack
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9878 ;;      Params:         0       2       0       0
  9879 ;;      Locals:         0       1       0       0
  9880 ;;      Temps:          0       1       0       0
  9881 ;;      Totals:         0       4       0       0
  9882 ;;Total ram usage:        4 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; Hardware stack levels required when called:    3
  9885 ;; This function calls:
  9886 ;;		___awdiv
  9887 ;; This function is called by:
  9888 ;;		_my_MainTimer
  9889 ;;		_Exception_Main
  9890 ;;		_setTemp_Main
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894                           
  9895                           ;psect for function _setBuz
  9896  0D6E                     _setBuz:	
  9897                           
  9898                           ;incstack = 0
  9899                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
  9900                           ;setBuz@count stored from wreg
  9901  0D6E  1283               	bcf	3,5	;RP0=0, select bank0
  9902  0D6F  1303               	bcf	3,6	;RP1=0, select bank0
  9903  0D70  00E5               	movwf	setBuz@count
  9904                           
  9905                           ;Buzzer_B1.c: 23: time /= 20;
  9906  0D71  3014               	movlw	20
  9907  0D72  00DA               	movwf	___awdiv@divisor
  9908  0D73  3000               	movlw	0
  9909  0D74  00DB               	movwf	___awdiv@divisor+1
  9910  0D75  0863               	movf	setBuz@time+1,w
  9911  0D76  01DD               	clrf	___awdiv@dividend+1
  9912  0D77  07DD               	addwf	___awdiv@dividend+1,f
  9913  0D78  0862               	movf	setBuz@time,w
  9914  0D79  01DC               	clrf	___awdiv@dividend
  9915  0D7A  07DC               	addwf	___awdiv@dividend,f
  9916  0D7B  158A  2611  158A   	fcall	___awdiv
  9917  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  9918  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  9919  0D80  085B               	movf	?___awdiv+1,w
  9920  0D81  01E3               	clrf	setBuz@time+1
  9921  0D82  07E3               	addwf	setBuz@time+1,f
  9922  0D83  085A               	movf	?___awdiv,w
  9923  0D84  01E2               	clrf	setBuz@time
  9924  0D85  07E2               	addwf	setBuz@time,f
  9925                           
  9926                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
  9927  0D86  1C20               	btfss	_Buz1,0
  9928  0D87  0008               	return
  9929                           
  9930                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
  9931  0D88  18A0               	btfsc	_Buz1,1
  9932  0D89  2D99               	goto	l58
  9933                           
  9934                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
  9935  0D8A  14A0               	bsf	_Buz1,1
  9936                           
  9937                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
  9938  0D8B  01A1               	clrf	_Buz1+1
  9939  0D8C  01A2               	clrf	_Buz1+2
  9940                           
  9941                           ;Buzzer_B1.c: 28: Buz1.Count = count;
  9942  0D8D  0865               	movf	setBuz@count,w
  9943  0D8E  00E4               	movwf	??_setBuz
  9944  0D8F  0864               	movf	??_setBuz,w
  9945  0D90  00A3               	movwf	_Buz1+3
  9946                           
  9947                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
  9948  0D91  0863               	movf	setBuz@time+1,w
  9949  0D92  01A7               	clrf	_Buz1+7
  9950  0D93  07A7               	addwf	_Buz1+7,f
  9951  0D94  0862               	movf	setBuz@time,w
  9952  0D95  01A6               	clrf	_Buz1+6
  9953  0D96  07A6               	addwf	_Buz1+6,f
  9954                           
  9955                           ;Buzzer_B1.c: 30: RC0 = 1;
  9956  0D97  1407               	bsf	7,0	;volatile
  9957                           
  9958                           ;Buzzer_B1.c: 31: } else {
  9959  0D98  0008               	return
  9960  0D99                     l58:	
  9961                           
  9962                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
  9963  0D99  19A0               	btfsc	_Buz1,3
  9964  0D9A  2DA7               	goto	l60
  9965                           
  9966                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
  9967  0D9B  15A0               	bsf	_Buz1,3
  9968                           
  9969                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
  9970  0D9C  0865               	movf	setBuz@count,w
  9971  0D9D  00E4               	movwf	??_setBuz
  9972  0D9E  0864               	movf	??_setBuz,w
  9973  0D9F  00A4               	movwf	_Buz1+4
  9974                           
  9975                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
  9976  0DA0  0863               	movf	setBuz@time+1,w
  9977  0DA1  01A9               	clrf	_Buz1+9
  9978  0DA2  07A9               	addwf	_Buz1+9,f
  9979  0DA3  0862               	movf	setBuz@time,w
  9980  0DA4  01A8               	clrf	_Buz1+8
  9981  0DA5  07A8               	addwf	_Buz1+8,f
  9982                           
  9983                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
  9984  0DA6  0008               	return
  9985  0DA7                     l60:	
  9986  0DA7  1A20               	btfsc	_Buz1,4
  9987  0DA8  0008               	return
  9988                           
  9989                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
  9990  0DA9  1620               	bsf	_Buz1,4
  9991                           
  9992                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
  9993  0DAA  0865               	movf	setBuz@count,w
  9994  0DAB  00E4               	movwf	??_setBuz
  9995  0DAC  0864               	movf	??_setBuz,w
  9996  0DAD  00A5               	movwf	_Buz1+5
  9997                           
  9998                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
  9999  0DAE  0863               	movf	setBuz@time+1,w
 10000  0DAF  01AB               	clrf	_Buz1+11
 10001  0DB0  07AB               	addwf	_Buz1+11,f
 10002  0DB1  0862               	movf	setBuz@time,w
 10003  0DB2  01AA               	clrf	_Buz1+10
 10004  0DB3  07AA               	addwf	_Buz1+10,f
 10005  0DB4  0008               	return
 10006  0DB5                     __end_of_setBuz:	
 10007                           
 10008                           	psect	text64
 10009  0E11                     __ptext64:	
 10010 ;; *************** function ___awdiv *****************
 10011 ;; Defined at:
 10012 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 10013 ;; Parameters:    Size  Location     Type
 10014 ;;  divisor         2    0[BANK0 ] int 
 10015 ;;  dividend        2    2[BANK0 ] int 
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;  quotient        2    6[BANK0 ] int 
 10018 ;;  sign            1    5[BANK0 ] unsigned char 
 10019 ;;  counter         1    4[BANK0 ] unsigned char 
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  2    0[BANK0 ] int 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2, status,0
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10029 ;;      Params:         0       4       0       0
 10030 ;;      Locals:         0       4       0       0
 10031 ;;      Temps:          1       0       0       0
 10032 ;;      Totals:         1       8       0       0
 10033 ;;Total ram usage:        9 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    2
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_setBuz
 10040 ;;		_setTemp_Main
 10041 ;;		_getPIR_AD
 10042 ;;		_Lights_Control
 10043 ;; This function uses a non-reentrant model
 10044 ;;
 10045                           
 10046                           
 10047                           ;psect for function ___awdiv
 10048  0E11                     ___awdiv:	
 10049                           
 10050                           ;incstack = 0
 10051                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10052  0E11  1283               	bcf	3,5	;RP0=0, select bank0
 10053  0E12  1303               	bcf	3,6	;RP1=0, select bank0
 10054  0E13  01DF               	clrf	___awdiv@sign
 10055  0E14  1FDB               	btfss	___awdiv@divisor+1,7
 10056  0E15  2E1D               	goto	l5198
 10057  0E16  09DA               	comf	___awdiv@divisor,f
 10058  0E17  09DB               	comf	___awdiv@divisor+1,f
 10059  0E18  0ADA               	incf	___awdiv@divisor,f
 10060  0E19  1903               	skipnz
 10061  0E1A  0ADB               	incf	___awdiv@divisor+1,f
 10062  0E1B  01DF               	clrf	___awdiv@sign
 10063  0E1C  0ADF               	incf	___awdiv@sign,f
 10064  0E1D                     l5198:	
 10065  0E1D  1FDD               	btfss	___awdiv@dividend+1,7
 10066  0E1E  2E28               	goto	l5204
 10067  0E1F  09DC               	comf	___awdiv@dividend,f
 10068  0E20  09DD               	comf	___awdiv@dividend+1,f
 10069  0E21  0ADC               	incf	___awdiv@dividend,f
 10070  0E22  1903               	skipnz
 10071  0E23  0ADD               	incf	___awdiv@dividend+1,f
 10072  0E24  3001               	movlw	1
 10073  0E25  00F9               	movwf	??___awdiv
 10074  0E26  0879               	movf	??___awdiv,w
 10075  0E27  06DF               	xorwf	___awdiv@sign,f
 10076  0E28                     l5204:	
 10077  0E28  01E0               	clrf	___awdiv@quotient
 10078  0E29  01E1               	clrf	___awdiv@quotient+1
 10079  0E2A  085B               	movf	___awdiv@divisor+1,w
 10080  0E2B  045A               	iorwf	___awdiv@divisor,w
 10081  0E2C  1903               	skipnz
 10082  0E2D  2E5F               	goto	l5226
 10083  0E2E  01DE               	clrf	___awdiv@counter
 10084  0E2F  0ADE               	incf	___awdiv@counter,f
 10085  0E30                     l5214:	
 10086  0E30  1BDB               	btfsc	___awdiv@divisor+1,7
 10087  0E31  2E3E               	goto	l5216
 10088  0E32  3001               	movlw	1
 10089  0E33                     u5925:	
 10090  0E33  1003               	clrc
 10091  0E34  0DDA               	rlf	___awdiv@divisor,f
 10092  0E35  0DDB               	rlf	___awdiv@divisor+1,f
 10093  0E36  3EFF               	addlw	-1
 10094  0E37  1D03               	skipz
 10095  0E38  2E33               	goto	u5925
 10096  0E39  3001               	movlw	1
 10097  0E3A  00F9               	movwf	??___awdiv
 10098  0E3B  0879               	movf	??___awdiv,w
 10099  0E3C  07DE               	addwf	___awdiv@counter,f
 10100  0E3D  2E30               	goto	l5214
 10101  0E3E                     l5216:	
 10102  0E3E  3001               	movlw	1
 10103  0E3F                     u5945:	
 10104  0E3F  1003               	clrc
 10105  0E40  0DE0               	rlf	___awdiv@quotient,f
 10106  0E41  0DE1               	rlf	___awdiv@quotient+1,f
 10107  0E42  3EFF               	addlw	-1
 10108  0E43  1D03               	skipz
 10109  0E44  2E3F               	goto	u5945
 10110  0E45  085B               	movf	___awdiv@divisor+1,w
 10111  0E46  025D               	subwf	___awdiv@dividend+1,w
 10112  0E47  1D03               	skipz
 10113  0E48  2E4B               	goto	u5955
 10114  0E49  085A               	movf	___awdiv@divisor,w
 10115  0E4A  025C               	subwf	___awdiv@dividend,w
 10116  0E4B                     u5955:	
 10117  0E4B  1C03               	skipc
 10118  0E4C  2E54               	goto	l5222
 10119  0E4D  085A               	movf	___awdiv@divisor,w
 10120  0E4E  02DC               	subwf	___awdiv@dividend,f
 10121  0E4F  085B               	movf	___awdiv@divisor+1,w
 10122  0E50  1C03               	skipc
 10123  0E51  03DD               	decf	___awdiv@dividend+1,f
 10124  0E52  02DD               	subwf	___awdiv@dividend+1,f
 10125  0E53  1460               	bsf	___awdiv@quotient,0
 10126  0E54                     l5222:	
 10127  0E54  3001               	movlw	1
 10128  0E55                     u5965:	
 10129  0E55  1003               	clrc
 10130  0E56  0CDB               	rrf	___awdiv@divisor+1,f
 10131  0E57  0CDA               	rrf	___awdiv@divisor,f
 10132  0E58  3EFF               	addlw	-1
 10133  0E59  1D03               	skipz
 10134  0E5A  2E55               	goto	u5965
 10135  0E5B  3001               	movlw	1
 10136  0E5C  02DE               	subwf	___awdiv@counter,f
 10137  0E5D  1D03               	btfss	3,2
 10138  0E5E  2E3E               	goto	l5216
 10139  0E5F                     l5226:	
 10140  0E5F  085F               	movf	___awdiv@sign,w
 10141  0E60  1903               	btfsc	3,2
 10142  0E61  2E67               	goto	l5230
 10143  0E62  09E0               	comf	___awdiv@quotient,f
 10144  0E63  09E1               	comf	___awdiv@quotient+1,f
 10145  0E64  0AE0               	incf	___awdiv@quotient,f
 10146  0E65  1903               	skipnz
 10147  0E66  0AE1               	incf	___awdiv@quotient+1,f
 10148  0E67                     l5230:	
 10149  0E67  0861               	movf	___awdiv@quotient+1,w
 10150  0E68  01DB               	clrf	?___awdiv+1
 10151  0E69  07DB               	addwf	?___awdiv+1,f
 10152  0E6A  0860               	movf	___awdiv@quotient,w
 10153  0E6B  01DA               	clrf	?___awdiv
 10154  0E6C  07DA               	addwf	?___awdiv,f
 10155  0E6D  0008               	return
 10156  0E6E                     __end_of___awdiv:	
 10157                           
 10158                           	psect	text65
 10159  0931                     __ptext65:	
 10160 ;; *************** function _getMain_All_LightsStatus *****************
 10161 ;; Defined at:
 10162 ;;		line 373 in file "../src/Main_B1.c"
 10163 ;; Parameters:    Size  Location     Type
 10164 ;;		None
 10165 ;; Auto vars:     Size  Location     Type
 10166 ;;  status          1    4[COMMON] unsigned char 
 10167 ;; Return value:  Size  Location     Type
 10168 ;;                  1    wreg      unsigned char 
 10169 ;; Registers used:
 10170 ;;		wreg, status,2, status,0
 10171 ;; Tracked objects:
 10172 ;;		On entry : 0/0
 10173 ;;		On exit  : 0/0
 10174 ;;		Unchanged: 0/0
 10175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10176 ;;      Params:         0       0       0       0
 10177 ;;      Locals:         1       0       0       0
 10178 ;;      Temps:          0       0       0       0
 10179 ;;      Totals:         1       0       0       0
 10180 ;;Total ram usage:        1 bytes
 10181 ;; Hardware stack levels used:    1
 10182 ;; Hardware stack levels required when called:    2
 10183 ;; This function calls:
 10184 ;;		Nothing
 10185 ;; This function is called by:
 10186 ;;		_Exception_Main
 10187 ;;		_Load_Main
 10188 ;;		_setTemp_Main
 10189 ;;		_Lights_Main
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           
 10194                           ;psect for function _getMain_All_LightsStatus
 10195  0931                     _getMain_All_LightsStatus:	
 10196                           
 10197                           ;Main_B1.c: 374: char status = 0;
 10198                           
 10199                           ;incstack = 0
 10200                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 10201  0931  01F9               	clrf	getMain_All_LightsStatus@status
 10202                           
 10203                           ;Main_B1.c: 387: status = Lights1.Status == 1 ? 1 : 0;
 10204  0932  3000               	movlw	0
 10205  0933  1283               	bcf	3,5	;RP0=0, select bank0
 10206  0934  1303               	bcf	3,6	;RP1=0, select bank0
 10207  0935  1948               	btfsc	_Lights1,2
 10208  0936  3001               	movlw	1
 10209  0937  00F9               	movwf	getMain_All_LightsStatus@status
 10210                           
 10211                           ;Main_B1.c: 388: if (status == 0) {
 10212  0938  08F9               	movf	getMain_All_LightsStatus@status,f
 10213  0939  1D03               	skipz
 10214  093A  293F               	goto	l3788
 10215                           
 10216                           ;Main_B1.c: 389: status = Lights2.Status == 1 ? 1 : 0;
 10217  093B  3000               	movlw	0
 10218  093C  194D               	btfsc	_Lights2,2
 10219  093D  3001               	movlw	1
 10220  093E  00F9               	movwf	getMain_All_LightsStatus@status
 10221  093F                     l3788:	
 10222                           
 10223                           ;Main_B1.c: 390: }
 10224                           ;Main_B1.c: 420: return status;
 10225  093F  0879               	movf	getMain_All_LightsStatus@status,w
 10226  0940  0008               	return
 10227  0941                     __end_of_getMain_All_LightsStatus:	
 10228                           
 10229                           	psect	text66
 10230  0C2C                     __ptext66:	
 10231 ;; *************** function _getMain_All_Error_Status *****************
 10232 ;; Defined at:
 10233 ;;		line 424 in file "../src/Main_B1.c"
 10234 ;; Parameters:    Size  Location     Type
 10235 ;;  command         1    wreg     unsigned char 
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;  command         1    4[BANK0 ] unsigned char 
 10238 ;;  status          1    5[BANK0 ] unsigned char 
 10239 ;; Return value:  Size  Location     Type
 10240 ;;                  1    wreg      unsigned char 
 10241 ;; Registers used:
 10242 ;;		wreg, status,2, status,0
 10243 ;; Tracked objects:
 10244 ;;		On entry : 0/0
 10245 ;;		On exit  : 0/0
 10246 ;;		Unchanged: 0/0
 10247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10248 ;;      Params:         0       0       0       0
 10249 ;;      Locals:         0       6       0       0
 10250 ;;      Temps:          1       0       0       0
 10251 ;;      Totals:         1       6       0       0
 10252 ;;Total ram usage:        7 bytes
 10253 ;; Hardware stack levels used:    1
 10254 ;; Hardware stack levels required when called:    2
 10255 ;; This function calls:
 10256 ;;		Nothing
 10257 ;; This function is called by:
 10258 ;;		_Exception_Main
 10259 ;;		_Load_Main
 10260 ;;		_setTemp_Main
 10261 ;;		_PIR_Main
 10262 ;;		_setSYSC_Main
 10263 ;;		_setSw_Main
 10264 ;;		_Lights_Main
 10265 ;; This function uses a non-reentrant model
 10266 ;;
 10267                           
 10268                           
 10269                           ;psect for function _getMain_All_Error_Status
 10270  0C2C                     _getMain_All_Error_Status:	
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 10274                           ;getMain_All_Error_Status@command stored from wreg
 10275  0C2C  1283               	bcf	3,5	;RP0=0, select bank0
 10276  0C2D  1303               	bcf	3,6	;RP1=0, select bank0
 10277  0C2E  00DE               	movwf	getMain_All_Error_Status@command
 10278                           
 10279                           ;Main_B1.c: 425: char status = 0;
 10280  0C2F  01DF               	clrf	getMain_All_Error_Status@status
 10281                           
 10282                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
 10283  0C30  08DF               	movf	getMain_All_Error_Status@status,f
 10284  0C31  1D03               	skipz
 10285  0C32  2C3B               	goto	l3800
 10286  0C33  085E               	movf	getMain_All_Error_Status@command,w
 10287  0C34  3A01               	xorlw	1
 10288  0C35  1903               	skipnz
 10289  0C36  2C3B               	goto	l3800
 10290                           
 10291                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
 10292  0C37  3000               	movlw	0
 10293  0C38  18AC               	btfsc	_SYSC,1
 10294  0C39  3001               	movlw	1
 10295  0C3A  00DF               	movwf	getMain_All_Error_Status@status
 10296  0C3B                     l3800:	
 10297                           
 10298                           ;Main_B1.c: 430: }
 10299                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 10300  0C3B  08DF               	movf	getMain_All_Error_Status@status,f
 10301  0C3C  1D03               	skipz
 10302  0C3D  2C4F               	goto	l3810
 10303  0C3E  085E               	movf	getMain_All_Error_Status@command,w
 10304  0C3F  3A02               	xorlw	2
 10305  0C40  1903               	skipnz
 10306  0C41  2C4F               	goto	l3810
 10307                           
 10308                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 10309  0C42  18C2               	btfsc	_Temp,1
 10310  0C43  2C47               	goto	l3808
 10311  0C44  01DA               	clrf	_getMain_All_Error_Status$2412
 10312  0C45  01DB               	clrf	_getMain_All_Error_Status$2412+1
 10313  0C46  2C4B               	goto	l718
 10314  0C47                     l3808:	
 10315  0C47  3002               	movlw	2
 10316  0C48  00DA               	movwf	_getMain_All_Error_Status$2412
 10317  0C49  3000               	movlw	0
 10318  0C4A  00DB               	movwf	_getMain_All_Error_Status$2412+1
 10319  0C4B                     l718:	
 10320  0C4B  085A               	movf	_getMain_All_Error_Status$2412,w
 10321  0C4C  00F9               	movwf	??_getMain_All_Error_Status
 10322  0C4D  0879               	movf	??_getMain_All_Error_Status,w
 10323  0C4E  00DF               	movwf	getMain_All_Error_Status@status
 10324  0C4F                     l3810:	
 10325                           
 10326                           ;Main_B1.c: 438: }
 10327                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 10328  0C4F  08DF               	movf	getMain_All_Error_Status@status,f
 10329  0C50  1D03               	skipz
 10330  0C51  2C68               	goto	l719
 10331  0C52  085E               	movf	getMain_All_Error_Status@command,w
 10332  0C53  3A03               	xorlw	3
 10333  0C54  1903               	skipnz
 10334  0C55  2C68               	goto	l719
 10335                           
 10336                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 10337  0C56  1683               	bsf	3,5	;RP0=1, select bank1
 10338  0C57  1303               	bcf	3,6	;RP1=0, select bank1
 10339  0C58  1ACA               	btfsc	_Load^(0+128),5
 10340  0C59  2C5F               	goto	l3818
 10341  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
 10342  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
 10343  0C5C  01DC               	clrf	_getMain_All_Error_Status$2413
 10344  0C5D  01DD               	clrf	_getMain_All_Error_Status$2413+1
 10345  0C5E  2C64               	goto	l723
 10346  0C5F                     l3818:	
 10347  0C5F  3003               	movlw	3
 10348  0C60  1283               	bcf	3,5	;RP0=0, select bank0
 10349  0C61  00DC               	movwf	_getMain_All_Error_Status$2413
 10350  0C62  3000               	movlw	0
 10351  0C63  00DD               	movwf	_getMain_All_Error_Status$2413+1
 10352  0C64                     l723:	
 10353  0C64  085C               	movf	_getMain_All_Error_Status$2413,w
 10354  0C65  00F9               	movwf	??_getMain_All_Error_Status
 10355  0C66  0879               	movf	??_getMain_All_Error_Status,w
 10356  0C67  00DF               	movwf	getMain_All_Error_Status@status
 10357  0C68                     l719:	
 10358                           
 10359                           ;Main_B1.c: 445: }
 10360                           ;Main_B1.c: 455: return status;
 10361  0C68  085F               	movf	getMain_All_Error_Status@status,w
 10362  0C69  0008               	return
 10363  0C6A                     __end_of_getMain_All_Error_Status:	
 10364                           
 10365                           	psect	text67
 10366  0921                     __ptext67:	
 10367 ;; *************** function _getAll_Lights_Line *****************
 10368 ;; Defined at:
 10369 ;;		line 310 in file "../src/TriacRelay_B1.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;		None
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;  line            1    0[BANK0 ] unsigned char 
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  1    wreg      unsigned char 
 10376 ;; Registers used:
 10377 ;;		wreg, status,2
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10383 ;;      Params:         0       0       0       0
 10384 ;;      Locals:         0       1       0       0
 10385 ;;      Temps:          1       0       0       0
 10386 ;;      Totals:         1       1       0       0
 10387 ;;Total ram usage:        2 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; Hardware stack levels required when called:    2
 10390 ;; This function calls:
 10391 ;;		Nothing
 10392 ;; This function is called by:
 10393 ;;		_Exception_Main
 10394 ;;		_setMain_Exception
 10395 ;; This function uses a non-reentrant model
 10396 ;;
 10397                           
 10398                           
 10399                           ;psect for function _getAll_Lights_Line
 10400  0921                     _getAll_Lights_Line:	
 10401                           
 10402                           ;TriacRelay_B1.c: 311: char line = 0;
 10403                           
 10404                           ;incstack = 0
 10405                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
 10406  0921  1283               	bcf	3,5	;RP0=0, select bank0
 10407  0922  1303               	bcf	3,6	;RP1=0, select bank0
 10408  0923  01DA               	clrf	getAll_Lights_Line@line
 10409                           
 10410                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
 10411  0924  1C49               	btfss	_Lights1+1,0
 10412  0925  2929               	goto	l1609
 10413                           
 10414                           ;TriacRelay_B1.c: 314: line = 1;
 10415  0926  01DA               	clrf	getAll_Lights_Line@line
 10416  0927  0ADA               	incf	getAll_Lights_Line@line,f
 10417                           
 10418                           ;TriacRelay_B1.c: 315: }
 10419  0928  292F               	goto	l1610
 10420  0929                     l1609:	
 10421                           
 10422                           ;TriacRelay_B1.c: 318: else if (Lights2.Line == 1) {
 10423  0929  1C4E               	btfss	_Lights2+1,0
 10424  092A  292F               	goto	l1610
 10425                           
 10426                           ;TriacRelay_B1.c: 319: line = 2;
 10427  092B  3002               	movlw	2
 10428  092C  00F9               	movwf	??_getAll_Lights_Line
 10429  092D  0879               	movf	??_getAll_Lights_Line,w
 10430  092E  00DA               	movwf	getAll_Lights_Line@line
 10431  092F                     l1610:	
 10432                           
 10433                           ;TriacRelay_B1.c: 320: }
 10434                           ;TriacRelay_B1.c: 327: return line;
 10435  092F  085A               	movf	getAll_Lights_Line@line,w
 10436  0930  0008               	return
 10437  0931                     __end_of_getAll_Lights_Line:	
 10438                           
 10439                           	psect	text68
 10440  08D9                     __ptext68:	
 10441 ;; *************** function _DetectSYSC_Signal *****************
 10442 ;; Defined at:
 10443 ;;		line 50 in file "../src/SYSC_B1.c"
 10444 ;; Parameters:    Size  Location     Type
 10445 ;;		None
 10446 ;; Auto vars:     Size  Location     Type
 10447 ;;		None
 10448 ;; Return value:  Size  Location     Type
 10449 ;;		None               void
 10450 ;; Registers used:
 10451 ;;		status,2
 10452 ;; Tracked objects:
 10453 ;;		On entry : 0/0
 10454 ;;		On exit  : 0/0
 10455 ;;		Unchanged: 0/0
 10456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10457 ;;      Params:         0       0       0       0
 10458 ;;      Locals:         0       0       0       0
 10459 ;;      Temps:          0       0       0       0
 10460 ;;      Totals:         0       0       0       0
 10461 ;;Total ram usage:        0 bytes
 10462 ;; Hardware stack levels used:    1
 10463 ;; Hardware stack levels required when called:    2
 10464 ;; This function calls:
 10465 ;;		Nothing
 10466 ;; This function is called by:
 10467 ;;		_main
 10468 ;; This function uses a non-reentrant model
 10469 ;;
 10470                           
 10471                           
 10472                           ;psect for function _DetectSYSC_Signal
 10473  08D9                     _DetectSYSC_Signal:	
 10474                           
 10475                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
 10476                           
 10477                           ;incstack = 0
 10478                           ; Regs used in _DetectSYSC_Signal: [status,2]
 10479  08D9  1283               	bcf	3,5	;RP0=0, select bank0
 10480  08DA  1303               	bcf	3,6	;RP1=0, select bank0
 10481  08DB  19AC               	btfsc	_SYSC,3
 10482  08DC  28E3               	goto	l1296
 10483                           
 10484                           ;SYSC_B1.c: 52: if (RB2 == 1) {
 10485  08DD  1D06               	btfss	6,2	;volatile
 10486  08DE  0008               	return
 10487                           
 10488                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
 10489  08DF  15AC               	bsf	_SYSC,3
 10490                           
 10491                           ;SYSC_B1.c: 54: SYSC.Timer = 0;
 10492  08E0  01AD               	clrf	_SYSC+1
 10493  08E1  01AE               	clrf	_SYSC+2
 10494                           
 10495                           ;SYSC_B1.c: 55: }
 10496                           ;SYSC_B1.c: 56: } else {
 10497  08E2  0008               	return
 10498  08E3                     l1296:	
 10499                           
 10500                           ;SYSC_B1.c: 57: if (RB2 == 0) {
 10501  08E3  1906               	btfsc	6,2	;volatile
 10502  08E4  0008               	return
 10503                           
 10504                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
 10505  08E5  11AC               	bcf	_SYSC,3
 10506  08E6  0008               	return
 10507  08E7                     __end_of_DetectSYSC_Signal:	
 10508                           
 10509                           	psect	text69
 10510  0B89                     __ptext69:	
 10511 ;; *************** function _CDS_Main *****************
 10512 ;; Defined at:
 10513 ;;		line 11 in file "../src/CDS_B1.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;		None
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;		None
 10518 ;; Return value:  Size  Location     Type
 10519 ;;		None               void
 10520 ;; Registers used:
 10521 ;;		wreg, status,2, status,0
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10527 ;;      Params:         0       0       0       0
 10528 ;;      Locals:         0       0       0       0
 10529 ;;      Temps:          0       3       0       0
 10530 ;;      Totals:         0       3       0       0
 10531 ;;Total ram usage:        3 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    2
 10534 ;; This function calls:
 10535 ;;		Nothing
 10536 ;; This function is called by:
 10537 ;;		_main
 10538 ;; This function uses a non-reentrant model
 10539 ;;
 10540                           
 10541                           
 10542                           ;psect for function _CDS_Main
 10543  0B89                     _CDS_Main:	
 10544                           
 10545                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
 10546                           
 10547                           ;incstack = 0
 10548                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
 10549  0B89  1283               	bcf	3,5	;RP0=0, select bank0
 10550  0B8A  1303               	bcf	3,6	;RP1=0, select bank0
 10551  0B8B  1C36               	btfss	__CDS,0
 10552  0B8C  0008               	return
 10553                           
 10554                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
 10555  0B8D  18B6               	btfsc	__CDS,1
 10556  0B8E  2B9C               	goto	l180
 10557                           
 10558                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
 10559  0B8F  19B6               	btfsc	__CDS,3
 10560  0B90  0008               	return
 10561                           
 10562                           ;CDS_B1.c: 16: _CDS.Time++;
 10563  0B91  3001               	movlw	1
 10564  0B92  00DA               	movwf	??_CDS_Main
 10565  0B93  085A               	movf	??_CDS_Main,w
 10566  0B94  07B7               	addwf	__CDS+1,f
 10567                           
 10568                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
 10569  0B95  3005               	movlw	5
 10570  0B96  0237               	subwf	__CDS+1,w
 10571  0B97  1C03               	skipc
 10572  0B98  0008               	return
 10573                           
 10574                           ;CDS_B1.c: 18: {
 10575                           ;CDS_B1.c: 19: _CDS.Time = 0;
 10576  0B99  01B7               	clrf	__CDS+1
 10577                           
 10578                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
 10579  0B9A  15B6               	bsf	__CDS,3
 10580                           
 10581                           ;CDS_B1.c: 21: }
 10582                           ;CDS_B1.c: 22: }
 10583                           ;CDS_B1.c: 23: } else {
 10584  0B9B  0008               	return
 10585  0B9C                     l180:	
 10586                           
 10587                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
 10588  0B9C  1CB6               	btfss	__CDS,1
 10589  0B9D  0008               	return
 10590                           
 10591                           ;CDS_B1.c: 25: _CDS.GO = 0;
 10592  0B9E  10B6               	bcf	__CDS,1
 10593                           
 10594                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
 10595  0B9F  1A36               	btfsc	__CDS,4
 10596  0BA0  2BA7               	goto	l5656
 10597                           
 10598                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
 10599  0BA1  0838               	movf	__CDS+2,w
 10600  0BA2  0239               	subwf	__CDS+3,w
 10601  0BA3  1C03               	skipc
 10602  0BA4  0008               	return
 10603                           
 10604                           ;CDS_B1.c: 28: _CDS.Status = 1;
 10605  0BA5  1636               	bsf	__CDS,4
 10606                           
 10607                           ;CDS_B1.c: 29: }
 10608                           ;CDS_B1.c: 30: } else {
 10609  0BA6  0008               	return
 10610  0BA7                     l5656:	
 10611                           
 10612                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
 10613  0BA7  0838               	movf	__CDS+2,w
 10614  0BA8  3E9C               	addlw	156
 10615  0BA9  00DA               	movwf	??_CDS_Main
 10616  0BAA  30FF               	movlw	255
 10617  0BAB  1803               	skipnc
 10618  0BAC  3000               	movlw	0
 10619  0BAD  00DB               	movwf	??_CDS_Main+1
 10620  0BAE  085B               	movf	??_CDS_Main+1,w
 10621  0BAF  3A80               	xorlw	128
 10622  0BB0  00DC               	movwf	??_CDS_Main+2
 10623  0BB1  3080               	movlw	128
 10624  0BB2  025C               	subwf	??_CDS_Main+2,w
 10625  0BB3  1D03               	skipz
 10626  0BB4  2BB7               	goto	u6905
 10627  0BB5  0839               	movf	__CDS+3,w
 10628  0BB6  025A               	subwf	??_CDS_Main,w
 10629  0BB7                     u6905:	
 10630  0BB7  1C03               	skipc
 10631  0BB8  0008               	return
 10632                           
 10633                           ;CDS_B1.c: 32: _CDS.Status = 0;
 10634  0BB9  1283               	bcf	3,5	;RP0=0, select bank0
 10635  0BBA  1303               	bcf	3,6	;RP1=0, select bank0
 10636  0BBB  1236               	bcf	__CDS,4
 10637  0BBC  0008               	return
 10638  0BBD                     __end_of_CDS_Main:	
 10639                           
 10640                           	psect	text70
 10641  085E                     __ptext70:	
 10642 ;; *************** function _CDS_Initialization *****************
 10643 ;; Defined at:
 10644 ;;		line 7 in file "../src/CDS_B1.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;		None               void
 10651 ;; Registers used:
 10652 ;;		None
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10658 ;;      Params:         0       0       0       0
 10659 ;;      Locals:         0       0       0       0
 10660 ;;      Temps:          0       0       0       0
 10661 ;;      Totals:         0       0       0       0
 10662 ;;Total ram usage:        0 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    2
 10665 ;; This function calls:
 10666 ;;		Nothing
 10667 ;; This function is called by:
 10668 ;;		_main
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           
 10673                           ;psect for function _CDS_Initialization
 10674  085E                     _CDS_Initialization:	
 10675                           
 10676                           ;CDS_B1.c: 8: _CDS.Enable = 1;
 10677                           
 10678                           ;incstack = 0
 10679                           ; Regs used in _CDS_Initialization: []
 10680  085E  1283               	bcf	3,5	;RP0=0, select bank0
 10681  085F  1303               	bcf	3,6	;RP1=0, select bank0
 10682  0860  1436               	bsf	__CDS,0
 10683  0861  0008               	return
 10684  0862                     __end_of_CDS_Initialization:	
 10685                           
 10686                           	psect	text71
 10687  0D2A                     __ptext71:	
 10688 ;; *************** function _Buzzer_Main *****************
 10689 ;; Defined at:
 10690 ;;		line 46 in file "../src/Buzzer_B1.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;		None
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;		None
 10695 ;; Return value:  Size  Location     Type
 10696 ;;		None               void
 10697 ;; Registers used:
 10698 ;;		wreg, status,2, status,0
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10704 ;;      Params:         0       0       0       0
 10705 ;;      Locals:         0       0       0       0
 10706 ;;      Temps:          1       0       0       0
 10707 ;;      Totals:         1       0       0       0
 10708 ;;Total ram usage:        1 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:    2
 10711 ;; This function calls:
 10712 ;;		Nothing
 10713 ;; This function is called by:
 10714 ;;		_main
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           
 10719                           ;psect for function _Buzzer_Main
 10720  0D2A                     _Buzzer_Main:	
 10721                           
 10722                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 10723                           
 10724                           ;incstack = 0
 10725                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 10726  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
 10727  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
 10728  0D2C  1CA0               	btfss	_Buz1,1
 10729  0D2D  0008               	return
 10730                           
 10731                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 10732  0D2E  3001               	movlw	1
 10733  0D2F  07A1               	addwf	_Buz1+1,f
 10734  0D30  1803               	skipnc
 10735  0D31  0AA2               	incf	_Buz1+2,f
 10736  0D32  3000               	movlw	0
 10737  0D33  07A2               	addwf	_Buz1+2,f
 10738                           
 10739                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 10740  0D34  0827               	movf	_Buz1+7,w
 10741  0D35  0222               	subwf	_Buz1+2,w
 10742  0D36  1D03               	skipz
 10743  0D37  2D3A               	goto	u4265
 10744  0D38  0826               	movf	_Buz1+6,w
 10745  0D39  0221               	subwf	_Buz1+1,w
 10746  0D3A                     u4265:	
 10747  0D3A  1C03               	skipc
 10748  0D3B  0008               	return
 10749                           
 10750                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 10751  0D3C  01A1               	clrf	_Buz1+1
 10752  0D3D  01A2               	clrf	_Buz1+2
 10753                           
 10754                           ;Buzzer_B1.c: 51: Buz1.Switch = (RC0 == 1) ? 1 : 0;
 10755  0D3E  12A0               	bcf	_Buz1,5
 10756  0D3F  1807               	btfsc	7,0	;volatile
 10757  0D40  16A0               	bsf	_Buz1,5
 10758                           
 10759                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 10760  0D41  1283               	bcf	3,5	;RP0=0, select bank0
 10761  0D42  1303               	bcf	3,6	;RP1=0, select bank0
 10762  0D43  1AA0               	btfsc	_Buz1,5
 10763  0D44  2D69               	goto	l68
 10764                           
 10765                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 10766  0D45  08A3               	movf	_Buz1+3,f
 10767  0D46  1D03               	skipz
 10768  0D47  2D66               	goto	l69
 10769                           
 10770                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 10771  0D48  1DA0               	btfss	_Buz1,3
 10772  0D49  2D56               	goto	l70
 10773                           
 10774                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 10775  0D4A  11A0               	bcf	_Buz1,3
 10776                           
 10777                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 10778  0D4B  0824               	movf	_Buz1+4,w
 10779  0D4C  00F9               	movwf	??_Buzzer_Main
 10780  0D4D  0879               	movf	??_Buzzer_Main,w
 10781  0D4E  00A3               	movwf	_Buz1+3
 10782                           
 10783                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 10784  0D4F  0829               	movf	_Buz1+9,w
 10785  0D50  01A7               	clrf	_Buz1+7
 10786  0D51  07A7               	addwf	_Buz1+7,f
 10787  0D52  0828               	movf	_Buz1+8,w
 10788  0D53  01A6               	clrf	_Buz1+6
 10789  0D54  07A6               	addwf	_Buz1+6,f
 10790                           
 10791                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 10792  0D55  0008               	return
 10793  0D56                     l70:	
 10794  0D56  1E20               	btfss	_Buz1,4
 10795  0D57  2D64               	goto	l72
 10796                           
 10797                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 10798  0D58  1220               	bcf	_Buz1,4
 10799                           
 10800                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 10801  0D59  0825               	movf	_Buz1+5,w
 10802  0D5A  00F9               	movwf	??_Buzzer_Main
 10803  0D5B  0879               	movf	??_Buzzer_Main,w
 10804  0D5C  00A3               	movwf	_Buz1+3
 10805                           
 10806                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 10807  0D5D  082B               	movf	_Buz1+11,w
 10808  0D5E  01A7               	clrf	_Buz1+7
 10809  0D5F  07A7               	addwf	_Buz1+7,f
 10810  0D60  082A               	movf	_Buz1+10,w
 10811  0D61  01A6               	clrf	_Buz1+6
 10812  0D62  07A6               	addwf	_Buz1+6,f
 10813                           
 10814                           ;Buzzer_B1.c: 62: } else {
 10815  0D63  0008               	return
 10816  0D64                     l72:	
 10817                           
 10818                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 10819  0D64  10A0               	bcf	_Buz1,1
 10820                           
 10821                           ;Buzzer_B1.c: 64: }
 10822                           ;Buzzer_B1.c: 65: } else {
 10823  0D65  0008               	return
 10824  0D66                     l69:	
 10825                           
 10826                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 10827  0D66  16A0               	bsf	_Buz1,5
 10828                           
 10829                           ;Buzzer_B1.c: 68: RC0 = 1;
 10830  0D67  1407               	bsf	7,0	;volatile
 10831                           
 10832                           ;Buzzer_B1.c: 69: }
 10833                           ;Buzzer_B1.c: 70: } else {
 10834  0D68  0008               	return
 10835  0D69                     l68:	
 10836                           
 10837                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 10838  0D69  12A0               	bcf	_Buz1,5
 10839                           
 10840                           ;Buzzer_B1.c: 73: RC0 = 0;
 10841  0D6A  1007               	bcf	7,0	;volatile
 10842                           
 10843                           ;Buzzer_B1.c: 75: Buz1.Count--;
 10844  0D6B  3001               	movlw	1
 10845  0D6C  02A3               	subwf	_Buz1+3,f
 10846  0D6D  0008               	return
 10847  0D6E                     __end_of_Buzzer_Main:	
 10848                           
 10849                           	psect	text72
 10850  085A                     __ptext72:	
 10851 ;; *************** function _Buzzer_Initialization *****************
 10852 ;; Defined at:
 10853 ;;		line 11 in file "../src/Buzzer_B1.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;		None
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;		None
 10858 ;; Return value:  Size  Location     Type
 10859 ;;		None               void
 10860 ;; Registers used:
 10861 ;;		None
 10862 ;; Tracked objects:
 10863 ;;		On entry : 0/0
 10864 ;;		On exit  : 0/0
 10865 ;;		Unchanged: 0/0
 10866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10867 ;;      Params:         0       0       0       0
 10868 ;;      Locals:         0       0       0       0
 10869 ;;      Temps:          0       0       0       0
 10870 ;;      Totals:         0       0       0       0
 10871 ;;Total ram usage:        0 bytes
 10872 ;; Hardware stack levels used:    1
 10873 ;; Hardware stack levels required when called:    2
 10874 ;; This function calls:
 10875 ;;		Nothing
 10876 ;; This function is called by:
 10877 ;;		_main
 10878 ;; This function uses a non-reentrant model
 10879 ;;
 10880                           
 10881                           
 10882                           ;psect for function _Buzzer_Initialization
 10883  085A                     _Buzzer_Initialization:	
 10884                           
 10885                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 10886                           
 10887                           ;incstack = 0
 10888                           ; Regs used in _Buzzer_Initialization: []
 10889  085A  1283               	bcf	3,5	;RP0=0, select bank0
 10890  085B  1303               	bcf	3,6	;RP1=0, select bank0
 10891  085C  1420               	bsf	_Buz1,0
 10892  085D  0008               	return
 10893  085E                     __end_of_Buzzer_Initialization:	
 10894                           
 10895                           	psect	text73
 10896  0A09                     __ptext73:	
 10897 ;; *************** function _ISR *****************
 10898 ;; Defined at:
 10899 ;;		line 116 in file "../src/MCU_B1.c"
 10900 ;; Parameters:    Size  Location     Type
 10901 ;;		None
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;		None
 10904 ;; Return value:  Size  Location     Type
 10905 ;;		None               void
 10906 ;; Registers used:
 10907 ;;		wreg, status,2, status,0, pclath, cstack
 10908 ;; Tracked objects:
 10909 ;;		On entry : 0/0
 10910 ;;		On exit  : 0/0
 10911 ;;		Unchanged: 0/0
 10912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10913 ;;      Params:         0       0       0       0
 10914 ;;      Locals:         0       0       0       0
 10915 ;;      Temps:          4       0       0       0
 10916 ;;      Totals:         4       0       0       0
 10917 ;;Total ram usage:        4 bytes
 10918 ;; Hardware stack levels used:    1
 10919 ;; Hardware stack levels required when called:    1
 10920 ;; This function calls:
 10921 ;;		_TMR1_ISR
 10922 ;; This function is called by:
 10923 ;;		Interrupt level 1
 10924 ;; This function uses a non-reentrant model
 10925 ;;
 10926                           
 10927                           
 10928                           ;psect for function _ISR
 10929  0A09                     _ISR:	
 10930                           
 10931                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 10932  0A09  1683               	bsf	3,5	;RP0=1, select bank1
 10933  0A0A  1303               	bcf	3,6	;RP1=0, select bank1
 10934  0A0B  1C0C               	btfss	12,0	;volatile
 10935  0A0C  2A14               	goto	i1l515
 10936  0A0D  1283               	bcf	3,5	;RP0=0, select bank0
 10937  0A0E  1303               	bcf	3,6	;RP1=0, select bank0
 10938  0A0F  1C0C               	btfss	12,0	;volatile
 10939  0A10  2A14               	goto	i1l515
 10940                           
 10941                           ;MCU_B1.c: 126: TMR1_ISR();
 10942  0A11  158A  21C5  158A   	fcall	_TMR1_ISR
 10943  0A14                     i1l515:	
 10944                           ;MCU_B1.c: 127: }
 10945                           ;MCU_B1.c: 148: return;
 10946                           
 10947  0A14  0878               	movf	??_ISR+3,w
 10948  0A15  1283               	bcf	3,5	;RP0=0, select bank0
 10949  0A16  1303               	bcf	3,6	;RP1=0, select bank0
 10950  0A17  00FF               	movwf	127
 10951  0A18  0877               	movf	??_ISR+2,w
 10952  0A19  008A               	movwf	10
 10953  0A1A  0876               	movf	??_ISR+1,w
 10954  0A1B  0084               	movwf	4
 10955  0A1C  0E75               	swapf	??_ISR^(0+-128),w
 10956  0A1D  0083               	movwf	3
 10957  0A1E  0EFE               	swapf	126,f
 10958  0A1F  0E7E               	swapf	126,w
 10959  0A20  0009               	retfie
 10960  0A21                     __end_of_ISR:	
 10961                           
 10962                           	psect	intentry
 10963  0004                     __pintentry:	
 10964                           ;incstack = 0
 10965                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 10966                           
 10967  0004                     interrupt_function:	
 10968  007E                     saved_w	set	btemp
 10969  0004  00FE               	movwf	btemp
 10970  0005  0E03               	swapf	3,w
 10971  0006  00F5               	movwf	??_ISR
 10972  0007  0804               	movf	4,w
 10973  0008  00F6               	movwf	??_ISR+1
 10974  0009  080A               	movf	10,w
 10975  000A  00F7               	movwf	??_ISR+2
 10976  000B  1283               	bcf	3,5	;RP0=0, select bank0
 10977  000C  1303               	bcf	3,6	;RP1=0, select bank0
 10978  000D  087F               	movf	btemp+1,w
 10979  000E  00F8               	movwf	??_ISR+3
 10980  000F  158A  2A09         	ljmp	_ISR
 10981                           
 10982                           	psect	text74
 10983  09C5                     __ptext74:	
 10984 ;; *************** function _TMR1_ISR *****************
 10985 ;; Defined at:
 10986 ;;		line 236 in file "../src/MCU_B1.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;		None
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;		None
 10991 ;; Return value:  Size  Location     Type
 10992 ;;		None               void
 10993 ;; Registers used:
 10994 ;;		wreg, status,2
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 11000 ;;      Params:         0       0       0       0
 11001 ;;      Locals:         0       0       0       0
 11002 ;;      Temps:          0       0       0       0
 11003 ;;      Totals:         0       0       0       0
 11004 ;;Total ram usage:        0 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; This function calls:
 11007 ;;		Nothing
 11008 ;; This function is called by:
 11009 ;;		_ISR
 11010 ;; This function uses a non-reentrant model
 11011 ;;
 11012                           
 11013                           
 11014                           ;psect for function _TMR1_ISR
 11015  09C5                     _TMR1_ISR:	
 11016                           
 11017                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 11018                           
 11019                           ;incstack = 0
 11020                           ; Regs used in _TMR1_ISR: [wreg+status,2]
 11021  09C5  30FA               	movlw	250
 11022  09C6  1283               	bcf	3,5	;RP0=0, select bank0
 11023  09C7  1303               	bcf	3,6	;RP1=0, select bank0
 11024  09C8  008F               	movwf	15	;volatile
 11025                           
 11026                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 11027  09C9  3038               	movlw	56
 11028  09CA  008E               	movwf	14	;volatile
 11029                           
 11030                           ;MCU_B1.c: 240: TMR1IF = 0;
 11031  09CB  100C               	bcf	12,0	;volatile
 11032                           
 11033                           ;MCU_B1.c: 271: Timer1.Count++;
 11034  09CC  3001               	movlw	1
 11035  09CD  07BB               	addwf	_Timer1+1,f
 11036  09CE  1803               	skipnc
 11037  09CF  0ABC               	incf	_Timer1+2,f
 11038  09D0  3000               	movlw	0
 11039  09D1  07BC               	addwf	_Timer1+2,f
 11040                           
 11041                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 11042  09D2  30C8               	movlw	200
 11043  09D3  063B               	xorwf	_Timer1+1,w
 11044  09D4  043C               	iorwf	_Timer1+2,w
 11045  09D5  1D03               	skipz
 11046  09D6  0008               	return
 11047                           
 11048                           ;MCU_B1.c: 273: Timer1.Count = 0;
 11049  09D7  01BB               	clrf	_Timer1+1
 11050  09D8  01BC               	clrf	_Timer1+2
 11051                           
 11052                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 11053  09D9  143A               	bsf	_Timer1,0
 11054  09DA  0008               	return
 11055  09DB                     __end_of_TMR1_ISR:	
 11056  007E                     btemp	set	126	;btemp
 11057  007E                     wtemp	set	126
 11058  007E                     wtemp0	set	126
 11059  0080                     wtemp1	set	128
 11060  0082                     wtemp2	set	130
 11061  0084                     wtemp3	set	132
 11062  0086                     wtemp4	set	134
 11063  0088                     wtemp5	set	136
 11064  007F                     wtemp6	set	127
 11065  007E                     ttemp	set	126
 11066  007E                     ttemp0	set	126
 11067  0081                     ttemp1	set	129
 11068  0084                     ttemp2	set	132
 11069  0087                     ttemp3	set	135
 11070  007F                     ttemp4	set	127
 11071  007E                     ltemp	set	126
 11072  007E                     ltemp0	set	126
 11073  0082                     ltemp1	set	130
 11074  0086                     ltemp2	set	134
 11075  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         147
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     22      80
    BANK1            80      0      79
    BANK2            16      4       9

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights2(BANK0[5]), Lights1(BANK0[5]), 

    Sw	PTR struct Switch size(2) Largest target is 5
		 -> NULL(NULL[0]), Sw2(BANK2[5]), Sw1(BANK1[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK0[4]), 


Critical Paths under _main in COMMON

    _main->_Buzzer_Main
    _main->_PIR_Initialization
    _main->_WDT_Main
    _getTemp_AD->_getAD
    _getPIR_AD->___awdiv
    _getPIR_AD->___lwdiv
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->___awdiv
    _setTemp_Main->_getMain_All_Error_Status
    _setTemp_Main->_getMain_All_LightsStatus
    _setSw_Main->_SwPointSelect
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getCDS_Status
    _PIR_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Main->_getLight_LoadGO
    _Load_Main->_getLight_Load_Status
    _Load_Main->_getMain_All_Error_Status
    _Load_Main->_getMain_All_LightsStatus
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_getLoad_OK
    _Lights_Main->_getMain_All_Error_Status
    _Lights_Main->_getMain_All_LightsStatus
    _setLights_Main->_LightsPointSelect
    _setLights->_setLights_Line
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _Lights_Control->___awdiv
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _Exception_Main->_getAll_Lights_Line
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_getMain_All_LightsStatus
    _setLights_SwOn->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getPIR_AD->___awdiv
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _setLights_Initialization->_LightsPointSelect
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_setBuz
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger
    _setLights_Trigger->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   37728
                                             21 BANK0      1     1      0
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1883
                                             12 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0    1040
                                              1 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    3540
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1466
                                              1 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     916
                                              1 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     728
                                              4 COMMON     1     0      1
                                              0 BANK0      1     1      0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3567
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         5     5      0    3567
                                             12 BANK0      5     5      0
                            ___awdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    5105
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           5     5      0    5105
                                              6 BANK0      5     5      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            11    11      0    3669
                                              6 BANK0     11    11      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    1930
                                              7 BANK0     10    10      0
                            ___lwdiv
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    4432
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    2636
                                              6 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    2242
                                              3 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     142
                                              0 BANK0      3     3      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1509
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0     126
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0     126
                                              1 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     294
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     294
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1844
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1844
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    7580
                                             12 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOn                                       1     1      0    1456
                                              4 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOff                                      1     1      0    1414
                                              4 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _setLights_Trigger                                    3     2      1     904
                                              1 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0     174
                                              1 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      84
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1634
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0     126
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1883
                                              8 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1215
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   2     2      0      40
                                              4 COMMON     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLights_SwOff
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Switch_Initialization
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setLED
         _LedPointSelect
       _setLights_SwOff
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
       _setLights_SwOn
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___awdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      B2       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK2            10      0       0       8        0.0%
BANK2               10      4       9       9       56.3%
DATA                 0      0      B2      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Jan 16 15:11:33 2015

              __size_of_Switch_Main 000B                        _WDT_Clearing 0002  
         getMain_Lights_Count@count 005A                                  l60 0DA7  
                                l70 0D56                                  l72 0D64  
                                l58 0D99                                  l68 0D69  
                                l69 0D66                        ___awdiv@sign 005F  
                                _Sw 0070                      setTemp_Main@AD 006A  
                                fsr 0004                                 l180 0B9C  
                               l350 0A97                                 l349 0A8F  
                               l383 0C1F                                 l384 0C25  
                               l723 0C64                                 l718 0C4B  
                               l719 0C68                                 l840 0067  
                               l841 0063                                 l842 005D  
                               l749 0714                                 l854 018D  
                               l838 020A                                 l848 01E3  
                               l849 01E1                                 l972 0FFC  
                               l977 0FF7                                 _GIE 005F  
                               _RC0 0038                                 _RB2 0032  
                               _LED 0072                                 _RC1 0039  
                               _RB3 0033                                 _RB4 0034  
                               _RA6 002E                                 _RB5 0035  
                               _RA7 002F                                 _RC4 003C  
                               _RC5 003D                                 _RC6 003E  
                               _RC7 003F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0A09                                 _PSA 040B  
                               _WDT 003D                   ??_setLights_SwOff 007A  
                               _Cmd 003F                                 _Sw1 00E6  
                               _Sw2 0120              getAll_Lights_Line@line 005A  
                               fsr0 0004                                 indf 0000  
             _Buzzer_Initialization 085A                     __end_of_ADC_Set 088B  
         __end_of_LightsPointSelect 09C5                   ??_getSw_KeyStatus 0079  
                  _getLights_Status 0941             __size_of_Lights_Control 009A  
                              ?_ISR 0075                          Load_Main@i 0069  
                              l1063 0269                                l1056 039C  
                              l1065 027A                                l1057 0263  
                              l1058 0249                                l1420 09A3  
                              l1610 092F                                l1442 04FB  
                              l1604 09FF                                l1296 08E3  
                              l1609 0929                                l1571 0F21  
                              l1557 0B16                                l4150 0D18  
                              l4144 0CFF                                l1577 0F64  
                              l5204 0E28                                l5230 0E67  
                              l5222 0E54                                l5214 0E30  
                              l3800 0C3B                                l5216 0E3E  
                    _Load_Main$2699 0064                                l3810 0C4F  
                              l5226 0E5F                                l7020 008D  
                              l7004 0066                                l3808 0C47  
                              l3818 0C5F                                l7026 00C9  
                              l6324 09BC                                l5620 0CB2  
                              l7116 01F7                                l7052 0154  
                              l7220 02C0                                l7204 029D  
                              l5198 0E1D                                l6350 07D1  
                              l7310 0690                                l7134 0B17  
                              l5622 0CC0                                l7070 01AA  
                              l7062 017F                                l7222 02C1  
                              l3862 097F                                l6336 07C0  
                              l6344 07C8                                l7312 066D  
                              l7304 0669                                l6504 0EF8  
                              l5632 0CE1                                l7080 01C3  
                              l7216 02B4                                l7314 069C  
                              l7058 0164                                l3788 093F  
                              l6372 07F0                                l6444 0C8E  
                              l7324 06D3                                l6524 0F28  
                              l5628 0CD6                                l7236 0312  
                              l7228 02FE                                l7244 0343  
                              l6358 07D9                                l6462 0B75  
                              l6446 0C93                                l7334 06FA  
                              l7326 06B0                                l7318 06AC  
                              l6542 0F60                                l6518 0F1D  
                              l5656 0BA7                                l6368 07EC  
                              l6376 07F4                                l7328 06DF  
                              l6528 0F3B                                l7168 025D  
                              l6704 0416                                l6640 0FBF  
                              l6552 0AAD                                l7338 0706  
                              l7258 036C                                l6474 0A5B  
                              l6626 0F89                                l6554 0AB0  
                              l7370 0EB2                                l6492 09EA  
                              l6716 045B                                l6900 0577  
                              l6478 0A65                                l6726 04A6  
                              l6558 0AB6                                l7358 0E8F  
                              l6680 09A7                                l6656 0FE4  
                              l6832 0DE8                                l6824 0DD4  
                              l6920 05B7                                l6904 0582  
                              l7298 065A                                l6658 0FE7  
                              l6930 05E5                                l6914 059B  
                              l6780 0775                                l6684 09AD  
                              l6668 0FF6                                l6852 0E0C  
                              l6836 0DF0                                l6758 0B50  
                              l6950 063B                                l6792 07A9  
                              l6776 0764                                l6696 03ED  
                              l6944 062D                                l6936 0601  
                              l6872 0BE4                                l6892 0561  
                              l6868 0BDC               _myMain_Initialization 084D  
                              l6966 0AF7                                l6896 056C  
                              l6888 0556                                l6988 0047  
                      __CFG_WDTE$ON 0000                                u4265 0D3A  
                              _PEIE 005E                                u3855 0D24  
                              u9100 0771                                u5925 0E33  
                              u9125 0794                                u6805 0CCD  
                              u9070 0760                                u9055 074C  
                              u6815 0CD7                                u6905 0BB7  
                              u5945 0E3F                                u5955 0E4B  
                              u5965 0E55                                u8365 0996  
                              u6775 0CB5                                u6795 0CC1  
                              u9575 008B                                u9585 00C7  
                              u9675 01A2                                u9595 011E  
                              __CDS 0036             ?_setSYSC_Initialization 0075  
                              _WPUB 0095                                _SYSC 002C  
                              _Buz1 0020                                __PIR 00A0  
                              _Load 00CA                                _Temp 0042  
                              _main 0E6E                                btemp 007E  
                   __end_of_WDT_Set 0903                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0BBD  
      __size_of_Temp_Initialization 0003                               ??_ISR 0075  
                 _setLights_Trigger 0A69                       ??_Lights_Main 007A  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 08D9  
                ?_setLights_Trigger 005B                               ?_main 0125  
                   __end_of___awdiv 0E6E                               _ADRES 001E  
                             u10015 02DF                               u10200 0699  
                             u10025 02F7                               u10205 0676  
                             u10125 0389                               u10045 032B  
                             u10230 06DC                               u10235 06B9  
                             u10075 0353                     ___awdiv@divisor 005A  
                             _T1CON 0010                     __end_of___lwdiv 0CE8  
                             i1l515 0A14                     ___awdiv@counter 005E  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                        ?_setLED_Main 0075  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087             __end_of_Timeout_Counter 099C  
                             _Light 0073                 ??_setLights_Trigger 005C  
                  __end_of_PIR_Main 03B2                    __end_of_TMR1_ISR 09DB  
                  __end_of_TMR1_Set 08F5                               _getAD 0AA0  
    __end_of_setSYSC_Initialization 0866      getLights_Allow_Condition@allow 005B  
           __end_of_getLight_LoadGO 0871                       ??_Buzzer_Main 0079  
                  __end_of_WDT_Main 0963                       _LightsControl 0040  
                    __CFG_BOREN$OFF 0000        __end_of_getMain_Lights_Count 0912  
                             pclath 000A                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080      __size_of_setLED_Initialization 0012  
     __end_of_setLED_Initialization 0975                               ttemp0 007E  
                             ttemp1 0081                               ttemp2 0084  
                             ttemp3 0087                               ttemp4 007F  
                             status 0003                               wtemp0 007E  
                             wtemp1 0080                               wtemp2 0082  
                             wtemp3 0084                               wtemp4 0086  
                             wtemp5 0088                               wtemp6 007F  
                 getPIR_AD@channel1 0067                   getPIR_AD@channel2 0062  
            ?_setLoad_AH_AL_Restore 0075                   setTemp_Main@error 0067  
                    _setLights_Main 0B27                      _setLights_Line 09F2  
                   __initialization 0013                      _setLights_SwOn 0C6A  
                __size_of_SYSC_Main 0003           __end_of_setLights_Trigger 0A84  
                      __end_of_main 0EE0                    __end_of_Fosc_Set 086B  
    getMain_All_LightsStatus@status 0079                      _Exception_Main 063D  
                         ??_ADC_Set 0079                              ??_main 006F  
             PIR_Main@Enable_Switch 0067              ?_Buzzer_Initialization 0075  
               __end_of_Lights_Main 0B27          __size_of_LightsPointSelect 0015  
          _getMain_All_LightsStatus 0931             ??_Switch_Initialization 0079  
                            ?_getAD 0079              ?_myMain_Initialization 0075  
                            _ADCON0 001F                              _ADCON1 009F  
                  ___awdiv@dividend 005C                           ??_WDT_Set 0079  
                            _ANSELA 0185                              _ANSELB 0186  
          _getMain_All_Error_Status 0C2C                              _FVRCON 009D  
            getLights_Status@lights 005B                              _OSCCON 0090  
                __size_of_Load_Main 01E4                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0A39  
              Exception_Main@i_2426 006D              getLights_Status@status 005C  
            __end_of_setLights_Main 0B57              __end_of_setLights_Line 0A09  
            __end_of_setLights_SwOn 0CA8        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 0921                 __end_of_Buzzer_Main 0D6E  
                            _Lights 0074                              _Timer1 003A  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 007A  
            __end_of_Exception_Main 0715                Exception_Main@lights 0067  
                         ??___awdiv 0079                           ??___lwdiv 0079  
              Exception_Main@status 006A                              _setLED 07AF  
                            _myMain 0031                    ___awdiv@quotient 0060  
                            _setBuz 0D6E                  __size_of_Temp_Main 0003  
              Load_Main@LightsCount 0068         __end_of_Load_Initialization 0851  
   getLights_Allow_Condition@lights 0075                              saved_w 007E  
                  setLights_SwOn@sw 005E                    ?_Timeout_Counter 0075  
       getMain_Lights_Count@status1 005B         getMain_Lights_Count@status2 005C  
             __end_of_SwPointSelect 0988                   __end_of_SYSC_Main 0857  
                    _Lights_Control 0715             __size_of_LedPointSelect 001C  
                         ?_CDS_Main 0075                    ?_getLight_LoadGO 0075  
       __size_of_PIR_Initialization 000B                          _TouchPower 099C  
           __end_of__initialization 002B                           ?_LED_Main 0075  
                     ?_my_MainTimer 0075                     ?_setLights_Main 0075  
                   ?_setLights_Line 0075                     ?_setLights_SwOn 0075  
                     ?_setSYSC_Main 0075                     _setLights_SwOff 0B57  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0075  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0075  
          __end_of_getLights_Status 0952                       __end_of_getAD 0ABC  
                         ?_PIR_Main 0075                           ?_TMR1_ISR 0075  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0075  
            setLoad_AH_AL_Restore@i 005A                  _LED_Initialization 08C1  
                   _getSw_KeyStatus 0A51                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0B01            _setLights_Initialization 087D  
              _getMain_Lights_Count 0903                           ?_WDT_Main 0075  
                 __end_of_Load_Main 0212          __end_of_set_TimeoutCleared 087D  
               ?_LED_Initialization 0075              __end_of_Lights_Control 07AF  
              __size_of_setLED_Main 003B                             ??_getAD 007A  
               _Temp_Initialization 0857                          ??_CDS_Main 005A  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                        __pbssBANK2 0120                           ?_Fosc_Set 0075  
       __size_of_getAll_Lights_Line 0010                         _Buzzer_Main 0D2A  
                 __end_of_Temp_Main 0800                             ?_IO_Set 0075  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0066  
                        ??_LED_Main 007A                      ??_setSYSC_Main 007A  
                     ??_Switch_Main 007A                ??_LED_Initialization 007A  
                 LedPointSelect@led 005A                         setBuz@count 0065  
                        __pmaintext 0E6E          ?_getLights_Allow_Condition 0075  
              ?_Temp_Initialization 0075                PIR_Main@LightsStatus 006A  
                        ??_PIR_Main 0060                          ??_TMR1_ISR 0075  
                     ?_setTemp_Main 0075                  __size_of_setLights 0089  
                        _getLoad_AD 0DB5                          ??_TMR1_Set 0079  
                        __pintentry 0004                          _getLoad_OK 0893  
                           ?_setLED 005B             setLights_Trigger@lights 005D  
             ?_getMain_Lights_Count 0075                             _ADC_Set 0884  
                           ?_setBuz 0062                          _getTemp_AD 0BBD  
                        ??_WDT_Main 0079              __size_of_getCDS_Status 0008  
                   ?_Lights_Control 0075                   __end_of_getCDS_AD 0ADE  
                           _WDT_Set 08F5                       getPIR_AD@VRAD 0069  
                        ??_Fosc_Set 0079                         ?_TouchPower 0075  
                 __end_of_getPIR_AD 063D             ??_setLoad_AH_AL_Restore 0079  
           __end_of_setLights_SwOff 0B89      _getLights_Allow_Condition$4782 005C  
                   __size_of_IO_Set 0018                          getCDS_AD@i 005E  
                        getCDS_AD@j 005F                             _Lights1 0048  
                           _Lights2 004D                             _VarLED1 0056  
                           _VarLED2 00EB             __end_of_getSw_KeyStatus 0A69  
             ??_Temp_Initialization 0079                      ??_setTemp_Main 0066  
                           ___awdiv 0E11                 __end_of_Switch_Main 08C1  
                           ___lwdiv 0CA8          ??_getMain_All_LightsStatus 0079  
           ??_Buzzer_Initialization 0079                         PIR_Main@cds 0069  
                   __size_of_setLED 004E                     __size_of_setBuz 0047  
                           __ptext0 0000                             __ptext1 0ADE  
                           __ptext2 084D                             __ptext3 0BBD  
                           __ptext4 050F                             __ptext5 0DB5  
                           __ptext6 0ABC                             __ptext7 0AA0  
                           __ptext8 0952                             __ptext9 0002  
                        getPIR_AD@i 006A                          getPIR_AD@j 0066  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0079  
               _SYSC_Initialization 0851             ??_myMain_Initialization 0079  
          ??_setTemp_Initialization 0079                      _LedPointSelect 0A84  
                   getTemp_AD@ADRES 005E                             clrloop0 08A4  
    __size_of_Switch_Initialization 0001       __end_of_Switch_Initialization 084C  
                 __end_of_setLights 0F69                end_of_initialization 002B  
                        _setSw_Main 03B2                       _getCDS_Status 089B  
              ?_SYSC_Initialization 0075               _setLED_Initialization 0963  
                 setLights_SwOff@sw 005E                         ?_getLoad_AD 0075  
    __size_of_Lights_Initialization 0008                         ?_getLoad_OK 0075  
            ??_getMain_Lights_Count 0079       __end_of_Lights_Initialization 0893  
                       ?_getTemp_AD 0075                 __size_of_TouchPower 0014  
          setLED_Initialization@led 005D             setTemp_Main@DangerValue 0069  
                _Mcu_Initialization 0912                __end_of_my_MainTimer 0B01  
              __end_of_setSYSC_Main 0D2A              __end_of_LedPointSelect 0AA0  
          Load_Main@ErrorCountValue 0066                 ?_Mcu_Initialization 0075  
                  ??_setLights_Main 007A                    ??_setLights_Line 0079  
              setLights_Main@lights 0060                    ??_setLights_SwOn 007A  
                         _SYSC_Main 0854     getMain_All_Error_Status@command 005E  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0075  
                  ?_setLights_SwOff 0075               ??_SYSC_Initialization 0079  
                  ??_Exception_Main 0066                      __end_of_IO_Set 0A51  
        __end_of_CDS_Initialization 0862                         _Switch_Main 08B6  
        ??_setLights_Initialization 007A                   __size_of_LED_Main 000C  
                  ?_getSw_KeyStatus 0075                ??_Mcu_Initialization 007A  
                     ?_WDT_Clearing 0075                   ?_getLights_Status 0075  
                      ?_Lights_Main 0075                   getSw_KeyStatus@sw 005B  
                 __size_of_PIR_Main 01A0                   __size_of_TMR1_ISR 0016  
                ??_getLights_Status 007A                   __size_of_TMR1_Set 000E  
                    __end_of_setLED 07FD                      __end_of_setBuz 0DB5  
          ??_setSYSC_Initialization 0079                   __size_of_WDT_Main 0011  
               start_initialization 0013                     ?_LedPointSelect 0075  
              setLights_Line@lights 0079                           _Load_Main 002E  
                       __end_of_ISR 0A21          __end_of_PIR_Initialization 08B6  
      __size_of_Load_Initialization 0003        __end_of_getLight_Load_Status 0877  
   __size_of_setTemp_Initialization 0001                 getCDS_Status@status 0079  
              __end_of_setTemp_Main 1000                 __size_of_getLoad_AD 005C  
                      ?_Buzzer_Main 0075                 __size_of_getLoad_OK 0008  
                        ?_SYSC_Main 0075                  _set_TimeoutCleared 0877  
                          ??_IO_Set 0079            __size_of_Timeout_Counter 0014  
                         _VarErrLED 0052                         ?_setSw_Main 0075  
               __size_of_getTemp_AD 0034              ?_setLED_Initialization 0075  
                 __size_of_Fosc_Set 0005            __size_of_getLight_LoadGO 0006  
                         _Temp_Main 07FD                     setLights@lights 005F  
               ?_set_TimeoutCleared 0075                      ??_WDT_Clearing 0079  
       ??_getLights_Allow_Condition 005A                 Exception_Main@count 0068  
                   setLights@status 005D                 Exception_Main@error 0069  
            __size_of_SwPointSelect 0013    __end_of_getMain_All_LightsStatus 0941  
                          ??_setLED 007A                            ?_ADC_Set 0075  
                  ??_Lights_Control 0062                            ??_setBuz 0064  
  __end_of_getMain_All_Error_Status 0C6A                       ??_setLED_Main 005B  
                       __pbssCOMMON 0070             Load_Main@Load_RunStatus 0067  
                         ___latbits 0001                          ?_Load_Main 0075  
                     __pcstackBANK0 005A                       __pcstackBANK2 0125  
              ??_set_TimeoutCleared 0079          __end_of_getAll_Lights_Line 0931  
                          ?_WDT_Set 0075                     ??_getCDS_Status 0079  
                      ??_TouchPower 0079                       PIR_Main@error 0064  
                         _getCDS_AD 0ABC      __size_of_setLoad_AH_AL_Restore 0018  
     __end_of_setLoad_AH_AL_Restore 0A39                           _getPIR_AD 050F  
       __size_of_LED_Initialization 000C                     Exception_Main@i 006B  
                        ?_Temp_Main 0075                    ___lwdiv@dividend 005C  
                        setBuz@time 0062                      Load_Main@error 0063  
            _setTemp_Initialization 084C                       _PIR_Main$3214 0065  
                          ?___awdiv 005A               __size_of_my_MainTimer 0023  
                          ?___lwdiv 005A               __size_of_setSYSC_Main 0042  
    __size_of_Buzzer_Initialization 0004       __end_of_Buzzer_Initialization 085E  
                __end_of_TouchPower 09B0            setLights_Trigger@command 005B  
               __size_of_setSw_Main 015D     __size_of_setSYSC_Initialization 0004  
         _getLights_Allow_Condition 09DB      __size_of_myMain_Initialization 0001  
     __end_of_myMain_Initialization 084E                      __size_of_getAD 001C  
                  ___lwdiv@quotient 005F                       _SwPointSelect 0975  
                          _CDS_Main 0B89                 __end_of_setLED_Main 0C2C  
                       ??_SYSC_Main 007A         __end_of_Temp_Initialization 085A  
                 interrupt_function 0004                          ?_getCDS_AD 005B  
                          _LED_Main 08CD                           _setLights 0EE0  
                   SwPointSelect@sw 0079                           clear_ram0 08A3  
  __end_of_setLights_Initialization 0884                        _my_MainTimer 0ADE  
                        ?_getPIR_AD 0062                        _setSYSC_Main 0CE8  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0079  
              PIR_Main@TriggerValue 0068                            _PIR_Main 0212  
                      ??_getLoad_AD 005B                            _TMR1_ISR 09C5  
                      ??_getLoad_OK 0079                _getLight_Load_Status 0871  
                          _TMR1_Set 08E7                   ??_getLight_LoadGO 0079  
                      ??_getTemp_AD 005B                            _WDT_Main 0952  
             getSw_KeyStatus@status 005A                    __size_of_ADC_Set 0007  
                    getPIR_AD@VRAD1 0068                __size_of_Lights_Main 0026  
             __size_of_setTemp_Main 0097                        setSw_Main@sw 0064  
                       ??_Load_Main 0061      getMain_All_Error_Status@status 005F  
                    ?_SwPointSelect 0075                         getAD@adcon0 005A  
                       getAD@adcon1 0079                      setLED_Main@led 005D  
              __end_of_WDT_Clearing 0004   __size_of_getMain_All_LightsStatus 0010  
         ?_getMain_All_LightsStatus 0075                            _Fosc_Set 0866  
                  __size_of_WDT_Set 000E                  __end_of_getLoad_AD 0E11  
                __end_of_getLoad_OK 089B               _Switch_Initialization 084B  
 __size_of_getMain_All_Error_Status 003E           ?_getMain_All_Error_Status 0075  
              __size_of_Buzzer_Main 0044                          ?_setLights 005D  
                __end_of_getTemp_AD 0BF1              _setSYSC_Initialization 0862  
                      ?_Switch_Main 0075                   getLoad_AD@channel 005D  
                 _DetectSYSC_Signal 08D9                            _SwDetect 0041  
                       ??_Temp_Main 007A       _getMain_All_Error_Status$2412 005A  
     _getMain_All_Error_Status$2413 005C                 _Load_Initialization 084E  
                ?_DetectSYSC_Signal 0075                           setLED@led 005C  
             ?_getLight_Load_Status 0075                        _setTemp_Main 0F69  
                  __size_of___awdiv 005D      getLight_Load_Status@loadstatus 0079  
                  __size_of___lwdiv 0040                    ??_LedPointSelect 0079  
     __size_of_getMain_Lights_Count 000F                 ??_DetectSYSC_Signal 0079  
                _CDS_Initialization 085E               _Lights_Initialization 088B  
                 getTemp_AD@channel 005D                         _setLED_Main 0BF1  
                   ___lwdiv@divisor 005A                ?_Load_Initialization 0075  
               ?_CDS_Initialization 0075                     ___lwdiv@counter 005E  
                          __ptext10 07FD                            __ptext11 0F69  
                          __ptext20 0988                            __ptext12 0857  
                          __ptext21 084B                            __ptext13 084C  
                          __ptext30 08F5                            __ptext22 0854  
                          __ptext14 08B6                            __ptext31 08E7  
                          __ptext23 0CE8                            __ptext15 03B2  
                          __ptext40 084E                            __ptext32 0A39  
                          __ptext24 0851                            __ptext16 0A51  
                          __ptext41 0A21                            __ptext33 0866  
                          __ptext25 0862                            __ptext17 0975  
                          __ptext50 087D                            __ptext42 0B01  
                          __ptext34 0884                            __ptext26 0212  
                          __ptext18 099C                            __ptext51 08CD  
                          __ptext43 0B27                            __ptext35 002E  
                          __ptext27 089B                            __ptext19 0877  
                          __ptext60 09B0                            __ptext52 0BF1  
                          __ptext44 0EE0                            __ptext36 0903  
                          __ptext28 08AB                            __ptext61 07AF  
                          __ptext53 08C1                            __ptext45 09F2  
                          __ptext37 0871                            __ptext29 0912  
                          __ptext70 085E                            __ptext62 0A84  
                          __ptext54 0963                            __ptext46 09DB  
                          __ptext38 086B                            __ptext71 0D2A  
                          __ptext63 0D6E                            __ptext55 063D  
                          __ptext47 0893                            __ptext39 0CA8  
                          __ptext72 085A                            __ptext64 0E11  
                          __ptext56 0C6A                            __ptext48 0715  
                          __ptext73 0A09                            __ptext65 0931  
                          __ptext57 0B57                            __ptext49 088B  
                          __ptext74 09C5                            __ptext66 0C2C  
                          __ptext58 0A69                            __ptext67 0921  
                          __ptext59 0941                            __ptext68 08D9  
                          __ptext69 0B89           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 0854             ??_setLED_Initialization 007A  
                       ??_getCDS_AD 005C                        ??_setSw_Main 0060  
                     setLED@command 005B           __end_of_DetectSYSC_Signal 08E7  
                     __size_of_main 0072                         ??_getPIR_AD 0063  
                _PIR_Initialization 08AB                ??_CDS_Initialization 0079  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 0032  
                      getLoad_OK@ok 0079                 ?_PIR_Initialization 0075  
                          main@argc 0125                            main@argv 0127  
          __size_of_getSw_KeyStatus 0018   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0075                     ??_SwPointSelect 0079  
                __end_of_setSw_Main 050F               ??_Load_Initialization 007A  
              Lights_Control@lights 0064                ??_PIR_Initialization 0079  
                          intlevel1 0000              ?_Switch_Initialization 0075  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0068  
                       ??_setLights 005E             ?_setTemp_Initialization 0075  
           LightsPointSelect@lights 005A                  _getAll_Lights_Line 0921  
                   getLoad_AD@ADRES 0060              ??_getLight_Load_Status 0079  
                       getLoad_AD@i 0061                         getLoad_AD@j 005F  
                       getLoad_AD@k 005E             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 0017             __size_of_setLights_SwOn 003E  
               ?_getAll_Lights_Line 0075               getLight_LoadGO@loadgo 0079  
            ?_Lights_Initialization 0075             __size_of_Exception_Main 00D8  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 005B  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 09B0  
              ??_getAll_Lights_Line 0079                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0075                     _Timeout_Counter 0988  
        __end_of_LED_Initialization 08CD               __end_of_getCDS_Status 08A3  
    __end_of_setTemp_Initialization 084D          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 086B                   getCDS_AD@channel1 0060  
                 getCDS_AD@channel2 005B   __end_of_getLights_Allow_Condition 09F2  
               ??_LightsPointSelect 0079               _setLoad_AH_AL_Restore 0A21  
