

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Feb 23 10:53:51 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,delta=2
    81                           	psect	text68,local,class=CODE,merge=1,delta=2
    82                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text74,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0094                     	;# 
   140  0095                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0096                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009F                     	;# 
   149  0108                     	;# 
   150  0109                     	;# 
   151  010C                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  0185                     	;# 
   158  0186                     	;# 
   159  018C                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0095                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0096                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009F                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  0185                     	;# 
   227  0186                     	;# 
   228  018C                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0096                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009F                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0186                     	;# 
   297  018C                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0096                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009F                     	;# 
   356  0108                     	;# 
   357  0109                     	;# 
   358  010C                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0186                     	;# 
   366  018C                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  000E                     	;# 
   382  000F                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0014                     	;# 
   388  0015                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  001D                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  0081                     	;# 
   402  0085                     	;# 
   403  0086                     	;# 
   404  0087                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0096                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009F                     	;# 
   425  0108                     	;# 
   426  0109                     	;# 
   427  010C                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  010F                     	;# 
   433  0185                     	;# 
   434  0186                     	;# 
   435  018C                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  0007                     	;# 
   444  0009                     	;# 
   445  000A                     	;# 
   446  000B                     	;# 
   447  000C                     	;# 
   448  000D                     	;# 
   449  000E                     	;# 
   450  000E                     	;# 
   451  000F                     	;# 
   452  0010                     	;# 
   453  0011                     	;# 
   454  0012                     	;# 
   455  0013                     	;# 
   456  0014                     	;# 
   457  0015                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001D                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  0081                     	;# 
   471  0085                     	;# 
   472  0086                     	;# 
   473  0087                     	;# 
   474  0089                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  008F                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0095                     	;# 
   486  0095                     	;# 
   487  0096                     	;# 
   488  0096                     	;# 
   489  0098                     	;# 
   490  0099                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009F                     	;# 
   494  0108                     	;# 
   495  0109                     	;# 
   496  010C                     	;# 
   497  010C                     	;# 
   498  010D                     	;# 
   499  010D                     	;# 
   500  010E                     	;# 
   501  010F                     	;# 
   502  0185                     	;# 
   503  0186                     	;# 
   504  018C                     	;# 
   505  0000                     	;# 
   506  0001                     	;# 
   507  0002                     	;# 
   508  0003                     	;# 
   509  0004                     	;# 
   510  0005                     	;# 
   511  0006                     	;# 
   512  0007                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  000E                     	;# 
   520  000F                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0014                     	;# 
   526  0015                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001D                     	;# 
   537  001E                     	;# 
   538  001F                     	;# 
   539  0081                     	;# 
   540  0085                     	;# 
   541  0086                     	;# 
   542  0087                     	;# 
   543  0089                     	;# 
   544  008C                     	;# 
   545  008D                     	;# 
   546  008E                     	;# 
   547  008F                     	;# 
   548  0090                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0093                     	;# 
   552  0093                     	;# 
   553  0094                     	;# 
   554  0095                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0096                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009F                     	;# 
   563  0108                     	;# 
   564  0109                     	;# 
   565  010C                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0185                     	;# 
   572  0186                     	;# 
   573  018C                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  000E                     	;# 
   589  000F                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0014                     	;# 
   595  0015                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001D                     	;# 
   606  001E                     	;# 
   607  001F                     	;# 
   608  0081                     	;# 
   609  0085                     	;# 
   610  0086                     	;# 
   611  0087                     	;# 
   612  0089                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008F                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0093                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0096                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009F                     	;# 
   632  0108                     	;# 
   633  0109                     	;# 
   634  010C                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  010F                     	;# 
   640  0185                     	;# 
   641  0186                     	;# 
   642  018C                     	;# 
   643  0000                     	;# 
   644  0001                     	;# 
   645  0002                     	;# 
   646  0003                     	;# 
   647  0004                     	;# 
   648  0005                     	;# 
   649  0006                     	;# 
   650  0007                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  000E                     	;# 
   658  000F                     	;# 
   659  0010                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0014                     	;# 
   664  0015                     	;# 
   665  0015                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001B                     	;# 
   673  001C                     	;# 
   674  001D                     	;# 
   675  001E                     	;# 
   676  001F                     	;# 
   677  0081                     	;# 
   678  0085                     	;# 
   679  0086                     	;# 
   680  0087                     	;# 
   681  0089                     	;# 
   682  008C                     	;# 
   683  008D                     	;# 
   684  008E                     	;# 
   685  008F                     	;# 
   686  0090                     	;# 
   687  0091                     	;# 
   688  0092                     	;# 
   689  0093                     	;# 
   690  0093                     	;# 
   691  0094                     	;# 
   692  0095                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0096                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009F                     	;# 
   701  0108                     	;# 
   702  0109                     	;# 
   703  010C                     	;# 
   704  010C                     	;# 
   705  010D                     	;# 
   706  010D                     	;# 
   707  010E                     	;# 
   708  010F                     	;# 
   709  0185                     	;# 
   710  0186                     	;# 
   711  018C                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0096                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009F                     	;# 
   770  0108                     	;# 
   771  0109                     	;# 
   772  010C                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  010F                     	;# 
   778  0185                     	;# 
   779  0186                     	;# 
   780  018C                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000E                     	;# 
   796  000F                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  0081                     	;# 
   816  0085                     	;# 
   817  0086                     	;# 
   818  0087                     	;# 
   819  0089                     	;# 
   820  008C                     	;# 
   821  008D                     	;# 
   822  008E                     	;# 
   823  008F                     	;# 
   824  0090                     	;# 
   825  0091                     	;# 
   826  0092                     	;# 
   827  0093                     	;# 
   828  0093                     	;# 
   829  0094                     	;# 
   830  0095                     	;# 
   831  0095                     	;# 
   832  0096                     	;# 
   833  0096                     	;# 
   834  0098                     	;# 
   835  0099                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009F                     	;# 
   839  0108                     	;# 
   840  0109                     	;# 
   841  010C                     	;# 
   842  010C                     	;# 
   843  010D                     	;# 
   844  010D                     	;# 
   845  010E                     	;# 
   846  010F                     	;# 
   847  0185                     	;# 
   848  0186                     	;# 
   849  018C                     	;# 
   850  0000                     	;# 
   851  0001                     	;# 
   852  0002                     	;# 
   853  0003                     	;# 
   854  0004                     	;# 
   855  0005                     	;# 
   856  0006                     	;# 
   857  0007                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  000E                     	;# 
   865  000F                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0014                     	;# 
   871  0015                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0017                     	;# 
   875  0018                     	;# 
   876  0019                     	;# 
   877  001A                     	;# 
   878  001B                     	;# 
   879  001B                     	;# 
   880  001C                     	;# 
   881  001D                     	;# 
   882  001E                     	;# 
   883  001F                     	;# 
   884  0081                     	;# 
   885  0085                     	;# 
   886  0086                     	;# 
   887  0087                     	;# 
   888  0089                     	;# 
   889  008C                     	;# 
   890  008D                     	;# 
   891  008E                     	;# 
   892  008F                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0093                     	;# 
   898  0094                     	;# 
   899  0095                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0096                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009F                     	;# 
   908  0108                     	;# 
   909  0109                     	;# 
   910  010C                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  010F                     	;# 
   916  0185                     	;# 
   917  0186                     	;# 
   918  018C                     	;# 
   919  0000                     	;# 
   920  0001                     	;# 
   921  0002                     	;# 
   922  0003                     	;# 
   923  0004                     	;# 
   924  0005                     	;# 
   925  0006                     	;# 
   926  0007                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  000E                     	;# 
   934  000F                     	;# 
   935  0010                     	;# 
   936  0011                     	;# 
   937  0012                     	;# 
   938  0013                     	;# 
   939  0014                     	;# 
   940  0015                     	;# 
   941  0015                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001B                     	;# 
   949  001C                     	;# 
   950  001D                     	;# 
   951  001E                     	;# 
   952  001F                     	;# 
   953  0081                     	;# 
   954  0085                     	;# 
   955  0086                     	;# 
   956  0087                     	;# 
   957  0089                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  008F                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0093                     	;# 
   966  0093                     	;# 
   967  0094                     	;# 
   968  0095                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0096                     	;# 
   972  0098                     	;# 
   973  0099                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009F                     	;# 
   977  0108                     	;# 
   978  0109                     	;# 
   979  010C                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  010F                     	;# 
   985  0185                     	;# 
   986  0186                     	;# 
   987  018C                     	;# 
   988  0000                     	;# 
   989  0001                     	;# 
   990  0002                     	;# 
   991  0003                     	;# 
   992  0004                     	;# 
   993  0005                     	;# 
   994  0006                     	;# 
   995  0007                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  000E                     	;# 
  1003  000F                     	;# 
  1004  0010                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0014                     	;# 
  1009  0015                     	;# 
  1010  0015                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001B                     	;# 
  1018  001C                     	;# 
  1019  001D                     	;# 
  1020  001E                     	;# 
  1021  001F                     	;# 
  1022  0081                     	;# 
  1023  0085                     	;# 
  1024  0086                     	;# 
  1025  0087                     	;# 
  1026  0089                     	;# 
  1027  008C                     	;# 
  1028  008D                     	;# 
  1029  008E                     	;# 
  1030  008F                     	;# 
  1031  0090                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0093                     	;# 
  1036  0094                     	;# 
  1037  0095                     	;# 
  1038  0095                     	;# 
  1039  0096                     	;# 
  1040  0096                     	;# 
  1041  0098                     	;# 
  1042  0099                     	;# 
  1043  009C                     	;# 
  1044  009D                     	;# 
  1045  009F                     	;# 
  1046  0108                     	;# 
  1047  0109                     	;# 
  1048  010C                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0185                     	;# 
  1055  0186                     	;# 
  1056  018C                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  000E                     	;# 
  1072  000F                     	;# 
  1073  0010                     	;# 
  1074  0011                     	;# 
  1075  0012                     	;# 
  1076  0013                     	;# 
  1077  0014                     	;# 
  1078  0015                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0017                     	;# 
  1082  0018                     	;# 
  1083  0019                     	;# 
  1084  001A                     	;# 
  1085  001B                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001D                     	;# 
  1089  001E                     	;# 
  1090  001F                     	;# 
  1091  0081                     	;# 
  1092  0085                     	;# 
  1093  0086                     	;# 
  1094  0087                     	;# 
  1095  0089                     	;# 
  1096  008C                     	;# 
  1097  008D                     	;# 
  1098  008E                     	;# 
  1099  008F                     	;# 
  1100  0090                     	;# 
  1101  0091                     	;# 
  1102  0092                     	;# 
  1103  0093                     	;# 
  1104  0093                     	;# 
  1105  0094                     	;# 
  1106  0095                     	;# 
  1107  0095                     	;# 
  1108  0096                     	;# 
  1109  0096                     	;# 
  1110  0098                     	;# 
  1111  0099                     	;# 
  1112  009C                     	;# 
  1113  009D                     	;# 
  1114  009F                     	;# 
  1115  0108                     	;# 
  1116  0109                     	;# 
  1117  010C                     	;# 
  1118  010C                     	;# 
  1119  010D                     	;# 
  1120  010D                     	;# 
  1121  010E                     	;# 
  1122  010F                     	;# 
  1123  0185                     	;# 
  1124  0186                     	;# 
  1125  018C                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0009                     	;# 
  1135  000A                     	;# 
  1136  000B                     	;# 
  1137  000C                     	;# 
  1138  000D                     	;# 
  1139  000E                     	;# 
  1140  000E                     	;# 
  1141  000F                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  001D                     	;# 
  1158  001E                     	;# 
  1159  001F                     	;# 
  1160  0081                     	;# 
  1161  0085                     	;# 
  1162  0086                     	;# 
  1163  0087                     	;# 
  1164  0089                     	;# 
  1165  008C                     	;# 
  1166  008D                     	;# 
  1167  008E                     	;# 
  1168  008F                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0093                     	;# 
  1173  0093                     	;# 
  1174  0094                     	;# 
  1175  0095                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0096                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009F                     	;# 
  1184  0108                     	;# 
  1185  0109                     	;# 
  1186  010C                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010F                     	;# 
  1192  0185                     	;# 
  1193  0186                     	;# 
  1194  018C                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000D                     	;# 
  1208  000E                     	;# 
  1209  000E                     	;# 
  1210  000F                     	;# 
  1211  0010                     	;# 
  1212  0011                     	;# 
  1213  0012                     	;# 
  1214  0013                     	;# 
  1215  0014                     	;# 
  1216  0015                     	;# 
  1217  0015                     	;# 
  1218  0016                     	;# 
  1219  0017                     	;# 
  1220  0018                     	;# 
  1221  0019                     	;# 
  1222  001A                     	;# 
  1223  001B                     	;# 
  1224  001B                     	;# 
  1225  001C                     	;# 
  1226  001D                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  0081                     	;# 
  1230  0085                     	;# 
  1231  0086                     	;# 
  1232  0087                     	;# 
  1233  0089                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0093                     	;# 
  1243  0094                     	;# 
  1244  0095                     	;# 
  1245  0095                     	;# 
  1246  0096                     	;# 
  1247  0096                     	;# 
  1248  0098                     	;# 
  1249  0099                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009F                     	;# 
  1253  0108                     	;# 
  1254  0109                     	;# 
  1255  010C                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  010D                     	;# 
  1259  010E                     	;# 
  1260  010F                     	;# 
  1261  0185                     	;# 
  1262  0186                     	;# 
  1263  018C                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  000E                     	;# 
  1279  000F                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0013                     	;# 
  1284  0014                     	;# 
  1285  0015                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  001D                     	;# 
  1296  001E                     	;# 
  1297  001F                     	;# 
  1298  0081                     	;# 
  1299  0085                     	;# 
  1300  0086                     	;# 
  1301  0087                     	;# 
  1302  0089                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  008F                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0093                     	;# 
  1311  0093                     	;# 
  1312  0094                     	;# 
  1313  0095                     	;# 
  1314  0095                     	;# 
  1315  0096                     	;# 
  1316  0096                     	;# 
  1317  0098                     	;# 
  1318  0099                     	;# 
  1319  009C                     	;# 
  1320  009D                     	;# 
  1321  009F                     	;# 
  1322  0108                     	;# 
  1323  0109                     	;# 
  1324  010C                     	;# 
  1325  010C                     	;# 
  1326  010D                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  010F                     	;# 
  1330  0185                     	;# 
  1331  0186                     	;# 
  1332  018C                     	;# 
  1333  001F                     _ADCON0	set	31
  1334  001E                     _ADRES	set	30
  1335  0005                     _PORTA	set	5
  1336  0006                     _PORTB	set	6
  1337  0007                     _PORTC	set	7
  1338  0010                     _T1CON	set	16
  1339  000F                     _TMR1H	set	15
  1340  000E                     _TMR1L	set	14
  1341  005F                     _GIE	set	95
  1342  00F9                     _GO_nDONE	set	249
  1343  005E                     _PEIE	set	94
  1344  002E                     _RA6	set	46
  1345  002F                     _RA7	set	47
  1346  0032                     _RB2	set	50
  1347  0033                     _RB3	set	51
  1348  0034                     _RB4	set	52
  1349  0035                     _RB5	set	53
  1350  0038                     _RC0	set	56
  1351  0039                     _RC1	set	57
  1352  003C                     _RC4	set	60
  1353  003D                     _RC5	set	61
  1354  003E                     _RC6	set	62
  1355  003F                     _RC7	set	63
  1356  0060                     _TMR1IF	set	96
  1357  009F                     _ADCON1	set	159
  1358  009D                     _FVRCON	set	157
  1359  0090                     _OSCCON	set	144
  1360  0085                     _TRISA	set	133
  1361  0086                     _TRISB	set	134
  1362  0087                     _TRISC	set	135
  1363  0095                     _WPUB	set	149
  1364  0408                     _PS0	set	1032
  1365  0409                     _PS1	set	1033
  1366  040A                     _PS2	set	1034
  1367  040B                     _PSA	set	1035
  1368  0460                     _TMR1IE	set	1120
  1369  0185                     _ANSELA	set	389
  1370  0186                     _ANSELB	set	390
  1371                           
  1372                           	psect	text0
  1373  0000                     __ptext0:	
  1374                           ; #config settings
  1375                           
  1376                           
  1377                           ;psect for function _TMR1_ISR
  1378  0000                     
  1379                           	psect	cinit
  1380  0013                     start_initialization:	
  1381  0013                     __initialization:	
  1382                           
  1383                           ; Clear objects allocated to COMMON
  1384  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1385  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1386  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1387  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1388                           
  1389                           ; Clear objects allocated to BANK0
  1390  0017  1383               	bcf	3,7	;select IRP bank0
  1391  0018  3020               	movlw	low __pbssBANK0
  1392  0019  0084               	movwf	4
  1393  001A  3057               	movlw	low (__pbssBANK0+55)
  1394  001B  158A  2135  118A   	fcall	clear_ram0
  1395                           
  1396                           ; Clear objects allocated to BANK1
  1397  001E  30A0               	movlw	low __pbssBANK1
  1398  001F  0084               	movwf	4
  1399  0020  30EE               	movlw	low (__pbssBANK1+78)
  1400  0021  158A  2135  118A   	fcall	clear_ram0
  1401                           
  1402                           ; Clear objects allocated to BANK2
  1403  0024  1783               	bsf	3,7	;select IRP bank2
  1404  0025  3020               	movlw	low __pbssBANK2
  1405  0026  0084               	movwf	4
  1406  0027  302A               	movlw	low (__pbssBANK2+10)
  1407  0028  158A  2135         	fcall	clear_ram0
  1408  002A                     end_of_initialization:	
  1409                           ;End of C runtime variable initialization code
  1410                           
  1411  002A                     __end_of__initialization:	
  1412  002A  0183               	clrf	3
  1413  002B  158A  2F05         	ljmp	_main	;jump to C main() function
  1414                           
  1415                           	psect	bssCOMMON
  1416  0076                     __pbssCOMMON:	
  1417  0076                     _LED:	
  1418  0076                     	ds	1
  1419  0077                     _Light:	
  1420  0077                     	ds	1
  1421  0078                     _Lights:	
  1422  0078                     	ds	1
  1423  0079                     _Sw:	
  1424  0079                     	ds	1
  1425                           
  1426                           	psect	bssBANK0
  1427  0020                     __pbssBANK0:	
  1428  0020                     _Buz1:	
  1429  0020                     	ds	12
  1430  002C                     _SYSC:	
  1431  002C                     	ds	5
  1432  0031                     _myMain:	
  1433  0031                     	ds	5
  1434  0036                     __CDS:	
  1435  0036                     	ds	4
  1436  003A                     _Timer1:	
  1437  003A                     	ds	3
  1438  003D                     _WDT:	
  1439  003D                     	ds	2
  1440  003F                     _Cmd:	
  1441  003F                     	ds	1
  1442  0040                     _LightsControl:	
  1443  0040                     	ds	1
  1444  0041                     _SwDetect:	
  1445  0041                     	ds	1
  1446  0042                     _Temp:	
  1447  0042                     	ds	7
  1448  0049                     _Lights1:	
  1449  0049                     	ds	5
  1450  004E                     _Lights2:	
  1451  004E                     	ds	5
  1452  0053                     _VarErrLED:	
  1453  0053                     	ds	4
  1454                           
  1455                           	psect	bssBANK1
  1456  00A0                     __pbssBANK1:	
  1457  00A0                     __PIR:	
  1458  00A0                     	ds	42
  1459  00CA                     _Load:	
  1460  00CA                     	ds	28
  1461  00E6                     _VarLED1:	
  1462  00E6                     	ds	4
  1463  00EA                     _VarLED2:	
  1464  00EA                     	ds	4
  1465                           
  1466                           	psect	bssBANK2
  1467  0120                     __pbssBANK2:	
  1468  0120                     _Sw1:	
  1469  0120                     	ds	5
  1470  0125                     _Sw2:	
  1471  0125                     	ds	5
  1472                           
  1473                           	psect	clrtext
  1474  0935                     clear_ram0:	
  1475                           ;	Called with FSR containing the base address, and
  1476                           ;	W with the last address+1
  1477                           
  1478  0935  0064               	clrwdt	;clear the watchdog before getting into this loop
  1479  0936                     clrloop0:	
  1480  0936  0180               	clrf	0	;clear RAM location pointed to by FSR
  1481  0937  0A84               	incf	4,f	;increment pointer
  1482  0938  0604               	xorwf	4,w	;XOR with final address
  1483  0939  1903               	btfsc	3,2	;have we reached the end yet?
  1484  093A  3400               	retlw	0	;all done for this memory range, return
  1485  093B  0604               	xorwf	4,w	;XOR again to restore value
  1486  093C  2936               	goto	clrloop0	;do the next byte
  1487                           
  1488                           	psect	cstackCOMMON
  1489  0070                     __pcstackCOMMON:	
  1490  0070                     ?_setLED_Initialization:	
  1491  0070                     ?_setLED_Main:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_Fosc_Set:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_IO_Set:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_TMR1_Set:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_ADC_Set:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_WDT_Set:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_TMR1_ISR:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ??_TMR1_ISR:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_Timeout_Counter:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_set_TimeoutCleared:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_WDT_Clearing:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_myMain_Initialization:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_SYSC_Initialization:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_Temp_Initialization:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_Load_Initialization:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_Lights_Initialization:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_PIR_Initialization:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_Switch_Initialization:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_DetectSYSC_Signal:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_getLoad_AD:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_getTemp_AD:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_my_MainTimer:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_SYSC_Main:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_Temp_Main:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_Load_Main:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ?_Lights_Main:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_Switch_Main:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_PIR_Main:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_Exception_Main:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_setLights_SwOn:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ?_setLights_SwOff:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_setLoad_AH_AL_Restore:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0070                     ?_setTemp_Initialization:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0070                     ?_setTemp_Main:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0070                     ?_setSYSC_Initialization:	
  1594                           ; 0 bytes @ 0x0
  1595                           
  1596  0070                     ?_setSYSC_Main:	
  1597                           ; 0 bytes @ 0x0
  1598                           
  1599  0070                     ?_setSw_Main:	
  1600                           ; 0 bytes @ 0x0
  1601                           
  1602  0070                     ?_setLights_Initialization:	
  1603                           ; 0 bytes @ 0x0
  1604                           
  1605  0070                     ?_setLights_Main:	
  1606                           ; 0 bytes @ 0x0
  1607                           
  1608  0070                     ?_Lights_Control:	
  1609                           ; 0 bytes @ 0x0
  1610                           
  1611  0070                     ?_setLights_Line:	
  1612                           ; 0 bytes @ 0x0
  1613                           
  1614  0070                     ?_Buzzer_Initialization:	
  1615                           ; 0 bytes @ 0x0
  1616                           
  1617  0070                     ?_Buzzer_Main:	
  1618                           ; 0 bytes @ 0x0
  1619                           
  1620  0070                     ?_CDS_Initialization:	
  1621                           ; 0 bytes @ 0x0
  1622                           
  1623  0070                     ?_CDS_Main:	
  1624                           ; 0 bytes @ 0x0
  1625                           
  1626  0070                     ?_LedPointSelect:	
  1627                           ; 0 bytes @ 0x0
  1628                           
  1629  0070                     ?_LED_Initialization:	
  1630                           ; 0 bytes @ 0x0
  1631                           
  1632  0070                     ?_LED_Main:	
  1633                           ; 0 bytes @ 0x0
  1634                           
  1635  0070                     ?_Mcu_Initialization:	
  1636                           ; 0 bytes @ 0x0
  1637                           
  1638  0070                     ?_ISR:	
  1639                           ; 0 bytes @ 0x0
  1640                           
  1641  0070                     ??_ISR:	
  1642                           ; 0 bytes @ 0x0
  1643                           
  1644  0070                     ?_WDT_Main:	
  1645                           ; 0 bytes @ 0x0
  1646                           
  1647  0070                     ?_TouchPower:	
  1648                           ; 0 bytes @ 0x0
  1649                           
  1650  0070                     ?_SwPointSelect:	
  1651                           ; 0 bytes @ 0x0
  1652                           
  1653  0070                     ?_LightsPointSelect:	
  1654                           ; 0 bytes @ 0x0
  1655                           
  1656  0070                     ?_getLights_Status:	
  1657                           ; 0 bytes @ 0x0
  1658                           
  1659  0070                     ?_getAll_Lights_Line:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?_getLight_LoadGO:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ?_getLight_Load_Status:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ?_getSw_KeyStatus:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_getLights_Allow_Condition:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ?_getCDS_Status:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?_getMain_All_LightsStatus:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ?_getMain_All_Error_Status:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_getMain_Lights_Count:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0070                     ?_getLoad_OK:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0070                     getLights_Allow_Condition@lights:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692                           
  1693                           ; 1 bytes @ 0x0
  1694  0070                     	ds	4
  1695  0074                     ??_Fosc_Set:	
  1696  0074                     ??_IO_Set:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  0074                     ??_TMR1_Set:	
  1700                           ; 0 bytes @ 0x4
  1701                           
  1702  0074                     ??_ADC_Set:	
  1703                           ; 0 bytes @ 0x4
  1704                           
  1705  0074                     ??_WDT_Set:	
  1706                           ; 0 bytes @ 0x4
  1707                           
  1708  0074                     ??_Timeout_Counter:	
  1709                           ; 0 bytes @ 0x4
  1710                           
  1711  0074                     ??_set_TimeoutCleared:	
  1712                           ; 0 bytes @ 0x4
  1713                           
  1714  0074                     ??_WDT_Clearing:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0074                     ??_myMain_Initialization:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0074                     ??_SYSC_Initialization:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0074                     ??_Temp_Initialization:	
  1724                           ; 0 bytes @ 0x4
  1725                           
  1726  0074                     ??_PIR_Initialization:	
  1727                           ; 0 bytes @ 0x4
  1728                           
  1729  0074                     ??_Switch_Initialization:	
  1730                           ; 0 bytes @ 0x4
  1731                           
  1732  0074                     ??_DetectSYSC_Signal:	
  1733                           ; 0 bytes @ 0x4
  1734                           
  1735  0074                     ??_getAll_Lights_Line:	
  1736                           ; 0 bytes @ 0x4
  1737                           
  1738  0074                     ??_setLoad_AH_AL_Restore:	
  1739                           ; 0 bytes @ 0x4
  1740                           
  1741  0074                     ??_getLight_LoadGO:	
  1742                           ; 0 bytes @ 0x4
  1743                           
  1744  0074                     ??_getLight_Load_Status:	
  1745                           ; 0 bytes @ 0x4
  1746                           
  1747  0074                     ??_setTemp_Initialization:	
  1748                           ; 0 bytes @ 0x4
  1749                           
  1750  0074                     ??_setSYSC_Initialization:	
  1751                           ; 0 bytes @ 0x4
  1752                           
  1753  0074                     ??_getSw_KeyStatus:	
  1754                           ; 0 bytes @ 0x4
  1755                           
  1756  0074                     ??_setLights_Line:	
  1757                           ; 0 bytes @ 0x4
  1758                           
  1759  0074                     ??_Buzzer_Initialization:	
  1760                           ; 0 bytes @ 0x4
  1761                           
  1762  0074                     ??_Buzzer_Main:	
  1763                           ; 0 bytes @ 0x4
  1764                           
  1765  0074                     ??_CDS_Initialization:	
  1766                           ; 0 bytes @ 0x4
  1767                           
  1768  0074                     ??_getCDS_Status:	
  1769                           ; 0 bytes @ 0x4
  1770                           
  1771  0074                     ??_LedPointSelect:	
  1772                           ; 0 bytes @ 0x4
  1773                           
  1774  0074                     ??_WDT_Main:	
  1775                           ; 0 bytes @ 0x4
  1776                           
  1777  0074                     ??_getMain_All_LightsStatus:	
  1778                           ; 0 bytes @ 0x4
  1779                           
  1780  0074                     ??_getMain_All_Error_Status:	
  1781                           ; 0 bytes @ 0x4
  1782                           
  1783  0074                     ??_getMain_Lights_Count:	
  1784                           ; 0 bytes @ 0x4
  1785                           
  1786  0074                     ??_getLoad_OK:	
  1787                           ; 0 bytes @ 0x4
  1788                           
  1789  0074                     ??_TouchPower:	
  1790                           ; 0 bytes @ 0x4
  1791                           
  1792  0074                     ??_SwPointSelect:	
  1793                           ; 0 bytes @ 0x4
  1794                           
  1795  0074                     ??_LightsPointSelect:	
  1796                           ; 0 bytes @ 0x4
  1797                           
  1798  0074                     ??___wmul:	
  1799                           ; 0 bytes @ 0x4
  1800                           
  1801  0074                     ??___awdiv:	
  1802                           ; 0 bytes @ 0x4
  1803                           
  1804  0074                     ??___lwdiv:	
  1805                           ; 0 bytes @ 0x4
  1806                           
  1807  0074                     ?_getAD:	
  1808                           ; 0 bytes @ 0x4
  1809                           
  1810  0074                     getCDS_Status@status:	
  1811                           ; 1 bytes @ 0x4
  1812                           
  1813  0074                     getAD@adcon1:	
  1814                           ; 1 bytes @ 0x4
  1815                           
  1816  0074                     getMain_All_LightsStatus@status:	
  1817                           ; 1 bytes @ 0x4
  1818                           
  1819  0074                     getLoad_OK@ok:	
  1820                           ; 1 bytes @ 0x4
  1821                           
  1822  0074                     getSw_KeyStatus@status:	
  1823                           ; 1 bytes @ 0x4
  1824                           
  1825  0074                     setLights_Line@lights:	
  1826                           ; 1 bytes @ 0x4
  1827                           
  1828  0074                     getLight_LoadGO@loadgo:	
  1829                           ; 1 bytes @ 0x4
  1830                           
  1831  0074                     getLight_Load_Status@loadstatus:	
  1832                           ; 1 bytes @ 0x4
  1833                           
  1834  0074                     ___wmul@product:	
  1835                           ; 1 bytes @ 0x4
  1836                           
  1837                           
  1838                           ; 2 bytes @ 0x4
  1839  0074                     	ds	1
  1840  0075                     ??_getAD:	
  1841  0075                     ??_SYSC_Main:	
  1842                           ; 0 bytes @ 0x5
  1843                           
  1844  0075                     ??_setSYSC_Main:	
  1845                           ; 0 bytes @ 0x5
  1846                           
  1847  0075                     ??_getLights_Allow_Condition:	
  1848                           ; 0 bytes @ 0x5
  1849                           
  1850  0075                     ??_setBuz:	
  1851                           ; 0 bytes @ 0x5
  1852                           
  1853  0075                     ??_Mcu_Initialization:	
  1854                           ; 0 bytes @ 0x5
  1855                           
  1856  0075                     LedPointSelect@led:	
  1857                           ; 0 bytes @ 0x5
  1858                           
  1859  0075                     getAD@adcon0:	
  1860                           ; 1 bytes @ 0x5
  1861                           
  1862  0075                     setLoad_AH_AL_Restore@i:	
  1863                           ; 1 bytes @ 0x5
  1864                           
  1865  0075                     SwPointSelect@sw:	
  1866                           ; 1 bytes @ 0x5
  1867                           
  1868  0075                     getSw_KeyStatus@sw:	
  1869                           ; 1 bytes @ 0x5
  1870                           
  1871  0075                     LightsPointSelect@lights:	
  1872                           ; 1 bytes @ 0x5
  1873                           
  1874  0075                     getAll_Lights_Line@line:	
  1875                           ; 1 bytes @ 0x5
  1876                           
  1877                           
  1878                           ; 1 bytes @ 0x5
  1879  0075                     	ds	1
  1880  0076                     ??_setLED_Initialization:	
  1881  0076                     ??_setLED:	
  1882                           ; 0 bytes @ 0x6
  1883                           
  1884  0076                     ??_Load_Initialization:	
  1885                           ; 0 bytes @ 0x6
  1886                           
  1887  0076                     ??_Lights_Initialization:	
  1888                           ; 0 bytes @ 0x6
  1889                           
  1890  0076                     ??_Temp_Main:	
  1891                           ; 0 bytes @ 0x6
  1892                           
  1893  0076                     ??_Lights_Main:	
  1894                           ; 0 bytes @ 0x6
  1895                           
  1896  0076                     ??_Switch_Main:	
  1897                           ; 0 bytes @ 0x6
  1898                           
  1899  0076                     ??_getLights_Status:	
  1900                           ; 0 bytes @ 0x6
  1901                           
  1902  0076                     ??_setLights_SwOn:	
  1903                           ; 0 bytes @ 0x6
  1904                           
  1905  0076                     ??_setLights_SwOff:	
  1906                           ; 0 bytes @ 0x6
  1907                           
  1908  0076                     ??_setLights_Initialization:	
  1909                           ; 0 bytes @ 0x6
  1910                           
  1911  0076                     ??_setLights_Main:	
  1912                           ; 0 bytes @ 0x6
  1913                           
  1914  0076                     ??_LED_Initialization:	
  1915                           ; 0 bytes @ 0x6
  1916                           
  1917  0076                     ??_LED_Main:	
  1918                           ; 0 bytes @ 0x6
  1919                           
  1920                           
  1921                           	psect	cstackBANK0
  1922  0057                     __pcstackBANK0:	
  1923                           ; 0 bytes @ 0x6
  1924                           
  1925  0057                     ??_setLED_Main:	
  1926  0057                     ?_setLED:	
  1927                           ; 0 bytes @ 0x0
  1928                           
  1929  0057                     ??_getLoad_AD:	
  1930                           ; 0 bytes @ 0x0
  1931                           
  1932  0057                     ??_getTemp_AD:	
  1933                           ; 0 bytes @ 0x0
  1934                           
  1935  0057                     ??_CDS_Main:	
  1936                           ; 0 bytes @ 0x0
  1937                           
  1938  0057                     ?_getCDS_AD:	
  1939                           ; 0 bytes @ 0x0
  1940                           
  1941  0057                     ?_setLights_Trigger:	
  1942                           ; 0 bytes @ 0x0
  1943                           
  1944  0057                     ?___wmul:	
  1945                           ; 0 bytes @ 0x0
  1946                           
  1947  0057                     ?___awdiv:	
  1948                           ; 2 bytes @ 0x0
  1949                           
  1950  0057                     ?___lwdiv:	
  1951                           ; 2 bytes @ 0x0
  1952                           
  1953  0057                     getCDS_AD@channel2:	
  1954                           ; 2 bytes @ 0x0
  1955                           
  1956  0057                     setLED@command:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0057                     getMain_Lights_Count@count:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0057                     setLights_Initialization@lights:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0057                     getLights_Status@lights:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0057                     setLights_Trigger@command:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0057                     getLights_Allow_Condition@allow:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0057                     _getMain_All_Error_Status$2426:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0057                     ___wmul@multiplier:	
  1978                           ; 2 bytes @ 0x0
  1979                           
  1980  0057                     ___awdiv@divisor:	
  1981                           ; 2 bytes @ 0x0
  1982                           
  1983  0057                     ___lwdiv@divisor:	
  1984                           ; 2 bytes @ 0x0
  1985                           
  1986                           
  1987                           ; 2 bytes @ 0x0
  1988  0057                     	ds	1
  1989  0058                     ??_getCDS_AD:	
  1990  0058                     ??_setLights_Trigger:	
  1991                           ; 0 bytes @ 0x1
  1992                           
  1993  0058                     setLED@led:	
  1994                           ; 0 bytes @ 0x1
  1995                           
  1996  0058                     getMain_Lights_Count@status1:	
  1997                           ; 1 bytes @ 0x1
  1998                           
  1999  0058                     getLights_Status@status:	
  2000                           ; 1 bytes @ 0x1
  2001                           
  2002  0058                     _getLights_Allow_Condition$4827:	
  2003                           ; 1 bytes @ 0x1
  2004                           
  2005                           
  2006                           ; 1 bytes @ 0x1
  2007  0058                     	ds	1
  2008  0059                     ?_setLights:	
  2009  0059                     setLED_Initialization@led:	
  2010                           ; 0 bytes @ 0x2
  2011                           
  2012  0059                     setLED_Main@led:	
  2013                           ; 1 bytes @ 0x2
  2014                           
  2015  0059                     getMain_Lights_Count@status2:	
  2016                           ; 1 bytes @ 0x2
  2017                           
  2018  0059                     getLoad_AD@channel:	
  2019                           ; 1 bytes @ 0x2
  2020                           
  2021  0059                     getTemp_AD@channel:	
  2022                           ; 1 bytes @ 0x2
  2023                           
  2024  0059                     setLights@status:	
  2025                           ; 1 bytes @ 0x2
  2026                           
  2027  0059                     setLights_Trigger@lights:	
  2028                           ; 1 bytes @ 0x2
  2029                           
  2030  0059                     _getMain_All_Error_Status$2427:	
  2031                           ; 1 bytes @ 0x2
  2032                           
  2033  0059                     ___wmul@multiplicand:	
  2034                           ; 2 bytes @ 0x2
  2035                           
  2036  0059                     ___awdiv@dividend:	
  2037                           ; 2 bytes @ 0x2
  2038                           
  2039  0059                     ___lwdiv@dividend:	
  2040                           ; 2 bytes @ 0x2
  2041                           
  2042                           
  2043                           ; 2 bytes @ 0x2
  2044  0059                     	ds	1
  2045  005A                     ??_setLights:	
  2046  005A                     getCDS_AD@i:	
  2047                           ; 0 bytes @ 0x3
  2048                           
  2049  005A                     getLoad_AD@k:	
  2050                           ; 1 bytes @ 0x3
  2051                           
  2052  005A                     getTemp_AD@ADRES:	
  2053                           ; 1 bytes @ 0x3
  2054                           
  2055  005A                     setLights_SwOn@sw:	
  2056                           ; 1 bytes @ 0x3
  2057                           
  2058  005A                     setLights_SwOff@sw:	
  2059                           ; 1 bytes @ 0x3
  2060                           
  2061                           
  2062                           ; 1 bytes @ 0x3
  2063  005A                     	ds	1
  2064  005B                     getCDS_AD@j:	
  2065  005B                     getMain_All_Error_Status@command:	
  2066                           ; 1 bytes @ 0x4
  2067                           
  2068  005B                     getLoad_AD@j:	
  2069                           ; 1 bytes @ 0x4
  2070                           
  2071  005B                     setLights@lights:	
  2072                           ; 1 bytes @ 0x4
  2073                           
  2074  005B                     ___awdiv@counter:	
  2075                           ; 1 bytes @ 0x4
  2076                           
  2077  005B                     ___lwdiv@counter:	
  2078                           ; 1 bytes @ 0x4
  2079                           
  2080                           
  2081                           ; 1 bytes @ 0x4
  2082  005B                     	ds	1
  2083  005C                     getCDS_AD@channel1:	
  2084  005C                     getMain_All_Error_Status@status:	
  2085                           ; 1 bytes @ 0x5
  2086                           
  2087  005C                     getLoad_AD@ADRES:	
  2088                           ; 1 bytes @ 0x5
  2089                           
  2090  005C                     setLights_Main@lights:	
  2091                           ; 1 bytes @ 0x5
  2092                           
  2093  005C                     ___awdiv@sign:	
  2094                           ; 1 bytes @ 0x5
  2095                           
  2096  005C                     ___lwdiv@quotient:	
  2097                           ; 1 bytes @ 0x5
  2098                           
  2099                           
  2100                           ; 2 bytes @ 0x5
  2101  005C                     	ds	1
  2102  005D                     ??_PIR_Main:	
  2103  005D                     ??_setSw_Main:	
  2104                           ; 0 bytes @ 0x6
  2105                           
  2106  005D                     getLoad_AD@i:	
  2107                           ; 0 bytes @ 0x6
  2108                           
  2109  005D                     ___awdiv@quotient:	
  2110                           ; 1 bytes @ 0x6
  2111                           
  2112                           
  2113                           ; 2 bytes @ 0x6
  2114  005D                     	ds	1
  2115  005E                     ??_Load_Main:	
  2116                           
  2117                           ; 0 bytes @ 0x7
  2118  005E                     	ds	1
  2119  005F                     ?_getPIR_AD:	
  2120  005F                     ??_Lights_Control:	
  2121                           ; 0 bytes @ 0x8
  2122                           
  2123  005F                     ?_setBuz:	
  2124                           ; 0 bytes @ 0x8
  2125                           
  2126  005F                     getPIR_AD@channel2:	
  2127                           ; 0 bytes @ 0x8
  2128                           
  2129  005F                     setSw_Main@sw:	
  2130                           ; 1 bytes @ 0x8
  2131                           
  2132  005F                     setBuz@time:	
  2133                           ; 1 bytes @ 0x8
  2134                           
  2135                           
  2136                           ; 2 bytes @ 0x8
  2137  005F                     	ds	1
  2138  0060                     ??_getPIR_AD:	
  2139  0060                     Load_Main@error:	
  2140                           ; 0 bytes @ 0x9
  2141                           
  2142                           
  2143                           ; 1 bytes @ 0x9
  2144  0060                     	ds	1
  2145  0061                     setBuz@count:	
  2146  0061                     PIR_Main@error:	
  2147                           ; 1 bytes @ 0xA
  2148                           
  2149  0061                     Lights_Control@lights:	
  2150                           ; 1 bytes @ 0xA
  2151                           
  2152  0061                     _Load_Main$2716:	
  2153                           ; 1 bytes @ 0xA
  2154                           
  2155                           
  2156                           ; 2 bytes @ 0xA
  2157  0061                     	ds	1
  2158  0062                     ??_my_MainTimer:	
  2159  0062                     ??_Exception_Main:	
  2160                           ; 0 bytes @ 0xB
  2161                           
  2162  0062                     ??_setTemp_Main:	
  2163                           ; 0 bytes @ 0xB
  2164                           
  2165  0062                     PIR_Main@cds:	
  2166                           ; 0 bytes @ 0xB
  2167                           
  2168                           
  2169                           ; 1 bytes @ 0xB
  2170  0062                     	ds	1
  2171  0063                     Exception_Main@lights:	
  2172  0063                     Load_Main@ErrorCountValue:	
  2173                           ; 1 bytes @ 0xC
  2174                           
  2175  0063                     setTemp_Main@error:	
  2176                           ; 1 bytes @ 0xC
  2177                           
  2178  0063                     getPIR_AD@j:	
  2179                           ; 1 bytes @ 0xC
  2180                           
  2181  0063                     _PIR_Main$3238:	
  2182                           ; 1 bytes @ 0xC
  2183                           
  2184                           
  2185                           ; 2 bytes @ 0xC
  2186  0063                     	ds	1
  2187  0064                     Exception_Main@count:	
  2188  0064                     Load_Main@Load_RunStatus:	
  2189                           ; 1 bytes @ 0xD
  2190                           
  2191  0064                     setTemp_Main@TempGO:	
  2192                           ; 1 bytes @ 0xD
  2193                           
  2194  0064                     getPIR_AD@channel1:	
  2195                           ; 1 bytes @ 0xD
  2196                           
  2197                           
  2198                           ; 1 bytes @ 0xD
  2199  0064                     	ds	1
  2200  0065                     Exception_Main@error:	
  2201  0065                     Load_Main@LightsCount:	
  2202                           ; 1 bytes @ 0xE
  2203                           
  2204  0065                     setTemp_Main@SafeValue:	
  2205                           ; 1 bytes @ 0xE
  2206                           
  2207  0065                     PIR_Main@Enable_Switch:	
  2208                           ; 1 bytes @ 0xE
  2209                           
  2210  0065                     getPIR_AD@VRAD1:	
  2211                           ; 1 bytes @ 0xE
  2212                           
  2213                           
  2214                           ; 1 bytes @ 0xE
  2215  0065                     	ds	1
  2216  0066                     Exception_Main@status:	
  2217  0066                     setTemp_Main@DangerValue:	
  2218                           ; 1 bytes @ 0xF
  2219                           
  2220  0066                     PIR_Main@TriggerValue:	
  2221                           ; 1 bytes @ 0xF
  2222                           
  2223  0066                     getPIR_AD@VRAD:	
  2224                           ; 1 bytes @ 0xF
  2225                           
  2226  0066                     Load_Main@i:	
  2227                           ; 1 bytes @ 0xF
  2228                           
  2229                           
  2230                           ; 2 bytes @ 0xF
  2231  0066                     	ds	1
  2232  0067                     setTemp_Main@AD:	
  2233  0067                     PIR_Main@LightsStatus:	
  2234                           ; 1 bytes @ 0x10
  2235                           
  2236  0067                     getPIR_AD@i:	
  2237                           ; 1 bytes @ 0x10
  2238                           
  2239  0067                     Exception_Main@i:	
  2240                           ; 1 bytes @ 0x10
  2241                           
  2242                           
  2243                           ; 2 bytes @ 0x10
  2244  0067                     	ds	2
  2245  0069                     Exception_Main@i_2440:	
  2246                           
  2247                           ; 2 bytes @ 0x12
  2248  0069                     	ds	2
  2249  006B                     ?_main:	
  2250  006B                     main@argc:	
  2251                           ; 2 bytes @ 0x14
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0x14
  2255  006B                     	ds	2
  2256  006D                     main@argv:	
  2257                           
  2258                           ; 2 bytes @ 0x16
  2259  006D                     	ds	2
  2260  006F                     ??_main:	
  2261                           
  2262                           ; 0 bytes @ 0x18
  2263  006F                     	ds	1
  2264                           
  2265                           	psect	maintext
  2266  0F05                     __pmaintext:	
  2267 ;;
  2268 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2269 ;;
  2270 ;; *************** function _main *****************
  2271 ;; Defined at:
  2272 ;;		line 7 in file "../src/Main_B1.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  argc            2   20[BANK0 ] int 
  2275 ;;  argv            2   22[BANK0 ] PTR PTR unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  2   20[BANK0 ] int 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 17F/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2287 ;;      Params:         0       4       0       0
  2288 ;;      Locals:         0       0       0       0
  2289 ;;      Temps:          0       1       0       0
  2290 ;;      Totals:         0       5       0       0
  2291 ;;Total ram usage:        5 bytes
  2292 ;; Hardware stack levels required when called:    7
  2293 ;; This function calls:
  2294 ;;		_Buzzer_Initialization
  2295 ;;		_Buzzer_Main
  2296 ;;		_CDS_Initialization
  2297 ;;		_CDS_Main
  2298 ;;		_DetectSYSC_Signal
  2299 ;;		_Exception_Main
  2300 ;;		_LED_Initialization
  2301 ;;		_LED_Main
  2302 ;;		_Lights_Initialization
  2303 ;;		_Lights_Main
  2304 ;;		_Load_Initialization
  2305 ;;		_Load_Main
  2306 ;;		_Mcu_Initialization
  2307 ;;		_PIR_Initialization
  2308 ;;		_PIR_Main
  2309 ;;		_SYSC_Initialization
  2310 ;;		_SYSC_Main
  2311 ;;		_Switch_Initialization
  2312 ;;		_Switch_Main
  2313 ;;		_Temp_Initialization
  2314 ;;		_Temp_Main
  2315 ;;		_WDT_Main
  2316 ;;		_getCDS_AD
  2317 ;;		_getLoad_AD
  2318 ;;		_getPIR_AD
  2319 ;;		_getTemp_AD
  2320 ;;		_myMain_Initialization
  2321 ;;		_my_MainTimer
  2322 ;; This function is called by:
  2323 ;;		Startup code after reset
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function _main
  2329  0F05                     _main:	
  2330                           
  2331                           ;Main_B1.c: 8: myMain_Initialization();
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2335  0F05  158A  20DC  158A   	fcall	_myMain_Initialization
  2336                           
  2337                           ;Main_B1.c: 9: Mcu_Initialization();
  2338  0F08  158A  21A4  158A   	fcall	_Mcu_Initialization
  2339                           
  2340                           ;Main_B1.c: 10: ;;
  2341                           ;Main_B1.c: 11: LED_Initialization();
  2342  0F0B  158A  2153  158A   	fcall	_LED_Initialization
  2343                           
  2344                           ;Main_B1.c: 12: Buzzer_Initialization();
  2345  0F0E  158A  20EC  158A   	fcall	_Buzzer_Initialization
  2346                           
  2347                           ;Main_B1.c: 14: SYSC_Initialization();
  2348  0F11  158A  20E0  158A   	fcall	_SYSC_Initialization
  2349                           
  2350                           ;Main_B1.c: 15: Temp_Initialization();
  2351  0F14  158A  20E6  158A   	fcall	_Temp_Initialization
  2352                           
  2353                           ;Main_B1.c: 16: Load_Initialization();
  2354  0F17  158A  20DD  158A   	fcall	_Load_Initialization
  2355                           
  2356                           ;Main_B1.c: 17: ;;
  2357                           ;Main_B1.c: 18: ;;
  2358                           ;Main_B1.c: 20: ;;
  2359                           ;Main_B1.c: 21: Lights_Initialization();
  2360  0F1A  158A  211D  158A   	fcall	_Lights_Initialization
  2361                           
  2362                           ;Main_B1.c: 22: CDS_Initialization();
  2363  0F1D  158A  20F0  158A   	fcall	_CDS_Initialization
  2364                           
  2365                           ;Main_B1.c: 23: PIR_Initialization();
  2366  0F20  158A  213D  158A   	fcall	_PIR_Initialization
  2367                           
  2368                           ;Main_B1.c: 24: Switch_Initialization();
  2369  0F23  158A  20DA  158A   	fcall	_Switch_Initialization
  2370  0F26                     l6181:	
  2371                           ;Main_B1.c: 25: ;;
  2372                           ;Main_B1.c: 26: ;;
  2373                           ;Main_B1.c: 27: ;;
  2374                           ;Main_B1.c: 28: ;;
  2375                           ;Main_B1.c: 30: while (1) {
  2376                           
  2377                           
  2378                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2379  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0F28  1C31               	btfss	_myMain,0
  2382  0F29  2F49               	goto	l6193
  2383                           
  2384                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2385  0F2A  158A  216B  158A   	fcall	_DetectSYSC_Signal
  2386                           
  2387                           ;Main_B1.c: 38: getLoad_AD(0x31);
  2388  0F2D  3031               	movlw	49
  2389  0F2E  158A  26A9  158A   	fcall	_getLoad_AD
  2390                           
  2391                           ;Main_B1.c: 42: getTemp_AD(0x21);
  2392  0F31  3021               	movlw	33
  2393  0F32  158A  23D4  158A   	fcall	_getTemp_AD
  2394                           
  2395                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x11);
  2396  0F35  3011               	movlw	17
  2397  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  2399  0F38  00EF               	movwf	??_main
  2400  0F39  086F               	movf	??_main,w
  2401  0F3A  00D7               	movwf	getCDS_AD@channel2
  2402  0F3B  3009               	movlw	9
  2403  0F3C  158A  2344  158A   	fcall	_getCDS_AD
  2404                           
  2405                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2406  0F3F  300D               	movlw	13
  2407  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0F42  00EF               	movwf	??_main
  2410  0F43  086F               	movf	??_main,w
  2411  0F44  00DF               	movwf	getPIR_AD@channel2
  2412  0F45  3005               	movlw	5
  2413  0F46  118A  23B5  158A   	fcall	_getPIR_AD
  2414  0F49                     l6193:	
  2415                           
  2416                           ;Main_B1.c: 57: }
  2417                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2418  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0F4B  1C3A               	btfss	_Timer1,0
  2421  0F4C  2F26               	goto	l6181
  2422                           
  2423                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2424  0F4D  103A               	bcf	_Timer1,0
  2425                           
  2426                           ;Main_B1.c: 96: my_MainTimer();
  2427  0F4E  158A  2366  158A   	fcall	_my_MainTimer
  2428                           
  2429                           ;Main_B1.c: 97: WDT_Main();
  2430  0F51  158A  21E4  158A   	fcall	_WDT_Main
  2431                           
  2432                           ;Main_B1.c: 98: ;;
  2433                           ;Main_B1.c: 99: ;;
  2434                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2435  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0F56  1C31               	btfss	_myMain,0
  2438  0F57  2F26               	goto	l6181
  2439                           
  2440                           ;Main_B1.c: 101: ;;
  2441                           ;Main_B1.c: 103: LED_Main();
  2442  0F58  158A  215F  158A   	fcall	_LED_Main
  2443                           
  2444                           ;Main_B1.c: 104: Buzzer_Main();
  2445  0F5B  158A  258C  158A   	fcall	_Buzzer_Main
  2446                           
  2447                           ;Main_B1.c: 106: SYSC_Main();
  2448  0F5E  158A  20E3  158A   	fcall	_SYSC_Main
  2449                           
  2450                           ;Main_B1.c: 107: Temp_Main();
  2451  0F61  158A  20E9  158A   	fcall	_Temp_Main
  2452                           
  2453                           ;Main_B1.c: 108: Load_Main();
  2454  0F64  118A  202D  158A   	fcall	_Load_Main
  2455                           
  2456                           ;Main_B1.c: 109: ;;
  2457                           ;Main_B1.c: 111: Lights_Main();
  2458  0F67  158A  23AE  158A   	fcall	_Lights_Main
  2459                           
  2460                           ;Main_B1.c: 112: ;;
  2461                           ;Main_B1.c: 113: Switch_Main();
  2462  0F6A  158A  2148  158A   	fcall	_Switch_Main
  2463                           
  2464                           ;Main_B1.c: 114: CDS_Main();
  2465  0F6D  158A  2461  158A   	fcall	_CDS_Main
  2466                           
  2467                           ;Main_B1.c: 115: PIR_Main();
  2468  0F70  118A  2217  158A   	fcall	_PIR_Main
  2469                           
  2470                           ;Main_B1.c: 117: ;;
  2471                           ;Main_B1.c: 118: ;;
  2472                           ;Main_B1.c: 119: ;;
  2473                           ;Main_B1.c: 120: ;;
  2474                           ;Main_B1.c: 121: Exception_Main();
  2475  0F73  118A  24E3  158A   	fcall	_Exception_Main
  2476  0F76  2F26               	goto	l6181
  2477  0F77                     __end_of_main:	
  2478                           ;Main_B1.c: 128: }
  2479                           ;Main_B1.c: 129: }
  2480                           ;Main_B1.c: 163: }
  2481                           ;Main_B1.c: 164: return (0);
  2482                           ;	Return value of _main is never used
  2483                           
  2484                           
  2485                           	psect	text1
  2486  0B66                     __ptext1:	
  2487 ;; *************** function _my_MainTimer *****************
  2488 ;; Defined at:
  2489 ;;		line 185 in file "../src/Main_B1.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;		None               void
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0, pclath, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2503 ;;      Params:         0       0       0       0
  2504 ;;      Locals:         0       0       0       0
  2505 ;;      Temps:          0       1       0       0
  2506 ;;      Totals:         0       1       0       0
  2507 ;;Total ram usage:        1 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    4
  2510 ;; This function calls:
  2511 ;;		_setBuz
  2512 ;; This function is called by:
  2513 ;;		_main
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           
  2518                           ;psect for function _my_MainTimer
  2519  0B66                     _my_MainTimer:	
  2520                           
  2521                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2525  0B66  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0B67  1303               	bcf	3,6	;RP1=0, select bank0
  2527  0B68  1831               	btfsc	_myMain,0
  2528  0B69  2B7F               	goto	l5789
  2529                           
  2530                           ;Main_B1.c: 188: myMain.PowerCount++;
  2531  0B6A  3001               	movlw	1
  2532  0B6B  00E2               	movwf	??_my_MainTimer
  2533  0B6C  0862               	movf	??_my_MainTimer,w
  2534  0B6D  07B2               	addwf	_myMain+1,f
  2535                           
  2536                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2537  0B6E  0832               	movf	_myMain+1,w
  2538  0B6F  3A4B               	xorlw	75
  2539  0B70  1D03               	skipz
  2540  0B71  0008               	return
  2541                           
  2542                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2543  0B72  01B2               	clrf	_myMain+1
  2544                           
  2545                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2546  0B73  1431               	bsf	_myMain,0
  2547                           
  2548                           ;Main_B1.c: 196: setBuz(3, 50);
  2549  0B74  3032               	movlw	50
  2550  0B75  00DF               	movwf	setBuz@time
  2551  0B76  3000               	movlw	0
  2552  0B77  00E0               	movwf	setBuz@time+1
  2553  0B78  3003               	movlw	3
  2554  0B79  158A  2614         	fcall	_setBuz
  2555                           
  2556                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2557  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0B7D  1631               	bsf	_myMain,4
  2560                           
  2561                           ;Main_B1.c: 206: }
  2562                           ;Main_B1.c: 207: } else {
  2563  0B7E  0008               	return
  2564  0B7F                     l5789:	
  2565                           
  2566                           ;Main_B1.c: 208: myMain.PowerCount++;
  2567  0B7F  3001               	movlw	1
  2568  0B80  00E2               	movwf	??_my_MainTimer
  2569  0B81  0862               	movf	??_my_MainTimer,w
  2570  0B82  07B2               	addwf	_myMain+1,f
  2571                           
  2572                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2573  0B83  0832               	movf	_myMain+1,w
  2574  0B84  3A32               	xorlw	50
  2575  0B85  1D03               	skipz
  2576  0B86  0008               	return
  2577                           
  2578                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2579  0B87  01B2               	clrf	_myMain+1
  2580  0B88  0008               	return
  2581  0B89                     __end_of_my_MainTimer:	
  2582                           
  2583                           	psect	text2
  2584  08DC                     __ptext2:	
  2585 ;; *************** function _myMain_Initialization *****************
  2586 ;; Defined at:
  2587 ;;		line 170 in file "../src/Main_B1.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;		None
  2592 ;; Return value:  Size  Location     Type
  2593 ;;		None               void
  2594 ;; Registers used:
  2595 ;;		None
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2601 ;;      Params:         0       0       0       0
  2602 ;;      Locals:         0       0       0       0
  2603 ;;      Temps:          0       0       0       0
  2604 ;;      Totals:         0       0       0       0
  2605 ;;Total ram usage:        0 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    2
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_main
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _myMain_Initialization
  2617  08DC                     _myMain_Initialization:	
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _myMain_Initialization: []
  2621  08DC  0008               	return
  2622  08DD                     __end_of_myMain_Initialization:	
  2623                           
  2624                           	psect	text3
  2625  0BD4                     __ptext3:	
  2626 ;; *************** function _getTemp_AD *****************
  2627 ;; Defined at:
  2628 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  channel         1    wreg     unsigned char 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  channel         1    2[BANK0 ] unsigned char 
  2633 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;		None               void
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2643 ;;      Params:         0       0       0       0
  2644 ;;      Locals:         0       2       0       0
  2645 ;;      Temps:          0       2       0       0
  2646 ;;      Totals:         0       4       0       0
  2647 ;;Total ram usage:        4 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    4
  2650 ;; This function calls:
  2651 ;;		_getAD
  2652 ;; This function is called by:
  2653 ;;		_main
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           
  2658                           ;psect for function _getTemp_AD
  2659  0BD4                     _getTemp_AD:	
  2660                           
  2661                           ;incstack = 0
  2662                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2663                           ;getTemp_AD@channel stored from wreg
  2664  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0BD6  00D9               	movwf	getTemp_AD@channel
  2667                           
  2668                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2669  0BD7  01DA               	clrf	getTemp_AD@ADRES
  2670                           
  2671                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2672  0BD8  1D42               	btfss	_Temp,2
  2673  0BD9  2BF2               	goto	l5695
  2674                           
  2675                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2676  0BDA  3070               	movlw	112
  2677  0BDB  00D7               	movwf	??_getTemp_AD
  2678  0BDC  0857               	movf	??_getTemp_AD,w
  2679  0BDD  00F4               	movwf	getAD@adcon1
  2680  0BDE  0859               	movf	getTemp_AD@channel,w
  2681  0BDF  158A  2328  158A   	fcall	_getAD
  2682  0BE2  1283               	bcf	3,5	;RP0=0, select bank0
  2683  0BE3  1303               	bcf	3,6	;RP1=0, select bank0
  2684  0BE4  00D8               	movwf	??_getTemp_AD+1
  2685  0BE5  0858               	movf	??_getTemp_AD+1,w
  2686  0BE6  00DA               	movwf	getTemp_AD@ADRES
  2687                           
  2688                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2689  0BE7  085A               	movf	getTemp_AD@ADRES,w
  2690  0BE8  1903               	btfsc	3,2
  2691  0BE9  2BF2               	goto	l5695
  2692                           
  2693                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2694  0BEA  085A               	movf	getTemp_AD@ADRES,w
  2695  0BEB  0248               	subwf	_Temp+6,w
  2696  0BEC  1803               	skipnc
  2697  0BED  2BF2               	goto	l5695
  2698                           
  2699                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2700  0BEE  085A               	movf	getTemp_AD@ADRES,w
  2701  0BEF  00D7               	movwf	??_getTemp_AD
  2702  0BF0  0857               	movf	??_getTemp_AD,w
  2703  0BF1  00C8               	movwf	_Temp+6
  2704  0BF2                     l5695:	
  2705                           
  2706                           ;OverTemperature_B1.c: 32: }
  2707                           ;OverTemperature_B1.c: 33: }
  2708                           ;OverTemperature_B1.c: 34: }
  2709                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0x70);
  2710  0BF2  3070               	movlw	112
  2711  0BF3  00D7               	movwf	??_getTemp_AD
  2712  0BF4  0857               	movf	??_getTemp_AD,w
  2713  0BF5  00F4               	movwf	getAD@adcon1
  2714  0BF6  0859               	movf	getTemp_AD@channel,w
  2715  0BF7  158A  2328         	fcall	_getAD
  2716  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
  2717  0BFA  1303               	bcf	3,6	;RP1=0, select bank0
  2718  0BFB  00D8               	movwf	??_getTemp_AD+1
  2719  0BFC  0858               	movf	??_getTemp_AD+1,w
  2720  0BFD  00DA               	movwf	getTemp_AD@ADRES
  2721  0BFE  0008               	return
  2722  0BFF                     __end_of_getTemp_AD:	
  2723                           
  2724                           	psect	text4
  2725  03B5                     __ptext4:	
  2726 ;; *************** function _getPIR_AD *****************
  2727 ;; Defined at:
  2728 ;;		line 342 in file "../src/PIR_B1.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  channel1        1    wreg     unsigned char 
  2731 ;;  channel2        1    8[BANK0 ] unsigned char 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  channel1        1   13[BANK0 ] unsigned char 
  2734 ;;  i               1   16[BANK0 ] unsigned char 
  2735 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2736 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2737 ;;  j               1   12[BANK0 ] unsigned char 
  2738 ;; Return value:  Size  Location     Type
  2739 ;;		None               void
  2740 ;; Registers used:
  2741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2747 ;;      Params:         0       1       0       0
  2748 ;;      Locals:         0       5       0       0
  2749 ;;      Temps:          0       3       0       0
  2750 ;;      Totals:         0       9       0       0
  2751 ;;Total ram usage:        9 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    4
  2754 ;; This function calls:
  2755 ;;		___awdiv
  2756 ;;		___lwdiv
  2757 ;;		_getAD
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           
  2764                           ;psect for function _getPIR_AD
  2765  03B5                     _getPIR_AD:	
  2766                           
  2767                           ;incstack = 0
  2768                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2769                           ;getPIR_AD@channel1 stored from wreg
  2770  03B5  1283               	bcf	3,5	;RP0=0, select bank0
  2771  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2772  03B7  00E4               	movwf	getPIR_AD@channel1
  2773                           
  2774                           ;PIR_B1.c: 343: char i = 0, j = 0;
  2775  03B8  01E7               	clrf	getPIR_AD@i
  2776  03B9  01E3               	clrf	getPIR_AD@j
  2777                           
  2778                           ;PIR_B1.c: 344: char VRAD = 0, VRAD1 = 0;
  2779  03BA  01E6               	clrf	getPIR_AD@VRAD
  2780  03BB  01E5               	clrf	getPIR_AD@VRAD1
  2781                           
  2782                           ;PIR_B1.c: 345: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2783  03BC  1683               	bsf	3,5	;RP0=1, select bank1
  2784  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  2785  03BE  1CA0               	btfss	__PIR^(0+128),1
  2786  03BF  0008               	return
  2787  03C0  1920               	btfsc	__PIR^(0+128),2
  2788  03C1  0008               	return
  2789                           
  2790                           ;PIR_B1.c: 346: _PIR.GO = 1;
  2791  03C2  1520               	bsf	__PIR^(0+128),2
  2792                           
  2793                           ;PIR_B1.c: 353: VRAD1 = getAD(channel1, 0x70);
  2794  03C3  3070               	movlw	112
  2795  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  2796  03C5  1303               	bcf	3,6	;RP1=0, select bank0
  2797  03C6  00E0               	movwf	??_getPIR_AD
  2798  03C7  0860               	movf	??_getPIR_AD,w
  2799  03C8  00F4               	movwf	getAD@adcon1
  2800  03C9  0864               	movf	getPIR_AD@channel1,w
  2801  03CA  158A  2328  118A   	fcall	_getAD
  2802  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  2803  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2804  03CF  00E1               	movwf	??_getPIR_AD+1
  2805  03D0  0861               	movf	??_getPIR_AD+1,w
  2806  03D1  00E5               	movwf	getPIR_AD@VRAD1
  2807                           
  2808                           ;PIR_B1.c: 354: VRAD = VRAD1 / 25;
  2809  03D2  3019               	movlw	25
  2810  03D3  00D7               	movwf	___awdiv@divisor
  2811  03D4  3000               	movlw	0
  2812  03D5  00D8               	movwf	___awdiv@divisor+1
  2813  03D6  0865               	movf	getPIR_AD@VRAD1,w
  2814  03D7  00E0               	movwf	??_getPIR_AD
  2815  03D8  01E1               	clrf	??_getPIR_AD+1
  2816  03D9  0860               	movf	??_getPIR_AD,w
  2817  03DA  00D9               	movwf	___awdiv@dividend
  2818  03DB  0861               	movf	??_getPIR_AD+1,w
  2819  03DC  00DA               	movwf	___awdiv@dividend+1
  2820  03DD  118A  27A3  118A   	fcall	___awdiv
  2821  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  2822  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  2823  03E2  0857               	movf	?___awdiv,w
  2824  03E3  00E2               	movwf	??_getPIR_AD+2
  2825  03E4  0862               	movf	??_getPIR_AD+2,w
  2826  03E5  00E6               	movwf	getPIR_AD@VRAD
  2827                           
  2828                           ;PIR_B1.c: 355: _PIR.SignalAD = getAD(channel2, 0x70);
  2829  03E6  3070               	movlw	112
  2830  03E7  00E0               	movwf	??_getPIR_AD
  2831  03E8  0860               	movf	??_getPIR_AD,w
  2832  03E9  00F4               	movwf	getAD@adcon1
  2833  03EA  085F               	movf	getPIR_AD@channel2,w
  2834  03EB  158A  2328  118A   	fcall	_getAD
  2835  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  2836  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  2837  03F0  00E1               	movwf	??_getPIR_AD+1
  2838  03F1  0861               	movf	??_getPIR_AD+1,w
  2839  03F2  1683               	bsf	3,5	;RP0=1, select bank1
  2840  03F3  1303               	bcf	3,6	;RP1=0, select bank1
  2841  03F4  00A1               	movwf	(__PIR^(0+128)+1)
  2842                           
  2843                           ;PIR_B1.c: 369: if (VRAD < 1) {
  2844  03F5  1283               	bcf	3,5	;RP0=0, select bank0
  2845  03F6  1303               	bcf	3,6	;RP1=0, select bank0
  2846  03F7  08E6               	movf	getPIR_AD@VRAD,f
  2847  03F8  1D03               	skipz
  2848  03F9  2BFC               	goto	l5711
  2849                           
  2850                           ;PIR_B1.c: 370: _PIR.CloseTimeValue = 5;
  2851  03FA  3005               	movlw	5
  2852  03FB  2C02               	goto	L1
  2853  03FC                     l5711:	
  2854                           ;PIR_B1.c: 371: } else if (VRAD < 3) {
  2855                           
  2856  03FC  3003               	movlw	3
  2857  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  2858  03FE  0266               	subwf	getPIR_AD@VRAD,w
  2859  03FF  1803               	skipnc
  2860  0400  2C07               	goto	l5715
  2861                           
  2862                           ;PIR_B1.c: 372: _PIR.CloseTimeValue = 60;
  2863  0401  303C               	movlw	60
  2864  0402                     L1:	
  2865  0402  1683               	bsf	3,5	;RP0=1, select bank1
  2866  0403  1303               	bcf	3,6	;RP1=0, select bank1
  2867  0404  00C3               	movwf	(__PIR^(0+128)+35)
  2868  0405  3000               	movlw	0
  2869  0406  2C2D               	goto	L5
  2870  0407                     l5715:	
  2871                           ;PIR_B1.c: 373: } else if (VRAD < 5) {
  2872                           
  2873  0407  3005               	movlw	5
  2874  0408  1283               	bcf	3,5	;RP0=0, select bank0
  2875  0409  0266               	subwf	getPIR_AD@VRAD,w
  2876  040A  1803               	skipnc
  2877  040B  2C12               	goto	l5719
  2878                           
  2879                           ;PIR_B1.c: 374: _PIR.CloseTimeValue = 300;
  2880  040C  302C               	movlw	44
  2881  040D  1683               	bsf	3,5	;RP0=1, select bank1
  2882  040E  1303               	bcf	3,6	;RP1=0, select bank1
  2883  040F  00C3               	movwf	(__PIR^(0+128)+35)
  2884  0410  3001               	movlw	1
  2885  0411  2C2D               	goto	L5
  2886  0412                     l5719:	
  2887                           ;PIR_B1.c: 375: } else if (VRAD < 7) {
  2888                           
  2889  0412  3007               	movlw	7
  2890  0413  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0414  0266               	subwf	getPIR_AD@VRAD,w
  2892  0415  1803               	skipnc
  2893  0416  2C1D               	goto	l5723
  2894                           
  2895                           ;PIR_B1.c: 376: _PIR.CloseTimeValue = 600;
  2896  0417  3058               	movlw	88
  2897  0418  1683               	bsf	3,5	;RP0=1, select bank1
  2898  0419  1303               	bcf	3,6	;RP1=0, select bank1
  2899  041A  00C3               	movwf	(__PIR^(0+128)+35)
  2900  041B  3002               	movlw	2
  2901  041C  2C2D               	goto	L5
  2902  041D                     l5723:	
  2903                           ;PIR_B1.c: 377: } else if (VRAD < 9) {
  2904                           
  2905  041D  3009               	movlw	9
  2906  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2907  041F  0266               	subwf	getPIR_AD@VRAD,w
  2908  0420  1803               	skipnc
  2909  0421  2C28               	goto	l5727
  2910                           
  2911                           ;PIR_B1.c: 378: _PIR.CloseTimeValue = 900;
  2912  0422  3084               	movlw	132
  2913  0423  1683               	bsf	3,5	;RP0=1, select bank1
  2914  0424  1303               	bcf	3,6	;RP1=0, select bank1
  2915  0425  00C3               	movwf	(__PIR^(0+128)+35)
  2916  0426  3003               	movlw	3
  2917  0427  2C2D               	goto	L5
  2918  0428                     l5727:	
  2919                           ;PIR_B1.c: 379: } else {
  2920                           
  2921                           
  2922                           ;PIR_B1.c: 380: _PIR.CloseTimeValue = 1200;
  2923  0428  30B0               	movlw	176
  2924  0429  1683               	bsf	3,5	;RP0=1, select bank1
  2925  042A  1303               	bcf	3,6	;RP1=0, select bank1
  2926  042B  00C3               	movwf	(__PIR^(0+128)+35)
  2927  042C  3004               	movlw	4
  2928  042D                     L5:	
  2929  042D  00C4               	movwf	(__PIR^(0+128)+36)
  2930                           
  2931                           ;PIR_B1.c: 381: }
  2932                           ;PIR_B1.c: 390: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2933  042E  0821               	movf	(__PIR^(0+128)+1),w
  2934  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2935  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2936  0431  00E0               	movwf	??_getPIR_AD
  2937  0432  1683               	bsf	3,5	;RP0=1, select bank1
  2938  0433  1303               	bcf	3,6	;RP1=0, select bank1
  2939  0434  0824               	movf	(__PIR^(0+128)+4),w
  2940  0435  3EA5               	addlw	(__PIR+5)& (0+255)
  2941  0436  0084               	movwf	4
  2942  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2943  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2944  0439  0860               	movf	??_getPIR_AD,w
  2945  043A  1383               	bcf	3,7	;select IRP bank1
  2946  043B  0080               	movwf	0
  2947                           
  2948                           ;PIR_B1.c: 391: for (i = 0; i < 10; i++) {
  2949  043C  01E7               	clrf	getPIR_AD@i
  2950  043D  300A               	movlw	10
  2951  043E  0267               	subwf	getPIR_AD@i,w
  2952  043F  1803               	btfsc	3,0
  2953  0440  2C5D               	goto	l5743
  2954  0441                     l5737:	
  2955                           
  2956                           ;PIR_B1.c: 392: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2957  0441  0867               	movf	getPIR_AD@i,w
  2958  0442  3EA5               	addlw	(__PIR+5)& (0+255)
  2959  0443  0084               	movwf	4
  2960  0444  0800               	movf	0,w
  2961  0445  00E0               	movwf	??_getPIR_AD
  2962  0446  01E1               	clrf	??_getPIR_AD+1
  2963  0447  0860               	movf	??_getPIR_AD,w
  2964  0448  1683               	bsf	3,5	;RP0=1, select bank1
  2965  0449  1303               	bcf	3,6	;RP1=0, select bank1
  2966  044A  07AF               	addwf	(__PIR^(0+128)+15),f
  2967  044B  1803               	skipnc
  2968  044C  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2969  044D  1283               	bcf	3,5	;RP0=0, select bank0
  2970  044E  1303               	bcf	3,6	;RP1=0, select bank0
  2971  044F  0861               	movf	??_getPIR_AD+1,w
  2972  0450  1683               	bsf	3,5	;RP0=1, select bank1
  2973  0451  1303               	bcf	3,6	;RP1=0, select bank1
  2974  0452  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2975  0453  3001               	movlw	1
  2976  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2977  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2978  0456  00E0               	movwf	??_getPIR_AD
  2979  0457  0860               	movf	??_getPIR_AD,w
  2980  0458  07E7               	addwf	getPIR_AD@i,f
  2981  0459  300A               	movlw	10
  2982  045A  0267               	subwf	getPIR_AD@i,w
  2983  045B  1C03               	skipc
  2984  045C  2C41               	goto	l5737
  2985  045D                     l5743:	
  2986                           
  2987                           ;PIR_B1.c: 393: }
  2988                           ;PIR_B1.c: 394: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2989  045D  300A               	movlw	10
  2990  045E  00D7               	movwf	___lwdiv@divisor
  2991  045F  3000               	movlw	0
  2992  0460  00D8               	movwf	___lwdiv@divisor+1
  2993  0461  1683               	bsf	3,5	;RP0=1, select bank1
  2994  0462  1303               	bcf	3,6	;RP1=0, select bank1
  2995  0463  0830               	movf	((__PIR+1)^(0+128)+15),w
  2996  0464  1283               	bcf	3,5	;RP0=0, select bank0
  2997  0465  1303               	bcf	3,6	;RP1=0, select bank0
  2998  0466  01DA               	clrf	___lwdiv@dividend+1
  2999  0467  07DA               	addwf	___lwdiv@dividend+1,f
  3000  0468  1683               	bsf	3,5	;RP0=1, select bank1
  3001  0469  1303               	bcf	3,6	;RP1=0, select bank1
  3002  046A  082F               	movf	(__PIR^(0+128)+15),w
  3003  046B  1283               	bcf	3,5	;RP0=0, select bank0
  3004  046C  1303               	bcf	3,6	;RP1=0, select bank0
  3005  046D  01D9               	clrf	___lwdiv@dividend
  3006  046E  07D9               	addwf	___lwdiv@dividend,f
  3007  046F  158A  254C  118A   	fcall	___lwdiv
  3008  0472  1283               	bcf	3,5	;RP0=0, select bank0
  3009  0473  1303               	bcf	3,6	;RP1=0, select bank0
  3010  0474  0857               	movf	?___lwdiv,w
  3011  0475  00E0               	movwf	??_getPIR_AD
  3012  0476  1683               	bsf	3,5	;RP0=1, select bank1
  3013  0477  1303               	bcf	3,6	;RP1=0, select bank1
  3014  0478  0831               	movf	(__PIR^(0+128)+17),w
  3015  0479  3EB2               	addlw	(__PIR+18)& (0+255)
  3016  047A  0084               	movwf	4
  3017  047B  1283               	bcf	3,5	;RP0=0, select bank0
  3018  047C  1303               	bcf	3,6	;RP1=0, select bank0
  3019  047D  0860               	movf	??_getPIR_AD,w
  3020  047E  1383               	bcf	3,7	;select IRP bank1
  3021  047F  0080               	movwf	0
  3022                           
  3023                           ;PIR_B1.c: 395: _PIR.TenAverageValue = 0;
  3024  0480  1683               	bsf	3,5	;RP0=1, select bank1
  3025  0481  1303               	bcf	3,6	;RP1=0, select bank1
  3026  0482  01AF               	clrf	(__PIR^(0+128)+15)
  3027  0483  01B0               	clrf	((__PIR+1)^(0+128)+15)
  3028                           
  3029                           ;PIR_B1.c: 397: for (i = 0; i <= 9; i++) {
  3030  0484  1283               	bcf	3,5	;RP0=0, select bank0
  3031  0485  1303               	bcf	3,6	;RP1=0, select bank0
  3032  0486  01E7               	clrf	getPIR_AD@i
  3033  0487  300A               	movlw	10
  3034  0488  0267               	subwf	getPIR_AD@i,w
  3035  0489  1803               	btfsc	3,0
  3036  048A  2CA7               	goto	l5759
  3037  048B                     l5753:	
  3038                           
  3039                           ;PIR_B1.c: 398: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  3040  048B  0867               	movf	getPIR_AD@i,w
  3041  048C  3EB2               	addlw	(__PIR+18)& (0+255)
  3042  048D  0084               	movwf	4
  3043  048E  0800               	movf	0,w
  3044  048F  00E0               	movwf	??_getPIR_AD
  3045  0490  01E1               	clrf	??_getPIR_AD+1
  3046  0491  0860               	movf	??_getPIR_AD,w
  3047  0492  1683               	bsf	3,5	;RP0=1, select bank1
  3048  0493  1303               	bcf	3,6	;RP1=0, select bank1
  3049  0494  07BC               	addwf	(__PIR^(0+128)+28),f
  3050  0495  1803               	skipnc
  3051  0496  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  3052  0497  1283               	bcf	3,5	;RP0=0, select bank0
  3053  0498  1303               	bcf	3,6	;RP1=0, select bank0
  3054  0499  0861               	movf	??_getPIR_AD+1,w
  3055  049A  1683               	bsf	3,5	;RP0=1, select bank1
  3056  049B  1303               	bcf	3,6	;RP1=0, select bank1
  3057  049C  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  3058  049D  3001               	movlw	1
  3059  049E  1283               	bcf	3,5	;RP0=0, select bank0
  3060  049F  1303               	bcf	3,6	;RP1=0, select bank0
  3061  04A0  00E0               	movwf	??_getPIR_AD
  3062  04A1  0860               	movf	??_getPIR_AD,w
  3063  04A2  07E7               	addwf	getPIR_AD@i,f
  3064  04A3  300A               	movlw	10
  3065  04A4  0267               	subwf	getPIR_AD@i,w
  3066  04A5  1C03               	skipc
  3067  04A6  2C8B               	goto	l5753
  3068  04A7                     l5759:	
  3069                           
  3070                           ;PIR_B1.c: 399: }
  3071                           ;PIR_B1.c: 400: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  3072  04A7  300A               	movlw	10
  3073  04A8  00D7               	movwf	___lwdiv@divisor
  3074  04A9  3000               	movlw	0
  3075  04AA  00D8               	movwf	___lwdiv@divisor+1
  3076  04AB  1683               	bsf	3,5	;RP0=1, select bank1
  3077  04AC  1303               	bcf	3,6	;RP1=0, select bank1
  3078  04AD  083D               	movf	((__PIR+1)^(0+128)+28),w
  3079  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  3080  04AF  1303               	bcf	3,6	;RP1=0, select bank0
  3081  04B0  01DA               	clrf	___lwdiv@dividend+1
  3082  04B1  07DA               	addwf	___lwdiv@dividend+1,f
  3083  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  3084  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  3085  04B4  083C               	movf	(__PIR^(0+128)+28),w
  3086  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  3087  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  3088  04B7  01D9               	clrf	___lwdiv@dividend
  3089  04B8  07D9               	addwf	___lwdiv@dividend,f
  3090  04B9  158A  254C  118A   	fcall	___lwdiv
  3091  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  3092  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  3093  04BE  0857               	movf	?___lwdiv,w
  3094  04BF  00E0               	movwf	??_getPIR_AD
  3095  04C0  0860               	movf	??_getPIR_AD,w
  3096  04C1  1683               	bsf	3,5	;RP0=1, select bank1
  3097  04C2  1303               	bcf	3,6	;RP1=0, select bank1
  3098  04C3  00A3               	movwf	(__PIR^(0+128)+3)
  3099                           
  3100                           ;PIR_B1.c: 401: _PIR.HundredAverageValue = 0;
  3101  04C4  01BC               	clrf	(__PIR^(0+128)+28)
  3102  04C5  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3103                           
  3104                           ;PIR_B1.c: 403: if (_PIR.TenCount < 10) {
  3105  04C6  300A               	movlw	10
  3106  04C7  0224               	subwf	(__PIR^(0+128)+4),w
  3107  04C8  1803               	skipnc
  3108  04C9  2CD3               	goto	l5767
  3109                           
  3110                           ;PIR_B1.c: 404: _PIR.TenCount++;
  3111  04CA  3001               	movlw	1
  3112  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  3113  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  3114  04CD  00E0               	movwf	??_getPIR_AD
  3115  04CE  0860               	movf	??_getPIR_AD,w
  3116  04CF  1683               	bsf	3,5	;RP0=1, select bank1
  3117  04D0  1303               	bcf	3,6	;RP1=0, select bank1
  3118  04D1  07A4               	addwf	(__PIR^(0+128)+4),f
  3119                           
  3120                           ;PIR_B1.c: 405: } else {
  3121  04D2  0008               	return
  3122  04D3                     l5767:	
  3123                           
  3124                           ;PIR_B1.c: 406: _PIR.TenCount = 0;
  3125  04D3  01A4               	clrf	(__PIR^(0+128)+4)
  3126                           
  3127                           ;PIR_B1.c: 407: if (_PIR.HundreCount < 10)
  3128  04D4  300A               	movlw	10
  3129  04D5  0231               	subwf	(__PIR^(0+128)+17),w
  3130  04D6  1803               	skipnc
  3131  04D7  2CE1               	goto	l5773
  3132                           
  3133                           ;PIR_B1.c: 408: _PIR.HundreCount++;
  3134  04D8  3001               	movlw	1
  3135  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  3136  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  3137  04DB  00E0               	movwf	??_getPIR_AD
  3138  04DC  0860               	movf	??_getPIR_AD,w
  3139  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  3140  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  3141  04DF  07B1               	addwf	(__PIR^(0+128)+17),f
  3142  04E0  0008               	return
  3143  04E1                     l5773:	
  3144                           
  3145                           ;PIR_B1.c: 409: else
  3146                           ;PIR_B1.c: 410: _PIR.HundreCount = 0;
  3147  04E1  01B1               	clrf	(__PIR^(0+128)+17)
  3148  04E2  0008               	return
  3149  04E3                     __end_of_getPIR_AD:	
  3150                           
  3151                           	psect	text5
  3152  0EA9                     __ptext5:	
  3153 ;; *************** function _getLoad_AD *****************
  3154 ;; Defined at:
  3155 ;;		line 15 in file "../src/OverLoad_B1.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;  channel         1    wreg     unsigned char 
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;  channel         1    2[BANK0 ] unsigned char 
  3160 ;;  i               1    6[BANK0 ] unsigned char 
  3161 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3162 ;;  j               1    4[BANK0 ] unsigned char 
  3163 ;;  k               1    3[BANK0 ] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;		None               void
  3166 ;; Registers used:
  3167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3173 ;;      Params:         0       0       0       0
  3174 ;;      Locals:         0       5       0       0
  3175 ;;      Temps:          0       2       0       0
  3176 ;;      Totals:         0       7       0       0
  3177 ;;Total ram usage:        7 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    4
  3180 ;; This function calls:
  3181 ;;		_getAD
  3182 ;; This function is called by:
  3183 ;;		_main
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _getLoad_AD
  3189  0EA9                     _getLoad_AD:	
  3190                           
  3191                           ;incstack = 0
  3192                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3193                           ;getLoad_AD@channel stored from wreg
  3194  0EA9  1283               	bcf	3,5	;RP0=0, select bank0
  3195  0EAA  1303               	bcf	3,6	;RP1=0, select bank0
  3196  0EAB  00D9               	movwf	getLoad_AD@channel
  3197                           
  3198                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3199  0EAC  01DD               	clrf	getLoad_AD@i
  3200  0EAD  01DB               	clrf	getLoad_AD@j
  3201  0EAE  01DA               	clrf	getLoad_AD@k
  3202                           
  3203                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  3204  0EAF  01DC               	clrf	getLoad_AD@ADRES
  3205                           
  3206                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  3207  0EB0  1683               	bsf	3,5	;RP0=1, select bank1
  3208  0EB1  1303               	bcf	3,6	;RP1=0, select bank1
  3209  0EB2  1E4A               	btfss	_Load^(0+128),4
  3210  0EB3  0008               	return
  3211                           
  3212                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0x73);
  3213  0EB4  3073               	movlw	115
  3214  0EB5  1283               	bcf	3,5	;RP0=0, select bank0
  3215  0EB6  1303               	bcf	3,6	;RP1=0, select bank0
  3216  0EB7  00D7               	movwf	??_getLoad_AD
  3217  0EB8  0857               	movf	??_getLoad_AD,w
  3218  0EB9  00F4               	movwf	getAD@adcon1
  3219  0EBA  0859               	movf	getLoad_AD@channel,w
  3220  0EBB  158A  2328  158A   	fcall	_getAD
  3221  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  3222  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  3223  0EC0  00D8               	movwf	??_getLoad_AD+1
  3224  0EC1  0858               	movf	??_getLoad_AD+1,w
  3225  0EC2  00DC               	movwf	getLoad_AD@ADRES
  3226                           
  3227                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  3228  0EC3  01DD               	clrf	getLoad_AD@i
  3229  0EC4  3004               	movlw	4
  3230  0EC5  025D               	subwf	getLoad_AD@i,w
  3231  0EC6  1803               	btfsc	3,0
  3232  0EC7  2EE4               	goto	l5663
  3233  0EC8                     l5651:	
  3234                           
  3235                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  3236  0EC8  085D               	movf	getLoad_AD@i,w
  3237  0EC9  3ED4               	addlw	(_Load+10)& (0+255)
  3238  0ECA  0084               	movwf	4
  3239  0ECB  085C               	movf	getLoad_AD@ADRES,w
  3240  0ECC  1383               	bcf	3,7	;select IRP bank1
  3241  0ECD  0200               	subwf	0,w
  3242  0ECE  1803               	skipnc
  3243  0ECF  2EDC               	goto	l5659
  3244  0ED0  08DB               	movf	getLoad_AD@j,f
  3245  0ED1  1D03               	skipz
  3246  0ED2  2EDC               	goto	l5659
  3247                           
  3248                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  3249  0ED3  085C               	movf	getLoad_AD@ADRES,w
  3250  0ED4  00D7               	movwf	??_getLoad_AD
  3251  0ED5  085D               	movf	getLoad_AD@i,w
  3252  0ED6  3ED4               	addlw	(_Load+10)& (0+255)
  3253  0ED7  0084               	movwf	4
  3254  0ED8  0857               	movf	??_getLoad_AD,w
  3255  0ED9  0080               	movwf	0
  3256                           
  3257                           ;OverLoad_B1.c: 24: j = 1;
  3258  0EDA  01DB               	clrf	getLoad_AD@j
  3259  0EDB  0ADB               	incf	getLoad_AD@j,f
  3260  0EDC                     l5659:	
  3261  0EDC  3001               	movlw	1
  3262  0EDD  00D7               	movwf	??_getLoad_AD
  3263  0EDE  0857               	movf	??_getLoad_AD,w
  3264  0EDF  07DD               	addwf	getLoad_AD@i,f
  3265  0EE0  3004               	movlw	4
  3266  0EE1  025D               	subwf	getLoad_AD@i,w
  3267  0EE2  1C03               	skipc
  3268  0EE3  2EC8               	goto	l5651
  3269  0EE4                     l5663:	
  3270                           
  3271                           ;OverLoad_B1.c: 25: }
  3272                           ;OverLoad_B1.c: 26: }
  3273                           ;OverLoad_B1.c: 27: if (j == 0) {
  3274  0EE4  08DB               	movf	getLoad_AD@j,f
  3275  0EE5  1D03               	skipz
  3276  0EE6  0008               	return
  3277                           
  3278                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  3279  0EE7  01DD               	clrf	getLoad_AD@i
  3280  0EE8                     L6:	
  3281  0EE8  3004               	movlw	4
  3282  0EE9  025D               	subwf	getLoad_AD@i,w
  3283  0EEA  1803               	btfsc	3,0
  3284  0EEB  0008               	return
  3285                           
  3286                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  3287  0EEC  085D               	movf	getLoad_AD@i,w
  3288  0EED  3ED9               	addlw	(_Load+15)& (0+255)
  3289  0EEE  0084               	movwf	4
  3290  0EEF  1383               	bcf	3,7	;select IRP bank1
  3291  0EF0  0800               	movf	0,w
  3292  0EF1  025C               	subwf	getLoad_AD@ADRES,w
  3293  0EF2  1803               	skipnc
  3294  0EF3  2F00               	goto	l5679
  3295  0EF4  08DA               	movf	getLoad_AD@k,f
  3296  0EF5  1D03               	skipz
  3297  0EF6  2F00               	goto	l5679
  3298                           
  3299                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  3300  0EF7  085C               	movf	getLoad_AD@ADRES,w
  3301  0EF8  00D7               	movwf	??_getLoad_AD
  3302  0EF9  085D               	movf	getLoad_AD@i,w
  3303  0EFA  3ED9               	addlw	(_Load+15)& (0+255)
  3304  0EFB  0084               	movwf	4
  3305  0EFC  0857               	movf	??_getLoad_AD,w
  3306  0EFD  0080               	movwf	0
  3307                           
  3308                           ;OverLoad_B1.c: 31: k = 1;
  3309  0EFE  01DA               	clrf	getLoad_AD@k
  3310  0EFF  0ADA               	incf	getLoad_AD@k,f
  3311  0F00                     l5679:	
  3312  0F00  3001               	movlw	1
  3313  0F01  00D7               	movwf	??_getLoad_AD
  3314  0F02  0857               	movf	??_getLoad_AD,w
  3315  0F03  07DD               	addwf	getLoad_AD@i,f
  3316  0F04  2EE8               	goto	L6
  3317  0F05                     __end_of_getLoad_AD:	
  3318                           
  3319                           	psect	text6
  3320  0B44                     __ptext6:	
  3321 ;; *************** function _getCDS_AD *****************
  3322 ;; Defined at:
  3323 ;;		line 48 in file "../src/CDS_B1.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  channel1        1    wreg     unsigned char 
  3326 ;;  channel2        1    0[BANK0 ] unsigned char 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  channel1        1    5[BANK0 ] unsigned char 
  3329 ;;  j               1    4[BANK0 ] unsigned char 
  3330 ;;  i               1    3[BANK0 ] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;		None               void
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0, pclath, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3340 ;;      Params:         0       1       0       0
  3341 ;;      Locals:         0       3       0       0
  3342 ;;      Temps:          0       2       0       0
  3343 ;;      Totals:         0       6       0       0
  3344 ;;Total ram usage:        6 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    4
  3347 ;; This function calls:
  3348 ;;		_getAD
  3349 ;; This function is called by:
  3350 ;;		_main
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function _getCDS_AD
  3356  0B44                     _getCDS_AD:	
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3360                           ;getCDS_AD@channel1 stored from wreg
  3361  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  3362  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  3363  0B46  00DC               	movwf	getCDS_AD@channel1
  3364                           
  3365                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3366  0B47  01DA               	clrf	getCDS_AD@i
  3367  0B48  01DB               	clrf	getCDS_AD@j
  3368                           
  3369                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3370  0B49  1DB6               	btfss	__CDS,3
  3371  0B4A  0008               	return
  3372                           
  3373                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3374  0B4B  14B6               	bsf	__CDS,1
  3375                           
  3376                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3377  0B4C  3070               	movlw	112
  3378  0B4D  00D8               	movwf	??_getCDS_AD
  3379  0B4E  0858               	movf	??_getCDS_AD,w
  3380  0B4F  00F4               	movwf	getAD@adcon1
  3381  0B50  085C               	movf	getCDS_AD@channel1,w
  3382  0B51  158A  2328  158A   	fcall	_getAD
  3383  0B54  1283               	bcf	3,5	;RP0=0, select bank0
  3384  0B55  1303               	bcf	3,6	;RP1=0, select bank0
  3385  0B56  00D9               	movwf	??_getCDS_AD+1
  3386  0B57  0859               	movf	??_getCDS_AD+1,w
  3387  0B58  00B8               	movwf	__CDS+2
  3388                           
  3389                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3390  0B59  3070               	movlw	112
  3391  0B5A  00D8               	movwf	??_getCDS_AD
  3392  0B5B  0858               	movf	??_getCDS_AD,w
  3393  0B5C  00F4               	movwf	getAD@adcon1
  3394  0B5D  0857               	movf	getCDS_AD@channel2,w
  3395  0B5E  158A  2328         	fcall	_getAD
  3396  0B60  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0B61  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0B62  00D9               	movwf	??_getCDS_AD+1
  3399  0B63  0859               	movf	??_getCDS_AD+1,w
  3400  0B64  00B9               	movwf	__CDS+3
  3401  0B65  0008               	return
  3402  0B66                     __end_of_getCDS_AD:	
  3403                           
  3404                           	psect	text7
  3405  0B28                     __ptext7:	
  3406 ;; *************** function _getAD *****************
  3407 ;; Defined at:
  3408 ;;		line 434 in file "../src/MCU_B1.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  adcon0          1    wreg     unsigned char 
  3411 ;;  adcon1          1    4[COMMON] unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  adcon0          1    5[COMMON] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      unsigned char 
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0, pclath, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3423 ;;      Params:         1       0       0       0
  3424 ;;      Locals:         1       0       0       0
  3425 ;;      Temps:          0       0       0       0
  3426 ;;      Totals:         2       0       0       0
  3427 ;;Total ram usage:        2 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    3
  3430 ;; This function calls:
  3431 ;;		_Timeout_Counter
  3432 ;;		_set_TimeoutCleared
  3433 ;; This function is called by:
  3434 ;;		_getCDS_AD
  3435 ;;		_getLoad_AD
  3436 ;;		_getTemp_AD
  3437 ;;		_getPIR_AD
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           
  3442                           ;psect for function _getAD
  3443  0B28                     _getAD:	
  3444                           
  3445                           ;incstack = 0
  3446                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3447                           ;getAD@adcon0 stored from wreg
  3448  0B28  00F5               	movwf	getAD@adcon0
  3449                           
  3450                           ;MCU_B1.c: 435: ADCON0 = adcon0;
  3451  0B29  0875               	movf	getAD@adcon0,w
  3452  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  3453  0B2B  1303               	bcf	3,6	;RP1=0, select bank0
  3454  0B2C  009F               	movwf	31	;volatile
  3455                           
  3456                           ;MCU_B1.c: 436: ADCON1 = adcon1;
  3457  0B2D  0874               	movf	getAD@adcon1,w
  3458  0B2E  1683               	bsf	3,5	;RP0=1, select bank1
  3459  0B2F  1303               	bcf	3,6	;RP1=0, select bank1
  3460  0B30  009F               	movwf	31	;volatile
  3461                           
  3462                           ;MCU_B1.c: 437: GO_nDONE = 1;
  3463  0B31  1283               	bcf	3,5	;RP0=0, select bank0
  3464  0B32  1303               	bcf	3,6	;RP1=0, select bank0
  3465  0B33  149F               	bsf	31,1	;volatile
  3466                           
  3467                           ;MCU_B1.c: 438: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3468  0B34  2B38               	goto	l5331
  3469  0B35                     l5329:	
  3470                           
  3471                           ;MCU_B1.c: 439: Timeout_Counter();
  3472  0B35  158A  222D  158A   	fcall	_Timeout_Counter
  3473  0B38                     l5331:	
  3474  0B38  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0B39  1303               	bcf	3,6	;RP1=0, select bank0
  3476  0B3A  1C9F               	btfss	31,1	;volatile
  3477  0B3B  2B3E               	goto	l5335
  3478  0B3C  1D33               	btfss	_myMain+2,2
  3479  0B3D  2B35               	goto	l5329
  3480  0B3E                     l5335:	
  3481                           
  3482                           ;MCU_B1.c: 440: };
  3483                           ;MCU_B1.c: 441: set_TimeoutCleared();
  3484  0B3E  158A  2109         	fcall	_set_TimeoutCleared
  3485                           
  3486                           ;MCU_B1.c: 442: return ADRES;
  3487  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  3488  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  3489  0B42  081E               	movf	30,w	;volatile
  3490  0B43  0008               	return
  3491  0B44                     __end_of_getAD:	
  3492                           
  3493                           	psect	text8
  3494  09E4                     __ptext8:	
  3495 ;; *************** function _WDT_Main *****************
  3496 ;; Defined at:
  3497 ;;		line 1116 in file "../src/MCU_B1.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;		None
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;		None
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, pclath, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3511 ;;      Params:         0       0       0       0
  3512 ;;      Locals:         0       0       0       0
  3513 ;;      Temps:          1       0       0       0
  3514 ;;      Totals:         1       0       0       0
  3515 ;;Total ram usage:        1 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    3
  3518 ;; This function calls:
  3519 ;;		_WDT_Clearing
  3520 ;; This function is called by:
  3521 ;;		_main
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           
  3526                           ;psect for function _WDT_Main
  3527  09E4                     _WDT_Main:	
  3528                           
  3529                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  3530                           
  3531                           ;incstack = 0
  3532                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3533  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  3534  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  3535  09E6  1C3D               	btfss	_WDT,0
  3536  09E7  0008               	return
  3537                           
  3538                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  3539  09E8  3001               	movlw	1
  3540  09E9  02BE               	subwf	_WDT+1,f
  3541  09EA  083E               	movf	_WDT+1,w
  3542  09EB  3AFF               	xorlw	255
  3543  09EC  1903               	skipnz
  3544  09ED  0008               	return
  3545                           
  3546                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  3547  09EE  3064               	movlw	100
  3548  09EF  00F4               	movwf	??_WDT_Main
  3549  09F0  0874               	movf	??_WDT_Main,w
  3550  09F1  00BE               	movwf	_WDT+1
  3551                           
  3552                           ;MCU_B1.c: 1120: WDT_Clearing();
  3553  09F2  118A  2002         	fcall	_WDT_Clearing
  3554  09F4  0008               	return
  3555  09F5                     __end_of_WDT_Main:	
  3556                           
  3557                           	psect	text9
  3558  0002                     __ptext9:	
  3559 ;; *************** function _WDT_Clearing *****************
  3560 ;; Defined at:
  3561 ;;		line 1126 in file "../src/MCU_B1.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;		None               void
  3568 ;; Registers used:
  3569 ;;		None
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3575 ;;      Params:         0       0       0       0
  3576 ;;      Locals:         0       0       0       0
  3577 ;;      Temps:          0       0       0       0
  3578 ;;      Totals:         0       0       0       0
  3579 ;;Total ram usage:        0 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:    2
  3582 ;; This function calls:
  3583 ;;		Nothing
  3584 ;; This function is called by:
  3585 ;;		_WDT_Main
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           
  3590                           ;psect for function _WDT_Clearing
  3591  0002                     _WDT_Clearing:	
  3592                           
  3593                           ;incstack = 0
  3594                           ; Regs used in _WDT_Clearing: []
  3595  0002  0064               	clrwdt	;# 
  3596  0003  0008               	return
  3597  0004                     __end_of_WDT_Clearing:	
  3598                           
  3599                           	psect	text10
  3600  08E9                     __ptext10:	
  3601 ;; *************** function _Temp_Main *****************
  3602 ;; Defined at:
  3603 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;		None
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;		None
  3608 ;; Return value:  Size  Location     Type
  3609 ;;		None               void
  3610 ;; Registers used:
  3611 ;;		wreg, status,2, status,0, pclath, cstack
  3612 ;; Tracked objects:
  3613 ;;		On entry : 0/0
  3614 ;;		On exit  : 0/0
  3615 ;;		Unchanged: 0/0
  3616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3617 ;;      Params:         0       0       0       0
  3618 ;;      Locals:         0       0       0       0
  3619 ;;      Temps:          0       0       0       0
  3620 ;;      Totals:         0       0       0       0
  3621 ;;Total ram usage:        0 bytes
  3622 ;; Hardware stack levels used:    1
  3623 ;; Hardware stack levels required when called:    5
  3624 ;; This function calls:
  3625 ;;		_setTemp_Main
  3626 ;; This function is called by:
  3627 ;;		_main
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           
  3632                           ;psect for function _Temp_Main
  3633  08E9                     _Temp_Main:	
  3634                           
  3635                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3636                           
  3637                           ;incstack = 0
  3638                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3639  08E9  118A  2719         	fcall	_setTemp_Main
  3640  08EB  0008               	return
  3641  08EC                     __end_of_Temp_Main:	
  3642                           
  3643                           	psect	text11
  3644  0719                     __ptext11:	
  3645 ;; *************** function _setTemp_Main *****************
  3646 ;; Defined at:
  3647 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;		None
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  AD              1   16[BANK0 ] unsigned char 
  3652 ;;  DangerValue     1   15[BANK0 ] unsigned char 
  3653 ;;  SafeValue       1   14[BANK0 ] unsigned char 
  3654 ;;  TempGO          1   13[BANK0 ] unsigned char 
  3655 ;;  error           1   12[BANK0 ] unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;		None               void
  3658 ;; Registers used:
  3659 ;;		wreg, status,2, status,0, pclath, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3665 ;;      Params:         0       0       0       0
  3666 ;;      Locals:         0       5       0       0
  3667 ;;      Temps:          0       1       0       0
  3668 ;;      Totals:         0       6       0       0
  3669 ;;Total ram usage:        6 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:    4
  3672 ;; This function calls:
  3673 ;;		_getMain_All_Error_Status
  3674 ;;		_getMain_All_LightsStatus
  3675 ;;		_setBuz
  3676 ;; This function is called by:
  3677 ;;		_Temp_Main
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           
  3682                           ;psect for function _setTemp_Main
  3683  0719                     _setTemp_Main:	
  3684                           
  3685                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3686                           
  3687                           ;incstack = 0
  3688                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3689  0719  3000               	movlw	0
  3690  071A  158A  24D0  118A   	fcall	_getMain_All_Error_Status
  3691  071D  1283               	bcf	3,5	;RP0=0, select bank0
  3692  071E  1303               	bcf	3,6	;RP1=0, select bank0
  3693  071F  00E2               	movwf	??_setTemp_Main
  3694  0720  0862               	movf	??_setTemp_Main,w
  3695  0721  00E3               	movwf	setTemp_Main@error
  3696                           
  3697                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3698  0722  01E5               	clrf	setTemp_Main@SafeValue
  3699  0723  01E6               	clrf	setTemp_Main@DangerValue
  3700                           
  3701                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3702  0724  158A  21C3  118A   	fcall	_getMain_All_LightsStatus
  3703  0727  1283               	bcf	3,5	;RP0=0, select bank0
  3704  0728  1303               	bcf	3,6	;RP1=0, select bank0
  3705  0729  00E2               	movwf	??_setTemp_Main
  3706  072A  0862               	movf	??_setTemp_Main,w
  3707  072B  00E4               	movwf	setTemp_Main@TempGO
  3708                           
  3709                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3710  072C  1C42               	btfss	_Temp,0
  3711  072D  2F9F               	goto	l952
  3712                           
  3713                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3714  072E  1942               	btfsc	_Temp,2
  3715  072F  2F4C               	goto	l5397
  3716                           
  3717                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3718  0730  0864               	movf	setTemp_Main@TempGO,w
  3719  0731  3A01               	xorlw	1
  3720  0732  1D03               	skipz
  3721  0733  2F36               	goto	l958
  3722  0734  1CC2               	btfss	_Temp,1
  3723  0735  2F38               	goto	l5389
  3724  0736                     l958:	
  3725  0736  1CC2               	btfss	_Temp,1
  3726  0737  2F49               	goto	l5395
  3727  0738                     l5389:	
  3728                           
  3729                           ;OverTemperature_B1.c: 79: Temp.Time++;
  3730  0738  3001               	movlw	1
  3731  0739  07C3               	addwf	_Temp+1,f
  3732  073A  1803               	skipnc
  3733  073B  0AC4               	incf	_Temp+2,f
  3734  073C  3000               	movlw	0
  3735  073D  07C4               	addwf	_Temp+2,f
  3736                           
  3737                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  3738  073E  3000               	movlw	0
  3739  073F  0244               	subwf	_Temp+2,w
  3740  0740  30FA               	movlw	250
  3741  0741  1903               	skipnz
  3742  0742  0243               	subwf	_Temp+1,w
  3743  0743  1C03               	skipc
  3744  0744  0008               	return
  3745                           
  3746                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  3747  0745  01C3               	clrf	_Temp+1
  3748  0746  01C4               	clrf	_Temp+2
  3749                           
  3750                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  3751  0747  1542               	bsf	_Temp,2
  3752                           
  3753                           ;OverTemperature_B1.c: 83: }
  3754                           ;OverTemperature_B1.c: 84: } else {
  3755  0748  0008               	return
  3756  0749                     l5395:	
  3757                           
  3758                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  3759  0749  01C3               	clrf	_Temp+1
  3760  074A  01C4               	clrf	_Temp+2
  3761                           
  3762                           ;OverTemperature_B1.c: 86: }
  3763                           ;OverTemperature_B1.c: 87: } else {
  3764  074B  0008               	return
  3765  074C                     l5397:	
  3766                           
  3767                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3768  074C  3001               	movlw	1
  3769  074D  07C3               	addwf	_Temp+1,f
  3770  074E  1803               	skipnc
  3771  074F  0AC4               	incf	_Temp+2,f
  3772  0750  3000               	movlw	0
  3773  0751  07C4               	addwf	_Temp+2,f
  3774                           
  3775                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  3776  0752  3000               	movlw	0
  3777  0753  0244               	subwf	_Temp+2,w
  3778  0754  3005               	movlw	5
  3779  0755  1903               	skipnz
  3780  0756  0243               	subwf	_Temp+1,w
  3781  0757  1C03               	skipc
  3782  0758  0008               	return
  3783                           
  3784                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3785  0759  01C3               	clrf	_Temp+1
  3786  075A  01C4               	clrf	_Temp+2
  3787                           
  3788                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  3789  075B  0848               	movf	_Temp+6,w
  3790  075C  1903               	btfsc	3,2
  3791  075D  2F99               	goto	l963
  3792                           
  3793                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  3794  075E  1142               	bcf	_Temp,2
  3795                           
  3796                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  3797  075F  0848               	movf	_Temp+6,w
  3798  0760  00E2               	movwf	??_setTemp_Main
  3799  0761  0862               	movf	??_setTemp_Main,w
  3800  0762  00E7               	movwf	setTemp_Main@AD
  3801                           
  3802                           ;OverTemperature_B1.c: 106: SafeValue = 0x79;
  3803  0763  3079               	movlw	121
  3804  0764  00E2               	movwf	??_setTemp_Main
  3805  0765  0862               	movf	??_setTemp_Main,w
  3806  0766  00E5               	movwf	setTemp_Main@SafeValue
  3807                           
  3808                           ;OverTemperature_B1.c: 107: DangerValue = 0x76;
  3809  0767  3076               	movlw	118
  3810  0768  00E2               	movwf	??_setTemp_Main
  3811  0769  0862               	movf	??_setTemp_Main,w
  3812  076A  00E6               	movwf	setTemp_Main@DangerValue
  3813                           
  3814                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  3815  076B  1CC2               	btfss	_Temp,1
  3816  076C  2F89               	goto	l5423
  3817                           
  3818                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  3819  076D  0865               	movf	setTemp_Main@SafeValue,w
  3820  076E  0267               	subwf	setTemp_Main@AD,w
  3821  076F  1C03               	skipc
  3822  0770  2F86               	goto	l5421
  3823                           
  3824                           ;OverTemperature_B1.c: 121: Temp.Count++;
  3825  0771  3001               	movlw	1
  3826  0772  00E2               	movwf	??_setTemp_Main
  3827  0773  0862               	movf	??_setTemp_Main,w
  3828  0774  07C5               	addwf	_Temp+3,f
  3829                           
  3830                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  3831  0775  3003               	movlw	3
  3832  0776  0245               	subwf	_Temp+3,w
  3833  0777  1C03               	skipc
  3834  0778  2F99               	goto	l963
  3835                           
  3836                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  3837  0779  01C5               	clrf	_Temp+3
  3838                           
  3839                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  3840  077A  10C2               	bcf	_Temp,1
  3841                           
  3842                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  3843  077B  3064               	movlw	100
  3844  077C  00DF               	movwf	setBuz@time
  3845  077D  3000               	movlw	0
  3846  077E  00E0               	movwf	setBuz@time+1
  3847  077F  3002               	movlw	2
  3848  0780  158A  2614  118A   	fcall	_setBuz
  3849                           
  3850                           ;OverTemperature_B1.c: 126: }
  3851                           ;OverTemperature_B1.c: 127: } else {
  3852  0783  1283               	bcf	3,5	;RP0=0, select bank0
  3853  0784  1303               	bcf	3,6	;RP1=0, select bank0
  3854  0785  2F99               	goto	l963
  3855  0786                     l5421:	
  3856                           
  3857                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  3858  0786  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0787  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0788  2F98               	goto	l5433
  3861  0789                     l5423:	
  3862                           ;OverTemperature_B1.c: 129: }
  3863                           ;OverTemperature_B1.c: 130: } else {
  3864                           
  3865                           
  3866                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  3867  0789  0867               	movf	setTemp_Main@AD,w
  3868  078A  0266               	subwf	setTemp_Main@DangerValue,w
  3869  078B  1C03               	skipc
  3870  078C  2F98               	goto	l5433
  3871                           
  3872                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3873  078D  3001               	movlw	1
  3874  078E  00E2               	movwf	??_setTemp_Main
  3875  078F  0862               	movf	??_setTemp_Main,w
  3876  0790  07C5               	addwf	_Temp+3,f
  3877                           
  3878                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3879  0791  3003               	movlw	3
  3880  0792  0245               	subwf	_Temp+3,w
  3881  0793  1C03               	skipc
  3882  0794  2F99               	goto	l963
  3883                           
  3884                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3885  0795  01C5               	clrf	_Temp+3
  3886                           
  3887                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  3888  0796  14C2               	bsf	_Temp,1
  3889                           
  3890                           ;OverTemperature_B1.c: 136: }
  3891                           ;OverTemperature_B1.c: 137: } else {
  3892  0797  2F99               	goto	l963
  3893  0798                     l5433:	
  3894                           
  3895                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  3896  0798  01C5               	clrf	_Temp+3
  3897  0799                     l963:	
  3898                           ;OverTemperature_B1.c: 139: }
  3899                           ;OverTemperature_B1.c: 140: }
  3900                           ;OverTemperature_B1.c: 141: ;;
  3901                           ;OverTemperature_B1.c: 142: ;;
  3902                           
  3903                           
  3904                           ;OverTemperature_B1.c: 158: }
  3905                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  3906  0799  1283               	bcf	3,5	;RP0=0, select bank0
  3907  079A  1303               	bcf	3,6	;RP1=0, select bank0
  3908  079B  01C6               	clrf	_Temp+4
  3909                           
  3910                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  3911  079C  01C7               	clrf	_Temp+5
  3912                           
  3913                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  3914  079D  01C8               	clrf	_Temp+6
  3915                           
  3916                           ;OverTemperature_B1.c: 162: }
  3917                           ;OverTemperature_B1.c: 163: }
  3918                           ;OverTemperature_B1.c: 166: } else {
  3919  079E  0008               	return
  3920  079F                     l952:	
  3921                           
  3922                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  3923  079F  1C31               	btfss	_myMain,0
  3924  07A0  0008               	return
  3925                           
  3926                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  3927  07A1  1442               	bsf	_Temp,0
  3928  07A2  0008               	return
  3929  07A3                     __end_of_setTemp_Main:	
  3930                           
  3931                           	psect	text12
  3932  08E6                     __ptext12:	
  3933 ;; *************** function _Temp_Initialization *****************
  3934 ;; Defined at:
  3935 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;		None               void
  3942 ;; Registers used:
  3943 ;;		status,2, status,0, pclath, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3949 ;;      Params:         0       0       0       0
  3950 ;;      Locals:         0       0       0       0
  3951 ;;      Temps:          0       0       0       0
  3952 ;;      Totals:         0       0       0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    3
  3956 ;; This function calls:
  3957 ;;		_setTemp_Initialization
  3958 ;; This function is called by:
  3959 ;;		_main
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           
  3964                           ;psect for function _Temp_Initialization
  3965  08E6                     _Temp_Initialization:	
  3966                           
  3967                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3968                           
  3969                           ;incstack = 0
  3970                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3971  08E6  158A  20DB         	fcall	_setTemp_Initialization
  3972  08E8  0008               	return
  3973  08E9                     __end_of_Temp_Initialization:	
  3974                           
  3975                           	psect	text13
  3976  08DB                     __ptext13:	
  3977 ;; *************** function _setTemp_Initialization *****************
  3978 ;; Defined at:
  3979 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;		None
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;		None               void
  3986 ;; Registers used:
  3987 ;;		None
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3993 ;;      Params:         0       0       0       0
  3994 ;;      Locals:         0       0       0       0
  3995 ;;      Temps:          0       0       0       0
  3996 ;;      Totals:         0       0       0       0
  3997 ;;Total ram usage:        0 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    2
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_Temp_Initialization
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _setTemp_Initialization
  4009  08DB                     _setTemp_Initialization:	
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _setTemp_Initialization: []
  4013  08DB  0008               	return
  4014  08DC                     __end_of_setTemp_Initialization:	
  4015                           
  4016                           	psect	text14
  4017  0948                     __ptext14:	
  4018 ;; *************** function _Switch_Main *****************
  4019 ;; Defined at:
  4020 ;;		line 76 in file "../src/Switch_B1.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;		None
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;		None               void
  4027 ;; Registers used:
  4028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4034 ;;      Params:         0       0       0       0
  4035 ;;      Locals:         0       0       0       0
  4036 ;;      Temps:          0       0       0       0
  4037 ;;      Totals:         0       0       0       0
  4038 ;;Total ram usage:        0 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    6
  4041 ;; This function calls:
  4042 ;;		_TouchPower
  4043 ;;		_setSw_Main
  4044 ;; This function is called by:
  4045 ;;		_main
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _Switch_Main
  4051  0948                     _Switch_Main:	
  4052                           
  4053                           ;Switch_B1.c: 79: setSw_Main(1);
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _Switch_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4057  0948  3001               	movlw	1
  4058  0949  118A  25BB  158A   	fcall	_setSw_Main
  4059                           
  4060                           ;Switch_B1.c: 83: setSw_Main(2);
  4061  094C  3002               	movlw	2
  4062  094D  118A  25BB  158A   	fcall	_setSw_Main
  4063                           
  4064                           ;Switch_B1.c: 91: TouchPower();
  4065  0950  158A  2241         	fcall	_TouchPower
  4066  0952  0008               	return
  4067  0953                     __end_of_Switch_Main:	
  4068                           
  4069                           	psect	text15
  4070  05BB                     __ptext15:	
  4071 ;; *************** function _setSw_Main *****************
  4072 ;; Defined at:
  4073 ;;		line 117 in file "../src/Switch_B1.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  sw              1    wreg     unsigned char 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  sw              1    8[BANK0 ] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;		None               void
  4080 ;; Registers used:
  4081 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4087 ;;      Params:         0       0       0       0
  4088 ;;      Locals:         0       1       0       0
  4089 ;;      Temps:          0       2       0       0
  4090 ;;      Totals:         0       3       0       0
  4091 ;;Total ram usage:        3 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    5
  4094 ;; This function calls:
  4095 ;;		_SwPointSelect
  4096 ;;		_getMain_All_Error_Status
  4097 ;;		_getSw_KeyStatus
  4098 ;;		_setLED
  4099 ;;		_setLights_SwOff
  4100 ;;		_setLights_SwOn
  4101 ;; This function is called by:
  4102 ;;		_Switch_Main
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           
  4107                           ;psect for function _setSw_Main
  4108  05BB                     _setSw_Main:	
  4109                           
  4110                           ;incstack = 0
  4111                           ; Regs used in _setSw_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4112                           ;setSw_Main@sw stored from wreg
  4113  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  4114  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  4115  05BD  00DF               	movwf	setSw_Main@sw
  4116                           
  4117                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4118  05BE  085F               	movf	setSw_Main@sw,w
  4119  05BF  158A  221A  118A   	fcall	_SwPointSelect
  4120                           
  4121                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4122  05C2  0879               	movf	_Sw,w
  4123  05C3  0084               	movwf	4
  4124  05C4  1783               	bsf	3,7	;select IRP bank2
  4125  05C5  1C00               	btfss	0,0
  4126  05C6  2E6E               	goto	l1426
  4127                           
  4128                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4129  05C7  3000               	movlw	0
  4130  05C8  158A  24D0  118A   	fcall	_getMain_All_Error_Status
  4131  05CB  3800               	iorlw	0
  4132  05CC  1D03               	skipz
  4133  05CD  2DE9               	goto	l5461
  4134                           
  4135                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4136  05CE  0A79               	incf	_Sw,w
  4137  05CF  0084               	movwf	4
  4138  05D0  1783               	bsf	3,7	;select IRP bank2
  4139  05D1  1080               	bcf	0,1
  4140                           
  4141                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4142  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  4143  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  4144  05D4  085F               	movf	setSw_Main@sw,w
  4145  05D5  158A  2255  118A   	fcall	_getSw_KeyStatus
  4146  05D8  3A01               	xorlw	1
  4147  05D9  3000               	movlw	0
  4148  05DA  1903               	skipnz
  4149  05DB  3001               	movlw	1
  4150  05DC  1283               	bcf	3,5	;RP0=0, select bank0
  4151  05DD  1303               	bcf	3,6	;RP1=0, select bank0
  4152  05DE  00DD               	movwf	??_setSw_Main
  4153  05DF  0879               	movf	_Sw,w
  4154  05E0  0084               	movwf	4
  4155  05E1  0DDD               	rlf	??_setSw_Main,f
  4156  05E2  1783               	bsf	3,7	;select IRP bank2
  4157  05E3  0800               	movf	0,w
  4158  05E4  065D               	xorwf	??_setSw_Main,w
  4159  05E5  39FD               	andlw	-3
  4160  05E6  065D               	xorwf	??_setSw_Main,w
  4161  05E7  0080               	movwf	0
  4162                           
  4163                           ;Switch_B1.c: 124: } else {
  4164  05E8  2DF7               	goto	l1428
  4165  05E9                     l5461:	
  4166                           
  4167                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4168  05E9  0A79               	incf	_Sw,w
  4169  05EA  0084               	movwf	4
  4170  05EB  1783               	bsf	3,7	;select IRP bank2
  4171  05EC  1880               	btfsc	0,1
  4172  05ED  2DF7               	goto	l1428
  4173                           
  4174                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4175  05EE  0A79               	incf	_Sw,w
  4176  05EF  0084               	movwf	4
  4177  05F0  1480               	bsf	0,1
  4178                           
  4179                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4180  05F1  0879               	movf	_Sw,w
  4181  05F2  0084               	movwf	4
  4182  05F3  1080               	bcf	0,1
  4183                           
  4184                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4185  05F4  0879               	movf	_Sw,w
  4186  05F5  0084               	movwf	4
  4187  05F6  1500               	bsf	0,2
  4188  05F7                     l1428:	
  4189                           
  4190                           ;Switch_B1.c: 130: }
  4191                           ;Switch_B1.c: 131: }
  4192                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4193  05F7  0879               	movf	_Sw,w
  4194  05F8  0084               	movwf	4
  4195  05F9  1C80               	btfss	0,1
  4196  05FA  2E45               	goto	l5489
  4197                           
  4198                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4199  05FB  0879               	movf	_Sw,w
  4200  05FC  0084               	movwf	4
  4201  05FD  1900               	btfsc	0,2
  4202  05FE  2E1A               	goto	l5477
  4203                           
  4204                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4205  05FF  3001               	movlw	1
  4206  0600  1283               	bcf	3,5	;RP0=0, select bank0
  4207  0601  1303               	bcf	3,6	;RP1=0, select bank0
  4208  0602  00DD               	movwf	??_setSw_Main
  4209  0603  0879               	movf	_Sw,w
  4210  0604  3E02               	addlw	2
  4211  0605  0084               	movwf	4
  4212  0606  085D               	movf	??_setSw_Main,w
  4213  0607  0780               	addwf	0,f
  4214                           
  4215                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  4216  0608  0879               	movf	_Sw,w
  4217  0609  3E02               	addlw	2
  4218  060A  0084               	movwf	4
  4219  060B  3003               	movlw	3
  4220  060C  0200               	subwf	0,w
  4221  060D  1C03               	skipc
  4222  060E  0008               	return
  4223                           
  4224                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4225  060F  0879               	movf	_Sw,w
  4226  0610  3E02               	addlw	2
  4227  0611  0084               	movwf	4
  4228  0612  0180               	clrf	0
  4229                           
  4230                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4231  0613  0879               	movf	_Sw,w
  4232  0614  0084               	movwf	4
  4233  0615  1500               	bsf	0,2
  4234                           
  4235                           ;Switch_B1.c: 140: setLights_SwOn(sw);
  4236  0616  085F               	movf	setSw_Main@sw,w
  4237  0617  158A  250E         	fcall	_setLights_SwOn
  4238                           
  4239                           ;Switch_B1.c: 146: }
  4240                           ;Switch_B1.c: 147: } else {
  4241  0619  0008               	return
  4242  061A                     l5477:	
  4243                           
  4244                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  4245  061A  0879               	movf	_Sw,w
  4246  061B  0084               	movwf	4
  4247  061C  1783               	bsf	3,7	;select IRP bank2
  4248  061D  1980               	btfsc	0,3
  4249  061E  0008               	return
  4250                           
  4251                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  4252  061F  0879               	movf	_Sw,w
  4253  0620  3E03               	addlw	3
  4254  0621  0084               	movwf	4
  4255  0622  3001               	movlw	1
  4256  0623  0780               	addwf	0,f
  4257  0624  0A84               	incf	4,f
  4258  0625  1803               	skipnc
  4259  0626  0A80               	incf	0,f
  4260                           
  4261                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (3000 / 20)) {
  4262  0627  0879               	movf	_Sw,w
  4263  0628  3E03               	addlw	3
  4264  0629  0084               	movwf	4
  4265  062A  0800               	movf	0,w
  4266  062B  1283               	bcf	3,5	;RP0=0, select bank0
  4267  062C  1303               	bcf	3,6	;RP1=0, select bank0
  4268  062D  00DD               	movwf	??_setSw_Main
  4269  062E  0A84               	incf	4,f
  4270  062F  0800               	movf	0,w
  4271  0630  00DE               	movwf	??_setSw_Main+1
  4272  0631  3000               	movlw	0
  4273  0632  025E               	subwf	??_setSw_Main+1,w
  4274  0633  3096               	movlw	150
  4275  0634  1903               	skipnz
  4276  0635  025D               	subwf	??_setSw_Main,w
  4277  0636  1C03               	skipc
  4278  0637  0008               	return
  4279                           
  4280                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  4281  0638  0879               	movf	_Sw,w
  4282  0639  3E03               	addlw	3
  4283  063A  0084               	movwf	4
  4284  063B  0180               	clrf	0
  4285  063C  0A84               	incf	4,f
  4286  063D  0180               	clrf	0
  4287                           
  4288                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  4289  063E  0879               	movf	_Sw,w
  4290  063F  0084               	movwf	4
  4291  0640  1580               	bsf	0,3
  4292                           
  4293                           ;Switch_B1.c: 154: setLights_SwOff(sw);
  4294  0641  085F               	movf	setSw_Main@sw,w
  4295  0642  158A  242F         	fcall	_setLights_SwOff
  4296                           
  4297                           ;Switch_B1.c: 194: }
  4298                           ;Switch_B1.c: 195: }
  4299                           ;Switch_B1.c: 196: } else {
  4300                           
  4301                           ;Switch_B1.c: 161: }
  4302                           ;Switch_B1.c: 162: } else {
  4303  0644  0008               	return
  4304  0645                     l5489:	
  4305                           
  4306                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  4307  0645  0879               	movf	_Sw,w
  4308  0646  0084               	movwf	4
  4309  0647  1783               	bsf	3,7	;select IRP bank2
  4310  0648  1D00               	btfss	0,2
  4311  0649  0008               	return
  4312                           
  4313                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  4314  064A  3001               	movlw	1
  4315  064B  1283               	bcf	3,5	;RP0=0, select bank0
  4316  064C  1303               	bcf	3,6	;RP1=0, select bank0
  4317  064D  00DD               	movwf	??_setSw_Main
  4318  064E  0879               	movf	_Sw,w
  4319  064F  3E02               	addlw	2
  4320  0650  0084               	movwf	4
  4321  0651  085D               	movf	??_setSw_Main,w
  4322  0652  0780               	addwf	0,f
  4323                           
  4324                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  4325  0653  0879               	movf	_Sw,w
  4326  0654  3E02               	addlw	2
  4327  0655  0084               	movwf	4
  4328  0656  3003               	movlw	3
  4329  0657  0200               	subwf	0,w
  4330  0658  1C03               	skipc
  4331  0659  0008               	return
  4332                           
  4333                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  4334  065A  0879               	movf	_Sw,w
  4335  065B  3E02               	addlw	2
  4336  065C  0084               	movwf	4
  4337  065D  0180               	clrf	0
  4338                           
  4339                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  4340  065E  0879               	movf	_Sw,w
  4341  065F  0084               	movwf	4
  4342  0660  1100               	bcf	0,2
  4343                           
  4344                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  4345  0661  0879               	movf	_Sw,w
  4346  0662  3E03               	addlw	3
  4347  0663  0084               	movwf	4
  4348  0664  0180               	clrf	0
  4349  0665  0A84               	incf	4,f
  4350  0666  0180               	clrf	0
  4351                           
  4352                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  4353  0667  0879               	movf	_Sw,w
  4354  0668  0084               	movwf	4
  4355  0669  1180               	bcf	0,3
  4356                           
  4357                           ;Switch_B1.c: 212: setLights_SwOff(sw);
  4358  066A  085F               	movf	setSw_Main@sw,w
  4359  066B  158A  242F         	fcall	_setLights_SwOff
  4360                           
  4361                           ;Switch_B1.c: 221: }
  4362                           ;Switch_B1.c: 222: }
  4363                           ;Switch_B1.c: 223: }
  4364                           ;Switch_B1.c: 224: } else {
  4365  066D  0008               	return
  4366  066E                     l1426:	
  4367                           
  4368                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  4369  066E  1283               	bcf	3,5	;RP0=0, select bank0
  4370  066F  1303               	bcf	3,6	;RP1=0, select bank0
  4371  0670  1C31               	btfss	_myMain,0
  4372  0671  0008               	return
  4373                           
  4374                           ;Switch_B1.c: 226: Sw->Enable = 1;
  4375  0672  0879               	movf	_Sw,w
  4376  0673  0084               	movwf	4
  4377  0674  1400               	bsf	0,0
  4378                           
  4379                           ;Switch_B1.c: 228: if (sw == 2) {
  4380  0675  085F               	movf	setSw_Main@sw,w
  4381  0676  3A02               	xorlw	2
  4382  0677  1D03               	skipz
  4383  0678  0008               	return
  4384                           
  4385                           ;Switch_B1.c: 229: setLED(1, 1);
  4386  0679  01D7               	clrf	setLED@command
  4387  067A  0AD7               	incf	setLED@command,f
  4388  067B  3001               	movlw	1
  4389  067C  158A  265B         	fcall	_setLED
  4390  067E  0008               	return
  4391  067F                     __end_of_setSw_Main:	
  4392                           
  4393                           	psect	text16
  4394  0A55                     __ptext16:	
  4395 ;; *************** function _getSw_KeyStatus *****************
  4396 ;; Defined at:
  4397 ;;		line 237 in file "../src/Switch_B1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  sw              1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  sw              1    5[COMMON] unsigned char 
  4402 ;;  status          1    4[COMMON] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  1    wreg      unsigned char 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4412 ;;      Params:         0       0       0       0
  4413 ;;      Locals:         2       0       0       0
  4414 ;;      Temps:          0       0       0       0
  4415 ;;      Totals:         2       0       0       0
  4416 ;;Total ram usage:        2 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    2
  4419 ;; This function calls:
  4420 ;;		Nothing
  4421 ;; This function is called by:
  4422 ;;		_setSw_Main
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           
  4427                           ;psect for function _getSw_KeyStatus
  4428  0A55                     _getSw_KeyStatus:	
  4429                           
  4430                           ;incstack = 0
  4431                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  4432                           ;getSw_KeyStatus@sw stored from wreg
  4433  0A55  00F5               	movwf	getSw_KeyStatus@sw
  4434                           
  4435                           ;Switch_B1.c: 238: char status = 0;
  4436  0A56  01F4               	clrf	getSw_KeyStatus@status
  4437                           
  4438                           ;Switch_B1.c: 252: if (sw == 1) {
  4439  0A57  0875               	movf	getSw_KeyStatus@sw,w
  4440  0A58  3A01               	xorlw	1
  4441  0A59  1D03               	skipz
  4442  0A5A  2A5D               	goto	l3843
  4443                           
  4444                           ;Switch_B1.c: 253: __nop();
  4445  0A5B  0000               	nop
  4446                           
  4447                           ;Switch_B1.c: 254: } else if (sw == 2) {
  4448  0A5C  2A67               	goto	l3847
  4449  0A5D                     l3843:	
  4450  0A5D  0875               	movf	getSw_KeyStatus@sw,w
  4451  0A5E  3A02               	xorlw	2
  4452  0A5F  1D03               	skipz
  4453  0A60  2A67               	goto	l3847
  4454                           
  4455                           ;Switch_B1.c: 255: status = RB4 == 1 ? 1 : 0;
  4456  0A61  3000               	movlw	0
  4457  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0A64  1A06               	btfsc	6,4	;volatile
  4460  0A65  3001               	movlw	1
  4461  0A66  00F4               	movwf	getSw_KeyStatus@status
  4462  0A67                     l3847:	
  4463                           
  4464                           ;Switch_B1.c: 256: }
  4465                           ;Switch_B1.c: 275: return status;
  4466  0A67  0874               	movf	getSw_KeyStatus@status,w
  4467  0A68  0008               	return
  4468  0A69                     __end_of_getSw_KeyStatus:	
  4469                           
  4470                           	psect	text17
  4471  0A1A                     __ptext17:	
  4472 ;; *************** function _SwPointSelect *****************
  4473 ;; Defined at:
  4474 ;;		line 25 in file "../src/Switch_B1.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  sw              1    wreg     unsigned char 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  sw              1    5[COMMON] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;		None               void
  4481 ;; Registers used:
  4482 ;;		wreg
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4488 ;;      Params:         0       0       0       0
  4489 ;;      Locals:         1       0       0       0
  4490 ;;      Temps:          1       0       0       0
  4491 ;;      Totals:         2       0       0       0
  4492 ;;Total ram usage:        2 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    2
  4495 ;; This function calls:
  4496 ;;		Nothing
  4497 ;; This function is called by:
  4498 ;;		_setSw_Main
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           
  4503                           ;psect for function _SwPointSelect
  4504  0A1A                     _SwPointSelect:	
  4505                           
  4506                           ;incstack = 0
  4507                           ; Regs used in _SwPointSelect: [wreg]
  4508                           ;SwPointSelect@sw stored from wreg
  4509  0A1A  00F5               	movwf	SwPointSelect@sw
  4510                           
  4511                           ;Switch_B1.c: 28: if (sw == 1) {
  4512  0A1B  0875               	movf	SwPointSelect@sw,w
  4513  0A1C  3A01               	xorlw	1
  4514  0A1D  1D03               	skipz
  4515  0A1E  2A24               	goto	l3833
  4516                           
  4517                           ;Switch_B1.c: 29: Sw = &Sw1;
  4518  0A1F  3020               	movlw	_Sw1& (0+255)
  4519  0A20  00F4               	movwf	??_SwPointSelect
  4520  0A21  0874               	movf	??_SwPointSelect,w
  4521  0A22  00F9               	movwf	_Sw
  4522                           
  4523                           ;Switch_B1.c: 30: }
  4524  0A23  0008               	return
  4525  0A24                     l3833:	
  4526                           
  4527                           ;Switch_B1.c: 33: else if (sw == 2) {
  4528  0A24  0875               	movf	SwPointSelect@sw,w
  4529  0A25  3A02               	xorlw	2
  4530  0A26  1D03               	skipz
  4531  0A27  0008               	return
  4532                           
  4533                           ;Switch_B1.c: 34: Sw = &Sw2;
  4534  0A28  3025               	movlw	_Sw2& (0+255)
  4535  0A29  00F4               	movwf	??_SwPointSelect
  4536  0A2A  0874               	movf	??_SwPointSelect,w
  4537  0A2B  00F9               	movwf	_Sw
  4538  0A2C  0008               	return
  4539  0A2D                     __end_of_SwPointSelect:	
  4540                           
  4541                           	psect	text18
  4542  0A41                     __ptext18:	
  4543 ;; *************** function _TouchPower *****************
  4544 ;; Defined at:
  4545 ;;		line 10 in file "../src/Switch_B1.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;		None
  4548 ;; Auto vars:     Size  Location     Type
  4549 ;;		None
  4550 ;; Return value:  Size  Location     Type
  4551 ;;		None               void
  4552 ;; Registers used:
  4553 ;;		wreg, status,2, status,0, pclath, cstack
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4559 ;;      Params:         0       0       0       0
  4560 ;;      Locals:         0       0       0       0
  4561 ;;      Temps:          0       0       0       0
  4562 ;;      Totals:         0       0       0       0
  4563 ;;Total ram usage:        0 bytes
  4564 ;; Hardware stack levels used:    1
  4565 ;; Hardware stack levels required when called:    3
  4566 ;; This function calls:
  4567 ;;		_Timeout_Counter
  4568 ;;		_set_TimeoutCleared
  4569 ;; This function is called by:
  4570 ;;		_Switch_Main
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function _TouchPower
  4576  0A41                     _TouchPower:	
  4577                           
  4578                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  4579                           
  4580                           ;incstack = 0
  4581                           ; Regs used in _TouchPower: [wreg+status,2+status,0+pclath+cstack]
  4582  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  4583  0A42  1303               	bcf	3,6	;RP1=0, select bank0
  4584  0A43  1C31               	btfss	_myMain,0
  4585  0A44  0008               	return
  4586                           
  4587                           ;Switch_B1.c: 12: if (RB5 == 0) {
  4588  0A45  1A86               	btfsc	6,5	;volatile
  4589  0A46  0008               	return
  4590  0A47  2A4C               	goto	l5445
  4591  0A48                     l1404:	
  4592                           ;Switch_B1.c: 13: while (RB5 == 0 && myMain.Timeout == 0) {
  4593                           
  4594                           
  4595                           ;Switch_B1.c: 14: RB5 = 1;
  4596  0A48  1686               	bsf	6,5	;volatile
  4597                           
  4598                           ;Switch_B1.c: 15: Timeout_Counter();
  4599  0A49  158A  222D  158A   	fcall	_Timeout_Counter
  4600  0A4C                     l5445:	
  4601  0A4C  1283               	bcf	3,5	;RP0=0, select bank0
  4602  0A4D  1303               	bcf	3,6	;RP1=0, select bank0
  4603  0A4E  1A86               	btfsc	6,5	;volatile
  4604  0A4F  2A52               	goto	l5449
  4605  0A50  1D33               	btfss	_myMain+2,2
  4606  0A51  2A48               	goto	l1404
  4607  0A52                     l5449:	
  4608                           
  4609                           ;Switch_B1.c: 16: }
  4610                           ;Switch_B1.c: 17: set_TimeoutCleared();
  4611  0A52  158A  2109         	fcall	_set_TimeoutCleared
  4612  0A54  0008               	return
  4613  0A55                     __end_of_TouchPower:	
  4614                           
  4615                           	psect	text19
  4616  0909                     __ptext19:	
  4617 ;; *************** function _set_TimeoutCleared *****************
  4618 ;; Defined at:
  4619 ;;		line 281 in file "../src/Main_B1.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;		None               void
  4626 ;; Registers used:
  4627 ;;		status,2
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4633 ;;      Params:         0       0       0       0
  4634 ;;      Locals:         0       0       0       0
  4635 ;;      Temps:          0       0       0       0
  4636 ;;      Totals:         0       0       0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:    2
  4640 ;; This function calls:
  4641 ;;		Nothing
  4642 ;; This function is called by:
  4643 ;;		_getAD
  4644 ;;		_TouchPower
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           
  4649                           ;psect for function _set_TimeoutCleared
  4650  0909                     _set_TimeoutCleared:	
  4651                           
  4652                           ;Main_B1.c: 282: myMain.Timeout = 0;
  4653                           
  4654                           ;incstack = 0
  4655                           ; Regs used in _set_TimeoutCleared: [status,2]
  4656  0909  1283               	bcf	3,5	;RP0=0, select bank0
  4657  090A  1303               	bcf	3,6	;RP1=0, select bank0
  4658  090B  1133               	bcf	_myMain+2,2
  4659                           
  4660                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  4661  090C  01B4               	clrf	_myMain+3
  4662  090D  01B5               	clrf	_myMain+4
  4663  090E  0008               	return
  4664  090F                     __end_of_set_TimeoutCleared:	
  4665                           
  4666                           	psect	text20
  4667  0A2D                     __ptext20:	
  4668 ;; *************** function _Timeout_Counter *****************
  4669 ;; Defined at:
  4670 ;;		line 272 in file "../src/Main_B1.c"
  4671 ;; Parameters:    Size  Location     Type
  4672 ;;		None
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;		None
  4675 ;; Return value:  Size  Location     Type
  4676 ;;		None               void
  4677 ;; Registers used:
  4678 ;;		wreg, status,2
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4684 ;;      Params:         0       0       0       0
  4685 ;;      Locals:         0       0       0       0
  4686 ;;      Temps:          0       0       0       0
  4687 ;;      Totals:         0       0       0       0
  4688 ;;Total ram usage:        0 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    2
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_getAD
  4695 ;;		_TouchPower
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           
  4700                           ;psect for function _Timeout_Counter
  4701  0A2D                     _Timeout_Counter:	
  4702                           
  4703                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  4704                           
  4705                           ;incstack = 0
  4706                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  4707  0A2D  3001               	movlw	1
  4708  0A2E  1283               	bcf	3,5	;RP0=0, select bank0
  4709  0A2F  1303               	bcf	3,6	;RP1=0, select bank0
  4710  0A30  07B4               	addwf	_myMain+3,f
  4711  0A31  1803               	skipnc
  4712  0A32  0AB5               	incf	_myMain+4,f
  4713  0A33  3000               	movlw	0
  4714  0A34  07B5               	addwf	_myMain+4,f
  4715                           
  4716                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  4717  0A35  3061               	movlw	97
  4718  0A36  0635               	xorwf	_myMain+4,w
  4719  0A37  1D03               	skipz
  4720  0A38  2A3B               	goto	u5975
  4721  0A39  30A8               	movlw	168
  4722  0A3A  0634               	xorwf	_myMain+3,w
  4723  0A3B                     u5975:	
  4724  0A3B  1D03               	skipz
  4725  0A3C  0008               	return
  4726                           
  4727                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  4728  0A3D  01B4               	clrf	_myMain+3
  4729  0A3E  01B5               	clrf	_myMain+4
  4730                           
  4731                           ;Main_B1.c: 276: myMain.Timeout = 1;
  4732  0A3F  1533               	bsf	_myMain+2,2
  4733  0A40  0008               	return
  4734  0A41                     __end_of_Timeout_Counter:	
  4735                           
  4736                           	psect	text21
  4737  08DA                     __ptext21:	
  4738 ;; *************** function _Switch_Initialization *****************
  4739 ;; Defined at:
  4740 ;;		line 46 in file "../src/Switch_B1.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;		None
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;		None
  4745 ;; Return value:  Size  Location     Type
  4746 ;;		None               void
  4747 ;; Registers used:
  4748 ;;		None
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4754 ;;      Params:         0       0       0       0
  4755 ;;      Locals:         0       0       0       0
  4756 ;;      Temps:          0       0       0       0
  4757 ;;      Totals:         0       0       0       0
  4758 ;;Total ram usage:        0 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    2
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_main
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           
  4769                           ;psect for function _Switch_Initialization
  4770  08DA                     _Switch_Initialization:	
  4771                           
  4772                           ;incstack = 0
  4773                           ; Regs used in _Switch_Initialization: []
  4774  08DA  0008               	return
  4775  08DB                     __end_of_Switch_Initialization:	
  4776                           
  4777                           	psect	text22
  4778  08E3                     __ptext22:	
  4779 ;; *************** function _SYSC_Main *****************
  4780 ;; Defined at:
  4781 ;;		line 17 in file "../src/SYSC_B1.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;		None
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;		None
  4786 ;; Return value:  Size  Location     Type
  4787 ;;		None               void
  4788 ;; Registers used:
  4789 ;;		wreg, status,2, status,0, pclath, cstack
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4795 ;;      Params:         0       0       0       0
  4796 ;;      Locals:         0       0       0       0
  4797 ;;      Temps:          0       0       0       0
  4798 ;;      Totals:         0       0       0       0
  4799 ;;Total ram usage:        0 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    4
  4802 ;; This function calls:
  4803 ;;		_setSYSC_Main
  4804 ;; This function is called by:
  4805 ;;		_main
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _SYSC_Main
  4811  08E3                     _SYSC_Main:	
  4812                           
  4813                           ;SYSC_B1.c: 19: setSYSC_Main();
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4817  08E3  158A  25D0         	fcall	_setSYSC_Main
  4818  08E5  0008               	return
  4819  08E6                     __end_of_SYSC_Main:	
  4820                           
  4821                           	psect	text23
  4822  0DD0                     __ptext23:	
  4823 ;; *************** function _setSYSC_Main *****************
  4824 ;; Defined at:
  4825 ;;		line 23 in file "../src/SYSC_B1.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;		None
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;		None
  4830 ;; Return value:  Size  Location     Type
  4831 ;;		None               void
  4832 ;; Registers used:
  4833 ;;		wreg, status,2, status,0, pclath, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4839 ;;      Params:         0       0       0       0
  4840 ;;      Locals:         0       0       0       0
  4841 ;;      Temps:          0       0       0       0
  4842 ;;      Totals:         0       0       0       0
  4843 ;;Total ram usage:        0 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    3
  4846 ;; This function calls:
  4847 ;;		_getMain_All_Error_Status
  4848 ;; This function is called by:
  4849 ;;		_SYSC_Main
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           
  4854                           ;psect for function _setSYSC_Main
  4855  0DD0                     _setSYSC_Main:	
  4856                           
  4857                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4858                           
  4859                           ;incstack = 0
  4860                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4861  0DD0  1283               	bcf	3,5	;RP0=0, select bank0
  4862  0DD1  1303               	bcf	3,6	;RP1=0, select bank0
  4863  0DD2  1C2C               	btfss	_SYSC,0
  4864  0DD3  0008               	return
  4865                           
  4866                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4867  0DD4  18AC               	btfsc	_SYSC,1
  4868  0DD5  2DE7               	goto	l4115
  4869                           
  4870                           ;SYSC_B1.c: 27: SYSC.Time++;
  4871  0DD6  3001               	movlw	1
  4872  0DD7  07AD               	addwf	_SYSC+1,f
  4873  0DD8  1803               	skipnc
  4874  0DD9  0AAE               	incf	_SYSC+2,f
  4875  0DDA  3000               	movlw	0
  4876  0DDB  07AE               	addwf	_SYSC+2,f
  4877                           
  4878                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4879  0DDC  3000               	movlw	0
  4880  0DDD  022E               	subwf	_SYSC+2,w
  4881  0DDE  3019               	movlw	25
  4882  0DDF  1903               	skipnz
  4883  0DE0  022D               	subwf	_SYSC+1,w
  4884  0DE1  1C03               	skipc
  4885  0DE2  0008               	return
  4886                           
  4887                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4888  0DE3  01AD               	clrf	_SYSC+1
  4889  0DE4  01AE               	clrf	_SYSC+2
  4890                           
  4891                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4892  0DE5  14AC               	bsf	_SYSC,1
  4893                           
  4894                           ;SYSC_B1.c: 31: }
  4895                           ;SYSC_B1.c: 32: } else {
  4896  0DE6  0008               	return
  4897  0DE7                     l4115:	
  4898                           
  4899                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4900  0DE7  3001               	movlw	1
  4901  0DE8  158A  24D0  158A   	fcall	_getMain_All_Error_Status
  4902  0DEB  3800               	iorlw	0
  4903  0DEC  1D03               	skipz
  4904  0DED  0008               	return
  4905                           
  4906                           ;SYSC_B1.c: 34: SYSC.Time++;
  4907  0DEE  3001               	movlw	1
  4908  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  4909  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  4910  0DF1  07AD               	addwf	_SYSC+1,f
  4911  0DF2  1803               	skipnc
  4912  0DF3  0AAE               	incf	_SYSC+2,f
  4913  0DF4  3000               	movlw	0
  4914  0DF5  07AE               	addwf	_SYSC+2,f
  4915                           
  4916                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4917  0DF6  3000               	movlw	0
  4918  0DF7  022E               	subwf	_SYSC+2,w
  4919  0DF8  3019               	movlw	25
  4920  0DF9  1903               	skipnz
  4921  0DFA  022D               	subwf	_SYSC+1,w
  4922  0DFB  1C03               	skipc
  4923  0DFC  2E02               	goto	l4121
  4924                           
  4925                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4926  0DFD  01AD               	clrf	_SYSC+1
  4927  0DFE  01AE               	clrf	_SYSC+2
  4928                           
  4929                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4930  0DFF  01AF               	clrf	_SYSC+3
  4931  0E00  01B0               	clrf	_SYSC+4
  4932                           
  4933                           ;SYSC_B1.c: 38: } else {
  4934  0E01  0008               	return
  4935  0E02                     l4121:	
  4936                           
  4937                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4938  0E02  3001               	movlw	1
  4939  0E03  07AF               	addwf	_SYSC+3,f
  4940  0E04  1803               	skipnc
  4941  0E05  0AB0               	incf	_SYSC+4,f
  4942  0E06  3000               	movlw	0
  4943  0E07  07B0               	addwf	_SYSC+4,f
  4944                           
  4945                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4946  0E08  3001               	movlw	1
  4947  0E09  0630               	xorwf	_SYSC+4,w
  4948  0E0A  1D03               	skipz
  4949  0E0B  2E0E               	goto	u3835
  4950  0E0C  30F4               	movlw	244
  4951  0E0D  062F               	xorwf	_SYSC+3,w
  4952  0E0E                     u3835:	
  4953  0E0E  1D03               	skipz
  4954  0E0F  0008               	return
  4955                           
  4956                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4957  0E10  01AF               	clrf	_SYSC+3
  4958  0E11  01B0               	clrf	_SYSC+4
  4959                           
  4960                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4961  0E12  10AC               	bcf	_SYSC,1
  4962  0E13  0008               	return
  4963  0E14                     __end_of_setSYSC_Main:	
  4964                           
  4965                           	psect	text24
  4966  08E0                     __ptext24:	
  4967 ;; *************** function _SYSC_Initialization *****************
  4968 ;; Defined at:
  4969 ;;		line 7 in file "../src/SYSC_B1.c"
  4970 ;; Parameters:    Size  Location     Type
  4971 ;;		None
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;		None               void
  4976 ;; Registers used:
  4977 ;;		status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4983 ;;      Params:         0       0       0       0
  4984 ;;      Locals:         0       0       0       0
  4985 ;;      Temps:          0       0       0       0
  4986 ;;      Totals:         0       0       0       0
  4987 ;;Total ram usage:        0 bytes
  4988 ;; Hardware stack levels used:    1
  4989 ;; Hardware stack levels required when called:    3
  4990 ;; This function calls:
  4991 ;;		_setSYSC_Initialization
  4992 ;; This function is called by:
  4993 ;;		_main
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997                           
  4998                           ;psect for function _SYSC_Initialization
  4999  08E0                     _SYSC_Initialization:	
  5000                           
  5001                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  5002                           
  5003                           ;incstack = 0
  5004                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  5005  08E0  158A  20F4         	fcall	_setSYSC_Initialization
  5006  08E2  0008               	return
  5007  08E3                     __end_of_SYSC_Initialization:	
  5008                           
  5009                           	psect	text25
  5010  08F4                     __ptext25:	
  5011 ;; *************** function _setSYSC_Initialization *****************
  5012 ;; Defined at:
  5013 ;;		line 13 in file "../src/SYSC_B1.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;		None
  5018 ;; Return value:  Size  Location     Type
  5019 ;;		None               void
  5020 ;; Registers used:
  5021 ;;		None
  5022 ;; Tracked objects:
  5023 ;;		On entry : 0/0
  5024 ;;		On exit  : 0/0
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5027 ;;      Params:         0       0       0       0
  5028 ;;      Locals:         0       0       0       0
  5029 ;;      Temps:          0       0       0       0
  5030 ;;      Totals:         0       0       0       0
  5031 ;;Total ram usage:        0 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    2
  5034 ;; This function calls:
  5035 ;;		Nothing
  5036 ;; This function is called by:
  5037 ;;		_SYSC_Initialization
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           
  5042                           ;psect for function _setSYSC_Initialization
  5043  08F4                     _setSYSC_Initialization:	
  5044                           
  5045                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  5046                           
  5047                           ;incstack = 0
  5048                           ; Regs used in _setSYSC_Initialization: []
  5049  08F4  1283               	bcf	3,5	;RP0=0, select bank0
  5050  08F5  1303               	bcf	3,6	;RP1=0, select bank0
  5051  08F6  142C               	bsf	_SYSC,0
  5052  08F7  0008               	return
  5053  08F8                     __end_of_setSYSC_Initialization:	
  5054                           
  5055                           	psect	text26
  5056  0217                     __ptext26:	
  5057 ;; *************** function _PIR_Main *****************
  5058 ;; Defined at:
  5059 ;;		line 13 in file "../src/PIR_B1.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;		None
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  LightsStatus    1   16[BANK0 ] unsigned char 
  5064 ;;  TriggerValue    1   15[BANK0 ] unsigned char 
  5065 ;;  Enable_Switc    1   14[BANK0 ] unsigned char 
  5066 ;;  cds             1   11[BANK0 ] unsigned char 
  5067 ;;  error           1   10[BANK0 ] unsigned char 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;		None               void
  5070 ;; Registers used:
  5071 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5077 ;;      Params:         0       0       0       0
  5078 ;;      Locals:         0       7       0       0
  5079 ;;      Temps:          0       4       0       0
  5080 ;;      Totals:         0      11       0       0
  5081 ;;Total ram usage:       11 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; Hardware stack levels required when called:    5
  5084 ;; This function calls:
  5085 ;;		_getCDS_Status
  5086 ;;		_getLights_Status
  5087 ;;		_getMain_All_Error_Status
  5088 ;;		_setLights_SwOff
  5089 ;;		_setLights_SwOn
  5090 ;; This function is called by:
  5091 ;;		_main
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           
  5096                           ;psect for function _PIR_Main
  5097  0217                     _PIR_Main:	
  5098                           
  5099                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5103  0217  3000               	movlw	0
  5104  0218  158A  24D0  118A   	fcall	_getMain_All_Error_Status
  5105  021B  1283               	bcf	3,5	;RP0=0, select bank0
  5106  021C  1303               	bcf	3,6	;RP1=0, select bank0
  5107  021D  00DD               	movwf	??_PIR_Main
  5108  021E  085D               	movf	??_PIR_Main,w
  5109  021F  00E1               	movwf	PIR_Main@error
  5110                           
  5111                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  5112  0220  158A  212D  118A   	fcall	_getCDS_Status
  5113  0223  1283               	bcf	3,5	;RP0=0, select bank0
  5114  0224  1303               	bcf	3,6	;RP1=0, select bank0
  5115  0225  00DD               	movwf	??_PIR_Main
  5116  0226  085D               	movf	??_PIR_Main,w
  5117  0227  00E2               	movwf	PIR_Main@cds
  5118                           
  5119                           ;PIR_B1.c: 16: char LightsStatus = 0;
  5120  0228  01E7               	clrf	PIR_Main@LightsStatus
  5121                           
  5122                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  5123  0229  01E5               	clrf	PIR_Main@Enable_Switch
  5124  022A  0AE5               	incf	PIR_Main@Enable_Switch,f
  5125                           
  5126                           ;PIR_B1.c: 18: char TriggerValue = 0;
  5127  022B  01E6               	clrf	PIR_Main@TriggerValue
  5128                           
  5129                           ;PIR_B1.c: 20: Enable_Switch = RB3 == 1 ? 1 : 0;
  5130  022C  3000               	movlw	0
  5131  022D  1986               	btfsc	6,3	;volatile
  5132  022E  3001               	movlw	1
  5133  022F  00E5               	movwf	PIR_Main@Enable_Switch
  5134                           
  5135                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  5136  0230  3001               	movlw	1
  5137  0231  158A  21D3  118A   	fcall	_getLights_Status
  5138  0234  1283               	bcf	3,5	;RP0=0, select bank0
  5139  0235  1303               	bcf	3,6	;RP1=0, select bank0
  5140  0236  00DD               	movwf	??_PIR_Main
  5141  0237  085D               	movf	??_PIR_Main,w
  5142  0238  00E7               	movwf	PIR_Main@LightsStatus
  5143                           
  5144                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  5145  0239  1683               	bsf	3,5	;RP0=1, select bank1
  5146  023A  1303               	bcf	3,6	;RP1=0, select bank1
  5147  023B  1C20               	btfss	__PIR^(0+128),0
  5148  023C  2B9F               	goto	l1040
  5149                           
  5150                           ;PIR_B1.c: 36: if (error == 0) {
  5151  023D  1283               	bcf	3,5	;RP0=0, select bank0
  5152  023E  1303               	bcf	3,6	;RP1=0, select bank0
  5153  023F  08E1               	movf	PIR_Main@error,f
  5154  0240  1D03               	skipz
  5155  0241  2A68               	goto	l1041
  5156                           
  5157                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  5158  0242  0862               	movf	PIR_Main@cds,w
  5159  0243  3A01               	xorlw	1
  5160  0244  1D03               	skipz
  5161  0245  2A4E               	goto	l1042
  5162  0246  0865               	movf	PIR_Main@Enable_Switch,w
  5163  0247  3A01               	xorlw	1
  5164  0248  1D03               	skipz
  5165  0249  2A4E               	goto	l1042
  5166                           
  5167                           ;PIR_B1.c: 39: _PIR.Available = 1;
  5168  024A  1683               	bsf	3,5	;RP0=1, select bank1
  5169  024B  1303               	bcf	3,6	;RP1=0, select bank1
  5170  024C  17A0               	bsf	__PIR^(0+128),7
  5171                           
  5172                           ;PIR_B1.c: 40: } else {
  5173  024D  2A62               	goto	l5991
  5174  024E                     l1042:	
  5175                           
  5176                           ;PIR_B1.c: 41: _PIR.Available = 0;
  5177  024E  1683               	bsf	3,5	;RP0=1, select bank1
  5178  024F  1303               	bcf	3,6	;RP1=0, select bank1
  5179  0250  13A0               	bcf	__PIR^(0+128),7
  5180                           
  5181                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  5182  0251  1DA0               	btfss	__PIR^(0+128),3
  5183  0252  2A62               	goto	l5991
  5184                           
  5185                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  5186  0253  3001               	movlw	1
  5187  0254  158A  21D3  118A   	fcall	_getLights_Status
  5188  0257  3A01               	xorlw	1
  5189  0258  1D03               	skipz
  5190  0259  2A62               	goto	l5991
  5191                           
  5192                           ;PIR_B1.c: 52: setLights_SwOn(1);
  5193  025A  3001               	movlw	1
  5194  025B  158A  250E  118A   	fcall	_setLights_SwOn
  5195                           
  5196                           ;PIR_B1.c: 53: setLights_SwOff(1);
  5197  025E  3001               	movlw	1
  5198  025F  158A  242F  118A   	fcall	_setLights_SwOff
  5199  0262                     l5991:	
  5200                           
  5201                           ;PIR_B1.c: 55: }
  5202                           ;PIR_B1.c: 67: }
  5203                           ;PIR_B1.c: 68: }
  5204                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  5205  0262  1683               	bsf	3,5	;RP0=1, select bank1
  5206  0263  1303               	bcf	3,6	;RP1=0, select bank1
  5207  0264  1A20               	btfsc	__PIR^(0+128),4
  5208  0265  2A6E               	goto	l1047
  5209                           
  5210                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  5211  0266  1620               	bsf	__PIR^(0+128),4
  5212                           
  5213                           ;PIR_B1.c: 80: }
  5214                           ;PIR_B1.c: 81: } else {
  5215  0267  2A6E               	goto	l1047
  5216  0268                     l1041:	
  5217                           
  5218                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  5219  0268  1683               	bsf	3,5	;RP0=1, select bank1
  5220  0269  1303               	bcf	3,6	;RP1=0, select bank1
  5221  026A  1E20               	btfss	__PIR^(0+128),4
  5222  026B  2A6E               	goto	l1047
  5223                           
  5224                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  5225  026C  1220               	bcf	__PIR^(0+128),4
  5226                           
  5227                           ;PIR_B1.c: 84: _PIR.Available = 0;
  5228  026D  13A0               	bcf	__PIR^(0+128),7
  5229  026E                     l1047:	
  5230                           
  5231                           ;PIR_B1.c: 102: }
  5232                           ;PIR_B1.c: 103: }
  5233                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  5234  026E  18A0               	btfsc	__PIR^(0+128),1
  5235  026F  2A7F               	goto	l1049
  5236                           
  5237                           ;PIR_B1.c: 106: _PIR.Time++;
  5238  0270  3001               	movlw	1
  5239  0271  1283               	bcf	3,5	;RP0=0, select bank0
  5240  0272  1303               	bcf	3,6	;RP1=0, select bank0
  5241  0273  00DD               	movwf	??_PIR_Main
  5242  0274  085D               	movf	??_PIR_Main,w
  5243  0275  1683               	bsf	3,5	;RP0=1, select bank1
  5244  0276  1303               	bcf	3,6	;RP1=0, select bank1
  5245  0277  07A2               	addwf	(__PIR^(0+128)+2),f
  5246                           
  5247                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  5248  0278  0822               	movf	(__PIR^(0+128)+2),w
  5249  0279  3A05               	xorlw	5
  5250  027A  1D03               	skipz
  5251  027B  2B45               	goto	l6067
  5252                           
  5253                           ;PIR_B1.c: 108: _PIR.Time = 0;
  5254  027C  01A2               	clrf	(__PIR^(0+128)+2)
  5255                           
  5256                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  5257  027D  14A0               	bsf	__PIR^(0+128),1
  5258                           
  5259                           ;PIR_B1.c: 110: }
  5260                           ;PIR_B1.c: 111: } else {
  5261  027E  2B45               	goto	l6067
  5262  027F                     l1049:	
  5263                           
  5264                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  5265  027F  1D20               	btfss	__PIR^(0+128),2
  5266  0280  2B45               	goto	l6067
  5267                           
  5268                           ;PIR_B1.c: 113: _PIR.GO = 0;
  5269  0281  1120               	bcf	__PIR^(0+128),2
  5270                           
  5271                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  5272  0282  10A0               	bcf	__PIR^(0+128),1
  5273                           
  5274                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  5275  0283  1BA0               	btfsc	__PIR^(0+128),7
  5276                           
  5277                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  5278  0284  1DA0               	btfss	__PIR^(0+128),3
  5279  0285  2B45               	goto	l6067
  5280                           
  5281                           ;PIR_B1.c: 118: _PIR.Time++;
  5282  0286  3001               	movlw	1
  5283  0287  1283               	bcf	3,5	;RP0=0, select bank0
  5284  0288  1303               	bcf	3,6	;RP1=0, select bank0
  5285  0289  00DD               	movwf	??_PIR_Main
  5286  028A  085D               	movf	??_PIR_Main,w
  5287  028B  1683               	bsf	3,5	;RP0=1, select bank1
  5288  028C  1303               	bcf	3,6	;RP1=0, select bank1
  5289  028D  07A2               	addwf	(__PIR^(0+128)+2),f
  5290                           
  5291                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  5292  028E  0822               	movf	(__PIR^(0+128)+2),w
  5293  028F  3A3C               	xorlw	60
  5294  0290  1D03               	skipz
  5295  0291  2AC6               	goto	l6045
  5296                           
  5297                           ;PIR_B1.c: 120: _PIR.Time = 0;
  5298  0292  01A2               	clrf	(__PIR^(0+128)+2)
  5299                           
  5300                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  5301  0293  305A               	movlw	90
  5302  0294  0247               	subwf	(__PIR^(0+128)+39),w
  5303  0295  1C03               	skipc
  5304  0296  2AA2               	goto	l6027
  5305                           
  5306                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  5307  0297  01C6               	clrf	(__PIR^(0+128)+38)
  5308                           
  5309                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  5310  0298  0848               	movf	(__PIR^(0+128)+40),w
  5311  0299  3A19               	xorlw	25
  5312  029A  1903               	btfsc	3,2
  5313  029B  2AB7               	goto	L10
  5314                           
  5315                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  5316                           
  5317                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  5318  029C  0848               	movf	(__PIR^(0+128)+40),w
  5319  029D  3A23               	xorlw	35
  5320  029E  1D03               	skipz
  5321  029F  2AC5               	goto	l6043
  5322                           
  5323                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  5324  02A0  302D               	movlw	45
  5325  02A1  2ABE               	goto	L9
  5326  02A2                     l6027:	
  5327                           ;PIR_B1.c: 128: }
  5328                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  5329                           
  5330  02A2  300B               	movlw	11
  5331  02A3  0247               	subwf	(__PIR^(0+128)+39),w
  5332  02A4  1803               	skipnc
  5333  02A5  2AC5               	goto	l6043
  5334                           
  5335                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  5336  02A6  3001               	movlw	1
  5337  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  5338  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  5339  02A9  00DD               	movwf	??_PIR_Main
  5340  02AA  085D               	movf	??_PIR_Main,w
  5341  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  5342  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  5343  02AD  07C6               	addwf	(__PIR^(0+128)+38),f
  5344                           
  5345                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  5346  02AE  0846               	movf	(__PIR^(0+128)+38),w
  5347  02AF  3A02               	xorlw	2
  5348  02B0  1D03               	skipz
  5349  02B1  2AC5               	goto	l6043
  5350                           
  5351                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  5352  02B2  01C6               	clrf	(__PIR^(0+128)+38)
  5353                           
  5354                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  5355  02B3  0848               	movf	(__PIR^(0+128)+40),w
  5356  02B4  3A2D               	xorlw	45
  5357  02B5  1D03               	skipz
  5358  02B6  2AB9               	goto	l6039
  5359  02B7                     L10:	
  5360                           
  5361                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  5362  02B7  3023               	movlw	35
  5363  02B8  2ABE               	goto	L9
  5364  02B9                     l6039:	
  5365                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  5366                           
  5367  02B9  0848               	movf	(__PIR^(0+128)+40),w
  5368  02BA  3A23               	xorlw	35
  5369  02BB  1D03               	skipz
  5370  02BC  2AC5               	goto	l6043
  5371                           
  5372                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  5373  02BD  3019               	movlw	25
  5374  02BE                     L9:	
  5375  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  5376  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  5377  02C0  00DD               	movwf	??_PIR_Main
  5378  02C1  085D               	movf	??_PIR_Main,w
  5379  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  5380  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  5381  02C4  00C8               	movwf	(__PIR^(0+128)+40)
  5382  02C5                     l6043:	
  5383                           
  5384                           ;PIR_B1.c: 138: }
  5385                           ;PIR_B1.c: 139: }
  5386                           ;PIR_B1.c: 140: }
  5387                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  5388  02C5  01C7               	clrf	(__PIR^(0+128)+39)
  5389  02C6                     l6045:	
  5390                           
  5391                           ;PIR_B1.c: 142: }
  5392                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  5393                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  5394  02C6  0848               	movf	(__PIR^(0+128)+40),w
  5395  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  5396  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  5397  02C9  00DD               	movwf	??_PIR_Main
  5398  02CA  01DE               	clrf	??_PIR_Main+1
  5399  02CB  09DD               	comf	??_PIR_Main,f
  5400  02CC  09DE               	comf	??_PIR_Main+1,f
  5401  02CD  0ADD               	incf	??_PIR_Main,f
  5402  02CE  1903               	skipnz
  5403  02CF  0ADE               	incf	??_PIR_Main+1,f
  5404  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  5405  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  5406  02D2  0823               	movf	(__PIR^(0+128)+3),w
  5407  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  5408  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  5409  02D5  075D               	addwf	??_PIR_Main,w
  5410  02D6  00DF               	movwf	??_PIR_Main+2
  5411  02D7  085E               	movf	??_PIR_Main+1,w
  5412  02D8  1803               	skipnc
  5413  02D9  0A5E               	incf	??_PIR_Main+1,w
  5414  02DA  00E0               	movwf	??_PIR_Main+3
  5415  02DB  0860               	movf	??_PIR_Main+3,w
  5416  02DC  3A80               	xorlw	128
  5417  02DD  3C80               	sublw	128
  5418  02DE  1D03               	skipz
  5419  02DF  2AE4               	goto	u7755
  5420  02E0  085F               	movf	??_PIR_Main+2,w
  5421  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  5422  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  5423  02E3  0221               	subwf	(__PIR^(0+128)+1),w
  5424  02E4                     u7755:	
  5425  02E4  1C03               	skipc
  5426  02E5  2B03               	goto	l6051
  5427  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5428  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5429  02E8  0823               	movf	(__PIR^(0+128)+3),w
  5430  02E9  0748               	addwf	(__PIR^(0+128)+40),w
  5431  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  5432  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  5433  02EC  00DD               	movwf	??_PIR_Main
  5434  02ED  01DE               	clrf	??_PIR_Main+1
  5435  02EE  0DDE               	rlf	??_PIR_Main+1,f
  5436  02EF  085E               	movf	??_PIR_Main+1,w
  5437  02F0  3A80               	xorlw	128
  5438  02F1  00DF               	movwf	??_PIR_Main+2
  5439  02F2  3080               	movlw	128
  5440  02F3  025F               	subwf	??_PIR_Main+2,w
  5441  02F4  1D03               	skipz
  5442  02F5  2AFC               	goto	u7765
  5443  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  5444  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  5445  02F8  0821               	movf	(__PIR^(0+128)+1),w
  5446  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  5447  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  5448  02FB  025D               	subwf	??_PIR_Main,w
  5449  02FC                     u7765:	
  5450  02FC  1C03               	skipc
  5451  02FD  2B03               	goto	l6051
  5452                           
  5453                           ;PIR_B1.c: 148: _PIR.Count = 0;
  5454  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  5455  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  5456  0300  01BE               	clrf	(__PIR^(0+128)+30)
  5457  0301  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5458                           
  5459                           ;PIR_B1.c: 159: } else {
  5460  0302  2B45               	goto	l6067
  5461  0303                     l6051:	
  5462                           
  5463                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  5464  0303  3001               	movlw	1
  5465  0304  1283               	bcf	3,5	;RP0=0, select bank0
  5466  0305  1303               	bcf	3,6	;RP1=0, select bank0
  5467  0306  00DD               	movwf	??_PIR_Main
  5468  0307  085D               	movf	??_PIR_Main,w
  5469  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5470  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5471  030A  07C7               	addwf	(__PIR^(0+128)+39),f
  5472                           
  5473                           ;PIR_B1.c: 163: _PIR.Count++;
  5474  030B  3001               	movlw	1
  5475  030C  07BE               	addwf	(__PIR^(0+128)+30),f
  5476  030D  1803               	skipnc
  5477  030E  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5478  030F  3000               	movlw	0
  5479  0310  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5480                           
  5481                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  5482  0311  1283               	bcf	3,5	;RP0=0, select bank0
  5483  0312  1303               	bcf	3,6	;RP1=0, select bank0
  5484  0313  0867               	movf	PIR_Main@LightsStatus,w
  5485  0314  3A01               	xorlw	1
  5486  0315  1903               	skipnz
  5487  0316  2B17               	goto	l6059
  5488  0317                     l6059:	
  5489  0317  3003               	movlw	3
  5490  0318  00E3               	movwf	_PIR_Main$3238
  5491  0319  3000               	movlw	0
  5492  031A  00E4               	movwf	_PIR_Main$3238+1
  5493  031B  0863               	movf	_PIR_Main$3238,w
  5494  031C  00DD               	movwf	??_PIR_Main
  5495  031D  085D               	movf	??_PIR_Main,w
  5496  031E  00E6               	movwf	PIR_Main@TriggerValue
  5497                           
  5498                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  5499  031F  0866               	movf	PIR_Main@TriggerValue,w
  5500  0320  00DD               	movwf	??_PIR_Main
  5501  0321  01DE               	clrf	??_PIR_Main+1
  5502  0322  1683               	bsf	3,5	;RP0=1, select bank1
  5503  0323  1303               	bcf	3,6	;RP1=0, select bank1
  5504  0324  083F               	movf	((__PIR+1)^(0+128)+30),w
  5505  0325  1283               	bcf	3,5	;RP0=0, select bank0
  5506  0326  1303               	bcf	3,6	;RP1=0, select bank0
  5507  0327  065E               	xorwf	??_PIR_Main+1,w
  5508  0328  1D03               	skipz
  5509  0329  2B30               	goto	u7785
  5510  032A  1683               	bsf	3,5	;RP0=1, select bank1
  5511  032B  1303               	bcf	3,6	;RP1=0, select bank1
  5512  032C  083E               	movf	(__PIR^(0+128)+30),w
  5513  032D  1283               	bcf	3,5	;RP0=0, select bank0
  5514  032E  1303               	bcf	3,6	;RP1=0, select bank0
  5515  032F  065D               	xorwf	??_PIR_Main,w
  5516  0330                     u7785:	
  5517  0330  1D03               	skipz
  5518  0331  2B45               	goto	l6067
  5519                           
  5520                           ;PIR_B1.c: 168: _PIR.Count = 0;
  5521  0332  1683               	bsf	3,5	;RP0=1, select bank1
  5522  0333  1303               	bcf	3,6	;RP1=0, select bank1
  5523  0334  01BE               	clrf	(__PIR^(0+128)+30)
  5524  0335  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5525                           
  5526                           ;PIR_B1.c: 175: if (getLights_Status(1) == 0) {
  5527  0336  3001               	movlw	1
  5528  0337  158A  21D3  118A   	fcall	_getLights_Status
  5529  033A  3800               	iorlw	0
  5530  033B  1D03               	skipz
  5531  033C  2B45               	goto	l6067
  5532                           
  5533                           ;PIR_B1.c: 176: setLights_SwOn(1);
  5534  033D  3001               	movlw	1
  5535  033E  158A  250E  118A   	fcall	_setLights_SwOn
  5536                           
  5537                           ;PIR_B1.c: 177: setLights_SwOff(1);
  5538  0341  3001               	movlw	1
  5539  0342  158A  242F  118A   	fcall	_setLights_SwOff
  5540  0345                     l6067:	
  5541                           
  5542                           ;PIR_B1.c: 179: }
  5543                           ;PIR_B1.c: 241: }
  5544                           ;PIR_B1.c: 242: }
  5545                           ;PIR_B1.c: 243: }
  5546                           ;PIR_B1.c: 244: }
  5547                           ;PIR_B1.c: 245: }
  5548                           ;PIR_B1.c: 246: }
  5549                           ;PIR_B1.c: 247: if (_PIR.OK == 0) {
  5550  0345  1683               	bsf	3,5	;RP0=1, select bank1
  5551  0346  1303               	bcf	3,6	;RP1=0, select bank1
  5552  0347  19A0               	btfsc	__PIR^(0+128),3
  5553  0348  2B69               	goto	l6079
  5554                           
  5555                           ;PIR_B1.c: 248: _PIR.Count++;
  5556  0349  3001               	movlw	1
  5557  034A  07BE               	addwf	(__PIR^(0+128)+30),f
  5558  034B  1803               	skipnc
  5559  034C  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5560  034D  3000               	movlw	0
  5561  034E  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5562                           
  5563                           ;PIR_B1.c: 249: if (_PIR.Count == (30000 / 20)) {
  5564  034F  3005               	movlw	5
  5565  0350  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5566  0351  1D03               	skipz
  5567  0352  2B55               	goto	u7815
  5568  0353  30DC               	movlw	220
  5569  0354  063E               	xorwf	(__PIR^(0+128)+30),w
  5570  0355                     u7815:	
  5571  0355  1D03               	skipz
  5572  0356  0008               	return
  5573                           
  5574                           ;PIR_B1.c: 250: _PIR.Count = 0;
  5575  0357  01BE               	clrf	(__PIR^(0+128)+30)
  5576  0358  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5577                           
  5578                           ;PIR_B1.c: 251: _PIR.OK = 1;
  5579  0359  15A0               	bsf	__PIR^(0+128),3
  5580                           
  5581                           ;PIR_B1.c: 259: if (getLights_Status(1) == 1) {
  5582  035A  3001               	movlw	1
  5583  035B  158A  21D3  118A   	fcall	_getLights_Status
  5584  035E  3A01               	xorlw	1
  5585  035F  1D03               	skipz
  5586  0360  0008               	return
  5587                           
  5588                           ;PIR_B1.c: 260: setLights_SwOn(1);
  5589  0361  3001               	movlw	1
  5590  0362  158A  250E  118A   	fcall	_setLights_SwOn
  5591                           
  5592                           ;PIR_B1.c: 261: setLights_SwOff(1);
  5593  0365  3001               	movlw	1
  5594  0366  158A  242F         	fcall	_setLights_SwOff
  5595                           
  5596                           ;PIR_B1.c: 263: }
  5597                           ;PIR_B1.c: 276: }
  5598                           ;PIR_B1.c: 277: } else {
  5599  0368  0008               	return
  5600  0369                     l6079:	
  5601                           
  5602                           ;PIR_B1.c: 278: if (LightsStatus == 1) {
  5603  0369  1283               	bcf	3,5	;RP0=0, select bank0
  5604  036A  1303               	bcf	3,6	;RP1=0, select bank0
  5605  036B  0867               	movf	PIR_Main@LightsStatus,w
  5606  036C  3A01               	xorlw	1
  5607  036D  1D03               	skipz
  5608  036E  2B99               	goto	l6097
  5609                           
  5610                           ;PIR_B1.c: 279: _PIR.CloseTimeSeconds++;
  5611  036F  3001               	movlw	1
  5612  0370  00DD               	movwf	??_PIR_Main
  5613  0371  085D               	movf	??_PIR_Main,w
  5614  0372  1683               	bsf	3,5	;RP0=1, select bank1
  5615  0373  1303               	bcf	3,6	;RP1=0, select bank1
  5616  0374  07C2               	addwf	(__PIR^(0+128)+34),f
  5617                           
  5618                           ;PIR_B1.c: 280: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5619  0375  0842               	movf	(__PIR^(0+128)+34),w
  5620  0376  3A32               	xorlw	50
  5621  0377  1D03               	skipz
  5622  0378  0008               	return
  5623                           
  5624                           ;PIR_B1.c: 281: _PIR.CloseTimeSeconds = 0;
  5625  0379  01C2               	clrf	(__PIR^(0+128)+34)
  5626                           
  5627                           ;PIR_B1.c: 282: _PIR.CloseTimeMinutes++;
  5628  037A  3001               	movlw	1
  5629  037B  07C0               	addwf	(__PIR^(0+128)+32),f
  5630  037C  1803               	skipnc
  5631  037D  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5632  037E  3000               	movlw	0
  5633  037F  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5634                           
  5635                           ;PIR_B1.c: 283: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5636  0380  0844               	movf	((__PIR+1)^(0+128)+35),w
  5637  0381  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5638  0382  1D03               	skipz
  5639  0383  2B86               	goto	u7855
  5640  0384  0843               	movf	(__PIR^(0+128)+35),w
  5641  0385  0640               	xorwf	(__PIR^(0+128)+32),w
  5642  0386                     u7855:	
  5643  0386  1D03               	skipz
  5644  0387  0008               	return
  5645                           
  5646                           ;PIR_B1.c: 284: _PIR.CloseTimeMinutes = 0;
  5647  0388  01C0               	clrf	(__PIR^(0+128)+32)
  5648  0389  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5649                           
  5650                           ;PIR_B1.c: 290: if (getLights_Status(1) == 1) {
  5651  038A  3001               	movlw	1
  5652  038B  158A  21D3  118A   	fcall	_getLights_Status
  5653  038E  3A01               	xorlw	1
  5654  038F  1D03               	skipz
  5655  0390  0008               	return
  5656                           
  5657                           ;PIR_B1.c: 291: setLights_SwOn(1);
  5658  0391  3001               	movlw	1
  5659  0392  158A  250E  118A   	fcall	_setLights_SwOn
  5660                           
  5661                           ;PIR_B1.c: 292: setLights_SwOff(1);
  5662  0395  3001               	movlw	1
  5663  0396  158A  242F         	fcall	_setLights_SwOff
  5664                           
  5665                           ;PIR_B1.c: 294: }
  5666                           ;PIR_B1.c: 306: }
  5667                           ;PIR_B1.c: 307: }
  5668                           ;PIR_B1.c: 308: } else {
  5669  0398  0008               	return
  5670  0399                     l6097:	
  5671                           
  5672                           ;PIR_B1.c: 309: _PIR.CloseTimeSeconds = 0;
  5673  0399  1683               	bsf	3,5	;RP0=1, select bank1
  5674  039A  1303               	bcf	3,6	;RP1=0, select bank1
  5675  039B  01C2               	clrf	(__PIR^(0+128)+34)
  5676                           
  5677                           ;PIR_B1.c: 310: _PIR.CloseTimeMinutes = 0;
  5678  039C  01C0               	clrf	(__PIR^(0+128)+32)
  5679  039D  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5680                           
  5681                           ;PIR_B1.c: 311: }
  5682                           ;PIR_B1.c: 312: }
  5683                           ;PIR_B1.c: 313: } else {
  5684  039E  0008               	return
  5685  039F                     l1040:	
  5686                           
  5687                           ;PIR_B1.c: 314: if (myMain.PowerON == 1) {
  5688  039F  1283               	bcf	3,5	;RP0=0, select bank0
  5689  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  5690  03A1  1C31               	btfss	_myMain,0
  5691  03A2  0008               	return
  5692                           
  5693                           ;PIR_B1.c: 315: _PIR.Enable = 1;
  5694  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  5695  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  5696  03A5  1420               	bsf	__PIR^(0+128),0
  5697                           
  5698                           ;PIR_B1.c: 322: if (getLights_Status(1) == 0) {
  5699  03A6  3001               	movlw	1
  5700  03A7  158A  21D3  118A   	fcall	_getLights_Status
  5701  03AA  3800               	iorlw	0
  5702  03AB  1D03               	skipz
  5703  03AC  0008               	return
  5704                           
  5705                           ;PIR_B1.c: 323: setLights_SwOn(1);
  5706  03AD  3001               	movlw	1
  5707  03AE  158A  250E  118A   	fcall	_setLights_SwOn
  5708                           
  5709                           ;PIR_B1.c: 324: setLights_SwOff(1);
  5710  03B1  3001               	movlw	1
  5711  03B2  158A  242F         	fcall	_setLights_SwOff
  5712  03B4  0008               	return
  5713  03B5                     __end_of_PIR_Main:	
  5714                           
  5715                           	psect	text27
  5716  092D                     __ptext27:	
  5717 ;; *************** function _getCDS_Status *****************
  5718 ;; Defined at:
  5719 ;;		line 42 in file "../src/CDS_B1.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;		None
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  status          1    4[COMMON] unsigned char 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      unsigned char 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2
  5728 ;; Tracked objects:
  5729 ;;		On entry : 0/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5733 ;;      Params:         0       0       0       0
  5734 ;;      Locals:         1       0       0       0
  5735 ;;      Temps:          0       0       0       0
  5736 ;;      Totals:         1       0       0       0
  5737 ;;Total ram usage:        1 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    2
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_PIR_Main
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           
  5748                           ;psect for function _getCDS_Status
  5749  092D                     _getCDS_Status:	
  5750                           
  5751                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5752                           
  5753                           ;incstack = 0
  5754                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5755  092D  3000               	movlw	0
  5756  092E  1283               	bcf	3,5	;RP0=0, select bank0
  5757  092F  1303               	bcf	3,6	;RP1=0, select bank0
  5758  0930  1A36               	btfsc	__CDS,4
  5759  0931  3001               	movlw	1
  5760  0932  00F4               	movwf	getCDS_Status@status
  5761                           
  5762                           ;CDS_B1.c: 44: return status;
  5763  0933  0874               	movf	getCDS_Status@status,w
  5764  0934  0008               	return
  5765  0935                     __end_of_getCDS_Status:	
  5766                           
  5767                           	psect	text28
  5768  093D                     __ptext28:	
  5769 ;; *************** function _PIR_Initialization *****************
  5770 ;; Defined at:
  5771 ;;		line 7 in file "../src/PIR_B1.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;		None
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;		None
  5776 ;; Return value:  Size  Location     Type
  5777 ;;		None               void
  5778 ;; Registers used:
  5779 ;;		wreg
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5785 ;;      Params:         0       0       0       0
  5786 ;;      Locals:         0       0       0       0
  5787 ;;      Temps:          1       0       0       0
  5788 ;;      Totals:         1       0       0       0
  5789 ;;Total ram usage:        1 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; Hardware stack levels required when called:    2
  5792 ;; This function calls:
  5793 ;;		Nothing
  5794 ;; This function is called by:
  5795 ;;		_main
  5796 ;; This function uses a non-reentrant model
  5797 ;;
  5798                           
  5799                           
  5800                           ;psect for function _PIR_Initialization
  5801  093D                     _PIR_Initialization:	
  5802                           
  5803                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5804                           
  5805                           ;incstack = 0
  5806                           ; Regs used in _PIR_Initialization: [wreg]
  5807  093D  3019               	movlw	25
  5808  093E  00F4               	movwf	??_PIR_Initialization
  5809  093F  0874               	movf	??_PIR_Initialization,w
  5810  0940  1683               	bsf	3,5	;RP0=1, select bank1
  5811  0941  1303               	bcf	3,6	;RP1=0, select bank1
  5812  0942  00C8               	movwf	(__PIR^(0+128)+40)
  5813                           
  5814                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5815  0943  3005               	movlw	5
  5816  0944  00C3               	movwf	(__PIR^(0+128)+35)
  5817  0945  3000               	movlw	0
  5818  0946  00C4               	movwf	(__PIR^(0+128)+36)
  5819  0947  0008               	return
  5820  0948                     __end_of_PIR_Initialization:	
  5821                           
  5822                           	psect	text29
  5823  09A4                     __ptext29:	
  5824 ;; *************** function _Mcu_Initialization *****************
  5825 ;; Defined at:
  5826 ;;		line 30 in file "../src/MCU_B1.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;		None
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;		None
  5831 ;; Return value:  Size  Location     Type
  5832 ;;		None               void
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0, pclath, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5840 ;;      Params:         0       0       0       0
  5841 ;;      Locals:         0       0       0       0
  5842 ;;      Temps:          0       0       0       0
  5843 ;;      Totals:         0       0       0       0
  5844 ;;Total ram usage:        0 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    3
  5847 ;; This function calls:
  5848 ;;		_ADC_Set
  5849 ;;		_Fosc_Set
  5850 ;;		_IO_Set
  5851 ;;		_TMR1_Set
  5852 ;;		_WDT_Set
  5853 ;; This function is called by:
  5854 ;;		_main
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           
  5859                           ;psect for function _Mcu_Initialization
  5860  09A4                     _Mcu_Initialization:	
  5861                           
  5862                           ;MCU_B1.c: 32: Fosc_Set();
  5863                           
  5864                           ;incstack = 0
  5865                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5866  09A4  158A  20F8  158A   	fcall	_Fosc_Set
  5867                           
  5868                           ;MCU_B1.c: 34: IO_Set();
  5869  09A7  158A  22DB  158A   	fcall	_IO_Set
  5870                           
  5871                           ;MCU_B1.c: 36: ;;
  5872                           ;MCU_B1.c: 38: TMR1_Set();
  5873  09AA  158A  2179  158A   	fcall	_TMR1_Set
  5874                           
  5875                           ;MCU_B1.c: 40: ADC_Set();
  5876  09AD  158A  2116  158A   	fcall	_ADC_Set
  5877                           
  5878                           ;MCU_B1.c: 42: ;;
  5879                           ;MCU_B1.c: 44: ;;
  5880                           ;MCU_B1.c: 46: ;;
  5881                           ;MCU_B1.c: 48: ;;
  5882                           ;MCU_B1.c: 50: ;;
  5883                           ;MCU_B1.c: 52: WDT_Set();
  5884  09B0  158A  2187         	fcall	_WDT_Set
  5885  09B2  0008               	return
  5886  09B3                     __end_of_Mcu_Initialization:	
  5887                           
  5888                           	psect	text30
  5889  0987                     __ptext30:	
  5890 ;; *************** function _WDT_Set *****************
  5891 ;; Defined at:
  5892 ;;		line 1102 in file "../src/MCU_B1.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;		None
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;		None
  5897 ;; Return value:  Size  Location     Type
  5898 ;;		None               void
  5899 ;; Registers used:
  5900 ;;		wreg
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5906 ;;      Params:         0       0       0       0
  5907 ;;      Locals:         0       0       0       0
  5908 ;;      Temps:          1       0       0       0
  5909 ;;      Totals:         1       0       0       0
  5910 ;;Total ram usage:        1 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:    2
  5913 ;; This function calls:
  5914 ;;		Nothing
  5915 ;; This function is called by:
  5916 ;;		_Mcu_Initialization
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           
  5921                           ;psect for function _WDT_Set
  5922  0987                     _WDT_Set:	
  5923                           
  5924                           ;MCU_B1.c: 1104: PSA = 1;
  5925                           
  5926                           ;incstack = 0
  5927                           ; Regs used in _WDT_Set: [wreg]
  5928  0987  1683               	bsf	3,5	;RP0=1, select bank1
  5929  0988  1303               	bcf	3,6	;RP1=0, select bank1
  5930  0989  1581               	bsf	1,3	;volatile
  5931                           
  5932                           ;MCU_B1.c: 1105: PS0 = 1;
  5933  098A  1401               	bsf	1,0	;volatile
  5934                           
  5935                           ;MCU_B1.c: 1106: PS1 = 1;
  5936  098B  1481               	bsf	1,1	;volatile
  5937                           
  5938                           ;MCU_B1.c: 1107: PS2 = 1;
  5939  098C  1501               	bsf	1,2	;volatile
  5940                           
  5941                           ;MCU_B1.c: 1111: WDT.Enable = 1;
  5942  098D  1283               	bcf	3,5	;RP0=0, select bank0
  5943  098E  1303               	bcf	3,6	;RP1=0, select bank0
  5944  098F  143D               	bsf	_WDT,0
  5945                           
  5946                           ;MCU_B1.c: 1112: WDT.Timer = 10;
  5947  0990  300A               	movlw	10
  5948  0991  00F4               	movwf	??_WDT_Set
  5949  0992  0874               	movf	??_WDT_Set,w
  5950  0993  00BE               	movwf	_WDT+1
  5951  0994  0008               	return
  5952  0995                     __end_of_WDT_Set:	
  5953                           
  5954                           	psect	text31
  5955  0979                     __ptext31:	
  5956 ;; *************** function _TMR1_Set *****************
  5957 ;; Defined at:
  5958 ;;		line 226 in file "../src/MCU_B1.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;		None
  5963 ;; Return value:  Size  Location     Type
  5964 ;;		None               void
  5965 ;; Registers used:
  5966 ;;		wreg
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5972 ;;      Params:         0       0       0       0
  5973 ;;      Locals:         0       0       0       0
  5974 ;;      Temps:          0       0       0       0
  5975 ;;      Totals:         0       0       0       0
  5976 ;;Total ram usage:        0 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    2
  5979 ;; This function calls:
  5980 ;;		Nothing
  5981 ;; This function is called by:
  5982 ;;		_Mcu_Initialization
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           
  5987                           ;psect for function _TMR1_Set
  5988  0979                     _TMR1_Set:	
  5989                           
  5990                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5991                           
  5992                           ;incstack = 0
  5993                           ; Regs used in _TMR1_Set: [wreg]
  5994  0979  3041               	movlw	65
  5995  097A  1283               	bcf	3,5	;RP0=0, select bank0
  5996  097B  1303               	bcf	3,6	;RP1=0, select bank0
  5997  097C  0090               	movwf	16	;volatile
  5998                           
  5999                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  6000  097D  30FA               	movlw	250
  6001  097E  008F               	movwf	15	;volatile
  6002                           
  6003                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  6004  097F  3038               	movlw	56
  6005  0980  008E               	movwf	14	;volatile
  6006                           
  6007                           ;MCU_B1.c: 230: TMR1IE = 1;
  6008  0981  1683               	bsf	3,5	;RP0=1, select bank1
  6009  0982  1303               	bcf	3,6	;RP1=0, select bank1
  6010  0983  140C               	bsf	12,0	;volatile
  6011                           
  6012                           ;MCU_B1.c: 231: PEIE = 1;
  6013  0984  170B               	bsf	11,6	;volatile
  6014                           
  6015                           ;MCU_B1.c: 232: GIE = 1;
  6016  0985  178B               	bsf	11,7	;volatile
  6017  0986  0008               	return
  6018  0987                     __end_of_TMR1_Set:	
  6019                           
  6020                           	psect	text32
  6021  0ADB                     __ptext32:	
  6022 ;; *************** function _IO_Set *****************
  6023 ;; Defined at:
  6024 ;;		line 60 in file "../src/MCU_B1.c"
  6025 ;; Parameters:    Size  Location     Type
  6026 ;;		None
  6027 ;; Auto vars:     Size  Location     Type
  6028 ;;		None
  6029 ;; Return value:  Size  Location     Type
  6030 ;;		None               void
  6031 ;; Registers used:
  6032 ;;		wreg, status,2
  6033 ;; Tracked objects:
  6034 ;;		On entry : 0/0
  6035 ;;		On exit  : 0/0
  6036 ;;		Unchanged: 0/0
  6037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6038 ;;      Params:         0       0       0       0
  6039 ;;      Locals:         0       0       0       0
  6040 ;;      Temps:          0       0       0       0
  6041 ;;      Totals:         0       0       0       0
  6042 ;;Total ram usage:        0 bytes
  6043 ;; Hardware stack levels used:    1
  6044 ;; Hardware stack levels required when called:    2
  6045 ;; This function calls:
  6046 ;;		Nothing
  6047 ;; This function is called by:
  6048 ;;		_Mcu_Initialization
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _IO_Set
  6054  0ADB                     _IO_Set:	
  6055                           
  6056                           ;MCU_B1.c: 62: TRISA = 0b00101110;;
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _IO_Set: [wreg+status,2]
  6060  0ADB  302E               	movlw	46
  6061  0ADC  1683               	bsf	3,5	;RP0=1, select bank1
  6062  0ADD  1303               	bcf	3,6	;RP1=0, select bank1
  6063  0ADE  0085               	movwf	5	;volatile
  6064                           
  6065                           ;MCU_B1.c: 63: TRISB = 0b00010101;;
  6066  0ADF  3015               	movlw	21
  6067  0AE0  0086               	movwf	6	;volatile
  6068                           
  6069                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  6070  0AE1  0187               	clrf	7	;volatile
  6071                           
  6072                           ;MCU_B1.c: 65: ANSELA = 0b00101110;;
  6073  0AE2  302E               	movlw	46
  6074  0AE3  1683               	bsf	3,5	;RP0=1, select bank3
  6075  0AE4  1703               	bsf	3,6	;RP1=1, select bank3
  6076  0AE5  0085               	movwf	5	;volatile
  6077                           
  6078                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  6079  0AE6  3001               	movlw	1
  6080  0AE7  0086               	movwf	6	;volatile
  6081                           
  6082                           ;MCU_B1.c: 67: PORTA = 0b00101110;;
  6083  0AE8  302E               	movlw	46
  6084  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
  6085  0AEA  1303               	bcf	3,6	;RP1=0, select bank0
  6086  0AEB  0085               	movwf	5	;volatile
  6087                           
  6088                           ;MCU_B1.c: 68: PORTB = 0b00010101;;
  6089  0AEC  3015               	movlw	21
  6090  0AED  0086               	movwf	6	;volatile
  6091                           
  6092                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  6093  0AEE  0187               	clrf	7	;volatile
  6094                           
  6095                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  6096  0AEF  1683               	bsf	3,5	;RP0=1, select bank1
  6097  0AF0  1303               	bcf	3,6	;RP1=0, select bank1
  6098  0AF1  0195               	clrf	21	;volatile
  6099  0AF2  0008               	return
  6100  0AF3                     __end_of_IO_Set:	
  6101                           
  6102                           	psect	text33
  6103  08F8                     __ptext33:	
  6104 ;; *************** function _Fosc_Set *****************
  6105 ;; Defined at:
  6106 ;;		line 56 in file "../src/MCU_B1.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;		None
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;		None
  6111 ;; Return value:  Size  Location     Type
  6112 ;;		None               void
  6113 ;; Registers used:
  6114 ;;		wreg
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6120 ;;      Params:         0       0       0       0
  6121 ;;      Locals:         0       0       0       0
  6122 ;;      Temps:          0       0       0       0
  6123 ;;      Totals:         0       0       0       0
  6124 ;;Total ram usage:        0 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:    2
  6127 ;; This function calls:
  6128 ;;		Nothing
  6129 ;; This function is called by:
  6130 ;;		_Mcu_Initialization
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           
  6135                           ;psect for function _Fosc_Set
  6136  08F8                     _Fosc_Set:	
  6137                           
  6138                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  6139                           
  6140                           ;incstack = 0
  6141                           ; Regs used in _Fosc_Set: [wreg]
  6142  08F8  303C               	movlw	60
  6143  08F9  1683               	bsf	3,5	;RP0=1, select bank1
  6144  08FA  1303               	bcf	3,6	;RP1=0, select bank1
  6145  08FB  0090               	movwf	16	;volatile
  6146  08FC  0008               	return
  6147  08FD                     __end_of_Fosc_Set:	
  6148                           
  6149                           	psect	text34
  6150  0916                     __ptext34:	
  6151 ;; *************** function _ADC_Set *****************
  6152 ;; Defined at:
  6153 ;;		line 427 in file "../src/MCU_B1.c"
  6154 ;; Parameters:    Size  Location     Type
  6155 ;;		None
  6156 ;; Auto vars:     Size  Location     Type
  6157 ;;		None
  6158 ;; Return value:  Size  Location     Type
  6159 ;;		None               void
  6160 ;; Registers used:
  6161 ;;		wreg
  6162 ;; Tracked objects:
  6163 ;;		On entry : 0/0
  6164 ;;		On exit  : 0/0
  6165 ;;		Unchanged: 0/0
  6166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6167 ;;      Params:         0       0       0       0
  6168 ;;      Locals:         0       0       0       0
  6169 ;;      Temps:          0       0       0       0
  6170 ;;      Totals:         0       0       0       0
  6171 ;;Total ram usage:        0 bytes
  6172 ;; Hardware stack levels used:    1
  6173 ;; Hardware stack levels required when called:    2
  6174 ;; This function calls:
  6175 ;;		Nothing
  6176 ;; This function is called by:
  6177 ;;		_Mcu_Initialization
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           
  6182                           ;psect for function _ADC_Set
  6183  0916                     _ADC_Set:	
  6184                           
  6185                           ;MCU_B1.c: 428: ADCON1 = 0x73;
  6186                           
  6187                           ;incstack = 0
  6188                           ; Regs used in _ADC_Set: [wreg]
  6189  0916  3073               	movlw	115
  6190  0917  1683               	bsf	3,5	;RP0=1, select bank1
  6191  0918  1303               	bcf	3,6	;RP1=0, select bank1
  6192  0919  009F               	movwf	31	;volatile
  6193                           
  6194                           ;MCU_B1.c: 429: FVRCON = 0xc1;
  6195  091A  30C1               	movlw	193
  6196  091B  009D               	movwf	29	;volatile
  6197  091C  0008               	return
  6198  091D                     __end_of_ADC_Set:	
  6199                           
  6200                           	psect	text35
  6201  002D                     __ptext35:	
  6202 ;; *************** function _Load_Main *****************
  6203 ;; Defined at:
  6204 ;;		line 39 in file "../src/OverLoad_B1.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;		None
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;  i               2   15[BANK0 ] int 
  6209 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  6210 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  6211 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  6212 ;;  error           1    9[BANK0 ] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;		None               void
  6215 ;; Registers used:
  6216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6222 ;;      Params:         0       0       0       0
  6223 ;;      Locals:         0       8       0       0
  6224 ;;      Temps:          0       2       0       0
  6225 ;;      Totals:         0      10       0       0
  6226 ;;Total ram usage:       10 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:    3
  6229 ;; This function calls:
  6230 ;;		___lwdiv
  6231 ;;		___wmul
  6232 ;;		_getLight_LoadGO
  6233 ;;		_getLight_Load_Status
  6234 ;;		_getMain_All_Error_Status
  6235 ;;		_getMain_All_LightsStatus
  6236 ;;		_getMain_Lights_Count
  6237 ;;		_setLoad_AH_AL_Restore
  6238 ;; This function is called by:
  6239 ;;		_main
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243                           
  6244                           ;psect for function _Load_Main
  6245  002D                     _Load_Main:	
  6246                           
  6247                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  6248                           
  6249                           ;incstack = 0
  6250                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6251  002D  3000               	movlw	0
  6252  002E  158A  24D0  118A   	fcall	_getMain_All_Error_Status
  6253  0031  1283               	bcf	3,5	;RP0=0, select bank0
  6254  0032  1303               	bcf	3,6	;RP1=0, select bank0
  6255  0033  00DE               	movwf	??_Load_Main
  6256  0034  085E               	movf	??_Load_Main,w
  6257  0035  00E0               	movwf	Load_Main@error
  6258                           
  6259                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
  6260  0036  01E4               	clrf	Load_Main@Load_RunStatus
  6261  0037  01E3               	clrf	Load_Main@ErrorCountValue
  6262  0038  01E5               	clrf	Load_Main@LightsCount
  6263                           
  6264                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
  6265  0039  1683               	bsf	3,5	;RP0=1, select bank1
  6266  003A  1303               	bcf	3,6	;RP1=0, select bank1
  6267  003B  1C4A               	btfss	_Load^(0+128),0
  6268  003C  2A0F               	goto	l820
  6269                           
  6270                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
  6271  003D  158A  21C3  118A   	fcall	_getMain_All_LightsStatus
  6272  0040  3800               	iorlw	0
  6273  0041  1D03               	skipz
  6274  0042  2846               	goto	l5811
  6275                           
  6276                           ;OverLoad_B1.c: 45: Load.GO = 0;
  6277  0043  1683               	bsf	3,5	;RP0=1, select bank1
  6278  0044  1303               	bcf	3,6	;RP1=0, select bank1
  6279  0045  2865               	goto	l5827
  6280  0046                     l5811:	
  6281                           ;OverLoad_B1.c: 46: } else {
  6282                           
  6283                           
  6284                           ;OverLoad_B1.c: 69: if (error == 0) {
  6285  0046  1283               	bcf	3,5	;RP0=0, select bank0
  6286  0047  1303               	bcf	3,6	;RP1=0, select bank0
  6287  0048  08E0               	movf	Load_Main@error,f
  6288  0049  1D03               	skipz
  6289  004A  2862               	goto	l823
  6290                           
  6291                           ;OverLoad_B1.c: 70: Load.GO = 1;
  6292  004B  1683               	bsf	3,5	;RP0=1, select bank1
  6293  004C  1303               	bcf	3,6	;RP1=0, select bank1
  6294  004D  14CA               	bsf	_Load^(0+128),1
  6295                           
  6296                           ;OverLoad_B1.c: 72: if (getLight_LoadGO() == 1) {
  6297  004E  158A  20FD  118A   	fcall	_getLight_LoadGO
  6298  0051  3A01               	xorlw	1
  6299  0052  1D03               	skipz
  6300  0053  285C               	goto	l824
  6301                           
  6302                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  6303  0054  1683               	bsf	3,5	;RP0=1, select bank1
  6304  0055  1303               	bcf	3,6	;RP1=0, select bank1
  6305  0056  1DCA               	btfss	_Load^(0+128),3
  6306  0057  1BCA               	btfsc	_Load^(0+128),7
  6307  0058  2866               	goto	l822
  6308                           
  6309                           ;OverLoad_B1.c: 74: Load.Run = 1;
  6310  0059  15CA               	bsf	_Load^(0+128),3
  6311                           
  6312                           ;OverLoad_B1.c: 75: Load.Count = 0;
  6313  005A  01E3               	clrf	(_Load^(0+128)+25)
  6314                           
  6315                           ;OverLoad_B1.c: 76: }
  6316                           ;OverLoad_B1.c: 77: } else {
  6317  005B  2866               	goto	l822
  6318  005C                     l824:	
  6319                           
  6320                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  6321  005C  1683               	bsf	3,5	;RP0=1, select bank1
  6322  005D  1303               	bcf	3,6	;RP1=0, select bank1
  6323  005E  1FCA               	btfss	_Load^(0+128),7
  6324  005F  2866               	goto	l822
  6325                           
  6326                           ;OverLoad_B1.c: 79: Load.OK = 0;
  6327  0060  13CA               	bcf	_Load^(0+128),7
  6328                           
  6329                           ;OverLoad_B1.c: 80: }
  6330                           ;OverLoad_B1.c: 81: }
  6331                           ;OverLoad_B1.c: 82: } else {
  6332  0061  2866               	goto	l822
  6333  0062                     l823:	
  6334                           
  6335                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  6336  0062  1683               	bsf	3,5	;RP0=1, select bank1
  6337  0063  1303               	bcf	3,6	;RP1=0, select bank1
  6338  0064  18CA               	btfsc	_Load^(0+128),1
  6339  0065                     l5827:	
  6340                           
  6341                           ;OverLoad_B1.c: 84: Load.GO = 0;
  6342  0065  10CA               	bcf	_Load^(0+128),1
  6343  0066                     l822:	
  6344                           
  6345                           ;OverLoad_B1.c: 85: }
  6346                           ;OverLoad_B1.c: 86: }
  6347                           ;OverLoad_B1.c: 88: }
  6348                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  6349  0066  1CCA               	btfss	_Load^(0+128),1
  6350  0067  29E8               	goto	l830
  6351                           
  6352                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  6353  0068  154A               	bsf	_Load^(0+128),2
  6354                           
  6355                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  6356  0069  1E4A               	btfss	_Load^(0+128),4
  6357  006A  29E6               	goto	l831
  6358                           
  6359                           ;OverLoad_B1.c: 95: Load.Time++;
  6360  006B  3001               	movlw	1
  6361  006C  07CB               	addwf	(_Load^(0+128)+1),f
  6362  006D  1803               	skipnc
  6363  006E  0ACC               	incf	((_Load+1)^(0+128)+1),f
  6364  006F  3000               	movlw	0
  6365  0070  07CC               	addwf	((_Load+1)^(0+128)+1),f
  6366                           
  6367                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
  6368  0071  3000               	movlw	0
  6369  0072  024C               	subwf	((_Load+1)^(0+128)+1),w
  6370  0073  3002               	movlw	2
  6371  0074  1903               	skipnz
  6372  0075  024B               	subwf	(_Load^(0+128)+1),w
  6373  0076  1C03               	skipc
  6374  0077  0008               	return
  6375                           
  6376                           ;OverLoad_B1.c: 97: Load.Time = 0;
  6377  0078  01CB               	clrf	(_Load^(0+128)+1)
  6378  0079  01CC               	clrf	((_Load+1)^(0+128)+1)
  6379                           
  6380                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  6381  007A  124A               	bcf	_Load^(0+128),4
  6382                           
  6383                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  6384  007B  3001               	movlw	1
  6385  007C  1283               	bcf	3,5	;RP0=0, select bank0
  6386  007D  1303               	bcf	3,6	;RP1=0, select bank0
  6387  007E  00E6               	movwf	Load_Main@i
  6388  007F  3000               	movlw	0
  6389  0080  00E7               	movwf	Load_Main@i+1
  6390  0081  0867               	movf	Load_Main@i+1,w
  6391  0082  3A80               	xorlw	128
  6392  0083  00FF               	movwf	127
  6393  0084  3080               	movlw	128
  6394  0085  027F               	subwf	127,w
  6395  0086  1D03               	skipz
  6396  0087  288A               	goto	u7315
  6397  0088  3004               	movlw	4
  6398  0089  0266               	subwf	Load_Main@i,w
  6399  008A                     u7315:	
  6400  008A  1803               	btfsc	3,0
  6401  008B  28C8               	goto	l5849
  6402  008C                     l5843:	
  6403                           
  6404                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  6405  008C  1283               	bcf	3,5	;RP0=0, select bank0
  6406  008D  1303               	bcf	3,6	;RP1=0, select bank0
  6407  008E  0866               	movf	Load_Main@i,w
  6408  008F  3ED4               	addlw	(_Load+10)& (0+255)
  6409  0090  0084               	movwf	4
  6410  0091  1383               	bcf	3,7	;select IRP bank1
  6411  0092  0800               	movf	0,w
  6412  0093  00DE               	movwf	??_Load_Main
  6413  0094  01DF               	clrf	??_Load_Main+1
  6414  0095  085E               	movf	??_Load_Main,w
  6415  0096  1683               	bsf	3,5	;RP0=1, select bank1
  6416  0097  1303               	bcf	3,6	;RP1=0, select bank1
  6417  0098  07CF               	addwf	(_Load^(0+128)+5),f
  6418  0099  1803               	skipnc
  6419  009A  0AD0               	incf	((_Load+1)^(0+128)+5),f
  6420  009B  1283               	bcf	3,5	;RP0=0, select bank0
  6421  009C  1303               	bcf	3,6	;RP1=0, select bank0
  6422  009D  085F               	movf	??_Load_Main+1,w
  6423  009E  1683               	bsf	3,5	;RP0=1, select bank1
  6424  009F  1303               	bcf	3,6	;RP1=0, select bank1
  6425  00A0  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6426                           
  6427                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  6428  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  6429  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  6430  00A3  0866               	movf	Load_Main@i,w
  6431  00A4  3ED9               	addlw	(_Load+15)& (0+255)
  6432  00A5  0084               	movwf	4
  6433  00A6  0800               	movf	0,w
  6434  00A7  00DE               	movwf	??_Load_Main
  6435  00A8  01DF               	clrf	??_Load_Main+1
  6436  00A9  085E               	movf	??_Load_Main,w
  6437  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  6438  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  6439  00AC  07D1               	addwf	(_Load^(0+128)+7),f
  6440  00AD  1803               	skipnc
  6441  00AE  0AD2               	incf	((_Load+1)^(0+128)+7),f
  6442  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  6443  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  6444  00B1  085F               	movf	??_Load_Main+1,w
  6445  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  6446  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  6447  00B4  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6448  00B5  3001               	movlw	1
  6449  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  6450  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  6451  00B8  07E6               	addwf	Load_Main@i,f
  6452  00B9  1803               	skipnc
  6453  00BA  0AE7               	incf	Load_Main@i+1,f
  6454  00BB  3000               	movlw	0
  6455  00BC  07E7               	addwf	Load_Main@i+1,f
  6456  00BD  0867               	movf	Load_Main@i+1,w
  6457  00BE  3A80               	xorlw	128
  6458  00BF  00FF               	movwf	127
  6459  00C0  3080               	movlw	128
  6460  00C1  027F               	subwf	127,w
  6461  00C2  1D03               	skipz
  6462  00C3  28C6               	goto	u7325
  6463  00C4  3004               	movlw	4
  6464  00C5  0266               	subwf	Load_Main@i,w
  6465  00C6                     u7325:	
  6466  00C6  1C03               	skipc
  6467  00C7  288C               	goto	l5843
  6468  00C8                     l5849:	
  6469                           
  6470                           ;OverLoad_B1.c: 103: }
  6471                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  6472  00C8  3003               	movlw	3
  6473  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  6474  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  6475  00CB  00D7               	movwf	___lwdiv@divisor
  6476  00CC  3000               	movlw	0
  6477  00CD  00D8               	movwf	___lwdiv@divisor+1
  6478  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  6479  00CF  1303               	bcf	3,6	;RP1=0, select bank1
  6480  00D0  0850               	movf	((_Load+1)^(0+128)+5),w
  6481  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  6482  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  6483  00D3  01DA               	clrf	___lwdiv@dividend+1
  6484  00D4  07DA               	addwf	___lwdiv@dividend+1,f
  6485  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  6486  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  6487  00D7  084F               	movf	(_Load^(0+128)+5),w
  6488  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  6489  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  6490  00DA  01D9               	clrf	___lwdiv@dividend
  6491  00DB  07D9               	addwf	___lwdiv@dividend,f
  6492  00DC  158A  254C  118A   	fcall	___lwdiv
  6493  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  6494  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  6495  00E1  0858               	movf	?___lwdiv+1,w
  6496  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  6497  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  6498  00E4  01D0               	clrf	((_Load+1)^(0+128)+5)
  6499  00E5  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6500  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  6501  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  6502  00E8  0857               	movf	?___lwdiv,w
  6503  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  6504  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  6505  00EB  01CF               	clrf	(_Load^(0+128)+5)
  6506  00EC  07CF               	addwf	(_Load^(0+128)+5),f
  6507                           
  6508                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  6509  00ED  3003               	movlw	3
  6510  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  6511  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  6512  00F0  00D7               	movwf	___lwdiv@divisor
  6513  00F1  3000               	movlw	0
  6514  00F2  00D8               	movwf	___lwdiv@divisor+1
  6515  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  6516  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  6517  00F5  0852               	movf	((_Load+1)^(0+128)+7),w
  6518  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  6519  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  6520  00F8  01DA               	clrf	___lwdiv@dividend+1
  6521  00F9  07DA               	addwf	___lwdiv@dividend+1,f
  6522  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  6523  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  6524  00FC  0851               	movf	(_Load^(0+128)+7),w
  6525  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  6526  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  6527  00FF  01D9               	clrf	___lwdiv@dividend
  6528  0100  07D9               	addwf	___lwdiv@dividend,f
  6529  0101  158A  254C  118A   	fcall	___lwdiv
  6530  0104  1283               	bcf	3,5	;RP0=0, select bank0
  6531  0105  1303               	bcf	3,6	;RP1=0, select bank0
  6532  0106  0858               	movf	?___lwdiv+1,w
  6533  0107  1683               	bsf	3,5	;RP0=1, select bank1
  6534  0108  1303               	bcf	3,6	;RP1=0, select bank1
  6535  0109  01D2               	clrf	((_Load+1)^(0+128)+7)
  6536  010A  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6537  010B  1283               	bcf	3,5	;RP0=0, select bank0
  6538  010C  1303               	bcf	3,6	;RP1=0, select bank0
  6539  010D  0857               	movf	?___lwdiv,w
  6540  010E  1683               	bsf	3,5	;RP0=1, select bank1
  6541  010F  1303               	bcf	3,6	;RP1=0, select bank1
  6542  0110  01D1               	clrf	(_Load^(0+128)+7)
  6543  0111  07D1               	addwf	(_Load^(0+128)+7),f
  6544                           
  6545                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  6546  0112  158A  227F  118A   	fcall	_setLoad_AH_AL_Restore
  6547                           
  6548                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
  6549  0115  1683               	bsf	3,5	;RP0=1, select bank1
  6550  0116  1303               	bcf	3,6	;RP1=0, select bank1
  6551  0117  0852               	movf	((_Load+1)^(0+128)+7),w
  6552  0118  0250               	subwf	((_Load+1)^(0+128)+5),w
  6553  0119  1D03               	skipz
  6554  011A  291D               	goto	u7335
  6555  011B  0851               	movf	(_Load^(0+128)+7),w
  6556  011C  024F               	subwf	(_Load^(0+128)+5),w
  6557  011D                     u7335:	
  6558  011D  1C03               	skipc
  6559  011E  0008               	return
  6560                           
  6561                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  6562  011F  0351               	decf	(_Load^(0+128)+7),w
  6563  0120  3AFF               	xorlw	255
  6564  0121  074F               	addwf	(_Load^(0+128)+5),w
  6565  0122  1283               	bcf	3,5	;RP0=0, select bank0
  6566  0123  1303               	bcf	3,6	;RP1=0, select bank0
  6567  0124  00DE               	movwf	??_Load_Main
  6568  0125  085E               	movf	??_Load_Main,w
  6569  0126  1683               	bsf	3,5	;RP0=1, select bank1
  6570  0127  1303               	bcf	3,6	;RP1=0, select bank1
  6571  0128  00DE               	movwf	(_Load^(0+128)+20)
  6572                           
  6573                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  6574  0129  01CF               	clrf	(_Load^(0+128)+5)
  6575  012A  01D0               	clrf	((_Load+1)^(0+128)+5)
  6576                           
  6577                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  6578  012B  01D1               	clrf	(_Load^(0+128)+7)
  6579  012C  01D2               	clrf	((_Load+1)^(0+128)+7)
  6580                           
  6581                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  6582  012D  1DCA               	btfss	_Load^(0+128),3
  6583  012E  2992               	goto	l836
  6584                           
  6585                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  6586  012F  3002               	movlw	2
  6587  0130  0263               	subwf	(_Load^(0+128)+25),w
  6588  0131  1803               	skipnc
  6589  0132  2992               	goto	l836
  6590                           
  6591                           ;OverLoad_B1.c: 115: Load.Count++;
  6592  0133  3001               	movlw	1
  6593  0134  1283               	bcf	3,5	;RP0=0, select bank0
  6594  0135  1303               	bcf	3,6	;RP1=0, select bank0
  6595  0136  00DE               	movwf	??_Load_Main
  6596  0137  085E               	movf	??_Load_Main,w
  6597  0138  1683               	bsf	3,5	;RP0=1, select bank1
  6598  0139  1303               	bcf	3,6	;RP1=0, select bank1
  6599  013A  07E3               	addwf	(_Load^(0+128)+25),f
  6600                           
  6601                           ;OverLoad_B1.c: 120: Load_RunStatus = getLight_Load_Status();
  6602  013B  158A  2103  118A   	fcall	_getLight_Load_Status
  6603  013E  1283               	bcf	3,5	;RP0=0, select bank0
  6604  013F  1303               	bcf	3,6	;RP1=0, select bank0
  6605  0140  00DE               	movwf	??_Load_Main
  6606  0141  085E               	movf	??_Load_Main,w
  6607  0142  00E4               	movwf	Load_Main@Load_RunStatus
  6608                           
  6609                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
  6610  0143  158A  2195  118A   	fcall	_getMain_Lights_Count
  6611  0146  1283               	bcf	3,5	;RP0=0, select bank0
  6612  0147  1303               	bcf	3,6	;RP1=0, select bank0
  6613  0148  00DE               	movwf	??_Load_Main
  6614  0149  085E               	movf	??_Load_Main,w
  6615  014A  00E5               	movwf	Load_Main@LightsCount
  6616                           
  6617                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
  6618  014B  1683               	bsf	3,5	;RP0=1, select bank1
  6619  014C  1303               	bcf	3,6	;RP1=0, select bank1
  6620  014D  0863               	movf	(_Load^(0+128)+25),w
  6621  014E  3A01               	xorlw	1
  6622  014F  1D03               	skipz
  6623  0150  2953               	goto	l5875
  6624                           
  6625                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(20*2.3);
  6626  0151  302E               	movlw	46
  6627  0152  2960               	goto	L11
  6628  0153                     l5875:	
  6629                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
  6630                           
  6631  0153  0863               	movf	(_Load^(0+128)+25),w
  6632  0154  3A02               	xorlw	2
  6633  0155  1D03               	skipz
  6634  0156  2992               	goto	l836
  6635                           
  6636                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
  6637  0157  1283               	bcf	3,5	;RP0=0, select bank0
  6638  0158  1303               	bcf	3,6	;RP1=0, select bank0
  6639  0159  0865               	movf	Load_Main@LightsCount,w
  6640  015A  3A01               	xorlw	1
  6641  015B  1D03               	skipz
  6642  015C  2963               	goto	l5881
  6643                           
  6644                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(4.5*2.3);
  6645  015D  300A               	movlw	10
  6646  015E  1683               	bsf	3,5	;RP0=1, select bank1
  6647  015F  1303               	bcf	3,6	;RP1=0, select bank1
  6648  0160                     L11:	
  6649  0160  00E1               	movwf	(_Load^(0+128)+23)
  6650  0161  3000               	movlw	0
  6651  0162  2991               	goto	L12
  6652  0163                     l5881:	
  6653                           ;OverLoad_B1.c: 130: } else {
  6654                           
  6655                           
  6656                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
  6657  0163  1283               	bcf	3,5	;RP0=0, select bank0
  6658  0164  08E4               	movf	Load_Main@Load_RunStatus,f
  6659  0165  1D03               	skipz
  6660  0166  2984               	goto	l5885
  6661                           
  6662                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(4.5*2.3) * LightsCount;
  6663  0167  0865               	movf	Load_Main@LightsCount,w
  6664  0168  00DE               	movwf	??_Load_Main
  6665  0169  01DF               	clrf	??_Load_Main+1
  6666  016A  085E               	movf	??_Load_Main,w
  6667  016B  00D7               	movwf	___wmul@multiplier
  6668  016C  085F               	movf	??_Load_Main+1,w
  6669  016D  00D8               	movwf	___wmul@multiplier+1
  6670  016E  300A               	movlw	10
  6671  016F  00D9               	movwf	___wmul@multiplicand
  6672  0170  3000               	movlw	0
  6673  0171  00DA               	movwf	___wmul@multiplicand+1
  6674  0172  158A  2389  118A   	fcall	___wmul
  6675  0175  1283               	bcf	3,5	;RP0=0, select bank0
  6676  0176  1303               	bcf	3,6	;RP1=0, select bank0
  6677  0177  0858               	movf	?___wmul+1,w
  6678  0178  1683               	bsf	3,5	;RP0=1, select bank1
  6679  0179  1303               	bcf	3,6	;RP1=0, select bank1
  6680  017A  01E2               	clrf	((_Load+1)^(0+128)+23)
  6681  017B  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6682  017C  1283               	bcf	3,5	;RP0=0, select bank0
  6683  017D  1303               	bcf	3,6	;RP1=0, select bank0
  6684  017E  0857               	movf	?___wmul,w
  6685  017F  1683               	bsf	3,5	;RP0=1, select bank1
  6686  0180  1303               	bcf	3,6	;RP1=0, select bank1
  6687  0181  01E1               	clrf	(_Load^(0+128)+23)
  6688  0182  07E1               	addwf	(_Load^(0+128)+23),f
  6689                           
  6690                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
  6691  0183  2992               	goto	l836
  6692  0184                     l5885:	
  6693  0184  1283               	bcf	3,5	;RP0=0, select bank0
  6694  0185  0864               	movf	Load_Main@Load_RunStatus,w
  6695  0186  3A01               	xorlw	1
  6696  0187  1D03               	skipz
  6697  0188  2992               	goto	l836
  6698                           
  6699                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(4.5*2.3) + Load.TotalLoad;
  6700  0189  1683               	bsf	3,5	;RP0=1, select bank1
  6701  018A  1303               	bcf	3,6	;RP1=0, select bank1
  6702  018B  0853               	movf	(_Load^(0+128)+9),w
  6703  018C  3E0A               	addlw	10
  6704  018D  00E1               	movwf	(_Load^(0+128)+23)
  6705  018E  3000               	movlw	0
  6706  018F  1803               	skipnc
  6707  0190  3001               	movlw	1
  6708  0191                     L12:	
  6709  0191  00E2               	movwf	(_Load^(0+128)+24)
  6710  0192                     l836:	
  6711                           
  6712                           ;OverLoad_B1.c: 135: }
  6713                           ;OverLoad_B1.c: 136: }
  6714                           ;OverLoad_B1.c: 137: }
  6715                           ;OverLoad_B1.c: 138: }
  6716                           ;OverLoad_B1.c: 139: }
  6717                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
  6718  0192  1683               	bsf	3,5	;RP0=1, select bank1
  6719  0193  1303               	bcf	3,6	;RP1=0, select bank1
  6720  0194  085E               	movf	(_Load^(0+128)+20),w
  6721  0195  1283               	bcf	3,5	;RP0=0, select bank0
  6722  0196  1303               	bcf	3,6	;RP1=0, select bank0
  6723  0197  00DE               	movwf	??_Load_Main
  6724  0198  01DF               	clrf	??_Load_Main+1
  6725  0199  1683               	bsf	3,5	;RP0=1, select bank1
  6726  019A  1303               	bcf	3,6	;RP1=0, select bank1
  6727  019B  0862               	movf	((_Load+1)^(0+128)+23),w
  6728  019C  1283               	bcf	3,5	;RP0=0, select bank0
  6729  019D  1303               	bcf	3,6	;RP1=0, select bank0
  6730  019E  025F               	subwf	??_Load_Main+1,w
  6731  019F  1D03               	skipz
  6732  01A0  29A7               	goto	u7415
  6733  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  6734  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  6735  01A3  0861               	movf	(_Load^(0+128)+23),w
  6736  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  6737  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  6738  01A6  025E               	subwf	??_Load_Main,w
  6739  01A7                     u7415:	
  6740  01A7  1C03               	skipc
  6741  01A8  29C8               	goto	l5903
  6742                           
  6743                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6744  01A9  0865               	movf	Load_Main@LightsCount,w
  6745  01AA  3A01               	xorlw	1
  6746  01AB  1903               	skipnz
  6747  01AC  29AF               	goto	l5893
  6748  01AD  3003               	movlw	3
  6749  01AE  29B0               	goto	L13
  6750  01AF                     l5893:	
  6751  01AF  3002               	movlw	2
  6752  01B0                     L13:	
  6753  01B0  00E1               	movwf	_Load_Main$2716
  6754  01B1  3000               	movlw	0
  6755  01B2  00E2               	movwf	_Load_Main$2716+1
  6756  01B3  0861               	movf	_Load_Main$2716,w
  6757  01B4  00DE               	movwf	??_Load_Main
  6758  01B5  085E               	movf	??_Load_Main,w
  6759  01B6  00E3               	movwf	Load_Main@ErrorCountValue
  6760                           
  6761                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
  6762  01B7  3001               	movlw	1
  6763  01B8  00DE               	movwf	??_Load_Main
  6764  01B9  085E               	movf	??_Load_Main,w
  6765  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  6766  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  6767  01BC  07E4               	addwf	(_Load^(0+128)+26),f
  6768                           
  6769                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
  6770  01BD  0864               	movf	(_Load^(0+128)+26),w
  6771  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  6772  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  6773  01C0  0263               	subwf	Load_Main@ErrorCountValue,w
  6774  01C1  1803               	skipnc
  6775  01C2  0008               	return
  6776                           
  6777                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
  6778  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  6779  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  6780  01C5  01E4               	clrf	(_Load^(0+128)+26)
  6781                           
  6782                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
  6783  01C6  16CA               	bsf	_Load^(0+128),5
  6784                           
  6785                           ;OverLoad_B1.c: 168: }
  6786                           ;OverLoad_B1.c: 169: } else {
  6787  01C7  0008               	return
  6788  01C8                     l5903:	
  6789                           
  6790                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
  6791  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  6792  01C9  1303               	bcf	3,6	;RP1=0, select bank1
  6793  01CA  01E4               	clrf	(_Load^(0+128)+26)
  6794                           
  6795                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
  6796  01CB  1DCA               	btfss	_Load^(0+128),3
  6797  01CC  0008               	return
  6798                           
  6799                           ;OverLoad_B1.c: 172: Load.SafeCount++;
  6800  01CD  3001               	movlw	1
  6801  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  6802  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  6803  01D0  00DE               	movwf	??_Load_Main
  6804  01D1  085E               	movf	??_Load_Main,w
  6805  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  6806  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  6807  01D4  07E5               	addwf	(_Load^(0+128)+27),f
  6808                           
  6809                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
  6810  01D5  3003               	movlw	3
  6811  01D6  0265               	subwf	(_Load^(0+128)+27),w
  6812  01D7  1C03               	skipc
  6813  01D8  0008               	return
  6814                           
  6815                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
  6816  01D9  01E5               	clrf	(_Load^(0+128)+27)
  6817                           
  6818                           ;OverLoad_B1.c: 175: Load.OK = 1;
  6819  01DA  17CA               	bsf	_Load^(0+128),7
  6820                           
  6821                           ;OverLoad_B1.c: 176: Load.Run = 0;
  6822  01DB  11CA               	bcf	_Load^(0+128),3
  6823                           
  6824                           ;OverLoad_B1.c: 177: Load.Count = 0;
  6825  01DC  01E3               	clrf	(_Load^(0+128)+25)
  6826                           
  6827                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
  6828  01DD  085E               	movf	(_Load^(0+128)+20),w
  6829  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  6830  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  6831  01E0  00DE               	movwf	??_Load_Main
  6832  01E1  085E               	movf	??_Load_Main,w
  6833  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  6834  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  6835  01E4  00D3               	movwf	(_Load^(0+128)+9)
  6836                           
  6837                           ;OverLoad_B1.c: 182: }
  6838                           ;OverLoad_B1.c: 183: }
  6839                           ;OverLoad_B1.c: 206: }
  6840                           ;OverLoad_B1.c: 207: }
  6841                           ;OverLoad_B1.c: 208: }
  6842                           ;OverLoad_B1.c: 209: } else {
  6843  01E5  0008               	return
  6844  01E6                     l831:	
  6845                           
  6846                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
  6847  01E6  164A               	bsf	_Load^(0+128),4
  6848                           
  6849                           ;OverLoad_B1.c: 211: }
  6850                           ;OverLoad_B1.c: 212: } else {
  6851  01E7  0008               	return
  6852  01E8                     l830:	
  6853                           
  6854                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
  6855  01E8  1D4A               	btfss	_Load^(0+128),2
  6856  01E9  29FC               	goto	l5939
  6857                           
  6858                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
  6859  01EA  114A               	bcf	_Load^(0+128),2
  6860                           
  6861                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
  6862  01EB  124A               	bcf	_Load^(0+128),4
  6863                           
  6864                           ;OverLoad_B1.c: 218: Load.Time = 0;
  6865  01EC  01CB               	clrf	(_Load^(0+128)+1)
  6866  01ED  01CC               	clrf	((_Load+1)^(0+128)+1)
  6867                           
  6868                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
  6869  01EE  158A  227F  118A   	fcall	_setLoad_AH_AL_Restore
  6870                           
  6871                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
  6872  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  6873  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  6874  01F3  01E4               	clrf	(_Load^(0+128)+26)
  6875                           
  6876                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
  6877  01F4  01E5               	clrf	(_Load^(0+128)+27)
  6878                           
  6879                           ;OverLoad_B1.c: 224: Load.ADH = 0;
  6880  01F5  01CF               	clrf	(_Load^(0+128)+5)
  6881  01F6  01D0               	clrf	((_Load+1)^(0+128)+5)
  6882                           
  6883                           ;OverLoad_B1.c: 225: Load.ADL = 0;
  6884  01F7  01D1               	clrf	(_Load^(0+128)+7)
  6885  01F8  01D2               	clrf	((_Load+1)^(0+128)+7)
  6886                           
  6887                           ;OverLoad_B1.c: 231: Load.Run = 0;
  6888  01F9  11CA               	bcf	_Load^(0+128),3
  6889                           
  6890                           ;OverLoad_B1.c: 232: Load.Count = 0;
  6891  01FA  01E3               	clrf	(_Load^(0+128)+25)
  6892                           
  6893                           ;OverLoad_B1.c: 233: Load.OK = 0;
  6894  01FB  13CA               	bcf	_Load^(0+128),7
  6895  01FC                     l5939:	
  6896                           
  6897                           ;OverLoad_B1.c: 255: }
  6898                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
  6899  01FC  1ECA               	btfss	_Load^(0+128),5
  6900  01FD  0008               	return
  6901                           
  6902                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
  6903  01FE  3001               	movlw	1
  6904  01FF  07CD               	addwf	(_Load^(0+128)+3),f
  6905  0200  1803               	skipnc
  6906  0201  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6907  0202  3000               	movlw	0
  6908  0203  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6909                           
  6910                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
  6911  0204  3001               	movlw	1
  6912  0205  024E               	subwf	((_Load+1)^(0+128)+3),w
  6913  0206  30F4               	movlw	244
  6914  0207  1903               	skipnz
  6915  0208  024D               	subwf	(_Load^(0+128)+3),w
  6916  0209  1C03               	skipc
  6917  020A  0008               	return
  6918                           
  6919                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
  6920  020B  01CD               	clrf	(_Load^(0+128)+3)
  6921  020C  01CE               	clrf	((_Load+1)^(0+128)+3)
  6922                           
  6923                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
  6924  020D  12CA               	bcf	_Load^(0+128),5
  6925                           
  6926                           ;OverLoad_B1.c: 261: }
  6927                           ;OverLoad_B1.c: 262: }
  6928                           ;OverLoad_B1.c: 263: }
  6929                           ;OverLoad_B1.c: 264: } else {
  6930  020E  0008               	return
  6931  020F                     l820:	
  6932                           
  6933                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
  6934  020F  1283               	bcf	3,5	;RP0=0, select bank0
  6935  0210  1303               	bcf	3,6	;RP1=0, select bank0
  6936  0211  1C31               	btfss	_myMain,0
  6937  0212  0008               	return
  6938                           
  6939                           ;OverLoad_B1.c: 266: Load.Enable = 1;
  6940  0213  1683               	bsf	3,5	;RP0=1, select bank1
  6941  0214  1303               	bcf	3,6	;RP1=0, select bank1
  6942  0215  144A               	bsf	_Load^(0+128),0
  6943  0216  0008               	return
  6944  0217                     __end_of_Load_Main:	
  6945                           
  6946                           	psect	text36
  6947  0995                     __ptext36:	
  6948 ;; *************** function _getMain_Lights_Count *****************
  6949 ;; Defined at:
  6950 ;;		line 459 in file "../src/Main_B1.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;		None
  6953 ;; Auto vars:     Size  Location     Type
  6954 ;;  status2         1    2[BANK0 ] unsigned char 
  6955 ;;  status1         1    1[BANK0 ] unsigned char 
  6956 ;;  count           1    0[BANK0 ] unsigned char 
  6957 ;; Return value:  Size  Location     Type
  6958 ;;                  1    wreg      unsigned char 
  6959 ;; Registers used:
  6960 ;;		wreg, status,2, status,0
  6961 ;; Tracked objects:
  6962 ;;		On entry : 0/0
  6963 ;;		On exit  : 0/0
  6964 ;;		Unchanged: 0/0
  6965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6966 ;;      Params:         0       0       0       0
  6967 ;;      Locals:         0       3       0       0
  6968 ;;      Temps:          0       0       0       0
  6969 ;;      Totals:         0       3       0       0
  6970 ;;Total ram usage:        3 bytes
  6971 ;; Hardware stack levels used:    1
  6972 ;; Hardware stack levels required when called:    2
  6973 ;; This function calls:
  6974 ;;		Nothing
  6975 ;; This function is called by:
  6976 ;;		_Load_Main
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _getMain_Lights_Count
  6982  0995                     _getMain_Lights_Count:	
  6983                           
  6984                           ;Main_B1.c: 460: char count = 0;
  6985                           
  6986                           ;incstack = 0
  6987                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6988  0995  1283               	bcf	3,5	;RP0=0, select bank0
  6989  0996  1303               	bcf	3,6	;RP1=0, select bank0
  6990  0997  01D7               	clrf	getMain_Lights_Count@count
  6991                           
  6992                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6993  0998  3000               	movlw	0
  6994  0999  1949               	btfsc	_Lights1,2
  6995  099A  3001               	movlw	1
  6996  099B  00D8               	movwf	getMain_Lights_Count@status1
  6997                           
  6998                           ;Main_B1.c: 479: char status2 = Lights2.Status == 1 ? 1 : 0;
  6999  099C  3000               	movlw	0
  7000  099D  194E               	btfsc	_Lights2,2
  7001  099E  3001               	movlw	1
  7002  099F  00D9               	movwf	getMain_Lights_Count@status2
  7003                           
  7004                           ;Main_B1.c: 490: return count = (status1 + status2);
  7005  09A0  0859               	movf	getMain_Lights_Count@status2,w
  7006  09A1  0758               	addwf	getMain_Lights_Count@status1,w
  7007  09A2  00D7               	movwf	getMain_Lights_Count@count
  7008  09A3  0008               	return
  7009  09A4                     __end_of_getMain_Lights_Count:	
  7010                           
  7011                           	psect	text37
  7012  0903                     __ptext37:	
  7013 ;; *************** function _getLight_Load_Status *****************
  7014 ;; Defined at:
  7015 ;;		line 405 in file "../src/TriacRelay_B1.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;  loadstatus      1    4[COMMON] unsigned char 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      unsigned char 
  7022 ;; Registers used:
  7023 ;;		wreg, status,2
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7029 ;;      Params:         0       0       0       0
  7030 ;;      Locals:         1       0       0       0
  7031 ;;      Temps:          0       0       0       0
  7032 ;;      Totals:         1       0       0       0
  7033 ;;Total ram usage:        1 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    2
  7036 ;; This function calls:
  7037 ;;		Nothing
  7038 ;; This function is called by:
  7039 ;;		_Load_Main
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           
  7044                           ;psect for function _getLight_Load_Status
  7045  0903                     _getLight_Load_Status:	
  7046                           
  7047                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  7048                           
  7049                           ;incstack = 0
  7050                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  7051  0903  3000               	movlw	0
  7052  0904  18F7               	btfsc	_Light,1
  7053  0905  3001               	movlw	1
  7054  0906  00F4               	movwf	getLight_Load_Status@loadstatus
  7055                           
  7056                           ;TriacRelay_B1.c: 407: return loadstatus;
  7057  0907  0874               	movf	getLight_Load_Status@loadstatus,w
  7058  0908  0008               	return
  7059  0909                     __end_of_getLight_Load_Status:	
  7060                           
  7061                           	psect	text38
  7062  08FD                     __ptext38:	
  7063 ;; *************** function _getLight_LoadGO *****************
  7064 ;; Defined at:
  7065 ;;		line 400 in file "../src/TriacRelay_B1.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;		None
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;  loadgo          1    4[COMMON] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      unsigned char 
  7072 ;; Registers used:
  7073 ;;		wreg, status,2
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7079 ;;      Params:         0       0       0       0
  7080 ;;      Locals:         1       0       0       0
  7081 ;;      Temps:          0       0       0       0
  7082 ;;      Totals:         1       0       0       0
  7083 ;;Total ram usage:        1 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    2
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_Load_Main
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           
  7094                           ;psect for function _getLight_LoadGO
  7095  08FD                     _getLight_LoadGO:	
  7096                           
  7097                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  7098                           
  7099                           ;incstack = 0
  7100                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  7101  08FD  3000               	movlw	0
  7102  08FE  1877               	btfsc	_Light,0
  7103  08FF  3001               	movlw	1
  7104  0900  00F4               	movwf	getLight_LoadGO@loadgo
  7105                           
  7106                           ;TriacRelay_B1.c: 402: return loadgo;
  7107  0901  0874               	movf	getLight_LoadGO@loadgo,w
  7108  0902  0008               	return
  7109  0903                     __end_of_getLight_LoadGO:	
  7110                           
  7111                           	psect	text39
  7112  0B89                     __ptext39:	
  7113 ;; *************** function ___wmul *****************
  7114 ;; Defined at:
  7115 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7118 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  product         2    4[COMMON] unsigned int 
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  2    0[BANK0 ] unsigned int 
  7123 ;; Registers used:
  7124 ;;		wreg, status,2, status,0
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7130 ;;      Params:         0       4       0       0
  7131 ;;      Locals:         2       0       0       0
  7132 ;;      Temps:          0       0       0       0
  7133 ;;      Totals:         2       4       0       0
  7134 ;;Total ram usage:        6 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; Hardware stack levels required when called:    2
  7137 ;; This function calls:
  7138 ;;		Nothing
  7139 ;; This function is called by:
  7140 ;;		_Load_Main
  7141 ;; This function uses a non-reentrant model
  7142 ;;
  7143                           
  7144                           
  7145                           ;psect for function ___wmul
  7146  0B89                     ___wmul:	
  7147                           
  7148                           ;incstack = 0
  7149                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7150  0B89  01F4               	clrf	___wmul@product
  7151  0B8A  01F5               	clrf	___wmul@product+1
  7152  0B8B                     l5565:	
  7153  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  7154  0B8C  1303               	bcf	3,6	;RP1=0, select bank0
  7155  0B8D  1C57               	btfss	___wmul@multiplier,0
  7156  0B8E  2B95               	goto	l1694
  7157  0B8F  0859               	movf	___wmul@multiplicand,w
  7158  0B90  07F4               	addwf	___wmul@product,f
  7159  0B91  1803               	skipnc
  7160  0B92  0AF5               	incf	___wmul@product+1,f
  7161  0B93  085A               	movf	___wmul@multiplicand+1,w
  7162  0B94  07F5               	addwf	___wmul@product+1,f
  7163  0B95                     l1694:	
  7164  0B95  3001               	movlw	1
  7165  0B96                     u6725:	
  7166  0B96  1003               	clrc
  7167  0B97  0DD9               	rlf	___wmul@multiplicand,f
  7168  0B98  0DDA               	rlf	___wmul@multiplicand+1,f
  7169  0B99  3EFF               	addlw	-1
  7170  0B9A  1D03               	skipz
  7171  0B9B  2B96               	goto	u6725
  7172  0B9C  3001               	movlw	1
  7173  0B9D                     u6735:	
  7174  0B9D  1003               	clrc
  7175  0B9E  0CD8               	rrf	___wmul@multiplier+1,f
  7176  0B9F  0CD7               	rrf	___wmul@multiplier,f
  7177  0BA0  3EFF               	addlw	-1
  7178  0BA1  1D03               	skipz
  7179  0BA2  2B9D               	goto	u6735
  7180  0BA3  0858               	movf	___wmul@multiplier+1,w
  7181  0BA4  0457               	iorwf	___wmul@multiplier,w
  7182  0BA5  1D03               	skipz
  7183  0BA6  2B8B               	goto	l5565
  7184  0BA7  0875               	movf	___wmul@product+1,w
  7185  0BA8  01D8               	clrf	?___wmul+1
  7186  0BA9  07D8               	addwf	?___wmul+1,f
  7187  0BAA  0874               	movf	___wmul@product,w
  7188  0BAB  01D7               	clrf	?___wmul
  7189  0BAC  07D7               	addwf	?___wmul,f
  7190  0BAD  0008               	return
  7191  0BAE                     __end_of___wmul:	
  7192                           
  7193                           	psect	text40
  7194  0D4C                     __ptext40:	
  7195 ;; *************** function ___lwdiv *****************
  7196 ;; Defined at:
  7197 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;  divisor         2    0[BANK0 ] unsigned int 
  7200 ;;  dividend        2    2[BANK0 ] unsigned int 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;  quotient        2    5[BANK0 ] unsigned int 
  7203 ;;  counter         1    4[BANK0 ] unsigned char 
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  2    0[BANK0 ] unsigned int 
  7206 ;; Registers used:
  7207 ;;		wreg, status,2, status,0
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7213 ;;      Params:         0       4       0       0
  7214 ;;      Locals:         0       3       0       0
  7215 ;;      Temps:          1       0       0       0
  7216 ;;      Totals:         1       7       0       0
  7217 ;;Total ram usage:        8 bytes
  7218 ;; Hardware stack levels used:    1
  7219 ;; Hardware stack levels required when called:    2
  7220 ;; This function calls:
  7221 ;;		Nothing
  7222 ;; This function is called by:
  7223 ;;		_Load_Main
  7224 ;;		_getPIR_AD
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           
  7229                           ;psect for function ___lwdiv
  7230  0D4C                     ___lwdiv:	
  7231                           
  7232                           ;incstack = 0
  7233                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7234  0D4C  1283               	bcf	3,5	;RP0=0, select bank0
  7235  0D4D  1303               	bcf	3,6	;RP1=0, select bank0
  7236  0D4E  01DC               	clrf	___lwdiv@quotient
  7237  0D4F  01DD               	clrf	___lwdiv@quotient+1
  7238  0D50  0858               	movf	___lwdiv@divisor+1,w
  7239  0D51  0457               	iorwf	___lwdiv@divisor,w
  7240  0D52  1903               	skipnz
  7241  0D53  2D85               	goto	l5597
  7242  0D54  01DB               	clrf	___lwdiv@counter
  7243  0D55  0ADB               	incf	___lwdiv@counter,f
  7244  0D56                     l5585:	
  7245  0D56  1BD8               	btfsc	___lwdiv@divisor+1,7
  7246  0D57  2D64               	goto	l5587
  7247  0D58  3001               	movlw	1
  7248  0D59                     u6765:	
  7249  0D59  1003               	clrc
  7250  0D5A  0DD7               	rlf	___lwdiv@divisor,f
  7251  0D5B  0DD8               	rlf	___lwdiv@divisor+1,f
  7252  0D5C  3EFF               	addlw	-1
  7253  0D5D  1D03               	skipz
  7254  0D5E  2D59               	goto	u6765
  7255  0D5F  3001               	movlw	1
  7256  0D60  00F4               	movwf	??___lwdiv
  7257  0D61  0874               	movf	??___lwdiv,w
  7258  0D62  07DB               	addwf	___lwdiv@counter,f
  7259  0D63  2D56               	goto	l5585
  7260  0D64                     l5587:	
  7261  0D64  3001               	movlw	1
  7262  0D65                     u6785:	
  7263  0D65  1003               	clrc
  7264  0D66  0DDC               	rlf	___lwdiv@quotient,f
  7265  0D67  0DDD               	rlf	___lwdiv@quotient+1,f
  7266  0D68  3EFF               	addlw	-1
  7267  0D69  1D03               	skipz
  7268  0D6A  2D65               	goto	u6785
  7269  0D6B  0858               	movf	___lwdiv@divisor+1,w
  7270  0D6C  025A               	subwf	___lwdiv@dividend+1,w
  7271  0D6D  1D03               	skipz
  7272  0D6E  2D71               	goto	u6795
  7273  0D6F  0857               	movf	___lwdiv@divisor,w
  7274  0D70  0259               	subwf	___lwdiv@dividend,w
  7275  0D71                     u6795:	
  7276  0D71  1C03               	skipc
  7277  0D72  2D7A               	goto	l5593
  7278  0D73  0857               	movf	___lwdiv@divisor,w
  7279  0D74  02D9               	subwf	___lwdiv@dividend,f
  7280  0D75  0858               	movf	___lwdiv@divisor+1,w
  7281  0D76  1C03               	skipc
  7282  0D77  03DA               	decf	___lwdiv@dividend+1,f
  7283  0D78  02DA               	subwf	___lwdiv@dividend+1,f
  7284  0D79  145C               	bsf	___lwdiv@quotient,0
  7285  0D7A                     l5593:	
  7286  0D7A  3001               	movlw	1
  7287  0D7B                     u6805:	
  7288  0D7B  1003               	clrc
  7289  0D7C  0CD8               	rrf	___lwdiv@divisor+1,f
  7290  0D7D  0CD7               	rrf	___lwdiv@divisor,f
  7291  0D7E  3EFF               	addlw	-1
  7292  0D7F  1D03               	skipz
  7293  0D80  2D7B               	goto	u6805
  7294  0D81  3001               	movlw	1
  7295  0D82  02DB               	subwf	___lwdiv@counter,f
  7296  0D83  1D03               	btfss	3,2
  7297  0D84  2D64               	goto	l5587
  7298  0D85                     l5597:	
  7299  0D85  085D               	movf	___lwdiv@quotient+1,w
  7300  0D86  01D8               	clrf	?___lwdiv+1
  7301  0D87  07D8               	addwf	?___lwdiv+1,f
  7302  0D88  085C               	movf	___lwdiv@quotient,w
  7303  0D89  01D7               	clrf	?___lwdiv
  7304  0D8A  07D7               	addwf	?___lwdiv,f
  7305  0D8B  0008               	return
  7306  0D8C                     __end_of___lwdiv:	
  7307                           
  7308                           	psect	text41
  7309  08DD                     __ptext41:	
  7310 ;; *************** function _Load_Initialization *****************
  7311 ;; Defined at:
  7312 ;;		line 9 in file "../src/OverLoad_B1.c"
  7313 ;; Parameters:    Size  Location     Type
  7314 ;;		None
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;		None
  7317 ;; Return value:  Size  Location     Type
  7318 ;;		None               void
  7319 ;; Registers used:
  7320 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7321 ;; Tracked objects:
  7322 ;;		On entry : 0/0
  7323 ;;		On exit  : 0/0
  7324 ;;		Unchanged: 0/0
  7325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7326 ;;      Params:         0       0       0       0
  7327 ;;      Locals:         0       0       0       0
  7328 ;;      Temps:          0       0       0       0
  7329 ;;      Totals:         0       0       0       0
  7330 ;;Total ram usage:        0 bytes
  7331 ;; Hardware stack levels used:    1
  7332 ;; Hardware stack levels required when called:    3
  7333 ;; This function calls:
  7334 ;;		_setLoad_AH_AL_Restore
  7335 ;; This function is called by:
  7336 ;;		_main
  7337 ;; This function uses a non-reentrant model
  7338 ;;
  7339                           
  7340                           
  7341                           ;psect for function _Load_Initialization
  7342  08DD                     _Load_Initialization:	
  7343                           
  7344                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7345                           
  7346                           ;incstack = 0
  7347                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7348  08DD  158A  227F         	fcall	_setLoad_AH_AL_Restore
  7349  08DF  0008               	return
  7350  08E0                     __end_of_Load_Initialization:	
  7351                           
  7352                           	psect	text42
  7353  0A7F                     __ptext42:	
  7354 ;; *************** function _setLoad_AH_AL_Restore *****************
  7355 ;; Defined at:
  7356 ;;		line 292 in file "../src/OverLoad_B1.c"
  7357 ;; Parameters:    Size  Location     Type
  7358 ;;		None
  7359 ;; Auto vars:     Size  Location     Type
  7360 ;;  i               1    5[COMMON] unsigned char 
  7361 ;; Return value:  Size  Location     Type
  7362 ;;		None               void
  7363 ;; Registers used:
  7364 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7365 ;; Tracked objects:
  7366 ;;		On entry : 0/0
  7367 ;;		On exit  : 0/0
  7368 ;;		Unchanged: 0/0
  7369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7370 ;;      Params:         0       0       0       0
  7371 ;;      Locals:         1       0       0       0
  7372 ;;      Temps:          1       0       0       0
  7373 ;;      Totals:         2       0       0       0
  7374 ;;Total ram usage:        2 bytes
  7375 ;; Hardware stack levels used:    1
  7376 ;; Hardware stack levels required when called:    2
  7377 ;; This function calls:
  7378 ;;		Nothing
  7379 ;; This function is called by:
  7380 ;;		_Load_Initialization
  7381 ;;		_Load_Main
  7382 ;; This function uses a non-reentrant model
  7383 ;;
  7384                           
  7385                           
  7386                           ;psect for function _setLoad_AH_AL_Restore
  7387  0A7F                     _setLoad_AH_AL_Restore:	
  7388                           
  7389                           ;OverLoad_B1.c: 293: char i;
  7390                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
  7391                           
  7392                           ;incstack = 0
  7393                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  7394  0A7F  01F5               	clrf	setLoad_AH_AL_Restore@i
  7395  0A80                     L14:	
  7396  0A80  3005               	movlw	5
  7397  0A81  0275               	subwf	setLoad_AH_AL_Restore@i,w
  7398  0A82  1803               	btfsc	3,0
  7399  0A83  0008               	return
  7400                           
  7401                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
  7402  0A84  0875               	movf	setLoad_AH_AL_Restore@i,w
  7403  0A85  3ED4               	addlw	(_Load+10)& (0+255)
  7404  0A86  0084               	movwf	4
  7405  0A87  1383               	bcf	3,7	;select IRP bank1
  7406  0A88  0180               	clrf	0
  7407                           
  7408                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xff;
  7409  0A89  30FF               	movlw	255
  7410  0A8A  00F4               	movwf	??_setLoad_AH_AL_Restore
  7411  0A8B  0875               	movf	setLoad_AH_AL_Restore@i,w
  7412  0A8C  3ED9               	addlw	(_Load+15)& (0+255)
  7413  0A8D  0084               	movwf	4
  7414  0A8E  0874               	movf	??_setLoad_AH_AL_Restore,w
  7415  0A8F  0080               	movwf	0
  7416  0A90  3001               	movlw	1
  7417  0A91  00F4               	movwf	??_setLoad_AH_AL_Restore
  7418  0A92  0874               	movf	??_setLoad_AH_AL_Restore,w
  7419  0A93  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  7420  0A94  2A80               	goto	L14
  7421  0A95                     __end_of_setLoad_AH_AL_Restore:	
  7422                           
  7423                           	psect	text43
  7424  0BAE                     __ptext43:	
  7425 ;; *************** function _Lights_Main *****************
  7426 ;; Defined at:
  7427 ;;		line 52 in file "../src/TriacRelay_B1.c"
  7428 ;; Parameters:    Size  Location     Type
  7429 ;;		None
  7430 ;; Auto vars:     Size  Location     Type
  7431 ;;		None
  7432 ;; Return value:  Size  Location     Type
  7433 ;;		None               void
  7434 ;; Registers used:
  7435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7441 ;;      Params:         0       0       0       0
  7442 ;;      Locals:         0       0       0       0
  7443 ;;      Temps:          0       0       0       0
  7444 ;;      Totals:         0       0       0       0
  7445 ;;Total ram usage:        0 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    6
  7448 ;; This function calls:
  7449 ;;		_Lights_Control
  7450 ;;		_getLoad_OK
  7451 ;;		_getMain_All_Error_Status
  7452 ;;		_getMain_All_LightsStatus
  7453 ;;		_setLights_Main
  7454 ;; This function is called by:
  7455 ;;		_main
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function _Lights_Main
  7461  0BAE                     _Lights_Main:	
  7462                           
  7463                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  7464                           
  7465                           ;incstack = 0
  7466                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7467  0BAE  1C77               	btfss	_Light,0
  7468  0BAF  2BC4               	goto	l5957
  7469                           
  7470                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  7471  0BB0  158A  2125  158A   	fcall	_getLoad_OK
  7472  0BB3  3A01               	xorlw	1
  7473  0BB4  1903               	skipnz
  7474  0BB5  2BC3               	goto	l1544
  7475  0BB6  3000               	movlw	0
  7476  0BB7  158A  24D0  158A   	fcall	_getMain_All_Error_Status
  7477  0BBA  3800               	iorlw	0
  7478  0BBB  1D03               	skipz
  7479  0BBC  2BC3               	goto	l1544
  7480  0BBD  158A  21C3  158A   	fcall	_getMain_All_LightsStatus
  7481  0BC0  3800               	iorlw	0
  7482  0BC1  1D03               	skipz
  7483  0BC2  2BC4               	goto	l5957
  7484  0BC3                     l1544:	
  7485                           
  7486                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7487  0BC3  1077               	bcf	_Light,0
  7488  0BC4                     l5957:	
  7489                           
  7490                           ;TriacRelay_B1.c: 68: }
  7491                           ;TriacRelay_B1.c: 69: }
  7492                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7493  0BC4  3001               	movlw	1
  7494  0BC5  158A  23FF  158A   	fcall	_setLights_Main
  7495                           
  7496                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7497  0BC8  3001               	movlw	1
  7498  0BC9  118A  267F  158A   	fcall	_Lights_Control
  7499                           
  7500                           ;TriacRelay_B1.c: 78: setLights_Main(2);
  7501  0BCC  3002               	movlw	2
  7502  0BCD  158A  23FF  158A   	fcall	_setLights_Main
  7503                           
  7504                           ;TriacRelay_B1.c: 79: Lights_Control(2);
  7505  0BD0  3002               	movlw	2
  7506  0BD1  118A  267F         	fcall	_Lights_Control
  7507  0BD3  0008               	return
  7508  0BD4                     __end_of_Lights_Main:	
  7509                           
  7510                           	psect	text44
  7511  0BFF                     __ptext44:	
  7512 ;; *************** function _setLights_Main *****************
  7513 ;; Defined at:
  7514 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7515 ;; Parameters:    Size  Location     Type
  7516 ;;  lights          1    wreg     unsigned char 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  lights          1    5[BANK0 ] unsigned char 
  7519 ;; Return value:  Size  Location     Type
  7520 ;;		None               void
  7521 ;; Registers used:
  7522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7528 ;;      Params:         0       0       0       0
  7529 ;;      Locals:         0       1       0       0
  7530 ;;      Temps:          0       0       0       0
  7531 ;;      Totals:         0       1       0       0
  7532 ;;Total ram usage:        1 bytes
  7533 ;; Hardware stack levels used:    1
  7534 ;; Hardware stack levels required when called:    5
  7535 ;; This function calls:
  7536 ;;		_LightsPointSelect
  7537 ;;		_getLights_Allow_Condition
  7538 ;;		_setLights
  7539 ;; This function is called by:
  7540 ;;		_Lights_Main
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _setLights_Main
  7546  0BFF                     _setLights_Main:	
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7550                           ;setLights_Main@lights stored from wreg
  7551  0BFF  1283               	bcf	3,5	;RP0=0, select bank0
  7552  0C00  1303               	bcf	3,6	;RP1=0, select bank0
  7553  0C01  00DC               	movwf	setLights_Main@lights
  7554                           
  7555                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7556  0C02  085C               	movf	setLights_Main@lights,w
  7557  0C03  158A  2207  158A   	fcall	_LightsPointSelect
  7558                           
  7559                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7560  0C06  0878               	movf	_Lights,w
  7561  0C07  0084               	movwf	4
  7562  0C08  1383               	bcf	3,7	;select IRP bank0
  7563  0C09  1880               	btfsc	0,1
  7564  0C0A  0008               	return
  7565                           
  7566                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7567  0C0B  0878               	movf	_Lights,w
  7568  0C0C  0084               	movwf	4
  7569  0C0D  1D80               	btfss	0,3
  7570  0C0E  0008               	return
  7571                           
  7572                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7573  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  7574  0C10  1303               	bcf	3,6	;RP1=0, select bank0
  7575  0C11  085C               	movf	setLights_Main@lights,w
  7576  0C12  158A  2295  158A   	fcall	_getLights_Allow_Condition
  7577  0C15  3800               	iorlw	0
  7578  0C16  1D03               	skipz
  7579  0C17  0008               	return
  7580                           
  7581                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7582  0C18  0878               	movf	_Lights,w
  7583  0C19  0084               	movwf	4
  7584  0C1A  1383               	bcf	3,7	;select IRP bank0
  7585  0C1B  1180               	bcf	0,3
  7586                           
  7587                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7588  0C1C  0878               	movf	_Lights,w
  7589  0C1D  0084               	movwf	4
  7590  0C1E  1E00               	btfss	0,4
  7591  0C1F  2C28               	goto	l5525
  7592                           
  7593                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7594  0C20  1283               	bcf	3,5	;RP0=0, select bank0
  7595  0C21  1303               	bcf	3,6	;RP1=0, select bank0
  7596  0C22  01D9               	clrf	setLights@status
  7597  0C23  0AD9               	incf	setLights@status,f
  7598  0C24  085C               	movf	setLights_Main@lights,w
  7599  0C25  158A  2777         	fcall	_setLights
  7600                           
  7601                           ;TriacRelay_B1.c: 99: } else {
  7602  0C27  0008               	return
  7603  0C28                     l5525:	
  7604                           
  7605                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7606  0C28  1283               	bcf	3,5	;RP0=0, select bank0
  7607  0C29  1303               	bcf	3,6	;RP1=0, select bank0
  7608  0C2A  01D9               	clrf	setLights@status
  7609  0C2B  085C               	movf	setLights_Main@lights,w
  7610  0C2C  158A  2777         	fcall	_setLights
  7611  0C2E  0008               	return
  7612  0C2F                     __end_of_setLights_Main:	
  7613                           
  7614                           	psect	text45
  7615  0F77                     __ptext45:	
  7616 ;; *************** function _setLights *****************
  7617 ;; Defined at:
  7618 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  lights          1    wreg     unsigned char 
  7621 ;;  status          1    2[BANK0 ] unsigned char 
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;  lights          1    4[BANK0 ] unsigned char 
  7624 ;; Return value:  Size  Location     Type
  7625 ;;		None               void
  7626 ;; Registers used:
  7627 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7633 ;;      Params:         0       1       0       0
  7634 ;;      Locals:         0       1       0       0
  7635 ;;      Temps:          0       1       0       0
  7636 ;;      Totals:         0       3       0       0
  7637 ;;Total ram usage:        3 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    4
  7640 ;; This function calls:
  7641 ;;		_setLED
  7642 ;;		_setLights_Line
  7643 ;; This function is called by:
  7644 ;;		_setLights_Main
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           
  7649                           ;psect for function _setLights
  7650  0F77                     _setLights:	
  7651                           
  7652                           ;incstack = 0
  7653                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7654                           ;setLights@lights stored from wreg
  7655  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  7656  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  7657  0F79  00DB               	movwf	setLights@lights
  7658                           
  7659                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7660  0F7A  0859               	movf	setLights@status,w
  7661  0F7B  3A01               	xorlw	1
  7662  0F7C  1D03               	skipz
  7663  0F7D  2FBF               	goto	l5301
  7664                           
  7665                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7666  0F7E  085B               	movf	setLights@lights,w
  7667  0F7F  3A02               	xorlw	2
  7668  0F80  1D03               	skipz
  7669  0F81  2F8F               	goto	l5281
  7670                           
  7671                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7672  0F82  01D7               	clrf	setLED@command
  7673  0F83  3001               	movlw	1
  7674  0F84  158A  265B  158A   	fcall	_setLED
  7675                           
  7676                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7677  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  7678  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  7679  0F89  01D7               	clrf	setLED@command
  7680  0F8A  0AD7               	incf	setLED@command,f
  7681  0F8B  3002               	movlw	2
  7682  0F8C  158A  265B  158A   	fcall	_setLED
  7683  0F8F                     l5281:	
  7684                           
  7685                           ;TriacRelay_B1.c: 121: }
  7686                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7687  0F8F  0878               	movf	_Lights,w
  7688  0F90  0084               	movwf	4
  7689  0F91  1383               	bcf	3,7	;select IRP bank0
  7690  0F92  1900               	btfsc	0,2
  7691  0F93  2FB8               	goto	l1558
  7692                           
  7693                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7694  0F94  0878               	movf	_Lights,w
  7695  0F95  0084               	movwf	4
  7696  0F96  1500               	bsf	0,2
  7697                           
  7698                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7699  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  7700  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  7701  0F99  085B               	movf	setLights@lights,w
  7702  0F9A  3A01               	xorlw	1
  7703  0F9B  1D03               	skipz
  7704  0F9C  2FB4               	goto	l5295
  7705                           
  7706                           ;TriacRelay_B1.c: 131: RA7 = 1;
  7707  0F9D  1785               	bsf	5,7	;volatile
  7708                           
  7709                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7710  0F9E  3064               	movlw	100
  7711  0F9F  00DA               	movwf	??_setLights
  7712  0FA0  0878               	movf	_Lights,w
  7713  0FA1  3E04               	addlw	4
  7714  0FA2  0084               	movwf	4
  7715  0FA3  085A               	movf	??_setLights,w
  7716  0FA4  0080               	movwf	0
  7717                           
  7718                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7719  0FA5  308C               	movlw	140
  7720  0FA6  00DA               	movwf	??_setLights
  7721  0FA7  0878               	movf	_Lights,w
  7722  0FA8  3E03               	addlw	3
  7723  0FA9  0084               	movwf	4
  7724  0FAA  085A               	movf	??_setLights,w
  7725  0FAB  0080               	movwf	0
  7726                           
  7727                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7728  0FAC  0878               	movf	_Lights,w
  7729  0FAD  3E02               	addlw	2
  7730  0FAE  0084               	movwf	4
  7731  0FAF  0180               	clrf	0
  7732                           
  7733                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7734  0FB0  0878               	movf	_Lights,w
  7735  0FB1  0084               	movwf	4
  7736  0FB2  1480               	bsf	0,1
  7737                           
  7738                           ;TriacRelay_B1.c: 136: }
  7739  0FB3  2FB8               	goto	l1558
  7740  0FB4                     l5295:	
  7741                           
  7742                           ;TriacRelay_B1.c: 139: else if (lights == 2) {
  7743  0FB4  085B               	movf	setLights@lights,w
  7744  0FB5  3A02               	xorlw	2
  7745  0FB6  1903               	btfsc	3,2
  7746                           
  7747                           ;TriacRelay_B1.c: 147: RC4 = 1;
  7748  0FB7  1607               	bsf	7,4	;volatile
  7749  0FB8                     l1558:	
  7750                           
  7751                           ;TriacRelay_B1.c: 151: }
  7752                           ;TriacRelay_B1.c: 162: }
  7753                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7754  0FB8  14F7               	bsf	_Light,1
  7755                           
  7756                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7757  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  7758  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  7759  0FBB  085B               	movf	setLights@lights,w
  7760  0FBC  158A  22AC         	fcall	_setLights_Line
  7761                           
  7762                           ;TriacRelay_B1.c: 167: } else {
  7763  0FBE  0008               	return
  7764  0FBF                     l5301:	
  7765                           
  7766                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7767  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  7768  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  7769  0FC1  085B               	movf	setLights@lights,w
  7770  0FC2  3A02               	xorlw	2
  7771  0FC3  1D03               	skipz
  7772  0FC4  2FD2               	goto	l5305
  7773                           
  7774                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7775  0FC5  01D7               	clrf	setLED@command
  7776  0FC6  0AD7               	incf	setLED@command,f
  7777  0FC7  3001               	movlw	1
  7778  0FC8  158A  265B  158A   	fcall	_setLED
  7779                           
  7780                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7781  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  7782  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  7783  0FCD  01D7               	clrf	setLED@command
  7784  0FCE  3002               	movlw	2
  7785  0FCF  158A  265B  158A   	fcall	_setLED
  7786  0FD2                     l5305:	
  7787                           
  7788                           ;TriacRelay_B1.c: 173: }
  7789                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7790  0FD2  0878               	movf	_Lights,w
  7791  0FD3  0084               	movwf	4
  7792  0FD4  1383               	bcf	3,7	;select IRP bank0
  7793  0FD5  1D00               	btfss	0,2
  7794  0FD6  2FFB               	goto	l1564
  7795                           
  7796                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7797  0FD7  0878               	movf	_Lights,w
  7798  0FD8  0084               	movwf	4
  7799  0FD9  1100               	bcf	0,2
  7800                           
  7801                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7802  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  7803  0FDB  1303               	bcf	3,6	;RP1=0, select bank0
  7804  0FDC  085B               	movf	setLights@lights,w
  7805  0FDD  3A01               	xorlw	1
  7806  0FDE  1D03               	skipz
  7807  0FDF  2FF7               	goto	l5319
  7808                           
  7809                           ;TriacRelay_B1.c: 179: RA7 = 1;
  7810  0FE0  1785               	bsf	5,7	;volatile
  7811                           
  7812                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7813  0FE1  3028               	movlw	40
  7814  0FE2  00DA               	movwf	??_setLights
  7815  0FE3  0878               	movf	_Lights,w
  7816  0FE4  3E04               	addlw	4
  7817  0FE5  0084               	movwf	4
  7818  0FE6  085A               	movf	??_setLights,w
  7819  0FE7  0080               	movwf	0
  7820                           
  7821                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7822  0FE8  3050               	movlw	80
  7823  0FE9  00DA               	movwf	??_setLights
  7824  0FEA  0878               	movf	_Lights,w
  7825  0FEB  3E03               	addlw	3
  7826  0FEC  0084               	movwf	4
  7827  0FED  085A               	movf	??_setLights,w
  7828  0FEE  0080               	movwf	0
  7829                           
  7830                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7831  0FEF  0878               	movf	_Lights,w
  7832  0FF0  3E02               	addlw	2
  7833  0FF1  0084               	movwf	4
  7834  0FF2  0180               	clrf	0
  7835                           
  7836                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7837  0FF3  0878               	movf	_Lights,w
  7838  0FF4  0084               	movwf	4
  7839  0FF5  1480               	bsf	0,1
  7840                           
  7841                           ;TriacRelay_B1.c: 184: }
  7842  0FF6  2FFB               	goto	l1564
  7843  0FF7                     l5319:	
  7844                           
  7845                           ;TriacRelay_B1.c: 187: else if (lights == 2) {
  7846  0FF7  085B               	movf	setLights@lights,w
  7847  0FF8  3A02               	xorlw	2
  7848  0FF9  1903               	btfsc	3,2
  7849                           
  7850                           ;TriacRelay_B1.c: 195: RC4 = 0;
  7851  0FFA  1207               	bcf	7,4	;volatile
  7852  0FFB                     l1564:	
  7853                           
  7854                           ;TriacRelay_B1.c: 199: }
  7855                           ;TriacRelay_B1.c: 211: }
  7856                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7857  0FFB  10F7               	bcf	_Light,1
  7858                           
  7859                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7860  0FFC  3000               	movlw	0
  7861  0FFD  158A  22AC         	fcall	_setLights_Line
  7862  0FFF  0008               	return
  7863  1000                     __end_of_setLights:	
  7864                           
  7865                           	psect	text46
  7866  0AAC                     __ptext46:	
  7867 ;; *************** function _setLights_Line *****************
  7868 ;; Defined at:
  7869 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  lights          1    wreg     unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  lights          1    4[COMMON] unsigned char 
  7874 ;; Return value:  Size  Location     Type
  7875 ;;		None               void
  7876 ;; Registers used:
  7877 ;;		wreg
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/0
  7880 ;;		On exit  : 0/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7883 ;;      Params:         0       0       0       0
  7884 ;;      Locals:         1       0       0       0
  7885 ;;      Temps:          0       0       0       0
  7886 ;;      Totals:         1       0       0       0
  7887 ;;Total ram usage:        1 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:    2
  7890 ;; This function calls:
  7891 ;;		Nothing
  7892 ;; This function is called by:
  7893 ;;		_setLights
  7894 ;; This function uses a non-reentrant model
  7895 ;;
  7896                           
  7897                           
  7898                           ;psect for function _setLights_Line
  7899  0AAC                     _setLights_Line:	
  7900                           
  7901                           ;incstack = 0
  7902                           ; Regs used in _setLights_Line: [wreg]
  7903                           ;setLights_Line@lights stored from wreg
  7904  0AAC  00F4               	movwf	setLights_Line@lights
  7905                           
  7906                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7907  0AAD  1477               	bsf	_Light,0
  7908                           
  7909                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7910  0AAE  1283               	bcf	3,5	;RP0=0, select bank0
  7911  0AAF  1303               	bcf	3,6	;RP1=0, select bank0
  7912  0AB0  104A               	bcf	_Lights1+1,0
  7913                           
  7914                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7915  0AB1  0874               	movf	setLights_Line@lights,w
  7916  0AB2  3A01               	xorlw	1
  7917  0AB3  1D03               	skipz
  7918  0AB4  2AB9               	goto	l1591
  7919  0AB5  0874               	movf	setLights_Line@lights,w
  7920  0AB6  1903               	btfsc	3,2
  7921  0AB7  2AB9               	goto	l1591
  7922                           
  7923                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7924  0AB8  144A               	bsf	_Lights1+1,0
  7925  0AB9                     l1591:	
  7926                           
  7927                           ;TriacRelay_B1.c: 291: }
  7928                           ;TriacRelay_B1.c: 294: Lights2.Line = 0;
  7929  0AB9  104F               	bcf	_Lights2+1,0
  7930                           
  7931                           ;TriacRelay_B1.c: 295: if (lights == 2 && lights != 0) {
  7932  0ABA  0874               	movf	setLights_Line@lights,w
  7933  0ABB  3A02               	xorlw	2
  7934  0ABC  1D03               	skipz
  7935  0ABD  0008               	return
  7936  0ABE  0874               	movf	setLights_Line@lights,w
  7937  0ABF  1903               	btfsc	3,2
  7938  0AC0  0008               	return
  7939                           
  7940                           ;TriacRelay_B1.c: 296: Lights2.Line = 1;
  7941  0AC1  144F               	bsf	_Lights2+1,0
  7942  0AC2  0008               	return
  7943  0AC3                     __end_of_setLights_Line:	
  7944                           
  7945                           	psect	text47
  7946  0A95                     __ptext47:	
  7947 ;; *************** function _getLights_Allow_Condition *****************
  7948 ;; Defined at:
  7949 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;  lights          1    wreg     unsigned char 
  7952 ;; Auto vars:     Size  Location     Type
  7953 ;;  lights          1    0[COMMON] unsigned char 
  7954 ;;  allow           1    0[BANK0 ] unsigned char 
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  1    wreg      unsigned char 
  7957 ;; Registers used:
  7958 ;;		wreg, status,2, pclath, cstack
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7964 ;;      Params:         0       0       0       0
  7965 ;;      Locals:         0       2       0       0
  7966 ;;      Temps:          1       0       0       0
  7967 ;;      Totals:         1       2       0       0
  7968 ;;Total ram usage:        3 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    3
  7971 ;; This function calls:
  7972 ;;		_getLoad_OK
  7973 ;; This function is called by:
  7974 ;;		_setLights_Main
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           
  7979                           ;psect for function _getLights_Allow_Condition
  7980  0A95                     _getLights_Allow_Condition:	
  7981                           
  7982                           ;TriacRelay_B1.c: 368: char allow = 0;
  7983                           
  7984                           ;incstack = 0
  7985                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7986  0A95  1283               	bcf	3,5	;RP0=0, select bank0
  7987  0A96  1303               	bcf	3,6	;RP1=0, select bank0
  7988  0A97  01D7               	clrf	getLights_Allow_Condition@allow
  7989                           
  7990                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7991  0A98  01D8               	clrf	_getLights_Allow_Condition$4827
  7992  0A99  0AD8               	incf	_getLights_Allow_Condition$4827,f
  7993  0A9A  158A  2125  158A   	fcall	_getLoad_OK
  7994  0A9D  3800               	iorlw	0
  7995  0A9E  1903               	btfsc	3,2
  7996  0A9F  1877               	btfsc	_Light,0
  7997  0AA0  2AA4               	goto	l5269
  7998  0AA1  1283               	bcf	3,5	;RP0=0, select bank0
  7999  0AA2  1303               	bcf	3,6	;RP1=0, select bank0
  8000  0AA3  01D8               	clrf	_getLights_Allow_Condition$4827
  8001  0AA4                     l5269:	
  8002  0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  8003  0AA5  1303               	bcf	3,6	;RP1=0, select bank0
  8004  0AA6  0858               	movf	_getLights_Allow_Condition$4827,w
  8005  0AA7  00F5               	movwf	??_getLights_Allow_Condition
  8006  0AA8  0875               	movf	??_getLights_Allow_Condition,w
  8007  0AA9  00D7               	movwf	getLights_Allow_Condition@allow
  8008                           
  8009                           ;TriacRelay_B1.c: 396: return allow;
  8010  0AAA  0857               	movf	getLights_Allow_Condition@allow,w
  8011  0AAB  0008               	return
  8012  0AAC                     __end_of_getLights_Allow_Condition:	
  8013                           
  8014                           	psect	text48
  8015  0925                     __ptext48:	
  8016 ;; *************** function _getLoad_OK *****************
  8017 ;; Defined at:
  8018 ;;		line 272 in file "../src/OverLoad_B1.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;		None
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;  ok              1    4[COMMON] unsigned char 
  8023 ;; Return value:  Size  Location     Type
  8024 ;;                  1    wreg      unsigned char 
  8025 ;; Registers used:
  8026 ;;		wreg, status,2
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8032 ;;      Params:         0       0       0       0
  8033 ;;      Locals:         1       0       0       0
  8034 ;;      Temps:          0       0       0       0
  8035 ;;      Totals:         1       0       0       0
  8036 ;;Total ram usage:        1 bytes
  8037 ;; Hardware stack levels used:    1
  8038 ;; Hardware stack levels required when called:    2
  8039 ;; This function calls:
  8040 ;;		Nothing
  8041 ;; This function is called by:
  8042 ;;		_Lights_Main
  8043 ;;		_getLights_Allow_Condition
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           
  8048                           ;psect for function _getLoad_OK
  8049  0925                     _getLoad_OK:	
  8050                           
  8051                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
  8052                           
  8053                           ;incstack = 0
  8054                           ; Regs used in _getLoad_OK: [wreg+status,2]
  8055  0925  3000               	movlw	0
  8056  0926  1683               	bsf	3,5	;RP0=1, select bank1
  8057  0927  1303               	bcf	3,6	;RP1=0, select bank1
  8058  0928  1BCA               	btfsc	_Load^(0+128),7
  8059  0929  3001               	movlw	1
  8060  092A  00F4               	movwf	getLoad_OK@ok
  8061                           
  8062                           ;OverLoad_B1.c: 274: return ok;
  8063  092B  0874               	movf	getLoad_OK@ok,w
  8064  092C  0008               	return
  8065  092D                     __end_of_getLoad_OK:	
  8066                           
  8067                           	psect	text49
  8068  067F                     __ptext49:	
  8069 ;; *************** function _Lights_Control *****************
  8070 ;; Defined at:
  8071 ;;		line 220 in file "../src/TriacRelay_B1.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  lights          1    wreg     unsigned char 
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  lights          1   10[BANK0 ] unsigned char 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;		None               void
  8078 ;; Registers used:
  8079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8085 ;;      Params:         0       0       0       0
  8086 ;;      Locals:         0       1       0       0
  8087 ;;      Temps:          0       2       0       0
  8088 ;;      Totals:         0       3       0       0
  8089 ;;Total ram usage:        3 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    3
  8092 ;; This function calls:
  8093 ;;		_LightsPointSelect
  8094 ;;		___awdiv
  8095 ;; This function is called by:
  8096 ;;		_Lights_Main
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _Lights_Control
  8102  067F                     _Lights_Control:	
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8106                           ;Lights_Control@lights stored from wreg
  8107  067F  1283               	bcf	3,5	;RP0=0, select bank0
  8108  0680  1303               	bcf	3,6	;RP1=0, select bank0
  8109  0681  00E1               	movwf	Lights_Control@lights
  8110                           
  8111                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  8112  0682  0861               	movf	Lights_Control@lights,w
  8113  0683  158A  2207  118A   	fcall	_LightsPointSelect
  8114                           
  8115                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  8116  0686  0878               	movf	_Lights,w
  8117  0687  0084               	movwf	4
  8118  0688  1383               	bcf	3,7	;select IRP bank0
  8119  0689  1C80               	btfss	0,1
  8120  068A  0008               	return
  8121                           
  8122                           ;TriacRelay_B1.c: 223: Lights->Time++;
  8123  068B  3001               	movlw	1
  8124  068C  1283               	bcf	3,5	;RP0=0, select bank0
  8125  068D  1303               	bcf	3,6	;RP1=0, select bank0
  8126  068E  00DF               	movwf	??_Lights_Control
  8127  068F  0878               	movf	_Lights,w
  8128  0690  3E02               	addlw	2
  8129  0691  0084               	movwf	4
  8130  0692  085F               	movf	??_Lights_Control,w
  8131  0693  0780               	addwf	0,f
  8132                           
  8133                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  8134  0694  0878               	movf	_Lights,w
  8135  0695  0084               	movwf	4
  8136  0696  1B80               	btfsc	0,7
  8137  0697  2EDF               	goto	l5547
  8138                           
  8139                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  8140  0698  3014               	movlw	20
  8141  0699  00D7               	movwf	___awdiv@divisor
  8142  069A  3000               	movlw	0
  8143  069B  00D8               	movwf	___awdiv@divisor+1
  8144  069C  0878               	movf	_Lights,w
  8145  069D  3E04               	addlw	4
  8146  069E  0084               	movwf	4
  8147  069F  0800               	movf	0,w
  8148  06A0  00DF               	movwf	??_Lights_Control
  8149  06A1  01E0               	clrf	??_Lights_Control+1
  8150  06A2  085F               	movf	??_Lights_Control,w
  8151  06A3  00D9               	movwf	___awdiv@dividend
  8152  06A4  0860               	movf	??_Lights_Control+1,w
  8153  06A5  00DA               	movwf	___awdiv@dividend+1
  8154  06A6  118A  27A3  118A   	fcall	___awdiv
  8155  06A9  0878               	movf	_Lights,w
  8156  06AA  3E02               	addlw	2
  8157  06AB  0084               	movwf	4
  8158  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  8159  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  8160  06AE  0858               	movf	?___awdiv+1,w
  8161  06AF  3A80               	xorlw	128
  8162  06B0  3C80               	sublw	128
  8163  06B1  1D03               	skipz
  8164  06B2  2EB6               	goto	u6615
  8165  06B3  0857               	movf	?___awdiv,w
  8166  06B4  1383               	bcf	3,7	;select IRP bank0
  8167  06B5  0200               	subwf	0,w
  8168  06B6                     u6615:	
  8169  06B6  1C03               	skipc
  8170  06B7  0008               	return
  8171                           
  8172                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  8173  06B8  0878               	movf	_Lights,w
  8174  06B9  0084               	movwf	4
  8175  06BA  1383               	bcf	3,7	;select IRP bank0
  8176  06BB  1780               	bsf	0,7
  8177                           
  8178                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  8179  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  8180  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  8181  06BE  0861               	movf	Lights_Control@lights,w
  8182  06BF  3A01               	xorlw	1
  8183  06C0  1D03               	skipz
  8184  06C1  2ECE               	goto	l5543
  8185                           
  8186                           ;TriacRelay_B1.c: 229: RA6 = Lights->Status == 1 ? 1 : 0;
  8187  06C2  0878               	movf	_Lights,w
  8188  06C3  0084               	movwf	4
  8189  06C4  1D00               	btfss	0,2
  8190  06C5  2ECA               	goto	u6630
  8191  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  8192  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  8193  06C8  1705               	bsf	5,6	;volatile
  8194  06C9  0008               	return
  8195  06CA                     u6630:	
  8196  06CA  1283               	bcf	3,5	;RP0=0, select bank0
  8197  06CB  1303               	bcf	3,6	;RP1=0, select bank0
  8198  06CC  1305               	bcf	5,6	;volatile
  8199                           
  8200                           ;TriacRelay_B1.c: 230: }
  8201  06CD  0008               	return
  8202  06CE                     l5543:	
  8203                           
  8204                           ;TriacRelay_B1.c: 233: else if (lights == 2) {
  8205  06CE  0861               	movf	Lights_Control@lights,w
  8206  06CF  3A02               	xorlw	2
  8207  06D0  1D03               	skipz
  8208  06D1  0008               	return
  8209                           
  8210                           ;TriacRelay_B1.c: 234: RC5 = Lights->Status == 1 ? 1 : 0;
  8211  06D2  0878               	movf	_Lights,w
  8212  06D3  0084               	movwf	4
  8213  06D4  1383               	bcf	3,7	;select IRP bank0
  8214  06D5  1D00               	btfss	0,2
  8215  06D6  2EDB               	goto	u6660
  8216  06D7  1283               	bcf	3,5	;RP0=0, select bank0
  8217  06D8  1303               	bcf	3,6	;RP1=0, select bank0
  8218  06D9  1687               	bsf	7,5	;volatile
  8219  06DA  0008               	return
  8220  06DB                     u6660:	
  8221  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  8222  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  8223  06DD  1287               	bcf	7,5	;volatile
  8224                           
  8225                           ;TriacRelay_B1.c: 235: }
  8226                           ;TriacRelay_B1.c: 242: }
  8227                           ;TriacRelay_B1.c: 243: } else {
  8228  06DE  0008               	return
  8229  06DF                     l5547:	
  8230                           
  8231                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  8232  06DF  3014               	movlw	20
  8233  06E0  00D7               	movwf	___awdiv@divisor
  8234  06E1  3000               	movlw	0
  8235  06E2  00D8               	movwf	___awdiv@divisor+1
  8236  06E3  0878               	movf	_Lights,w
  8237  06E4  3E03               	addlw	3
  8238  06E5  0084               	movwf	4
  8239  06E6  1383               	bcf	3,7	;select IRP bank0
  8240  06E7  0800               	movf	0,w
  8241  06E8  00DF               	movwf	??_Lights_Control
  8242  06E9  01E0               	clrf	??_Lights_Control+1
  8243  06EA  085F               	movf	??_Lights_Control,w
  8244  06EB  00D9               	movwf	___awdiv@dividend
  8245  06EC  0860               	movf	??_Lights_Control+1,w
  8246  06ED  00DA               	movwf	___awdiv@dividend+1
  8247  06EE  118A  27A3  118A   	fcall	___awdiv
  8248  06F1  0878               	movf	_Lights,w
  8249  06F2  3E02               	addlw	2
  8250  06F3  0084               	movwf	4
  8251  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  8252  06F5  1303               	bcf	3,6	;RP1=0, select bank0
  8253  06F6  0858               	movf	?___awdiv+1,w
  8254  06F7  3A80               	xorlw	128
  8255  06F8  3C80               	sublw	128
  8256  06F9  1D03               	skipz
  8257  06FA  2EFE               	goto	u6685
  8258  06FB  0857               	movf	?___awdiv,w
  8259  06FC  1383               	bcf	3,7	;select IRP bank0
  8260  06FD  0200               	subwf	0,w
  8261  06FE                     u6685:	
  8262  06FE  1C03               	skipc
  8263  06FF  0008               	return
  8264                           
  8265                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  8266  0700  0878               	movf	_Lights,w
  8267  0701  3E02               	addlw	2
  8268  0702  0084               	movwf	4
  8269  0703  1383               	bcf	3,7	;select IRP bank0
  8270  0704  0180               	clrf	0
  8271                           
  8272                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  8273  0705  0878               	movf	_Lights,w
  8274  0706  0084               	movwf	4
  8275  0707  1080               	bcf	0,1
  8276                           
  8277                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  8278  0708  0878               	movf	_Lights,w
  8279  0709  0084               	movwf	4
  8280  070A  1380               	bcf	0,7
  8281                           
  8282                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  8283  070B  1283               	bcf	3,5	;RP0=0, select bank0
  8284  070C  1303               	bcf	3,6	;RP1=0, select bank0
  8285  070D  0861               	movf	Lights_Control@lights,w
  8286  070E  3A01               	xorlw	1
  8287  070F  1D03               	skipz
  8288  0710  2F13               	goto	l5559
  8289                           
  8290                           ;TriacRelay_B1.c: 251: RA7 = 0;
  8291  0711  1385               	bcf	5,7	;volatile
  8292                           
  8293                           ;TriacRelay_B1.c: 252: }
  8294  0712  0008               	return
  8295  0713                     l5559:	
  8296                           
  8297                           ;TriacRelay_B1.c: 255: else if (lights == 2) {
  8298  0713  0861               	movf	Lights_Control@lights,w
  8299  0714  3A02               	xorlw	2
  8300  0715  1D03               	skipz
  8301  0716  0008               	return
  8302                           
  8303                           ;TriacRelay_B1.c: 256: RC4 = 0;
  8304  0717  1207               	bcf	7,4	;volatile
  8305  0718  0008               	return
  8306  0719                     __end_of_Lights_Control:	
  8307                           
  8308                           	psect	text50
  8309  091D                     __ptext50:	
  8310 ;; *************** function _Lights_Initialization *****************
  8311 ;; Defined at:
  8312 ;;		line 32 in file "../src/TriacRelay_B1.c"
  8313 ;; Parameters:    Size  Location     Type
  8314 ;;		None
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;		None
  8317 ;; Return value:  Size  Location     Type
  8318 ;;		None               void
  8319 ;; Registers used:
  8320 ;;		wreg, status,2, status,0, pclath, cstack
  8321 ;; Tracked objects:
  8322 ;;		On entry : 0/0
  8323 ;;		On exit  : 0/0
  8324 ;;		Unchanged: 0/0
  8325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8326 ;;      Params:         0       0       0       0
  8327 ;;      Locals:         0       0       0       0
  8328 ;;      Temps:          0       0       0       0
  8329 ;;      Totals:         0       0       0       0
  8330 ;;Total ram usage:        0 bytes
  8331 ;; Hardware stack levels used:    1
  8332 ;; Hardware stack levels required when called:    4
  8333 ;; This function calls:
  8334 ;;		_setLights_Initialization
  8335 ;; This function is called by:
  8336 ;;		_main
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           
  8341                           ;psect for function _Lights_Initialization
  8342  091D                     _Lights_Initialization:	
  8343                           
  8344                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  8345                           
  8346                           ;incstack = 0
  8347                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8348  091D  3001               	movlw	1
  8349  091E  158A  210F  158A   	fcall	_setLights_Initialization
  8350                           
  8351                           ;TriacRelay_B1.c: 38: setLights_Initialization(2);
  8352  0921  3002               	movlw	2
  8353  0922  158A  210F         	fcall	_setLights_Initialization
  8354  0924  0008               	return
  8355  0925                     __end_of_Lights_Initialization:	
  8356                           
  8357                           	psect	text51
  8358  090F                     __ptext51:	
  8359 ;; *************** function _setLights_Initialization *****************
  8360 ;; Defined at:
  8361 ;;		line 47 in file "../src/TriacRelay_B1.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;  lights          1    wreg     unsigned char 
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;  lights          1    0[BANK0 ] unsigned char 
  8366 ;; Return value:  Size  Location     Type
  8367 ;;		None               void
  8368 ;; Registers used:
  8369 ;;		wreg, status,2, status,0, pclath, cstack
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8375 ;;      Params:         0       0       0       0
  8376 ;;      Locals:         0       1       0       0
  8377 ;;      Temps:          0       0       0       0
  8378 ;;      Totals:         0       1       0       0
  8379 ;;Total ram usage:        1 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    3
  8382 ;; This function calls:
  8383 ;;		_LightsPointSelect
  8384 ;; This function is called by:
  8385 ;;		_Lights_Initialization
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           
  8390                           ;psect for function _setLights_Initialization
  8391  090F                     _setLights_Initialization:	
  8392                           
  8393                           ;incstack = 0
  8394                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8395                           ;setLights_Initialization@lights stored from wreg
  8396  090F  1283               	bcf	3,5	;RP0=0, select bank0
  8397  0910  1303               	bcf	3,6	;RP1=0, select bank0
  8398  0911  00D7               	movwf	setLights_Initialization@lights
  8399                           
  8400                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  8401  0912  0857               	movf	setLights_Initialization@lights,w
  8402  0913  158A  2207         	fcall	_LightsPointSelect
  8403  0915  0008               	return
  8404  0916                     __end_of_setLights_Initialization:	
  8405                           
  8406                           	psect	text52
  8407  095F                     __ptext52:	
  8408 ;; *************** function _LED_Main *****************
  8409 ;; Defined at:
  8410 ;;		line 47 in file "../src/LED_B1.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;		None
  8413 ;; Auto vars:     Size  Location     Type
  8414 ;;		None
  8415 ;; Return value:  Size  Location     Type
  8416 ;;		None               void
  8417 ;; Registers used:
  8418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8419 ;; Tracked objects:
  8420 ;;		On entry : 0/0
  8421 ;;		On exit  : 0/0
  8422 ;;		Unchanged: 0/0
  8423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8424 ;;      Params:         0       0       0       0
  8425 ;;      Locals:         0       0       0       0
  8426 ;;      Temps:          0       0       0       0
  8427 ;;      Totals:         0       0       0       0
  8428 ;;Total ram usage:        0 bytes
  8429 ;; Hardware stack levels used:    1
  8430 ;; Hardware stack levels required when called:    4
  8431 ;; This function calls:
  8432 ;;		_setLED_Main
  8433 ;; This function is called by:
  8434 ;;		_main
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           
  8439                           ;psect for function _LED_Main
  8440  095F                     _LED_Main:	
  8441                           
  8442                           ;LED_B1.c: 58: setLED_Main(1);
  8443                           
  8444                           ;incstack = 0
  8445                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8446  095F  3001               	movlw	1
  8447  0960  158A  2495  158A   	fcall	_setLED_Main
  8448                           
  8449                           ;LED_B1.c: 61: setLED_Main(2);
  8450  0963  3002               	movlw	2
  8451  0964  158A  2495  158A   	fcall	_setLED_Main
  8452                           
  8453                           ;LED_B1.c: 67: setLED_Main(99);
  8454  0967  3063               	movlw	99
  8455  0968  158A  2495         	fcall	_setLED_Main
  8456  096A  0008               	return
  8457  096B                     __end_of_LED_Main:	
  8458                           
  8459                           	psect	text53
  8460  0C95                     __ptext53:	
  8461 ;; *************** function _setLED_Main *****************
  8462 ;; Defined at:
  8463 ;;		line 229 in file "../src/LED_B1.c"
  8464 ;; Parameters:    Size  Location     Type
  8465 ;;  led             1    wreg     unsigned char 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  led             1    2[BANK0 ] unsigned char 
  8468 ;; Return value:  Size  Location     Type
  8469 ;;		None               void
  8470 ;; Registers used:
  8471 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8472 ;; Tracked objects:
  8473 ;;		On entry : 0/0
  8474 ;;		On exit  : 0/0
  8475 ;;		Unchanged: 0/0
  8476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8477 ;;      Params:         0       0       0       0
  8478 ;;      Locals:         0       1       0       0
  8479 ;;      Temps:          0       2       0       0
  8480 ;;      Totals:         0       3       0       0
  8481 ;;Total ram usage:        3 bytes
  8482 ;; Hardware stack levels used:    1
  8483 ;; Hardware stack levels required when called:    3
  8484 ;; This function calls:
  8485 ;;		_LedPointSelect
  8486 ;; This function is called by:
  8487 ;;		_LED_Main
  8488 ;; This function uses a non-reentrant model
  8489 ;;
  8490                           
  8491                           
  8492                           ;psect for function _setLED_Main
  8493  0C95                     _setLED_Main:	
  8494                           
  8495                           ;incstack = 0
  8496                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8497                           ;setLED_Main@led stored from wreg
  8498  0C95  1283               	bcf	3,5	;RP0=0, select bank0
  8499  0C96  1303               	bcf	3,6	;RP1=0, select bank0
  8500  0C97  00D9               	movwf	setLED_Main@led
  8501                           
  8502                           ;LED_B1.c: 230: LedPointSelect(led);
  8503  0C98  0859               	movf	setLED_Main@led,w
  8504  0C99  158A  22F3  158A   	fcall	_LedPointSelect
  8505                           
  8506                           ;LED_B1.c: 231: if (LED->GO == 1) {
  8507  0C9C  0876               	movf	_LED,w
  8508  0C9D  0084               	movwf	4
  8509  0C9E  1383               	bcf	3,7	;select IRP bank0
  8510  0C9F  1C80               	btfss	0,1
  8511  0CA0  0008               	return
  8512                           
  8513                           ;LED_B1.c: 232: LED->Time++;
  8514  0CA1  0A76               	incf	_LED,w
  8515  0CA2  0084               	movwf	4
  8516  0CA3  3001               	movlw	1
  8517  0CA4  0780               	addwf	0,f
  8518  0CA5  0A84               	incf	4,f
  8519  0CA6  1803               	skipnc
  8520  0CA7  0A80               	incf	0,f
  8521                           
  8522                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  8523  0CA8  0A76               	incf	_LED,w
  8524  0CA9  0084               	movwf	4
  8525  0CAA  0800               	movf	0,w
  8526  0CAB  1283               	bcf	3,5	;RP0=0, select bank0
  8527  0CAC  1303               	bcf	3,6	;RP1=0, select bank0
  8528  0CAD  00D7               	movwf	??_setLED_Main
  8529  0CAE  0A84               	incf	4,f
  8530  0CAF  0800               	movf	0,w
  8531  0CB0  00D8               	movwf	??_setLED_Main+1
  8532  0CB1  3000               	movlw	0
  8533  0CB2  0258               	subwf	??_setLED_Main+1,w
  8534  0CB3  3019               	movlw	25
  8535  0CB4  1903               	skipnz
  8536  0CB5  0257               	subwf	??_setLED_Main,w
  8537  0CB6  1C03               	skipc
  8538  0CB7  0008               	return
  8539                           
  8540                           ;LED_B1.c: 234: LED->Time = 0;
  8541  0CB8  0A76               	incf	_LED,w
  8542  0CB9  0084               	movwf	4
  8543  0CBA  0180               	clrf	0
  8544  0CBB  0A84               	incf	4,f
  8545  0CBC  0180               	clrf	0
  8546                           
  8547                           ;LED_B1.c: 237: if (led == 1) {
  8548  0CBD  0859               	movf	setLED_Main@led,w
  8549  0CBE  3A01               	xorlw	1
  8550  0CBF  1D03               	skipz
  8551  0CC0  2CC3               	goto	l383
  8552                           
  8553                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
  8554  0CC1  3080               	movlw	128
  8555  0CC2  0687               	xorwf	7,f
  8556  0CC3                     l383:	
  8557                           
  8558                           ;LED_B1.c: 239: }
  8559                           ;LED_B1.c: 242: if (led == 2) {
  8560  0CC3  0859               	movf	setLED_Main@led,w
  8561  0CC4  3A02               	xorlw	2
  8562  0CC5  1D03               	skipz
  8563  0CC6  2CC9               	goto	l384
  8564                           
  8565                           ;LED_B1.c: 243: RC6 = RC6 == 1 ? 0 : 1;
  8566  0CC7  3040               	movlw	64
  8567  0CC8  0687               	xorwf	7,f
  8568  0CC9                     l384:	
  8569                           
  8570                           ;LED_B1.c: 244: }
  8571                           ;LED_B1.c: 252: if (led == 99) {
  8572  0CC9  0859               	movf	setLED_Main@led,w
  8573  0CCA  3A63               	xorlw	99
  8574  0CCB  1D03               	skipz
  8575  0CCC  0008               	return
  8576                           
  8577                           ;LED_B1.c: 253: RC1 = RC1 == 1 ? 0 : 1;
  8578  0CCD  3002               	movlw	2
  8579  0CCE  0687               	xorwf	7,f
  8580  0CCF  0008               	return
  8581  0CD0                     __end_of_setLED_Main:	
  8582                           
  8583                           	psect	text54
  8584  0953                     __ptext54:	
  8585 ;; *************** function _LED_Initialization *****************
  8586 ;; Defined at:
  8587 ;;		line 31 in file "../src/LED_B1.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;		None
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;		None
  8592 ;; Return value:  Size  Location     Type
  8593 ;;		None               void
  8594 ;; Registers used:
  8595 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8601 ;;      Params:         0       0       0       0
  8602 ;;      Locals:         0       0       0       0
  8603 ;;      Temps:          0       0       0       0
  8604 ;;      Totals:         0       0       0       0
  8605 ;;Total ram usage:        0 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    5
  8608 ;; This function calls:
  8609 ;;		_setLED_Initialization
  8610 ;; This function is called by:
  8611 ;;		_main
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           
  8616                           ;psect for function _LED_Initialization
  8617  0953                     _LED_Initialization:	
  8618                           
  8619                           ;LED_B1.c: 33: setLED_Initialization(1);
  8620                           
  8621                           ;incstack = 0
  8622                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8623  0953  3001               	movlw	1
  8624  0954  158A  21F5  158A   	fcall	_setLED_Initialization
  8625                           
  8626                           ;LED_B1.c: 36: setLED_Initialization(2);
  8627  0957  3002               	movlw	2
  8628  0958  158A  21F5  158A   	fcall	_setLED_Initialization
  8629                           
  8630                           ;LED_B1.c: 42: setLED_Initialization(99);
  8631  095B  3063               	movlw	99
  8632  095C  158A  21F5         	fcall	_setLED_Initialization
  8633  095E  0008               	return
  8634  095F                     __end_of_LED_Initialization:	
  8635                           
  8636                           	psect	text55
  8637  09F5                     __ptext55:	
  8638 ;; *************** function _setLED_Initialization *****************
  8639 ;; Defined at:
  8640 ;;		line 74 in file "../src/LED_B1.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;  led             1    wreg     unsigned char 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  led             1    2[BANK0 ] unsigned char 
  8645 ;; Return value:  Size  Location     Type
  8646 ;;		None               void
  8647 ;; Registers used:
  8648 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8649 ;; Tracked objects:
  8650 ;;		On entry : 0/0
  8651 ;;		On exit  : 0/0
  8652 ;;		Unchanged: 0/0
  8653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8654 ;;      Params:         0       0       0       0
  8655 ;;      Locals:         0       1       0       0
  8656 ;;      Temps:          0       0       0       0
  8657 ;;      Totals:         0       1       0       0
  8658 ;;Total ram usage:        1 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    4
  8661 ;; This function calls:
  8662 ;;		_LedPointSelect
  8663 ;;		_setLED
  8664 ;; This function is called by:
  8665 ;;		_LED_Initialization
  8666 ;; This function uses a non-reentrant model
  8667 ;;
  8668                           
  8669                           
  8670                           ;psect for function _setLED_Initialization
  8671  09F5                     _setLED_Initialization:	
  8672                           
  8673                           ;incstack = 0
  8674                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8675                           ;setLED_Initialization@led stored from wreg
  8676  09F5  1283               	bcf	3,5	;RP0=0, select bank0
  8677  09F6  1303               	bcf	3,6	;RP1=0, select bank0
  8678  09F7  00D9               	movwf	setLED_Initialization@led
  8679                           
  8680                           ;LED_B1.c: 75: LedPointSelect(led);
  8681  09F8  0859               	movf	setLED_Initialization@led,w
  8682  09F9  158A  22F3  158A   	fcall	_LedPointSelect
  8683                           
  8684                           ;LED_B1.c: 76: LED->Enable = 1;
  8685  09FC  0876               	movf	_LED,w
  8686  09FD  0084               	movwf	4
  8687  09FE  1383               	bcf	3,7	;select IRP bank0
  8688  09FF  1400               	bsf	0,0
  8689                           
  8690                           ;LED_B1.c: 77: setLED(led, 0);
  8691  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  8692  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  8693  0A02  01D7               	clrf	setLED@command
  8694  0A03  0859               	movf	setLED_Initialization@led,w
  8695  0A04  158A  265B         	fcall	_setLED
  8696  0A06  0008               	return
  8697  0A07                     __end_of_setLED_Initialization:	
  8698                           
  8699                           	psect	text56
  8700  04E3                     __ptext56:	
  8701 ;; *************** function _Exception_Main *****************
  8702 ;; Defined at:
  8703 ;;		line 499 in file "../src/Main_B1.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;		None
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;  i               2   18[BANK0 ] int 
  8708 ;;  i               2   16[BANK0 ] int 
  8709 ;;  status          1   15[BANK0 ] unsigned char 
  8710 ;;  error           1   14[BANK0 ] unsigned char 
  8711 ;;  count           1   13[BANK0 ] unsigned char 
  8712 ;;  lights          1   12[BANK0 ] unsigned char 
  8713 ;; Return value:  Size  Location     Type
  8714 ;;		None               void
  8715 ;; Registers used:
  8716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8722 ;;      Params:         0       0       0       0
  8723 ;;      Locals:         0       8       0       0
  8724 ;;      Temps:          0       1       0       0
  8725 ;;      Totals:         0       9       0       0
  8726 ;;Total ram usage:        9 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    5
  8729 ;; This function calls:
  8730 ;;		_getAll_Lights_Line
  8731 ;;		_getLights_Status
  8732 ;;		_getMain_All_Error_Status
  8733 ;;		_getMain_All_LightsStatus
  8734 ;;		_setBuz
  8735 ;;		_setLED
  8736 ;;		_setLights_SwOff
  8737 ;;		_setLights_SwOn
  8738 ;; This function is called by:
  8739 ;;		_main
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           
  8744                           ;psect for function _Exception_Main
  8745  04E3                     _Exception_Main:	
  8746                           
  8747                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8748                           
  8749                           ;incstack = 0
  8750                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8751  04E3  3000               	movlw	0
  8752  04E4  158A  24D0  118A   	fcall	_getMain_All_Error_Status
  8753  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  8754  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  8755  04E9  00E2               	movwf	??_Exception_Main
  8756  04EA  0862               	movf	??_Exception_Main,w
  8757  04EB  00E5               	movwf	Exception_Main@error
  8758                           
  8759                           ;Main_B1.c: 501: char lights = 0, count = 2;
  8760  04EC  01E3               	clrf	Exception_Main@lights
  8761  04ED  3002               	movlw	2
  8762  04EE  00E2               	movwf	??_Exception_Main
  8763  04EF  0862               	movf	??_Exception_Main,w
  8764  04F0  00E4               	movwf	Exception_Main@count
  8765                           
  8766                           ;Main_B1.c: 502: char status = 0;
  8767  04F1  01E6               	clrf	Exception_Main@status
  8768                           
  8769                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8770  04F2  1DB3               	btfss	_myMain+2,3
  8771  04F3  2D00               	goto	l6121
  8772                           
  8773                           ;Main_B1.c: 505: if (error == 0) {
  8774  04F4  08E5               	movf	Exception_Main@error,f
  8775  04F5  1D03               	skipz
  8776  04F6  0008               	return
  8777                           
  8778                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8779  04F7  11B3               	bcf	_myMain+2,3
  8780                           
  8781                           ;Main_B1.c: 509: setLED(99, 10);
  8782  04F8  300A               	movlw	10
  8783  04F9  00E2               	movwf	??_Exception_Main
  8784  04FA  0862               	movf	??_Exception_Main,w
  8785  04FB  00D7               	movwf	setLED@command
  8786  04FC  3063               	movlw	99
  8787  04FD  158A  265B         	fcall	_setLED
  8788                           
  8789                           ;Main_B1.c: 522: }
  8790                           ;Main_B1.c: 523: } else {
  8791  04FF  0008               	return
  8792  0500                     l6121:	
  8793                           
  8794                           ;Main_B1.c: 524: if (error != 0) {
  8795  0500  1283               	bcf	3,5	;RP0=0, select bank0
  8796  0501  1303               	bcf	3,6	;RP1=0, select bank0
  8797  0502  0865               	movf	Exception_Main@error,w
  8798  0503  1903               	btfsc	3,2
  8799  0504  0008               	return
  8800                           
  8801                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8802  0505  15B3               	bsf	_myMain+2,3
  8803                           
  8804                           ;Main_B1.c: 527: setLED(99, 11);
  8805  0506  300B               	movlw	11
  8806  0507  00E2               	movwf	??_Exception_Main
  8807  0508  0862               	movf	??_Exception_Main,w
  8808  0509  00D7               	movwf	setLED@command
  8809  050A  3063               	movlw	99
  8810  050B  158A  265B  118A   	fcall	_setLED
  8811                           
  8812                           ;Main_B1.c: 591: switch (error) {
  8813  050E  2DAC               	goto	l6161
  8814  050F                     l6127:	
  8815                           ;Main_B1.c: 592: case 1:
  8816                           
  8817                           
  8818                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8819  050F  1283               	bcf	3,5	;RP0=0, select bank0
  8820  0510  1303               	bcf	3,6	;RP1=0, select bank0
  8821  0511  01E7               	clrf	Exception_Main@i
  8822  0512  01E8               	clrf	Exception_Main@i+1
  8823  0513                     l6135:	
  8824  0513  0868               	movf	Exception_Main@i+1,w
  8825  0514  3A80               	xorlw	128
  8826  0515  00E2               	movwf	??_Exception_Main
  8827  0516  3080               	movlw	128
  8828  0517  0262               	subwf	??_Exception_Main,w
  8829  0518  1D03               	skipz
  8830  0519  2D1C               	goto	u7935
  8831  051A  0864               	movf	Exception_Main@count,w
  8832  051B  0267               	subwf	Exception_Main@i,w
  8833  051C                     u7935:	
  8834  051C  1803               	btfsc	3,0
  8835  051D  2D3F               	goto	u7930
  8836                           
  8837                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8838  051E  1283               	bcf	3,5	;RP0=0, select bank0
  8839  051F  1303               	bcf	3,6	;RP1=0, select bank0
  8840  0520  0867               	movf	Exception_Main@i,w
  8841  0521  3E01               	addlw	1
  8842  0522  158A  21D3  118A   	fcall	_getLights_Status
  8843  0525  3A01               	xorlw	1
  8844  0526  1D03               	skipz
  8845  0527  2D36               	goto	l6133
  8846                           
  8847                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8848  0528  1283               	bcf	3,5	;RP0=0, select bank0
  8849  0529  1303               	bcf	3,6	;RP1=0, select bank0
  8850  052A  0867               	movf	Exception_Main@i,w
  8851  052B  3E01               	addlw	1
  8852  052C  158A  250E  118A   	fcall	_setLights_SwOn
  8853                           
  8854                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8855  052F  1283               	bcf	3,5	;RP0=0, select bank0
  8856  0530  1303               	bcf	3,6	;RP1=0, select bank0
  8857  0531  0867               	movf	Exception_Main@i,w
  8858  0532  3E01               	addlw	1
  8859  0533  158A  242F  118A   	fcall	_setLights_SwOff
  8860  0536                     l6133:	
  8861  0536  3001               	movlw	1
  8862  0537  1283               	bcf	3,5	;RP0=0, select bank0
  8863  0538  1303               	bcf	3,6	;RP1=0, select bank0
  8864  0539  07E7               	addwf	Exception_Main@i,f
  8865  053A  1803               	skipnc
  8866  053B  0AE8               	incf	Exception_Main@i+1,f
  8867  053C  3000               	movlw	0
  8868  053D  07E8               	addwf	Exception_Main@i+1,f
  8869  053E  2D13               	goto	l6135
  8870  053F                     u7930:	
  8871  053F  1283               	bcf	3,5	;RP0=0, select bank0
  8872  0540  1303               	bcf	3,6	;RP1=0, select bank0
  8873  0541  0008               	return
  8874  0542                     l6137:	
  8875                           ;Main_B1.c: 601: case 2:
  8876                           
  8877                           ;Main_B1.c: 598: }
  8878                           ;Main_B1.c: 599: }
  8879                           ;Main_B1.c: 600: break;
  8880                           
  8881                           
  8882                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8883  0542  158A  21C3  118A   	fcall	_getMain_All_LightsStatus
  8884  0545  3A01               	xorlw	1
  8885  0546  1D03               	skipz
  8886  0547  2D52               	goto	l6141
  8887                           
  8888                           ;Main_B1.c: 603: setBuz(10, 300);
  8889  0548  302C               	movlw	44
  8890  0549  1283               	bcf	3,5	;RP0=0, select bank0
  8891  054A  1303               	bcf	3,6	;RP1=0, select bank0
  8892  054B  00DF               	movwf	setBuz@time
  8893  054C  3001               	movlw	1
  8894  054D  00E0               	movwf	setBuz@time+1
  8895  054E  300A               	movlw	10
  8896  054F  158A  2614  118A   	fcall	_setBuz
  8897  0552                     l6141:	
  8898                           
  8899                           ;Main_B1.c: 604: }
  8900                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8901  0552  1283               	bcf	3,5	;RP0=0, select bank0
  8902  0553  1303               	bcf	3,6	;RP1=0, select bank0
  8903  0554  01E9               	clrf	Exception_Main@i_2440
  8904  0555  01EA               	clrf	Exception_Main@i_2440+1
  8905  0556                     l6149:	
  8906  0556  086A               	movf	Exception_Main@i_2440+1,w
  8907  0557  3A80               	xorlw	128
  8908  0558  00E2               	movwf	??_Exception_Main
  8909  0559  3080               	movlw	128
  8910  055A  0262               	subwf	??_Exception_Main,w
  8911  055B  1D03               	skipz
  8912  055C  2D5F               	goto	u7965
  8913  055D  0864               	movf	Exception_Main@count,w
  8914  055E  0269               	subwf	Exception_Main@i_2440,w
  8915  055F                     u7965:	
  8916  055F  1803               	btfsc	3,0
  8917  0560  2D82               	goto	u7960
  8918                           
  8919                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8920  0561  1283               	bcf	3,5	;RP0=0, select bank0
  8921  0562  1303               	bcf	3,6	;RP1=0, select bank0
  8922  0563  0869               	movf	Exception_Main@i_2440,w
  8923  0564  3E01               	addlw	1
  8924  0565  158A  21D3  118A   	fcall	_getLights_Status
  8925  0568  3A01               	xorlw	1
  8926  0569  1D03               	skipz
  8927  056A  2D79               	goto	l6147
  8928                           
  8929                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8930  056B  1283               	bcf	3,5	;RP0=0, select bank0
  8931  056C  1303               	bcf	3,6	;RP1=0, select bank0
  8932  056D  0869               	movf	Exception_Main@i_2440,w
  8933  056E  3E01               	addlw	1
  8934  056F  158A  250E  118A   	fcall	_setLights_SwOn
  8935                           
  8936                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8937  0572  1283               	bcf	3,5	;RP0=0, select bank0
  8938  0573  1303               	bcf	3,6	;RP1=0, select bank0
  8939  0574  0869               	movf	Exception_Main@i_2440,w
  8940  0575  3E01               	addlw	1
  8941  0576  158A  242F  118A   	fcall	_setLights_SwOff
  8942  0579                     l6147:	
  8943  0579  3001               	movlw	1
  8944  057A  1283               	bcf	3,5	;RP0=0, select bank0
  8945  057B  1303               	bcf	3,6	;RP1=0, select bank0
  8946  057C  07E9               	addwf	Exception_Main@i_2440,f
  8947  057D  1803               	skipnc
  8948  057E  0AEA               	incf	Exception_Main@i_2440+1,f
  8949  057F  3000               	movlw	0
  8950  0580  07EA               	addwf	Exception_Main@i_2440+1,f
  8951  0581  2D56               	goto	l6149
  8952  0582                     u7960:	
  8953  0582  1283               	bcf	3,5	;RP0=0, select bank0
  8954  0583  1303               	bcf	3,6	;RP1=0, select bank0
  8955  0584  0008               	return
  8956  0585                     l6151:	
  8957                           ;Main_B1.c: 613: case 3:
  8958                           
  8959                           ;Main_B1.c: 610: }
  8960                           ;Main_B1.c: 611: }
  8961                           ;Main_B1.c: 612: break;
  8962                           
  8963                           
  8964                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8965  0585  158A  21B3  118A   	fcall	_getAll_Lights_Line
  8966  0588  1283               	bcf	3,5	;RP0=0, select bank0
  8967  0589  1303               	bcf	3,6	;RP1=0, select bank0
  8968  058A  00E2               	movwf	??_Exception_Main
  8969  058B  0862               	movf	??_Exception_Main,w
  8970  058C  00E6               	movwf	Exception_Main@status
  8971                           
  8972                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8973  058D  0866               	movf	Exception_Main@status,w
  8974  058E  158A  21D3  118A   	fcall	_getLights_Status
  8975  0591  3A01               	xorlw	1
  8976  0592  1D03               	skipz
  8977  0593  2DA0               	goto	l6157
  8978                           
  8979                           ;Main_B1.c: 617: setLights_SwOn(status);
  8980  0594  1283               	bcf	3,5	;RP0=0, select bank0
  8981  0595  1303               	bcf	3,6	;RP1=0, select bank0
  8982  0596  0866               	movf	Exception_Main@status,w
  8983  0597  158A  250E  118A   	fcall	_setLights_SwOn
  8984                           
  8985                           ;Main_B1.c: 618: setLights_SwOff(status);
  8986  059A  1283               	bcf	3,5	;RP0=0, select bank0
  8987  059B  1303               	bcf	3,6	;RP1=0, select bank0
  8988  059C  0866               	movf	Exception_Main@status,w
  8989  059D  158A  242F  118A   	fcall	_setLights_SwOff
  8990  05A0                     l6157:	
  8991                           
  8992                           ;Main_B1.c: 620: }
  8993                           ;Main_B1.c: 621: setBuz(5, 300);
  8994  05A0  302C               	movlw	44
  8995  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  8996  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  8997  05A3  00DF               	movwf	setBuz@time
  8998  05A4  3001               	movlw	1
  8999  05A5  00E0               	movwf	setBuz@time+1
  9000  05A6  3005               	movlw	5
  9001  05A7  158A  2614         	fcall	_setBuz
  9002                           
  9003                           ;Main_B1.c: 622: break;
  9004  05A9  1283               	bcf	3,5	;RP0=0, select bank0
  9005  05AA  1303               	bcf	3,6	;RP1=0, select bank0
  9006  05AB  0008               	return
  9007  05AC                     l6161:	
  9008                           ;Main_B1.c: 623: }
  9009                           
  9010  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  9011  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  9012  05AE  0865               	movf	Exception_Main@error,w
  9013                           
  9014                           ; Switch size 1, requested type "space"
  9015                           ; Number of cases is 3, Range of values is 1 to 3
  9016                           ; switch strategies available:
  9017                           ; Name         Instructions Cycles
  9018                           ; simple_byte           10     6 (average)
  9019                           ; direct_byte           16    10 (fixed)
  9020                           ; jumptable            263     9 (fixed)
  9021                           ;	Chosen strategy is simple_byte
  9022  05AF  3A01               	xorlw	1	; case 1
  9023  05B0  1903               	skipnz
  9024  05B1  2D0F               	goto	l6127
  9025  05B2  3A03               	xorlw	3	; case 2
  9026  05B3  1903               	skipnz
  9027  05B4  2D42               	goto	l6137
  9028  05B5  3A01               	xorlw	1	; case 3
  9029  05B6  1903               	skipnz
  9030  05B7  2D85               	goto	l6151
  9031  05B8  2DBA               	goto	l731
  9032  05B9  0008               	return
  9033  05BA                     l731:	
  9034  05BA  0008               	return
  9035  05BB                     __end_of_Exception_Main:	
  9036                           
  9037                           	psect	text57
  9038  0D0E                     __ptext57:	
  9039 ;; *************** function _setLights_SwOn *****************
  9040 ;; Defined at:
  9041 ;;		line 410 in file "../src/TriacRelay_B1.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  sw              1    wreg     unsigned char 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  sw              1    3[BANK0 ] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;		None               void
  9048 ;; Registers used:
  9049 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9055 ;;      Params:         0       0       0       0
  9056 ;;      Locals:         0       1       0       0
  9057 ;;      Temps:          0       0       0       0
  9058 ;;      Totals:         0       1       0       0
  9059 ;;Total ram usage:        1 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    4
  9062 ;; This function calls:
  9063 ;;		_LightsPointSelect
  9064 ;;		_getLights_Status
  9065 ;;		_setLights_Trigger
  9066 ;; This function is called by:
  9067 ;;		_Exception_Main
  9068 ;;		_PIR_Main
  9069 ;;		_setSw_Main
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           
  9074                           ;psect for function _setLights_SwOn
  9075  0D0E                     _setLights_SwOn:	
  9076                           
  9077                           ;incstack = 0
  9078                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9079                           ;setLights_SwOn@sw stored from wreg
  9080  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
  9081  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
  9082  0D10  00DA               	movwf	setLights_SwOn@sw
  9083                           
  9084                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  9085  0D11  085A               	movf	setLights_SwOn@sw,w
  9086  0D12  158A  2207  158A   	fcall	_LightsPointSelect
  9087                           
  9088                           ;TriacRelay_B1.c: 422: Lights->SwFlag = 1;
  9089  0D15  0A78               	incf	_Lights,w
  9090  0D16  0084               	movwf	4
  9091  0D17  1383               	bcf	3,7	;select IRP bank0
  9092  0D18  1500               	bsf	0,2
  9093                           
  9094                           ;TriacRelay_B1.c: 423: if (sw == 1) {
  9095  0D19  1283               	bcf	3,5	;RP0=0, select bank0
  9096  0D1A  1303               	bcf	3,6	;RP1=0, select bank0
  9097  0D1B  085A               	movf	setLights_SwOn@sw,w
  9098  0D1C  3A01               	xorlw	1
  9099  0D1D  1D03               	skipz
  9100  0D1E  2D37               	goto	l5237
  9101                           
  9102                           ;TriacRelay_B1.c: 424: if (getLights_Status(sw) == 0) {
  9103  0D1F  085A               	movf	setLights_SwOn@sw,w
  9104  0D20  158A  21D3  158A   	fcall	_getLights_Status
  9105  0D23  3800               	iorlw	0
  9106  0D24  1D03               	skipz
  9107  0D25  2D32               	goto	l5235
  9108                           
  9109                           ;TriacRelay_B1.c: 425: Lights->SwStatus = 1;
  9110  0D26  0A78               	incf	_Lights,w
  9111  0D27  0084               	movwf	4
  9112  0D28  1383               	bcf	3,7	;select IRP bank0
  9113  0D29  1580               	bsf	0,3
  9114                           
  9115                           ;TriacRelay_B1.c: 426: setLights_Trigger(sw, 1);
  9116  0D2A  1283               	bcf	3,5	;RP0=0, select bank0
  9117  0D2B  1303               	bcf	3,6	;RP1=0, select bank0
  9118  0D2C  01D7               	clrf	setLights_Trigger@command
  9119  0D2D  0AD7               	incf	setLights_Trigger@command,f
  9120  0D2E  085A               	movf	setLights_SwOn@sw,w
  9121  0D2F  158A  230D         	fcall	_setLights_Trigger
  9122                           
  9123                           ;TriacRelay_B1.c: 427: } else {
  9124  0D31  0008               	return
  9125  0D32                     l5235:	
  9126                           
  9127                           ;TriacRelay_B1.c: 428: Lights->SwStatus = 0;
  9128  0D32  0A78               	incf	_Lights,w
  9129  0D33  0084               	movwf	4
  9130  0D34  1383               	bcf	3,7	;select IRP bank0
  9131  0D35  1180               	bcf	0,3
  9132                           
  9133                           ;TriacRelay_B1.c: 429: }
  9134                           ;TriacRelay_B1.c: 430: } else if (sw == 2) {
  9135  0D36  0008               	return
  9136  0D37                     l5237:	
  9137  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  9138  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  9139  0D39  085A               	movf	setLights_SwOn@sw,w
  9140  0D3A  3A02               	xorlw	2
  9141  0D3B  1D03               	skipz
  9142  0D3C  0008               	return
  9143                           
  9144                           ;TriacRelay_B1.c: 431: if (getLights_Status(sw) == 0) {
  9145  0D3D  085A               	movf	setLights_SwOn@sw,w
  9146  0D3E  158A  21D3  158A   	fcall	_getLights_Status
  9147  0D41  3800               	iorlw	0
  9148  0D42  1D03               	skipz
  9149  0D43  0008               	return
  9150                           
  9151                           ;TriacRelay_B1.c: 432: setLights_Trigger(sw, 1);
  9152  0D44  1283               	bcf	3,5	;RP0=0, select bank0
  9153  0D45  1303               	bcf	3,6	;RP1=0, select bank0
  9154  0D46  01D7               	clrf	setLights_Trigger@command
  9155  0D47  0AD7               	incf	setLights_Trigger@command,f
  9156  0D48  085A               	movf	setLights_SwOn@sw,w
  9157  0D49  158A  230D         	fcall	_setLights_Trigger
  9158  0D4B  0008               	return
  9159  0D4C                     __end_of_setLights_SwOn:	
  9160                           
  9161                           	psect	text58
  9162  0C2F                     __ptext58:	
  9163 ;; *************** function _setLights_SwOff *****************
  9164 ;; Defined at:
  9165 ;;		line 438 in file "../src/TriacRelay_B1.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;  sw              1    wreg     unsigned char 
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;  sw              1    3[BANK0 ] unsigned char 
  9170 ;; Return value:  Size  Location     Type
  9171 ;;		None               void
  9172 ;; Registers used:
  9173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9174 ;; Tracked objects:
  9175 ;;		On entry : 0/0
  9176 ;;		On exit  : 0/0
  9177 ;;		Unchanged: 0/0
  9178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9179 ;;      Params:         0       0       0       0
  9180 ;;      Locals:         0       1       0       0
  9181 ;;      Temps:          0       0       0       0
  9182 ;;      Totals:         0       1       0       0
  9183 ;;Total ram usage:        1 bytes
  9184 ;; Hardware stack levels used:    1
  9185 ;; Hardware stack levels required when called:    4
  9186 ;; This function calls:
  9187 ;;		_LightsPointSelect
  9188 ;;		_getLights_Status
  9189 ;;		_setLights_Trigger
  9190 ;; This function is called by:
  9191 ;;		_Exception_Main
  9192 ;;		_PIR_Main
  9193 ;;		_setSw_Main
  9194 ;; This function uses a non-reentrant model
  9195 ;;
  9196                           
  9197                           
  9198                           ;psect for function _setLights_SwOff
  9199  0C2F                     _setLights_SwOff:	
  9200                           
  9201                           ;incstack = 0
  9202                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9203                           ;setLights_SwOff@sw stored from wreg
  9204  0C2F  1283               	bcf	3,5	;RP0=0, select bank0
  9205  0C30  1303               	bcf	3,6	;RP1=0, select bank0
  9206  0C31  00DA               	movwf	setLights_SwOff@sw
  9207                           
  9208                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  9209  0C32  085A               	movf	setLights_SwOff@sw,w
  9210  0C33  158A  2207  158A   	fcall	_LightsPointSelect
  9211                           
  9212                           ;TriacRelay_B1.c: 449: if (sw == 1) {
  9213  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  9214  0C37  1303               	bcf	3,6	;RP1=0, select bank0
  9215  0C38  085A               	movf	setLights_SwOff@sw,w
  9216  0C39  3A01               	xorlw	1
  9217  0C3A  1D03               	skipz
  9218  0C3B  2C4D               	goto	l5253
  9219                           
  9220                           ;TriacRelay_B1.c: 450: if (Lights->SwFlag == 1) {
  9221  0C3C  0A78               	incf	_Lights,w
  9222  0C3D  0084               	movwf	4
  9223  0C3E  1383               	bcf	3,7	;select IRP bank0
  9224  0C3F  1D00               	btfss	0,2
  9225  0C40  0008               	return
  9226                           
  9227                           ;TriacRelay_B1.c: 451: Lights->SwFlag = 0;
  9228  0C41  0A78               	incf	_Lights,w
  9229  0C42  0084               	movwf	4
  9230  0C43  1100               	bcf	0,2
  9231                           
  9232                           ;TriacRelay_B1.c: 452: if (Lights->SwStatus == 0) {
  9233  0C44  0A78               	incf	_Lights,w
  9234  0C45  0084               	movwf	4
  9235  0C46  1980               	btfsc	0,3
  9236  0C47  0008               	return
  9237                           
  9238                           ;TriacRelay_B1.c: 453: setLights_Trigger(sw, 0);
  9239  0C48  01D7               	clrf	setLights_Trigger@command
  9240  0C49  085A               	movf	setLights_SwOff@sw,w
  9241  0C4A  158A  230D         	fcall	_setLights_Trigger
  9242                           
  9243                           ;TriacRelay_B1.c: 454: }
  9244                           ;TriacRelay_B1.c: 455: }
  9245                           ;TriacRelay_B1.c: 456: } else if (sw == 2) {
  9246  0C4C  0008               	return
  9247  0C4D                     l5253:	
  9248  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
  9249  0C4E  1303               	bcf	3,6	;RP1=0, select bank0
  9250  0C4F  085A               	movf	setLights_SwOff@sw,w
  9251  0C50  3A02               	xorlw	2
  9252  0C51  1D03               	skipz
  9253  0C52  0008               	return
  9254                           
  9255                           ;TriacRelay_B1.c: 457: if (getLights_Status(sw) == 1) {
  9256  0C53  085A               	movf	setLights_SwOff@sw,w
  9257  0C54  158A  21D3  158A   	fcall	_getLights_Status
  9258  0C57  3A01               	xorlw	1
  9259  0C58  1D03               	skipz
  9260  0C59  0008               	return
  9261                           
  9262                           ;TriacRelay_B1.c: 458: setLights_Trigger(sw, 0);
  9263  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  9264  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  9265  0C5C  01D7               	clrf	setLights_Trigger@command
  9266  0C5D  085A               	movf	setLights_SwOff@sw,w
  9267  0C5E  158A  230D         	fcall	_setLights_Trigger
  9268  0C60  0008               	return
  9269  0C61                     __end_of_setLights_SwOff:	
  9270                           
  9271                           	psect	text59
  9272  0B0D                     __ptext59:	
  9273 ;; *************** function _setLights_Trigger *****************
  9274 ;; Defined at:
  9275 ;;		line 278 in file "../src/TriacRelay_B1.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;  lights          1    wreg     unsigned char 
  9278 ;;  command         1    0[BANK0 ] unsigned char 
  9279 ;; Auto vars:     Size  Location     Type
  9280 ;;  lights          1    2[BANK0 ] unsigned char 
  9281 ;; Return value:  Size  Location     Type
  9282 ;;		None               void
  9283 ;; Registers used:
  9284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9285 ;; Tracked objects:
  9286 ;;		On entry : 0/0
  9287 ;;		On exit  : 0/0
  9288 ;;		Unchanged: 0/0
  9289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9290 ;;      Params:         0       1       0       0
  9291 ;;      Locals:         0       1       0       0
  9292 ;;      Temps:          0       1       0       0
  9293 ;;      Totals:         0       3       0       0
  9294 ;;Total ram usage:        3 bytes
  9295 ;; Hardware stack levels used:    1
  9296 ;; Hardware stack levels required when called:    3
  9297 ;; This function calls:
  9298 ;;		_LightsPointSelect
  9299 ;; This function is called by:
  9300 ;;		_setLights_SwOn
  9301 ;;		_setLights_SwOff
  9302 ;;		_setLights_ErrorClose
  9303 ;; This function uses a non-reentrant model
  9304 ;;
  9305                           
  9306                           
  9307                           ;psect for function _setLights_Trigger
  9308  0B0D                     _setLights_Trigger:	
  9309                           
  9310                           ;incstack = 0
  9311                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9312                           ;setLights_Trigger@lights stored from wreg
  9313  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  9314  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  9315  0B0F  00D9               	movwf	setLights_Trigger@lights
  9316                           
  9317                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  9318  0B10  0859               	movf	setLights_Trigger@lights,w
  9319  0B11  158A  2207         	fcall	_LightsPointSelect
  9320                           
  9321                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  9322  0B13  0878               	movf	_Lights,w
  9323  0B14  0084               	movwf	4
  9324  0B15  1383               	bcf	3,7	;select IRP bank0
  9325  0B16  1580               	bsf	0,3
  9326                           
  9327                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  9328  0B17  1283               	bcf	3,5	;RP0=0, select bank0
  9329  0B18  1303               	bcf	3,6	;RP1=0, select bank0
  9330  0B19  0857               	movf	setLights_Trigger@command,w
  9331  0B1A  3A01               	xorlw	1
  9332  0B1B  3000               	movlw	0
  9333  0B1C  1903               	skipnz
  9334  0B1D  3001               	movlw	1
  9335  0B1E  00D8               	movwf	??_setLights_Trigger
  9336  0B1F  0878               	movf	_Lights,w
  9337  0B20  0084               	movwf	4
  9338  0B21  0ED8               	swapf	??_setLights_Trigger,f
  9339  0B22  0800               	movf	0,w
  9340  0B23  0658               	xorwf	??_setLights_Trigger,w
  9341  0B24  39EF               	andlw	-17
  9342  0B25  0658               	xorwf	??_setLights_Trigger,w
  9343  0B26  0080               	movwf	0
  9344  0B27  0008               	return
  9345  0B28                     __end_of_setLights_Trigger:	
  9346                           
  9347                           	psect	text60
  9348  09D3                     __ptext60:	
  9349 ;; *************** function _getLights_Status *****************
  9350 ;; Defined at:
  9351 ;;		line 271 in file "../src/TriacRelay_B1.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;  lights          1    wreg     unsigned char 
  9354 ;; Auto vars:     Size  Location     Type
  9355 ;;  lights          1    0[BANK0 ] unsigned char 
  9356 ;;  status          1    1[BANK0 ] unsigned char 
  9357 ;; Return value:  Size  Location     Type
  9358 ;;                  1    wreg      unsigned char 
  9359 ;; Registers used:
  9360 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9361 ;; Tracked objects:
  9362 ;;		On entry : 0/0
  9363 ;;		On exit  : 0/0
  9364 ;;		Unchanged: 0/0
  9365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9366 ;;      Params:         0       0       0       0
  9367 ;;      Locals:         0       2       0       0
  9368 ;;      Temps:          0       0       0       0
  9369 ;;      Totals:         0       2       0       0
  9370 ;;Total ram usage:        2 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; Hardware stack levels required when called:    3
  9373 ;; This function calls:
  9374 ;;		_LightsPointSelect
  9375 ;; This function is called by:
  9376 ;;		_Exception_Main
  9377 ;;		_PIR_Main
  9378 ;;		_setLights_SwOn
  9379 ;;		_setLights_SwOff
  9380 ;;		_setLights_ErrorClose
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           
  9385                           ;psect for function _getLights_Status
  9386  09D3                     _getLights_Status:	
  9387                           
  9388                           ;incstack = 0
  9389                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9390                           ;getLights_Status@lights stored from wreg
  9391  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  9392  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  9393  09D5  00D7               	movwf	getLights_Status@lights
  9394                           
  9395                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  9396  09D6  0857               	movf	getLights_Status@lights,w
  9397  09D7  158A  2207         	fcall	_LightsPointSelect
  9398                           
  9399                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  9400  09D9  0878               	movf	_Lights,w
  9401  09DA  0084               	movwf	4
  9402  09DB  3000               	movlw	0
  9403  09DC  1383               	bcf	3,7	;select IRP bank0
  9404  09DD  1900               	btfsc	0,2
  9405  09DE  3001               	movlw	1
  9406  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  9407  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  9408  09E1  00D8               	movwf	getLights_Status@status
  9409                           
  9410                           ;TriacRelay_B1.c: 274: return status;
  9411  09E2  0858               	movf	getLights_Status@status,w
  9412  09E3  0008               	return
  9413  09E4                     __end_of_getLights_Status:	
  9414                           
  9415                           	psect	text61
  9416  0A07                     __ptext61:	
  9417 ;; *************** function _LightsPointSelect *****************
  9418 ;; Defined at:
  9419 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;  lights          1    wreg     unsigned char 
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;  lights          1    5[COMMON] unsigned char 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;		None               void
  9426 ;; Registers used:
  9427 ;;		wreg
  9428 ;; Tracked objects:
  9429 ;;		On entry : 0/0
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9433 ;;      Params:         0       0       0       0
  9434 ;;      Locals:         1       0       0       0
  9435 ;;      Temps:          1       0       0       0
  9436 ;;      Totals:         2       0       0       0
  9437 ;;Total ram usage:        2 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    2
  9440 ;; This function calls:
  9441 ;;		Nothing
  9442 ;; This function is called by:
  9443 ;;		_setLights_Initialization
  9444 ;;		_setLights_Main
  9445 ;;		_Lights_Control
  9446 ;;		_getLights_Status
  9447 ;;		_setLights_Trigger
  9448 ;;		_setLights_SwOn
  9449 ;;		_setLights_SwOff
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           
  9454                           ;psect for function _LightsPointSelect
  9455  0A07                     _LightsPointSelect:	
  9456                           
  9457                           ;incstack = 0
  9458                           ; Regs used in _LightsPointSelect: [wreg]
  9459                           ;LightsPointSelect@lights stored from wreg
  9460  0A07  00F5               	movwf	LightsPointSelect@lights
  9461                           
  9462                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9463  0A08  0875               	movf	LightsPointSelect@lights,w
  9464  0A09  3A01               	xorlw	1
  9465  0A0A  1D03               	skipz
  9466  0A0B  2A11               	goto	l5065
  9467                           
  9468                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9469  0A0C  3049               	movlw	_Lights1& (0+255)
  9470  0A0D  00F4               	movwf	??_LightsPointSelect
  9471  0A0E  0874               	movf	??_LightsPointSelect,w
  9472  0A0F  00F8               	movwf	_Lights
  9473                           
  9474                           ;TriacRelay_B1.c: 15: }
  9475  0A10  0008               	return
  9476  0A11                     l5065:	
  9477                           
  9478                           ;TriacRelay_B1.c: 19: else if (lights == 2) {
  9479  0A11  0875               	movf	LightsPointSelect@lights,w
  9480  0A12  3A02               	xorlw	2
  9481  0A13  1D03               	skipz
  9482  0A14  0008               	return
  9483                           
  9484                           ;TriacRelay_B1.c: 20: Lights = &Lights2;
  9485  0A15  304E               	movlw	_Lights2& (0+255)
  9486  0A16  00F4               	movwf	??_LightsPointSelect
  9487  0A17  0874               	movf	??_LightsPointSelect,w
  9488  0A18  00F8               	movwf	_Lights
  9489  0A19  0008               	return
  9490  0A1A                     __end_of_LightsPointSelect:	
  9491                           
  9492                           	psect	text62
  9493  0E5B                     __ptext62:	
  9494 ;; *************** function _setLED *****************
  9495 ;; Defined at:
  9496 ;;		line 81 in file "../src/LED_B1.c"
  9497 ;; Parameters:    Size  Location     Type
  9498 ;;  led             1    wreg     unsigned char 
  9499 ;;  command         1    0[BANK0 ] unsigned char 
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;  led             1    1[BANK0 ] unsigned char 
  9502 ;; Return value:  Size  Location     Type
  9503 ;;		None               void
  9504 ;; Registers used:
  9505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9511 ;;      Params:         0       1       0       0
  9512 ;;      Locals:         0       1       0       0
  9513 ;;      Temps:          0       0       0       0
  9514 ;;      Totals:         0       2       0       0
  9515 ;;Total ram usage:        2 bytes
  9516 ;; Hardware stack levels used:    1
  9517 ;; Hardware stack levels required when called:    3
  9518 ;; This function calls:
  9519 ;;		_LedPointSelect
  9520 ;; This function is called by:
  9521 ;;		_setLED_Initialization
  9522 ;;		_Exception_Main
  9523 ;;		_setSw_Main
  9524 ;;		_setLights
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           
  9529                           ;psect for function _setLED
  9530  0E5B                     _setLED:	
  9531                           
  9532                           ;incstack = 0
  9533                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9534                           ;setLED@led stored from wreg
  9535  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
  9536  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
  9537  0E5D  00D8               	movwf	setLED@led
  9538                           
  9539                           ;LED_B1.c: 82: LedPointSelect(led);
  9540  0E5E  0858               	movf	setLED@led,w
  9541  0E5F  158A  22F3  158A   	fcall	_LedPointSelect
  9542                           
  9543                           ;LED_B1.c: 83: if (command == 0) {
  9544  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  9545  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  9546  0E64  08D7               	movf	setLED@command,f
  9547  0E65  1D03               	skipz
  9548  0E66  2E74               	goto	l5085
  9549                           
  9550                           ;LED_B1.c: 85: if (led == 1) {
  9551  0E67  0858               	movf	setLED@led,w
  9552  0E68  3A01               	xorlw	1
  9553  0E69  1D03               	skipz
  9554  0E6A  2E6C               	goto	l5077
  9555                           
  9556                           ;LED_B1.c: 89: RC7 = 1;
  9557  0E6B  1787               	bsf	7,7	;volatile
  9558  0E6C                     l5077:	
  9559                           
  9560                           ;LED_B1.c: 91: }
  9561                           ;LED_B1.c: 94: if (led == 2) {
  9562  0E6C  0858               	movf	setLED@led,w
  9563  0E6D  3A02               	xorlw	2
  9564  0E6E  1903               	btfsc	3,2
  9565                           
  9566                           ;LED_B1.c: 98: RC6 = 1;
  9567  0E6F  1707               	bsf	7,6	;volatile
  9568                           
  9569                           ;LED_B1.c: 100: }
  9570                           ;LED_B1.c: 112: if (led == 99) {
  9571  0E70  0858               	movf	setLED@led,w
  9572  0E71  3A63               	xorlw	99
  9573  0E72  1903               	btfsc	3,2
  9574                           
  9575                           ;LED_B1.c: 116: RC1 = 1;
  9576  0E73  1487               	bsf	7,1	;volatile
  9577  0E74                     l5085:	
  9578                           
  9579                           ;LED_B1.c: 118: }
  9580                           ;LED_B1.c: 120: }
  9581                           ;LED_B1.c: 121: if (command == 1) {
  9582  0E74  0857               	movf	setLED@command,w
  9583  0E75  3A01               	xorlw	1
  9584  0E76  1D03               	skipz
  9585  0E77  2E85               	goto	l5099
  9586                           
  9587                           ;LED_B1.c: 123: if (led == 1) {
  9588  0E78  0858               	movf	setLED@led,w
  9589  0E79  3A01               	xorlw	1
  9590  0E7A  1D03               	skipz
  9591  0E7B  2E7D               	goto	l5091
  9592                           
  9593                           ;LED_B1.c: 127: RC7 = 0;
  9594  0E7C  1387               	bcf	7,7	;volatile
  9595  0E7D                     l5091:	
  9596                           
  9597                           ;LED_B1.c: 129: }
  9598                           ;LED_B1.c: 132: if (led == 2) {
  9599  0E7D  0858               	movf	setLED@led,w
  9600  0E7E  3A02               	xorlw	2
  9601  0E7F  1903               	btfsc	3,2
  9602                           
  9603                           ;LED_B1.c: 136: RC6 = 0;
  9604  0E80  1307               	bcf	7,6	;volatile
  9605                           
  9606                           ;LED_B1.c: 138: }
  9607                           ;LED_B1.c: 150: if (led == 99) {
  9608  0E81  0858               	movf	setLED@led,w
  9609  0E82  3A63               	xorlw	99
  9610  0E83  1903               	btfsc	3,2
  9611                           
  9612                           ;LED_B1.c: 154: RC1 = 0;
  9613  0E84  1087               	bcf	7,1	;volatile
  9614  0E85                     l5099:	
  9615                           
  9616                           ;LED_B1.c: 156: }
  9617                           ;LED_B1.c: 158: }
  9618                           ;LED_B1.c: 159: if (command == 10) {
  9619  0E85  0857               	movf	setLED@command,w
  9620  0E86  3A0A               	xorlw	10
  9621  0E87  1D03               	skipz
  9622  0E88  2EA0               	goto	l5117
  9623                           
  9624                           ;LED_B1.c: 160: LED->GO = 0;
  9625  0E89  0876               	movf	_LED,w
  9626  0E8A  0084               	movwf	4
  9627  0E8B  1383               	bcf	3,7	;select IRP bank0
  9628  0E8C  1080               	bcf	0,1
  9629                           
  9630                           ;LED_B1.c: 161: LED->Time = 0;
  9631  0E8D  0A76               	incf	_LED,w
  9632  0E8E  0084               	movwf	4
  9633  0E8F  0180               	clrf	0
  9634  0E90  0A84               	incf	4,f
  9635  0E91  0180               	clrf	0
  9636                           
  9637                           ;LED_B1.c: 163: if (led == 1) {
  9638  0E92  0858               	movf	setLED@led,w
  9639  0E93  3A01               	xorlw	1
  9640  0E94  1D03               	skipz
  9641  0E95  2E98               	goto	l5109
  9642                           
  9643                           ;LED_B1.c: 167: RC7 = 1;
  9644  0E96  1787               	bsf	7,7	;volatile
  9645                           
  9646                           ;LED_B1.c: 169: }
  9647  0E97  2E9C               	goto	l5113
  9648  0E98                     l5109:	
  9649                           
  9650                           ;LED_B1.c: 172: else if (led == 2) {
  9651  0E98  0858               	movf	setLED@led,w
  9652  0E99  3A02               	xorlw	2
  9653  0E9A  1903               	btfsc	3,2
  9654                           
  9655                           ;LED_B1.c: 176: RC6 = 1;
  9656  0E9B  1707               	bsf	7,6	;volatile
  9657  0E9C                     l5113:	
  9658                           
  9659                           ;LED_B1.c: 178: }
  9660                           ;LED_B1.c: 190: if (led == 99) {
  9661  0E9C  0858               	movf	setLED@led,w
  9662  0E9D  3A63               	xorlw	99
  9663  0E9E  1903               	btfsc	3,2
  9664                           
  9665                           ;LED_B1.c: 194: RC1 = 1;
  9666  0E9F  1487               	bsf	7,1	;volatile
  9667  0EA0                     l5117:	
  9668                           
  9669                           ;LED_B1.c: 196: }
  9670                           ;LED_B1.c: 198: }
  9671                           ;LED_B1.c: 199: if (command == 11) {
  9672  0EA0  0857               	movf	setLED@command,w
  9673  0EA1  3A0B               	xorlw	11
  9674  0EA2  1D03               	skipz
  9675  0EA3  0008               	return
  9676                           
  9677                           ;LED_B1.c: 200: LED->GO = 1;
  9678  0EA4  0876               	movf	_LED,w
  9679  0EA5  0084               	movwf	4
  9680  0EA6  1383               	bcf	3,7	;select IRP bank0
  9681  0EA7  1480               	bsf	0,1
  9682  0EA8  0008               	return
  9683  0EA9                     __end_of_setLED:	
  9684                           
  9685                           	psect	text63
  9686  0AF3                     __ptext63:	
  9687 ;; *************** function _LedPointSelect *****************
  9688 ;; Defined at:
  9689 ;;		line 7 in file "../src/LED_B1.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;  led             1    wreg     unsigned char 
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;  led             1    5[COMMON] unsigned char 
  9694 ;; Return value:  Size  Location     Type
  9695 ;;		None               void
  9696 ;; Registers used:
  9697 ;;		wreg
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9703 ;;      Params:         0       0       0       0
  9704 ;;      Locals:         1       0       0       0
  9705 ;;      Temps:          1       0       0       0
  9706 ;;      Totals:         2       0       0       0
  9707 ;;Total ram usage:        2 bytes
  9708 ;; Hardware stack levels used:    1
  9709 ;; Hardware stack levels required when called:    2
  9710 ;; This function calls:
  9711 ;;		Nothing
  9712 ;; This function is called by:
  9713 ;;		_setLED_Initialization
  9714 ;;		_setLED
  9715 ;;		_setLED_Main
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           
  9720                           ;psect for function _LedPointSelect
  9721  0AF3                     _LedPointSelect:	
  9722                           
  9723                           ;incstack = 0
  9724                           ; Regs used in _LedPointSelect: [wreg]
  9725                           ;LedPointSelect@led stored from wreg
  9726  0AF3  00F5               	movwf	LedPointSelect@led
  9727                           
  9728                           ;LED_B1.c: 9: if (led == 1) {
  9729  0AF4  0875               	movf	LedPointSelect@led,w
  9730  0AF5  3A01               	xorlw	1
  9731  0AF6  1D03               	skipz
  9732  0AF7  2AFC               	goto	l349
  9733                           
  9734                           ;LED_B1.c: 10: LED = &VarLED1;
  9735  0AF8  30E6               	movlw	_VarLED1& (0+255)
  9736  0AF9  00F4               	movwf	??_LedPointSelect
  9737  0AFA  0874               	movf	??_LedPointSelect,w
  9738  0AFB  00F6               	movwf	_LED
  9739  0AFC                     l349:	
  9740                           
  9741                           ;LED_B1.c: 11: }
  9742                           ;LED_B1.c: 14: if (led == 2) {
  9743  0AFC  0875               	movf	LedPointSelect@led,w
  9744  0AFD  3A02               	xorlw	2
  9745  0AFE  1D03               	skipz
  9746  0AFF  2B04               	goto	l350
  9747                           
  9748                           ;LED_B1.c: 15: LED = &VarLED2;
  9749  0B00  30EA               	movlw	_VarLED2& (0+255)
  9750  0B01  00F4               	movwf	??_LedPointSelect
  9751  0B02  0874               	movf	??_LedPointSelect,w
  9752  0B03  00F6               	movwf	_LED
  9753  0B04                     l350:	
  9754                           
  9755                           ;LED_B1.c: 16: }
  9756                           ;LED_B1.c: 24: if (led == 99) {
  9757  0B04  0875               	movf	LedPointSelect@led,w
  9758  0B05  3A63               	xorlw	99
  9759  0B06  1D03               	skipz
  9760  0B07  0008               	return
  9761                           
  9762                           ;LED_B1.c: 25: LED = &VarErrLED;
  9763  0B08  3053               	movlw	_VarErrLED& (0+255)
  9764  0B09  00F4               	movwf	??_LedPointSelect
  9765  0B0A  0874               	movf	??_LedPointSelect,w
  9766  0B0B  00F6               	movwf	_LED
  9767  0B0C  0008               	return
  9768  0B0D                     __end_of_LedPointSelect:	
  9769                           
  9770                           	psect	text64
  9771  0E14                     __ptext64:	
  9772 ;; *************** function _setBuz *****************
  9773 ;; Defined at:
  9774 ;;		line 22 in file "../src/Buzzer_B1.c"
  9775 ;; Parameters:    Size  Location     Type
  9776 ;;  count           1    wreg     unsigned char 
  9777 ;;  time            2    8[BANK0 ] int 
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  count           1   10[BANK0 ] unsigned char 
  9780 ;; Return value:  Size  Location     Type
  9781 ;;		None               void
  9782 ;; Registers used:
  9783 ;;		wreg, status,2, status,0, pclath, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9789 ;;      Params:         0       2       0       0
  9790 ;;      Locals:         0       1       0       0
  9791 ;;      Temps:          1       0       0       0
  9792 ;;      Totals:         1       3       0       0
  9793 ;;Total ram usage:        4 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:    3
  9796 ;; This function calls:
  9797 ;;		___awdiv
  9798 ;; This function is called by:
  9799 ;;		_my_MainTimer
  9800 ;;		_Exception_Main
  9801 ;;		_setTemp_Main
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           
  9806                           ;psect for function _setBuz
  9807  0E14                     _setBuz:	
  9808                           
  9809                           ;incstack = 0
  9810                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
  9811                           ;setBuz@count stored from wreg
  9812  0E14  1283               	bcf	3,5	;RP0=0, select bank0
  9813  0E15  1303               	bcf	3,6	;RP1=0, select bank0
  9814  0E16  00E1               	movwf	setBuz@count
  9815                           
  9816                           ;Buzzer_B1.c: 23: time /= 20;
  9817  0E17  3014               	movlw	20
  9818  0E18  00D7               	movwf	___awdiv@divisor
  9819  0E19  3000               	movlw	0
  9820  0E1A  00D8               	movwf	___awdiv@divisor+1
  9821  0E1B  0860               	movf	setBuz@time+1,w
  9822  0E1C  01DA               	clrf	___awdiv@dividend+1
  9823  0E1D  07DA               	addwf	___awdiv@dividend+1,f
  9824  0E1E  085F               	movf	setBuz@time,w
  9825  0E1F  01D9               	clrf	___awdiv@dividend
  9826  0E20  07D9               	addwf	___awdiv@dividend,f
  9827  0E21  118A  27A3  158A   	fcall	___awdiv
  9828  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  9829  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  9830  0E26  0858               	movf	?___awdiv+1,w
  9831  0E27  01E0               	clrf	setBuz@time+1
  9832  0E28  07E0               	addwf	setBuz@time+1,f
  9833  0E29  0857               	movf	?___awdiv,w
  9834  0E2A  01DF               	clrf	setBuz@time
  9835  0E2B  07DF               	addwf	setBuz@time,f
  9836                           
  9837                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
  9838  0E2C  1C20               	btfss	_Buz1,0
  9839  0E2D  0008               	return
  9840                           
  9841                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
  9842  0E2E  18A0               	btfsc	_Buz1,1
  9843  0E2F  2E3F               	goto	l58
  9844                           
  9845                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
  9846  0E30  14A0               	bsf	_Buz1,1
  9847                           
  9848                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
  9849  0E31  01A1               	clrf	_Buz1+1
  9850  0E32  01A2               	clrf	_Buz1+2
  9851                           
  9852                           ;Buzzer_B1.c: 28: Buz1.Count = count;
  9853  0E33  0861               	movf	setBuz@count,w
  9854  0E34  00F5               	movwf	??_setBuz
  9855  0E35  0875               	movf	??_setBuz,w
  9856  0E36  00A3               	movwf	_Buz1+3
  9857                           
  9858                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
  9859  0E37  0860               	movf	setBuz@time+1,w
  9860  0E38  01A7               	clrf	_Buz1+7
  9861  0E39  07A7               	addwf	_Buz1+7,f
  9862  0E3A  085F               	movf	setBuz@time,w
  9863  0E3B  01A6               	clrf	_Buz1+6
  9864  0E3C  07A6               	addwf	_Buz1+6,f
  9865                           
  9866                           ;Buzzer_B1.c: 30: RC0 = 1;
  9867  0E3D  1407               	bsf	7,0	;volatile
  9868                           
  9869                           ;Buzzer_B1.c: 31: } else {
  9870  0E3E  0008               	return
  9871  0E3F                     l58:	
  9872                           
  9873                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
  9874  0E3F  19A0               	btfsc	_Buz1,3
  9875  0E40  2E4D               	goto	l60
  9876                           
  9877                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
  9878  0E41  15A0               	bsf	_Buz1,3
  9879                           
  9880                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
  9881  0E42  0861               	movf	setBuz@count,w
  9882  0E43  00F5               	movwf	??_setBuz
  9883  0E44  0875               	movf	??_setBuz,w
  9884  0E45  00A4               	movwf	_Buz1+4
  9885                           
  9886                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
  9887  0E46  0860               	movf	setBuz@time+1,w
  9888  0E47  01A9               	clrf	_Buz1+9
  9889  0E48  07A9               	addwf	_Buz1+9,f
  9890  0E49  085F               	movf	setBuz@time,w
  9891  0E4A  01A8               	clrf	_Buz1+8
  9892  0E4B  07A8               	addwf	_Buz1+8,f
  9893                           
  9894                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
  9895  0E4C  0008               	return
  9896  0E4D                     l60:	
  9897  0E4D  1A20               	btfsc	_Buz1,4
  9898  0E4E  0008               	return
  9899                           
  9900                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
  9901  0E4F  1620               	bsf	_Buz1,4
  9902                           
  9903                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
  9904  0E50  0861               	movf	setBuz@count,w
  9905  0E51  00F5               	movwf	??_setBuz
  9906  0E52  0875               	movf	??_setBuz,w
  9907  0E53  00A5               	movwf	_Buz1+5
  9908                           
  9909                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
  9910  0E54  0860               	movf	setBuz@time+1,w
  9911  0E55  01AB               	clrf	_Buz1+11
  9912  0E56  07AB               	addwf	_Buz1+11,f
  9913  0E57  085F               	movf	setBuz@time,w
  9914  0E58  01AA               	clrf	_Buz1+10
  9915  0E59  07AA               	addwf	_Buz1+10,f
  9916  0E5A  0008               	return
  9917  0E5B                     __end_of_setBuz:	
  9918                           
  9919                           	psect	text65
  9920  07A3                     __ptext65:	
  9921 ;; *************** function ___awdiv *****************
  9922 ;; Defined at:
  9923 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  divisor         2    0[BANK0 ] int 
  9926 ;;  dividend        2    2[BANK0 ] int 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  quotient        2    6[BANK0 ] int 
  9929 ;;  sign            1    5[BANK0 ] unsigned char 
  9930 ;;  counter         1    4[BANK0 ] unsigned char 
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  2    0[BANK0 ] int 
  9933 ;; Registers used:
  9934 ;;		wreg, status,2, status,0
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9940 ;;      Params:         0       4       0       0
  9941 ;;      Locals:         0       4       0       0
  9942 ;;      Temps:          1       0       0       0
  9943 ;;      Totals:         1       8       0       0
  9944 ;;Total ram usage:        9 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    2
  9947 ;; This function calls:
  9948 ;;		Nothing
  9949 ;; This function is called by:
  9950 ;;		_setBuz
  9951 ;;		_getPIR_AD
  9952 ;;		_Lights_Control
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           
  9957                           ;psect for function ___awdiv
  9958  07A3                     ___awdiv:	
  9959                           
  9960                           ;incstack = 0
  9961                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9962  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  9963  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  9964  07A5  01DC               	clrf	___awdiv@sign
  9965  07A6  1FD8               	btfss	___awdiv@divisor+1,7
  9966  07A7  2FAF               	goto	l5149
  9967  07A8  09D7               	comf	___awdiv@divisor,f
  9968  07A9  09D8               	comf	___awdiv@divisor+1,f
  9969  07AA  0AD7               	incf	___awdiv@divisor,f
  9970  07AB  1903               	skipnz
  9971  07AC  0AD8               	incf	___awdiv@divisor+1,f
  9972  07AD  01DC               	clrf	___awdiv@sign
  9973  07AE  0ADC               	incf	___awdiv@sign,f
  9974  07AF                     l5149:	
  9975  07AF  1FDA               	btfss	___awdiv@dividend+1,7
  9976  07B0  2FBA               	goto	l5155
  9977  07B1  09D9               	comf	___awdiv@dividend,f
  9978  07B2  09DA               	comf	___awdiv@dividend+1,f
  9979  07B3  0AD9               	incf	___awdiv@dividend,f
  9980  07B4  1903               	skipnz
  9981  07B5  0ADA               	incf	___awdiv@dividend+1,f
  9982  07B6  3001               	movlw	1
  9983  07B7  00F4               	movwf	??___awdiv
  9984  07B8  0874               	movf	??___awdiv,w
  9985  07B9  06DC               	xorwf	___awdiv@sign,f
  9986  07BA                     l5155:	
  9987  07BA  01DD               	clrf	___awdiv@quotient
  9988  07BB  01DE               	clrf	___awdiv@quotient+1
  9989  07BC  0858               	movf	___awdiv@divisor+1,w
  9990  07BD  0457               	iorwf	___awdiv@divisor,w
  9991  07BE  1903               	skipnz
  9992  07BF  2FF1               	goto	l5177
  9993  07C0  01DB               	clrf	___awdiv@counter
  9994  07C1  0ADB               	incf	___awdiv@counter,f
  9995  07C2                     l5165:	
  9996  07C2  1BD8               	btfsc	___awdiv@divisor+1,7
  9997  07C3  2FD0               	goto	l5167
  9998  07C4  3001               	movlw	1
  9999  07C5                     u5865:	
 10000  07C5  1003               	clrc
 10001  07C6  0DD7               	rlf	___awdiv@divisor,f
 10002  07C7  0DD8               	rlf	___awdiv@divisor+1,f
 10003  07C8  3EFF               	addlw	-1
 10004  07C9  1D03               	skipz
 10005  07CA  2FC5               	goto	u5865
 10006  07CB  3001               	movlw	1
 10007  07CC  00F4               	movwf	??___awdiv
 10008  07CD  0874               	movf	??___awdiv,w
 10009  07CE  07DB               	addwf	___awdiv@counter,f
 10010  07CF  2FC2               	goto	l5165
 10011  07D0                     l5167:	
 10012  07D0  3001               	movlw	1
 10013  07D1                     u5885:	
 10014  07D1  1003               	clrc
 10015  07D2  0DDD               	rlf	___awdiv@quotient,f
 10016  07D3  0DDE               	rlf	___awdiv@quotient+1,f
 10017  07D4  3EFF               	addlw	-1
 10018  07D5  1D03               	skipz
 10019  07D6  2FD1               	goto	u5885
 10020  07D7  0858               	movf	___awdiv@divisor+1,w
 10021  07D8  025A               	subwf	___awdiv@dividend+1,w
 10022  07D9  1D03               	skipz
 10023  07DA  2FDD               	goto	u5895
 10024  07DB  0857               	movf	___awdiv@divisor,w
 10025  07DC  0259               	subwf	___awdiv@dividend,w
 10026  07DD                     u5895:	
 10027  07DD  1C03               	skipc
 10028  07DE  2FE6               	goto	l5173
 10029  07DF  0857               	movf	___awdiv@divisor,w
 10030  07E0  02D9               	subwf	___awdiv@dividend,f
 10031  07E1  0858               	movf	___awdiv@divisor+1,w
 10032  07E2  1C03               	skipc
 10033  07E3  03DA               	decf	___awdiv@dividend+1,f
 10034  07E4  02DA               	subwf	___awdiv@dividend+1,f
 10035  07E5  145D               	bsf	___awdiv@quotient,0
 10036  07E6                     l5173:	
 10037  07E6  3001               	movlw	1
 10038  07E7                     u5905:	
 10039  07E7  1003               	clrc
 10040  07E8  0CD8               	rrf	___awdiv@divisor+1,f
 10041  07E9  0CD7               	rrf	___awdiv@divisor,f
 10042  07EA  3EFF               	addlw	-1
 10043  07EB  1D03               	skipz
 10044  07EC  2FE7               	goto	u5905
 10045  07ED  3001               	movlw	1
 10046  07EE  02DB               	subwf	___awdiv@counter,f
 10047  07EF  1D03               	btfss	3,2
 10048  07F0  2FD0               	goto	l5167
 10049  07F1                     l5177:	
 10050  07F1  085C               	movf	___awdiv@sign,w
 10051  07F2  1903               	btfsc	3,2
 10052  07F3  2FF9               	goto	l5181
 10053  07F4  09DD               	comf	___awdiv@quotient,f
 10054  07F5  09DE               	comf	___awdiv@quotient+1,f
 10055  07F6  0ADD               	incf	___awdiv@quotient,f
 10056  07F7  1903               	skipnz
 10057  07F8  0ADE               	incf	___awdiv@quotient+1,f
 10058  07F9                     l5181:	
 10059  07F9  085E               	movf	___awdiv@quotient+1,w
 10060  07FA  01D8               	clrf	?___awdiv+1
 10061  07FB  07D8               	addwf	?___awdiv+1,f
 10062  07FC  085D               	movf	___awdiv@quotient,w
 10063  07FD  01D7               	clrf	?___awdiv
 10064  07FE  07D7               	addwf	?___awdiv,f
 10065  07FF  0008               	return
 10066  0800                     __end_of___awdiv:	
 10067                           
 10068                           	psect	text66
 10069  09C3                     __ptext66:	
 10070 ;; *************** function _getMain_All_LightsStatus *****************
 10071 ;; Defined at:
 10072 ;;		line 373 in file "../src/Main_B1.c"
 10073 ;; Parameters:    Size  Location     Type
 10074 ;;		None
 10075 ;; Auto vars:     Size  Location     Type
 10076 ;;  status          1    4[COMMON] unsigned char 
 10077 ;; Return value:  Size  Location     Type
 10078 ;;                  1    wreg      unsigned char 
 10079 ;; Registers used:
 10080 ;;		wreg, status,2, status,0
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10086 ;;      Params:         0       0       0       0
 10087 ;;      Locals:         1       0       0       0
 10088 ;;      Temps:          0       0       0       0
 10089 ;;      Totals:         1       0       0       0
 10090 ;;Total ram usage:        1 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    2
 10093 ;; This function calls:
 10094 ;;		Nothing
 10095 ;; This function is called by:
 10096 ;;		_Exception_Main
 10097 ;;		_Load_Main
 10098 ;;		_setTemp_Main
 10099 ;;		_Lights_Main
 10100 ;; This function uses a non-reentrant model
 10101 ;;
 10102                           
 10103                           
 10104                           ;psect for function _getMain_All_LightsStatus
 10105  09C3                     _getMain_All_LightsStatus:	
 10106                           
 10107                           ;Main_B1.c: 374: char status = 0;
 10108                           
 10109                           ;incstack = 0
 10110                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 10111  09C3  01F4               	clrf	getMain_All_LightsStatus@status
 10112                           
 10113                           ;Main_B1.c: 387: status = Lights1.Status == 1 ? 1 : 0;
 10114  09C4  3000               	movlw	0
 10115  09C5  1283               	bcf	3,5	;RP0=0, select bank0
 10116  09C6  1303               	bcf	3,6	;RP1=0, select bank0
 10117  09C7  1949               	btfsc	_Lights1,2
 10118  09C8  3001               	movlw	1
 10119  09C9  00F4               	movwf	getMain_All_LightsStatus@status
 10120                           
 10121                           ;Main_B1.c: 388: if (status == 0) {
 10122  09CA  08F4               	movf	getMain_All_LightsStatus@status,f
 10123  09CB  1D03               	skipz
 10124  09CC  29D1               	goto	l3759
 10125                           
 10126                           ;Main_B1.c: 389: status = Lights2.Status == 1 ? 1 : 0;
 10127  09CD  3000               	movlw	0
 10128  09CE  194E               	btfsc	_Lights2,2
 10129  09CF  3001               	movlw	1
 10130  09D0  00F4               	movwf	getMain_All_LightsStatus@status
 10131  09D1                     l3759:	
 10132                           
 10133                           ;Main_B1.c: 390: }
 10134                           ;Main_B1.c: 420: return status;
 10135  09D1  0874               	movf	getMain_All_LightsStatus@status,w
 10136  09D2  0008               	return
 10137  09D3                     __end_of_getMain_All_LightsStatus:	
 10138                           
 10139                           	psect	text67
 10140  0CD0                     __ptext67:	
 10141 ;; *************** function _getMain_All_Error_Status *****************
 10142 ;; Defined at:
 10143 ;;		line 424 in file "../src/Main_B1.c"
 10144 ;; Parameters:    Size  Location     Type
 10145 ;;  command         1    wreg     unsigned char 
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;  command         1    4[BANK0 ] unsigned char 
 10148 ;;  status          1    5[BANK0 ] unsigned char 
 10149 ;; Return value:  Size  Location     Type
 10150 ;;                  1    wreg      unsigned char 
 10151 ;; Registers used:
 10152 ;;		wreg, status,2, status,0
 10153 ;; Tracked objects:
 10154 ;;		On entry : 0/0
 10155 ;;		On exit  : 0/0
 10156 ;;		Unchanged: 0/0
 10157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10158 ;;      Params:         0       0       0       0
 10159 ;;      Locals:         0       6       0       0
 10160 ;;      Temps:          1       0       0       0
 10161 ;;      Totals:         1       6       0       0
 10162 ;;Total ram usage:        7 bytes
 10163 ;; Hardware stack levels used:    1
 10164 ;; Hardware stack levels required when called:    2
 10165 ;; This function calls:
 10166 ;;		Nothing
 10167 ;; This function is called by:
 10168 ;;		_Exception_Main
 10169 ;;		_Load_Main
 10170 ;;		_setTemp_Main
 10171 ;;		_PIR_Main
 10172 ;;		_setSYSC_Main
 10173 ;;		_setSw_Main
 10174 ;;		_Lights_Main
 10175 ;; This function uses a non-reentrant model
 10176 ;;
 10177                           
 10178                           
 10179                           ;psect for function _getMain_All_Error_Status
 10180  0CD0                     _getMain_All_Error_Status:	
 10181                           
 10182                           ;incstack = 0
 10183                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 10184                           ;getMain_All_Error_Status@command stored from wreg
 10185  0CD0  1283               	bcf	3,5	;RP0=0, select bank0
 10186  0CD1  1303               	bcf	3,6	;RP1=0, select bank0
 10187  0CD2  00DB               	movwf	getMain_All_Error_Status@command
 10188                           
 10189                           ;Main_B1.c: 425: char status = 0;
 10190  0CD3  01DC               	clrf	getMain_All_Error_Status@status
 10191                           
 10192                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
 10193  0CD4  08DC               	movf	getMain_All_Error_Status@status,f
 10194  0CD5  1D03               	skipz
 10195  0CD6  2CDF               	goto	l3771
 10196  0CD7  085B               	movf	getMain_All_Error_Status@command,w
 10197  0CD8  3A01               	xorlw	1
 10198  0CD9  1903               	skipnz
 10199  0CDA  2CDF               	goto	l3771
 10200                           
 10201                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
 10202  0CDB  3000               	movlw	0
 10203  0CDC  18AC               	btfsc	_SYSC,1
 10204  0CDD  3001               	movlw	1
 10205  0CDE  00DC               	movwf	getMain_All_Error_Status@status
 10206  0CDF                     l3771:	
 10207                           
 10208                           ;Main_B1.c: 430: }
 10209                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 10210  0CDF  08DC               	movf	getMain_All_Error_Status@status,f
 10211  0CE0  1D03               	skipz
 10212  0CE1  2CF3               	goto	l3781
 10213  0CE2  085B               	movf	getMain_All_Error_Status@command,w
 10214  0CE3  3A02               	xorlw	2
 10215  0CE4  1903               	skipnz
 10216  0CE5  2CF3               	goto	l3781
 10217                           
 10218                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 10219  0CE6  18C2               	btfsc	_Temp,1
 10220  0CE7  2CEB               	goto	l3779
 10221  0CE8  01D7               	clrf	_getMain_All_Error_Status$2426
 10222  0CE9  01D8               	clrf	_getMain_All_Error_Status$2426+1
 10223  0CEA  2CEF               	goto	l700
 10224  0CEB                     l3779:	
 10225  0CEB  3002               	movlw	2
 10226  0CEC  00D7               	movwf	_getMain_All_Error_Status$2426
 10227  0CED  3000               	movlw	0
 10228  0CEE  00D8               	movwf	_getMain_All_Error_Status$2426+1
 10229  0CEF                     l700:	
 10230  0CEF  0857               	movf	_getMain_All_Error_Status$2426,w
 10231  0CF0  00F4               	movwf	??_getMain_All_Error_Status
 10232  0CF1  0874               	movf	??_getMain_All_Error_Status,w
 10233  0CF2  00DC               	movwf	getMain_All_Error_Status@status
 10234  0CF3                     l3781:	
 10235                           
 10236                           ;Main_B1.c: 438: }
 10237                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 10238  0CF3  08DC               	movf	getMain_All_Error_Status@status,f
 10239  0CF4  1D03               	skipz
 10240  0CF5  2D0C               	goto	l701
 10241  0CF6  085B               	movf	getMain_All_Error_Status@command,w
 10242  0CF7  3A03               	xorlw	3
 10243  0CF8  1903               	skipnz
 10244  0CF9  2D0C               	goto	l701
 10245                           
 10246                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 10247  0CFA  1683               	bsf	3,5	;RP0=1, select bank1
 10248  0CFB  1303               	bcf	3,6	;RP1=0, select bank1
 10249  0CFC  1ACA               	btfsc	_Load^(0+128),5
 10250  0CFD  2D03               	goto	l3789
 10251  0CFE  1283               	bcf	3,5	;RP0=0, select bank0
 10252  0CFF  1303               	bcf	3,6	;RP1=0, select bank0
 10253  0D00  01D9               	clrf	_getMain_All_Error_Status$2427
 10254  0D01  01DA               	clrf	_getMain_All_Error_Status$2427+1
 10255  0D02  2D08               	goto	l705
 10256  0D03                     l3789:	
 10257  0D03  3003               	movlw	3
 10258  0D04  1283               	bcf	3,5	;RP0=0, select bank0
 10259  0D05  00D9               	movwf	_getMain_All_Error_Status$2427
 10260  0D06  3000               	movlw	0
 10261  0D07  00DA               	movwf	_getMain_All_Error_Status$2427+1
 10262  0D08                     l705:	
 10263  0D08  0859               	movf	_getMain_All_Error_Status$2427,w
 10264  0D09  00F4               	movwf	??_getMain_All_Error_Status
 10265  0D0A  0874               	movf	??_getMain_All_Error_Status,w
 10266  0D0B  00DC               	movwf	getMain_All_Error_Status@status
 10267  0D0C                     l701:	
 10268                           
 10269                           ;Main_B1.c: 445: }
 10270                           ;Main_B1.c: 455: return status;
 10271  0D0C  085C               	movf	getMain_All_Error_Status@status,w
 10272  0D0D  0008               	return
 10273  0D0E                     __end_of_getMain_All_Error_Status:	
 10274                           
 10275                           	psect	text68
 10276  09B3                     __ptext68:	
 10277 ;; *************** function _getAll_Lights_Line *****************
 10278 ;; Defined at:
 10279 ;;		line 310 in file "../src/TriacRelay_B1.c"
 10280 ;; Parameters:    Size  Location     Type
 10281 ;;		None
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;  line            1    5[COMMON] unsigned char 
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  1    wreg      unsigned char 
 10286 ;; Registers used:
 10287 ;;		wreg, status,2
 10288 ;; Tracked objects:
 10289 ;;		On entry : 0/0
 10290 ;;		On exit  : 0/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10293 ;;      Params:         0       0       0       0
 10294 ;;      Locals:         1       0       0       0
 10295 ;;      Temps:          1       0       0       0
 10296 ;;      Totals:         2       0       0       0
 10297 ;;Total ram usage:        2 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; Hardware stack levels required when called:    2
 10300 ;; This function calls:
 10301 ;;		Nothing
 10302 ;; This function is called by:
 10303 ;;		_Exception_Main
 10304 ;; This function uses a non-reentrant model
 10305 ;;
 10306                           
 10307                           
 10308                           ;psect for function _getAll_Lights_Line
 10309  09B3                     _getAll_Lights_Line:	
 10310                           
 10311                           ;TriacRelay_B1.c: 311: char line = 0;
 10312                           
 10313                           ;incstack = 0
 10314                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
 10315  09B3  01F5               	clrf	getAll_Lights_Line@line
 10316                           
 10317                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
 10318  09B4  1283               	bcf	3,5	;RP0=0, select bank0
 10319  09B5  1303               	bcf	3,6	;RP1=0, select bank0
 10320  09B6  1C4A               	btfss	_Lights1+1,0
 10321  09B7  29BB               	goto	l1596
 10322                           
 10323                           ;TriacRelay_B1.c: 314: line = 1;
 10324  09B8  01F5               	clrf	getAll_Lights_Line@line
 10325  09B9  0AF5               	incf	getAll_Lights_Line@line,f
 10326                           
 10327                           ;TriacRelay_B1.c: 315: }
 10328  09BA  29C1               	goto	l1597
 10329  09BB                     l1596:	
 10330                           
 10331                           ;TriacRelay_B1.c: 318: else if (Lights2.Line == 1) {
 10332  09BB  1C4F               	btfss	_Lights2+1,0
 10333  09BC  29C1               	goto	l1597
 10334                           
 10335                           ;TriacRelay_B1.c: 319: line = 2;
 10336  09BD  3002               	movlw	2
 10337  09BE  00F4               	movwf	??_getAll_Lights_Line
 10338  09BF  0874               	movf	??_getAll_Lights_Line,w
 10339  09C0  00F5               	movwf	getAll_Lights_Line@line
 10340  09C1                     l1597:	
 10341                           
 10342                           ;TriacRelay_B1.c: 320: }
 10343                           ;TriacRelay_B1.c: 327: return line;
 10344  09C1  0875               	movf	getAll_Lights_Line@line,w
 10345  09C2  0008               	return
 10346  09C3                     __end_of_getAll_Lights_Line:	
 10347                           
 10348                           	psect	text69
 10349  096B                     __ptext69:	
 10350 ;; *************** function _DetectSYSC_Signal *****************
 10351 ;; Defined at:
 10352 ;;		line 50 in file "../src/SYSC_B1.c"
 10353 ;; Parameters:    Size  Location     Type
 10354 ;;		None
 10355 ;; Auto vars:     Size  Location     Type
 10356 ;;		None
 10357 ;; Return value:  Size  Location     Type
 10358 ;;		None               void
 10359 ;; Registers used:
 10360 ;;		status,2
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10366 ;;      Params:         0       0       0       0
 10367 ;;      Locals:         0       0       0       0
 10368 ;;      Temps:          0       0       0       0
 10369 ;;      Totals:         0       0       0       0
 10370 ;;Total ram usage:        0 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    2
 10373 ;; This function calls:
 10374 ;;		Nothing
 10375 ;; This function is called by:
 10376 ;;		_main
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           
 10381                           ;psect for function _DetectSYSC_Signal
 10382  096B                     _DetectSYSC_Signal:	
 10383                           
 10384                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
 10385                           
 10386                           ;incstack = 0
 10387                           ; Regs used in _DetectSYSC_Signal: [status,2]
 10388  096B  1283               	bcf	3,5	;RP0=0, select bank0
 10389  096C  1303               	bcf	3,6	;RP1=0, select bank0
 10390  096D  19AC               	btfsc	_SYSC,3
 10391  096E  2975               	goto	l1280
 10392                           
 10393                           ;SYSC_B1.c: 52: if (RB2 == 1) {
 10394  096F  1D06               	btfss	6,2	;volatile
 10395  0970  0008               	return
 10396                           
 10397                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
 10398  0971  15AC               	bsf	_SYSC,3
 10399                           
 10400                           ;SYSC_B1.c: 54: SYSC.Time = 0;
 10401  0972  01AD               	clrf	_SYSC+1
 10402  0973  01AE               	clrf	_SYSC+2
 10403                           
 10404                           ;SYSC_B1.c: 55: }
 10405                           ;SYSC_B1.c: 56: } else {
 10406  0974  0008               	return
 10407  0975                     l1280:	
 10408                           
 10409                           ;SYSC_B1.c: 57: if (RB2 == 0) {
 10410  0975  1906               	btfsc	6,2	;volatile
 10411  0976  0008               	return
 10412                           
 10413                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
 10414  0977  11AC               	bcf	_SYSC,3
 10415  0978  0008               	return
 10416  0979                     __end_of_DetectSYSC_Signal:	
 10417                           
 10418                           	psect	text70
 10419  0C61                     __ptext70:	
 10420 ;; *************** function _CDS_Main *****************
 10421 ;; Defined at:
 10422 ;;		line 11 in file "../src/CDS_B1.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;		None
 10425 ;; Auto vars:     Size  Location     Type
 10426 ;;		None
 10427 ;; Return value:  Size  Location     Type
 10428 ;;		None               void
 10429 ;; Registers used:
 10430 ;;		wreg, status,2, status,0
 10431 ;; Tracked objects:
 10432 ;;		On entry : 0/0
 10433 ;;		On exit  : 0/0
 10434 ;;		Unchanged: 0/0
 10435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10436 ;;      Params:         0       0       0       0
 10437 ;;      Locals:         0       0       0       0
 10438 ;;      Temps:          0       3       0       0
 10439 ;;      Totals:         0       3       0       0
 10440 ;;Total ram usage:        3 bytes
 10441 ;; Hardware stack levels used:    1
 10442 ;; Hardware stack levels required when called:    2
 10443 ;; This function calls:
 10444 ;;		Nothing
 10445 ;; This function is called by:
 10446 ;;		_main
 10447 ;; This function uses a non-reentrant model
 10448 ;;
 10449                           
 10450                           
 10451                           ;psect for function _CDS_Main
 10452  0C61                     _CDS_Main:	
 10453                           
 10454                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
 10455                           
 10456                           ;incstack = 0
 10457                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
 10458  0C61  1283               	bcf	3,5	;RP0=0, select bank0
 10459  0C62  1303               	bcf	3,6	;RP1=0, select bank0
 10460  0C63  1C36               	btfss	__CDS,0
 10461  0C64  0008               	return
 10462                           
 10463                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
 10464  0C65  18B6               	btfsc	__CDS,1
 10465  0C66  2C74               	goto	l180
 10466                           
 10467                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
 10468  0C67  19B6               	btfsc	__CDS,3
 10469  0C68  0008               	return
 10470                           
 10471                           ;CDS_B1.c: 16: _CDS.Time++;
 10472  0C69  3001               	movlw	1
 10473  0C6A  00D7               	movwf	??_CDS_Main
 10474  0C6B  0857               	movf	??_CDS_Main,w
 10475  0C6C  07B7               	addwf	__CDS+1,f
 10476                           
 10477                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
 10478  0C6D  3005               	movlw	5
 10479  0C6E  0237               	subwf	__CDS+1,w
 10480  0C6F  1C03               	skipc
 10481  0C70  0008               	return
 10482                           
 10483                           ;CDS_B1.c: 18: {
 10484                           ;CDS_B1.c: 19: _CDS.Time = 0;
 10485  0C71  01B7               	clrf	__CDS+1
 10486                           
 10487                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
 10488  0C72  15B6               	bsf	__CDS,3
 10489                           
 10490                           ;CDS_B1.c: 21: }
 10491                           ;CDS_B1.c: 22: }
 10492                           ;CDS_B1.c: 23: } else {
 10493  0C73  0008               	return
 10494  0C74                     l180:	
 10495                           
 10496                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
 10497  0C74  1CB6               	btfss	__CDS,1
 10498  0C75  0008               	return
 10499                           
 10500                           ;CDS_B1.c: 25: _CDS.GO = 0;
 10501  0C76  10B6               	bcf	__CDS,1
 10502                           
 10503                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
 10504  0C77  1A36               	btfsc	__CDS,4
 10505  0C78  2C7F               	goto	l5621
 10506                           
 10507                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
 10508  0C79  0838               	movf	__CDS+2,w
 10509  0C7A  0239               	subwf	__CDS+3,w
 10510  0C7B  1C03               	skipc
 10511  0C7C  0008               	return
 10512                           
 10513                           ;CDS_B1.c: 28: _CDS.Status = 1;
 10514  0C7D  1636               	bsf	__CDS,4
 10515                           
 10516                           ;CDS_B1.c: 29: }
 10517                           ;CDS_B1.c: 30: } else {
 10518  0C7E  0008               	return
 10519  0C7F                     l5621:	
 10520                           
 10521                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
 10522  0C7F  0838               	movf	__CDS+2,w
 10523  0C80  3E9C               	addlw	156
 10524  0C81  00D7               	movwf	??_CDS_Main
 10525  0C82  30FF               	movlw	255
 10526  0C83  1803               	skipnc
 10527  0C84  3000               	movlw	0
 10528  0C85  00D8               	movwf	??_CDS_Main+1
 10529  0C86  0858               	movf	??_CDS_Main+1,w
 10530  0C87  3A80               	xorlw	128
 10531  0C88  00D9               	movwf	??_CDS_Main+2
 10532  0C89  3080               	movlw	128
 10533  0C8A  0259               	subwf	??_CDS_Main+2,w
 10534  0C8B  1D03               	skipz
 10535  0C8C  2C8F               	goto	u6895
 10536  0C8D  0839               	movf	__CDS+3,w
 10537  0C8E  0257               	subwf	??_CDS_Main,w
 10538  0C8F                     u6895:	
 10539  0C8F  1C03               	skipc
 10540  0C90  0008               	return
 10541                           
 10542                           ;CDS_B1.c: 32: _CDS.Status = 0;
 10543  0C91  1283               	bcf	3,5	;RP0=0, select bank0
 10544  0C92  1303               	bcf	3,6	;RP1=0, select bank0
 10545  0C93  1236               	bcf	__CDS,4
 10546  0C94  0008               	return
 10547  0C95                     __end_of_CDS_Main:	
 10548                           
 10549                           	psect	text71
 10550  08F0                     __ptext71:	
 10551 ;; *************** function _CDS_Initialization *****************
 10552 ;; Defined at:
 10553 ;;		line 7 in file "../src/CDS_B1.c"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;		None
 10556 ;; Auto vars:     Size  Location     Type
 10557 ;;		None
 10558 ;; Return value:  Size  Location     Type
 10559 ;;		None               void
 10560 ;; Registers used:
 10561 ;;		None
 10562 ;; Tracked objects:
 10563 ;;		On entry : 0/0
 10564 ;;		On exit  : 0/0
 10565 ;;		Unchanged: 0/0
 10566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10567 ;;      Params:         0       0       0       0
 10568 ;;      Locals:         0       0       0       0
 10569 ;;      Temps:          0       0       0       0
 10570 ;;      Totals:         0       0       0       0
 10571 ;;Total ram usage:        0 bytes
 10572 ;; Hardware stack levels used:    1
 10573 ;; Hardware stack levels required when called:    2
 10574 ;; This function calls:
 10575 ;;		Nothing
 10576 ;; This function is called by:
 10577 ;;		_main
 10578 ;; This function uses a non-reentrant model
 10579 ;;
 10580                           
 10581                           
 10582                           ;psect for function _CDS_Initialization
 10583  08F0                     _CDS_Initialization:	
 10584                           
 10585                           ;CDS_B1.c: 8: _CDS.Enable = 1;
 10586                           
 10587                           ;incstack = 0
 10588                           ; Regs used in _CDS_Initialization: []
 10589  08F0  1283               	bcf	3,5	;RP0=0, select bank0
 10590  08F1  1303               	bcf	3,6	;RP1=0, select bank0
 10591  08F2  1436               	bsf	__CDS,0
 10592  08F3  0008               	return
 10593  08F4                     __end_of_CDS_Initialization:	
 10594                           
 10595                           	psect	text72
 10596  0D8C                     __ptext72:	
 10597 ;; *************** function _Buzzer_Main *****************
 10598 ;; Defined at:
 10599 ;;		line 46 in file "../src/Buzzer_B1.c"
 10600 ;; Parameters:    Size  Location     Type
 10601 ;;		None
 10602 ;; Auto vars:     Size  Location     Type
 10603 ;;		None
 10604 ;; Return value:  Size  Location     Type
 10605 ;;		None               void
 10606 ;; Registers used:
 10607 ;;		wreg, status,2, status,0
 10608 ;; Tracked objects:
 10609 ;;		On entry : 0/0
 10610 ;;		On exit  : 0/0
 10611 ;;		Unchanged: 0/0
 10612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10613 ;;      Params:         0       0       0       0
 10614 ;;      Locals:         0       0       0       0
 10615 ;;      Temps:          1       0       0       0
 10616 ;;      Totals:         1       0       0       0
 10617 ;;Total ram usage:        1 bytes
 10618 ;; Hardware stack levels used:    1
 10619 ;; Hardware stack levels required when called:    2
 10620 ;; This function calls:
 10621 ;;		Nothing
 10622 ;; This function is called by:
 10623 ;;		_main
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627                           
 10628                           ;psect for function _Buzzer_Main
 10629  0D8C                     _Buzzer_Main:	
 10630                           
 10631                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 10632                           
 10633                           ;incstack = 0
 10634                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 10635  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
 10636  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
 10637  0D8E  1CA0               	btfss	_Buz1,1
 10638  0D8F  0008               	return
 10639                           
 10640                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 10641  0D90  3001               	movlw	1
 10642  0D91  07A1               	addwf	_Buz1+1,f
 10643  0D92  1803               	skipnc
 10644  0D93  0AA2               	incf	_Buz1+2,f
 10645  0D94  3000               	movlw	0
 10646  0D95  07A2               	addwf	_Buz1+2,f
 10647                           
 10648                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 10649  0D96  0827               	movf	_Buz1+7,w
 10650  0D97  0222               	subwf	_Buz1+2,w
 10651  0D98  1D03               	skipz
 10652  0D99  2D9C               	goto	u4285
 10653  0D9A  0826               	movf	_Buz1+6,w
 10654  0D9B  0221               	subwf	_Buz1+1,w
 10655  0D9C                     u4285:	
 10656  0D9C  1C03               	skipc
 10657  0D9D  0008               	return
 10658                           
 10659                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 10660  0D9E  01A1               	clrf	_Buz1+1
 10661  0D9F  01A2               	clrf	_Buz1+2
 10662                           
 10663                           ;Buzzer_B1.c: 51: Buz1.Switch = (RC0 == 1) ? 1 : 0;
 10664  0DA0  12A0               	bcf	_Buz1,5
 10665  0DA1  1807               	btfsc	7,0	;volatile
 10666  0DA2  16A0               	bsf	_Buz1,5
 10667                           
 10668                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 10669  0DA3  1283               	bcf	3,5	;RP0=0, select bank0
 10670  0DA4  1303               	bcf	3,6	;RP1=0, select bank0
 10671  0DA5  1AA0               	btfsc	_Buz1,5
 10672  0DA6  2DCB               	goto	l68
 10673                           
 10674                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 10675  0DA7  08A3               	movf	_Buz1+3,f
 10676  0DA8  1D03               	skipz
 10677  0DA9  2DC8               	goto	l69
 10678                           
 10679                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 10680  0DAA  1DA0               	btfss	_Buz1,3
 10681  0DAB  2DB8               	goto	l70
 10682                           
 10683                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 10684  0DAC  11A0               	bcf	_Buz1,3
 10685                           
 10686                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 10687  0DAD  0824               	movf	_Buz1+4,w
 10688  0DAE  00F4               	movwf	??_Buzzer_Main
 10689  0DAF  0874               	movf	??_Buzzer_Main,w
 10690  0DB0  00A3               	movwf	_Buz1+3
 10691                           
 10692                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 10693  0DB1  0829               	movf	_Buz1+9,w
 10694  0DB2  01A7               	clrf	_Buz1+7
 10695  0DB3  07A7               	addwf	_Buz1+7,f
 10696  0DB4  0828               	movf	_Buz1+8,w
 10697  0DB5  01A6               	clrf	_Buz1+6
 10698  0DB6  07A6               	addwf	_Buz1+6,f
 10699                           
 10700                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 10701  0DB7  0008               	return
 10702  0DB8                     l70:	
 10703  0DB8  1E20               	btfss	_Buz1,4
 10704  0DB9  2DC6               	goto	l72
 10705                           
 10706                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 10707  0DBA  1220               	bcf	_Buz1,4
 10708                           
 10709                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 10710  0DBB  0825               	movf	_Buz1+5,w
 10711  0DBC  00F4               	movwf	??_Buzzer_Main
 10712  0DBD  0874               	movf	??_Buzzer_Main,w
 10713  0DBE  00A3               	movwf	_Buz1+3
 10714                           
 10715                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 10716  0DBF  082B               	movf	_Buz1+11,w
 10717  0DC0  01A7               	clrf	_Buz1+7
 10718  0DC1  07A7               	addwf	_Buz1+7,f
 10719  0DC2  082A               	movf	_Buz1+10,w
 10720  0DC3  01A6               	clrf	_Buz1+6
 10721  0DC4  07A6               	addwf	_Buz1+6,f
 10722                           
 10723                           ;Buzzer_B1.c: 62: } else {
 10724  0DC5  0008               	return
 10725  0DC6                     l72:	
 10726                           
 10727                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 10728  0DC6  10A0               	bcf	_Buz1,1
 10729                           
 10730                           ;Buzzer_B1.c: 64: }
 10731                           ;Buzzer_B1.c: 65: } else {
 10732  0DC7  0008               	return
 10733  0DC8                     l69:	
 10734                           
 10735                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 10736  0DC8  16A0               	bsf	_Buz1,5
 10737                           
 10738                           ;Buzzer_B1.c: 68: RC0 = 1;
 10739  0DC9  1407               	bsf	7,0	;volatile
 10740                           
 10741                           ;Buzzer_B1.c: 69: }
 10742                           ;Buzzer_B1.c: 70: } else {
 10743  0DCA  0008               	return
 10744  0DCB                     l68:	
 10745                           
 10746                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 10747  0DCB  12A0               	bcf	_Buz1,5
 10748                           
 10749                           ;Buzzer_B1.c: 73: RC0 = 0;
 10750  0DCC  1007               	bcf	7,0	;volatile
 10751                           
 10752                           ;Buzzer_B1.c: 75: Buz1.Count--;
 10753  0DCD  3001               	movlw	1
 10754  0DCE  02A3               	subwf	_Buz1+3,f
 10755  0DCF  0008               	return
 10756  0DD0                     __end_of_Buzzer_Main:	
 10757                           
 10758                           	psect	text73
 10759  08EC                     __ptext73:	
 10760 ;; *************** function _Buzzer_Initialization *****************
 10761 ;; Defined at:
 10762 ;;		line 11 in file "../src/Buzzer_B1.c"
 10763 ;; Parameters:    Size  Location     Type
 10764 ;;		None
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;		None
 10767 ;; Return value:  Size  Location     Type
 10768 ;;		None               void
 10769 ;; Registers used:
 10770 ;;		None
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10776 ;;      Params:         0       0       0       0
 10777 ;;      Locals:         0       0       0       0
 10778 ;;      Temps:          0       0       0       0
 10779 ;;      Totals:         0       0       0       0
 10780 ;;Total ram usage:        0 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; Hardware stack levels required when called:    2
 10783 ;; This function calls:
 10784 ;;		Nothing
 10785 ;; This function is called by:
 10786 ;;		_main
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           
 10791                           ;psect for function _Buzzer_Initialization
 10792  08EC                     _Buzzer_Initialization:	
 10793                           
 10794                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 10795                           
 10796                           ;incstack = 0
 10797                           ; Regs used in _Buzzer_Initialization: []
 10798  08EC  1283               	bcf	3,5	;RP0=0, select bank0
 10799  08ED  1303               	bcf	3,6	;RP1=0, select bank0
 10800  08EE  1420               	bsf	_Buz1,0
 10801  08EF  0008               	return
 10802  08F0                     __end_of_Buzzer_Initialization:	
 10803                           
 10804                           	psect	text74
 10805  0AC3                     __ptext74:	
 10806 ;; *************** function _ISR *****************
 10807 ;; Defined at:
 10808 ;;		line 116 in file "../src/MCU_B1.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;		None
 10811 ;; Auto vars:     Size  Location     Type
 10812 ;;		None
 10813 ;; Return value:  Size  Location     Type
 10814 ;;		None               void
 10815 ;; Registers used:
 10816 ;;		wreg, status,2, status,0, pclath, cstack
 10817 ;; Tracked objects:
 10818 ;;		On entry : 0/0
 10819 ;;		On exit  : 0/0
 10820 ;;		Unchanged: 0/0
 10821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10822 ;;      Params:         0       0       0       0
 10823 ;;      Locals:         0       0       0       0
 10824 ;;      Temps:          4       0       0       0
 10825 ;;      Totals:         4       0       0       0
 10826 ;;Total ram usage:        4 bytes
 10827 ;; Hardware stack levels used:    1
 10828 ;; Hardware stack levels required when called:    1
 10829 ;; This function calls:
 10830 ;;		_TMR1_ISR
 10831 ;; This function is called by:
 10832 ;;		Interrupt level 1
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           
 10837                           ;psect for function _ISR
 10838  0AC3                     _ISR:	
 10839                           
 10840                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 10841  0AC3  1683               	bsf	3,5	;RP0=1, select bank1
 10842  0AC4  1303               	bcf	3,6	;RP1=0, select bank1
 10843  0AC5  1C0C               	btfss	12,0	;volatile
 10844  0AC6  2ACE               	goto	i1l515
 10845  0AC7  1283               	bcf	3,5	;RP0=0, select bank0
 10846  0AC8  1303               	bcf	3,6	;RP1=0, select bank0
 10847  0AC9  1C0C               	btfss	12,0	;volatile
 10848  0ACA  2ACE               	goto	i1l515
 10849                           
 10850                           ;MCU_B1.c: 126: TMR1_ISR();
 10851  0ACB  158A  2269  158A   	fcall	_TMR1_ISR
 10852  0ACE                     i1l515:	
 10853                           ;MCU_B1.c: 127: }
 10854                           ;MCU_B1.c: 148: return;
 10855                           
 10856  0ACE  0873               	movf	??_ISR+3,w
 10857  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
 10858  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
 10859  0AD1  00FF               	movwf	127
 10860  0AD2  0872               	movf	??_ISR+2,w
 10861  0AD3  008A               	movwf	10
 10862  0AD4  0871               	movf	??_ISR+1,w
 10863  0AD5  0084               	movwf	4
 10864  0AD6  0E70               	swapf	??_ISR^(0+-128),w
 10865  0AD7  0083               	movwf	3
 10866  0AD8  0EFE               	swapf	126,f
 10867  0AD9  0E7E               	swapf	126,w
 10868  0ADA  0009               	retfie
 10869  0ADB                     __end_of_ISR:	
 10870                           
 10871                           	psect	intentry
 10872  0004                     __pintentry:	
 10873                           ;incstack = 0
 10874                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 10875                           
 10876  0004                     interrupt_function:	
 10877  007E                     saved_w	set	btemp
 10878  0004  00FE               	movwf	btemp
 10879  0005  0E03               	swapf	3,w
 10880  0006  00F0               	movwf	??_ISR
 10881  0007  0804               	movf	4,w
 10882  0008  00F1               	movwf	??_ISR+1
 10883  0009  080A               	movf	10,w
 10884  000A  00F2               	movwf	??_ISR+2
 10885  000B  1283               	bcf	3,5	;RP0=0, select bank0
 10886  000C  1303               	bcf	3,6	;RP1=0, select bank0
 10887  000D  087F               	movf	btemp+1,w
 10888  000E  00F3               	movwf	??_ISR+3
 10889  000F  158A  2AC3         	ljmp	_ISR
 10890                           
 10891                           	psect	text75
 10892  0A69                     __ptext75:	
 10893 ;; *************** function _TMR1_ISR *****************
 10894 ;; Defined at:
 10895 ;;		line 236 in file "../src/MCU_B1.c"
 10896 ;; Parameters:    Size  Location     Type
 10897 ;;		None
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;		None
 10900 ;; Return value:  Size  Location     Type
 10901 ;;		None               void
 10902 ;; Registers used:
 10903 ;;		wreg, status,2
 10904 ;; Tracked objects:
 10905 ;;		On entry : 0/0
 10906 ;;		On exit  : 0/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10909 ;;      Params:         0       0       0       0
 10910 ;;      Locals:         0       0       0       0
 10911 ;;      Temps:          0       0       0       0
 10912 ;;      Totals:         0       0       0       0
 10913 ;;Total ram usage:        0 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; This function calls:
 10916 ;;		Nothing
 10917 ;; This function is called by:
 10918 ;;		_ISR
 10919 ;; This function uses a non-reentrant model
 10920 ;;
 10921                           
 10922                           
 10923                           ;psect for function _TMR1_ISR
 10924  0A69                     _TMR1_ISR:	
 10925                           
 10926                           ;MCU_B1.c: 268: Timer1.Count++;
 10927                           
 10928                           ;incstack = 0
 10929                           ; Regs used in _TMR1_ISR: [wreg+status,2]
 10930  0A69  3001               	movlw	1
 10931  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
 10932  0A6B  1303               	bcf	3,6	;RP1=0, select bank0
 10933  0A6C  07BB               	addwf	_Timer1+1,f
 10934  0A6D  1803               	skipnc
 10935  0A6E  0ABC               	incf	_Timer1+2,f
 10936  0A6F  3000               	movlw	0
 10937  0A70  07BC               	addwf	_Timer1+2,f
 10938                           
 10939                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 10940  0A71  30C8               	movlw	200
 10941  0A72  063B               	xorwf	_Timer1+1,w
 10942  0A73  043C               	iorwf	_Timer1+2,w
 10943  0A74  1D03               	skipz
 10944  0A75  2A79               	goto	i1l4367
 10945                           
 10946                           ;MCU_B1.c: 270: Timer1.Count = 0;
 10947  0A76  01BB               	clrf	_Timer1+1
 10948  0A77  01BC               	clrf	_Timer1+2
 10949                           
 10950                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 10951  0A78  143A               	bsf	_Timer1,0
 10952  0A79                     i1l4367:	
 10953                           
 10954                           ;MCU_B1.c: 272: }
 10955                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 10956  0A79  30FA               	movlw	250
 10957  0A7A  008F               	movwf	15	;volatile
 10958                           
 10959                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 10960  0A7B  3038               	movlw	56
 10961  0A7C  008E               	movwf	14	;volatile
 10962                           
 10963                           ;MCU_B1.c: 276: TMR1IF = 0;
 10964  0A7D  100C               	bcf	12,0	;volatile
 10965  0A7E  0008               	return
 10966  0A7F                     __end_of_TMR1_ISR:	
 10967  007E                     btemp	set	126	;btemp
 10968  007E                     wtemp	set	126
 10969  007E                     wtemp0	set	126
 10970  0080                     wtemp1	set	128
 10971  0082                     wtemp2	set	130
 10972  0084                     wtemp3	set	132
 10973  0086                     wtemp4	set	134
 10974  0088                     wtemp5	set	136
 10975  007F                     wtemp6	set	127
 10976  007E                     ttemp	set	126
 10977  007E                     ttemp0	set	126
 10978  0081                     ttemp1	set	129
 10979  0084                     ttemp2	set	132
 10980  0087                     ttemp3	set	135
 10981  007F                     ttemp4	set	127
 10982  007E                     ltemp	set	126
 10983  007E                     ltemp0	set	126
 10984  0082                     ltemp1	set	130
 10985  0086                     ltemp2	set	134
 10986  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         147
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     25      80
    BANK1            80      0      78
    BANK2            16      0      10

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights2(BANK0[5]), Lights1(BANK0[5]), 

    Sw	PTR struct Switch size(1) Largest target is 5
		 -> NULL(NULL[0]), Sw2(BANK2[5]), Sw1(BANK2[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 


Critical Paths under _main in COMMON

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_setBuz
    _setSw_Main->_SwPointSelect
    _setSw_Main->_getSw_KeyStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _Exception_Main->_getAll_Lights_Line
    _Exception_Main->_setBuz
    _setLights_SwOn->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setLED_Main
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_setBuz
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   28488
                                             20 BANK0      5     1      4
              _Buzzer_Initialization
                        _Buzzer_Main
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1589
                                             11 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     765
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    3060
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1130
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     746
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     601
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    2018
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0    2018
                                             11 BANK0      6     6      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3600
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3600
                                              6 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            11    11      0    2556
                                              6 BANK0     11    11      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2015
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    3492
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    1927
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    1633
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1278
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      93
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      93
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              0 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1298
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1298
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    5613
                                             11 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOn                                       1     1      0     992
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOff                                      1     1      0     961
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _setLights_Trigger                                    3     2      1     586
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0     127
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1143
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1589
                                              5 COMMON     1     1      0
                                              8 BANK0      3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLights_SwOff
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Switch_Initialization
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setLED
         _LedPointSelect
       _setLights_SwOff
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
       _setLights_SwOn
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      B2       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       A       9       62.5%
DATA                 0      0      B2      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Feb 23 10:53:51 2015

              __size_of_Switch_Main 000B                        _WDT_Clearing 0002  
         getMain_Lights_Count@count 0057                                  l60 0E4D  
                                l70 0DB8                                  l72 0DC6  
                                l58 0E3F                                  l68 0DCB  
                                l69 0DC8                        ___awdiv@sign 005C  
                                _Sw 0079                      setTemp_Main@AD 0067  
                                fsr 0004                 ___wmul@multiplicand 0059  
                               l180 0C74                                 l350 0B04  
                               l700 0CEF                                 l701 0D0C  
                               l349 0AFC                                 l383 0CC3  
                               l384 0CC9                                 l705 0D08  
                               l731 05BA                                 l820 020F  
                               l830 01E8                                 l822 0066  
                               l831 01E6                                 l823 0062  
                               l824 005C                                 l836 0192  
                               l952 079F                                 l963 0799  
                               l958 0736                                 _GIE 005F  
                               _RC0 0038                                 _RB2 0032  
                               _LED 0076                                 _RC1 0039  
                               _RB3 0033                                 _RB4 0034  
                               _RA6 002E                                 _RB5 0035  
                               _RA7 002F                                 _RC4 003C  
                               _RC5 003D                                 _RC6 003E  
                               _RC7 003F                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _ISR 0AC3                                 _PSA 040B  
                               _WDT 003D                   ??_setLights_SwOff 0076  
                               _Cmd 003F                                 _Sw1 0120  
                               _Sw2 0125              getAll_Lights_Line@line 0075  
                               fsr0 0004                                 indf 0000  
             _Buzzer_Initialization 08EC                     __end_of_ADC_Set 091D  
         __end_of_LightsPointSelect 0A1A                   ??_getSw_KeyStatus 0074  
                  _getLights_Status 09D3             __size_of_Lights_Control 009A  
                              ?_ISR 0070                          Load_Main@i 0066  
                              l1040 039F                                l1041 0268  
                              l1042 024E                                l1047 026E  
                              l1049 027F                                l1404 0A48  
                              l1280 0975                                l1426 066E  
                              l1428 05F7                                l1544 0BC3  
                              l4121 0E02                      _Load_Main$2716 0061  
                              l4115 0DE7                                l1564 0FFB  
                              l1558 0FB8                                l1591 0AB9  
                              l5113 0E9C                                l1596 09BB  
                              l1597 09C1                                l5109 0E98  
                              l5117 0EA0                                l5301 0FBF  
                              l1694 0B95                                l5065 0A11  
                              l6121 0500                                l5305 0FD2  
                              l5155 07BA                                l5091 0E7D  
                              l5235 0D32                                l6051 0303  
                              l6043 02C5                                l6027 02A2  
                              l5331 0B38                                l5181 07F9  
                              l5173 07E6                                l5165 07C2  
                              l5149 07AF                                l5077 0E6C  
                              l5085 0E74                                l5253 0C4D  
                              l5237 0D37                                l6141 0552  
                              l6133 0536                                l6045 02C6  
                              l5421 0786                                l5167 07D0  
                              l6151 0585                                l6135 0513  
                              l6127 050F                                l5319 0FF7  
                              l6039 02B9                                l5423 0789  
                              l5335 0B3E                                l5177 07F1  
                              l6137 0542                                l6161 05AC  
                              l5281 0F8F                                l3833 0A24  
                              l5433 0798                                l5329 0B35  
                              l3771 0CDF                                l5099 0E85  
                              l6147 0579                                l6059 0317  
                              l6067 0345                                l3843 0A5D  
                              l5621 0C7F                                l3781 0CF3  
                              l6157 05A0                                l6149 0556  
                              l5269 0AA4                                l5525 0C28  
                              l5445 0A4C                                l5461 05E9  
                              l6181 0F26                                l3759 09D1  
                              l5543 06CE                                l5295 0FB4  
                              l6079 0369                                l3847 0A67  
                              l5711 03FC                                l6097 0399  
                              l5449 0A52                                l6193 0F49  
                              l3779 0CEB                                l5547 06DF  
                              l5811 0046                                l5395 0749  
                              l5651 0EC8                                l5723 041D  
                              l5715 0407                                l3789 0D03  
                              l5565 0B8B                                l5477 061A  
                              l5389 0738                                l5397 074C  
                              l5559 0713                                l5903 01C8  
                              l5663 0EE4                                l5743 045D  
                              l5727 0428                                l5719 0412  
                              l5593 0D7A                                l5585 0D56  
                              l5489 0645                                l5753 048B  
                              l5737 0441                                l5587 0D64  
                              l5843 008C                                l5827 0065  
                              l5659 0EDC                                l5597 0D85  
                              l5773 04E1                                l5679 0F00  
                              l5767 04D3                                l5759 04A7  
                              l5695 0BF2                                l5881 0163  
                              l5849 00C8                                l5939 01FC  
                              l5875 0153                                l5957 0BC4  
                              l5893 01AF                                l5885 0184  
                              l5789 0B7F                                l5991 0262  
             _myMain_Initialization 08DC                        __CFG_WDTE$ON 0000  
                              _PEIE 005E                                u4285 0D9C  
                              u3835 0E0E                                u7315 008A  
                              u7325 00C6                                u6630 06CA  
                              u6615 06B6                                u7415 01A7  
                              u7335 011D                                u5905 07E7  
                              u6660 06DB                                u6805 0D7B  
                              u6725 0B96                                u6735 0B9D  
                              u5865 07C5                                u5885 07D1  
                              u6685 06FE                                u6765 0D59  
                              u5895 07DD                                u7815 0355  
                              u5975 0A3B                                u6785 0D65  
                              u7930 053F                                u6795 0D71  
                              u7755 02E4                                u7765 02FC  
                              u6895 0C8F                                u7935 051C  
                              u7855 0386                                u7960 0582  
                              u7785 0330                                u7965 055F  
                              __CDS 0036             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 002C  
                              _Buz1 0020                                __PIR 00A0  
                              _Load 00CA                                _Temp 0042  
                              _main 0F05                                btemp 007E  
                   __end_of_WDT_Set 0995                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0C95  
      __size_of_Temp_Initialization 0003                               ??_ISR 0070  
                 _setLights_Trigger 0B0D                       ??_Lights_Main 0076  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 096B  
                ?_setLights_Trigger 0057                               ?_main 006B  
                   __end_of___awdiv 0800                               _ADRES 001E  
                   ___awdiv@divisor 0057                               _T1CON 0010  
                   __end_of___lwdiv 0D8C                               i1l515 0ACE  
                   ___awdiv@counter 005B                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                      ?_setLED_Main 0070                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0A41                               _Light 0077  
               ??_setLights_Trigger 0058                    __end_of_PIR_Main 03B5  
                  __end_of_TMR1_ISR 0A7F                    __end_of_TMR1_Set 0987  
                             _getAD 0B28      __end_of_setSYSC_Initialization 08F8  
    getLights_Allow_Condition@allow 0057             __end_of_getLight_LoadGO 0903  
                     ??_Buzzer_Main 0074                    __end_of_WDT_Main 09F5  
                     _LightsControl 0040                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 09A4                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0A07  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 0064  
                 getPIR_AD@channel2 005F              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 0063                      _setLights_Main 0BFF  
                    _setLights_Line 0AAC                     __initialization 0013  
                    _setLights_SwOn 0D0E                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0B28                        __end_of_main 0F77  
                  __end_of_Fosc_Set 08FD      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 04E3                           ??_ADC_Set 0074  
                            ??_main 006F               PIR_Main@Enable_Switch 0065  
            ?_Buzzer_Initialization 0070                 __end_of_Lights_Main 0BD4  
        __size_of_LightsPointSelect 0013            _getMain_All_LightsStatus 09C3  
           ??_Switch_Initialization 0074                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 0059  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0CD0  
                            i1l4367 0A79                              _FVRCON 009D  
            getLights_Status@lights 0057                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0ADB  
              Exception_Main@i_2440 0069              getLights_Status@status 0058  
            __end_of_setLights_Main 0C2F              __end_of_setLights_Line 0AC3  
            __end_of_setLights_SwOn 0D4C        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 09B3                 __end_of_Buzzer_Main 0DD0  
                            _Lights 0078                              _Timer1 003A  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 05BB                Exception_Main@lights 0063  
                            ___wmul 0B89                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0066  
                            _setLED 0E5B                              _myMain 0031  
                  ___awdiv@quotient 005D                              _setBuz 0E14  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 0065  
       __end_of_Load_Initialization 08E0     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 005A  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0058  
       getMain_Lights_Count@status2 0059               __end_of_SwPointSelect 0A2D  
                 __end_of_SYSC_Main 08E6                      _Lights_Control 067F  
           __size_of_LedPointSelect 001A                           ?_CDS_Main 0070  
                setTemp_Main@TempGO 0064                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B                          _TouchPower 0A41  
           __end_of__initialization 002A                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                     ?_setLights_SwOn 0070  
                     ?_setSYSC_Main 0070                     _setLights_SwOff 0C2F  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0070  
          __end_of_getLights_Status 09E4                       __end_of_getAD 0B44  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 0953  
                   _getSw_KeyStatus 0A55                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0BAE            _setLights_Initialization 090F  
              _getMain_Lights_Count 0995                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0217          __end_of_set_TimeoutCleared 090F  
               ?_LED_Initialization 0070              __end_of_Lights_Control 0719  
              __size_of_setLED_Main 003B                             ??_getAD 0075  
               _Temp_Initialization 08E6                          ??_CDS_Main 0057  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                        __pbssBANK2 0120                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0010                         _Buzzer_Main 0D8C  
                 __end_of_Temp_Main 08EC                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0062  
                        ??_LED_Main 0076                      ??_setSYSC_Main 0075  
                     ??_Switch_Main 0076                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                         setBuz@count 0061  
                        __pmaintext 0F05          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                PIR_Main@LightsStatus 0067  
                           ?___wmul 0057                          ??_PIR_Main 005D  
                        ??_TMR1_ISR 0070                       ?_setTemp_Main 0070  
                __size_of_setLights 0089                          _getLoad_AD 0EA9  
                        ??_TMR1_Set 0074                          __pintentry 0004  
                        _getLoad_OK 0925                             ?_setLED 0057  
           setLights_Trigger@lights 0059               ?_getMain_Lights_Count 0070  
                           _ADC_Set 0916                             ?_setBuz 005F  
                        _getTemp_AD 0BD4                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0B66                             _WDT_Set 0987  
                     getPIR_AD@VRAD 0066                          ??_Fosc_Set 0074  
                       ?_TouchPower 0070                   __end_of_getPIR_AD 04E3  
           ??_setLoad_AH_AL_Restore 0074             __end_of_setLights_SwOff 0C61  
    _getLights_Allow_Condition$4827 0058                     __size_of_IO_Set 0018  
                        getCDS_AD@i 005A                          getCDS_AD@j 005B  
                           _Lights1 0049                             _Lights2 004E  
                           _VarLED1 00E6                             _VarLED2 00EA  
           __end_of_getSw_KeyStatus 0A69               ??_Temp_Initialization 0074  
                    ??_setTemp_Main 0062                             ___awdiv 07A3  
                   __size_of___wmul 0025                 __end_of_Switch_Main 0953  
                           ___lwdiv 0D4C          ??_getMain_All_LightsStatus 0074  
           ??_Buzzer_Initialization 0074                         PIR_Main@cds 0062  
                   __size_of_setLED 004E                     __size_of_setBuz 0047  
                           __ptext0 0000                             __ptext1 0B66  
                           __ptext2 08DC                             __ptext3 0BD4  
                           __ptext4 03B5                             __ptext5 0EA9  
                           __ptext6 0B44                             __ptext7 0B28  
                           __ptext8 09E4                             __ptext9 0002  
                        getPIR_AD@i 0067                          getPIR_AD@j 0063  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 08E0             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0AF3  
                   getTemp_AD@ADRES 005A                             clrloop0 0936  
    __size_of_Switch_Initialization 0001       __end_of_Switch_Initialization 08DB  
                 __end_of_setLights 1000                end_of_initialization 002A  
                        _setSw_Main 05BB                       _getCDS_Status 092D  
              ?_SYSC_Initialization 0070               _setLED_Initialization 09F5  
                 setLights_SwOff@sw 005A                         ?_getLoad_AD 0070  
    __size_of_Lights_Initialization 0008                         ?_getLoad_OK 0070  
            ??_getMain_Lights_Count 0074       __end_of_Lights_Initialization 0925  
                       ?_getTemp_AD 0070                 __size_of_TouchPower 0014  
          setLED_Initialization@led 0059             setTemp_Main@DangerValue 0066  
                _Mcu_Initialization 09A4                __end_of_my_MainTimer 0B89  
              __end_of_setSYSC_Main 0E14              __end_of_LedPointSelect 0B0D  
          Load_Main@ErrorCountValue 0063                 ?_Mcu_Initialization 0070  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 005C                    ??_setLights_SwOn 0076  
                         _SYSC_Main 08E3     getMain_All_Error_Status@command 005B  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
                  ?_setLights_SwOff 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 0062                      __end_of_IO_Set 0AF3  
        __end_of_CDS_Initialization 08F4                         _Switch_Main 0948  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 000C  
                  ?_getSw_KeyStatus 0070                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0BAE  
                 getSw_KeyStatus@sw 0075                   __size_of_PIR_Main 019E  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 0EA9  
                    __end_of_setBuz 0E5B            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 002D                         __end_of_ISR 0ADB  
        __end_of_PIR_Initialization 0948        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0909     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 07A3  
               __size_of_getLoad_AD 005C                        ?_Buzzer_Main 0070  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0909                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                           _VarErrLED 0053  
                       ?_setSw_Main 0070                 __size_of_getTemp_AD 002B  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 08E9  
                   setLights@lights 005B                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0064                     setLights@status 0059  
               Exception_Main@error 0065                            ??___wmul 0074  
            __size_of_SwPointSelect 0013    __end_of_getMain_All_LightsStatus 09D3  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 005F                            ??_setBuz 0075  
  __end_of_getMain_All_Error_Status 0D0E                       ??_setLED_Main 0057  
                       __pbssCOMMON 0076             Load_Main@Load_RunStatus 0064  
                         ___latbits 0001                          ?_Load_Main 0070  
                     __pcstackBANK0 0057                ??_set_TimeoutCleared 0074  
        __end_of_getAll_Lights_Line 09C3                            ?_WDT_Set 0070  
                   ??_getCDS_Status 0074                        ??_TouchPower 0074  
                     PIR_Main@error 0061                           _getCDS_AD 0B44  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0A95  
                         _getPIR_AD 03B5         __size_of_LED_Initialization 000C  
                   Exception_Main@i 0067                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0059                          setBuz@time 005F  
                    Load_Main@error 0060              _setTemp_Initialization 08DB  
                     _PIR_Main$3238 0063                            ?___awdiv 0057  
             __size_of_my_MainTimer 0023                            ?___lwdiv 0057  
             __size_of_setSYSC_Main 0044      __size_of_Buzzer_Initialization 0004  
     __end_of_Buzzer_Initialization 08F0                  __end_of_TouchPower 0A55  
          setLights_Trigger@command 0057                 __size_of_setSw_Main 00C4  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0A95  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 08DD  
                    __size_of_getAD 001C                    ___lwdiv@quotient 005C  
                     _SwPointSelect 0A1A                            _CDS_Main 0C61  
               __end_of_setLED_Main 0CD0                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 08E9                   interrupt_function 0004  
                        ?_getCDS_AD 0057                      ___wmul@product 0074  
                          _LED_Main 095F                           _setLights 0F77  
                   SwPointSelect@sw 0075                           clear_ram0 0935  
  __end_of_setLights_Initialization 0916                        _my_MainTimer 0B66  
                        ?_getPIR_AD 005F                        _setSYSC_Main 0DD0  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
              PIR_Main@TriggerValue 0066                            _PIR_Main 0217  
                      ??_getLoad_AD 0057                            _TMR1_ISR 0A69  
                      ??_getLoad_OK 0074                _getLight_Load_Status 0903  
                          _TMR1_Set 0979                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 0057                            _WDT_Main 09E4  
             getSw_KeyStatus@status 0074                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 0057                      getPIR_AD@VRAD1 0065  
              __size_of_Lights_Main 0026               __size_of_setTemp_Main 008A  
                      setSw_Main@sw 005F                         ??_Load_Main 005E  
    getMain_All_Error_Status@status 005C                      ?_SwPointSelect 0070  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
                    setLED_Main@led 0059                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0010           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 08F8                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0F05                  __end_of_getLoad_OK 092D  
             _Switch_Initialization 08DA   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                __size_of_Buzzer_Main 0044  
                        ?_setLights 0059                  __end_of_getTemp_AD 0BFF  
            _setSYSC_Initialization 08F4                        ?_Switch_Main 0070  
                 getLoad_AD@channel 0059                   _DetectSYSC_Signal 096B  
                          _SwDetect 0041                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2426 0057       _getMain_All_Error_Status$2427 0059  
               _Load_Initialization 08DD                  ?_DetectSYSC_Signal 0070  
                         setLED@led 0058               ?_getLight_Load_Status 0070  
                      _setTemp_Main 0719                    __size_of___awdiv 005D  
    getLight_Load_Status@loadstatus 0074                    __size_of___lwdiv 0040  
                  ??_LedPointSelect 0074       __size_of_getMain_Lights_Count 000F  
               ??_DetectSYSC_Signal 0074                  _CDS_Initialization 08F0  
             _Lights_Initialization 091D                   getTemp_AD@channel 0059  
                       _setLED_Main 0C95                     ___lwdiv@divisor 0057  
              ?_Load_Initialization 0070                 ?_CDS_Initialization 0070  
                   ___lwdiv@counter 005B                            __ptext10 08E9  
                          __ptext11 0719                            __ptext20 0A2D  
                          __ptext12 08E6                            __ptext21 08DA  
                          __ptext13 08DB                            __ptext30 0987  
                          __ptext22 08E3                            __ptext14 0948  
                          __ptext31 0979                            __ptext23 0DD0  
                          __ptext15 05BB                            __ptext40 0D4C  
                          __ptext32 0ADB                            __ptext24 08E0  
                          __ptext16 0A55                            __ptext41 08DD  
                          __ptext33 08F8                            __ptext25 08F4  
                          __ptext17 0A1A                            __ptext50 091D  
                          __ptext42 0A7F                            __ptext34 0916  
                          __ptext26 0217                            __ptext18 0A41  
                          __ptext51 090F                            __ptext43 0BAE  
                          __ptext35 002D                            __ptext27 092D  
                          __ptext19 0909                            __ptext60 09D3  
                          __ptext52 095F                            __ptext44 0BFF  
                          __ptext36 0995                            __ptext28 093D  
                          __ptext61 0A07                            __ptext53 0C95  
                          __ptext45 0F77                            __ptext37 0903  
                          __ptext29 09A4                            __ptext70 0C61  
                          __ptext62 0E5B                            __ptext54 0953  
                          __ptext46 0AAC                            __ptext38 08FD  
                          __ptext71 08F0                            __ptext63 0AF3  
                          __ptext55 09F5                            __ptext47 0A95  
                          __ptext39 0B89                            __ptext72 0D8C  
                          __ptext64 0E14                            __ptext56 04E3  
                          __ptext48 0925                            __ptext73 08EC  
                          __ptext65 07A3                            __ptext57 0D0E  
                          __ptext49 067F                            __ptext74 0AC3  
                          __ptext66 09C3                            __ptext58 0C2F  
                          __ptext75 0A69                            __ptext67 0CD0  
                          __ptext59 0B0D                            __ptext68 09B3  
                          __ptext69 096B           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 08E3             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0058                        ??_setSw_Main 005D  
                     setLED@command 0057           __end_of_DetectSYSC_Signal 0979  
                     __size_of_main 0072                         ??_getPIR_AD 0060  
                _PIR_Initialization 093D                ??_CDS_Initialization 0074  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 0032  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 006B                            main@argv 006D  
          __size_of_getSw_KeyStatus 0014   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070                     ??_SwPointSelect 0074  
                __end_of_setSw_Main 067F               ??_Load_Initialization 0076  
              Lights_Control@lights 0061                ??_PIR_Initialization 0074  
                          intlevel1 0000              ?_Switch_Initialization 0070  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0065  
                       ??_setLights 005A             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 09B3  
                   getLoad_AD@ADRES 005C              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 005D                         getLoad_AD@j 005B  
                       getLoad_AD@k 005A             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 0017             __size_of_setLights_SwOn 003E  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 00D8  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 0057  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0A07  
              ??_getAll_Lights_Line 0074                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0A2D  
        __end_of_LED_Initialization 095F               __end_of_getCDS_Status 0935  
    __end_of_setTemp_Initialization 08DC          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 08FD                   getCDS_AD@channel1 005C  
                 getCDS_AD@channel2 0057   __end_of_getLights_Allow_Condition 0AAC  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0A7F  
